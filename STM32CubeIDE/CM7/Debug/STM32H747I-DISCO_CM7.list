
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000231d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002814  08023478  08023478  00033478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000a34  08025c8c  08025c8c  00035c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000074  080266c0  080266c0  000366c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000014c  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08026734  08026734  001c714c  2**0
                  CONTENTS
  8 .ARM          00000000  08026734  08026734  001c714c  2**0
                  CONTENTS
  9 .preinit_array 00000000  08026734  08026734  001c714c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08026734  08026734  00036734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802674c  0802674c  0003674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000011c  24000000  08026754  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000f3b0  2400011c  08026870  0004011c  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2400f4cc  08026870  0004f4cc  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c714c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0011a834  00000000  00000000  001c717a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017a8e  00000000  00000000  002e19ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003970  00000000  00000000  002f9440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000d3e0  00000000  00000000  002fcdb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00051563  00000000  00000000  0030a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00069f83  00000000  00000000  0035b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001df44d  00000000  00000000  003c5676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  005a4ac3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a824  00000000  00000000  005a4b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0004d941  00000000  00000000  005af3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802345c 	.word	0x0802345c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	0802345c 	.word	0x0802345c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	; (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00f b82c 	b.w	800f758 <vTaskSetApplicationTaskTag>
 8000700:	08001e29 	.word	0x08001e29

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	; 0x24
 800070e:	f021 fe43 	bl	8022398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f021 fe3e 	bl	8022398 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00b fa6f 	bl	800bc00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xcc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800075a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2301      	movs	r3, #1
 8000778:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000790:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f00b fd23 	bl	800c1dc <HAL_RCC_OscConfig>
 8000796:	b108      	cbz	r0, 800079c <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	e7fe      	b.n	800079a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	f00c f8b3 	bl	800c920 <HAL_RCC_ClockConfig>
 80007ba:	4601      	mov	r1, r0
 80007bc:	b108      	cbz	r0, 80007c2 <SystemClock_Config+0xbe>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c6:	f00b ffbd 	bl	800c744 <HAL_RCC_MCOConfig>
}
 80007ca:	b01d      	add	sp, #116	; 0x74
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400

080007dc <main>:
{
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e2:	2210      	movs	r2, #16
 80007e4:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007ea:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ec:	f021 fdd4 	bl	8022398 <memset>
  HAL_MPU_Disable();
 80007f0:	f009 fca2 	bl	800a138 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007f4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 80007f8:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fc:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000800:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000802:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000806:	f009 fcb5 	bl	800a174 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800080a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800080e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000812:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000816:	f009 fcad 	bl	800a174 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800081a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800081e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000822:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000826:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800082a:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800082c:	2318      	movs	r3, #24
 800082e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000832:	f009 fc9f 	bl	800a174 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000836:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000838:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800083a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800083e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000842:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000844:	2312      	movs	r3, #18
 8000846:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	f009 fc90 	bl	800a174 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800085a:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800085e:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000860:	2311      	movs	r3, #17
 8000862:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	f009 fc85 	bl	800a174 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800086a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800086e:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000872:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <main+0x300>)
 8000878:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800087a:	230e      	movs	r3, #14
 800087c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000880:	f009 fc78 	bl	800a174 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000884:	4628      	mov	r0, r5
 8000886:	f009 fc65 	bl	800a154 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800088a:	4b95      	ldr	r3, [pc, #596]	; (8000ae0 <main+0x304>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000892:	d111      	bne.n	80008b8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800089c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b8:	4a89      	ldr	r2, [pc, #548]	; (8000ae0 <main+0x304>)
 80008ba:	6953      	ldr	r3, [r2, #20]
 80008bc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008c0:	d123      	bne.n	800090a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008da:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008dc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80008ec:	d2f9      	bcs.n	80008e2 <main+0x106>
    } while(sets-- != 0U);
 80008ee:	3b20      	subs	r3, #32
 80008f0:	f113 0f20 	cmn.w	r3, #32
 80008f4:	d1f2      	bne.n	80008dc <main+0x100>
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fa:	6953      	ldr	r3, [r2, #20]
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000906:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	4d75      	ldr	r5, [pc, #468]	; (8000ae4 <main+0x308>)
 8000910:	682c      	ldr	r4, [r5, #0]
 8000912:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000916:	f000 82b0 	beq.w	8000e7a <main+0x69e>
 800091a:	3b01      	subs	r3, #1
 800091c:	d1f8      	bne.n	8000910 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x144>
 8000922:	b672      	cpsid	i
 8000924:	e7fe      	b.n	8000924 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000926:	f009 f897 	bl	8009a58 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800092a:	4640      	mov	r0, r8
 800092c:	f009 f8e2 	bl	8009af4 <BSP_SDRAM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	b108      	cbz	r0, 8000938 <main+0x15c>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <main+0x30c>)
 800093a:	4a6c      	ldr	r2, [pc, #432]	; (8000aec <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800093e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000940:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000944:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000948:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800094c:	f00b fa6c 	bl	800be28 <HAL_QSPI_Init>
 8000950:	b108      	cbz	r0, 8000956 <main+0x17a>
 8000952:	b672      	cpsid	i
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000956:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000958:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800095c:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000960:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000964:	f008 febe 	bl	80096e4 <BSP_QSPI_Init>
 8000968:	b108      	cbz	r0, 800096e <main+0x192>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800096e:	f008 fe65 	bl	800963c <BSP_QSPI_EnableMemoryMappedMode>
 8000972:	4603      	mov	r3, r0
 8000974:	b108      	cbz	r0, 800097a <main+0x19e>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800097a:	485d      	ldr	r0, [pc, #372]	; (8000af0 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800097c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000980:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000afc <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 8000984:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000988:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800098c:	f009 fc7e 	bl	800a28c <HAL_DMA2D_Init>
 8000990:	4605      	mov	r5, r0
 8000992:	b108      	cbz	r0, 8000998 <main+0x1bc>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000998:	4602      	mov	r2, r0
 800099a:	4631      	mov	r1, r6
 800099c:	4855      	ldr	r0, [pc, #340]	; (8000af4 <main+0x318>)
 800099e:	f00a fb21 	bl	800afe4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009a2:	2014      	movs	r0, #20
 80009a4:	f009 fb4a 	bl	800a03c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009a8:	4631      	mov	r1, r6
 80009aa:	4622      	mov	r2, r4
 80009ac:	4851      	ldr	r0, [pc, #324]	; (8000af4 <main+0x318>)
 80009ae:	f00a fb19 	bl	800afe4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009b2:	200a      	movs	r0, #10
 80009b4:	f009 fb42 	bl	800a03c <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009b8:	2224      	movs	r2, #36	; 0x24
 80009ba:	4629      	mov	r1, r5
 80009bc:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80009be:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009c0:	f021 fcea 	bl	8022398 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009c4:	2218      	movs	r2, #24
 80009c6:	4629      	mov	r1, r5
 80009c8:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 80009ca:	4e4b      	ldr	r6, [pc, #300]	; (8000af8 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009cc:	f021 fce4 	bl	8022398 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	4629      	mov	r1, r5
 80009d4:	a82d      	add	r0, sp, #180	; 0xb4
 80009d6:	f021 fcdf 	bl	8022398 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009da:	4629      	mov	r1, r5
 80009dc:	222c      	movs	r2, #44	; 0x2c
 80009de:	a820      	add	r0, sp, #128	; 0x80
 80009e0:	f021 fcda 	bl	8022398 <memset>
  hdsi.Instance = DSI;
 80009e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009e8:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009ec:	a90e      	add	r1, sp, #56	; 0x38
 80009ee:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009f0:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009f4:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009f6:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a00:	f009 fd90 	bl	800a524 <HAL_DSI_Init>
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x22e>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a0a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a0e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a12:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a16:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 8000a1a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a1c:	a917      	add	r1, sp, #92	; 0x5c
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f009 ffac 	bl	800a97c <HAL_DSI_ConfigHostTimeouts>
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x24e>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a2a:	2321      	movs	r3, #33	; 0x21
 8000a2c:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a2e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a30:	a911      	add	r1, sp, #68	; 0x44
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a34:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a38:	2319      	movs	r3, #25
 8000a3a:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a3e:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 8000a40:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a44:	f009 ff5d 	bl	800a902 <HAL_DSI_ConfigPhyTimer>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x272>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <main+0x31c>)
 8000a52:	f009 ff45 	bl	800a8e0 <HAL_DSI_ConfigFlowControl>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x280>
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a5c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x31c>)
 8000a62:	f00a f915 	bl	800ac90 <HAL_DSI_SetLowPowerRXFilter>
 8000a66:	4601      	mov	r1, r0
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x292>
 8000a6a:	b672      	cpsid	i
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a6e:	4822      	ldr	r0, [pc, #136]	; (8000af8 <main+0x31c>)
 8000a70:	f009 fcf6 	bl	800a460 <HAL_DSI_ConfigErrorMonitor>
 8000a74:	b108      	cbz	r0, 8000a7a <main+0x29e>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a7a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a9e:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aa2:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000aaa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aae:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ab6:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab8:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ac2:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ace:	f009 fed3 	bl	800a878 <HAL_DSI_ConfigCommand>
 8000ad2:	b1a8      	cbz	r0, 8000b00 <main+0x324>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x2fa>
 8000ad8:	0300001b 	.word	0x0300001b
 8000adc:	10040000 	.word	0x10040000
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	240002bc 	.word	0x240002bc
 8000aec:	52005000 	.word	0x52005000
 8000af0:	24000190 	.word	0x24000190
 8000af4:	58021800 	.word	0x58021800
 8000af8:	240001f8 	.word	0x240001f8
 8000afc:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000b00:	2305      	movs	r3, #5
 8000b02:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b06:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000b08:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b0a:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b0c:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000b0e:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b12:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b14:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b18:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b1a:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b1e:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b22:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <main+0x490>)
 8000b28:	f009 fe34 	bl	800a794 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	b108      	cbz	r0, 8000b34 <main+0x358>
 8000b30:	b672      	cpsid	i
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b34:	484d      	ldr	r0, [pc, #308]	; (8000c6c <main+0x490>)
 8000b36:	f009 fe1c 	bl	800a772 <HAL_DSI_SetGenericVCID>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b108      	cbz	r0, 8000b42 <main+0x366>
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	4601      	mov	r1, r0
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000b48:	4d49      	ldr	r5, [pc, #292]	; (8000c70 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4a:	f021 fc25 	bl	8022398 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b4e:	4849      	ldr	r0, [pc, #292]	; (8000c74 <main+0x498>)
 8000b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b54:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 8000b58:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 8000b5c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8000b5e:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 8000b62:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b66:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b70:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b74:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000b78:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b7c:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b80:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8000b84:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000b88:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b8c:	f00a fe74 	bl	800b878 <HAL_LTDC_Init>
 8000b90:	b108      	cbz	r0, 8000b96 <main+0x3ba>
 8000b92:	b672      	cpsid	i
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x3b8>
  pLayerCfg.Alpha = 255;
 8000b96:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000ba0:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000ba2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000ba6:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000baa:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000bac:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bb6:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bba:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000bbc:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000bc0:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bc8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bcc:	f00a ff20 	bl	800ba10 <HAL_LTDC_ConfigLayer>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	b108      	cbz	r0, 8000bd8 <main+0x3fc>
 8000bd4:	b672      	cpsid	i
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bd8:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bdc:	6993      	ldr	r3, [r2, #24]
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000be4:	f009 ff30 	bl	800aa48 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000be8:	4923      	ldr	r1, [pc, #140]	; (8000c78 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bec:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bee:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <main+0x4a8>)
  IOCtx.Address     = 0;
 8000bf2:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf4:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x4ac>)
 8000bf8:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bfa:	f008 fb13 	bl	8009224 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bfe:	4632      	mov	r2, r6
 8000c00:	4621      	mov	r1, r4
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <main+0x4a4>)
 8000c04:	f007 ff6a 	bl	8008adc <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <main+0x490>)
 8000c10:	9400      	str	r4, [sp, #0]
 8000c12:	f009 ff4c 	bl	800aaae <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c16:	a92d      	add	r1, sp, #180	; 0xb4
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c1a:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c1c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c20:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c24:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c28:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c2c:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c30:	f009 fe22 	bl	800a878 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c38:	4622      	mov	r2, r4
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f00a ff16 	bl	800ba6c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c4a:	f000 fcbd 	bl	80015c8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4e:	f000 fcba 	bl	80015c6 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c52:	f00d f8f9 	bl	800de48 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <main+0x4b0>)
 8000c58:	4621      	mov	r1, r4
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <main+0x4b4>)
 8000c5c:	f00d f920 	bl	800dea0 <osThreadNew>
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x4b8>)
 8000c62:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c64:	f00d f902 	bl	800de6c <osKernelStart>
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x48c>
 8000c6a:	bf00      	nop
 8000c6c:	240001f8 	.word	0x240001f8
 8000c70:	24000214 	.word	0x24000214
 8000c74:	50001000 	.word	0x50001000
 8000c78:	24000138 	.word	0x24000138
 8000c7c:	0800960d 	.word	0x0800960d
 8000c80:	24000148 	.word	0x24000148
 8000c84:	08001b5d 	.word	0x08001b5d
 8000c88:	08001b95 	.word	0x08001b95
 8000c8c:	080234c8 	.word	0x080234c8
 8000c90:	080015d7 	.word	0x080015d7
 8000c94:	24000168 	.word	0x24000168
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2214      	movs	r2, #20
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f021 fb7a 	bl	8022398 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cb2:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cbe:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	9307      	str	r3, [sp, #28]
 8000d12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	9308      	str	r3, [sp, #32]
 8000d2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d40:	9309      	str	r3, [sp, #36]	; 0x24
 8000d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	930a      	str	r3, [sp, #40]	; 0x28
 8000d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	930c      	str	r3, [sp, #48]	; 0x30
 8000d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	930d      	str	r3, [sp, #52]	; 0x34
 8000da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000da6:	f00a f91d 	bl	800afe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2108      	movs	r1, #8
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <main+0x6e8>)
 8000db0:	f00a f918 	bl	800afe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dba:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x6ec>)
 8000dbc:	f00a f912 	bl	800afe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000dc6:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <main+0x6e4>)
 8000dc8:	f00a f90c 	bl	800afe4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dd0:	a92d      	add	r1, sp, #180	; 0xb4
 8000dd2:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ddc:	f009 ff6e 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	a92d      	add	r1, sp, #180	; 0xb4
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000de6:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f009 ff64 	bl	800acbc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000df4:	a92d      	add	r1, sp, #180	; 0xb4
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f009 ff5c 	bl	800acbc <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a92d      	add	r1, sp, #180	; 0xb4
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f009 ff54 	bl	800acbc <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <main+0x6f4>)
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e18:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000e1a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e1c:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e22:	f009 f9d3 	bl	800a1cc <HAL_CRC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f47f ad7a 	bne.w	8000922 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e2e:	492a      	ldr	r1, [pc, #168]	; (8000ed8 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e30:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e34:	680a      	ldr	r2, [r1, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e3c:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e40:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e42:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e46:	2220      	movs	r2, #32
 8000e48:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e4c:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e52:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e56:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e5a:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e5c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e60:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e64:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e68:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e6a:	f00c fd11 	bl	800d890 <HAL_SDRAM_Init>
 8000e6e:	4680      	mov	r8, r0
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f43f ad58 	beq.w	8000926 <main+0x14a>
 8000e76:	b672      	cpsid	i
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x69c>
  HAL_Init();
 8000e7a:	f009 f89f 	bl	8009fbc <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff fc41 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e86:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e9c:	f00a f8b0 	bl	800b000 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f00a f8ba 	bl	800b01c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ea8:	4c0e      	ldr	r4, [pc, #56]	; (8000ee4 <main+0x708>)
 8000eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	f53f aef1 	bmi.w	8000c98 <main+0x4bc>
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	d1f9      	bne.n	8000eae <main+0x6d2>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x6e0>
 8000ebe:	bf00      	nop
 8000ec0:	58022400 	.word	0x58022400
 8000ec4:	58021800 	.word	0x58021800
 8000ec8:	58021400 	.word	0x58021400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	2400016c 	.word	0x2400016c
 8000ed4:	58024c00 	.word	0x58024c00
 8000ed8:	52004000 	.word	0x52004000
 8000edc:	24000308 	.word	0x24000308
 8000ee0:	52004140 	.word	0x52004140
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d101      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ef0:	f009 b892 	b.w	800a018 <HAL_IncTick>
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <Error_Handler+0x2>

08000f00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x2c>)
{
 8000f02:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	f009 b8b3 	b.w	800a090 <HAL_NVIC_SetPriority>
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f30:	6802      	ldr	r2, [r0, #0]
{
 8000f32:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_CRC_MspInit+0x2c>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10d      	bne.n	8000f56 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58024c00 	.word	0x58024c00

08000f60 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_DMA2D_MspInit+0x40>)
{
 8000f62:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d117      	bne.n	8000f9a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f74:	f042 0210 	orr.w	r2, r2, #16
 8000f78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f7c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f8a:	f009 f881 	bl	800a090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f8e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f90:	b003      	add	sp, #12
 8000f92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f96:	f009 b8ad 	b.w	800a0f4 <HAL_NVIC_EnableIRQ>
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa0:	52001000 	.word	0x52001000
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	b0ba      	sub	sp, #232	; 0xe8
 8000fac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	a803      	add	r0, sp, #12
 8000fb4:	f021 f9f0 	bl	8022398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	a808      	add	r0, sp, #32
 8000fbe:	f021 f9eb 	bl	8022398 <memset>
  if(hdsi->Instance==DSI)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc8:	d138      	bne.n	800103c <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fce:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f00b ff29 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	b108      	cbz	r0, 8000fe0 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000fdc:	f7ff ff8e 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fe4:	a903      	add	r1, sp, #12
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000fec:	f042 0210 	orr.w	r2, r2, #16
 8000ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ff4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ff8:	f002 0210 	and.w	r2, r2, #16
 8000ffc:	9201      	str	r2, [sp, #4]
 8000ffe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001020:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001026:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001028:	f009 fe48 	bl	800acbc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800102c:	207b      	movs	r0, #123	; 0x7b
 800102e:	4622      	mov	r2, r4
 8001030:	2107      	movs	r1, #7
 8001032:	f009 f82d 	bl	800a090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001036:	207b      	movs	r0, #123	; 0x7b
 8001038:	f009 f85c 	bl	800a0f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800103c:	b03a      	add	sp, #232	; 0xe8
 800103e:	bd10      	pop	{r4, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	58022400 	.word	0x58022400

08001048 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b0b4      	sub	sp, #208	; 0xd0
 800104c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104e:	22c8      	movs	r2, #200	; 0xc8
 8001050:	2100      	movs	r1, #0
 8001052:	a802      	add	r0, sp, #8
 8001054:	f021 f9a0 	bl	8022398 <memset>
  if(hltdc->Instance==LTDC)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_LTDC_MspInit+0x74>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d12b      	bne.n	80010b8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001060:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001064:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001066:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800106e:	23a1      	movs	r3, #161	; 0xa1
 8001070:	2205      	movs	r2, #5
 8001072:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001076:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001078:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800107c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001080:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f00b fed2 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 8001088:	b108      	cbz	r0, 800108e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800108a:	f7ff ff37 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001094:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001098:	f042 0208 	orr.w	r2, r2, #8
 800109c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010a0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010ae:	f008 ffef 	bl	800a090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f009 f81e 	bl	800a0f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010b8:	b034      	add	sp, #208	; 0xd0
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	50001000 	.word	0x50001000
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0bf      	sub	sp, #252	; 0xfc
 80010c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	a807      	add	r0, sp, #28
 80010d0:	f021 f962 	bl	8022398 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	22c8      	movs	r2, #200	; 0xc8
 80010d6:	2100      	movs	r1, #0
 80010d8:	a80c      	add	r0, sp, #48	; 0x30
 80010da:	f021 f95d 	bl	8022398 <memset>
  if(hqspi->Instance==QUADSPI)
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_QSPI_MspInit+0x16c>)
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f040 80a1 	bne.w	800122a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f00b fe9a 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	b108      	cbz	r0, 80010fe <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80010fa:	f7ff feff 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001104:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001106:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	a907      	add	r1, sp, #28
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800110e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001114:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001118:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800111c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001134:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114c:	f002 0220 	and.w	r2, r2, #32
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001164:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001168:	9204      	str	r2, [sp, #16]
 800116a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001170:	f042 0202 	orr.w	r2, r2, #2
 8001174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117c:	f002 0202 	and.w	r2, r2, #2
 8001180:	9205      	str	r2, [sp, #20]
 8001182:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011a0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011aa:	f009 fd87 	bl	800acbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ae:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	a907      	add	r1, sp, #28
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011b4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011be:	f009 fd7d 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c4:	a907      	add	r1, sp, #28
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f009 fd73 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011da:	a907      	add	r1, sp, #28
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011de:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f009 fd68 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ec:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ee:	a907      	add	r1, sp, #28
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011fc:	f009 fd5e 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	a907      	add	r1, sp, #28
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001206:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f009 fd54 	bl	800acbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001214:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	a907      	add	r1, sp, #28
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f009 fd49 	bl	800acbc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800122a:	b03f      	add	sp, #252	; 0xfc
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	52005000 	.word	0x52005000
 8001234:	58024400 	.word	0x58024400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021400 	.word	0x58021400
 8001240:	58021c00 	.word	0x58021c00
 8001244:	58020400 	.word	0x58020400
 8001248:	58020c00 	.word	0x58020c00

0800124c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001250:	2100      	movs	r1, #0
 8001252:	2214      	movs	r2, #20
 8001254:	a801      	add	r0, sp, #4
 8001256:	f021 f89f 	bl	8022398 <memset>
  if (FMC_Initialized) {
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_SDRAM_MspInit+0xf8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	2900      	cmp	r1, #0
 8001260:	d16d      	bne.n	800133e <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001262:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001266:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	f021 f895 	bl	8022398 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001276:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f00b fdd7 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 800127e:	b108      	cbz	r0, 8001284 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001280:	f7ff fe3c 	bl	8000efc <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2600      	movs	r6, #0
 800128a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800128c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001292:	a901      	add	r1, sp, #4
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800129a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800129e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b8:	f009 fd00 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012bc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	a901      	add	r1, sp, #4
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f009 fcf5 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80012d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d6:	a901      	add	r1, sp, #4
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e4:	f009 fcea 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012e8:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fa:	f009 fcdf 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	a901      	add	r1, sp, #4
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001306:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f009 fcd4 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001314:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a901      	add	r1, sp, #4
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f009 fcc9 	bl	800acbc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	a901      	add	r1, sp, #4
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f009 fcbf 	bl	800acbc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800133e:	b039      	add	sp, #228	; 0xe4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	bf00      	nop
 8001344:	24000340 	.word	0x24000340
 8001348:	58024400 	.word	0x58024400
 800134c:	58022000 	.word	0x58022000
 8001350:	58021000 	.word	0x58021000
 8001354:	58021c00 	.word	0x58021c00
 8001358:	58021800 	.word	0x58021800
 800135c:	58020c00 	.word	0x58020c00
 8001360:	58021400 	.word	0x58021400
 8001364:	58020800 	.word	0x58020800

08001368 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001368:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SDRAM_MspDeInit+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	bb62      	cbnz	r2, 80013ca <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001370:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001372:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001378:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_SDRAM_MspDeInit+0x6c>)
 800137c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001384:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001388:	f009 fd84 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800138c:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <HAL_SDRAM_MspDeInit+0x70>)
 8001392:	f009 fd7f 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001396:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_SDRAM_MspDeInit+0x74>)
 800139c:	f009 fd7a 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013a0:	f248 1131 	movw	r1, #33073	; 0x8131
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_SDRAM_MspDeInit+0x78>)
 80013a6:	f009 fd75 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013aa:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_SDRAM_MspDeInit+0x7c>)
 80013b0:	f009 fd70 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013b4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_SDRAM_MspDeInit+0x80>)
 80013ba:	f009 fd6b 	bl	800ae94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013be:	210d      	movs	r1, #13
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013c6:	f009 bd65 	b.w	800ae94 <HAL_GPIO_DeInit>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	2400033c 	.word	0x2400033c
 80013d0:	58022000 	.word	0x58022000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58020800 	.word	0x58020800

080013f0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	280f      	cmp	r0, #15
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	d902      	bls.n	8001400 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80013fc:	b00a      	add	sp, #40	; 0x28
 80013fe:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001400:	4601      	mov	r1, r0
 8001402:	2200      	movs	r2, #0
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f008 fe43 	bl	800a090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140a:	2036      	movs	r0, #54	; 0x36
 800140c:	f008 fe72 	bl	800a0f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001412:	4669      	mov	r1, sp
 8001414:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001416:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x88>)
 800141a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f00b fbe1 	bl	800cbf8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001436:	9b07      	ldr	r3, [sp, #28]
 8001438:	b9c3      	cbnz	r3, 800146c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f00b fbb9 	bl	800cbb0 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800143e:	4c0f      	ldr	r4, [pc, #60]	; (800147c <HAL_InitTick+0x8c>)
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_InitTick+0x90>)
 8001442:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001444:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001448:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0x94>)
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001452:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001456:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001458:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800145c:	f00c fc18 	bl	800dc90 <HAL_TIM_Base_Init>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1ca      	bne.n	80013fa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001464:	4620      	mov	r0, r4
 8001466:	f00c fabb 	bl	800d9e0 <HAL_TIM_Base_Start_IT>
 800146a:	e7c7      	b.n	80013fc <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146c:	f00b fba0 	bl	800cbb0 <HAL_RCC_GetPCLK1Freq>
 8001470:	0040      	lsls	r0, r0, #1
 8001472:	e7e4      	b.n	800143e <HAL_InitTick+0x4e>
 8001474:	24000054 	.word	0x24000054
 8001478:	58024400 	.word	0x58024400
 800147c:	24000344 	.word	0x24000344
 8001480:	40001000 	.word	0x40001000
 8001484:	000f4240 	.word	0x000f4240

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <TIM6_DAC_IRQHandler+0x8>)
 8001496:	f00c bae5 	b.w	800da64 <HAL_TIM_IRQHandler>
 800149a:	bf00      	nop
 800149c:	24000344 	.word	0x24000344

080014a0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <LTDC_IRQHandler+0x8>)
 80014a2:	f00a ba58 	b.w	800b956 <HAL_LTDC_IRQHandler>
 80014a6:	bf00      	nop
 80014a8:	24000214 	.word	0x24000214

080014ac <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <DMA2D_IRQHandler+0x8>)
 80014ae:	f008 bf2c 	b.w	800a30a <HAL_DMA2D_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	24000190 	.word	0x24000190

080014b8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <DSI_IRQHandler+0x8>)
 80014ba:	f009 b8e8 	b.w	800a68e <HAL_DSI_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	240001f8 	.word	0x240001f8

080014c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ca:	f020 ff0b 	bl	80222e4 <__errno>
 80014ce:	2316      	movs	r3, #22
 80014d0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	bd08      	pop	{r3, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014da:	f020 ff03 	bl	80222e4 <__errno>
 80014de:	2316      	movs	r3, #22
 80014e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0xa>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	460d      	mov	r5, r1
 80014e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	460e      	mov	r6, r1
 80014ec:	1b73      	subs	r3, r6, r5
 80014ee:	429c      	cmp	r4, r3
 80014f0:	dc01      	bgt.n	80014f6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80014f2:	4620      	mov	r0, r4
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	e7f5      	b.n	80014ec <_read+0x8>

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	460d      	mov	r5, r1
 8001504:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	460e      	mov	r6, r1
 8001508:	1b73      	subs	r3, r6, r5
 800150a:	429c      	cmp	r4, r3
 800150c:	dc01      	bgt.n	8001512 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800150e:	4620      	mov	r0, r4
 8001510:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001512:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	e7f5      	b.n	8001508 <_write+0x8>

0800151c <_close>:

int _close(int file)
{
	return -1;
}
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001526:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001528:	604b      	str	r3, [r1, #4]
}
 800152a:	4770      	bx	lr

0800152c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800152c:	2001      	movs	r0, #1
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001530:	2000      	movs	r0, #0
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <_sbrk+0x30>)
{
 8001536:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001538:	6811      	ldr	r1, [r2, #0]
{
 800153a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800153c:	b909      	cbnz	r1, 8001542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <_sbrk+0x34>)
 8001540:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <_sbrk+0x38>)
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <_sbrk+0x3c>)
 8001548:	4403      	add	r3, r0
 800154a:	1b09      	subs	r1, r1, r4
 800154c:	428b      	cmp	r3, r1
 800154e:	d906      	bls.n	800155e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001550:	f020 fec8 	bl	80222e4 <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800155c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001560:	e7fc      	b.n	800155c <_sbrk+0x28>
 8001562:	bf00      	nop
 8001564:	24000390 	.word	0x24000390
 8001568:	2400f4d0 	.word	0x2400f4d0
 800156c:	24080000 	.word	0x24080000
 8001570:	00001000 	.word	0x00001000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f008 fcb0 	bl	8009edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f020 feb7 	bl	8022314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f919 	bl	80007dc <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 80015b8:	08026754 	.word	0x08026754
  ldr r2, =_sbss
 80015bc:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 80015c0:	2400f4cc 	.word	0x2400f4cc

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>

080015c6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015c6:	4770      	bx	lr

080015c8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80015c8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80015ca:	f000 ff6d 	bl	80024a8 <touchgfx_components_init>
  touchgfx_init();
}
 80015ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80015d2:	f000 bef5 	b.w	80023c0 <touchgfx_init>

080015d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015d6:	f000 bf69 	b.w	80024ac <touchgfx_taskEntry>

080015da <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015da:	6840      	ldr	r0, [r0, #4]
    }
 80015dc:	4770      	bx	lr

080015de <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015de:	6041      	str	r1, [r0, #4]
    }
 80015e0:	4770      	bx	lr

080015e2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80015e2:	1a51      	subs	r1, r2, r1
 80015e4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80015e8:	fbb1 f0f3 	udiv	r0, r1, r3
 80015ec:	4770      	bx	lr
	...

080015f0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80015f2:	68c0      	ldr	r0, [r0, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015f8:	4358      	muls	r0, r3
 80015fa:	4770      	bx	lr
 80015fc:	24000394 	.word	0x24000394

08001600 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001600:	4770      	bx	lr
	...

08001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001608:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800160c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800162c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001630:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001636:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001638:	2101      	movs	r1, #1
 800163a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800163c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	2210      	movs	r2, #16
 8001640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001644:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	b983      	cbnz	r3, 8001676 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001654:	f00b fa8a 	bl	800cb6c <HAL_RCC_GetHCLKFreq>
 8001658:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800165a:	f00b f8c1 	bl	800c7e0 <HAL_RCC_GetSysClockFreq>
 800165e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001662:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001666:	f00c fb13 	bl	800dc90 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800166c:	b003      	add	sp, #12
 800166e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001672:	f00c b97b 	b.w	800d96c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001676:	f00b fa9b 	bl	800cbb0 <HAL_RCC_GetPCLK1Freq>
 800167a:	0044      	lsls	r4, r0, #1
 800167c:	e7ed      	b.n	800165a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	24000394 	.word	0x24000394
 8001688:	08024ce0 	.word	0x08024ce0

0800168c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800168c:	b510      	push	{r4, lr}
 800168e:	4604      	mov	r4, r0
 8001690:	2110      	movs	r1, #16
 8001692:	f020 fce6 	bl	8022062 <_ZdlPvj>
 8001696:	4620      	mov	r0, r4
 8001698:	bd10      	pop	{r4, pc}

0800169a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800169a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800169c:	6803      	ldr	r3, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80016a0:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80016a2:	b131      	cbz	r1, 80016b2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80016a4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80016a6:	4790      	blx	r2
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	1b5b      	subs	r3, r3, r5
 80016ac:	4418      	add	r0, r3
 80016ae:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80016b2:	4790      	blx	r2
 80016b4:	60a0      	str	r0, [r4, #8]
}
 80016b6:	e7fb      	b.n	80016b0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080016b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016b8:	4770      	bx	lr

080016ba <_ZN20STM32TouchControllerD0Ev>:
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	2104      	movs	r1, #4
 80016c0:	f020 fccf 	bl	8022062 <_ZdlPvj>
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80016c8:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80016cc:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80016d0:	2000      	movs	r0, #0
    hTS->Width = 800;
 80016d2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80016d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80016dc:	230c      	movs	r3, #12
 80016de:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80016e2:	f008 fb07 	bl	8009cf4 <BSP_TS_Init>
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_ZN20STM32TouchController4initEv+0x40>)
 80016e8:	b910      	cbnz	r0, 80016f0 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80016ee:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1fb      	bne.n	80016ee <_ZN20STM32TouchController4initEv+0x26>
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_ZN20STM32TouchController4initEv+0x44>)
 80016f8:	212e      	movs	r1, #46	; 0x2e
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_ZN20STM32TouchController4initEv+0x48>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <_ZN20STM32TouchController4initEv+0x4c>)
 80016fe:	f020 fdbf 	bl	8022280 <__assert_func>
 8001702:	bf00      	nop
 8001704:	240003f0 	.word	0x240003f0
 8001708:	240003ec 	.word	0x240003ec
 800170c:	08023514 	.word	0x08023514
 8001710:	08023527 	.word	0x08023527
 8001714:	08023551 	.word	0x08023551

08001718 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800171c:	460f      	mov	r7, r1
 800171e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001720:	781d      	ldrb	r5, [r3, #0]
 8001722:	b915      	cbnz	r5, 800172a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001724:	2500      	movs	r5, #0
}
 8001726:	4628      	mov	r0, r5
 8001728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800172a:	4c07      	ldr	r4, [pc, #28]	; (8001748 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800172c:	2000      	movs	r0, #0
 800172e:	4621      	mov	r1, r4
 8001730:	f008 fb74 	bl	8009e1c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f4      	beq.n	8001724 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	6033      	str	r3, [r6, #0]
            return true;
 8001742:	e7f0      	b.n	8001726 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001744:	240003ec 	.word	0x240003ec
 8001748:	240003e0 	.word	0x240003e0

0800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800174c:	2803      	cmp	r0, #3
 800174e:	d825      	bhi.n	800179c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001750:	e8df f000 	tbb	[pc, r0]
 8001754:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800175a:	2108      	movs	r1, #8
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001766:	f009 bc3d 	b.w	800afe4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	0952      	lsrs	r2, r2, #5
 8001778:	e7f4      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	0952      	lsrs	r2, r2, #5
 8001788:	e7ec      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	0952      	lsrs	r2, r2, #5
 800179a:	e7e4      	b.n	8001766 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	240003f4 	.word	0x240003f4
 80017a4:	58022400 	.word	0x58022400
 80017a8:	58021400 	.word	0x58021400

080017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80017ac:	2803      	cmp	r0, #3
 80017ae:	d825      	bhi.n	80017fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80017b0:	e8df f000 	tbb	[pc, r0]
 80017b4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ba:	2108      	movs	r1, #8
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	3a00      	subs	r2, #0
 80017c0:	bf18      	it	ne
 80017c2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017c6:	f009 bc0d 	b.w	800afe4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	3a00      	subs	r2, #0
 80017d4:	bf18      	it	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	e7f4      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	3a00      	subs	r2, #0
 80017e4:	bf18      	it	ne
 80017e6:	2201      	movne	r2, #1
 80017e8:	e7ec      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	3a00      	subs	r2, #0
 80017f6:	bf18      	it	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	e7e4      	b.n	80017c6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	240003f4 	.word	0x240003f4
 8001804:	58022400 	.word	0x58022400
 8001808:	58021400 	.word	0x58021400

0800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800180c:	2803      	cmp	r0, #3
 800180e:	d811      	bhi.n	8001834 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001810:	e8df f000 	tbb	[pc, r0]
 8001814:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001818:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800181c:	f009 bbe7 	b.w	800afee <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	e7f9      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	e7f6      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001832:	e7f3      	b.n	800181c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58022400 	.word	0x58022400
 800183c:	58021400 	.word	0x58021400

08001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001840:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001842:	2803      	cmp	r0, #3
 8001844:	d815      	bhi.n	8001872 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001846:	e8df f000 	tbb	[pc, r0]
 800184a:	0a02      	.short	0x0a02
 800184c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800184e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001852:	f009 fbc1 	bl	800afd8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001856:	1e43      	subs	r3, r0, #1
 8001858:	4258      	negs	r0, r3
 800185a:	4158      	adcs	r0, r3
 800185c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	e7f5      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001868:	e7f2      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001870:	e7ef      	b.n	8001852 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001872:	2000      	movs	r0, #0
 8001874:	e7ef      	b.n	8001856 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001876:	bf00      	nop
 8001878:	58022400 	.word	0x58022400
 800187c:	58021400 	.word	0x58021400

08001880 <_ZN8touchgfx4GPIO4initEv>:
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4d08      	ldr	r5, [pc, #32]	; (80018a4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001884:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001886:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001888:	b2e0      	uxtb	r0, r4
 800188a:	f7ff ffd9 	bl	8001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800188e:	b118      	cbz	r0, 8001898 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001894:	bf18      	it	ne
 8001896:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001898:	3401      	adds	r4, #1
 800189a:	3504      	adds	r5, #4
 800189c:	2c05      	cmp	r4, #5
 800189e:	d1f3      	bne.n	8001888 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop
 80018a4:	240003f4 	.word	0x240003f4

080018a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80018a8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80018aa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80018ae:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80018b2:	4770      	bx	lr

080018b4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80018b8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80018ba:	3900      	subs	r1, #0
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80018be:	bf18      	it	ne
 80018c0:	2101      	movne	r1, #1
 80018c2:	7019      	strb	r1, [r3, #0]
    }
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2400f23f 	.word	0x2400f23f

080018cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80018d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018d2:	b10b      	cbz	r3, 80018d8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80018d4:	4608      	mov	r0, r1
 80018d6:	4718      	bx	r3
        }
    }
 80018d8:	4770      	bx	lr

080018da <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80018da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018de:	4770      	bx	lr

080018e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80018e0:	6840      	ldr	r0, [r0, #4]
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4718      	bx	r3

080018e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	24000404 	.word	0x24000404

080018f4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80018f4:	4770      	bx	lr

080018f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80018f6:	f000 be75 	b.w	80025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080018fa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80018fa:	f000 be53 	b.w	80025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018fe <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80018fe:	f000 beb1 	b.w	8002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001902 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001902:	f000 bea3 	b.w	800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001906 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001906:	f000 be55 	b.w	80025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800190a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
        swapFrameBuffers();
 800190e:	f00f fbdb 	bl	80110c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	4620      	mov	r0, r4
 8001916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 800191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800191e:	4718      	bx	r3

08001920 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001920:	f00e be38 	b.w	8010594 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001924 <_ZN11TouchGFXHALD0Ev>:
 8001924:	b510      	push	{r4, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	217c      	movs	r1, #124	; 0x7c
 800192a:	f020 fb9a 	bl	8022062 <_ZdlPvj>
 800192e:	4620      	mov	r0, r4
 8001930:	bd10      	pop	{r4, pc}
	...

08001934 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800193a:	f00e be67 	b.w	801060c <_ZN8touchgfx3HAL10beginFrameEv>
 800193e:	bf00      	nop
 8001940:	2400000c 	.word	0x2400000c

08001944 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
    HAL::endFrame();
 8001948:	f00e fe6c 	bl	8010624 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 800194c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001950:	b113      	cbz	r3, 8001958 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    }
}
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c

08001960 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
    GPIO::init();
 8001964:	f7ff ff8c 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001968:	4d07      	ldr	r5, [pc, #28]	; (8001988 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fe23 	bl	80025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001970:	2300      	movs	r3, #0
    mcuInstr.init();
 8001972:	4628      	mov	r0, r5
 8001974:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001978:	f7ff fe44 	bl	8001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800197c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800197e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001980:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	bf00      	nop
 8001988:	2400040c 	.word	0x2400040c

0800198c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800198c:	6803      	ldr	r3, [r0, #0]
{
 800198e:	4604      	mov	r4, r0
 8001990:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001996:	4798      	blx	r3
    enableInterrupts();
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	4620      	mov	r0, r4
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80019a0:	f000 faa6 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4620      	mov	r0, r4
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2329      	movs	r3, #41	; 0x29
 80019b0:	2215      	movs	r2, #21
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	f009 f87a 	bl	800aaae <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80019ba:	f000 fa99 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	4620      	mov	r0, r4
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4798      	blx	r3
    for (;;)
 80019c6:	e7f8      	b.n	80019ba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80019c8:	240001f8 	.word	0x240001f8

080019cc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80019cc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80019d0:	b11b      	cbz	r3, 80019da <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80019d2:	6840      	ldr	r0, [r0, #4]
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4718      	bx	r3
    }
 80019da:	4618      	mov	r0, r3
 80019dc:	4770      	bx	lr
	...

080019e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019e0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80019e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80019e8:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80019ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80019ee:	428c      	cmp	r4, r1
 80019f0:	d009      	beq.n	8001a06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80019f2:	b93a      	cbnz	r2, 8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80019fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80019fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001a04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d0fc      	beq.n	8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001a14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a16:	2200      	movs	r2, #0
 8001a18:	e7f3      	b.n	8001a02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001a1a:	bf00      	nop
 8001a1c:	2400f238 	.word	0x2400f238
 8001a20:	2400f236 	.word	0x2400f236
 8001a24:	2400f234 	.word	0x2400f234

08001a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	d803      	bhi.n	8001a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d905      	bls.n	8001a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a3c:	219e      	movs	r1, #158	; 0x9e
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a42:	f020 fc1d 	bl	8022280 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a4c:	801a      	strh	r2, [r3, #0]
    }
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	2400f234 	.word	0x2400f234
 8001a54:	2400f236 	.word	0x2400f236
 8001a58:	080235b8 	.word	0x080235b8
 8001a5c:	0802361b 	.word	0x0802361b
 8001a60:	0802365e 	.word	0x0802365e
 8001a64:	2400f23a 	.word	0x2400f23a
 8001a68:	2400f23c 	.word	0x2400f23c

08001a6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001a74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a76:	b935      	cbnz	r5, 8001a86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001a7a:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001a82:	f020 fbfd 	bl	8022280 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a86:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a8a:	3a00      	subs	r2, #0
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001a8e:	bf18      	it	ne
 8001a90:	2201      	movne	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001a94:	6803      	ldr	r3, [r0, #0]
}
 8001a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	4718      	bx	r3
 8001aa0:	24000404 	.word	0x24000404
 8001aa4:	080236b1 	.word	0x080236b1
 8001aa8:	080236e9 	.word	0x080236e9
 8001aac:	0802365e 	.word	0x0802365e
 8001ab0:	2400f23e 	.word	0x2400f23e

08001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001ab4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001ab8:	60c3      	str	r3, [r0, #12]
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001ac6:	8503      	strh	r3, [r0, #40]	; 0x28
 8001ac8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001acc:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001ace:	8603      	strh	r3, [r0, #48]	; 0x30
 8001ad0:	6603      	str	r3, [r0, #96]	; 0x60
 8001ad2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001ad6:	6703      	str	r3, [r0, #112]	; 0x70
 8001ad8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae0:	6742      	str	r2, [r0, #116]	; 0x74
 8001ae2:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001aee:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001af2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001af6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001afa:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001afe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b02:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b06:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b0a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b0e:	42b5      	cmp	r5, r6
        instance = this;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b12:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b16:	8015      	strh	r5, [r2, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b1a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b1c:	bf28      	it	cs
 8001b1e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b22:	bf38      	it	cc
 8001b24:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b26:	8016      	strh	r6, [r2, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b2e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b32:	7013      	strb	r3, [r2, #0]
                           height)
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b36:	6003      	str	r3, [r0, #0]
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	01000001 	.word	0x01000001
 8001b40:	2400f240 	.word	0x2400f240
 8001b44:	2400f234 	.word	0x2400f234
 8001b48:	2400f23a 	.word	0x2400f23a
 8001b4c:	2400f236 	.word	0x2400f236
 8001b50:	2400f23c 	.word	0x2400f23c
 8001b54:	2400f238 	.word	0x2400f238
 8001b58:	08023740 	.word	0x08023740

08001b5c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001b5c:	2b01      	cmp	r3, #1
    {
 8001b5e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001b60:	d80e      	bhi.n	8001b80 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	2215      	movs	r2, #21
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b6e:	f008 ff9e 	bl	800aaae <HAL_DSI_ShortWrite>
 8001b72:	b118      	cbz	r0, 8001b7c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b74:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e7fb      	b.n	8001b78 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001b80:	e9cd 1200 	strd	r1, r2, [sp]
 8001b84:	4601      	mov	r1, r0
 8001b86:	2239      	movs	r2, #57	; 0x39
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b8a:	f008 ffa1 	bl	800aad0 <HAL_DSI_LongWrite>
 8001b8e:	e7f0      	b.n	8001b72 <DSI_IO_Write+0x16>
 8001b90:	240001f8 	.word	0x240001f8

08001b94 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001b96:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	9100      	str	r1, [sp, #0]
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <DSI_IO_Read+0x24>)
 8001ba2:	f008 fff6 	bl	800ab92 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001ba6:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001ba8:	bf14      	ite	ne
 8001baa:	f06f 0007 	mvnne.w	r0, #7
 8001bae:	2000      	moveq	r0, #0
 8001bb0:	b005      	add	sp, #20
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	240001f8 	.word	0x240001f8

08001bbc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc0:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001bc2:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001bc4:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001bcc:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001bd4:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	2239      	movs	r2, #57	; 0x39
 8001bdc:	f008 ff78 	bl	800aad0 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2335      	movs	r3, #53	; 0x35
 8001be4:	462a      	mov	r2, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	f008 ff60 	bl	800aaae <HAL_DSI_ShortWrite>
    }
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	bf00      	nop
 8001bf4:	240001f8 	.word	0x240001f8

08001bf8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001bf8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001bfa:	f7ff ffdf 	bl	8001bbc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c26:	2203      	movs	r2, #3
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	240001f8 	.word	0x240001f8
 8001c34:	50001000 	.word	0x50001000

08001c38 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LCD_ReqEnable+0x20>)
    {
 8001c3a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	b939      	cbnz	r1, 8001c50 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c40:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c44:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c46:	2329      	movs	r3, #41	; 0x29
 8001c48:	2215      	movs	r2, #21
 8001c4a:	9100      	str	r1, [sp, #0]
 8001c4c:	f008 ff2f 	bl	800aaae <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001c50:	b003      	add	sp, #12
 8001c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c56:	bf00      	nop
 8001c58:	2400041c 	.word	0x2400041c
 8001c5c:	240001f8 	.word	0x240001f8

08001c60 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001c62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	232a      	movs	r3, #42	; 0x2a
 8001c68:	2239      	movs	r2, #57	; 0x39
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2304      	movs	r3, #4
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <LCD_SetUpdateRegionLeft+0x20>)
 8001c72:	f008 ff2d 	bl	800aad0 <HAL_DSI_LongWrite>
    }
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7c:	24000004 	.word	0x24000004
 8001c80:	240001f8 	.word	0x240001f8

08001c84 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001c86:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	232a      	movs	r3, #42	; 0x2a
 8001c8c:	2239      	movs	r2, #57	; 0x39
 8001c8e:	2100      	movs	r1, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2304      	movs	r3, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <LCD_SetUpdateRegionRight+0x20>)
 8001c96:	f008 ff1b 	bl	800aad0 <HAL_DSI_LongWrite>
    }
 8001c9a:	b003      	add	sp, #12
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca0:	24000008 	.word	0x24000008
 8001ca4:	240001f8 	.word	0x240001f8

08001ca8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ca8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001caa:	4d14      	ldr	r5, [pc, #80]	; (8001cfc <HAL_DSI_TearingEffectCallback+0x54>)
 8001cac:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fd4c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001cb4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001cb6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001cc0:	f000 f90a 	bl	8001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001cc6:	682a      	ldr	r2, [r5, #0]
 8001cc8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001cd0:	b173      	cbz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
 8001cd2:	4d0c      	ldr	r5, [pc, #48]	; (8001d04 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001cd4:	782b      	ldrb	r3, [r5, #0]
 8001cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cda:	b94b      	cbnz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_DSI_TearingEffectCallback+0x60>)
 8001cde:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ce0:	f7ff ffbe 	bl	8001c60 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f008 fed2 	bl	800aa8e <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf0:	2000      	movs	r0, #0
    }
 8001cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf6:	f7ff bd59 	b.w	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001cfa:	bf00      	nop
 8001cfc:	2400f240 	.word	0x2400f240
 8001d00:	2400000c 	.word	0x2400000c
 8001d04:	2400041d 	.word	0x2400041d
 8001d08:	24000408 	.word	0x24000408

08001d0c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d10:	4e3f      	ldr	r6, [pc, #252]	; (8001e10 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d12:	b085      	sub	sp, #20
 8001d14:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d16:	7833      	ldrb	r3, [r6, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d076      	beq.n	8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d1c:	4d3d      	ldr	r5, [pc, #244]	; (8001e14 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d1e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e24 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d22:	f8d5 9000 	ldr.w	r9, [r5]
 8001d26:	4f3c      	ldr	r7, [pc, #240]	; (8001e18 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d28:	f1b9 0f00 	cmp.w	r9, #0
 8001d2c:	d139      	bne.n	8001da2 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f008 f984 	bl	800a03c <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f8cd 9000 	str.w	r9, [sp]
 8001d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d3e:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d42:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d54:	f002 0208 	and.w	r2, r2, #8
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d66:	4402      	add	r2, r0
 8001d68:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001d8e:	f7ff ff79 	bl	8001c84 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001d92:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001d94:	4620      	mov	r0, r4
                updateRegion = 1;
 8001d96:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001d9e:	f008 be76 	b.w	800aa8e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001da6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da8:	9502      	str	r5, [sp, #8]
 8001daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8001dc6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dca:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001dce:	f041 0101 	orr.w	r1, r1, #1
 8001dd2:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001dd4:	9503      	str	r5, [sp, #12]
 8001dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
 8001dec:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dee:	f7ff fcdd 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001df2:	f7ff ff21 	bl	8001c38 <LCD_ReqEnable>
        return instance;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001df8:	7035      	strb	r5, [r6, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001dfc:	b128      	cbz	r0, 8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e02:	b005      	add	sp, #20
 8001e04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4718      	bx	r3
 8001e0a:	b005      	add	sp, #20
 8001e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e10:	2400041d 	.word	0x2400041d
 8001e14:	24000408 	.word	0x24000408
 8001e18:	24000404 	.word	0x24000404
 8001e1c:	2400f23a 	.word	0x2400f23a
 8001e20:	2400f240 	.word	0x2400f240
 8001e24:	24000214 	.word	0x24000214

08001e28 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e28:	4601      	mov	r1, r0
 8001e2a:	b508      	push	{r3, lr}
        return instance;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <IdleTaskHook+0x14>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e30:	b101      	cbz	r1, 8001e34 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e32:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e34:	f00f f962 	bl	80110fc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e38:	2001      	movs	r0, #1
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	2400f240 	.word	0x2400f240

08001e40 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001e4a:	601a      	str	r2, [r3, #0]

}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2400040c 	.word	0x2400040c
 8001e54:	080234f4 	.word	0x080234f4

08001e58 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2200      	movs	r2, #0
{
 8001e5c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f00c f867 	bl	800df32 <osSemaphoreNew>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e66:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e68:	b928      	cbnz	r0, 8001e76 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e6c:	2128      	movs	r1, #40	; 0x28
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e72:	f020 fa05 	bl	8022280 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00c f8f6 	bl	800e06c <osMessageQueueNew>
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e82:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e84:	b918      	cbnz	r0, 8001e8e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e8c:	e7f0      	b.n	8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	24000424 	.word	0x24000424
 8001e94:	08023810 	.word	0x08023810
 8001e98:	08023859 	.word	0x08023859
 8001e9c:	08023888 	.word	0x08023888
 8001ea0:	24000420 	.word	0x24000420
 8001ea4:	080238d7 	.word	0x080238d7

08001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f00c b889 	b.w	800dfc6 <osSemaphoreAcquire>
 8001eb4:	24000424 	.word	0x24000424

08001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f00c b8ae 	b.w	800e01c <osSemaphoreRelease>
 8001ec0:	24000424 	.word	0x24000424

08001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f00c b87c 	b.w	800dfc6 <osSemaphoreAcquire>
 8001ece:	bf00      	nop
 8001ed0:	24000424 	.word	0x24000424

08001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ed4:	f7ff bff0 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6800      	ldr	r0, [r0, #0]
 8001ee2:	f00c b8fe 	b.w	800e0e2 <osMessageQueuePut>
 8001ee6:	bf00      	nop
 8001ee8:	24000420 	.word	0x24000420
 8001eec:	24000010 	.word	0x24000010

08001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ef6:	a901      	add	r1, sp, #4
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f00c f921 	bl	800e142 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2200      	movs	r2, #0
 8001f06:	a901      	add	r1, sp, #4
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f00c f91a 	bl	800e142 <osMessageQueueGet>
}
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd10      	pop	{r4, pc}
 8001f12:	bf00      	nop
 8001f14:	24000420 	.word	0x24000420

08001f18 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4718      	bx	r3

08001f1e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4770      	bx	lr

08001f22 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4718      	bx	r3

08001f28 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f28:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f2c:	4770      	bx	lr
	...

08001f30 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	4770      	bx	lr
 8001f48:	08023a78 	.word	0x08023a78
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
}
 8001f54:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f58:	f7ff ffea 	bl	8001f30 <_ZN8STM32DMAD1Ev>
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f020 f880 	bl	8022062 <_ZdlPvj>
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001f6a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001f78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f7c:	f002 0210 	and.w	r2, r2, #16
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f86:	f042 0210 	orr.w	r2, r2, #16
 8001f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_ZN8STM32DMA10initializeEv+0x44>)
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f98:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	609a      	str	r2, [r3, #8]
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	24000190 	.word	0x24000190
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	2400f240 	.word	0x2400f240

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f00f f9df 	bl	80113a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08023a78 	.word	0x08023a78

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f020 f92d 	bl	8022280 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	08023919 	.word	0x08023919
 8002034:	08023934 	.word	0x08023934
 8002038:	0802397e 	.word	0x0802397e

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f020 f90f 	bl	8022280 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	08023919 	.word	0x08023919
 8002070:	080239cb 	.word	0x080239cb
 8002074:	0802397e 	.word	0x0802397e

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002120:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002122:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002124:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002128:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800212c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800212e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002132:	7822      	ldrb	r2, [r4, #0]
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1101 	movw	r1, #257	; 0x101
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f020 f89c 	bl	8022280 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	52001000 	.word	0x52001000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	08023a16 	.word	0x08023a16
 80021bc:	08023a30 	.word	0x08023a30
 80021c0:	0802397e 	.word	0x0802397e
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa5      	ldrh	r5, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021de:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e2:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e5      	ldr	r5, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002212:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002216:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002218:	e7f7      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800221a:	bf00      	nop
 800221c:	52001000 	.word	0x52001000
 8002220:	00010009 	.word	0x00010009
 8002224:	00020201 	.word	0x00020201
 8002228:	00030201 	.word	0x00030201

0800222c <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d4fc      	bmi.n	800222e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002234:	2223      	movs	r2, #35	; 0x23
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	52001000 	.word	0x52001000

08002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002240:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002242:	4c10      	ldr	r4, [pc, #64]	; (8002284 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002244:	6825      	ldr	r5, [r4, #0]
 8002246:	07ed      	lsls	r5, r5, #31
 8002248:	d4fc      	bmi.n	8002244 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800224c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800224e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002250:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002252:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002256:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800225a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800225c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800225e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002260:	d00c      	beq.n	800227c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002262:	4909      	ldr	r1, [pc, #36]	; (8002288 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002264:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002268:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800226a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800226e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002272:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002274:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002276:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002278:	6023      	str	r3, [r4, #0]
    }
}
 800227a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800227c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002280:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002282:	e7f9      	b.n	8002278 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002284:	52001000 	.word	0x52001000
 8002288:	00010009 	.word	0x00010009
 800228c:	00020001 	.word	0x00020001
 8002290:	00030001 	.word	0x00030001

08002294 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002294:	2001      	movs	r0, #1
 8002296:	4770      	bx	lr

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002298:	200c      	movs	r0, #12
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800229c:	230c      	movs	r3, #12
 800229e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022a2:	3008      	adds	r0, #8
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022a6:	230c      	movs	r3, #12
 80022a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ac:	3008      	adds	r0, #8
 80022ae:	4770      	bx	lr

080022b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022b4:	f244 30a4 	movw	r0, #17316	; 0x43a4
 80022b8:	4770      	bx	lr

080022ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ba:	f244 33a4 	movw	r3, #17316	; 0x43a4
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c6:	f244 33a4 	movw	r3, #17316	; 0x43a4
 80022ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d2:	2001      	movs	r0, #1
 80022d4:	4770      	bx	lr

080022d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d6:	2010      	movs	r0, #16
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022e6:	3008      	adds	r0, #8
 80022e8:	4770      	bx	lr

080022ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022ea:	4608      	mov	r0, r1
 80022ec:	f000 bb8a 	b.w	8002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022f2:	b510      	push	{r4, lr}
 80022f4:	4604      	mov	r4, r0
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	f00d fea5 	bl	8010046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	08023b30 	.word	0x08023b30

08002304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff fff2 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800230c:	2114      	movs	r1, #20
 800230e:	4620      	mov	r0, r4
 8002310:	f01f fea7 	bl	8022062 <_ZdlPvj>
 8002314:	4620      	mov	r0, r4
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f00d fe91 	bl	8010046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}
 8002328:	08023afc 	.word	0x08023afc

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fff2 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002334:	f244 31ac 	movw	r1, #17324	; 0x43ac
 8002338:	4620      	mov	r0, r4
 800233a:	f01f fe92 	bl	8022062 <_ZdlPvj>
 800233e:	4620      	mov	r0, r4
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002346:	b510      	push	{r4, lr}
 8002348:	4604      	mov	r4, r0
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	f00d fe7b 	bl	8010046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}
 8002354:	08023ac8 	.word	0x08023ac8

08002358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	f7ff fff2 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002360:	2118      	movs	r1, #24
 8002362:	4620      	mov	r0, r4
 8002364:	f01f fe7d 	bl	8022062 <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <_ZN12FrontendHeapD1Ev+0x28>)
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	f500 4087 	add.w	r0, r0, #17280	; 0x4380
 8002378:	3058      	adds	r0, #88	; 0x58
 800237a:	f7ff ffb9 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800237e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002382:	f7ff ffc9 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002386:	f104 0014 	add.w	r0, r4, #20
 800238a:	f7ff ffdb 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238e:	4620      	mov	r0, r4
 8002390:	bd10      	pop	{r4, pc}
 8002392:	bf00      	nop
 8002394:	08023b64 	.word	0x08023b64

08002398 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002398:	b508      	push	{r3, lr}
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <__tcf_0+0xc>)
 800239c:	f7ff ffe6 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023a0:	bd08      	pop	{r3, pc}
 80023a2:	bf00      	nop
 80023a4:	2400042c 	.word	0x2400042c

080023a8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	f7ff ffde 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023b0:	f244 514c 	movw	r1, #17740	; 0x454c
 80023b4:	4620      	mov	r0, r4
 80023b6:	f01f fe54 	bl	8022062 <_ZdlPvj>
 80023ba:	4620      	mov	r0, r4
 80023bc:	bd10      	pop	{r4, pc}
	...

080023c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023c4:	f000 f9aa 	bl	800271c <_ZN14BitmapDatabase11getInstanceEv>
 80023c8:	2400      	movs	r4, #0
 80023ca:	4605      	mov	r5, r0
 80023cc:	f000 f9aa 	bl	8002724 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023d0:	4623      	mov	r3, r4
 80023d2:	4601      	mov	r1, r0
 80023d4:	4622      	mov	r2, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	9400      	str	r4, [sp, #0]
 80023da:	f017 fa31 	bl	8019840 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <touchgfx_init+0xb8>)
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023e2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023e4:	4d26      	ldr	r5, [pc, #152]	; (8002480 <touchgfx_init+0xc0>)
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f005 f842 	bl	8007470 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023ec:	4825      	ldr	r0, [pc, #148]	; (8002484 <touchgfx_init+0xc4>)
 80023ee:	f017 f8df 	bl	80195b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023f2:	782b      	ldrb	r3, [r5, #0]
 80023f4:	f3bf 8f5b 	dmb	ish
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	d436      	bmi.n	800246a <touchgfx_init+0xaa>
 80023fc:	4628      	mov	r0, r5
 80023fe:	f01f fe32 	bl	8022066 <__cxa_guard_acquire>
 8002402:	b390      	cbz	r0, 800246a <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002404:	4c20      	ldr	r4, [pc, #128]	; (8002488 <touchgfx_init+0xc8>)
 8002406:	4f21      	ldr	r7, [pc, #132]	; (800248c <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <touchgfx_init+0xd0>)
 800240a:	f104 0014 	add.w	r0, r4, #20
 800240e:	f107 0618 	add.w	r6, r7, #24
 8002412:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	6060      	str	r0, [r4, #4]
 800241a:	f8c4 8008 	str.w	r8, [r4, #8]
 800241e:	60e7      	str	r7, [r4, #12]
 8002420:	6126      	str	r6, [r4, #16]
 8002422:	f00d fe11 	bl	8010048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <touchgfx_init+0xd4>)
 8002428:	4640      	mov	r0, r8
 800242a:	6163      	str	r3, [r4, #20]
 800242c:	f00d fe0c 	bl	8010048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <touchgfx_init+0xd8>)
 8002432:	4638      	mov	r0, r7
 8002434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002436:	f00d fe07 	bl	8010048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800243a:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <touchgfx_init+0xdc>)
 8002440:	f503 707b 	add.w	r0, r3, #1004	; 0x3ec
 8002444:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
 8002448:	f005 fe36 	bl	80080b8 <_ZN5ModelC1Ev>
 800244c:	4622      	mov	r2, r4
 800244e:	f107 0114 	add.w	r1, r7, #20
 8002452:	4630      	mov	r0, r6
 8002454:	f005 fe26 	bl	80080a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002458:	4630      	mov	r0, r6
 800245a:	f000 fad3 	bl	8002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <touchgfx_init+0xe0>)
 8002460:	f01f ff2c 	bl	80222bc <atexit>
 8002464:	4628      	mov	r0, r5
 8002466:	f01f fe0a 	bl	802207e <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800246a:	480e      	ldr	r0, [pc, #56]	; (80024a4 <touchgfx_init+0xe4>)
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002472:	f7ff ba75 	b.w	8001960 <_ZN11TouchGFXHAL10initializeEv>
 8002476:	bf00      	nop
 8002478:	2400f2a4 	.word	0x2400f2a4
 800247c:	24005798 	.word	0x24005798
 8002480:	24000428 	.word	0x24000428
 8002484:	24000014 	.word	0x24000014
 8002488:	2400042c 	.word	0x2400042c
 800248c:	24004804 	.word	0x24004804
 8002490:	08023b64 	.word	0x08023b64
 8002494:	08023ac8 	.word	0x08023ac8
 8002498:	08023afc 	.word	0x08023afc
 800249c:	08023b30 	.word	0x08023b30
 80024a0:	08002399 	.word	0x08002399
 80024a4:	2400571c 	.word	0x2400571c

080024a8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024a8:	4770      	bx	lr
	...

080024ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <touchgfx_taskEntry+0x8>)
 80024ae:	f7ff ba6d 	b.w	800198c <_ZN11TouchGFXHAL9taskEntryEv>
 80024b2:	bf00      	nop
 80024b4:	2400571c 	.word	0x2400571c

080024b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024b8:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024ba:	490c      	ldr	r1, [pc, #48]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024be:	4c0d      	ldr	r4, [pc, #52]	; (80024f4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024c0:	4608      	mov	r0, r1
 80024c2:	6023      	str	r3, [r4, #0]
 80024c4:	f7ff fd80 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ca:	4610      	mov	r0, r2
 80024cc:	f019 fbd2 	bl	801bc74 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024dc:	e9cd 3200 	strd	r3, r2, [sp]
 80024e0:	4623      	mov	r3, r4
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024e4:	f7ff fae6 	bl	8001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024e8:	b002      	add	sp, #8
 80024ea:	bd10      	pop	{r4, pc}
 80024ec:	2400497c 	.word	0x2400497c
 80024f0:	080235a8 	.word	0x080235a8
 80024f4:	24004978 	.word	0x24004978
 80024f8:	2400579c 	.word	0x2400579c
 80024fc:	2400571c 	.word	0x2400571c

08002500 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002502:	f7ff bd15 	b.w	8001f30 <_ZN8STM32DMAD1Ev>
 8002506:	bf00      	nop
 8002508:	2400497c 	.word	0x2400497c

0800250c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800250c:	2000      	movs	r0, #0
 800250e:	4770      	bx	lr

08002510 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002510:	8081      	strh	r1, [r0, #4]
    }
 8002512:	4770      	bx	lr

08002514 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002514:	80c1      	strh	r1, [r0, #6]
    }
 8002516:	4770      	bx	lr

08002518 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002518:	8101      	strh	r1, [r0, #8]
    }
 800251a:	4770      	bx	lr

0800251c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800251c:	8141      	strh	r1, [r0, #10]
    }
 800251e:	4770      	bx	lr

08002520 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002520:	4770      	bx	lr

08002522 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002522:	4770      	bx	lr

08002524 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002524:	4770      	bx	lr

08002526 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002526:	4770      	bx	lr

08002528 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002528:	4770      	bx	lr

0800252a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800252a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800252c:	88c4      	ldrh	r4, [r0, #6]
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	1b12      	subs	r2, r2, r4
 8002532:	8884      	ldrh	r4, [r0, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	1b09      	subs	r1, r1, r4
 8002538:	b212      	sxth	r2, r2
    }
 800253a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800253e:	b209      	sxth	r1, r1
 8002540:	4718      	bx	r3

08002542 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002552:	6010      	str	r0, [r2, #0]
    }
 8002554:	4770      	bx	lr

08002556 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002556:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800255a:	b11a      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800255c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002560:	b102      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002562:	6018      	str	r0, [r3, #0]
        }
    }
 8002564:	4770      	bx	lr

08002566 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002566:	2000      	movs	r0, #0
 8002568:	4770      	bx	lr

0800256a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800256a:	888b      	ldrh	r3, [r1, #4]
 800256c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002572:	4770      	bx	lr

08002574 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002574:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002578:	4770      	bx	lr

0800257a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800257a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800257e:	4770      	bx	lr

08002580 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002580:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002582:	b510      	push	{r4, lr}
        return rect.width;
 8002584:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002588:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800258c:	8002      	strh	r2, [r0, #0]
 800258e:	8042      	strh	r2, [r0, #2]
 8002590:	8084      	strh	r4, [r0, #4]
 8002592:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002594:	bd10      	pop	{r4, pc}

08002596 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002596:	2200      	movs	r2, #0
 8002598:	8002      	strh	r2, [r0, #0]
 800259a:	8042      	strh	r2, [r0, #2]
 800259c:	8082      	strh	r2, [r0, #4]
 800259e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80025a0:	4770      	bx	lr
	...

080025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80025a6:	2290      	movs	r2, #144	; 0x90
 80025a8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025b4:	4770      	bx	lr

080025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	4604      	mov	r4, r0
    HAL::initialize();
 80025ba:	f00e f840 	bl	801063e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025c2:	f013 ffa7 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4620      	mov	r0, r4
 80025ca:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4620      	mov	r0, r4
 80025d0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80025d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025d8:	2300      	movs	r3, #0
 80025da:	46ac      	mov	ip, r5
 80025dc:	461a      	mov	r2, r3
}
 80025de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025e2:	4760      	bx	ip

080025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80025e4:	f00d bfdc 	b.w	80105a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080025e8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80025e8:	f00e b937 	b.w	801085a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80025ec:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80025f0:	b112      	cbz	r2, 80025f8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4718      	bx	r3
    }
 80025f8:	4770      	bx	lr
	...

080025fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80025fe:	6953      	ldr	r3, [r2, #20]
 8002600:	03db      	lsls	r3, r3, #15
{
 8002602:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002604:	d51e      	bpl.n	8002644 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002606:	2300      	movs	r3, #0
 8002608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800260c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002610:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002614:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002618:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800261c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002620:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002622:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002626:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002628:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800262c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800262e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002632:	d2f9      	bcs.n	8002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002634:	3b20      	subs	r3, #32
 8002636:	f113 0f20 	cmn.w	r3, #32
 800263a:	d1f2      	bne.n	8002622 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800263c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002640:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800264e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265a:	f3bf 8f6f 	isb	sy
}
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100

08002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8002666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002674:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002676:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002678:	4e12      	ldr	r6, [pc, #72]	; (80026c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800267a:	4604      	mov	r4, r0
 800267c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002680:	6003      	str	r3, [r0, #0]
 8002682:	6833      	ldr	r3, [r6, #0]
 8002684:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002688:	b10a      	cbz	r2, 800268e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800268a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800268c:	b900      	cbnz	r0, 8002690 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800268e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4798      	blx	r3
 8002696:	1e43      	subs	r3, r0, #1
 8002698:	425d      	negs	r5, r3
 800269a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026a0:	b130      	cbz	r0, 80026b0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4798      	blx	r3
 80026a8:	2801      	cmp	r0, #1
 80026aa:	bf08      	it	eq
 80026ac:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80026b0:	b92d      	cbnz	r5, 80026be <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80026b4:	2127      	movs	r1, #39	; 0x27
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80026b8:	4806      	ldr	r0, [pc, #24]	; (80026d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80026ba:	f01f fde1 	bl	8022280 <__assert_func>
    }
 80026be:	4620      	mov	r0, r4
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	bf00      	nop
 80026c4:	2400f240 	.word	0x2400f240
 80026c8:	08023c80 	.word	0x08023c80
 80026cc:	08023b70 	.word	0x08023b70
 80026d0:	08023bce 	.word	0x08023bce
 80026d4:	08023c07 	.word	0x08023c07

080026d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026d8:	4770      	bx	lr

080026da <_ZN23ApplicationFontProviderD0Ev>:
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
 80026de:	2104      	movs	r1, #4
 80026e0:	f01f fcbf 	bl	8022062 <_ZdlPvj>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80026e8:	b508      	push	{r3, lr}
    switch (typography)
 80026ea:	2903      	cmp	r1, #3
 80026ec:	d813      	bhi.n	8002716 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80026ee:	e8df f001 	tbb	[pc, r1]
 80026f2:	0602      	.short	0x0602
 80026f4:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80026f6:	f004 ff07 	bl	8007508 <_ZN17TypedTextDatabase8getFontsEv>
 80026fa:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 80026fc:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80026fe:	f004 ff03 	bl	8007508 <_ZN17TypedTextDatabase8getFontsEv>
 8002702:	6840      	ldr	r0, [r0, #4]
 8002704:	e7fa      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002706:	f004 feff 	bl	8007508 <_ZN17TypedTextDatabase8getFontsEv>
 800270a:	6880      	ldr	r0, [r0, #8]
 800270c:	e7f6      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800270e:	f004 fefb 	bl	8007508 <_ZN17TypedTextDatabase8getFontsEv>
 8002712:	68c0      	ldr	r0, [r0, #12]
 8002714:	e7f2      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8002716:	2000      	movs	r0, #0
 8002718:	e7f0      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

0800271c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800271c:	4800      	ldr	r0, [pc, #0]	; (8002720 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800271e:	4770      	bx	lr
 8002720:	08023cac 	.word	0x08023cac

08002724 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002724:	2001      	movs	r0, #1
 8002726:	4770      	bx	lr

08002728 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002728:	b513      	push	{r0, r1, r4, lr}
 800272a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800272c:	b151      	cbz	r1, 8002744 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800272e:	6803      	ldr	r3, [r0, #0]
 8002730:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002732:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002734:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002738:	689c      	ldr	r4, [r3, #8]
 800273a:	f10d 0303 	add.w	r3, sp, #3
 800273e:	47a0      	blx	r4
        return glyph;
    }
 8002740:	b002      	add	sp, #8
 8002742:	bd10      	pop	{r4, pc}
            return 0;
 8002744:	4608      	mov	r0, r1
 8002746:	e7fb      	b.n	8002740 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002748 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002748:	89c0      	ldrh	r0, [r0, #14]
 800274a:	4770      	bx	lr

0800274c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800274c:	8a00      	ldrh	r0, [r0, #16]
 800274e:	4770      	bx	lr

08002750 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002750:	88c0      	ldrh	r0, [r0, #6]
 8002752:	4770      	bx	lr

08002754 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002754:	8880      	ldrh	r0, [r0, #4]
 8002756:	4770      	bx	lr

08002758 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002758:	7a80      	ldrb	r0, [r0, #10]
    }
 800275a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800275e:	4770      	bx	lr

08002760 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002760:	7a80      	ldrb	r0, [r0, #10]
    }
 8002762:	09c0      	lsrs	r0, r0, #7
 8002764:	4770      	bx	lr

08002766 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002766:	4770      	bx	lr

08002768 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002768:	b510      	push	{r4, lr}
 800276a:	4604      	mov	r4, r0
    }
 800276c:	2108      	movs	r1, #8
 800276e:	f01f fc78 	bl	8022062 <_ZdlPvj>
 8002772:	4620      	mov	r0, r4
 8002774:	bd10      	pop	{r4, pc}

08002776 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002778:	4770      	bx	lr

0800277a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800277a:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800277e:	6808      	ldr	r0, [r1, #0]
 8002780:	6849      	ldr	r1, [r1, #4]
 8002782:	c303      	stmia	r3!, {r0, r1}
    }
 8002784:	4770      	bx	lr

08002786 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002786:	4770      	bx	lr

08002788 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002788:	4770      	bx	lr

0800278a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800278a:	6041      	str	r1, [r0, #4]
    }
 800278c:	4770      	bx	lr

0800278e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800278e:	4770      	bx	lr

08002790 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002792:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002796:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800279a:	2300      	movs	r3, #0
 800279c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027a0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80027a4:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	08002851 	.word	0x08002851

080027b0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80027b0:	2301      	movs	r3, #1
 80027b2:	7203      	strb	r3, [r0, #8]
    }
 80027b4:	4770      	bx	lr

080027b6 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027b6:	4770      	bx	lr

080027b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027ba:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027bc:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80027be:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027c0:	68c2      	ldr	r2, [r0, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	1054      	asrs	r4, r2, #1
 80027c6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027ca:	07d2      	lsls	r2, r2, #31
 80027cc:	bf48      	it	mi
 80027ce:	590a      	ldrmi	r2, [r1, r4]
    }
 80027d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027d4:	bf48      	it	mi
 80027d6:	58d3      	ldrmi	r3, [r2, r3]
 80027d8:	4718      	bx	r3

080027da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80027da:	6843      	ldr	r3, [r0, #4]
 80027dc:	b12b      	cbz	r3, 80027ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80027de:	6883      	ldr	r3, [r0, #8]
 80027e0:	b92b      	cbnz	r3, 80027ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80027e2:	68c0      	ldr	r0, [r0, #12]
 80027e4:	f000 0001 	and.w	r0, r0, #1
 80027e8:	4770      	bx	lr
 80027ea:	4618      	mov	r0, r3
 80027ec:	4770      	bx	lr
 80027ee:	2001      	movs	r0, #1
    }
 80027f0:	4770      	bx	lr

080027f2 <_ZN8touchgfx12NoTransitionD0Ev>:
 80027f2:	b510      	push	{r4, lr}
 80027f4:	4604      	mov	r4, r0
 80027f6:	210c      	movs	r1, #12
 80027f8:	f01f fc33 	bl	8022062 <_ZdlPvj>
 80027fc:	4620      	mov	r0, r4
 80027fe:	bd10      	pop	{r4, pc}

08002800 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002800:	b510      	push	{r4, lr}
 8002802:	4604      	mov	r4, r0
 8002804:	2110      	movs	r1, #16
 8002806:	f01f fc2c 	bl	8022062 <_ZdlPvj>
 800280a:	4620      	mov	r0, r4
 800280c:	bd10      	pop	{r4, pc}

0800280e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800280e:	b510      	push	{r4, lr}
 8002810:	4604      	mov	r4, r0
 8002812:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002816:	f01f fc24 	bl	8022062 <_ZdlPvj>
 800281a:	4620      	mov	r0, r4
 800281c:	bd10      	pop	{r4, pc}

0800281e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800281e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002820:	f013 fe78 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002828:	f014 babe 	b.w	8016da8 <_ZN8touchgfx11Application10invalidateEv>

0800282c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002830:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002834:	b158      	cbz	r0, 800284e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4798      	blx	r3
 800283c:	b138      	cbz	r0, 800284e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800283e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800284e:	bd10      	pop	{r4, pc}

08002850 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002850:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002854:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002858:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800285a:	68a8      	ldr	r0, [r5, #8]
 800285c:	6803      	ldr	r3, [r0, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4798      	blx	r3
 8002862:	f244 33a3 	movw	r3, #17315	; 0x43a3
 8002866:	4298      	cmp	r0, r3
 8002868:	d805      	bhi.n	8002876 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800286c:	21a3      	movs	r1, #163	; 0xa3
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002870:	4846      	ldr	r0, [pc, #280]	; (800298c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002872:	f01f fd05 	bl	8022280 <__assert_func>
 8002876:	6868      	ldr	r0, [r5, #4]
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4798      	blx	r3
 800287e:	280f      	cmp	r0, #15
 8002880:	d803      	bhi.n	800288a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002884:	21a4      	movs	r1, #164	; 0xa4
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002888:	e7f2      	b.n	8002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800288a:	68e8      	ldr	r0, [r5, #12]
 800288c:	6803      	ldr	r3, [r0, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4798      	blx	r3
 8002892:	280b      	cmp	r0, #11
 8002894:	d803      	bhi.n	800289e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002898:	21a5      	movs	r1, #165	; 0xa5
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800289c:	e7e8      	b.n	8002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800289e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800299c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80028a2:	f013 fe37 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80028a6:	3004      	adds	r0, #4
 80028a8:	f013 fe59 	bl	801655e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80028ac:	f8d9 0000 	ldr.w	r0, [r9]
 80028b0:	b110      	cbz	r0, 80028b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4798      	blx	r3
    if (*currentTrans)
 80028b8:	f8d9 0000 	ldr.w	r0, [r9]
 80028bc:	b110      	cbz	r0, 80028c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4798      	blx	r3
    if (*currentScreen)
 80028c4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80029a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80028c8:	f8d8 0000 	ldr.w	r0, [r8]
 80028cc:	b110      	cbz	r0, 80028d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4798      	blx	r3
    if (*currentPresenter)
 80028d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028d8:	b110      	cbz	r0, 80028e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4798      	blx	r3
    if (*currentScreen)
 80028e0:	f8d8 0000 	ldr.w	r0, [r8]
 80028e4:	b110      	cbz	r0, 80028ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4798      	blx	r3
    if (*currentPresenter)
 80028ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028f0:	b110      	cbz	r0, 80028f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80028f2:	6803      	ldr	r3, [r0, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80028f8:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80028fa:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80028fc:	f04f 0b00 	mov.w	fp, #0
 8002900:	6803      	ldr	r3, [r0, #0]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	4798      	blx	r3
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002908:	4604      	mov	r4, r0
 800290a:	f8c0 b004 	str.w	fp, [r0, #4]
 800290e:	6003      	str	r3, [r0, #0]
 8002910:	4659      	mov	r1, fp
 8002912:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002916:	68a8      	ldr	r0, [r5, #8]
 8002918:	6803      	ldr	r3, [r0, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	4798      	blx	r3
 800291e:	4606      	mov	r6, r0
 8002920:	f005 fc78 	bl	8008214 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002924:	6868      	ldr	r0, [r5, #4]
 8002926:	4659      	mov	r1, fp
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	4798      	blx	r3
 800292e:	4605      	mov	r5, r0
 8002930:	4631      	mov	r1, r6
 8002932:	f005 fbd3 	bl	80080dc <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002936:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800293a:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800293e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002942:	b1e5      	cbz	r5, 800297e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002944:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002946:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800294a:	4630      	mov	r0, r6
 800294c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800294e:	f8c5 a008 	str.w	sl, [r5, #8]
 8002952:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002954:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002956:	4798      	blx	r3
    newPresenter->activate();
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	4628      	mov	r0, r5
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002960:	4621      	mov	r1, r4
 8002962:	4630      	mov	r0, r6
 8002964:	f015 fb38 	bl	8017fd8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	4620      	mov	r0, r4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4798      	blx	r3
    newTransition->invalidate();
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	4620      	mov	r0, r4
 8002974:	695b      	ldr	r3, [r3, #20]
}
 8002976:	b001      	add	sp, #4
 8002978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297c:	4718      	bx	r3
    model->bind(newPresenter);
 800297e:	462b      	mov	r3, r5
 8002980:	e7e1      	b.n	8002946 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8002982:	bf00      	nop
 8002984:	08023cd0 	.word	0x08023cd0
 8002988:	08023d5e 	.word	0x08023d5e
 800298c:	08023e62 	.word	0x08023e62
 8002990:	08023eb7 	.word	0x08023eb7
 8002994:	08023f5a 	.word	0x08023f5a
 8002998:	0802406c 	.word	0x0802406c
 800299c:	2400f288 	.word	0x2400f288
 80029a0:	2400f284 	.word	0x2400f284

080029a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	4617      	mov	r7, r2
 80029aa:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80029ac:	f013 fe78 	bl	80166a0 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80029b2:	2500      	movs	r5, #0
        instance = this;
 80029b4:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029b6:	4629      	mov	r1, r5
      model(m)
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80029ba:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80029be:	4e0f      	ldr	r6, [pc, #60]	; (80029fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80029c6:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80029ca:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029ce:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80029d0:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80029d8:	4628      	mov	r0, r5
 80029da:	f004 fd49 	bl	8007470 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80029de:	6833      	ldr	r3, [r6, #0]
 80029e0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80029e4:	b10a      	cbz	r2, 80029ea <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80029e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029e8:	b900      	cbnz	r0, 80029ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80029ea:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80029ec:	f01a f9f3 	bl	801cdd6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80029f0:	4620      	mov	r0, r4
 80029f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f4:	2400f294 	.word	0x2400f294
 80029f8:	08024020 	.word	0x08024020
 80029fc:	2400f240 	.word	0x2400f240
 8002a00:	08024008 	.word	0x08024008

08002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002a06:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002a0a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002a14:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a18:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	08002851 	.word	0x08002851

08002a24 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002a24:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a26:	4770      	bx	lr

08002a28 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002a28:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a2a:	4770      	bx	lr

08002a2c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002a2c:	4770      	bx	lr

08002a2e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002a2e:	888b      	ldrh	r3, [r1, #4]
 8002a30:	69c0      	ldr	r0, [r0, #28]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	680a      	ldr	r2, [r1, #0]
 8002a36:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002a3a:	4410      	add	r0, r2
 8002a3c:	4770      	bx	lr

08002a3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002a3e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002a40:	b1c2      	cbz	r2, 8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002a42:	7b13      	ldrb	r3, [r2, #12]
 8002a44:	b1b3      	cbz	r3, 8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002a46:	7b54      	ldrb	r4, [r2, #13]
 8002a48:	7ad2      	ldrb	r2, [r2, #11]
 8002a4a:	0224      	lsls	r4, r4, #8
 8002a4c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a50:	4314      	orrs	r4, r2
 8002a52:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a54:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a56:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002a5a:	8813      	ldrh	r3, [r2, #0]
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d102      	bne.n	8002a66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002a60:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002a64:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002a66:	d805      	bhi.n	8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a68:	3801      	subs	r0, #1
 8002a6a:	3204      	adds	r2, #4
 8002a6c:	b280      	uxth	r0, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1f3      	bne.n	8002a5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002a72:	e7f7      	b.n	8002a64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7f5      	b.n	8002a64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002a78 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	f01f faf0 	bl	8022062 <_ZdlPvj>
 8002a82:	4620      	mov	r0, r4
 8002a84:	bd10      	pop	{r4, pc}
	...

08002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002a88:	b530      	push	{r4, r5, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002a8e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002a92:	9508      	str	r5, [sp, #32]
 8002a94:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002a98:	9507      	str	r5, [sp, #28]
 8002a9a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002a9e:	9506      	str	r5, [sp, #24]
 8002aa0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002aa4:	9505      	str	r5, [sp, #20]
 8002aa6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002aaa:	9504      	str	r5, [sp, #16]
 8002aac:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002ab0:	9503      	str	r5, [sp, #12]
 8002ab2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002ab6:	9502      	str	r5, [sp, #8]
 8002ab8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002abc:	9501      	str	r5, [sp, #4]
 8002abe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002ac2:	9500      	str	r5, [sp, #0]
 8002ac4:	f014 fe18 	bl	80176f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002aca:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ad0:	61e3      	str	r3, [r4, #28]
 8002ad2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ad4:	6223      	str	r3, [r4, #32]
 8002ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8002ada:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002adc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002ade:	b00b      	add	sp, #44	; 0x2c
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08024090 	.word	0x08024090

08002ae8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002ae8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002aea:	4770      	bx	lr

08002aec <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002aee:	4770      	bx	lr

08002af0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002af2:	4770      	bx	lr

08002af4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002af4:	4770      	bx	lr

08002af6 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 8002af6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002af8:	4770      	bx	lr

08002afa <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 8002afa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002afc:	4770      	bx	lr

08002afe <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002afe:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002b02:	4770      	bx	lr

08002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002b04:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b06:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002b08:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b0e:	4362      	muls	r2, r4
 8002b10:	4361      	muls	r1, r4
    }
 8002b12:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b16:	4718      	bx	r3

08002b18 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8002b18:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b1c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8002b26:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002b2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	db17      	blt.n	8002b64 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8002b34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b38:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002b3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b40:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002b44:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002b48:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	db1c      	blt.n	8002b8c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8002b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b56:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002b5a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b5e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b62:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002b64:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002b6c:	ee17 2a10 	vmov	r2, s14
 8002b70:	1e51      	subs	r1, r2, #1
 8002b72:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b76:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002b7a:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002b7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002b82:	ee10 2a10 	vmov	r2, s0
 8002b86:	440a      	add	r2, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	e7db      	b.n	8002b44 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002b8c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b94:	ee17 2a90 	vmov	r2, s15
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002b9e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ba2:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002ba6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002baa:	ee10 ca90 	vmov	ip, s1
 8002bae:	4494      	add	ip, r2
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	e7d6      	b.n	8002b62 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002bb4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002bb4:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bb6:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002bb8:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bbe:	4362      	muls	r2, r4
    }
 8002bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bc4:	4718      	bx	r3

08002bc6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8002bc6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bca:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8002bd4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002bd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	db08      	blt.n	8002bf4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002be2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002be6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002bea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bee:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bf2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002bf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfc:	ee17 2a90 	vmov	r2, s15
 8002c00:	3a01      	subs	r2, #1
 8002c02:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002c06:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c0a:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c12:	ee10 ca10 	vmov	ip, s0
 8002c16:	4494      	add	ip, r2
 8002c18:	4662      	mov	r2, ip
 8002c1a:	e7ea      	b.n	8002bf2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002c1c:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c1e:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002c20:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c26:	4362      	muls	r2, r4
 8002c28:	4361      	muls	r1, r4
    }
 8002c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c2e:	4718      	bx	r3

08002c30 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8002c30:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c34:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8002c3e:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002c42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	db17      	blt.n	8002c7c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8002c4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c50:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c54:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c58:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002c5c:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002c60:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	db1c      	blt.n	8002ca4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8002c6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c6e:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002c72:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c76:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c7a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002c7c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002c84:	ee17 2a10 	vmov	r2, s14
 8002c88:	1e51      	subs	r1, r2, #1
 8002c8a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002c8e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002c92:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002c96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c9a:	ee10 2a10 	vmov	r2, s0
 8002c9e:	440a      	add	r2, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	e7db      	b.n	8002c5c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002ca4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cac:	ee17 2a90 	vmov	r2, s15
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002cb6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002cba:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002cbe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002cc2:	ee10 ca90 	vmov	ip, s1
 8002cc6:	4494      	add	ip, r2
 8002cc8:	4662      	mov	r2, ip
 8002cca:	e7d6      	b.n	8002c7a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002ccc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002ccc:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cce:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002cd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cd6:	4362      	muls	r2, r4
    }
 8002cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cdc:	4718      	bx	r3

08002cde <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8002cde:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002ce2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8002cec:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002cf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	db08      	blt.n	8002d0c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002d02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d06:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002d0a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002d0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d14:	ee17 2a90 	vmov	r2, s15
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d1e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d22:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002d26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002d2a:	ee10 ca10 	vmov	ip, s0
 8002d2e:	4494      	add	ip, r2
 8002d30:	4662      	mov	r2, ip
 8002d32:	e7ea      	b.n	8002d0a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8002d34:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8002d38:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db07      	blt.n	8002d4e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d42:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d4a:	1040      	asrs	r0, r0, #1
 8002d4c:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d4e:	f06f 0001 	mvn.w	r0, #1
 8002d52:	fb00 2003 	mla	r0, r0, r3, r2
 8002d56:	3801      	subs	r0, #1
 8002d58:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d5c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d60:	1040      	asrs	r0, r0, #1
 8002d62:	4240      	negs	r0, r0
    }
 8002d64:	4770      	bx	lr

08002d66 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8002d66:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8002d6a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d6e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002d76:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002d7a:	4770      	bx	lr

08002d7c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8002d7c:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8002d80:	4770      	bx	lr

08002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8002d82:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8002d86:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db07      	blt.n	8002d9c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d90:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d94:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d98:	1040      	asrs	r0, r0, #1
 8002d9a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d9c:	f06f 0001 	mvn.w	r0, #1
 8002da0:	fb00 2003 	mla	r0, r0, r3, r2
 8002da4:	3801      	subs	r0, #1
 8002da6:	fb90 f0f2 	sdiv	r0, r0, r2
 8002daa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dae:	1040      	asrs	r0, r0, #1
 8002db0:	4240      	negs	r0, r0
    }
 8002db2:	4770      	bx	lr

08002db4 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002db4:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8002db8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002dbc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002dc4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002dc8:	4770      	bx	lr

08002dca <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8002dca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8002dce:	4770      	bx	lr

08002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8002dd0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8002dd4:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db07      	blt.n	8002dea <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002dda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002dde:	fb93 f0f2 	sdiv	r0, r3, r2
 8002de2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002de6:	1040      	asrs	r0, r0, #1
 8002de8:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002dea:	f06f 0001 	mvn.w	r0, #1
 8002dee:	fb00 2003 	mla	r0, r0, r3, r2
 8002df2:	3801      	subs	r0, #1
 8002df4:	fb90 f0f2 	sdiv	r0, r0, r2
 8002df8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dfc:	1040      	asrs	r0, r0, #1
 8002dfe:	4240      	negs	r0, r0
    }
 8002e00:	4770      	bx	lr

08002e02 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8002e02:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8002e06:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e0a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e12:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e16:	4770      	bx	lr

08002e18 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8002e18:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8002e1c:	4770      	bx	lr

08002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8002e1e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8002e22:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db07      	blt.n	8002e38 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002e28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e2c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002e30:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e34:	1040      	asrs	r0, r0, #1
 8002e36:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002e38:	f06f 0001 	mvn.w	r0, #1
 8002e3c:	fb00 2003 	mla	r0, r0, r3, r2
 8002e40:	3801      	subs	r0, #1
 8002e42:	fb90 f0f2 	sdiv	r0, r0, r2
 8002e46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e4a:	1040      	asrs	r0, r0, #1
 8002e4c:	4240      	negs	r0, r0
    }
 8002e4e:	4770      	bx	lr

08002e50 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002e50:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8002e54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e58:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e60:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e64:	4770      	bx	lr

08002e66 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8002e66:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8002e6a:	4770      	bx	lr

08002e6c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8002e6c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8002e6e:	b570      	push	{r4, r5, r6, lr}
 8002e70:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8002e76:	460d      	mov	r5, r1
 8002e78:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8002e7a:	4798      	blx	r3
        setScaleY(scale, updateData);
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	4632      	mov	r2, r6
 8002e80:	4629      	mov	r1, r5
 8002e82:	4620      	mov	r0, r4
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8002e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8002e8c:	4718      	bx	r3

08002e8e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8002e8e:	6803      	ldr	r3, [r0, #0]
 8002e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e94:	4718      	bx	r3

08002e96 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8002e96:	6803      	ldr	r3, [r0, #0]
 8002e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e9c:	4718      	bx	r3

08002e9e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8002e9e:	6803      	ldr	r3, [r0, #0]
 8002ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea4:	4718      	bx	r3

08002ea6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002ea6:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8002ea8:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8002eaa:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 8002eb0:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 8002eb2:	db0e      	blt.n	8002ed2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8002eb4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002eb8:	fb92 f1f4 	sdiv	r1, r2, r4
 8002ebc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ec0:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002ec2:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 8002ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	440a      	add	r2, r1
 8002ece:	4249      	negs	r1, r1
 8002ed0:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002ed2:	f06f 0101 	mvn.w	r1, #1
 8002ed6:	fb01 4102 	mla	r1, r1, r2, r4
 8002eda:	3901      	subs	r1, #1
 8002edc:	fb91 f1f4 	sdiv	r1, r1, r4
 8002ee0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ee4:	1049      	asrs	r1, r1, #1
 8002ee6:	4249      	negs	r1, r1
 8002ee8:	e7eb      	b.n	8002ec2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08002eea <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002ef0:	4718      	bx	r3

08002ef2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8002ef2:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8002ef4:	6803      	ldr	r3, [r0, #0]
 8002ef6:	4351      	muls	r1, r2
 8002ef8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002efc:	4718      	bx	r3

08002efe <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002f04:	4718      	bx	r3

08002f06 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8002f06:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8002f0a:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 8002f14:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002f18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	db08      	blt.n	8002f34 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8002f22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f2e:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f32:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002f34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3c:	ee17 2a90 	vmov	r2, s15
 8002f40:	1e51      	subs	r1, r2, #1
 8002f42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f46:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f4a:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f52:	ee10 2a10 	vmov	r2, s0
 8002f56:	440a      	add	r2, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	e7ea      	b.n	8002f32 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08002f5c <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8002f5c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 8002f60:	4770      	bx	lr

08002f62 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f68:	4718      	bx	r3

08002f6a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8002f6a:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8002f6c:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8002f6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 8002f72:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f74:	4798      	blx	r3
        if (i >= 0)
 8002f76:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8002f78:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8002f7a:	db07      	blt.n	8002f8c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8002f7c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002f80:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f88:	1040      	asrs	r0, r0, #1
    }
 8002f8a:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	fb02 3000 	mla	r0, r2, r0, r3
 8002f94:	3801      	subs	r0, #1
 8002f96:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f9a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f9e:	1040      	asrs	r0, r0, #1
 8002fa0:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8002fa2:	e7f2      	b.n	8002f8a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08002fa4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8002fa4:	6803      	ldr	r3, [r0, #0]
 8002fa6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002faa:	4718      	bx	r3

08002fac <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8002fac:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8002fae:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 8002fb0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8002fb4:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8002fb6:	4798      	blx	r3
        return (float)i / (float)scale;
 8002fb8:	ee07 0a90 	vmov	s15, r0
 8002fbc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002fc0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8002fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002fc8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8002fce:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002fd2:	4770      	bx	lr

08002fd4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8002fd4:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	4351      	muls	r1, r2
 8002fda:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002fde:	4718      	bx	r3

08002fe0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8002fe0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fe4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fea:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 8002fee:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002ff2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	db08      	blt.n	800300e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8002ffc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003000:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003004:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003008:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 800300c:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800300e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003016:	ee17 2a90 	vmov	r2, s15
 800301a:	1e51      	subs	r1, r2, #1
 800301c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003020:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003024:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003028:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800302c:	ee10 2a10 	vmov	r2, s0
 8003030:	440a      	add	r2, r1
 8003032:	4611      	mov	r1, r2
 8003034:	e7ea      	b.n	800300c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08003036 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8003036:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 800303a:	4770      	bx	lr

0800303c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 800303c:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 800303e:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8003040:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8003044:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003046:	4798      	blx	r3
        if (i >= 0)
 8003048:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800304a:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 800304c:	db07      	blt.n	800305e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800304e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003052:	fb90 f0f3 	sdiv	r0, r0, r3
 8003056:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800305a:	1040      	asrs	r0, r0, #1
    }
 800305c:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800305e:	f06f 0201 	mvn.w	r2, #1
 8003062:	fb02 3000 	mla	r0, r2, r0, r3
 8003066:	3801      	subs	r0, #1
 8003068:	fb90 f0f3 	sdiv	r0, r0, r3
 800306c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003070:	1040      	asrs	r0, r0, #1
 8003072:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003074:	e7f2      	b.n	800305c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08003076 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8003076:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8003078:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 800307a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 800307e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8003080:	4798      	blx	r3
        return (float)i / (float)scale;
 8003082:	ee07 0a90 	vmov	s15, r0
 8003086:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800308a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800308e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003092:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003096:	bd10      	pop	{r4, pc}

08003098 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8003098:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800309c:	4770      	bx	lr

0800309e <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800309e:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 80030a0:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 80030a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 80030a8:	b510      	push	{r4, lr}
 80030aa:	4604      	mov	r4, r0
        if (i >= 0)
 80030ac:	db0e      	blt.n	80030cc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 80030ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80030b2:	fb91 f1f2 	sdiv	r1, r1, r2
 80030b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030ba:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030bc:	b209      	sxth	r1, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4798      	blx	r3
 80030c2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80030c6:	fb02 3000 	mla	r0, r2, r0, r3
 80030ca:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80030cc:	f06f 0001 	mvn.w	r0, #1
 80030d0:	fb00 2101 	mla	r1, r0, r1, r2
 80030d4:	3901      	subs	r1, #1
 80030d6:	fb91 f1f2 	sdiv	r1, r1, r2
 80030da:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030de:	1049      	asrs	r1, r1, #1
 80030e0:	4249      	negs	r1, r1
 80030e2:	e7eb      	b.n	80030bc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080030e4 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80030e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030e6:	4770      	bx	lr

080030e8 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80030e8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80030ea:	4770      	bx	lr

080030ec <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80030ec:	6803      	ldr	r3, [r0, #0]
 80030ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80030f2:	4718      	bx	r3

080030f4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80030f4:	6803      	ldr	r3, [r0, #0]
 80030f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80030fa:	4718      	bx	r3

080030fc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80030fc:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	4351      	muls	r1, r2
 8003102:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003106:	4718      	bx	r3

08003108 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003108:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800310a:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800310c:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8003110:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003112:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8003116:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800311a:	4798      	blx	r3
 800311c:	462b      	mov	r3, r5
 800311e:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8003122:	4620      	mov	r0, r4
    }
 8003124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003128:	4718      	bx	r3

0800312a <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 800312a:	4610      	mov	r0, r2
 800312c:	4770      	bx	lr

0800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 800312e:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003138:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800313c:	4718      	bx	r3

0800313e <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 800313e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003148:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800314c:	4718      	bx	r3

0800314e <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800314e:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8003152:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003156:	4293      	cmp	r3, r2
 8003158:	db07      	blt.n	800316a <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 800315a:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 800315e:	4419      	add	r1, r3
 8003160:	fb91 f0f2 	sdiv	r0, r1, r2
 8003164:	fb02 1110 	mls	r1, r2, r0, r1
 8003168:	b209      	sxth	r1, r1
    }
 800316a:	4608      	mov	r0, r1
 800316c:	4770      	bx	lr

0800316e <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 800316e:	0148      	lsls	r0, r1, #5
 8003170:	4770      	bx	lr

08003172 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8003172:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 8003174:	4770      	bx	lr

08003176 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8003176:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003178:	4770      	bx	lr

0800317a <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 800317a:	2001      	movs	r0, #1
 800317c:	4770      	bx	lr

0800317e <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 800317e:	4770      	bx	lr

08003180 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003180:	4770      	bx	lr

08003182 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 8003182:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003184:	b118      	cbz	r0, 800318e <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318c:	4718      	bx	r3
    }
 800318e:	4770      	bx	lr

08003190 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003190:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003194:	b530      	push	{r4, r5, lr}
        return topPadding;
 8003196:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 800319a:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800319e:	4421      	add	r1, r4
 80031a0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80031a4:	8044      	strh	r4, [r0, #2]
 80031a6:	1a52      	subs	r2, r2, r1
 80031a8:	2100      	movs	r1, #0
 80031aa:	8085      	strh	r5, [r0, #4]
 80031ac:	8001      	strh	r1, [r0, #0]
 80031ae:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 80031b0:	bd30      	pop	{r4, r5, pc}

080031b2 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80031b2:	b510      	push	{r4, lr}
 80031b4:	8042      	strh	r2, [r0, #2]
 80031b6:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80031ba:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80031be:	8004      	strh	r4, [r0, #0]
 80031c0:	8082      	strh	r2, [r0, #4]
 80031c2:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 80031c6:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80031c8:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 80031ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80031ce:	4718      	bx	r3

080031d0 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 80031d0:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80031d2:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4718      	bx	r3

080031da <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80031da:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80031de:	4770      	bx	lr

080031e0 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80031e0:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80031e4:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80031e8:	4403      	add	r3, r0
 80031ea:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80031ee:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80031f0:	b200      	sxth	r0, r0
 80031f2:	4770      	bx	lr

080031f4 <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80031f4:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80031f8:	4770      	bx	lr

080031fa <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031fa:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80031fe:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003202:	4403      	add	r3, r0
 8003204:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003208:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 800320a:	b200      	sxth	r0, r0
 800320c:	4770      	bx	lr

0800320e <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 800320e:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003210:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 8003212:	4611      	mov	r1, r2
 8003214:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003218:	4718      	bx	r3

0800321a <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 800321a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800321e:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8003220:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003224:	186c      	adds	r4, r5, r1
 8003226:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 800322a:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800322e:	1b09      	subs	r1, r1, r4
 8003230:	2400      	movs	r4, #0
 8003232:	8005      	strh	r5, [r0, #0]
 8003234:	8044      	strh	r4, [r0, #2]
 8003236:	8081      	strh	r1, [r0, #4]
 8003238:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 800323a:	bd30      	pop	{r4, r5, pc}

0800323c <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 800323c:	8002      	strh	r2, [r0, #0]
 800323e:	8083      	strh	r3, [r0, #4]
 8003240:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003244:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003248:	8042      	strh	r2, [r0, #2]
 800324a:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 800324c:	4770      	bx	lr

0800324e <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 800324e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003250:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 8003252:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003256:	4718      	bx	r3

08003258 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003258:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800325a:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 800325c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003260:	4718      	bx	r3

08003262 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 8003262:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003266:	4770      	bx	lr

08003268 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003268:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 800326c:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003270:	4403      	add	r3, r0
 8003272:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003276:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003278:	b200      	sxth	r0, r0
 800327a:	4770      	bx	lr

0800327c <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800327c:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003280:	4770      	bx	lr

08003282 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003282:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 8003286:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 800328a:	4403      	add	r3, r0
 800328c:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003290:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003292:	b200      	sxth	r0, r0
 8003294:	4770      	bx	lr

08003296 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8003296:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003298:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 800329a:	4611      	mov	r1, r2
 800329c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80032a0:	4718      	bx	r3

080032a2 <_ZN15Screen1ViewBase13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void graph2Dragged(AbstractDataGraph::GraphDragEvent value)
 80032a2:	b082      	sub	sp, #8
 80032a4:	ab02      	add	r3, sp, #8
 80032a6:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in Screen1
    }
 80032aa:	b002      	add	sp, #8
 80032ac:	4770      	bx	lr

080032ae <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 80032b0:	4770      	bx	lr

080032b2 <_ZN8touchgfx5GraphILs100EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80032b4:	4770      	bx	lr

080032b6 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80032b8:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80032ba:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80032bc:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80032be:	68c4      	ldr	r4, [r0, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	1066      	asrs	r6, r4, #1
 80032c4:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80032c8:	07e4      	lsls	r4, r4, #31
 80032ca:	bf44      	itt	mi
 80032cc:	59ac      	ldrmi	r4, [r5, r6]
 80032ce:	58e3      	ldrmi	r3, [r4, r3]
    }
 80032d0:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80032d2:	4718      	bx	r3

080032d4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80032d4:	6843      	ldr	r3, [r0, #4]
 80032d6:	b12b      	cbz	r3, 80032e4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 80032d8:	6883      	ldr	r3, [r0, #8]
 80032da:	b92b      	cbnz	r3, 80032e8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 80032dc:	68c0      	ldr	r0, [r0, #12]
 80032de:	f000 0001 	and.w	r0, r0, #1
 80032e2:	4770      	bx	lr
 80032e4:	4618      	mov	r0, r3
 80032e6:	4770      	bx	lr
 80032e8:	2001      	movs	r0, #1
    }
 80032ea:	4770      	bx	lr

080032ec <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	f01e feb6 	bl	8022062 <_ZdlPvj>
 80032f6:	4620      	mov	r0, r4
 80032f8:	bd10      	pop	{r4, pc}

080032fa <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	f01e feaf 	bl	8022062 <_ZdlPvj>
 8003304:	4620      	mov	r0, r4
 8003306:	bd10      	pop	{r4, pc}

08003308 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 8003308:	b510      	push	{r4, lr}
 800330a:	4604      	mov	r4, r0
 800330c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003310:	f01e fea7 	bl	8022062 <_ZdlPvj>
 8003314:	4620      	mov	r0, r4
 8003316:	bd10      	pop	{r4, pc}

08003318 <_ZN8touchgfx5GraphILs100EED0Ev>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	f240 4164 	movw	r1, #1124	; 0x464
 8003320:	f01e fe9f 	bl	8022062 <_ZdlPvj>
 8003324:	4620      	mov	r0, r4
 8003326:	bd10      	pop	{r4, pc}

08003328 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	2110      	movs	r1, #16
 800332e:	f01e fe98 	bl	8022062 <_ZdlPvj>
 8003332:	4620      	mov	r0, r4
 8003334:	bd10      	pop	{r4, pc}

08003336 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8003336:	b513      	push	{r0, r1, r4, lr}
 8003338:	4603      	mov	r3, r0
 800333a:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800333c:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003340:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003342:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	4798      	blx	r3
 800334a:	9901      	ldr	r1, [sp, #4]
 800334c:	4602      	mov	r2, r0
 800334e:	4620      	mov	r0, r4
    }
 8003350:	b002      	add	sp, #8
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003356:	f00e be5d 	b.w	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800335a <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800335a:	b513      	push	{r0, r1, r4, lr}
 800335c:	4603      	mov	r3, r0
 800335e:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003360:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003364:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003366:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	4798      	blx	r3
 800336e:	9901      	ldr	r1, [sp, #4]
 8003370:	4602      	mov	r2, r0
 8003372:	4620      	mov	r0, r4
    }
 8003374:	b002      	add	sp, #8
 8003376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800337a:	f00e be4b 	b.w	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800337e <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 800337e:	f500 600f 	add.w	r0, r0, #2288	; 0x8f0
 8003382:	f004 bfa3 	b.w	80082cc <_ZN11customGraph10initializeEv>

08003386 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8003386:	b508      	push	{r3, lr}
        if (alpha > 0)
 8003388:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800338c:	b10b      	cbz	r3, 8003392 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 800338e:	f7ff f92d 	bl	80025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003392:	bd08      	pop	{r3, pc}

08003394 <_ZN15Screen1ViewBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:
}

void Screen1ViewBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 8003394:	b410      	push	{r4}
    if (&src == &graph2)
 8003396:	f600 741c 	addw	r4, r0, #3868	; 0xf1c
 800339a:	428c      	cmp	r4, r1
 800339c:	d105      	bne.n	80033aa <_ZN15Screen1ViewBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x16>
    {
        //Interaction2
        //When graph2 dragged call virtual function
        //Call graph2Dragged
        graph2Dragged(value);
 800339e:	6803      	ldr	r3, [r0, #0]
    }
}
 80033a0:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph2Dragged(value);
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	ca06      	ldmia	r2, {r1, r2}
 80033a8:	4718      	bx	r3
}
 80033aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80033b0:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80033b2:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80033b4:	db03      	blt.n	80033be <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80033b6:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 80033ba:	4294      	cmp	r4, r2
 80033bc:	dc06      	bgt.n	80033cc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80033c0:	f240 6139 	movw	r1, #1593	; 0x639
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80033c6:	4808      	ldr	r0, [pc, #32]	; (80033e8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80033c8:	f01e ff5a 	bl	8022280 <__assert_func>
        return yValues[dataIndex(index)];
 80033cc:	6803      	ldr	r3, [r0, #0]
 80033ce:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 80033d2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80033d6:	4798      	blx	r3
    }
 80033d8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	080240e8 	.word	0x080240e8
 80033e4:	0802410b 	.word	0x0802410b
 80033e8:	0802415a 	.word	0x0802415a

080033ec <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80033ec:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80033ee:	b510      	push	{r4, lr}
 80033f0:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 80033f2:	db03      	blt.n	80033fc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 80033f4:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80033f8:	429a      	cmp	r2, r3
 80033fa:	dc06      	bgt.n	800340a <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 80033fc:	4b07      	ldr	r3, [pc, #28]	; (800341c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 80033fe:	f240 6133 	movw	r1, #1587	; 0x633
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8003404:	4807      	ldr	r0, [pc, #28]	; (8003424 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 8003406:	f01e ff3b 	bl	8022280 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800340a:	6803      	ldr	r3, [r0, #0]
 800340c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003410:	4798      	blx	r3
 8003412:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 8003416:	fb02 3000 	mla	r0, r2, r0, r3
 800341a:	bd10      	pop	{r4, pc}
 800341c:	080240e8 	.word	0x080240e8
 8003420:	080241c5 	.word	0x080241c5
 8003424:	0802415a 	.word	0x0802415a

08003428 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003428:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 800342a:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 800342c:	db03      	blt.n	8003436 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 800342e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003432:	428b      	cmp	r3, r1
 8003434:	dc06      	bgt.n	8003444 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 8003438:	f240 61f5 	movw	r1, #1781	; 0x6f5
 800343c:	4a05      	ldr	r2, [pc, #20]	; (8003454 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 800343e:	4806      	ldr	r0, [pc, #24]	; (8003458 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 8003440:	f01e ff1e 	bl	8022280 <__assert_func>
        return yValues[index];
 8003444:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 8003448:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800344c:	bd08      	pop	{r3, pc}
 800344e:	bf00      	nop
 8003450:	080240e8 	.word	0x080240e8
 8003454:	08024214 	.word	0x08024214
 8003458:	0802415a 	.word	0x0802415a

0800345c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 800345c:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800345e:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003460:	db03      	blt.n	800346a <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 8003462:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003466:	428b      	cmp	r3, r1
 8003468:	dc06      	bgt.n	8003478 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 800346c:	f240 61e5 	movw	r1, #1765	; 0x6e5
 8003470:	4a05      	ldr	r2, [pc, #20]	; (8003488 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003474:	f01e ff04 	bl	8022280 <__assert_func>
        return xValues[index];
 8003478:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 800347c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003480:	bd08      	pop	{r3, pc}
 8003482:	bf00      	nop
 8003484:	080240e8 	.word	0x080240e8
 8003488:	08024262 	.word	0x08024262
 800348c:	0802415a 	.word	0x0802415a

08003490 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003490:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <_ZN15Screen1ViewBaseD1Ev+0x20>)
 8003492:	b510      	push	{r4, lr}
 8003494:	6003      	str	r3, [r0, #0]
 8003496:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8003498:	f011 fbbe 	bl	8014c18 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <_ZN15Screen1ViewBaseD1Ev+0x24>)
 800349e:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 80034a2:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
 80034a6:	f004 f84b 	bl	8007540 <_ZN15customGraphBaseD1Ev>
}
 80034aa:	4620      	mov	r0, r4
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	bf00      	nop
 80034b0:	08024780 	.word	0x08024780
 80034b4:	08024b00 	.word	0x08024b00

080034b8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4604      	mov	r4, r0
}
 80034bc:	f7ff ffe8 	bl	8003490 <_ZN15Screen1ViewBaseD1Ev>
 80034c0:	f244 3194 	movw	r1, #17300	; 0x4394
 80034c4:	4620      	mov	r0, r4
 80034c6:	f01e fdcc 	bl	8022062 <_ZdlPvj>
 80034ca:	4620      	mov	r0, r4
 80034cc:	bd10      	pop	{r4, pc}

080034ce <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80034ce:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4604      	mov	r4, r0
        setX(x);
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80034d6:	4615      	mov	r5, r2
        setX(x);
 80034d8:	4798      	blx	r3
        setY(y);
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	4620      	mov	r0, r4
 80034de:	4629      	mov	r1, r5
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80034e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80034e6:	4718      	bx	r3

080034e8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4604      	mov	r4, r0
 80034ec:	461d      	mov	r5, r3
 80034ee:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80034f2:	f7ff ffec 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	4629      	mov	r1, r5
 80034fa:	4620      	mov	r0, r4
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	4798      	blx	r3
        setHeight(height);
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	4631      	mov	r1, r6
 8003504:	4620      	mov	r0, r4
 8003506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 800350c:	4718      	bx	r3
	...

08003510 <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 8003510:	2200      	movs	r2, #0
 8003512:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003516:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 800351a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800351e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003526:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003528:	4a01      	ldr	r2, [pc, #4]	; (8003530 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800352a:	6002      	str	r2, [r0, #0]
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	080242b8 	.word	0x080242b8

08003534 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003534:	b510      	push	{r4, lr}
 8003536:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003538:	2226      	movs	r2, #38	; 0x26
 800353a:	2100      	movs	r1, #0
 800353c:	f01e ff2c 	bl	8022398 <memset>
 8003540:	4620      	mov	r0, r4
 8003542:	f7ff ffe5 	bl	8003510 <_ZN8touchgfx6WidgetC1Ev>
 8003546:	4b04      	ldr	r3, [pc, #16]	; (8003558 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003548:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	23ff      	movs	r3, #255	; 0xff
 800354e:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8003552:	2300      	movs	r3, #0
 8003554:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8003556:	bd10      	pop	{r4, pc}
 8003558:	080255a4 	.word	0x080255a4

0800355c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003560:	2226      	movs	r2, #38	; 0x26
 8003562:	2100      	movs	r1, #0
 8003564:	f01e ff18 	bl	8022398 <memset>
 8003568:	4620      	mov	r0, r4
 800356a:	f7ff ffd1 	bl	8003510 <_ZN8touchgfx6WidgetC1Ev>
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003570:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003574:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003576:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800357a:	62a3      	str	r3, [r4, #40]	; 0x28
 800357c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003580:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003582:	2300      	movs	r3, #0
 8003584:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003588:	f04f 32ff 	mov.w	r2, #4294967295
 800358c:	8723      	strh	r3, [r4, #56]	; 0x38
 800358e:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003590:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	08025514 	.word	0x08025514
 800359c:	08023cc8 	.word	0x08023cc8

080035a0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80035a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80035a2:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80035a4:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80035a6:	f014 f9a2 	bl	80178ee <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80035aa:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035ac:	462a      	mov	r2, r5
 80035ae:	9901      	ldr	r1, [sp, #4]
 80035b0:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80035b4:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80035b8:	db04      	blt.n	80035c4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035ba:	f014 f9b7 	bl	801792c <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80035be:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80035c0:	b003      	add	sp, #12
 80035c2:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035c4:	f014 f9b2 	bl	801792c <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80035c8:	1a20      	subs	r0, r4, r0
 80035ca:	e7f9      	b.n	80035c0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080035cc <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80035cc:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80035ce:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80035d2:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80035d4:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80035d8:	1963      	adds	r3, r4, r5
 80035da:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80035de:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80035e0:	b22d      	sxth	r5, r5
 80035e2:	442c      	add	r4, r5
 80035e4:	1e69      	subs	r1, r5, #1
 80035e6:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80035ea:	3c01      	subs	r4, #1
 80035ec:	1ad2      	subs	r2, r2, r3
 80035ee:	1af0      	subs	r0, r6, r3
 80035f0:	f7ff ffd6 	bl	80035a0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80035f4:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80035f8:	bd70      	pop	{r4, r5, r6, pc}

080035fa <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80035fa:	b538      	push	{r3, r4, r5, lr}
 80035fc:	4604      	mov	r4, r0
 80035fe:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003600:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8003604:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8003608:	440b      	add	r3, r1
 800360a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800360e:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8003610:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 8003614:	b209      	sxth	r1, r1
 8003616:	1b52      	subs	r2, r2, r5
 8003618:	1b40      	subs	r0, r0, r5
 800361a:	3901      	subs	r1, #1
 800361c:	f7ff ffc0 	bl	80035a0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003620:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8003624:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003628:	bd38      	pop	{r3, r4, r5, pc}
	...

0800362c <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 800362c:	b510      	push	{r4, lr}
 800362e:	4604      	mov	r4, r0
        : CanvasWidget()
 8003630:	f00d ff96 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8003634:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x34>)
        : color(col)
 8003636:	2300      	movs	r3, #0
    {
    }
 8003638:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800363a:	6022      	str	r2, [r4, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003640:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003644:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8003648:	64a3      	str	r3, [r4, #72]	; 0x48
 800364a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 800364e:	4a05      	ldr	r2, [pc, #20]	; (8003664 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 8003650:	63a2      	str	r2, [r4, #56]	; 0x38
 8003652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003656:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8003658:	222e      	movs	r2, #46	; 0x2e
 800365a:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    }
 800365e:	bd10      	pop	{r4, pc}
 8003660:	08025474 	.word	0x08025474
 8003664:	08023cc8 	.word	0x08023cc8

08003668 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	4604      	mov	r4, r0
        : presenter(0)
 800366e:	2700      	movs	r7, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003670:	f64f 75ff 	movw	r5, #65535	; 0xffff
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003674:	f04f 0a01 	mov.w	sl, #1
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003678:	46a3      	mov	fp, r4
 800367a:	f104 096c 	add.w	r9, r4, #108	; 0x6c
 800367e:	f204 564c 	addw	r6, r4, #1356	; 0x54c
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003682:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
Screen1ViewBase::Screen1ViewBase() :
 8003686:	ed2d 8b10 	vpush	{d8-d15}
 800368a:	b095      	sub	sp, #84	; 0x54
 800368c:	f014 faf8 	bl	8017c80 <_ZN8touchgfx6ScreenC1Ev>
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003690:	4bea      	ldr	r3, [pc, #936]	; (8003a3c <_ZN15Screen1ViewBaseC1Ev+0x3d4>)
 8003692:	63e7      	str	r7, [r4, #60]	; 0x3c
 8003694:	f84b 3b40 	str.w	r3, [fp], #64
 8003698:	4658      	mov	r0, fp
 800369a:	f7ff ff4b 	bl	8003534 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800369e:	2226      	movs	r2, #38	; 0x26
 80036a0:	4639      	mov	r1, r7
 80036a2:	4648      	mov	r0, r9
 80036a4:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80036a8:	f01e fe76 	bl	8022398 <memset>
 80036ac:	4648      	mov	r0, r9
 80036ae:	f7ff ff2f 	bl	8003510 <_ZN8touchgfx6WidgetC1Ev>
 80036b2:	4be3      	ldr	r3, [pc, #908]	; (8003a40 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
    {
        Image::setBitmap(bmp);
 80036b4:	a912      	add	r1, sp, #72	; 0x48
 80036b6:	4648      	mov	r0, r9
        : Widget(), bitmap(bmp), alpha(255)
 80036b8:	66e3      	str	r3, [r4, #108]	; 0x6c
 80036ba:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80036be:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
 80036c2:	f604 751c 	addw	r5, r4, #3868	; 0xf1c
 80036c6:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80036ca:	f010 fb9f 	bl	8013e0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80036ce:	f104 0398 	add.w	r3, r4, #152	; 0x98
 80036d2:	4618      	mov	r0, r3
 80036d4:	ee08 3a90 	vmov	s17, r3
 80036d8:	f7ff ff40 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 80036dc:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 80036e0:	4618      	mov	r0, r3
 80036e2:	ee09 3a10 	vmov	s18, r3
 80036e6:	f7ff ff39 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 80036ea:	f504 7394 	add.w	r3, r4, #296	; 0x128
 80036ee:	4618      	mov	r0, r3
 80036f0:	ee09 3a90 	vmov	s19, r3
 80036f4:	f7ff ff32 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 80036f8:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80036fc:	4618      	mov	r0, r3
 80036fe:	ee0a 3a10 	vmov	s20, r3
 8003702:	f7ff ff2b 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003706:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 800370a:	4618      	mov	r0, r3
 800370c:	ee0a 3a90 	vmov	s21, r3
 8003710:	f7ff ff24 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003714:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8003718:	4618      	mov	r0, r3
 800371a:	ee0b 3a10 	vmov	s22, r3
 800371e:	f7ff ff1d 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003722:	f504 7312 	add.w	r3, r4, #584	; 0x248
 8003726:	4618      	mov	r0, r3
 8003728:	ee0b 3a90 	vmov	s23, r3
 800372c:	f7ff ff16 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003730:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8003734:	4618      	mov	r0, r3
 8003736:	ee0c 3a10 	vmov	s24, r3
 800373a:	f7ff ff0f 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 800373e:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 8003742:	4618      	mov	r0, r3
 8003744:	ee0c 3a90 	vmov	s25, r3
 8003748:	f7ff ff08 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 800374c:	f504 7348 	add.w	r3, r4, #800	; 0x320
 8003750:	4618      	mov	r0, r3
 8003752:	ee0d 3a10 	vmov	s26, r3
 8003756:	f7ff ff01 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 800375a:	f504 735a 	add.w	r3, r4, #872	; 0x368
 800375e:	4618      	mov	r0, r3
 8003760:	ee0d 3a90 	vmov	s27, r3
 8003764:	f7ff fefa 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003768:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 800376c:	4618      	mov	r0, r3
 800376e:	ee0e 3a10 	vmov	s28, r3
 8003772:	f7ff fef3 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003776:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 800377a:	4618      	mov	r0, r3
 800377c:	ee0e 3a90 	vmov	s29, r3
 8003780:	f7ff feec 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003784:	f504 6388 	add.w	r3, r4, #1088	; 0x440
 8003788:	4618      	mov	r0, r3
 800378a:	ee0f 3a10 	vmov	s30, r3
 800378e:	f7ff fee5 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003792:	f504 6391 	add.w	r3, r4, #1160	; 0x488
 8003796:	4618      	mov	r0, r3
 8003798:	ee0f 3a90 	vmov	s31, r3
 800379c:	f7ff fede 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 80037a0:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80037a4:	4618      	mov	r0, r3
 80037a6:	9306      	str	r3, [sp, #24]
 80037a8:	f7ff fec4 	bl	8003534 <_ZN8touchgfx3BoxC1Ev>
 80037ac:	4ba5      	ldr	r3, [pc, #660]	; (8003a44 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
 80037ae:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
 80037b2:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
 80037b6:	f204 5304 	addw	r3, r4, #1284	; 0x504
 80037ba:	f8a4 7500 	strh.w	r7, [r4, #1280]	; 0x500
 80037be:	4618      	mov	r0, r3
 80037c0:	9302      	str	r3, [sp, #8]
 80037c2:	f7ff fecb 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	4630      	mov	r0, r6
 80037ca:	f00e fbbf 	bl	8011f4c <_ZN8touchgfx17AbstractDataGraphC1Es>
 80037ce:	4b9e      	ldr	r3, [pc, #632]	; (8003a48 <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037d0:	4639      	mov	r1, r7
 80037d2:	2263      	movs	r2, #99	; 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037d4:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 80037d8:	f204 639c 	addw	r3, r4, #1692	; 0x69c
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037dc:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037de:	f8c4 768c 	str.w	r7, [r4, #1676]	; 0x68c
 80037e2:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
 80037e6:	f8c4 7694 	str.w	r7, [r4, #1684]	; 0x694
 80037ea:	f8c4 a688 	str.w	sl, [r4, #1672]	; 0x688
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037ee:	f7ff f989 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80037f2:	4b96      	ldr	r3, [pc, #600]	; (8003a4c <_ZN15Screen1ViewBaseC1Ev+0x3e4>)
        : DynamicDataGraph(capacity, values), current(0)
 80037f4:	f8a4 7698 	strh.w	r7, [r4, #1688]	; 0x698
        : GraphScrollData(CAPACITY, y)
 80037f8:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 80037fc:	f604 032c 	addw	r3, r4, #2092	; 0x82c
 8003800:	4618      	mov	r0, r3
 8003802:	9309      	str	r3, [sp, #36]	; 0x24
 8003804:	f00d feac 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003808:	230a      	movs	r3, #10
 800380a:	f8c4 7858 	str.w	r7, [r4, #2136]	; 0x858
 800380e:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
class GraphElementGridX : public GraphElementGridBase
 8003812:	4b8f      	ldr	r3, [pc, #572]	; (8003a50 <_ZN15Screen1ViewBaseC1Ev+0x3e8>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003814:	f8c4 7868 	str.w	r7, [r4, #2152]	; 0x868
class GraphElementGridX : public GraphElementGridBase
 8003818:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
 800381c:	f604 036c 	addw	r3, r4, #2156	; 0x86c
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003820:	f8c4 a85c 	str.w	sl, [r4, #2140]	; 0x85c
        : CanvasWidget()
 8003824:	4618      	mov	r0, r3
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003826:	f884 a864 	strb.w	sl, [r4, #2148]	; 0x864
 800382a:	930a      	str	r3, [sp, #40]	; 0x28
        : CanvasWidget()
 800382c:	f00d fe98 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003830:	230a      	movs	r3, #10
 8003832:	f8c4 7898 	str.w	r7, [r4, #2200]	; 0x898
 8003836:	f8c4 78a8 	str.w	r7, [r4, #2216]	; 0x8a8
 800383a:	f8c4 38a0 	str.w	r3, [r4, #2208]	; 0x8a0
class GraphElementGridY : public GraphElementGridBase
 800383e:	4b85      	ldr	r3, [pc, #532]	; (8003a54 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003840:	f8c4 a89c 	str.w	sl, [r4, #2204]	; 0x89c
class GraphElementGridY : public GraphElementGridBase
 8003844:	f8c4 386c 	str.w	r3, [r4, #2156]	; 0x86c
 8003848:	f604 03ac 	addw	r3, r4, #2220	; 0x8ac
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800384c:	f884 a8a4 	strb.w	sl, [r4, #2212]	; 0x8a4
        : CanvasWidget()
 8003850:	4618      	mov	r0, r3
 8003852:	930b      	str	r3, [sp, #44]	; 0x2c
 8003854:	f00d fe84 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003858:	f04f 0202 	mov.w	r2, #2
 800385c:	4b7e      	ldr	r3, [pc, #504]	; (8003a58 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 800385e:	f884 28d8 	strb.w	r2, [r4, #2264]	; 0x8d8
 8003862:	f604 02dc 	addw	r2, r4, #2268	; 0x8dc
 8003866:	f8c4 38ac 	str.w	r3, [r4, #2220]	; 0x8ac
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 800386a:	4610      	mov	r0, r2
 800386c:	920c      	str	r2, [sp, #48]	; 0x30
 800386e:	f7fe ff01 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003872:	4b7a      	ldr	r3, [pc, #488]	; (8003a5c <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
 8003874:	f504 610f 	add.w	r1, r4, #2288	; 0x8f0
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003878:	f8c4 78e8 	str.w	r7, [r4, #2280]	; 0x8e8
 800387c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003880:	f8c4 38dc 	str.w	r3, [r4, #2268]	; 0x8dc
 8003884:	4608      	mov	r0, r1
 8003886:	9107      	str	r1, [sp, #28]
 8003888:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
 800388c:	f004 fd10 	bl	80082b0 <_ZN11customGraphC1Ev>
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	4628      	mov	r0, r5
 8003894:	f00e fb5a 	bl	8011f4c <_ZN8touchgfx17AbstractDataGraphC1Es>
 8003898:	4a71      	ldr	r2, [pc, #452]	; (8003a60 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 800389a:	4639      	mov	r1, r7
 800389c:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 800389e:	f8c4 2f1c 	str.w	r2, [r4, #3868]	; 0xf1c
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 80038a2:	f504 5283 	add.w	r2, r4, #4192	; 0x1060
 80038a6:	f8c8 2058 	str.w	r2, [r8, #88]	; 0x58
 80038aa:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
 80038ae:	f8c8 205c 	str.w	r2, [r8, #92]	; 0x5c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80038b2:	2263      	movs	r2, #99	; 0x63
 80038b4:	f7ff f926 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80038b8:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80038bc:	4a69      	ldr	r2, [pc, #420]	; (8003a64 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 80038be:	4608      	mov	r0, r1
 80038c0:	910d      	str	r1, [sp, #52]	; 0x34
 80038c2:	f8c4 2f1c 	str.w	r2, [r4, #3868]	; 0xf1c
 80038c6:	f7ff feb1 	bl	800362c <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80038ca:	f504 519e 	add.w	r1, r4, #5056	; 0x13c0
 80038ce:	4a66      	ldr	r2, [pc, #408]	; (8003a68 <_ZN15Screen1ViewBaseC1Ev+0x400>)
 80038d0:	310c      	adds	r1, #12
 80038d2:	f8c8 2380 	str.w	r2, [r8, #896]	; 0x380

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 80038d6:	4608      	mov	r0, r1
 80038d8:	9103      	str	r1, [sp, #12]
 80038da:	f7ff fea7 	bl	800362c <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80038de:	f504 51a0 	add.w	r1, r4, #5120	; 0x1400
 80038e2:	4a62      	ldr	r2, [pc, #392]	; (8003a6c <_ZN15Screen1ViewBaseC1Ev+0x404>)
 80038e4:	3118      	adds	r1, #24
 80038e6:	f8c8 23cc 	str.w	r2, [r8, #972]	; 0x3cc
        : CanvasWidget()
 80038ea:	4608      	mov	r0, r1
 80038ec:	9104      	str	r1, [sp, #16]
 80038ee:	f00d fe37 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 80038f2:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 80038f4:	f8c8 3418 	str.w	r3, [r8, #1048]	; 0x418
 80038f8:	f04f 0302 	mov.w	r3, #2
 80038fc:	f888 3444 	strb.w	r3, [r8, #1092]	; 0x444
 8003900:	f504 53a2 	add.w	r3, r4, #5184	; 0x1440
 8003904:	3308      	adds	r3, #8
 8003906:	4618      	mov	r0, r3
 8003908:	9305      	str	r3, [sp, #20]
 800390a:	f7fe feb3 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800390e:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
 8003910:	f8c8 7454 	str.w	r7, [r8, #1108]	; 0x454
 8003914:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003918:	f8c8 3448 	str.w	r3, [r8, #1096]	; 0x448
 800391c:	f504 53a2 	add.w	r3, r4, #5184	; 0x1440
 8003920:	f8c8 2450 	str.w	r2, [r8, #1104]	; 0x450
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003924:	f104 0804 	add.w	r8, r4, #4
 8003928:	331c      	adds	r3, #28
 800392a:	4618      	mov	r0, r3
 800392c:	ee08 3a10 	vmov	s16, r3
 8003930:	f7ff fe14 	bl	800355c <_ZN8touchgfx8TextAreaC1Ev>
 8003934:	f504 4387 	add.w	r3, r4, #17280	; 0x4380
        : pobject(pObject), pmemfun(pmemfun_2)
 8003938:	4a4d      	ldr	r2, [pc, #308]	; (8003a70 <_ZN15Screen1ViewBaseC1Ev+0x408>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800393a:	f504 50a5 	add.w	r0, r4, #5280	; 0x14a0
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 800393e:	3304      	adds	r3, #4
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003940:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8003944:	3004      	adds	r0, #4
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003946:	9308      	str	r3, [sp, #32]
 8003948:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800394c:	e9c3 24e1 	strd	r2, r4, [r3, #900]	; 0x384
 8003950:	4a48      	ldr	r2, [pc, #288]	; (8003a74 <_ZN15Screen1ViewBaseC1Ev+0x40c>)
 8003952:	e9c3 27e3 	strd	r2, r7, [r3, #908]	; 0x38c
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003956:	f011 f955 	bl	8014c04 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 800395a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800395e:	463a      	mov	r2, r7
 8003960:	4639      	mov	r1, r7
 8003962:	4658      	mov	r0, fp
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f44f 7348 	mov.w	r3, #800	; 0x320
 800396a:	f7ff fdbd 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800396e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003972:	4659      	mov	r1, fp
 8003974:	4640      	mov	r0, r8
 8003976:	66a3      	str	r3, [r4, #104]	; 0x68
 8003978:	f00c fb78 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800397c:	463a      	mov	r2, r7
 800397e:	4639      	mov	r1, r7
 8003980:	4648      	mov	r0, r9
 8003982:	f7ff fda4 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8003986:	4648      	mov	r0, r9
 8003988:	a912      	add	r1, sp, #72	; 0x48
 800398a:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 800398e:	f010 fa3d 	bl	8013e0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003992:	4649      	mov	r1, r9
 8003994:	4640      	mov	r0, r8
        boundingArea = calculateBoundingArea();
 8003996:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 800399a:	f00c fb67 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(443, 3);
 800399e:	2203      	movs	r2, #3
 80039a0:	f240 11bb 	movw	r1, #443	; 0x1bb
 80039a4:	ee18 0a90 	vmov	r0, s17
 80039a8:	f7ff fd91 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80039b0:	4648      	mov	r0, r9
 80039b2:	ee18 1a90 	vmov	r1, s17
        color = newColor;
 80039b6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        linespace = space;
 80039ba:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 80039be:	f00f fe8d 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80039c2:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 80039c6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8003a7c <_ZN15Screen1ViewBaseC1Ev+0x414>
 80039ca:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80039ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039d2:	f04f 0316 	mov.w	r3, #22
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HRIB));
 80039d6:	a912      	add	r1, sp, #72	; 0x48
 80039d8:	ee18 0a90 	vmov	r0, s17
 80039dc:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 80039e0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039e4:	f010 f922 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80039e8:	ee18 1a90 	vmov	r1, s17
 80039ec:	4640      	mov	r0, r8
 80039ee:	f00c fb3d 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(308, 242);
 80039f2:	22f2      	movs	r2, #242	; 0xf2
 80039f4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80039f8:	ee19 0a10 	vmov	r0, s18
 80039fc:	f7ff fd67 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <_ZN15Screen1ViewBaseC1Ev+0x410>)
        boundingArea = calculateBoundingArea();
 8003a02:	4648      	mov	r0, r9
 8003a04:	ee19 1a10 	vmov	r1, s18
        color = newColor;
 8003a08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        linespace = space;
 8003a0c:	f8a4 7114 	strh.w	r7, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 8003a10:	f00f fe64 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a14:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8003a18:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003a1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a20:	2315      	movs	r3, #21
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AXIG));
 8003a22:	a912      	add	r1, sp, #72	; 0x48
 8003a24:	ee19 0a10 	vmov	r0, s18
 8003a28:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003a2c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003a30:	f010 f8fc 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a34:	ee19 1a10 	vmov	r1, s18
 8003a38:	4640      	mov	r0, r8
 8003a3a:	e021      	b.n	8003a80 <_ZN15Screen1ViewBaseC1Ev+0x418>
 8003a3c:	08024780 	.word	0x08024780
 8003a40:	08025674 	.word	0x08025674
 8003a44:	0802560c 	.word	0x0802560c
 8003a48:	08024fec 	.word	0x08024fec
 8003a4c:	080245cc 	.word	0x080245cc
 8003a50:	08024320 	.word	0x08024320
 8003a54:	080243d8 	.word	0x080243d8
 8003a58:	080252b4 	.word	0x080252b4
 8003a5c:	08024e00 	.word	0x08024e00
 8003a60:	08024eb0 	.word	0x08024eb0
 8003a64:	08024490 	.word	0x08024490
 8003a68:	08025334 	.word	0x08025334
 8003a6c:	080253d4 	.word	0x080253d4
 8003a70:	08024768 	.word	0x08024768
 8003a74:	08003395 	.word	0x08003395
 8003a78:	fffcfcfc 	.word	0xfffcfcfc
 8003a7c:	08023cc8 	.word	0x08023cc8
 8003a80:	f00c faf4 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2.setXY(509, 82);
 8003a84:	2252      	movs	r2, #82	; 0x52
 8003a86:	f240 11fd 	movw	r1, #509	; 0x1fd
 8003a8a:	ee19 0a90 	vmov	r0, s19
 8003a8e:	f7ff fd1e 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a92:	4bf7      	ldr	r3, [pc, #988]	; (8003e70 <_ZN15Screen1ViewBaseC1Ev+0x808>)
        boundingArea = calculateBoundingArea();
 8003a94:	4648      	mov	r0, r9
 8003a96:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 8003a9a:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
        linespace = space;
 8003a9e:	f8a4 715c 	strh.w	r7, [r4, #348]	; 0x15c
        boundingArea = calculateBoundingArea();
 8003aa2:	f00f fe1b 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003aa6:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003aaa:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003aae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ab2:	f04f 030a 	mov.w	r3, #10
    textArea2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T87L));
 8003ab6:	a912      	add	r1, sp, #72	; 0x48
 8003ab8:	ee19 0a90 	vmov	r0, s19
 8003abc:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ac0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003ac4:	f010 f8b2 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ac8:	ee19 1a90 	vmov	r1, s19
 8003acc:	4640      	mov	r0, r8
 8003ace:	f00c facd 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1.setXY(125, 2);
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	217d      	movs	r1, #125	; 0x7d
 8003ad6:	ee1a 0a10 	vmov	r0, s20
 8003ada:	f7ff fcf8 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003ae2:	4648      	mov	r0, r9
 8003ae4:	ee1a 1a10 	vmov	r1, s20
        color = newColor;
 8003ae8:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
        linespace = space;
 8003aec:	f8a4 71a4 	strh.w	r7, [r4, #420]	; 0x1a4
        boundingArea = calculateBoundingArea();
 8003af0:	f00f fdf4 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003af4:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003af8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b00:	2314      	movs	r3, #20
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9869));
 8003b02:	a912      	add	r1, sp, #72	; 0x48
 8003b04:	ee1a 0a10 	vmov	r0, s20
 8003b08:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003b0c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003b10:	f010 f88c 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b14:	ee1a 1a10 	vmov	r1, s20
 8003b18:	4640      	mov	r0, r8
 8003b1a:	f00c faa7 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_3.setXY(2, 109);
 8003b1e:	226d      	movs	r2, #109	; 0x6d
 8003b20:	2102      	movs	r1, #2
 8003b22:	ee1a 0a90 	vmov	r0, s21
 8003b26:	f7ff fcd2 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b2e:	4648      	mov	r0, r9
 8003b30:	ee1a 1a90 	vmov	r1, s21
        color = newColor;
 8003b34:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        linespace = space;
 8003b38:	f8a4 71ec 	strh.w	r7, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 8003b3c:	f00f fdce 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b40:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8003b44:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b4c:	2307      	movs	r3, #7
    textArea2_1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5N1M));
 8003b4e:	a912      	add	r1, sp, #72	; 0x48
 8003b50:	ee1a 0a90 	vmov	r0, s21
 8003b54:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003b58:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003b5c:	f010 f866 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b60:	ee1a 1a90 	vmov	r1, s21
 8003b64:	4640      	mov	r0, r8
 8003b66:	f00c fa81 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_2.setXY(102, 101);
 8003b6a:	2265      	movs	r2, #101	; 0x65
 8003b6c:	2166      	movs	r1, #102	; 0x66
 8003b6e:	ee1b 0a10 	vmov	r0, s22
 8003b72:	f7ff fcac 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b7a:	4648      	mov	r0, r9
 8003b7c:	ee1b 1a10 	vmov	r1, s22
        color = newColor;
 8003b80:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
        linespace = space;
 8003b84:	f8a4 7234 	strh.w	r7, [r4, #564]	; 0x234
        boundingArea = calculateBoundingArea();
 8003b88:	f00f fda8 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b8c:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003b90:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003b94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b98:	2308      	movs	r3, #8
    textArea2_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8RMH));
 8003b9a:	a912      	add	r1, sp, #72	; 0x48
 8003b9c:	ee1b 0a10 	vmov	r0, s22
 8003ba0:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ba4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003ba8:	f010 f840 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003bac:	ee1b 1a10 	vmov	r1, s22
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	f00c fa5b 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1.setXY(179, 222);
 8003bb6:	22de      	movs	r2, #222	; 0xde
 8003bb8:	21b3      	movs	r1, #179	; 0xb3
 8003bba:	ee1b 0a90 	vmov	r0, s23
 8003bbe:	f7ff fc86 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003bc6:	4648      	mov	r0, r9
 8003bc8:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8003bcc:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        linespace = space;
 8003bd0:	f8a4 727c 	strh.w	r7, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 8003bd4:	f00f fd82 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003bd8:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003bdc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003be0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003be4:	2313      	movs	r3, #19
    textArea2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UM8B));
 8003be6:	a912      	add	r1, sp, #72	; 0x48
 8003be8:	ee1b 0a90 	vmov	r0, s23
 8003bec:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003bf0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003bf4:	f010 f81a 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003bf8:	ee1b 1a90 	vmov	r1, s23
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	f00c fa35 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1.setXY(154, 171);
 8003c02:	22ab      	movs	r2, #171	; 0xab
 8003c04:	219a      	movs	r1, #154	; 0x9a
 8003c06:	ee1c 0a10 	vmov	r0, s24
 8003c0a:	f7ff fc60 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003c12:	4648      	mov	r0, r9
 8003c14:	ee1c 1a10 	vmov	r1, s24
        color = newColor;
 8003c18:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
        linespace = space;
 8003c1c:	f8a4 72c4 	strh.w	r7, [r4, #708]	; 0x2c4
        boundingArea = calculateBoundingArea();
 8003c20:	f00f fd5c 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c24:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003c28:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003c2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c30:	2312      	movs	r3, #18
    textArea2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MTUS));
 8003c32:	a912      	add	r1, sp, #72	; 0x48
 8003c34:	ee1c 0a10 	vmov	r0, s24
 8003c38:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003c3c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003c40:	f00f fff4 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c44:	ee1c 1a10 	vmov	r1, s24
 8003c48:	4640      	mov	r0, r8
 8003c4a:	f00c fa0f 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2.setXY(263, 222);
 8003c4e:	22de      	movs	r2, #222	; 0xde
 8003c50:	f240 1107 	movw	r1, #263	; 0x107
 8003c54:	ee1c 0a90 	vmov	r0, s25
 8003c58:	f7ff fc39 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003c60:	4648      	mov	r0, r9
 8003c62:	ee1c 1a90 	vmov	r1, s25
        color = newColor;
 8003c66:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        linespace = space;
 8003c6a:	f8a4 730c 	strh.w	r7, [r4, #780]	; 0x30c
        boundingArea = calculateBoundingArea();
 8003c6e:	f00f fd35 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c72:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003c76:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c7e:	230e      	movs	r3, #14
    textArea2_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSWL));
 8003c80:	a912      	add	r1, sp, #72	; 0x48
 8003c82:	ee1c 0a90 	vmov	r0, s25
 8003c86:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003c8a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003c8e:	f00f ffcd 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c92:	ee1c 1a90 	vmov	r1, s25
 8003c96:	4640      	mov	r0, r8
 8003c98:	f00c f9e8 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1.setXY(340, 222);
 8003c9c:	22de      	movs	r2, #222	; 0xde
 8003c9e:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003ca2:	ee1d 0a10 	vmov	r0, s26
 8003ca6:	f7ff fc12 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003cae:	4648      	mov	r0, r9
 8003cb0:	ee1d 1a10 	vmov	r1, s26
        color = newColor;
 8003cb4:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
        linespace = space;
 8003cb8:	f8a4 7354 	strh.w	r7, [r4, #852]	; 0x354
        boundingArea = calculateBoundingArea();
 8003cbc:	f00f fd0e 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003cc0:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003cc4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003cc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ccc:	230d      	movs	r3, #13
    textArea2_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q0BQ));
 8003cce:	a912      	add	r1, sp, #72	; 0x48
 8003cd0:	ee1d 0a10 	vmov	r0, s26
 8003cd4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003cd8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003cdc:	f00f ffa6 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ce0:	ee1d 1a10 	vmov	r1, s26
 8003ce4:	4640      	mov	r0, r8
 8003ce6:	f00c f9c1 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1.setXY(417, 222);
 8003cea:	22de      	movs	r2, #222	; 0xde
 8003cec:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003cf0:	ee1d 0a90 	vmov	r0, s27
 8003cf4:	f7ff fbeb 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003cfc:	4648      	mov	r0, r9
 8003cfe:	ee1d 1a90 	vmov	r1, s27
        color = newColor;
 8003d02:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        linespace = space;
 8003d06:	f8a4 739c 	strh.w	r7, [r4, #924]	; 0x39c
        boundingArea = calculateBoundingArea();
 8003d0a:	f00f fce7 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003d0e:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8003d12:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d1a:	230c      	movs	r3, #12
    textArea2_1_1_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N3JM));
 8003d1c:	a912      	add	r1, sp, #72	; 0x48
 8003d1e:	ee1d 0a90 	vmov	r0, s27
 8003d22:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003d26:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003d2a:	f00f ff7f 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003d2e:	ee1d 1a90 	vmov	r1, s27
 8003d32:	4640      	mov	r0, r8
 8003d34:	f00c f99a 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1_1.setXY(492, 222);
 8003d38:	22de      	movs	r2, #222	; 0xde
 8003d3a:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003d3e:	ee1e 0a10 	vmov	r0, s28
 8003d42:	f7ff fbc4 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d4a:	4648      	mov	r0, r9
 8003d4c:	ee1e 1a10 	vmov	r1, s28
        color = newColor;
 8003d50:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        linespace = space;
 8003d54:	f8a4 73e4 	strh.w	r7, [r4, #996]	; 0x3e4
        boundingArea = calculateBoundingArea();
 8003d58:	f00f fcc0 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003d5c:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003d60:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003d64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d68:	230b      	movs	r3, #11
    textArea2_1_1_1_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F0NS));
 8003d6a:	a912      	add	r1, sp, #72	; 0x48
 8003d6c:	ee1e 0a10 	vmov	r0, s28
 8003d70:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003d74:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003d78:	f00f ff58 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003d7c:	ee1e 1a10 	vmov	r1, s28
 8003d80:	4640      	mov	r0, r8
 8003d82:	f00c f973 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1.setXY(154, 133);
 8003d86:	2285      	movs	r2, #133	; 0x85
 8003d88:	219a      	movs	r1, #154	; 0x9a
 8003d8a:	ee1e 0a90 	vmov	r0, s29
 8003d8e:	f7ff fb9e 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d96:	4648      	mov	r0, r9
 8003d98:	ee1e 1a90 	vmov	r1, s29
        color = newColor;
 8003d9c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
        linespace = space;
 8003da0:	f8a4 742c 	strh.w	r7, [r4, #1068]	; 0x42c
        boundingArea = calculateBoundingArea();
 8003da4:	f00f fc9a 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003da8:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003dac:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003db0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003db4:	2311      	movs	r3, #17
    textArea2_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0NS1));
 8003db6:	a912      	add	r1, sp, #72	; 0x48
 8003db8:	ee1e 0a90 	vmov	r0, s29
 8003dbc:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003dc0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003dc4:	f00f ff32 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003dc8:	ee1e 1a90 	vmov	r1, s29
 8003dcc:	4640      	mov	r0, r8
 8003dce:	f00c f94d 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1.setXY(154, 92);
 8003dd2:	225c      	movs	r2, #92	; 0x5c
 8003dd4:	219a      	movs	r1, #154	; 0x9a
 8003dd6:	ee1f 0a10 	vmov	r0, s30
 8003dda:	f7ff fb78 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003dde:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003de2:	4648      	mov	r0, r9
 8003de4:	ee1f 1a10 	vmov	r1, s30
        color = newColor;
 8003de8:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
        linespace = space;
 8003dec:	f8a4 7474 	strh.w	r7, [r4, #1140]	; 0x474
        boundingArea = calculateBoundingArea();
 8003df0:	f00f fc74 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003df4:	f204 437c 	addw	r3, r4, #1148	; 0x47c
 8003df8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003dfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e00:	2310      	movs	r3, #16
    textArea2_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z325));
 8003e02:	a912      	add	r1, sp, #72	; 0x48
 8003e04:	ee1f 0a10 	vmov	r0, s30
 8003e08:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003e0c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003e10:	f00f ff0c 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e14:	ee1f 1a10 	vmov	r1, s30
 8003e18:	4640      	mov	r0, r8
 8003e1a:	f00c f927 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1_1.setXY(154, 52);
 8003e1e:	2234      	movs	r2, #52	; 0x34
 8003e20:	219a      	movs	r1, #154	; 0x9a
 8003e22:	ee1f 0a90 	vmov	r0, s31
 8003e26:	f7ff fb52 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003e2e:	4648      	mov	r0, r9
 8003e30:	ee1f 1a90 	vmov	r1, s31
        color = newColor;
 8003e34:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
        linespace = space;
 8003e38:	f8a4 74bc 	strh.w	r7, [r4, #1212]	; 0x4bc
        boundingArea = calculateBoundingArea();
 8003e3c:	f00f fc4e 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003e40:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8003e44:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003e48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e4c:	230f      	movs	r3, #15
    textArea2_1_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OXJT));
 8003e4e:	a912      	add	r1, sp, #72	; 0x48
 8003e50:	ee1f 0a90 	vmov	r0, s31
 8003e54:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003e58:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003e5c:	f00f fee6 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e60:	ee1f 1a90 	vmov	r1, s31
 8003e64:	4640      	mov	r0, r8
 8003e66:	f00c f901 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(533, 103, 48, 30);
 8003e6a:	231e      	movs	r3, #30
 8003e6c:	2267      	movs	r2, #103	; 0x67
 8003e6e:	e001      	b.n	8003e74 <_ZN15Screen1ViewBaseC1Ev+0x80c>
 8003e70:	fffcfcfc 	.word	0xfffcfcfc
 8003e74:	f240 2115 	movw	r1, #533	; 0x215
 8003e78:	9806      	ldr	r0, [sp, #24]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2330      	movs	r3, #48	; 0x30
 8003e7e:	f7ff fb33 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	9906      	ldr	r1, [sp, #24]
 8003e88:	4640      	mov	r0, r8
 8003e8a:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8003e8e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003e92:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8003e96:	f04f 0302 	mov.w	r3, #2
 8003e9a:	f8a4 3500 	strh.w	r3, [r4, #1280]	; 0x500
 8003e9e:	f00c f8e5 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2_1.setXY(552, 108);
 8003ea2:	226c      	movs	r2, #108	; 0x6c
 8003ea4:	f44f 710a 	mov.w	r1, #552	; 0x228
 8003ea8:	9802      	ldr	r0, [sp, #8]
 8003eaa:	f7ff fb10 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003eae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003eb2:	4648      	mov	r0, r9
 8003eb4:	9902      	ldr	r1, [sp, #8]
        color = newColor;
 8003eb6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
        linespace = space;
 8003eba:	f8a4 7538 	strh.w	r7, [r4, #1336]	; 0x538
        boundingArea = calculateBoundingArea();
 8003ebe:	f00f fc0d 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ec2:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
 8003ec6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ece:	2309      	movs	r3, #9
    textArea2_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UAP4));
 8003ed0:	a912      	add	r1, sp, #72	; 0x48
 8003ed2:	9802      	ldr	r0, [sp, #8]
        setIntervalScaled(abs(interval) * dataScale);
 8003ed4:	f04f 090a 	mov.w	r9, #10
 8003ed8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003edc:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ee0:	f00f fea4 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ee4:	9902      	ldr	r1, [sp, #8]
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	f00c f8c0 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(190, 22, 310, 200);
 8003eec:	23c8      	movs	r3, #200	; 0xc8
 8003eee:	2216      	movs	r2, #22
 8003ef0:	21be      	movs	r1, #190	; 0xbe
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003efa:	f7ff faf5 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8003efe:	463a      	mov	r2, r7
 8003f00:	4651      	mov	r1, sl
 8003f02:	4630      	mov	r0, r6
 8003f04:	f7fe ffb2 	bl	8002e6c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8003f08:	463b      	mov	r3, r7
 8003f0a:	463a      	mov	r2, r7
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	9700      	str	r7, [sp, #0]
 8003f12:	f00d ffcc 	bl	8011eae <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8003f16:	463b      	mov	r3, r7
 8003f18:	463a      	mov	r2, r7
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	9700      	str	r7, [sp, #0]
 8003f20:	f00d fea9 	bl	8011c76 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8003f24:	4639      	mov	r1, r7
 8003f26:	2264      	movs	r2, #100	; 0x64
 8003f28:	4630      	mov	r0, r6
 8003f2a:	f7fe fe77 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8003f2e:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
        color = newColor;
 8003f32:	4ff3      	ldr	r7, [pc, #972]	; (8004300 <_ZN15Screen1ViewBaseC1Ev+0xc98>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f34:	4652      	mov	r2, sl
        setIntervalScaled(abs(interval) * dataScale);
 8003f36:	fb09 f001 	mul.w	r0, r9, r1
        color = newColor;
 8003f3a:	f8c4 7858 	str.w	r7, [r4, #2136]	; 0x858
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003f3e:	2800      	cmp	r0, #0
        lineWidth = width;
 8003f40:	f884 a864 	strb.w	sl, [r4, #2148]	; 0x864
 8003f44:	bfb8      	it	lt
 8003f46:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003f48:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f4c:	f00e f862 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8003f50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f52:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
 8003f56:	4630      	mov	r0, r6
        dataScale = scale;
 8003f58:	f8c4 a85c 	str.w	sl, [r4, #2140]	; 0x85c
 8003f5c:	f00d fe96 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003f60:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f64:	4652      	mov	r2, sl
        color = newColor;
 8003f66:	f8c4 7898 	str.w	r7, [r4, #2200]	; 0x898
        setIntervalScaled(abs(interval) * dataScale);
 8003f6a:	fb09 f001 	mul.w	r0, r9, r1
        lineWidth = width;
 8003f6e:	f884 a8a4 	strb.w	sl, [r4, #2212]	; 0x8a4
 8003f72:	2800      	cmp	r0, #0
 8003f74:	bfb8      	it	lt
 8003f76:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003f78:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f7c:	f00e f84a 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8003f80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f82:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
 8003f86:	4630      	mov	r0, r6
        dataScale = scale;
 8003f88:	f8c4 a89c 	str.w	sl, [r4, #2204]	; 0x89c
 8003f8c:	f00d fe7e 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8003f90:	4bdc      	ldr	r3, [pc, #880]	; (8004304 <_ZN15Screen1ViewBaseC1Ev+0xc9c>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8003f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f94:	4630      	mov	r0, r6
 8003f96:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003f9a:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
 8003f9e:	f8a4 38ec 	strh.w	r3, [r4, #2284]	; 0x8ec
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003fa2:	f04f 0316 	mov.w	r3, #22
 8003fa6:	f884 38ee 	strb.w	r3, [r4, #2286]	; 0x8ee
        canvasPainter = &painter;
 8003faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fac:	f8c4 38d4 	str.w	r3, [r4, #2260]	; 0x8d4
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f884 38d8 	strb.w	r3, [r4, #2264]	; 0x8d8
 8003fb6:	f00d fe69 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8003fba:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003fbe:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 8004308 <_ZN15Screen1ViewBaseC1Ev+0xca0>
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd6:	f2c2 80ad 	blt.w	8006134 <_ZN15Screen1ViewBaseC1Ev+0x2acc>
            return (int)(fs + 0.5f);
 8003fda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fe2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003fea:	4630      	mov	r0, r6
 8003fec:	f00e f8a9 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ff0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003ff4:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800430c <_ZN15Screen1ViewBaseC1Ev+0xca4>
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004000:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400c:	f2c2 80a7 	blt.w	800615e <_ZN15Screen1ViewBaseC1Ev+0x2af6>
            return (int)(fs + 0.5f);
 8004010:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004014:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004020:	4630      	mov	r0, r6
 8004022:	f00e f88e 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004026:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800402a:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8004310 <_ZN15Screen1ViewBaseC1Ev+0xca8>
 800402e:	ee07 3a90 	vmov	s15, r3
 8004032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004036:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800403a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800403e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004042:	f2c2 80a1 	blt.w	8006188 <_ZN15Screen1ViewBaseC1Ev+0x2b20>
            return (int)(fs + 0.5f);
 8004046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800404a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800404e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004052:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004056:	4630      	mov	r0, r6
 8004058:	f00e f873 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800405c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004060:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8004314 <_ZN15Screen1ViewBaseC1Ev+0xcac>
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800406c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	f2c2 809b 	blt.w	80061b2 <_ZN15Screen1ViewBaseC1Ev+0x2b4a>
            return (int)(fs + 0.5f);
 800407c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004080:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004088:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800408c:	4630      	mov	r0, r6
 800408e:	f00e f858 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004092:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004096:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8004318 <_ZN15Screen1ViewBaseC1Ev+0xcb0>
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	f2c2 8095 	blt.w	80061dc <_ZN15Screen1ViewBaseC1Ev+0x2b74>
            return (int)(fs + 0.5f);
 80040b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040c2:	4630      	mov	r0, r6
 80040c4:	f00e f83d 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040c8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80040cc:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800431c <_ZN15Screen1ViewBaseC1Ev+0xcb4>
 80040d0:	ee07 3a90 	vmov	s15, r3
 80040d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040d8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e4:	f2c2 808f 	blt.w	8006206 <_ZN15Screen1ViewBaseC1Ev+0x2b9e>
            return (int)(fs + 0.5f);
 80040e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040f4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040f8:	4630      	mov	r0, r6
 80040fa:	f00e f822 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040fe:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004102:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8004320 <_ZN15Screen1ViewBaseC1Ev+0xcb8>
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800410e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411a:	f2c2 8089 	blt.w	8006230 <_ZN15Screen1ViewBaseC1Ev+0x2bc8>
            return (int)(fs + 0.5f);
 800411e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800412e:	4630      	mov	r0, r6
 8004130:	f00e f807 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004134:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004138:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8004324 <_ZN15Screen1ViewBaseC1Ev+0xcbc>
 800413c:	ee07 3a90 	vmov	s15, r3
 8004140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004144:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	f2c2 8083 	blt.w	800625a <_ZN15Screen1ViewBaseC1Ev+0x2bf2>
            return (int)(fs + 0.5f);
 8004154:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800415c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004160:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004164:	4630      	mov	r0, r6
 8004166:	f00d ffec 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800416a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800416e:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8004328 <_ZN15Screen1ViewBaseC1Ev+0xcc0>
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800417e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	f2c2 807d 	blt.w	8006284 <_ZN15Screen1ViewBaseC1Ev+0x2c1c>
            return (int)(fs + 0.5f);
 800418a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800418e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004196:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800419a:	4630      	mov	r0, r6
 800419c:	f00d ffd1 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041a0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041a4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800432c <_ZN15Screen1ViewBaseC1Ev+0xcc4>
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	f2c2 8077 	blt.w	80062ae <_ZN15Screen1ViewBaseC1Ev+0x2c46>
            return (int)(fs + 0.5f);
 80041c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041d0:	4630      	mov	r0, r6
 80041d2:	f00d ffb6 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041d6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041da:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004330 <_ZN15Screen1ViewBaseC1Ev+0xcc8>
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f2:	f2c2 8071 	blt.w	80062d8 <_ZN15Screen1ViewBaseC1Ev+0x2c70>
            return (int)(fs + 0.5f);
 80041f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004202:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004206:	4630      	mov	r0, r6
 8004208:	f00d ff9b 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800420c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004210:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8004334 <_ZN15Screen1ViewBaseC1Ev+0xccc>
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	f2c2 806b 	blt.w	8006302 <_ZN15Screen1ViewBaseC1Ev+0x2c9a>
            return (int)(fs + 0.5f);
 800422c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004238:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800423c:	4630      	mov	r0, r6
 800423e:	f00d ff80 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004242:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004246:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8004338 <_ZN15Screen1ViewBaseC1Ev+0xcd0>
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004252:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	f2c2 8065 	blt.w	800632c <_ZN15Screen1ViewBaseC1Ev+0x2cc4>
            return (int)(fs + 0.5f);
 8004262:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800426a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004272:	4630      	mov	r0, r6
 8004274:	f00d ff65 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004278:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800427c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800433c <_ZN15Screen1ViewBaseC1Ev+0xcd4>
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004288:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800428c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	f2c2 805f 	blt.w	8006356 <_ZN15Screen1ViewBaseC1Ev+0x2cee>
            return (int)(fs + 0.5f);
 8004298:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800429c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042a8:	4630      	mov	r0, r6
 80042aa:	f00d ff4a 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042ae:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042b2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004340 <_ZN15Screen1ViewBaseC1Ev+0xcd8>
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	f2c2 8059 	blt.w	8006380 <_ZN15Screen1ViewBaseC1Ev+0x2d18>
            return (int)(fs + 0.5f);
 80042ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042da:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042de:	4630      	mov	r0, r6
 80042e0:	f00d ff2f 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042e4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004344 <_ZN15Screen1ViewBaseC1Ev+0xcdc>
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042fc:	e048      	b.n	8004390 <_ZN15Screen1ViewBaseC1Ev+0xd28>
 80042fe:	bf00      	nop
 8004300:	ff1497c5 	.word	0xff1497c5
 8004304:	ffc4b916 	.word	0xffc4b916
 8004308:	40fdf751 	.word	0x40fdf751
 800430c:	3fcfeea2 	.word	0x3fcfeea2
 8004310:	40160496 	.word	0x40160496
 8004314:	411aa4d3 	.word	0x411aa4d3
 8004318:	41adf368 	.word	0x41adf368
 800431c:	420f197d 	.word	0x420f197d
 8004320:	4242b180 	.word	0x4242b180
 8004324:	42674305 	.word	0x42674305
 8004328:	4276a3b8 	.word	0x4276a3b8
 800432c:	42706398 	.word	0x42706398
 8004330:	4259c671 	.word	0x4259c671
 8004334:	423c53c6 	.word	0x423c53c6
 8004338:	422358c3 	.word	0x422358c3
 800433c:	4218fa27 	.word	0x4218fa27
 8004340:	42238f61 	.word	0x42238f61
 8004344:	4243ee46 	.word	0x4243ee46
 8004348:	427513c3 	.word	0x427513c3
 800434c:	4296a021 	.word	0x4296a021
 8004350:	42b021ad 	.word	0x42b021ad
 8004354:	42c133eb 	.word	0x42c133eb
 8004358:	42c5a4c8 	.word	0x42c5a4c8
 800435c:	42bbf1d7 	.word	0x42bbf1d7
 8004360:	42a5ab40 	.word	0x42a5ab40
 8004364:	42871a0d 	.word	0x42871a0d
 8004368:	424c7f02 	.word	0x424c7f02
 800436c:	4212d7a0 	.word	0x4212d7a0
 8004370:	41d7103e 	.word	0x41d7103e
 8004374:	41b84d36 	.word	0x41b84d36
 8004378:	41c8c04f 	.word	0x41c8c04f
 800437c:	41fc6dac 	.word	0x41fc6dac
 8004380:	421fa1f2 	.word	0x421fa1f2
 8004384:	423d28aa 	.word	0x423d28aa
 8004388:	424cd2bd 	.word	0x424cd2bd
 800438c:	4248b54f 	.word	0x4248b54f
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	f2c2 8009 	blt.w	80063aa <_ZN15Screen1ViewBaseC1Ev+0x2d42>
            return (int)(fs + 0.5f);
 8004398:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800439c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043a8:	4630      	mov	r0, r6
 80043aa:	f00d feca 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043ae:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043b2:	ed1f 7a1b 	vldr	s14, [pc, #-108]	; 8004348 <_ZN15Screen1ViewBaseC1Ev+0xce0>
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	f2c2 8003 	blt.w	80063d4 <_ZN15Screen1ViewBaseC1Ev+0x2d6c>
            return (int)(fs + 0.5f);
 80043ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043da:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043de:	4630      	mov	r0, r6
 80043e0:	f00d feaf 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043e4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043e8:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 800434c <_ZN15Screen1ViewBaseC1Ev+0xce4>
 80043ec:	ee07 3a90 	vmov	s15, r3
 80043f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	f2c1 87fd 	blt.w	80063fe <_ZN15Screen1ViewBaseC1Ev+0x2d96>
            return (int)(fs + 0.5f);
 8004404:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004408:	ee77 7a87 	vadd.f32	s15, s15, s14
 800440c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004410:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004414:	4630      	mov	r0, r6
 8004416:	f00d fe94 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800441a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800441e:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 8004350 <_ZN15Screen1ViewBaseC1Ev+0xce8>
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800442e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	f2c1 87f7 	blt.w	8006428 <_ZN15Screen1ViewBaseC1Ev+0x2dc0>
            return (int)(fs + 0.5f);
 800443a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800443e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004446:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800444a:	4630      	mov	r0, r6
 800444c:	f00d fe79 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004450:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004454:	ed1f 7a41 	vldr	s14, [pc, #-260]	; 8004354 <_ZN15Screen1ViewBaseC1Ev+0xcec>
 8004458:	ee07 3a90 	vmov	s15, r3
 800445c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004460:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446c:	f2c1 87f1 	blt.w	8006452 <_ZN15Screen1ViewBaseC1Ev+0x2dea>
            return (int)(fs + 0.5f);
 8004470:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004474:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800447c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004480:	4630      	mov	r0, r6
 8004482:	f00d fe5e 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004486:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800448a:	ed1f 7a4d 	vldr	s14, [pc, #-308]	; 8004358 <_ZN15Screen1ViewBaseC1Ev+0xcf0>
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004496:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800449a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	f2c1 87eb 	blt.w	800647c <_ZN15Screen1ViewBaseC1Ev+0x2e14>
            return (int)(fs + 0.5f);
 80044a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044b6:	4630      	mov	r0, r6
 80044b8:	f00d fe43 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044bc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044c0:	ed1f 7a5a 	vldr	s14, [pc, #-360]	; 800435c <_ZN15Screen1ViewBaseC1Ev+0xcf4>
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	f2c1 87e5 	blt.w	80064a6 <_ZN15Screen1ViewBaseC1Ev+0x2e3e>
            return (int)(fs + 0.5f);
 80044dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044ec:	4630      	mov	r0, r6
 80044ee:	f00d fe28 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044f2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044f6:	ed1f 7a66 	vldr	s14, [pc, #-408]	; 8004360 <_ZN15Screen1ViewBaseC1Ev+0xcf8>
 80044fa:	ee07 3a90 	vmov	s15, r3
 80044fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004502:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	f2c1 87e1 	blt.w	80064d4 <_ZN15Screen1ViewBaseC1Ev+0x2e6c>
            return (int)(fs + 0.5f);
 8004512:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004516:	ee77 7a87 	vadd.f32	s15, s15, s14
 800451a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800451e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004522:	4630      	mov	r0, r6
 8004524:	f00d fe0d 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004528:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800452c:	ed1f 7a73 	vldr	s14, [pc, #-460]	; 8004364 <_ZN15Screen1ViewBaseC1Ev+0xcfc>
 8004530:	ee07 3a90 	vmov	s15, r3
 8004534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004538:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800453c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004544:	f2c1 87db 	blt.w	80064fe <_ZN15Screen1ViewBaseC1Ev+0x2e96>
            return (int)(fs + 0.5f);
 8004548:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800454c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004554:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004558:	4630      	mov	r0, r6
 800455a:	f00d fdf2 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800455e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004562:	ed1f 7a7f 	vldr	s14, [pc, #-508]	; 8004368 <_ZN15Screen1ViewBaseC1Ev+0xd00>
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457a:	f2c1 87d5 	blt.w	8006528 <_ZN15Screen1ViewBaseC1Ev+0x2ec0>
            return (int)(fs + 0.5f);
 800457e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004582:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800458a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800458e:	4630      	mov	r0, r6
 8004590:	f00d fdd7 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004594:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004598:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800436c <_ZN15Screen1ViewBaseC1Ev+0xd04>
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b0:	f2c1 87cf 	blt.w	8006552 <_ZN15Screen1ViewBaseC1Ev+0x2eea>
            return (int)(fs + 0.5f);
 80045b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045c4:	4630      	mov	r0, r6
 80045c6:	f00d fdbc 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045ca:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045ce:	ed1f 7a98 	vldr	s14, [pc, #-608]	; 8004370 <_ZN15Screen1ViewBaseC1Ev+0xd08>
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	f2c1 87c9 	blt.w	800657c <_ZN15Screen1ViewBaseC1Ev+0x2f14>
            return (int)(fs + 0.5f);
 80045ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045fa:	4630      	mov	r0, r6
 80045fc:	f00d fda1 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004600:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004604:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 8004374 <_ZN15Screen1ViewBaseC1Ev+0xd0c>
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004610:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	f2c1 87c3 	blt.w	80065a6 <_ZN15Screen1ViewBaseC1Ev+0x2f3e>
            return (int)(fs + 0.5f);
 8004620:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004624:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004630:	4630      	mov	r0, r6
 8004632:	f00d fd86 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004636:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800463a:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 8004378 <_ZN15Screen1ViewBaseC1Ev+0xd10>
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004646:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800464a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800464e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004652:	f2c1 87bd 	blt.w	80065d0 <_ZN15Screen1ViewBaseC1Ev+0x2f68>
            return (int)(fs + 0.5f);
 8004656:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800465a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800465e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004662:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004666:	4630      	mov	r0, r6
 8004668:	f00d fd6b 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800466c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004670:	ed1f 7abe 	vldr	s14, [pc, #-760]	; 800437c <_ZN15Screen1ViewBaseC1Ev+0xd14>
 8004674:	ee07 3a90 	vmov	s15, r3
 8004678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800467c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004688:	f2c1 87b7 	blt.w	80065fa <_ZN15Screen1ViewBaseC1Ev+0x2f92>
            return (int)(fs + 0.5f);
 800468c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004690:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004698:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800469c:	4630      	mov	r0, r6
 800469e:	f00d fd50 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046a2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046a6:	ed1f 7aca 	vldr	s14, [pc, #-808]	; 8004380 <_ZN15Screen1ViewBaseC1Ev+0xd18>
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	f2c1 87b1 	blt.w	8006624 <_ZN15Screen1ViewBaseC1Ev+0x2fbc>
            return (int)(fs + 0.5f);
 80046c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046d2:	4630      	mov	r0, r6
 80046d4:	f00d fd35 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046d8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046dc:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 8004384 <_ZN15Screen1ViewBaseC1Ev+0xd1c>
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	f2c1 87ab 	blt.w	800664e <_ZN15Screen1ViewBaseC1Ev+0x2fe6>
            return (int)(fs + 0.5f);
 80046f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004704:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004708:	4630      	mov	r0, r6
 800470a:	f00d fd1a 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800470e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004712:	ed1f 7ae3 	vldr	s14, [pc, #-908]	; 8004388 <_ZN15Screen1ViewBaseC1Ev+0xd20>
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004722:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	f2c1 87a5 	blt.w	8006678 <_ZN15Screen1ViewBaseC1Ev+0x3010>
            return (int)(fs + 0.5f);
 800472e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004732:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800473a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800473e:	4630      	mov	r0, r6
 8004740:	f00d fcff 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004744:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004748:	ed1f 7af0 	vldr	s14, [pc, #-960]	; 800438c <_ZN15Screen1ViewBaseC1Ev+0xd24>
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004754:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004760:	f2c1 879f 	blt.w	80066a2 <_ZN15Screen1ViewBaseC1Ev+0x303a>
            return (int)(fs + 0.5f);
 8004764:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800476c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004770:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004774:	4630      	mov	r0, r6
 8004776:	f00d fce4 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800477a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800477e:	ed9f 7af5 	vldr	s14, [pc, #980]	; 8004b54 <_ZN15Screen1ViewBaseC1Ev+0x14ec>
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800478e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004796:	f2c1 8799 	blt.w	80066cc <_ZN15Screen1ViewBaseC1Ev+0x3064>
            return (int)(fs + 0.5f);
 800479a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800479e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047aa:	4630      	mov	r0, r6
 80047ac:	f00d fcc9 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047b0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047b4:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8004b58 <_ZN15Screen1ViewBaseC1Ev+0x14f0>
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	f2c1 8793 	blt.w	80066f6 <_ZN15Screen1ViewBaseC1Ev+0x308e>
            return (int)(fs + 0.5f);
 80047d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047e0:	4630      	mov	r0, r6
 80047e2:	f00d fcae 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047e6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047ea:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8004b5c <_ZN15Screen1ViewBaseC1Ev+0x14f4>
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004802:	f2c1 878d 	blt.w	8006720 <_ZN15Screen1ViewBaseC1Ev+0x30b8>
            return (int)(fs + 0.5f);
 8004806:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800480a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800480e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004812:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004816:	4630      	mov	r0, r6
 8004818:	f00d fc93 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800481c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004820:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8004b60 <_ZN15Screen1ViewBaseC1Ev+0x14f8>
 8004824:	ee07 3a90 	vmov	s15, r3
 8004828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800482c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004838:	f2c1 8787 	blt.w	800674a <_ZN15Screen1ViewBaseC1Ev+0x30e2>
            return (int)(fs + 0.5f);
 800483c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004840:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004848:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800484c:	4630      	mov	r0, r6
 800484e:	f00d fc78 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004852:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004856:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8004b64 <_ZN15Screen1ViewBaseC1Ev+0x14fc>
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004862:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800486a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486e:	f2c1 8781 	blt.w	8006774 <_ZN15Screen1ViewBaseC1Ev+0x310c>
            return (int)(fs + 0.5f);
 8004872:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800487a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800487e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004882:	4630      	mov	r0, r6
 8004884:	f00d fc5d 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004888:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800488c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8004b68 <_ZN15Screen1ViewBaseC1Ev+0x1500>
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004898:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800489c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a4:	f2c1 877b 	blt.w	800679e <_ZN15Screen1ViewBaseC1Ev+0x3136>
            return (int)(fs + 0.5f);
 80048a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048b8:	4630      	mov	r0, r6
 80048ba:	f00d fc42 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048be:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048c2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004b6c <_ZN15Screen1ViewBaseC1Ev+0x1504>
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	f2c1 8775 	blt.w	80067c8 <_ZN15Screen1ViewBaseC1Ev+0x3160>
            return (int)(fs + 0.5f);
 80048de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048ee:	4630      	mov	r0, r6
 80048f0:	f00d fc27 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048f4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048f8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8004b70 <_ZN15Screen1ViewBaseC1Ev+0x1508>
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004904:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004910:	f2c1 876f 	blt.w	80067f2 <_ZN15Screen1ViewBaseC1Ev+0x318a>
            return (int)(fs + 0.5f);
 8004914:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800491c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004920:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004924:	4630      	mov	r0, r6
 8004926:	f00d fc0c 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800492a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800492e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004b74 <_ZN15Screen1ViewBaseC1Ev+0x150c>
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800493e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	f2c1 8769 	blt.w	800681c <_ZN15Screen1ViewBaseC1Ev+0x31b4>
            return (int)(fs + 0.5f);
 800494a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800494e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004956:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800495a:	4630      	mov	r0, r6
 800495c:	f00d fbf1 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004960:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004964:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004b78 <_ZN15Screen1ViewBaseC1Ev+0x1510>
 8004968:	ee07 3a90 	vmov	s15, r3
 800496c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004970:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	f2c1 8763 	blt.w	8006846 <_ZN15Screen1ViewBaseC1Ev+0x31de>
            return (int)(fs + 0.5f);
 8004980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800498c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004990:	4630      	mov	r0, r6
 8004992:	f00d fbd6 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004996:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800499a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004b7c <_ZN15Screen1ViewBaseC1Ev+0x1514>
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	f2c1 875d 	blt.w	8006870 <_ZN15Screen1ViewBaseC1Ev+0x3208>
            return (int)(fs + 0.5f);
 80049b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049c6:	4630      	mov	r0, r6
 80049c8:	f00d fbbb 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049cc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80049d0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004b80 <_ZN15Screen1ViewBaseC1Ev+0x1518>
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e8:	f2c1 8757 	blt.w	800689a <_ZN15Screen1ViewBaseC1Ev+0x3232>
            return (int)(fs + 0.5f);
 80049ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049fc:	4630      	mov	r0, r6
 80049fe:	f00d fba0 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a02:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a06:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004b84 <_ZN15Screen1ViewBaseC1Ev+0x151c>
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a12:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	f2c1 8751 	blt.w	80068c4 <_ZN15Screen1ViewBaseC1Ev+0x325c>
            return (int)(fs + 0.5f);
 8004a22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a2e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a32:	4630      	mov	r0, r6
 8004a34:	f00d fb85 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a38:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a3c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004b88 <_ZN15Screen1ViewBaseC1Ev+0x1520>
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a54:	f2c1 874b 	blt.w	80068ee <_ZN15Screen1ViewBaseC1Ev+0x3286>
            return (int)(fs + 0.5f);
 8004a58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a64:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f00d fb6a 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a6e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a72:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004b8c <_ZN15Screen1ViewBaseC1Ev+0x1524>
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8a:	f2c1 8745 	blt.w	8006918 <_ZN15Screen1ViewBaseC1Ev+0x32b0>
            return (int)(fs + 0.5f);
 8004a8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a9a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f00d fb4f 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004aa4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004aa8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004b90 <_ZN15Screen1ViewBaseC1Ev+0x1528>
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	f2c1 873f 	blt.w	8006942 <_ZN15Screen1ViewBaseC1Ev+0x32da>
            return (int)(fs + 0.5f);
 8004ac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f00d fb34 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ada:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ade:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004b94 <_ZN15Screen1ViewBaseC1Ev+0x152c>
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af6:	f2c1 8739 	blt.w	800696c <_ZN15Screen1ViewBaseC1Ev+0x3304>
            return (int)(fs + 0.5f);
 8004afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b06:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f00d fb19 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b10:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b14:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004b98 <_ZN15Screen1ViewBaseC1Ev+0x1530>
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	f2c1 8733 	blt.w	8006996 <_ZN15Screen1ViewBaseC1Ev+0x332e>
            return (int)(fs + 0.5f);
 8004b30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b3c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b40:	4630      	mov	r0, r6
 8004b42:	f00d fafe 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b46:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004b9c <_ZN15Screen1ViewBaseC1Ev+0x1534>
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	e049      	b.n	8004be8 <_ZN15Screen1ViewBaseC1Ev+0x1580>
 8004b54:	42307b0b 	.word	0x42307b0b
 8004b58:	420986bd 	.word	0x420986bd
 8004b5c:	41bb4e8a 	.word	0x41bb4e8a
 8004b60:	4162b886 	.word	0x4162b886
 8004b64:	4115feb0 	.word	0x4115feb0
 8004b68:	412d5677 	.word	0x412d5677
 8004b6c:	4197c0dc 	.word	0x4197c0dc
 8004b70:	4202bd8b 	.word	0x4202bd8b
 8004b74:	424665b4 	.word	0x424665b4
 8004b78:	42852d25 	.word	0x42852d25
 8004b7c:	42a10577 	.word	0x42a10577
 8004b80:	42b1dfb4 	.word	0x42b1dfb4
 8004b84:	42b56873 	.word	0x42b56873
 8004b88:	42ac5462 	.word	0x42ac5462
 8004b8c:	429a2405 	.word	0x429a2405
 8004b90:	42843b27 	.word	0x42843b27
 8004b94:	42610aed 	.word	0x42610aed
 8004b98:	4247fb84 	.word	0x4247fb84
 8004b9c:	4242e892 	.word	0x4242e892
 8004ba0:	4251c1f2 	.word	0x4251c1f2
 8004ba4:	426ed828 	.word	0x426ed828
 8004ba8:	42882ad4 	.word	0x42882ad4
 8004bac:	42956170 	.word	0x42956170
 8004bb0:	4299fb29 	.word	0x4299fb29
 8004bb4:	4292db9d 	.word	0x4292db9d
 8004bb8:	427f6be9 	.word	0x427f6be9
 8004bbc:	4246694a 	.word	0x4246694a
 8004bc0:	4204cdd3 	.word	0x4204cdd3
 8004bc4:	418e5d1f 	.word	0x418e5d1f
 8004bc8:	40cd3001 	.word	0x40cd3001
 8004bcc:	3f9f7cee 	.word	0x3f9f7cee
 8004bd0:	404972c5 	.word	0x404972c5
 8004bd4:	4136e61d 	.word	0x4136e61d
 8004bd8:	41c068c7 	.word	0x41c068c7
 8004bdc:	42186a82 	.word	0x42186a82
 8004be0:	424a2037 	.word	0x424a2037
 8004be4:	426b6aa4 	.word	0x426b6aa4
 8004be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf8:	f2c1 86e2 	blt.w	80069c0 <_ZN15Screen1ViewBaseC1Ev+0x3358>
            return (int)(fs + 0.5f);
 8004bfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c08:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f00d fa98 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c12:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c16:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8004ba0 <_ZN15Screen1ViewBaseC1Ev+0x1538>
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2e:	f2c1 86dc 	blt.w	80069ea <_ZN15Screen1ViewBaseC1Ev+0x3382>
            return (int)(fs + 0.5f);
 8004c32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c42:	4630      	mov	r0, r6
 8004c44:	f00d fa7d 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c48:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c4c:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8004ba4 <_ZN15Screen1ViewBaseC1Ev+0x153c>
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	f2c1 86d6 	blt.w	8006a14 <_ZN15Screen1ViewBaseC1Ev+0x33ac>
            return (int)(fs + 0.5f);
 8004c68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c78:	4630      	mov	r0, r6
 8004c7a:	f00d fa62 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c7e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c82:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 8004ba8 <_ZN15Screen1ViewBaseC1Ev+0x1540>
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	f2c1 86d0 	blt.w	8006a3e <_ZN15Screen1ViewBaseC1Ev+0x33d6>
            return (int)(fs + 0.5f);
 8004c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004caa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f00d fa47 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cb4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cb8:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004bac <_ZN15Screen1ViewBaseC1Ev+0x1544>
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	f2c1 86ca 	blt.w	8006a68 <_ZN15Screen1ViewBaseC1Ev+0x3400>
            return (int)(fs + 0.5f);
 8004cd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ce0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f00d fa2c 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cea:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cee:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8004bb0 <_ZN15Screen1ViewBaseC1Ev+0x1548>
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cfa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d06:	f2c1 86c4 	blt.w	8006a92 <_ZN15Screen1ViewBaseC1Ev+0x342a>
            return (int)(fs + 0.5f);
 8004d0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f00d fa11 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d20:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d24:	ed1f 7a5d 	vldr	s14, [pc, #-372]	; 8004bb4 <_ZN15Screen1ViewBaseC1Ev+0x154c>
 8004d28:	ee07 3a90 	vmov	s15, r3
 8004d2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d30:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3c:	f2c1 86be 	blt.w	8006abc <_ZN15Screen1ViewBaseC1Ev+0x3454>
            return (int)(fs + 0.5f);
 8004d40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d4c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d50:	4630      	mov	r0, r6
 8004d52:	f00d f9f6 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d56:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d5a:	ed1f 7a69 	vldr	s14, [pc, #-420]	; 8004bb8 <_ZN15Screen1ViewBaseC1Ev+0x1550>
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d72:	f2c1 86b8 	blt.w	8006ae6 <_ZN15Screen1ViewBaseC1Ev+0x347e>
            return (int)(fs + 0.5f);
 8004d76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d86:	4630      	mov	r0, r6
 8004d88:	f00d f9db 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d8c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d90:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8004bbc <_ZN15Screen1ViewBaseC1Ev+0x1554>
 8004d94:	ee07 3a90 	vmov	s15, r3
 8004d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004da0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	f2c1 86b2 	blt.w	8006b10 <_ZN15Screen1ViewBaseC1Ev+0x34a8>
            return (int)(fs + 0.5f);
 8004dac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f00d f9c0 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004dc2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004dc6:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8004bc0 <_ZN15Screen1ViewBaseC1Ev+0x1558>
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	f2c1 86ac 	blt.w	8006b3a <_ZN15Screen1ViewBaseC1Ev+0x34d2>
            return (int)(fs + 0.5f);
 8004de2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004df2:	4630      	mov	r0, r6
 8004df4:	f00d f9a5 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004df8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004dfc:	ed1f 7a8f 	vldr	s14, [pc, #-572]	; 8004bc4 <_ZN15Screen1ViewBaseC1Ev+0x155c>
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	f2c1 86a6 	blt.w	8006b64 <_ZN15Screen1ViewBaseC1Ev+0x34fc>
            return (int)(fs + 0.5f);
 8004e18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e28:	4630      	mov	r0, r6
 8004e2a:	f00d f98a 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e2e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e32:	ed1f 7a9b 	vldr	s14, [pc, #-620]	; 8004bc8 <_ZN15Screen1ViewBaseC1Ev+0x1560>
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4a:	f2c1 86a0 	blt.w	8006b8e <_ZN15Screen1ViewBaseC1Ev+0x3526>
            return (int)(fs + 0.5f);
 8004e4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e5a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f00d f96f 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e64:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e68:	ed1f 7aa8 	vldr	s14, [pc, #-672]	; 8004bcc <_ZN15Screen1ViewBaseC1Ev+0x1564>
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e80:	f2c1 869a 	blt.w	8006bb8 <_ZN15Screen1ViewBaseC1Ev+0x3550>
            return (int)(fs + 0.5f);
 8004e84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e94:	4630      	mov	r0, r6
 8004e96:	f00d f954 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e9a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e9e:	ed1f 7ab4 	vldr	s14, [pc, #-720]	; 8004bd0 <_ZN15Screen1ViewBaseC1Ev+0x1568>
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb6:	f2c1 8694 	blt.w	8006be2 <_ZN15Screen1ViewBaseC1Ev+0x357a>
            return (int)(fs + 0.5f);
 8004eba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ebe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ec6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f00d f939 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ed0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ed4:	ed1f 7ac1 	vldr	s14, [pc, #-772]	; 8004bd4 <_ZN15Screen1ViewBaseC1Ev+0x156c>
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	f2c1 868e 	blt.w	8006c0c <_ZN15Screen1ViewBaseC1Ev+0x35a4>
            return (int)(fs + 0.5f);
 8004ef0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004efc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f00:	4630      	mov	r0, r6
 8004f02:	f00d f91e 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f06:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f0a:	ed1f 7acd 	vldr	s14, [pc, #-820]	; 8004bd8 <_ZN15Screen1ViewBaseC1Ev+0x1570>
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	f2c1 8688 	blt.w	8006c36 <_ZN15Screen1ViewBaseC1Ev+0x35ce>
            return (int)(fs + 0.5f);
 8004f26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f36:	4630      	mov	r0, r6
 8004f38:	f00d f903 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f3c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f40:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 8004bdc <_ZN15Screen1ViewBaseC1Ev+0x1574>
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f58:	f2c1 8682 	blt.w	8006c60 <_ZN15Screen1ViewBaseC1Ev+0x35f8>
            return (int)(fs + 0.5f);
 8004f5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f68:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f00d f8e8 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f72:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f76:	ed1f 7ae6 	vldr	s14, [pc, #-920]	; 8004be0 <_ZN15Screen1ViewBaseC1Ev+0x1578>
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f82:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8e:	f2c1 867c 	blt.w	8006c8a <_ZN15Screen1ViewBaseC1Ev+0x3622>
            return (int)(fs + 0.5f);
 8004f92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f9e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fa2:	4630      	mov	r0, r6
 8004fa4:	f00d f8cd 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fa8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fac:	ed1f 7af3 	vldr	s14, [pc, #-972]	; 8004be4 <_ZN15Screen1ViewBaseC1Ev+0x157c>
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc4:	f2c1 8676 	blt.w	8006cb4 <_ZN15Screen1ViewBaseC1Ev+0x364c>
            return (int)(fs + 0.5f);
 8004fc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f00d f8b2 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fde:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fe2:	ed9f 7af5 	vldr	s14, [pc, #980]	; 80053b8 <_ZN15Screen1ViewBaseC1Ev+0x1d50>
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffa:	f2c1 8670 	blt.w	8006cde <_ZN15Screen1ViewBaseC1Ev+0x3676>
            return (int)(fs + 0.5f);
 8004ffe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005002:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800500a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800500e:	4630      	mov	r0, r6
 8005010:	f00d f897 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005014:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005018:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 80053bc <_ZN15Screen1ViewBaseC1Ev+0x1d54>
 800501c:	ee07 3a90 	vmov	s15, r3
 8005020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005024:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	f2c1 866a 	blt.w	8006d08 <_ZN15Screen1ViewBaseC1Ev+0x36a0>
            return (int)(fs + 0.5f);
 8005034:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800503c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005040:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005044:	4630      	mov	r0, r6
 8005046:	f00d f87c 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800504a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800504e:	ed9f 7adc 	vldr	s14, [pc, #880]	; 80053c0 <_ZN15Screen1ViewBaseC1Ev+0x1d58>
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800505a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800505e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005066:	f2c1 8664 	blt.w	8006d32 <_ZN15Screen1ViewBaseC1Ev+0x36ca>
            return (int)(fs + 0.5f);
 800506a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800506e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005076:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800507a:	4630      	mov	r0, r6
 800507c:	f00d f861 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005080:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005084:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80053c4 <_ZN15Screen1ViewBaseC1Ev+0x1d5c>
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005090:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509c:	f2c1 865e 	blt.w	8006d5c <_ZN15Screen1ViewBaseC1Ev+0x36f4>
            return (int)(fs + 0.5f);
 80050a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050b0:	4630      	mov	r0, r6
 80050b2:	f00d f846 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050b6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050ba:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80053c8 <_ZN15Screen1ViewBaseC1Ev+0x1d60>
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	f2c1 8658 	blt.w	8006d86 <_ZN15Screen1ViewBaseC1Ev+0x371e>
            return (int)(fs + 0.5f);
 80050d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050e6:	4630      	mov	r0, r6
 80050e8:	f00d f82b 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050ec:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050f0:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80053cc <_ZN15Screen1ViewBaseC1Ev+0x1d64>
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	f2c1 8652 	blt.w	8006db0 <_ZN15Screen1ViewBaseC1Ev+0x3748>
            return (int)(fs + 0.5f);
 800510c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005110:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005118:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800511c:	4630      	mov	r0, r6
 800511e:	f00d f810 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005122:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005126:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80053d0 <_ZN15Screen1ViewBaseC1Ev+0x1d68>
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005132:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513e:	f2c1 864c 	blt.w	8006dda <_ZN15Screen1ViewBaseC1Ev+0x3772>
            return (int)(fs + 0.5f);
 8005142:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800514a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800514e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005152:	4630      	mov	r0, r6
 8005154:	f00c fff5 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005158:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800515c:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80053d4 <_ZN15Screen1ViewBaseC1Ev+0x1d6c>
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005168:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800516c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	f2c1 8646 	blt.w	8006e04 <_ZN15Screen1ViewBaseC1Ev+0x379c>
            return (int)(fs + 0.5f);
 8005178:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800517c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005184:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005188:	4630      	mov	r0, r6
 800518a:	f00c ffda 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800518e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005192:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80053d8 <_ZN15Screen1ViewBaseC1Ev+0x1d70>
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800519e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051aa:	f2c1 8640 	blt.w	8006e2e <_ZN15Screen1ViewBaseC1Ev+0x37c6>
            return (int)(fs + 0.5f);
 80051ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051ba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051be:	4630      	mov	r0, r6
 80051c0:	f00c ffbf 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051c4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80051c8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80053dc <_ZN15Screen1ViewBaseC1Ev+0x1d74>
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e0:	f2c1 863a 	blt.w	8006e58 <_ZN15Screen1ViewBaseC1Ev+0x37f0>
            return (int)(fs + 0.5f);
 80051e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051f4:	4630      	mov	r0, r6
 80051f6:	f00c ffa4 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051fa:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80051fe:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80053e0 <_ZN15Screen1ViewBaseC1Ev+0x1d78>
 8005202:	ee07 3a90 	vmov	s15, r3
 8005206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800520e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005216:	f2c1 8634 	blt.w	8006e82 <_ZN15Screen1ViewBaseC1Ev+0x381a>
            return (int)(fs + 0.5f);
 800521a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800521e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005226:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800522a:	4630      	mov	r0, r6
 800522c:	f00c ff89 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005230:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005234:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80053e4 <_ZN15Screen1ViewBaseC1Ev+0x1d7c>
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005240:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	f2c1 862e 	blt.w	8006eac <_ZN15Screen1ViewBaseC1Ev+0x3844>
            return (int)(fs + 0.5f);
 8005250:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800525c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005260:	4630      	mov	r0, r6
 8005262:	f00c ff6e 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005266:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800526a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80053e8 <_ZN15Screen1ViewBaseC1Ev+0x1d80>
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005276:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800527a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005282:	f2c1 8628 	blt.w	8006ed6 <_ZN15Screen1ViewBaseC1Ev+0x386e>
            return (int)(fs + 0.5f);
 8005286:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800528a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800528e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005292:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005296:	4630      	mov	r0, r6
 8005298:	f00c ff53 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800529c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052a0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80053ec <_ZN15Screen1ViewBaseC1Ev+0x1d84>
 80052a4:	ee07 3a90 	vmov	s15, r3
 80052a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b8:	f2c1 8622 	blt.w	8006f00 <_ZN15Screen1ViewBaseC1Ev+0x3898>
            return (int)(fs + 0.5f);
 80052bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052cc:	4630      	mov	r0, r6
 80052ce:	f00c ff38 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052d2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052d6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80053f0 <_ZN15Screen1ViewBaseC1Ev+0x1d88>
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	f2c1 861c 	blt.w	8006f2a <_ZN15Screen1ViewBaseC1Ev+0x38c2>
            return (int)(fs + 0.5f);
 80052f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005302:	4630      	mov	r0, r6
 8005304:	f00c ff1d 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005308:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800530c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80053f4 <_ZN15Screen1ViewBaseC1Ev+0x1d8c>
 8005310:	ee07 3a90 	vmov	s15, r3
 8005314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005318:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800531c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	f2c1 8616 	blt.w	8006f54 <_ZN15Screen1ViewBaseC1Ev+0x38ec>
            return (int)(fs + 0.5f);
 8005328:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800532c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005334:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005338:	4630      	mov	r0, r6
 800533a:	f00c ff02 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800533e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005342:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80053f8 <_ZN15Screen1ViewBaseC1Ev+0x1d90>
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800534e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535a:	f2c1 8610 	blt.w	8006f7e <_ZN15Screen1ViewBaseC1Ev+0x3916>
            return (int)(fs + 0.5f);
 800535e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800536a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800536e:	4630      	mov	r0, r6
 8005370:	f00c fee7 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005374:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005378:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80053fc <_ZN15Screen1ViewBaseC1Ev+0x1d94>
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005384:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	f2c1 860a 	blt.w	8006fa8 <_ZN15Screen1ViewBaseC1Ev+0x3940>
            return (int)(fs + 0.5f);
 8005394:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800539c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053a4:	4630      	mov	r0, r6
 80053a6:	f00c fecc 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053aa:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80053ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005400 <_ZN15Screen1ViewBaseC1Ev+0x1d98>
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	e039      	b.n	800542c <_ZN15Screen1ViewBaseC1Ev+0x1dc4>
 80053b8:	42770644 	.word	0x42770644
 80053bc:	426d8366 	.word	0x426d8366
 80053c0:	42550015 	.word	0x42550015
 80053c4:	42378204 	.word	0x42378204
 80053c8:	42205953 	.word	0x42205953
 80053cc:	421931ba 	.word	0x421931ba
 80053d0:	42278b9a 	.word	0x42278b9a
 80053d4:	424b3cd6 	.word	0x424b3cd6
 80053d8:	427e5902 	.word	0x427e5902
 80053dc:	429b43f0 	.word	0x429b43f0
 80053e0:	42b3bbd9 	.word	0x42b3bbd9
 80053e4:	42c2e952 	.word	0x42c2e952
 80053e8:	42c4ff5a 	.word	0x42c4ff5a
 80053ec:	42b8fdf1 	.word	0x42b8fdf1
 80053f0:	42a0f5c4 	.word	0x42a0f5c4
 80053f4:	42818fa4 	.word	0x42818fa4
 80053f8:	4241ea06 	.word	0x4241ea06
 80053fc:	420aba88 	.word	0x420aba88
 8005400:	41ce68b7 	.word	0x41ce68b7
 8005404:	41b7f63b 	.word	0x41b7f63b
 8005408:	41cf726c 	.word	0x41cf726c
 800540c:	42039d1a 	.word	0x42039d1a
 8005410:	42252ce4 	.word	0x42252ce4
 8005414:	4240fc41 	.word	0x4240fc41
 8005418:	424d990c 	.word	0x424d990c
 800541c:	4245f650 	.word	0x4245f650
 8005420:	422abce3 	.word	0x422abce3
 8005424:	42022e5b 	.word	0x42022e5b
 8005428:	41ad425b 	.word	0x41ad425b
 800542c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005430:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800543c:	f2c1 85c9 	blt.w	8006fd2 <_ZN15Screen1ViewBaseC1Ev+0x396a>
            return (int)(fs + 0.5f);
 8005440:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800544c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005450:	4630      	mov	r0, r6
 8005452:	f00c fe76 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005456:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800545a:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8005404 <_ZN15Screen1ViewBaseC1Ev+0x1d9c>
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005466:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800546a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800546e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005472:	f2c1 85c3 	blt.w	8006ffc <_ZN15Screen1ViewBaseC1Ev+0x3994>
            return (int)(fs + 0.5f);
 8005476:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800547a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800547e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005482:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005486:	4630      	mov	r0, r6
 8005488:	f00c fe5b 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800548c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005490:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8005408 <_ZN15Screen1ViewBaseC1Ev+0x1da0>
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a8:	f2c1 85bd 	blt.w	8007026 <_ZN15Screen1ViewBaseC1Ev+0x39be>
            return (int)(fs + 0.5f);
 80054ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054bc:	4630      	mov	r0, r6
 80054be:	f00c fe40 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054c2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80054c6:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 800540c <_ZN15Screen1ViewBaseC1Ev+0x1da4>
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	f2c1 85b7 	blt.w	8007050 <_ZN15Screen1ViewBaseC1Ev+0x39e8>
            return (int)(fs + 0.5f);
 80054e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054f2:	4630      	mov	r0, r6
 80054f4:	f00c fe25 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054f8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80054fc:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 8005410 <_ZN15Screen1ViewBaseC1Ev+0x1da8>
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005508:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800550c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005514:	f2c1 85b1 	blt.w	800707a <_ZN15Screen1ViewBaseC1Ev+0x3a12>
            return (int)(fs + 0.5f);
 8005518:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800551c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005524:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005528:	4630      	mov	r0, r6
 800552a:	f00c fe0a 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800552e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005532:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8005414 <_ZN15Screen1ViewBaseC1Ev+0x1dac>
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800553e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554a:	f2c1 85ab 	blt.w	80070a4 <_ZN15Screen1ViewBaseC1Ev+0x3a3c>
            return (int)(fs + 0.5f);
 800554e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005552:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800555e:	4630      	mov	r0, r6
 8005560:	f00c fdef 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005564:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005568:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8005418 <_ZN15Screen1ViewBaseC1Ev+0x1db0>
 800556c:	ee07 3a90 	vmov	s15, r3
 8005570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005574:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005578:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	f2c1 85a5 	blt.w	80070ce <_ZN15Screen1ViewBaseC1Ev+0x3a66>
            return (int)(fs + 0.5f);
 8005584:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800558c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005590:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005594:	4630      	mov	r0, r6
 8005596:	f00c fdd4 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800559a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800559e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800541c <_ZN15Screen1ViewBaseC1Ev+0x1db4>
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b6:	f2c1 859f 	blt.w	80070f8 <_ZN15Screen1ViewBaseC1Ev+0x3a90>
            return (int)(fs + 0.5f);
 80055ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055ca:	4630      	mov	r0, r6
 80055cc:	f00c fdb9 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055d0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80055d4:	ed1f 7a6e 	vldr	s14, [pc, #-440]	; 8005420 <_ZN15Screen1ViewBaseC1Ev+0x1db8>
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ec:	f2c1 8599 	blt.w	8007122 <_ZN15Screen1ViewBaseC1Ev+0x3aba>
            return (int)(fs + 0.5f);
 80055f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005600:	4630      	mov	r0, r6
 8005602:	f00c fd9e 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005606:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800560a:	ed1f 7a7a 	vldr	s14, [pc, #-488]	; 8005424 <_ZN15Screen1ViewBaseC1Ev+0x1dbc>
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005616:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800561a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800561e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005622:	f2c1 8593 	blt.w	800714c <_ZN15Screen1ViewBaseC1Ev+0x3ae4>
            return (int)(fs + 0.5f);
 8005626:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800562a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800562e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005632:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005636:	4630      	mov	r0, r6
 8005638:	f00c fd83 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800563c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005640:	ed1f 7a87 	vldr	s14, [pc, #-540]	; 8005428 <_ZN15Screen1ViewBaseC1Ev+0x1dc0>
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005658:	f2c1 858d 	blt.w	8007176 <_ZN15Screen1ViewBaseC1Ev+0x3b0e>
            return (int)(fs + 0.5f);
 800565c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005668:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800566c:	4630      	mov	r0, r6
    graph2.setGraphAreaPadding(0, 0, 0, 0);
 800566e:	2700      	movs	r7, #0
 8005670:	f00c fd67 	bl	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8005674:	4631      	mov	r1, r6
 8005676:	4640      	mov	r0, r8
        dragAction = &callback;
 8005678:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 800567c:	f00a fcf6 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(480, 254);
 8005680:	22fe      	movs	r2, #254	; 0xfe
 8005682:	9807      	ldr	r0, [sp, #28]
 8005684:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005688:	f7fd ff21 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
 800568c:	9907      	ldr	r1, [sp, #28]
 800568e:	4640      	mov	r0, r8
        color = newColor;
 8005690:	f8df a4d8 	ldr.w	sl, [pc, #1240]	; 8005b6c <_ZN15Screen1ViewBaseC1Ev+0x2504>
 8005694:	f00a fcea 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph2.setPosition(21, 312, 266, 148);
 8005698:	2394      	movs	r3, #148	; 0x94
 800569a:	4628      	mov	r0, r5
 800569c:	f44f 729c 	mov.w	r2, #312	; 0x138
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2115      	movs	r1, #21
 80056a4:	f44f 7385 	mov.w	r3, #266	; 0x10a
        dataScale = scale;
 80056a8:	f04f 0901 	mov.w	r9, #1
 80056ac:	f7fd ff1c 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    graph2.setScaleX(1);
 80056b0:	4628      	mov	r0, r5
 80056b2:	2200      	movs	r2, #0
 80056b4:	2101      	movs	r1, #1
 80056b6:	f00c fd06 	bl	80120c6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph2.setScaleY(1);
 80056ba:	4628      	mov	r0, r5
 80056bc:	2200      	movs	r2, #0
 80056be:	2101      	movs	r1, #1
 80056c0:	f00c fd20 	bl	8012104 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph2.setGraphAreaMargin(12, 32, 0, 20);
 80056c4:	2314      	movs	r3, #20
 80056c6:	4628      	mov	r0, r5
 80056c8:	2220      	movs	r2, #32
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	210c      	movs	r1, #12
 80056ce:	2300      	movs	r3, #0
        return i * scale;
 80056d0:	f06f 0b47 	mvn.w	fp, #71	; 0x47
 80056d4:	f00c fbeb 	bl	8011eae <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph2.setGraphAreaPadding(0, 0, 0, 0);
 80056d8:	463b      	mov	r3, r7
 80056da:	463a      	mov	r2, r7
 80056dc:	4639      	mov	r1, r7
 80056de:	4628      	mov	r0, r5
 80056e0:	9700      	str	r7, [sp, #0]
 80056e2:	f00c fac8 	bl	8011c76 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph2.setGraphRangeX(-100, 100);
 80056e6:	4628      	mov	r0, r5
 80056e8:	2264      	movs	r2, #100	; 0x64
 80056ea:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80056ee:	f7fd fa09 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph2.setGraphRangeY(-100, 100);
 80056f2:	4628      	mov	r0, r5
 80056f4:	2264      	movs	r2, #100	; 0x64
 80056f6:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80056fa:	f7fd fa8f 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
        dragAction = &callback;
 80056fe:	9b08      	ldr	r3, [sp, #32]
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8005700:	f8d6 13b0 	ldr.w	r1, [r6, #944]	; 0x3b0
class TypedText
 8005704:	f04f 0206 	mov.w	r2, #6
 8005708:	6473      	str	r3, [r6, #68]	; 0x44
        return i * scale;
 800570a:	231e      	movs	r3, #30
 800570c:	f8a6 23bc 	strh.w	r2, [r6, #956]	; 0x3bc
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005710:	2201      	movs	r2, #1
 8005712:	fb03 f001 	mul.w	r0, r3, r1
 8005716:	f8c6 a3ac 	str.w	sl, [r6, #940]	; 0x3ac
 800571a:	2800      	cmp	r0, #0
 800571c:	bfb8      	it	lt
 800571e:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8005720:	f8c6 03b4 	str.w	r0, [r6, #948]	; 0x3b4
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005724:	f00c fc76 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph2.addBottomElement(graph2MajorXAxisLabel);
 8005728:	990d      	ldr	r1, [sp, #52]	; 0x34
 800572a:	f8c6 03b4 	str.w	r0, [r6, #948]	; 0x3b4
 800572e:	4628      	mov	r0, r5
        dataScale = scale;
 8005730:	f8c6 93b0 	str.w	r9, [r6, #944]	; 0x3b0
 8005734:	f00c face 	bl	8011cd4 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8005738:	f8d6 13fc 	ldr.w	r1, [r6, #1020]	; 0x3fc
 800573c:	2228      	movs	r2, #40	; 0x28
 800573e:	2305      	movs	r3, #5
 8005740:	f8c6 a3f8 	str.w	sl, [r6, #1016]	; 0x3f8
 8005744:	f06f 0a4d 	mvn.w	sl, #77	; 0x4d
 8005748:	fb02 f001 	mul.w	r0, r2, r1
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800574c:	464a      	mov	r2, r9
 800574e:	f8a6 3408 	strh.w	r3, [r6, #1032]	; 0x408
 8005752:	2800      	cmp	r0, #0
 8005754:	bfb8      	it	lt
 8005756:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8005758:	f8c6 0400 	str.w	r0, [r6, #1024]	; 0x400
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800575c:	f00c fc5a 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph2.addLeftElement(graph2MajorYAxisLabel);
 8005760:	9903      	ldr	r1, [sp, #12]
 8005762:	f8c6 0400 	str.w	r0, [r6, #1024]	; 0x400
 8005766:	4628      	mov	r0, r5
        dataScale = scale;
 8005768:	f8c6 93fc 	str.w	r9, [r6, #1020]	; 0x3fc
 800576c:	f06f 0931 	mvn.w	r9, #49	; 0x31
 8005770:	f00c fa9e 	bl	8011cb0 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8005774:	4bfc      	ldr	r3, [pc, #1008]	; (8005b68 <_ZN15Screen1ViewBaseC1Ev+0x2500>)
 8005776:	f04f 0116 	mov.w	r1, #22
    graph2.addGraphElement(graph2Line1);
 800577a:	4628      	mov	r0, r5
 800577c:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
        painterRed = Color::getRed(color);
 8005780:	f24c 4316 	movw	r3, #50198	; 0xc416
        painterBlue = Color::getBlue(color);
 8005784:	f886 145a 	strb.w	r1, [r6, #1114]	; 0x45a
        lineWidth = width;
 8005788:	f04f 0102 	mov.w	r1, #2
        painterRed = Color::getRed(color);
 800578c:	f8a6 3458 	strh.w	r3, [r6, #1112]	; 0x458
 8005790:	9b05      	ldr	r3, [sp, #20]
 8005792:	f886 1444 	strb.w	r1, [r6, #1092]	; 0x444
 8005796:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
 800579a:	9904      	ldr	r1, [sp, #16]
 800579c:	f00c fa76 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 80057a0:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 80057a4:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 80057a8:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057ac:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80057b0:	435a      	muls	r2, r3
 80057b2:	4341      	muls	r1, r0
 80057b4:	4628      	mov	r0, r5
 80057b6:	f00c fcd8 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80057ba:	f06f 0335 	mvn.w	r3, #53	; 0x35
        return i * scale;
 80057be:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80057c2:	f06f 0061 	mvn.w	r0, #97	; 0x61
        return i * scale;
 80057c6:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057ca:	435a      	muls	r2, r3
 80057cc:	4341      	muls	r1, r0
 80057ce:	4628      	mov	r0, r5
 80057d0:	f00c fccb 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80057d4:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 80057d8:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057dc:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 80057e0:	fb09 f202 	mul.w	r2, r9, r2
 80057e4:	4341      	muls	r1, r0
 80057e6:	4628      	mov	r0, r5
 80057e8:	f00c fcbf 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80057ec:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80057f0:	f06f 0024 	mvn.w	r0, #36	; 0x24
        return i * scale;
 80057f4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057f8:	4342      	muls	r2, r0
 80057fa:	f06f 005d 	mvn.w	r0, #93	; 0x5d
 80057fe:	4341      	muls	r1, r0
 8005800:	4628      	mov	r0, r5
 8005802:	f00c fcb2 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005806:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 800580a:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 800580e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005812:	4342      	muls	r2, r0
 8005814:	f06f 005b 	mvn.w	r0, #91	; 0x5b
 8005818:	4341      	muls	r1, r0
 800581a:	4628      	mov	r0, r5
 800581c:	f00c fca5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005820:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005824:	f06f 0004 	mvn.w	r0, #4
        return i * scale;
 8005828:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800582c:	4342      	muls	r2, r0
 800582e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8005832:	4341      	muls	r1, r0
 8005834:	4628      	mov	r0, r5
 8005836:	f00c fc98 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800583a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 800583e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005842:	f06f 0057 	mvn.w	r0, #87	; 0x57
 8005846:	0052      	lsls	r2, r2, #1
 8005848:	4341      	muls	r1, r0
 800584a:	4628      	mov	r0, r5
 800584c:	f00c fc8d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005850:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005854:	f06f 0055 	mvn.w	r0, #85	; 0x55
 8005858:	463a      	mov	r2, r7
 800585a:	4341      	muls	r1, r0
 800585c:	4628      	mov	r0, r5
 800585e:	f00c fc84 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005862:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005866:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800586a:	f06f 030b 	mvn.w	r3, #11
 800586e:	f06f 0053 	mvn.w	r0, #83	; 0x53
 8005872:	435a      	muls	r2, r3
 8005874:	4341      	muls	r1, r0
 8005876:	4628      	mov	r0, r5
 8005878:	f00c fc77 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 800587c:	f06f 031f 	mvn.w	r3, #31
        return i * scale;
 8005880:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005884:	f06f 0051 	mvn.w	r0, #81	; 0x51
        return i * scale;
 8005888:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800588c:	435a      	muls	r2, r3
 800588e:	4341      	muls	r1, r0
 8005890:	4628      	mov	r0, r5
 8005892:	f00c fc6a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005896:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 800589a:	f06f 0034 	mvn.w	r0, #52	; 0x34
        return i * scale;
 800589e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058a2:	4342      	muls	r2, r0
 80058a4:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 80058a8:	4341      	muls	r1, r0
 80058aa:	4628      	mov	r0, r5
 80058ac:	f00c fc5d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058b0:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 80058b4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058b8:	4628      	mov	r0, r5
 80058ba:	fb0b f202 	mul.w	r2, fp, r2
 80058be:	fb0a f101 	mul.w	r1, sl, r1
 80058c2:	f00c fc52 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058c6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80058ca:	f06f 0050 	mvn.w	r0, #80	; 0x50
        return i * scale;
 80058ce:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058d2:	4342      	muls	r2, r0
 80058d4:	f06f 004b 	mvn.w	r0, #75	; 0x4b
 80058d8:	4341      	muls	r1, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f00c fc45 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058e0:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 80058e4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058e8:	f06f 0049 	mvn.w	r0, #73	; 0x49
 80058ec:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 80058f0:	f06f 0a3d 	mvn.w	sl, #61	; 0x3d
        return addValue(int2scaledX(x), int2scaledY(y));
 80058f4:	4341      	muls	r1, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	f00c fc37 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058fc:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005900:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005904:	4628      	mov	r0, r5
 8005906:	fb0a f202 	mul.w	r2, sl, r2
 800590a:	fb0b f101 	mul.w	r1, fp, r1
        return i * scale;
 800590e:	f06f 0b16 	mvn.w	fp, #22
        return addValue(int2scaledX(x), int2scaledY(y));
 8005912:	f00c fc2a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005916:	f06f 0321 	mvn.w	r3, #33	; 0x21
        return i * scale;
 800591a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 800591e:	f06f 0045 	mvn.w	r0, #69	; 0x45
        return i * scale;
 8005922:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005926:	435a      	muls	r2, r3
 8005928:	4341      	muls	r1, r0
 800592a:	4628      	mov	r0, r5
 800592c:	f00c fc1d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005930:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005934:	f06f 0043 	mvn.w	r0, #67	; 0x43
 8005938:	463a      	mov	r2, r7
 800593a:	4341      	muls	r1, r0
 800593c:	4628      	mov	r0, r5
 800593e:	f00c fc14 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005942:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005946:	2022      	movs	r0, #34	; 0x22
        return i * scale;
 8005948:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800594c:	4342      	muls	r2, r0
 800594e:	f06f 0041 	mvn.w	r0, #65	; 0x41
 8005952:	4341      	muls	r1, r0
 8005954:	4628      	mov	r0, r5
 8005956:	f00c fc08 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800595a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 800595e:	203d      	movs	r0, #61	; 0x3d
        return i * scale;
 8005960:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005964:	4342      	muls	r2, r0
 8005966:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 800596a:	4341      	muls	r1, r0
 800596c:	4628      	mov	r0, r5
 800596e:	f00c fbfc 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005972:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005976:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800597a:	204e      	movs	r0, #78	; 0x4e
 800597c:	fb0a f101 	mul.w	r1, sl, r1
        return i * scale;
 8005980:	f06f 0a0f 	mvn.w	sl, #15
        return addValue(int2scaledX(x), int2scaledY(y));
 8005984:	4342      	muls	r2, r0
 8005986:	4628      	mov	r0, r5
 8005988:	f00c fbef 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800598c:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005990:	2051      	movs	r0, #81	; 0x51
        return i * scale;
 8005992:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005996:	4342      	muls	r2, r0
 8005998:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 800599c:	4341      	muls	r1, r0
 800599e:	4628      	mov	r0, r5
 80059a0:	f00c fbe3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80059a4:	2348      	movs	r3, #72	; 0x48
        return i * scale;
 80059a6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80059aa:	f06f 0039 	mvn.w	r0, #57	; 0x39
        return i * scale;
 80059ae:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059b2:	435a      	muls	r2, r3
 80059b4:	4341      	muls	r1, r0
 80059b6:	4628      	mov	r0, r5
 80059b8:	f00c fbd7 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80059bc:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80059c0:	2036      	movs	r0, #54	; 0x36
        return i * scale;
 80059c2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059c6:	4342      	muls	r2, r0
 80059c8:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80059cc:	4341      	muls	r1, r0
 80059ce:	4628      	mov	r0, r5
 80059d0:	f00c fbcb 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80059d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
        return i * scale;
 80059d8:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80059dc:	4628      	mov	r0, r5
        return i * scale;
 80059de:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059e2:	0152      	lsls	r2, r2, #5
 80059e4:	4359      	muls	r1, r3
 80059e6:	f00c fbc0 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80059ea:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80059ee:	200c      	movs	r0, #12
        return i * scale;
 80059f0:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059f4:	4342      	muls	r2, r0
 80059f6:	f06f 0033 	mvn.w	r0, #51	; 0x33
 80059fa:	4341      	muls	r1, r0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f00c fbb4 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a02:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a06:	463a      	mov	r2, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	fb09 f101 	mul.w	r1, r9, r1
        return i * scale;
 8005a0e:	f04f 0912 	mov.w	r9, #18
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a12:	f00c fbaa 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a16:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005a1a:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a1e:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8005a22:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005a26:	4341      	muls	r1, r0
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f00c fb9e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a2e:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005a32:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a36:	f06f 032d 	mvn.w	r3, #45	; 0x2d
 8005a3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a3e:	4628      	mov	r0, r5
 8005a40:	4359      	muls	r1, r3
 8005a42:	f00c fb92 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a46:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a4a:	2114      	movs	r1, #20
        return i * scale;
 8005a4c:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a50:	4628      	mov	r0, r5
 8005a52:	434a      	muls	r2, r1
 8005a54:	f06f 012b 	mvn.w	r1, #43	; 0x2b
 8005a58:	4359      	muls	r1, r3
 8005a5a:	f00c fb86 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a5e:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a62:	2124      	movs	r1, #36	; 0x24
        return i * scale;
 8005a64:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a68:	4628      	mov	r0, r5
 8005a6a:	434a      	muls	r2, r1
 8005a6c:	f06f 0129 	mvn.w	r1, #41	; 0x29
 8005a70:	4359      	muls	r1, r3
 8005a72:	f00c fb7a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a76:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a7a:	2032      	movs	r0, #50	; 0x32
        return i * scale;
 8005a7c:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a80:	4342      	muls	r2, r0
 8005a82:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8005a86:	4341      	muls	r1, r0
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f00c fb6e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a8e:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
 8005a92:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a96:	2036      	movs	r0, #54	; 0x36
 8005a98:	f06f 0125 	mvn.w	r1, #37	; 0x25
 8005a9c:	4342      	muls	r2, r0
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	4359      	muls	r1, r3
 8005aa2:	f00c fb62 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005aa6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005aaa:	212f      	movs	r1, #47	; 0x2f
        return i * scale;
 8005aac:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	434a      	muls	r2, r1
 8005ab4:	f06f 0123 	mvn.w	r1, #35	; 0x23
 8005ab8:	4359      	muls	r1, r3
 8005aba:	f00c fb56 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005abe:	f8d4 3f50 	ldr.w	r3, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ac2:	221b      	movs	r2, #27
        return i * scale;
 8005ac4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ac8:	4628      	mov	r0, r5
 8005aca:	435a      	muls	r2, r3
 8005acc:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8005ad0:	4359      	muls	r1, r3
 8005ad2:	f00c fb4a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ad6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005ada:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ade:	f06f 031f 	mvn.w	r3, #31
 8005ae2:	4252      	negs	r2, r2
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	4359      	muls	r1, r3
 8005ae8:	f00c fb3f 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005aec:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005af0:	f06f 0121 	mvn.w	r1, #33	; 0x21
        return i * scale;
 8005af4:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005af8:	4628      	mov	r0, r5
 8005afa:	434a      	muls	r2, r1
 8005afc:	f06f 011d 	mvn.w	r1, #29
 8005b00:	4359      	muls	r1, r3
 8005b02:	f00c fb32 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b06:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b0a:	f06f 0140 	mvn.w	r1, #64	; 0x40
        return i * scale;
 8005b0e:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b12:	4628      	mov	r0, r5
 8005b14:	434a      	muls	r2, r1
 8005b16:	f06f 011b 	mvn.w	r1, #27
 8005b1a:	4359      	muls	r1, r3
 8005b1c:	f00c fb25 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b20:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b24:	f06f 0156 	mvn.w	r1, #86	; 0x56
        return i * scale;
 8005b28:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	434a      	muls	r2, r1
 8005b30:	f06f 0119 	mvn.w	r1, #25
 8005b34:	4359      	muls	r1, r3
 8005b36:	f00c fb18 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b3a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b3e:	f06f 0161 	mvn.w	r1, #97	; 0x61
        return i * scale;
 8005b42:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b46:	4628      	mov	r0, r5
 8005b48:	434a      	muls	r2, r1
 8005b4a:	f06f 0117 	mvn.w	r1, #23
 8005b4e:	4359      	muls	r1, r3
 8005b50:	f00c fb0b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b54:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b58:	f06f 015d 	mvn.w	r1, #93	; 0x5d
        return i * scale;
 8005b5c:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b60:	4628      	mov	r0, r5
 8005b62:	434a      	muls	r2, r1
 8005b64:	e004      	b.n	8005b70 <_ZN15Screen1ViewBaseC1Ev+0x2508>
 8005b66:	bf00      	nop
 8005b68:	ff16c416 	.word	0xff16c416
 8005b6c:	ff1497c5 	.word	0xff1497c5
 8005b70:	f06f 0115 	mvn.w	r1, #21
 8005b74:	4359      	muls	r1, r3
 8005b76:	f00c faf8 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b7a:	f8d4 3f50 	ldr.w	r3, [r4, #3920]	; 0xf50
 8005b7e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b82:	f06f 0013 	mvn.w	r0, #19
 8005b86:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 8005b8a:	4341      	muls	r1, r0
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	435a      	muls	r2, r3
 8005b90:	f00c faeb 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b94:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b98:	f06f 0132 	mvn.w	r1, #50	; 0x32
        return i * scale;
 8005b9c:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	434a      	muls	r2, r1
 8005ba4:	f06f 0111 	mvn.w	r1, #17
 8005ba8:	4359      	muls	r1, r3
 8005baa:	f00c fade 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bae:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005bb2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	fb0b f202 	mul.w	r2, fp, r2
 8005bbc:	fb0a f101 	mul.w	r1, sl, r1
 8005bc0:	f00c fad3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bc4:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bc8:	f06f 010d 	mvn.w	r1, #13
 8005bcc:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	4359      	muls	r1, r3
 8005bd4:	f00c fac9 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bd8:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005bdc:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005be0:	f06f 030b 	mvn.w	r3, #11
 8005be4:	fb09 f202 	mul.w	r2, r9, r2
 8005be8:	4628      	mov	r0, r5
 8005bea:	4359      	muls	r1, r3
 8005bec:	f00c fabd 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bf0:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bf4:	2118      	movs	r1, #24
        return i * scale;
 8005bf6:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	434a      	muls	r2, r1
 8005bfe:	f06f 0109 	mvn.w	r1, #9
 8005c02:	4359      	muls	r1, r3
 8005c04:	f00c fab1 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c08:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005c0c:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
 8005c10:	f06f 0307 	mvn.w	r3, #7
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c14:	2013      	movs	r0, #19
 8005c16:	4359      	muls	r1, r3
 8005c18:	4342      	muls	r2, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f00c faa5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c20:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005c24:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c28:	2306      	movs	r3, #6
 8005c2a:	f06f 0005 	mvn.w	r0, #5
 8005c2e:	435a      	muls	r2, r3
 8005c30:	4341      	muls	r1, r0
 8005c32:	4628      	mov	r0, r5
 8005c34:	f00c fa99 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c38:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c3c:	f06f 0307 	mvn.w	r3, #7
        return i * scale;
 8005c40:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c44:	4628      	mov	r0, r5
 8005c46:	435a      	muls	r2, r3
 8005c48:	f06f 0303 	mvn.w	r3, #3
 8005c4c:	4359      	muls	r1, r3
 8005c4e:	f00c fa8c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c52:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c56:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 8005c5a:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c5e:	4342      	muls	r2, r0
 8005c60:	f06f 0001 	mvn.w	r0, #1
 8005c64:	4341      	muls	r1, r0
 8005c66:	4628      	mov	r0, r5
 8005c68:	f00c fa7f 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c6c:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c70:	4639      	mov	r1, r7
 8005c72:	4628      	mov	r0, r5
 8005c74:	fb0b f202 	mul.w	r2, fp, r2
        return i * scale;
 8005c78:	f04f 0b38 	mov.w	fp, #56	; 0x38
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c7c:	f00c fa75 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c80:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005c84:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c88:	4628      	mov	r0, r5
 8005c8a:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 8005c8e:	f04f 0a1c 	mov.w	sl, #28
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c92:	0049      	lsls	r1, r1, #1
 8005c94:	f00c fa69 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c98:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005c9c:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	0052      	lsls	r2, r2, #1
 8005ca4:	0089      	lsls	r1, r1, #2
 8005ca6:	f00c fa60 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005caa:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005cae:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cb2:	2006      	movs	r0, #6
 8005cb4:	fb0a f202 	mul.w	r2, sl, r2
 8005cb8:	4341      	muls	r1, r0
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f00c fa55 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005cc0:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005cc4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cc8:	4628      	mov	r0, r5
 8005cca:	fb0b f202 	mul.w	r2, fp, r2
 8005cce:	00c9      	lsls	r1, r1, #3
 8005cd0:	f00c fa4b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005cd4:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cd8:	2350      	movs	r3, #80	; 0x50
        return i * scale;
 8005cda:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cde:	4628      	mov	r0, r5
 8005ce0:	435a      	muls	r2, r3
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	4359      	muls	r1, r3
 8005ce6:	f00c fa40 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005cea:	230c      	movs	r3, #12
        return i * scale;
 8005cec:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cf0:	205f      	movs	r0, #95	; 0x5f
        return i * scale;
 8005cf2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cf6:	4342      	muls	r2, r0
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	4359      	muls	r1, r3
 8005cfc:	f00c fa35 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d00:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d04:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 8005d06:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d0a:	4342      	muls	r2, r0
 8005d0c:	200e      	movs	r0, #14
 8005d0e:	4341      	muls	r1, r0
 8005d10:	4628      	mov	r0, r5
 8005d12:	f00c fa2a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d16:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005d1a:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d1e:	2055      	movs	r0, #85	; 0x55
 8005d20:	0109      	lsls	r1, r1, #4
 8005d22:	4342      	muls	r2, r0
 8005d24:	4628      	mov	r0, r5
 8005d26:	f00c fa20 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d2a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005d2e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d32:	203d      	movs	r0, #61	; 0x3d
 8005d34:	fb09 f101 	mul.w	r1, r9, r1
        return i * scale;
 8005d38:	f04f 0927 	mov.w	r9, #39	; 0x27
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d3c:	4342      	muls	r2, r0
 8005d3e:	4628      	mov	r0, r5
 8005d40:	f00c fa13 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005d44:	2314      	movs	r3, #20
        return i * scale;
 8005d46:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d4a:	201d      	movs	r0, #29
        return i * scale;
 8005d4c:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d50:	4342      	muls	r2, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	4359      	muls	r1, r3
 8005d56:	f00c fa08 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d5a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005d5e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d62:	2016      	movs	r0, #22
 8005d64:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005d68:	4341      	muls	r1, r0
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	f00c f9fd 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005d70:	2318      	movs	r3, #24
        return i * scale;
 8005d72:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d76:	4628      	mov	r0, r5
        return i * scale;
 8005d78:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d7c:	eba2 1242 	sub.w	r2, r2, r2, lsl #5
 8005d80:	4359      	muls	r1, r3
 8005d82:	f00c f9f2 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d86:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d8a:	f06f 0030 	mvn.w	r0, #48	; 0x30
        return i * scale;
 8005d8e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d92:	4342      	muls	r2, r0
 8005d94:	201a      	movs	r0, #26
 8005d96:	4341      	muls	r1, r0
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f00c f9e6 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d9e:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005da2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005da6:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005daa:	4628      	mov	r0, r5
 8005dac:	435a      	muls	r2, r3
 8005dae:	fb0a f101 	mul.w	r1, sl, r1
 8005db2:	f00c f9da 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005db6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dba:	f06f 032f 	mvn.w	r3, #47	; 0x2f
        return i * scale;
 8005dbe:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	435a      	muls	r2, r3
 8005dc6:	231e      	movs	r3, #30
 8005dc8:	4359      	muls	r1, r3
 8005dca:	f00c f9ce 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005dce:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005dd2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dd6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8005dda:	4628      	mov	r0, r5
 8005ddc:	435a      	muls	r2, r3
 8005dde:	0149      	lsls	r1, r1, #5
 8005de0:	f00c f9c3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005de4:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005de8:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dec:	2322      	movs	r3, #34	; 0x22
 8005dee:	f06f 0010 	mvn.w	r0, #16
 8005df2:	4359      	muls	r1, r3
 8005df4:	4342      	muls	r2, r0
 8005df6:	4628      	mov	r0, r5
 8005df8:	f00c f9b7 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005dfc:	2324      	movs	r3, #36	; 0x24
        return i * scale;
 8005dfe:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e02:	4628      	mov	r0, r5
        return i * scale;
 8005e04:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e08:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005e0c:	4359      	muls	r1, r3
 8005e0e:	f00c f9ac 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e12:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005e16:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e1a:	2026      	movs	r0, #38	; 0x26
 8005e1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005e20:	4341      	muls	r1, r0
 8005e22:	4628      	mov	r0, r5
 8005e24:	f00c f9a1 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005e28:	2328      	movs	r3, #40	; 0x28
        return i * scale;
 8005e2a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e2e:	4628      	mov	r0, r5
        return i * scale;
 8005e30:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e34:	4252      	negs	r2, r2
 8005e36:	4359      	muls	r1, r3
 8005e38:	f00c f997 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e3c:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005e40:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e44:	202a      	movs	r0, #42	; 0x2a
 8005e46:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8005e4a:	4341      	muls	r1, r0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f00c f98c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e52:	232c      	movs	r3, #44	; 0x2c
 8005e54:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e58:	f06f 0022 	mvn.w	r0, #34	; 0x22
        return i * scale;
 8005e5c:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e60:	4342      	muls	r2, r0
 8005e62:	4628      	mov	r0, r5
 8005e64:	4359      	muls	r1, r3
 8005e66:	f00c f980 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e6a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e6e:	f06f 0038 	mvn.w	r0, #56	; 0x38
        return i * scale;
 8005e72:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e76:	4342      	muls	r2, r0
 8005e78:	202e      	movs	r0, #46	; 0x2e
 8005e7a:	4341      	muls	r1, r0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	f00c f974 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e82:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005e86:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e8a:	f06f 0349 	mvn.w	r3, #73	; 0x49
 8005e8e:	2030      	movs	r0, #48	; 0x30
 8005e90:	435a      	muls	r2, r3
 8005e92:	4341      	muls	r1, r0
 8005e94:	4628      	mov	r0, r5
 8005e96:	f00c f968 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e9a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e9e:	f06f 0351 	mvn.w	r3, #81	; 0x51
        return i * scale;
 8005ea2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	435a      	muls	r2, r3
 8005eaa:	2332      	movs	r3, #50	; 0x32
 8005eac:	4359      	muls	r1, r3
 8005eae:	f00c f95c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005eb2:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005eb6:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005eba:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8005ebe:	2034      	movs	r0, #52	; 0x34
 8005ec0:	435a      	muls	r2, r3
 8005ec2:	4341      	muls	r1, r0
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	f00c f950 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005eca:	f06f 0339 	mvn.w	r3, #57	; 0x39
        return i * scale;
 8005ece:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ed2:	2036      	movs	r0, #54	; 0x36
        return i * scale;
 8005ed4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ed8:	435a      	muls	r2, r3
 8005eda:	4341      	muls	r1, r0
 8005edc:	4628      	mov	r0, r5
 8005ede:	f00c f944 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ee2:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005ee6:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005eea:	f06f 001c 	mvn.w	r0, #28
 8005eee:	fb0b f101 	mul.w	r1, fp, r1
        return i * scale;
 8005ef2:	f04f 0b46 	mov.w	fp, #70	; 0x46
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ef6:	4342      	muls	r2, r0
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f00c f936 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005efe:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f02:	2006      	movs	r0, #6
        return i * scale;
 8005f04:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f08:	4342      	muls	r2, r0
 8005f0a:	203a      	movs	r0, #58	; 0x3a
 8005f0c:	4341      	muls	r1, r0
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f00c f92b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f14:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f18:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f1c:	203c      	movs	r0, #60	; 0x3c
 8005f1e:	fb09 f202 	mul.w	r2, r9, r2
 8005f22:	4341      	muls	r1, r0
 8005f24:	4628      	mov	r0, r5
 8005f26:	f00c f920 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f2a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f2e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f32:	203e      	movs	r0, #62	; 0x3e
 8005f34:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8005f38:	4341      	muls	r1, r0
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f00c f915 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f40:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f44:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f48:	2050      	movs	r0, #80	; 0x50
 8005f4a:	0189      	lsls	r1, r1, #6
 8005f4c:	4342      	muls	r2, r0
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f00c f90b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f54:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f58:	2051      	movs	r0, #81	; 0x51
        return i * scale;
 8005f5a:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f5e:	4342      	muls	r2, r0
 8005f60:	2042      	movs	r0, #66	; 0x42
 8005f62:	4341      	muls	r1, r0
 8005f64:	4628      	mov	r0, r5
 8005f66:	f00c f900 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f6a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f6e:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f72:	2044      	movs	r0, #68	; 0x44
 8005f74:	fb0b f202 	mul.w	r2, fp, r2
 8005f78:	4341      	muls	r1, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f00c f8f5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f80:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f84:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f88:	2332      	movs	r3, #50	; 0x32
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	435a      	muls	r2, r3
 8005f8e:	fb0b f101 	mul.w	r1, fp, r1
 8005f92:	f00c f8ea 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f96:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005f9a:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f9e:	2348      	movs	r3, #72	; 0x48
 8005fa0:	fb0a f202 	mul.w	r2, sl, r2
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	4359      	muls	r1, r3
 8005fa8:	f00c f8df 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8005fac:	230a      	movs	r3, #10
        return i * scale;
 8005fae:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fb2:	204a      	movs	r0, #74	; 0x4a
        return i * scale;
 8005fb4:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fb8:	435a      	muls	r2, r3
 8005fba:	4341      	muls	r1, r0
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f00c f8d4 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fc2:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005fc6:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fca:	204c      	movs	r0, #76	; 0x4c
 8005fcc:	4252      	negs	r2, r2
 8005fce:	4341      	muls	r1, r0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f00c f8ca 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fd6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fda:	f06f 0301 	mvn.w	r3, #1
        return i * scale;
 8005fde:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	435a      	muls	r2, r3
 8005fe6:	234e      	movs	r3, #78	; 0x4e
 8005fe8:	4359      	muls	r1, r3
 8005fea:	f00c f8be 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fee:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
 8005ff2:	f8d4 1f4c 	ldr.w	r1, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ff6:	2050      	movs	r0, #80	; 0x50
 8005ff8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8005ffc:	4341      	muls	r1, r0
 8005ffe:	4628      	mov	r0, r5
 8006000:	f00c f8b3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006004:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006008:	2116      	movs	r1, #22
        return i * scale;
 800600a:	f8d4 0f4c 	ldr.w	r0, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800600e:	434a      	muls	r2, r1
 8006010:	2152      	movs	r1, #82	; 0x52
 8006012:	4341      	muls	r1, r0
 8006014:	4628      	mov	r0, r5
 8006016:	f00c f8a8 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800601a:	f8d4 0f4c 	ldr.w	r0, [r4, #3916]	; 0xf4c
 800601e:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006022:	2154      	movs	r1, #84	; 0x54
 8006024:	fb09 f202 	mul.w	r2, r9, r2
 8006028:	4341      	muls	r1, r0
 800602a:	4628      	mov	r0, r5
 800602c:	f00c f89d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006030:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006034:	2133      	movs	r1, #51	; 0x33
        return i * scale;
 8006036:	f8d4 0f4c 	ldr.w	r0, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800603a:	434a      	muls	r2, r1
 800603c:	2156      	movs	r1, #86	; 0x56
 800603e:	4341      	muls	r1, r0
 8006040:	4628      	mov	r0, r5
 8006042:	f00c f892 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006046:	f8d4 0f4c 	ldr.w	r0, [r4, #3916]	; 0xf4c
 800604a:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 800604e:	2336      	movs	r3, #54	; 0x36
 8006050:	2158      	movs	r1, #88	; 0x58
 8006052:	435a      	muls	r2, r3
 8006054:	4341      	muls	r1, r0
 8006056:	4628      	mov	r0, r5
 8006058:	f00c f887 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800605c:	f8d4 0f4c 	ldr.w	r0, [r4, #3916]	; 0xf4c
 8006060:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006064:	232c      	movs	r3, #44	; 0x2c
 8006066:	215a      	movs	r1, #90	; 0x5a
 8006068:	435a      	muls	r2, r3
 800606a:	4341      	muls	r1, r0
 800606c:	4628      	mov	r0, r5
 800606e:	f00c f87c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006072:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006076:	2117      	movs	r1, #23
        return i * scale;
 8006078:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 800607c:	4628      	mov	r0, r5
 800607e:	434a      	muls	r2, r1
 8006080:	215c      	movs	r1, #92	; 0x5c
 8006082:	4359      	muls	r1, r3
 8006084:	f00c f871 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006088:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
 800608c:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 8006090:	215e      	movs	r1, #94	; 0x5e
 8006092:	4628      	mov	r0, r5
 8006094:	4359      	muls	r1, r3
 8006096:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 800609a:	f00c f866 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800609e:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
 80060a2:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80060a6:	f06f 0027 	mvn.w	r0, #39	; 0x27
 80060aa:	2160      	movs	r1, #96	; 0x60
 80060ac:	4342      	muls	r2, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	4359      	muls	r1, r3
 80060b2:	f00c f85a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80060b6:	f8d4 2f50 	ldr.w	r2, [r4, #3920]	; 0xf50
        return addValue(int2scaledX(x), int2scaledY(y));
 80060ba:	f06f 0144 	mvn.w	r1, #68	; 0x44
        return i * scale;
 80060be:	f8d4 3f4c 	ldr.w	r3, [r4, #3916]	; 0xf4c
        return addValue(int2scaledX(x), int2scaledY(y));
 80060c2:	4628      	mov	r0, r5
 80060c4:	434a      	muls	r2, r1
 80060c6:	2162      	movs	r1, #98	; 0x62
 80060c8:	4359      	muls	r1, r3
 80060ca:	f00c f84e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80060ce:	4629      	mov	r1, r5
 80060d0:	4640      	mov	r0, r8
 80060d2:	ad0e      	add	r5, sp, #56	; 0x38
 80060d4:	f009 ffca 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(0, 0);
 80060d8:	463a      	mov	r2, r7
 80060da:	4639      	mov	r1, r7
 80060dc:	ee18 0a10 	vmov	r0, s16
 80060e0:	f7fd f9f5 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80060e4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80060e8:	ee18 1a10 	vmov	r1, s16
 80060ec:	4628      	mov	r0, r5
        color = newColor;
 80060ee:	f8c6 348c 	str.w	r3, [r6, #1164]	; 0x48c
        linespace = space;
 80060f2:	f8a6 7490 	strh.w	r7, [r6, #1168]	; 0x490
        boundingArea = calculateBoundingArea();
 80060f6:	f00d faf1 	bl	80136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80060fa:	ee18 3a10 	vmov	r3, s16
 80060fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006102:	333c      	adds	r3, #60	; 0x3c
 8006104:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 8006108:	4bf1      	ldr	r3, [pc, #964]	; (80064d0 <_ZN15Screen1ViewBaseC1Ev+0x2e68>)
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UJ0C));
 800610a:	a912      	add	r1, sp, #72	; 0x48
 800610c:	ee18 0a10 	vmov	r0, s16
 8006110:	9312      	str	r3, [sp, #72]	; 0x48
 8006112:	f04f 0302 	mov.w	r3, #2
 8006116:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 800611a:	f00d fd87 	bl	8013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800611e:	4640      	mov	r0, r8
 8006120:	ee18 1a10 	vmov	r1, s16
 8006124:	f009 ffa2 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006128:	4620      	mov	r0, r4
 800612a:	b015      	add	sp, #84	; 0x54
 800612c:	ecbd 8b10 	vpop	{d8-d15}
 8006130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006134:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006138:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800613c:	ee17 3a10 	vmov	r3, s14
 8006140:	1e59      	subs	r1, r3, #1
 8006142:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006146:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800614a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006152:	ee17 3a90 	vmov	r3, s15
 8006156:	440b      	add	r3, r1
 8006158:	4619      	mov	r1, r3
 800615a:	f7fd bf46 	b.w	8003fea <_ZN15Screen1ViewBaseC1Ev+0x982>
 800615e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006162:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006166:	ee17 3a10 	vmov	r3, s14
 800616a:	1e59      	subs	r1, r3, #1
 800616c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006170:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617c:	ee17 3a90 	vmov	r3, s15
 8006180:	440b      	add	r3, r1
 8006182:	4619      	mov	r1, r3
 8006184:	f7fd bf4c 	b.w	8004020 <_ZN15Screen1ViewBaseC1Ev+0x9b8>
 8006188:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800618c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006190:	ee17 3a10 	vmov	r3, s14
 8006194:	1e59      	subs	r1, r3, #1
 8006196:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800619a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061a6:	ee17 3a90 	vmov	r3, s15
 80061aa:	440b      	add	r3, r1
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7fd bf52 	b.w	8004056 <_ZN15Screen1ViewBaseC1Ev+0x9ee>
 80061b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061ba:	ee17 3a10 	vmov	r3, s14
 80061be:	1e59      	subs	r1, r3, #1
 80061c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061c4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061d0:	ee17 3a90 	vmov	r3, s15
 80061d4:	440b      	add	r3, r1
 80061d6:	4619      	mov	r1, r3
 80061d8:	f7fd bf58 	b.w	800408c <_ZN15Screen1ViewBaseC1Ev+0xa24>
 80061dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061e4:	ee17 3a10 	vmov	r3, s14
 80061e8:	1e59      	subs	r1, r3, #1
 80061ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061fa:	ee17 3a90 	vmov	r3, s15
 80061fe:	440b      	add	r3, r1
 8006200:	4619      	mov	r1, r3
 8006202:	f7fd bf5e 	b.w	80040c2 <_ZN15Screen1ViewBaseC1Ev+0xa5a>
 8006206:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800620a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800620e:	ee17 3a10 	vmov	r3, s14
 8006212:	1e59      	subs	r1, r3, #1
 8006214:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006218:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800621c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006224:	ee17 3a90 	vmov	r3, s15
 8006228:	440b      	add	r3, r1
 800622a:	4619      	mov	r1, r3
 800622c:	f7fd bf64 	b.w	80040f8 <_ZN15Screen1ViewBaseC1Ev+0xa90>
 8006230:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006234:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006238:	ee17 3a10 	vmov	r3, s14
 800623c:	1e59      	subs	r1, r3, #1
 800623e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006242:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800624e:	ee17 3a90 	vmov	r3, s15
 8006252:	440b      	add	r3, r1
 8006254:	4619      	mov	r1, r3
 8006256:	f7fd bf6a 	b.w	800412e <_ZN15Screen1ViewBaseC1Ev+0xac6>
 800625a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800625e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006262:	ee17 3a10 	vmov	r3, s14
 8006266:	1e59      	subs	r1, r3, #1
 8006268:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800626c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006278:	ee17 3a90 	vmov	r3, s15
 800627c:	440b      	add	r3, r1
 800627e:	4619      	mov	r1, r3
 8006280:	f7fd bf70 	b.w	8004164 <_ZN15Screen1ViewBaseC1Ev+0xafc>
 8006284:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006288:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800628c:	ee17 3a10 	vmov	r3, s14
 8006290:	1e59      	subs	r1, r3, #1
 8006292:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006296:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062a2:	ee17 3a90 	vmov	r3, s15
 80062a6:	440b      	add	r3, r1
 80062a8:	4619      	mov	r1, r3
 80062aa:	f7fd bf76 	b.w	800419a <_ZN15Screen1ViewBaseC1Ev+0xb32>
 80062ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062b6:	ee17 3a10 	vmov	r3, s14
 80062ba:	1e59      	subs	r1, r3, #1
 80062bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062c0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062cc:	ee17 3a90 	vmov	r3, s15
 80062d0:	440b      	add	r3, r1
 80062d2:	4619      	mov	r1, r3
 80062d4:	f7fd bf7c 	b.w	80041d0 <_ZN15Screen1ViewBaseC1Ev+0xb68>
 80062d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062dc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062e0:	ee17 3a10 	vmov	r3, s14
 80062e4:	1e59      	subs	r1, r3, #1
 80062e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062ea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062f6:	ee17 3a90 	vmov	r3, s15
 80062fa:	440b      	add	r3, r1
 80062fc:	4619      	mov	r1, r3
 80062fe:	f7fd bf82 	b.w	8004206 <_ZN15Screen1ViewBaseC1Ev+0xb9e>
 8006302:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006306:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800630a:	ee17 3a10 	vmov	r3, s14
 800630e:	1e59      	subs	r1, r3, #1
 8006310:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006314:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006320:	ee17 3a90 	vmov	r3, s15
 8006324:	440b      	add	r3, r1
 8006326:	4619      	mov	r1, r3
 8006328:	f7fd bf88 	b.w	800423c <_ZN15Screen1ViewBaseC1Ev+0xbd4>
 800632c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006330:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006334:	ee17 3a10 	vmov	r3, s14
 8006338:	1e59      	subs	r1, r3, #1
 800633a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800633e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800634a:	ee17 3a90 	vmov	r3, s15
 800634e:	440b      	add	r3, r1
 8006350:	4619      	mov	r1, r3
 8006352:	f7fd bf8e 	b.w	8004272 <_ZN15Screen1ViewBaseC1Ev+0xc0a>
 8006356:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800635a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800635e:	ee17 3a10 	vmov	r3, s14
 8006362:	1e59      	subs	r1, r3, #1
 8006364:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006368:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800636c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006374:	ee17 3a90 	vmov	r3, s15
 8006378:	440b      	add	r3, r1
 800637a:	4619      	mov	r1, r3
 800637c:	f7fd bf94 	b.w	80042a8 <_ZN15Screen1ViewBaseC1Ev+0xc40>
 8006380:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006384:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006388:	ee17 3a10 	vmov	r3, s14
 800638c:	1e59      	subs	r1, r3, #1
 800638e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006392:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800639a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800639e:	ee17 3a90 	vmov	r3, s15
 80063a2:	440b      	add	r3, r1
 80063a4:	4619      	mov	r1, r3
 80063a6:	f7fd bf9a 	b.w	80042de <_ZN15Screen1ViewBaseC1Ev+0xc76>
 80063aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063b2:	ee17 3a10 	vmov	r3, s14
 80063b6:	1e59      	subs	r1, r3, #1
 80063b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063bc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063c8:	ee17 3a90 	vmov	r3, s15
 80063cc:	440b      	add	r3, r1
 80063ce:	4619      	mov	r1, r3
 80063d0:	f7fd bfea 	b.w	80043a8 <_ZN15Screen1ViewBaseC1Ev+0xd40>
 80063d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063dc:	ee17 3a10 	vmov	r3, s14
 80063e0:	1e59      	subs	r1, r3, #1
 80063e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063f2:	ee17 3a90 	vmov	r3, s15
 80063f6:	440b      	add	r3, r1
 80063f8:	4619      	mov	r1, r3
 80063fa:	f7fd bff0 	b.w	80043de <_ZN15Screen1ViewBaseC1Ev+0xd76>
 80063fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006402:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006406:	ee17 3a10 	vmov	r3, s14
 800640a:	1e59      	subs	r1, r3, #1
 800640c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006410:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800641c:	ee17 3a90 	vmov	r3, s15
 8006420:	440b      	add	r3, r1
 8006422:	4619      	mov	r1, r3
 8006424:	f7fd bff6 	b.w	8004414 <_ZN15Screen1ViewBaseC1Ev+0xdac>
 8006428:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800642c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006430:	ee17 3a10 	vmov	r3, s14
 8006434:	1e59      	subs	r1, r3, #1
 8006436:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800643a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800643e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006446:	ee17 3a90 	vmov	r3, s15
 800644a:	440b      	add	r3, r1
 800644c:	4619      	mov	r1, r3
 800644e:	f7fd bffc 	b.w	800444a <_ZN15Screen1ViewBaseC1Ev+0xde2>
 8006452:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006456:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800645a:	ee17 3a10 	vmov	r3, s14
 800645e:	1e59      	subs	r1, r3, #1
 8006460:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006464:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006470:	ee17 3a90 	vmov	r3, s15
 8006474:	440b      	add	r3, r1
 8006476:	4619      	mov	r1, r3
 8006478:	f7fe b802 	b.w	8004480 <_ZN15Screen1ViewBaseC1Ev+0xe18>
 800647c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006480:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006484:	ee17 3a10 	vmov	r3, s14
 8006488:	1e59      	subs	r1, r3, #1
 800648a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800648e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800649a:	ee17 3a90 	vmov	r3, s15
 800649e:	440b      	add	r3, r1
 80064a0:	4619      	mov	r1, r3
 80064a2:	f7fe b808 	b.w	80044b6 <_ZN15Screen1ViewBaseC1Ev+0xe4e>
 80064a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064ae:	ee17 3a10 	vmov	r3, s14
 80064b2:	1e59      	subs	r1, r3, #1
 80064b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c4:	ee17 3a90 	vmov	r3, s15
 80064c8:	440b      	add	r3, r1
 80064ca:	4619      	mov	r1, r3
 80064cc:	f7fe b80e 	b.w	80044ec <_ZN15Screen1ViewBaseC1Ev+0xe84>
 80064d0:	08023cc8 	.word	0x08023cc8
 80064d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064d8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064dc:	ee17 3a10 	vmov	r3, s14
 80064e0:	1e59      	subs	r1, r3, #1
 80064e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064e6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064f2:	ee17 3a90 	vmov	r3, s15
 80064f6:	440b      	add	r3, r1
 80064f8:	4619      	mov	r1, r3
 80064fa:	f7fe b812 	b.w	8004522 <_ZN15Screen1ViewBaseC1Ev+0xeba>
 80064fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006502:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006506:	ee17 3a10 	vmov	r3, s14
 800650a:	1e59      	subs	r1, r3, #1
 800650c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006510:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800651c:	ee17 3a90 	vmov	r3, s15
 8006520:	440b      	add	r3, r1
 8006522:	4619      	mov	r1, r3
 8006524:	f7fe b818 	b.w	8004558 <_ZN15Screen1ViewBaseC1Ev+0xef0>
 8006528:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800652c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006530:	ee17 3a10 	vmov	r3, s14
 8006534:	1e59      	subs	r1, r3, #1
 8006536:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800653a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006546:	ee17 3a90 	vmov	r3, s15
 800654a:	440b      	add	r3, r1
 800654c:	4619      	mov	r1, r3
 800654e:	f7fe b81e 	b.w	800458e <_ZN15Screen1ViewBaseC1Ev+0xf26>
 8006552:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006556:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800655a:	ee17 3a10 	vmov	r3, s14
 800655e:	1e59      	subs	r1, r3, #1
 8006560:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006564:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006570:	ee17 3a90 	vmov	r3, s15
 8006574:	440b      	add	r3, r1
 8006576:	4619      	mov	r1, r3
 8006578:	f7fe b824 	b.w	80045c4 <_ZN15Screen1ViewBaseC1Ev+0xf5c>
 800657c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006580:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006584:	ee17 3a10 	vmov	r3, s14
 8006588:	1e59      	subs	r1, r3, #1
 800658a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800658e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800659a:	ee17 3a90 	vmov	r3, s15
 800659e:	440b      	add	r3, r1
 80065a0:	4619      	mov	r1, r3
 80065a2:	f7fe b82a 	b.w	80045fa <_ZN15Screen1ViewBaseC1Ev+0xf92>
 80065a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80065aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80065ae:	ee17 3a10 	vmov	r3, s14
 80065b2:	1e59      	subs	r1, r3, #1
 80065b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80065bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065c4:	ee17 3a90 	vmov	r3, s15
 80065c8:	440b      	add	r3, r1
 80065ca:	4619      	mov	r1, r3
 80065cc:	f7fe b830 	b.w	8004630 <_ZN15Screen1ViewBaseC1Ev+0xfc8>
 80065d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80065d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80065d8:	ee17 3a10 	vmov	r3, s14
 80065dc:	1e59      	subs	r1, r3, #1
 80065de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065e2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80065e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065ee:	ee17 3a90 	vmov	r3, s15
 80065f2:	440b      	add	r3, r1
 80065f4:	4619      	mov	r1, r3
 80065f6:	f7fe b836 	b.w	8004666 <_ZN15Screen1ViewBaseC1Ev+0xffe>
 80065fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80065fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006602:	ee17 3a10 	vmov	r3, s14
 8006606:	1e59      	subs	r1, r3, #1
 8006608:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800660c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006618:	ee17 3a90 	vmov	r3, s15
 800661c:	440b      	add	r3, r1
 800661e:	4619      	mov	r1, r3
 8006620:	f7fe b83c 	b.w	800469c <_ZN15Screen1ViewBaseC1Ev+0x1034>
 8006624:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006628:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800662c:	ee17 3a10 	vmov	r3, s14
 8006630:	1e59      	subs	r1, r3, #1
 8006632:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006636:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006642:	ee17 3a90 	vmov	r3, s15
 8006646:	440b      	add	r3, r1
 8006648:	4619      	mov	r1, r3
 800664a:	f7fe b842 	b.w	80046d2 <_ZN15Screen1ViewBaseC1Ev+0x106a>
 800664e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006652:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006656:	ee17 3a10 	vmov	r3, s14
 800665a:	1e59      	subs	r1, r3, #1
 800665c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006660:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006664:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800666c:	ee17 3a90 	vmov	r3, s15
 8006670:	440b      	add	r3, r1
 8006672:	4619      	mov	r1, r3
 8006674:	f7fe b848 	b.w	8004708 <_ZN15Screen1ViewBaseC1Ev+0x10a0>
 8006678:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800667c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006680:	ee17 3a10 	vmov	r3, s14
 8006684:	1e59      	subs	r1, r3, #1
 8006686:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800668a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800668e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006696:	ee17 3a90 	vmov	r3, s15
 800669a:	440b      	add	r3, r1
 800669c:	4619      	mov	r1, r3
 800669e:	f7fe b84e 	b.w	800473e <_ZN15Screen1ViewBaseC1Ev+0x10d6>
 80066a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80066aa:	ee17 3a10 	vmov	r3, s14
 80066ae:	1e59      	subs	r1, r3, #1
 80066b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066b4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80066b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066c0:	ee17 3a90 	vmov	r3, s15
 80066c4:	440b      	add	r3, r1
 80066c6:	4619      	mov	r1, r3
 80066c8:	f7fe b854 	b.w	8004774 <_ZN15Screen1ViewBaseC1Ev+0x110c>
 80066cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80066d4:	ee17 3a10 	vmov	r3, s14
 80066d8:	1e59      	subs	r1, r3, #1
 80066da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066de:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80066e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ea:	ee17 3a90 	vmov	r3, s15
 80066ee:	440b      	add	r3, r1
 80066f0:	4619      	mov	r1, r3
 80066f2:	f7fe b85a 	b.w	80047aa <_ZN15Screen1ViewBaseC1Ev+0x1142>
 80066f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80066fe:	ee17 3a10 	vmov	r3, s14
 8006702:	1e59      	subs	r1, r3, #1
 8006704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006708:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800670c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006714:	ee17 3a90 	vmov	r3, s15
 8006718:	440b      	add	r3, r1
 800671a:	4619      	mov	r1, r3
 800671c:	f7fe b860 	b.w	80047e0 <_ZN15Screen1ViewBaseC1Ev+0x1178>
 8006720:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006724:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006728:	ee17 3a10 	vmov	r3, s14
 800672c:	1e59      	subs	r1, r3, #1
 800672e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006732:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800673e:	ee17 3a90 	vmov	r3, s15
 8006742:	440b      	add	r3, r1
 8006744:	4619      	mov	r1, r3
 8006746:	f7fe b866 	b.w	8004816 <_ZN15Screen1ViewBaseC1Ev+0x11ae>
 800674a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800674e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006752:	ee17 3a10 	vmov	r3, s14
 8006756:	1e59      	subs	r1, r3, #1
 8006758:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800675c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006768:	ee17 3a90 	vmov	r3, s15
 800676c:	440b      	add	r3, r1
 800676e:	4619      	mov	r1, r3
 8006770:	f7fe b86c 	b.w	800484c <_ZN15Screen1ViewBaseC1Ev+0x11e4>
 8006774:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006778:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800677c:	ee17 3a10 	vmov	r3, s14
 8006780:	1e59      	subs	r1, r3, #1
 8006782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006786:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006792:	ee17 3a90 	vmov	r3, s15
 8006796:	440b      	add	r3, r1
 8006798:	4619      	mov	r1, r3
 800679a:	f7fe b872 	b.w	8004882 <_ZN15Screen1ViewBaseC1Ev+0x121a>
 800679e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067a6:	ee17 3a10 	vmov	r3, s14
 80067aa:	1e59      	subs	r1, r3, #1
 80067ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067b0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80067b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067bc:	ee17 3a90 	vmov	r3, s15
 80067c0:	440b      	add	r3, r1
 80067c2:	4619      	mov	r1, r3
 80067c4:	f7fe b878 	b.w	80048b8 <_ZN15Screen1ViewBaseC1Ev+0x1250>
 80067c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067d0:	ee17 3a10 	vmov	r3, s14
 80067d4:	1e59      	subs	r1, r3, #1
 80067d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067da:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80067de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067e6:	ee17 3a90 	vmov	r3, s15
 80067ea:	440b      	add	r3, r1
 80067ec:	4619      	mov	r1, r3
 80067ee:	f7fe b87e 	b.w	80048ee <_ZN15Screen1ViewBaseC1Ev+0x1286>
 80067f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067fa:	ee17 3a10 	vmov	r3, s14
 80067fe:	1e59      	subs	r1, r3, #1
 8006800:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006804:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006810:	ee17 3a90 	vmov	r3, s15
 8006814:	440b      	add	r3, r1
 8006816:	4619      	mov	r1, r3
 8006818:	f7fe b884 	b.w	8004924 <_ZN15Screen1ViewBaseC1Ev+0x12bc>
 800681c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006820:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006824:	ee17 3a10 	vmov	r3, s14
 8006828:	1e59      	subs	r1, r3, #1
 800682a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800682e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800683a:	ee17 3a90 	vmov	r3, s15
 800683e:	440b      	add	r3, r1
 8006840:	4619      	mov	r1, r3
 8006842:	f7fe b88a 	b.w	800495a <_ZN15Screen1ViewBaseC1Ev+0x12f2>
 8006846:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800684a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800684e:	ee17 3a10 	vmov	r3, s14
 8006852:	1e59      	subs	r1, r3, #1
 8006854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006858:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800685c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006864:	ee17 3a90 	vmov	r3, s15
 8006868:	440b      	add	r3, r1
 800686a:	4619      	mov	r1, r3
 800686c:	f7fe b890 	b.w	8004990 <_ZN15Screen1ViewBaseC1Ev+0x1328>
 8006870:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006874:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006878:	ee17 3a10 	vmov	r3, s14
 800687c:	1e59      	subs	r1, r3, #1
 800687e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006882:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800688e:	ee17 3a90 	vmov	r3, s15
 8006892:	440b      	add	r3, r1
 8006894:	4619      	mov	r1, r3
 8006896:	f7fe b896 	b.w	80049c6 <_ZN15Screen1ViewBaseC1Ev+0x135e>
 800689a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800689e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068a2:	ee17 3a10 	vmov	r3, s14
 80068a6:	1e59      	subs	r1, r3, #1
 80068a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80068b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068b8:	ee17 3a90 	vmov	r3, s15
 80068bc:	440b      	add	r3, r1
 80068be:	4619      	mov	r1, r3
 80068c0:	f7fe b89c 	b.w	80049fc <_ZN15Screen1ViewBaseC1Ev+0x1394>
 80068c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068cc:	ee17 3a10 	vmov	r3, s14
 80068d0:	1e59      	subs	r1, r3, #1
 80068d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068d6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80068da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068e2:	ee17 3a90 	vmov	r3, s15
 80068e6:	440b      	add	r3, r1
 80068e8:	4619      	mov	r1, r3
 80068ea:	f7fe b8a2 	b.w	8004a32 <_ZN15Screen1ViewBaseC1Ev+0x13ca>
 80068ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068f6:	ee17 3a10 	vmov	r3, s14
 80068fa:	1e59      	subs	r1, r3, #1
 80068fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006900:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006904:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800690c:	ee17 3a90 	vmov	r3, s15
 8006910:	440b      	add	r3, r1
 8006912:	4619      	mov	r1, r3
 8006914:	f7fe b8a8 	b.w	8004a68 <_ZN15Screen1ViewBaseC1Ev+0x1400>
 8006918:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800691c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006920:	ee17 3a10 	vmov	r3, s14
 8006924:	1e59      	subs	r1, r3, #1
 8006926:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800692a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800692e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006936:	ee17 3a90 	vmov	r3, s15
 800693a:	440b      	add	r3, r1
 800693c:	4619      	mov	r1, r3
 800693e:	f7fe b8ae 	b.w	8004a9e <_ZN15Screen1ViewBaseC1Ev+0x1436>
 8006942:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006946:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800694a:	ee17 3a10 	vmov	r3, s14
 800694e:	1e59      	subs	r1, r3, #1
 8006950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006954:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006960:	ee17 3a90 	vmov	r3, s15
 8006964:	440b      	add	r3, r1
 8006966:	4619      	mov	r1, r3
 8006968:	f7fe b8b4 	b.w	8004ad4 <_ZN15Screen1ViewBaseC1Ev+0x146c>
 800696c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006970:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006974:	ee17 3a10 	vmov	r3, s14
 8006978:	1e59      	subs	r1, r3, #1
 800697a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800697e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006986:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800698a:	ee17 3a90 	vmov	r3, s15
 800698e:	440b      	add	r3, r1
 8006990:	4619      	mov	r1, r3
 8006992:	f7fe b8ba 	b.w	8004b0a <_ZN15Screen1ViewBaseC1Ev+0x14a2>
 8006996:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800699a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800699e:	ee17 3a10 	vmov	r3, s14
 80069a2:	1e59      	subs	r1, r3, #1
 80069a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069a8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80069ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069b4:	ee17 3a90 	vmov	r3, s15
 80069b8:	440b      	add	r3, r1
 80069ba:	4619      	mov	r1, r3
 80069bc:	f7fe b8c0 	b.w	8004b40 <_ZN15Screen1ViewBaseC1Ev+0x14d8>
 80069c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069c4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069c8:	ee17 3a10 	vmov	r3, s14
 80069cc:	1e59      	subs	r1, r3, #1
 80069ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069d2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069de:	ee17 3a90 	vmov	r3, s15
 80069e2:	440b      	add	r3, r1
 80069e4:	4619      	mov	r1, r3
 80069e6:	f7fe b911 	b.w	8004c0c <_ZN15Screen1ViewBaseC1Ev+0x15a4>
 80069ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069ee:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069f2:	ee17 3a10 	vmov	r3, s14
 80069f6:	1e59      	subs	r1, r3, #1
 80069f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069fc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a08:	ee17 3a90 	vmov	r3, s15
 8006a0c:	440b      	add	r3, r1
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f7fe b917 	b.w	8004c42 <_ZN15Screen1ViewBaseC1Ev+0x15da>
 8006a14:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a18:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a1c:	ee17 3a10 	vmov	r3, s14
 8006a20:	1e59      	subs	r1, r3, #1
 8006a22:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a26:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a32:	ee17 3a90 	vmov	r3, s15
 8006a36:	440b      	add	r3, r1
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f7fe b91d 	b.w	8004c78 <_ZN15Screen1ViewBaseC1Ev+0x1610>
 8006a3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a46:	ee17 3a10 	vmov	r3, s14
 8006a4a:	1e59      	subs	r1, r3, #1
 8006a4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a5c:	ee17 3a90 	vmov	r3, s15
 8006a60:	440b      	add	r3, r1
 8006a62:	4619      	mov	r1, r3
 8006a64:	f7fe b923 	b.w	8004cae <_ZN15Screen1ViewBaseC1Ev+0x1646>
 8006a68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a70:	ee17 3a10 	vmov	r3, s14
 8006a74:	1e59      	subs	r1, r3, #1
 8006a76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a7a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a86:	ee17 3a90 	vmov	r3, s15
 8006a8a:	440b      	add	r3, r1
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	f7fe b929 	b.w	8004ce4 <_ZN15Screen1ViewBaseC1Ev+0x167c>
 8006a92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a9a:	ee17 3a10 	vmov	r3, s14
 8006a9e:	1e59      	subs	r1, r3, #1
 8006aa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006aa4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ab0:	ee17 3a90 	vmov	r3, s15
 8006ab4:	440b      	add	r3, r1
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f7fe b92f 	b.w	8004d1a <_ZN15Screen1ViewBaseC1Ev+0x16b2>
 8006abc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ac0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ac4:	ee17 3a10 	vmov	r3, s14
 8006ac8:	1e59      	subs	r1, r3, #1
 8006aca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ace:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ada:	ee17 3a90 	vmov	r3, s15
 8006ade:	440b      	add	r3, r1
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	f7fe b935 	b.w	8004d50 <_ZN15Screen1ViewBaseC1Ev+0x16e8>
 8006ae6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006aea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006aee:	ee17 3a10 	vmov	r3, s14
 8006af2:	1e59      	subs	r1, r3, #1
 8006af4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006af8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b04:	ee17 3a90 	vmov	r3, s15
 8006b08:	440b      	add	r3, r1
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f7fe b93b 	b.w	8004d86 <_ZN15Screen1ViewBaseC1Ev+0x171e>
 8006b10:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b14:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b18:	ee17 3a10 	vmov	r3, s14
 8006b1c:	1e59      	subs	r1, r3, #1
 8006b1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b22:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b2e:	ee17 3a90 	vmov	r3, s15
 8006b32:	440b      	add	r3, r1
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7fe b941 	b.w	8004dbc <_ZN15Screen1ViewBaseC1Ev+0x1754>
 8006b3a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b42:	ee17 3a10 	vmov	r3, s14
 8006b46:	1e59      	subs	r1, r3, #1
 8006b48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b4c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b58:	ee17 3a90 	vmov	r3, s15
 8006b5c:	440b      	add	r3, r1
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f7fe b947 	b.w	8004df2 <_ZN15Screen1ViewBaseC1Ev+0x178a>
 8006b64:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b6c:	ee17 3a10 	vmov	r3, s14
 8006b70:	1e59      	subs	r1, r3, #1
 8006b72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b76:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b82:	ee17 3a90 	vmov	r3, s15
 8006b86:	440b      	add	r3, r1
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7fe b94d 	b.w	8004e28 <_ZN15Screen1ViewBaseC1Ev+0x17c0>
 8006b8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b92:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b96:	ee17 3a10 	vmov	r3, s14
 8006b9a:	1e59      	subs	r1, r3, #1
 8006b9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ba0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bac:	ee17 3a90 	vmov	r3, s15
 8006bb0:	440b      	add	r3, r1
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	f7fe b953 	b.w	8004e5e <_ZN15Screen1ViewBaseC1Ev+0x17f6>
 8006bb8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bbc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bc0:	ee17 3a10 	vmov	r3, s14
 8006bc4:	1e59      	subs	r1, r3, #1
 8006bc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bca:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bd6:	ee17 3a90 	vmov	r3, s15
 8006bda:	440b      	add	r3, r1
 8006bdc:	4619      	mov	r1, r3
 8006bde:	f7fe b959 	b.w	8004e94 <_ZN15Screen1ViewBaseC1Ev+0x182c>
 8006be2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006be6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bea:	ee17 3a10 	vmov	r3, s14
 8006bee:	1e59      	subs	r1, r3, #1
 8006bf0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bf4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c00:	ee17 3a90 	vmov	r3, s15
 8006c04:	440b      	add	r3, r1
 8006c06:	4619      	mov	r1, r3
 8006c08:	f7fe b95f 	b.w	8004eca <_ZN15Screen1ViewBaseC1Ev+0x1862>
 8006c0c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c10:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c14:	ee17 3a10 	vmov	r3, s14
 8006c18:	1e59      	subs	r1, r3, #1
 8006c1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c1e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c2a:	ee17 3a90 	vmov	r3, s15
 8006c2e:	440b      	add	r3, r1
 8006c30:	4619      	mov	r1, r3
 8006c32:	f7fe b965 	b.w	8004f00 <_ZN15Screen1ViewBaseC1Ev+0x1898>
 8006c36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c3a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c3e:	ee17 3a10 	vmov	r3, s14
 8006c42:	1e59      	subs	r1, r3, #1
 8006c44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c48:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c54:	ee17 3a90 	vmov	r3, s15
 8006c58:	440b      	add	r3, r1
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f7fe b96b 	b.w	8004f36 <_ZN15Screen1ViewBaseC1Ev+0x18ce>
 8006c60:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c64:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c68:	ee17 3a10 	vmov	r3, s14
 8006c6c:	1e59      	subs	r1, r3, #1
 8006c6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c72:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c7e:	ee17 3a90 	vmov	r3, s15
 8006c82:	440b      	add	r3, r1
 8006c84:	4619      	mov	r1, r3
 8006c86:	f7fe b971 	b.w	8004f6c <_ZN15Screen1ViewBaseC1Ev+0x1904>
 8006c8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c8e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c92:	ee17 3a10 	vmov	r3, s14
 8006c96:	1e59      	subs	r1, r3, #1
 8006c98:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c9c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca8:	ee17 3a90 	vmov	r3, s15
 8006cac:	440b      	add	r3, r1
 8006cae:	4619      	mov	r1, r3
 8006cb0:	f7fe b977 	b.w	8004fa2 <_ZN15Screen1ViewBaseC1Ev+0x193a>
 8006cb4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cb8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cbc:	ee17 3a10 	vmov	r3, s14
 8006cc0:	1e59      	subs	r1, r3, #1
 8006cc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cc6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cd2:	ee17 3a90 	vmov	r3, s15
 8006cd6:	440b      	add	r3, r1
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f7fe b97d 	b.w	8004fd8 <_ZN15Screen1ViewBaseC1Ev+0x1970>
 8006cde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ce2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ce6:	ee17 3a10 	vmov	r3, s14
 8006cea:	1e59      	subs	r1, r3, #1
 8006cec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cf0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cfc:	ee17 3a90 	vmov	r3, s15
 8006d00:	440b      	add	r3, r1
 8006d02:	4619      	mov	r1, r3
 8006d04:	f7fe b983 	b.w	800500e <_ZN15Screen1ViewBaseC1Ev+0x19a6>
 8006d08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d0c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d10:	ee17 3a10 	vmov	r3, s14
 8006d14:	1e59      	subs	r1, r3, #1
 8006d16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d1a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d26:	ee17 3a90 	vmov	r3, s15
 8006d2a:	440b      	add	r3, r1
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	f7fe b989 	b.w	8005044 <_ZN15Screen1ViewBaseC1Ev+0x19dc>
 8006d32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d3a:	ee17 3a10 	vmov	r3, s14
 8006d3e:	1e59      	subs	r1, r3, #1
 8006d40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d44:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d50:	ee17 3a90 	vmov	r3, s15
 8006d54:	440b      	add	r3, r1
 8006d56:	4619      	mov	r1, r3
 8006d58:	f7fe b98f 	b.w	800507a <_ZN15Screen1ViewBaseC1Ev+0x1a12>
 8006d5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d60:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d64:	ee17 3a10 	vmov	r3, s14
 8006d68:	1e59      	subs	r1, r3, #1
 8006d6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d6e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d7a:	ee17 3a90 	vmov	r3, s15
 8006d7e:	440b      	add	r3, r1
 8006d80:	4619      	mov	r1, r3
 8006d82:	f7fe b995 	b.w	80050b0 <_ZN15Screen1ViewBaseC1Ev+0x1a48>
 8006d86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d8a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d8e:	ee17 3a10 	vmov	r3, s14
 8006d92:	1e59      	subs	r1, r3, #1
 8006d94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d98:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da4:	ee17 3a90 	vmov	r3, s15
 8006da8:	440b      	add	r3, r1
 8006daa:	4619      	mov	r1, r3
 8006dac:	f7fe b99b 	b.w	80050e6 <_ZN15Screen1ViewBaseC1Ev+0x1a7e>
 8006db0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006db4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006db8:	ee17 3a10 	vmov	r3, s14
 8006dbc:	1e59      	subs	r1, r3, #1
 8006dbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dc2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dce:	ee17 3a90 	vmov	r3, s15
 8006dd2:	440b      	add	r3, r1
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f7fe b9a1 	b.w	800511c <_ZN15Screen1ViewBaseC1Ev+0x1ab4>
 8006dda:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dde:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006de2:	ee17 3a10 	vmov	r3, s14
 8006de6:	1e59      	subs	r1, r3, #1
 8006de8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dec:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006df8:	ee17 3a90 	vmov	r3, s15
 8006dfc:	440b      	add	r3, r1
 8006dfe:	4619      	mov	r1, r3
 8006e00:	f7fe b9a7 	b.w	8005152 <_ZN15Screen1ViewBaseC1Ev+0x1aea>
 8006e04:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e08:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e0c:	ee17 3a10 	vmov	r3, s14
 8006e10:	1e59      	subs	r1, r3, #1
 8006e12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e16:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e22:	ee17 3a90 	vmov	r3, s15
 8006e26:	440b      	add	r3, r1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	f7fe b9ad 	b.w	8005188 <_ZN15Screen1ViewBaseC1Ev+0x1b20>
 8006e2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e32:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e36:	ee17 3a10 	vmov	r3, s14
 8006e3a:	1e59      	subs	r1, r3, #1
 8006e3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e40:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e4c:	ee17 3a90 	vmov	r3, s15
 8006e50:	440b      	add	r3, r1
 8006e52:	4619      	mov	r1, r3
 8006e54:	f7fe b9b3 	b.w	80051be <_ZN15Screen1ViewBaseC1Ev+0x1b56>
 8006e58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e5c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e60:	ee17 3a10 	vmov	r3, s14
 8006e64:	1e59      	subs	r1, r3, #1
 8006e66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e6a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e76:	ee17 3a90 	vmov	r3, s15
 8006e7a:	440b      	add	r3, r1
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	f7fe b9b9 	b.w	80051f4 <_ZN15Screen1ViewBaseC1Ev+0x1b8c>
 8006e82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e86:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e8a:	ee17 3a10 	vmov	r3, s14
 8006e8e:	1e59      	subs	r1, r3, #1
 8006e90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e94:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ea0:	ee17 3a90 	vmov	r3, s15
 8006ea4:	440b      	add	r3, r1
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f7fe b9bf 	b.w	800522a <_ZN15Screen1ViewBaseC1Ev+0x1bc2>
 8006eac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eb0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006eb4:	ee17 3a10 	vmov	r3, s14
 8006eb8:	1e59      	subs	r1, r3, #1
 8006eba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ebe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eca:	ee17 3a90 	vmov	r3, s15
 8006ece:	440b      	add	r3, r1
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f7fe b9c5 	b.w	8005260 <_ZN15Screen1ViewBaseC1Ev+0x1bf8>
 8006ed6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006eda:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ede:	ee17 3a10 	vmov	r3, s14
 8006ee2:	1e59      	subs	r1, r3, #1
 8006ee4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ee8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef4:	ee17 3a90 	vmov	r3, s15
 8006ef8:	440b      	add	r3, r1
 8006efa:	4619      	mov	r1, r3
 8006efc:	f7fe b9cb 	b.w	8005296 <_ZN15Screen1ViewBaseC1Ev+0x1c2e>
 8006f00:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f04:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f08:	ee17 3a10 	vmov	r3, s14
 8006f0c:	1e59      	subs	r1, r3, #1
 8006f0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f12:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f1e:	ee17 3a90 	vmov	r3, s15
 8006f22:	440b      	add	r3, r1
 8006f24:	4619      	mov	r1, r3
 8006f26:	f7fe b9d1 	b.w	80052cc <_ZN15Screen1ViewBaseC1Ev+0x1c64>
 8006f2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f32:	ee17 3a10 	vmov	r3, s14
 8006f36:	1e59      	subs	r1, r3, #1
 8006f38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f3c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f48:	ee17 3a90 	vmov	r3, s15
 8006f4c:	440b      	add	r3, r1
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f7fe b9d7 	b.w	8005302 <_ZN15Screen1ViewBaseC1Ev+0x1c9a>
 8006f54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f5c:	ee17 3a10 	vmov	r3, s14
 8006f60:	1e59      	subs	r1, r3, #1
 8006f62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f66:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f72:	ee17 3a90 	vmov	r3, s15
 8006f76:	440b      	add	r3, r1
 8006f78:	4619      	mov	r1, r3
 8006f7a:	f7fe b9dd 	b.w	8005338 <_ZN15Screen1ViewBaseC1Ev+0x1cd0>
 8006f7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f82:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f86:	ee17 3a10 	vmov	r3, s14
 8006f8a:	1e59      	subs	r1, r3, #1
 8006f8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f90:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f9c:	ee17 3a90 	vmov	r3, s15
 8006fa0:	440b      	add	r3, r1
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f7fe b9e3 	b.w	800536e <_ZN15Screen1ViewBaseC1Ev+0x1d06>
 8006fa8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fb0:	ee17 3a10 	vmov	r3, s14
 8006fb4:	1e59      	subs	r1, r3, #1
 8006fb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc6:	ee17 3a90 	vmov	r3, s15
 8006fca:	440b      	add	r3, r1
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f7fe b9e9 	b.w	80053a4 <_ZN15Screen1ViewBaseC1Ev+0x1d3c>
 8006fd2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fd6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fda:	ee17 3a10 	vmov	r3, s14
 8006fde:	1e59      	subs	r1, r3, #1
 8006fe0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fe4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ff0:	ee17 3a90 	vmov	r3, s15
 8006ff4:	440b      	add	r3, r1
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	f7fe ba2a 	b.w	8005450 <_ZN15Screen1ViewBaseC1Ev+0x1de8>
 8006ffc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007000:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007004:	ee17 3a10 	vmov	r3, s14
 8007008:	1e59      	subs	r1, r3, #1
 800700a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800700e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800701a:	ee17 3a90 	vmov	r3, s15
 800701e:	440b      	add	r3, r1
 8007020:	4619      	mov	r1, r3
 8007022:	f7fe ba30 	b.w	8005486 <_ZN15Screen1ViewBaseC1Ev+0x1e1e>
 8007026:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800702a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800702e:	ee17 3a10 	vmov	r3, s14
 8007032:	1e59      	subs	r1, r3, #1
 8007034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007038:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800703c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007044:	ee17 3a90 	vmov	r3, s15
 8007048:	440b      	add	r3, r1
 800704a:	4619      	mov	r1, r3
 800704c:	f7fe ba36 	b.w	80054bc <_ZN15Screen1ViewBaseC1Ev+0x1e54>
 8007050:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007054:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007058:	ee17 3a10 	vmov	r3, s14
 800705c:	1e59      	subs	r1, r3, #1
 800705e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007062:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800706e:	ee17 3a90 	vmov	r3, s15
 8007072:	440b      	add	r3, r1
 8007074:	4619      	mov	r1, r3
 8007076:	f7fe ba3c 	b.w	80054f2 <_ZN15Screen1ViewBaseC1Ev+0x1e8a>
 800707a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800707e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007082:	ee17 3a10 	vmov	r3, s14
 8007086:	1e59      	subs	r1, r3, #1
 8007088:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800708c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007098:	ee17 3a90 	vmov	r3, s15
 800709c:	440b      	add	r3, r1
 800709e:	4619      	mov	r1, r3
 80070a0:	f7fe ba42 	b.w	8005528 <_ZN15Screen1ViewBaseC1Ev+0x1ec0>
 80070a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070ac:	ee17 3a10 	vmov	r3, s14
 80070b0:	1e59      	subs	r1, r3, #1
 80070b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80070ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070c2:	ee17 3a90 	vmov	r3, s15
 80070c6:	440b      	add	r3, r1
 80070c8:	4619      	mov	r1, r3
 80070ca:	f7fe ba48 	b.w	800555e <_ZN15Screen1ViewBaseC1Ev+0x1ef6>
 80070ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070d6:	ee17 3a10 	vmov	r3, s14
 80070da:	1e59      	subs	r1, r3, #1
 80070dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80070e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ec:	ee17 3a90 	vmov	r3, s15
 80070f0:	440b      	add	r3, r1
 80070f2:	4619      	mov	r1, r3
 80070f4:	f7fe ba4e 	b.w	8005594 <_ZN15Screen1ViewBaseC1Ev+0x1f2c>
 80070f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007100:	ee17 3a10 	vmov	r3, s14
 8007104:	1e59      	subs	r1, r3, #1
 8007106:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800710a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800710e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007116:	ee17 3a90 	vmov	r3, s15
 800711a:	440b      	add	r3, r1
 800711c:	4619      	mov	r1, r3
 800711e:	f7fe ba54 	b.w	80055ca <_ZN15Screen1ViewBaseC1Ev+0x1f62>
 8007122:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007126:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800712a:	ee17 3a10 	vmov	r3, s14
 800712e:	1e59      	subs	r1, r3, #1
 8007130:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007134:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007140:	ee17 3a90 	vmov	r3, s15
 8007144:	440b      	add	r3, r1
 8007146:	4619      	mov	r1, r3
 8007148:	f7fe ba5a 	b.w	8005600 <_ZN15Screen1ViewBaseC1Ev+0x1f98>
 800714c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007150:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007154:	ee17 3a10 	vmov	r3, s14
 8007158:	1e59      	subs	r1, r3, #1
 800715a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800715e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800716a:	ee17 3a90 	vmov	r3, s15
 800716e:	440b      	add	r3, r1
 8007170:	4619      	mov	r1, r3
 8007172:	f7fe ba60 	b.w	8005636 <_ZN15Screen1ViewBaseC1Ev+0x1fce>
 8007176:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800717a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800717e:	ee17 3a10 	vmov	r3, s14
 8007182:	1e59      	subs	r1, r3, #1
 8007184:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007188:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800718c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007194:	ee17 3a90 	vmov	r3, s15
 8007198:	440b      	add	r3, r1
 800719a:	4619      	mov	r1, r3
 800719c:	f7fe ba66 	b.w	800566c <_ZN15Screen1ViewBaseC1Ev+0x2004>

080071a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071a0:	4770      	bx	lr
	...

080071a4 <_Z23getFont_verdana_10_4bppv>:
{
 80071a4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071a6:	4d16      	ldr	r5, [pc, #88]	; (8007200 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80071a8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071aa:	782c      	ldrb	r4, [r5, #0]
 80071ac:	f3bf 8f5b 	dmb	ish
 80071b0:	f014 0401 	ands.w	r4, r4, #1
 80071b4:	d120      	bne.n	80071f8 <_Z23getFont_verdana_10_4bppv+0x54>
 80071b6:	4628      	mov	r0, r5
 80071b8:	f01a ff55 	bl	8022066 <__cxa_guard_acquire>
 80071bc:	b1e0      	cbz	r0, 80071f8 <_Z23getFont_verdana_10_4bppv+0x54>
 80071be:	233f      	movs	r3, #63	; 0x3f
 80071c0:	2201      	movs	r2, #1
 80071c2:	4910      	ldr	r1, [pc, #64]	; (8007204 <_Z23getFont_verdana_10_4bppv+0x60>)
 80071c4:	9309      	str	r3, [sp, #36]	; 0x24
 80071c6:	4b10      	ldr	r3, [pc, #64]	; (8007208 <_Z23getFont_verdana_10_4bppv+0x64>)
 80071c8:	4810      	ldr	r0, [pc, #64]	; (800720c <_Z23getFont_verdana_10_4bppv+0x68>)
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80071ce:	940a      	str	r4, [sp, #40]	; 0x28
 80071d0:	9405      	str	r4, [sp, #20]
 80071d2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80071d6:	2304      	movs	r3, #4
 80071d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80071dc:	230a      	movs	r3, #10
 80071de:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80071e8:	f7fb fc4e 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80071ec:	4809      	ldr	r0, [pc, #36]	; (8007214 <_Z23getFont_verdana_10_4bppv+0x70>)
 80071ee:	f01b f865 	bl	80222bc <atexit>
 80071f2:	4628      	mov	r0, r5
 80071f4:	f01a ff43 	bl	802207e <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80071f8:	4804      	ldr	r0, [pc, #16]	; (800720c <_Z23getFont_verdana_10_4bppv+0x68>)
 80071fa:	b00f      	add	sp, #60	; 0x3c
 80071fc:	bd30      	pop	{r4, r5, pc}
 80071fe:	bf00      	nop
 8007200:	240057f4 	.word	0x240057f4
 8007204:	08026470 	.word	0x08026470
 8007208:	080266c0 	.word	0x080266c0
 800720c:	240057f8 	.word	0x240057f8
 8007210:	08026724 	.word	0x08026724
 8007214:	080071a1 	.word	0x080071a1

08007218 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8007218:	4770      	bx	lr
	...

0800721c <_Z23getFont_verdana_16_4bppv>:
{
 800721c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 800721e:	4d17      	ldr	r5, [pc, #92]	; (800727c <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8007220:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8007222:	782c      	ldrb	r4, [r5, #0]
 8007224:	f3bf 8f5b 	dmb	ish
 8007228:	f014 0401 	ands.w	r4, r4, #1
 800722c:	d122      	bne.n	8007274 <_Z23getFont_verdana_16_4bppv+0x58>
 800722e:	4628      	mov	r0, r5
 8007230:	f01a ff19 	bl	8022066 <__cxa_guard_acquire>
 8007234:	b1f0      	cbz	r0, 8007274 <_Z23getFont_verdana_16_4bppv+0x58>
 8007236:	233f      	movs	r3, #63	; 0x3f
 8007238:	2226      	movs	r2, #38	; 0x26
 800723a:	4911      	ldr	r1, [pc, #68]	; (8007280 <_Z23getFont_verdana_16_4bppv+0x64>)
 800723c:	9309      	str	r3, [sp, #36]	; 0x24
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <_Z23getFont_verdana_16_4bppv+0x68>)
 8007240:	4811      	ldr	r0, [pc, #68]	; (8007288 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8007242:	9308      	str	r3, [sp, #32]
 8007244:	4b11      	ldr	r3, [pc, #68]	; (800728c <_Z23getFont_verdana_16_4bppv+0x70>)
 8007246:	940a      	str	r4, [sp, #40]	; 0x28
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	2301      	movs	r3, #1
 800724c:	9401      	str	r4, [sp, #4]
 800724e:	9304      	str	r3, [sp, #16]
 8007250:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007254:	2304      	movs	r3, #4
 8007256:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800725a:	2310      	movs	r3, #16
 800725c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	2313      	movs	r3, #19
 8007264:	f7fb fc10 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007268:	4809      	ldr	r0, [pc, #36]	; (8007290 <_Z23getFont_verdana_16_4bppv+0x74>)
 800726a:	f01b f827 	bl	80222bc <atexit>
 800726e:	4628      	mov	r0, r5
 8007270:	f01a ff05 	bl	802207e <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8007276:	b00f      	add	sp, #60	; 0x3c
 8007278:	bd30      	pop	{r4, r5, pc}
 800727a:	bf00      	nop
 800727c:	24005824 	.word	0x24005824
 8007280:	08026480 	.word	0x08026480
 8007284:	080266c4 	.word	0x080266c4
 8007288:	24005828 	.word	0x24005828
 800728c:	08026728 	.word	0x08026728
 8007290:	08007219 	.word	0x08007219

08007294 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8007294:	4770      	bx	lr
	...

08007298 <_Z23getFont_verdana_20_4bppv>:
{
 8007298:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800729a:	4d16      	ldr	r5, [pc, #88]	; (80072f4 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 800729c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800729e:	782c      	ldrb	r4, [r5, #0]
 80072a0:	f3bf 8f5b 	dmb	ish
 80072a4:	f014 0401 	ands.w	r4, r4, #1
 80072a8:	d120      	bne.n	80072ec <_Z23getFont_verdana_20_4bppv+0x54>
 80072aa:	4628      	mov	r0, r5
 80072ac:	f01a fedb 	bl	8022066 <__cxa_guard_acquire>
 80072b0:	b1e0      	cbz	r0, 80072ec <_Z23getFont_verdana_20_4bppv+0x54>
 80072b2:	233f      	movs	r3, #63	; 0x3f
 80072b4:	2201      	movs	r2, #1
 80072b6:	4910      	ldr	r1, [pc, #64]	; (80072f8 <_Z23getFont_verdana_20_4bppv+0x60>)
 80072b8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <_Z23getFont_verdana_20_4bppv+0x64>)
 80072bc:	4810      	ldr	r0, [pc, #64]	; (8007300 <_Z23getFont_verdana_20_4bppv+0x68>)
 80072be:	9308      	str	r3, [sp, #32]
 80072c0:	4b10      	ldr	r3, [pc, #64]	; (8007304 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80072c2:	940a      	str	r4, [sp, #40]	; 0x28
 80072c4:	9405      	str	r4, [sp, #20]
 80072c6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80072ca:	2304      	movs	r3, #4
 80072cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80072d0:	2314      	movs	r3, #20
 80072d2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80072dc:	f7fb fbd4 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072e0:	4809      	ldr	r0, [pc, #36]	; (8007308 <_Z23getFont_verdana_20_4bppv+0x70>)
 80072e2:	f01a ffeb 	bl	80222bc <atexit>
 80072e6:	4628      	mov	r0, r5
 80072e8:	f01a fec9 	bl	802207e <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80072ec:	4804      	ldr	r0, [pc, #16]	; (8007300 <_Z23getFont_verdana_20_4bppv+0x68>)
 80072ee:	b00f      	add	sp, #60	; 0x3c
 80072f0:	bd30      	pop	{r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	24005854 	.word	0x24005854
 80072f8:	08026694 	.word	0x08026694
 80072fc:	0802671c 	.word	0x0802671c
 8007300:	24005858 	.word	0x24005858
 8007304:	0802672c 	.word	0x0802672c
 8007308:	08007295 	.word	0x08007295

0800730c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800730c:	4770      	bx	lr
	...

08007310 <_Z23getFont_verdana_40_4bppv>:
{
 8007310:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007312:	4d16      	ldr	r5, [pc, #88]	; (800736c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8007314:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007316:	782c      	ldrb	r4, [r5, #0]
 8007318:	f3bf 8f5b 	dmb	ish
 800731c:	f014 0401 	ands.w	r4, r4, #1
 8007320:	d121      	bne.n	8007366 <_Z23getFont_verdana_40_4bppv+0x56>
 8007322:	4628      	mov	r0, r5
 8007324:	f01a fe9f 	bl	8022066 <__cxa_guard_acquire>
 8007328:	b1e8      	cbz	r0, 8007366 <_Z23getFont_verdana_40_4bppv+0x56>
 800732a:	233f      	movs	r3, #63	; 0x3f
 800732c:	2201      	movs	r2, #1
 800732e:	4910      	ldr	r1, [pc, #64]	; (8007370 <_Z23getFont_verdana_40_4bppv+0x60>)
 8007330:	9309      	str	r3, [sp, #36]	; 0x24
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <_Z23getFont_verdana_40_4bppv+0x64>)
 8007334:	4810      	ldr	r0, [pc, #64]	; (8007378 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007336:	9308      	str	r3, [sp, #32]
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800733a:	940a      	str	r4, [sp, #40]	; 0x28
 800733c:	9405      	str	r4, [sp, #20]
 800733e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8007342:	2304      	movs	r3, #4
 8007344:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007348:	2328      	movs	r3, #40	; 0x28
 800734a:	2202      	movs	r2, #2
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007352:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007356:	f7fb fb97 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800735a:	4809      	ldr	r0, [pc, #36]	; (8007380 <_Z23getFont_verdana_40_4bppv+0x70>)
 800735c:	f01a ffae 	bl	80222bc <atexit>
 8007360:	4628      	mov	r0, r5
 8007362:	f01a fe8c 	bl	802207e <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8007366:	4804      	ldr	r0, [pc, #16]	; (8007378 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007368:	b00f      	add	sp, #60	; 0x3c
 800736a:	bd30      	pop	{r4, r5, pc}
 800736c:	24005884 	.word	0x24005884
 8007370:	080266a4 	.word	0x080266a4
 8007374:	08026720 	.word	0x08026720
 8007378:	24005888 	.word	0x24005888
 800737c:	08026730 	.word	0x08026730
 8007380:	0800730d 	.word	0x0800730d

08007384 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8007384:	2000      	movs	r0, #0
 8007386:	4770      	bx	lr

08007388 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8007388:	2000      	movs	r0, #0
 800738a:	4770      	bx	lr

0800738c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800738c:	b40e      	push	{r1, r2, r3}
 800738e:	b503      	push	{r0, r1, lr}
 8007390:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8007392:	2100      	movs	r1, #0
{
 8007394:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8007398:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800739a:	f00f ffd5 	bl	8017348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800739e:	b002      	add	sp, #8
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr

080073a8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80073a8:	b40c      	push	{r2, r3}
 80073aa:	b507      	push	{r0, r1, r2, lr}
 80073ac:	ab04      	add	r3, sp, #16
 80073ae:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80073b2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80073b4:	f00f ffc8 	bl	8017348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80073b8:	b003      	add	sp, #12
 80073ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80073be:	b002      	add	sp, #8
 80073c0:	4770      	bx	lr
	...

080073c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80073c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80073c6:	b510      	push	{r4, lr}
 80073c8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80073ca:	b373      	cbz	r3, 800742a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80073cc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80073ce:	b92b      	cbnz	r3, 80073dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80073d0:	4b18      	ldr	r3, [pc, #96]	; (8007434 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80073d2:	21c5      	movs	r1, #197	; 0xc5
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80073d6:	4819      	ldr	r0, [pc, #100]	; (800743c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80073d8:	f01a ff52 	bl	8022280 <__assert_func>
            return buffer[pos];
 80073dc:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80073de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80073e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80073e4:	b30b      	cbz	r3, 800742a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80073e6:	f011 fb27 	bl	8018a38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80073ea:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d803      	bhi.n	80073f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 80073f0:	4b13      	ldr	r3, [pc, #76]	; (8007440 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80073f2:	21cb      	movs	r1, #203	; 0xcb
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80073f6:	e7ee      	b.n	80073d6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80073f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80073fa:	f640 103f 	movw	r0, #2367	; 0x93f
 80073fe:	1c53      	adds	r3, r2, #1
 8007400:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8007402:	2b09      	cmp	r3, #9
 8007404:	4619      	mov	r1, r3
 8007406:	bf88      	it	hi
 8007408:	f1a3 010a 	subhi.w	r1, r3, #10
 800740c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007410:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8007412:	4281      	cmp	r1, r0
 8007414:	d109      	bne.n	800742a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8007416:	2b0a      	cmp	r3, #10
 8007418:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800741c:	bf28      	it	cs
 800741e:	2300      	movcs	r3, #0
            return buffer[pos];
 8007420:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8007422:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007426:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8007428:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800742a:	4620      	mov	r0, r4
}
 800742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8007430:	f011 ba04 	b.w	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007434:	080247b0 	.word	0x080247b0
 8007438:	080247b9 	.word	0x080247b9
 800743c:	08024864 	.word	0x08024864
 8007440:	080248bc 	.word	0x080248bc
 8007444:	080248ca 	.word	0x080248ca

08007448 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8007448:	f011 b9c1 	b.w	80187ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800744c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800744c:	b510      	push	{r4, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	ac02      	add	r4, sp, #8
 8007452:	e884 0006 	stmia.w	r4, {r1, r2}
 8007456:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8007458:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800745a:	4621      	mov	r1, r4
    va_start(pArg, format);
 800745c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	9b08      	ldr	r3, [sp, #32]
 8007466:	f00e fc59 	bl	8015d1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800746a:	b006      	add	sp, #24
 800746c:	bd10      	pop	{r4, pc}
	...

08007470 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007470:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8007472:	bb18      	cbnz	r0, 80074bc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8007474:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8007476:	4813      	ldr	r0, [pc, #76]	; (80074c4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4913      	ldr	r1, [pc, #76]	; (80074c8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800747c:	b1b3      	cbz	r3, 80074ac <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800747e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007480:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007482:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007484:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007486:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	441a      	add	r2, r3
 800748c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800748e:	4b0f      	ldr	r3, [pc, #60]	; (80074cc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8007490:	2200      	movs	r2, #0
 8007492:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8007494:	f000 f838 	bl	8007508 <_ZN17TypedTextDatabase8getFontsEv>
 8007498:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800749a:	f000 f833 	bl	8007504 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80074a0:	601c      	str	r4, [r3, #0]
        fonts = f;
 80074a2:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80074a4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80074a6:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80074a8:	8018      	strh	r0, [r3, #0]
    }
}
 80074aa:	e007      	b.n	80074bc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80074ae:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80074b0:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80074b2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80074b6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	d1e8      	bne.n	800748e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	240058b4 	.word	0x240058b4
 80074c4:	240058b8 	.word	0x240058b8
 80074c8:	240058bc 	.word	0x240058bc
 80074cc:	240058c0 	.word	0x240058c0
 80074d0:	2400f298 	.word	0x2400f298
 80074d4:	2400f2a0 	.word	0x2400f2a0
 80074d8:	2400f29c 	.word	0x2400f29c
 80074dc:	9017705c 	.word	0x9017705c
 80074e0:	90177000 	.word	0x90177000
 80074e4:	90177148 	.word	0x90177148

080074e8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80074e8:	4b04      	ldr	r3, [pc, #16]	; (80074fc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80074f0:	4b03      	ldr	r3, [pc, #12]	; (8007500 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80074f2:	681b      	ldr	r3, [r3, #0]
}
 80074f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	240058bc 	.word	0x240058bc
 8007500:	240058b8 	.word	0x240058b8

08007504 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8007504:	2017      	movs	r0, #23
 8007506:	4770      	bx	lr

08007508 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8007508:	4800      	ldr	r0, [pc, #0]	; (800750c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800750a:	4770      	bx	lr
 800750c:	240058c4 	.word	0x240058c4

08007510 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007510:	b510      	push	{r4, lr}
};
 8007512:	4c07      	ldr	r4, [pc, #28]	; (8007530 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 8007514:	f7ff fe82 	bl	800721c <_Z23getFont_verdana_16_4bppv>
};
 8007518:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800751a:	f7ff fef9 	bl	8007310 <_Z23getFont_verdana_40_4bppv>
};
 800751e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8007520:	f7ff fe40 	bl	80071a4 <_Z23getFont_verdana_10_4bppv>
};
 8007524:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8007526:	f7ff feb7 	bl	8007298 <_Z23getFont_verdana_20_4bppv>
};
 800752a:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 800752c:	bd10      	pop	{r4, pc}
 800752e:	bf00      	nop
 8007530:	240058c4 	.word	0x240058c4

08007534 <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8007534:	b082      	sub	sp, #8
 8007536:	ab02      	add	r3, sp, #8
 8007538:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 800753c:	b002      	add	sp, #8
 800753e:	4770      	bx	lr

08007540 <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 8007540:	4770      	bx	lr

08007542 <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 8007542:	4770      	bx	lr

08007544 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8007544:	4770      	bx	lr

08007546 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 8007546:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8007548:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 800754a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 800754c:	68c4      	ldr	r4, [r0, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	1066      	asrs	r6, r4, #1
 8007552:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8007556:	07e4      	lsls	r4, r4, #31
 8007558:	bf44      	itt	mi
 800755a:	59ac      	ldrmi	r4, [r5, r6]
 800755c:	58e3      	ldrmi	r3, [r4, r3]
    }
 800755e:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8007560:	4718      	bx	r3

08007562 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007562:	6843      	ldr	r3, [r0, #4]
 8007564:	b12b      	cbz	r3, 8007572 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 8007566:	6883      	ldr	r3, [r0, #8]
 8007568:	b92b      	cbnz	r3, 8007576 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 800756a:	68c0      	ldr	r0, [r0, #12]
 800756c:	f000 0001 	and.w	r0, r0, #1
 8007570:	4770      	bx	lr
 8007572:	4618      	mov	r0, r3
 8007574:	4770      	bx	lr
 8007576:	2001      	movs	r0, #1
    }
 8007578:	4770      	bx	lr

0800757a <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800757a:	b510      	push	{r4, lr}
 800757c:	4604      	mov	r4, r0
 800757e:	2110      	movs	r1, #16
 8007580:	f01a fd6f 	bl	8022062 <_ZdlPvj>
 8007584:	4620      	mov	r0, r4
 8007586:	bd10      	pop	{r4, pc}

08007588 <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 8007588:	b510      	push	{r4, lr}
 800758a:	4604      	mov	r4, r0
}
 800758c:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8007590:	f01a fd67 	bl	8022062 <_ZdlPvj>
 8007594:	4620      	mov	r0, r4
 8007596:	bd10      	pop	{r4, pc}

08007598 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 8007598:	b410      	push	{r4}
    if (&src == &graph1)
 800759a:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800759e:	428c      	cmp	r4, r1
 80075a0:	d106      	bne.n	80075b0 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 80075a2:	6803      	ldr	r3, [r0, #0]
    }
}
 80075a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 80075a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ac:	ca06      	ldmia	r2, {r1, r2}
 80075ae:	4718      	bx	r3
}
 80075b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b4:	4770      	bx	lr
	...

080075b8 <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	f44f 7380 	mov.w	r3, #256	; 0x100
        : x(0), y(0), width(0), height(0)
 80075c0:	f04f 0b00 	mov.w	fp, #0
    graphDraggedCallback(this, &customGraphBase::graphDraggedCallbackHandler)
 80075c4:	4607      	mov	r7, r0
 80075c6:	4aef      	ldr	r2, [pc, #956]	; (8007984 <_ZN15customGraphBaseC1Ev+0x3cc>)
 80075c8:	f100 0558 	add.w	r5, r0, #88	; 0x58
customGraphBase::customGraphBase() :
 80075cc:	4604      	mov	r4, r0
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80075ce:	2164      	movs	r1, #100	; 0x64
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80075d0:	2601      	movs	r6, #1
    graphDraggedCallback(this, &customGraphBase::graphDraggedCallbackHandler)
 80075d2:	f204 4abc 	addw	sl, r4, #1212	; 0x4bc
 80075d6:	f204 49fc 	addw	r9, r4, #1276	; 0x4fc
 80075da:	f204 583c 	addw	r8, r4, #1340	; 0x53c
customGraphBase::customGraphBase() :
 80075de:	ed2d 8b02 	vpush	{d8}
 80075e2:	e9c0 bb01 	strd	fp, fp, [r0, #4]
 80075e6:	e9c0 bb03 	strd	fp, fp, [r0, #12]
 80075ea:	e9c0 bb05 	strd	fp, fp, [r0, #20]
 80075ee:	e9c0 bb07 	strd	fp, fp, [r0, #28]
 80075f2:	8483      	strh	r3, [r0, #36]	; 0x24
 80075f4:	b085      	sub	sp, #20
          firstChild(0)
 80075f6:	f8c0 b028 	str.w	fp, [r0, #40]	; 0x28
    graphDraggedCallback(this, &customGraphBase::graphDraggedCallbackHandler)
 80075fa:	f847 2b2c 	str.w	r2, [r7], #44
        : Widget(), alpha(255), color(0)
 80075fe:	4ae2      	ldr	r2, [pc, #904]	; (8007988 <_ZN15customGraphBaseC1Ev+0x3d0>)
 8007600:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8007604:	23ff      	movs	r3, #255	; 0xff
 8007606:	f8c0 b04c 	str.w	fp, [r0, #76]	; 0x4c
 800760a:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
        : color(col)
 800760e:	f8c0 b054 	str.w	fp, [r0, #84]	; 0x54
        : x(0), y(0), width(0), height(0)
 8007612:	e9c0 2b0b 	strd	r2, fp, [r0, #44]	; 0x2c
 8007616:	e9c0 bb0d 	strd	fp, fp, [r0, #52]	; 0x34
 800761a:	e9c0 bb0f 	strd	fp, fp, [r0, #60]	; 0x3c
 800761e:	e9c0 bb11 	strd	fp, fp, [r0, #68]	; 0x44
 8007622:	4628      	mov	r0, r5
 8007624:	f00a fc92 	bl	8011f4c <_ZN8touchgfx17AbstractDataGraphC1Es>
 8007628:	4bd8      	ldr	r3, [pc, #864]	; (800798c <_ZN15customGraphBaseC1Ev+0x3d4>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 800762a:	4659      	mov	r1, fp
 800762c:	2263      	movs	r2, #99	; 0x63
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 800762e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007630:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8007634:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8007636:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 800763a:	f504 734b 	add.w	r3, r4, #812	; 0x32c
 800763e:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8007642:	f7fb fa5f 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8007646:	4bd2      	ldr	r3, [pc, #840]	; (8007990 <_ZN15customGraphBaseC1Ev+0x3d8>)
        : CanvasWidget()
 8007648:	4650      	mov	r0, sl
 800764a:	65a3      	str	r3, [r4, #88]	; 0x58
 800764c:	f009 ff88 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007650:	230a      	movs	r3, #10
        : color(col)
 8007652:	f8c4 b4e8 	str.w	fp, [r4, #1256]	; 0x4e8
        : CanvasWidget()
 8007656:	4648      	mov	r0, r9
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007658:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
class GraphElementGridX : public GraphElementGridBase
 800765c:	4bcd      	ldr	r3, [pc, #820]	; (8007994 <_ZN15customGraphBaseC1Ev+0x3dc>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800765e:	f8c4 64ec 	str.w	r6, [r4, #1260]	; 0x4ec
 8007662:	f884 64f4 	strb.w	r6, [r4, #1268]	; 0x4f4
 8007666:	f8c4 b4f8 	str.w	fp, [r4, #1272]	; 0x4f8
class GraphElementGridX : public GraphElementGridBase
 800766a:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
        : CanvasWidget()
 800766e:	f009 ff77 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007672:	230a      	movs	r3, #10
 8007674:	f8c4 b528 	str.w	fp, [r4, #1320]	; 0x528
class GraphLabelsX : public GraphLabelsBase
 8007678:	4640      	mov	r0, r8
 800767a:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
class GraphElementGridY : public GraphElementGridBase
 800767e:	4bc6      	ldr	r3, [pc, #792]	; (8007998 <_ZN15customGraphBaseC1Ev+0x3e0>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007680:	f8c4 652c 	str.w	r6, [r4, #1324]	; 0x52c
 8007684:	f884 6534 	strb.w	r6, [r4, #1332]	; 0x534
 8007688:	f8c4 b538 	str.w	fp, [r4, #1336]	; 0x538
class GraphElementGridY : public GraphElementGridBase
 800768c:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 8007690:	f7fb ffcc 	bl	800362c <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8007694:	4bc1      	ldr	r3, [pc, #772]	; (800799c <_ZN15customGraphBaseC1Ev+0x3e4>)
 8007696:	f8c4 353c 	str.w	r3, [r4, #1340]	; 0x53c
 800769a:	f504 63b1 	add.w	r3, r4, #1416	; 0x588
class GraphLabelsY : public GraphLabelsBase
 800769e:	4618      	mov	r0, r3
 80076a0:	ee08 3a10 	vmov	s16, r3
 80076a4:	f7fb ffc2 	bl	800362c <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80076a8:	4bbd      	ldr	r3, [pc, #756]	; (80079a0 <_ZN15customGraphBaseC1Ev+0x3e8>)
 80076aa:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
 80076ae:	f204 53d4 	addw	r3, r4, #1492	; 0x5d4
        : CanvasWidget()
 80076b2:	4618      	mov	r0, r3
 80076b4:	ee08 3a90 	vmov	s17, r3
 80076b8:	f009 ff52 	bl	8011560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 80076bc:	4bb9      	ldr	r3, [pc, #740]	; (80079a4 <_ZN15customGraphBaseC1Ev+0x3ec>)
 80076be:	f8c4 35d4 	str.w	r3, [r4, #1492]	; 0x5d4
 80076c2:	2302      	movs	r3, #2
 80076c4:	f884 3600 	strb.w	r3, [r4, #1536]	; 0x600
 80076c8:	f204 6304 	addw	r3, r4, #1540	; 0x604
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80076cc:	4618      	mov	r0, r3
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	f7fa ffd0 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80076d4:	4bb4      	ldr	r3, [pc, #720]	; (80079a8 <_ZN15customGraphBaseC1Ev+0x3f0>)
    box1.setPosition(0, 0, 310, 200);
 80076d6:	465a      	mov	r2, fp
 80076d8:	4659      	mov	r1, fp
 80076da:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
 80076de:	3324      	adds	r3, #36	; 0x24
 80076e0:	4638      	mov	r0, r7
 80076e2:	f8c4 b610 	str.w	fp, [r4, #1552]	; 0x610
 80076e6:	f8c4 360c 	str.w	r3, [r4, #1548]	; 0x60c
        : pobject(pObject), pmemfun(pmemfun_2)
 80076ea:	4bb0      	ldr	r3, [pc, #704]	; (80079ac <_ZN15customGraphBaseC1Ev+0x3f4>)
 80076ec:	f8c4 b624 	str.w	fp, [r4, #1572]	; 0x624
 80076f0:	f8c4 3618 	str.w	r3, [r4, #1560]	; 0x618
 80076f4:	4bae      	ldr	r3, [pc, #696]	; (80079b0 <_ZN15customGraphBaseC1Ev+0x3f8>)
 80076f6:	f8c4 461c 	str.w	r4, [r4, #1564]	; 0x61c
 80076fa:	f8c4 3620 	str.w	r3, [r4, #1568]	; 0x620
        rect.width = width;
 80076fe:	4bad      	ldr	r3, [pc, #692]	; (80079b4 <_ZN15customGraphBaseC1Ev+0x3fc>)
 8007700:	60a3      	str	r3, [r4, #8]
 8007702:	23c8      	movs	r3, #200	; 0xc8
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	f44f 739b 	mov.w	r3, #310	; 0x136
 800770a:	f7fb feed 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8007712:	4639      	mov	r1, r7
 8007714:	4620      	mov	r0, r4
 8007716:	6563      	str	r3, [r4, #84]	; 0x54
 8007718:	f008 fca8 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph1.setPosition(0, 0, 310, 200);
 800771c:	23c8      	movs	r3, #200	; 0xc8
 800771e:	465a      	mov	r2, fp
 8007720:	4659      	mov	r1, fp
 8007722:	4628      	mov	r0, r5
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	f44f 739b 	mov.w	r3, #310	; 0x136
        color = newColor;
 800772a:	4fa3      	ldr	r7, [pc, #652]	; (80079b8 <_ZN15customGraphBaseC1Ev+0x400>)
 800772c:	f7fb fedc 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setScaleX(1);
 8007730:	465a      	mov	r2, fp
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	f00a fcc6 	bl	80120c6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(1);
 800773a:	465a      	mov	r2, fp
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	f00a fce0 	bl	8012104 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setGraphAreaMargin(25, 45, 0, 37);
 8007744:	2325      	movs	r3, #37	; 0x25
 8007746:	4628      	mov	r0, r5
 8007748:	222d      	movs	r2, #45	; 0x2d
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2119      	movs	r1, #25
 800774e:	465b      	mov	r3, fp
 8007750:	f00a fbad 	bl	8011eae <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 8007754:	465b      	mov	r3, fp
 8007756:	465a      	mov	r2, fp
 8007758:	4659      	mov	r1, fp
 800775a:	4628      	mov	r0, r5
 800775c:	f8cd b000 	str.w	fp, [sp]
 8007760:	f00a fa89 	bl	8011c76 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(-100, 100);
 8007764:	4628      	mov	r0, r5
 8007766:	2264      	movs	r2, #100	; 0x64
 8007768:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800776c:	f7fb f9ca 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(-100, 100);
 8007770:	4628      	mov	r0, r5
 8007772:	2264      	movs	r2, #100	; 0x64
 8007774:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8007778:	f7fb fa50 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    graph1.setDragAction(graphDraggedCallback);
 800777c:	f504 63c3 	add.w	r3, r4, #1560	; 0x618
        setIntervalScaled(abs(interval) * dataScale);
 8007780:	f8d4 14ec 	ldr.w	r1, [r4, #1260]	; 0x4ec
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8007784:	4632      	mov	r2, r6
        dragAction = &callback;
 8007786:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
        setIntervalScaled(abs(interval) * dataScale);
 800778a:	2314      	movs	r3, #20
        color = newColor;
 800778c:	f8c4 74e8 	str.w	r7, [r4, #1256]	; 0x4e8
        setIntervalScaled(abs(interval) * dataScale);
 8007790:	fb03 f001 	mul.w	r0, r3, r1
        lineWidth = width;
 8007794:	f884 64f4 	strb.w	r6, [r4, #1268]	; 0x4f4
 8007798:	2800      	cmp	r0, #0
 800779a:	bfb8      	it	lt
 800779c:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 800779e:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80077a2:	f00a fc37 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorXAxisGrid);
 80077a6:	4651      	mov	r1, sl
 80077a8:	f8c4 04f0 	str.w	r0, [r4, #1264]	; 0x4f0
 80077ac:	4628      	mov	r0, r5
        dataScale = scale;
 80077ae:	f8c4 64ec 	str.w	r6, [r4, #1260]	; 0x4ec
        return i * scale;
 80077b2:	f06f 0a5d 	mvn.w	sl, #93	; 0x5d
 80077b6:	f00a fa69 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 80077ba:	2314      	movs	r3, #20
 80077bc:	f8d4 152c 	ldr.w	r1, [r4, #1324]	; 0x52c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80077c0:	4632      	mov	r2, r6
        color = newColor;
 80077c2:	f8c4 7528 	str.w	r7, [r4, #1320]	; 0x528
 80077c6:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
        setIntervalScaled(abs(interval) * dataScale);
 80077ca:	fb03 f001 	mul.w	r0, r3, r1
        lineWidth = width;
 80077ce:	f884 6534 	strb.w	r6, [r4, #1332]	; 0x534
 80077d2:	2800      	cmp	r0, #0
 80077d4:	bfb8      	it	lt
 80077d6:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 80077d8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80077dc:	f00a fc1a 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorYAxisGrid);
 80077e0:	4649      	mov	r1, r9
 80077e2:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
 80077e6:	4628      	mov	r0, r5
        dataScale = scale;
 80077e8:	f8c4 652c 	str.w	r6, [r4, #1324]	; 0x52c
 80077ec:	f06f 0955 	mvn.w	r9, #85	; 0x55
 80077f0:	f00a fa4c 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 80077f4:	f8d4 156c 	ldr.w	r1, [r4, #1388]	; 0x56c
 80077f8:	2046      	movs	r0, #70	; 0x46
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 80077fa:	4632      	mov	r2, r6
class TypedText
 80077fc:	f8a4 b578 	strh.w	fp, [r4, #1400]	; 0x578
 8007800:	4348      	muls	r0, r1
        color = newColor;
 8007802:	f8c4 7568 	str.w	r7, [r4, #1384]	; 0x568
 8007806:	2800      	cmp	r0, #0
 8007808:	bfb8      	it	lt
 800780a:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 800780c:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007810:	f00a fc00 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addBottomElement(graph1MajorXAxisLabel);
 8007814:	4641      	mov	r1, r8
 8007816:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
 800781a:	4628      	mov	r0, r5
        dataScale = scale;
 800781c:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
 8007820:	f04f 0804 	mov.w	r8, #4
 8007824:	f00a fa56 	bl	8011cd4 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8007828:	f8d4 15b8 	ldr.w	r1, [r4, #1464]	; 0x5b8
 800782c:	2028      	movs	r0, #40	; 0x28
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800782e:	4632      	mov	r2, r6
 8007830:	f8a4 85c4 	strh.w	r8, [r4, #1476]	; 0x5c4
 8007834:	4348      	muls	r0, r1
 8007836:	f8c4 75b4 	str.w	r7, [r4, #1460]	; 0x5b4
        return addValue(int2scaledX(x), int2scaledY(y));
 800783a:	f06f 0743 	mvn.w	r7, #67	; 0x43
 800783e:	2800      	cmp	r0, #0
 8007840:	bfb8      	it	lt
 8007842:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8007844:	f8c4 05bc 	str.w	r0, [r4, #1468]	; 0x5bc
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007848:	f00a fbe4 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addLeftElement(graph1MajorYAxisLabel);
 800784c:	ee18 1a10 	vmov	r1, s16
 8007850:	f8c4 05bc 	str.w	r0, [r4, #1468]	; 0x5bc
 8007854:	4628      	mov	r0, r5
        dataScale = scale;
 8007856:	f8c4 65b8 	str.w	r6, [r4, #1464]	; 0x5b8
        return i * scale;
 800785a:	f06f 063f 	mvn.w	r6, #63	; 0x3f
 800785e:	f00a fa27 	bl	8011cb0 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8007862:	4b56      	ldr	r3, [pc, #344]	; (80079bc <_ZN15customGraphBaseC1Ev+0x404>)
    graph1.addGraphElement(graph1Line1);
 8007864:	ee18 1a90 	vmov	r1, s17
 8007868:	4628      	mov	r0, r5
 800786a:	f8c4 3610 	str.w	r3, [r4, #1552]	; 0x610
        painterRed = Color::getRed(color);
 800786e:	f24c 2332 	movw	r3, #49714	; 0xc232
        lineWidth = width;
 8007872:	f884 8600 	strb.w	r8, [r4, #1536]	; 0x600
 8007876:	f06f 084d 	mvn.w	r8, #77	; 0x4d
 800787a:	f8a4 3614 	strh.w	r3, [r4, #1556]	; 0x614
        painterBlue = Color::getBlue(color);
 800787e:	2337      	movs	r3, #55	; 0x37
 8007880:	f884 3616 	strb.w	r3, [r4, #1558]	; 0x616
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	f8c4 35fc 	str.w	r3, [r4, #1532]	; 0x5fc
 800788a:	f00a f9ff 	bl	8011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        return addValue(int2scaledX(x), int2scaledY(y));
 800788e:	f06f 012a 	mvn.w	r1, #42	; 0x2a
 8007892:	4628      	mov	r0, r5
        return i * scale;
 8007894:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007898:	434a      	muls	r2, r1
 800789a:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800789e:	4359      	muls	r1, r3
 80078a0:	f00a fc63 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80078a4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80078a8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 80078ac:	f06f 0161 	mvn.w	r1, #97	; 0x61
 80078b0:	4628      	mov	r0, r5
 80078b2:	4372      	muls	r2, r6
 80078b4:	4359      	muls	r1, r3
 80078b6:	f00a fc58 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80078ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80078be:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 80078c2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
 80078c6:	4628      	mov	r0, r5
 80078c8:	fb08 f202 	mul.w	r2, r8, r2
 80078cc:	4359      	muls	r1, r3
 80078ce:	f00a fc4c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80078d2:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80078d6:	4628      	mov	r0, r5
        return i * scale;
 80078d8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80078dc:	fb0a f101 	mul.w	r1, sl, r1
 80078e0:	435a      	muls	r2, r3
 80078e2:	f00a fc42 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80078e6:	f06f 0146 	mvn.w	r1, #70	; 0x46
 80078ea:	4628      	mov	r0, r5
        return i * scale;
 80078ec:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80078f0:	434a      	muls	r2, r1
 80078f2:	f06f 015b 	mvn.w	r1, #91	; 0x5b
 80078f6:	4359      	muls	r1, r3
 80078f8:	f00a fc37 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80078fc:	f06f 0130 	mvn.w	r1, #48	; 0x30
 8007900:	4628      	mov	r0, r5
        return i * scale;
 8007902:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007906:	434a      	muls	r2, r1
 8007908:	f06f 0159 	mvn.w	r1, #89	; 0x59
 800790c:	4359      	muls	r1, r3
 800790e:	f00a fc2c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007912:	f06f 0110 	mvn.w	r1, #16
 8007916:	4628      	mov	r0, r5
        return i * scale;
 8007918:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800791c:	434a      	muls	r2, r1
 800791e:	f06f 0157 	mvn.w	r1, #87	; 0x57
 8007922:	4359      	muls	r1, r3
 8007924:	f00a fc21 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007928:	4628      	mov	r0, r5
        return i * scale;
 800792a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800792e:	fb09 f101 	mul.w	r1, r9, r1
 8007932:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8007936:	f00a fc18 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 800793a:	2131      	movs	r1, #49	; 0x31
 800793c:	4628      	mov	r0, r5
        return i * scale;
 800793e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007942:	434a      	muls	r2, r1
 8007944:	f06f 0153 	mvn.w	r1, #83	; 0x53
 8007948:	4359      	muls	r1, r3
 800794a:	f00a fc0e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 800794e:	2147      	movs	r1, #71	; 0x47
 8007950:	4628      	mov	r0, r5
        return i * scale;
 8007952:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007956:	434a      	muls	r2, r1
 8007958:	f06f 0151 	mvn.w	r1, #81	; 0x51
 800795c:	4359      	muls	r1, r3
 800795e:	f00a fc04 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007962:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8007966:	2251      	movs	r2, #81	; 0x51
        return i * scale;
 8007968:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800796c:	435a      	muls	r2, r3
 800796e:	4341      	muls	r1, r0
 8007970:	4628      	mov	r0, r5
 8007972:	f00a fbfa 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007976:	224e      	movs	r2, #78	; 0x4e
 8007978:	4628      	mov	r0, r5
        return i * scale;
 800797a:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800797e:	fb08 f101 	mul.w	r1, r8, r1
 8007982:	e01d      	b.n	80079c0 <_ZN15customGraphBaseC1Ev+0x408>
 8007984:	080249bc 	.word	0x080249bc
 8007988:	080255a4 	.word	0x080255a4
 800798c:	08024eb0 	.word	0x08024eb0
 8007990:	08024490 	.word	0x08024490
 8007994:	08024320 	.word	0x08024320
 8007998:	080243d8 	.word	0x080243d8
 800799c:	08025334 	.word	0x08025334
 80079a0:	080253d4 	.word	0x080253d4
 80079a4:	080252b4 	.word	0x080252b4
 80079a8:	08024e00 	.word	0x08024e00
 80079ac:	080249a4 	.word	0x080249a4
 80079b0:	08007599 	.word	0x08007599
 80079b4:	00c80136 	.word	0x00c80136
 80079b8:	ff1497c5 	.word	0xff1497c5
 80079bc:	ff32c237 	.word	0xff32c237
 80079c0:	435a      	muls	r2, r3
 80079c2:	f00a fbd2 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80079c6:	f06f 014b 	mvn.w	r1, #75	; 0x4b
 80079ca:	4628      	mov	r0, r5
        return i * scale;
 80079cc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80079d0:	4359      	muls	r1, r3
 80079d2:	0192      	lsls	r2, r2, #6
 80079d4:	f00a fbc9 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80079d8:	212b      	movs	r1, #43	; 0x2b
 80079da:	4628      	mov	r0, r5
        return i * scale;
 80079dc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80079e0:	434a      	muls	r2, r1
 80079e2:	f06f 0149 	mvn.w	r1, #73	; 0x49
 80079e6:	4359      	muls	r1, r3
 80079e8:	f00a fbbf 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 80079ec:	2115      	movs	r1, #21
 80079ee:	4628      	mov	r0, r5
        return i * scale;
 80079f0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80079f4:	434a      	muls	r2, r1
 80079f6:	f06f 0147 	mvn.w	r1, #71	; 0x47
 80079fa:	4359      	muls	r1, r3
 80079fc:	f00a fbb5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a00:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8007a04:	4628      	mov	r0, r5
        return i * scale;
 8007a06:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a0a:	4359      	muls	r1, r3
 8007a0c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007a10:	f00a fbab 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a14:	4628      	mov	r0, r5
        return i * scale;
 8007a16:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a1a:	4379      	muls	r1, r7
 8007a1c:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8007a20:	f00a fba3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007a24:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a28:	f06f 0141 	mvn.w	r1, #65	; 0x41
 8007a2c:	465a      	mov	r2, fp
 8007a2e:	4628      	mov	r0, r5
 8007a30:	2734      	movs	r7, #52	; 0x34
 8007a32:	4359      	muls	r1, r3
 8007a34:	f00a fb99 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	4628      	mov	r0, r5
        return i * scale;
 8007a3c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a40:	4371      	muls	r1, r6
 8007a42:	261c      	movs	r6, #28
 8007a44:	435a      	muls	r2, r3
 8007a46:	f00a fb90 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a4a:	f06f 013d 	mvn.w	r1, #61	; 0x3d
 8007a4e:	4628      	mov	r0, r5
        return i * scale;
 8007a50:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a54:	4372      	muls	r2, r6
 8007a56:	2635      	movs	r6, #53	; 0x35
 8007a58:	4359      	muls	r1, r3
 8007a5a:	f00a fb86 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a5e:	212c      	movs	r1, #44	; 0x2c
 8007a60:	4628      	mov	r0, r5
        return i * scale;
 8007a62:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a66:	434a      	muls	r2, r1
 8007a68:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 8007a6c:	4359      	muls	r1, r3
 8007a6e:	f00a fb7c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a72:	f06f 0139 	mvn.w	r1, #57	; 0x39
 8007a76:	4628      	mov	r0, r5
        return i * scale;
 8007a78:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a7c:	4372      	muls	r2, r6
        return i * scale;
 8007a7e:	260e      	movs	r6, #14
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a80:	4359      	muls	r1, r3
 8007a82:	f00a fb72 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a86:	f06f 0137 	mvn.w	r1, #55	; 0x37
 8007a8a:	4628      	mov	r0, r5
        return i * scale;
 8007a8c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a90:	437a      	muls	r2, r7
 8007a92:	f06f 0733 	mvn.w	r7, #51	; 0x33
 8007a96:	4359      	muls	r1, r3
 8007a98:	f00a fb67 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007a9c:	2126      	movs	r1, #38	; 0x26
 8007a9e:	4628      	mov	r0, r5
        return i * scale;
 8007aa0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007aa4:	434a      	muls	r2, r1
 8007aa6:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8007aaa:	4359      	muls	r1, r3
 8007aac:	f00a fb5d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ab0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007ab4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ab8:	4628      	mov	r0, r5
 8007aba:	4372      	muls	r2, r6
 8007abc:	4379      	muls	r1, r7
        return i * scale;
 8007abe:	f06f 0711 	mvn.w	r7, #17
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ac2:	f00a fb52 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ac6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007aca:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007ace:	f06f 0331 	mvn.w	r3, #49	; 0x31
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ad2:	437a      	muls	r2, r7
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	4359      	muls	r1, r3
 8007ad8:	f00a fb47 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007adc:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8007ae0:	f06f 012f 	mvn.w	r1, #47	; 0x2f
        return i * scale;
 8007ae4:	e9d4 0222 	ldrd	r0, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ae8:	435a      	muls	r2, r3
 8007aea:	4341      	muls	r1, r0
 8007aec:	4628      	mov	r0, r5
 8007aee:	f00a fb3c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007af2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
        return i * scale;
 8007af6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007afa:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 8007afe:	f04f 082a 	mov.w	r8, #42	; 0x2a
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b02:	4341      	muls	r1, r0
 8007b04:	4628      	mov	r0, r5
 8007b06:	f00a fb30 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b0a:	f06f 002b 	mvn.w	r0, #43	; 0x2b
        return i * scale;
 8007b0e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b12:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 8007b16:	f06f 0a07 	mvn.w	sl, #7
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b1a:	4341      	muls	r1, r0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f00a fb24 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b22:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8007b26:	4628      	mov	r0, r5
        return i * scale;
 8007b28:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b2c:	435a      	muls	r2, r3
 8007b2e:	f06f 0329 	mvn.w	r3, #41	; 0x29
 8007b32:	4359      	muls	r1, r3
 8007b34:	f00a fb19 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b38:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8007b3c:	4628      	mov	r0, r5
        return i * scale;
 8007b3e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b42:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 8007b46:	f06f 090b 	mvn.w	r9, #11
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b4a:	4359      	muls	r1, r3
 8007b4c:	f00a fb0d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b50:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8007b54:	4628      	mov	r0, r5
        return i * scale;
 8007b56:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b5a:	434a      	muls	r2, r1
 8007b5c:	f06f 0125 	mvn.w	r1, #37	; 0x25
 8007b60:	4359      	muls	r1, r3
 8007b62:	f00a fb02 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b66:	f06f 0124 	mvn.w	r1, #36	; 0x24
 8007b6a:	4628      	mov	r0, r5
        return i * scale;
 8007b6c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b70:	434a      	muls	r2, r1
 8007b72:	f06f 0123 	mvn.w	r1, #35	; 0x23
 8007b76:	4359      	muls	r1, r3
 8007b78:	f00a faf7 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b7c:	f06f 0109 	mvn.w	r1, #9
 8007b80:	4628      	mov	r0, r5
        return i * scale;
 8007b82:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b86:	434a      	muls	r2, r1
 8007b88:	f06f 0121 	mvn.w	r1, #33	; 0x21
 8007b8c:	4359      	muls	r1, r3
 8007b8e:	f00a faec 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007b92:	210b      	movs	r1, #11
 8007b94:	4628      	mov	r0, r5
        return i * scale;
 8007b96:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b9a:	434a      	muls	r2, r1
 8007b9c:	f06f 011f 	mvn.w	r1, #31
 8007ba0:	4359      	muls	r1, r3
 8007ba2:	f00a fae2 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ba6:	2316      	movs	r3, #22
 8007ba8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bac:	f06f 001d 	mvn.w	r0, #29
        return i * scale;
 8007bb0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bb4:	435a      	muls	r2, r3
 8007bb6:	4341      	muls	r1, r0
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f00a fad6 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007bbe:	200d      	movs	r0, #13
        return i * scale;
 8007bc0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bc4:	4342      	muls	r2, r0
 8007bc6:	f06f 0019 	mvn.w	r0, #25
 8007bca:	4341      	muls	r1, r0
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f00a facc 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007bd2:	f06f 0017 	mvn.w	r0, #23
        return i * scale;
 8007bd6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bda:	4341      	muls	r1, r0
 8007bdc:	4252      	negs	r2, r2
 8007bde:	4628      	mov	r0, r5
 8007be0:	f00a fac3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007be4:	f06f 0015 	mvn.w	r0, #21
        return i * scale;
 8007be8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bec:	4341      	muls	r1, r0
 8007bee:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f00a fab9 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007bf8:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 8007bfc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c00:	4342      	muls	r2, r0
 8007c02:	f06f 0013 	mvn.w	r0, #19
 8007c06:	4341      	muls	r1, r0
 8007c08:	4628      	mov	r0, r5
 8007c0a:	f00a faae 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c0e:	f06f 0014 	mvn.w	r0, #20
        return i * scale;
 8007c12:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c16:	4342      	muls	r2, r0
 8007c18:	4628      	mov	r0, r5
 8007c1a:	4379      	muls	r1, r7
 8007c1c:	f00a faa5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007c20:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007c24:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c28:	f06f 000f 	mvn.w	r0, #15
 8007c2c:	fb0a f202 	mul.w	r2, sl, r2
 8007c30:	4341      	muls	r1, r0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f00a fa99 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c38:	f06f 000d 	mvn.w	r0, #13
        return i * scale;
 8007c3c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c40:	4372      	muls	r2, r6
 8007c42:	4341      	muls	r1, r0
 8007c44:	4628      	mov	r0, r5
 8007c46:	f00a fa90 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007c4a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007c4e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c52:	4628      	mov	r0, r5
 8007c54:	fb08 f202 	mul.w	r2, r8, r2
 8007c58:	fb09 f101 	mul.w	r1, r9, r1
 8007c5c:	f00a fa85 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c60:	2045      	movs	r0, #69	; 0x45
        return i * scale;
 8007c62:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c66:	4342      	muls	r2, r0
 8007c68:	f06f 0009 	mvn.w	r0, #9
 8007c6c:	4341      	muls	r1, r0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f00a fa7b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c74:	2059      	movs	r0, #89	; 0x59
        return i * scale;
 8007c76:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c7a:	4342      	muls	r2, r0
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	fb0a f101 	mul.w	r1, sl, r1
        return i * scale;
 8007c82:	f04f 0a4a 	mov.w	sl, #74	; 0x4a
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c86:	f00a fa70 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c8a:	2062      	movs	r0, #98	; 0x62
        return i * scale;
 8007c8c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c90:	4342      	muls	r2, r0
 8007c92:	f06f 0005 	mvn.w	r0, #5
 8007c96:	4341      	muls	r1, r0
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f00a fa66 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007c9e:	205c      	movs	r0, #92	; 0x5c
        return i * scale;
 8007ca0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ca4:	4342      	muls	r2, r0
 8007ca6:	f06f 0003 	mvn.w	r0, #3
 8007caa:	4341      	muls	r1, r0
 8007cac:	4628      	mov	r0, r5
 8007cae:	f00a fa5c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007cb2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007cb6:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cba:	f06f 0001 	mvn.w	r0, #1
 8007cbe:	fb0a f202 	mul.w	r2, sl, r2
 8007cc2:	4341      	muls	r1, r0
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f00a fa50 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007cca:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cce:	212d      	movs	r1, #45	; 0x2d
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	434a      	muls	r2, r1
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	f00a fa48 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	4628      	mov	r0, r5
        return i * scale;
 8007cde:	f06f 0b18 	mvn.w	fp, #24
 8007ce2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ce6:	435a      	muls	r2, r3
 8007ce8:	0049      	lsls	r1, r1, #1
 8007cea:	f00a fa3e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007cee:	4628      	mov	r0, r5
        return i * scale;
 8007cf0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cf4:	437a      	muls	r2, r7
 8007cf6:	0089      	lsls	r1, r1, #2
 8007cf8:	f00a fa37 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007cfc:	f06f 0028 	mvn.w	r0, #40	; 0x28
 8007d00:	f06f 0733 	mvn.w	r7, #51	; 0x33
        return i * scale;
 8007d04:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d08:	4342      	muls	r2, r0
 8007d0a:	2006      	movs	r0, #6
 8007d0c:	4341      	muls	r1, r0
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f00a fa2b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d14:	f06f 0034 	mvn.w	r0, #52	; 0x34
        return i * scale;
 8007d18:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d1c:	4342      	muls	r2, r0
 8007d1e:	00c9      	lsls	r1, r1, #3
 8007d20:	4628      	mov	r0, r5
 8007d22:	f00a fa22 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d26:	4628      	mov	r0, r5
        return i * scale;
 8007d28:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d2c:	437a      	muls	r2, r7
 8007d2e:	270a      	movs	r7, #10
 8007d30:	4379      	muls	r1, r7
 8007d32:	f06f 0729 	mvn.w	r7, #41	; 0x29
 8007d36:	f00a fa18 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	4628      	mov	r0, r5
        return i * scale;
 8007d3e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d42:	4359      	muls	r1, r3
 8007d44:	437a      	muls	r2, r7
        return i * scale;
 8007d46:	2712      	movs	r7, #18
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d48:	f00a fa0f 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007d4c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d50:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d54:	4628      	mov	r0, r5
 8007d56:	fb0b f202 	mul.w	r2, fp, r2
 8007d5a:	4371      	muls	r1, r6
 8007d5c:	f00a fa05 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d60:	f06f 0008 	mvn.w	r0, #8
        return i * scale;
 8007d64:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d68:	4342      	muls	r2, r0
 8007d6a:	0109      	lsls	r1, r1, #4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f00a f9fc 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007d72:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d76:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	4379      	muls	r1, r7
 8007d7e:	f00a f9f4 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d82:	2314      	movs	r3, #20
 8007d84:	4628      	mov	r0, r5
        return i * scale;
 8007d86:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d8a:	4359      	muls	r1, r3
 8007d8c:	0052      	lsls	r2, r2, #1
 8007d8e:	f00a f9ec 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007d92:	2316      	movs	r3, #22
 8007d94:	4628      	mov	r0, r5
        return i * scale;
 8007d96:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d9a:	4359      	muls	r1, r3
 8007d9c:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 8007da0:	f00a f9e3 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007da4:	2118      	movs	r1, #24
 8007da6:	4628      	mov	r0, r5
        return i * scale;
 8007da8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dac:	fb0b f202 	mul.w	r2, fp, r2
        return i * scale;
 8007db0:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007db4:	4359      	muls	r1, r3
 8007db6:	f00a f9d8 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007dba:	f06f 012d 	mvn.w	r1, #45	; 0x2d
 8007dbe:	4628      	mov	r0, r5
        return i * scale;
 8007dc0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dc4:	434a      	muls	r2, r1
 8007dc6:	211a      	movs	r1, #26
 8007dc8:	4359      	muls	r1, r3
 8007dca:	f00a f9ce 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007dce:	f06f 0242 	mvn.w	r2, #66	; 0x42
 8007dd2:	4628      	mov	r0, r5
        return i * scale;
 8007dd4:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dd8:	435a      	muls	r2, r3
 8007dda:	231c      	movs	r3, #28
 8007ddc:	4359      	muls	r1, r3
 8007dde:	f00a f9c4 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007de2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 8007de6:	211e      	movs	r1, #30
        return i * scale;
 8007de8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dec:	4342      	muls	r2, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	4359      	muls	r1, r3
 8007df2:	f00a f9ba 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007df6:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8007dfa:	4628      	mov	r0, r5
        return i * scale;
 8007dfc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e00:	435a      	muls	r2, r3
 8007e02:	0149      	lsls	r1, r1, #5
 8007e04:	f00a f9b1 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e08:	f06f 0143 	mvn.w	r1, #67	; 0x43
 8007e0c:	4628      	mov	r0, r5
        return i * scale;
 8007e0e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e12:	434a      	muls	r2, r1
 8007e14:	2122      	movs	r1, #34	; 0x22
 8007e16:	4359      	muls	r1, r3
 8007e18:	f00a f9a7 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e1c:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8007e20:	2124      	movs	r1, #36	; 0x24
        return i * scale;
 8007e22:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e26:	4359      	muls	r1, r3
 8007e28:	4342      	muls	r2, r0
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	f00a f99d 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e30:	2026      	movs	r0, #38	; 0x26
        return i * scale;
 8007e32:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e36:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 8007e3a:	f04f 0932 	mov.w	r9, #50	; 0x32
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e3e:	4341      	muls	r1, r0
 8007e40:	4628      	mov	r0, r5
 8007e42:	f00a f992 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e46:	2028      	movs	r0, #40	; 0x28
 8007e48:	2217      	movs	r2, #23
        return i * scale;
 8007e4a:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e4e:	435a      	muls	r2, r3
 8007e50:	4341      	muls	r1, r0
 8007e52:	4628      	mov	r0, r5
 8007e54:	f00a f989 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e58:	2035      	movs	r0, #53	; 0x35
        return i * scale;
 8007e5a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e5e:	4342      	muls	r2, r0
 8007e60:	4628      	mov	r0, r5
 8007e62:	fb08 f101 	mul.w	r1, r8, r1
        return i * scale;
 8007e66:	f04f 084c 	mov.w	r8, #76	; 0x4c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e6a:	f00a f97e 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e6e:	232c      	movs	r3, #44	; 0x2c
 8007e70:	4628      	mov	r0, r5
        return i * scale;
 8007e72:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e76:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 8007e7a:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e7e:	4359      	muls	r1, r3
 8007e80:	f00a f973 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007e84:	2252      	movs	r2, #82	; 0x52
 8007e86:	4628      	mov	r0, r5
        return i * scale;
 8007e88:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e8c:	435a      	muls	r2, r3
 8007e8e:	fb0a f101 	mul.w	r1, sl, r1
 8007e92:	f00a f96a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007e96:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007e9a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e9e:	2130      	movs	r1, #48	; 0x30
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	4359      	muls	r1, r3
 8007ea4:	fb08 f202 	mul.w	r2, r8, r2
 8007ea8:	f00a f95f 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007eac:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007eb0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	fb0b f202 	mul.w	r2, fp, r2
 8007eba:	fb09 f101 	mul.w	r1, r9, r1
 8007ebe:	f00a f954 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007ec2:	2227      	movs	r2, #39	; 0x27
 8007ec4:	4628      	mov	r0, r5
        return i * scale;
 8007ec6:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007eca:	435a      	muls	r2, r3
 8007ecc:	2334      	movs	r3, #52	; 0x34
 8007ece:	4359      	muls	r1, r3
 8007ed0:	f00a f94b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ed4:	2336      	movs	r3, #54	; 0x36
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ed6:	4628      	mov	r0, r5
        return i * scale;
 8007ed8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007edc:	4359      	muls	r1, r3
 8007ede:	437a      	muls	r2, r7
 8007ee0:	f00a f943 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007ee4:	2038      	movs	r0, #56	; 0x38
        return i * scale;
 8007ee6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007eea:	4341      	muls	r1, r0
 8007eec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f00a f93a 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007ef6:	203a      	movs	r0, #58	; 0x3a
        return i * scale;
 8007ef8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007efc:	4341      	muls	r1, r0
 8007efe:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8007f02:	4628      	mov	r0, r5
 8007f04:	f00a f931 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f08:	4628      	mov	r0, r5
        return i * scale;
 8007f0a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f0e:	fb0b f101 	mul.w	r1, fp, r1
 8007f12:	0052      	lsls	r2, r2, #1
 8007f14:	f00a f929 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f18:	203e      	movs	r0, #62	; 0x3e
        return i * scale;
 8007f1a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f1e:	4372      	muls	r2, r6
 8007f20:	4341      	muls	r1, r0
 8007f22:	4628      	mov	r0, r5
 8007f24:	f00a f921 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f28:	4628      	mov	r0, r5
        return i * scale;
 8007f2a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f2e:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 8007f32:	0189      	lsls	r1, r1, #6
 8007f34:	f00a f919 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f38:	2042      	movs	r0, #66	; 0x42
        return i * scale;
 8007f3a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f3e:	fb0a f202 	mul.w	r2, sl, r2
 8007f42:	4341      	muls	r1, r0
 8007f44:	4628      	mov	r0, r5
 8007f46:	f00a f910 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f4a:	2336      	movs	r3, #54	; 0x36
 8007f4c:	4628      	mov	r0, r5
        return i * scale;
 8007f4e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f52:	435a      	muls	r2, r3
 8007f54:	2344      	movs	r3, #68	; 0x44
 8007f56:	4359      	muls	r1, r3
 8007f58:	f00a f907 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f5c:	2146      	movs	r1, #70	; 0x46
 8007f5e:	4628      	mov	r0, r5
        return i * scale;
 8007f60:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f64:	fb09 f202 	mul.w	r2, r9, r2
 8007f68:	4359      	muls	r1, r3
 8007f6a:	f00a f8fe 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f6e:	2123      	movs	r1, #35	; 0x23
 8007f70:	4628      	mov	r0, r5
        return i * scale;
 8007f72:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f76:	434a      	muls	r2, r1
 8007f78:	2148      	movs	r1, #72	; 0x48
 8007f7a:	4359      	muls	r1, r3
 8007f7c:	f00a f8f5 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f80:	214a      	movs	r1, #74	; 0x4a
 8007f82:	4628      	mov	r0, r5
        return i * scale;
 8007f84:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f88:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8007f8c:	4359      	muls	r1, r3
 8007f8e:	f00a f8ec 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007f92:	f06f 0216 	mvn.w	r2, #22
 8007f96:	4628      	mov	r0, r5
        return i * scale;
 8007f98:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f9c:	fb08 f101 	mul.w	r1, r8, r1
 8007fa0:	435a      	muls	r2, r3
 8007fa2:	f00a f8e2 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007fa6:	f06f 0137 	mvn.w	r1, #55	; 0x37
 8007faa:	4628      	mov	r0, r5
        return i * scale;
 8007fac:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fb0:	434a      	muls	r2, r1
 8007fb2:	214e      	movs	r1, #78	; 0x4e
 8007fb4:	4359      	muls	r1, r3
 8007fb6:	f00a f8d8 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007fba:	f06f 0150 	mvn.w	r1, #80	; 0x50
 8007fbe:	4628      	mov	r0, r5
        return i * scale;
 8007fc0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fc4:	434a      	muls	r2, r1
 8007fc6:	2150      	movs	r1, #80	; 0x50
 8007fc8:	4359      	muls	r1, r3
 8007fca:	f00a f8ce 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007fce:	f06f 015f 	mvn.w	r1, #95	; 0x5f
 8007fd2:	4628      	mov	r0, r5
        return i * scale;
 8007fd4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fd8:	434a      	muls	r2, r1
 8007fda:	2152      	movs	r1, #82	; 0x52
 8007fdc:	4359      	muls	r1, r3
 8007fde:	f00a f8c4 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007fe2:	f06f 0152 	mvn.w	r1, #82	; 0x52
 8007fe6:	4628      	mov	r0, r5
        return i * scale;
 8007fe8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fec:	434a      	muls	r2, r1
 8007fee:	2156      	movs	r1, #86	; 0x56
 8007ff0:	4359      	muls	r1, r3
 8007ff2:	f00a f8ba 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8007ff6:	f06f 013b 	mvn.w	r1, #59	; 0x3b
 8007ffa:	4628      	mov	r0, r5
        return i * scale;
 8007ffc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008000:	434a      	muls	r2, r1
 8008002:	2158      	movs	r1, #88	; 0x58
 8008004:	4359      	muls	r1, r3
 8008006:	f00a f8b0 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 800800a:	f06f 011f 	mvn.w	r1, #31
 800800e:	4628      	mov	r0, r5
        return i * scale;
 8008010:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008014:	434a      	muls	r2, r1
 8008016:	215a      	movs	r1, #90	; 0x5a
 8008018:	4359      	muls	r1, r3
 800801a:	f00a f8a6 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 800801e:	f06f 0105 	mvn.w	r1, #5
 8008022:	4628      	mov	r0, r5
        return i * scale;
 8008024:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008028:	434a      	muls	r2, r1
 800802a:	215c      	movs	r1, #92	; 0x5c
 800802c:	4359      	muls	r1, r3
 800802e:	f00a f89c 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8008032:	215e      	movs	r1, #94	; 0x5e
 8008034:	4628      	mov	r0, r5
        return i * scale;
 8008036:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800803a:	4372      	muls	r2, r6
 800803c:	4359      	muls	r1, r3
 800803e:	f00a f894 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8008042:	2117      	movs	r1, #23
 8008044:	4628      	mov	r0, r5
        return i * scale;
 8008046:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800804a:	434a      	muls	r2, r1
 800804c:	2160      	movs	r1, #96	; 0x60
 800804e:	4359      	muls	r1, r3
 8008050:	f00a f88b 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
 8008054:	2115      	movs	r1, #21
 8008056:	4628      	mov	r0, r5
        return i * scale;
 8008058:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800805c:	434a      	muls	r2, r1
 800805e:	2162      	movs	r1, #98	; 0x62
 8008060:	4359      	muls	r1, r3
 8008062:	f00a f882 	bl	801216a <_ZN8touchgfx9GraphData8addValueEii>
    add(graph1);
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f007 ffff 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800806e:	4620      	mov	r0, r4
 8008070:	b005      	add	sp, #20
 8008072:	ecbd 8b02 	vpop	{d8}
 8008076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807a:	bf00      	nop

0800807c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800807c:	4770      	bx	lr

0800807e <_ZN19FrontendApplicationD0Ev>:
 800807e:	b510      	push	{r4, lr}
 8008080:	4604      	mov	r4, r0
 8008082:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8008086:	f019 ffec 	bl	8022062 <_ZdlPvj>
 800808a:	4620      	mov	r0, r4
 800808c:	bd10      	pop	{r4, pc}

0800808e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
    {
        model.tick();
 8008092:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8008096:	f000 f812 	bl	80080be <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800809a:	4620      	mov	r0, r4
    }
 800809c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80080a0:	f00e baba 	b.w	8016618 <_ZN8touchgfx11Application15handleTickEventEv>

080080a4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80080a4:	b510      	push	{r4, lr}
 80080a6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80080a8:	f7fa fc7c 	bl	80029a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80080ac:	4b01      	ldr	r3, [pc, #4]	; (80080b4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80080ae:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80080b0:	6023      	str	r3, [r4, #0]
}
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	08024a54 	.word	0x08024a54

080080b8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80080b8:	2200      	movs	r2, #0
 80080ba:	6002      	str	r2, [r0, #0]
{

}
 80080bc:	4770      	bx	lr

080080be <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80080be:	4770      	bx	lr

080080c0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80080c0:	4770      	bx	lr

080080c2 <_ZThn4_N16Screen1PresenterD1Ev>:
 80080c2:	3804      	subs	r0, #4
 80080c4:	4770      	bx	lr

080080c6 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80080c6:	4770      	bx	lr

080080c8 <_ZN16Screen1PresenterD0Ev>:
 80080c8:	b510      	push	{r4, lr}
 80080ca:	4604      	mov	r4, r0
 80080cc:	2110      	movs	r1, #16
 80080ce:	f019 ffc8 	bl	8022062 <_ZdlPvj>
 80080d2:	4620      	mov	r0, r4
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <_ZThn4_N16Screen1PresenterD0Ev>:
 80080d6:	f1a0 0004 	sub.w	r0, r0, #4
 80080da:	e7f5      	b.n	80080c8 <_ZN16Screen1PresenterD0Ev>

080080dc <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80080dc:	2200      	movs	r2, #0
    : view(v)
 80080de:	60c1      	str	r1, [r0, #12]
 80080e0:	6082      	str	r2, [r0, #8]
 80080e2:	4a04      	ldr	r2, [pc, #16]	; (80080f4 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 80080e4:	b510      	push	{r4, lr}
    : view(v)
 80080e6:	f102 0408 	add.w	r4, r2, #8
 80080ea:	3220      	adds	r2, #32
 80080ec:	6004      	str	r4, [r0, #0]
 80080ee:	6042      	str	r2, [r0, #4]
}
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	08024a98 	.word	0x08024a98

080080f8 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80080f8:	4770      	bx	lr
 80080fa:	0000      	movs	r0, r0
 80080fc:	0000      	movs	r0, r0
	...

08008100 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter++;
 8008100:	f500 4280 	add.w	r2, r0, #16384	; 0x4000
 8008104:	f8d2 1394 	ldr.w	r1, [r2, #916]	; 0x394
	tickCounter2++;
 8008108:	f8d2 3398 	ldr.w	r3, [r2, #920]	; 0x398
	tickCounter++;
 800810c:	3101      	adds	r1, #1
	tickCounter2++;
 800810e:	3301      	adds	r3, #1
	if(tickCounter == 10){
 8008110:	290a      	cmp	r1, #10
{
 8008112:	b510      	push	{r4, lr}
 8008114:	ed2d 8b02 	vpush	{d8}
	tickCounter++;
 8008118:	f8c2 1394 	str.w	r1, [r2, #916]	; 0x394
		tickCounter= 0;
 800811c:	bf08      	it	eq
 800811e:	2100      	moveq	r1, #0
	tickCounter2++;
 8008120:	f8c2 3398 	str.w	r3, [r2, #920]	; 0x398
{
 8008124:	4604      	mov	r4, r0
		tickCounter= 0;
 8008126:	bf08      	it	eq
 8008128:	f8c2 1394 	streq.w	r1, [r2, #916]	; 0x394
		//tickCounter2++;
	}

	//graph1.setGraphRangeX(0, 60+tickCounter2);
	if(tickCounter2 % 3 == 0)
 800812c:	2203      	movs	r2, #3
 800812e:	fb93 f2f2 	sdiv	r2, r3, r2
 8008132:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008136:	4293      	cmp	r3, r2
 8008138:	d12a      	bne.n	8008190 <_ZN11Screen1View15handleTickEventEv+0x90>
	{
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10);
 800813a:	ee07 3a90 	vmov	s15, r3
 800813e:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008142:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008198 <_ZN11Screen1View15handleTickEventEv+0x98>
 8008146:	ee20 0b07 	vmul.f64	d0, d0, d7
 800814a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800814e:	f019 fff7 	bl	8022140 <sinf>
 8008152:	eeb0 8a40 	vmov.f32	s16, s0
 8008156:	f01a fcf5 	bl	8022b44 <rand>
 800815a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800815e:	210a      	movs	r1, #10
 8008160:	ee38 0a00 	vadd.f32	s0, s16, s0
 8008164:	fb90 f3f1 	sdiv	r3, r0, r1
 8008168:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800816c:	fb03 0111 	mls	r1, r3, r1, r0
 8008170:	2028      	movs	r0, #40	; 0x28
 8008172:	ee10 3a10 	vmov	r3, s0
		//customGraph1.addPoint((sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, (float)tickCounter2);
		//graph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, tickCounter2);
	}
}
 8008176:	ecbd 8b02 	vpop	{d8}
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10);
 800817a:	fb00 1103 	mla	r1, r0, r3, r1
        return i * scale;
 800817e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
        return addDataPointScaled(int2scaledY(y));
 8008182:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 8008186:	4359      	muls	r1, r3
}
 8008188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800818c:	f009 bfd9 	b.w	8012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8008190:	ecbd 8b02 	vpop	{d8}
 8008194:	bd10      	pop	{r4, pc}
 8008196:	bf00      	nop
 8008198:	1eb851ec 	.word	0x1eb851ec
 800819c:	3fb1eb85 	.word	0x3fb1eb85

080081a0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <_ZN11Screen1ViewD1Ev+0x10>)
 80081a2:	b510      	push	{r4, lr}
 80081a4:	4604      	mov	r4, r0
 80081a6:	6003      	str	r3, [r0, #0]
 80081a8:	f7fb f972 	bl	8003490 <_ZN15Screen1ViewBaseD1Ev>
 80081ac:	4620      	mov	r0, r4
 80081ae:	bd10      	pop	{r4, pc}
 80081b0:	08024ac8 	.word	0x08024ac8

080081b4 <_ZN11Screen1ViewD0Ev>:
 80081b4:	b510      	push	{r4, lr}
 80081b6:	4604      	mov	r4, r0
 80081b8:	f7ff fff2 	bl	80081a0 <_ZN11Screen1ViewD1Ev>
 80081bc:	f244 31a4 	movw	r1, #17316	; 0x43a4
 80081c0:	4620      	mov	r0, r4
 80081c2:	f019 ff4e 	bl	8022062 <_ZdlPvj>
 80081c6:	4620      	mov	r0, r4
 80081c8:	bd10      	pop	{r4, pc}

080081ca <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void setupScreen();
    virtual void tearDownScreen();

	virtual void graph2Dragged(AbstractDataGraph::GraphDragEvent value)
 80081ca:	b507      	push	{r0, r1, r2, lr}
 80081cc:	ab02      	add	r3, sp, #8
 80081ce:	e903 0006 	stmdb	r3, {r1, r2}
 80081d2:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 80081d4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 80081d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	{
		// Override and implement this function in Screen1
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX()){
 80081dc:	429a      	cmp	r2, r3
 80081de:	dd0e      	ble.n	80081fe <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x34>
			Counter2 -= 1;
 80081e0:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 80081e4:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80081e8:	1e51      	subs	r1, r2, #1
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 80081ea:	3263      	adds	r2, #99	; 0x63
			Counter2 -= 1;
 80081ec:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
		}
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()){
			Counter2 += 1;
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 80081f0:	f600 701c 	addw	r0, r0, #3868	; 0xf1c
 80081f4:	f7fa fc86 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		}
	}
 80081f8:	b003      	add	sp, #12
 80081fa:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()){
 80081fe:	dafb      	bge.n	80081f8 <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2e>
			Counter2 += 1;
 8008200:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 8008204:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8008208:	1c51      	adds	r1, r2, #1
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 800820a:	3265      	adds	r2, #101	; 0x65
			Counter2 += 1;
 800820c:	f8c3 13a0 	str.w	r1, [r3, #928]	; 0x3a0
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 8008210:	e7ee      	b.n	80081f0 <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x26>
	...

08008214 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8008214:	b510      	push	{r4, lr}
 8008216:	4604      	mov	r4, r0
 8008218:	f7fb fa26 	bl	8003668 <_ZN15Screen1ViewBaseC1Ev>
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <_ZN11Screen1ViewC1Ev+0x20>)
 800821e:	2200      	movs	r2, #0
}
 8008220:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8008228:	e9c3 22e7 	strd	r2, r2, [r3, #924]	; 0x39c
	tickCounter2 = 0;
 800822c:	e9c3 22e5 	strd	r2, r2, [r3, #916]	; 0x394
}
 8008230:	bd10      	pop	{r4, pc}
 8008232:	bf00      	nop
 8008234:	08024ac8 	.word	0x08024ac8

08008238 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8008238:	f7fb b8a1 	b.w	800337e <_ZN15Screen1ViewBase11setupScreenEv>

0800823c <_ZN11customGraphD1Ev>:
 800823c:	4b03      	ldr	r3, [pc, #12]	; (800824c <_ZN11customGraphD1Ev+0x10>)
 800823e:	b510      	push	{r4, lr}
 8008240:	4604      	mov	r4, r0
 8008242:	6003      	str	r3, [r0, #0]
 8008244:	f7ff f97c 	bl	8007540 <_ZN15customGraphBaseD1Ev>
 8008248:	4620      	mov	r0, r4
 800824a:	bd10      	pop	{r4, pc}
 800824c:	08024b00 	.word	0x08024b00

08008250 <_ZN11customGraphD0Ev>:
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
 8008254:	f7ff fff2 	bl	800823c <_ZN11customGraphD1Ev>
 8008258:	f240 612c 	movw	r1, #1580	; 0x62c
 800825c:	4620      	mov	r0, r4
 800825e:	f019 ff00 	bl	8022062 <_ZdlPvj>
 8008262:	4620      	mov	r0, r4
 8008264:	bd10      	pop	{r4, pc}

08008266 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:

    virtual void initialize();

    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8008266:	b507      	push	{r0, r1, r2, lr}
 8008268:	ab02      	add	r3, sp, #8
 800826a:	e903 0006 	stmdb	r3, {r1, r2}
 800826e:	4613      	mov	r3, r2
        return dragNewX;
 8008270:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 8008274:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	{
		// Override and implement this function in customGraph
    	// Override and implement this function in customGraph
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && Counter>-100){
 8008278:	429a      	cmp	r2, r3
 800827a:	dd0e      	ble.n	800829a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x34>
 800827c:	f8d0 2628 	ldr.w	r2, [r0, #1576]	; 0x628
 8008280:	f112 0f63 	cmn.w	r2, #99	; 0x63
 8008284:	db06      	blt.n	8008294 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2e>
			Counter -= 1;
 8008286:	1e51      	subs	r1, r2, #1
			graph1.setGraphRangeX(0 + Counter, 50 + Counter);
 8008288:	3231      	adds	r2, #49	; 0x31
			Counter -= 1;
 800828a:	f8c0 1628 	str.w	r1, [r0, #1576]	; 0x628
		}
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && 50+Counter<100){
			Counter += 1;
			graph1.setGraphRangeX(0 + Counter, 50 + Counter);
 800828e:	3058      	adds	r0, #88	; 0x58
 8008290:	f7fa fc38 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		}
	}
 8008294:	b003      	add	sp, #12
 8008296:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && 50+Counter<100){
 800829a:	dafb      	bge.n	8008294 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2e>
 800829c:	f8d0 2628 	ldr.w	r2, [r0, #1576]	; 0x628
 80082a0:	2a31      	cmp	r2, #49	; 0x31
 80082a2:	dcf7      	bgt.n	8008294 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2e>
			Counter += 1;
 80082a4:	1c51      	adds	r1, r2, #1
			graph1.setGraphRangeX(0 + Counter, 50 + Counter);
 80082a6:	3233      	adds	r2, #51	; 0x33
			Counter += 1;
 80082a8:	f8c0 1628 	str.w	r1, [r0, #1576]	; 0x628
			graph1.setGraphRangeX(0 + Counter, 50 + Counter);
 80082ac:	e7ef      	b.n	800828e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x28>
	...

080082b0 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 80082b0:	b510      	push	{r4, lr}
 80082b2:	4604      	mov	r4, r0
 80082b4:	f7ff f980 	bl	80075b8 <_ZN15customGraphBaseC1Ev>
 80082b8:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <_ZN11customGraphC1Ev+0x18>)
{

}
 80082ba:	4620      	mov	r0, r4
customGraph::customGraph()
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c4 3628 	str.w	r3, [r4, #1576]	; 0x628
}
 80082c4:	bd10      	pop	{r4, pc}
 80082c6:	bf00      	nop
 80082c8:	08024b00 	.word	0x08024b00

080082cc <_ZN11customGraph10initializeEv>:

void customGraph::initialize()
{
 80082cc:	b510      	push	{r4, lr}
 80082ce:	4604      	mov	r4, r0
    customGraphBase::initialize();
 80082d0:	f7ff f937 	bl	8007542 <_ZN15customGraphBase10initializeEv>
    customGraphBase::graph1.setGraphRangeX(0, 50);
 80082d4:	2232      	movs	r2, #50	; 0x32
 80082d6:	2100      	movs	r1, #0
 80082d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082dc:	f7fa fc12 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
}
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80082e2:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80082e4:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 80082e8:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80082ea:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80082ec:	2302      	movs	r3, #2
 80082ee:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80082f0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80082f4:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80082f8:	4770      	bx	lr

080082fa <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80082fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80082fe:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8008300:	bf04      	itt	eq
 8008302:	2300      	moveq	r3, #0
 8008304:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 8008308:	2000      	movs	r0, #0
 800830a:	4770      	bx	lr

0800830c <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800830c:	2000      	movs	r0, #0
 800830e:	4770      	bx	lr

08008310 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8008310:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008312:	6904      	ldr	r4, [r0, #16]
 8008314:	8900      	ldrh	r0, [r0, #8]
 8008316:	46a4      	mov	ip, r4
}
 8008318:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800831c:	4760      	bx	ip

0800831e <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800831e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008320:	68c4      	ldr	r4, [r0, #12]
 8008322:	8900      	ldrh	r0, [r0, #8]
 8008324:	46a4      	mov	ip, r4
}
 8008326:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800832a:	4760      	bx	ip

0800832c <FT6X06_GestureConfig>:
{
 800832c:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008330:	f100 0818 	add.w	r8, r0, #24
{
 8008334:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8008336:	7809      	ldrb	r1, [r1, #0]
 8008338:	4640      	mov	r0, r8
 800833a:	f000 f917 	bl	800856c <ft6x06_radian_value>
 800833e:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8008340:	f899 1004 	ldrb.w	r1, [r9, #4]
 8008344:	4640      	mov	r0, r8
 8008346:	f000 f91d 	bl	8008584 <ft6x06_offset_left_right>
 800834a:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800834c:	f899 1008 	ldrb.w	r1, [r9, #8]
 8008350:	4640      	mov	r0, r8
 8008352:	f000 f923 	bl	800859c <ft6x06_offset_up_down>
 8008356:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8008358:	f899 100c 	ldrb.w	r1, [r9, #12]
 800835c:	4640      	mov	r0, r8
 800835e:	f000 f929 	bl	80085b4 <ft6x06_disatnce_left_right>
 8008362:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8008364:	f899 1010 	ldrb.w	r1, [r9, #16]
 8008368:	4640      	mov	r0, r8
 800836a:	f000 f92f 	bl	80085cc <ft6x06_distance_up_down>
 800836e:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8008370:	f899 1014 	ldrb.w	r1, [r9, #20]
 8008374:	4640      	mov	r0, r8
 8008376:	f000 f935 	bl	80085e4 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800837a:	42c5      	cmn	r5, r0
}
 800837c:	bf14      	ite	ne
 800837e:	f04f 30ff 	movne.w	r0, #4294967295
 8008382:	2000      	moveq	r0, #0
 8008384:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08008388 <FT6X06_ReadID>:
{
 8008388:	b513      	push	{r0, r1, r4, lr}
 800838a:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800838c:	3018      	adds	r0, #24
 800838e:	f10d 0107 	add.w	r1, sp, #7
 8008392:	f000 f93f 	bl	8008614 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8008396:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800839a:	6023      	str	r3, [r4, #0]
}
 800839c:	b002      	add	sp, #8
 800839e:	bd10      	pop	{r4, pc}

080083a0 <FT6X06_GetState>:
{
 80083a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80083a2:	f100 0518 	add.w	r5, r0, #24
{
 80083a6:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80083a8:	a901      	add	r1, sp, #4
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 f8d1 	bl	8008552 <ft6x06_td_status>
 80083b0:	bb08      	cbnz	r0, 80083f6 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80083b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	bf98      	it	ls
 80083ba:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80083bc:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80083be:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80083c0:	2103      	movs	r1, #3
 80083c2:	4628      	mov	r0, r5
 80083c4:	eb0d 0203 	add.w	r2, sp, r3
 80083c8:	f000 f8b0 	bl	800852c <ft6x06_read_reg>
 80083cc:	b9b0      	cbnz	r0, 80083fc <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80083ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80083d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083dc:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80083de:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80083e2:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80083e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60a3      	str	r3, [r4, #8]
}
 80083f2:	b003      	add	sp, #12
 80083f4:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80083f6:	f04f 30ff 	mov.w	r0, #4294967295
 80083fa:	e7df      	b.n	80083bc <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8008400:	e7f7      	b.n	80083f2 <FT6X06_GetState+0x52>

08008402 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8008402:	3018      	adds	r0, #24
 8008404:	f000 b8a0 	b.w	8008548 <ft6x06_gest_id>

08008408 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8008408:	2101      	movs	r1, #1
 800840a:	3018      	adds	r0, #24
 800840c:	f000 b8f6 	b.w	80085fc <ft6x06_g_mode>

08008410 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8008410:	2100      	movs	r1, #0
 8008412:	3018      	adds	r0, #24
 8008414:	f000 b8f2 	b.w	80085fc <ft6x06_g_mode>

08008418 <FT6X06_Init>:
{
 8008418:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800841a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800841e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8008420:	b96b      	cbnz	r3, 800843e <FT6X06_Init+0x26>
    pObj->IO.Init();
 8008422:	6803      	ldr	r3, [r0, #0]
 8008424:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8008426:	4620      	mov	r0, r4
 8008428:	f7ff fff2 	bl	8008410 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800842c:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800842e:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8008432:	bf18      	it	ne
 8008434:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8008436:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 800843a:	4240      	negs	r0, r0
}
 800843c:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 800843e:	2000      	movs	r0, #0
  return ret;
 8008440:	e7fc      	b.n	800843c <FT6X06_Init+0x24>

08008442 <FT6X06_ClearIT>:
 8008442:	2000      	movs	r0, #0
 8008444:	4770      	bx	lr

08008446 <FT6X06_GetMultiTouchState>:
{
 8008446:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008448:	f100 0518 	add.w	r5, r0, #24
{
 800844c:	b085      	sub	sp, #20
 800844e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8008450:	4628      	mov	r0, r5
 8008452:	a901      	add	r1, sp, #4
 8008454:	f000 f87d 	bl	8008552 <ft6x06_td_status>
 8008458:	2800      	cmp	r0, #0
 800845a:	d145      	bne.n	80084e8 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800845c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8008460:	2b02      	cmp	r3, #2
 8008462:	bf98      	it	ls
 8008464:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8008466:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8008468:	230c      	movs	r3, #12
 800846a:	aa01      	add	r2, sp, #4
 800846c:	2103      	movs	r1, #3
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f85c 	bl	800852c <ft6x06_read_reg>
 8008474:	2800      	cmp	r0, #0
 8008476:	d13a      	bne.n	80084ee <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008478:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800847c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8008480:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008482:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008484:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8008488:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800848a:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800848c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8008490:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8008494:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8008496:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80084a0:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80084a2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80084a6:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80084a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80084ac:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80084ae:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80084b2:	091b      	lsrs	r3, r3, #4
 80084b4:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80084b6:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80084b8:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80084ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80084be:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80084c0:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80084c2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80084c6:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80084c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 80084d6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80084da:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80084dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80084e0:	091b      	lsrs	r3, r3, #4
 80084e2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80084e4:	b005      	add	sp, #20
 80084e6:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	e7bb      	b.n	8008466 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80084f2:	e7f7      	b.n	80084e4 <FT6X06_GetMultiTouchState+0x9e>

080084f4 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80084f4:	b190      	cbz	r0, 800851c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80084f6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80084f8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80084fa:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80084fc:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80084fe:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8008500:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008502:	68ca      	ldr	r2, [r1, #12]
 8008504:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8008506:	690a      	ldr	r2, [r1, #16]
 8008508:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800850a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800850c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800850e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8008510:	4a04      	ldr	r2, [pc, #16]	; (8008524 <FT6X06_RegisterBusIO+0x30>)
 8008512:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8008514:	4a04      	ldr	r2, [pc, #16]	; (8008528 <FT6X06_RegisterBusIO+0x34>)
 8008516:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8008518:	b103      	cbz	r3, 800851c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800851a:	4718      	bx	r3
}
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	08008311 	.word	0x08008311
 8008528:	0800831f 	.word	0x0800831f

0800852c <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800852c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800852e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8008532:	46a4      	mov	ip, r4
}
 8008534:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8008538:	4760      	bx	ip

0800853a <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800853a:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800853c:	6804      	ldr	r4, [r0, #0]
 800853e:	6880      	ldr	r0, [r0, #8]
 8008540:	46a4      	mov	ip, r4
}
 8008542:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8008546:	4760      	bx	ip

08008548 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8008548:	2301      	movs	r3, #1
{
 800854a:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800854c:	4619      	mov	r1, r3
 800854e:	f7ff bfed 	b.w	800852c <ft6x06_read_reg>

08008552 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008552:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008554:	460a      	mov	r2, r1
{
 8008556:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8008558:	2301      	movs	r3, #1
 800855a:	2102      	movs	r1, #2
 800855c:	f7ff ffe6 	bl	800852c <ft6x06_read_reg>
  
  if(ret == 0)
 8008560:	b918      	cbnz	r0, 800856a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8008562:	7823      	ldrb	r3, [r4, #0]
 8008564:	f003 030f 	and.w	r3, r3, #15
 8008568:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800856a:	bd10      	pop	{r4, pc}

0800856c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800856c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800856e:	2301      	movs	r3, #1
{
 8008570:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8008574:	f10d 0207 	add.w	r2, sp, #7
 8008578:	2191      	movs	r1, #145	; 0x91
 800857a:	f7ff ffde 	bl	800853a <ft6x06_write_reg>
}
 800857e:	b003      	add	sp, #12
 8008580:	f85d fb04 	ldr.w	pc, [sp], #4

08008584 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8008584:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8008586:	2301      	movs	r3, #1
{
 8008588:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800858c:	f10d 0207 	add.w	r2, sp, #7
 8008590:	2192      	movs	r1, #146	; 0x92
 8008592:	f7ff ffd2 	bl	800853a <ft6x06_write_reg>
}
 8008596:	b003      	add	sp, #12
 8008598:	f85d fb04 	ldr.w	pc, [sp], #4

0800859c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800859c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800859e:	2301      	movs	r3, #1
{
 80085a0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80085a4:	f10d 0207 	add.w	r2, sp, #7
 80085a8:	2193      	movs	r1, #147	; 0x93
 80085aa:	f7ff ffc6 	bl	800853a <ft6x06_write_reg>
}
 80085ae:	b003      	add	sp, #12
 80085b0:	f85d fb04 	ldr.w	pc, [sp], #4

080085b4 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80085b4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80085b6:	2301      	movs	r3, #1
{
 80085b8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80085bc:	f10d 0207 	add.w	r2, sp, #7
 80085c0:	2194      	movs	r1, #148	; 0x94
 80085c2:	f7ff ffba 	bl	800853a <ft6x06_write_reg>
}
 80085c6:	b003      	add	sp, #12
 80085c8:	f85d fb04 	ldr.w	pc, [sp], #4

080085cc <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80085cc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80085ce:	2301      	movs	r3, #1
{
 80085d0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 80085d4:	f10d 0207 	add.w	r2, sp, #7
 80085d8:	2195      	movs	r1, #149	; 0x95
 80085da:	f7ff ffae 	bl	800853a <ft6x06_write_reg>
}
 80085de:	b003      	add	sp, #12
 80085e0:	f85d fb04 	ldr.w	pc, [sp], #4

080085e4 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80085e4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80085e6:	2301      	movs	r3, #1
{
 80085e8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80085ec:	f10d 0207 	add.w	r2, sp, #7
 80085f0:	2196      	movs	r1, #150	; 0x96
 80085f2:	f7ff ffa2 	bl	800853a <ft6x06_write_reg>
}
 80085f6:	b003      	add	sp, #12
 80085f8:	f85d fb04 	ldr.w	pc, [sp], #4

080085fc <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80085fc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80085fe:	2301      	movs	r3, #1
{
 8008600:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8008604:	f10d 0207 	add.w	r2, sp, #7
 8008608:	21a4      	movs	r1, #164	; 0xa4
 800860a:	f7ff ff96 	bl	800853a <ft6x06_write_reg>
}
 800860e:	b003      	add	sp, #12
 8008610:	f85d fb04 	ldr.w	pc, [sp], #4

08008614 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8008614:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8008616:	2301      	movs	r3, #1
 8008618:	21a8      	movs	r1, #168	; 0xa8
 800861a:	f7ff bf87 	b.w	800852c <ft6x06_read_reg>
	...

08008620 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008620:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8008622:	2201      	movs	r2, #1
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8008626:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800862a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800862c:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800862e:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8008630:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008636:	f005 f961 	bl	800d8fc <HAL_SDRAM_SendCommand>
 800863a:	3800      	subs	r0, #0
 800863c:	bf18      	it	ne
 800863e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8008640:	4240      	negs	r0, r0
 8008642:	bd08      	pop	{r3, pc}
 8008644:	240058d4 	.word	0x240058d4

08008648 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8008648:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800864a:	2202      	movs	r2, #2
 800864c:	4b08      	ldr	r3, [pc, #32]	; (8008670 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800864e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8008652:	2101      	movs	r1, #1
 8008654:	2200      	movs	r2, #0
 8008656:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800865a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800865e:	4619      	mov	r1, r3
 8008660:	f005 f94c 	bl	800d8fc <HAL_SDRAM_SendCommand>
 8008664:	3800      	subs	r0, #0
 8008666:	bf18      	it	ne
 8008668:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800866a:	4240      	negs	r0, r0
 800866c:	bd08      	pop	{r3, pc}
 800866e:	bf00      	nop
 8008670:	240058d4 	.word	0x240058d4

08008674 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008674:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8008678:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800867a:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800867c:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800867e:	4c0b      	ldr	r4, [pc, #44]	; (80086ac <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8008680:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8008682:	698a      	ldr	r2, [r1, #24]
 8008684:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8008686:	69ca      	ldr	r2, [r1, #28]
 8008688:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800868a:	2204      	movs	r2, #4
 800868c:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800868e:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8008690:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8008692:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8008694:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8008696:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800869a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800869e:	f005 f92d 	bl	800d8fc <HAL_SDRAM_SendCommand>
 80086a2:	3800      	subs	r0, #0
 80086a4:	bf18      	it	ne
 80086a6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80086a8:	4240      	negs	r0, r0
 80086aa:	bd10      	pop	{r4, pc}
 80086ac:	240058d4 	.word	0x240058d4

080086b0 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80086b0:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80086b2:	4b08      	ldr	r3, [pc, #32]	; (80086d4 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80086b4:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80086b8:	2108      	movs	r1, #8
 80086ba:	2200      	movs	r2, #0
 80086bc:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80086c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086c4:	4619      	mov	r1, r3
 80086c6:	f005 f919 	bl	800d8fc <HAL_SDRAM_SendCommand>
 80086ca:	3800      	subs	r0, #0
 80086cc:	bf18      	it	ne
 80086ce:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80086d0:	4240      	negs	r0, r0
 80086d2:	bd08      	pop	{r3, pc}
 80086d4:	240058d4 	.word	0x240058d4

080086d8 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80086d8:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80086da:	f005 f92e 	bl	800d93a <HAL_SDRAM_ProgramRefreshRate>
 80086de:	3800      	subs	r0, #0
 80086e0:	bf18      	it	ne
 80086e2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80086e4:	4240      	negs	r0, r0
 80086e6:	bd08      	pop	{r3, pc}

080086e8 <IS42S32800J_Init>:
{
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80086ec:	6809      	ldr	r1, [r1, #0]
{
 80086ee:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80086f0:	f7ff ff96 	bl	8008620 <IS42S32800J_ClockEnable>
 80086f4:	b110      	cbz	r0, 80086fc <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80086f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80086fc:	f001 fc98 	bl	800a030 <HAL_GetTick>
 8008700:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8008702:	f001 fc95 	bl	800a030 <HAL_GetTick>
 8008706:	4286      	cmp	r6, r0
 8008708:	d0fb      	beq.n	8008702 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800870a:	6821      	ldr	r1, [r4, #0]
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff ff9b 	bl	8008648 <IS42S32800J_Precharge>
 8008712:	2800      	cmp	r0, #0
 8008714:	d1ef      	bne.n	80086f6 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8008716:	4628      	mov	r0, r5
 8008718:	e9d4 1200 	ldrd	r1, r2, [r4]
 800871c:	f7ff ffc8 	bl	80086b0 <IS42S32800J_RefreshMode>
 8008720:	2800      	cmp	r0, #0
 8008722:	d1e8      	bne.n	80086f6 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f7ff ffa4 	bl	8008674 <IS42S32800J_ModeRegConfig>
 800872c:	2800      	cmp	r0, #0
 800872e:	d1e2      	bne.n	80086f6 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8008730:	68a1      	ldr	r1, [r4, #8]
 8008732:	4628      	mov	r0, r5
 8008734:	f7ff ffd0 	bl	80086d8 <IS42S32800J_RefreshRate>
 8008738:	3800      	subs	r0, #0
 800873a:	bf18      	it	ne
 800873c:	2001      	movne	r0, #1
 800873e:	4240      	negs	r0, r0
  return ret;
 8008740:	e7db      	b.n	80086fa <IS42S32800J_Init+0x12>

08008742 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8008742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800874a:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800874e:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8008752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008756:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800875a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800875e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8008760:	2000      	movs	r0, #0
 8008762:	4770      	bx	lr

08008764 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008764:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008766:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800876a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800876c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008770:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008772:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8008774:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 8008776:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8008778:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800877a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800877c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800877e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008780:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8008782:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8008784:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8008786:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008788:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800878a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800878e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8008792:	2310      	movs	r3, #16
 8008794:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8008796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800879a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800879c:	f240 1301 	movw	r3, #257	; 0x101
 80087a0:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80087a6:	f003 fc88 	bl	800c0ba <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80087aa:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 80087ac:	bf14      	ite	ne
 80087ae:	f06f 0004 	mvnne.w	r0, #4
 80087b2:	2000      	moveq	r0, #0
 80087b4:	b015      	add	sp, #84	; 0x54
 80087b6:	f85d fb04 	ldr.w	pc, [sp], #4

080087ba <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80087ba:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087bc:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80087c0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80087c2:	bf08      	it	eq
 80087c4:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80087c8:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80087ca:	bf18      	it	ne
 80087cc:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80087d0:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087d2:	a906      	add	r1, sp, #24
{
 80087d4:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80087d6:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 80087d8:	2306      	movs	r3, #6
 80087da:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80087dc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80087de:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80087e2:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80087e4:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80087e6:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80087e8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80087ec:	f003 fb6a 	bl	800bec4 <HAL_QSPI_Command>
 80087f0:	bb20      	cbnz	r0, 800883c <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80087f2:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80087f6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80087f8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80087fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80087fe:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008800:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8008802:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8008806:	f04f 0310 	mov.w	r3, #16
 800880a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800880e:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008812:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8008814:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008818:	bf0c      	ite	eq
 800881a:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 800881e:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008822:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8008824:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008826:	f241 3388 	movw	r3, #5000	; 0x1388
 800882a:	f003 fc46 	bl	800c0ba <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800882e:	2800      	cmp	r0, #0
 8008830:	bf0c      	ite	eq
 8008832:	2000      	moveq	r0, #0
 8008834:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8008838:	b015      	add	sp, #84	; 0x54
 800883a:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800883c:	f06f 0001 	mvn.w	r0, #1
 8008840:	e7fa      	b.n	8008838 <MT25TL01G_WriteEnable+0x7e>

08008842 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008842:	2903      	cmp	r1, #3
{
 8008844:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008846:	bf08      	it	eq
 8008848:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800884c:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800884e:	bf18      	it	ne
 8008850:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8008854:	4604      	mov	r4, r0
 8008856:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008858:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800885a:	23b7      	movs	r3, #183	; 0xb7
 800885c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800885e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008860:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008864:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8008866:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008868:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800886a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800886e:	f7ff ffa4 	bl	80087ba <MT25TL01G_WriteEnable>
 8008872:	b958      	cbnz	r0, 800888c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008874:	f241 3288 	movw	r2, #5000	; 0x1388
 8008878:	4669      	mov	r1, sp
 800887a:	4620      	mov	r0, r4
 800887c:	f003 fb22 	bl	800bec4 <HAL_QSPI_Command>
 8008880:	b920      	cbnz	r0, 800888c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8008882:	4629      	mov	r1, r5
 8008884:	4620      	mov	r0, r4
 8008886:	f7ff ff6d 	bl	8008764 <MT25TL01G_AutoPollingMemReady>
 800888a:	b108      	cbz	r0, 8008890 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800888c:	f06f 0001 	mvn.w	r0, #1
}
 8008890:	b00f      	add	sp, #60	; 0x3c
 8008892:	bd30      	pop	{r4, r5, pc}

08008894 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8008894:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008896:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800889a:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80088a0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80088a2:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088a4:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80088a6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80088a8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80088aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80088ae:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80088b0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80088b2:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80088b4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088b8:	f003 fb04 	bl	800bec4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80088bc:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80088be:	bf14      	ite	ne
 80088c0:	f06f 0001 	mvnne.w	r0, #1
 80088c4:	2000      	moveq	r0, #0
 80088c6:	b00f      	add	sp, #60	; 0x3c
 80088c8:	f85d fb04 	ldr.w	pc, [sp], #4

080088cc <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80088cc:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80088ce:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80088d2:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088d4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80088d8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80088da:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088dc:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80088de:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80088e0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80088e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80088e6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80088e8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80088ea:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80088ec:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80088f0:	f003 fae8 	bl	800bec4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80088f4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80088f6:	bf14      	ite	ne
 80088f8:	f06f 0001 	mvnne.w	r0, #1
 80088fc:	2000      	moveq	r0, #0
 80088fe:	b00f      	add	sp, #60	; 0x3c
 8008900:	f85d fb04 	ldr.w	pc, [sp], #4

08008904 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008904:	b500      	push	{lr}
 8008906:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8008908:	2903      	cmp	r1, #3
 800890a:	d80e      	bhi.n	800892a <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800890c:	e8df f001 	tbb	[pc, r1]
 8008910:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008914:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008918:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800891a:	230e      	movs	r3, #14
 800891c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800891e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008922:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8008924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008928:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800892a:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800892c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008930:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008934:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8008936:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800893c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800893e:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8008940:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8008944:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008946:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008948:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800894a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800894e:	f003 fc04 	bl	800c15a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8008952:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8008954:	bf14      	ite	ne
 8008956:	f06f 0005 	mvnne.w	r0, #5
 800895a:	2000      	moveq	r0, #0
 800895c:	b011      	add	sp, #68	; 0x44
 800895e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008966:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8008968:	233d      	movs	r3, #61	; 0x3d
 800896a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800896c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008970:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8008972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008976:	e7d7      	b.n	8008928 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800897c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800897e:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8008980:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008982:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008986:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008988:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800898c:	e7cc      	b.n	8008928 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800898e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008992:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8008994:	23ed      	movs	r3, #237	; 0xed
 8008996:	e7f3      	b.n	8008980 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08008998 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8008998:	b500      	push	{lr}
 800899a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800899c:	2903      	cmp	r1, #3
 800899e:	d80e      	bhi.n	80089be <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80089a0:	e8df f001 	tbb	[pc, r1]
 80089a4:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80089a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ac:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80089ae:	230c      	movs	r3, #12
 80089b0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80089b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089b6:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80089b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80089bc:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80089be:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80089c0:	466a      	mov	r2, sp
 80089c2:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80089c4:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80089c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80089ca:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80089d0:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80089d2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80089d6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80089da:	f003 fbbe 	bl	800c15a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80089de:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80089e0:	bf14      	ite	ne
 80089e2:	f06f 0005 	mvnne.w	r0, #5
 80089e6:	2000      	moveq	r0, #0
 80089e8:	b011      	add	sp, #68	; 0x44
 80089ea:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80089ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089f2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80089f4:	23bc      	movs	r3, #188	; 0xbc
 80089f6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80089f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089fc:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80089fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a02:	e7db      	b.n	80089bc <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8008a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a08:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8008a0a:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8008a0c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8008a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008a12:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8008a14:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8008a18:	e7d0      	b.n	80089bc <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8008a1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a1e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8008a20:	23eb      	movs	r3, #235	; 0xeb
 8008a22:	e7f3      	b.n	8008a0c <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08008a24 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a24:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a26:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8008a2a:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a2c:	bf08      	it	eq
 8008a2e:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8008a32:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a34:	bf18      	it	ne
 8008a36:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a3a:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a3c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8008a3e:	2366      	movs	r3, #102	; 0x66
 8008a40:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008a42:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008a44:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008a48:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8008a4a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008a4c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008a4e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a52:	f003 fa37 	bl	800bec4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8008a56:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8008a58:	bf14      	ite	ne
 8008a5a:	f06f 0001 	mvnne.w	r0, #1
 8008a5e:	2000      	moveq	r0, #0
 8008a60:	b00f      	add	sp, #60	; 0x3c
 8008a62:	f85d fb04 	ldr.w	pc, [sp], #4

08008a66 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a66:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a68:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8008a6c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a6e:	bf08      	it	eq
 8008a70:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8008a74:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a76:	bf18      	it	ne
 8008a78:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a7c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8008a7e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8008a80:	2399      	movs	r3, #153	; 0x99
 8008a82:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8008a84:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8008a86:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8008a8a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8008a8c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8008a8e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8008a90:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a94:	f003 fa16 	bl	800bec4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8008a98:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8008a9a:	bf14      	ite	ne
 8008a9c:	f06f 0001 	mvnne.w	r0, #1
 8008aa0:	2000      	moveq	r0, #0
 8008aa2:	b00f      	add	sp, #60	; 0x3c
 8008aa4:	f85d fb04 	ldr.w	pc, [sp], #4

08008aa8 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8008aa8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008aaa:	6884      	ldr	r4, [r0, #8]
 8008aac:	8800      	ldrh	r0, [r0, #0]
 8008aae:	46a4      	mov	ip, r4
}
 8008ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008ab4:	4760      	bx	ip

08008ab6 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ab6:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008ab8:	6844      	ldr	r4, [r0, #4]
 8008aba:	8800      	ldrh	r0, [r0, #0]
 8008abc:	46a4      	mov	ip, r4
}
 8008abe:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8008ac2:	4760      	bx	ip

08008ac4 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8008ac4:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8008ac6:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8008ac8:	4604      	mov	r4, r0
 8008aca:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8008acc:	4798      	blx	r3
 8008ace:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8008ad0:	68e3      	ldr	r3, [r4, #12]
 8008ad2:	4798      	blx	r3
 8008ad4:	1b83      	subs	r3, r0, r6
 8008ad6:	42ab      	cmp	r3, r5
 8008ad8:	d3fa      	bcc.n	8008ad0 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8008ada:	bd70      	pop	{r4, r5, r6, pc}

08008adc <OTM8009A_Init>:
{
 8008adc:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f100 0810 	add.w	r8, r0, #16
{
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008aec:	4619      	mov	r1, r3
 8008aee:	4add      	ldr	r2, [pc, #884]	; (8008e64 <OTM8009A_Init+0x388>)
 8008af0:	4640      	mov	r0, r8
 8008af2:	f000 fbad 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008af6:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008af8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008afa:	4adb      	ldr	r2, [pc, #876]	; (8008e68 <OTM8009A_Init+0x38c>)
 8008afc:	21ff      	movs	r1, #255	; 0xff
 8008afe:	4640      	mov	r0, r8
 8008b00:	f000 fba6 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008b04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8008b06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008b08:	4ad8      	ldr	r2, [pc, #864]	; (8008e6c <OTM8009A_Init+0x390>)
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	f000 fb9f 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008b12:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008b14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008b16:	4ad6      	ldr	r2, [pc, #856]	; (8008e70 <OTM8009A_Init+0x394>)
 8008b18:	21ff      	movs	r1, #255	; 0xff
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f000 fb98 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008b20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8008b22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008b24:	4ad1      	ldr	r2, [pc, #836]	; (8008e6c <OTM8009A_Init+0x390>)
 8008b26:	4619      	mov	r1, r3
 8008b28:	4640      	mov	r0, r8
 8008b2a:	f000 fb91 	bl	8009250 <otm8009a_write_reg>
 8008b2e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8008b30:	2300      	movs	r3, #0
 8008b32:	4ad0      	ldr	r2, [pc, #832]	; (8008e74 <OTM8009A_Init+0x398>)
 8008b34:	21c4      	movs	r1, #196	; 0xc4
 8008b36:	4640      	mov	r0, r8
 8008b38:	f000 fb8a 	bl	8009250 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8008b3c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8008b3e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8008b40:	4650      	mov	r0, sl
 8008b42:	f7ff ffbf 	bl	8008ac4 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8008b46:	2300      	movs	r3, #0
 8008b48:	4acb      	ldr	r2, [pc, #812]	; (8008e78 <OTM8009A_Init+0x39c>)
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	4dcb      	ldr	r5, [pc, #812]	; (8008e7c <OTM8009A_Init+0x3a0>)
 8008b50:	f000 fb7e 	bl	8009250 <otm8009a_write_reg>
 8008b54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8008b56:	2300      	movs	r3, #0
 8008b58:	4ac9      	ldr	r2, [pc, #804]	; (8008e80 <OTM8009A_Init+0x3a4>)
 8008b5a:	21c4      	movs	r1, #196	; 0xc4
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	f000 fb77 	bl	8009250 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8008b62:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8008b64:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8008b66:	4650      	mov	r0, sl
 8008b68:	f7ff ffac 	bl	8008ac4 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4ac5      	ldr	r2, [pc, #788]	; (8008e84 <OTM8009A_Init+0x3a8>)
 8008b70:	4640      	mov	r0, r8
 8008b72:	4619      	mov	r1, r3
 8008b74:	f000 fb6c 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8008b78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8008b7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8008b7c:	4ac2      	ldr	r2, [pc, #776]	; (8008e88 <OTM8009A_Init+0x3ac>)
 8008b7e:	21c5      	movs	r1, #197	; 0xc5
 8008b80:	4640      	mov	r0, r8
 8008b82:	f000 fb65 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8008b86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8008b88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8008b8a:	4ac0      	ldr	r2, [pc, #768]	; (8008e8c <OTM8009A_Init+0x3b0>)
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4640      	mov	r0, r8
 8008b90:	f000 fb5e 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008b94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8008b96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008b98:	4abd      	ldr	r2, [pc, #756]	; (8008e90 <OTM8009A_Init+0x3b4>)
 8008b9a:	21c5      	movs	r1, #197	; 0xc5
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	f000 fb57 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8008ba2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008ba4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8008ba6:	4abb      	ldr	r2, [pc, #748]	; (8008e94 <OTM8009A_Init+0x3b8>)
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4640      	mov	r0, r8
 8008bac:	f000 fb50 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8008bb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8008bb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8008bb4:	4ab8      	ldr	r2, [pc, #736]	; (8008e98 <OTM8009A_Init+0x3bc>)
 8008bb6:	21c0      	movs	r1, #192	; 0xc0
 8008bb8:	4640      	mov	r0, r8
 8008bba:	f000 fb49 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008bbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8008bc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008bc2:	4aa8      	ldr	r2, [pc, #672]	; (8008e64 <OTM8009A_Init+0x388>)
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	f000 fb42 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8008bcc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008bce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8008bd0:	4ab2      	ldr	r2, [pc, #712]	; (8008e9c <OTM8009A_Init+0x3c0>)
 8008bd2:	21d9      	movs	r1, #217	; 0xd9
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	f000 fb3b 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008bda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8008bdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008bde:	4ab0      	ldr	r2, [pc, #704]	; (8008ea0 <OTM8009A_Init+0x3c4>)
 8008be0:	4619      	mov	r1, r3
 8008be2:	4640      	mov	r0, r8
 8008be4:	f000 fb34 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8008be8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008bea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8008bec:	4aad      	ldr	r2, [pc, #692]	; (8008ea4 <OTM8009A_Init+0x3c8>)
 8008bee:	21c1      	movs	r1, #193	; 0xc1
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	f000 fb2d 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8008bf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008bfa:	4aab      	ldr	r2, [pc, #684]	; (8008ea8 <OTM8009A_Init+0x3cc>)
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4640      	mov	r0, r8
 8008c00:	f000 fb26 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8008c04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008c06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8008c08:	4aa8      	ldr	r2, [pc, #672]	; (8008eac <OTM8009A_Init+0x3d0>)
 8008c0a:	21c1      	movs	r1, #193	; 0xc1
 8008c0c:	4640      	mov	r0, r8
 8008c0e:	f000 fb1f 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8008c12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8008c14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8008c16:	4aa6      	ldr	r2, [pc, #664]	; (8008eb0 <OTM8009A_Init+0x3d4>)
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f000 fb18 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8008c20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8008c22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8008c24:	4aa3      	ldr	r2, [pc, #652]	; (8008eb4 <OTM8009A_Init+0x3d8>)
 8008c26:	21c5      	movs	r1, #197	; 0xc5
 8008c28:	4640      	mov	r0, r8
 8008c2a:	f000 fb11 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8008c2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8008c30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8008c32:	4aa1      	ldr	r2, [pc, #644]	; (8008eb8 <OTM8009A_Init+0x3dc>)
 8008c34:	4619      	mov	r1, r3
 8008c36:	4640      	mov	r0, r8
 8008c38:	f000 fb0a 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008c3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8008c3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008c40:	4a93      	ldr	r2, [pc, #588]	; (8008e90 <OTM8009A_Init+0x3b4>)
 8008c42:	21c5      	movs	r1, #197	; 0xc5
 8008c44:	4640      	mov	r0, r8
 8008c46:	f000 fb03 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008c4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8008c4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008c4e:	4a85      	ldr	r2, [pc, #532]	; (8008e64 <OTM8009A_Init+0x388>)
 8008c50:	4619      	mov	r1, r3
 8008c52:	4640      	mov	r0, r8
 8008c54:	f000 fafc 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8008c58:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8008c5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8008c5c:	4a97      	ldr	r2, [pc, #604]	; (8008ebc <OTM8009A_Init+0x3e0>)
 8008c5e:	21d8      	movs	r1, #216	; 0xd8
 8008c60:	4640      	mov	r0, r8
 8008c62:	f000 faf5 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8008c66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8008c68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8008c6a:	4a95      	ldr	r2, [pc, #596]	; (8008ec0 <OTM8009A_Init+0x3e4>)
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f000 faee 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8008c74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8008c76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8008c78:	4a92      	ldr	r2, [pc, #584]	; (8008ec4 <OTM8009A_Init+0x3e8>)
 8008c7a:	21c5      	movs	r1, #197	; 0xc5
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	f000 fae7 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8008c82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8008c84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8008c86:	4a90      	ldr	r2, [pc, #576]	; (8008ec8 <OTM8009A_Init+0x3ec>)
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f000 fae0 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8008c90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8008c92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8008c94:	4a8d      	ldr	r2, [pc, #564]	; (8008ecc <OTM8009A_Init+0x3f0>)
 8008c96:	21c0      	movs	r1, #192	; 0xc0
 8008c98:	4640      	mov	r0, r8
 8008c9a:	f000 fad9 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8008c9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8008ca0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8008ca2:	4a8b      	ldr	r2, [pc, #556]	; (8008ed0 <OTM8009A_Init+0x3f4>)
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f000 fad2 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8008cac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8008cae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8008cb0:	4a88      	ldr	r2, [pc, #544]	; (8008ed4 <OTM8009A_Init+0x3f8>)
 8008cb2:	21c5      	movs	r1, #197	; 0xc5
 8008cb4:	4640      	mov	r0, r8
 8008cb6:	f000 facb 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008cba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8008cbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008cbe:	4a78      	ldr	r2, [pc, #480]	; (8008ea0 <OTM8009A_Init+0x3c4>)
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	f000 fac4 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8008cc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008cca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8008ccc:	4a82      	ldr	r2, [pc, #520]	; (8008ed8 <OTM8009A_Init+0x3fc>)
 8008cce:	21c4      	movs	r1, #196	; 0xc4
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	f000 fabd 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008cd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8008cd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008cda:	4a73      	ldr	r2, [pc, #460]	; (8008ea8 <OTM8009A_Init+0x3cc>)
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f000 fab6 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8008ce4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8008ce6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8008ce8:	4a7c      	ldr	r2, [pc, #496]	; (8008edc <OTM8009A_Init+0x400>)
 8008cea:	21c1      	movs	r1, #193	; 0xc1
 8008cec:	4640      	mov	r0, r8
 8008cee:	f000 faaf 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8008cf2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8008cf4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8008cf6:	4a7a      	ldr	r2, [pc, #488]	; (8008ee0 <OTM8009A_Init+0x404>)
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f000 faa8 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8008d00:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8008d02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8008d04:	4a77      	ldr	r2, [pc, #476]	; (8008ee4 <OTM8009A_Init+0x408>)
 8008d06:	21b3      	movs	r1, #179	; 0xb3
 8008d08:	4640      	mov	r0, r8
 8008d0a:	f000 faa1 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008d0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8008d10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008d12:	4a56      	ldr	r2, [pc, #344]	; (8008e6c <OTM8009A_Init+0x390>)
 8008d14:	4619      	mov	r1, r3
 8008d16:	4640      	mov	r0, r8
 8008d18:	f000 fa9a 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8008d1c:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008d1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8008d20:	4a71      	ldr	r2, [pc, #452]	; (8008ee8 <OTM8009A_Init+0x40c>)
 8008d22:	21ce      	movs	r1, #206	; 0xce
 8008d24:	4640      	mov	r0, r8
 8008d26:	f000 fa93 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008d2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8008d2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008d2e:	4a6f      	ldr	r2, [pc, #444]	; (8008eec <OTM8009A_Init+0x410>)
 8008d30:	4619      	mov	r1, r3
 8008d32:	4640      	mov	r0, r8
 8008d34:	f000 fa8c 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8008d38:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008d3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8008d3c:	4a6c      	ldr	r2, [pc, #432]	; (8008ef0 <OTM8009A_Init+0x414>)
 8008d3e:	21ce      	movs	r1, #206	; 0xce
 8008d40:	4640      	mov	r0, r8
 8008d42:	f000 fa85 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008d46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8008d48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008d4a:	4a6a      	ldr	r2, [pc, #424]	; (8008ef4 <OTM8009A_Init+0x418>)
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f000 fa7e 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8008d54:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008d56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8008d58:	4a67      	ldr	r2, [pc, #412]	; (8008ef8 <OTM8009A_Init+0x41c>)
 8008d5a:	21ce      	movs	r1, #206	; 0xce
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	f000 fa77 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008d62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8008d64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008d66:	4a65      	ldr	r2, [pc, #404]	; (8008efc <OTM8009A_Init+0x420>)
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f000 fa70 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8008d70:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008d72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8008d74:	4a62      	ldr	r2, [pc, #392]	; (8008f00 <OTM8009A_Init+0x424>)
 8008d76:	21cf      	movs	r1, #207	; 0xcf
 8008d78:	4640      	mov	r0, r8
 8008d7a:	f000 fa69 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008d7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8008d80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008d82:	4a60      	ldr	r2, [pc, #384]	; (8008f04 <OTM8009A_Init+0x428>)
 8008d84:	4619      	mov	r1, r3
 8008d86:	4640      	mov	r0, r8
 8008d88:	f000 fa62 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8008d8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008d8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8008d90:	4a5d      	ldr	r2, [pc, #372]	; (8008f08 <OTM8009A_Init+0x42c>)
 8008d92:	21cf      	movs	r1, #207	; 0xcf
 8008d94:	4640      	mov	r0, r8
 8008d96:	f000 fa5b 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008d9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8008d9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008d9e:	4a33      	ldr	r2, [pc, #204]	; (8008e6c <OTM8009A_Init+0x390>)
 8008da0:	4619      	mov	r1, r3
 8008da2:	4640      	mov	r0, r8
 8008da4:	f000 fa54 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8008da8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008daa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8008dac:	4a57      	ldr	r2, [pc, #348]	; (8008f0c <OTM8009A_Init+0x430>)
 8008dae:	21cb      	movs	r1, #203	; 0xcb
 8008db0:	4640      	mov	r0, r8
 8008db2:	f000 fa4d 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008db6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8008db8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008dba:	4a55      	ldr	r2, [pc, #340]	; (8008f10 <OTM8009A_Init+0x434>)
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	f000 fa46 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8008dc4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008dc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8008dc8:	4a52      	ldr	r2, [pc, #328]	; (8008f14 <OTM8009A_Init+0x438>)
 8008dca:	21cb      	movs	r1, #203	; 0xcb
 8008dcc:	4640      	mov	r0, r8
 8008dce:	f000 fa3f 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008dd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8008dd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008dd6:	4a45      	ldr	r2, [pc, #276]	; (8008eec <OTM8009A_Init+0x410>)
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4640      	mov	r0, r8
 8008ddc:	f000 fa38 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8008de0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008de2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8008de4:	4a4c      	ldr	r2, [pc, #304]	; (8008f18 <OTM8009A_Init+0x43c>)
 8008de6:	21cb      	movs	r1, #203	; 0xcb
 8008de8:	4640      	mov	r0, r8
 8008dea:	f000 fa31 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008dee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8008df0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008df2:	4a40      	ldr	r2, [pc, #256]	; (8008ef4 <OTM8009A_Init+0x418>)
 8008df4:	4619      	mov	r1, r3
 8008df6:	4640      	mov	r0, r8
 8008df8:	f000 fa2a 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8008dfc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008dfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8008e00:	4a46      	ldr	r2, [pc, #280]	; (8008f1c <OTM8009A_Init+0x440>)
 8008e02:	21cb      	movs	r1, #203	; 0xcb
 8008e04:	4640      	mov	r0, r8
 8008e06:	f000 fa23 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008e0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8008e0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008e0e:	4a3b      	ldr	r2, [pc, #236]	; (8008efc <OTM8009A_Init+0x420>)
 8008e10:	4619      	mov	r1, r3
 8008e12:	4640      	mov	r0, r8
 8008e14:	f000 fa1c 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8008e18:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008e1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8008e1c:	4a40      	ldr	r2, [pc, #256]	; (8008f20 <OTM8009A_Init+0x444>)
 8008e1e:	21cb      	movs	r1, #203	; 0xcb
 8008e20:	4640      	mov	r0, r8
 8008e22:	f000 fa15 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008e26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8008e28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008e2a:	4a36      	ldr	r2, [pc, #216]	; (8008f04 <OTM8009A_Init+0x428>)
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4640      	mov	r0, r8
 8008e30:	f000 fa0e 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8008e34:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008e36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8008e38:	4a3a      	ldr	r2, [pc, #232]	; (8008f24 <OTM8009A_Init+0x448>)
 8008e3a:	21cb      	movs	r1, #203	; 0xcb
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	f000 fa07 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8008e42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8008e44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8008e46:	4a38      	ldr	r2, [pc, #224]	; (8008f28 <OTM8009A_Init+0x44c>)
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f000 fa00 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8008e50:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8008e52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8008e54:	4a35      	ldr	r2, [pc, #212]	; (8008f2c <OTM8009A_Init+0x450>)
 8008e56:	21cb      	movs	r1, #203	; 0xcb
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f000 f9f9 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8008e5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8008e60:	4404      	add	r4, r0
 8008e62:	e065      	b.n	8008f30 <OTM8009A_Init+0x454>
 8008e64:	08024ca5 	.word	0x08024ca5
 8008e68:	08024b98 	.word	0x08024b98
 8008e6c:	08024ca6 	.word	0x08024ca6
 8008e70:	08024c13 	.word	0x08024c13
 8008e74:	08024ca7 	.word	0x08024ca7
 8008e78:	08024ca8 	.word	0x08024ca8
 8008e7c:	240058e4 	.word	0x240058e4
 8008e80:	08024ca9 	.word	0x08024ca9
 8008e84:	08024caa 	.word	0x08024caa
 8008e88:	08024cab 	.word	0x08024cab
 8008e8c:	08024cac 	.word	0x08024cac
 8008e90:	08024cad 	.word	0x08024cad
 8008e94:	08024cae 	.word	0x08024cae
 8008e98:	08024caf 	.word	0x08024caf
 8008e9c:	08024cb0 	.word	0x08024cb0
 8008ea0:	08024cb1 	.word	0x08024cb1
 8008ea4:	08024cb2 	.word	0x08024cb2
 8008ea8:	08024cb3 	.word	0x08024cb3
 8008eac:	08024cb4 	.word	0x08024cb4
 8008eb0:	08024cb5 	.word	0x08024cb5
 8008eb4:	08024cb6 	.word	0x08024cb6
 8008eb8:	08024cb7 	.word	0x08024cb7
 8008ebc:	08024c7e 	.word	0x08024c7e
 8008ec0:	08024cb8 	.word	0x08024cb8
 8008ec4:	08024cb9 	.word	0x08024cb9
 8008ec8:	08024cba 	.word	0x08024cba
 8008ecc:	08024cbb 	.word	0x08024cbb
 8008ed0:	08024cbc 	.word	0x08024cbc
 8008ed4:	08024cbd 	.word	0x08024cbd
 8008ed8:	08024cbe 	.word	0x08024cbe
 8008edc:	08024cbf 	.word	0x08024cbf
 8008ee0:	08024cc0 	.word	0x08024cc0
 8008ee4:	08024c80 	.word	0x08024c80
 8008ee8:	08024c82 	.word	0x08024c82
 8008eec:	08024cc1 	.word	0x08024cc1
 8008ef0:	08024c88 	.word	0x08024c88
 8008ef4:	08024cc2 	.word	0x08024cc2
 8008ef8:	08024c96 	.word	0x08024c96
 8008efc:	08024cc3 	.word	0x08024cc3
 8008f00:	08024b9b 	.word	0x08024b9b
 8008f04:	08024cc4 	.word	0x08024cc4
 8008f08:	08024cd1 	.word	0x08024cd1
 8008f0c:	08024ba5 	.word	0x08024ba5
 8008f10:	08024cc5 	.word	0x08024cc5
 8008f14:	08024baf 	.word	0x08024baf
 8008f18:	08024bbe 	.word	0x08024bbe
 8008f1c:	08024bcd 	.word	0x08024bcd
 8008f20:	08024bd7 	.word	0x08024bd7
 8008f24:	08024be6 	.word	0x08024be6
 8008f28:	08024cc6 	.word	0x08024cc6
 8008f2c:	08024bf5 	.word	0x08024bf5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8008f30:	4a99      	ldr	r2, [pc, #612]	; (8009198 <OTM8009A_Init+0x6bc>)
 8008f32:	4619      	mov	r1, r3
 8008f34:	4640      	mov	r0, r8
 8008f36:	f000 f98b 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8008f3a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8008f3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8008f3e:	4a97      	ldr	r2, [pc, #604]	; (800919c <OTM8009A_Init+0x6c0>)
 8008f40:	21cb      	movs	r1, #203	; 0xcb
 8008f42:	4640      	mov	r0, r8
 8008f44:	f000 f984 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008f48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8008f4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008f4c:	4a94      	ldr	r2, [pc, #592]	; (80091a0 <OTM8009A_Init+0x6c4>)
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4640      	mov	r0, r8
 8008f52:	f000 f97d 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8008f56:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8008f58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8008f5a:	4a92      	ldr	r2, [pc, #584]	; (80091a4 <OTM8009A_Init+0x6c8>)
 8008f5c:	21cc      	movs	r1, #204	; 0xcc
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f000 f976 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008f64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8008f66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008f68:	4a8f      	ldr	r2, [pc, #572]	; (80091a8 <OTM8009A_Init+0x6cc>)
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	f000 f96f 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8008f72:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8008f74:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8008f76:	4a8d      	ldr	r2, [pc, #564]	; (80091ac <OTM8009A_Init+0x6d0>)
 8008f78:	21cc      	movs	r1, #204	; 0xcc
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f000 f968 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008f80:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8008f82:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008f84:	4a8a      	ldr	r2, [pc, #552]	; (80091b0 <OTM8009A_Init+0x6d4>)
 8008f86:	4619      	mov	r1, r3
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f000 f961 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8008f8e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8008f90:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8008f92:	4a88      	ldr	r2, [pc, #544]	; (80091b4 <OTM8009A_Init+0x6d8>)
 8008f94:	21cc      	movs	r1, #204	; 0xcc
 8008f96:	4640      	mov	r0, r8
 8008f98:	f000 f95a 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008f9c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8008f9e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008fa0:	4a85      	ldr	r2, [pc, #532]	; (80091b8 <OTM8009A_Init+0x6dc>)
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	f000 f953 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8008faa:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8008fac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8008fae:	4a83      	ldr	r2, [pc, #524]	; (80091bc <OTM8009A_Init+0x6e0>)
 8008fb0:	21cc      	movs	r1, #204	; 0xcc
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	f000 f94c 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008fb8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8008fba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008fbc:	4a80      	ldr	r2, [pc, #512]	; (80091c0 <OTM8009A_Init+0x6e4>)
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f000 f945 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8008fc6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8008fc8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8008fca:	4a7e      	ldr	r2, [pc, #504]	; (80091c4 <OTM8009A_Init+0x6e8>)
 8008fcc:	21cc      	movs	r1, #204	; 0xcc
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f000 f93e 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008fd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8008fd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008fd8:	4a7b      	ldr	r2, [pc, #492]	; (80091c8 <OTM8009A_Init+0x6ec>)
 8008fda:	4619      	mov	r1, r3
 8008fdc:	4640      	mov	r0, r8
 8008fde:	f000 f937 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8008fe2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8008fe4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8008fe6:	4a79      	ldr	r2, [pc, #484]	; (80091cc <OTM8009A_Init+0x6f0>)
 8008fe8:	21cc      	movs	r1, #204	; 0xcc
 8008fea:	4640      	mov	r0, r8
 8008fec:	f000 f930 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008ff0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8008ff2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8008ff4:	4a76      	ldr	r2, [pc, #472]	; (80091d0 <OTM8009A_Init+0x6f4>)
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4640      	mov	r0, r8
 8008ffa:	f000 f929 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8008ffe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009000:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009002:	4a74      	ldr	r2, [pc, #464]	; (80091d4 <OTM8009A_Init+0x6f8>)
 8009004:	21c5      	movs	r1, #197	; 0xc5
 8009006:	4640      	mov	r0, r8
 8009008:	f000 f922 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800900c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800900e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009010:	4a71      	ldr	r2, [pc, #452]	; (80091d8 <OTM8009A_Init+0x6fc>)
 8009012:	4619      	mov	r1, r3
 8009014:	4640      	mov	r0, r8
 8009016:	f000 f91b 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800901a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800901c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800901e:	4a6f      	ldr	r2, [pc, #444]	; (80091dc <OTM8009A_Init+0x700>)
 8009020:	21f5      	movs	r1, #245	; 0xf5
 8009022:	4640      	mov	r0, r8
 8009024:	f000 f914 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009028:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800902a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800902c:	4a6c      	ldr	r2, [pc, #432]	; (80091e0 <OTM8009A_Init+0x704>)
 800902e:	4619      	mov	r1, r3
 8009030:	4640      	mov	r0, r8
 8009032:	f000 f90d 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009036:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009038:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800903a:	4a6a      	ldr	r2, [pc, #424]	; (80091e4 <OTM8009A_Init+0x708>)
 800903c:	21c6      	movs	r1, #198	; 0xc6
 800903e:	4640      	mov	r0, r8
 8009040:	f000 f906 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009044:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009046:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009048:	4a67      	ldr	r2, [pc, #412]	; (80091e8 <OTM8009A_Init+0x70c>)
 800904a:	4619      	mov	r1, r3
 800904c:	4640      	mov	r0, r8
 800904e:	f000 f8ff 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009052:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009054:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009056:	4a65      	ldr	r2, [pc, #404]	; (80091ec <OTM8009A_Init+0x710>)
 8009058:	21ff      	movs	r1, #255	; 0xff
 800905a:	4640      	mov	r0, r8
 800905c:	f000 f8f8 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009060:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009062:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009064:	4a60      	ldr	r2, [pc, #384]	; (80091e8 <OTM8009A_Init+0x70c>)
 8009066:	4619      	mov	r1, r3
 8009068:	4640      	mov	r0, r8
 800906a:	f000 f8f1 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800906e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009070:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009072:	4a5d      	ldr	r2, [pc, #372]	; (80091e8 <OTM8009A_Init+0x70c>)
 8009074:	4619      	mov	r1, r3
 8009076:	4640      	mov	r0, r8
 8009078:	f000 f8ea 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800907c:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800907e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009080:	4a5b      	ldr	r2, [pc, #364]	; (80091f0 <OTM8009A_Init+0x714>)
 8009082:	21e1      	movs	r1, #225	; 0xe1
 8009084:	4640      	mov	r0, r8
 8009086:	f000 f8e3 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800908a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800908c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800908e:	4a56      	ldr	r2, [pc, #344]	; (80091e8 <OTM8009A_Init+0x70c>)
 8009090:	4619      	mov	r1, r3
 8009092:	4640      	mov	r0, r8
 8009094:	f000 f8dc 	bl	8009250 <otm8009a_write_reg>
 8009098:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800909a:	2310      	movs	r3, #16
 800909c:	4a55      	ldr	r2, [pc, #340]	; (80091f4 <OTM8009A_Init+0x718>)
 800909e:	21e2      	movs	r1, #226	; 0xe2
 80090a0:	4640      	mov	r0, r8
 80090a2:	f000 f8d5 	bl	8009250 <otm8009a_write_reg>
 80090a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80090a8:	2300      	movs	r3, #0
 80090aa:	4a53      	ldr	r2, [pc, #332]	; (80091f8 <OTM8009A_Init+0x71c>)
 80090ac:	2111      	movs	r1, #17
 80090ae:	4640      	mov	r0, r8
 80090b0:	f000 f8ce 	bl	8009250 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80090b4:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80090b6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80090b8:	4650      	mov	r0, sl
 80090ba:	f7ff fd03 	bl	8008ac4 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80090be:	f1b9 0f00 	cmp.w	r9, #0
 80090c2:	d062      	beq.n	800918a <OTM8009A_Init+0x6ae>
 80090c4:	f1b9 0f02 	cmp.w	r9, #2
 80090c8:	d108      	bne.n	80090dc <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80090ca:	2300      	movs	r3, #0
 80090cc:	4a4b      	ldr	r2, [pc, #300]	; (80091fc <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80090ce:	213a      	movs	r1, #58	; 0x3a
 80090d0:	4640      	mov	r0, r8
 80090d2:	f000 f8bd 	bl	8009250 <otm8009a_write_reg>
 80090d6:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80090d8:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80090dc:	f1bb 0f01 	cmp.w	fp, #1
 80090e0:	d156      	bne.n	8009190 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80090e2:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80090e4:	f10d 0207 	add.w	r2, sp, #7
 80090e8:	2136      	movs	r1, #54	; 0x36
 80090ea:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80090ec:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80090f0:	2300      	movs	r3, #0
 80090f2:	f000 f8ad 	bl	8009250 <otm8009a_write_reg>
 80090f6:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80090f8:	2304      	movs	r3, #4
 80090fa:	4a41      	ldr	r2, [pc, #260]	; (8009200 <OTM8009A_Init+0x724>)
 80090fc:	212a      	movs	r1, #42	; 0x2a
 80090fe:	4640      	mov	r0, r8
 8009100:	f000 f8a6 	bl	8009250 <otm8009a_write_reg>
 8009104:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8009106:	2304      	movs	r3, #4
 8009108:	4a3e      	ldr	r2, [pc, #248]	; (8009204 <OTM8009A_Init+0x728>)
 800910a:	212b      	movs	r1, #43	; 0x2b
 800910c:	4640      	mov	r0, r8
 800910e:	f000 f89f 	bl	8009250 <otm8009a_write_reg>
 8009112:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8009114:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8009118:	2300      	movs	r3, #0
 800911a:	4a3b      	ldr	r2, [pc, #236]	; (8009208 <OTM8009A_Init+0x72c>)
 800911c:	2151      	movs	r1, #81	; 0x51
 800911e:	4640      	mov	r0, r8
 8009120:	f000 f896 	bl	8009250 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8009124:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8009126:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009128:	4a38      	ldr	r2, [pc, #224]	; (800920c <OTM8009A_Init+0x730>)
 800912a:	2153      	movs	r1, #83	; 0x53
 800912c:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800912e:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009130:	f000 f88e 	bl	8009250 <otm8009a_write_reg>
 8009134:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8009136:	2300      	movs	r3, #0
 8009138:	4a35      	ldr	r2, [pc, #212]	; (8009210 <OTM8009A_Init+0x734>)
 800913a:	2155      	movs	r1, #85	; 0x55
 800913c:	4640      	mov	r0, r8
 800913e:	f000 f887 	bl	8009250 <otm8009a_write_reg>
 8009142:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8009144:	2300      	movs	r3, #0
 8009146:	4a33      	ldr	r2, [pc, #204]	; (8009214 <OTM8009A_Init+0x738>)
 8009148:	215e      	movs	r1, #94	; 0x5e
 800914a:	4640      	mov	r0, r8
 800914c:	f000 f880 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8009150:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8009152:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8009154:	4a30      	ldr	r2, [pc, #192]	; (8009218 <OTM8009A_Init+0x73c>)
 8009156:	2129      	movs	r1, #41	; 0x29
 8009158:	4640      	mov	r0, r8
 800915a:	f000 f879 	bl	8009250 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800915e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8009160:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009162:	4a21      	ldr	r2, [pc, #132]	; (80091e8 <OTM8009A_Init+0x70c>)
 8009164:	4619      	mov	r1, r3
 8009166:	4640      	mov	r0, r8
 8009168:	f000 f872 	bl	8009250 <otm8009a_write_reg>
 800916c:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800916e:	2300      	movs	r3, #0
 8009170:	4a2a      	ldr	r2, [pc, #168]	; (800921c <OTM8009A_Init+0x740>)
 8009172:	212c      	movs	r1, #44	; 0x2c
 8009174:	4640      	mov	r0, r8
 8009176:	f000 f86b 	bl	8009250 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800917a:	42c5      	cmn	r5, r0
}
 800917c:	bf14      	ite	ne
 800917e:	f04f 30ff 	movne.w	r0, #4294967295
 8009182:	2000      	moveq	r0, #0
 8009184:	b003      	add	sp, #12
 8009186:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800918a:	464b      	mov	r3, r9
 800918c:	4a24      	ldr	r2, [pc, #144]	; (8009220 <OTM8009A_Init+0x744>)
 800918e:	e79e      	b.n	80090ce <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8009190:	2300      	movs	r3, #0
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	e7c0      	b.n	8009118 <OTM8009A_Init+0x63c>
 8009196:	bf00      	nop
 8009198:	08024cc7 	.word	0x08024cc7
 800919c:	08024bff 	.word	0x08024bff
 80091a0:	08024ca6 	.word	0x08024ca6
 80091a4:	08024c09 	.word	0x08024c09
 80091a8:	08024cc5 	.word	0x08024cc5
 80091ac:	08024c15 	.word	0x08024c15
 80091b0:	08024cc1 	.word	0x08024cc1
 80091b4:	08024c24 	.word	0x08024c24
 80091b8:	08024cc2 	.word	0x08024cc2
 80091bc:	08024c33 	.word	0x08024c33
 80091c0:	08024cc3 	.word	0x08024cc3
 80091c4:	08024c3d 	.word	0x08024c3d
 80091c8:	08024cc4 	.word	0x08024cc4
 80091cc:	08024c4c 	.word	0x08024c4c
 80091d0:	08024cb1 	.word	0x08024cb1
 80091d4:	08024cd2 	.word	0x08024cd2
 80091d8:	08024cd3 	.word	0x08024cd3
 80091dc:	08024cd4 	.word	0x08024cd4
 80091e0:	08024cd5 	.word	0x08024cd5
 80091e4:	08024cd6 	.word	0x08024cd6
 80091e8:	08024ca5 	.word	0x08024ca5
 80091ec:	08024c5b 	.word	0x08024c5b
 80091f0:	08024c5e 	.word	0x08024c5e
 80091f4:	08024c6e 	.word	0x08024c6e
 80091f8:	08024cc8 	.word	0x08024cc8
 80091fc:	08024cc9 	.word	0x08024cc9
 8009200:	08024b90 	.word	0x08024b90
 8009204:	08024b94 	.word	0x08024b94
 8009208:	08024ccb 	.word	0x08024ccb
 800920c:	08024ccc 	.word	0x08024ccc
 8009210:	08024ccd 	.word	0x08024ccd
 8009214:	08024cce 	.word	0x08024cce
 8009218:	08024ccf 	.word	0x08024ccf
 800921c:	08024cd0 	.word	0x08024cd0
 8009220:	08024cca 	.word	0x08024cca

08009224 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8009224:	b160      	cbz	r0, 8009240 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009226:	684b      	ldr	r3, [r1, #4]
 8009228:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800922a:	688b      	ldr	r3, [r1, #8]
 800922c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800922e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8009230:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8009232:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <OTM8009A_RegisterBusIO+0x24>)
 8009236:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8009238:	4b04      	ldr	r3, [pc, #16]	; (800924c <OTM8009A_RegisterBusIO+0x28>)
 800923a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800923c:	2000      	movs	r0, #0
 800923e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8009240:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	08008aa9 	.word	0x08008aa9
 800924c:	08008ab7 	.word	0x08008ab7

08009250 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8009250:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8009252:	6804      	ldr	r4, [r0, #0]
 8009254:	6880      	ldr	r0, [r0, #8]
 8009256:	46a4      	mov	ip, r4
}
 8009258:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800925c:	4760      	bx	ip
	...

08009260 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8009260:	4a10      	ldr	r2, [pc, #64]	; (80092a4 <BSP_I2C4_DeInit+0x44>)
{
 8009262:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	3b01      	subs	r3, #1
 8009268:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800926a:	b10b      	cbz	r3, 8009270 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800926c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800926e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8009270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009274:	480c      	ldr	r0, [pc, #48]	; (80092a8 <BSP_I2C4_DeInit+0x48>)
 8009276:	f001 fe0d 	bl	800ae94 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800927a:	480b      	ldr	r0, [pc, #44]	; (80092a8 <BSP_I2C4_DeInit+0x48>)
 800927c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009280:	f001 fe08 	bl	800ae94 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8009284:	4a09      	ldr	r2, [pc, #36]	; (80092ac <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009286:	480a      	ldr	r0, [pc, #40]	; (80092b0 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8009288:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800928c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009290:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8009294:	f002 f849 	bl	800b32a <HAL_I2C_DeInit>
 8009298:	2800      	cmp	r0, #0
 800929a:	d0e7      	beq.n	800926c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800929c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80092a0:	e7e5      	b.n	800926e <BSP_I2C4_DeInit+0xe>
 80092a2:	bf00      	nop
 80092a4:	240058f0 	.word	0x240058f0
 80092a8:	58020c00 	.word	0x58020c00
 80092ac:	58024400 	.word	0x58024400
 80092b0:	240062f8 	.word	0x240062f8

080092b4 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80092b4:	2300      	movs	r3, #0
 80092b6:	2201      	movs	r2, #1
{
 80092b8:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80092ba:	6041      	str	r1, [r0, #4]
{
 80092bc:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80092be:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80092c0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80092c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80092c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80092cc:	f001 ffdb 	bl	800b286 <HAL_I2C_Init>
 80092d0:	4601      	mov	r1, r0
 80092d2:	b108      	cbz	r0, 80092d8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80092d4:	2001      	movs	r0, #1
}
 80092d6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80092d8:	4620      	mov	r0, r4
 80092da:	f002 f9fc 	bl	800b6d6 <HAL_I2CEx_ConfigAnalogFilter>
 80092de:	4601      	mov	r1, r0
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1f7      	bne.n	80092d4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80092e4:	4620      	mov	r0, r4
 80092e6:	f002 fa1c 	bl	800b722 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80092ea:	3800      	subs	r0, #0
 80092ec:	bf18      	it	ne
 80092ee:	2001      	movne	r0, #1
 80092f0:	e7f1      	b.n	80092d6 <MX_I2C4_Init+0x22>
	...

080092f4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80092f4:	4ba3      	ldr	r3, [pc, #652]	; (8009584 <BSP_I2C4_Init+0x290>)
 80092f6:	48a4      	ldr	r0, [pc, #656]	; (8009588 <BSP_I2C4_Init+0x294>)
{
 80092f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80092fc:	6003      	str	r3, [r0, #0]
{
 80092fe:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 8009300:	4ba2      	ldr	r3, [pc, #648]	; (800958c <BSP_I2C4_Init+0x298>)
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	9200      	str	r2, [sp, #0]
 8009306:	2a00      	cmp	r2, #0
 8009308:	f040 80cf 	bne.w	80094aa <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 800930c:	2201      	movs	r2, #1
 800930e:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8009310:	f002 f9dc 	bl	800b6cc <HAL_I2C_GetState>
 8009314:	2800      	cmp	r0, #0
 8009316:	f040 80c8 	bne.w	80094aa <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800931a:	4d9d      	ldr	r5, [pc, #628]	; (8009590 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800931c:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009320:	2702      	movs	r7, #2
 8009322:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8009324:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009328:	a90d      	add	r1, sp, #52	; 0x34
 800932a:	489a      	ldr	r0, [pc, #616]	; (8009594 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800932c:	f043 0308 	orr.w	r3, r3, #8
 8009330:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8009334:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009338:	f003 0308 	and.w	r3, r3, #8
 800933c:	930a      	str	r3, [sp, #40]	; 0x28
 800933e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8009340:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009344:	f043 0308 	orr.w	r3, r3, #8
 8009348:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800934c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8009350:	f003 0308 	and.w	r3, r3, #8
 8009354:	930b      	str	r3, [sp, #44]	; 0x2c
 8009356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800935c:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009360:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8009362:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009366:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8009368:	f001 fca8 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800936c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009370:	a90d      	add	r1, sp, #52	; 0x34
 8009372:	4888      	ldr	r0, [pc, #544]	; (8009594 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8009374:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8009376:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800937a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800937c:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8009380:	f001 fc9c 	bl	800acbc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8009384:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8009388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8009390:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8009394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009398:	930c      	str	r3, [sp, #48]	; 0x30
 800939a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 800939c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80093a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a4:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80093a8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80093ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093b0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80093b4:	f003 fc0e 	bl	800cbd4 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d070      	beq.n	800949e <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80093bc:	4b76      	ldr	r3, [pc, #472]	; (8009598 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80093be:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80093c2:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 80095a0 <BSP_I2C4_Init+0x2ac>
 80093c6:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80093ca:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80093ce:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80093d2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80093d6:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80093da:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80093dc:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80093e0:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80093e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093ec:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 80093ee:	9302      	str	r3, [sp, #8]
 80093f0:	4b6a      	ldr	r3, [pc, #424]	; (800959c <BSP_I2C4_Init+0x2a8>)
 80093f2:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80093f6:	9a00      	ldr	r2, [sp, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4696      	mov	lr, r2
{
 80093fc:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80093fe:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8009400:	f240 3479 	movw	r4, #889	; 0x379
 8009404:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8009406:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8009408:	45a4      	cmp	ip, r4
 800940a:	d959      	bls.n	80094c0 <BSP_I2C4_Init+0x1cc>
 800940c:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800940e:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8009410:	45ab      	cmp	fp, r5
 8009412:	d851      	bhi.n	80094b8 <BSP_I2C4_Init+0x1c4>
 8009414:	9c02      	ldr	r4, [sp, #8]
 8009416:	42ac      	cmp	r4, r5
 8009418:	d34e      	bcc.n	80094b8 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 800941a:	4590      	cmp	r8, r2
 800941c:	d04c      	beq.n	80094b8 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800941e:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8009422:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8009424:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8009426:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800942a:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800942c:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8009430:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8009434:	d93d      	bls.n	80094b2 <BSP_I2C4_Init+0x1be>
 8009436:	4a59      	ldr	r2, [pc, #356]	; (800959c <BSP_I2C4_Init+0x2a8>)
 8009438:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800943a:	4b58      	ldr	r3, [pc, #352]	; (800959c <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800943c:	f242 7210 	movw	r2, #10000	; 0x2710
 8009440:	4957      	ldr	r1, [pc, #348]	; (80095a0 <BSP_I2C4_Init+0x2ac>)
 8009442:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009444:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009446:	9203      	str	r2, [sp, #12]
 8009448:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800944c:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800944e:	0043      	lsls	r3, r0, #1
 8009450:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8009454:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 8009458:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 800945c:	f10b 0b0c 	add.w	fp, fp, #12
 8009460:	9409      	str	r4, [sp, #36]	; 0x24
 8009462:	3b0a      	subs	r3, #10
 8009464:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009466:	9b05      	ldr	r3, [sp, #20]
 8009468:	429f      	cmp	r7, r3
 800946a:	d134      	bne.n	80094d6 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800946c:	2a7f      	cmp	r2, #127	; 0x7f
 800946e:	d816      	bhi.n	800949e <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009470:	2314      	movs	r3, #20
 8009472:	435a      	muls	r2, r3
 8009474:	4b4a      	ldr	r3, [pc, #296]	; (80095a0 <BSP_I2C4_Init+0x2ac>)
 8009476:	1899      	adds	r1, r3, r2
 8009478:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800947a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800947c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8009480:	684b      	ldr	r3, [r1, #4]
 8009482:	051b      	lsls	r3, r3, #20
 8009484:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009488:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800948a:	688b      	ldr	r3, [r1, #8]
 800948c:	041b      	lsls	r3, r3, #16
 800948e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8009492:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8009494:	68cb      	ldr	r3, [r1, #12]
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800949a:	4323      	orrs	r3, r4
 800949c:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800949e:	9900      	ldr	r1, [sp, #0]
 80094a0:	4839      	ldr	r0, [pc, #228]	; (8009588 <BSP_I2C4_Init+0x294>)
 80094a2:	f7ff ff07 	bl	80092b4 <MX_I2C4_Init>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d169      	bne.n	800957e <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 80094aa:	2000      	movs	r0, #0
}
 80094ac:	b013      	add	sp, #76	; 0x4c
 80094ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b2:	4690      	mov	r8, r2
 80094b4:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80094b8:	3701      	adds	r7, #1
 80094ba:	440d      	add	r5, r1
 80094bc:	2f10      	cmp	r7, #16
 80094be:	d1a7      	bne.n	8009410 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80094c0:	2e10      	cmp	r6, #16
 80094c2:	448c      	add	ip, r1
 80094c4:	d19c      	bne.n	8009400 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80094c6:	3201      	adds	r2, #1
 80094c8:	4401      	add	r1, r0
 80094ca:	2a10      	cmp	r2, #16
 80094cc:	d196      	bne.n	80093fc <BSP_I2C4_Init+0x108>
 80094ce:	f1be 0f00 	cmp.w	lr, #0
 80094d2:	d1b0      	bne.n	8009436 <BSP_I2C4_Init+0x142>
 80094d4:	e7b1      	b.n	800943a <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80094d6:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80094d8:	f04f 0c00 	mov.w	ip, #0
 80094dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80094de:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80094e2:	441c      	add	r4, r3
 80094e4:	ebab 0503 	sub.w	r5, fp, r3
 80094e8:	9404      	str	r4, [sp, #16]
 80094ea:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80094ec:	9d04      	ldr	r5, [sp, #16]
 80094ee:	9401      	str	r4, [sp, #4]
 80094f0:	9c02      	ldr	r4, [sp, #8]
 80094f2:	441c      	add	r4, r3
 80094f4:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80094f6:	f241 245c 	movw	r4, #4700	; 0x125c
 80094fa:	f8cd c018 	str.w	ip, [sp, #24]
 80094fe:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8009502:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009506:	42a5      	cmp	r5, r4
 8009508:	d92e      	bls.n	8009568 <BSP_I2C4_Init+0x274>
 800950a:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800950e:	d22b      	bcs.n	8009568 <BSP_I2C4_Init+0x274>
 8009510:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8009512:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8009516:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800951a:	1966      	adds	r6, r4, r5
 800951c:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009520:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8009524:	f241 0447 	movw	r4, #4167	; 0x1047
 8009528:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800952c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8009530:	45a2      	cmp	sl, r4
 8009532:	d812      	bhi.n	800955a <BSP_I2C4_Init+0x266>
 8009534:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8009538:	d30f      	bcc.n	800955a <BSP_I2C4_Init+0x266>
 800953a:	4540      	cmp	r0, r8
 800953c:	d20d      	bcs.n	800955a <BSP_I2C4_Init+0x266>
              error = -error;
 800953e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8009542:	bf28      	it	cs
 8009544:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8009546:	9c03      	ldr	r4, [sp, #12]
 8009548:	45a2      	cmp	sl, r4
 800954a:	d206      	bcs.n	800955a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800954c:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 800954e:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8009552:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8009554:	9a07      	ldr	r2, [sp, #28]
 8009556:	60ca      	str	r2, [r1, #12]
 8009558:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800955a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800955e:	eba9 0903 	sub.w	r9, r9, r3
 8009562:	441e      	add	r6, r3
 8009564:	4498      	add	r8, r3
 8009566:	d1db      	bne.n	8009520 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8009568:	9c01      	ldr	r4, [sp, #4]
 800956a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800956e:	441d      	add	r5, r3
 8009570:	eba4 0403 	sub.w	r4, r4, r3
 8009574:	9401      	str	r4, [sp, #4]
 8009576:	d1be      	bne.n	80094f6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8009578:	3701      	adds	r7, #1
 800957a:	3114      	adds	r1, #20
 800957c:	e773      	b.n	8009466 <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 800957e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8009582:	e793      	b.n	80094ac <BSP_I2C4_Init+0x1b8>
 8009584:	58001c00 	.word	0x58001c00
 8009588:	240062f8 	.word	0x240062f8
 800958c:	240058f0 	.word	0x240058f0
 8009590:	58024400 	.word	0x58024400
 8009594:	58020c00 	.word	0x58020c00
 8009598:	3b9aca00 	.word	0x3b9aca00
 800959c:	240062f4 	.word	0x240062f4
 80095a0:	240058f4 	.word	0x240058f4

080095a4 <BSP_I2C4_WriteReg>:
{
 80095a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80095a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80095aa:	9200      	str	r2, [sp, #0]
 80095ac:	460a      	mov	r2, r1
 80095ae:	4601      	mov	r1, r0
 80095b0:	4808      	ldr	r0, [pc, #32]	; (80095d4 <BSP_I2C4_WriteReg+0x30>)
 80095b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095b6:	2301      	movs	r3, #1
 80095b8:	f001 fed0 	bl	800b35c <HAL_I2C_Mem_Write>
 80095bc:	b140      	cbz	r0, 80095d0 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80095be:	4805      	ldr	r0, [pc, #20]	; (80095d4 <BSP_I2C4_WriteReg+0x30>)
 80095c0:	f002 f887 	bl	800b6d2 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80095c4:	2804      	cmp	r0, #4
 80095c6:	bf0c      	ite	eq
 80095c8:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80095cc:	f06f 0003 	mvnne.w	r0, #3
}
 80095d0:	b004      	add	sp, #16
 80095d2:	bd10      	pop	{r4, pc}
 80095d4:	240062f8 	.word	0x240062f8

080095d8 <BSP_I2C4_ReadReg>:
{
 80095d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80095da:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80095de:	9200      	str	r2, [sp, #0]
 80095e0:	460a      	mov	r2, r1
 80095e2:	4601      	mov	r1, r0
 80095e4:	4808      	ldr	r0, [pc, #32]	; (8009608 <BSP_I2C4_ReadReg+0x30>)
 80095e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ea:	2301      	movs	r3, #1
 80095ec:	f001 ff90 	bl	800b510 <HAL_I2C_Mem_Read>
 80095f0:	b140      	cbz	r0, 8009604 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80095f2:	4805      	ldr	r0, [pc, #20]	; (8009608 <BSP_I2C4_ReadReg+0x30>)
 80095f4:	f002 f86d 	bl	800b6d2 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80095f8:	2804      	cmp	r0, #4
 80095fa:	bf0c      	ite	eq
 80095fc:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8009600:	f06f 0003 	mvnne.w	r0, #3
}
 8009604:	b004      	add	sp, #16
 8009606:	bd10      	pop	{r4, pc}
 8009608:	240062f8 	.word	0x240062f8

0800960c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800960c:	f000 bd10 	b.w	800a030 <HAL_GetTick>

08009610 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8009610:	4a09      	ldr	r2, [pc, #36]	; (8009638 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009612:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 8009616:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8009618:	684a      	ldr	r2, [r1, #4]
 800961a:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800961c:	2201      	movs	r2, #1
 800961e:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8009620:	688a      	ldr	r2, [r1, #8]
 8009622:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8009624:	680a      	ldr	r2, [r1, #0]
 8009626:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8009628:	2200      	movs	r2, #0
 800962a:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800962e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8009630:	68ca      	ldr	r2, [r1, #12]
 8009632:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8009634:	f002 bbf8 	b.w	800be28 <HAL_QSPI_Init>
 8009638:	52005000 	.word	0x52005000

0800963c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800963c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800963e:	b988      	cbnz	r0, 8009664 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009640:	4c0a      	ldr	r4, [pc, #40]	; (800966c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8009642:	480b      	ldr	r0, [pc, #44]	; (8009670 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009644:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009646:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8009648:	b94b      	cbnz	r3, 800965e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800964a:	f7ff f9a5 	bl	8008998 <MT25TL01G_EnableMemoryMappedModeSTR>
 800964e:	b110      	cbz	r0, 8009656 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009650:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8009654:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8009656:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8009658:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800965a:	7023      	strb	r3, [r4, #0]
 800965c:	e7fa      	b.n	8009654 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800965e:	f7ff f951 	bl	8008904 <MT25TL01G_EnableMemoryMappedModeDTR>
 8009662:	e7f4      	b.n	800964e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8009664:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009668:	e7f4      	b.n	8009654 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800966a:	bf00      	nop
 800966c:	2400634c 	.word	0x2400634c
 8009670:	240002bc 	.word	0x240002bc

08009674 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	460c      	mov	r4, r1
 8009678:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800967a:	bb28      	cbnz	r0, 80096c8 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800967c:	4d17      	ldr	r5, [pc, #92]	; (80096dc <BSP_QSPI_ConfigFlash+0x68>)
 800967e:	782b      	ldrb	r3, [r5, #0]
 8009680:	2b02      	cmp	r3, #2
 8009682:	d024      	beq.n	80096ce <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009684:	2a00      	cmp	r2, #0
 8009686:	4e16      	ldr	r6, [pc, #88]	; (80096e0 <BSP_QSPI_ConfigFlash+0x6c>)
 8009688:	bf08      	it	eq
 800968a:	2010      	moveq	r0, #16
 800968c:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800968e:	4630      	mov	r0, r6
 8009690:	f002 fbca 	bl	800be28 <HAL_QSPI_Init>
 8009694:	b9f0      	cbnz	r0, 80096d4 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8009696:	786b      	ldrb	r3, [r5, #1]
 8009698:	2b03      	cmp	r3, #3
 800969a:	d10f      	bne.n	80096bc <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800969c:	2c03      	cmp	r4, #3
 800969e:	d105      	bne.n	80096ac <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80096a0:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80096a2:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80096a4:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80096a6:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80096a8:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80096aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff f90d 	bl	80088cc <MT25TL01G_ExitQPIMode>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d0f4      	beq.n	80096a0 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80096b6:	f06f 0004 	mvn.w	r0, #4
 80096ba:	e7f6      	b.n	80096aa <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 80096bc:	2c03      	cmp	r4, #3
 80096be:	d1ef      	bne.n	80096a0 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80096c0:	4630      	mov	r0, r6
 80096c2:	f7ff f8e7 	bl	8008894 <MT25TL01G_EnterQPIMode>
 80096c6:	e7f4      	b.n	80096b2 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 80096c8:	f06f 0001 	mvn.w	r0, #1
 80096cc:	e7ed      	b.n	80096aa <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80096ce:	f06f 0019 	mvn.w	r0, #25
 80096d2:	e7ea      	b.n	80096aa <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80096d4:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80096d8:	e7e7      	b.n	80096aa <BSP_QSPI_ConfigFlash+0x36>
 80096da:	bf00      	nop
 80096dc:	2400634c 	.word	0x2400634c
 80096e0:	240002bc 	.word	0x240002bc

080096e4 <BSP_QSPI_Init>:
{
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	460d      	mov	r5, r1
 80096ea:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80096ec:	4604      	mov	r4, r0
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f040 81ac 	bne.w	8009a4c <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80096f4:	4e03      	ldr	r6, [pc, #12]	; (8009704 <BSP_QSPI_Init+0x20>)
 80096f6:	7833      	ldrb	r3, [r6, #0]
 80096f8:	b133      	cbz	r3, 8009708 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80096fa:	2000      	movs	r0, #0
}
 80096fc:	b024      	add	sp, #144	; 0x90
 80096fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009702:	bf00      	nop
 8009704:	2400634c 	.word	0x2400634c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8009708:	4bc2      	ldr	r3, [pc, #776]	; (8009a14 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800970a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800970e:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009710:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 8009712:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009716:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800971a:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800971e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009722:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009726:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800972a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800972e:	9201      	str	r2, [sp, #4]
 8009730:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8009732:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009738:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800973a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800973c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009740:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8009742:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009746:	f042 0202 	orr.w	r2, r2, #2
 800974a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800974e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009752:	f002 0202 	and.w	r2, r2, #2
 8009756:	9202      	str	r2, [sp, #8]
 8009758:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800975a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800975e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009762:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800976a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800976e:	9203      	str	r2, [sp, #12]
 8009770:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8009772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009776:	f042 0208 	orr.w	r2, r2, #8
 800977a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800977e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009782:	f002 0208 	and.w	r2, r2, #8
 8009786:	9204      	str	r2, [sp, #16]
 8009788:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800978a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800978e:	f042 0220 	orr.w	r2, r2, #32
 8009792:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800979a:	f002 0220 	and.w	r2, r2, #32
 800979e:	9205      	str	r2, [sp, #20]
 80097a0:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80097a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097a6:	f042 0220 	orr.w	r2, r2, #32
 80097aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80097ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097b2:	f002 0220 	and.w	r2, r2, #32
 80097b6:	9206      	str	r2, [sp, #24]
 80097b8:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80097ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097be:	f042 0220 	orr.w	r2, r2, #32
 80097c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80097c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097ca:	f002 0220 	and.w	r2, r2, #32
 80097ce:	9207      	str	r2, [sp, #28]
 80097d0:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80097d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80097de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097e2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80097e6:	9208      	str	r2, [sp, #32]
 80097e8:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80097ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80097f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80097fa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80097fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009800:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8009802:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009806:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800980a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800980e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009812:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009816:	920a      	str	r2, [sp, #40]	; 0x28
 8009818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800981a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800981e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009822:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009826:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800982a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800982e:	920b      	str	r2, [sp, #44]	; 0x2c
 8009830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8009832:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800983a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800983e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	930c      	str	r3, [sp, #48]	; 0x30
 8009848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800984a:	2302      	movs	r3, #2
 800984c:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009850:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009852:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009854:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8009858:	486f      	ldr	r0, [pc, #444]	; (8009a18 <BSP_QSPI_Init+0x334>)
 800985a:	f001 fa2f 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800985e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8009860:	a916      	add	r1, sp, #88	; 0x58
 8009862:	486e      	ldr	r0, [pc, #440]	; (8009a1c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009864:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8009866:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800986a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800986e:	f001 fa25 	bl	800acbc <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8009872:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009876:	a916      	add	r1, sp, #88	; 0x58
 8009878:	4869      	ldr	r0, [pc, #420]	; (8009a20 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800987a:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800987c:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800987e:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8009880:	f001 fa1c 	bl	800acbc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009884:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8009886:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800988a:	4866      	ldr	r0, [pc, #408]	; (8009a24 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800988c:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8009890:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8009892:	f001 fa13 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8009896:	a916      	add	r1, sp, #88	; 0x58
 8009898:	4863      	ldr	r0, [pc, #396]	; (8009a28 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800989a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800989e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80098a2:	f001 fa0b 	bl	800acbc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80098a6:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80098a8:	a916      	add	r1, sp, #88	; 0x58
 80098aa:	485e      	ldr	r0, [pc, #376]	; (8009a24 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80098ac:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80098ae:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80098b0:	f001 fa04 	bl	800acbc <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80098b4:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80098b6:	a916      	add	r1, sp, #88	; 0x58
 80098b8:	485b      	ldr	r0, [pc, #364]	; (8009a28 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80098ba:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80098bc:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80098be:	f001 f9fd 	bl	800acbc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80098c2:	a916      	add	r1, sp, #88	; 0x58
 80098c4:	4855      	ldr	r0, [pc, #340]	; (8009a1c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80098c6:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80098ca:	f001 f9f7 	bl	800acbc <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80098ce:	a916      	add	r1, sp, #88	; 0x58
 80098d0:	4855      	ldr	r0, [pc, #340]	; (8009a28 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80098d2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80098d6:	f001 f9f1 	bl	800acbc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80098da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80098de:	a916      	add	r1, sp, #88	; 0x58
 80098e0:	484e      	ldr	r0, [pc, #312]	; (8009a1c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80098e2:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80098e4:	f001 f9ea 	bl	800acbc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80098e8:	4622      	mov	r2, r4
 80098ea:	210f      	movs	r1, #15
 80098ec:	205c      	movs	r0, #92	; 0x5c
 80098ee:	f000 fbcf 	bl	800a090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80098f2:	205c      	movs	r0, #92	; 0x5c
 80098f4:	f000 fbfe 	bl	800a0f4 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80098f8:	a811      	add	r0, sp, #68	; 0x44
 80098fa:	f7fe ff22 	bl	8008742 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80098fe:	786a      	ldrb	r2, [r5, #1]
 8009900:	4b4a      	ldr	r3, [pc, #296]	; (8009a2c <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8009902:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8009906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800990a:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800990e:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009912:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 8009914:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009918:	a90d      	add	r1, sp, #52	; 0x34
 800991a:	4845      	ldr	r0, [pc, #276]	; (8009a30 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800991c:	bf08      	it	eq
 800991e:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009920:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8009922:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8009924:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8009926:	f7ff fe73 	bl	8009610 <MX_QSPI_Init>
 800992a:	2800      	cmp	r0, #0
 800992c:	f040 8091 	bne.w	8009a52 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8009930:	2103      	movs	r1, #3
 8009932:	483f      	ldr	r0, [pc, #252]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009934:	f7ff f876 	bl	8008a24 <MT25TL01G_ResetEnable>
 8009938:	2800      	cmp	r0, #0
 800993a:	d17c      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800993c:	2103      	movs	r1, #3
 800993e:	483c      	ldr	r0, [pc, #240]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009940:	f7ff f891 	bl	8008a66 <MT25TL01G_ResetMemory>
 8009944:	2800      	cmp	r0, #0
 8009946:	d176      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009948:	7871      	ldrb	r1, [r6, #1]
 800994a:	4839      	ldr	r0, [pc, #228]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 800994c:	f7fe ff0a 	bl	8008764 <MT25TL01G_AutoPollingMemReady>
 8009950:	4601      	mov	r1, r0
 8009952:	2800      	cmp	r0, #0
 8009954:	d16f      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009956:	4836      	ldr	r0, [pc, #216]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009958:	f7ff f864 	bl	8008a24 <MT25TL01G_ResetEnable>
 800995c:	4601      	mov	r1, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d169      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8009962:	4833      	ldr	r0, [pc, #204]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009964:	f7ff f87f 	bl	8008a66 <MT25TL01G_ResetMemory>
 8009968:	4601      	mov	r1, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	d163      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800996e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8009970:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009972:	482f      	ldr	r0, [pc, #188]	; (8009a30 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8009974:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8009976:	f7fe fef5 	bl	8008764 <MT25TL01G_AutoPollingMemReady>
 800997a:	2800      	cmp	r0, #0
 800997c:	d15b      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800997e:	7871      	ldrb	r1, [r6, #1]
 8009980:	482b      	ldr	r0, [pc, #172]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009982:	f7fe ff5e 	bl	8008842 <MT25TL01G_Enter4BytesAddressMode>
 8009986:	2800      	cmp	r0, #0
 8009988:	d155      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800998a:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800998e:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8009992:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009994:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009998:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800999a:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800999c:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800999e:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80099a0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80099a4:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 80099a6:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80099a8:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80099ac:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80099b0:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099b4:	481e      	ldr	r0, [pc, #120]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 80099b6:	f002 fa85 	bl	800bec4 <HAL_QSPI_Command>
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d13b      	bne.n	8009a36 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099be:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c2:	f10d 0102 	add.w	r1, sp, #2
 80099c6:	481a      	ldr	r0, [pc, #104]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 80099c8:	f002 fb18 	bl	800bffc <HAL_QSPI_Receive>
 80099cc:	bb98      	cbnz	r0, 8009a36 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80099ce:	7871      	ldrb	r1, [r6, #1]
 80099d0:	4817      	ldr	r0, [pc, #92]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 80099d2:	f7fe fef2 	bl	80087ba <MT25TL01G_WriteEnable>
 80099d6:	bb70      	cbnz	r0, 8009a36 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80099d8:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099da:	f241 3288 	movw	r2, #5000	; 0x1388
 80099de:	a916      	add	r1, sp, #88	; 0x58
 80099e0:	4813      	ldr	r0, [pc, #76]	; (8009a30 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80099e2:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80099e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80099e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ec:	051b      	lsls	r3, r3, #20
 80099ee:	0d1b      	lsrs	r3, r3, #20
 80099f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099f8:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099fc:	f002 fa62 	bl	800bec4 <HAL_QSPI_Command>
 8009a00:	b9c8      	cbnz	r0, 8009a36 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a06:	f10d 0102 	add.w	r1, sp, #2
 8009a0a:	4809      	ldr	r0, [pc, #36]	; (8009a30 <BSP_QSPI_Init+0x34c>)
 8009a0c:	f002 fa9d 	bl	800bf4a <HAL_QSPI_Transmit>
 8009a10:	e010      	b.n	8009a34 <BSP_QSPI_Init+0x350>
 8009a12:	bf00      	nop
 8009a14:	58024400 	.word	0x58024400
 8009a18:	58020400 	.word	0x58020400
 8009a1c:	58021800 	.word	0x58021800
 8009a20:	58020c00 	.word	0x58020c00
 8009a24:	58021c00 	.word	0x58021c00
 8009a28:	58021400 	.word	0x58021400
 8009a2c:	08024cd8 	.word	0x08024cd8
 8009a30:	240002bc 	.word	0x240002bc
 8009a34:	b110      	cbz	r0, 8009a3c <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8009a36:	f06f 0004 	mvn.w	r0, #4
 8009a3a:	e65f      	b.n	80096fc <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8009a3c:	786a      	ldrb	r2, [r5, #1]
 8009a3e:	7829      	ldrb	r1, [r5, #0]
 8009a40:	f7ff fe18 	bl	8009674 <BSP_QSPI_ConfigFlash>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f ae58 	beq.w	80096fa <BSP_QSPI_Init+0x16>
 8009a4a:	e7f4      	b.n	8009a36 <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 8009a4c:	f06f 0001 	mvn.w	r0, #1
 8009a50:	e654      	b.n	80096fc <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8009a52:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8009a56:	e651      	b.n	80096fc <BSP_QSPI_Init+0x18>

08009a58 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8009a58:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	b970      	cbnz	r0, 8009a7c <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <BSP_SDRAM_DeInit+0x2c>)
 8009a60:	4809      	ldr	r0, [pc, #36]	; (8009a88 <BSP_SDRAM_DeInit+0x30>)
 8009a62:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8009a64:	f003 ff3c 	bl	800d8e0 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8009a68:	207a      	movs	r0, #122	; 0x7a
 8009a6a:	f000 fb51 	bl	800a110 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8009a6e:	4807      	ldr	r0, [pc, #28]	; (8009a8c <BSP_SDRAM_DeInit+0x34>)
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <BSP_SDRAM_DeInit+0x38>)
 8009a72:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8009a74:	f002 f8a5 	bl	800bbc2 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8009a78:	4620      	mov	r0, r4
}
 8009a7a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8009a7c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009a80:	e7fb      	b.n	8009a7a <BSP_SDRAM_DeInit+0x22>
 8009a82:	bf00      	nop
 8009a84:	52004140 	.word	0x52004140
 8009a88:	24006358 	.word	0x24006358
 8009a8c:	2400638c 	.word	0x2400638c
 8009a90:	52000040 	.word	0x52000040

08009a94 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8009a94:	2201      	movs	r2, #1
 8009a96:	4915      	ldr	r1, [pc, #84]	; (8009aec <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <MX_SDRAM_Init+0x5c>)
{
 8009a9a:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8009a9c:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8009aa0:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8009aa6:	2440      	movs	r4, #64	; 0x40
{
 8009aa8:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8009aaa:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8009aae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009ab2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8009abc:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8009ac0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8009ac4:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009ac6:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8009ac8:	2207      	movs	r2, #7
 8009aca:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8009acc:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8009ad0:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8009ad2:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8009ad4:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8009ad8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8009adc:	f003 fed8 	bl	800d890 <HAL_SDRAM_Init>
}
 8009ae0:	3800      	subs	r0, #0
 8009ae2:	bf18      	it	ne
 8009ae4:	2001      	movne	r0, #1
 8009ae6:	b008      	add	sp, #32
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	bf00      	nop
 8009aec:	52004140 	.word	0x52004140
 8009af0:	24006358 	.word	0x24006358

08009af4 <BSP_SDRAM_Init>:
{
 8009af4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8009af6:	4605      	mov	r5, r0
{
 8009af8:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f040 80dd 	bne.w	8009cba <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8009b00:	4b71      	ldr	r3, [pc, #452]	; (8009cc8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8009b02:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009b04:	a909      	add	r1, sp, #36	; 0x24
 8009b06:	4871      	ldr	r0, [pc, #452]	; (8009ccc <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009b08:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8009b0c:	4c70      	ldr	r4, [pc, #448]	; (8009cd0 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009b0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8009b12:	4e70      	ldr	r6, [pc, #448]	; (8009cd4 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009b14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009b18:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009b1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009b20:	9201      	str	r2, [sp, #4]
 8009b22:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8009b24:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009b30:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009b34:	f002 0201 	and.w	r2, r2, #1
 8009b38:	9202      	str	r2, [sp, #8]
 8009b3a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b40:	f042 0208 	orr.w	r2, r2, #8
 8009b44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b4c:	f002 0208 	and.w	r2, r2, #8
 8009b50:	9203      	str	r2, [sp, #12]
 8009b52:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b58:	f042 0210 	orr.w	r2, r2, #16
 8009b5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b64:	f002 0210 	and.w	r2, r2, #16
 8009b68:	9204      	str	r2, [sp, #16]
 8009b6a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b70:	f042 0220 	orr.w	r2, r2, #32
 8009b74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b7c:	f002 0220 	and.w	r2, r2, #32
 8009b80:	9205      	str	r2, [sp, #20]
 8009b82:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009b84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009b90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009b94:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009b98:	9206      	str	r2, [sp, #24]
 8009b9a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009b9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ba0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ba4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ba8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009bac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009bb0:	9207      	str	r2, [sp, #28]
 8009bb2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009bb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009bc0:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bca:	9308      	str	r3, [sp, #32]
 8009bcc:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8009bda:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009bde:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8009be0:	f001 f86c 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8009be4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009be8:	a909      	add	r1, sp, #36	; 0x24
 8009bea:	483b      	ldr	r0, [pc, #236]	; (8009cd8 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8009bec:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009bee:	f001 f865 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8009bf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8009bf6:	a909      	add	r1, sp, #36	; 0x24
 8009bf8:	4838      	ldr	r0, [pc, #224]	; (8009cdc <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8009bfc:	f001 f85e 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8009c00:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009c04:	a909      	add	r1, sp, #36	; 0x24
 8009c06:	4836      	ldr	r0, [pc, #216]	; (8009ce0 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8009c08:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009c0a:	f001 f857 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8009c0e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8009c12:	a909      	add	r1, sp, #36	; 0x24
 8009c14:	4833      	ldr	r0, [pc, #204]	; (8009ce4 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8009c16:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8009c18:	f001 f850 	bl	800acbc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8009c1c:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8009c20:	a909      	add	r1, sp, #36	; 0x24
 8009c22:	4831      	ldr	r0, [pc, #196]	; (8009ce8 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8009c24:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8009c26:	f001 f849 	bl	800acbc <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8009c2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8009c32:	f240 2002 	movw	r0, #514	; 0x202
 8009c36:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8009c3a:	6334      	str	r4, [r6, #48]	; 0x30
 8009c3c:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8009c3e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8009c42:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8009c46:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8009c48:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8009c4a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8009c4c:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8009c4e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8009c52:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8009c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8009c5a:	4b24      	ldr	r3, [pc, #144]	; (8009cec <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8009c5c:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8009c5e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8009c60:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8009c64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8009c68:	f001 ffab 	bl	800bbc2 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f001 ff39 	bl	800bae4 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8009c72:	462a      	mov	r2, r5
 8009c74:	210f      	movs	r1, #15
 8009c76:	207a      	movs	r0, #122	; 0x7a
 8009c78:	f000 fa0a 	bl	800a090 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8009c7c:	207a      	movs	r0, #122	; 0x7a
 8009c7e:	f000 fa39 	bl	800a0f4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8009c82:	4630      	mov	r0, r6
 8009c84:	f7ff ff06 	bl	8009a94 <MX_SDRAM_Init>
 8009c88:	b9d0      	cbnz	r0, 8009cc0 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8009c8a:	4919      	ldr	r1, [pc, #100]	; (8009cf0 <BSP_SDRAM_Init+0x1fc>)
 8009c8c:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8009c8e:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8009c92:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8009c96:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8009c98:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8009c9c:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8009c9e:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8009ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8009ca6:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8009ca8:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8009caa:	f7fe fd1d 	bl	80086e8 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	bf18      	it	ne
 8009cb2:	f06f 0004 	mvnne.w	r0, #4
}
 8009cb6:	b00f      	add	sp, #60	; 0x3c
 8009cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8009cba:	f06f 0001 	mvn.w	r0, #1
 8009cbe:	e7fa      	b.n	8009cb6 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	e7f7      	b.n	8009cb6 <BSP_SDRAM_Init+0x1c2>
 8009cc6:	bf00      	nop
 8009cc8:	58024400 	.word	0x58024400
 8009ccc:	58020c00 	.word	0x58020c00
 8009cd0:	240063f8 	.word	0x240063f8
 8009cd4:	24006358 	.word	0x24006358
 8009cd8:	58021000 	.word	0x58021000
 8009cdc:	58021400 	.word	0x58021400
 8009ce0:	58021800 	.word	0x58021800
 8009ce4:	58021c00 	.word	0x58021c00
 8009ce8:	58022000 	.word	0x58022000
 8009cec:	52000040 	.word	0x52000040
 8009cf0:	24006464 	.word	0x24006464

08009cf4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d171      	bne.n	8009de6 <BSP_TS_Init+0xf2>
 8009d02:	680b      	ldr	r3, [r1, #0]
 8009d04:	1e5a      	subs	r2, r3, #1
 8009d06:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8009d0a:	d26c      	bcs.n	8009de6 <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8009d0c:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8009d0e:	1e51      	subs	r1, r2, #1
 8009d10:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8009d14:	d267      	bcs.n	8009de6 <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8009d16:	4293      	cmp	r3, r2
 8009d18:	bf28      	it	cs
 8009d1a:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8009d1c:	68e2      	ldr	r2, [r4, #12]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d861      	bhi.n	8009de6 <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8009d22:	2370      	movs	r3, #112	; 0x70
 8009d24:	2254      	movs	r2, #84	; 0x54
 8009d26:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8009d2a:	4f32      	ldr	r7, [pc, #200]	; (8009df4 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 8009d2c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8009e14 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8009d30:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8009e18 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8009d34:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8009d38:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <BSP_TS_Init+0x104>)
 8009d3a:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8009d3c:	4b2f      	ldr	r3, [pc, #188]	; (8009dfc <BSP_TS_Init+0x108>)
 8009d3e:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8009d40:	4b2f      	ldr	r3, [pc, #188]	; (8009e00 <BSP_TS_Init+0x10c>)
 8009d42:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8009d44:	4b2f      	ldr	r3, [pc, #188]	; (8009e04 <BSP_TS_Init+0x110>)
 8009d46:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8009d48:	4b2f      	ldr	r3, [pc, #188]	; (8009e08 <BSP_TS_Init+0x114>)
 8009d4a:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8009d4c:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8009d50:	a906      	add	r1, sp, #24
 8009d52:	4828      	ldr	r0, [pc, #160]	; (8009df4 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8009d54:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8009d58:	f7fe fbcc 	bl	80084f4 <FT6X06_RegisterBusIO>
 8009d5c:	b118      	cbz	r0, 8009d66 <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 8009d5e:	2e01      	cmp	r6, #1
 8009d60:	d044      	beq.n	8009dec <BSP_TS_Init+0xf8>
 8009d62:	2601      	movs	r6, #1
 8009d64:	e7f2      	b.n	8009d4c <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8009d66:	4669      	mov	r1, sp
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7fe fb0d 	bl	8008388 <FT6X06_ReadID>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1f5      	bne.n	8009d5e <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 8009d72:	9b00      	ldr	r3, [sp, #0]
 8009d74:	2b11      	cmp	r3, #17
 8009d76:	d1f2      	bne.n	8009d5e <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8009d78:	a903      	add	r1, sp, #12
 8009d7a:	4638      	mov	r0, r7
 8009d7c:	f7fe fab1 	bl	80082e2 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8009d80:	4b22      	ldr	r3, [pc, #136]	; (8009e0c <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8009d82:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 8009d84:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8009d88:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4798      	blx	r3
 8009d90:	4605      	mov	r5, r0
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1e3      	bne.n	8009d5e <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8009d96:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8009d98:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8009d9a:	4e1d      	ldr	r6, [pc, #116]	; (8009e10 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8009d9c:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8009da0:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8009daa:	68e3      	ldr	r3, [r4, #12]
 8009dac:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8009dae:	f8d9 3000 	ldr.w	r3, [r9]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	4798      	blx	r3
 8009db6:	2800      	cmp	r0, #0
 8009db8:	da02      	bge.n	8009dc0 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009dba:	f06f 0504 	mvn.w	r5, #4
 8009dbe:	e00e      	b.n	8009dde <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8009dc0:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8009dc2:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8009dc4:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8009dc6:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8009dc8:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8009dca:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8009dcc:	68e3      	ldr	r3, [r4, #12]
 8009dce:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8009dd0:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8009dd2:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8009dd4:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8009dd6:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8009dd8:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8009dda:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8009dde:	4628      	mov	r0, r5
 8009de0:	b00c      	add	sp, #48	; 0x30
 8009de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8009de6:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8009dea:	e7f8      	b.n	8009dde <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8009dec:	f04f 35ff 	mov.w	r5, #4294967295
 8009df0:	e7f5      	b.n	8009dde <BSP_TS_Init+0xea>
 8009df2:	bf00      	nop
 8009df4:	24006484 	.word	0x24006484
 8009df8:	080092f5 	.word	0x080092f5
 8009dfc:	08009261 	.word	0x08009261
 8009e00:	080095d9 	.word	0x080095d9
 8009e04:	080095a5 	.word	0x080095a5
 8009e08:	0800960d 	.word	0x0800960d
 8009e0c:	24000018 	.word	0x24000018
 8009e10:	240064b0 	.word	0x240064b0
 8009e14:	240064ac 	.word	0x240064ac
 8009e18:	240064d8 	.word	0x240064d8

08009e1c <BSP_TS_GetState>:
{
 8009e1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009e20:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d151      	bne.n	8009eca <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8009e26:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <BSP_TS_GetState+0xb4>)
 8009e28:	a901      	add	r1, sp, #4
 8009e2a:	4a2a      	ldr	r2, [pc, #168]	; (8009ed4 <BSP_TS_GetState+0xb8>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6810      	ldr	r0, [r2, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	4798      	blx	r3
 8009e34:	2800      	cmp	r0, #0
 8009e36:	db45      	blt.n	8009ec4 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8009e38:	4927      	ldr	r1, [pc, #156]	; (8009ed8 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 8009e3a:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8009e3c:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8009e40:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d03a      	beq.n	8009ebc <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8009e46:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8009e48:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8009e4c:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8009e4e:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 8009e52:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8009e56:	bf42      	ittt	mi
 8009e58:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 8009e5a:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8009e5c:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8009e5e:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8009e60:	bf44      	itt	mi
 8009e62:	f108 34ff 	addmi.w	r4, r8, #4294967295
 8009e66:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8009e68:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8009e6a:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8009e6c:	bf48      	it	mi
 8009e6e:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8009e72:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8009e76:	bf48      	it	mi
 8009e78:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8009e7a:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8009e7c:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8009e7e:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8009e80:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8009e82:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8009e86:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8009e8a:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8009e8c:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8009e8e:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8009e90:	bf8c      	ite	hi
 8009e92:	eba4 050c 	subhi.w	r5, r4, ip
 8009e96:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8009e9a:	42bb      	cmp	r3, r7
 8009e9c:	bf8c      	ite	hi
 8009e9e:	1bda      	subhi	r2, r3, r7
 8009ea0:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8009ea2:	42a8      	cmp	r0, r5
 8009ea4:	d301      	bcc.n	8009eaa <BSP_TS_GetState+0x8e>
 8009ea6:	4290      	cmp	r0, r2
 8009ea8:	d205      	bcs.n	8009eb6 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8009eaa:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8009eac:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8009eae:	2000      	movs	r0, #0
}
 8009eb0:	b004      	add	sp, #16
 8009eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8009eb6:	e9c6 c701 	strd	ip, r7, [r6, #4]
 8009eba:	e7f8      	b.n	8009eae <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8009ebc:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8009ec0:	60b7      	str	r7, [r6, #8]
 8009ec2:	e7f5      	b.n	8009eb0 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009ec4:	f06f 0004 	mvn.w	r0, #4
 8009ec8:	e7f2      	b.n	8009eb0 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8009eca:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8009ece:	e7ef      	b.n	8009eb0 <BSP_TS_GetState+0x94>
 8009ed0:	240064d8 	.word	0x240064d8
 8009ed4:	240064ac 	.word	0x240064ac
 8009ed8:	240064b0 	.word	0x240064b0

08009edc <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009edc:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <SystemInit+0xb8>)
 8009ede:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009ee2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009eea:	691a      	ldr	r2, [r3, #16]
 8009eec:	f042 0210 	orr.w	r2, r2, #16
 8009ef0:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009ef2:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <SystemInit+0xbc>)
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	f003 030f 	and.w	r3, r3, #15
 8009efa:	2b06      	cmp	r3, #6
 8009efc:	d805      	bhi.n	8009f0a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	f023 030f 	bic.w	r3, r3, #15
 8009f04:	f043 0307 	orr.w	r3, r3, #7
 8009f08:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009f0a:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <SystemInit+0xc0>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009f14:	2200      	movs	r2, #0
 8009f16:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009f18:	4a21      	ldr	r2, [pc, #132]	; (8009fa0 <SystemInit+0xc4>)
 8009f1a:	6819      	ldr	r1, [r3, #0]
 8009f1c:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009f1e:	491e      	ldr	r1, [pc, #120]	; (8009f98 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8009f20:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009f22:	680a      	ldr	r2, [r1, #0]
 8009f24:	0712      	lsls	r2, r2, #28
 8009f26:	d505      	bpl.n	8009f34 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009f28:	680a      	ldr	r2, [r1, #0]
 8009f2a:	f022 020f 	bic.w	r2, r2, #15
 8009f2e:	f042 0207 	orr.w	r2, r2, #7
 8009f32:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8009f34:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009f36:	491b      	ldr	r1, [pc, #108]	; (8009fa4 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8009f38:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8009f3a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8009f3c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8009f3e:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009f40:	4919      	ldr	r1, [pc, #100]	; (8009fa8 <SystemInit+0xcc>)
 8009f42:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009f44:	4919      	ldr	r1, [pc, #100]	; (8009fac <SystemInit+0xd0>)
 8009f46:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009f48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009f4a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8009f4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009f4e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009f50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009f52:	6819      	ldr	r1, [r3, #0]
 8009f54:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8009f58:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009f5a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8009f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f60:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8009f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <SystemInit+0xd4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	0c1b      	lsrs	r3, r3, #16
 8009f72:	041b      	lsls	r3, r3, #16
 8009f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f78:	d203      	bcs.n	8009f82 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009f7a:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <SystemInit+0xd8>)
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <SystemInit+0xdc>)
 8009f84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009f88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8009f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f8e:	4b01      	ldr	r3, [pc, #4]	; (8009f94 <SystemInit+0xb8>)
 8009f90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8009f92:	4770      	bx	lr
 8009f94:	e000ed00 	.word	0xe000ed00
 8009f98:	52002000 	.word	0x52002000
 8009f9c:	58024400 	.word	0x58024400
 8009fa0:	eaf6ed7f 	.word	0xeaf6ed7f
 8009fa4:	02020200 	.word	0x02020200
 8009fa8:	01ff0000 	.word	0x01ff0000
 8009fac:	01010280 	.word	0x01010280
 8009fb0:	5c001000 	.word	0x5c001000
 8009fb4:	51008000 	.word	0x51008000
 8009fb8:	52004000 	.word	0x52004000

08009fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009fbc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009fbe:	2003      	movs	r0, #3
 8009fc0:	f000 f854 	bl	800a06c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009fc4:	f002 fc0c 	bl	800c7e0 <HAL_RCC_GetSysClockFreq>
 8009fc8:	490f      	ldr	r1, [pc, #60]	; (800a008 <HAL_Init+0x4c>)
 8009fca:	4a10      	ldr	r2, [pc, #64]	; (800a00c <HAL_Init+0x50>)
 8009fcc:	698b      	ldr	r3, [r1, #24]
 8009fce:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009fd2:	5cd3      	ldrb	r3, [r2, r3]
 8009fd4:	f003 031f 	and.w	r3, r3, #31
 8009fd8:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fda:	698b      	ldr	r3, [r1, #24]
 8009fdc:	f003 030f 	and.w	r3, r3, #15
 8009fe0:	5cd3      	ldrb	r3, [r2, r3]
 8009fe2:	4a0b      	ldr	r2, [pc, #44]	; (800a010 <HAL_Init+0x54>)
 8009fe4:	f003 031f 	and.w	r3, r3, #31
 8009fe8:	fa20 f303 	lsr.w	r3, r0, r3
 8009fec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <HAL_Init+0x58>)
 8009ff0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	f7f7 f9fc 	bl	80013f0 <HAL_InitTick>
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	b918      	cbnz	r0, 800a004 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009ffc:	f7f6 ff80 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800a000:	4620      	mov	r0, r4
 800a002:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a004:	2401      	movs	r4, #1
 800a006:	e7fb      	b.n	800a000 <HAL_Init+0x44>
 800a008:	58024400 	.word	0x58024400
 800a00c:	08024ce0 	.word	0x08024ce0
 800a010:	2400004c 	.word	0x2400004c
 800a014:	24000048 	.word	0x24000048

0800a018 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a018:	4a03      	ldr	r2, [pc, #12]	; (800a028 <HAL_IncTick+0x10>)
 800a01a:	4b04      	ldr	r3, [pc, #16]	; (800a02c <HAL_IncTick+0x14>)
 800a01c:	6811      	ldr	r1, [r2, #0]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	440b      	add	r3, r1
 800a022:	6013      	str	r3, [r2, #0]
}
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	240064dc 	.word	0x240064dc
 800a02c:	24000050 	.word	0x24000050

0800a030 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a030:	4b01      	ldr	r3, [pc, #4]	; (800a038 <HAL_GetTick+0x8>)
 800a032:	6818      	ldr	r0, [r3, #0]
}
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	240064dc 	.word	0x240064dc

0800a03c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a040:	f7ff fff6 	bl	800a030 <HAL_GetTick>
 800a044:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a046:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800a048:	bf1e      	ittt	ne
 800a04a:	4b04      	ldrne	r3, [pc, #16]	; (800a05c <HAL_Delay+0x20>)
 800a04c:	781b      	ldrbne	r3, [r3, #0]
 800a04e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a050:	f7ff ffee 	bl	800a030 <HAL_GetTick>
 800a054:	1b43      	subs	r3, r0, r5
 800a056:	42a3      	cmp	r3, r4
 800a058:	d3fa      	bcc.n	800a050 <HAL_Delay+0x14>
  {
  }
}
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	24000050 	.word	0x24000050

0800a060 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800a060:	4b01      	ldr	r3, [pc, #4]	; (800a068 <HAL_GetREVID+0x8>)
 800a062:	6818      	ldr	r0, [r3, #0]
}
 800a064:	0c00      	lsrs	r0, r0, #16
 800a066:	4770      	bx	lr
 800a068:	5c001000 	.word	0x5c001000

0800a06c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a06c:	4907      	ldr	r1, [pc, #28]	; (800a08c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a06e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a070:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a072:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a076:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a07a:	0412      	lsls	r2, r2, #16
 800a07c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a07e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800a088:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a08a:	4770      	bx	lr
 800a08c:	e000ed00 	.word	0xe000ed00

0800a090 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a090:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a092:	b530      	push	{r4, r5, lr}
 800a094:	68dc      	ldr	r4, [r3, #12]
 800a096:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a09a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a09e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0a0:	2d04      	cmp	r5, #4
 800a0a2:	bf28      	it	cs
 800a0a4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0a6:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0a8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0ac:	bf8c      	ite	hi
 800a0ae:	3c03      	subhi	r4, #3
 800a0b0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0b2:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800a0b6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0b8:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0bc:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a0c0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0c4:	fa01 f104 	lsl.w	r1, r1, r4
 800a0c8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800a0d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800a0d2:	db06      	blt.n	800a0e2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800a0d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800a0dc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a0e0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0e2:	f000 000f 	and.w	r0, r0, #15
 800a0e6:	4a02      	ldr	r2, [pc, #8]	; (800a0f0 <HAL_NVIC_SetPriority+0x60>)
 800a0e8:	5413      	strb	r3, [r2, r0]
 800a0ea:	e7f9      	b.n	800a0e0 <HAL_NVIC_SetPriority+0x50>
 800a0ec:	e000ed00 	.word	0xe000ed00
 800a0f0:	e000ed14 	.word	0xe000ed14

0800a0f4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	db08      	blt.n	800a10a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	0942      	lsrs	r2, r0, #5
 800a0fc:	f000 001f 	and.w	r0, r0, #31
 800a100:	fa03 f000 	lsl.w	r0, r3, r0
 800a104:	4b01      	ldr	r3, [pc, #4]	; (800a10c <HAL_NVIC_EnableIRQ+0x18>)
 800a106:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a10a:	4770      	bx	lr
 800a10c:	e000e100 	.word	0xe000e100

0800a110 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a110:	2800      	cmp	r0, #0
 800a112:	db0d      	blt.n	800a130 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a114:	0943      	lsrs	r3, r0, #5
 800a116:	2201      	movs	r2, #1
 800a118:	f000 001f 	and.w	r0, r0, #31
 800a11c:	3320      	adds	r3, #32
 800a11e:	fa02 f000 	lsl.w	r0, r2, r0
 800a122:	4a04      	ldr	r2, [pc, #16]	; (800a134 <HAL_NVIC_DisableIRQ+0x24>)
 800a124:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a12c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	e000e100 	.word	0xe000e100

0800a138 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800a138:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <HAL_MPU_Disable+0x18>)
 800a13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	e000ed00 	.word	0xe000ed00

0800a154 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <HAL_MPU_Enable+0x1c>)
 800a156:	f040 0001 	orr.w	r0, r0, #1
 800a15a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800a15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a160:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a164:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800a166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a16a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800a16e:	4770      	bx	lr
 800a170:	e000ed00 	.word	0xe000ed00

0800a174 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800a174:	7843      	ldrb	r3, [r0, #1]
 800a176:	4a14      	ldr	r2, [pc, #80]	; (800a1c8 <HAL_MPU_ConfigRegion+0x54>)
{
 800a178:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800a17a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800a17e:	7801      	ldrb	r1, [r0, #0]
 800a180:	b1e9      	cbz	r1, 800a1be <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800a182:	6843      	ldr	r3, [r0, #4]
 800a184:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a188:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a18a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800a18c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a18e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a192:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800a194:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a196:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800a19a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a19c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800a1a0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a1a2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800a1a6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a1a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800a1ac:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800a1ae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a1b2:	7a01      	ldrb	r1, [r0, #8]
 800a1b4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800a1b8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800a1bc:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800a1be:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800a1c2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800a1c6:	e7f9      	b.n	800a1bc <HAL_MPU_ConfigRegion+0x48>
 800a1c8:	e000ed00 	.word	0xe000ed00

0800a1cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a1cc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	b908      	cbnz	r0, 800a1d6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800a1d2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800a1d4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a1d6:	7f43      	ldrb	r3, [r0, #29]
 800a1d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1dc:	b913      	cbnz	r3, 800a1e4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800a1de:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800a1e0:	f7f6 fea6 	bl	8000f30 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a1e8:	7923      	ldrb	r3, [r4, #4]
 800a1ea:	b9e3      	cbnz	r3, 800a226 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	4a13      	ldr	r2, [pc, #76]	; (800a23c <HAL_CRC_Init+0x70>)
 800a1f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a1f2:	689a      	ldr	r2, [r3, #8]
 800a1f4:	f022 0218 	bic.w	r2, r2, #24
 800a1f8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a1fa:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a1fc:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a1fe:	b9d2      	cbnz	r2, 800a236 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a200:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a204:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800a206:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	6961      	ldr	r1, [r4, #20]
 800a20c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a210:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a212:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a214:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a216:	689a      	ldr	r2, [r3, #8]
 800a218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a21c:	430a      	orrs	r2, r1
 800a21e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800a220:	2301      	movs	r3, #1
 800a222:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800a224:	e7d6      	b.n	800a1d4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a226:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 f808 	bl	800a240 <HAL_CRCEx_Polynomial_Set>
 800a230:	2800      	cmp	r0, #0
 800a232:	d0e2      	beq.n	800a1fa <HAL_CRC_Init+0x2e>
 800a234:	e7cd      	b.n	800a1d2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a236:	6922      	ldr	r2, [r4, #16]
 800a238:	e7e4      	b.n	800a204 <HAL_CRC_Init+0x38>
 800a23a:	bf00      	nop
 800a23c:	04c11db7 	.word	0x04c11db7

0800a240 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a240:	07cb      	lsls	r3, r1, #31
{
 800a242:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800a244:	d50c      	bpl.n	800a260 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a246:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a248:	3b01      	subs	r3, #1
 800a24a:	d31c      	bcc.n	800a286 <HAL_CRCEx_Polynomial_Set+0x46>
 800a24c:	fa21 f403 	lsr.w	r4, r1, r3
 800a250:	07e4      	lsls	r4, r4, #31
 800a252:	d5f9      	bpl.n	800a248 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800a254:	2a10      	cmp	r2, #16
 800a256:	d012      	beq.n	800a27e <HAL_CRCEx_Polynomial_Set+0x3e>
 800a258:	d804      	bhi.n	800a264 <HAL_CRCEx_Polynomial_Set+0x24>
 800a25a:	b13a      	cbz	r2, 800a26c <HAL_CRCEx_Polynomial_Set+0x2c>
 800a25c:	2a08      	cmp	r2, #8
 800a25e:	d010      	beq.n	800a282 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 800a260:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800a262:	e00b      	b.n	800a27c <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 800a264:	2a18      	cmp	r2, #24
 800a266:	d1fb      	bne.n	800a260 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800a268:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800a26a:	d8f9      	bhi.n	800a260 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a26c:	6800      	ldr	r0, [r0, #0]
 800a26e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a270:	6883      	ldr	r3, [r0, #8]
 800a272:	f023 0318 	bic.w	r3, r3, #24
 800a276:	431a      	orrs	r2, r3
 800a278:	6082      	str	r2, [r0, #8]
 800a27a:	2000      	movs	r0, #0
}
 800a27c:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800a27e:	2b07      	cmp	r3, #7
 800a280:	e7f3      	b.n	800a26a <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800a282:	2b0f      	cmp	r3, #15
 800a284:	e7f1      	b.n	800a26a <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800a286:	2a00      	cmp	r2, #0
 800a288:	d1ea      	bne.n	800a260 <HAL_CRCEx_Polynomial_Set+0x20>
 800a28a:	e7ef      	b.n	800a26c <HAL_CRCEx_Polynomial_Set+0x2c>

0800a28c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a28c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a28e:	4604      	mov	r4, r0
 800a290:	2800      	cmp	r0, #0
 800a292:	d036      	beq.n	800a302 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a294:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800a298:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a29c:	b91b      	cbnz	r3, 800a2a6 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a29e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a2a2:	f7f6 fe5d 	bl	8000f60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a2a6:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a2a8:	69e0      	ldr	r0, [r4, #28]
 800a2aa:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a2ac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a2b4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a2b6:	6819      	ldr	r1, [r3, #0]
 800a2b8:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800a2bc:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a2c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2c6:	68a2      	ldr	r2, [r4, #8]
 800a2c8:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800a2cc:	4302      	orrs	r2, r0
 800a2ce:	f021 0101 	bic.w	r1, r1, #1
 800a2d2:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a2d4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a2d6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a2d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2da:	0c12      	lsrs	r2, r2, #16
 800a2dc:	0412      	lsls	r2, r2, #16
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a2e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2e4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800a2e8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800a2ec:	0552      	lsls	r2, r2, #21
 800a2ee:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a2f2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a2f8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a2fa:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a2fc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800a300:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a302:	2001      	movs	r0, #1
 800a304:	e7fc      	b.n	800a300 <HAL_DMA2D_Init+0x74>

0800a306 <HAL_DMA2D_LineEventCallback>:
 800a306:	4770      	bx	lr

0800a308 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800a308:	4770      	bx	lr

0800a30a <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a30a:	6803      	ldr	r3, [r0, #0]
{
 800a30c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800a30e:	685e      	ldr	r6, [r3, #4]
{
 800a310:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800a312:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a314:	07f2      	lsls	r2, r6, #31
 800a316:	d514      	bpl.n	800a342 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800a318:	05e9      	lsls	r1, r5, #23
 800a31a:	d512      	bpl.n	800a342 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a322:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a324:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800a326:	f042 0201 	orr.w	r2, r2, #1
 800a32a:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800a32c:	2201      	movs	r2, #1
 800a32e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a330:	2304      	movs	r3, #4
 800a332:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a336:	2300      	movs	r3, #0
 800a338:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a33c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a33e:	b103      	cbz	r3, 800a342 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a340:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a342:	06b2      	lsls	r2, r6, #26
 800a344:	d516      	bpl.n	800a374 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800a346:	04ab      	lsls	r3, r5, #18
 800a348:	d514      	bpl.n	800a374 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a352:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800a354:	2220      	movs	r2, #32
 800a356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a358:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a360:	2304      	movs	r3, #4
 800a362:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a366:	2300      	movs	r3, #0
 800a368:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a36c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a36e:	b10b      	cbz	r3, 800a374 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a370:	4620      	mov	r0, r4
 800a372:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a374:	0730      	lsls	r0, r6, #28
 800a376:	d516      	bpl.n	800a3a6 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800a378:	0529      	lsls	r1, r5, #20
 800a37a:	d514      	bpl.n	800a3a6 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a384:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800a386:	2208      	movs	r2, #8
 800a388:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a38c:	f043 0304 	orr.w	r3, r3, #4
 800a390:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a392:	2304      	movs	r3, #4
 800a394:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a398:	2300      	movs	r3, #0
 800a39a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800a39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3a0:	b10b      	cbz	r3, 800a3a6 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800a3a6:	0772      	lsls	r2, r6, #29
 800a3a8:	d50b      	bpl.n	800a3c2 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800a3aa:	056b      	lsls	r3, r5, #21
 800a3ac:	d509      	bpl.n	800a3c2 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a3ae:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a3b0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800a3ba:	2204      	movs	r2, #4
 800a3bc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800a3be:	f7ff ffa2 	bl	800a306 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800a3c2:	07b0      	lsls	r0, r6, #30
 800a3c4:	d514      	bpl.n	800a3f0 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800a3c6:	05a9      	lsls	r1, r5, #22
 800a3c8:	d512      	bpl.n	800a3f0 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3d2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a3d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3da:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800a3e8:	6a23      	ldr	r3, [r4, #32]
 800a3ea:	b10b      	cbz	r3, 800a3f0 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800a3f0:	06f2      	lsls	r2, r6, #27
 800a3f2:	d513      	bpl.n	800a41c <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800a3f4:	04eb      	lsls	r3, r5, #19
 800a3f6:	d511      	bpl.n	800a41c <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a3f8:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a3fa:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a402:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800a404:	2210      	movs	r2, #16
 800a406:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800a408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a40a:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800a40c:	2301      	movs	r3, #1
 800a40e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800a412:	2300      	movs	r3, #0
 800a414:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800a418:	f7ff ff76 	bl	800a308 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800a41c:	bd70      	pop	{r4, r5, r6, pc}

0800a41e <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800a41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a422:	4607      	mov	r7, r0
 800a424:	460d      	mov	r5, r1
 800a426:	4614      	mov	r4, r2
 800a428:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800a42a:	f7ff fe01 	bl	800a030 <HAL_GetTick>
 800a42e:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a434:	07d2      	lsls	r2, r2, #31
 800a436:	d50a      	bpl.n	800a44e <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a438:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800a43c:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800a43e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800a440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800a444:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800a448:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800a44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a44e:	f7ff fdef 	bl	800a030 <HAL_GetTick>
 800a452:	eba0 0008 	sub.w	r0, r0, r8
 800a456:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a45a:	d9e9      	bls.n	800a430 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800a45c:	2003      	movs	r0, #3
 800a45e:	e7f4      	b.n	800a44a <DSI_ShortWrite+0x2c>

0800a460 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a460:	7c03      	ldrb	r3, [r0, #16]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d05c      	beq.n	800a520 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800a466:	2200      	movs	r2, #0
 800a468:	6803      	ldr	r3, [r0, #0]
 800a46a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800a46e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a472:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800a474:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800a476:	d507      	bpl.n	800a488 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800a478:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a47c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800a480:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800a484:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800a488:	078a      	lsls	r2, r1, #30
 800a48a:	d505      	bpl.n	800a498 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800a48c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a490:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800a494:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800a498:	074a      	lsls	r2, r1, #29
 800a49a:	d505      	bpl.n	800a4a8 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800a49c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4a0:	f042 0201 	orr.w	r2, r2, #1
 800a4a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800a4a8:	070a      	lsls	r2, r1, #28
 800a4aa:	d505      	bpl.n	800a4b8 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800a4ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4b0:	f042 0202 	orr.w	r2, r2, #2
 800a4b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800a4b8:	06ca      	lsls	r2, r1, #27
 800a4ba:	d505      	bpl.n	800a4c8 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800a4bc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4c0:	f042 020c 	orr.w	r2, r2, #12
 800a4c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800a4c8:	068a      	lsls	r2, r1, #26
 800a4ca:	d505      	bpl.n	800a4d8 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800a4cc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4d0:	f042 0210 	orr.w	r2, r2, #16
 800a4d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800a4d8:	064a      	lsls	r2, r1, #25
 800a4da:	d505      	bpl.n	800a4e8 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800a4dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4e0:	f042 0220 	orr.w	r2, r2, #32
 800a4e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800a4e8:	060a      	lsls	r2, r1, #24
 800a4ea:	d505      	bpl.n	800a4f8 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800a4ec:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a4f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800a4f8:	05ca      	lsls	r2, r1, #23
 800a4fa:	d505      	bpl.n	800a508 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800a4fc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a504:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800a508:	058a      	lsls	r2, r1, #22
 800a50a:	d505      	bpl.n	800a518 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800a50c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800a510:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800a514:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800a518:	2300      	movs	r3, #0
 800a51a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a51c:	4618      	mov	r0, r3
 800a51e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a520:	2002      	movs	r0, #2
}
 800a522:	4770      	bx	lr

0800a524 <HAL_DSI_Init>:
{
 800a524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a526:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800a528:	4604      	mov	r4, r0
 800a52a:	2800      	cmp	r0, #0
 800a52c:	f000 80a9 	beq.w	800a682 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800a530:	7c43      	ldrb	r3, [r0, #17]
 800a532:	b90b      	cbnz	r3, 800a538 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800a534:	f7f6 fd38 	bl	8000fa8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800a538:	2303      	movs	r3, #3
 800a53a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800a53c:	2300      	movs	r3, #0
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800a546:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a54a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800a54e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800a552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800a55a:	f7ff fd69 	bl	800a030 <HAL_GetTick>
 800a55e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800a566:	04d9      	lsls	r1, r3, #19
 800a568:	d57a      	bpl.n	800a660 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800a56a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a56e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800a572:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800a576:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a57a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800a57e:	e9d5 0300 	ldrd	r0, r3, [r5]
 800a582:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a584:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800a588:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800a58a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800a58e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800a590:	430b      	orrs	r3, r1
 800a592:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800a596:	2300      	movs	r3, #0
 800a598:	9301      	str	r3, [sp, #4]
 800a59a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a59e:	f043 0301 	orr.w	r3, r3, #1
 800a5a2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800a5a6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800a5b2:	f7ff fd43 	bl	800a03c <HAL_Delay>
  tickstart = HAL_GetTick();
 800a5b6:	f7ff fd3b 	bl	800a030 <HAL_GetTick>
 800a5ba:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a5c2:	05d2      	lsls	r2, r2, #23
 800a5c4:	d556      	bpl.n	800a674 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800a5c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a5ca:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a5ce:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800a5d0:	f042 0206 	orr.w	r2, r2, #6
 800a5d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800a5d8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a5dc:	f022 0203 	bic.w	r2, r2, #3
 800a5e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a5e4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800a5e8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a5ea:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800a5ec:	f042 0201 	orr.w	r2, r2, #1
 800a5f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800a5f4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a5f8:	f022 0203 	bic.w	r2, r2, #3
 800a5fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a600:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a604:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a606:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800a608:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a612:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a614:	689a      	ldr	r2, [r3, #8]
 800a616:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a618:	491b      	ldr	r1, [pc, #108]	; (800a688 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800a61a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a61c:	686a      	ldr	r2, [r5, #4]
 800a61e:	2a01      	cmp	r2, #1
 800a620:	bf38      	it	cc
 800a622:	2201      	movcc	r2, #1
 800a624:	434a      	muls	r2, r1
 800a626:	68a9      	ldr	r1, [r5, #8]
 800a628:	f001 0103 	and.w	r1, r1, #3
 800a62c:	408a      	lsls	r2, r1
 800a62e:	6829      	ldr	r1, [r5, #0]
 800a630:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800a632:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800a634:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800a638:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800a63c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800a640:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800a644:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800a648:	430a      	orrs	r2, r1
 800a64a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800a64e:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800a652:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800a656:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800a658:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800a65a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800a65c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800a65e:	e007      	b.n	800a670 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a660:	f7ff fce6 	bl	800a030 <HAL_GetTick>
 800a664:	1b80      	subs	r0, r0, r6
 800a666:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a66a:	f67f af79 	bls.w	800a560 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800a66e:	2003      	movs	r0, #3
}
 800a670:	b002      	add	sp, #8
 800a672:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800a674:	f7ff fcdc 	bl	800a030 <HAL_GetTick>
 800a678:	1b80      	subs	r0, r0, r6
 800a67a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a67e:	d99d      	bls.n	800a5bc <HAL_DSI_Init+0x98>
 800a680:	e7f5      	b.n	800a66e <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800a682:	2001      	movs	r0, #1
 800a684:	e7f4      	b.n	800a670 <HAL_DSI_Init+0x14c>
 800a686:	bf00      	nop
 800a688:	003d0900 	.word	0x003d0900

0800a68c <HAL_DSI_ErrorCallback>:
 800a68c:	4770      	bx	lr

0800a68e <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800a68e:	6803      	ldr	r3, [r0, #0]
 800a690:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a694:	07d1      	lsls	r1, r2, #31
{
 800a696:	b510      	push	{r4, lr}
 800a698:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800a69a:	d508      	bpl.n	800a6ae <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800a69c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a6a0:	07d2      	lsls	r2, r2, #31
 800a6a2:	d504      	bpl.n	800a6ae <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800a6aa:	f7f7 fafd 	bl	8001ca8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800a6b4:	0791      	lsls	r1, r2, #30
 800a6b6:	d509      	bpl.n	800a6cc <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800a6b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a6bc:	0792      	lsls	r2, r2, #30
 800a6be:	d505      	bpl.n	800a6cc <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800a6c0:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800a6c2:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800a6c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800a6c8:	f7f7 fb20 	bl	8001d0c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800a6cc:	69a3      	ldr	r3, [r4, #24]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d04e      	beq.n	800a770 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800a6d8:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800a6dc:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800a6e0:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800a6e2:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800a6e6:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800a6e8:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800a6ea:	b119      	cbz	r1, 800a6f4 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800a6ec:	6961      	ldr	r1, [r4, #20]
 800a6ee:	f041 0101 	orr.w	r1, r1, #1
 800a6f2:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800a6f4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800a6f8:	d003      	beq.n	800a702 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800a6fa:	6962      	ldr	r2, [r4, #20]
 800a6fc:	f042 0202 	orr.w	r2, r2, #2
 800a700:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800a702:	07d8      	lsls	r0, r3, #31
 800a704:	d503      	bpl.n	800a70e <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800a706:	6962      	ldr	r2, [r4, #20]
 800a708:	f042 0204 	orr.w	r2, r2, #4
 800a70c:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800a70e:	0799      	lsls	r1, r3, #30
 800a710:	d503      	bpl.n	800a71a <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800a712:	6962      	ldr	r2, [r4, #20]
 800a714:	f042 0208 	orr.w	r2, r2, #8
 800a718:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800a71a:	f013 0f0c 	tst.w	r3, #12
 800a71e:	d003      	beq.n	800a728 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800a720:	6962      	ldr	r2, [r4, #20]
 800a722:	f042 0210 	orr.w	r2, r2, #16
 800a726:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800a728:	06da      	lsls	r2, r3, #27
 800a72a:	d503      	bpl.n	800a734 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800a72c:	6962      	ldr	r2, [r4, #20]
 800a72e:	f042 0220 	orr.w	r2, r2, #32
 800a732:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800a734:	0698      	lsls	r0, r3, #26
 800a736:	d503      	bpl.n	800a740 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800a738:	6962      	ldr	r2, [r4, #20]
 800a73a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a73e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800a740:	0659      	lsls	r1, r3, #25
 800a742:	d503      	bpl.n	800a74c <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800a744:	6962      	ldr	r2, [r4, #20]
 800a746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a74a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800a74c:	061a      	lsls	r2, r3, #24
 800a74e:	d503      	bpl.n	800a758 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800a750:	6962      	ldr	r2, [r4, #20]
 800a752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a756:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800a758:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800a75c:	d003      	beq.n	800a766 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800a75e:	6963      	ldr	r3, [r4, #20]
 800a760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a764:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800a766:	6963      	ldr	r3, [r4, #20]
 800a768:	b113      	cbz	r3, 800a770 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800a76a:	4620      	mov	r0, r4
 800a76c:	f7ff ff8e 	bl	800a68c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800a770:	bd10      	pop	{r4, pc}

0800a772 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a772:	7c03      	ldrb	r3, [r0, #16]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d00b      	beq.n	800a790 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800a778:	6803      	ldr	r3, [r0, #0]
 800a77a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a77c:	f022 0203 	bic.w	r2, r2, #3
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800a782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a784:	4311      	orrs	r1, r2
 800a786:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a788:	2300      	movs	r3, #0
 800a78a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a78c:	4618      	mov	r0, r3
 800a78e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a790:	2002      	movs	r0, #2
}
 800a792:	4770      	bx	lr

0800a794 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800a794:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a796:	7c03      	ldrb	r3, [r0, #16]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d06a      	beq.n	800a872 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800a79c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800a79e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800a7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800a7a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800a7b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a7b8:	f042 0201 	orr.w	r2, r2, #1
 800a7bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	f022 0203 	bic.w	r2, r2, #3
 800a7c6:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800a7c8:	68da      	ldr	r2, [r3, #12]
 800a7ca:	4322      	orrs	r2, r4
 800a7cc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800a7ce:	695a      	ldr	r2, [r3, #20]
 800a7d0:	f022 0207 	bic.w	r2, r2, #7
 800a7d4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800a7d6:	695c      	ldr	r4, [r3, #20]
 800a7d8:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800a7dc:	432a      	orrs	r2, r5
 800a7de:	694d      	ldr	r5, [r1, #20]
 800a7e0:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800a7e2:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800a7e4:	4322      	orrs	r2, r4
 800a7e6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	f022 020f 	bic.w	r2, r2, #15
 800a7ee:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800a7f0:	691c      	ldr	r4, [r3, #16]
 800a7f2:	432c      	orrs	r4, r5
 800a7f4:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800a7f6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800a7fa:	f024 040e 	bic.w	r4, r4, #14
 800a7fe:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800a802:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800a806:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800a808:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800a80c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800a810:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a812:	0c12      	lsrs	r2, r2, #16
 800a814:	0412      	lsls	r2, r2, #16
 800a816:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800a818:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a81a:	4322      	orrs	r2, r4
 800a81c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800a81e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800a822:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a826:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800a82a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800a82e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800a832:	432a      	orrs	r2, r5
 800a834:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800a836:	432a      	orrs	r2, r5
 800a838:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800a83a:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800a83c:	432a      	orrs	r2, r5
 800a83e:	4322      	orrs	r2, r4
 800a840:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800a844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a846:	f022 0201 	bic.w	r2, r2, #1
 800a84a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800a84c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a84e:	430a      	orrs	r2, r1
 800a850:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800a852:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a856:	f042 0201 	orr.w	r2, r2, #1
 800a85a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800a85e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800a862:	f042 0202 	orr.w	r2, r2, #2
 800a866:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a86a:	2300      	movs	r3, #0
 800a86c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a86e:	4618      	mov	r0, r3
}
 800a870:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800a872:	2002      	movs	r0, #2
 800a874:	e7fc      	b.n	800a870 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800a878 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800a878:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a87a:	7c03      	ldrb	r3, [r0, #16]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d02a      	beq.n	800a8d6 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800a880:	6802      	ldr	r2, [r0, #0]
 800a882:	4b16      	ldr	r3, [pc, #88]	; (800a8dc <HAL_DSI_ConfigCommand+0x64>)
 800a884:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800a886:	4023      	ands	r3, r4
 800a888:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800a88a:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800a88c:	e9d1 3500 	ldrd	r3, r5, [r1]
 800a890:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800a892:	688d      	ldr	r5, [r1, #8]
 800a894:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800a896:	68cd      	ldr	r5, [r1, #12]
 800a898:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800a89a:	690d      	ldr	r5, [r1, #16]
 800a89c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800a89e:	694d      	ldr	r5, [r1, #20]
 800a8a0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800a8a2:	698d      	ldr	r5, [r1, #24]
 800a8a4:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800a8a6:	69cd      	ldr	r5, [r1, #28]
 800a8a8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800a8aa:	6a0d      	ldr	r5, [r1, #32]
 800a8ac:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800a8ae:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800a8b0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800a8b2:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800a8b4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800a8b6:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800a8b8:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800a8ba:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800a8bc:	4323      	orrs	r3, r4
 800a8be:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800a8c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800a8c2:	f023 0302 	bic.w	r3, r3, #2
 800a8c6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800a8c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800a8ca:	430b      	orrs	r3, r1
 800a8cc:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a8d2:	4618      	mov	r0, r3
}
 800a8d4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800a8d6:	2002      	movs	r0, #2
 800a8d8:	e7fc      	b.n	800a8d4 <HAL_DSI_ConfigCommand+0x5c>
 800a8da:	bf00      	nop
 800a8dc:	fef080ff 	.word	0xfef080ff

0800a8e0 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a8e0:	7c03      	ldrb	r3, [r0, #16]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d00b      	beq.n	800a8fe <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800a8e6:	6803      	ldr	r3, [r0, #0]
 800a8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ea:	f022 021f 	bic.w	r2, r2, #31
 800a8ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800a8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f2:	4311      	orrs	r1, r2
 800a8f4:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800a8fe:	2002      	movs	r0, #2
}
 800a900:	4770      	bx	lr

0800a902 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800a902:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a904:	7c03      	ldrb	r3, [r0, #16]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d035      	beq.n	800a976 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800a90a:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800a90c:	e9d1 2400 	ldrd	r2, r4, [r1]
 800a910:	4294      	cmp	r4, r2
 800a912:	bf38      	it	cc
 800a914:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800a916:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a91a:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800a91e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800a922:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a926:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a92a:	4322      	orrs	r2, r4
 800a92c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800a930:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a934:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800a938:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800a93c:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800a940:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a944:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800a946:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800a94a:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800a94c:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800a94e:	432a      	orrs	r2, r5
 800a950:	4322      	orrs	r2, r4
 800a952:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800a956:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a95a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a95e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800a962:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800a966:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800a96a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800a96e:	2300      	movs	r3, #0
 800a970:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800a972:	4618      	mov	r0, r3
}
 800a974:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800a976:	2002      	movs	r0, #2
 800a978:	e7fc      	b.n	800a974 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800a97c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800a97c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800a97e:	7c03      	ldrb	r3, [r0, #16]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d05c      	beq.n	800aa3e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800a984:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800a986:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800a988:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800a98a:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800a98c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800a990:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800a992:	689a      	ldr	r2, [r3, #8]
 800a994:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800a998:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800a99a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800a99c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a99e:	b292      	uxth	r2, r2
 800a9a0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800a9a2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a9a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9a8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800a9aa:	4a26      	ldr	r2, [pc, #152]	; (800aa44 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800a9ac:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800a9ae:	4014      	ands	r4, r2
 800a9b0:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800a9b2:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800a9b4:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800a9b6:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800a9b8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800a9ba:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800a9bc:	4014      	ands	r4, r2
 800a9be:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800a9c0:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800a9c2:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800a9c4:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800a9c6:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800a9c8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a9cc:	4014      	ands	r4, r2
 800a9ce:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800a9d2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800a9d6:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800a9d8:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800a9da:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800a9de:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a9e2:	4014      	ands	r4, r2
 800a9e4:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800a9e8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a9ec:	432c      	orrs	r4, r5
 800a9ee:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800a9f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a9f6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800a9fa:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800a9fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800aa02:	698d      	ldr	r5, [r1, #24]
 800aa04:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800aa06:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800aa08:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800aa0a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800aa0e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800aa12:	4014      	ands	r4, r2
 800aa14:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800aa18:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800aa1c:	432c      	orrs	r4, r5
 800aa1e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800aa22:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800aa26:	4022      	ands	r2, r4
 800aa28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800aa2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800aa30:	430a      	orrs	r2, r1
 800aa32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aa36:	2300      	movs	r3, #0
 800aa38:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aa3a:	4618      	mov	r0, r3
}
 800aa3c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800aa3e:	2002      	movs	r0, #2
 800aa40:	e7fc      	b.n	800aa3c <HAL_DSI_ConfigHostTimeouts+0xc0>
 800aa42:	bf00      	nop
 800aa44:	ffff0000 	.word	0xffff0000

0800aa48 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aa48:	7c03      	ldrb	r3, [r0, #16]
{
 800aa4a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d01c      	beq.n	800aa8a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800aa50:	6802      	ldr	r2, [r0, #0]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	6851      	ldr	r1, [r2, #4]
 800aa58:	f041 0101 	orr.w	r1, r1, #1
 800aa5c:	6051      	str	r1, [r2, #4]
 800aa5e:	6851      	ldr	r1, [r2, #4]
 800aa60:	f001 0101 	and.w	r1, r1, #1
 800aa64:	9100      	str	r1, [sp, #0]
 800aa66:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800aa6e:	f041 0108 	orr.w	r1, r1, #8
 800aa72:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800aa76:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aa7a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aa7c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800aa7e:	f002 0208 	and.w	r2, r2, #8
 800aa82:	9201      	str	r2, [sp, #4]
 800aa84:	9a01      	ldr	r2, [sp, #4]
}
 800aa86:	b002      	add	sp, #8
 800aa88:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800aa8a:	2002      	movs	r0, #2
 800aa8c:	e7fb      	b.n	800aa86 <HAL_DSI_Start+0x3e>

0800aa8e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800aa8e:	7c03      	ldrb	r3, [r0, #16]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d00a      	beq.n	800aaaa <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800aa94:	6802      	ldr	r2, [r0, #0]
 800aa96:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800aa9a:	f043 0304 	orr.w	r3, r3, #4
 800aa9e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800aaaa:	2002      	movs	r0, #2
}
 800aaac:	4770      	bx	lr

0800aaae <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800aaae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800aab0:	7c05      	ldrb	r5, [r0, #16]
{
 800aab2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800aab4:	2d01      	cmp	r5, #1
 800aab6:	d009      	beq.n	800aacc <HAL_DSI_ShortWrite+0x1e>
 800aab8:	2501      	movs	r5, #1
 800aaba:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800aabc:	9d06      	ldr	r5, [sp, #24]
 800aabe:	9500      	str	r5, [sp, #0]
 800aac0:	f7ff fcad 	bl	800a41e <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800aac4:	2300      	movs	r3, #0
 800aac6:	7423      	strb	r3, [r4, #16]

  return status;
}
 800aac8:	b003      	add	sp, #12
 800aaca:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800aacc:	2002      	movs	r0, #2
 800aace:	e7fb      	b.n	800aac8 <HAL_DSI_ShortWrite+0x1a>

0800aad0 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800aad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad4:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800aad6:	7c03      	ldrb	r3, [r0, #16]
{
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800aadc:	2b01      	cmp	r3, #1
{
 800aade:	4615      	mov	r5, r2
 800aae0:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800aae4:	d053      	beq.n	800ab8e <HAL_DSI_LongWrite+0xbe>
 800aae6:	2301      	movs	r3, #1
 800aae8:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800aaea:	f7ff faa1 	bl	800a030 <HAL_GetTick>
 800aaee:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800aaf0:	6831      	ldr	r1, [r6, #0]
 800aaf2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800aaf4:	f013 0a01 	ands.w	sl, r3, #1
 800aaf8:	d01a      	beq.n	800ab30 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800aafa:	2c03      	cmp	r4, #3
 800aafc:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800aafe:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800ab02:	bf28      	it	cs
 800ab04:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800ab06:	4282      	cmp	r2, r0
 800ab08:	d11e      	bne.n	800ab48 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800ab0a:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800ab0c:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800ab0e:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800ab12:	bb1b      	cbnz	r3, 800ab5c <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800ab14:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ab16:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800ab1a:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ab1c:	0222      	lsls	r2, r4, #8
 800ab1e:	0224      	lsls	r4, r4, #8
 800ab20:	b292      	uxth	r2, r2
 800ab22:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800ab26:	4315      	orrs	r5, r2
 800ab28:	432c      	orrs	r4, r5
 800ab2a:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800ab2c:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800ab2e:	e009      	b.n	800ab44 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ab30:	f7ff fa7e 	bl	800a030 <HAL_GetTick>
 800ab34:	eba0 000b 	sub.w	r0, r0, fp
 800ab38:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab3c:	d9d8      	bls.n	800aaf0 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800ab3e:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800ab40:	f886 a010 	strb.w	sl, [r6, #16]
}
 800ab44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800ab48:	f818 3002 	ldrb.w	r3, [r8, r2]
 800ab4c:	3201      	adds	r2, #1
 800ab4e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800ab52:	fa03 f30c 	lsl.w	r3, r3, ip
 800ab56:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800ab5a:	e7d4      	b.n	800ab06 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ab5c:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800ab5e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ab62:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800ab64:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ab66:	bf28      	it	cs
 800ab68:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ab6c:	f812 8000 	ldrb.w	r8, [r2, r0]
 800ab70:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800ab74:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ab76:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800ab7a:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ab7c:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800ab80:	d1f4      	bne.n	800ab6c <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 800ab82:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 800ab86:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800ab88:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 800ab8c:	e7c1      	b.n	800ab12 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800ab8e:	2002      	movs	r0, #2
 800ab90:	e7d8      	b.n	800ab44 <HAL_DSI_LongWrite+0x74>

0800ab92 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800ab92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab96:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ab98:	7c03      	ldrb	r3, [r0, #16]
{
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800ab9e:	2b01      	cmp	r3, #1
{
 800aba0:	4617      	mov	r7, r2
 800aba2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800aba6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 800abaa:	d06f      	beq.n	800ac8c <HAL_DSI_Read+0xfa>
 800abac:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800abae:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800abb0:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800abb2:	d90d      	bls.n	800abd0 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800abb4:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800abb8:	2237      	movs	r2, #55	; 0x37
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	b2f3      	uxtb	r3, r6
 800abbe:	f7ff fc2e 	bl	800a41e <DSI_ShortWrite>
 800abc2:	b128      	cbz	r0, 800abd0 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800abc4:	2300      	movs	r3, #0

      return HAL_ERROR;
 800abc6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800abc8:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800abca:	b003      	add	sp, #12
 800abcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800abd0:	f1b9 0f06 	cmp.w	r9, #6
 800abd4:	d10f      	bne.n	800abf6 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800abd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800abd8:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800abda:	021b      	lsls	r3, r3, #8
 800abdc:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 800abe0:	f044 0406 	orr.w	r4, r4, #6
 800abe4:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800abe6:	f7ff fa23 	bl	800a030 <HAL_GetTick>
 800abea:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800abec:	2e00      	cmp	r6, #0
 800abee:	dc27      	bgt.n	800ac40 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800abf0:	2000      	movs	r0, #0
 800abf2:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800abf4:	e7e9      	b.n	800abca <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800abf6:	f1b9 0f04 	cmp.w	r9, #4
 800abfa:	d105      	bne.n	800ac08 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800abfc:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800abfe:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac00:	f044 0404 	orr.w	r4, r4, #4
 800ac04:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800ac06:	e7ee      	b.n	800abe6 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800ac08:	f1b9 0f14 	cmp.w	r9, #20
 800ac0c:	d108      	bne.n	800ac20 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800ac0e:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac12:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800ac14:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac16:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800ac1a:	f044 0414 	orr.w	r4, r4, #20
 800ac1e:	e7f1      	b.n	800ac04 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800ac20:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800ac24:	d1ce      	bne.n	800abc4 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800ac26:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac2a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800ac2c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800ac34:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ac36:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800ac3a:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 800ac3e:	e7e1      	b.n	800ac04 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800ac40:	682a      	ldr	r2, [r5, #0]
 800ac42:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800ac44:	f013 0310 	ands.w	r3, r3, #16
 800ac48:	d10d      	bne.n	800ac66 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800ac4a:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800ac4c:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800ac4e:	4632      	mov	r2, r6
 800ac50:	bf28      	it	cs
 800ac52:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800ac54:	00d9      	lsls	r1, r3, #3
 800ac56:	fa20 f101 	lsr.w	r1, r0, r1
 800ac5a:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d1f8      	bne.n	800ac54 <HAL_DSI_Read+0xc2>
        pdata++;
 800ac62:	4417      	add	r7, r2
        datasize--;
 800ac64:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ac66:	f7ff f9e3 	bl	800a030 <HAL_GetTick>
 800ac6a:	1b00      	subs	r0, r0, r4
 800ac6c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ac70:	d903      	bls.n	800ac7a <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800ac72:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800ac74:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800ac76:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800ac78:	e7a7      	b.n	800abca <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ac7e:	0652      	lsls	r2, r2, #25
 800ac80:	d4b4      	bmi.n	800abec <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800ac82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ac86:	069b      	lsls	r3, r3, #26
 800ac88:	d49c      	bmi.n	800abc4 <HAL_DSI_Read+0x32>
 800ac8a:	e7af      	b.n	800abec <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800ac8c:	2002      	movs	r0, #2
 800ac8e:	e79c      	b.n	800abca <HAL_DSI_Read+0x38>

0800ac90 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ac90:	7c03      	ldrb	r3, [r0, #16]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d010      	beq.n	800acb8 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800ac96:	6803      	ldr	r3, [r0, #0]
 800ac98:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800ac9c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800aca0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800aca4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800aca8:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800acac:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800acb0:	2300      	movs	r3, #0
 800acb2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800acb4:	4618      	mov	r0, r3
 800acb6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800acb8:	2002      	movs	r0, #2
}
 800acba:	4770      	bx	lr

0800acbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800acbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800acc0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acc2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800ae90 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800acc6:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800acca:	680a      	ldr	r2, [r1, #0]
 800accc:	fa32 f503 	lsrs.w	r5, r2, r3
 800acd0:	d102      	bne.n	800acd8 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800acd8:	f04f 0e01 	mov.w	lr, #1
 800acdc:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800ace0:	ea1e 0202 	ands.w	r2, lr, r2
 800ace4:	f000 80bd 	beq.w	800ae62 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ace8:	684e      	ldr	r6, [r1, #4]
 800acea:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acee:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800acf2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acf6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800acfa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800acfc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ad00:	2f01      	cmp	r7, #1
 800ad02:	d834      	bhi.n	800ad6e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800ad04:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad06:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ad0a:	68cf      	ldr	r7, [r1, #12]
 800ad0c:	fa07 f708 	lsl.w	r7, r7, r8
 800ad10:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800ad14:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800ad16:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad18:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ad1c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800ad20:	409f      	lsls	r7, r3
 800ad22:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800ad26:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800ad28:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad2a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad2c:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ad30:	688f      	ldr	r7, [r1, #8]
 800ad32:	fa07 f708 	lsl.w	r7, r7, r8
 800ad36:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800ad3a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ad3c:	d119      	bne.n	800ad72 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800ad3e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad42:	f003 0b07 	and.w	fp, r3, #7
 800ad46:	f04f 0e0f 	mov.w	lr, #15
 800ad4a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800ad4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800ad52:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ad56:	fa0e fe0b 	lsl.w	lr, lr, fp
 800ad5a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ad5e:	690f      	ldr	r7, [r1, #16]
 800ad60:	fa07 f70b 	lsl.w	r7, r7, fp
 800ad64:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800ad68:	f8ca 7020 	str.w	r7, [sl, #32]
 800ad6c:	e001      	b.n	800ad72 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ad6e:	2d03      	cmp	r5, #3
 800ad70:	d1da      	bne.n	800ad28 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800ad72:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad74:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad78:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ad7c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ad80:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 800ad84:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ad86:	d06c      	beq.n	800ae62 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad88:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800ad8c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ad90:	f003 0c03 	and.w	ip, r3, #3
 800ad94:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad98:	f045 0502 	orr.w	r5, r5, #2
 800ad9c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ada0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ada4:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 800ada8:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800adac:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800adb0:	f005 0502 	and.w	r5, r5, #2
 800adb4:	9501      	str	r5, [sp, #4]
 800adb6:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800adb8:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800adbc:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800adc0:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800adc4:	4d31      	ldr	r5, [pc, #196]	; (800ae8c <HAL_GPIO_Init+0x1d0>)
 800adc6:	42a8      	cmp	r0, r5
 800adc8:	d04d      	beq.n	800ae66 <HAL_GPIO_Init+0x1aa>
 800adca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adce:	42a8      	cmp	r0, r5
 800add0:	d04b      	beq.n	800ae6a <HAL_GPIO_Init+0x1ae>
 800add2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800add6:	42a8      	cmp	r0, r5
 800add8:	d049      	beq.n	800ae6e <HAL_GPIO_Init+0x1b2>
 800adda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adde:	42a8      	cmp	r0, r5
 800ade0:	d047      	beq.n	800ae72 <HAL_GPIO_Init+0x1b6>
 800ade2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ade6:	42a8      	cmp	r0, r5
 800ade8:	d045      	beq.n	800ae76 <HAL_GPIO_Init+0x1ba>
 800adea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adee:	42a8      	cmp	r0, r5
 800adf0:	d043      	beq.n	800ae7a <HAL_GPIO_Init+0x1be>
 800adf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adf6:	42a8      	cmp	r0, r5
 800adf8:	d041      	beq.n	800ae7e <HAL_GPIO_Init+0x1c2>
 800adfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800adfe:	42a8      	cmp	r0, r5
 800ae00:	d03f      	beq.n	800ae82 <HAL_GPIO_Init+0x1c6>
 800ae02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ae06:	42a8      	cmp	r0, r5
 800ae08:	d03d      	beq.n	800ae86 <HAL_GPIO_Init+0x1ca>
 800ae0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800ae0e:	42a8      	cmp	r0, r5
 800ae10:	bf0c      	ite	eq
 800ae12:	2509      	moveq	r5, #9
 800ae14:	250a      	movne	r5, #10
 800ae16:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae1a:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae1e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ae22:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800ae24:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800ae28:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800ae2a:	bf0c      	ite	eq
 800ae2c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800ae2e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae30:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800ae34:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800ae36:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800ae38:	bf0c      	ite	eq
 800ae3a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800ae3c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae3e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800ae42:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800ae44:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800ae48:	bf0c      	ite	eq
 800ae4a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800ae4c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ae4e:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800ae50:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800ae54:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800ae58:	bf54      	ite	pl
 800ae5a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800ae5c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800ae5e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800ae62:	3301      	adds	r3, #1
 800ae64:	e731      	b.n	800acca <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ae66:	2500      	movs	r5, #0
 800ae68:	e7d5      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae6a:	2501      	movs	r5, #1
 800ae6c:	e7d3      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae6e:	2502      	movs	r5, #2
 800ae70:	e7d1      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae72:	2503      	movs	r5, #3
 800ae74:	e7cf      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae76:	2504      	movs	r5, #4
 800ae78:	e7cd      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae7a:	2505      	movs	r5, #5
 800ae7c:	e7cb      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae7e:	2506      	movs	r5, #6
 800ae80:	e7c9      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae82:	2507      	movs	r5, #7
 800ae84:	e7c7      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae86:	2508      	movs	r5, #8
 800ae88:	e7c5      	b.n	800ae16 <HAL_GPIO_Init+0x15a>
 800ae8a:	bf00      	nop
 800ae8c:	58020000 	.word	0x58020000
 800ae90:	58024400 	.word	0x58024400

0800ae94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800ae98:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ae9a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800afc8 <HAL_GPIO_DeInit+0x134>
 800ae9e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800afcc <HAL_GPIO_DeInit+0x138>
 800aea2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800afd0 <HAL_GPIO_DeInit+0x13c>
 800aea6:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800afd4 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 800aeaa:	fa31 f302 	lsrs.w	r3, r1, r2
 800aeae:	d101      	bne.n	800aeb4 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800aeba:	ea1c 0601 	ands.w	r6, ip, r1
 800aebe:	d06d      	beq.n	800af9c <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aec0:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800aec4:	f002 0703 	and.w	r7, r2, #3
 800aec8:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800aeca:	4b3e      	ldr	r3, [pc, #248]	; (800afc4 <HAL_GPIO_DeInit+0x130>)
 800aecc:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800aed0:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800aed2:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800aed4:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 800aed8:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800aedc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800aee0:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800aee4:	d05c      	beq.n	800afa0 <HAL_GPIO_DeInit+0x10c>
 800aee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeea:	4298      	cmp	r0, r3
 800aeec:	d05a      	beq.n	800afa4 <HAL_GPIO_DeInit+0x110>
 800aeee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aef2:	4298      	cmp	r0, r3
 800aef4:	d058      	beq.n	800afa8 <HAL_GPIO_DeInit+0x114>
 800aef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aefa:	4298      	cmp	r0, r3
 800aefc:	d056      	beq.n	800afac <HAL_GPIO_DeInit+0x118>
 800aefe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af02:	4298      	cmp	r0, r3
 800af04:	d054      	beq.n	800afb0 <HAL_GPIO_DeInit+0x11c>
 800af06:	4540      	cmp	r0, r8
 800af08:	d054      	beq.n	800afb4 <HAL_GPIO_DeInit+0x120>
 800af0a:	4548      	cmp	r0, r9
 800af0c:	d054      	beq.n	800afb8 <HAL_GPIO_DeInit+0x124>
 800af0e:	4550      	cmp	r0, sl
 800af10:	d054      	beq.n	800afbc <HAL_GPIO_DeInit+0x128>
 800af12:	4558      	cmp	r0, fp
 800af14:	d054      	beq.n	800afc0 <HAL_GPIO_DeInit+0x12c>
 800af16:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800af1a:	4298      	cmp	r0, r3
 800af1c:	bf0c      	ite	eq
 800af1e:	2309      	moveq	r3, #9
 800af20:	230a      	movne	r3, #10
 800af22:	40bb      	lsls	r3, r7
 800af24:	4573      	cmp	r3, lr
 800af26:	d119      	bne.n	800af5c <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800af28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800af2c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800af30:	ea27 0706 	bic.w	r7, r7, r6
 800af34:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800af38:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800af3c:	ea27 0706 	bic.w	r7, r7, r6
 800af40:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800af44:	685f      	ldr	r7, [r3, #4]
 800af46:	ea27 0706 	bic.w	r7, r7, r6
 800af4a:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800af4c:	681f      	ldr	r7, [r3, #0]
 800af4e:	ea27 0606 	bic.w	r6, r7, r6
 800af52:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af54:	68a3      	ldr	r3, [r4, #8]
 800af56:	ea23 0305 	bic.w	r3, r3, r5
 800af5a:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800af5c:	2503      	movs	r5, #3
 800af5e:	0053      	lsls	r3, r2, #1
 800af60:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800af62:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800af66:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800af6a:	260f      	movs	r6, #15
 800af6c:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800af6e:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800af70:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800af72:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800af74:	fa22 f405 	lsr.w	r4, r2, r5
 800af78:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800af7c:	6a25      	ldr	r5, [r4, #32]
 800af7e:	ea25 0606 	bic.w	r6, r5, r6
 800af82:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af84:	68c4      	ldr	r4, [r0, #12]
 800af86:	ea24 0403 	bic.w	r4, r4, r3
 800af8a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800af8c:	6844      	ldr	r4, [r0, #4]
 800af8e:	ea24 040c 	bic.w	r4, r4, ip
 800af92:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af94:	6884      	ldr	r4, [r0, #8]
 800af96:	ea24 0303 	bic.w	r3, r4, r3
 800af9a:	6083      	str	r3, [r0, #8]
    position++;
 800af9c:	3201      	adds	r2, #1
 800af9e:	e784      	b.n	800aeaa <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800afa0:	2300      	movs	r3, #0
 800afa2:	e7be      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e7bc      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afa8:	2302      	movs	r3, #2
 800afaa:	e7ba      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afac:	2303      	movs	r3, #3
 800afae:	e7b8      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afb0:	2304      	movs	r3, #4
 800afb2:	e7b6      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afb4:	2305      	movs	r3, #5
 800afb6:	e7b4      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afb8:	2306      	movs	r3, #6
 800afba:	e7b2      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afbc:	2307      	movs	r3, #7
 800afbe:	e7b0      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afc0:	2308      	movs	r3, #8
 800afc2:	e7ae      	b.n	800af22 <HAL_GPIO_DeInit+0x8e>
 800afc4:	58020000 	.word	0x58020000
 800afc8:	58021400 	.word	0x58021400
 800afcc:	58021800 	.word	0x58021800
 800afd0:	58021c00 	.word	0x58021c00
 800afd4:	58022000 	.word	0x58022000

0800afd8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800afd8:	6903      	ldr	r3, [r0, #16]
 800afda:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800afdc:	bf14      	ite	ne
 800afde:	2001      	movne	r0, #1
 800afe0:	2000      	moveq	r0, #0
 800afe2:	4770      	bx	lr

0800afe4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800afe4:	b10a      	cbz	r2, 800afea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800afe6:	6181      	str	r1, [r0, #24]
  }
}
 800afe8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800afea:	0409      	lsls	r1, r1, #16
 800afec:	e7fb      	b.n	800afe6 <HAL_GPIO_WritePin+0x2>

0800afee <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800afee:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aff0:	ea01 0203 	and.w	r2, r1, r3
 800aff4:	ea21 0103 	bic.w	r1, r1, r3
 800aff8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800affc:	6181      	str	r1, [r0, #24]
}
 800affe:	4770      	bx	lr

0800b000 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800b000:	4b04      	ldr	r3, [pc, #16]	; (800b014 <HAL_HSEM_FastTake+0x14>)
 800b002:	3020      	adds	r0, #32
 800b004:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800b008:	4b03      	ldr	r3, [pc, #12]	; (800b018 <HAL_HSEM_FastTake+0x18>)
 800b00a:	1ac0      	subs	r0, r0, r3
 800b00c:	bf18      	it	ne
 800b00e:	2001      	movne	r0, #1
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	58026400 	.word	0x58026400
 800b018:	80000300 	.word	0x80000300

0800b01c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800b01c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800b020:	4b01      	ldr	r3, [pc, #4]	; (800b028 <HAL_HSEM_Release+0xc>)
 800b022:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800b026:	4770      	bx	lr
 800b028:	58026400 	.word	0x58026400

0800b02c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b02c:	6803      	ldr	r3, [r0, #0]
 800b02e:	699a      	ldr	r2, [r3, #24]
 800b030:	0791      	lsls	r1, r2, #30
 800b032:	d501      	bpl.n	800b038 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b034:	2200      	movs	r2, #0
 800b036:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	07d2      	lsls	r2, r2, #31
 800b03c:	d403      	bmi.n	800b046 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	f042 0201 	orr.w	r2, r2, #1
 800b044:	619a      	str	r2, [r3, #24]
  }
}
 800b046:	4770      	bx	lr

0800b048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b048:	b530      	push	{r4, r5, lr}
 800b04a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b04c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b050:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b052:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800b054:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800b05a:	4a05      	ldr	r2, [pc, #20]	; (800b070 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b05c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800b05e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b066:	ea20 0002 	bic.w	r0, r0, r2
 800b06a:	4303      	orrs	r3, r0
 800b06c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b06e:	bd30      	pop	{r4, r5, pc}
 800b070:	03ff63ff 	.word	0x03ff63ff

0800b074 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800b074:	6803      	ldr	r3, [r0, #0]
{
 800b076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b07a:	699c      	ldr	r4, [r3, #24]
{
 800b07c:	4605      	mov	r5, r0
 800b07e:	460f      	mov	r7, r1
 800b080:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b082:	f014 0410 	ands.w	r4, r4, #16
 800b086:	d070      	beq.n	800b16a <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800b088:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b08a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800b08c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b08e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	699a      	ldr	r2, [r3, #24]
 800b094:	0692      	lsls	r2, r2, #26
 800b096:	d462      	bmi.n	800b15e <I2C_IsErrorOccurred+0xea>
 800b098:	f1b8 0f00 	cmp.w	r8, #0
 800b09c:	d036      	beq.n	800b10c <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 800b09e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800b0a2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0a8:	05d6      	lsls	r6, r2, #23
 800b0aa:	d505      	bpl.n	800b0b8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0ac:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b0b0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800b0b4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0b6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b0b8:	0551      	lsls	r1, r2, #21
 800b0ba:	d505      	bpl.n	800b0c8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b0c0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800b0c4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0c6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b0c8:	0592      	lsls	r2, r2, #22
 800b0ca:	d550      	bpl.n	800b16e <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b0cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b0d0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b0d4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f7ff ffa8 	bl	800b02c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800b0dc:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800b0de:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800b0e0:	6853      	ldr	r3, [r2, #4]
 800b0e2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800b0e6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800b0ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800b0f4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b0f6:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800b0f8:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800b0fa:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0fc:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b100:	2300      	movs	r3, #0
 800b102:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800b106:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800b10a:	e032      	b.n	800b172 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800b10c:	1c7a      	adds	r2, r7, #1
 800b10e:	d0c0      	beq.n	800b092 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b110:	f7fe ff8e 	bl	800a030 <HAL_GetTick>
 800b114:	1b80      	subs	r0, r0, r6
 800b116:	42b8      	cmp	r0, r7
 800b118:	d801      	bhi.n	800b11e <I2C_IsErrorOccurred+0xaa>
 800b11a:	2f00      	cmp	r7, #0
 800b11c:	d1b8      	bne.n	800b090 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800b122:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b126:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800b128:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b12a:	0400      	lsls	r0, r0, #16
 800b12c:	d50a      	bpl.n	800b144 <I2C_IsErrorOccurred+0xd0>
 800b12e:	0448      	lsls	r0, r1, #17
 800b130:	d408      	bmi.n	800b144 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800b132:	2a20      	cmp	r2, #32
 800b134:	d006      	beq.n	800b144 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b13c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b13e:	f7fe ff77 	bl	800a030 <HAL_GetTick>
 800b142:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	0699      	lsls	r1, r3, #26
 800b14a:	d4a1      	bmi.n	800b090 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b14c:	f7fe ff70 	bl	800a030 <HAL_GetTick>
 800b150:	1b80      	subs	r0, r0, r6
 800b152:	2819      	cmp	r0, #25
 800b154:	d9f6      	bls.n	800b144 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b156:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b158:	f04f 0801 	mov.w	r8, #1
 800b15c:	e798      	b.n	800b090 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800b15e:	f1b8 0f00 	cmp.w	r8, #0
 800b162:	d19c      	bne.n	800b09e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b164:	2220      	movs	r2, #32
 800b166:	61da      	str	r2, [r3, #28]
 800b168:	e799      	b.n	800b09e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800b16a:	4620      	mov	r0, r4
 800b16c:	e79a      	b.n	800b0a4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800b16e:	2800      	cmp	r0, #0
 800b170:	d1b1      	bne.n	800b0d6 <I2C_IsErrorOccurred+0x62>
}
 800b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b176 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b176:	b570      	push	{r4, r5, r6, lr}
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	079b      	lsls	r3, r3, #30
 800b184:	d501      	bpl.n	800b18a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800b186:	2000      	movs	r0, #0
}
 800b188:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b18a:	4632      	mov	r2, r6
 800b18c:	4629      	mov	r1, r5
 800b18e:	4620      	mov	r0, r4
 800b190:	f7ff ff70 	bl	800b074 <I2C_IsErrorOccurred>
 800b194:	b9c0      	cbnz	r0, 800b1c8 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800b196:	1c6a      	adds	r2, r5, #1
 800b198:	d0f1      	beq.n	800b17e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b19a:	f7fe ff49 	bl	800a030 <HAL_GetTick>
 800b19e:	1b80      	subs	r0, r0, r6
 800b1a0:	42a8      	cmp	r0, r5
 800b1a2:	d801      	bhi.n	800b1a8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	d1ea      	bne.n	800b17e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	f013 0302 	ands.w	r3, r3, #2
 800b1b0:	d1e5      	bne.n	800b17e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800b1b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1b8:	f042 0220 	orr.w	r2, r2, #32
 800b1bc:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b1be:	2220      	movs	r2, #32
 800b1c0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800b1c8:	2001      	movs	r0, #1
 800b1ca:	e7dd      	b.n	800b188 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800b1cc <I2C_WaitOnFlagUntilTimeout>:
{
 800b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d0:	9f06      	ldr	r7, [sp, #24]
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4688      	mov	r8, r1
 800b1d6:	4616      	mov	r6, r2
 800b1d8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	6993      	ldr	r3, [r2, #24]
 800b1de:	ea38 0303 	bics.w	r3, r8, r3
 800b1e2:	bf0c      	ite	eq
 800b1e4:	2301      	moveq	r3, #1
 800b1e6:	2300      	movne	r3, #0
 800b1e8:	42b3      	cmp	r3, r6
 800b1ea:	d001      	beq.n	800b1f0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e01e      	b.n	800b22e <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800b1f0:	1c6b      	adds	r3, r5, #1
 800b1f2:	d0f3      	beq.n	800b1dc <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1f4:	f7fe ff1c 	bl	800a030 <HAL_GetTick>
 800b1f8:	1bc0      	subs	r0, r0, r7
 800b1fa:	42a8      	cmp	r0, r5
 800b1fc:	d801      	bhi.n	800b202 <I2C_WaitOnFlagUntilTimeout+0x36>
 800b1fe:	2d00      	cmp	r5, #0
 800b200:	d1eb      	bne.n	800b1da <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	ea38 0303 	bics.w	r3, r8, r3
 800b20a:	bf0c      	ite	eq
 800b20c:	2301      	moveq	r3, #1
 800b20e:	2300      	movne	r3, #0
 800b210:	42b3      	cmp	r3, r6
 800b212:	d1e2      	bne.n	800b1da <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b214:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800b216:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b218:	f043 0320 	orr.w	r3, r3, #32
 800b21c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b21e:	2320      	movs	r3, #32
 800b220:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b224:	2300      	movs	r3, #0
 800b226:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800b22a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b232 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800b232:	b570      	push	{r4, r5, r6, lr}
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	069b      	lsls	r3, r3, #26
 800b240:	d501      	bpl.n	800b246 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800b242:	2000      	movs	r0, #0
}
 800b244:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b246:	4632      	mov	r2, r6
 800b248:	4629      	mov	r1, r5
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff ff12 	bl	800b074 <I2C_IsErrorOccurred>
 800b250:	b9b0      	cbnz	r0, 800b280 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b252:	f7fe feed 	bl	800a030 <HAL_GetTick>
 800b256:	1b80      	subs	r0, r0, r6
 800b258:	42a8      	cmp	r0, r5
 800b25a:	d801      	bhi.n	800b260 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	d1ec      	bne.n	800b23a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	699b      	ldr	r3, [r3, #24]
 800b264:	f013 0320 	ands.w	r3, r3, #32
 800b268:	d1e7      	bne.n	800b23a <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b26a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b26c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b270:	f042 0220 	orr.w	r2, r2, #32
 800b274:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b276:	2220      	movs	r2, #32
 800b278:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800b280:	2001      	movs	r0, #1
 800b282:	e7df      	b.n	800b244 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800b284 <HAL_I2C_MspInit>:
}
 800b284:	4770      	bx	lr

0800b286 <HAL_I2C_Init>:
{
 800b286:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b288:	4604      	mov	r4, r0
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d04a      	beq.n	800b324 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b28e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b292:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b296:	b91b      	cbnz	r3, 800b2a0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800b298:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800b29c:	f7ff fff2 	bl	800b284 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2a0:	2324      	movs	r3, #36	; 0x24
 800b2a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	f022 0201 	bic.w	r2, r2, #1
 800b2ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b2b0:	6862      	ldr	r2, [r4, #4]
 800b2b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b2b6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b2b8:	689a      	ldr	r2, [r3, #8]
 800b2ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2be:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2c4:	2901      	cmp	r1, #1
 800b2c6:	d124      	bne.n	800b312 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b2c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2cc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2ce:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2d0:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b2d2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800b2d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2da:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2e4:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800b2e8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b2ea:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b2ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b2f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b2f2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800b2f6:	430a      	orrs	r2, r1
 800b2f8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	f042 0201 	orr.w	r2, r2, #1
 800b300:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800b302:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b304:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b306:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b30a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b30c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b310:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b316:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b318:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b31a:	d1d8      	bne.n	800b2ce <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b31c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	e7d4      	b.n	800b2ce <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800b324:	2001      	movs	r0, #1
 800b326:	e7f3      	b.n	800b310 <HAL_I2C_Init+0x8a>

0800b328 <HAL_I2C_MspDeInit>:
 800b328:	4770      	bx	lr

0800b32a <HAL_I2C_DeInit>:
{
 800b32a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800b32c:	4604      	mov	r4, r0
 800b32e:	b198      	cbz	r0, 800b358 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800b330:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800b332:	2324      	movs	r3, #36	; 0x24
 800b334:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800b338:	6813      	ldr	r3, [r2, #0]
 800b33a:	f023 0301 	bic.w	r3, r3, #1
 800b33e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800b340:	f7ff fff2 	bl	800b328 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b344:	2000      	movs	r0, #0
 800b346:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800b348:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800b34c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b350:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b352:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b356:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b358:	2001      	movs	r0, #1
 800b35a:	e7fc      	b.n	800b356 <HAL_I2C_DeInit+0x2c>

0800b35c <HAL_I2C_Mem_Write>:
{
 800b35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b362:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b366:	4604      	mov	r4, r0
 800b368:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b36a:	2b20      	cmp	r3, #32
{
 800b36c:	4616      	mov	r6, r2
 800b36e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b372:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b376:	f040 80c6 	bne.w	800b506 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800b37a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b37c:	b113      	cbz	r3, 800b384 <HAL_I2C_Mem_Write+0x28>
 800b37e:	f1ba 0f00 	cmp.w	sl, #0
 800b382:	d106      	bne.n	800b392 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b384:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b388:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800b38a:	2001      	movs	r0, #1
}
 800b38c:	b003      	add	sp, #12
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b392:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b396:	2b01      	cmp	r3, #1
 800b398:	f000 80b5 	beq.w	800b506 <HAL_I2C_Mem_Write+0x1aa>
 800b39c:	f04f 0b01 	mov.w	fp, #1
 800b3a0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b3a4:	f7fe fe44 	bl	800a030 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b3a8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b3aa:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b3ac:	9000      	str	r0, [sp, #0]
 800b3ae:	465a      	mov	r2, fp
 800b3b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff ff09 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1e5      	bne.n	800b38a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b3be:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b3c0:	fa5f f289 	uxtb.w	r2, r9
 800b3c4:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800b3c6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b3c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3cc:	2340      	movs	r3, #64	; 0x40
 800b3ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800b3d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3d4:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b3d6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800b3d8:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b3da:	4b4c      	ldr	r3, [pc, #304]	; (800b50c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800b3dc:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3e6:	f7ff fe2f 	bl	800b048 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	4641      	mov	r1, r8
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff fec1 	bl	800b176 <I2C_WaitOnTXISFlagUntilTimeout>
 800b3f4:	bb18      	cbnz	r0, 800b43e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3f6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3fa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b3fc:	d115      	bne.n	800b42a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b3fe:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b400:	2200      	movs	r2, #0
 800b402:	2180      	movs	r1, #128	; 0x80
 800b404:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b406:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b408:	4643      	mov	r3, r8
 800b40a:	9500      	str	r5, [sp, #0]
 800b40c:	f7ff fede 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b410:	b9a8      	cbnz	r0, 800b43e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b412:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b414:	b29b      	uxth	r3, r3
 800b416:	2bff      	cmp	r3, #255	; 0xff
 800b418:	d815      	bhi.n	800b446 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b41a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b41c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b420:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800b422:	b292      	uxth	r2, r2
 800b424:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	e012      	b.n	800b450 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b42a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b42c:	4641      	mov	r1, r8
 800b42e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b430:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b432:	462a      	mov	r2, r5
 800b434:	f7ff fe9f 	bl	800b176 <I2C_WaitOnTXISFlagUntilTimeout>
 800b438:	b908      	cbnz	r0, 800b43e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	e7df      	b.n	800b3fe <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800b43e:	2300      	movs	r3, #0
 800b440:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b444:	e7a1      	b.n	800b38a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b446:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b44c:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b44e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b450:	4639      	mov	r1, r7
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff fdf8 	bl	800b048 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b458:	462a      	mov	r2, r5
 800b45a:	4641      	mov	r1, r8
 800b45c:	4620      	mov	r0, r4
 800b45e:	f7ff fe8a 	bl	800b176 <I2C_WaitOnTXISFlagUntilTimeout>
 800b462:	2800      	cmp	r0, #0
 800b464:	d191      	bne.n	800b38a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b468:	6822      	ldr	r2, [r4, #0]
 800b46a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b46e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b470:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b472:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b474:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b476:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b478:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b47a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800b47c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b47e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b480:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b482:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b484:	b29b      	uxth	r3, r3
 800b486:	b1b3      	cbz	r3, 800b4b6 <HAL_I2C_Mem_Write+0x15a>
 800b488:	b9aa      	cbnz	r2, 800b4b6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b48a:	4643      	mov	r3, r8
 800b48c:	2180      	movs	r1, #128	; 0x80
 800b48e:	4620      	mov	r0, r4
 800b490:	9500      	str	r5, [sp, #0]
 800b492:	f7ff fe9b 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b496:	2800      	cmp	r0, #0
 800b498:	f47f af77 	bne.w	800b38a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b49c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2bff      	cmp	r3, #255	; 0xff
 800b4a2:	d928      	bls.n	800b4f6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4a4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b4a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b4aa:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f7ff fdc9 	bl	800b048 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b4b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1cc      	bne.n	800b458 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4641      	mov	r1, r8
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7ff feb5 	bl	800b232 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f47f af5e 	bne.w	800b38a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b4d4:	685a      	ldr	r2, [r3, #4]
 800b4d6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b4da:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b4de:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b4e2:	f022 0201 	bic.w	r2, r2, #1
 800b4e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b4e8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b4ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b4f0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b4f4:	e74a      	b.n	800b38c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b4f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b4fc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800b4fe:	b292      	uxth	r2, r2
 800b500:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	e7d3      	b.n	800b4ae <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800b506:	2002      	movs	r0, #2
 800b508:	e740      	b.n	800b38c <HAL_I2C_Mem_Write+0x30>
 800b50a:	bf00      	nop
 800b50c:	80002000 	.word	0x80002000

0800b510 <HAL_I2C_Mem_Read>:
{
 800b510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b514:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b516:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b51a:	4604      	mov	r4, r0
 800b51c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b51e:	2b20      	cmp	r3, #32
{
 800b520:	4616      	mov	r6, r2
 800b522:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800b526:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800b52a:	f040 80c9 	bne.w	800b6c0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800b52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b530:	b113      	cbz	r3, 800b538 <HAL_I2C_Mem_Read+0x28>
 800b532:	f1ba 0f00 	cmp.w	sl, #0
 800b536:	d106      	bne.n	800b546 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b53c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800b53e:	2001      	movs	r0, #1
}
 800b540:	b003      	add	sp, #12
 800b542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800b546:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	f000 80b8 	beq.w	800b6c0 <HAL_I2C_Mem_Read+0x1b0>
 800b550:	f04f 0b01 	mov.w	fp, #1
 800b554:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800b558:	f7fe fd6a 	bl	800a030 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b55c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800b55e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b560:	9000      	str	r0, [sp, #0]
 800b562:	465a      	mov	r2, fp
 800b564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b568:	4620      	mov	r0, r4
 800b56a:	f7ff fe2f 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d1e5      	bne.n	800b53e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b572:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b574:	fa5f f289 	uxtb.w	r2, r9
 800b578:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800b57a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b57c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b580:	2340      	movs	r3, #64	; 0x40
 800b582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800b586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b588:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800b58a:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b58c:	4b4d      	ldr	r3, [pc, #308]	; (800b6c4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800b58e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b592:	9300      	str	r3, [sp, #0]
 800b594:	4603      	mov	r3, r0
 800b596:	4620      	mov	r0, r4
 800b598:	f7ff fd56 	bl	800b048 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b59c:	462a      	mov	r2, r5
 800b59e:	4641      	mov	r1, r8
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f7ff fde8 	bl	800b176 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5a6:	bb20      	cbnz	r0, 800b5f2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5a8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ac:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5ae:	d116      	bne.n	800b5de <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5b0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2140      	movs	r1, #64	; 0x40
 800b5b6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5b8:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b5ba:	4643      	mov	r3, r8
 800b5bc:	9500      	str	r5, [sp, #0]
 800b5be:	f7ff fe05 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b5c2:	b9b0      	cbnz	r0, 800b5f2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b5c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	2bff      	cmp	r3, #255	; 0xff
 800b5ca:	4b3f      	ldr	r3, [pc, #252]	; (800b6c8 <HAL_I2C_Mem_Read+0x1b8>)
 800b5cc:	d815      	bhi.n	800b5fa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800b5ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	e012      	b.n	800b604 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b5de:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b5e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	f7ff fdc5 	bl	800b176 <I2C_WaitOnTXISFlagUntilTimeout>
 800b5ec:	b908      	cbnz	r0, 800b5f2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	e7de      	b.n	800b5b0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b5f8:	e7a1      	b.n	800b53e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b5fa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b602:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b604:	4639      	mov	r1, r7
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff fd1e 	bl	800b048 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b60c:	4643      	mov	r3, r8
 800b60e:	2200      	movs	r2, #0
 800b610:	2104      	movs	r1, #4
 800b612:	4620      	mov	r0, r4
 800b614:	9500      	str	r5, [sp, #0]
 800b616:	f7ff fdd9 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d18f      	bne.n	800b53e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b624:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800b626:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b628:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b62a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800b62c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b62e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b630:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b632:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800b634:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b636:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b638:	b29b      	uxth	r3, r3
 800b63a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b63c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b63e:	b29b      	uxth	r3, r3
 800b640:	b1b3      	cbz	r3, 800b670 <HAL_I2C_Mem_Read+0x160>
 800b642:	b9aa      	cbnz	r2, 800b670 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b644:	4643      	mov	r3, r8
 800b646:	2180      	movs	r1, #128	; 0x80
 800b648:	4620      	mov	r0, r4
 800b64a:	9500      	str	r5, [sp, #0]
 800b64c:	f7ff fdbe 	bl	800b1cc <I2C_WaitOnFlagUntilTimeout>
 800b650:	2800      	cmp	r0, #0
 800b652:	f47f af74 	bne.w	800b53e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b656:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b658:	b29b      	uxth	r3, r3
 800b65a:	2bff      	cmp	r3, #255	; 0xff
 800b65c:	d928      	bls.n	800b6b0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b65e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b664:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b666:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b668:	4639      	mov	r1, r7
 800b66a:	4620      	mov	r0, r4
 800b66c:	f7ff fcec 	bl	800b048 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800b670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b672:	b29b      	uxth	r3, r3
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1c9      	bne.n	800b60c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b678:	462a      	mov	r2, r5
 800b67a:	4641      	mov	r1, r8
 800b67c:	4620      	mov	r0, r4
 800b67e:	f7ff fdd8 	bl	800b232 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b682:	2800      	cmp	r0, #0
 800b684:	f47f af5b 	bne.w	800b53e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	2120      	movs	r1, #32
 800b68c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b68e:	685a      	ldr	r2, [r3, #4]
 800b690:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800b694:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800b698:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800b69c:	f022 0201 	bic.w	r2, r2, #1
 800b6a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b6a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b6a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b6aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800b6ae:	e747      	b.n	800b540 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800b6b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6b6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800b6b8:	b292      	uxth	r2, r2
 800b6ba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	e7d3      	b.n	800b668 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800b6c0:	2002      	movs	r0, #2
 800b6c2:	e73d      	b.n	800b540 <HAL_I2C_Mem_Read+0x30>
 800b6c4:	80002000 	.word	0x80002000
 800b6c8:	80002400 	.word	0x80002400

0800b6cc <HAL_I2C_GetState>:
  return hi2c->State;
 800b6cc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800b6d0:	4770      	bx	lr

0800b6d2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800b6d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800b6d4:	4770      	bx	lr

0800b6d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b6d6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	b2dc      	uxtb	r4, r3
 800b6e0:	d11d      	bne.n	800b71e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6e2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d019      	beq.n	800b71e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6ea:	2324      	movs	r3, #36	; 0x24
 800b6ec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6f0:	6803      	ldr	r3, [r0, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	f022 0201 	bic.w	r2, r2, #1
 800b6f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b700:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	4311      	orrs	r1, r2
 800b706:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	f042 0201 	orr.w	r2, r2, #1
 800b70e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b710:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b712:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b716:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b71a:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b71c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b71e:	2002      	movs	r0, #2
 800b720:	e7fc      	b.n	800b71c <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800b722 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b722:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b724:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b728:	2b20      	cmp	r3, #32
 800b72a:	b2dc      	uxtb	r4, r3
 800b72c:	d11c      	bne.n	800b768 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b72e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800b732:	2b01      	cmp	r3, #1
 800b734:	d018      	beq.n	800b768 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b736:	2324      	movs	r3, #36	; 0x24
 800b738:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b73c:	6803      	ldr	r3, [r0, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	f022 0201 	bic.w	r2, r2, #1
 800b744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b746:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b748:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b74c:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b750:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	f042 0201 	orr.w	r2, r2, #1
 800b758:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b75a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800b75c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b760:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800b764:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b766:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b768:	2002      	movs	r0, #2
 800b76a:	e7fc      	b.n	800b766 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800b76c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b76c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b76e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b770:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b774:	3284      	adds	r2, #132	; 0x84
 800b776:	1883      	adds	r3, r0, r2
{
 800b778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b77c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b77e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b782:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b784:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b788:	684c      	ldr	r4, [r1, #4]
 800b78a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b78e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b792:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b796:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b798:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b79a:	68c5      	ldr	r5, [r0, #12]
 800b79c:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800b7a0:	443d      	add	r5, r7
 800b7a2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b7a6:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800b7a8:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b7aa:	68c5      	ldr	r5, [r0, #12]
 800b7ac:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800b7b0:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b7b2:	689d      	ldr	r5, [r3, #8]
 800b7b4:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800b7b8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b7ba:	688d      	ldr	r5, [r1, #8]
 800b7bc:	68c7      	ldr	r7, [r0, #12]
 800b7be:	3501      	adds	r5, #1
 800b7c0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800b7c4:	443d      	add	r5, r7
 800b7c6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b7ca:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b7cc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b7ce:	691d      	ldr	r5, [r3, #16]
 800b7d0:	f025 0507 	bic.w	r5, r5, #7
 800b7d4:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b7d6:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b7d8:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b7da:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b7de:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b7e2:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b7e6:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800b7ea:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800b7ee:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800b7f2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800b7f6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b7f8:	695d      	ldr	r5, [r3, #20]
 800b7fa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800b7fe:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b800:	694d      	ldr	r5, [r1, #20]
 800b802:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b804:	69dd      	ldr	r5, [r3, #28]
 800b806:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800b80a:	f025 0507 	bic.w	r5, r5, #7
 800b80e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b810:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800b814:	433d      	orrs	r5, r7
 800b816:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b818:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b81a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b81c:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b820:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b822:	b31e      	cbz	r6, 800b86c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b824:	2e01      	cmp	r6, #1
 800b826:	d023      	beq.n	800b870 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b828:	1eb5      	subs	r5, r6, #2
 800b82a:	2d02      	cmp	r5, #2
 800b82c:	d922      	bls.n	800b874 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800b82e:	2e07      	cmp	r6, #7
 800b830:	bf0c      	ite	eq
 800b832:	2502      	moveq	r5, #2
 800b834:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b836:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b838:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b83c:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b840:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b842:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b844:	3407      	adds	r4, #7
 800b846:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b848:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800b84a:	436e      	muls	r6, r5
 800b84c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800b850:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b852:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800b854:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800b858:	f024 0407 	bic.w	r4, r4, #7
 800b85c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b85e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b860:	5883      	ldr	r3, [r0, r2]
 800b862:	f043 0301 	orr.w	r3, r3, #1
 800b866:	5083      	str	r3, [r0, r2]
}
 800b868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800b86c:	2504      	movs	r5, #4
 800b86e:	e7e2      	b.n	800b836 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800b870:	2503      	movs	r5, #3
 800b872:	e7e0      	b.n	800b836 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800b874:	2502      	movs	r5, #2
 800b876:	e7de      	b.n	800b836 <LTDC_SetConfig+0xca>

0800b878 <HAL_LTDC_Init>:
{
 800b878:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800b87a:	4604      	mov	r4, r0
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d063      	beq.n	800b948 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b880:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800b884:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b888:	b91b      	cbnz	r3, 800b892 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800b88a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800b88e:	f7f5 fbdb 	bl	8001048 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b892:	2302      	movs	r3, #2
 800b894:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	699a      	ldr	r2, [r3, #24]
 800b89c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b8a0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8a2:	6999      	ldr	r1, [r3, #24]
 800b8a4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800b8a8:	4302      	orrs	r2, r0
 800b8aa:	68e0      	ldr	r0, [r4, #12]
 800b8ac:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b8ae:	6920      	ldr	r0, [r4, #16]
 800b8b0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b8b2:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8b4:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b8b6:	4925      	ldr	r1, [pc, #148]	; (800b94c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b8b8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b8ba:	689a      	ldr	r2, [r3, #8]
 800b8bc:	400a      	ands	r2, r1
 800b8be:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b8c0:	689a      	ldr	r2, [r3, #8]
 800b8c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b8c6:	69a0      	ldr	r0, [r4, #24]
 800b8c8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b8ca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b8cc:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b8ce:	68da      	ldr	r2, [r3, #12]
 800b8d0:	400a      	ands	r2, r1
 800b8d2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b8d4:	68da      	ldr	r2, [r3, #12]
 800b8d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b8da:	6a20      	ldr	r0, [r4, #32]
 800b8dc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b8de:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b8e0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b8e2:	691a      	ldr	r2, [r3, #16]
 800b8e4:	400a      	ands	r2, r1
 800b8e6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b8e8:	691a      	ldr	r2, [r3, #16]
 800b8ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800b8ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b8f0:	4302      	orrs	r2, r0
 800b8f2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	4011      	ands	r1, r2
 800b8f8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b8fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b8fc:	695a      	ldr	r2, [r3, #20]
 800b8fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b902:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b904:	430a      	orrs	r2, r1
 800b906:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b90a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b90e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b912:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b916:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b91a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800b91e:	430a      	orrs	r2, r1
 800b920:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800b924:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b928:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b92a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b92e:	f042 0206 	orr.w	r2, r2, #6
 800b932:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800b934:	699a      	ldr	r2, [r3, #24]
 800b936:	f042 0201 	orr.w	r2, r2, #1
 800b93a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800b93c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b93e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800b942:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800b946:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b948:	2001      	movs	r0, #1
 800b94a:	e7fc      	b.n	800b946 <HAL_LTDC_Init+0xce>
 800b94c:	f000f800 	.word	0xf000f800

0800b950 <HAL_LTDC_ErrorCallback>:
 800b950:	4770      	bx	lr

0800b952 <HAL_LTDC_LineEventCallback>:
 800b952:	4770      	bx	lr

0800b954 <HAL_LTDC_ReloadEventCallback>:
 800b954:	4770      	bx	lr

0800b956 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b956:	6803      	ldr	r3, [r0, #0]
{
 800b958:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b95a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800b95c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b95e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b960:	0772      	lsls	r2, r6, #29
 800b962:	d514      	bpl.n	800b98e <HAL_LTDC_IRQHandler+0x38>
 800b964:	0769      	lsls	r1, r5, #29
 800b966:	d512      	bpl.n	800b98e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b96a:	f022 0204 	bic.w	r2, r2, #4
 800b96e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b970:	2204      	movs	r2, #4
 800b972:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b974:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800b978:	f043 0301 	orr.w	r3, r3, #1
 800b97c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800b980:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b982:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b986:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b98a:	f7ff ffe1 	bl	800b950 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b98e:	07b2      	lsls	r2, r6, #30
 800b990:	d516      	bpl.n	800b9c0 <HAL_LTDC_IRQHandler+0x6a>
 800b992:	07ab      	lsls	r3, r5, #30
 800b994:	d514      	bpl.n	800b9c0 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b996:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800b998:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b99a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b99c:	f022 0202 	bic.w	r2, r2, #2
 800b9a0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b9a6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b9b0:	2304      	movs	r3, #4
 800b9b2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800b9bc:	f7ff ffc8 	bl	800b950 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b9c0:	07f0      	lsls	r0, r6, #31
 800b9c2:	d510      	bpl.n	800b9e6 <HAL_LTDC_IRQHandler+0x90>
 800b9c4:	07e9      	lsls	r1, r5, #31
 800b9c6:	d50e      	bpl.n	800b9e6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b9c8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800b9ca:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b9cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ce:	f022 0201 	bic.w	r2, r2, #1
 800b9d2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800b9d8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800b9da:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800b9de:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800b9e2:	f7ff ffb6 	bl	800b952 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b9e6:	0732      	lsls	r2, r6, #28
 800b9e8:	d511      	bpl.n	800ba0e <HAL_LTDC_IRQHandler+0xb8>
 800b9ea:	072b      	lsls	r3, r5, #28
 800b9ec:	d50f      	bpl.n	800ba0e <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b9ee:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b9f0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b9f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9f4:	f022 0208 	bic.w	r2, r2, #8
 800b9f8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b9fa:	2208      	movs	r2, #8
 800b9fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800ba04:	2300      	movs	r3, #0
 800ba06:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ba0a:	f7ff ffa3 	bl	800b954 <HAL_LTDC_ReloadEventCallback>
}
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}

0800ba10 <HAL_LTDC_ConfigLayer>:
{
 800ba10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800ba14:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	f04f 0002 	mov.w	r0, #2
 800ba24:	d01f      	beq.n	800ba66 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba26:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800ba28:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba2c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ba2e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba32:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800ba36:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba3a:	3438      	adds	r4, #56	; 0x38
 800ba3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba48:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4662      	mov	r2, ip
 800ba4e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ba50:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ba52:	f7ff fe8b 	bl	800b76c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ba56:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800ba58:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ba5a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ba5e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800ba62:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800ba66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ba6c <HAL_LTDC_SetPitch>:
{
 800ba6c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800ba6e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	f04f 0302 	mov.w	r3, #2
 800ba78:	d02c      	beq.n	800bad4 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800ba7a:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ba7c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800ba80:	fb04 0402 	mla	r4, r4, r2, r0
 800ba84:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ba86:	b33c      	cbz	r4, 800bad8 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ba88:	2c01      	cmp	r4, #1
 800ba8a:	d027      	beq.n	800badc <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800ba8c:	1ea5      	subs	r5, r4, #2
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	d902      	bls.n	800ba98 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800ba92:	2c07      	cmp	r4, #7
 800ba94:	bf18      	it	ne
 800ba96:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800ba98:	01d2      	lsls	r2, r2, #7
 800ba9a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800ba9c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800ba9e:	3284      	adds	r2, #132	; 0x84
 800baa0:	4422      	add	r2, r4
 800baa2:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800baa4:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800baa8:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800baac:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800baae:	4c0c      	ldr	r4, [pc, #48]	; (800bae0 <HAL_LTDC_SetPitch+0x74>)
 800bab0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bab2:	f045 0501 	orr.w	r5, r5, #1
 800bab6:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800bab8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800baba:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800babe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800bac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bac2:	f043 0301 	orr.w	r3, r3, #1
 800bac6:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800bac8:	2301      	movs	r3, #1
 800baca:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800bace:	2300      	movs	r3, #0
 800bad0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800bad8:	2304      	movs	r3, #4
 800bada:	e7dd      	b.n	800ba98 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800badc:	2303      	movs	r3, #3
 800bade:	e7db      	b.n	800ba98 <HAL_LTDC_SetPitch+0x2c>
 800bae0:	50001000 	.word	0x50001000

0800bae4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800bae8:	f7fe faa2 	bl	800a030 <HAL_GetTick>
 800baec:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800baee:	2c00      	cmp	r4, #0
 800baf0:	d061      	beq.n	800bbb6 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800baf2:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800baf4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800baf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800bafa:	2302      	movs	r3, #2
 800bafc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800bb00:	68d3      	ldr	r3, [r2, #12]
 800bb02:	f023 0301 	bic.w	r3, r3, #1
 800bb06:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bb08:	6823      	ldr	r3, [r4, #0]
 800bb0a:	68da      	ldr	r2, [r3, #12]
 800bb0c:	07d2      	lsls	r2, r2, #31
 800bb0e:	d448      	bmi.n	800bba2 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bb10:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bb18:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	69e1      	ldr	r1, [r4, #28]
 800bb20:	430a      	orrs	r2, r1
 800bb22:	6a21      	ldr	r1, [r4, #32]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb28:	430a      	orrs	r2, r1
 800bb2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb30:	430a      	orrs	r2, r1
 800bb32:	68a1      	ldr	r1, [r4, #8]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bb38:	3901      	subs	r1, #1
 800bb3a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bb3e:	6861      	ldr	r1, [r4, #4]
 800bb40:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bb44:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800bb46:	d103      	bne.n	800bb50 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800bb48:	691a      	ldr	r2, [r3, #16]
 800bb4a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800bb4e:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800bb50:	2200      	movs	r2, #0
 800bb52:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800bb54:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800bb56:	2a00      	cmp	r2, #0
 800bb58:	da04      	bge.n	800bb64 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bb5a:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800bb5c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800bb5e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800bb62:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800bb64:	b292      	uxth	r2, r2
 800bb66:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800bb68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	da25      	bge.n	800bbba <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bb6e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800bb70:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800bb72:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800bb76:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb78:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb7a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bb7e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bb82:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800bb84:	f04f 0200 	mov.w	r2, #0
 800bb88:	d019      	beq.n	800bbbe <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800bb8a:	b2c9      	uxtb	r1, r1
 800bb8c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800bb8e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800bb90:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800bb92:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bb94:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800bb96:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800bb98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800bb9c:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800bba0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bba2:	f7fe fa45 	bl	800a030 <HAL_GetTick>
 800bba6:	1b40      	subs	r0, r0, r5
 800bba8:	2805      	cmp	r0, #5
 800bbaa:	d9ad      	bls.n	800bb08 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800bbac:	2340      	movs	r3, #64	; 0x40
 800bbae:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	e7f2      	b.n	800bba0 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800bbba:	6a18      	ldr	r0, [r3, #32]
 800bbbc:	e7dd      	b.n	800bb7a <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800bbbe:	629a      	str	r2, [r3, #40]	; 0x28
 800bbc0:	e7e5      	b.n	800bb8e <HAL_MDMA_Init+0xaa>

0800bbc2 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800bbc2:	b1d8      	cbz	r0, 800bbfc <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800bbc4:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800bbc6:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800bbc8:	68d3      	ldr	r3, [r2, #12]
 800bbca:	f023 0301 	bic.w	r3, r3, #1
 800bbce:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800bbd4:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800bbd6:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800bbd8:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800bbda:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800bbdc:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800bbde:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800bbe0:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800bbe2:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800bbe4:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800bbe6:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bbe8:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800bbea:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800bbec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800bbf0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800bbf4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	4770      	bx	lr
    return HAL_ERROR;
 800bbfc:	2001      	movs	r0, #1
}
 800bbfe:	4770      	bx	lr

0800bc00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bc00:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800bc02:	4d1c      	ldr	r5, [pc, #112]	; (800bc74 <HAL_PWREx_ConfigSupply+0x74>)
{
 800bc04:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800bc06:	68eb      	ldr	r3, [r5, #12]
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	2b06      	cmp	r3, #6
 800bc0e:	d006      	beq.n	800bc1e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bc10:	68e8      	ldr	r0, [r5, #12]
 800bc12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bc16:	1b00      	subs	r0, r0, r4
 800bc18:	bf18      	it	ne
 800bc1a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800bc1c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bc1e:	68eb      	ldr	r3, [r5, #12]
 800bc20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bc24:	4303      	orrs	r3, r0
 800bc26:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800bc28:	f7fe fa02 	bl	800a030 <HAL_GetTick>
 800bc2c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bc2e:	686b      	ldr	r3, [r5, #4]
 800bc30:	049a      	lsls	r2, r3, #18
 800bc32:	d508      	bpl.n	800bc46 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800bc34:	f1a4 031d 	sub.w	r3, r4, #29
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d90c      	bls.n	800bc56 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800bc3c:	3c2d      	subs	r4, #45	; 0x2d
 800bc3e:	2c01      	cmp	r4, #1
 800bc40:	d909      	bls.n	800bc56 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800bc42:	2000      	movs	r0, #0
 800bc44:	e7ea      	b.n	800bc1c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bc46:	f7fe f9f3 	bl	800a030 <HAL_GetTick>
 800bc4a:	1b80      	subs	r0, r0, r6
 800bc4c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bc50:	d9ed      	bls.n	800bc2e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800bc52:	2001      	movs	r0, #1
 800bc54:	e7e2      	b.n	800bc1c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800bc56:	f7fe f9eb 	bl	800a030 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bc5a:	4d06      	ldr	r5, [pc, #24]	; (800bc74 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800bc5c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800bc5e:	68eb      	ldr	r3, [r5, #12]
 800bc60:	03db      	lsls	r3, r3, #15
 800bc62:	d4ee      	bmi.n	800bc42 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bc64:	f7fe f9e4 	bl	800a030 <HAL_GetTick>
 800bc68:	1b00      	subs	r0, r0, r4
 800bc6a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bc6e:	d9f6      	bls.n	800bc5e <HAL_PWREx_ConfigSupply+0x5e>
 800bc70:	e7ef      	b.n	800bc52 <HAL_PWREx_ConfigSupply+0x52>
 800bc72:	bf00      	nop
 800bc74:	58024800 	.word	0x58024800

0800bc78 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800bc7c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800bc7e:	b136      	cbz	r6, 800bc8e <QSPI_Config+0x16>
 800bc80:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800bc84:	d003      	beq.n	800bc8e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bc86:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800bc88:	6804      	ldr	r4, [r0, #0]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bc8e:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bc92:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800bc96:	f1b9 0f00 	cmp.w	r9, #0
 800bc9a:	d04f      	beq.n	800bd3c <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bc9c:	694b      	ldr	r3, [r1, #20]
 800bc9e:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800bca2:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bca4:	f8d1 a000 	ldr.w	sl, [r1]
 800bca8:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800bcac:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800bcb0:	ea49 0902 	orr.w	r9, r9, r2
 800bcb4:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bcb8:	b335      	cbz	r5, 800bd08 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bcba:	688b      	ldr	r3, [r1, #8]
 800bcbc:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bcc0:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bcc2:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bcc4:	b19f      	cbz	r7, 800bcee <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bcc6:	ea4a 0307 	orr.w	r3, sl, r7
 800bcca:	4323      	orrs	r3, r4
 800bccc:	68cc      	ldr	r4, [r1, #12]
 800bcce:	ea43 0308 	orr.w	r3, r3, r8
 800bcd2:	ea43 030e 	orr.w	r3, r3, lr
 800bcd6:	4333      	orrs	r3, r6
 800bcd8:	4323      	orrs	r3, r4
 800bcda:	ea43 030c 	orr.w	r3, r3, ip
 800bcde:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bce0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bce4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bce6:	d00d      	beq.n	800bd04 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bce8:	684b      	ldr	r3, [r1, #4]
 800bcea:	6183      	str	r3, [r0, #24]
 800bcec:	e00a      	b.n	800bd04 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bcee:	ea4a 0304 	orr.w	r3, sl, r4
 800bcf2:	ea43 0308 	orr.w	r3, r3, r8
 800bcf6:	ea43 030e 	orr.w	r3, r3, lr
 800bcfa:	4333      	orrs	r3, r6
 800bcfc:	ea43 030c 	orr.w	r3, r3, ip
 800bd00:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd02:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800bd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd08:	b16f      	cbz	r7, 800bd26 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd0a:	ea4a 0307 	orr.w	r3, sl, r7
 800bd0e:	4323      	orrs	r3, r4
 800bd10:	68cc      	ldr	r4, [r1, #12]
 800bd12:	ea43 0308 	orr.w	r3, r3, r8
 800bd16:	ea43 030e 	orr.w	r3, r3, lr
 800bd1a:	4323      	orrs	r3, r4
 800bd1c:	ea43 030c 	orr.w	r3, r3, ip
 800bd20:	ea43 0309 	orr.w	r3, r3, r9
 800bd24:	e7dc      	b.n	800bce0 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd26:	ea4a 0304 	orr.w	r3, sl, r4
 800bd2a:	ea43 0308 	orr.w	r3, r3, r8
 800bd2e:	ea43 030e 	orr.w	r3, r3, lr
 800bd32:	ea43 030c 	orr.w	r3, r3, ip
 800bd36:	ea43 0309 	orr.w	r3, r3, r9
 800bd3a:	e7e2      	b.n	800bd02 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800bd3c:	b365      	cbz	r5, 800bd98 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bd3e:	6804      	ldr	r4, [r0, #0]
 800bd40:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd42:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800bd44:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd46:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd4a:	694e      	ldr	r6, [r1, #20]
 800bd4c:	ea43 0502 	orr.w	r5, r3, r2
 800bd50:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800bd54:	04b6      	lsls	r6, r6, #18
 800bd56:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd5a:	b1a7      	cbz	r7, 800bd86 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd5c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bd5e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd62:	ea40 0008 	orr.w	r0, r0, r8
 800bd66:	ea43 0300 	orr.w	r3, r3, r0
 800bd6a:	68c8      	ldr	r0, [r1, #12]
 800bd6c:	ea43 030c 	orr.w	r3, r3, ip
 800bd70:	ea43 0300 	orr.w	r3, r3, r0
 800bd74:	ea43 0306 	orr.w	r3, r3, r6
 800bd78:	ea43 0305 	orr.w	r3, r3, r5
 800bd7c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800bd7e:	d0c1      	beq.n	800bd04 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800bd80:	684b      	ldr	r3, [r1, #4]
 800bd82:	61a3      	str	r3, [r4, #24]
 800bd84:	e7be      	b.n	800bd04 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd86:	ea40 0008 	orr.w	r0, r0, r8
 800bd8a:	4303      	orrs	r3, r0
 800bd8c:	ea43 030c 	orr.w	r3, r3, ip
 800bd90:	4333      	orrs	r3, r6
 800bd92:	432b      	orrs	r3, r5
 800bd94:	6163      	str	r3, [r4, #20]
 800bd96:	e7b5      	b.n	800bd04 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800bd98:	b17f      	cbz	r7, 800bdba <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bd9a:	ea46 0307 	orr.w	r3, r6, r7
 800bd9e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800bda0:	6800      	ldr	r0, [r0, #0]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	4323      	orrs	r3, r4
 800bda6:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800bda8:	4323      	orrs	r3, r4
 800bdaa:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800bdac:	4323      	orrs	r3, r4
 800bdae:	68cc      	ldr	r4, [r1, #12]
 800bdb0:	4323      	orrs	r3, r4
 800bdb2:	694c      	ldr	r4, [r1, #20]
 800bdb4:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800bdb8:	e792      	b.n	800bce0 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	d0a2      	beq.n	800bd04 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800bdbe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800bdc0:	6800      	ldr	r0, [r0, #0]
 800bdc2:	4333      	orrs	r3, r6
 800bdc4:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	694b      	ldr	r3, [r1, #20]
 800bdca:	4332      	orrs	r2, r6
 800bdcc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800bdce:	4332      	orrs	r2, r6
 800bdd0:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800bdd4:	6142      	str	r2, [r0, #20]
}
 800bdd6:	e795      	b.n	800bd04 <QSPI_Config+0x8c>

0800bdd8 <QSPI_WaitFlagStateUntilTimeout>:
{
 800bdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bddc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800bde0:	4604      	mov	r4, r0
 800bde2:	460e      	mov	r6, r1
 800bde4:	4615      	mov	r5, r2
 800bde6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800bde8:	6822      	ldr	r2, [r4, #0]
 800bdea:	6893      	ldr	r3, [r2, #8]
 800bdec:	4233      	tst	r3, r6
 800bdee:	bf14      	ite	ne
 800bdf0:	2301      	movne	r3, #1
 800bdf2:	2300      	moveq	r3, #0
 800bdf4:	42ab      	cmp	r3, r5
 800bdf6:	d101      	bne.n	800bdfc <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	e012      	b.n	800be22 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800bdfc:	f1b8 3fff 	cmp.w	r8, #4294967295
 800be00:	d0f3      	beq.n	800bdea <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be02:	f7fe f915 	bl	800a030 <HAL_GetTick>
 800be06:	1bc0      	subs	r0, r0, r7
 800be08:	4540      	cmp	r0, r8
 800be0a:	d802      	bhi.n	800be12 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800be0c:	f1b8 0f00 	cmp.w	r8, #0
 800be10:	d1ea      	bne.n	800bde8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800be12:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800be14:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800be16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800be1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800be1c:	f043 0301 	orr.w	r3, r3, #1
 800be20:	6463      	str	r3, [r4, #68]	; 0x44
}
 800be22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800be28 <HAL_QSPI_Init>:
{
 800be28:	b530      	push	{r4, r5, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800be2e:	f7fe f8ff 	bl	800a030 <HAL_GetTick>
 800be32:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800be34:	2c00      	cmp	r4, #0
 800be36:	d040      	beq.n	800beba <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800be38:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800be3c:	b93a      	cbnz	r2, 800be4e <HAL_QSPI_Init+0x26>
 800be3e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800be40:	4620      	mov	r0, r4
 800be42:	f7f5 f93f 	bl	80010c4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800be46:	f241 3288 	movw	r2, #5000	; 0x1388
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800be4e:	6820      	ldr	r0, [r4, #0]
 800be50:	68a1      	ldr	r1, [r4, #8]
 800be52:	6802      	ldr	r2, [r0, #0]
 800be54:	3901      	subs	r1, #1
 800be56:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800be5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800be5e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800be60:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800be62:	4620      	mov	r0, r4
 800be64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800be66:	9200      	str	r2, [sp, #0]
 800be68:	2200      	movs	r2, #0
 800be6a:	f7ff ffb5 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800be6e:	bb10      	cbnz	r0, 800beb6 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800be70:	6822      	ldr	r2, [r4, #0]
 800be72:	69e5      	ldr	r5, [r4, #28]
 800be74:	68e3      	ldr	r3, [r4, #12]
 800be76:	6811      	ldr	r1, [r2, #0]
 800be78:	432b      	orrs	r3, r5
 800be7a:	6a25      	ldr	r5, [r4, #32]
 800be7c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800be80:	432b      	orrs	r3, r5
 800be82:	6865      	ldr	r5, [r4, #4]
 800be84:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800be88:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800be8c:	430b      	orrs	r3, r1
 800be8e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800be90:	6855      	ldr	r5, [r2, #4]
 800be92:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800be96:	430b      	orrs	r3, r1
 800be98:	6921      	ldr	r1, [r4, #16]
 800be9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800be9e:	4908      	ldr	r1, [pc, #32]	; (800bec0 <HAL_QSPI_Init+0x98>)
 800bea0:	4029      	ands	r1, r5
 800bea2:	430b      	orrs	r3, r1
 800bea4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800bea6:	6813      	ldr	r3, [r2, #0]
 800bea8:	f043 0301 	orr.w	r3, r3, #1
 800beac:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800beae:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800beb0:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800beb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800beb6:	b005      	add	sp, #20
 800beb8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800beba:	2001      	movs	r0, #1
 800bebc:	e7fb      	b.n	800beb6 <HAL_QSPI_Init+0x8e>
 800bebe:	bf00      	nop
 800bec0:	ffe0f8fe 	.word	0xffe0f8fe

0800bec4 <HAL_QSPI_Command>:
{
 800bec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bec8:	4604      	mov	r4, r0
 800beca:	b085      	sub	sp, #20
 800becc:	4617      	mov	r7, r2
 800bece:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800bed0:	f7fe f8ae 	bl	800a030 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bed4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800bed8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800beda:	2a01      	cmp	r2, #1
 800bedc:	d033      	beq.n	800bf46 <HAL_QSPI_Command+0x82>
 800bede:	2201      	movs	r2, #1
 800bee0:	2602      	movs	r6, #2
 800bee2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bee6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800beea:	2a01      	cmp	r2, #1
 800beec:	fa5f f882 	uxtb.w	r8, r2
 800bef0:	d127      	bne.n	800bf42 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bef2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bef4:	9003      	str	r0, [sp, #12]
 800bef6:	2120      	movs	r1, #32
 800bef8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800befa:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800befc:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800befe:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bf02:	f7ff ff69 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800bf06:	4605      	mov	r5, r0
 800bf08:	b9a0      	cbnz	r0, 800bf34 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f7ff feb2 	bl	800bc78 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800bf14:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	b94a      	cbnz	r2, 800bf30 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf1c:	4642      	mov	r2, r8
 800bf1e:	4631      	mov	r1, r6
 800bf20:	4620      	mov	r0, r4
 800bf22:	9700      	str	r7, [sp, #0]
 800bf24:	f7ff ff58 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800bf28:	4605      	mov	r5, r0
 800bf2a:	b918      	cbnz	r0, 800bf34 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800bf30:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800bf34:	2300      	movs	r3, #0
 800bf36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	b005      	add	sp, #20
 800bf3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800bf42:	4635      	mov	r5, r6
 800bf44:	e7f6      	b.n	800bf34 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800bf46:	2502      	movs	r5, #2
 800bf48:	e7f7      	b.n	800bf3a <HAL_QSPI_Command+0x76>

0800bf4a <HAL_QSPI_Transmit>:
{
 800bf4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	b085      	sub	sp, #20
 800bf50:	4616      	mov	r6, r2
 800bf52:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800bf54:	f7fe f86c 	bl	800a030 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800bf58:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800bf5c:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800bf5e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800bf60:	2a01      	cmp	r2, #1
 800bf62:	d049      	beq.n	800bff8 <HAL_QSPI_Transmit+0xae>
 800bf64:	2201      	movs	r2, #1
 800bf66:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bf6a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800bf6e:	2a01      	cmp	r2, #1
 800bf70:	b2d0      	uxtb	r0, r2
 800bf72:	d13f      	bne.n	800bff4 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf74:	2200      	movs	r2, #0
 800bf76:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800bf78:	2f00      	cmp	r7, #0
 800bf7a:	d036      	beq.n	800bfea <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800bf7c:	2212      	movs	r2, #18
 800bf7e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800bf82:	692a      	ldr	r2, [r5, #16]
 800bf84:	3201      	adds	r2, #1
 800bf86:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bf88:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800bf8a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800bf8c:	3201      	adds	r2, #1
 800bf8e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bf90:	696a      	ldr	r2, [r5, #20]
 800bf92:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800bf96:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800bf98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bf9a:	b98a      	cbnz	r2, 800bfc0 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	2102      	movs	r1, #2
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	9600      	str	r6, [sp, #0]
 800bfa4:	f7ff ff18 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800bfa8:	b910      	cbnz	r0, 800bfb0 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bfaa:	6823      	ldr	r3, [r4, #0]
 800bfac:	2202      	movs	r2, #2
 800bfae:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800bfbc:	b005      	add	sp, #20
 800bfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	2104      	movs	r1, #4
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	9600      	str	r6, [sp, #0]
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	f7ff ff05 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1ee      	bne.n	800bfb0 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bfd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800bfd4:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800bfd6:	7812      	ldrb	r2, [r2, #0]
 800bfd8:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800bfdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfde:	3201      	adds	r2, #1
 800bfe0:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800bfe2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bfe4:	3a01      	subs	r2, #1
 800bfe6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800bfe8:	e7d6      	b.n	800bf98 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800bfea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bfec:	f043 0308 	orr.w	r3, r3, #8
 800bff0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800bff2:	e7e0      	b.n	800bfb6 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800bff4:	2002      	movs	r0, #2
 800bff6:	e7de      	b.n	800bfb6 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800bff8:	2002      	movs	r0, #2
 800bffa:	e7df      	b.n	800bfbc <HAL_QSPI_Transmit+0x72>

0800bffc <HAL_QSPI_Receive>:
{
 800bffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffe:	4604      	mov	r4, r0
 800c000:	b085      	sub	sp, #20
 800c002:	4616      	mov	r6, r2
 800c004:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800c006:	f7fe f813 	bl	800a030 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c00a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800c00c:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c00e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800c012:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800c016:	2a01      	cmp	r2, #1
 800c018:	d04d      	beq.n	800c0b6 <HAL_QSPI_Receive+0xba>
 800c01a:	2201      	movs	r2, #1
 800c01c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c020:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800c024:	2a01      	cmp	r2, #1
 800c026:	b2d0      	uxtb	r0, r2
 800c028:	d143      	bne.n	800c0b2 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c02a:	2200      	movs	r2, #0
 800c02c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800c02e:	2f00      	cmp	r7, #0
 800c030:	d03a      	beq.n	800c0a8 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c032:	2222      	movs	r2, #34	; 0x22
 800c034:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c038:	692a      	ldr	r2, [r5, #16]
 800c03a:	3201      	adds	r2, #1
 800c03c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c03e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800c040:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c042:	3201      	adds	r2, #1
 800c044:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c046:	6969      	ldr	r1, [r5, #20]
 800c048:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800c04c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800c050:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c052:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800c056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c058:	b98a      	cbnz	r2, 800c07e <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c05a:	2201      	movs	r2, #1
 800c05c:	2102      	movs	r1, #2
 800c05e:	4620      	mov	r0, r4
 800c060:	9600      	str	r6, [sp, #0]
 800c062:	f7ff feb9 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800c066:	b910      	cbnz	r0, 800c06e <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	2202      	movs	r2, #2
 800c06c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800c06e:	2301      	movs	r3, #1
 800c070:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800c074:	2300      	movs	r3, #0
 800c076:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800c07a:	b005      	add	sp, #20
 800c07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c07e:	2201      	movs	r2, #1
 800c080:	2106      	movs	r1, #6
 800c082:	4620      	mov	r0, r4
 800c084:	9600      	str	r6, [sp, #0]
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	f7ff fea6 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d1ee      	bne.n	800c06e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c090:	f895 1020 	ldrb.w	r1, [r5, #32]
 800c094:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800c096:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c098:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800c09a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c09c:	3201      	adds	r2, #1
 800c09e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800c0a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c0a2:	3a01      	subs	r2, #1
 800c0a4:	63a2      	str	r2, [r4, #56]	; 0x38
 800c0a6:	e7d6      	b.n	800c056 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c0a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c0aa:	f043 0308 	orr.w	r3, r3, #8
 800c0ae:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800c0b0:	e7e0      	b.n	800c074 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800c0b2:	2002      	movs	r0, #2
 800c0b4:	e7de      	b.n	800c074 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800c0b6:	2002      	movs	r0, #2
 800c0b8:	e7df      	b.n	800c07a <HAL_QSPI_Receive+0x7e>

0800c0ba <HAL_QSPI_AutoPolling>:
{
 800c0ba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4615      	mov	r5, r2
 800c0c2:	461e      	mov	r6, r3
 800c0c4:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800c0c6:	f7fd ffb3 	bl	800a030 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800c0ca:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800c0ce:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800c0d0:	2a01      	cmp	r2, #1
 800c0d2:	d040      	beq.n	800c156 <HAL_QSPI_AutoPolling+0x9c>
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c0da:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800c0de:	2a01      	cmp	r2, #1
 800c0e0:	b2d7      	uxtb	r7, r2
 800c0e2:	d136      	bne.n	800c152 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c0e4:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c0e6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0e8:	9003      	str	r0, [sp, #12]
 800c0ea:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c0ec:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0ee:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c0f0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c0f4:	2120      	movs	r1, #32
 800c0f6:	f7ff fe6f 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c0fa:	bb20      	cbnz	r0, 800c146 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c0fc:	6821      	ldr	r1, [r4, #0]
 800c0fe:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c100:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c102:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c104:	686a      	ldr	r2, [r5, #4]
 800c106:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c108:	68aa      	ldr	r2, [r5, #8]
 800c10a:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c10c:	680a      	ldr	r2, [r1, #0]
 800c10e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800c112:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c114:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c116:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c11a:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c11c:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800c11e:	68ea      	ldr	r2, [r5, #12]
 800c120:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c128:	f7ff fda6 	bl	800bc78 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c12c:	9b03      	ldr	r3, [sp, #12]
 800c12e:	463a      	mov	r2, r7
 800c130:	2108      	movs	r1, #8
 800c132:	4620      	mov	r0, r4
 800c134:	9600      	str	r6, [sp, #0]
 800c136:	f7ff fe4f 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800c13a:	b920      	cbnz	r0, 800c146 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	2208      	movs	r2, #8
 800c140:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800c142:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800c146:	2300      	movs	r3, #0
 800c148:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800c14c:	b004      	add	sp, #16
 800c14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800c152:	2002      	movs	r0, #2
 800c154:	e7f7      	b.n	800c146 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800c156:	2002      	movs	r0, #2
 800c158:	e7f8      	b.n	800c14c <HAL_QSPI_AutoPolling+0x92>

0800c15a <HAL_QSPI_MemoryMapped>:
{
 800c15a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	4616      	mov	r6, r2
 800c160:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800c162:	f7fd ff65 	bl	800a030 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800c166:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800c16a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800c16c:	2a01      	cmp	r2, #1
 800c16e:	d033      	beq.n	800c1d8 <HAL_QSPI_MemoryMapped+0x7e>
 800c170:	2201      	movs	r2, #1
 800c172:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c176:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800c17a:	2a01      	cmp	r2, #1
 800c17c:	d12a      	bne.n	800c1d4 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c17e:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c180:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c182:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c184:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800c186:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c18a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c18c:	9100      	str	r1, [sp, #0]
 800c18e:	2120      	movs	r1, #32
 800c190:	f7ff fe22 	bl	800bdd8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800c194:	4605      	mov	r5, r0
 800c196:	b9b8      	cbnz	r0, 800c1c8 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	6872      	ldr	r2, [r6, #4]
 800c19c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c19e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800c1a0:	f020 0008 	bic.w	r0, r0, #8
 800c1a4:	ea40 0002 	orr.w	r0, r0, r2
 800c1a8:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800c1aa:	d107      	bne.n	800c1bc <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800c1ac:	6832      	ldr	r2, [r6, #0]
 800c1ae:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800c1b0:	2210      	movs	r2, #16
 800c1b2:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c1ba:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800c1bc:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800c1c0:	4639      	mov	r1, r7
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff fd58 	bl	800bc78 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	b003      	add	sp, #12
 800c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800c1d4:	2502      	movs	r5, #2
 800c1d6:	e7f7      	b.n	800c1c8 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800c1d8:	2502      	movs	r5, #2
 800c1da:	e7f8      	b.n	800c1ce <HAL_QSPI_MemoryMapped+0x74>

0800c1dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c1de:	4604      	mov	r4, r0
 800c1e0:	b908      	cbnz	r0, 800c1e6 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800c1e2:	2001      	movs	r0, #1
 800c1e4:	e08b      	b.n	800c2fe <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1e6:	6803      	ldr	r3, [r0, #0]
 800c1e8:	07df      	lsls	r7, r3, #31
 800c1ea:	d45e      	bmi.n	800c2aa <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	079e      	lsls	r6, r3, #30
 800c1f0:	f100 80af 	bmi.w	800c352 <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	06da      	lsls	r2, r3, #27
 800c1f8:	d527      	bpl.n	800c24a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c1fa:	4b9e      	ldr	r3, [pc, #632]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c1fc:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c1fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c200:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c204:	2a08      	cmp	r2, #8
 800c206:	d007      	beq.n	800c218 <HAL_RCC_OscConfig+0x3c>
 800c208:	2a18      	cmp	r2, #24
 800c20a:	f040 8107 	bne.w	800c41c <HAL_RCC_OscConfig+0x240>
 800c20e:	f001 0203 	and.w	r2, r1, #3
 800c212:	2a01      	cmp	r2, #1
 800c214:	f040 8102 	bne.w	800c41c <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	05db      	lsls	r3, r3, #23
 800c21c:	d502      	bpl.n	800c224 <HAL_RCC_OscConfig+0x48>
 800c21e:	69e3      	ldr	r3, [r4, #28]
 800c220:	2b80      	cmp	r3, #128	; 0x80
 800c222:	d1de      	bne.n	800c1e2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c224:	f7fd ff1c 	bl	800a060 <HAL_GetREVID>
 800c228:	f241 0303 	movw	r3, #4099	; 0x1003
 800c22c:	6a21      	ldr	r1, [r4, #32]
 800c22e:	4298      	cmp	r0, r3
 800c230:	4b90      	ldr	r3, [pc, #576]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c232:	f200 80ec 	bhi.w	800c40e <HAL_RCC_OscConfig+0x232>
 800c236:	685a      	ldr	r2, [r3, #4]
 800c238:	2920      	cmp	r1, #32
 800c23a:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800c23e:	bf0c      	ite	eq
 800c240:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800c244:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800c248:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	0719      	lsls	r1, r3, #28
 800c24e:	f100 8127 	bmi.w	800c4a0 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	069a      	lsls	r2, r3, #26
 800c256:	f100 8148 	bmi.w	800c4ea <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c25a:	6823      	ldr	r3, [r4, #0]
 800c25c:	075d      	lsls	r5, r3, #29
 800c25e:	d51e      	bpl.n	800c29e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800c260:	4d85      	ldr	r5, [pc, #532]	; (800c478 <HAL_RCC_OscConfig+0x29c>)
 800c262:	682b      	ldr	r3, [r5, #0]
 800c264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c268:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800c26a:	f7fd fee1 	bl	800a030 <HAL_GetTick>
 800c26e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	05da      	lsls	r2, r3, #23
 800c274:	f140 815e 	bpl.w	800c534 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c278:	68a3      	ldr	r3, [r4, #8]
 800c27a:	4d7e      	ldr	r5, [pc, #504]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	f040 8160 	bne.w	800c542 <HAL_RCC_OscConfig+0x366>
 800c282:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c284:	f043 0301 	orr.w	r3, r3, #1
 800c288:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c28a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800c28e:	f7fd fecf 	bl	800a030 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c292:	4e78      	ldr	r6, [pc, #480]	; (800c474 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 800c294:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c296:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800c298:	079b      	lsls	r3, r3, #30
 800c29a:	f140 8178 	bpl.w	800c58e <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c29e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	f040 817b 	bne.w	800c59c <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	e029      	b.n	800c2fe <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2aa:	4b72      	ldr	r3, [pc, #456]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c2ac:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c2ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c2b4:	2a10      	cmp	r2, #16
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_OscConfig+0xe8>
 800c2b8:	2a18      	cmp	r2, #24
 800c2ba:	d10a      	bne.n	800c2d2 <HAL_RCC_OscConfig+0xf6>
 800c2bc:	f001 0203 	and.w	r2, r1, #3
 800c2c0:	2a02      	cmp	r2, #2
 800c2c2:	d106      	bne.n	800c2d2 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	039d      	lsls	r5, r3, #14
 800c2c8:	d590      	bpl.n	800c1ec <HAL_RCC_OscConfig+0x10>
 800c2ca:	6863      	ldr	r3, [r4, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d18d      	bne.n	800c1ec <HAL_RCC_OscConfig+0x10>
 800c2d0:	e787      	b.n	800c1e2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2d2:	6862      	ldr	r2, [r4, #4]
 800c2d4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800c2d8:	d112      	bne.n	800c300 <HAL_RCC_OscConfig+0x124>
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c2e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c2e2:	f7fd fea5 	bl	800a030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2e6:	4e63      	ldr	r6, [pc, #396]	; (800c474 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 800c2e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c2ea:	6833      	ldr	r3, [r6, #0]
 800c2ec:	0398      	lsls	r0, r3, #14
 800c2ee:	f53f af7d 	bmi.w	800c1ec <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c2f2:	f7fd fe9d 	bl	800a030 <HAL_GetTick>
 800c2f6:	1b40      	subs	r0, r0, r5
 800c2f8:	2864      	cmp	r0, #100	; 0x64
 800c2fa:	d9f6      	bls.n	800c2ea <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800c2fc:	2003      	movs	r0, #3
}
 800c2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c300:	4d5c      	ldr	r5, [pc, #368]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	b99a      	cbnz	r2, 800c32e <HAL_RCC_OscConfig+0x152>
 800c306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c312:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c314:	f7fd fe8c 	bl	800a030 <HAL_GetTick>
 800c318:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c31a:	682b      	ldr	r3, [r5, #0]
 800c31c:	0399      	lsls	r1, r3, #14
 800c31e:	f57f af65 	bpl.w	800c1ec <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c322:	f7fd fe85 	bl	800a030 <HAL_GetTick>
 800c326:	1b80      	subs	r0, r0, r6
 800c328:	2864      	cmp	r0, #100	; 0x64
 800c32a:	d9f6      	bls.n	800c31a <HAL_RCC_OscConfig+0x13e>
 800c32c:	e7e6      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c32e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800c332:	d107      	bne.n	800c344 <HAL_RCC_OscConfig+0x168>
 800c334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c338:	602b      	str	r3, [r5, #0]
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	e7ce      	b.n	800c2e2 <HAL_RCC_OscConfig+0x106>
 800c344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c348:	602b      	str	r3, [r5, #0]
 800c34a:	682b      	ldr	r3, [r5, #0]
 800c34c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c350:	e7f6      	b.n	800c340 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c352:	4b48      	ldr	r3, [pc, #288]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c354:	68e1      	ldr	r1, [r4, #12]
 800c356:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c358:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c35a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800c35e:	d003      	beq.n	800c368 <HAL_RCC_OscConfig+0x18c>
 800c360:	2a18      	cmp	r2, #24
 800c362:	d12b      	bne.n	800c3bc <HAL_RCC_OscConfig+0x1e0>
 800c364:	0782      	lsls	r2, r0, #30
 800c366:	d129      	bne.n	800c3bc <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	075b      	lsls	r3, r3, #29
 800c36c:	d502      	bpl.n	800c374 <HAL_RCC_OscConfig+0x198>
 800c36e:	2900      	cmp	r1, #0
 800c370:	f43f af37 	beq.w	800c1e2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c374:	4d3f      	ldr	r5, [pc, #252]	; (800c474 <HAL_RCC_OscConfig+0x298>)
 800c376:	682a      	ldr	r2, [r5, #0]
 800c378:	f022 0219 	bic.w	r2, r2, #25
 800c37c:	430a      	orrs	r2, r1
 800c37e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800c380:	f7fd fe56 	bl	800a030 <HAL_GetTick>
 800c384:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	075f      	lsls	r7, r3, #29
 800c38a:	d511      	bpl.n	800c3b0 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c38c:	f7fd fe68 	bl	800a060 <HAL_GetREVID>
 800c390:	f241 0303 	movw	r3, #4099	; 0x1003
 800c394:	6922      	ldr	r2, [r4, #16]
 800c396:	4298      	cmp	r0, r3
 800c398:	686b      	ldr	r3, [r5, #4]
 800c39a:	d822      	bhi.n	800c3e2 <HAL_RCC_OscConfig+0x206>
 800c39c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c3a0:	2a40      	cmp	r2, #64	; 0x40
 800c3a2:	bf0c      	ite	eq
 800c3a4:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800c3a8:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800c3ac:	606b      	str	r3, [r5, #4]
 800c3ae:	e721      	b.n	800c1f4 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3b0:	f7fd fe3e 	bl	800a030 <HAL_GetTick>
 800c3b4:	1b80      	subs	r0, r0, r6
 800c3b6:	2802      	cmp	r0, #2
 800c3b8:	d9e5      	bls.n	800c386 <HAL_RCC_OscConfig+0x1aa>
 800c3ba:	e79f      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c3bc:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c3be:	b1a9      	cbz	r1, 800c3ec <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c3c0:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3c4:	4d2b      	ldr	r5, [pc, #172]	; (800c474 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c3ca:	f7fd fe31 	bl	800a030 <HAL_GetTick>
 800c3ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	0758      	lsls	r0, r3, #29
 800c3d4:	d4da      	bmi.n	800c38c <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3d6:	f7fd fe2b 	bl	800a030 <HAL_GetTick>
 800c3da:	1b80      	subs	r0, r0, r6
 800c3dc:	2802      	cmp	r0, #2
 800c3de:	d9f7      	bls.n	800c3d0 <HAL_RCC_OscConfig+0x1f4>
 800c3e0:	e78c      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3e2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c3e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c3ea:	e7df      	b.n	800c3ac <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 800c3ec:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c3f0:	4e20      	ldr	r6, [pc, #128]	; (800c474 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800c3f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c3f4:	f7fd fe1c 	bl	800a030 <HAL_GetTick>
 800c3f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c3fa:	6833      	ldr	r3, [r6, #0]
 800c3fc:	0759      	lsls	r1, r3, #29
 800c3fe:	f57f aef9 	bpl.w	800c1f4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c402:	f7fd fe15 	bl	800a030 <HAL_GetTick>
 800c406:	1b40      	subs	r0, r0, r5
 800c408:	2802      	cmp	r0, #2
 800c40a:	d9f6      	bls.n	800c3fa <HAL_RCC_OscConfig+0x21e>
 800c40c:	e776      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800c414:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c418:	60da      	str	r2, [r3, #12]
 800c41a:	e716      	b.n	800c24a <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c41c:	69e2      	ldr	r2, [r4, #28]
 800c41e:	b36a      	cbz	r2, 800c47c <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800c420:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c422:	4d14      	ldr	r5, [pc, #80]	; (800c474 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 800c424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c428:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c42a:	f7fd fe01 	bl	800a030 <HAL_GetTick>
 800c42e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	05df      	lsls	r7, r3, #23
 800c434:	d511      	bpl.n	800c45a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c436:	f7fd fe13 	bl	800a060 <HAL_GetREVID>
 800c43a:	f241 0303 	movw	r3, #4099	; 0x1003
 800c43e:	6a22      	ldr	r2, [r4, #32]
 800c440:	4298      	cmp	r0, r3
 800c442:	d810      	bhi.n	800c466 <HAL_RCC_OscConfig+0x28a>
 800c444:	686b      	ldr	r3, [r5, #4]
 800c446:	2a20      	cmp	r2, #32
 800c448:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c44c:	bf0c      	ite	eq
 800c44e:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800c452:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800c456:	606b      	str	r3, [r5, #4]
 800c458:	e6f7      	b.n	800c24a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c45a:	f7fd fde9 	bl	800a030 <HAL_GetTick>
 800c45e:	1b80      	subs	r0, r0, r6
 800c460:	2802      	cmp	r0, #2
 800c462:	d9e5      	bls.n	800c430 <HAL_RCC_OscConfig+0x254>
 800c464:	e74a      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c466:	68eb      	ldr	r3, [r5, #12]
 800c468:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800c46c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c470:	60eb      	str	r3, [r5, #12]
 800c472:	e6ea      	b.n	800c24a <HAL_RCC_OscConfig+0x6e>
 800c474:	58024400 	.word	0x58024400
 800c478:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800c47c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c47e:	4e88      	ldr	r6, [pc, #544]	; (800c6a0 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800c480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c484:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800c486:	f7fd fdd3 	bl	800a030 <HAL_GetTick>
 800c48a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c48c:	6833      	ldr	r3, [r6, #0]
 800c48e:	05d8      	lsls	r0, r3, #23
 800c490:	f57f aedb 	bpl.w	800c24a <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c494:	f7fd fdcc 	bl	800a030 <HAL_GetTick>
 800c498:	1b40      	subs	r0, r0, r5
 800c49a:	2802      	cmp	r0, #2
 800c49c:	d9f6      	bls.n	800c48c <HAL_RCC_OscConfig+0x2b0>
 800c49e:	e72d      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c4a0:	6963      	ldr	r3, [r4, #20]
 800c4a2:	4d7f      	ldr	r5, [pc, #508]	; (800c6a0 <HAL_RCC_OscConfig+0x4c4>)
 800c4a4:	b183      	cbz	r3, 800c4c8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800c4a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c4a8:	f043 0301 	orr.w	r3, r3, #1
 800c4ac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c4ae:	f7fd fdbf 	bl	800a030 <HAL_GetTick>
 800c4b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c4b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c4b6:	079b      	lsls	r3, r3, #30
 800c4b8:	f53f aecb 	bmi.w	800c252 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4bc:	f7fd fdb8 	bl	800a030 <HAL_GetTick>
 800c4c0:	1b80      	subs	r0, r0, r6
 800c4c2:	2802      	cmp	r0, #2
 800c4c4:	d9f6      	bls.n	800c4b4 <HAL_RCC_OscConfig+0x2d8>
 800c4c6:	e719      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800c4c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c4ca:	f023 0301 	bic.w	r3, r3, #1
 800c4ce:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800c4d0:	f7fd fdae 	bl	800a030 <HAL_GetTick>
 800c4d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c4d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800c4d8:	079f      	lsls	r7, r3, #30
 800c4da:	f57f aeba 	bpl.w	800c252 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4de:	f7fd fda7 	bl	800a030 <HAL_GetTick>
 800c4e2:	1b80      	subs	r0, r0, r6
 800c4e4:	2802      	cmp	r0, #2
 800c4e6:	d9f6      	bls.n	800c4d6 <HAL_RCC_OscConfig+0x2fa>
 800c4e8:	e708      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c4ea:	69a3      	ldr	r3, [r4, #24]
 800c4ec:	4d6c      	ldr	r5, [pc, #432]	; (800c6a0 <HAL_RCC_OscConfig+0x4c4>)
 800c4ee:	b183      	cbz	r3, 800c512 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c4f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c4f8:	f7fd fd9a 	bl	800a030 <HAL_GetTick>
 800c4fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c4fe:	682b      	ldr	r3, [r5, #0]
 800c500:	0498      	lsls	r0, r3, #18
 800c502:	f53f aeaa 	bmi.w	800c25a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c506:	f7fd fd93 	bl	800a030 <HAL_GetTick>
 800c50a:	1b80      	subs	r0, r0, r6
 800c50c:	2802      	cmp	r0, #2
 800c50e:	d9f6      	bls.n	800c4fe <HAL_RCC_OscConfig+0x322>
 800c510:	e6f4      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800c512:	682b      	ldr	r3, [r5, #0]
 800c514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c518:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800c51a:	f7fd fd89 	bl	800a030 <HAL_GetTick>
 800c51e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	0499      	lsls	r1, r3, #18
 800c524:	f57f ae99 	bpl.w	800c25a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c528:	f7fd fd82 	bl	800a030 <HAL_GetTick>
 800c52c:	1b80      	subs	r0, r0, r6
 800c52e:	2802      	cmp	r0, #2
 800c530:	d9f6      	bls.n	800c520 <HAL_RCC_OscConfig+0x344>
 800c532:	e6e3      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c534:	f7fd fd7c 	bl	800a030 <HAL_GetTick>
 800c538:	1b80      	subs	r0, r0, r6
 800c53a:	2864      	cmp	r0, #100	; 0x64
 800c53c:	f67f ae98 	bls.w	800c270 <HAL_RCC_OscConfig+0x94>
 800c540:	e6dc      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c542:	b9b3      	cbnz	r3, 800c572 <HAL_RCC_OscConfig+0x396>
 800c544:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c546:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c54a:	f023 0301 	bic.w	r3, r3, #1
 800c54e:	672b      	str	r3, [r5, #112]	; 0x70
 800c550:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c552:	f023 0304 	bic.w	r3, r3, #4
 800c556:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800c558:	f7fd fd6a 	bl	800a030 <HAL_GetTick>
 800c55c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c55e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c560:	0798      	lsls	r0, r3, #30
 800c562:	f57f ae9c 	bpl.w	800c29e <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c566:	f7fd fd63 	bl	800a030 <HAL_GetTick>
 800c56a:	1b80      	subs	r0, r0, r6
 800c56c:	42b8      	cmp	r0, r7
 800c56e:	d9f6      	bls.n	800c55e <HAL_RCC_OscConfig+0x382>
 800c570:	e6c4      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c572:	2b05      	cmp	r3, #5
 800c574:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c576:	d103      	bne.n	800c580 <HAL_RCC_OscConfig+0x3a4>
 800c578:	f043 0304 	orr.w	r3, r3, #4
 800c57c:	672b      	str	r3, [r5, #112]	; 0x70
 800c57e:	e680      	b.n	800c282 <HAL_RCC_OscConfig+0xa6>
 800c580:	f023 0301 	bic.w	r3, r3, #1
 800c584:	672b      	str	r3, [r5, #112]	; 0x70
 800c586:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c588:	f023 0304 	bic.w	r3, r3, #4
 800c58c:	e67c      	b.n	800c288 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c58e:	f7fd fd4f 	bl	800a030 <HAL_GetTick>
 800c592:	1b40      	subs	r0, r0, r5
 800c594:	42b8      	cmp	r0, r7
 800c596:	f67f ae7e 	bls.w	800c296 <HAL_RCC_OscConfig+0xba>
 800c59a:	e6af      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c59c:	4d40      	ldr	r5, [pc, #256]	; (800c6a0 <HAL_RCC_OscConfig+0x4c4>)
 800c59e:	692b      	ldr	r3, [r5, #16]
 800c5a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5a4:	2b18      	cmp	r3, #24
 800c5a6:	d07d      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800c5a8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5aa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800c5ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5b0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5b2:	d167      	bne.n	800c684 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800c5b4:	f7fd fd3c 	bl	800a030 <HAL_GetTick>
 800c5b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c5ba:	682b      	ldr	r3, [r5, #0]
 800c5bc:	0199      	lsls	r1, r3, #6
 800c5be:	d45b      	bmi.n	800c678 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c5c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c5c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c5c4:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c5d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c5d4:	62ab      	str	r3, [r5, #40]	; 0x28
 800c5d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	3a01      	subs	r2, #1
 800c5de:	025b      	lsls	r3, r3, #9
 800c5e0:	0412      	lsls	r2, r2, #16
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c5f6:	3a01      	subs	r2, #1
 800c5f8:	0612      	lsls	r2, r2, #24
 800c5fa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c5fe:	4313      	orrs	r3, r2
 800c600:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800c602:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c604:	f023 0301 	bic.w	r3, r3, #1
 800c608:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c60a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c60c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c60e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c612:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c616:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c61a:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c61c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c61e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c620:	f023 030c 	bic.w	r3, r3, #12
 800c624:	4313      	orrs	r3, r2
 800c626:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c628:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c62a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c62c:	f023 0302 	bic.w	r3, r3, #2
 800c630:	4313      	orrs	r3, r2
 800c632:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c634:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c63a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c63c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c63e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c642:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c644:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c64a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800c64c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c64e:	f043 0301 	orr.w	r3, r3, #1
 800c652:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800c654:	682b      	ldr	r3, [r5, #0]
 800c656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c65a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800c65c:	f7fd fce8 	bl	800a030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c660:	4d0f      	ldr	r5, [pc, #60]	; (800c6a0 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800c662:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	019a      	lsls	r2, r3, #6
 800c668:	f53f ae1d 	bmi.w	800c2a6 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c66c:	f7fd fce0 	bl	800a030 <HAL_GetTick>
 800c670:	1b00      	subs	r0, r0, r4
 800c672:	2802      	cmp	r0, #2
 800c674:	d9f6      	bls.n	800c664 <HAL_RCC_OscConfig+0x488>
 800c676:	e641      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c678:	f7fd fcda 	bl	800a030 <HAL_GetTick>
 800c67c:	1b80      	subs	r0, r0, r6
 800c67e:	2802      	cmp	r0, #2
 800c680:	d99b      	bls.n	800c5ba <HAL_RCC_OscConfig+0x3de>
 800c682:	e63b      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800c684:	f7fd fcd4 	bl	800a030 <HAL_GetTick>
 800c688:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c68a:	682b      	ldr	r3, [r5, #0]
 800c68c:	019b      	lsls	r3, r3, #6
 800c68e:	f57f ae0a 	bpl.w	800c2a6 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c692:	f7fd fccd 	bl	800a030 <HAL_GetTick>
 800c696:	1b00      	subs	r0, r0, r4
 800c698:	2802      	cmp	r0, #2
 800c69a:	d9f6      	bls.n	800c68a <HAL_RCC_OscConfig+0x4ae>
 800c69c:	e62e      	b.n	800c2fc <HAL_RCC_OscConfig+0x120>
 800c69e:	bf00      	nop
 800c6a0:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6a4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c6a6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c6a8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6aa:	f43f ae28 	beq.w	800c2fe <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6ae:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c6b4:	4281      	cmp	r1, r0
 800c6b6:	f47f ad94 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c6ba:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c6c0:	428a      	cmp	r2, r1
 800c6c2:	f47f ad8e 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c6c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c6c8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800c6cc:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c6ce:	4291      	cmp	r1, r2
 800c6d0:	f47f ad87 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c6d4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c6d6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800c6da:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c6dc:	4291      	cmp	r1, r2
 800c6de:	f47f ad80 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c6e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c6e4:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800c6e8:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c6ea:	4291      	cmp	r1, r2
 800c6ec:	f47f ad79 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c6f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c6f2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c6f6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	f47f ad72 	bne.w	800c1e2 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c6fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c700:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c702:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c706:	429a      	cmp	r2, r3
 800c708:	f43f adcd 	beq.w	800c2a6 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 800c70c:	4d0c      	ldr	r5, [pc, #48]	; (800c740 <HAL_RCC_OscConfig+0x564>)
 800c70e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c710:	f023 0301 	bic.w	r3, r3, #1
 800c714:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800c716:	f7fd fc8b 	bl	800a030 <HAL_GetTick>
 800c71a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c71c:	f7fd fc88 	bl	800a030 <HAL_GetTick>
 800c720:	42b0      	cmp	r0, r6
 800c722:	d0fb      	beq.n	800c71c <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c724:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c726:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800c728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c72c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c730:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c734:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800c736:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800c73e:	e5b2      	b.n	800c2a6 <HAL_RCC_OscConfig+0xca>
 800c740:	58024400 	.word	0x58024400

0800c744 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	4c23      	ldr	r4, [pc, #140]	; (800c7d4 <HAL_RCC_MCOConfig+0x90>)
 800c748:	b088      	sub	sp, #32
 800c74a:	460e      	mov	r6, r1
 800c74c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800c74e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800c752:	b9f8      	cbnz	r0, 800c794 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800c754:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c758:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c75c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800c75e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c762:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c766:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	9301      	str	r3, [sp, #4]
 800c76e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c770:	2302      	movs	r3, #2
 800c772:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c776:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c778:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800c77c:	4816      	ldr	r0, [pc, #88]	; (800c7d8 <HAL_RCC_MCOConfig+0x94>)
 800c77e:	f7fe fa9d 	bl	800acbc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800c788:	ea43 0106 	orr.w	r1, r3, r6
 800c78c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c78e:	6121      	str	r1, [r4, #16]
  }
}
 800c790:	b008      	add	sp, #32
 800c792:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800c794:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c798:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c79e:	480f      	ldr	r0, [pc, #60]	; (800c7dc <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800c7a0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800c7a4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	9302      	str	r3, [sp, #8]
 800c7ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c7bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800c7be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800c7c0:	f7fe fa7c 	bl	800acbc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800c7c4:	6923      	ldr	r3, [r4, #16]
 800c7c6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800c7ca:	ea43 0106 	orr.w	r1, r3, r6
 800c7ce:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800c7d2:	e7dc      	b.n	800c78e <HAL_RCC_MCOConfig+0x4a>
 800c7d4:	58024400 	.word	0x58024400
 800c7d8:	58020000 	.word	0x58020000
 800c7dc:	58020800 	.word	0x58020800

0800c7e0 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7e0:	4b48      	ldr	r3, [pc, #288]	; (800c904 <HAL_RCC_GetSysClockFreq+0x124>)
 800c7e2:	691a      	ldr	r2, [r3, #16]
 800c7e4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800c7e8:	2a10      	cmp	r2, #16
{
 800c7ea:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7ec:	f000 8086 	beq.w	800c8fc <HAL_RCC_GetSysClockFreq+0x11c>
 800c7f0:	2a18      	cmp	r2, #24
 800c7f2:	d00c      	beq.n	800c80e <HAL_RCC_GetSysClockFreq+0x2e>
 800c7f4:	2a00      	cmp	r2, #0
 800c7f6:	f040 8083 	bne.w	800c900 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	4842      	ldr	r0, [pc, #264]	; (800c908 <HAL_RCC_GetSysClockFreq+0x128>)
 800c7fe:	f012 0f20 	tst.w	r2, #32
 800c802:	d003      	beq.n	800c80c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c80a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800c80c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c80e:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c810:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c812:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800c814:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c818:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c81c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800c81e:	d0f5      	beq.n	800c80c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c820:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c824:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c828:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c82c:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c830:	4362      	muls	r2, r4
 800c832:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c836:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c83a:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c83c:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c840:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800c844:	d04c      	beq.n	800c8e0 <HAL_RCC_GetSysClockFreq+0x100>
 800c846:	2902      	cmp	r1, #2
 800c848:	d03c      	beq.n	800c8c4 <HAL_RCC_GetSysClockFreq+0xe4>
 800c84a:	2900      	cmp	r1, #0
 800c84c:	d148      	bne.n	800c8e0 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	0692      	lsls	r2, r2, #26
 800c852:	d527      	bpl.n	800c8a4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c854:	6819      	ldr	r1, [r3, #0]
 800c856:	4a2c      	ldr	r2, [pc, #176]	; (800c908 <HAL_RCC_GetSysClockFreq+0x128>)
 800c858:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c85e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c864:	ee07 2a10 	vmov	s14, r2
 800c868:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800c86c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800c870:	ee06 3a90 	vmov	s13, r3
 800c874:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c87c:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c880:	4b20      	ldr	r3, [pc, #128]	; (800c904 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c882:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c888:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c88c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c88e:	ee07 3a10 	vmov	s14, r3
 800c892:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c896:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c89a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c89e:	ee17 0a90 	vmov	r0, s15
 800c8a2:	e7b3      	b.n	800c80c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	ee07 3a10 	vmov	s14, r3
 800c8ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c8ba:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800c90c <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8be:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c8c2:	e7dd      	b.n	800c880 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ca:	ee07 3a10 	vmov	s14, r3
 800c8ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c8da:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800c910 <HAL_RCC_GetSysClockFreq+0x130>
 800c8de:	e7ee      	b.n	800c8be <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e6:	ee07 3a10 	vmov	s14, r3
 800c8ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c8f6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800c914 <HAL_RCC_GetSysClockFreq+0x134>
 800c8fa:	e7e0      	b.n	800c8be <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8fc:	4806      	ldr	r0, [pc, #24]	; (800c918 <HAL_RCC_GetSysClockFreq+0x138>)
 800c8fe:	e785      	b.n	800c80c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800c900:	4806      	ldr	r0, [pc, #24]	; (800c91c <HAL_RCC_GetSysClockFreq+0x13c>)
 800c902:	e783      	b.n	800c80c <HAL_RCC_GetSysClockFreq+0x2c>
 800c904:	58024400 	.word	0x58024400
 800c908:	03d09000 	.word	0x03d09000
 800c90c:	4c742400 	.word	0x4c742400
 800c910:	4bbebc20 	.word	0x4bbebc20
 800c914:	4a742400 	.word	0x4a742400
 800c918:	017d7840 	.word	0x017d7840
 800c91c:	003d0900 	.word	0x003d0900

0800c920 <HAL_RCC_ClockConfig>:
{
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800c926:	4604      	mov	r4, r0
 800c928:	b910      	cbnz	r0, 800c930 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800c92a:	2001      	movs	r0, #1
}
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c930:	4a88      	ldr	r2, [pc, #544]	; (800cb54 <HAL_RCC_ClockConfig+0x234>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	f003 030f 	and.w	r3, r3, #15
 800c938:	428b      	cmp	r3, r1
 800c93a:	f0c0 8093 	bcc.w	800ca64 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c93e:	6823      	ldr	r3, [r4, #0]
 800c940:	075f      	lsls	r7, r3, #29
 800c942:	f100 809b 	bmi.w	800ca7c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c946:	071e      	lsls	r6, r3, #28
 800c948:	d50b      	bpl.n	800c962 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c94a:	4983      	ldr	r1, [pc, #524]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c94c:	6966      	ldr	r6, [r4, #20]
 800c94e:	69c8      	ldr	r0, [r1, #28]
 800c950:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800c954:	4286      	cmp	r6, r0
 800c956:	d904      	bls.n	800c962 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c958:	69ca      	ldr	r2, [r1, #28]
 800c95a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c95e:	4332      	orrs	r2, r6
 800c960:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c962:	06d8      	lsls	r0, r3, #27
 800c964:	d50b      	bpl.n	800c97e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c966:	497c      	ldr	r1, [pc, #496]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c968:	69a6      	ldr	r6, [r4, #24]
 800c96a:	69c8      	ldr	r0, [r1, #28]
 800c96c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800c970:	4286      	cmp	r6, r0
 800c972:	d904      	bls.n	800c97e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c974:	69ca      	ldr	r2, [r1, #28]
 800c976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c97a:	4332      	orrs	r2, r6
 800c97c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c97e:	0699      	lsls	r1, r3, #26
 800c980:	d50b      	bpl.n	800c99a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c982:	4975      	ldr	r1, [pc, #468]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c984:	69e6      	ldr	r6, [r4, #28]
 800c986:	6a08      	ldr	r0, [r1, #32]
 800c988:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800c98c:	4286      	cmp	r6, r0
 800c98e:	d904      	bls.n	800c99a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c990:	6a0a      	ldr	r2, [r1, #32]
 800c992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c996:	4332      	orrs	r2, r6
 800c998:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c99a:	079a      	lsls	r2, r3, #30
 800c99c:	d50b      	bpl.n	800c9b6 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c99e:	496e      	ldr	r1, [pc, #440]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c9a0:	68e6      	ldr	r6, [r4, #12]
 800c9a2:	6988      	ldr	r0, [r1, #24]
 800c9a4:	f000 000f 	and.w	r0, r0, #15
 800c9a8:	4286      	cmp	r6, r0
 800c9aa:	d904      	bls.n	800c9b6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c9ac:	698a      	ldr	r2, [r1, #24]
 800c9ae:	f022 020f 	bic.w	r2, r2, #15
 800c9b2:	4332      	orrs	r2, r6
 800c9b4:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c9b6:	07df      	lsls	r7, r3, #31
 800c9b8:	d46e      	bmi.n	800ca98 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	079e      	lsls	r6, r3, #30
 800c9be:	f100 80a1 	bmi.w	800cb04 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c9c2:	4964      	ldr	r1, [pc, #400]	; (800cb54 <HAL_RCC_ClockConfig+0x234>)
 800c9c4:	680a      	ldr	r2, [r1, #0]
 800c9c6:	f002 020f 	and.w	r2, r2, #15
 800c9ca:	42aa      	cmp	r2, r5
 800c9cc:	f200 80a8 	bhi.w	800cb20 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c9d0:	0758      	lsls	r0, r3, #29
 800c9d2:	f100 80b1 	bmi.w	800cb38 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9d6:	0719      	lsls	r1, r3, #28
 800c9d8:	d50b      	bpl.n	800c9f2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c9da:	495f      	ldr	r1, [pc, #380]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c9dc:	6965      	ldr	r5, [r4, #20]
 800c9de:	69c8      	ldr	r0, [r1, #28]
 800c9e0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800c9e4:	4285      	cmp	r5, r0
 800c9e6:	d204      	bcs.n	800c9f2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c9e8:	69ca      	ldr	r2, [r1, #28]
 800c9ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800c9ee:	432a      	orrs	r2, r5
 800c9f0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9f2:	06da      	lsls	r2, r3, #27
 800c9f4:	d50b      	bpl.n	800ca0e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c9f6:	4958      	ldr	r1, [pc, #352]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800c9f8:	69a5      	ldr	r5, [r4, #24]
 800c9fa:	69c8      	ldr	r0, [r1, #28]
 800c9fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800ca00:	4285      	cmp	r5, r0
 800ca02:	d204      	bcs.n	800ca0e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ca04:	69ca      	ldr	r2, [r1, #28]
 800ca06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ca0a:	432a      	orrs	r2, r5
 800ca0c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ca0e:	069b      	lsls	r3, r3, #26
 800ca10:	d50b      	bpl.n	800ca2a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ca12:	4a51      	ldr	r2, [pc, #324]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800ca14:	69e0      	ldr	r0, [r4, #28]
 800ca16:	6a11      	ldr	r1, [r2, #32]
 800ca18:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800ca1c:	4288      	cmp	r0, r1
 800ca1e:	d204      	bcs.n	800ca2a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ca20:	6a13      	ldr	r3, [r2, #32]
 800ca22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca26:	4303      	orrs	r3, r0
 800ca28:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ca2a:	f7ff fed9 	bl	800c7e0 <HAL_RCC_GetSysClockFreq>
 800ca2e:	494a      	ldr	r1, [pc, #296]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800ca30:	4a4a      	ldr	r2, [pc, #296]	; (800cb5c <HAL_RCC_ClockConfig+0x23c>)
 800ca32:	698b      	ldr	r3, [r1, #24]
 800ca34:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ca38:	5cd3      	ldrb	r3, [r2, r3]
 800ca3a:	f003 031f 	and.w	r3, r3, #31
 800ca3e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ca40:	698b      	ldr	r3, [r1, #24]
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	5cd3      	ldrb	r3, [r2, r3]
 800ca48:	4a45      	ldr	r2, [pc, #276]	; (800cb60 <HAL_RCC_ClockConfig+0x240>)
 800ca4a:	f003 031f 	and.w	r3, r3, #31
 800ca4e:	fa20 f303 	lsr.w	r3, r0, r3
 800ca52:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800ca54:	4b43      	ldr	r3, [pc, #268]	; (800cb64 <HAL_RCC_ClockConfig+0x244>)
 800ca56:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800ca58:	4b43      	ldr	r3, [pc, #268]	; (800cb68 <HAL_RCC_ClockConfig+0x248>)
}
 800ca5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800ca5e:	6818      	ldr	r0, [r3, #0]
 800ca60:	f7f4 bcc6 	b.w	80013f0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca64:	6813      	ldr	r3, [r2, #0]
 800ca66:	f023 030f 	bic.w	r3, r3, #15
 800ca6a:	430b      	orrs	r3, r1
 800ca6c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca6e:	6813      	ldr	r3, [r2, #0]
 800ca70:	f003 030f 	and.w	r3, r3, #15
 800ca74:	428b      	cmp	r3, r1
 800ca76:	f47f af58 	bne.w	800c92a <HAL_RCC_ClockConfig+0xa>
 800ca7a:	e760      	b.n	800c93e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ca7c:	4936      	ldr	r1, [pc, #216]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800ca7e:	6926      	ldr	r6, [r4, #16]
 800ca80:	6988      	ldr	r0, [r1, #24]
 800ca82:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800ca86:	4286      	cmp	r6, r0
 800ca88:	f67f af5d 	bls.w	800c946 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ca8c:	698a      	ldr	r2, [r1, #24]
 800ca8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ca92:	4332      	orrs	r2, r6
 800ca94:	618a      	str	r2, [r1, #24]
 800ca96:	e756      	b.n	800c946 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ca98:	4b2f      	ldr	r3, [pc, #188]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800ca9a:	68a1      	ldr	r1, [r4, #8]
 800ca9c:	699a      	ldr	r2, [r3, #24]
 800ca9e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800caa2:	430a      	orrs	r2, r1
 800caa4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800caa6:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800caa8:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800caaa:	2a02      	cmp	r2, #2
 800caac:	d11d      	bne.n	800caea <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800caae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cab2:	f43f af3a 	beq.w	800c92a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cab6:	4e28      	ldr	r6, [pc, #160]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cab8:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cabc:	6933      	ldr	r3, [r6, #16]
 800cabe:	f023 0307 	bic.w	r3, r3, #7
 800cac2:	4313      	orrs	r3, r2
 800cac4:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800cac6:	f7fd fab3 	bl	800a030 <HAL_GetTick>
 800caca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cacc:	6933      	ldr	r3, [r6, #16]
 800cace:	6862      	ldr	r2, [r4, #4]
 800cad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cad4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800cad8:	f43f af6f 	beq.w	800c9ba <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cadc:	f7fd faa8 	bl	800a030 <HAL_GetTick>
 800cae0:	1bc0      	subs	r0, r0, r7
 800cae2:	4540      	cmp	r0, r8
 800cae4:	d9f2      	bls.n	800cacc <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800cae6:	2003      	movs	r0, #3
 800cae8:	e720      	b.n	800c92c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800caea:	2a03      	cmp	r2, #3
 800caec:	d102      	bne.n	800caf4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800caee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800caf2:	e7de      	b.n	800cab2 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800caf4:	2a01      	cmp	r2, #1
 800caf6:	d102      	bne.n	800cafe <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800caf8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cafc:	e7d9      	b.n	800cab2 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cafe:	f013 0f04 	tst.w	r3, #4
 800cb02:	e7d6      	b.n	800cab2 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cb04:	4914      	ldr	r1, [pc, #80]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800cb06:	68e6      	ldr	r6, [r4, #12]
 800cb08:	6988      	ldr	r0, [r1, #24]
 800cb0a:	f000 000f 	and.w	r0, r0, #15
 800cb0e:	4286      	cmp	r6, r0
 800cb10:	f4bf af57 	bcs.w	800c9c2 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb14:	698a      	ldr	r2, [r1, #24]
 800cb16:	f022 020f 	bic.w	r2, r2, #15
 800cb1a:	4332      	orrs	r2, r6
 800cb1c:	618a      	str	r2, [r1, #24]
 800cb1e:	e750      	b.n	800c9c2 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb20:	680a      	ldr	r2, [r1, #0]
 800cb22:	f022 020f 	bic.w	r2, r2, #15
 800cb26:	432a      	orrs	r2, r5
 800cb28:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb2a:	680a      	ldr	r2, [r1, #0]
 800cb2c:	f002 020f 	and.w	r2, r2, #15
 800cb30:	42aa      	cmp	r2, r5
 800cb32:	f47f aefa 	bne.w	800c92a <HAL_RCC_ClockConfig+0xa>
 800cb36:	e74b      	b.n	800c9d0 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cb38:	4907      	ldr	r1, [pc, #28]	; (800cb58 <HAL_RCC_ClockConfig+0x238>)
 800cb3a:	6925      	ldr	r5, [r4, #16]
 800cb3c:	6988      	ldr	r0, [r1, #24]
 800cb3e:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800cb42:	4285      	cmp	r5, r0
 800cb44:	f4bf af47 	bcs.w	800c9d6 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cb48:	698a      	ldr	r2, [r1, #24]
 800cb4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800cb4e:	432a      	orrs	r2, r5
 800cb50:	618a      	str	r2, [r1, #24]
 800cb52:	e740      	b.n	800c9d6 <HAL_RCC_ClockConfig+0xb6>
 800cb54:	52002000 	.word	0x52002000
 800cb58:	58024400 	.word	0x58024400
 800cb5c:	08024ce0 	.word	0x08024ce0
 800cb60:	2400004c 	.word	0x2400004c
 800cb64:	24000048 	.word	0x24000048
 800cb68:	24000054 	.word	0x24000054

0800cb6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb6c:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb6e:	4c0c      	ldr	r4, [pc, #48]	; (800cba0 <HAL_RCC_GetHCLKFreq+0x34>)
 800cb70:	f7ff fe36 	bl	800c7e0 <HAL_RCC_GetSysClockFreq>
 800cb74:	490b      	ldr	r1, [pc, #44]	; (800cba4 <HAL_RCC_GetHCLKFreq+0x38>)
 800cb76:	69a3      	ldr	r3, [r4, #24]
 800cb78:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800cb7c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb7e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb80:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb84:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb88:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb8c:	5ccb      	ldrb	r3, [r1, r3]
 800cb8e:	f003 031f 	and.w	r3, r3, #31
 800cb92:	fa22 f003 	lsr.w	r0, r2, r3
 800cb96:	4b04      	ldr	r3, [pc, #16]	; (800cba8 <HAL_RCC_GetHCLKFreq+0x3c>)
 800cb98:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb9a:	4b04      	ldr	r3, [pc, #16]	; (800cbac <HAL_RCC_GetHCLKFreq+0x40>)
 800cb9c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800cb9e:	bd10      	pop	{r4, pc}
 800cba0:	58024400 	.word	0x58024400
 800cba4:	08024ce0 	.word	0x08024ce0
 800cba8:	2400004c 	.word	0x2400004c
 800cbac:	24000048 	.word	0x24000048

0800cbb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbb0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cbb2:	f7ff ffdb 	bl	800cb6c <HAL_RCC_GetHCLKFreq>
 800cbb6:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <HAL_RCC_GetPCLK1Freq+0x1c>)
 800cbb8:	4a05      	ldr	r2, [pc, #20]	; (800cbd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cbba:	69db      	ldr	r3, [r3, #28]
 800cbbc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800cbc0:	5cd3      	ldrb	r3, [r2, r3]
 800cbc2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cbc6:	40d8      	lsrs	r0, r3
 800cbc8:	bd08      	pop	{r3, pc}
 800cbca:	bf00      	nop
 800cbcc:	58024400 	.word	0x58024400
 800cbd0:	08024ce0 	.word	0x08024ce0

0800cbd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cbd4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cbd6:	f7ff ffc9 	bl	800cb6c <HAL_RCC_GetHCLKFreq>
 800cbda:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800cbdc:	4a05      	ldr	r2, [pc, #20]	; (800cbf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cbde:	69db      	ldr	r3, [r3, #28]
 800cbe0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800cbe4:	5cd3      	ldrb	r3, [r2, r3]
 800cbe6:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cbea:	40d8      	lsrs	r0, r3
 800cbec:	bd08      	pop	{r3, pc}
 800cbee:	bf00      	nop
 800cbf0:	58024400 	.word	0x58024400
 800cbf4:	08024ce0 	.word	0x08024ce0

0800cbf8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800cbf8:	233f      	movs	r3, #63	; 0x3f
 800cbfa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <HAL_RCC_GetClockConfig+0x4c>)
 800cbfe:	691a      	ldr	r2, [r3, #16]
 800cc00:	f002 0207 	and.w	r2, r2, #7
 800cc04:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800cc06:	699a      	ldr	r2, [r3, #24]
 800cc08:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800cc0c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800cc0e:	699a      	ldr	r2, [r3, #24]
 800cc10:	f002 020f 	and.w	r2, r2, #15
 800cc14:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cc16:	699a      	ldr	r2, [r3, #24]
 800cc18:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800cc1c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800cc1e:	69da      	ldr	r2, [r3, #28]
 800cc20:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800cc24:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800cc26:	69da      	ldr	r2, [r3, #28]
 800cc28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800cc2c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc34:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <HAL_RCC_GetClockConfig+0x50>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	600b      	str	r3, [r1, #0]
}
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	58024400 	.word	0x58024400
 800cc48:	52002000 	.word	0x52002000

0800cc4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc4e:	4c3a      	ldr	r4, [pc, #232]	; (800cd38 <RCCEx_PLL2_Config+0xec>)
{
 800cc50:	4606      	mov	r6, r0
 800cc52:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc56:	f003 0303 	and.w	r3, r3, #3
 800cc5a:	2b03      	cmp	r3, #3
 800cc5c:	d069      	beq.n	800cd32 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc64:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc66:	f7fd f9e3 	bl	800a030 <HAL_GetTick>
 800cc6a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	011a      	lsls	r2, r3, #4
 800cc70:	d44b      	bmi.n	800cd0a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cc72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc74:	6832      	ldr	r2, [r6, #0]
 800cc76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cc7a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800cc7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc80:	68b3      	ldr	r3, [r6, #8]
 800cc82:	68f2      	ldr	r2, [r6, #12]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	3a01      	subs	r2, #1
 800cc88:	025b      	lsls	r3, r3, #9
 800cc8a:	0412      	lsls	r2, r2, #16
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cc92:	4313      	orrs	r3, r2
 800cc94:	6872      	ldr	r2, [r6, #4]
 800cc96:	3a01      	subs	r2, #1
 800cc98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	6932      	ldr	r2, [r6, #16]
 800cca0:	3a01      	subs	r2, #1
 800cca2:	0612      	lsls	r2, r2, #24
 800cca4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ccac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ccae:	6972      	ldr	r2, [r6, #20]
 800ccb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ccb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ccba:	69b2      	ldr	r2, [r6, #24]
 800ccbc:	f023 0320 	bic.w	r3, r3, #32
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ccc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ccc6:	f023 0310 	bic.w	r3, r3, #16
 800ccca:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cccc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ccce:	69f2      	ldr	r2, [r6, #28]
 800ccd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ccd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ccdc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ccde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cce0:	f043 0310 	orr.w	r3, r3, #16
 800cce4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800cce8:	b9b5      	cbnz	r5, 800cd18 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ccea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ccee:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ccf0:	4c11      	ldr	r4, [pc, #68]	; (800cd38 <RCCEx_PLL2_Config+0xec>)
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccf8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccfa:	f7fd f999 	bl	800a030 <HAL_GetTick>
 800ccfe:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	011b      	lsls	r3, r3, #4
 800cd04:	d50f      	bpl.n	800cd26 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800cd06:	2000      	movs	r0, #0
 800cd08:	e005      	b.n	800cd16 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd0a:	f7fd f991 	bl	800a030 <HAL_GetTick>
 800cd0e:	1bc0      	subs	r0, r0, r7
 800cd10:	2802      	cmp	r0, #2
 800cd12:	d9ab      	bls.n	800cc6c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800cd14:	2003      	movs	r0, #3
}
 800cd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd18:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd1a:	bf0c      	ite	eq
 800cd1c:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd20:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800cd24:	e7e3      	b.n	800ccee <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd26:	f7fd f983 	bl	800a030 <HAL_GetTick>
 800cd2a:	1b40      	subs	r0, r0, r5
 800cd2c:	2802      	cmp	r0, #2
 800cd2e:	d9e7      	bls.n	800cd00 <RCCEx_PLL2_Config+0xb4>
 800cd30:	e7f0      	b.n	800cd14 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800cd32:	2001      	movs	r0, #1
 800cd34:	e7ef      	b.n	800cd16 <RCCEx_PLL2_Config+0xca>
 800cd36:	bf00      	nop
 800cd38:	58024400 	.word	0x58024400

0800cd3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd3e:	4c3a      	ldr	r4, [pc, #232]	; (800ce28 <RCCEx_PLL3_Config+0xec>)
{
 800cd40:	4606      	mov	r6, r0
 800cd42:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd46:	f003 0303 	and.w	r3, r3, #3
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d069      	beq.n	800ce22 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd56:	f7fd f96b 	bl	800a030 <HAL_GetTick>
 800cd5a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cd5c:	6823      	ldr	r3, [r4, #0]
 800cd5e:	009a      	lsls	r2, r3, #2
 800cd60:	d44b      	bmi.n	800cdfa <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cd62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd64:	6832      	ldr	r2, [r6, #0]
 800cd66:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800cd6a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800cd6e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd70:	68b3      	ldr	r3, [r6, #8]
 800cd72:	68f2      	ldr	r2, [r6, #12]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	3a01      	subs	r2, #1
 800cd78:	025b      	lsls	r3, r3, #9
 800cd7a:	0412      	lsls	r2, r2, #16
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800cd82:	4313      	orrs	r3, r2
 800cd84:	6872      	ldr	r2, [r6, #4]
 800cd86:	3a01      	subs	r2, #1
 800cd88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	6932      	ldr	r2, [r6, #16]
 800cd90:	3a01      	subs	r2, #1
 800cd92:	0612      	lsls	r2, r2, #24
 800cd94:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800cd98:	4313      	orrs	r3, r2
 800cd9a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cd9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd9e:	6972      	ldr	r2, [r6, #20]
 800cda0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cda4:	4313      	orrs	r3, r2
 800cda6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cda8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdaa:	69b2      	ldr	r2, [r6, #24]
 800cdac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cdb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cdbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cdbe:	69f2      	ldr	r2, [r6, #28]
 800cdc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdc4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800cdc8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800cdcc:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cdce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cdd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdd4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cdd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800cdd8:	b9b5      	cbnz	r5, 800ce08 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cdda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cdde:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cde0:	4c11      	ldr	r4, [pc, #68]	; (800ce28 <RCCEx_PLL3_Config+0xec>)
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cde8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdea:	f7fd f921 	bl	800a030 <HAL_GetTick>
 800cdee:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	d50f      	bpl.n	800ce16 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e005      	b.n	800ce06 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdfa:	f7fd f919 	bl	800a030 <HAL_GetTick>
 800cdfe:	1bc0      	subs	r0, r0, r7
 800ce00:	2802      	cmp	r0, #2
 800ce02:	d9ab      	bls.n	800cd5c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ce04:	2003      	movs	r0, #3
}
 800ce06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce08:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ce0a:	bf0c      	ite	eq
 800ce0c:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ce10:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800ce14:	e7e3      	b.n	800cdde <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce16:	f7fd f90b 	bl	800a030 <HAL_GetTick>
 800ce1a:	1b40      	subs	r0, r0, r5
 800ce1c:	2802      	cmp	r0, #2
 800ce1e:	d9e7      	bls.n	800cdf0 <RCCEx_PLL3_Config+0xb4>
 800ce20:	e7f0      	b.n	800ce04 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800ce22:	2001      	movs	r0, #1
 800ce24:	e7ef      	b.n	800ce06 <RCCEx_PLL3_Config+0xca>
 800ce26:	bf00      	nop
 800ce28:	58024400 	.word	0x58024400

0800ce2c <HAL_RCCEx_PeriphCLKConfig>:
{
 800ce2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce30:	6803      	ldr	r3, [r0, #0]
{
 800ce32:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ce34:	011c      	lsls	r4, r3, #4
 800ce36:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800ce3a:	d509      	bpl.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ce3c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ce3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce42:	d02e      	beq.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ce44:	d813      	bhi.n	800ce6e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800ce46:	b1f3      	cbz	r3, 800ce86 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800ce48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce4c:	d021      	beq.n	800ce92 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800ce4e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ce50:	682b      	ldr	r3, [r5, #0]
 800ce52:	05d8      	lsls	r0, r3, #23
 800ce54:	f140 8104 	bpl.w	800d060 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ce58:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800ce5a:	2b04      	cmp	r3, #4
 800ce5c:	f200 80ff 	bhi.w	800d05e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800ce60:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ce64:	002b0024 	.word	0x002b0024
 800ce68:	002900f7 	.word	0x002900f7
 800ce6c:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ce6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce72:	d1ec      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ce74:	4aaa      	ldr	r2, [pc, #680]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce76:	2600      	movs	r6, #0
 800ce78:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800ce7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ce7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ce80:	430b      	orrs	r3, r1
 800ce82:	6513      	str	r3, [r2, #80]	; 0x50
 800ce84:	e7e4      	b.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce86:	4aa6      	ldr	r2, [pc, #664]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ce8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce8e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800ce90:	e7f0      	b.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce92:	2102      	movs	r1, #2
 800ce94:	3008      	adds	r0, #8
 800ce96:	f7ff fed9 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce9a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d1d7      	bne.n	800ce50 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800cea0:	e7e8      	b.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cea2:	2102      	movs	r1, #2
 800cea4:	3028      	adds	r0, #40	; 0x28
 800cea6:	f7ff ff49 	bl	800cd3c <RCCEx_PLL3_Config>
 800ceaa:	e7f6      	b.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ceac:	4a9c      	ldr	r2, [pc, #624]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ceae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800ceb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800ceb6:	4634      	mov	r4, r6
 800ceb8:	e005      	b.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ceba:	2100      	movs	r1, #0
 800cebc:	f105 0008 	add.w	r0, r5, #8
 800cec0:	f7ff fec4 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cec4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800cec6:	2c00      	cmp	r4, #0
 800cec8:	f040 80cc 	bne.w	800d064 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cecc:	4a94      	ldr	r2, [pc, #592]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cece:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800ced0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ced2:	f023 0307 	bic.w	r3, r3, #7
 800ced6:	430b      	orrs	r3, r1
 800ced8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ceda:	682b      	ldr	r3, [r5, #0]
 800cedc:	0599      	lsls	r1, r3, #22
 800cede:	d50d      	bpl.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 800cee0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800cee2:	2b80      	cmp	r3, #128	; 0x80
 800cee4:	f000 80dc 	beq.w	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800cee8:	f200 80be 	bhi.w	800d068 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f000 80ca 	beq.w	800d086 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800cef2:	2b40      	cmp	r3, #64	; 0x40
 800cef4:	f000 80cd 	beq.w	800d092 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800cef8:	2601      	movs	r6, #1
 800cefa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cefc:	682b      	ldr	r3, [r5, #0]
 800cefe:	055a      	lsls	r2, r3, #21
 800cf00:	d510      	bpl.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800cf02:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800cf06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf0a:	f000 80ef 	beq.w	800d0ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800cf0e:	f200 80cf 	bhi.w	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 80dd 	beq.w	800d0d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800cf18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf1c:	f000 80df 	beq.w	800d0de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800cf20:	2601      	movs	r6, #1
 800cf22:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cf24:	682b      	ldr	r3, [r5, #0]
 800cf26:	051b      	lsls	r3, r3, #20
 800cf28:	d510      	bpl.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800cf2a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800cf2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf32:	f000 8104 	beq.w	800d13e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800cf36:	f200 80e1 	bhi.w	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 80f2 	beq.w	800d124 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800cf40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf44:	f000 80f4 	beq.w	800d130 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800cf48:	2601      	movs	r6, #1
 800cf4a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	019f      	lsls	r7, r3, #6
 800cf50:	d50d      	bpl.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800cf52:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800cf54:	2b20      	cmp	r3, #32
 800cf56:	f000 810c 	beq.w	800d172 <HAL_RCCEx_PeriphCLKConfig+0x346>
 800cf5a:	f200 80f8 	bhi.w	800d14e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80f8 	beq.w	800d154 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800cf64:	2b10      	cmp	r3, #16
 800cf66:	f000 80fe 	beq.w	800d166 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800cf6a:	2601      	movs	r6, #1
 800cf6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cf6e:	682b      	ldr	r3, [r5, #0]
 800cf70:	04d8      	lsls	r0, r3, #19
 800cf72:	d50f      	bpl.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800cf74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf7a:	f000 8120 	beq.w	800d1be <HAL_RCCEx_PeriphCLKConfig+0x392>
 800cf7e:	f200 8101 	bhi.w	800d184 <HAL_RCCEx_PeriphCLKConfig+0x358>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f000 810e 	beq.w	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800cf88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf8c:	f000 8110 	beq.w	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800cf90:	2601      	movs	r6, #1
 800cf92:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cf94:	682b      	ldr	r3, [r5, #0]
 800cf96:	0499      	lsls	r1, r3, #18
 800cf98:	d50f      	bpl.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 800cf9a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800cf9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfa0:	f000 812e 	beq.w	800d200 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800cfa4:	f200 8113 	bhi.w	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8119 	beq.w	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800cfae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfb2:	f000 811e 	beq.w	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800cfb6:	2601      	movs	r6, #1
 800cfb8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cfba:	682b      	ldr	r3, [r5, #0]
 800cfbc:	045a      	lsls	r2, r3, #17
 800cfbe:	d510      	bpl.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 800cfc0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800cfc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfc8:	f000 813c 	beq.w	800d244 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800cfcc:	f200 8120 	bhi.w	800d210 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 8126 	beq.w	800d222 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800cfd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfda:	f000 812c 	beq.w	800d236 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800cfde:	2601      	movs	r6, #1
 800cfe0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	015b      	lsls	r3, r3, #5
 800cfe6:	d515      	bpl.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800cfe8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800cfea:	b14b      	cbz	r3, 800d000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800cfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cff0:	f040 8130 	bne.w	800d254 <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cff4:	2101      	movs	r1, #1
 800cff6:	f105 0008 	add.w	r0, r5, #8
 800cffa:	f7ff fe27 	bl	800cc4c <RCCEx_PLL2_Config>
 800cffe:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d000:	2c00      	cmp	r4, #0
 800d002:	f040 812a 	bne.w	800d25a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800d006:	4a46      	ldr	r2, [pc, #280]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d008:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800d00a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d00c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d010:	430b      	orrs	r3, r1
 800d012:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	041f      	lsls	r7, r3, #16
 800d018:	d50d      	bpl.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800d01a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d01c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d020:	f000 811d 	beq.w	800d25e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800d024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d028:	f000 8127 	beq.w	800d27a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 811b 	beq.w	800d268 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800d032:	2601      	movs	r6, #1
 800d034:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d036:	682b      	ldr	r3, [r5, #0]
 800d038:	01d8      	lsls	r0, r3, #7
 800d03a:	f140 8135 	bpl.w	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800d03e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800d040:	2b03      	cmp	r3, #3
 800d042:	f200 8176 	bhi.w	800d332 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800d046:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d04a:	0126      	.short	0x0126
 800d04c:	016d0121 	.word	0x016d0121
 800d050:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d052:	2100      	movs	r1, #0
 800d054:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d058:	f7ff fe70 	bl	800cd3c <RCCEx_PLL3_Config>
 800d05c:	e732      	b.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800d05e:	2601      	movs	r6, #1
 800d060:	4634      	mov	r4, r6
 800d062:	e73a      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0xae>
 800d064:	4626      	mov	r6, r4
 800d066:	e738      	b.n	800ceda <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800d068:	2bc0      	cmp	r3, #192	; 0xc0
 800d06a:	d003      	beq.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800d06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d070:	f47f af42 	bne.w	800cef8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800d074:	b9d4      	cbnz	r4, 800d0ac <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d076:	4a2a      	ldr	r2, [pc, #168]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d078:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800d07a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d07c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800d080:	430b      	orrs	r3, r1
 800d082:	6513      	str	r3, [r2, #80]	; 0x50
 800d084:	e73a      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d086:	4a26      	ldr	r2, [pc, #152]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d088:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d08a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d08e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d090:	e7f0      	b.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d092:	2100      	movs	r1, #0
 800d094:	f105 0008 	add.w	r0, r5, #8
 800d098:	f7ff fdd8 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d09c:	4604      	mov	r4, r0
        break;
 800d09e:	e7e9      	b.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d0a6:	f7ff fe49 	bl	800cd3c <RCCEx_PLL3_Config>
 800d0aa:	e7f7      	b.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x270>
 800d0ac:	4626      	mov	r6, r4
 800d0ae:	e725      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800d0b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d0b4:	d003      	beq.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d0b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d0ba:	f47f af31 	bne.w	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800d0be:	b9dc      	cbnz	r4, 800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d0c0:	4a17      	ldr	r2, [pc, #92]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d0c2:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800d0c6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d0c8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800d0cc:	430b      	orrs	r3, r1
 800d0ce:	6593      	str	r3, [r2, #88]	; 0x58
 800d0d0:	e728      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0d2:	4a13      	ldr	r2, [pc, #76]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d0d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0da:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d0dc:	e7ef      	b.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0de:	2100      	movs	r1, #0
 800d0e0:	f105 0008 	add.w	r0, r5, #8
 800d0e4:	f7ff fdb2 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0e8:	4604      	mov	r4, r0
        break;
 800d0ea:	e7e8      	b.n	800d0be <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d0f2:	f7ff fe23 	bl	800cd3c <RCCEx_PLL3_Config>
 800d0f6:	e7f7      	b.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800d0f8:	4626      	mov	r6, r4
 800d0fa:	e713      	b.n	800cf24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800d0fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d100:	d003      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d102:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d106:	f47f af1f 	bne.w	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800d10a:	b9f4      	cbnz	r4, 800d14a <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d10c:	4a04      	ldr	r2, [pc, #16]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d10e:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800d112:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d114:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800d118:	430b      	orrs	r3, r1
 800d11a:	6593      	str	r3, [r2, #88]	; 0x58
 800d11c:	e716      	b.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800d11e:	bf00      	nop
 800d120:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d124:	4aa1      	ldr	r2, [pc, #644]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d126:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d12e:	e7ec      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d130:	2100      	movs	r1, #0
 800d132:	f105 0008 	add.w	r0, r5, #8
 800d136:	f7ff fd89 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d13a:	4604      	mov	r4, r0
        break;
 800d13c:	e7e5      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d13e:	2100      	movs	r1, #0
 800d140:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d144:	f7ff fdfa 	bl	800cd3c <RCCEx_PLL3_Config>
 800d148:	e7f7      	b.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800d14a:	4626      	mov	r6, r4
 800d14c:	e6fe      	b.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800d14e:	2b30      	cmp	r3, #48	; 0x30
 800d150:	f47f af0b 	bne.w	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800d154:	b9a4      	cbnz	r4, 800d180 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d156:	4a95      	ldr	r2, [pc, #596]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d158:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800d15a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d15c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d160:	430b      	orrs	r3, r1
 800d162:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d164:	e703      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d166:	4a91      	ldr	r2, [pc, #580]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d168:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d16a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d16e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d170:	e7f0      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d172:	2102      	movs	r1, #2
 800d174:	f105 0008 	add.w	r0, r5, #8
 800d178:	f7ff fd68 	bl	800cc4c <RCCEx_PLL2_Config>
 800d17c:	4604      	mov	r4, r0
        break;
 800d17e:	e7e9      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800d180:	4626      	mov	r6, r4
 800d182:	e6f4      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800d184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d188:	d003      	beq.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800d18a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d18e:	f47f aeff 	bne.w	800cf90 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800d192:	b9d4      	cbnz	r4, 800d1ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d194:	4a85      	ldr	r2, [pc, #532]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d196:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800d198:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d19a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d19e:	430b      	orrs	r3, r1
 800d1a0:	6513      	str	r3, [r2, #80]	; 0x50
 800d1a2:	e6f7      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1a4:	4a81      	ldr	r2, [pc, #516]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d1a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d1a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d1ae:	e7f0      	b.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	f105 0008 	add.w	r0, r5, #8
 800d1b6:	f7ff fd49 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d1ba:	4604      	mov	r4, r0
        break;
 800d1bc:	e7e9      	b.n	800d192 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d1be:	2100      	movs	r1, #0
 800d1c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d1c4:	f7ff fdba 	bl	800cd3c <RCCEx_PLL3_Config>
 800d1c8:	e7f7      	b.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d1ca:	4626      	mov	r6, r4
 800d1cc:	e6e2      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800d1ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1d2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800d1d6:	d003      	beq.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800d1d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d1dc:	f47f aeeb 	bne.w	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800d1e0:	b9a4      	cbnz	r4, 800d20c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d1e2:	4a72      	ldr	r2, [pc, #456]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d1e4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800d1e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d1e8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800d1ec:	430b      	orrs	r3, r1
 800d1ee:	6513      	str	r3, [r2, #80]	; 0x50
 800d1f0:	e6e3      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	f105 0008 	add.w	r0, r5, #8
 800d1f8:	f7ff fd28 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1fc:	4604      	mov	r4, r0
        break;
 800d1fe:	e7ef      	b.n	800d1e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d200:	2101      	movs	r1, #1
 800d202:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d206:	f7ff fd99 	bl	800cd3c <RCCEx_PLL3_Config>
 800d20a:	e7f7      	b.n	800d1fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800d20c:	4626      	mov	r6, r4
 800d20e:	e6d4      	b.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800d210:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d214:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d218:	d003      	beq.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800d21a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d21e:	f47f aede 	bne.w	800cfde <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800d222:	b9ac      	cbnz	r4, 800d250 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d224:	4a61      	ldr	r2, [pc, #388]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d226:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800d22a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d22c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800d230:	430b      	orrs	r3, r1
 800d232:	6593      	str	r3, [r2, #88]	; 0x58
 800d234:	e6d5      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d236:	2101      	movs	r1, #1
 800d238:	f105 0008 	add.w	r0, r5, #8
 800d23c:	f7ff fd06 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d240:	4604      	mov	r4, r0
        break;
 800d242:	e7ee      	b.n	800d222 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d244:	2101      	movs	r1, #1
 800d246:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d24a:	f7ff fd77 	bl	800cd3c <RCCEx_PLL3_Config>
 800d24e:	e7f7      	b.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d250:	4626      	mov	r6, r4
 800d252:	e6c6      	b.n	800cfe2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800d254:	2601      	movs	r6, #1
 800d256:	4634      	mov	r4, r6
 800d258:	e6dc      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d25a:	4626      	mov	r6, r4
 800d25c:	e6da      	b.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d25e:	4a53      	ldr	r2, [pc, #332]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d260:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d266:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d268:	b974      	cbnz	r4, 800d288 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d26a:	4a50      	ldr	r2, [pc, #320]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d26c:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800d26e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d270:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800d274:	430b      	orrs	r3, r1
 800d276:	6513      	str	r3, [r2, #80]	; 0x50
 800d278:	e6dd      	b.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d27a:	2101      	movs	r1, #1
 800d27c:	f105 0008 	add.w	r0, r5, #8
 800d280:	f7ff fce4 	bl	800cc4c <RCCEx_PLL2_Config>
 800d284:	4604      	mov	r4, r0
        break;
 800d286:	e7ef      	b.n	800d268 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800d288:	4626      	mov	r6, r4
 800d28a:	e6d4      	b.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d28c:	4a47      	ldr	r2, [pc, #284]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d28e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d294:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d296:	2c00      	cmp	r4, #0
 800d298:	d14e      	bne.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d29a:	4a44      	ldr	r2, [pc, #272]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d29c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800d29e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d2a0:	f023 0303 	bic.w	r3, r3, #3
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	0259      	lsls	r1, r3, #9
 800d2ac:	d54e      	bpl.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2ae:	4f40      	ldr	r7, [pc, #256]	; (800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2b6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800d2b8:	f7fc feba 	bl	800a030 <HAL_GetTick>
 800d2bc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	05da      	lsls	r2, r3, #23
 800d2c2:	d53b      	bpl.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800d2c4:	2c00      	cmp	r4, #0
 800d2c6:	d16f      	bne.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d2c8:	4b38      	ldr	r3, [pc, #224]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d2ca:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800d2ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d2d0:	4042      	eors	r2, r0
 800d2d2:	f412 7f40 	tst.w	r2, #768	; 0x300
 800d2d6:	d00b      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d2d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800d2da:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d2dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800d2e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800d2e4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d2e6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d2e8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800d2ec:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800d2ee:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d2f0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d2f4:	d043      	beq.n	800d37e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2f6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800d2fa:	492c      	ldr	r1, [pc, #176]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d2fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800d300:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800d304:	d14c      	bne.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800d306:	6908      	ldr	r0, [r1, #16]
 800d308:	4a2a      	ldr	r2, [pc, #168]	; (800d3b4 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800d30a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800d30e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800d312:	4302      	orrs	r2, r0
 800d314:	610a      	str	r2, [r1, #16]
 800d316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d31a:	4a24      	ldr	r2, [pc, #144]	; (800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800d31c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800d31e:	430b      	orrs	r3, r1
 800d320:	6713      	str	r3, [r2, #112]	; 0x70
 800d322:	e013      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d324:	2102      	movs	r1, #2
 800d326:	f105 0008 	add.w	r0, r5, #8
 800d32a:	f7ff fc8f 	bl	800cc4c <RCCEx_PLL2_Config>
 800d32e:	4604      	mov	r4, r0
        break;
 800d330:	e7b1      	b.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800d332:	2601      	movs	r6, #1
 800d334:	4634      	mov	r4, r6
 800d336:	e7b7      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d338:	4626      	mov	r6, r4
 800d33a:	e7b5      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d33c:	f7fc fe78 	bl	800a030 <HAL_GetTick>
 800d340:	eba0 0008 	sub.w	r0, r0, r8
 800d344:	2864      	cmp	r0, #100	; 0x64
 800d346:	d9ba      	bls.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800d348:	2603      	movs	r6, #3
 800d34a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	07d8      	lsls	r0, r3, #31
 800d350:	d50a      	bpl.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800d352:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800d356:	2b10      	cmp	r3, #16
 800d358:	d045      	beq.n	800d3e6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800d35a:	d82d      	bhi.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d031      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d360:	2b08      	cmp	r3, #8
 800d362:	d039      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800d364:	2601      	movs	r6, #1
 800d366:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	0799      	lsls	r1, r3, #30
 800d36c:	d551      	bpl.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d36e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d370:	2b05      	cmp	r3, #5
 800d372:	d864      	bhi.n	800d43e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800d374:	e8df f003 	tbb	[pc, r3]
 800d378:	455d3f45 	.word	0x455d3f45
 800d37c:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800d37e:	f7fc fe57 	bl	800a030 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d382:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800d3ac <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800d386:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d388:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d38c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d390:	079b      	lsls	r3, r3, #30
 800d392:	d4b0      	bmi.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d394:	f7fc fe4c 	bl	800a030 <HAL_GetTick>
 800d398:	1bc0      	subs	r0, r0, r7
 800d39a:	4548      	cmp	r0, r9
 800d39c:	d9f6      	bls.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x560>
 800d39e:	e7d3      	b.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d3a0:	690a      	ldr	r2, [r1, #16]
 800d3a2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800d3a6:	e7b5      	b.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800d3a8:	4626      	mov	r6, r4
 800d3aa:	e7cf      	b.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800d3ac:	58024400 	.word	0x58024400
 800d3b0:	58024800 	.word	0x58024800
 800d3b4:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800d3b8:	f023 0208 	bic.w	r2, r3, #8
 800d3bc:	2a20      	cmp	r2, #32
 800d3be:	d001      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800d3c0:	2b18      	cmp	r3, #24
 800d3c2:	d1cf      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800d3c4:	b9ac      	cbnz	r4, 800d3f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d3c6:	4a20      	ldr	r2, [pc, #128]	; (800d448 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800d3c8:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800d3cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d3ce:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800d3d2:	430b      	orrs	r3, r1
 800d3d4:	6553      	str	r3, [r2, #84]	; 0x54
 800d3d6:	e7c7      	b.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3d8:	2101      	movs	r1, #1
 800d3da:	f105 0008 	add.w	r0, r5, #8
 800d3de:	f7ff fc35 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3e2:	4604      	mov	r4, r0
        break;
 800d3e4:	e7ee      	b.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d3ec:	f7ff fca6 	bl	800cd3c <RCCEx_PLL3_Config>
 800d3f0:	e7f7      	b.n	800d3e2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800d3f2:	4626      	mov	r6, r4
 800d3f4:	e7b8      	b.n	800d368 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	f105 0008 	add.w	r0, r5, #8
 800d3fc:	f7ff fc26 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d400:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d402:	b9fc      	cbnz	r4, 800d444 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d404:	4a10      	ldr	r2, [pc, #64]	; (800d448 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800d406:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800d408:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d40a:	f023 0307 	bic.w	r3, r3, #7
 800d40e:	430b      	orrs	r3, r1
 800d410:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	075a      	lsls	r2, r3, #29
 800d416:	d52a      	bpl.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d418:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800d41c:	2b05      	cmp	r3, #5
 800d41e:	f200 817b 	bhi.w	800d718 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800d422:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d426:	0019      	.short	0x0019
 800d428:	01730013 	.word	0x01730013
 800d42c:	00190019 	.word	0x00190019
 800d430:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d432:	2101      	movs	r1, #1
 800d434:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d438:	f7ff fc80 	bl	800cd3c <RCCEx_PLL3_Config>
 800d43c:	e7e0      	b.n	800d400 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d43e:	2601      	movs	r6, #1
 800d440:	4634      	mov	r4, r6
 800d442:	e7e6      	b.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800d444:	4626      	mov	r6, r4
 800d446:	e7e4      	b.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800d448:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d44c:	2101      	movs	r1, #1
 800d44e:	f105 0008 	add.w	r0, r5, #8
 800d452:	f7ff fbfb 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d456:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d458:	2c00      	cmp	r4, #0
 800d45a:	f040 8160 	bne.w	800d71e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d45e:	4aaa      	ldr	r2, [pc, #680]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d460:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800d464:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d466:	f023 0307 	bic.w	r3, r3, #7
 800d46a:	430b      	orrs	r3, r1
 800d46c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d46e:	682b      	ldr	r3, [r5, #0]
 800d470:	069b      	lsls	r3, r3, #26
 800d472:	d510      	bpl.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d474:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800d478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d47c:	f000 816b 	beq.w	800d756 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800d480:	f200 814f 	bhi.w	800d722 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800d484:	2b00      	cmp	r3, #0
 800d486:	f000 8155 	beq.w	800d734 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d48e:	f000 815b 	beq.w	800d748 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800d492:	2601      	movs	r6, #1
 800d494:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d496:	682b      	ldr	r3, [r5, #0]
 800d498:	065f      	lsls	r7, r3, #25
 800d49a:	d510      	bpl.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d49c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800d4a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4a4:	f000 8179 	beq.w	800d79a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d4a8:	f200 815d 	bhi.w	800d766 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 8163 	beq.w	800d778 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d4b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b6:	f000 8169 	beq.w	800d78c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d4ba:	2601      	movs	r6, #1
 800d4bc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d4be:	682b      	ldr	r3, [r5, #0]
 800d4c0:	0618      	lsls	r0, r3, #24
 800d4c2:	d510      	bpl.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d4c4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800d4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4cc:	f000 8187 	beq.w	800d7de <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800d4d0:	f200 816b 	bhi.w	800d7aa <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 8171 	beq.w	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x990>
 800d4da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4de:	f000 8177 	beq.w	800d7d0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800d4e2:	2601      	movs	r6, #1
 800d4e4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d4e6:	682b      	ldr	r3, [r5, #0]
 800d4e8:	0719      	lsls	r1, r3, #28
 800d4ea:	d514      	bpl.n	800d516 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800d4ec:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800d4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4f4:	d107      	bne.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d4f6:	2102      	movs	r1, #2
 800d4f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d4fc:	f7ff fc1e 	bl	800cd3c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d500:	2800      	cmp	r0, #0
 800d502:	bf18      	it	ne
 800d504:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d506:	4a80      	ldr	r2, [pc, #512]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d508:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800d50c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d50e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d512:	430b      	orrs	r3, r1
 800d514:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d516:	682b      	ldr	r3, [r5, #0]
 800d518:	06da      	lsls	r2, r3, #27
 800d51a:	d514      	bpl.n	800d546 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d51c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800d520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d524:	d107      	bne.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d526:	2102      	movs	r1, #2
 800d528:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d52c:	f7ff fc06 	bl	800cd3c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800d530:	2800      	cmp	r0, #0
 800d532:	bf18      	it	ne
 800d534:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d536:	4a74      	ldr	r2, [pc, #464]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d538:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800d53c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d53e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d542:	430b      	orrs	r3, r1
 800d544:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d546:	682b      	ldr	r3, [r5, #0]
 800d548:	031b      	lsls	r3, r3, #12
 800d54a:	d51b      	bpl.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800d54c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800d550:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800d554:	f000 814b 	beq.w	800d7ee <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800d558:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800d55c:	d007      	beq.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x742>
 800d55e:	2900      	cmp	r1, #0
 800d560:	f040 814b 	bne.w	800d7fa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d564:	f105 0008 	add.w	r0, r5, #8
 800d568:	f7ff fb70 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d56c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800d56e:	2c00      	cmp	r4, #0
 800d570:	f040 8146 	bne.w	800d800 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d574:	4a64      	ldr	r2, [pc, #400]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d576:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800d57a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d57c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800d580:	430b      	orrs	r3, r1
 800d582:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	035f      	lsls	r7, r3, #13
 800d588:	d51c      	bpl.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800d58a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800d58e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d592:	f000 8137 	beq.w	800d804 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800d596:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d59a:	d008      	beq.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x782>
 800d59c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5a0:	f040 8137 	bne.w	800d812 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d5a4:	4a58      	ldr	r2, [pc, #352]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d5a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d5a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d5ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	f040 8132 	bne.w	800d818 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d5b4:	4a54      	ldr	r2, [pc, #336]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d5b6:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800d5ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d5bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d5c0:	430b      	orrs	r3, r1
 800d5c2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	03d8      	lsls	r0, r3, #15
 800d5c8:	d509      	bpl.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800d5ca:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 8125 	beq.w	800d81c <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800d5d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5d6:	f000 812f 	beq.w	800d838 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800d5da:	2601      	movs	r6, #1
 800d5dc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d5de:	682b      	ldr	r3, [r5, #0]
 800d5e0:	0099      	lsls	r1, r3, #2
 800d5e2:	d507      	bpl.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d5e4:	2102      	movs	r1, #2
 800d5e6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d5ea:	f7ff fba7 	bl	800cd3c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	bf18      	it	ne
 800d5f2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d5f4:	e9d5 3100 	ldrd	r3, r1, [r5]
 800d5f8:	039a      	lsls	r2, r3, #14
 800d5fa:	d50b      	bpl.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800d5fc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800d600:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800d604:	f000 812f 	beq.w	800d866 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800d608:	f200 811f 	bhi.w	800d84a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	f000 8122 	beq.w	800d856 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800d612:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d614:	02df      	lsls	r7, r3, #11
 800d616:	d506      	bpl.n	800d626 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d618:	483b      	ldr	r0, [pc, #236]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d61a:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800d61c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d61e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800d622:	4322      	orrs	r2, r4
 800d624:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d626:	00dc      	lsls	r4, r3, #3
 800d628:	d507      	bpl.n	800d63a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d62a:	4837      	ldr	r0, [pc, #220]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d62c:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800d630:	6902      	ldr	r2, [r0, #16]
 800d632:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d636:	4322      	orrs	r2, r4
 800d638:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d63a:	0298      	lsls	r0, r3, #10
 800d63c:	d506      	bpl.n	800d64c <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d63e:	4832      	ldr	r0, [pc, #200]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d640:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800d642:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800d644:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800d648:	4322      	orrs	r2, r4
 800d64a:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d64c:	005a      	lsls	r2, r3, #1
 800d64e:	d509      	bpl.n	800d664 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d650:	4a2d      	ldr	r2, [pc, #180]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d652:	6910      	ldr	r0, [r2, #16]
 800d654:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800d658:	6110      	str	r0, [r2, #16]
 800d65a:	6910      	ldr	r0, [r2, #16]
 800d65c:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800d660:	4320      	orrs	r0, r4
 800d662:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d664:	2b00      	cmp	r3, #0
 800d666:	da06      	bge.n	800d676 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d668:	4827      	ldr	r0, [pc, #156]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d66a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800d66c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800d66e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800d672:	4322      	orrs	r2, r4
 800d674:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d676:	021b      	lsls	r3, r3, #8
 800d678:	d507      	bpl.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d67a:	4a23      	ldr	r2, [pc, #140]	; (800d708 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800d67c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800d680:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d682:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800d686:	4303      	orrs	r3, r0
 800d688:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d68a:	07cf      	lsls	r7, r1, #31
 800d68c:	d507      	bpl.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d68e:	2100      	movs	r1, #0
 800d690:	f105 0008 	add.w	r0, r5, #8
 800d694:	f7ff fada 	bl	800cc4c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d698:	2800      	cmp	r0, #0
 800d69a:	bf18      	it	ne
 800d69c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d69e:	686b      	ldr	r3, [r5, #4]
 800d6a0:	079c      	lsls	r4, r3, #30
 800d6a2:	d507      	bpl.n	800d6b4 <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	f105 0008 	add.w	r0, r5, #8
 800d6aa:	f7ff facf 	bl	800cc4c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	bf18      	it	ne
 800d6b2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d6b4:	686b      	ldr	r3, [r5, #4]
 800d6b6:	0758      	lsls	r0, r3, #29
 800d6b8:	d507      	bpl.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d6ba:	2102      	movs	r1, #2
 800d6bc:	f105 0008 	add.w	r0, r5, #8
 800d6c0:	f7ff fac4 	bl	800cc4c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800d6c4:	2800      	cmp	r0, #0
 800d6c6:	bf18      	it	ne
 800d6c8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d6ca:	686b      	ldr	r3, [r5, #4]
 800d6cc:	0719      	lsls	r1, r3, #28
 800d6ce:	d507      	bpl.n	800d6e0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d6d6:	f7ff fb31 	bl	800cd3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	bf18      	it	ne
 800d6de:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d6e0:	686b      	ldr	r3, [r5, #4]
 800d6e2:	06da      	lsls	r2, r3, #27
 800d6e4:	d507      	bpl.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d6ec:	f7ff fb26 	bl	800cd3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	bf18      	it	ne
 800d6f4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d6f6:	686b      	ldr	r3, [r5, #4]
 800d6f8:	069b      	lsls	r3, r3, #26
 800d6fa:	f100 80bc 	bmi.w	800d876 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800d6fe:	1e30      	subs	r0, r6, #0
 800d700:	bf18      	it	ne
 800d702:	2001      	movne	r0, #1
}
 800d704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d708:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d70c:	2101      	movs	r1, #1
 800d70e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d712:	f7ff fb13 	bl	800cd3c <RCCEx_PLL3_Config>
 800d716:	e69e      	b.n	800d456 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d718:	2601      	movs	r6, #1
 800d71a:	4634      	mov	r4, r6
 800d71c:	e6a7      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800d71e:	4626      	mov	r6, r4
 800d720:	e6a5      	b.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d722:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d726:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800d72a:	d003      	beq.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800d72c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d730:	f47f aeaf 	bne.w	800d492 <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800d734:	b9ac      	cbnz	r4, 800d762 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d736:	4a55      	ldr	r2, [pc, #340]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d738:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800d73c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d73e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800d742:	430b      	orrs	r3, r1
 800d744:	6553      	str	r3, [r2, #84]	; 0x54
 800d746:	e6a6      	b.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d748:	2100      	movs	r1, #0
 800d74a:	f105 0008 	add.w	r0, r5, #8
 800d74e:	f7ff fa7d 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d752:	4604      	mov	r4, r0
        break;
 800d754:	e7ee      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d756:	2102      	movs	r1, #2
 800d758:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d75c:	f7ff faee 	bl	800cd3c <RCCEx_PLL3_Config>
 800d760:	e7f7      	b.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800d762:	4626      	mov	r6, r4
 800d764:	e697      	b.n	800d496 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d766:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d76a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800d76e:	d003      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d770:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d774:	f47f aea1 	bne.w	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800d778:	b9ac      	cbnz	r4, 800d7a6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d77a:	4a44      	ldr	r2, [pc, #272]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d77c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800d780:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d782:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800d786:	430b      	orrs	r3, r1
 800d788:	6593      	str	r3, [r2, #88]	; 0x58
 800d78a:	e698      	b.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d78c:	2100      	movs	r1, #0
 800d78e:	f105 0008 	add.w	r0, r5, #8
 800d792:	f7ff fa5b 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d796:	4604      	mov	r4, r0
        break;
 800d798:	e7ee      	b.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d79a:	2102      	movs	r1, #2
 800d79c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d7a0:	f7ff facc 	bl	800cd3c <RCCEx_PLL3_Config>
 800d7a4:	e7f7      	b.n	800d796 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800d7a6:	4626      	mov	r6, r4
 800d7a8:	e689      	b.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d7aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d7ae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800d7b2:	d003      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x990>
 800d7b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d7b8:	f47f ae93 	bne.w	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800d7bc:	b9ac      	cbnz	r4, 800d7ea <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d7be:	4a33      	ldr	r2, [pc, #204]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d7c0:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800d7c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d7c6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d7ca:	430b      	orrs	r3, r1
 800d7cc:	6593      	str	r3, [r2, #88]	; 0x58
 800d7ce:	e68a      	b.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	f105 0008 	add.w	r0, r5, #8
 800d7d6:	f7ff fa39 	bl	800cc4c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7da:	4604      	mov	r4, r0
        break;
 800d7dc:	e7ee      	b.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7de:	2102      	movs	r1, #2
 800d7e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d7e4:	f7ff faaa 	bl	800cd3c <RCCEx_PLL3_Config>
 800d7e8:	e7f7      	b.n	800d7da <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800d7ea:	4626      	mov	r6, r4
 800d7ec:	e67b      	b.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7ee:	2102      	movs	r1, #2
 800d7f0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d7f4:	f7ff faa2 	bl	800cd3c <RCCEx_PLL3_Config>
 800d7f8:	e6b8      	b.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800d7fa:	2601      	movs	r6, #1
 800d7fc:	4634      	mov	r4, r6
 800d7fe:	e6c1      	b.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800d800:	4626      	mov	r6, r4
 800d802:	e6bf      	b.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d804:	2101      	movs	r1, #1
 800d806:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d80a:	f7ff fa97 	bl	800cd3c <RCCEx_PLL3_Config>
 800d80e:	4604      	mov	r4, r0
        break;
 800d810:	e6cd      	b.n	800d5ae <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800d812:	2601      	movs	r6, #1
 800d814:	4634      	mov	r4, r6
 800d816:	e6d5      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
 800d818:	4626      	mov	r6, r4
 800d81a:	e6d3      	b.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d81c:	4a1b      	ldr	r2, [pc, #108]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d81e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d824:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d826:	b974      	cbnz	r4, 800d846 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d828:	4a18      	ldr	r2, [pc, #96]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d82a:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800d82c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d82e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d832:	430b      	orrs	r3, r1
 800d834:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d836:	e6d2      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d838:	2102      	movs	r1, #2
 800d83a:	f105 0008 	add.w	r0, r5, #8
 800d83e:	f7ff fa05 	bl	800cc4c <RCCEx_PLL2_Config>
 800d842:	4604      	mov	r4, r0
        break;
 800d844:	e7ef      	b.n	800d826 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800d846:	4626      	mov	r6, r4
 800d848:	e6c9      	b.n	800d5de <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800d84a:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800d84e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800d852:	f47f aede 	bne.w	800d612 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800d856:	b964      	cbnz	r4, 800d872 <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d858:	4c0c      	ldr	r4, [pc, #48]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d85a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d85c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800d860:	4302      	orrs	r2, r0
 800d862:	6562      	str	r2, [r4, #84]	; 0x54
 800d864:	e6d6      	b.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d866:	4f09      	ldr	r7, [pc, #36]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800d868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800d86e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800d870:	e7f1      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800d872:	4626      	mov	r6, r4
 800d874:	e6ce      	b.n	800d614 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d876:	2102      	movs	r1, #2
 800d878:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800d87c:	f7ff fa5e 	bl	800cd3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800d880:	2800      	cmp	r0, #0
 800d882:	f43f af3c 	beq.w	800d6fe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800d886:	2001      	movs	r0, #1
 800d888:	e73c      	b.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800d88a:	bf00      	nop
 800d88c:	58024400 	.word	0x58024400

0800d890 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d894:	4604      	mov	r4, r0
 800d896:	b1f0      	cbz	r0, 800d8d6 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d898:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800d89c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d8a0:	b91b      	cbnz	r3, 800d8aa <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d8a2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d8a6:	f7f3 fcd1 	bl	800124c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8aa:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d8ac:	1d21      	adds	r1, r4, #4
 800d8ae:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d8b0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d8b4:	f000 fa1f 	bl	800dcf6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d8b8:	6862      	ldr	r2, [r4, #4]
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	6820      	ldr	r0, [r4, #0]
 800d8be:	f000 fa55 	bl	800dd6c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d8c2:	4a06      	ldr	r2, [pc, #24]	; (800d8dc <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800d8c4:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800d8c6:	6813      	ldr	r3, [r2, #0]
 800d8c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8cc:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800d8d4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d8d6:	2001      	movs	r0, #1
 800d8d8:	e7fc      	b.n	800d8d4 <HAL_SDRAM_Init+0x44>
 800d8da:	bf00      	nop
 800d8dc:	52004000 	.word	0x52004000

0800d8e0 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800d8e4:	f7f3 fd40 	bl	8001368 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800d8e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d8ec:	f000 fa74 	bl	800ddd8 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800d8f6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800d8fa:	bd10      	pop	{r4, pc}

0800d8fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d8fc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d8fe:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800d902:	4605      	mov	r5, r0
 800d904:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d906:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d908:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800d90a:	d010      	beq.n	800d92e <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d90c:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800d910:	2c01      	cmp	r4, #1
 800d912:	d110      	bne.n	800d936 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d914:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d916:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d918:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d91c:	f000 fa6b 	bl	800ddf6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d920:	6833      	ldr	r3, [r6, #0]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d104      	bne.n	800d930 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d926:	2305      	movs	r3, #5
 800d928:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d92c:	2000      	movs	r0, #0
}
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d930:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800d934:	e7fa      	b.n	800d92c <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800d936:	2001      	movs	r0, #1
 800d938:	e7f9      	b.n	800d92e <HAL_SDRAM_SendCommand+0x32>

0800d93a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d93a:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d93c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800d940:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d942:	2b02      	cmp	r3, #2
 800d944:	b2d8      	uxtb	r0, r3
 800d946:	d00d      	beq.n	800d964 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d948:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	b2dd      	uxtb	r5, r3
 800d950:	d109      	bne.n	800d966 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d952:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d954:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d956:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d95a:	f000 fa5e 	bl	800de1a <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d95e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d960:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800d964:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d966:	2001      	movs	r0, #1
 800d968:	e7fc      	b.n	800d964 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800d96a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d96a:	4770      	bx	lr

0800d96c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d96c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d970:	2b01      	cmp	r3, #1
 800d972:	d12f      	bne.n	800d9d4 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d974:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d976:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800d978:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d97c:	6803      	ldr	r3, [r0, #0]
 800d97e:	4293      	cmp	r3, r2
 800d980:	d01a      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d986:	d017      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d988:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d013      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d990:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d994:	4293      	cmp	r3, r2
 800d996:	d00f      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d998:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d00b      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d9a0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d007      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d9a8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d003      	beq.n	800d9b8 <HAL_TIM_Base_Start+0x4c>
 800d9b0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d107      	bne.n	800d9c8 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9b8:	6899      	ldr	r1, [r3, #8]
 800d9ba:	4a08      	ldr	r2, [pc, #32]	; (800d9dc <HAL_TIM_Base_Start+0x70>)
 800d9bc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9be:	2a06      	cmp	r2, #6
 800d9c0:	d006      	beq.n	800d9d0 <HAL_TIM_Base_Start+0x64>
 800d9c2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d9c6:	d003      	beq.n	800d9d0 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	f042 0201 	orr.w	r2, r2, #1
 800d9ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9d0:	2000      	movs	r0, #0
}
 800d9d2:	4770      	bx	lr
    return HAL_ERROR;
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	4770      	bx	lr
 800d9d8:	40010000 	.word	0x40010000
 800d9dc:	00010007 	.word	0x00010007

0800d9e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d133      	bne.n	800da50 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9ee:	6803      	ldr	r3, [r0, #0]
 800d9f0:	68da      	ldr	r2, [r3, #12]
 800d9f2:	f042 0201 	orr.w	r2, r2, #1
 800d9f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9f8:	4a16      	ldr	r2, [pc, #88]	; (800da54 <HAL_TIM_Base_Start_IT+0x74>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d01a      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800d9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da02:	d017      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da04:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800da08:	4293      	cmp	r3, r2
 800da0a:	d013      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da10:	4293      	cmp	r3, r2
 800da12:	d00f      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800da18:	4293      	cmp	r3, r2
 800da1a:	d00b      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da1c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800da20:	4293      	cmp	r3, r2
 800da22:	d007      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da24:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800da28:	4293      	cmp	r3, r2
 800da2a:	d003      	beq.n	800da34 <HAL_TIM_Base_Start_IT+0x54>
 800da2c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800da30:	4293      	cmp	r3, r2
 800da32:	d107      	bne.n	800da44 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da34:	6899      	ldr	r1, [r3, #8]
 800da36:	4a08      	ldr	r2, [pc, #32]	; (800da58 <HAL_TIM_Base_Start_IT+0x78>)
 800da38:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da3a:	2a06      	cmp	r2, #6
 800da3c:	d006      	beq.n	800da4c <HAL_TIM_Base_Start_IT+0x6c>
 800da3e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800da42:	d003      	beq.n	800da4c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	f042 0201 	orr.w	r2, r2, #1
 800da4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da4c:	2000      	movs	r0, #0
}
 800da4e:	4770      	bx	lr
    return HAL_ERROR;
 800da50:	2001      	movs	r0, #1
 800da52:	4770      	bx	lr
 800da54:	40010000 	.word	0x40010000
 800da58:	00010007 	.word	0x00010007

0800da5c <HAL_TIM_OC_DelayElapsedCallback>:
 800da5c:	4770      	bx	lr

0800da5e <HAL_TIM_IC_CaptureCallback>:
 800da5e:	4770      	bx	lr

0800da60 <HAL_TIM_PWM_PulseFinishedCallback>:
 800da60:	4770      	bx	lr

0800da62 <HAL_TIM_TriggerCallback>:
 800da62:	4770      	bx	lr

0800da64 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da64:	6803      	ldr	r3, [r0, #0]
 800da66:	691a      	ldr	r2, [r3, #16]
 800da68:	0791      	lsls	r1, r2, #30
{
 800da6a:	b510      	push	{r4, lr}
 800da6c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da6e:	d50f      	bpl.n	800da90 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da70:	68da      	ldr	r2, [r3, #12]
 800da72:	0792      	lsls	r2, r2, #30
 800da74:	d50c      	bpl.n	800da90 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da76:	f06f 0202 	mvn.w	r2, #2
 800da7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da7c:	2201      	movs	r2, #1
 800da7e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	0799      	lsls	r1, r3, #30
 800da84:	f000 8085 	beq.w	800db92 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da88:	f7ff ffe9 	bl	800da5e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da8c:	2300      	movs	r3, #0
 800da8e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	0752      	lsls	r2, r2, #29
 800da96:	d510      	bpl.n	800daba <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da98:	68da      	ldr	r2, [r3, #12]
 800da9a:	0750      	lsls	r0, r2, #29
 800da9c:	d50d      	bpl.n	800daba <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da9e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daa2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800daa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800daa6:	2202      	movs	r2, #2
 800daa8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	f413 7f40 	tst.w	r3, #768	; 0x300
 800dab0:	d075      	beq.n	800db9e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800dab2:	f7ff ffd4 	bl	800da5e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dab6:	2300      	movs	r3, #0
 800dab8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	691a      	ldr	r2, [r3, #16]
 800dabe:	0711      	lsls	r1, r2, #28
 800dac0:	d50f      	bpl.n	800dae2 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dac2:	68da      	ldr	r2, [r3, #12]
 800dac4:	0712      	lsls	r2, r2, #28
 800dac6:	d50c      	bpl.n	800dae2 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dac8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dacc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dad0:	2204      	movs	r2, #4
 800dad2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dad4:	69db      	ldr	r3, [r3, #28]
 800dad6:	079b      	lsls	r3, r3, #30
 800dad8:	d067      	beq.n	800dbaa <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800dada:	f7ff ffc0 	bl	800da5e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dade:	2300      	movs	r3, #0
 800dae0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	691a      	ldr	r2, [r3, #16]
 800dae6:	06d0      	lsls	r0, r2, #27
 800dae8:	d510      	bpl.n	800db0c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800daea:	68da      	ldr	r2, [r3, #12]
 800daec:	06d1      	lsls	r1, r2, #27
 800daee:	d50d      	bpl.n	800db0c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800daf0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daf4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800daf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800daf8:	2208      	movs	r2, #8
 800dafa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	f413 7f40 	tst.w	r3, #768	; 0x300
 800db02:	d058      	beq.n	800dbb6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800db04:	f7ff ffab 	bl	800da5e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db08:	2300      	movs	r3, #0
 800db0a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	691a      	ldr	r2, [r3, #16]
 800db10:	07d2      	lsls	r2, r2, #31
 800db12:	d508      	bpl.n	800db26 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	07d0      	lsls	r0, r2, #31
 800db18:	d505      	bpl.n	800db26 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db1a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db1e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800db22:	f7f3 f9e1 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	691a      	ldr	r2, [r3, #16]
 800db2a:	0611      	lsls	r1, r2, #24
 800db2c:	d508      	bpl.n	800db40 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db2e:	68da      	ldr	r2, [r3, #12]
 800db30:	0612      	lsls	r2, r2, #24
 800db32:	d505      	bpl.n	800db40 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db34:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db38:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800db3c:	f000 f8d9 	bl	800dcf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db40:	6823      	ldr	r3, [r4, #0]
 800db42:	691a      	ldr	r2, [r3, #16]
 800db44:	05d0      	lsls	r0, r2, #23
 800db46:	d508      	bpl.n	800db5a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	0611      	lsls	r1, r2, #24
 800db4c:	d505      	bpl.n	800db5a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800db52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800db54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800db56:	f000 f8cd 	bl	800dcf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	691a      	ldr	r2, [r3, #16]
 800db5e:	0652      	lsls	r2, r2, #25
 800db60:	d508      	bpl.n	800db74 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db62:	68da      	ldr	r2, [r3, #12]
 800db64:	0650      	lsls	r0, r2, #25
 800db66:	d505      	bpl.n	800db74 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db68:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800db70:	f7ff ff77 	bl	800da62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db74:	6823      	ldr	r3, [r4, #0]
 800db76:	691a      	ldr	r2, [r3, #16]
 800db78:	0691      	lsls	r1, r2, #26
 800db7a:	d522      	bpl.n	800dbc2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db7c:	68da      	ldr	r2, [r3, #12]
 800db7e:	0692      	lsls	r2, r2, #26
 800db80:	d51f      	bpl.n	800dbc2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db82:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db88:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800db8e:	f000 b8af 	b.w	800dcf0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db92:	f7ff ff63 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db96:	4620      	mov	r0, r4
 800db98:	f7ff ff62 	bl	800da60 <HAL_TIM_PWM_PulseFinishedCallback>
 800db9c:	e776      	b.n	800da8c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9e:	f7ff ff5d 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba2:	4620      	mov	r0, r4
 800dba4:	f7ff ff5c 	bl	800da60 <HAL_TIM_PWM_PulseFinishedCallback>
 800dba8:	e785      	b.n	800dab6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbaa:	f7ff ff57 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f7ff ff56 	bl	800da60 <HAL_TIM_PWM_PulseFinishedCallback>
 800dbb4:	e793      	b.n	800dade <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbb6:	f7ff ff51 	bl	800da5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f7ff ff50 	bl	800da60 <HAL_TIM_PWM_PulseFinishedCallback>
 800dbc0:	e7a2      	b.n	800db08 <HAL_TIM_IRQHandler+0xa4>
}
 800dbc2:	bd10      	pop	{r4, pc}

0800dbc4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbc4:	4a30      	ldr	r2, [pc, #192]	; (800dc88 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800dbc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbc8:	4290      	cmp	r0, r2
 800dbca:	d012      	beq.n	800dbf2 <TIM_Base_SetConfig+0x2e>
 800dbcc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dbd0:	d00f      	beq.n	800dbf2 <TIM_Base_SetConfig+0x2e>
 800dbd2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dbd6:	4290      	cmp	r0, r2
 800dbd8:	d00b      	beq.n	800dbf2 <TIM_Base_SetConfig+0x2e>
 800dbda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbde:	4290      	cmp	r0, r2
 800dbe0:	d007      	beq.n	800dbf2 <TIM_Base_SetConfig+0x2e>
 800dbe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbe6:	4290      	cmp	r0, r2
 800dbe8:	d003      	beq.n	800dbf2 <TIM_Base_SetConfig+0x2e>
 800dbea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dbee:	4290      	cmp	r0, r2
 800dbf0:	d119      	bne.n	800dc26 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800dbf2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800dbf8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbfa:	4a23      	ldr	r2, [pc, #140]	; (800dc88 <TIM_Base_SetConfig+0xc4>)
 800dbfc:	4290      	cmp	r0, r2
 800dbfe:	d01d      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc00:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800dc04:	d01a      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc06:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800dc0a:	4290      	cmp	r0, r2
 800dc0c:	d016      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc12:	4290      	cmp	r0, r2
 800dc14:	d012      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc1a:	4290      	cmp	r0, r2
 800dc1c:	d00e      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc1e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800dc22:	4290      	cmp	r0, r2
 800dc24:	d00a      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc26:	4a19      	ldr	r2, [pc, #100]	; (800dc8c <TIM_Base_SetConfig+0xc8>)
 800dc28:	4290      	cmp	r0, r2
 800dc2a:	d007      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc30:	4290      	cmp	r0, r2
 800dc32:	d003      	beq.n	800dc3c <TIM_Base_SetConfig+0x78>
 800dc34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dc38:	4290      	cmp	r0, r2
 800dc3a:	d103      	bne.n	800dc44 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc40:	68ca      	ldr	r2, [r1, #12]
 800dc42:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc44:	694a      	ldr	r2, [r1, #20]
 800dc46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc4a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800dc4c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc4e:	688b      	ldr	r3, [r1, #8]
 800dc50:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc52:	680b      	ldr	r3, [r1, #0]
 800dc54:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <TIM_Base_SetConfig+0xc4>)
 800dc58:	4298      	cmp	r0, r3
 800dc5a:	d00f      	beq.n	800dc7c <TIM_Base_SetConfig+0xb8>
 800dc5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc60:	4298      	cmp	r0, r3
 800dc62:	d00b      	beq.n	800dc7c <TIM_Base_SetConfig+0xb8>
 800dc64:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800dc68:	4298      	cmp	r0, r3
 800dc6a:	d007      	beq.n	800dc7c <TIM_Base_SetConfig+0xb8>
 800dc6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc70:	4298      	cmp	r0, r3
 800dc72:	d003      	beq.n	800dc7c <TIM_Base_SetConfig+0xb8>
 800dc74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc78:	4298      	cmp	r0, r3
 800dc7a:	d101      	bne.n	800dc80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc7c:	690b      	ldr	r3, [r1, #16]
 800dc7e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc80:	2301      	movs	r3, #1
 800dc82:	6143      	str	r3, [r0, #20]
}
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop
 800dc88:	40010000 	.word	0x40010000
 800dc8c:	40014000 	.word	0x40014000

0800dc90 <HAL_TIM_Base_Init>:
{
 800dc90:	b510      	push	{r4, lr}
  if (htim == NULL)
 800dc92:	4604      	mov	r4, r0
 800dc94:	b350      	cbz	r0, 800dcec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dc96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800dc9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dc9e:	b91b      	cbnz	r3, 800dca8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800dca0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800dca4:	f7ff fe61 	bl	800d96a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800dca8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcaa:	6820      	ldr	r0, [r4, #0]
 800dcac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800dcae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcb2:	f7ff ff87 	bl	800dbc4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcb6:	2301      	movs	r3, #1
  return HAL_OK;
 800dcb8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800dcc2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800dcc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dcca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800dcce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcd6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800dcda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcde:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800dce2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800dce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dcea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800dcec:	2001      	movs	r0, #1
 800dcee:	e7fc      	b.n	800dcea <HAL_TIM_Base_Init+0x5a>

0800dcf0 <HAL_TIMEx_CommutCallback>:
 800dcf0:	4770      	bx	lr

0800dcf2 <HAL_TIMEx_BreakCallback>:
 800dcf2:	4770      	bx	lr

0800dcf4 <HAL_TIMEx_Break2Callback>:
 800dcf4:	4770      	bx	lr

0800dcf6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800dcf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800dcfa:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dcfc:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800dd00:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800dd04:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800dd08:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800dd0c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800dd10:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800dd12:	b9a2      	cbnz	r2, 800dd3e <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dd14:	ea43 0209 	orr.w	r2, r3, r9
 800dd18:	6801      	ldr	r1, [r0, #0]
 800dd1a:	432a      	orrs	r2, r5
 800dd1c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800dd20:	ea42 0308 	orr.w	r3, r2, r8
 800dd24:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800dd28:	ea43 030e 	orr.w	r3, r3, lr
 800dd2c:	ea43 030c 	orr.w	r3, r3, ip
 800dd30:	433b      	orrs	r3, r7
 800dd32:	4333      	orrs	r3, r6
 800dd34:	430b      	orrs	r3, r1
 800dd36:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dd3e:	6802      	ldr	r2, [r0, #0]
 800dd40:	ea43 0309 	orr.w	r3, r3, r9
 800dd44:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800dd4c:	ea45 0308 	orr.w	r3, r5, r8
 800dd50:	6842      	ldr	r2, [r0, #4]
 800dd52:	ea43 030e 	orr.w	r3, r3, lr
 800dd56:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800dd5a:	ea43 030c 	orr.w	r3, r3, ip
 800dd5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800dd62:	433b      	orrs	r3, r7
 800dd64:	4333      	orrs	r3, r6
 800dd66:	4313      	orrs	r3, r2
 800dd68:	6043      	str	r3, [r0, #4]
 800dd6a:	e7e5      	b.n	800dd38 <FMC_SDRAM_Init+0x42>

0800dd6c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dd6c:	68cb      	ldr	r3, [r1, #12]
 800dd6e:	f103 3cff 	add.w	ip, r3, #4294967295
 800dd72:	694b      	ldr	r3, [r1, #20]
{
 800dd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dd76:	3b01      	subs	r3, #1
 800dd78:	680f      	ldr	r7, [r1, #0]
 800dd7a:	684c      	ldr	r4, [r1, #4]
 800dd7c:	688e      	ldr	r6, [r1, #8]
 800dd7e:	051b      	lsls	r3, r3, #20
 800dd80:	690d      	ldr	r5, [r1, #16]
 800dd82:	3c01      	subs	r4, #1
 800dd84:	6989      	ldr	r1, [r1, #24]
 800dd86:	3e01      	subs	r6, #1
 800dd88:	3d01      	subs	r5, #1
 800dd8a:	3f01      	subs	r7, #1
 800dd8c:	3901      	subs	r1, #1
 800dd8e:	0124      	lsls	r4, r4, #4
 800dd90:	0236      	lsls	r6, r6, #8
 800dd92:	042d      	lsls	r5, r5, #16
 800dd94:	0609      	lsls	r1, r1, #24
 800dd96:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800dd9a:	b95a      	cbnz	r2, 800ddb4 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800dd9c:	433b      	orrs	r3, r7
 800dd9e:	6882      	ldr	r2, [r0, #8]
 800dda0:	4323      	orrs	r3, r4
 800dda2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800dda6:	4333      	orrs	r3, r6
 800dda8:	432b      	orrs	r3, r5
 800ddaa:	430b      	orrs	r3, r1
 800ddac:	4313      	orrs	r3, r2
 800ddae:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ddb4:	6882      	ldr	r2, [r0, #8]
 800ddb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ddba:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ddbe:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ddc0:	ea44 0306 	orr.w	r3, r4, r6
 800ddc4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ddc6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ddc8:	68c2      	ldr	r2, [r0, #12]
 800ddca:	432b      	orrs	r3, r5
 800ddcc:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ddd0:	430b      	orrs	r3, r1
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	60c3      	str	r3, [r0, #12]
 800ddd6:	e7eb      	b.n	800ddb0 <FMC_SDRAM_Timing_Init+0x44>

0800ddd8 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800ddd8:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800dddc:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800dde0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800dde4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800dde8:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800ddee:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800ddf0:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	4770      	bx	lr

0800ddf6 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ddf6:	6902      	ldr	r2, [r0, #16]
{
 800ddf8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ddfa:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ddfe:	0d92      	lsrs	r2, r2, #22
 800de00:	4323      	orrs	r3, r4
 800de02:	68cc      	ldr	r4, [r1, #12]
 800de04:	0592      	lsls	r2, r2, #22
 800de06:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800de0a:	4313      	orrs	r3, r2
 800de0c:	688a      	ldr	r2, [r1, #8]
 800de0e:	3a01      	subs	r2, #1
 800de10:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800de14:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800de16:	2000      	movs	r0, #0
 800de18:	bd10      	pop	{r4, pc}

0800de1a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800de1a:	6943      	ldr	r3, [r0, #20]
 800de1c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800de20:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800de24:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800de28:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800de2a:	2000      	movs	r0, #0
 800de2c:	4770      	bx	lr

0800de2e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800de2e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800de30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800de34:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800de36:	f001 fe07 	bl	800fa48 <xTaskGetSchedulerState>
 800de3a:	2801      	cmp	r0, #1
 800de3c:	d003      	beq.n	800de46 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800de3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800de42:	f000 bbcf 	b.w	800e5e4 <xPortSysTickHandler>
}
 800de46:	bd08      	pop	{r3, pc}

0800de48 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de48:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800de4c:	b92b      	cbnz	r3, 800de5a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800de4e:	4b06      	ldr	r3, [pc, #24]	; (800de68 <osKernelInitialize+0x20>)
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	b928      	cbnz	r0, 800de60 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800de54:	2201      	movs	r2, #1
 800de56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800de58:	4770      	bx	lr
    stat = osErrorISR;
 800de5a:	f06f 0005 	mvn.w	r0, #5
 800de5e:	4770      	bx	lr
    } else {
      stat = osError;
 800de60:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800de64:	4770      	bx	lr
 800de66:	bf00      	nop
 800de68:	24006740 	.word	0x24006740

0800de6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800de6c:	b510      	push	{r4, lr}
 800de6e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800de72:	b95c      	cbnz	r4, 800de8c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800de74:	4b08      	ldr	r3, [pc, #32]	; (800de98 <osKernelStart+0x2c>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	2a01      	cmp	r2, #1
 800de7a:	d10a      	bne.n	800de92 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800de7c:	4a07      	ldr	r2, [pc, #28]	; (800de9c <osKernelStart+0x30>)
 800de7e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de80:	2202      	movs	r2, #2
 800de82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de84:	f001 fc84 	bl	800f790 <vTaskStartScheduler>
      stat = osOK;
 800de88:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800de8a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800de8c:	f06f 0005 	mvn.w	r0, #5
 800de90:	e7fb      	b.n	800de8a <osKernelStart+0x1e>
      stat = osError;
 800de92:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800de96:	e7f8      	b.n	800de8a <osKernelStart+0x1e>
 800de98:	24006740 	.word	0x24006740
 800de9c:	e000ed00 	.word	0xe000ed00

0800dea0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dea2:	4614      	mov	r4, r2
 800dea4:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dea6:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dea8:	460b      	mov	r3, r1
  hTask = NULL;
 800deaa:	9205      	str	r2, [sp, #20]
 800deac:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800deb0:	b9d2      	cbnz	r2, 800dee8 <osThreadNew+0x48>
 800deb2:	b1c8      	cbz	r0, 800dee8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800deb4:	2c00      	cmp	r4, #0
 800deb6:	d02f      	beq.n	800df18 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800deb8:	69a5      	ldr	r5, [r4, #24]
 800deba:	2d00      	cmp	r5, #0
 800debc:	bf08      	it	eq
 800debe:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dec0:	1e69      	subs	r1, r5, #1
 800dec2:	46ac      	mov	ip, r5
 800dec4:	2937      	cmp	r1, #55	; 0x37
 800dec6:	d82b      	bhi.n	800df20 <osThreadNew+0x80>
 800dec8:	6861      	ldr	r1, [r4, #4]
 800deca:	07c9      	lsls	r1, r1, #31
 800decc:	d428      	bmi.n	800df20 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800dece:	6966      	ldr	r6, [r4, #20]
 800ded0:	b16e      	cbz	r6, 800deee <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ded2:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ded4:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ded6:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800deda:	b157      	cbz	r7, 800def2 <osThreadNew+0x52>
 800dedc:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800dee0:	d902      	bls.n	800dee8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dee2:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dee4:	b104      	cbz	r4, 800dee8 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dee6:	b9ee      	cbnz	r6, 800df24 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dee8:	9805      	ldr	r0, [sp, #20]
}
 800deea:	b007      	add	sp, #28
 800deec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800deee:	2280      	movs	r2, #128	; 0x80
 800def0:	e7f0      	b.n	800ded4 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800def2:	f1be 0f00 	cmp.w	lr, #0
 800def6:	d1f7      	bne.n	800dee8 <osThreadNew+0x48>
      if (mem == 0) {
 800def8:	6924      	ldr	r4, [r4, #16]
 800defa:	2c00      	cmp	r4, #0
 800defc:	d1f4      	bne.n	800dee8 <osThreadNew+0x48>
 800defe:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df00:	a905      	add	r1, sp, #20
 800df02:	b292      	uxth	r2, r2
 800df04:	e9cd c100 	strd	ip, r1, [sp]
 800df08:	4621      	mov	r1, r4
 800df0a:	f001 fae0 	bl	800f4ce <xTaskCreate>
 800df0e:	2801      	cmp	r0, #1
            hTask = NULL;
 800df10:	bf1c      	itt	ne
 800df12:	2300      	movne	r3, #0
 800df14:	9305      	strne	r3, [sp, #20]
 800df16:	e7e7      	b.n	800dee8 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800df18:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800df1c:	2280      	movs	r2, #128	; 0x80
 800df1e:	e7ef      	b.n	800df00 <osThreadNew+0x60>
        return (NULL);
 800df20:	4610      	mov	r0, r2
 800df22:	e7e2      	b.n	800deea <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df24:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800df28:	9500      	str	r5, [sp, #0]
 800df2a:	f001 fa98 	bl	800f45e <xTaskCreateStatic>
 800df2e:	9005      	str	r0, [sp, #20]
 800df30:	e7da      	b.n	800dee8 <osThreadNew+0x48>

0800df32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800df32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df34:	4604      	mov	r4, r0
 800df36:	460e      	mov	r6, r1
 800df38:	4615      	mov	r5, r2
 800df3a:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df3e:	b11a      	cbz	r2, 800df48 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800df40:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800df42:	4620      	mov	r0, r4
 800df44:	b003      	add	sp, #12
 800df46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800df48:	2800      	cmp	r0, #0
 800df4a:	d0f9      	beq.n	800df40 <osSemaphoreNew+0xe>
 800df4c:	4288      	cmp	r0, r1
 800df4e:	d3f7      	bcc.n	800df40 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800df50:	b1e5      	cbz	r5, 800df8c <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800df52:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800df56:	b1bb      	cbz	r3, 800df88 <osSemaphoreNew+0x56>
 800df58:	2f4f      	cmp	r7, #79	; 0x4f
 800df5a:	d9f1      	bls.n	800df40 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800df5c:	2801      	cmp	r0, #1
 800df5e:	d12a      	bne.n	800dfb6 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800df60:	2103      	movs	r1, #3
 800df62:	9100      	str	r1, [sp, #0]
 800df64:	4611      	mov	r1, r2
 800df66:	f000 fce5 	bl	800e934 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800df6a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d0e7      	beq.n	800df40 <osSemaphoreNew+0xe>
 800df70:	b1de      	cbz	r6, 800dfaa <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800df72:	2300      	movs	r3, #0
 800df74:	461a      	mov	r2, r3
 800df76:	4619      	mov	r1, r3
 800df78:	f000 fd91 	bl	800ea9e <xQueueGenericSend>
 800df7c:	2801      	cmp	r0, #1
 800df7e:	d014      	beq.n	800dfaa <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800df80:	4620      	mov	r0, r4
 800df82:	f001 f8cd 	bl	800f120 <vQueueDelete>
 800df86:	e7db      	b.n	800df40 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800df88:	2f00      	cmp	r7, #0
 800df8a:	d1d9      	bne.n	800df40 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800df8c:	2c01      	cmp	r4, #1
 800df8e:	d105      	bne.n	800df9c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800df90:	2203      	movs	r2, #3
 800df92:	2100      	movs	r1, #0
 800df94:	4620      	mov	r0, r4
 800df96:	f000 fd1b 	bl	800e9d0 <xQueueGenericCreate>
 800df9a:	e7e6      	b.n	800df6a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800df9c:	4620      	mov	r0, r4
 800df9e:	4631      	mov	r1, r6
 800dfa0:	f000 fd5f 	bl	800ea62 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d0ca      	beq.n	800df40 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800dfaa:	b955      	cbnz	r5, 800dfc2 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800dfac:	4629      	mov	r1, r5
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f001 f890 	bl	800f0d4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800dfb4:	e7c5      	b.n	800df42 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	f000 fd31 	bl	800ea1e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d0be      	beq.n	800df40 <osSemaphoreNew+0xe>
          name = attr->name;
 800dfc2:	682d      	ldr	r5, [r5, #0]
 800dfc4:	e7f2      	b.n	800dfac <osSemaphoreNew+0x7a>

0800dfc6 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800dfc6:	b513      	push	{r0, r1, r4, lr}
 800dfc8:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800dfca:	b308      	cbz	r0, 800e010 <osSemaphoreAcquire+0x4a>
 800dfcc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800dfd0:	b1b3      	cbz	r3, 800e000 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800dfd2:	b9e9      	cbnz	r1, 800e010 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dfd4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800dfd6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dfd8:	f001 f82c 	bl	800f034 <xQueueReceiveFromISR>
 800dfdc:	2801      	cmp	r0, #1
 800dfde:	d114      	bne.n	800e00a <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800dfe0:	9b01      	ldr	r3, [sp, #4]
 800dfe2:	b913      	cbnz	r3, 800dfea <osSemaphoreAcquire+0x24>
  stat = osOK;
 800dfe4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800dfe6:	b002      	add	sp, #8
 800dfe8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800dfea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800dfee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	e7f1      	b.n	800dfe4 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e000:	f000 ff55 	bl	800eeae <xQueueSemaphoreTake>
 800e004:	2801      	cmp	r0, #1
 800e006:	d0ed      	beq.n	800dfe4 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800e008:	b92c      	cbnz	r4, 800e016 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800e00a:	f06f 0002 	mvn.w	r0, #2
 800e00e:	e7ea      	b.n	800dfe6 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e010:	f06f 0003 	mvn.w	r0, #3
 800e014:	e7e7      	b.n	800dfe6 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800e016:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800e01a:	e7e4      	b.n	800dfe6 <osSemaphoreAcquire+0x20>

0800e01c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e01c:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800e01e:	b310      	cbz	r0, 800e066 <osSemaphoreRelease+0x4a>
 800e020:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800e024:	b1b3      	cbz	r3, 800e054 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800e026:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e028:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800e02a:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e02c:	f000 fe4c 	bl	800ecc8 <xQueueGiveFromISR>
 800e030:	2801      	cmp	r0, #1
 800e032:	d115      	bne.n	800e060 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800e034:	9b01      	ldr	r3, [sp, #4]
 800e036:	b913      	cbnz	r3, 800e03e <osSemaphoreRelease+0x22>
  stat = osOK;
 800e038:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800e03a:	b002      	add	sp, #8
 800e03c:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800e03e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e046:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e04a:	f3bf 8f4f 	dsb	sy
 800e04e:	f3bf 8f6f 	isb	sy
 800e052:	e7f1      	b.n	800e038 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e054:	461a      	mov	r2, r3
 800e056:	4619      	mov	r1, r3
 800e058:	f000 fd21 	bl	800ea9e <xQueueGenericSend>
 800e05c:	2801      	cmp	r0, #1
 800e05e:	d0eb      	beq.n	800e038 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800e060:	f06f 0002 	mvn.w	r0, #2
 800e064:	e7e9      	b.n	800e03a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e066:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800e06a:	e7e6      	b.n	800e03a <osSemaphoreRelease+0x1e>

0800e06c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e06c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e06e:	4605      	mov	r5, r0
 800e070:	460e      	mov	r6, r1
 800e072:	4614      	mov	r4, r2
 800e074:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e078:	b11f      	cbz	r7, 800e082 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800e07a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800e07c:	4628      	mov	r0, r5
 800e07e:	b003      	add	sp, #12
 800e080:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e082:	2800      	cmp	r0, #0
 800e084:	d0f9      	beq.n	800e07a <osMessageQueueNew+0xe>
 800e086:	2900      	cmp	r1, #0
 800e088:	d0f7      	beq.n	800e07a <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800e08a:	b1da      	cbz	r2, 800e0c4 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e08c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800e090:	b183      	cbz	r3, 800e0b4 <osMessageQueueNew+0x48>
 800e092:	2a4f      	cmp	r2, #79	; 0x4f
 800e094:	d9f1      	bls.n	800e07a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e096:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e098:	2a00      	cmp	r2, #0
 800e09a:	d0ee      	beq.n	800e07a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e09c:	434d      	muls	r5, r1
 800e09e:	6966      	ldr	r6, [r4, #20]
 800e0a0:	42ae      	cmp	r6, r5
 800e0a2:	d3ea      	bcc.n	800e07a <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800e0a4:	9700      	str	r7, [sp, #0]
 800e0a6:	f000 fc45 	bl	800e934 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0e4      	beq.n	800e07a <osMessageQueueNew+0xe>
        name = attr->name;
 800e0b0:	6824      	ldr	r4, [r4, #0]
 800e0b2:	e011      	b.n	800e0d8 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800e0b4:	2a00      	cmp	r2, #0
 800e0b6:	d1e0      	bne.n	800e07a <osMessageQueueNew+0xe>
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d1dd      	bne.n	800e07a <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800e0be:	6963      	ldr	r3, [r4, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d1da      	bne.n	800e07a <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	4631      	mov	r1, r6
 800e0ca:	f000 fc81 	bl	800e9d0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800e0ce:	4605      	mov	r5, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d0d2      	beq.n	800e07a <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	d1eb      	bne.n	800e0b0 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4628      	mov	r0, r5
 800e0dc:	f000 fffa 	bl	800f0d4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800e0e0:	e7cc      	b.n	800e07c <osMessageQueueNew+0x10>

0800e0e2 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800e0e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0e4:	461c      	mov	r4, r3
 800e0e6:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e0ea:	b1c6      	cbz	r6, 800e11e <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e0ec:	b318      	cbz	r0, 800e136 <osMessageQueuePut+0x54>
 800e0ee:	b311      	cbz	r1, 800e136 <osMessageQueuePut+0x54>
 800e0f0:	bb0b      	cbnz	r3, 800e136 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e0f2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e0f4:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800e0f6:	f000 fd85 	bl	800ec04 <xQueueGenericSendFromISR>
 800e0fa:	2801      	cmp	r0, #1
 800e0fc:	d118      	bne.n	800e130 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e0fe:	9b01      	ldr	r3, [sp, #4]
 800e100:	b913      	cbnz	r3, 800e108 <osMessageQueuePut+0x26>
  stat = osOK;
 800e102:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e104:	b002      	add	sp, #8
 800e106:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800e108:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e110:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	f3bf 8f6f 	isb	sy
 800e11c:	e7f1      	b.n	800e102 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e11e:	b150      	cbz	r0, 800e136 <osMessageQueuePut+0x54>
 800e120:	b149      	cbz	r1, 800e136 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e122:	4633      	mov	r3, r6
 800e124:	4622      	mov	r2, r4
 800e126:	f000 fcba 	bl	800ea9e <xQueueGenericSend>
 800e12a:	2801      	cmp	r0, #1
 800e12c:	d0e9      	beq.n	800e102 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800e12e:	b92c      	cbnz	r4, 800e13c <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800e130:	f06f 0002 	mvn.w	r0, #2
 800e134:	e7e6      	b.n	800e104 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800e136:	f06f 0003 	mvn.w	r0, #3
 800e13a:	e7e3      	b.n	800e104 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800e13c:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800e140:	e7e0      	b.n	800e104 <osMessageQueuePut+0x22>

0800e142 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800e142:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e144:	461c      	mov	r4, r3
 800e146:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800e14a:	b1c3      	cbz	r3, 800e17e <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800e14c:	b310      	cbz	r0, 800e194 <osMessageQueueGet+0x52>
 800e14e:	b309      	cbz	r1, 800e194 <osMessageQueueGet+0x52>
 800e150:	bb04      	cbnz	r4, 800e194 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e152:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800e154:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800e156:	f000 ff6d 	bl	800f034 <xQueueReceiveFromISR>
 800e15a:	2801      	cmp	r0, #1
 800e15c:	d117      	bne.n	800e18e <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800e15e:	9b01      	ldr	r3, [sp, #4]
 800e160:	b913      	cbnz	r3, 800e168 <osMessageQueueGet+0x26>
  stat = osOK;
 800e162:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800e164:	b003      	add	sp, #12
 800e166:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800e168:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e170:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	e7f1      	b.n	800e162 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800e17e:	b148      	cbz	r0, 800e194 <osMessageQueueGet+0x52>
 800e180:	b141      	cbz	r1, 800e194 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800e182:	4622      	mov	r2, r4
 800e184:	f000 fdf4 	bl	800ed70 <xQueueReceive>
 800e188:	2801      	cmp	r0, #1
 800e18a:	d0ea      	beq.n	800e162 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800e18c:	b92c      	cbnz	r4, 800e19a <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800e18e:	f06f 0002 	mvn.w	r0, #2
 800e192:	e7e7      	b.n	800e164 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800e194:	f06f 0003 	mvn.w	r0, #3
 800e198:	e7e4      	b.n	800e164 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800e19a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800e19e:	e7e1      	b.n	800e164 <osMessageQueueGet+0x22>

0800e1a0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e1a0:	4b03      	ldr	r3, [pc, #12]	; (800e1b0 <vApplicationGetIdleTaskMemory+0x10>)
 800e1a2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e1a4:	4b03      	ldr	r3, [pc, #12]	; (800e1b4 <vApplicationGetIdleTaskMemory+0x14>)
 800e1a6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e1a8:	2380      	movs	r3, #128	; 0x80
 800e1aa:	6013      	str	r3, [r2, #0]
}
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	240066e0 	.word	0x240066e0
 800e1b4:	240064e0 	.word	0x240064e0

0800e1b8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e1b8:	4b03      	ldr	r3, [pc, #12]	; (800e1c8 <vApplicationGetTimerTaskMemory+0x10>)
 800e1ba:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <vApplicationGetTimerTaskMemory+0x14>)
 800e1be:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e1c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e1c4:	6013      	str	r3, [r2, #0]
}
 800e1c6:	4770      	bx	lr
 800e1c8:	24006b44 	.word	0x24006b44
 800e1cc:	24006744 	.word	0x24006744

0800e1d0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1d0:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <prvInsertBlockIntoFreeList+0x40>)
{
 800e1d2:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4283      	cmp	r3, r0
 800e1da:	d3fb      	bcc.n	800e1d4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e1dc:	6854      	ldr	r4, [r2, #4]
 800e1de:	1911      	adds	r1, r2, r4
 800e1e0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1e2:	bf01      	itttt	eq
 800e1e4:	6841      	ldreq	r1, [r0, #4]
 800e1e6:	4610      	moveq	r0, r2
 800e1e8:	1909      	addeq	r1, r1, r4
 800e1ea:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1ec:	6844      	ldr	r4, [r0, #4]
 800e1ee:	1901      	adds	r1, r0, r4
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	d107      	bne.n	800e204 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1f4:	4907      	ldr	r1, [pc, #28]	; (800e214 <prvInsertBlockIntoFreeList+0x44>)
 800e1f6:	6809      	ldr	r1, [r1, #0]
 800e1f8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1fa:	bf1f      	itttt	ne
 800e1fc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1fe:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e200:	1909      	addne	r1, r1, r4
 800e202:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e204:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e206:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e208:	bf18      	it	ne
 800e20a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e20c:	bd10      	pop	{r4, pc}
 800e20e:	bf00      	nop
 800e210:	2400ebbc 	.word	0x2400ebbc
 800e214:	24006ba4 	.word	0x24006ba4

0800e218 <pvPortMalloc>:
{
 800e218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e21c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800e21e:	f001 f983 	bl	800f528 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800e222:	4842      	ldr	r0, [pc, #264]	; (800e32c <pvPortMalloc+0x114>)
 800e224:	4d42      	ldr	r5, [pc, #264]	; (800e330 <pvPortMalloc+0x118>)
 800e226:	6803      	ldr	r3, [r0, #0]
 800e228:	bb0b      	cbnz	r3, 800e26e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800e22a:	4942      	ldr	r1, [pc, #264]	; (800e334 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e22c:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e22e:	4e42      	ldr	r6, [pc, #264]	; (800e338 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e230:	bf1b      	ittet	ne
 800e232:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e234:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e238:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e23c:	f023 0307 	bicne.w	r3, r3, #7
 800e240:	bf1c      	itt	ne
 800e242:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e244:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800e246:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e248:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e24a:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e24c:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800e24e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e250:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800e254:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e258:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800e25a:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e25c:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e260:	4a36      	ldr	r2, [pc, #216]	; (800e33c <pvPortMalloc+0x124>)
 800e262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e264:	4a36      	ldr	r2, [pc, #216]	; (800e340 <pvPortMalloc+0x128>)
 800e266:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e26c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e26e:	682f      	ldr	r7, [r5, #0]
 800e270:	4227      	tst	r7, r4
 800e272:	d155      	bne.n	800e320 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800e274:	2c00      	cmp	r4, #0
 800e276:	d046      	beq.n	800e306 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800e278:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e27c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e27e:	bf1c      	itt	ne
 800e280:	f023 0307 	bicne.w	r3, r3, #7
 800e284:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e286:	2b00      	cmp	r3, #0
 800e288:	d04a      	beq.n	800e320 <pvPortMalloc+0x108>
 800e28a:	4c2d      	ldr	r4, [pc, #180]	; (800e340 <pvPortMalloc+0x128>)
 800e28c:	6826      	ldr	r6, [r4, #0]
 800e28e:	429e      	cmp	r6, r3
 800e290:	d346      	bcc.n	800e320 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800e292:	4a29      	ldr	r2, [pc, #164]	; (800e338 <pvPortMalloc+0x120>)
 800e294:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e296:	6869      	ldr	r1, [r5, #4]
 800e298:	4299      	cmp	r1, r3
 800e29a:	d204      	bcs.n	800e2a6 <pvPortMalloc+0x8e>
 800e29c:	f8d5 c000 	ldr.w	ip, [r5]
 800e2a0:	f1bc 0f00 	cmp.w	ip, #0
 800e2a4:	d115      	bne.n	800e2d2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800e2a6:	6800      	ldr	r0, [r0, #0]
 800e2a8:	42a8      	cmp	r0, r5
 800e2aa:	d039      	beq.n	800e320 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2ac:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2ae:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2b0:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2b4:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e2b6:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e2b8:	d912      	bls.n	800e2e0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e2ba:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2bc:	0742      	lsls	r2, r0, #29
 800e2be:	d00b      	beq.n	800e2d8 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	e7fe      	b.n	800e2d0 <pvPortMalloc+0xb8>
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	4665      	mov	r5, ip
 800e2d6:	e7de      	b.n	800e296 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2d8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2da:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2dc:	f7ff ff78 	bl	800e1d0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2e0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2e2:	4916      	ldr	r1, [pc, #88]	; (800e33c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2e4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2e6:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800e2e8:	4a16      	ldr	r2, [pc, #88]	; (800e344 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800e2ea:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2ec:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800e2ee:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800e2f0:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2f2:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2f4:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2f6:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800e2fa:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2fe:	bf38      	it	cc
 800e300:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e302:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800e304:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800e306:	f001 f9b3 	bl	800f670 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e30a:	0763      	lsls	r3, r4, #29
 800e30c:	d00a      	beq.n	800e324 <pvPortMalloc+0x10c>
 800e30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e312:	f383 8811 	msr	BASEPRI, r3
 800e316:	f3bf 8f6f 	isb	sy
 800e31a:	f3bf 8f4f 	dsb	sy
 800e31e:	e7fe      	b.n	800e31e <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800e320:	2400      	movs	r4, #0
 800e322:	e7f0      	b.n	800e306 <pvPortMalloc+0xee>
}
 800e324:	4620      	mov	r0, r4
 800e326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32a:	bf00      	nop
 800e32c:	24006ba4 	.word	0x24006ba4
 800e330:	2400eba8 	.word	0x2400eba8
 800e334:	24006ba8 	.word	0x24006ba8
 800e338:	2400ebbc 	.word	0x2400ebbc
 800e33c:	2400ebb0 	.word	0x2400ebb0
 800e340:	2400ebac 	.word	0x2400ebac
 800e344:	2400ebb4 	.word	0x2400ebb4

0800e348 <vPortFree>:
{
 800e348:	b510      	push	{r4, lr}
	if( pv != NULL )
 800e34a:	4604      	mov	r4, r0
 800e34c:	b390      	cbz	r0, 800e3b4 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e34e:	4a1a      	ldr	r2, [pc, #104]	; (800e3b8 <vPortFree+0x70>)
 800e350:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e354:	6812      	ldr	r2, [r2, #0]
 800e356:	4213      	tst	r3, r2
 800e358:	d108      	bne.n	800e36c <vPortFree+0x24>
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	e7fe      	b.n	800e36a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e36c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800e370:	b141      	cbz	r1, 800e384 <vPortFree+0x3c>
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	e7fe      	b.n	800e382 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e384:	ea23 0302 	bic.w	r3, r3, r2
 800e388:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800e38c:	f001 f8cc 	bl	800f528 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e390:	4a0a      	ldr	r2, [pc, #40]	; (800e3bc <vPortFree+0x74>)
 800e392:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e396:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e39a:	6811      	ldr	r1, [r2, #0]
 800e39c:	440b      	add	r3, r1
 800e39e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3a0:	f7ff ff16 	bl	800e1d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3a4:	4a06      	ldr	r2, [pc, #24]	; (800e3c0 <vPortFree+0x78>)
 800e3a6:	6813      	ldr	r3, [r2, #0]
 800e3a8:	3301      	adds	r3, #1
}
 800e3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800e3ae:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800e3b0:	f001 b95e 	b.w	800f670 <xTaskResumeAll>
}
 800e3b4:	bd10      	pop	{r4, pc}
 800e3b6:	bf00      	nop
 800e3b8:	2400eba8 	.word	0x2400eba8
 800e3bc:	2400ebac 	.word	0x2400ebac
 800e3c0:	2400ebb8 	.word	0x2400ebb8

0800e3c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3c4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e3c8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3cc:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3ce:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e3d0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e3d8:	4770      	bx	lr

0800e3da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e3de:	4770      	bx	lr

0800e3e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e3e0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3e2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800e3e4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3e6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3e8:	689a      	ldr	r2, [r3, #8]
 800e3ea:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3ec:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e3ee:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e3f0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	6003      	str	r3, [r0, #0]
}
 800e3f6:	4770      	bx	lr

0800e3f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3f8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e3fa:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e3fc:	1c63      	adds	r3, r4, #1
 800e3fe:	d10a      	bne.n	800e416 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e400:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e402:	685a      	ldr	r2, [r3, #4]
 800e404:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e406:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e408:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e40a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800e40c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800e40e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800e410:	3301      	adds	r3, #1
 800e412:	6003      	str	r3, [r0, #0]
}
 800e414:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e416:	f100 0208 	add.w	r2, r0, #8
 800e41a:	4613      	mov	r3, r2
 800e41c:	6852      	ldr	r2, [r2, #4]
 800e41e:	6815      	ldr	r5, [r2, #0]
 800e420:	42a5      	cmp	r5, r4
 800e422:	d9fa      	bls.n	800e41a <vListInsert+0x22>
 800e424:	e7ed      	b.n	800e402 <vListInsert+0xa>

0800e426 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e426:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e428:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800e42c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e42e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e430:	6859      	ldr	r1, [r3, #4]
 800e432:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e434:	bf08      	it	eq
 800e436:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e438:	2200      	movs	r2, #0
 800e43a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	3a01      	subs	r2, #1
 800e440:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e442:	6818      	ldr	r0, [r3, #0]
}
 800e444:	4770      	bx	lr
	...

0800e448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e448:	4808      	ldr	r0, [pc, #32]	; (800e46c <prvPortStartFirstTask+0x24>)
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	6800      	ldr	r0, [r0, #0]
 800e44e:	f380 8808 	msr	MSP, r0
 800e452:	f04f 0000 	mov.w	r0, #0
 800e456:	f380 8814 	msr	CONTROL, r0
 800e45a:	b662      	cpsie	i
 800e45c:	b661      	cpsie	f
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	df00      	svc	0
 800e468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e46a:	0000      	.short	0x0000
 800e46c:	e000ed08 	.word	0xe000ed08

0800e470 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e470:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e480 <vPortEnableVFP+0x10>
 800e474:	6801      	ldr	r1, [r0, #0]
 800e476:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e47a:	6001      	str	r1, [r0, #0]
 800e47c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e47e:	0000      	.short	0x0000
 800e480:	e000ed88 	.word	0xe000ed88

0800e484 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800e484:	2300      	movs	r3, #0
{
 800e486:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800e488:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800e48a:	4b0d      	ldr	r3, [pc, #52]	; (800e4c0 <prvTaskExitError+0x3c>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	3301      	adds	r3, #1
 800e490:	d008      	beq.n	800e4a4 <prvTaskExitError+0x20>
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	e7fe      	b.n	800e4a2 <prvTaskExitError+0x1e>
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800e4b4:	9b01      	ldr	r3, [sp, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0fc      	beq.n	800e4b4 <prvTaskExitError+0x30>
}
 800e4ba:	b002      	add	sp, #8
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	24000058 	.word	0x24000058

0800e4c4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4c8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e4cc:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800e4d0:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e4d2:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4d4:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e4d6:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e4d8:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e4da:	f06f 0302 	mvn.w	r3, #2
 800e4de:	6203      	str	r3, [r0, #32]
}
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	0800e485 	.word	0x0800e485
	...

0800e4f0 <SVC_Handler>:
	__asm volatile (
 800e4f0:	4b07      	ldr	r3, [pc, #28]	; (800e510 <pxCurrentTCBConst2>)
 800e4f2:	6819      	ldr	r1, [r3, #0]
 800e4f4:	6808      	ldr	r0, [r1, #0]
 800e4f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fa:	f380 8809 	msr	PSP, r0
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f04f 0000 	mov.w	r0, #0
 800e506:	f380 8811 	msr	BASEPRI, r0
 800e50a:	4770      	bx	lr
 800e50c:	f3af 8000 	nop.w

0800e510 <pxCurrentTCBConst2>:
 800e510:	2400ec0c 	.word	0x2400ec0c

0800e514 <vPortEnterCritical>:
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800e524:	4a0a      	ldr	r2, [pc, #40]	; (800e550 <vPortEnterCritical+0x3c>)
 800e526:	6813      	ldr	r3, [r2, #0]
 800e528:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800e52a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800e52c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800e52e:	d10e      	bne.n	800e54e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e534:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	b143      	cbz	r3, 800e54e <vPortEnterCritical+0x3a>
 800e53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	e7fe      	b.n	800e54c <vPortEnterCritical+0x38>
}
 800e54e:	4770      	bx	lr
 800e550:	24000058 	.word	0x24000058

0800e554 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e554:	4a08      	ldr	r2, [pc, #32]	; (800e578 <vPortExitCritical+0x24>)
 800e556:	6813      	ldr	r3, [r2, #0]
 800e558:	b943      	cbnz	r3, 800e56c <vPortExitCritical+0x18>
 800e55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55e:	f383 8811 	msr	BASEPRI, r3
 800e562:	f3bf 8f6f 	isb	sy
 800e566:	f3bf 8f4f 	dsb	sy
 800e56a:	e7fe      	b.n	800e56a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e56c:	3b01      	subs	r3, #1
 800e56e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e570:	b90b      	cbnz	r3, 800e576 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e572:	f383 8811 	msr	BASEPRI, r3
}
 800e576:	4770      	bx	lr
 800e578:	24000058 	.word	0x24000058
 800e57c:	00000000 	.word	0x00000000

0800e580 <PendSV_Handler>:
	__asm volatile
 800e580:	f3ef 8009 	mrs	r0, PSP
 800e584:	f3bf 8f6f 	isb	sy
 800e588:	4b15      	ldr	r3, [pc, #84]	; (800e5e0 <pxCurrentTCBConst>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	f01e 0f10 	tst.w	lr, #16
 800e590:	bf08      	it	eq
 800e592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59a:	6010      	str	r0, [r2, #0]
 800e59c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e5a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e5a4:	f380 8811 	msr	BASEPRI, r0
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f001 f93c 	bl	800f82c <vTaskSwitchContext>
 800e5b4:	f04f 0000 	mov.w	r0, #0
 800e5b8:	f380 8811 	msr	BASEPRI, r0
 800e5bc:	bc09      	pop	{r0, r3}
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	6808      	ldr	r0, [r1, #0]
 800e5c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c6:	f01e 0f10 	tst.w	lr, #16
 800e5ca:	bf08      	it	eq
 800e5cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e5d0:	f380 8809 	msr	PSP, r0
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w

0800e5e0 <pxCurrentTCBConst>:
 800e5e0:	2400ec0c 	.word	0x2400ec0c

0800e5e4 <xPortSysTickHandler>:
{
 800e5e4:	b508      	push	{r3, lr}
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e5f6:	f000 ffa5 	bl	800f544 <xTaskIncrementTick>
 800e5fa:	b128      	cbz	r0, 800e608 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e5fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e604:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800e608:	2300      	movs	r3, #0
 800e60a:	f383 8811 	msr	BASEPRI, r3
}
 800e60e:	bd08      	pop	{r3, pc}

0800e610 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e610:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800e614:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e616:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e61a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e61c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e61e:	4b04      	ldr	r3, [pc, #16]	; (800e630 <vPortSetupTimerInterrupt+0x20>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	fbb3 f3f1 	udiv	r3, r3, r1
 800e626:	3b01      	subs	r3, #1
 800e628:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e62a:	2307      	movs	r3, #7
 800e62c:	6113      	str	r3, [r2, #16]
}
 800e62e:	4770      	bx	lr
 800e630:	24000048 	.word	0x24000048

0800e634 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e634:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800e638:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e63a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800e63e:	4a3a      	ldr	r2, [pc, #232]	; (800e728 <xPortStartScheduler+0xf4>)
 800e640:	4291      	cmp	r1, r2
 800e642:	d108      	bne.n	800e656 <xPortStartScheduler+0x22>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e648:	f383 8811 	msr	BASEPRI, r3
 800e64c:	f3bf 8f6f 	isb	sy
 800e650:	f3bf 8f4f 	dsb	sy
 800e654:	e7fe      	b.n	800e654 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e656:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800e65a:	4b34      	ldr	r3, [pc, #208]	; (800e72c <xPortStartScheduler+0xf8>)
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d108      	bne.n	800e672 <xPortStartScheduler+0x3e>
 800e660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e664:	f383 8811 	msr	BASEPRI, r3
 800e668:	f3bf 8f6f 	isb	sy
 800e66c:	f3bf 8f4f 	dsb	sy
 800e670:	e7fe      	b.n	800e670 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e672:	4b2f      	ldr	r3, [pc, #188]	; (800e730 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e674:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e676:	781a      	ldrb	r2, [r3, #0]
 800e678:	b2d2      	uxtb	r2, r2
 800e67a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e67c:	22ff      	movs	r2, #255	; 0xff
 800e67e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e680:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e682:	4a2c      	ldr	r2, [pc, #176]	; (800e734 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e684:	b2db      	uxtb	r3, r3
 800e686:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e68a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e68e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e692:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e694:	2307      	movs	r3, #7
 800e696:	4a28      	ldr	r2, [pc, #160]	; (800e738 <xPortStartScheduler+0x104>)
 800e698:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e69a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e69e:	1e5c      	subs	r4, r3, #1
 800e6a0:	0600      	lsls	r0, r0, #24
 800e6a2:	d40c      	bmi.n	800e6be <xPortStartScheduler+0x8a>
 800e6a4:	b111      	cbz	r1, 800e6ac <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	6013      	str	r3, [r2, #0]
 800e6aa:	d011      	beq.n	800e6d0 <xPortStartScheduler+0x9c>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	e7fe      	b.n	800e6bc <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	005b      	lsls	r3, r3, #1
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f88d 3003 	strb.w	r3, [sp, #3]
 800e6cc:	4623      	mov	r3, r4
 800e6ce:	e7e4      	b.n	800e69a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6d0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6d4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800e6d8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6da:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e6dc:	9b01      	ldr	r3, [sp, #4]
 800e6de:	4a14      	ldr	r2, [pc, #80]	; (800e730 <xPortStartScheduler+0xfc>)
 800e6e0:	b2db      	uxtb	r3, r3
 800e6e2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e6e4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e6e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e6ec:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e6f0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800e6f4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e6f8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800e6fc:	f7ff ff88 	bl	800e610 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e700:	4b0e      	ldr	r3, [pc, #56]	; (800e73c <xPortStartScheduler+0x108>)
 800e702:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e704:	f7ff feb4 	bl	800e470 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e708:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800e70c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e710:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800e714:	f7ff fe98 	bl	800e448 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e718:	f001 f888 	bl	800f82c <vTaskSwitchContext>
}
 800e71c:	4628      	mov	r0, r5
	prvTaskExitError();
 800e71e:	f7ff feb1 	bl	800e484 <prvTaskExitError>
}
 800e722:	b003      	add	sp, #12
 800e724:	bd30      	pop	{r4, r5, pc}
 800e726:	bf00      	nop
 800e728:	410fc271 	.word	0x410fc271
 800e72c:	410fc270 	.word	0x410fc270
 800e730:	e000e400 	.word	0xe000e400
 800e734:	2400ebc4 	.word	0x2400ebc4
 800e738:	2400ebc8 	.word	0x2400ebc8
 800e73c:	24000058 	.word	0x24000058

0800e740 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e740:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e744:	2b0f      	cmp	r3, #15
 800e746:	d90e      	bls.n	800e766 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e748:	4a11      	ldr	r2, [pc, #68]	; (800e790 <vPortValidateInterruptPriority+0x50>)
 800e74a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e74c:	4a11      	ldr	r2, [pc, #68]	; (800e794 <vPortValidateInterruptPriority+0x54>)
 800e74e:	7812      	ldrb	r2, [r2, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d908      	bls.n	800e766 <vPortValidateInterruptPriority+0x26>
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	e7fe      	b.n	800e764 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e766:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e76a:	4a0b      	ldr	r2, [pc, #44]	; (800e798 <vPortValidateInterruptPriority+0x58>)
 800e76c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800e770:	6812      	ldr	r2, [r2, #0]
 800e772:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e776:	4293      	cmp	r3, r2
 800e778:	d908      	bls.n	800e78c <vPortValidateInterruptPriority+0x4c>
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	e7fe      	b.n	800e78a <vPortValidateInterruptPriority+0x4a>
	}
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	e000e3f0 	.word	0xe000e3f0
 800e794:	2400ebc4 	.word	0x2400ebc4
 800e798:	2400ebc8 	.word	0x2400ebc8

0800e79c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e79c:	b510      	push	{r4, lr}
 800e79e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e7a0:	f7ff feb8 	bl	800e514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e7a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e7a6:	f7ff fed5 	bl	800e554 <vPortExitCritical>

	return xReturn;
}
 800e7aa:	fab4 f084 	clz	r0, r4
 800e7ae:	0940      	lsrs	r0, r0, #5
 800e7b0:	bd10      	pop	{r4, pc}

0800e7b2 <prvCopyDataToQueue>:
{
 800e7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7b6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800e7b8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7ba:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7bc:	b952      	cbnz	r2, 800e7d4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7be:	6807      	ldr	r7, [r0, #0]
 800e7c0:	bb47      	cbnz	r7, 800e814 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7c2:	6880      	ldr	r0, [r0, #8]
 800e7c4:	f001 f990 	bl	800fae8 <xTaskPriorityDisinherit>
 800e7c8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7ca:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7cc:	3601      	adds	r6, #1
}
 800e7ce:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7d0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800e7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e7d4:	b965      	cbnz	r5, 800e7f0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7d6:	6840      	ldr	r0, [r0, #4]
 800e7d8:	f013 fdd0 	bl	802237c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7dc:	6863      	ldr	r3, [r4, #4]
 800e7de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e7e0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7e2:	68a2      	ldr	r2, [r4, #8]
 800e7e4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7e6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7e8:	d3f0      	bcc.n	800e7cc <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	6063      	str	r3, [r4, #4]
 800e7ee:	e7ed      	b.n	800e7cc <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e7f0:	68c0      	ldr	r0, [r0, #12]
 800e7f2:	f013 fdc3 	bl	802237c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e7f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e7f8:	68e3      	ldr	r3, [r4, #12]
 800e7fa:	4251      	negs	r1, r2
 800e7fc:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7fe:	6822      	ldr	r2, [r4, #0]
 800e800:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e802:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e804:	bf3e      	ittt	cc
 800e806:	68a3      	ldrcc	r3, [r4, #8]
 800e808:	185b      	addcc	r3, r3, r1
 800e80a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e80c:	2d02      	cmp	r5, #2
 800e80e:	d101      	bne.n	800e814 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e810:	b116      	cbz	r6, 800e818 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800e812:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800e814:	2500      	movs	r5, #0
 800e816:	e7d9      	b.n	800e7cc <prvCopyDataToQueue+0x1a>
 800e818:	4635      	mov	r5, r6
 800e81a:	e7d7      	b.n	800e7cc <prvCopyDataToQueue+0x1a>

0800e81c <prvCopyDataFromQueue>:
{
 800e81c:	4603      	mov	r3, r0
 800e81e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800e822:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e824:	b162      	cbz	r2, 800e840 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e826:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e828:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e82a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e82c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e82e:	60dc      	str	r4, [r3, #12]
}
 800e830:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e834:	bf24      	itt	cs
 800e836:	6819      	ldrcs	r1, [r3, #0]
 800e838:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e83a:	68d9      	ldr	r1, [r3, #12]
 800e83c:	f013 bd9e 	b.w	802237c <memcpy>
}
 800e840:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <prvUnlockQueue>:
{
 800e846:	b570      	push	{r4, r5, r6, lr}
 800e848:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e84a:	f7ff fe63 	bl	800e514 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e84e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e852:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e856:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e858:	2d00      	cmp	r5, #0
 800e85a:	dc14      	bgt.n	800e886 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e85c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e85e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800e866:	f7ff fe75 	bl	800e554 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e86a:	f7ff fe53 	bl	800e514 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e86e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800e872:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e874:	2d00      	cmp	r5, #0
 800e876:	dc12      	bgt.n	800e89e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e878:	23ff      	movs	r3, #255	; 0xff
 800e87a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800e87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e882:	f7ff be67 	b.w	800e554 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d0e7      	beq.n	800e85c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e88c:	4630      	mov	r0, r6
 800e88e:	f001 f849 	bl	800f924 <xTaskRemoveFromEventList>
 800e892:	b108      	cbz	r0, 800e898 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e894:	f001 f8d2 	bl	800fa3c <vTaskMissedYield>
			--cTxLock;
 800e898:	3d01      	subs	r5, #1
 800e89a:	b26d      	sxtb	r5, r5
 800e89c:	e7dc      	b.n	800e858 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e89e:	6923      	ldr	r3, [r4, #16]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d0e9      	beq.n	800e878 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8a4:	4630      	mov	r0, r6
 800e8a6:	f001 f83d 	bl	800f924 <xTaskRemoveFromEventList>
 800e8aa:	b108      	cbz	r0, 800e8b0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e8ac:	f001 f8c6 	bl	800fa3c <vTaskMissedYield>
				--cRxLock;
 800e8b0:	3d01      	subs	r5, #1
 800e8b2:	b26d      	sxtb	r5, r5
 800e8b4:	e7de      	b.n	800e874 <prvUnlockQueue+0x2e>

0800e8b6 <xQueueGenericReset>:
{
 800e8b6:	b538      	push	{r3, r4, r5, lr}
 800e8b8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	b940      	cbnz	r0, 800e8d0 <xQueueGenericReset+0x1a>
 800e8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c2:	f383 8811 	msr	BASEPRI, r3
 800e8c6:	f3bf 8f6f 	isb	sy
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	e7fe      	b.n	800e8ce <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800e8d0:	f7ff fe20 	bl	800e514 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8d4:	6822      	ldr	r2, [r4, #0]
 800e8d6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8da:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8dc:	434b      	muls	r3, r1
 800e8de:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8e0:	1a5b      	subs	r3, r3, r1
 800e8e2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8e4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8e6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e8e8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e8ea:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8ec:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e8ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e8f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800e8f6:	b9a5      	cbnz	r5, 800e922 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8f8:	6923      	ldr	r3, [r4, #16]
 800e8fa:	b173      	cbz	r3, 800e91a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8fc:	f104 0010 	add.w	r0, r4, #16
 800e900:	f001 f810 	bl	800f924 <xTaskRemoveFromEventList>
 800e904:	b148      	cbz	r0, 800e91a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e906:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800e90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e90e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e91a:	f7ff fe1b 	bl	800e554 <vPortExitCritical>
}
 800e91e:	2001      	movs	r0, #1
 800e920:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e922:	f104 0010 	add.w	r0, r4, #16
 800e926:	f7ff fd4d 	bl	800e3c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e92a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800e92e:	f7ff fd49 	bl	800e3c4 <vListInitialise>
 800e932:	e7f2      	b.n	800e91a <xQueueGenericReset+0x64>

0800e934 <xQueueGenericCreateStatic>:
	{
 800e934:	b513      	push	{r0, r1, r4, lr}
 800e936:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e938:	b940      	cbnz	r0, 800e94c <xQueueGenericCreateStatic+0x18>
 800e93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	e7fe      	b.n	800e94a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800e94c:	b943      	cbnz	r3, 800e960 <xQueueGenericCreateStatic+0x2c>
 800e94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e952:	f383 8811 	msr	BASEPRI, r3
 800e956:	f3bf 8f6f 	isb	sy
 800e95a:	f3bf 8f4f 	dsb	sy
 800e95e:	e7fe      	b.n	800e95e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e960:	b14a      	cbz	r2, 800e976 <xQueueGenericCreateStatic+0x42>
 800e962:	b991      	cbnz	r1, 800e98a <xQueueGenericCreateStatic+0x56>
 800e964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	e7fe      	b.n	800e974 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e976:	b141      	cbz	r1, 800e98a <xQueueGenericCreateStatic+0x56>
 800e978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97c:	f383 8811 	msr	BASEPRI, r3
 800e980:	f3bf 8f6f 	isb	sy
 800e984:	f3bf 8f4f 	dsb	sy
 800e988:	e7fe      	b.n	800e988 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e98a:	2350      	movs	r3, #80	; 0x50
 800e98c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e98e:	9b01      	ldr	r3, [sp, #4]
 800e990:	2b50      	cmp	r3, #80	; 0x50
 800e992:	d008      	beq.n	800e9a6 <xQueueGenericCreateStatic+0x72>
 800e994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e998:	f383 8811 	msr	BASEPRI, r3
 800e99c:	f3bf 8f6f 	isb	sy
 800e9a0:	f3bf 8f4f 	dsb	sy
 800e9a4:	e7fe      	b.n	800e9a4 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9a6:	2900      	cmp	r1, #0
 800e9a8:	bf08      	it	eq
 800e9aa:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e9ac:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	6022      	str	r2, [r4, #0]
 800e9b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800e9b6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f7ff ff7a 	bl	800e8b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e9c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800e9c6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800e9c8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800e9cc:	b002      	add	sp, #8
 800e9ce:	bd10      	pop	{r4, pc}

0800e9d0 <xQueueGenericCreate>:
	{
 800e9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d2:	460d      	mov	r5, r1
 800e9d4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	b940      	cbnz	r0, 800e9ec <xQueueGenericCreate+0x1c>
 800e9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	e7fe      	b.n	800e9ea <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9ec:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9ee:	3050      	adds	r0, #80	; 0x50
 800e9f0:	f7ff fc12 	bl	800e218 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	b170      	cbz	r0, 800ea16 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e9fe:	b165      	cbz	r5, 800ea1a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ea00:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea04:	2101      	movs	r1, #1
 800ea06:	4620      	mov	r0, r4
 800ea08:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800ea0a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea0e:	f7ff ff52 	bl	800e8b6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ea12:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800ea16:	4620      	mov	r0, r4
 800ea18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	e7f2      	b.n	800ea04 <xQueueGenericCreate+0x34>

0800ea1e <xQueueCreateCountingSemaphoreStatic>:
	{
 800ea1e:	b513      	push	{r0, r1, r4, lr}
 800ea20:	4613      	mov	r3, r2
 800ea22:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ea24:	b940      	cbnz	r0, 800ea38 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800ea26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	e7fe      	b.n	800ea36 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea38:	4288      	cmp	r0, r1
 800ea3a:	d208      	bcs.n	800ea4e <xQueueCreateCountingSemaphoreStatic+0x30>
 800ea3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea40:	f383 8811 	msr	BASEPRI, r3
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	f3bf 8f4f 	dsb	sy
 800ea4c:	e7fe      	b.n	800ea4c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea4e:	2202      	movs	r2, #2
 800ea50:	9200      	str	r2, [sp, #0]
 800ea52:	2200      	movs	r2, #0
 800ea54:	4611      	mov	r1, r2
 800ea56:	f7ff ff6d 	bl	800e934 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ea5a:	b100      	cbz	r0, 800ea5e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea5c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ea5e:	b002      	add	sp, #8
 800ea60:	bd10      	pop	{r4, pc}

0800ea62 <xQueueCreateCountingSemaphore>:
	{
 800ea62:	b510      	push	{r4, lr}
 800ea64:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ea66:	b940      	cbnz	r0, 800ea7a <xQueueCreateCountingSemaphore+0x18>
 800ea68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	e7fe      	b.n	800ea78 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ea7a:	4288      	cmp	r0, r1
 800ea7c:	d208      	bcs.n	800ea90 <xQueueCreateCountingSemaphore+0x2e>
 800ea7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea82:	f383 8811 	msr	BASEPRI, r3
 800ea86:	f3bf 8f6f 	isb	sy
 800ea8a:	f3bf 8f4f 	dsb	sy
 800ea8e:	e7fe      	b.n	800ea8e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ea90:	2202      	movs	r2, #2
 800ea92:	2100      	movs	r1, #0
 800ea94:	f7ff ff9c 	bl	800e9d0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ea98:	b100      	cbz	r0, 800ea9c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ea9a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ea9c:	bd10      	pop	{r4, pc}

0800ea9e <xQueueGenericSend>:
{
 800ea9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	4688      	mov	r8, r1
 800eaa6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800eaa8:	4604      	mov	r4, r0
{
 800eaaa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800eaac:	b940      	cbnz	r0, 800eac0 <xQueueGenericSend+0x22>
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	e7fe      	b.n	800eabe <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eac0:	b951      	cbnz	r1, 800ead8 <xQueueGenericSend+0x3a>
 800eac2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eac4:	b143      	cbz	r3, 800ead8 <xQueueGenericSend+0x3a>
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	e7fe      	b.n	800ead6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ead8:	2f02      	cmp	r7, #2
 800eada:	d10b      	bne.n	800eaf4 <xQueueGenericSend+0x56>
 800eadc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d008      	beq.n	800eaf4 <xQueueGenericSend+0x56>
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	e7fe      	b.n	800eaf2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eaf4:	f000 ffa8 	bl	800fa48 <xTaskGetSchedulerState>
 800eaf8:	4606      	mov	r6, r0
 800eafa:	b950      	cbnz	r0, 800eb12 <xQueueGenericSend+0x74>
 800eafc:	9b01      	ldr	r3, [sp, #4]
 800eafe:	b14b      	cbz	r3, 800eb14 <xQueueGenericSend+0x76>
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	e7fe      	b.n	800eb10 <xQueueGenericSend+0x72>
 800eb12:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800eb14:	f04f 0900 	mov.w	r9, #0
 800eb18:	e037      	b.n	800eb8a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb1a:	9d01      	ldr	r5, [sp, #4]
 800eb1c:	b91d      	cbnz	r5, 800eb26 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800eb1e:	f7ff fd19 	bl	800e554 <vPortExitCritical>
			return errQUEUE_FULL;
 800eb22:	2000      	movs	r0, #0
 800eb24:	e052      	b.n	800ebcc <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800eb26:	b916      	cbnz	r6, 800eb2e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb28:	a802      	add	r0, sp, #8
 800eb2a:	f000 ff3f 	bl	800f9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800eb2e:	f7ff fd11 	bl	800e554 <vPortExitCritical>
		vTaskSuspendAll();
 800eb32:	f000 fcf9 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb36:	f7ff fced 	bl	800e514 <vPortEnterCritical>
 800eb3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eb3e:	2bff      	cmp	r3, #255	; 0xff
 800eb40:	d101      	bne.n	800eb46 <xQueueGenericSend+0xa8>
 800eb42:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800eb46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eb4a:	2bff      	cmp	r3, #255	; 0xff
 800eb4c:	d101      	bne.n	800eb52 <xQueueGenericSend+0xb4>
 800eb4e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800eb52:	f7ff fcff 	bl	800e554 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb56:	a901      	add	r1, sp, #4
 800eb58:	a802      	add	r0, sp, #8
 800eb5a:	f000 ff33 	bl	800f9c4 <xTaskCheckForTimeOut>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d14a      	bne.n	800ebf8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb62:	f7ff fcd7 	bl	800e514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eb68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d131      	bne.n	800ebd2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800eb6e:	f7ff fcf1 	bl	800e554 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eb72:	9901      	ldr	r1, [sp, #4]
 800eb74:	f104 0010 	add.w	r0, r4, #16
 800eb78:	f000 fe9c 	bl	800f8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb7c:	4620      	mov	r0, r4
 800eb7e:	f7ff fe62 	bl	800e846 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb82:	f000 fd75 	bl	800f670 <xTaskResumeAll>
 800eb86:	b360      	cbz	r0, 800ebe2 <xQueueGenericSend+0x144>
 800eb88:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800eb8a:	f7ff fcc3 	bl	800e514 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800eb90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d301      	bcc.n	800eb9a <xQueueGenericSend+0xfc>
 800eb96:	2f02      	cmp	r7, #2
 800eb98:	d1bf      	bne.n	800eb1a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb9a:	463a      	mov	r2, r7
 800eb9c:	4641      	mov	r1, r8
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7ff fe07 	bl	800e7b2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eba6:	b11b      	cbz	r3, 800ebb0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eba8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ebac:	f000 feba 	bl	800f924 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800ebb0:	b148      	cbz	r0, 800ebc6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800ebb2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ebb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ebc6:	f7ff fcc5 	bl	800e554 <vPortExitCritical>
				return pdPASS;
 800ebca:	2001      	movs	r0, #1
}
 800ebcc:	b005      	add	sp, #20
 800ebce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800ebd2:	f7ff fcbf 	bl	800e554 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f7ff fe35 	bl	800e846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebdc:	f000 fd48 	bl	800f670 <xTaskResumeAll>
 800ebe0:	e7d2      	b.n	800eb88 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800ebe2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ebe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	e7c7      	b.n	800eb88 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	f7ff fe24 	bl	800e846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebfe:	f000 fd37 	bl	800f670 <xTaskResumeAll>
 800ec02:	e78e      	b.n	800eb22 <xQueueGenericSend+0x84>

0800ec04 <xQueueGenericSendFromISR>:
{
 800ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	4689      	mov	r9, r1
 800ec0a:	4690      	mov	r8, r2
 800ec0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800ec0e:	4604      	mov	r4, r0
 800ec10:	b940      	cbnz	r0, 800ec24 <xQueueGenericSendFromISR+0x20>
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	e7fe      	b.n	800ec22 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec24:	b951      	cbnz	r1, 800ec3c <xQueueGenericSendFromISR+0x38>
 800ec26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ec28:	b143      	cbz	r3, 800ec3c <xQueueGenericSendFromISR+0x38>
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	e7fe      	b.n	800ec3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ec3c:	2f02      	cmp	r7, #2
 800ec3e:	d10b      	bne.n	800ec58 <xQueueGenericSendFromISR+0x54>
 800ec40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec42:	2b01      	cmp	r3, #1
 800ec44:	d008      	beq.n	800ec58 <xQueueGenericSendFromISR+0x54>
 800ec46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec4a:	f383 8811 	msr	BASEPRI, r3
 800ec4e:	f3bf 8f6f 	isb	sy
 800ec52:	f3bf 8f4f 	dsb	sy
 800ec56:	e7fe      	b.n	800ec56 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec58:	f7ff fd72 	bl	800e740 <vPortValidateInterruptPriority>
	__asm volatile
 800ec5c:	f3ef 8611 	mrs	r6, BASEPRI
 800ec60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec64:	f383 8811 	msr	BASEPRI, r3
 800ec68:	f3bf 8f6f 	isb	sy
 800ec6c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ec70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ec72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec74:	429a      	cmp	r2, r3
 800ec76:	d301      	bcc.n	800ec7c <xQueueGenericSendFromISR+0x78>
 800ec78:	2f02      	cmp	r7, #2
 800ec7a:	d123      	bne.n	800ecc4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec7c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec80:	463a      	mov	r2, r7
 800ec82:	4649      	mov	r1, r9
 800ec84:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800ec86:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ec8a:	f7ff fd92 	bl	800e7b2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800ec8e:	1c6b      	adds	r3, r5, #1
 800ec90:	d113      	bne.n	800ecba <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ec92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec94:	b90b      	cbnz	r3, 800ec9a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800ec96:	2001      	movs	r0, #1
 800ec98:	e00b      	b.n	800ecb2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ec9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ec9e:	f000 fe41 	bl	800f924 <xTaskRemoveFromEventList>
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0f7      	beq.n	800ec96 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800eca6:	f1b8 0f00 	cmp.w	r8, #0
 800ecaa:	d0f4      	beq.n	800ec96 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ecac:	2001      	movs	r0, #1
 800ecae:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800ecb2:	f386 8811 	msr	BASEPRI, r6
}
 800ecb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ecba:	3501      	adds	r5, #1
 800ecbc:	b26d      	sxtb	r5, r5
 800ecbe:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800ecc2:	e7e8      	b.n	800ec96 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e7f4      	b.n	800ecb2 <xQueueGenericSendFromISR+0xae>

0800ecc8 <xQueueGiveFromISR>:
{
 800ecc8:	b570      	push	{r4, r5, r6, lr}
 800ecca:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800eccc:	4604      	mov	r4, r0
 800ecce:	b940      	cbnz	r0, 800ece2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800ecd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	e7fe      	b.n	800ece0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ece2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ece4:	b143      	cbz	r3, 800ecf8 <xQueueGiveFromISR+0x30>
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	e7fe      	b.n	800ecf6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ecf8:	6803      	ldr	r3, [r0, #0]
 800ecfa:	b953      	cbnz	r3, 800ed12 <xQueueGiveFromISR+0x4a>
 800ecfc:	6883      	ldr	r3, [r0, #8]
 800ecfe:	b143      	cbz	r3, 800ed12 <xQueueGiveFromISR+0x4a>
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	e7fe      	b.n	800ed10 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed12:	f7ff fd15 	bl	800e740 <vPortValidateInterruptPriority>
	__asm volatile
 800ed16:	f3ef 8611 	mrs	r6, BASEPRI
 800ed1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ed2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d91c      	bls.n	800ed6c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed36:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800ed38:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed3a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed3c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800ed3e:	d110      	bne.n	800ed62 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed42:	b90b      	cbnz	r3, 800ed48 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800ed44:	2001      	movs	r0, #1
 800ed46:	e009      	b.n	800ed5c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed48:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ed4c:	f000 fdea 	bl	800f924 <xTaskRemoveFromEventList>
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d0f7      	beq.n	800ed44 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d0f5      	beq.n	800ed44 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed58:	2001      	movs	r0, #1
 800ed5a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800ed5c:	f386 8811 	msr	BASEPRI, r6
}
 800ed60:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed62:	3301      	adds	r3, #1
 800ed64:	b25b      	sxtb	r3, r3
 800ed66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed6a:	e7eb      	b.n	800ed44 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e7f5      	b.n	800ed5c <xQueueGiveFromISR+0x94>

0800ed70 <xQueueReceive>:
{
 800ed70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ed74:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800ed76:	4604      	mov	r4, r0
{
 800ed78:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ed7a:	b940      	cbnz	r0, 800ed8e <xQueueReceive+0x1e>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	e7fe      	b.n	800ed8c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed8e:	b951      	cbnz	r1, 800eda6 <xQueueReceive+0x36>
 800ed90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ed92:	b143      	cbz	r3, 800eda6 <xQueueReceive+0x36>
 800ed94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	e7fe      	b.n	800eda4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eda6:	f000 fe4f 	bl	800fa48 <xTaskGetSchedulerState>
 800edaa:	4606      	mov	r6, r0
 800edac:	b950      	cbnz	r0, 800edc4 <xQueueReceive+0x54>
 800edae:	9b01      	ldr	r3, [sp, #4]
 800edb0:	b14b      	cbz	r3, 800edc6 <xQueueReceive+0x56>
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	e7fe      	b.n	800edc2 <xQueueReceive+0x52>
 800edc4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800edc6:	f04f 0800 	mov.w	r8, #0
 800edca:	e03d      	b.n	800ee48 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800edcc:	9d01      	ldr	r5, [sp, #4]
 800edce:	b91d      	cbnz	r5, 800edd8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800edd0:	f7ff fbc0 	bl	800e554 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800edd4:	2000      	movs	r0, #0
 800edd6:	e056      	b.n	800ee86 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800edd8:	b916      	cbnz	r6, 800ede0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800edda:	a802      	add	r0, sp, #8
 800eddc:	f000 fde6 	bl	800f9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ede0:	f7ff fbb8 	bl	800e554 <vPortExitCritical>
		vTaskSuspendAll();
 800ede4:	f000 fba0 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ede8:	f7ff fb94 	bl	800e514 <vPortEnterCritical>
 800edec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800edf0:	2bff      	cmp	r3, #255	; 0xff
 800edf2:	d101      	bne.n	800edf8 <xQueueReceive+0x88>
 800edf4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800edf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800edfc:	2bff      	cmp	r3, #255	; 0xff
 800edfe:	d101      	bne.n	800ee04 <xQueueReceive+0x94>
 800ee00:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800ee04:	f7ff fba6 	bl	800e554 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee08:	a901      	add	r1, sp, #4
 800ee0a:	a802      	add	r0, sp, #8
 800ee0c:	f000 fdda 	bl	800f9c4 <xTaskCheckForTimeOut>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	d141      	bne.n	800ee98 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee14:	4620      	mov	r0, r4
 800ee16:	f7ff fcc1 	bl	800e79c <prvIsQueueEmpty>
 800ee1a:	b3b8      	cbz	r0, 800ee8c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ee1c:	9901      	ldr	r1, [sp, #4]
 800ee1e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ee22:	f000 fd47 	bl	800f8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee26:	4620      	mov	r0, r4
 800ee28:	f7ff fd0d 	bl	800e846 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee2c:	f000 fc20 	bl	800f670 <xTaskResumeAll>
 800ee30:	b948      	cbnz	r0, 800ee46 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800ee32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ee3e:	f3bf 8f4f 	dsb	sy
 800ee42:	f3bf 8f6f 	isb	sy
 800ee46:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ee48:	f7ff fb64 	bl	800e514 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee4e:	2d00      	cmp	r5, #0
 800ee50:	d0bc      	beq.n	800edcc <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee52:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ee54:	4639      	mov	r1, r7
 800ee56:	4620      	mov	r0, r4
 800ee58:	f7ff fce0 	bl	800e81c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee5c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee5e:	6923      	ldr	r3, [r4, #16]
 800ee60:	b173      	cbz	r3, 800ee80 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee62:	f104 0010 	add.w	r0, r4, #16
 800ee66:	f000 fd5d 	bl	800f924 <xTaskRemoveFromEventList>
 800ee6a:	b148      	cbz	r0, 800ee80 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800ee6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ee80:	f7ff fb68 	bl	800e554 <vPortExitCritical>
				return pdPASS;
 800ee84:	2001      	movs	r0, #1
}
 800ee86:	b004      	add	sp, #16
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f7ff fcda 	bl	800e846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee92:	f000 fbed 	bl	800f670 <xTaskResumeAll>
 800ee96:	e7d6      	b.n	800ee46 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800ee98:	4620      	mov	r0, r4
 800ee9a:	f7ff fcd4 	bl	800e846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee9e:	f000 fbe7 	bl	800f670 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7ff fc7a 	bl	800e79c <prvIsQueueEmpty>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d0cc      	beq.n	800ee46 <xQueueReceive+0xd6>
 800eeac:	e792      	b.n	800edd4 <xQueueReceive+0x64>

0800eeae <xQueueSemaphoreTake>:
{
 800eeae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeb0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800eeb2:	4604      	mov	r4, r0
{
 800eeb4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800eeb6:	b940      	cbnz	r0, 800eeca <xQueueSemaphoreTake+0x1c>
 800eeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eebc:	f383 8811 	msr	BASEPRI, r3
 800eec0:	f3bf 8f6f 	isb	sy
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	e7fe      	b.n	800eec8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800eeca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800eecc:	b145      	cbz	r5, 800eee0 <xQueueSemaphoreTake+0x32>
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	e7fe      	b.n	800eede <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eee0:	f000 fdb2 	bl	800fa48 <xTaskGetSchedulerState>
 800eee4:	4606      	mov	r6, r0
 800eee6:	b950      	cbnz	r0, 800eefe <xQueueSemaphoreTake+0x50>
 800eee8:	9b01      	ldr	r3, [sp, #4]
 800eeea:	b15b      	cbz	r3, 800ef04 <xQueueSemaphoreTake+0x56>
 800eeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef0:	f383 8811 	msr	BASEPRI, r3
 800eef4:	f3bf 8f6f 	isb	sy
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	e7fe      	b.n	800eefc <xQueueSemaphoreTake+0x4e>
 800eefe:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800ef00:	2700      	movs	r7, #0
 800ef02:	e053      	b.n	800efac <xQueueSemaphoreTake+0xfe>
 800ef04:	4605      	mov	r5, r0
 800ef06:	e7fb      	b.n	800ef00 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef08:	9b01      	ldr	r3, [sp, #4]
 800ef0a:	b963      	cbnz	r3, 800ef26 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ef0c:	b145      	cbz	r5, 800ef20 <xQueueSemaphoreTake+0x72>
 800ef0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	e7fe      	b.n	800ef1e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800ef20:	f7ff fb18 	bl	800e554 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800ef24:	e062      	b.n	800efec <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800ef26:	b916      	cbnz	r6, 800ef2e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ef28:	a802      	add	r0, sp, #8
 800ef2a:	f000 fd3f 	bl	800f9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800ef2e:	f7ff fb11 	bl	800e554 <vPortExitCritical>
		vTaskSuspendAll();
 800ef32:	f000 faf9 	bl	800f528 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ef36:	f7ff faed 	bl	800e514 <vPortEnterCritical>
 800ef3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ef3e:	2bff      	cmp	r3, #255	; 0xff
 800ef40:	d101      	bne.n	800ef46 <xQueueSemaphoreTake+0x98>
 800ef42:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800ef46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ef4a:	2bff      	cmp	r3, #255	; 0xff
 800ef4c:	d101      	bne.n	800ef52 <xQueueSemaphoreTake+0xa4>
 800ef4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef52:	f7ff faff 	bl	800e554 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ef56:	a901      	add	r1, sp, #4
 800ef58:	a802      	add	r0, sp, #8
 800ef5a:	f000 fd33 	bl	800f9c4 <xTaskCheckForTimeOut>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d14d      	bne.n	800effe <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ef62:	4620      	mov	r0, r4
 800ef64:	f7ff fc1a 	bl	800e79c <prvIsQueueEmpty>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	d042      	beq.n	800eff2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef6c:	6823      	ldr	r3, [r4, #0]
 800ef6e:	b93b      	cbnz	r3, 800ef80 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800ef70:	f7ff fad0 	bl	800e514 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ef74:	68a0      	ldr	r0, [r4, #8]
 800ef76:	f000 fd77 	bl	800fa68 <xTaskPriorityInherit>
 800ef7a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800ef7c:	f7ff faea 	bl	800e554 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ef80:	9901      	ldr	r1, [sp, #4]
 800ef82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ef86:	f000 fc95 	bl	800f8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f7ff fc5b 	bl	800e846 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ef90:	f000 fb6e 	bl	800f670 <xTaskResumeAll>
 800ef94:	b948      	cbnz	r0, 800efaa <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800ef96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ef9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	f3bf 8f6f 	isb	sy
 800efaa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800efac:	f7ff fab2 	bl	800e514 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800efb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0a8      	beq.n	800ef08 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800efb6:	3b01      	subs	r3, #1
 800efb8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	b913      	cbnz	r3, 800efc4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800efbe:	f000 fe29 	bl	800fc14 <pvTaskIncrementMutexHeldCount>
 800efc2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efc4:	6923      	ldr	r3, [r4, #16]
 800efc6:	b173      	cbz	r3, 800efe6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efc8:	f104 0010 	add.w	r0, r4, #16
 800efcc:	f000 fcaa 	bl	800f924 <xTaskRemoveFromEventList>
 800efd0:	b148      	cbz	r0, 800efe6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800efd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800efd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800efe6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800efe8:	f7ff fab4 	bl	800e554 <vPortExitCritical>
}
 800efec:	4628      	mov	r0, r5
 800efee:	b005      	add	sp, #20
 800eff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800eff2:	4620      	mov	r0, r4
 800eff4:	f7ff fc27 	bl	800e846 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eff8:	f000 fb3a 	bl	800f670 <xTaskResumeAll>
 800effc:	e7d5      	b.n	800efaa <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800effe:	4620      	mov	r0, r4
 800f000:	f7ff fc21 	bl	800e846 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f004:	f000 fb34 	bl	800f670 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff fbc7 	bl	800e79c <prvIsQueueEmpty>
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0cb      	beq.n	800efaa <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800f012:	2d00      	cmp	r5, #0
 800f014:	d0ea      	beq.n	800efec <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800f016:	f7ff fa7d 	bl	800e514 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f01a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f01c:	b119      	cbz	r1, 800f026 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f01e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f020:	6819      	ldr	r1, [r3, #0]
 800f022:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f026:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800f028:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f02a:	f000 fda1 	bl	800fb70 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800f02e:	f7ff fa91 	bl	800e554 <vPortExitCritical>
 800f032:	e7db      	b.n	800efec <xQueueSemaphoreTake+0x13e>

0800f034 <xQueueReceiveFromISR>:
{
 800f034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f038:	4689      	mov	r9, r1
 800f03a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800f03c:	4605      	mov	r5, r0
 800f03e:	b940      	cbnz	r0, 800f052 <xQueueReceiveFromISR+0x1e>
 800f040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f044:	f383 8811 	msr	BASEPRI, r3
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	f3bf 8f4f 	dsb	sy
 800f050:	e7fe      	b.n	800f050 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f052:	b951      	cbnz	r1, 800f06a <xQueueReceiveFromISR+0x36>
 800f054:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f056:	b143      	cbz	r3, 800f06a <xQueueReceiveFromISR+0x36>
 800f058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	e7fe      	b.n	800f068 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f06a:	f7ff fb69 	bl	800e740 <vPortValidateInterruptPriority>
	__asm volatile
 800f06e:	f3ef 8711 	mrs	r7, BASEPRI
 800f072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f076:	f383 8811 	msr	BASEPRI, r3
 800f07a:	f3bf 8f6f 	isb	sy
 800f07e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f082:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f084:	b31c      	cbz	r4, 800f0ce <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800f086:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f08a:	4649      	mov	r1, r9
 800f08c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f08e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800f090:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f092:	f7ff fbc3 	bl	800e81c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f096:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800f098:	1c73      	adds	r3, r6, #1
 800f09a:	d113      	bne.n	800f0c4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f09c:	692b      	ldr	r3, [r5, #16]
 800f09e:	b90b      	cbnz	r3, 800f0a4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800f0a0:	2001      	movs	r0, #1
 800f0a2:	e00b      	b.n	800f0bc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0a4:	f105 0010 	add.w	r0, r5, #16
 800f0a8:	f000 fc3c 	bl	800f924 <xTaskRemoveFromEventList>
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d0f7      	beq.n	800f0a0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800f0b0:	f1b8 0f00 	cmp.w	r8, #0
 800f0b4:	d0f4      	beq.n	800f0a0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f0b6:	2001      	movs	r0, #1
 800f0b8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800f0bc:	f387 8811 	msr	BASEPRI, r7
}
 800f0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f0c4:	3601      	adds	r6, #1
 800f0c6:	b276      	sxtb	r6, r6
 800f0c8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800f0cc:	e7e8      	b.n	800f0a0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	e7f4      	b.n	800f0bc <xQueueReceiveFromISR+0x88>
	...

0800f0d4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0d4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0d6:	4a07      	ldr	r2, [pc, #28]	; (800f0f4 <vQueueAddToRegistry+0x20>)
	{
 800f0d8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0da:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800f0de:	b92c      	cbnz	r4, 800f0ec <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0e8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0ea:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	2b08      	cmp	r3, #8
 800f0f0:	d1f3      	bne.n	800f0da <vQueueAddToRegistry+0x6>
 800f0f2:	e7fa      	b.n	800f0ea <vQueueAddToRegistry+0x16>
 800f0f4:	2400ebcc 	.word	0x2400ebcc

0800f0f8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0f8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0fa:	4a08      	ldr	r2, [pc, #32]	; (800f11c <vQueueUnregisterQueue+0x24>)
	{
 800f0fc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800f102:	684c      	ldr	r4, [r1, #4]
 800f104:	4284      	cmp	r4, r0
 800f106:	d104      	bne.n	800f112 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f108:	2000      	movs	r0, #0
 800f10a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f10e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f110:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f112:	3301      	adds	r3, #1
 800f114:	2b08      	cmp	r3, #8
 800f116:	d1f2      	bne.n	800f0fe <vQueueUnregisterQueue+0x6>
 800f118:	e7fa      	b.n	800f110 <vQueueUnregisterQueue+0x18>
 800f11a:	bf00      	nop
 800f11c:	2400ebcc 	.word	0x2400ebcc

0800f120 <vQueueDelete>:
{
 800f120:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800f122:	4604      	mov	r4, r0
 800f124:	b940      	cbnz	r0, 800f138 <vQueueDelete+0x18>
	__asm volatile
 800f126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f12a:	f383 8811 	msr	BASEPRI, r3
 800f12e:	f3bf 8f6f 	isb	sy
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	e7fe      	b.n	800f136 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800f138:	f7ff ffde 	bl	800f0f8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f13c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800f140:	b923      	cbnz	r3, 800f14c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800f142:	4620      	mov	r0, r4
}
 800f144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800f148:	f7ff b8fe 	b.w	800e348 <vPortFree>
}
 800f14c:	bd10      	pop	{r4, pc}

0800f14e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f14e:	b570      	push	{r4, r5, r6, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	460d      	mov	r5, r1
 800f154:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f156:	f7ff f9dd 	bl	800e514 <vPortEnterCritical>
 800f15a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f15e:	2bff      	cmp	r3, #255	; 0xff
 800f160:	d102      	bne.n	800f168 <vQueueWaitForMessageRestricted+0x1a>
 800f162:	2300      	movs	r3, #0
 800f164:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800f168:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f16c:	2bff      	cmp	r3, #255	; 0xff
 800f16e:	d102      	bne.n	800f176 <vQueueWaitForMessageRestricted+0x28>
 800f170:	2300      	movs	r3, #0
 800f172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f176:	f7ff f9ed 	bl	800e554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f17a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f17c:	b92b      	cbnz	r3, 800f18a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f17e:	4632      	mov	r2, r6
 800f180:	4629      	mov	r1, r5
 800f182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f186:	f000 fbaf 	bl	800f8e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f18a:	4620      	mov	r0, r4
	}
 800f18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800f190:	f7ff bb59 	b.w	800e846 <prvUnlockQueue>

0800f194 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f198:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f19a:	f7ff f9bb 	bl	800e514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f19e:	4b2f      	ldr	r3, [pc, #188]	; (800f25c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800f1a0:	4e2f      	ldr	r6, [pc, #188]	; (800f260 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	4f2f      	ldr	r7, [pc, #188]	; (800f264 <prvAddNewTaskToReadyList+0xd0>)
 800f1a6:	3201      	adds	r2, #1
 800f1a8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800f1aa:	6835      	ldr	r5, [r6, #0]
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	d14a      	bne.n	800f246 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f1b0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d11f      	bne.n	800f1f8 <prvAddNewTaskToReadyList+0x64>
 800f1b8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1ba:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f1bc:	4640      	mov	r0, r8
 800f1be:	f7ff f901 	bl	800e3c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f1c2:	f108 0814 	add.w	r8, r8, #20
 800f1c6:	2d38      	cmp	r5, #56	; 0x38
 800f1c8:	d1f7      	bne.n	800f1ba <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f1ca:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800f28c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800f1ce:	4d26      	ldr	r5, [pc, #152]	; (800f268 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	f7ff f8f7 	bl	800e3c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	f7ff f8f4 	bl	800e3c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f1dc:	4823      	ldr	r0, [pc, #140]	; (800f26c <prvAddNewTaskToReadyList+0xd8>)
 800f1de:	f7ff f8f1 	bl	800e3c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f1e2:	4823      	ldr	r0, [pc, #140]	; (800f270 <prvAddNewTaskToReadyList+0xdc>)
 800f1e4:	f7ff f8ee 	bl	800e3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f1e8:	4822      	ldr	r0, [pc, #136]	; (800f274 <prvAddNewTaskToReadyList+0xe0>)
 800f1ea:	f7ff f8eb 	bl	800e3c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f1ee:	4b22      	ldr	r3, [pc, #136]	; (800f278 <prvAddNewTaskToReadyList+0xe4>)
 800f1f0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f1f4:	4b21      	ldr	r3, [pc, #132]	; (800f27c <prvAddNewTaskToReadyList+0xe8>)
 800f1f6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800f1f8:	4a21      	ldr	r2, [pc, #132]	; (800f280 <prvAddNewTaskToReadyList+0xec>)
 800f1fa:	6813      	ldr	r3, [r2, #0]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800f200:	4a20      	ldr	r2, [pc, #128]	; (800f284 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f202:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f204:	6811      	ldr	r1, [r2, #0]
 800f206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f208:	428b      	cmp	r3, r1
 800f20a:	d900      	bls.n	800f20e <prvAddNewTaskToReadyList+0x7a>
 800f20c:	6013      	str	r3, [r2, #0]
 800f20e:	2014      	movs	r0, #20
 800f210:	1d21      	adds	r1, r4, #4
 800f212:	fb00 7003 	mla	r0, r0, r3, r7
 800f216:	f7ff f8e3 	bl	800e3e0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f21a:	f7ff f99b 	bl	800e554 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f21e:	4b1a      	ldr	r3, [pc, #104]	; (800f288 <prvAddNewTaskToReadyList+0xf4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	b173      	cbz	r3, 800f242 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f224:	6833      	ldr	r3, [r6, #0]
 800f226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f228:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d209      	bcs.n	800f242 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800f22e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f236:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f23a:	f3bf 8f4f 	dsb	sy
 800f23e:	f3bf 8f6f 	isb	sy
}
 800f242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800f246:	4b10      	ldr	r3, [pc, #64]	; (800f288 <prvAddNewTaskToReadyList+0xf4>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1d4      	bne.n	800f1f8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f24e:	6833      	ldr	r3, [r6, #0]
 800f250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f254:	429a      	cmp	r2, r3
 800f256:	d8cf      	bhi.n	800f1f8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800f258:	6034      	str	r4, [r6, #0]
 800f25a:	e7cd      	b.n	800f1f8 <prvAddNewTaskToReadyList+0x64>
 800f25c:	2400f078 	.word	0x2400f078
 800f260:	2400ec0c 	.word	0x2400ec0c
 800f264:	2400ec18 	.word	0x2400ec18
 800f268:	2400f0a0 	.word	0x2400f0a0
 800f26c:	2400f0c0 	.word	0x2400f0c0
 800f270:	2400f0ec 	.word	0x2400f0ec
 800f274:	2400f0d8 	.word	0x2400f0d8
 800f278:	2400ec10 	.word	0x2400ec10
 800f27c:	2400ec14 	.word	0x2400ec14
 800f280:	2400f084 	.word	0x2400f084
 800f284:	2400f088 	.word	0x2400f088
 800f288:	2400f0d4 	.word	0x2400f0d4
 800f28c:	2400f08c 	.word	0x2400f08c

0800f290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f292:	4b15      	ldr	r3, [pc, #84]	; (800f2e8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800f294:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f296:	4e15      	ldr	r6, [pc, #84]	; (800f2ec <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800f298:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800f29a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f29c:	6830      	ldr	r0, [r6, #0]
 800f29e:	3004      	adds	r0, #4
 800f2a0:	f7ff f8c1 	bl	800e426 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2a4:	1c63      	adds	r3, r4, #1
 800f2a6:	d107      	bne.n	800f2b8 <prvAddCurrentTaskToDelayedList+0x28>
 800f2a8:	b137      	cbz	r7, 800f2b8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2aa:	6831      	ldr	r1, [r6, #0]
 800f2ac:	4810      	ldr	r0, [pc, #64]	; (800f2f0 <prvAddCurrentTaskToDelayedList+0x60>)
 800f2ae:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f2b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2b4:	f7ff b894 	b.w	800e3e0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f2b8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f2ba:	6833      	ldr	r3, [r6, #0]
 800f2bc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f2be:	d307      	bcc.n	800f2d0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2c0:	4b0c      	ldr	r3, [pc, #48]	; (800f2f4 <prvAddCurrentTaskToDelayedList+0x64>)
 800f2c2:	6818      	ldr	r0, [r3, #0]
 800f2c4:	6831      	ldr	r1, [r6, #0]
}
 800f2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2ca:	3104      	adds	r1, #4
 800f2cc:	f7ff b894 	b.w	800e3f8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <prvAddCurrentTaskToDelayedList+0x68>)
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	6831      	ldr	r1, [r6, #0]
 800f2d6:	3104      	adds	r1, #4
 800f2d8:	f7ff f88e 	bl	800e3f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2dc:	4b07      	ldr	r3, [pc, #28]	; (800f2fc <prvAddCurrentTaskToDelayedList+0x6c>)
 800f2de:	681a      	ldr	r2, [r3, #0]
 800f2e0:	42a2      	cmp	r2, r4
 800f2e2:	d900      	bls.n	800f2e6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800f2e4:	601c      	str	r4, [r3, #0]
}
 800f2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2e8:	2400f100 	.word	0x2400f100
 800f2ec:	2400ec0c 	.word	0x2400ec0c
 800f2f0:	2400f0d8 	.word	0x2400f0d8
 800f2f4:	2400ec14 	.word	0x2400ec14
 800f2f8:	2400ec10 	.word	0x2400ec10
 800f2fc:	2400f0b4 	.word	0x2400f0b4

0800f300 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f300:	4a06      	ldr	r2, [pc, #24]	; (800f31c <prvResetNextTaskUnblockTime+0x1c>)
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	6819      	ldr	r1, [r3, #0]
 800f306:	4b06      	ldr	r3, [pc, #24]	; (800f320 <prvResetNextTaskUnblockTime+0x20>)
 800f308:	b919      	cbnz	r1, 800f312 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800f30a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f30e:	601a      	str	r2, [r3, #0]
}
 800f310:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f312:	6812      	ldr	r2, [r2, #0]
 800f314:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f316:	68d2      	ldr	r2, [r2, #12]
 800f318:	6852      	ldr	r2, [r2, #4]
 800f31a:	e7f8      	b.n	800f30e <prvResetNextTaskUnblockTime+0xe>
 800f31c:	2400ec10 	.word	0x2400ec10
 800f320:	2400f0b4 	.word	0x2400f0b4

0800f324 <prvDeleteTCB>:
	{
 800f324:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f326:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800f32a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f32c:	b93b      	cbnz	r3, 800f33e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800f32e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f330:	f7ff f80a 	bl	800e348 <vPortFree>
				vPortFree( pxTCB );
 800f334:	4620      	mov	r0, r4
	}
 800f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800f33a:	f7ff b805 	b.w	800e348 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d0f9      	beq.n	800f336 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f342:	2b02      	cmp	r3, #2
 800f344:	d008      	beq.n	800f358 <prvDeleteTCB+0x34>
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	e7fe      	b.n	800f356 <prvDeleteTCB+0x32>
	}
 800f358:	bd10      	pop	{r4, pc}
	...

0800f35c <prvIdleTask>:
{
 800f35c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f35e:	4c14      	ldr	r4, [pc, #80]	; (800f3b0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f360:	4f14      	ldr	r7, [pc, #80]	; (800f3b4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800f362:	4d15      	ldr	r5, [pc, #84]	; (800f3b8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	b983      	cbnz	r3, 800f38a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f368:	4b14      	ldr	r3, [pc, #80]	; (800f3bc <prvIdleTask+0x60>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d909      	bls.n	800f384 <prvIdleTask+0x28>
				taskYIELD();
 800f370:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f378:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800f384:	f7f1 f9b8 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f388:	e7eb      	b.n	800f362 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800f38a:	f7ff f8c3 	bl	800e514 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f392:	1d30      	adds	r0, r6, #4
 800f394:	f7ff f847 	bl	800e426 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f398:	682b      	ldr	r3, [r5, #0]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f39e:	6823      	ldr	r3, [r4, #0]
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800f3a4:	f7ff f8d6 	bl	800e554 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff ffbb 	bl	800f324 <prvDeleteTCB>
 800f3ae:	e7d9      	b.n	800f364 <prvIdleTask+0x8>
 800f3b0:	2400f07c 	.word	0x2400f07c
 800f3b4:	2400f0ec 	.word	0x2400f0ec
 800f3b8:	2400f078 	.word	0x2400f078
 800f3bc:	2400ec18 	.word	0x2400ec18

0800f3c0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3c4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f3c8:	4606      	mov	r6, r0
 800f3ca:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3cc:	21a5      	movs	r1, #165	; 0xa5
 800f3ce:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f3d0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3d2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800f3d6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f3da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f3dc:	f012 ffdc 	bl	8022398 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f3e2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3e4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800f3e8:	b3b5      	cbz	r5, 800f458 <prvInitialiseNewTask.constprop.0+0x98>
 800f3ea:	1e6b      	subs	r3, r5, #1
 800f3ec:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800f3f0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f3f2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f3f6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800f3fa:	b108      	cbz	r0, 800f400 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3fc:	42ab      	cmp	r3, r5
 800f3fe:	d1f8      	bne.n	800f3f2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f400:	2300      	movs	r3, #0
 800f402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f406:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800f408:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f40c:	1d20      	adds	r0, r4, #4
 800f40e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800f410:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800f414:	bf28      	it	cs
 800f416:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f418:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f41a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f41c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f420:	f7fe ffdb 	bl	800e3da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f424:	f104 0018 	add.w	r0, r4, #24
 800f428:	f7fe ffd7 	bl	800e3da <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800f42c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f430:	463a      	mov	r2, r7
 800f432:	4631      	mov	r1, r6
 800f434:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f436:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f438:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f43a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800f43c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f440:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f444:	f7ff f83e 	bl	800e4c4 <pxPortInitialiseStack>
 800f448:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f44a:	f1b8 0f00 	cmp.w	r8, #0
 800f44e:	d001      	beq.n	800f454 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f450:	f8c8 4000 	str.w	r4, [r8]
}
 800f454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f458:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800f45c:	e7d3      	b.n	800f406 <prvInitialiseNewTask.constprop.0+0x46>

0800f45e <xTaskCreateStatic>:
	{
 800f45e:	b570      	push	{r4, r5, r6, lr}
 800f460:	b086      	sub	sp, #24
 800f462:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f466:	b945      	cbnz	r5, 800f47a <xTaskCreateStatic+0x1c>
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	e7fe      	b.n	800f478 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800f47a:	b944      	cbnz	r4, 800f48e <xTaskCreateStatic+0x30>
 800f47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	e7fe      	b.n	800f48c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f48e:	2660      	movs	r6, #96	; 0x60
 800f490:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f492:	9e05      	ldr	r6, [sp, #20]
 800f494:	2e60      	cmp	r6, #96	; 0x60
 800f496:	d008      	beq.n	800f4aa <xTaskCreateStatic+0x4c>
 800f498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	e7fe      	b.n	800f4a8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4aa:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4ac:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4ae:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4b0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4b4:	ad04      	add	r5, sp, #16
 800f4b6:	9402      	str	r4, [sp, #8]
 800f4b8:	9501      	str	r5, [sp, #4]
 800f4ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f4bc:	9500      	str	r5, [sp, #0]
 800f4be:	f7ff ff7f 	bl	800f3c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fe66 	bl	800f194 <prvAddNewTaskToReadyList>
	}
 800f4c8:	9804      	ldr	r0, [sp, #16]
 800f4ca:	b006      	add	sp, #24
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}

0800f4ce <xTaskCreate>:
	{
 800f4ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f4d2:	4607      	mov	r7, r0
 800f4d4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f4d6:	0090      	lsls	r0, r2, #2
	{
 800f4d8:	4688      	mov	r8, r1
 800f4da:	4616      	mov	r6, r2
 800f4dc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f4de:	f7fe fe9b 	bl	800e218 <pvPortMalloc>
			if( pxStack != NULL )
 800f4e2:	4605      	mov	r5, r0
 800f4e4:	b1e8      	cbz	r0, 800f522 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f4e6:	2060      	movs	r0, #96	; 0x60
 800f4e8:	f7fe fe96 	bl	800e218 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f4ec:	4604      	mov	r4, r0
 800f4ee:	b1a8      	cbz	r0, 800f51c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f4f0:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800f4f2:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f4f4:	4632      	mov	r2, r6
 800f4f6:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f4f8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f4fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4fe:	9002      	str	r0, [sp, #8]
 800f500:	4638      	mov	r0, r7
 800f502:	9301      	str	r3, [sp, #4]
 800f504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f506:	9300      	str	r3, [sp, #0]
 800f508:	464b      	mov	r3, r9
 800f50a:	f7ff ff59 	bl	800f3c0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f50e:	4620      	mov	r0, r4
 800f510:	f7ff fe40 	bl	800f194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f514:	2001      	movs	r0, #1
	}
 800f516:	b005      	add	sp, #20
 800f518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800f51c:	4628      	mov	r0, r5
 800f51e:	f7fe ff13 	bl	800e348 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f522:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800f526:	e7f6      	b.n	800f516 <xTaskCreate+0x48>

0800f528 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f528:	4a02      	ldr	r2, [pc, #8]	; (800f534 <vTaskSuspendAll+0xc>)
 800f52a:	6813      	ldr	r3, [r2, #0]
 800f52c:	3301      	adds	r3, #1
 800f52e:	6013      	str	r3, [r2, #0]
}
 800f530:	4770      	bx	lr
 800f532:	bf00      	nop
 800f534:	2400f080 	.word	0x2400f080

0800f538 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f538:	4b01      	ldr	r3, [pc, #4]	; (800f540 <xTaskGetTickCount+0x8>)
 800f53a:	6818      	ldr	r0, [r3, #0]
}
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	2400f100 	.word	0x2400f100

0800f544 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f544:	4b3f      	ldr	r3, [pc, #252]	; (800f644 <xTaskIncrementTick+0x100>)
 800f546:	681b      	ldr	r3, [r3, #0]
{
 800f548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d172      	bne.n	800f636 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f550:	4b3d      	ldr	r3, [pc, #244]	; (800f648 <xTaskIncrementTick+0x104>)
 800f552:	681d      	ldr	r5, [r3, #0]
 800f554:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800f556:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f558:	b9bd      	cbnz	r5, 800f58a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f55a:	4b3c      	ldr	r3, [pc, #240]	; (800f64c <xTaskIncrementTick+0x108>)
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	6812      	ldr	r2, [r2, #0]
 800f560:	b142      	cbz	r2, 800f574 <xTaskIncrementTick+0x30>
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	f383 8811 	msr	BASEPRI, r3
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	f3bf 8f4f 	dsb	sy
 800f572:	e7fe      	b.n	800f572 <xTaskIncrementTick+0x2e>
 800f574:	4a36      	ldr	r2, [pc, #216]	; (800f650 <xTaskIncrementTick+0x10c>)
 800f576:	6819      	ldr	r1, [r3, #0]
 800f578:	6810      	ldr	r0, [r2, #0]
 800f57a:	6018      	str	r0, [r3, #0]
 800f57c:	6011      	str	r1, [r2, #0]
 800f57e:	4a35      	ldr	r2, [pc, #212]	; (800f654 <xTaskIncrementTick+0x110>)
 800f580:	6813      	ldr	r3, [r2, #0]
 800f582:	3301      	adds	r3, #1
 800f584:	6013      	str	r3, [r2, #0]
 800f586:	f7ff febb 	bl	800f300 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f58a:	4e33      	ldr	r6, [pc, #204]	; (800f658 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800f58c:	2400      	movs	r4, #0
 800f58e:	4f33      	ldr	r7, [pc, #204]	; (800f65c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f590:	6833      	ldr	r3, [r6, #0]
 800f592:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800f668 <xTaskIncrementTick+0x124>
 800f596:	429d      	cmp	r5, r3
 800f598:	d211      	bcs.n	800f5be <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f59a:	f8d8 3000 	ldr.w	r3, [r8]
 800f59e:	2214      	movs	r2, #20
 800f5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a2:	4353      	muls	r3, r2
 800f5a4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800f5a6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800f5a8:	4b2d      	ldr	r3, [pc, #180]	; (800f660 <xTaskIncrementTick+0x11c>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800f5ac:	bf28      	it	cs
 800f5ae:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	bf18      	it	ne
 800f5b4:	2401      	movne	r4, #1
}
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	b003      	add	sp, #12
 800f5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5be:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800f64c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800f5c2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800f66c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f5c6:	f8d9 3000 	ldr.w	r3, [r9]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	b91b      	cbnz	r3, 800f5d6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d2:	6033      	str	r3, [r6, #0]
					break;
 800f5d4:	e7e1      	b.n	800f59a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d6:	f8d9 3000 	ldr.w	r3, [r9]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f5e0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800f5e4:	4295      	cmp	r5, r2
 800f5e6:	d201      	bcs.n	800f5ec <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800f5e8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f5ea:	e7d6      	b.n	800f59a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5ec:	f10b 0104 	add.w	r1, fp, #4
 800f5f0:	4608      	mov	r0, r1
 800f5f2:	9101      	str	r1, [sp, #4]
 800f5f4:	f7fe ff17 	bl	800e426 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f5f8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800f5fc:	9901      	ldr	r1, [sp, #4]
 800f5fe:	b122      	cbz	r2, 800f60a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f600:	f10b 0018 	add.w	r0, fp, #24
 800f604:	f7fe ff0f 	bl	800e426 <uxListRemove>
 800f608:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800f60a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800f60e:	f8da 2000 	ldr.w	r2, [sl]
 800f612:	4290      	cmp	r0, r2
 800f614:	d901      	bls.n	800f61a <xTaskIncrementTick+0xd6>
 800f616:	f8ca 0000 	str.w	r0, [sl]
 800f61a:	2314      	movs	r3, #20
 800f61c:	fb03 7000 	mla	r0, r3, r0, r7
 800f620:	f7fe fede 	bl	800e3e0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f624:	f8d8 1000 	ldr.w	r1, [r8]
 800f628:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800f62c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800f62e:	429a      	cmp	r2, r3
 800f630:	bf28      	it	cs
 800f632:	2401      	movcs	r4, #1
 800f634:	e7c7      	b.n	800f5c6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800f636:	4a0b      	ldr	r2, [pc, #44]	; (800f664 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800f638:	2400      	movs	r4, #0
		++xPendedTicks;
 800f63a:	6813      	ldr	r3, [r2, #0]
 800f63c:	3301      	adds	r3, #1
 800f63e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800f640:	e7b9      	b.n	800f5b6 <xTaskIncrementTick+0x72>
 800f642:	bf00      	nop
 800f644:	2400f080 	.word	0x2400f080
 800f648:	2400f100 	.word	0x2400f100
 800f64c:	2400ec10 	.word	0x2400ec10
 800f650:	2400ec14 	.word	0x2400ec14
 800f654:	2400f0b8 	.word	0x2400f0b8
 800f658:	2400f0b4 	.word	0x2400f0b4
 800f65c:	2400ec18 	.word	0x2400ec18
 800f660:	2400f104 	.word	0x2400f104
 800f664:	2400f0bc 	.word	0x2400f0bc
 800f668:	2400ec0c 	.word	0x2400ec0c
 800f66c:	2400f088 	.word	0x2400f088

0800f670 <xTaskResumeAll>:
{
 800f670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800f672:	4c31      	ldr	r4, [pc, #196]	; (800f738 <xTaskResumeAll+0xc8>)
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	b943      	cbnz	r3, 800f68a <xTaskResumeAll+0x1a>
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	e7fe      	b.n	800f688 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800f68a:	f7fe ff43 	bl	800e514 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	3b01      	subs	r3, #1
 800f692:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f694:	6824      	ldr	r4, [r4, #0]
 800f696:	b12c      	cbz	r4, 800f6a4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800f698:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f69a:	f7fe ff5b 	bl	800e554 <vPortExitCritical>
}
 800f69e:	4620      	mov	r0, r4
 800f6a0:	b003      	add	sp, #12
 800f6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6a4:	4b25      	ldr	r3, [pc, #148]	; (800f73c <xTaskResumeAll+0xcc>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d0f5      	beq.n	800f698 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6ac:	4d24      	ldr	r5, [pc, #144]	; (800f740 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800f6ae:	4e25      	ldr	r6, [pc, #148]	; (800f744 <xTaskResumeAll+0xd4>)
 800f6b0:	4f25      	ldr	r7, [pc, #148]	; (800f748 <xTaskResumeAll+0xd8>)
 800f6b2:	e01e      	b.n	800f6f2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b4:	68eb      	ldr	r3, [r5, #12]
 800f6b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6b8:	f104 0018 	add.w	r0, r4, #24
 800f6bc:	f7fe feb3 	bl	800e426 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6c0:	1d21      	adds	r1, r4, #4
 800f6c2:	4608      	mov	r0, r1
 800f6c4:	9101      	str	r1, [sp, #4]
 800f6c6:	f7fe feae 	bl	800e426 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f6ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f6cc:	6832      	ldr	r2, [r6, #0]
 800f6ce:	9901      	ldr	r1, [sp, #4]
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d900      	bls.n	800f6d6 <xTaskResumeAll+0x66>
 800f6d4:	6033      	str	r3, [r6, #0]
 800f6d6:	2014      	movs	r0, #20
 800f6d8:	fb00 7003 	mla	r0, r0, r3, r7
 800f6dc:	f7fe fe80 	bl	800e3e0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6e0:	4b1a      	ldr	r3, [pc, #104]	; (800f74c <xTaskResumeAll+0xdc>)
 800f6e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d302      	bcc.n	800f6f2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800f6ec:	4b18      	ldr	r3, [pc, #96]	; (800f750 <xTaskResumeAll+0xe0>)
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6f2:	682b      	ldr	r3, [r5, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d1dd      	bne.n	800f6b4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800f6f8:	b10c      	cbz	r4, 800f6fe <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800f6fa:	f7ff fe01 	bl	800f300 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f6fe:	4d15      	ldr	r5, [pc, #84]	; (800f754 <xTaskResumeAll+0xe4>)
 800f700:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800f702:	b144      	cbz	r4, 800f716 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800f704:	4e12      	ldr	r6, [pc, #72]	; (800f750 <xTaskResumeAll+0xe0>)
 800f706:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800f708:	f7ff ff1c 	bl	800f544 <xTaskIncrementTick>
 800f70c:	b100      	cbz	r0, 800f710 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800f70e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f710:	3c01      	subs	r4, #1
 800f712:	d1f9      	bne.n	800f708 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800f714:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800f716:	4b0e      	ldr	r3, [pc, #56]	; (800f750 <xTaskResumeAll+0xe0>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d0bc      	beq.n	800f698 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800f71e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f726:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800f732:	2401      	movs	r4, #1
 800f734:	e7b1      	b.n	800f69a <xTaskResumeAll+0x2a>
 800f736:	bf00      	nop
 800f738:	2400f080 	.word	0x2400f080
 800f73c:	2400f078 	.word	0x2400f078
 800f740:	2400f0c0 	.word	0x2400f0c0
 800f744:	2400f088 	.word	0x2400f088
 800f748:	2400ec18 	.word	0x2400ec18
 800f74c:	2400ec0c 	.word	0x2400ec0c
 800f750:	2400f104 	.word	0x2400f104
 800f754:	2400f0bc 	.word	0x2400f0bc

0800f758 <vTaskSetApplicationTaskTag>:
	{
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800f75c:	4604      	mov	r4, r0
 800f75e:	b908      	cbnz	r0, 800f764 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f760:	4b04      	ldr	r3, [pc, #16]	; (800f774 <vTaskSetApplicationTaskTag+0x1c>)
 800f762:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f764:	f7fe fed6 	bl	800e514 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800f768:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800f76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800f76e:	f7fe bef1 	b.w	800e554 <vPortExitCritical>
 800f772:	bf00      	nop
 800f774:	2400ec0c 	.word	0x2400ec0c

0800f778 <xTaskCallApplicationTaskHook>:
	{
 800f778:	4603      	mov	r3, r0
 800f77a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800f77c:	b90b      	cbnz	r3, 800f782 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800f77e:	4b03      	ldr	r3, [pc, #12]	; (800f78c <xTaskCallApplicationTaskHook+0x14>)
 800f780:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800f782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f784:	b103      	cbz	r3, 800f788 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800f786:	4718      	bx	r3
	}
 800f788:	4618      	mov	r0, r3
 800f78a:	4770      	bx	lr
 800f78c:	2400ec0c 	.word	0x2400ec0c

0800f790 <vTaskStartScheduler>:
{
 800f790:	b510      	push	{r4, lr}
 800f792:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f794:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f796:	aa07      	add	r2, sp, #28
 800f798:	a906      	add	r1, sp, #24
 800f79a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f79c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f7a0:	f7fe fcfe 	bl	800e1a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f7a4:	9b05      	ldr	r3, [sp, #20]
 800f7a6:	9a07      	ldr	r2, [sp, #28]
 800f7a8:	9302      	str	r3, [sp, #8]
 800f7aa:	9b06      	ldr	r3, [sp, #24]
 800f7ac:	4919      	ldr	r1, [pc, #100]	; (800f814 <vTaskStartScheduler+0x84>)
 800f7ae:	481a      	ldr	r0, [pc, #104]	; (800f818 <vTaskStartScheduler+0x88>)
 800f7b0:	e9cd 4300 	strd	r4, r3, [sp]
 800f7b4:	4623      	mov	r3, r4
 800f7b6:	f7ff fe52 	bl	800f45e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800f7ba:	b340      	cbz	r0, 800f80e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800f7bc:	f000 fa88 	bl	800fcd0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f7c0:	2801      	cmp	r0, #1
 800f7c2:	d119      	bne.n	800f7f8 <vTaskStartScheduler+0x68>
 800f7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7d8:	4b10      	ldr	r3, [pc, #64]	; (800f81c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800f7da:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7de:	4b10      	ldr	r3, [pc, #64]	; (800f820 <vTaskStartScheduler+0x90>)
 800f7e0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7e2:	4b10      	ldr	r3, [pc, #64]	; (800f824 <vTaskStartScheduler+0x94>)
 800f7e4:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800f7e6:	4b10      	ldr	r3, [pc, #64]	; (800f828 <vTaskStartScheduler+0x98>)
 800f7e8:	6818      	ldr	r0, [r3, #0]
 800f7ea:	f7ff ffc5 	bl	800f778 <xTaskCallApplicationTaskHook>
}
 800f7ee:	b008      	add	sp, #32
 800f7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800f7f4:	f7fe bf1e 	b.w	800e634 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	d108      	bne.n	800f80e <vTaskStartScheduler+0x7e>
 800f7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	e7fe      	b.n	800f80c <vTaskStartScheduler+0x7c>
}
 800f80e:	b008      	add	sp, #32
 800f810:	bd10      	pop	{r4, pc}
 800f812:	bf00      	nop
 800f814:	08024cf0 	.word	0x08024cf0
 800f818:	0800f35d 	.word	0x0800f35d
 800f81c:	2400f0b4 	.word	0x2400f0b4
 800f820:	2400f0d4 	.word	0x2400f0d4
 800f824:	2400f100 	.word	0x2400f100
 800f828:	2400ec0c 	.word	0x2400ec0c

0800f82c <vTaskSwitchContext>:
{
 800f82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f82e:	4b1c      	ldr	r3, [pc, #112]	; (800f8a0 <vTaskSwitchContext+0x74>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	4b1c      	ldr	r3, [pc, #112]	; (800f8a4 <vTaskSwitchContext+0x78>)
 800f834:	b112      	cbz	r2, 800f83c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800f836:	2201      	movs	r2, #1
 800f838:	601a      	str	r2, [r3, #0]
}
 800f83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800f83c:	4c1a      	ldr	r4, [pc, #104]	; (800f8a8 <vTaskSwitchContext+0x7c>)
 800f83e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f840:	4e1a      	ldr	r6, [pc, #104]	; (800f8ac <vTaskSwitchContext+0x80>)
 800f842:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800f844:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800f846:	6820      	ldr	r0, [r4, #0]
 800f848:	f7ff ff96 	bl	800f778 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f84c:	6832      	ldr	r2, [r6, #0]
 800f84e:	4918      	ldr	r1, [pc, #96]	; (800f8b0 <vTaskSwitchContext+0x84>)
 800f850:	fb07 f302 	mul.w	r3, r7, r2
 800f854:	58cd      	ldr	r5, [r1, r3]
 800f856:	18c8      	adds	r0, r1, r3
 800f858:	b1ad      	cbz	r5, 800f886 <vTaskSwitchContext+0x5a>
 800f85a:	6845      	ldr	r5, [r0, #4]
 800f85c:	3308      	adds	r3, #8
 800f85e:	686d      	ldr	r5, [r5, #4]
 800f860:	440b      	add	r3, r1
 800f862:	429d      	cmp	r5, r3
 800f864:	6045      	str	r5, [r0, #4]
 800f866:	bf04      	itt	eq
 800f868:	686b      	ldreq	r3, [r5, #4]
 800f86a:	6043      	streq	r3, [r0, #4]
 800f86c:	2314      	movs	r3, #20
 800f86e:	fb03 1102 	mla	r1, r3, r2, r1
 800f872:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800f874:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	6023      	str	r3, [r4, #0]
 800f87a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800f87c:	6820      	ldr	r0, [r4, #0]
}
 800f87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800f882:	f7ff bf79 	b.w	800f778 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f886:	b942      	cbnz	r2, 800f89a <vTaskSwitchContext+0x6e>
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	e7fe      	b.n	800f898 <vTaskSwitchContext+0x6c>
 800f89a:	3a01      	subs	r2, #1
 800f89c:	e7d8      	b.n	800f850 <vTaskSwitchContext+0x24>
 800f89e:	bf00      	nop
 800f8a0:	2400f080 	.word	0x2400f080
 800f8a4:	2400f104 	.word	0x2400f104
 800f8a8:	2400ec0c 	.word	0x2400ec0c
 800f8ac:	2400f088 	.word	0x2400f088
 800f8b0:	2400ec18 	.word	0x2400ec18

0800f8b4 <vTaskPlaceOnEventList>:
{
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800f8b8:	b940      	cbnz	r0, 800f8cc <vTaskPlaceOnEventList+0x18>
 800f8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	e7fe      	b.n	800f8ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f8cc:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <vTaskPlaceOnEventList+0x30>)
 800f8ce:	6819      	ldr	r1, [r3, #0]
 800f8d0:	3118      	adds	r1, #24
 800f8d2:	f7fe fd91 	bl	800e3f8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	2101      	movs	r1, #1
}
 800f8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f8de:	f7ff bcd7 	b.w	800f290 <prvAddCurrentTaskToDelayedList>
 800f8e2:	bf00      	nop
 800f8e4:	2400ec0c 	.word	0x2400ec0c

0800f8e8 <vTaskPlaceOnEventListRestricted>:
	{
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800f8ee:	b940      	cbnz	r0, 800f902 <vTaskPlaceOnEventListRestricted+0x1a>
 800f8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	e7fe      	b.n	800f900 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f902:	4b07      	ldr	r3, [pc, #28]	; (800f920 <vTaskPlaceOnEventListRestricted+0x38>)
 800f904:	6819      	ldr	r1, [r3, #0]
 800f906:	3118      	adds	r1, #24
 800f908:	f7fe fd6a 	bl	800e3e0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800f90c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f90e:	4621      	mov	r1, r4
 800f910:	bf0c      	ite	eq
 800f912:	4628      	moveq	r0, r5
 800f914:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800f918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f91c:	f7ff bcb8 	b.w	800f290 <prvAddCurrentTaskToDelayedList>
 800f920:	2400ec0c 	.word	0x2400ec0c

0800f924 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f924:	68c3      	ldr	r3, [r0, #12]
{
 800f926:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f928:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f92a:	b944      	cbnz	r4, 800f93e <xTaskRemoveFromEventList+0x1a>
 800f92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f930:	f383 8811 	msr	BASEPRI, r3
 800f934:	f3bf 8f6f 	isb	sy
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	e7fe      	b.n	800f93c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f93e:	f104 0118 	add.w	r1, r4, #24
 800f942:	4608      	mov	r0, r1
 800f944:	9101      	str	r1, [sp, #4]
 800f946:	f7fe fd6e 	bl	800e426 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f94a:	4b12      	ldr	r3, [pc, #72]	; (800f994 <xTaskRemoveFromEventList+0x70>)
 800f94c:	9901      	ldr	r1, [sp, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	b9e3      	cbnz	r3, 800f98c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f952:	1d21      	adds	r1, r4, #4
 800f954:	4608      	mov	r0, r1
 800f956:	9101      	str	r1, [sp, #4]
 800f958:	f7fe fd65 	bl	800e426 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f95c:	4a0e      	ldr	r2, [pc, #56]	; (800f998 <xTaskRemoveFromEventList+0x74>)
 800f95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f960:	6810      	ldr	r0, [r2, #0]
 800f962:	9901      	ldr	r1, [sp, #4]
 800f964:	4283      	cmp	r3, r0
 800f966:	d900      	bls.n	800f96a <xTaskRemoveFromEventList+0x46>
 800f968:	6013      	str	r3, [r2, #0]
 800f96a:	4a0c      	ldr	r2, [pc, #48]	; (800f99c <xTaskRemoveFromEventList+0x78>)
 800f96c:	2014      	movs	r0, #20
 800f96e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f972:	f7fe fd35 	bl	800e3e0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f976:	4b0a      	ldr	r3, [pc, #40]	; (800f9a0 <xTaskRemoveFromEventList+0x7c>)
 800f978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97e:	429a      	cmp	r2, r3
 800f980:	d906      	bls.n	800f990 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800f982:	2001      	movs	r0, #1
 800f984:	4b07      	ldr	r3, [pc, #28]	; (800f9a4 <xTaskRemoveFromEventList+0x80>)
 800f986:	6018      	str	r0, [r3, #0]
}
 800f988:	b002      	add	sp, #8
 800f98a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f98c:	4806      	ldr	r0, [pc, #24]	; (800f9a8 <xTaskRemoveFromEventList+0x84>)
 800f98e:	e7f0      	b.n	800f972 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800f990:	2000      	movs	r0, #0
	return xReturn;
 800f992:	e7f9      	b.n	800f988 <xTaskRemoveFromEventList+0x64>
 800f994:	2400f080 	.word	0x2400f080
 800f998:	2400f088 	.word	0x2400f088
 800f99c:	2400ec18 	.word	0x2400ec18
 800f9a0:	2400ec0c 	.word	0x2400ec0c
 800f9a4:	2400f104 	.word	0x2400f104
 800f9a8:	2400f0c0 	.word	0x2400f0c0

0800f9ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f9ac:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <vTaskInternalSetTimeOutState+0x10>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f9b2:	4b03      	ldr	r3, [pc, #12]	; (800f9c0 <vTaskInternalSetTimeOutState+0x14>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	6043      	str	r3, [r0, #4]
}
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	2400f0b8 	.word	0x2400f0b8
 800f9c0:	2400f100 	.word	0x2400f100

0800f9c4 <xTaskCheckForTimeOut>:
{
 800f9c4:	b570      	push	{r4, r5, r6, lr}
 800f9c6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800f9c8:	4605      	mov	r5, r0
 800f9ca:	b940      	cbnz	r0, 800f9de <xTaskCheckForTimeOut+0x1a>
 800f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	e7fe      	b.n	800f9dc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800f9de:	b941      	cbnz	r1, 800f9f2 <xTaskCheckForTimeOut+0x2e>
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	e7fe      	b.n	800f9f0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800f9f2:	f7fe fd8f 	bl	800e514 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f9f6:	4b0f      	ldr	r3, [pc, #60]	; (800fa34 <xTaskCheckForTimeOut+0x70>)
 800f9f8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	1c5a      	adds	r2, r3, #1
 800f9fe:	d010      	beq.n	800fa22 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa00:	480d      	ldr	r0, [pc, #52]	; (800fa38 <xTaskCheckForTimeOut+0x74>)
 800fa02:	682e      	ldr	r6, [r5, #0]
 800fa04:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa06:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fa08:	4286      	cmp	r6, r0
 800fa0a:	d001      	beq.n	800fa10 <xTaskCheckForTimeOut+0x4c>
 800fa0c:	428a      	cmp	r2, r1
 800fa0e:	d90f      	bls.n	800fa30 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fa10:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fa12:	4283      	cmp	r3, r0
 800fa14:	d90a      	bls.n	800fa2c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800fa16:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa18:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800fa1a:	4413      	add	r3, r2
 800fa1c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fa1e:	f7ff ffc5 	bl	800f9ac <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800fa22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fa24:	f7fe fd96 	bl	800e554 <vPortExitCritical>
}
 800fa28:	4620      	mov	r0, r4
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800fa30:	2401      	movs	r4, #1
 800fa32:	e7f7      	b.n	800fa24 <xTaskCheckForTimeOut+0x60>
 800fa34:	2400f100 	.word	0x2400f100
 800fa38:	2400f0b8 	.word	0x2400f0b8

0800fa3c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fa3c:	4b01      	ldr	r3, [pc, #4]	; (800fa44 <vTaskMissedYield+0x8>)
 800fa3e:	2201      	movs	r2, #1
 800fa40:	601a      	str	r2, [r3, #0]
}
 800fa42:	4770      	bx	lr
 800fa44:	2400f104 	.word	0x2400f104

0800fa48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fa48:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <xTaskGetSchedulerState+0x18>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	b133      	cbz	r3, 800fa5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa4e:	4b05      	ldr	r3, [pc, #20]	; (800fa64 <xTaskGetSchedulerState+0x1c>)
 800fa50:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	bf0c      	ite	eq
 800fa56:	2002      	moveq	r0, #2
 800fa58:	2000      	movne	r0, #0
 800fa5a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa5c:	2001      	movs	r0, #1
	}
 800fa5e:	4770      	bx	lr
 800fa60:	2400f0d4 	.word	0x2400f0d4
 800fa64:	2400f080 	.word	0x2400f080

0800fa68 <xTaskPriorityInherit>:
	{
 800fa68:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	b340      	cbz	r0, 800fac0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa6e:	4d1b      	ldr	r5, [pc, #108]	; (800fadc <xTaskPriorityInherit+0x74>)
 800fa70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fa72:	682a      	ldr	r2, [r5, #0]
 800fa74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d228      	bcs.n	800facc <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa7a:	6982      	ldr	r2, [r0, #24]
 800fa7c:	2a00      	cmp	r2, #0
 800fa7e:	db04      	blt.n	800fa8a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa80:	682a      	ldr	r2, [r5, #0]
 800fa82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fa84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800fa88:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa8a:	2214      	movs	r2, #20
 800fa8c:	4e14      	ldr	r6, [pc, #80]	; (800fae0 <xTaskPriorityInherit+0x78>)
 800fa8e:	fb02 6303 	mla	r3, r2, r3, r6
 800fa92:	6962      	ldr	r2, [r4, #20]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d115      	bne.n	800fac4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa98:	1d21      	adds	r1, r4, #4
 800fa9a:	4608      	mov	r0, r1
 800fa9c:	9101      	str	r1, [sp, #4]
 800fa9e:	f7fe fcc2 	bl	800e426 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faa2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800faa4:	4a0f      	ldr	r2, [pc, #60]	; (800fae4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800faa8:	6810      	ldr	r0, [r2, #0]
 800faaa:	9901      	ldr	r1, [sp, #4]
 800faac:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faae:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fab0:	d900      	bls.n	800fab4 <xTaskPriorityInherit+0x4c>
 800fab2:	6013      	str	r3, [r2, #0]
 800fab4:	2014      	movs	r0, #20
 800fab6:	fb00 6003 	mla	r0, r0, r3, r6
 800faba:	f7fe fc91 	bl	800e3e0 <vListInsertEnd>
				xReturn = pdTRUE;
 800fabe:	2001      	movs	r0, #1
	}
 800fac0:	b002      	add	sp, #8
 800fac2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800faca:	e7f8      	b.n	800fabe <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800facc:	682b      	ldr	r3, [r5, #0]
 800face:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800fad0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800fad2:	42a0      	cmp	r0, r4
 800fad4:	bf2c      	ite	cs
 800fad6:	2000      	movcs	r0, #0
 800fad8:	2001      	movcc	r0, #1
 800fada:	e7f1      	b.n	800fac0 <xTaskPriorityInherit+0x58>
 800fadc:	2400ec0c 	.word	0x2400ec0c
 800fae0:	2400ec18 	.word	0x2400ec18
 800fae4:	2400f088 	.word	0x2400f088

0800fae8 <xTaskPriorityDisinherit>:
	{
 800fae8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800faea:	b910      	cbnz	r0, 800faf2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800faec:	2000      	movs	r0, #0
	}
 800faee:	b002      	add	sp, #8
 800faf0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800faf2:	4b1c      	ldr	r3, [pc, #112]	; (800fb64 <xTaskPriorityDisinherit+0x7c>)
 800faf4:	681c      	ldr	r4, [r3, #0]
 800faf6:	4284      	cmp	r4, r0
 800faf8:	d008      	beq.n	800fb0c <xTaskPriorityDisinherit+0x24>
 800fafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafe:	f383 8811 	msr	BASEPRI, r3
 800fb02:	f3bf 8f6f 	isb	sy
 800fb06:	f3bf 8f4f 	dsb	sy
 800fb0a:	e7fe      	b.n	800fb0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800fb0e:	b943      	cbnz	r3, 800fb22 <xTaskPriorityDisinherit+0x3a>
 800fb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	e7fe      	b.n	800fb20 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800fb24:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800fb28:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb2a:	4291      	cmp	r1, r2
 800fb2c:	d0de      	beq.n	800faec <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1dc      	bne.n	800faec <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb32:	1d21      	adds	r1, r4, #4
 800fb34:	4608      	mov	r0, r1
 800fb36:	9101      	str	r1, [sp, #4]
 800fb38:	f7fe fc75 	bl	800e426 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800fb3e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb44:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb46:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb48:	4a07      	ldr	r2, [pc, #28]	; (800fb68 <xTaskPriorityDisinherit+0x80>)
 800fb4a:	6810      	ldr	r0, [r2, #0]
 800fb4c:	4283      	cmp	r3, r0
 800fb4e:	d900      	bls.n	800fb52 <xTaskPriorityDisinherit+0x6a>
 800fb50:	6013      	str	r3, [r2, #0]
 800fb52:	4a06      	ldr	r2, [pc, #24]	; (800fb6c <xTaskPriorityDisinherit+0x84>)
 800fb54:	2014      	movs	r0, #20
 800fb56:	fb00 2003 	mla	r0, r0, r3, r2
 800fb5a:	f7fe fc41 	bl	800e3e0 <vListInsertEnd>
					xReturn = pdTRUE;
 800fb5e:	2001      	movs	r0, #1
		return xReturn;
 800fb60:	e7c5      	b.n	800faee <xTaskPriorityDisinherit+0x6>
 800fb62:	bf00      	nop
 800fb64:	2400ec0c 	.word	0x2400ec0c
 800fb68:	2400f088 	.word	0x2400f088
 800fb6c:	2400ec18 	.word	0x2400ec18

0800fb70 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800fb70:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800fb72:	4604      	mov	r4, r0
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d044      	beq.n	800fc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800fb7a:	b942      	cbnz	r2, 800fb8e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800fb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb80:	f383 8811 	msr	BASEPRI, r3
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	f3bf 8f4f 	dsb	sy
 800fb8c:	e7fe      	b.n	800fb8c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fb8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fb90:	4299      	cmp	r1, r3
 800fb92:	bf38      	it	cc
 800fb94:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fb96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800fb98:	428b      	cmp	r3, r1
 800fb9a:	d032      	beq.n	800fc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fb9c:	2a01      	cmp	r2, #1
 800fb9e:	d130      	bne.n	800fc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800fba0:	4a19      	ldr	r2, [pc, #100]	; (800fc08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800fba2:	6812      	ldr	r2, [r2, #0]
 800fba4:	4282      	cmp	r2, r0
 800fba6:	d108      	bne.n	800fbba <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	e7fe      	b.n	800fbb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fbba:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbbc:	4d13      	ldr	r5, [pc, #76]	; (800fc0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fbbe:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbc0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800fbc4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbc6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbca:	bfa8      	it	ge
 800fbcc:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbd0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fbd2:	bfa8      	it	ge
 800fbd4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d113      	bne.n	800fc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fbda:	1d01      	adds	r1, r0, #4
 800fbdc:	4608      	mov	r0, r1
 800fbde:	9101      	str	r1, [sp, #4]
 800fbe0:	f7fe fc21 	bl	800e426 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fbe4:	4a0a      	ldr	r2, [pc, #40]	; (800fc10 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800fbe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fbe8:	6810      	ldr	r0, [r2, #0]
 800fbea:	9901      	ldr	r1, [sp, #4]
 800fbec:	4283      	cmp	r3, r0
 800fbee:	d900      	bls.n	800fbf2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800fbf0:	6013      	str	r3, [r2, #0]
 800fbf2:	2014      	movs	r0, #20
 800fbf4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800fbf8:	b003      	add	sp, #12
 800fbfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800fbfe:	f7fe bbef 	b.w	800e3e0 <vListInsertEnd>
	}
 800fc02:	b003      	add	sp, #12
 800fc04:	bd30      	pop	{r4, r5, pc}
 800fc06:	bf00      	nop
 800fc08:	2400ec0c 	.word	0x2400ec0c
 800fc0c:	2400ec18 	.word	0x2400ec18
 800fc10:	2400f088 	.word	0x2400f088

0800fc14 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800fc14:	4b04      	ldr	r3, [pc, #16]	; (800fc28 <pvTaskIncrementMutexHeldCount+0x14>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	b11a      	cbz	r2, 800fc22 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800fc1a:	6819      	ldr	r1, [r3, #0]
 800fc1c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800fc1e:	3201      	adds	r2, #1
 800fc20:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800fc22:	6818      	ldr	r0, [r3, #0]
	}
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	2400ec0c 	.word	0x2400ec0c

0800fc2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800fc2e:	4c11      	ldr	r4, [pc, #68]	; (800fc74 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800fc30:	f7fe fc70 	bl	800e514 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800fc34:	6825      	ldr	r5, [r4, #0]
 800fc36:	b9bd      	cbnz	r5, 800fc68 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc38:	4f0f      	ldr	r7, [pc, #60]	; (800fc78 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800fc3a:	4e10      	ldr	r6, [pc, #64]	; (800fc7c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	f7fe fbc1 	bl	800e3c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc42:	4630      	mov	r0, r6
 800fc44:	f7fe fbbe 	bl	800e3c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc48:	4b0d      	ldr	r3, [pc, #52]	; (800fc80 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc4a:	4a0e      	ldr	r2, [pc, #56]	; (800fc84 <prvCheckForValidListAndQueue+0x58>)
 800fc4c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800fc4e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc50:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800fc52:	4b0d      	ldr	r3, [pc, #52]	; (800fc88 <prvCheckForValidListAndQueue+0x5c>)
 800fc54:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc56:	4b0d      	ldr	r3, [pc, #52]	; (800fc8c <prvCheckForValidListAndQueue+0x60>)
 800fc58:	9500      	str	r5, [sp, #0]
 800fc5a:	f7fe fe6b 	bl	800e934 <xQueueGenericCreateStatic>
 800fc5e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc60:	b110      	cbz	r0, 800fc68 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc62:	490b      	ldr	r1, [pc, #44]	; (800fc90 <prvCheckForValidListAndQueue+0x64>)
 800fc64:	f7ff fa36 	bl	800f0d4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800fc68:	b003      	add	sp, #12
 800fc6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800fc6e:	f7fe bc71 	b.w	800e554 <vPortExitCritical>
 800fc72:	bf00      	nop
 800fc74:	2400f22c 	.word	0x2400f22c
 800fc78:	2400f1b0 	.word	0x2400f1b0
 800fc7c:	2400f1c4 	.word	0x2400f1c4
 800fc80:	2400f108 	.word	0x2400f108
 800fc84:	2400f110 	.word	0x2400f110
 800fc88:	2400f10c 	.word	0x2400f10c
 800fc8c:	2400f1dc 	.word	0x2400f1dc
 800fc90:	08024cf5 	.word	0x08024cf5

0800fc94 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800fc94:	4291      	cmp	r1, r2
{
 800fc96:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fc98:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc9a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800fc9c:	d80a      	bhi.n	800fcb4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	6983      	ldr	r3, [r0, #24]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d20d      	bcs.n	800fcc2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fca6:	1d01      	adds	r1, r0, #4
 800fca8:	4b07      	ldr	r3, [pc, #28]	; (800fcc8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcaa:	6818      	ldr	r0, [r3, #0]
 800fcac:	f7fe fba4 	bl	800e3f8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fcb0:	2000      	movs	r0, #0
}
 800fcb2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d201      	bcs.n	800fcbc <prvInsertTimerInActiveList+0x28>
 800fcb8:	4299      	cmp	r1, r3
 800fcba:	d202      	bcs.n	800fcc2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcbc:	1d01      	adds	r1, r0, #4
 800fcbe:	4b03      	ldr	r3, [pc, #12]	; (800fccc <prvInsertTimerInActiveList+0x38>)
 800fcc0:	e7f3      	b.n	800fcaa <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800fcc2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800fcc4:	e7f5      	b.n	800fcb2 <prvInsertTimerInActiveList+0x1e>
 800fcc6:	bf00      	nop
 800fcc8:	2400f10c 	.word	0x2400f10c
 800fccc:	2400f108 	.word	0x2400f108

0800fcd0 <xTimerCreateTimerTask>:
{
 800fcd0:	b510      	push	{r4, lr}
 800fcd2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800fcd4:	f7ff ffaa 	bl	800fc2c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fcd8:	4b12      	ldr	r3, [pc, #72]	; (800fd24 <xTimerCreateTimerTask+0x54>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	b1b3      	cbz	r3, 800fd0c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fcde:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fce0:	aa07      	add	r2, sp, #28
 800fce2:	a906      	add	r1, sp, #24
 800fce4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fce6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fcea:	f7fe fa65 	bl	800e1b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fcee:	9b05      	ldr	r3, [sp, #20]
 800fcf0:	9a07      	ldr	r2, [sp, #28]
 800fcf2:	9302      	str	r3, [sp, #8]
 800fcf4:	9b06      	ldr	r3, [sp, #24]
 800fcf6:	490c      	ldr	r1, [pc, #48]	; (800fd28 <xTimerCreateTimerTask+0x58>)
 800fcf8:	9301      	str	r3, [sp, #4]
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	480b      	ldr	r0, [pc, #44]	; (800fd2c <xTimerCreateTimerTask+0x5c>)
 800fcfe:	9300      	str	r3, [sp, #0]
 800fd00:	4623      	mov	r3, r4
 800fd02:	f7ff fbac 	bl	800f45e <xTaskCreateStatic>
 800fd06:	4b0a      	ldr	r3, [pc, #40]	; (800fd30 <xTimerCreateTimerTask+0x60>)
 800fd08:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800fd0a:	b940      	cbnz	r0, 800fd1e <xTimerCreateTimerTask+0x4e>
 800fd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd10:	f383 8811 	msr	BASEPRI, r3
 800fd14:	f3bf 8f6f 	isb	sy
 800fd18:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800fd1c:	e7fe      	b.n	800fd1c <xTimerCreateTimerTask+0x4c>
}
 800fd1e:	2001      	movs	r0, #1
 800fd20:	b008      	add	sp, #32
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	2400f22c 	.word	0x2400f22c
 800fd28:	08024cfa 	.word	0x08024cfa
 800fd2c:	0800fe35 	.word	0x0800fe35
 800fd30:	2400f230 	.word	0x2400f230

0800fd34 <xTimerGenericCommand>:
{
 800fd34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fd36:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800fd38:	4604      	mov	r4, r0
{
 800fd3a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800fd3c:	b940      	cbnz	r0, 800fd50 <xTimerGenericCommand+0x1c>
 800fd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	e7fe      	b.n	800fd4e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800fd50:	4d0c      	ldr	r5, [pc, #48]	; (800fd84 <xTimerGenericCommand+0x50>)
 800fd52:	6828      	ldr	r0, [r5, #0]
 800fd54:	b178      	cbz	r0, 800fd76 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd56:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fd58:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fd5a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fd5e:	dc0c      	bgt.n	800fd7a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd60:	f7ff fe72 	bl	800fa48 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd64:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fd66:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd68:	4669      	mov	r1, sp
 800fd6a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fd6c:	bf0c      	ite	eq
 800fd6e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fd70:	461a      	movne	r2, r3
 800fd72:	f7fe fe94 	bl	800ea9e <xQueueGenericSend>
}
 800fd76:	b004      	add	sp, #16
 800fd78:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	4669      	mov	r1, sp
 800fd7e:	f7fe ff41 	bl	800ec04 <xQueueGenericSendFromISR>
 800fd82:	e7f8      	b.n	800fd76 <xTimerGenericCommand+0x42>
 800fd84:	2400f22c 	.word	0x2400f22c

0800fd88 <prvSampleTimeNow>:
{
 800fd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800fd8c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800fe30 <prvSampleTimeNow+0xa8>
{
 800fd90:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800fd92:	f7ff fbd1 	bl	800f538 <xTaskGetTickCount>
 800fd96:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800fd98:	f8d8 3000 	ldr.w	r3, [r8]
 800fd9c:	4283      	cmp	r3, r0
 800fd9e:	d940      	bls.n	800fe22 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fda0:	4f21      	ldr	r7, [pc, #132]	; (800fe28 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fda2:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	b95a      	cbnz	r2, 800fdc4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800fdac:	4a1f      	ldr	r2, [pc, #124]	; (800fe2c <prvSampleTimeNow+0xa4>)
 800fdae:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fdb0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fdb2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800fdb4:	6039      	str	r1, [r7, #0]
}
 800fdb6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800fdb8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800fdba:	f8c8 5000 	str.w	r5, [r8]
}
 800fdbe:	b004      	add	sp, #16
 800fdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdc4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdc6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdc8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdcc:	1d21      	adds	r1, r4, #4
 800fdce:	4608      	mov	r0, r1
 800fdd0:	9103      	str	r1, [sp, #12]
 800fdd2:	f7fe fb28 	bl	800e426 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdd6:	6a23      	ldr	r3, [r4, #32]
 800fdd8:	4620      	mov	r0, r4
 800fdda:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fddc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fde0:	9903      	ldr	r1, [sp, #12]
 800fde2:	f013 0f04 	tst.w	r3, #4
 800fde6:	d0de      	beq.n	800fda6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fde8:	69a3      	ldr	r3, [r4, #24]
 800fdea:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800fdec:	459a      	cmp	sl, r3
 800fdee:	d205      	bcs.n	800fdfc <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdf0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fdf2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fdf4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdf6:	f7fe faff 	bl	800e3f8 <vListInsert>
 800fdfa:	e7d4      	b.n	800fda6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	4652      	mov	r2, sl
 800fe00:	4620      	mov	r0, r4
 800fe02:	f8cd 9000 	str.w	r9, [sp]
 800fe06:	4619      	mov	r1, r3
 800fe08:	f7ff ff94 	bl	800fd34 <xTimerGenericCommand>
				configASSERT( xResult );
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d1ca      	bne.n	800fda6 <prvSampleTimeNow+0x1e>
 800fe10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe14:	f383 8811 	msr	BASEPRI, r3
 800fe18:	f3bf 8f6f 	isb	sy
 800fe1c:	f3bf 8f4f 	dsb	sy
 800fe20:	e7fe      	b.n	800fe20 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800fe22:	2300      	movs	r3, #0
 800fe24:	e7c7      	b.n	800fdb6 <prvSampleTimeNow+0x2e>
 800fe26:	bf00      	nop
 800fe28:	2400f108 	.word	0x2400f108
 800fe2c:	2400f10c 	.word	0x2400f10c
 800fe30:	2400f1d8 	.word	0x2400f1d8

0800fe34 <prvTimerTask>:
{
 800fe34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe38:	4d6e      	ldr	r5, [pc, #440]	; (800fff4 <prvTimerTask+0x1c0>)
{
 800fe3a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fe3c:	4e6e      	ldr	r6, [pc, #440]	; (800fff8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe3e:	682b      	ldr	r3, [r5, #0]
 800fe40:	f8d3 8000 	ldr.w	r8, [r3]
 800fe44:	f1b8 0f00 	cmp.w	r8, #0
 800fe48:	d035      	beq.n	800feb6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe4a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fe4c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fe4e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800fe52:	f7ff fb69 	bl	800f528 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe56:	a804      	add	r0, sp, #16
 800fe58:	f7ff ff96 	bl	800fd88 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800fe5c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe5e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d169      	bne.n	800ff38 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fe64:	2c00      	cmp	r4, #0
 800fe66:	d14c      	bne.n	800ff02 <prvTimerTask+0xce>
 800fe68:	4540      	cmp	r0, r8
 800fe6a:	d350      	bcc.n	800ff0e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800fe6c:	f7ff fc00 	bl	800f670 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe70:	682b      	ldr	r3, [r5, #0]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe76:	1d38      	adds	r0, r7, #4
 800fe78:	f7fe fad5 	bl	800e426 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe80:	0758      	lsls	r0, r3, #29
 800fe82:	d51a      	bpl.n	800feba <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fe84:	69b9      	ldr	r1, [r7, #24]
 800fe86:	4643      	mov	r3, r8
 800fe88:	464a      	mov	r2, r9
 800fe8a:	4638      	mov	r0, r7
 800fe8c:	4441      	add	r1, r8
 800fe8e:	f7ff ff01 	bl	800fc94 <prvInsertTimerInActiveList>
 800fe92:	b1b0      	cbz	r0, 800fec2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe94:	4623      	mov	r3, r4
 800fe96:	4642      	mov	r2, r8
 800fe98:	4621      	mov	r1, r4
 800fe9a:	4638      	mov	r0, r7
 800fe9c:	9400      	str	r4, [sp, #0]
 800fe9e:	f7ff ff49 	bl	800fd34 <xTimerGenericCommand>
			configASSERT( xResult );
 800fea2:	b970      	cbnz	r0, 800fec2 <prvTimerTask+0x8e>
 800fea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea8:	f383 8811 	msr	BASEPRI, r3
 800feac:	f3bf 8f6f 	isb	sy
 800feb0:	f3bf 8f4f 	dsb	sy
 800feb4:	e7fe      	b.n	800feb4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800feb6:	2401      	movs	r4, #1
 800feb8:	e7cb      	b.n	800fe52 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800feba:	f023 0301 	bic.w	r3, r3, #1
 800febe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fec2:	6a3b      	ldr	r3, [r7, #32]
 800fec4:	4638      	mov	r0, r7
 800fec6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fec8:	2200      	movs	r2, #0
 800feca:	a904      	add	r1, sp, #16
 800fecc:	6830      	ldr	r0, [r6, #0]
 800fece:	f7fe ff4f 	bl	800ed70 <xQueueReceive>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	d0b3      	beq.n	800fe3e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fed6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fed8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800feda:	2b00      	cmp	r3, #0
 800fedc:	db2f      	blt.n	800ff3e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fede:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fee0:	6963      	ldr	r3, [r4, #20]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d132      	bne.n	800ff4c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fee6:	a803      	add	r0, sp, #12
 800fee8:	f7ff ff4e 	bl	800fd88 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800feec:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800feee:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800fef0:	2b09      	cmp	r3, #9
 800fef2:	d8e9      	bhi.n	800fec8 <prvTimerTask+0x94>
 800fef4:	e8df f003 	tbb	[pc, r3]
 800fef8:	572e2e2e 	.word	0x572e2e2e
 800fefc:	2e2e765e 	.word	0x2e2e765e
 800ff00:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff02:	4b3e      	ldr	r3, [pc, #248]	; (800fffc <prvTimerTask+0x1c8>)
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	681c      	ldr	r4, [r3, #0]
 800ff08:	fab4 f484 	clz	r4, r4
 800ff0c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff0e:	4622      	mov	r2, r4
 800ff10:	eba8 0109 	sub.w	r1, r8, r9
 800ff14:	6830      	ldr	r0, [r6, #0]
 800ff16:	f7ff f91a 	bl	800f14e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff1a:	f7ff fba9 	bl	800f670 <xTaskResumeAll>
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d1d2      	bne.n	800fec8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ff22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ff26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ff2e:	f3bf 8f4f 	dsb	sy
 800ff32:	f3bf 8f6f 	isb	sy
 800ff36:	e7c7      	b.n	800fec8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ff38:	f7ff fb9a 	bl	800f670 <xTaskResumeAll>
}
 800ff3c:	e7c4      	b.n	800fec8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ff3e:	9b05      	ldr	r3, [sp, #20]
 800ff40:	9907      	ldr	r1, [sp, #28]
 800ff42:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ff44:	9b04      	ldr	r3, [sp, #16]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	dbbe      	blt.n	800fec8 <prvTimerTask+0x94>
 800ff4a:	e7c8      	b.n	800fede <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff4c:	1d20      	adds	r0, r4, #4
 800ff4e:	f7fe fa6a 	bl	800e426 <uxListRemove>
 800ff52:	e7c8      	b.n	800fee6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff58:	4620      	mov	r0, r4
 800ff5a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ff5c:	f043 0301 	orr.w	r3, r3, #1
 800ff60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ff64:	9b05      	ldr	r3, [sp, #20]
 800ff66:	4419      	add	r1, r3
 800ff68:	f7ff fe94 	bl	800fc94 <prvInsertTimerInActiveList>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d0ab      	beq.n	800fec8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff70:	6a23      	ldr	r3, [r4, #32]
 800ff72:	4620      	mov	r0, r4
 800ff74:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ff7a:	0759      	lsls	r1, r3, #29
 800ff7c:	d5a4      	bpl.n	800fec8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ff7e:	69a2      	ldr	r2, [r4, #24]
 800ff80:	2300      	movs	r3, #0
 800ff82:	9905      	ldr	r1, [sp, #20]
 800ff84:	4620      	mov	r0, r4
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	440a      	add	r2, r1
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	f7ff fed2 	bl	800fd34 <xTimerGenericCommand>
							configASSERT( xResult );
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d199      	bne.n	800fec8 <prvTimerTask+0x94>
 800ff94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	e7fe      	b.n	800ffa4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ffaa:	f023 0301 	bic.w	r3, r3, #1
 800ffae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ffb2:	e789      	b.n	800fec8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ffb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ffb8:	f043 0301 	orr.w	r3, r3, #1
 800ffbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ffc0:	9905      	ldr	r1, [sp, #20]
 800ffc2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ffc4:	b941      	cbnz	r1, 800ffd8 <prvTimerTask+0x1a4>
 800ffc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffca:	f383 8811 	msr	BASEPRI, r3
 800ffce:	f3bf 8f6f 	isb	sy
 800ffd2:	f3bf 8f4f 	dsb	sy
 800ffd6:	e7fe      	b.n	800ffd6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ffd8:	4603      	mov	r3, r0
 800ffda:	4401      	add	r1, r0
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f7ff fe59 	bl	800fc94 <prvInsertTimerInActiveList>
					break;
 800ffe2:	e771      	b.n	800fec8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ffe4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ffe8:	079a      	lsls	r2, r3, #30
 800ffea:	d4de      	bmi.n	800ffaa <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800ffec:	4620      	mov	r0, r4
 800ffee:	f7fe f9ab 	bl	800e348 <vPortFree>
 800fff2:	e769      	b.n	800fec8 <prvTimerTask+0x94>
 800fff4:	2400f108 	.word	0x2400f108
 800fff8:	2400f22c 	.word	0x2400f22c
 800fffc:	2400f10c 	.word	0x2400f10c

08010000 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010000:	8880      	ldrh	r0, [r0, #4]
 8010002:	4770      	bx	lr

08010004 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010004:	b570      	push	{r4, r5, r6, lr}
 8010006:	6803      	ldr	r3, [r0, #0]
 8010008:	460c      	mov	r4, r1
 801000a:	2100      	movs	r1, #0
 801000c:	4605      	mov	r5, r0
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	4798      	blx	r3
 8010012:	4606      	mov	r6, r0
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	4628      	mov	r0, r5
 8010018:	1ba4      	subs	r4, r4, r6
 801001a:	6a1b      	ldr	r3, [r3, #32]
 801001c:	b2a4      	uxth	r4, r4
 801001e:	4798      	blx	r3
 8010020:	fbb4 f0f0 	udiv	r0, r4, r0
 8010024:	bd70      	pop	{r4, r5, r6, pc}

08010026 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010026:	2300      	movs	r3, #0
 8010028:	8083      	strh	r3, [r0, #4]
 801002a:	4770      	bx	lr

0801002c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801002c:	b510      	push	{r4, lr}
 801002e:	6803      	ldr	r3, [r0, #0]
 8010030:	4604      	mov	r4, r0
 8010032:	8881      	ldrh	r1, [r0, #4]
 8010034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010036:	4798      	blx	r3
 8010038:	88a3      	ldrh	r3, [r4, #4]
 801003a:	3301      	adds	r3, #1
 801003c:	80a3      	strh	r3, [r4, #4]
 801003e:	bd10      	pop	{r4, pc}

08010040 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010040:	6803      	ldr	r3, [r0, #0]
 8010042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010044:	4718      	bx	r3

08010046 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8010046:	4770      	bx	lr

08010048 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8010048:	4a02      	ldr	r2, [pc, #8]	; (8010054 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801004a:	6002      	str	r2, [r0, #0]
 801004c:	2200      	movs	r2, #0
 801004e:	8082      	strh	r2, [r0, #4]
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	08024d0c 	.word	0x08024d0c

08010058 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010058:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801005a:	2000      	movs	r0, #0
 801005c:	b12b      	cbz	r3, 801006a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801005e:	b920      	cbnz	r0, 801006a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010060:	1a5a      	subs	r2, r3, r1
 8010062:	699b      	ldr	r3, [r3, #24]
 8010064:	4250      	negs	r0, r2
 8010066:	4150      	adcs	r0, r2
 8010068:	e7f8      	b.n	801005c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801006a:	4770      	bx	lr

0801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801006c:	2300      	movs	r3, #0
 801006e:	6148      	str	r0, [r1, #20]
 8010070:	618b      	str	r3, [r1, #24]
 8010072:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010074:	b913      	cbnz	r3, 801007c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8010076:	6281      	str	r1, [r0, #40]	; 0x28
 8010078:	4770      	bx	lr
 801007a:	4613      	mov	r3, r2
 801007c:	699a      	ldr	r2, [r3, #24]
 801007e:	2a00      	cmp	r2, #0
 8010080:	d1fb      	bne.n	801007a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8010082:	6199      	str	r1, [r3, #24]
 8010084:	4770      	bx	lr

08010086 <_ZN8touchgfx9Container9removeAllEv>:
 8010086:	2200      	movs	r2, #0
 8010088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801008a:	b123      	cbz	r3, 8010096 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801008c:	6999      	ldr	r1, [r3, #24]
 801008e:	6281      	str	r1, [r0, #40]	; 0x28
 8010090:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010094:	e7f8      	b.n	8010088 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010096:	4770      	bx	lr

08010098 <_ZN8touchgfx9Container6unlinkEv>:
 8010098:	2300      	movs	r3, #0
 801009a:	6283      	str	r3, [r0, #40]	; 0x28
 801009c:	4770      	bx	lr

0801009e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801009e:	2200      	movs	r2, #0
 80100a0:	8002      	strh	r2, [r0, #0]
 80100a2:	8042      	strh	r2, [r0, #2]
 80100a4:	8082      	strh	r2, [r0, #4]
 80100a6:	80c2      	strh	r2, [r0, #6]
 80100a8:	4770      	bx	lr

080100aa <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80100aa:	b570      	push	{r4, r5, r6, lr}
 80100ac:	460d      	mov	r5, r1
 80100ae:	4616      	mov	r6, r2
 80100b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80100b2:	b13c      	cbz	r4, 80100c4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80100b4:	6823      	ldr	r3, [r4, #0]
 80100b6:	4620      	mov	r0, r4
 80100b8:	4632      	mov	r2, r6
 80100ba:	4629      	mov	r1, r5
 80100bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100be:	4798      	blx	r3
 80100c0:	69a4      	ldr	r4, [r4, #24]
 80100c2:	e7f6      	b.n	80100b2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80100c4:	bd70      	pop	{r4, r5, r6, pc}

080100c6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80100c6:	b538      	push	{r3, r4, r5, lr}
 80100c8:	460d      	mov	r5, r1
 80100ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80100cc:	b134      	cbz	r4, 80100dc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80100ce:	682b      	ldr	r3, [r5, #0]
 80100d0:	4621      	mov	r1, r4
 80100d2:	4628      	mov	r0, r5
 80100d4:	689b      	ldr	r3, [r3, #8]
 80100d6:	4798      	blx	r3
 80100d8:	69a4      	ldr	r4, [r4, #24]
 80100da:	e7f7      	b.n	80100cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80100dc:	bd38      	pop	{r3, r4, r5, pc}

080100de <_ZN8touchgfx9ContainerD1Ev>:
 80100de:	4770      	bx	lr

080100e0 <_ZN8touchgfx9ContainerD0Ev>:
 80100e0:	b510      	push	{r4, lr}
 80100e2:	4604      	mov	r4, r0
 80100e4:	212c      	movs	r1, #44	; 0x2c
 80100e6:	f011 ffbc 	bl	8022062 <_ZdlPvj>
 80100ea:	4620      	mov	r0, r4
 80100ec:	bd10      	pop	{r4, pc}

080100ee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80100ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80100f0:	b19b      	cbz	r3, 801011a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80100f2:	428b      	cmp	r3, r1
 80100f4:	d109      	bne.n	801010a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80100f6:	699a      	ldr	r2, [r3, #24]
 80100f8:	2100      	movs	r1, #0
 80100fa:	6159      	str	r1, [r3, #20]
 80100fc:	6282      	str	r2, [r0, #40]	; 0x28
 80100fe:	b902      	cbnz	r2, 8010102 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010100:	4770      	bx	lr
 8010102:	6199      	str	r1, [r3, #24]
 8010104:	4770      	bx	lr
 8010106:	4613      	mov	r3, r2
 8010108:	b13a      	cbz	r2, 801011a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801010a:	699a      	ldr	r2, [r3, #24]
 801010c:	428a      	cmp	r2, r1
 801010e:	d1fa      	bne.n	8010106 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010110:	698a      	ldr	r2, [r1, #24]
 8010112:	619a      	str	r2, [r3, #24]
 8010114:	2300      	movs	r3, #0
 8010116:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801011a:	4770      	bx	lr

0801011c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801011c:	b410      	push	{r4}
 801011e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010120:	4604      	mov	r4, r0
 8010122:	b92b      	cbnz	r3, 8010130 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	4611      	mov	r1, r2
 8010128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801012c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801012e:	4718      	bx	r3
 8010130:	b941      	cbnz	r1, 8010144 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010132:	6193      	str	r3, [r2, #24]
 8010134:	6282      	str	r2, [r0, #40]	; 0x28
 8010136:	6154      	str	r4, [r2, #20]
 8010138:	f85d 4b04 	ldr.w	r4, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	4603      	mov	r3, r0
 8010140:	2800      	cmp	r0, #0
 8010142:	d0f9      	beq.n	8010138 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010144:	4299      	cmp	r1, r3
 8010146:	6998      	ldr	r0, [r3, #24]
 8010148:	d1f9      	bne.n	801013e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801014a:	6190      	str	r0, [r2, #24]
 801014c:	618a      	str	r2, [r1, #24]
 801014e:	e7f2      	b.n	8010136 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08010150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8010150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010154:	461f      	mov	r7, r3
 8010156:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801015a:	460d      	mov	r5, r1
 801015c:	4616      	mov	r6, r2
 801015e:	b103      	cbz	r3, 8010162 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8010160:	6038      	str	r0, [r7, #0]
 8010162:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010164:	b314      	cbz	r4, 80101ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8010166:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801016a:	b1eb      	cbz	r3, 80101a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801016c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010170:	428d      	cmp	r5, r1
 8010172:	db19      	blt.n	80101a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010174:	b289      	uxth	r1, r1
 8010176:	8923      	ldrh	r3, [r4, #8]
 8010178:	440b      	add	r3, r1
 801017a:	b21b      	sxth	r3, r3
 801017c:	429d      	cmp	r5, r3
 801017e:	da13      	bge.n	80101a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010180:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8010184:	4296      	cmp	r6, r2
 8010186:	db0f      	blt.n	80101a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010188:	b292      	uxth	r2, r2
 801018a:	8963      	ldrh	r3, [r4, #10]
 801018c:	4413      	add	r3, r2
 801018e:	b21b      	sxth	r3, r3
 8010190:	429e      	cmp	r6, r3
 8010192:	da09      	bge.n	80101a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010194:	6823      	ldr	r3, [r4, #0]
 8010196:	1ab2      	subs	r2, r6, r2
 8010198:	1a69      	subs	r1, r5, r1
 801019a:	4620      	mov	r0, r4
 801019c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80101a0:	b212      	sxth	r2, r2
 80101a2:	463b      	mov	r3, r7
 80101a4:	b209      	sxth	r1, r1
 80101a6:	47c0      	blx	r8
 80101a8:	69a4      	ldr	r4, [r4, #24]
 80101aa:	e7db      	b.n	8010164 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80101ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	4c6d      	ldr	r4, [pc, #436]	; (801036c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80101b6:	b0a1      	sub	sp, #132	; 0x84
 80101b8:	4606      	mov	r6, r0
 80101ba:	6824      	ldr	r4, [r4, #0]
 80101bc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80101be:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80101c2:	2400      	movs	r4, #0
 80101c4:	9303      	str	r3, [sp, #12]
 80101c6:	802c      	strh	r4, [r5, #0]
 80101c8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80101ca:	802c      	strh	r4, [r5, #0]
 80101cc:	601c      	str	r4, [r3, #0]
 80101ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80101d2:	f7ff ffbd 	bl	8010150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80101d6:	f1b9 0f03 	cmp.w	r9, #3
 80101da:	f340 80c1 	ble.w	8010360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80101de:	4631      	mov	r1, r6
 80101e0:	a80c      	add	r0, sp, #48	; 0x30
 80101e2:	f007 fa77 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80101e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80101ea:	9306      	str	r3, [sp, #24]
 80101ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80101f0:	9307      	str	r3, [sp, #28]
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	f8d3 a000 	ldr.w	sl, [r3]
 80101f8:	f1ba 0f00 	cmp.w	sl, #0
 80101fc:	f000 80b3 	beq.w	8010366 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8010200:	4651      	mov	r1, sl
 8010202:	a810      	add	r0, sp, #64	; 0x40
 8010204:	f007 fa66 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010208:	2002      	movs	r0, #2
 801020a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801020e:	9b01      	ldr	r3, [sp, #4]
 8010210:	9a06      	ldr	r2, [sp, #24]
 8010212:	fb91 f1f0 	sdiv	r1, r1, r0
 8010216:	189d      	adds	r5, r3, r2
 8010218:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801021c:	9a07      	ldr	r2, [sp, #28]
 801021e:	4419      	add	r1, r3
 8010220:	9b02      	ldr	r3, [sp, #8]
 8010222:	4413      	add	r3, r2
 8010224:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8010228:	1a6d      	subs	r5, r5, r1
 801022a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801022e:	fb92 f2f0 	sdiv	r2, r2, r0
 8010232:	440a      	add	r2, r1
 8010234:	1a9b      	subs	r3, r3, r2
 8010236:	435b      	muls	r3, r3
 8010238:	fb05 3505 	mla	r5, r5, r5, r3
 801023c:	4f4c      	ldr	r7, [pc, #304]	; (8010370 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801023e:	ac10      	add	r4, sp, #64	; 0x40
 8010240:	f1b9 0f0c 	cmp.w	r9, #12
 8010244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010248:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801024c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010250:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8010254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010258:	f04f 0303 	mov.w	r3, #3
 801025c:	bfd8      	it	le
 801025e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8010262:	f04f 0400 	mov.w	r4, #0
 8010266:	f8cd 9000 	str.w	r9, [sp]
 801026a:	bfcc      	ite	gt
 801026c:	4698      	movgt	r8, r3
 801026e:	fb92 f8f3 	sdivle	r8, r2, r3
 8010272:	1c63      	adds	r3, r4, #1
 8010274:	aa10      	add	r2, sp, #64	; 0x40
 8010276:	f004 0401 	and.w	r4, r4, #1
 801027a:	f04f 0b00 	mov.w	fp, #0
 801027e:	9308      	str	r3, [sp, #32]
 8010280:	9b00      	ldr	r3, [sp, #0]
 8010282:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8010286:	fb93 f3f8 	sdiv	r3, r3, r8
 801028a:	3404      	adds	r4, #4
 801028c:	b29b      	uxth	r3, r3
 801028e:	9304      	str	r3, [sp, #16]
 8010290:	9a04      	ldr	r2, [sp, #16]
 8010292:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010296:	fb13 f302 	smulbb	r3, r3, r2
 801029a:	9a01      	ldr	r2, [sp, #4]
 801029c:	b29b      	uxth	r3, r3
 801029e:	1899      	adds	r1, r3, r2
 80102a0:	9305      	str	r3, [sp, #20]
 80102a2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80102a6:	b209      	sxth	r1, r1
 80102a8:	4299      	cmp	r1, r3
 80102aa:	db4d      	blt.n	8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102ac:	8932      	ldrh	r2, [r6, #8]
 80102ae:	4413      	add	r3, r2
 80102b0:	b21b      	sxth	r3, r3
 80102b2:	4299      	cmp	r1, r3
 80102b4:	da48      	bge.n	8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102b6:	9b04      	ldr	r3, [sp, #16]
 80102b8:	6827      	ldr	r7, [r4, #0]
 80102ba:	fb17 f703 	smulbb	r7, r7, r3
 80102be:	9b02      	ldr	r3, [sp, #8]
 80102c0:	b2bf      	uxth	r7, r7
 80102c2:	18fa      	adds	r2, r7, r3
 80102c4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80102c8:	b212      	sxth	r2, r2
 80102ca:	429a      	cmp	r2, r3
 80102cc:	db3c      	blt.n	8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102ce:	8970      	ldrh	r0, [r6, #10]
 80102d0:	4403      	add	r3, r0
 80102d2:	b21b      	sxth	r3, r3
 80102d4:	429a      	cmp	r2, r3
 80102d6:	da37      	bge.n	8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102d8:	2300      	movs	r3, #0
 80102da:	4630      	mov	r0, r6
 80102dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80102de:	ab0b      	add	r3, sp, #44	; 0x2c
 80102e0:	f7ff ff36 	bl	8010150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80102e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80102e6:	b37a      	cbz	r2, 8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102e8:	4552      	cmp	r2, sl
 80102ea:	d02d      	beq.n	8010348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80102ec:	4611      	mov	r1, r2
 80102ee:	a80e      	add	r0, sp, #56	; 0x38
 80102f0:	9209      	str	r2, [sp, #36]	; 0x24
 80102f2:	f007 f9ef 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80102f6:	f04f 0e02 	mov.w	lr, #2
 80102fa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80102fe:	9a06      	ldr	r2, [sp, #24]
 8010300:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8010304:	9b01      	ldr	r3, [sp, #4]
 8010306:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801030a:	4413      	add	r3, r2
 801030c:	9a07      	ldr	r2, [sp, #28]
 801030e:	fb91 f1fe 	sdiv	r1, r1, lr
 8010312:	fb9c fcfe 	sdiv	ip, ip, lr
 8010316:	4401      	add	r1, r0
 8010318:	1a58      	subs	r0, r3, r1
 801031a:	9b02      	ldr	r3, [sp, #8]
 801031c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8010320:	4413      	add	r3, r2
 8010322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010324:	448c      	add	ip, r1
 8010326:	eba3 030c 	sub.w	r3, r3, ip
 801032a:	435b      	muls	r3, r3
 801032c:	fb00 3300 	mla	r3, r0, r0, r3
 8010330:	42ab      	cmp	r3, r5
 8010332:	d208      	bcs.n	8010346 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8010334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010336:	461d      	mov	r5, r3
 8010338:	9803      	ldr	r0, [sp, #12]
 801033a:	6001      	str	r1, [r0, #0]
 801033c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801033e:	9805      	ldr	r0, [sp, #20]
 8010340:	8008      	strh	r0, [r1, #0]
 8010342:	992b      	ldr	r1, [sp, #172]	; 0xac
 8010344:	800f      	strh	r7, [r1, #0]
 8010346:	4692      	mov	sl, r2
 8010348:	f10b 0b01 	add.w	fp, fp, #1
 801034c:	3408      	adds	r4, #8
 801034e:	f1bb 0f04 	cmp.w	fp, #4
 8010352:	d19d      	bne.n	8010290 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8010354:	9b00      	ldr	r3, [sp, #0]
 8010356:	9c08      	ldr	r4, [sp, #32]
 8010358:	444b      	add	r3, r9
 801035a:	4544      	cmp	r4, r8
 801035c:	9300      	str	r3, [sp, #0]
 801035e:	d188      	bne.n	8010272 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8010360:	b021      	add	sp, #132	; 0x84
 8010362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010366:	f04f 35ff 	mov.w	r5, #4294967295
 801036a:	e767      	b.n	801023c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801036c:	2400f240 	.word	0x2400f240
 8010370:	08023478 	.word	0x08023478

08010374 <_ZN8touchgfx4RectaNERKS0_>:
 8010374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010378:	f9b1 7000 	ldrsh.w	r7, [r1]
 801037c:	888c      	ldrh	r4, [r1, #4]
 801037e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010382:	443c      	add	r4, r7
 8010384:	b2a4      	uxth	r4, r4
 8010386:	fa0f f884 	sxth.w	r8, r4
 801038a:	45c1      	cmp	r9, r8
 801038c:	da2f      	bge.n	80103ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801038e:	8882      	ldrh	r2, [r0, #4]
 8010390:	444a      	add	r2, r9
 8010392:	b292      	uxth	r2, r2
 8010394:	fa0f fe82 	sxth.w	lr, r2
 8010398:	4577      	cmp	r7, lr
 801039a:	da28      	bge.n	80103ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801039c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80103a0:	88cb      	ldrh	r3, [r1, #6]
 80103a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80103a6:	442b      	add	r3, r5
 80103a8:	b21b      	sxth	r3, r3
 80103aa:	429e      	cmp	r6, r3
 80103ac:	da1f      	bge.n	80103ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80103ae:	88c3      	ldrh	r3, [r0, #6]
 80103b0:	4433      	add	r3, r6
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	fa0f fc83 	sxth.w	ip, r3
 80103b8:	4565      	cmp	r5, ip
 80103ba:	da18      	bge.n	80103ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80103bc:	454f      	cmp	r7, r9
 80103be:	bfb8      	it	lt
 80103c0:	464f      	movlt	r7, r9
 80103c2:	42b5      	cmp	r5, r6
 80103c4:	bfb8      	it	lt
 80103c6:	4635      	movlt	r5, r6
 80103c8:	45f0      	cmp	r8, lr
 80103ca:	bfd8      	it	le
 80103cc:	4622      	movle	r2, r4
 80103ce:	1bd2      	subs	r2, r2, r7
 80103d0:	8082      	strh	r2, [r0, #4]
 80103d2:	884a      	ldrh	r2, [r1, #2]
 80103d4:	88c9      	ldrh	r1, [r1, #6]
 80103d6:	8007      	strh	r7, [r0, #0]
 80103d8:	440a      	add	r2, r1
 80103da:	8045      	strh	r5, [r0, #2]
 80103dc:	b292      	uxth	r2, r2
 80103de:	b211      	sxth	r1, r2
 80103e0:	458c      	cmp	ip, r1
 80103e2:	bfa8      	it	ge
 80103e4:	4613      	movge	r3, r2
 80103e6:	1b5b      	subs	r3, r3, r5
 80103e8:	80c3      	strh	r3, [r0, #6]
 80103ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ee:	2300      	movs	r3, #0
 80103f0:	8003      	strh	r3, [r0, #0]
 80103f2:	8043      	strh	r3, [r0, #2]
 80103f4:	8083      	strh	r3, [r0, #4]
 80103f6:	80c3      	strh	r3, [r0, #6]
 80103f8:	e7f7      	b.n	80103ea <_ZN8touchgfx4RectaNERKS0_+0x76>

080103fa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80103fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	dd06      	ble.n	8010410 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8010402:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8010406:	2800      	cmp	r0, #0
 8010408:	bfcc      	ite	gt
 801040a:	2000      	movgt	r0, #0
 801040c:	2001      	movle	r0, #1
 801040e:	4770      	bx	lr
 8010410:	2001      	movs	r0, #1
 8010412:	4770      	bx	lr

08010414 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8010414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010418:	2300      	movs	r3, #0
 801041a:	4604      	mov	r4, r0
 801041c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801041e:	8003      	strh	r3, [r0, #0]
 8010420:	8043      	strh	r3, [r0, #2]
 8010422:	8083      	strh	r3, [r0, #4]
 8010424:	80c3      	strh	r3, [r0, #6]
 8010426:	2d00      	cmp	r5, #0
 8010428:	d040      	beq.n	80104ac <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801042a:	1d28      	adds	r0, r5, #4
 801042c:	f7ff ffe5 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8010430:	b988      	cbnz	r0, 8010456 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010432:	4620      	mov	r0, r4
 8010434:	f7ff ffe1 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8010438:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801043c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010440:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8010444:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8010448:	b138      	cbz	r0, 801045a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801044a:	8022      	strh	r2, [r4, #0]
 801044c:	8063      	strh	r3, [r4, #2]
 801044e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010452:	f8a4 c006 	strh.w	ip, [r4, #6]
 8010456:	69ad      	ldr	r5, [r5, #24]
 8010458:	e7e5      	b.n	8010426 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801045a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801045e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010462:	4290      	cmp	r0, r2
 8010464:	4607      	mov	r7, r0
 8010466:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801046a:	460e      	mov	r6, r1
 801046c:	bfa8      	it	ge
 801046e:	4617      	movge	r7, r2
 8010470:	4299      	cmp	r1, r3
 8010472:	4472      	add	r2, lr
 8010474:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010478:	bfa8      	it	ge
 801047a:	461e      	movge	r6, r3
 801047c:	4440      	add	r0, r8
 801047e:	4471      	add	r1, lr
 8010480:	4463      	add	r3, ip
 8010482:	b200      	sxth	r0, r0
 8010484:	8027      	strh	r7, [r4, #0]
 8010486:	b212      	sxth	r2, r2
 8010488:	8066      	strh	r6, [r4, #2]
 801048a:	b209      	sxth	r1, r1
 801048c:	b21b      	sxth	r3, r3
 801048e:	4290      	cmp	r0, r2
 8010490:	bfac      	ite	ge
 8010492:	ebc7 0200 	rsbge	r2, r7, r0
 8010496:	ebc7 0202 	rsblt	r2, r7, r2
 801049a:	4299      	cmp	r1, r3
 801049c:	bfac      	ite	ge
 801049e:	ebc6 0301 	rsbge	r3, r6, r1
 80104a2:	ebc6 0303 	rsblt	r3, r6, r3
 80104a6:	80a2      	strh	r2, [r4, #4]
 80104a8:	80e3      	strh	r3, [r4, #6]
 80104aa:	e7d4      	b.n	8010456 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80104ac:	4620      	mov	r0, r4
 80104ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080104b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80104b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80104b6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80104ba:	b383      	cbz	r3, 801051e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80104bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80104be:	b374      	cbz	r4, 801051e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80104c0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80104c4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80104c8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80104cc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80104d0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80104d4:	b303      	cbz	r3, 8010518 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80104d6:	4668      	mov	r0, sp
 80104d8:	1d21      	adds	r1, r4, #4
 80104da:	f8ad 5000 	strh.w	r5, [sp]
 80104de:	f8ad 6002 	strh.w	r6, [sp, #2]
 80104e2:	f8ad 7004 	strh.w	r7, [sp, #4]
 80104e6:	f8ad 8006 	strh.w	r8, [sp, #6]
 80104ea:	f7ff ff43 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 80104ee:	4668      	mov	r0, sp
 80104f0:	f7ff ff83 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80104f4:	b980      	cbnz	r0, 8010518 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80104f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80104fa:	4669      	mov	r1, sp
 80104fc:	88a2      	ldrh	r2, [r4, #4]
 80104fe:	4620      	mov	r0, r4
 8010500:	1a9b      	subs	r3, r3, r2
 8010502:	88e2      	ldrh	r2, [r4, #6]
 8010504:	f8ad 3000 	strh.w	r3, [sp]
 8010508:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801050c:	1a9b      	subs	r3, r3, r2
 801050e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	4798      	blx	r3
 8010518:	69a4      	ldr	r4, [r4, #24]
 801051a:	2c00      	cmp	r4, #0
 801051c:	d1d8      	bne.n	80104d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801051e:	b002      	add	sp, #8
 8010520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8010524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010526:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801052a:	460d      	mov	r5, r1
 801052c:	4616      	mov	r6, r2
 801052e:	b323      	cbz	r3, 801057a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010530:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010532:	b314      	cbz	r4, 801057a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8010534:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8010538:	b1eb      	cbz	r3, 8010576 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801053a:	6828      	ldr	r0, [r5, #0]
 801053c:	466b      	mov	r3, sp
 801053e:	6869      	ldr	r1, [r5, #4]
 8010540:	c303      	stmia	r3!, {r0, r1}
 8010542:	4668      	mov	r0, sp
 8010544:	1d21      	adds	r1, r4, #4
 8010546:	f7ff ff15 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801054a:	4668      	mov	r0, sp
 801054c:	f7ff ff55 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8010550:	b988      	cbnz	r0, 8010576 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010552:	f8bd 3000 	ldrh.w	r3, [sp]
 8010556:	4669      	mov	r1, sp
 8010558:	88a2      	ldrh	r2, [r4, #4]
 801055a:	4620      	mov	r0, r4
 801055c:	1a9b      	subs	r3, r3, r2
 801055e:	88e2      	ldrh	r2, [r4, #6]
 8010560:	f8ad 3000 	strh.w	r3, [sp]
 8010564:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010568:	1a9b      	subs	r3, r3, r2
 801056a:	4632      	mov	r2, r6
 801056c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010570:	6823      	ldr	r3, [r4, #0]
 8010572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010574:	4798      	blx	r3
 8010576:	69a4      	ldr	r4, [r4, #24]
 8010578:	e7db      	b.n	8010532 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801057a:	b002      	add	sp, #8
 801057c:	bd70      	pop	{r4, r5, r6, pc}

0801057e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801057e:	6803      	ldr	r3, [r0, #0]
 8010580:	b513      	push	{r0, r1, r4, lr}
 8010582:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8010586:	2300      	movs	r3, #0
 8010588:	e9cd 3300 	strd	r3, r3, [sp]
 801058c:	466b      	mov	r3, sp
 801058e:	47a0      	blx	r4
 8010590:	b002      	add	sp, #8
 8010592:	bd10      	pop	{r4, pc}

08010594 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010594:	2301      	movs	r3, #1
 8010596:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801059a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801059e:	4770      	bx	lr

080105a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80105a0:	2301      	movs	r3, #1
 80105a2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80105a6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80105aa:	4770      	bx	lr

080105ac <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80105ac:	6843      	ldr	r3, [r0, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	725a      	strb	r2, [r3, #9]
 80105b2:	6840      	ldr	r0, [r0, #4]
 80105b4:	6803      	ldr	r3, [r0, #0]
 80105b6:	691b      	ldr	r3, [r3, #16]
 80105b8:	4718      	bx	r3

080105ba <_ZN8touchgfx3HAL8flushDMAEv>:
 80105ba:	6840      	ldr	r0, [r0, #4]
 80105bc:	6803      	ldr	r3, [r0, #0]
 80105be:	689b      	ldr	r3, [r3, #8]
 80105c0:	4718      	bx	r3

080105c2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80105c2:	b530      	push	{r4, r5, lr}
 80105c4:	b08b      	sub	sp, #44	; 0x2c
 80105c6:	6804      	ldr	r4, [r0, #0]
 80105c8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80105cc:	9509      	str	r5, [sp, #36]	; 0x24
 80105ce:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80105d2:	9508      	str	r5, [sp, #32]
 80105d4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80105d8:	9507      	str	r5, [sp, #28]
 80105da:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80105de:	9506      	str	r5, [sp, #24]
 80105e0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80105e4:	9505      	str	r5, [sp, #20]
 80105e6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 80105ea:	9504      	str	r5, [sp, #16]
 80105ec:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80105f0:	9503      	str	r5, [sp, #12]
 80105f2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80105f6:	9502      	str	r5, [sp, #8]
 80105f8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80105fc:	e9cd 3500 	strd	r3, r5, [sp]
 8010600:	4613      	mov	r3, r2
 8010602:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8010604:	2200      	movs	r2, #0
 8010606:	47a0      	blx	r4
 8010608:	b00b      	add	sp, #44	; 0x2c
 801060a:	bd30      	pop	{r4, r5, pc}

0801060c <_ZN8touchgfx3HAL10beginFrameEv>:
 801060c:	4b04      	ldr	r3, [pc, #16]	; (8010620 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	b123      	cbz	r3, 801061c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8010612:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010616:	f080 0001 	eor.w	r0, r0, #1
 801061a:	4770      	bx	lr
 801061c:	2001      	movs	r0, #1
 801061e:	4770      	bx	lr
 8010620:	2400f23e 	.word	0x2400f23e

08010624 <_ZN8touchgfx3HAL8endFrameEv>:
 8010624:	b510      	push	{r4, lr}
 8010626:	4604      	mov	r4, r0
 8010628:	6840      	ldr	r0, [r0, #4]
 801062a:	6803      	ldr	r3, [r0, #0]
 801062c:	689b      	ldr	r3, [r3, #8]
 801062e:	4798      	blx	r3
 8010630:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8010634:	b113      	cbz	r3, 801063c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8010636:	2301      	movs	r3, #1
 8010638:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801063c:	bd10      	pop	{r4, pc}

0801063e <_ZN8touchgfx3HAL10initializeEv>:
 801063e:	b510      	push	{r4, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	f7f1 fc09 	bl	8001e58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8010646:	f7f1 f91b 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
 801064a:	6860      	ldr	r0, [r4, #4]
 801064c:	6803      	ldr	r3, [r0, #0]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	4798      	blx	r3
 8010652:	68e0      	ldr	r0, [r4, #12]
 8010654:	6803      	ldr	r3, [r0, #0]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	4798      	blx	r3
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	4620      	mov	r0, r4
 801065e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010664:	4718      	bx	r3
	...

08010668 <_ZN8touchgfx3HAL4tickEv>:
 8010668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801066a:	6803      	ldr	r3, [r0, #0]
 801066c:	4604      	mov	r4, r0
 801066e:	4d5b      	ldr	r5, [pc, #364]	; (80107dc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010674:	4798      	blx	r3
 8010676:	2800      	cmp	r0, #0
 8010678:	f000 8095 	beq.w	80107a6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801067c:	2001      	movs	r0, #1
 801067e:	2600      	movs	r6, #0
 8010680:	f7f1 f864 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010684:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8010688:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801068c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010690:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8010694:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8010698:	b133      	cbz	r3, 80106a8 <_ZN8touchgfx3HAL4tickEv+0x40>
 801069a:	6823      	ldr	r3, [r4, #0]
 801069c:	4620      	mov	r0, r4
 801069e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80106a2:	4798      	blx	r3
 80106a4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80106a8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80106ac:	2601      	movs	r6, #1
 80106ae:	6862      	ldr	r2, [r4, #4]
 80106b0:	f083 0301 	eor.w	r3, r3, #1
 80106b4:	702e      	strb	r6, [r5, #0]
 80106b6:	7253      	strb	r3, [r2, #9]
 80106b8:	f005 ff2c 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
 80106bc:	6803      	ldr	r3, [r0, #0]
 80106be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c0:	4798      	blx	r3
 80106c2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80106c6:	b90b      	cbnz	r3, 80106cc <_ZN8touchgfx3HAL4tickEv+0x64>
 80106c8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 80106cc:	f005 ff22 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
 80106d0:	6803      	ldr	r3, [r0, #0]
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	4798      	blx	r3
 80106d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106d8:	6803      	ldr	r3, [r0, #0]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	4798      	blx	r3
 80106de:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80106e2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80106e6:	3b01      	subs	r3, #1
 80106e8:	b2db      	uxtb	r3, r3
 80106ea:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80106ee:	b10a      	cbz	r2, 80106f4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1eb      	bne.n	80106cc <_ZN8touchgfx3HAL4tickEv+0x64>
 80106f4:	4a3a      	ldr	r2, [pc, #232]	; (80107e0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80106f6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80106fa:	7813      	ldrb	r3, [r2, #0]
 80106fc:	3301      	adds	r3, #1
 80106fe:	b25b      	sxtb	r3, r3
 8010700:	4299      	cmp	r1, r3
 8010702:	7013      	strb	r3, [r2, #0]
 8010704:	dc10      	bgt.n	8010728 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010706:	2300      	movs	r3, #0
 8010708:	68e0      	ldr	r0, [r4, #12]
 801070a:	a902      	add	r1, sp, #8
 801070c:	7013      	strb	r3, [r2, #0]
 801070e:	aa03      	add	r2, sp, #12
 8010710:	6803      	ldr	r3, [r0, #0]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	4798      	blx	r3
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	2800      	cmp	r0, #0
 801071a:	d050      	beq.n	80107be <_ZN8touchgfx3HAL4tickEv+0x156>
 801071c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010720:	4620      	mov	r0, r4
 8010722:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010726:	4798      	blx	r3
 8010728:	2300      	movs	r3, #0
 801072a:	6960      	ldr	r0, [r4, #20]
 801072c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010730:	b158      	cbz	r0, 801074a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8010732:	6803      	ldr	r3, [r0, #0]
 8010734:	f10d 0107 	add.w	r1, sp, #7
 8010738:	68db      	ldr	r3, [r3, #12]
 801073a:	4798      	blx	r3
 801073c:	b128      	cbz	r0, 801074a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801073e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010740:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010744:	6803      	ldr	r3, [r0, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	4798      	blx	r3
 801074a:	f104 001c 	add.w	r0, r4, #28
 801074e:	f011 f8b1 	bl	80218b4 <_ZN8touchgfx8Gestures4tickEv>
 8010752:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8010756:	b30b      	cbz	r3, 801079c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010758:	6920      	ldr	r0, [r4, #16]
 801075a:	6803      	ldr	r3, [r0, #0]
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	4798      	blx	r3
 8010760:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010762:	4606      	mov	r6, r0
 8010764:	b903      	cbnz	r3, 8010768 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010766:	6720      	str	r0, [r4, #112]	; 0x70
 8010768:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801076a:	4a1e      	ldr	r2, [pc, #120]	; (80107e4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801076c:	1af3      	subs	r3, r6, r3
 801076e:	4293      	cmp	r3, r2
 8010770:	d914      	bls.n	801079c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010772:	6920      	ldr	r0, [r4, #16]
 8010774:	6803      	ldr	r3, [r0, #0]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	4798      	blx	r3
 801077a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801077c:	2264      	movs	r2, #100	; 0x64
 801077e:	1af3      	subs	r3, r6, r3
 8010780:	fbb3 f3f2 	udiv	r3, r3, r2
 8010784:	fbb0 f0f3 	udiv	r0, r0, r3
 8010788:	2800      	cmp	r0, #0
 801078a:	dc1d      	bgt.n	80107c8 <_ZN8touchgfx3HAL4tickEv+0x160>
 801078c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8010790:	6920      	ldr	r0, [r4, #16]
 8010792:	2100      	movs	r1, #0
 8010794:	6803      	ldr	r3, [r0, #0]
 8010796:	69db      	ldr	r3, [r3, #28]
 8010798:	4798      	blx	r3
 801079a:	6726      	str	r6, [r4, #112]	; 0x70
 801079c:	f005 feba 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
 80107a0:	6803      	ldr	r3, [r0, #0]
 80107a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a4:	4798      	blx	r3
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	4620      	mov	r0, r4
 80107aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80107ae:	4798      	blx	r3
 80107b0:	2001      	movs	r0, #1
 80107b2:	f7f0 fffb 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80107b6:	2300      	movs	r3, #0
 80107b8:	702b      	strb	r3, [r5, #0]
 80107ba:	b004      	add	sp, #16
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
 80107be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80107c2:	4620      	mov	r0, r4
 80107c4:	4798      	blx	r3
 80107c6:	e7af      	b.n	8010728 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80107c8:	2863      	cmp	r0, #99	; 0x63
 80107ca:	bfcb      	itete	gt
 80107cc:	2300      	movgt	r3, #0
 80107ce:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 80107d2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 80107d6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 80107da:	e7d9      	b.n	8010790 <_ZN8touchgfx3HAL4tickEv+0x128>
 80107dc:	2400f244 	.word	0x2400f244
 80107e0:	2400f245 	.word	0x2400f245
 80107e4:	05f5e100 	.word	0x05f5e100

080107e8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80107e8:	f7f1 bb66 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080107ec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80107ec:	6581      	str	r1, [r0, #88]	; 0x58
 80107ee:	301c      	adds	r0, #28
 80107f0:	f011 b85e 	b.w	80218b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080107f4 <_ZN8touchgfx3HAL5touchEll>:
 80107f4:	b530      	push	{r4, r5, lr}
 80107f6:	b087      	sub	sp, #28
 80107f8:	4604      	mov	r4, r0
 80107fa:	a804      	add	r0, sp, #16
 80107fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010800:	f005 fcce 	bl	80161a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010804:	9b04      	ldr	r3, [sp, #16]
 8010806:	a906      	add	r1, sp, #24
 8010808:	a803      	add	r0, sp, #12
 801080a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801080e:	9b05      	ldr	r3, [sp, #20]
 8010810:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010814:	f005 fd16 	bl	8016244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8010818:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 801081c:	f104 001c 	add.w	r0, r4, #28
 8010820:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010824:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010828:	b189      	cbz	r1, 801084e <_ZN8touchgfx3HAL5touchEll+0x5a>
 801082a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4613      	mov	r3, r2
 8010832:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8010836:	462a      	mov	r2, r5
 8010838:	f011 f84a 	bl	80218d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801083c:	b128      	cbz	r0, 801084a <_ZN8touchgfx3HAL5touchEll+0x56>
 801083e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010842:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010844:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010848:	6623      	str	r3, [r4, #96]	; 0x60
 801084a:	b007      	add	sp, #28
 801084c:	bd30      	pop	{r4, r5, pc}
 801084e:	f011 f87f 	bl	8021950 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010852:	2301      	movs	r3, #1
 8010854:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010858:	e7f1      	b.n	801083e <_ZN8touchgfx3HAL5touchEll+0x4a>

0801085a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801085a:	b510      	push	{r4, lr}
 801085c:	2b00      	cmp	r3, #0
 801085e:	d046      	beq.n	80108ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010860:	ea81 0002 	eor.w	r0, r1, r2
 8010864:	07c4      	lsls	r4, r0, #31
 8010866:	d508      	bpl.n	801087a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010868:	440b      	add	r3, r1
 801086a:	3a01      	subs	r2, #1
 801086c:	428b      	cmp	r3, r1
 801086e:	d93e      	bls.n	80108ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010870:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010874:	f801 0b01 	strb.w	r0, [r1], #1
 8010878:	e7f8      	b.n	801086c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801087a:	07d0      	lsls	r0, r2, #31
 801087c:	bf42      	ittt	mi
 801087e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8010882:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010886:	f801 0b01 	strbmi.w	r0, [r1], #1
 801088a:	2b01      	cmp	r3, #1
 801088c:	d911      	bls.n	80108b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801088e:	ea81 0402 	eor.w	r4, r1, r2
 8010892:	4610      	mov	r0, r2
 8010894:	07a4      	lsls	r4, r4, #30
 8010896:	d022      	beq.n	80108de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010898:	f023 0401 	bic.w	r4, r3, #1
 801089c:	440c      	add	r4, r1
 801089e:	428c      	cmp	r4, r1
 80108a0:	4602      	mov	r2, r0
 80108a2:	d904      	bls.n	80108ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80108a4:	8812      	ldrh	r2, [r2, #0]
 80108a6:	3002      	adds	r0, #2
 80108a8:	f821 2b02 	strh.w	r2, [r1], #2
 80108ac:	e7f7      	b.n	801089e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80108ae:	f003 0301 	and.w	r3, r3, #1
 80108b2:	f023 0003 	bic.w	r0, r3, #3
 80108b6:	4408      	add	r0, r1
 80108b8:	4288      	cmp	r0, r1
 80108ba:	4614      	mov	r4, r2
 80108bc:	d904      	bls.n	80108c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80108be:	6824      	ldr	r4, [r4, #0]
 80108c0:	3204      	adds	r2, #4
 80108c2:	f841 4b04 	str.w	r4, [r1], #4
 80108c6:	e7f7      	b.n	80108b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80108c8:	f003 0303 	and.w	r3, r3, #3
 80108cc:	3a01      	subs	r2, #1
 80108ce:	440b      	add	r3, r1
 80108d0:	428b      	cmp	r3, r1
 80108d2:	d90c      	bls.n	80108ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80108d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80108d8:	f801 0b01 	strb.w	r0, [r1], #1
 80108dc:	e7f8      	b.n	80108d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80108de:	0790      	lsls	r0, r2, #30
 80108e0:	d0e7      	beq.n	80108b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80108e2:	f832 0b02 	ldrh.w	r0, [r2], #2
 80108e6:	3b02      	subs	r3, #2
 80108e8:	f821 0b02 	strh.w	r0, [r1], #2
 80108ec:	e7e1      	b.n	80108b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80108ee:	2001      	movs	r0, #1
 80108f0:	bd10      	pop	{r4, pc}

080108f2 <_ZN8touchgfx3HAL7noTouchEv>:
 80108f2:	b510      	push	{r4, lr}
 80108f4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80108f8:	4604      	mov	r4, r0
 80108fa:	b153      	cbz	r3, 8010912 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80108fc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010900:	2101      	movs	r1, #1
 8010902:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8010906:	301c      	adds	r0, #28
 8010908:	f011 f822 	bl	8021950 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801090c:	2300      	movs	r3, #0
 801090e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010912:	bd10      	pop	{r4, pc}

08010914 <_ZN8touchgfx3HAL3lcdEv>:
 8010914:	4b04      	ldr	r3, [pc, #16]	; (8010928 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801091c:	b10a      	cbz	r2, 8010922 <_ZN8touchgfx3HAL3lcdEv+0xe>
 801091e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010920:	b900      	cbnz	r0, 8010924 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8010922:	6898      	ldr	r0, [r3, #8]
 8010924:	4770      	bx	lr
 8010926:	bf00      	nop
 8010928:	2400f240 	.word	0x2400f240

0801092c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010930:	b085      	sub	sp, #20
 8010932:	4604      	mov	r4, r0
 8010934:	2000      	movs	r0, #0
 8010936:	4699      	mov	r9, r3
 8010938:	ad04      	add	r5, sp, #16
 801093a:	460f      	mov	r7, r1
 801093c:	4690      	mov	r8, r2
 801093e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8010942:	69a0      	ldr	r0, [r4, #24]
 8010944:	6806      	ldr	r6, [r0, #0]
 8010946:	9501      	str	r5, [sp, #4]
 8010948:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801094c:	9500      	str	r5, [sp, #0]
 801094e:	6835      	ldr	r5, [r6, #0]
 8010950:	47a8      	blx	r5
 8010952:	4d10      	ldr	r5, [pc, #64]	; (8010994 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8010954:	4606      	mov	r6, r0
 8010956:	f8a5 9000 	strh.w	r9, [r5]
 801095a:	f7ff ffdb 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 801095e:	6803      	ldr	r3, [r0, #0]
 8010960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010962:	4798      	blx	r3
 8010964:	b128      	cbz	r0, 8010972 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8010966:	2801      	cmp	r0, #1
 8010968:	d00b      	beq.n	8010982 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801096a:	4630      	mov	r0, r6
 801096c:	b005      	add	sp, #20
 801096e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010972:	882b      	ldrh	r3, [r5, #0]
 8010974:	fb08 7203 	mla	r2, r8, r3, r7
 8010978:	9b03      	ldr	r3, [sp, #12]
 801097a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801097e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8010980:	e7f3      	b.n	801096a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010982:	882a      	ldrh	r2, [r5, #0]
 8010984:	9b03      	ldr	r3, [sp, #12]
 8010986:	fb08 7202 	mla	r2, r8, r2, r7
 801098a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801098e:	1a9a      	subs	r2, r3, r2
 8010990:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010992:	e7ea      	b.n	801096a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010994:	2400f23a 	.word	0x2400f23a

08010998 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8010998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801099a:	b08b      	sub	sp, #44	; 0x2c
 801099c:	4617      	mov	r7, r2
 801099e:	4604      	mov	r4, r0
 80109a0:	460e      	mov	r6, r1
 80109a2:	461d      	mov	r5, r3
 80109a4:	f7ff ffb6 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 80109a8:	6803      	ldr	r3, [r0, #0]
 80109aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ac:	4798      	blx	r3
 80109ae:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80109b2:	9007      	str	r0, [sp, #28]
 80109b4:	4631      	mov	r1, r6
 80109b6:	6822      	ldr	r2, [r4, #0]
 80109b8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80109bc:	4b0c      	ldr	r3, [pc, #48]	; (80109f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80109be:	4620      	mov	r0, r4
 80109c0:	881b      	ldrh	r3, [r3, #0]
 80109c2:	9306      	str	r3, [sp, #24]
 80109c4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80109c8:	9305      	str	r3, [sp, #20]
 80109ca:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80109ce:	9304      	str	r3, [sp, #16]
 80109d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80109d4:	9303      	str	r3, [sp, #12]
 80109d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80109da:	9302      	str	r3, [sp, #8]
 80109dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80109e0:	e9cd 5300 	strd	r5, r3, [sp]
 80109e4:	463b      	mov	r3, r7
 80109e6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80109e8:	2200      	movs	r2, #0
 80109ea:	47a8      	blx	r5
 80109ec:	b00b      	add	sp, #44	; 0x2c
 80109ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109f0:	2400f23a 	.word	0x2400f23a

080109f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80109f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f8:	4698      	mov	r8, r3
 80109fa:	6803      	ldr	r3, [r0, #0]
 80109fc:	b08b      	sub	sp, #44	; 0x2c
 80109fe:	4617      	mov	r7, r2
 8010a00:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010a02:	460e      	mov	r6, r1
 8010a04:	4b13      	ldr	r3, [pc, #76]	; (8010a54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8010a06:	4604      	mov	r4, r0
 8010a08:	f8b3 9000 	ldrh.w	r9, [r3]
 8010a0c:	f7ff ff82 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010a10:	6803      	ldr	r3, [r0, #0]
 8010a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a14:	4798      	blx	r3
 8010a16:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010a22:	2302      	movs	r3, #2
 8010a24:	4620      	mov	r0, r4
 8010a26:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	9305      	str	r3, [sp, #20]
 8010a2e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010a38:	9303      	str	r3, [sp, #12]
 8010a3a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010a3e:	9302      	str	r3, [sp, #8]
 8010a40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010a44:	e9cd 8300 	strd	r8, r3, [sp]
 8010a48:	463b      	mov	r3, r7
 8010a4a:	47a8      	blx	r5
 8010a4c:	b00b      	add	sp, #44	; 0x2c
 8010a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a52:	bf00      	nop
 8010a54:	2400f23a 	.word	0x2400f23a

08010a58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8010a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a5c:	4698      	mov	r8, r3
 8010a5e:	6803      	ldr	r3, [r0, #0]
 8010a60:	b087      	sub	sp, #28
 8010a62:	460e      	mov	r6, r1
 8010a64:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8010a66:	4617      	mov	r7, r2
 8010a68:	4b0f      	ldr	r3, [pc, #60]	; (8010aa8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010a70:	f7ff ff50 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010a74:	6803      	ldr	r3, [r0, #0]
 8010a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a78:	4798      	blx	r3
 8010a7a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8010a7e:	463a      	mov	r2, r7
 8010a80:	4631      	mov	r1, r6
 8010a82:	f8cd 900c 	str.w	r9, [sp, #12]
 8010a86:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8010a8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010a8e:	4620      	mov	r0, r4
 8010a90:	9302      	str	r3, [sp, #8]
 8010a92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010a96:	9301      	str	r3, [sp, #4]
 8010a98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	4643      	mov	r3, r8
 8010aa0:	47a8      	blx	r5
 8010aa2:	b007      	add	sp, #28
 8010aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aa8:	2400f23a 	.word	0x2400f23a

08010aac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	b08f      	sub	sp, #60	; 0x3c
 8010ab4:	4610      	mov	r0, r2
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	4691      	mov	r9, r2
 8010aba:	461e      	mov	r6, r3
 8010abc:	f008 fd90 	bl	80195e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010ac0:	2800      	cmp	r0, #0
 8010ac2:	f000 809d 	beq.w	8010c00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8010ac6:	6823      	ldr	r3, [r4, #0]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f8df b198 	ldr.w	fp, [pc, #408]	; 8010c64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8010ace:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad4:	4798      	blx	r3
 8010ad6:	6823      	ldr	r3, [r4, #0]
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8010c68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8010ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ae0:	4798      	blx	r3
 8010ae2:	f8bb 3000 	ldrh.w	r3, [fp]
 8010ae6:	4f5c      	ldr	r7, [pc, #368]	; (8010c58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	f8ba 3000 	ldrh.w	r3, [sl]
 8010aee:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010af2:	4640      	mov	r0, r8
 8010af4:	9302      	str	r3, [sp, #8]
 8010af6:	883b      	ldrh	r3, [r7, #0]
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	4b58      	ldr	r3, [pc, #352]	; (8010c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010afc:	881a      	ldrh	r2, [r3, #0]
 8010afe:	9305      	str	r3, [sp, #20]
 8010b00:	9204      	str	r2, [sp, #16]
 8010b02:	f008 feb1 	bl	8019868 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b06:	8038      	strh	r0, [r7, #0]
 8010b08:	4640      	mov	r0, r8
 8010b0a:	f008 fee1 	bl	80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b0e:	9b05      	ldr	r3, [sp, #20]
 8010b10:	b280      	uxth	r0, r0
 8010b12:	8018      	strh	r0, [r3, #0]
 8010b14:	4b52      	ldr	r3, [pc, #328]	; (8010c60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d174      	bne.n	8010c06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8010b1c:	883b      	ldrh	r3, [r7, #0]
 8010b1e:	f8aa 0000 	strh.w	r0, [sl]
 8010b22:	f8ab 3000 	strh.w	r3, [fp]
 8010b26:	4648      	mov	r0, r9
 8010b28:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8010b2c:	f008 fd58 	bl	80195e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010b30:	2200      	movs	r2, #0
 8010b32:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8010b36:	4611      	mov	r1, r2
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8010b3e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8010b42:	f7f2 fcc4 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
 8010b46:	2301      	movs	r3, #1
 8010b48:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8010b4c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8010b50:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	dd5c      	ble.n	8010c12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010b58:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	dd58      	ble.n	8010c12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8010b60:	462a      	mov	r2, r5
 8010b62:	ab0a      	add	r3, sp, #40	; 0x28
 8010b64:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010b68:	6851      	ldr	r1, [r2, #4]
 8010b6a:	c303      	stmia	r3!, {r0, r1}
 8010b6c:	4631      	mov	r1, r6
 8010b6e:	a80a      	add	r0, sp, #40	; 0x28
 8010b70:	f7ff fc00 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8010b74:	4b38      	ldr	r3, [pc, #224]	; (8010c58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010b76:	2100      	movs	r1, #0
 8010b78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010b7c:	4b37      	ldr	r3, [pc, #220]	; (8010c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010b7e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8010b82:	aa0a      	add	r2, sp, #40	; 0x28
 8010b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b88:	910c      	str	r1, [sp, #48]	; 0x30
 8010b8a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010b8e:	ab08      	add	r3, sp, #32
 8010b90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b94:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	a90c      	add	r1, sp, #48	; 0x30
 8010b9c:	f7ff fbea 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8010ba0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d13c      	bne.n	8010c20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8010bac:	2600      	movs	r6, #0
 8010bae:	696b      	ldr	r3, [r5, #20]
 8010bb0:	a908      	add	r1, sp, #32
 8010bb2:	682a      	ldr	r2, [r5, #0]
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	9305      	str	r3, [sp, #20]
 8010bb8:	616e      	str	r6, [r5, #20]
 8010bba:	6892      	ldr	r2, [r2, #8]
 8010bbc:	4790      	blx	r2
 8010bbe:	9b05      	ldr	r3, [sp, #20]
 8010bc0:	4652      	mov	r2, sl
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	616b      	str	r3, [r5, #20]
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8010bcc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8010bd0:	f7f2 fc7d 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
 8010bd4:	9a01      	ldr	r2, [sp, #4]
 8010bd6:	4b23      	ldr	r3, [pc, #140]	; (8010c64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8010bd8:	4620      	mov	r0, r4
 8010bda:	801a      	strh	r2, [r3, #0]
 8010bdc:	9a02      	ldr	r2, [sp, #8]
 8010bde:	4b22      	ldr	r3, [pc, #136]	; (8010c68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010be0:	801a      	strh	r2, [r3, #0]
 8010be2:	9a03      	ldr	r2, [sp, #12]
 8010be4:	4b1c      	ldr	r3, [pc, #112]	; (8010c58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8010be6:	801a      	strh	r2, [r3, #0]
 8010be8:	4b1c      	ldr	r3, [pc, #112]	; (8010c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010bea:	9a04      	ldr	r2, [sp, #16]
 8010bec:	801a      	strh	r2, [r3, #0]
 8010bee:	6823      	ldr	r3, [r4, #0]
 8010bf0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bf6:	4798      	blx	r3
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bfe:	4798      	blx	r3
 8010c00:	b00f      	add	sp, #60	; 0x3c
 8010c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c06:	883b      	ldrh	r3, [r7, #0]
 8010c08:	f8ab 0000 	strh.w	r0, [fp]
 8010c0c:	f8aa 3000 	strh.w	r3, [sl]
 8010c10:	e789      	b.n	8010b26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010c12:	462a      	mov	r2, r5
 8010c14:	ab0a      	add	r3, sp, #40	; 0x28
 8010c16:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010c1a:	6851      	ldr	r1, [r2, #4]
 8010c1c:	c303      	stmia	r3!, {r0, r1}
 8010c1e:	e7a9      	b.n	8010b74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010c20:	a807      	add	r0, sp, #28
 8010c22:	f008 ff59 	bl	8019ad8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010c26:	4606      	mov	r6, r0
 8010c28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c2e:	4798      	blx	r3
 8010c30:	4286      	cmp	r6, r0
 8010c32:	d1b8      	bne.n	8010ba6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8010c34:	f7ff fe6e 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010c38:	6803      	ldr	r3, [r0, #0]
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	a807      	add	r0, sp, #28
 8010c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c40:	9305      	str	r3, [sp, #20]
 8010c42:	f008 ff49 	bl	8019ad8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010c46:	9b05      	ldr	r3, [sp, #20]
 8010c48:	4601      	mov	r1, r0
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	4798      	blx	r3
 8010c4e:	f080 0001 	eor.w	r0, r0, #1
 8010c52:	b2c0      	uxtb	r0, r0
 8010c54:	e7a8      	b.n	8010ba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8010c56:	bf00      	nop
 8010c58:	2400f234 	.word	0x2400f234
 8010c5c:	2400f236 	.word	0x2400f236
 8010c60:	2400f238 	.word	0x2400f238
 8010c64:	2400f23a 	.word	0x2400f23a
 8010c68:	2400f23c 	.word	0x2400f23c

08010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010c6c:	4b07      	ldr	r3, [pc, #28]	; (8010c8c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010c6e:	b510      	push	{r4, lr}
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	4604      	mov	r4, r0
 8010c74:	b13b      	cbz	r3, 8010c86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010c76:	6803      	ldr	r3, [r0, #0]
 8010c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c7a:	4798      	blx	r3
 8010c7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010c7e:	4283      	cmp	r3, r0
 8010c80:	d101      	bne.n	8010c86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010c82:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010c84:	bd10      	pop	{r4, pc}
 8010c86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010c88:	e7fc      	b.n	8010c84 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8010c8a:	bf00      	nop
 8010c8c:	2400f23e 	.word	0x2400f23e

08010c90 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c94:	461d      	mov	r5, r3
 8010c96:	b08a      	sub	sp, #40	; 0x28
 8010c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c9c:	4690      	mov	r8, r2
 8010c9e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8010ca2:	2400      	movs	r4, #0
 8010ca4:	4607      	mov	r7, r0
 8010ca6:	fb06 8505 	mla	r5, r6, r5, r8
 8010caa:	9404      	str	r4, [sp, #16]
 8010cac:	f88d 4020 	strb.w	r4, [sp, #32]
 8010cb0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010cb4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010cb8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010cbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010cc0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010cc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010cc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010ccc:	f7ff ffce 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010cd0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010cda:	a901      	add	r1, sp, #4
 8010cdc:	9505      	str	r5, [sp, #20]
 8010cde:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010ce2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8010ce6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010cea:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010cee:	6803      	ldr	r3, [r0, #0]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	4798      	blx	r3
 8010cf4:	b00a      	add	sp, #40	; 0x28
 8010cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010cfa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8010cfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cfe:	b08b      	sub	sp, #44	; 0x2c
 8010d00:	2400      	movs	r4, #0
 8010d02:	4691      	mov	r9, r2
 8010d04:	461d      	mov	r5, r3
 8010d06:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8010d0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d0e:	4688      	mov	r8, r1
 8010d10:	4607      	mov	r7, r0
 8010d12:	9404      	str	r4, [sp, #16]
 8010d14:	fb06 9505 	mla	r5, r6, r5, r9
 8010d18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d1c:	f7ff ffa6 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010d24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d2e:	a901      	add	r1, sp, #4
 8010d30:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010d34:	9505      	str	r5, [sp, #20]
 8010d36:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010d3a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010d3e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8010d42:	f8cd 8010 	str.w	r8, [sp, #16]
 8010d46:	f8ad 4020 	strh.w	r4, [sp, #32]
 8010d4a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010d4e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8010d52:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010d56:	6803      	ldr	r3, [r0, #0]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	4798      	blx	r3
 8010d5c:	b00b      	add	sp, #44	; 0x2c
 8010d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08010d64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8010d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d68:	b08a      	sub	sp, #40	; 0x28
 8010d6a:	4698      	mov	r8, r3
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	4606      	mov	r6, r0
 8010d70:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8010d74:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8010d78:	2d0b      	cmp	r5, #11
 8010d7a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8010d7e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8010d82:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8010d86:	9304      	str	r3, [sp, #16]
 8010d88:	d137      	bne.n	8010dfa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8010d8a:	2380      	movs	r3, #128	; 0x80
 8010d8c:	f88d 0020 	strb.w	r0, [sp, #32]
 8010d90:	4630      	mov	r0, r6
 8010d92:	9203      	str	r2, [sp, #12]
 8010d94:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010d98:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010d9c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010da0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010da4:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010da8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010dac:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010db0:	f7ff ff5c 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010db4:	2c0b      	cmp	r4, #11
 8010db6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8010dba:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010dbe:	bf94      	ite	ls
 8010dc0:	4b19      	ldrls	r3, [pc, #100]	; (8010e28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010dc2:	2100      	movhi	r1, #0
 8010dc4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8010dc8:	bf98      	it	ls
 8010dca:	5d19      	ldrbls	r1, [r3, r4]
 8010dcc:	fb02 8307 	mla	r3, r2, r7, r8
 8010dd0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010dd4:	10c9      	asrs	r1, r1, #3
 8010dd6:	fb01 0003 	mla	r0, r1, r3, r0
 8010dda:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010dde:	a901      	add	r1, sp, #4
 8010de0:	9005      	str	r0, [sp, #20]
 8010de2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010de6:	2300      	movs	r3, #0
 8010de8:	6870      	ldr	r0, [r6, #4]
 8010dea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010dee:	6803      	ldr	r3, [r0, #0]
 8010df0:	685b      	ldr	r3, [r3, #4]
 8010df2:	4798      	blx	r3
 8010df4:	b00a      	add	sp, #40	; 0x28
 8010df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfa:	2d02      	cmp	r5, #2
 8010dfc:	d109      	bne.n	8010e12 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010dfe:	28ff      	cmp	r0, #255	; 0xff
 8010e00:	d105      	bne.n	8010e0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010e02:	f1bc 0f00 	cmp.w	ip, #0
 8010e06:	bf14      	ite	ne
 8010e08:	2340      	movne	r3, #64	; 0x40
 8010e0a:	2320      	moveq	r3, #32
 8010e0c:	e7be      	b.n	8010d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010e0e:	2340      	movs	r3, #64	; 0x40
 8010e10:	e7bc      	b.n	8010d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010e12:	28ff      	cmp	r0, #255	; 0xff
 8010e14:	d105      	bne.n	8010e22 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8010e16:	f1bc 0f00 	cmp.w	ip, #0
 8010e1a:	bf14      	ite	ne
 8010e1c:	2304      	movne	r3, #4
 8010e1e:	2301      	moveq	r3, #1
 8010e20:	e7b4      	b.n	8010d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010e22:	2304      	movs	r3, #4
 8010e24:	e7b2      	b.n	8010d8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010e26:	bf00      	nop
 8010e28:	08024dc8 	.word	0x08024dc8

08010e2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8010e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e30:	b08b      	sub	sp, #44	; 0x2c
 8010e32:	461d      	mov	r5, r3
 8010e34:	2400      	movs	r4, #0
 8010e36:	4688      	mov	r8, r1
 8010e38:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8010e3c:	4693      	mov	fp, r2
 8010e3e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8010e42:	4607      	mov	r7, r0
 8010e44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8010e48:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8010e4c:	9404      	str	r4, [sp, #16]
 8010e4e:	bf14      	ite	ne
 8010e50:	2308      	movne	r3, #8
 8010e52:	2302      	moveq	r3, #2
 8010e54:	fb05 b50a 	mla	r5, r5, sl, fp
 8010e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e5c:	f7ff ff06 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e60:	2e0b      	cmp	r6, #11
 8010e62:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8010e66:	a901      	add	r1, sp, #4
 8010e68:	bf98      	it	ls
 8010e6a:	4b13      	ldrls	r3, [pc, #76]	; (8010eb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010e6c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010e70:	bf98      	it	ls
 8010e72:	5d9c      	ldrbls	r4, [r3, r6]
 8010e74:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010e78:	10e4      	asrs	r4, r4, #3
 8010e7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8010e7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010e82:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010e86:	fb04 0405 	mla	r4, r4, r5, r0
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010e90:	2300      	movs	r3, #0
 8010e92:	9405      	str	r4, [sp, #20]
 8010e94:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010e98:	f88d 9020 	strb.w	r9, [sp, #32]
 8010e9c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010ea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010ea4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8010ea8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010eac:	6803      	ldr	r3, [r0, #0]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	4798      	blx	r3
 8010eb2:	b00b      	add	sp, #44	; 0x2c
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	08024dc8 	.word	0x08024dc8

08010ebc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec0:	461e      	mov	r6, r3
 8010ec2:	4b0a      	ldr	r3, [pc, #40]	; (8010eec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010ec4:	460f      	mov	r7, r1
 8010ec6:	4690      	mov	r8, r2
 8010ec8:	881d      	ldrh	r5, [r3, #0]
 8010eca:	f7ff fd23 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010ece:	6803      	ldr	r3, [r0, #0]
 8010ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ed2:	4798      	blx	r3
 8010ed4:	280b      	cmp	r0, #11
 8010ed6:	bf96      	itet	ls
 8010ed8:	4b05      	ldrls	r3, [pc, #20]	; (8010ef0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010eda:	2400      	movhi	r4, #0
 8010edc:	5c1c      	ldrbls	r4, [r3, r0]
 8010ede:	fb08 7005 	mla	r0, r8, r5, r7
 8010ee2:	10e4      	asrs	r4, r4, #3
 8010ee4:	fb04 6000 	mla	r0, r4, r0, r6
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	2400f23a 	.word	0x2400f23a
 8010ef0:	08024dc8 	.word	0x08024dc8

08010ef4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ef6:	b08b      	sub	sp, #44	; 0x2c
 8010ef8:	461f      	mov	r7, r3
 8010efa:	4604      	mov	r4, r0
 8010efc:	4616      	mov	r6, r2
 8010efe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010f02:	2500      	movs	r5, #0
 8010f04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010f08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010f0c:	9504      	str	r5, [sp, #16]
 8010f0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010f12:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010f16:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010f1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010f1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010f22:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010f26:	f88d 3020 	strb.w	r3, [sp, #32]
 8010f2a:	f7ff fe9f 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010f2e:	463a      	mov	r2, r7
 8010f30:	4631      	mov	r1, r6
 8010f32:	4603      	mov	r3, r0
 8010f34:	4620      	mov	r0, r4
 8010f36:	f7ff ffc1 	bl	8010ebc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010f3a:	4b0e      	ldr	r3, [pc, #56]	; (8010f74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010f3c:	9005      	str	r0, [sp, #20]
 8010f3e:	881b      	ldrh	r3, [r3, #0]
 8010f40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010f44:	f7ff fce6 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010f48:	6803      	ldr	r3, [r0, #0]
 8010f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f4c:	4798      	blx	r3
 8010f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010f50:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8010f54:	a901      	add	r1, sp, #4
 8010f56:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8010f5a:	9304      	str	r3, [sp, #16]
 8010f5c:	6860      	ldr	r0, [r4, #4]
 8010f5e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010f62:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010f66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8010f6a:	6803      	ldr	r3, [r0, #0]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	4798      	blx	r3
 8010f70:	b00b      	add	sp, #44	; 0x2c
 8010f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f74:	2400f23a 	.word	0x2400f23a

08010f78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f7a:	b08d      	sub	sp, #52	; 0x34
 8010f7c:	2501      	movs	r5, #1
 8010f7e:	4604      	mov	r4, r0
 8010f80:	466b      	mov	r3, sp
 8010f82:	9503      	str	r5, [sp, #12]
 8010f84:	e883 0006 	stmia.w	r3, {r1, r2}
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f8bd 6000 	ldrh.w	r6, [sp]
 8010f8e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010f92:	9306      	str	r3, [sp, #24]
 8010f94:	6803      	ldr	r3, [r0, #0]
 8010f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f98:	4798      	blx	r3
 8010f9a:	463a      	mov	r2, r7
 8010f9c:	4631      	mov	r1, r6
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	4620      	mov	r0, r4
 8010fa2:	f7ff ff8b 	bl	8010ebc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010fa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010fa8:	9004      	str	r0, [sp, #16]
 8010faa:	9307      	str	r3, [sp, #28]
 8010fac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010fb0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010fb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010fb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010fbc:	4b0e      	ldr	r3, [pc, #56]	; (8010ff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010fbe:	881b      	ldrh	r3, [r3, #0]
 8010fc0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010fc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010fc8:	f7ff fca4 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8010fcc:	6803      	ldr	r3, [r0, #0]
 8010fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd0:	4798      	blx	r3
 8010fd2:	23ff      	movs	r3, #255	; 0xff
 8010fd4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8010fd8:	a903      	add	r1, sp, #12
 8010fda:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010fde:	6860      	ldr	r0, [r4, #4]
 8010fe0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010fe4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8010fe8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010fec:	6803      	ldr	r3, [r0, #0]
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	4798      	blx	r3
 8010ff2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010ff4:	b00d      	add	sp, #52	; 0x34
 8010ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff8:	2400f23a 	.word	0x2400f23a

08010ffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011000:	b08c      	sub	sp, #48	; 0x30
 8011002:	461e      	mov	r6, r3
 8011004:	2300      	movs	r3, #0
 8011006:	4604      	mov	r4, r0
 8011008:	466d      	mov	r5, sp
 801100a:	9306      	str	r3, [sp, #24]
 801100c:	6803      	ldr	r3, [r0, #0]
 801100e:	e885 0006 	stmia.w	r5, {r1, r2}
 8011012:	2501      	movs	r5, #1
 8011014:	f8bd 7000 	ldrh.w	r7, [sp]
 8011018:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801101c:	9503      	str	r5, [sp, #12]
 801101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011020:	4798      	blx	r3
 8011022:	4642      	mov	r2, r8
 8011024:	4639      	mov	r1, r7
 8011026:	4603      	mov	r3, r0
 8011028:	4620      	mov	r0, r4
 801102a:	f7ff ff47 	bl	8010ebc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801102e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011032:	9004      	str	r0, [sp, #16]
 8011034:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011038:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801103c:	9607      	str	r6, [sp, #28]
 801103e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011042:	4b10      	ldr	r3, [pc, #64]	; (8011084 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011044:	881b      	ldrh	r3, [r3, #0]
 8011046:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801104a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801104c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011050:	f7ff fc60 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8011054:	6803      	ldr	r3, [r0, #0]
 8011056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011058:	4798      	blx	r3
 801105a:	23ff      	movs	r3, #255	; 0xff
 801105c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011060:	a903      	add	r1, sp, #12
 8011062:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011066:	6860      	ldr	r0, [r4, #4]
 8011068:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801106c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011070:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011074:	6803      	ldr	r3, [r0, #0]
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	4798      	blx	r3
 801107a:	4630      	mov	r0, r6
 801107c:	b00c      	add	sp, #48	; 0x30
 801107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011082:	bf00      	nop
 8011084:	2400f23a 	.word	0x2400f23a

08011088 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801108a:	b085      	sub	sp, #20
 801108c:	4605      	mov	r5, r0
 801108e:	ac02      	add	r4, sp, #8
 8011090:	e884 0006 	stmia.w	r4, {r1, r2}
 8011094:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011098:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801109c:	f7ff fde6 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80110a0:	4631      	mov	r1, r6
 80110a2:	4603      	mov	r3, r0
 80110a4:	463a      	mov	r2, r7
 80110a6:	4628      	mov	r0, r5
 80110a8:	f7ff ff08 	bl	8010ebc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80110ac:	4a05      	ldr	r2, [pc, #20]	; (80110c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80110ae:	682b      	ldr	r3, [r5, #0]
 80110b0:	8812      	ldrh	r2, [r2, #0]
 80110b2:	9200      	str	r2, [sp, #0]
 80110b4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80110b6:	4603      	mov	r3, r0
 80110b8:	4628      	mov	r0, r5
 80110ba:	e894 0006 	ldmia.w	r4, {r1, r2}
 80110be:	47b0      	blx	r6
 80110c0:	b005      	add	sp, #20
 80110c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110c4:	2400f23a 	.word	0x2400f23a

080110c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80110c8:	b570      	push	{r4, r5, r6, lr}
 80110ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80110ce:	4604      	mov	r4, r0
 80110d0:	b19b      	cbz	r3, 80110fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80110d2:	2002      	movs	r0, #2
 80110d4:	f7f0 fb9a 	bl	800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80110d8:	2300      	movs	r3, #0
 80110da:	4620      	mov	r0, r4
 80110dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80110e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80110e4:	6823      	ldr	r3, [r4, #0]
 80110e6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80110ea:	f7ff fdbf 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80110ee:	4601      	mov	r1, r0
 80110f0:	4620      	mov	r0, r4
 80110f2:	462b      	mov	r3, r5
 80110f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110f8:	4718      	bx	r3
 80110fa:	bd70      	pop	{r4, r5, r6, pc}

080110fc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80110fc:	b570      	push	{r4, r5, r6, lr}
 80110fe:	4605      	mov	r5, r0
 8011100:	460c      	mov	r4, r1
 8011102:	2003      	movs	r0, #3
 8011104:	b149      	cbz	r1, 801111a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011106:	f7f0 fb21 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801110a:	6928      	ldr	r0, [r5, #16]
 801110c:	b168      	cbz	r0, 801112a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801110e:	6803      	ldr	r3, [r0, #0]
 8011110:	2101      	movs	r1, #1
 8011112:	695b      	ldr	r3, [r3, #20]
 8011114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011118:	4718      	bx	r3
 801111a:	f7f0 fb47 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801111e:	6928      	ldr	r0, [r5, #16]
 8011120:	b118      	cbz	r0, 801112a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011122:	6803      	ldr	r3, [r0, #0]
 8011124:	4621      	mov	r1, r4
 8011126:	695b      	ldr	r3, [r3, #20]
 8011128:	e7f4      	b.n	8011114 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801112a:	bd70      	pop	{r4, r5, r6, pc}

0801112c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8011132:	4604      	mov	r4, r0
 8011134:	460d      	mov	r5, r1
 8011136:	428b      	cmp	r3, r1
 8011138:	d006      	beq.n	8011148 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801113a:	6803      	ldr	r3, [r0, #0]
 801113c:	b929      	cbnz	r1, 801114a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801113e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011142:	4798      	blx	r3
 8011144:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8011148:	bd38      	pop	{r3, r4, r5, pc}
 801114a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801114e:	e7f8      	b.n	8011142 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08011150 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8011150:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8011152:	b510      	push	{r4, lr}
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	4604      	mov	r4, r0
 8011158:	b95b      	cbnz	r3, 8011172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801115a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801115e:	2b02      	cmp	r3, #2
 8011160:	d007      	beq.n	8011172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8011162:	6840      	ldr	r0, [r0, #4]
 8011164:	f000 f92a 	bl	80113bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8011168:	b118      	cbz	r0, 8011172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801116a:	6862      	ldr	r2, [r4, #4]
 801116c:	7a53      	ldrb	r3, [r2, #9]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d0fc      	beq.n	801116c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8011172:	f7f0 fe99 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8011176:	4620      	mov	r0, r4
 8011178:	2100      	movs	r1, #0
 801117a:	f7ff ffd7 	bl	801112c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801117e:	4620      	mov	r0, r4
 8011180:	f7ff fd74 	bl	8010c6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011184:	bd10      	pop	{r4, pc}
 8011186:	bf00      	nop
 8011188:	2400f23e 	.word	0x2400f23e

0801118c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801118c:	b570      	push	{r4, r5, r6, lr}
 801118e:	4604      	mov	r4, r0
 8011190:	6803      	ldr	r3, [r0, #0]
 8011192:	b919      	cbnz	r1, 801119c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8011194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801119a:	4718      	bx	r3
 801119c:	2200      	movs	r2, #0
 801119e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80111a2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80111a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a8:	4798      	blx	r3
 80111aa:	4605      	mov	r5, r0
 80111ac:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80111b0:	4620      	mov	r0, r4
 80111b2:	2101      	movs	r1, #1
 80111b4:	f7ff ffba 	bl	801112c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80111b8:	4628      	mov	r0, r5
 80111ba:	bd70      	pop	{r4, r5, r6, pc}

080111bc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80111bc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80111c0:	1a13      	subs	r3, r2, r0
 80111c2:	4258      	negs	r0, r3
 80111c4:	4158      	adcs	r0, r3
 80111c6:	4770      	bx	lr

080111c8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80111c8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80111cc:	1a9b      	subs	r3, r3, r2
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	bfdc      	itt	le
 80111d2:	6882      	ldrle	r2, [r0, #8]
 80111d4:	189b      	addle	r3, r3, r2
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	bfcc      	ite	gt
 80111da:	2000      	movgt	r0, #0
 80111dc:	2001      	movle	r0, #1
 80111de:	4770      	bx	lr

080111e0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80111e0:	6902      	ldr	r2, [r0, #16]
 80111e2:	6843      	ldr	r3, [r0, #4]
 80111e4:	2024      	movs	r0, #36	; 0x24
 80111e6:	fb00 3002 	mla	r0, r0, r2, r3
 80111ea:	4770      	bx	lr

080111ec <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80111ec:	6803      	ldr	r3, [r0, #0]
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	4718      	bx	r3

080111f2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80111f2:	2301      	movs	r3, #1
 80111f4:	b570      	push	{r4, r5, r6, lr}
 80111f6:	7203      	strb	r3, [r0, #8]
 80111f8:	4604      	mov	r4, r0
 80111fa:	6840      	ldr	r0, [r0, #4]
 80111fc:	6803      	ldr	r3, [r0, #0]
 80111fe:	699b      	ldr	r3, [r3, #24]
 8011200:	4798      	blx	r3
 8011202:	6803      	ldr	r3, [r0, #0]
 8011204:	4605      	mov	r5, r0
 8011206:	2b40      	cmp	r3, #64	; 0x40
 8011208:	d00c      	beq.n	8011224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801120a:	d810      	bhi.n	801122e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801120c:	2b04      	cmp	r3, #4
 801120e:	d01d      	beq.n	801124c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8011210:	d804      	bhi.n	801121c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8011212:	2b01      	cmp	r3, #1
 8011214:	d006      	beq.n	8011224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011216:	2b02      	cmp	r3, #2
 8011218:	d02c      	beq.n	8011274 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801121a:	bd70      	pop	{r4, r5, r6, pc}
 801121c:	2b08      	cmp	r3, #8
 801121e:	d01d      	beq.n	801125c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8011220:	2b20      	cmp	r3, #32
 8011222:	d1fa      	bne.n	801121a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	4620      	mov	r0, r4
 8011228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801122a:	4798      	blx	r3
 801122c:	e013      	b.n	8011256 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011232:	d0f7      	beq.n	8011224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011234:	d804      	bhi.n	8011240 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8011236:	2b80      	cmp	r3, #128	; 0x80
 8011238:	d0f4      	beq.n	8011224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801123a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801123e:	e7f0      	b.n	8011222 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8011240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011244:	d0ee      	beq.n	8011224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8011246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801124a:	e7e5      	b.n	8011218 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	7f01      	ldrb	r1, [r0, #28]
 8011250:	4620      	mov	r0, r4
 8011252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011254:	4798      	blx	r3
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801125a:	e006      	b.n	801126a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801125c:	6823      	ldr	r3, [r4, #0]
 801125e:	7f01      	ldrb	r1, [r0, #28]
 8011260:	4620      	mov	r0, r4
 8011262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011264:	4798      	blx	r3
 8011266:	6823      	ldr	r3, [r4, #0]
 8011268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801126a:	4629      	mov	r1, r5
 801126c:	4620      	mov	r0, r4
 801126e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011272:	4718      	bx	r3
 8011274:	6823      	ldr	r3, [r4, #0]
 8011276:	4620      	mov	r0, r4
 8011278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801127a:	4798      	blx	r3
 801127c:	e7f3      	b.n	8011266 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801127e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801127e:	4770      	bx	lr

08011280 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8011280:	4770      	bx	lr

08011282 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8011282:	4770      	bx	lr

08011284 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8011284:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8011288:	b510      	push	{r4, lr}
 801128a:	1ad2      	subs	r2, r2, r3
 801128c:	2a00      	cmp	r2, #0
 801128e:	bfdc      	itt	le
 8011290:	6884      	ldrle	r4, [r0, #8]
 8011292:	1912      	addle	r2, r2, r4
 8011294:	2a01      	cmp	r2, #1
 8011296:	dd16      	ble.n	80112c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8011298:	6842      	ldr	r2, [r0, #4]
 801129a:	2424      	movs	r4, #36	; 0x24
 801129c:	fb04 2303 	mla	r3, r4, r3, r2
 80112a0:	f101 0220 	add.w	r2, r1, #32
 80112a4:	f851 4b04 	ldr.w	r4, [r1], #4
 80112a8:	4291      	cmp	r1, r2
 80112aa:	f843 4b04 	str.w	r4, [r3], #4
 80112ae:	d1f9      	bne.n	80112a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80112b0:	780a      	ldrb	r2, [r1, #0]
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	68c3      	ldr	r3, [r0, #12]
 80112b6:	6882      	ldr	r2, [r0, #8]
 80112b8:	f3bf 8f5b 	dmb	ish
 80112bc:	3301      	adds	r3, #1
 80112be:	429a      	cmp	r2, r3
 80112c0:	bfd8      	it	le
 80112c2:	1a9b      	suble	r3, r3, r2
 80112c4:	60c3      	str	r3, [r0, #12]
 80112c6:	bd10      	pop	{r4, pc}

080112c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80112c8:	6903      	ldr	r3, [r0, #16]
 80112ca:	6882      	ldr	r2, [r0, #8]
 80112cc:	f3bf 8f5b 	dmb	ish
 80112d0:	3301      	adds	r3, #1
 80112d2:	429a      	cmp	r2, r3
 80112d4:	bfd8      	it	le
 80112d6:	1a9b      	suble	r3, r3, r2
 80112d8:	6103      	str	r3, [r0, #16]
 80112da:	4770      	bx	lr

080112dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80112dc:	b570      	push	{r4, r5, r6, lr}
 80112de:	4604      	mov	r4, r0
 80112e0:	460e      	mov	r6, r1
 80112e2:	6860      	ldr	r0, [r4, #4]
 80112e4:	6803      	ldr	r3, [r0, #0]
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	4798      	blx	r3
 80112ea:	2800      	cmp	r0, #0
 80112ec:	d1f9      	bne.n	80112e2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80112ee:	4d0d      	ldr	r5, [pc, #52]	; (8011324 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80112f0:	6828      	ldr	r0, [r5, #0]
 80112f2:	6803      	ldr	r3, [r0, #0]
 80112f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80112f6:	4798      	blx	r3
 80112f8:	f7f0 fde4 	bl	8001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80112fc:	6828      	ldr	r0, [r5, #0]
 80112fe:	2101      	movs	r1, #1
 8011300:	f7ff ff14 	bl	801112c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8011304:	6860      	ldr	r0, [r4, #4]
 8011306:	4631      	mov	r1, r6
 8011308:	6803      	ldr	r3, [r0, #0]
 801130a:	689b      	ldr	r3, [r3, #8]
 801130c:	4798      	blx	r3
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	4620      	mov	r0, r4
 8011312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011314:	4798      	blx	r3
 8011316:	6828      	ldr	r0, [r5, #0]
 8011318:	6803      	ldr	r3, [r0, #0]
 801131a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801131e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011320:	4718      	bx	r3
 8011322:	bf00      	nop
 8011324:	2400f240 	.word	0x2400f240

08011328 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8011328:	b508      	push	{r3, lr}
 801132a:	f7f0 fdbd 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801132e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011332:	f7f0 bdc1 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011336 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8011336:	b510      	push	{r4, lr}
 8011338:	4604      	mov	r4, r0
 801133a:	2114      	movs	r1, #20
 801133c:	f010 fe91 	bl	8022062 <_ZdlPvj>
 8011340:	4620      	mov	r0, r4
 8011342:	bd10      	pop	{r4, pc}

08011344 <_ZN8touchgfx13DMA_Interface5startEv>:
 8011344:	b510      	push	{r4, lr}
 8011346:	4604      	mov	r4, r0
 8011348:	6840      	ldr	r0, [r0, #4]
 801134a:	6803      	ldr	r3, [r0, #0]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4798      	blx	r3
 8011350:	b948      	cbnz	r0, 8011366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011352:	7a63      	ldrb	r3, [r4, #9]
 8011354:	b13b      	cbz	r3, 8011366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8011356:	7a23      	ldrb	r3, [r4, #8]
 8011358:	b92b      	cbnz	r3, 8011366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801135a:	6823      	ldr	r3, [r4, #0]
 801135c:	4620      	mov	r0, r4
 801135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011364:	4718      	bx	r3
 8011366:	bd10      	pop	{r4, pc}

08011368 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011368:	b570      	push	{r4, r5, r6, lr}
 801136a:	4604      	mov	r4, r0
 801136c:	6840      	ldr	r0, [r0, #4]
 801136e:	6803      	ldr	r3, [r0, #0]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4798      	blx	r3
 8011374:	4605      	mov	r5, r0
 8011376:	b930      	cbnz	r0, 8011386 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011378:	7a23      	ldrb	r3, [r4, #8]
 801137a:	b123      	cbz	r3, 8011386 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801137c:	6860      	ldr	r0, [r4, #4]
 801137e:	6803      	ldr	r3, [r0, #0]
 8011380:	695b      	ldr	r3, [r3, #20]
 8011382:	4798      	blx	r3
 8011384:	7225      	strb	r5, [r4, #8]
 8011386:	6860      	ldr	r0, [r4, #4]
 8011388:	6803      	ldr	r3, [r0, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4798      	blx	r3
 801138e:	b928      	cbnz	r0, 801139c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	4620      	mov	r0, r4
 8011394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801139a:	4718      	bx	r3
 801139c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113a0:	f7f0 bd98 	b.w	8001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080113a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80113a4:	b510      	push	{r4, lr}
 80113a6:	6082      	str	r2, [r0, #8]
 80113a8:	2200      	movs	r2, #0
 80113aa:	4c03      	ldr	r4, [pc, #12]	; (80113b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80113ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80113b0:	e9c0 4100 	strd	r4, r1, [r0]
 80113b4:	bd10      	pop	{r4, pc}
 80113b6:	bf00      	nop
 80113b8:	08024ddc 	.word	0x08024ddc

080113bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80113bc:	6840      	ldr	r0, [r0, #4]
 80113be:	6803      	ldr	r3, [r0, #0]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	4718      	bx	r3

080113c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80113c4:	0c0b      	lsrs	r3, r1, #16
 80113c6:	60c1      	str	r1, [r0, #12]
 80113c8:	7481      	strb	r1, [r0, #18]
 80113ca:	7403      	strb	r3, [r0, #16]
 80113cc:	0a0b      	lsrs	r3, r1, #8
 80113ce:	7443      	strb	r3, [r0, #17]
 80113d0:	4770      	bx	lr

080113d2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80113d2:	f1a0 0008 	sub.w	r0, r0, #8
 80113d6:	e7f5      	b.n	80113c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

080113d8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80113d8:	b508      	push	{r3, lr}
 80113da:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	6803      	ldr	r3, [r0, #0]
 80113e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80113e4:	4798      	blx	r3
 80113e6:	1e43      	subs	r3, r0, #1
 80113e8:	4258      	negs	r0, r3
 80113ea:	4158      	adcs	r0, r3
 80113ec:	bd08      	pop	{r3, pc}
 80113ee:	bf00      	nop
 80113f0:	2400f240 	.word	0x2400f240

080113f4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 80113f4:	4770      	bx	lr

080113f6 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80113f6:	3808      	subs	r0, #8
 80113f8:	4770      	bx	lr

080113fa <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80113fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80113fe:	b410      	push	{r4}
 8011400:	188c      	adds	r4, r1, r2
 8011402:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011406:	68c2      	ldr	r2, [r0, #12]
 8011408:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801140c:	4620      	mov	r0, r4
 801140e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011412:	f7f0 bf15 	b.w	8002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08011416 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8011416:	f7f0 bf09 	b.w	800222c <_ZN8touchgfx5paint8tearDownEv>

0801141a <_ZN8touchgfx13PainterRGB888D0Ev>:
 801141a:	b510      	push	{r4, lr}
 801141c:	4604      	mov	r4, r0
 801141e:	2114      	movs	r1, #20
 8011420:	f010 fe1f 	bl	8022062 <_ZdlPvj>
 8011424:	4620      	mov	r0, r4
 8011426:	bd10      	pop	{r4, pc}

08011428 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8011428:	f1a0 0008 	sub.w	r0, r0, #8
 801142c:	e7f5      	b.n	801141a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08011430 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8011430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011432:	6803      	ldr	r3, [r0, #0]
 8011434:	460d      	mov	r5, r1
 8011436:	4604      	mov	r4, r0
 8011438:	4601      	mov	r1, r0
 801143a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801143c:	a802      	add	r0, sp, #8
 801143e:	4798      	blx	r3
 8011440:	6828      	ldr	r0, [r5, #0]
 8011442:	6869      	ldr	r1, [r5, #4]
 8011444:	466b      	mov	r3, sp
 8011446:	c303      	stmia	r3!, {r0, r1}
 8011448:	4668      	mov	r0, sp
 801144a:	4619      	mov	r1, r3
 801144c:	f7fe ff92 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8011450:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8011452:	b1a8      	cbz	r0, 8011480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011454:	6803      	ldr	r3, [r0, #0]
 8011456:	1d21      	adds	r1, r4, #4
 8011458:	68db      	ldr	r3, [r3, #12]
 801145a:	4798      	blx	r3
 801145c:	b180      	cbz	r0, 8011480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801145e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	dd0c      	ble.n	8011480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8011466:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801146a:	2d00      	cmp	r5, #0
 801146c:	dd08      	ble.n	8011480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801146e:	4a2d      	ldr	r2, [pc, #180]	; (8011524 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8011470:	7812      	ldrb	r2, [r2, #0]
 8011472:	b13a      	cbz	r2, 8011484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8011474:	2a01      	cmp	r2, #1
 8011476:	d02d      	beq.n	80114d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8011478:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801147a:	6803      	ldr	r3, [r0, #0]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	4798      	blx	r3
 8011480:	b004      	add	sp, #16
 8011482:	bd70      	pop	{r4, r5, r6, pc}
 8011484:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011488:	441d      	add	r5, r3
 801148a:	b2ad      	uxth	r5, r5
 801148c:	b22e      	sxth	r6, r5
 801148e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011492:	42b3      	cmp	r3, r6
 8011494:	daf0      	bge.n	8011478 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011496:	6823      	ldr	r3, [r4, #0]
 8011498:	4669      	mov	r1, sp
 801149a:	4620      	mov	r0, r4
 801149c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801149e:	4798      	blx	r3
 80114a0:	b940      	cbnz	r0, 80114b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80114a2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d004      	beq.n	80114b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 80114aa:	3301      	adds	r3, #1
 80114ac:	105b      	asrs	r3, r3, #1
 80114ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80114b2:	e7f0      	b.n	8011496 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 80114b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80114b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80114bc:	4413      	add	r3, r2
 80114be:	b29b      	uxth	r3, r3
 80114c0:	441a      	add	r2, r3
 80114c2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80114c6:	b212      	sxth	r2, r2
 80114c8:	4296      	cmp	r6, r2
 80114ca:	dae0      	bge.n	801148e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80114cc:	1aeb      	subs	r3, r5, r3
 80114ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80114d2:	e7dc      	b.n	801148e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 80114d4:	f8bd 5000 	ldrh.w	r5, [sp]
 80114d8:	441d      	add	r5, r3
 80114da:	b2ad      	uxth	r5, r5
 80114dc:	b22e      	sxth	r6, r5
 80114de:	f9bd 3000 	ldrsh.w	r3, [sp]
 80114e2:	42b3      	cmp	r3, r6
 80114e4:	dac8      	bge.n	8011478 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	4669      	mov	r1, sp
 80114ea:	4620      	mov	r0, r4
 80114ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ee:	4798      	blx	r3
 80114f0:	b940      	cbnz	r0, 8011504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80114f2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d004      	beq.n	8011504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80114fa:	3301      	adds	r3, #1
 80114fc:	105b      	asrs	r3, r3, #1
 80114fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011502:	e7f0      	b.n	80114e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8011504:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011508:	f8bd 3000 	ldrh.w	r3, [sp]
 801150c:	4413      	add	r3, r2
 801150e:	b29b      	uxth	r3, r3
 8011510:	441a      	add	r2, r3
 8011512:	f8ad 3000 	strh.w	r3, [sp]
 8011516:	b212      	sxth	r2, r2
 8011518:	4296      	cmp	r6, r2
 801151a:	dae0      	bge.n	80114de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801151c:	1aeb      	subs	r3, r5, r3
 801151e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011522:	e7dc      	b.n	80114de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011524:	2400f238 	.word	0x2400f238

08011528 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8011528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801152a:	6803      	ldr	r3, [r0, #0]
 801152c:	4604      	mov	r4, r0
 801152e:	4601      	mov	r1, r0
 8011530:	4668      	mov	r0, sp
 8011532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011534:	4798      	blx	r3
 8011536:	2100      	movs	r1, #0
 8011538:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801153c:	4668      	mov	r0, sp
 801153e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011542:	9102      	str	r1, [sp, #8]
 8011544:	a902      	add	r1, sp, #8
 8011546:	f8ad 200c 	strh.w	r2, [sp, #12]
 801154a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801154e:	f7fe ff11 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8011552:	6823      	ldr	r3, [r4, #0]
 8011554:	4669      	mov	r1, sp
 8011556:	4620      	mov	r0, r4
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	4798      	blx	r3
 801155c:	b004      	add	sp, #16
 801155e:	bd10      	pop	{r4, pc}

08011560 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8011560:	2101      	movs	r1, #1
 8011562:	2200      	movs	r2, #0
 8011564:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011568:	490a      	ldr	r1, [pc, #40]	; (8011594 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801156a:	8082      	strh	r2, [r0, #4]
 801156c:	6001      	str	r1, [r0, #0]
 801156e:	21ff      	movs	r1, #255	; 0xff
 8011570:	80c2      	strh	r2, [r0, #6]
 8011572:	8102      	strh	r2, [r0, #8]
 8011574:	8142      	strh	r2, [r0, #10]
 8011576:	8182      	strh	r2, [r0, #12]
 8011578:	81c2      	strh	r2, [r0, #14]
 801157a:	8202      	strh	r2, [r0, #16]
 801157c:	8242      	strh	r2, [r0, #18]
 801157e:	61c2      	str	r2, [r0, #28]
 8011580:	8402      	strh	r2, [r0, #32]
 8011582:	8442      	strh	r2, [r0, #34]	; 0x22
 8011584:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011588:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801158c:	6282      	str	r2, [r0, #40]	; 0x28
 801158e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011592:	4770      	bx	lr
 8011594:	08024e38 	.word	0x08024e38

08011598 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8011598:	6301      	str	r1, [r0, #48]	; 0x30
 801159a:	4770      	bx	lr

0801159c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 801159c:	6341      	str	r1, [r0, #52]	; 0x34
 801159e:	4770      	bx	lr

080115a0 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 80115a0:	4770      	bx	lr

080115a2 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 80115a2:	4608      	mov	r0, r1
 80115a4:	4770      	bx	lr

080115a6 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 80115a6:	4608      	mov	r0, r1
 80115a8:	4770      	bx	lr

080115aa <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 80115aa:	b530      	push	{r4, r5, lr}
 80115ac:	460d      	mov	r5, r1
 80115ae:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80115b0:	8949      	ldrh	r1, [r1, #10]
 80115b2:	b085      	sub	sp, #20
 80115b4:	4604      	mov	r4, r0
 80115b6:	1ac9      	subs	r1, r1, r3
 80115b8:	6803      	ldr	r3, [r0, #0]
 80115ba:	f10d 0206 	add.w	r2, sp, #6
 80115be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80115c2:	b209      	sxth	r1, r1
 80115c4:	4798      	blx	r3
 80115c6:	b1a0      	cbz	r0, 80115f2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80115c8:	792b      	ldrb	r3, [r5, #4]
 80115ca:	b993      	cbnz	r3, 80115f2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80115cc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80115d0:	b178      	cbz	r0, 80115f2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80115d2:	6803      	ldr	r3, [r0, #0]
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	4798      	blx	r3
 80115d8:	b158      	cbz	r0, 80115f2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80115da:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80115de:	aa02      	add	r2, sp, #8
 80115e0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 80115e4:	4621      	mov	r1, r4
 80115e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80115ea:	9503      	str	r5, [sp, #12]
 80115ec:	6803      	ldr	r3, [r0, #0]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	4798      	blx	r3
 80115f2:	b005      	add	sp, #20
 80115f4:	bd30      	pop	{r4, r5, pc}

080115f6 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 80115f6:	b430      	push	{r4, r5}
 80115f8:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 80115fc:	b1cd      	cbz	r5, 8011632 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 80115fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8011602:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8011606:	3d01      	subs	r5, #1
 8011608:	6823      	ldr	r3, [r4, #0]
 801160a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801160e:	b139      	cbz	r1, 8011620 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 8011610:	4293      	cmp	r3, r2
 8011612:	f1c2 0100 	rsb	r1, r2, #0
 8011616:	bfa8      	it	ge
 8011618:	4613      	movge	r3, r2
 801161a:	428c      	cmp	r4, r1
 801161c:	bfb8      	it	lt
 801161e:	460c      	movlt	r4, r1
 8011620:	1a99      	subs	r1, r3, r2
 8011622:	4422      	add	r2, r4
 8011624:	4291      	cmp	r1, r2
 8011626:	d004      	beq.n	8011632 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 8011628:	6803      	ldr	r3, [r0, #0]
 801162a:	bc30      	pop	{r4, r5}
 801162c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011630:	4718      	bx	r3
 8011632:	bc30      	pop	{r4, r5}
 8011634:	4770      	bx	lr

08011636 <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 8011636:	b410      	push	{r4}
 8011638:	2300      	movs	r3, #0
 801163a:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 801163e:	429a      	cmp	r2, r3
 8011640:	dd0e      	ble.n	8011660 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 8011642:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8011646:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 801164a:	428c      	cmp	r4, r1
 801164c:	d106      	bne.n	801165c <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 801164e:	6802      	ldr	r2, [r0, #0]
 8011650:	4619      	mov	r1, r3
 8011652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011656:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 801165a:	4710      	bx	r2
 801165c:	3301      	adds	r3, #1
 801165e:	e7ee      	b.n	801163e <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 8011660:	f04f 30ff 	mov.w	r0, #4294967295
 8011664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011668:	4770      	bx	lr

0801166a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 801166a:	428a      	cmp	r2, r1
 801166c:	bfbc      	itt	lt
 801166e:	460b      	movlt	r3, r1
 8011670:	4611      	movlt	r1, r2
 8011672:	b510      	push	{r4, lr}
 8011674:	bfb8      	it	lt
 8011676:	461a      	movlt	r2, r3
 8011678:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 801167c:	4604      	mov	r4, r0
 801167e:	428b      	cmp	r3, r1
 8011680:	d103      	bne.n	801168a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8011682:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8011686:	4293      	cmp	r3, r2
 8011688:	d011      	beq.n	80116ae <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 801168a:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 801168e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011692:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 8011696:	f005 ff82 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 801169a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801169e:	f005 ff7e 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 80116a2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80116a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116aa:	f005 bf78 	b.w	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 80116ae:	bd10      	pop	{r4, pc}

080116b0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 80116b0:	428a      	cmp	r2, r1
 80116b2:	bfbc      	itt	lt
 80116b4:	460b      	movlt	r3, r1
 80116b6:	4611      	movlt	r1, r2
 80116b8:	b510      	push	{r4, lr}
 80116ba:	bfb8      	it	lt
 80116bc:	461a      	movlt	r2, r3
 80116be:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 80116c2:	4604      	mov	r4, r0
 80116c4:	428b      	cmp	r3, r1
 80116c6:	d103      	bne.n	80116d0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 80116c8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d011      	beq.n	80116f4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 80116d0:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 80116d4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80116d8:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 80116dc:	f005 ff5f 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 80116e0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80116e4:	f005 ff5b 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 80116e8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80116ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f0:	f005 bf55 	b.w	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 80116f4:	bd10      	pop	{r4, pc}

080116f6 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 80116f6:	2300      	movs	r3, #0
 80116f8:	3038      	adds	r0, #56	; 0x38
 80116fa:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 80116fe:	f005 bf4e 	b.w	801759e <_ZNK8touchgfx8Drawable10invalidateEv>

08011702 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8011702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011706:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801170a:	4605      	mov	r5, r0
 801170c:	4688      	mov	r8, r1
 801170e:	4617      	mov	r7, r2
 8011710:	2b00      	cmp	r3, #0
 8011712:	d03e      	beq.n	8011792 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011714:	6803      	ldr	r3, [r0, #0]
 8011716:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801171a:	4798      	blx	r3
 801171c:	682b      	ldr	r3, [r5, #0]
 801171e:	4604      	mov	r4, r0
 8011720:	4628      	mov	r0, r5
 8011722:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8011726:	4798      	blx	r3
 8011728:	4284      	cmp	r4, r0
 801172a:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 801172e:	bfc2      	ittt	gt
 8011730:	4623      	movgt	r3, r4
 8011732:	4604      	movgt	r4, r0
 8011734:	4618      	movgt	r0, r3
 8011736:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 801173a:	42b3      	cmp	r3, r6
 801173c:	da29      	bge.n	8011792 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 801173e:	42b0      	cmp	r0, r6
 8011740:	bfa8      	it	ge
 8011742:	4630      	movge	r0, r6
 8011744:	2800      	cmp	r0, #0
 8011746:	db24      	blt.n	8011792 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8011748:	f1b8 0f00 	cmp.w	r8, #0
 801174c:	d11e      	bne.n	801178c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 801174e:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8011752:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011756:	460c      	mov	r4, r1
 8011758:	009a      	lsls	r2, r3, #2
 801175a:	4298      	cmp	r0, r3
 801175c:	dd0b      	ble.n	8011776 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 801175e:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 8011762:	3301      	adds	r3, #1
 8011764:	58b6      	ldr	r6, [r6, r2]
 8011766:	3204      	adds	r2, #4
 8011768:	42b1      	cmp	r1, r6
 801176a:	bfa8      	it	ge
 801176c:	4631      	movge	r1, r6
 801176e:	42b4      	cmp	r4, r6
 8011770:	bfb8      	it	lt
 8011772:	4634      	movlt	r4, r6
 8011774:	e7f1      	b.n	801175a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 8011776:	1bc9      	subs	r1, r1, r7
 8011778:	193a      	adds	r2, r7, r4
 801177a:	4291      	cmp	r1, r2
 801177c:	d009      	beq.n	8011792 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 801177e:	682b      	ldr	r3, [r5, #0]
 8011780:	4628      	mov	r0, r5
 8011782:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801178a:	4718      	bx	r3
 801178c:	427c      	negs	r4, r7
 801178e:	4639      	mov	r1, r7
 8011790:	e7e2      	b.n	8011758 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8011792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011796 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 8011796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801179a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801179e:	4604      	mov	r4, r0
 80117a0:	4688      	mov	r8, r1
 80117a2:	4616      	mov	r6, r2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d04c      	beq.n	8011842 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 80117a8:	6803      	ldr	r3, [r0, #0]
 80117aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80117ae:	4798      	blx	r3
 80117b0:	6823      	ldr	r3, [r4, #0]
 80117b2:	4605      	mov	r5, r0
 80117b4:	4620      	mov	r0, r4
 80117b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80117ba:	4798      	blx	r3
 80117bc:	4285      	cmp	r5, r0
 80117be:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 80117c2:	bfc2      	ittt	gt
 80117c4:	b22b      	sxthgt	r3, r5
 80117c6:	4605      	movgt	r5, r0
 80117c8:	4618      	movgt	r0, r3
 80117ca:	2300      	movs	r3, #0
 80117cc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 80117d0:	0099      	lsls	r1, r3, #2
 80117d2:	42aa      	cmp	r2, r5
 80117d4:	da05      	bge.n	80117e2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 80117d6:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 80117da:	42bb      	cmp	r3, r7
 80117dc:	da01      	bge.n	80117e2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 80117de:	3301      	adds	r3, #1
 80117e0:	e7f4      	b.n	80117cc <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 80117e2:	4282      	cmp	r2, r0
 80117e4:	dc2d      	bgt.n	8011842 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 80117e6:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 80117ea:	3301      	adds	r3, #1
 80117ec:	f85c 5001 	ldr.w	r5, [ip, r1]
 80117f0:	462a      	mov	r2, r5
 80117f2:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 80117f6:	4288      	cmp	r0, r1
 80117f8:	dd0d      	ble.n	8011816 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 80117fa:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 80117fe:	428b      	cmp	r3, r1
 8011800:	da09      	bge.n	8011816 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 8011802:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 8011806:	3301      	adds	r3, #1
 8011808:	42bd      	cmp	r5, r7
 801180a:	bfa8      	it	ge
 801180c:	463d      	movge	r5, r7
 801180e:	42ba      	cmp	r2, r7
 8011810:	bfb8      	it	lt
 8011812:	463a      	movlt	r2, r7
 8011814:	e7ed      	b.n	80117f2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 8011816:	f1b8 0f00 	cmp.w	r8, #0
 801181a:	d007      	beq.n	801182c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 801181c:	42b5      	cmp	r5, r6
 801181e:	f1c6 0300 	rsb	r3, r6, #0
 8011822:	bfa8      	it	ge
 8011824:	4635      	movge	r5, r6
 8011826:	429a      	cmp	r2, r3
 8011828:	bfb8      	it	lt
 801182a:	461a      	movlt	r2, r3
 801182c:	1ba9      	subs	r1, r5, r6
 801182e:	4432      	add	r2, r6
 8011830:	4291      	cmp	r1, r2
 8011832:	d006      	beq.n	8011842 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 8011834:	6823      	ldr	r3, [r4, #0]
 8011836:	4620      	mov	r0, r4
 8011838:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801183c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011840:	4718      	bx	r3
 8011842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011846 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8011846:	b530      	push	{r4, r5, lr}
 8011848:	790b      	ldrb	r3, [r1, #4]
 801184a:	b085      	sub	sp, #20
 801184c:	4604      	mov	r4, r0
 801184e:	460d      	mov	r5, r1
 8011850:	2b02      	cmp	r3, #2
 8011852:	d020      	beq.n	8011896 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011854:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8011856:	f10d 0206 	add.w	r2, sp, #6
 801185a:	88c9      	ldrh	r1, [r1, #6]
 801185c:	1ac9      	subs	r1, r1, r3
 801185e:	6803      	ldr	r3, [r0, #0]
 8011860:	b209      	sxth	r1, r1
 8011862:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011866:	4798      	blx	r3
 8011868:	b1a8      	cbz	r0, 8011896 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801186a:	792b      	ldrb	r3, [r5, #4]
 801186c:	2b01      	cmp	r3, #1
 801186e:	d812      	bhi.n	8011896 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011870:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8011874:	b178      	cbz	r0, 8011896 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8011876:	6803      	ldr	r3, [r0, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	4798      	blx	r3
 801187c:	b158      	cbz	r0, 8011896 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801187e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011882:	aa02      	add	r2, sp, #8
 8011884:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8011888:	4621      	mov	r1, r4
 801188a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801188e:	9503      	str	r5, [sp, #12]
 8011890:	6803      	ldr	r3, [r0, #0]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	4798      	blx	r3
 8011896:	b005      	add	sp, #20
 8011898:	bd30      	pop	{r4, r5, pc}

0801189a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801189a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801189e:	4604      	mov	r4, r0
 80118a0:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80118a4:	4690      	mov	r8, r2
 80118a6:	461e      	mov	r6, r3
 80118a8:	9f06      	ldr	r7, [sp, #24]
 80118aa:	b928      	cbnz	r0, 80118b8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 80118ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80118b0:	803b      	strh	r3, [r7, #0]
 80118b2:	8033      	strh	r3, [r6, #0]
 80118b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80118bc:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 80118c0:	1883      	adds	r3, r0, r2
 80118c2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80118c6:	1ad2      	subs	r2, r2, r3
 80118c8:	b212      	sxth	r2, r2
 80118ca:	2a01      	cmp	r2, #1
 80118cc:	dc07      	bgt.n	80118de <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80118ce:	2300      	movs	r3, #0
 80118d0:	8033      	strh	r3, [r6, #0]
 80118d2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 80118d6:	3b01      	subs	r3, #1
 80118d8:	803b      	strh	r3, [r7, #0]
 80118da:	2001      	movs	r0, #1
 80118dc:	e7ea      	b.n	80118b4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80118de:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 80118e2:	1a08      	subs	r0, r1, r0
 80118e4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80118e8:	3a01      	subs	r2, #1
 80118ea:	0140      	lsls	r0, r0, #5
 80118ec:	1ae9      	subs	r1, r5, r3
 80118ee:	f006 f81d 	bl	801792c <_ZN8touchgfx6muldivElll>
 80118f2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 80118f6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80118fa:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 80118fe:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8011902:	1883      	adds	r3, r0, r2
 8011904:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8011908:	eba8 0000 	sub.w	r0, r8, r0
 801190c:	1ad2      	subs	r2, r2, r3
 801190e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8011912:	0140      	lsls	r0, r0, #5
 8011914:	b212      	sxth	r2, r2
 8011916:	1a59      	subs	r1, r3, r1
 8011918:	3a01      	subs	r2, #1
 801191a:	f006 f807 	bl	801792c <_ZN8touchgfx6muldivElll>
 801191e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011922:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8011926:	4285      	cmp	r5, r0
 8011928:	bfde      	ittt	le
 801192a:	4603      	movle	r3, r0
 801192c:	4628      	movle	r0, r5
 801192e:	461d      	movle	r5, r3
 8011930:	2320      	movs	r3, #32
 8011932:	2d00      	cmp	r5, #0
 8011934:	bfa8      	it	ge
 8011936:	351f      	addge	r5, #31
 8011938:	fb90 f0f3 	sdiv	r0, r0, r3
 801193c:	bfb4      	ite	lt
 801193e:	fb95 f5f3 	sdivlt	r5, r5, r3
 8011942:	116d      	asrge	r5, r5, #5
 8011944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011948:	8033      	strh	r3, [r6, #0]
 801194a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 801194e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8011952:	1e51      	subs	r1, r2, #1
 8011954:	428b      	cmp	r3, r1
 8011956:	da06      	bge.n	8011966 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 8011958:	3301      	adds	r3, #1
 801195a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 801195e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011962:	4288      	cmp	r0, r1
 8011964:	daf0      	bge.n	8011948 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 8011966:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 801196a:	803a      	strh	r2, [r7, #0]
 801196c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011970:	2b00      	cmp	r3, #0
 8011972:	dd23      	ble.n	80119bc <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8011974:	181a      	adds	r2, r3, r0
 8011976:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 801197a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801197e:	42aa      	cmp	r2, r5
 8011980:	db10      	blt.n	80119a4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8011982:	3b01      	subs	r3, #1
 8011984:	803b      	strh	r3, [r7, #0]
 8011986:	e7f1      	b.n	801196c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 8011988:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801198c:	8032      	strh	r2, [r6, #0]
 801198e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8011992:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011996:	4293      	cmp	r3, r2
 8011998:	bfdc      	itt	le
 801199a:	f103 33ff 	addle.w	r3, r3, #4294967295
 801199e:	b21a      	sxthle	r2, r3
 80119a0:	803a      	strh	r2, [r7, #0]
 80119a2:	e79a      	b.n	80118da <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 80119a4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80119a8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	429a      	cmp	r2, r3
 80119b0:	dbea      	blt.n	8011988 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 80119b2:	b21b      	sxth	r3, r3
 80119b4:	2000      	movs	r0, #0
 80119b6:	803b      	strh	r3, [r7, #0]
 80119b8:	8033      	strh	r3, [r6, #0]
 80119ba:	e77b      	b.n	80118b4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80119bc:	2000      	movs	r0, #0
 80119be:	8038      	strh	r0, [r7, #0]
 80119c0:	8030      	strh	r0, [r6, #0]
 80119c2:	e777      	b.n	80118b4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>

080119c4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 80119c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c8:	4604      	mov	r4, r0
 80119ca:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80119ce:	4690      	mov	r8, r2
 80119d0:	461f      	mov	r7, r3
 80119d2:	9e06      	ldr	r6, [sp, #24]
 80119d4:	b928      	cbnz	r0, 80119e2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 80119d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80119da:	8033      	strh	r3, [r6, #0]
 80119dc:	803b      	strh	r3, [r7, #0]
 80119de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80119e6:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 80119ea:	1883      	adds	r3, r0, r2
 80119ec:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80119f0:	1ad2      	subs	r2, r2, r3
 80119f2:	b212      	sxth	r2, r2
 80119f4:	2a01      	cmp	r2, #1
 80119f6:	dc07      	bgt.n	8011a08 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 80119f8:	2300      	movs	r3, #0
 80119fa:	803b      	strh	r3, [r7, #0]
 80119fc:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8011a00:	3b01      	subs	r3, #1
 8011a02:	8033      	strh	r3, [r6, #0]
 8011a04:	2001      	movs	r0, #1
 8011a06:	e7ea      	b.n	80119de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8011a08:	1a08      	subs	r0, r1, r0
 8011a0a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8011a0e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8011a12:	0140      	lsls	r0, r0, #5
 8011a14:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011a16:	1a5b      	subs	r3, r3, r1
 8011a18:	d459      	bmi.n	8011ace <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8011a1a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011a1e:	fb93 f1f5 	sdiv	r1, r3, r5
 8011a22:	2302      	movs	r3, #2
 8011a24:	fb91 f1f3 	sdiv	r1, r1, r3
 8011a28:	3a01      	subs	r2, #1
 8011a2a:	f005 ff7f 	bl	801792c <_ZN8touchgfx6muldivElll>
 8011a2e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8011a32:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 8011a36:	2900      	cmp	r1, #0
 8011a38:	db55      	blt.n	8011ae6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8011a3a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 8011a3e:	2502      	movs	r5, #2
 8011a40:	fb93 f3fc 	sdiv	r3, r3, ip
 8011a44:	fb93 f3f5 	sdiv	r3, r3, r5
 8011a48:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 8011a4c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8011a50:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 8011a54:	1a52      	subs	r2, r2, r1
 8011a56:	eba8 0003 	sub.w	r0, r8, r3
 8011a5a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 8011a5e:	d44e      	bmi.n	8011afe <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8011a60:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8011a64:	fb92 f1fc 	sdiv	r1, r2, ip
 8011a68:	2202      	movs	r2, #2
 8011a6a:	fb91 f1f2 	sdiv	r1, r1, r2
 8011a6e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8011a72:	4413      	add	r3, r2
 8011a74:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8011a78:	1ad2      	subs	r2, r2, r3
 8011a7a:	b212      	sxth	r2, r2
 8011a7c:	3a01      	subs	r2, #1
 8011a7e:	f005 ff55 	bl	801792c <_ZN8touchgfx6muldivElll>
 8011a82:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011a86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	db44      	blt.n	8011b16 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 8011a8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8011a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a94:	2202      	movs	r2, #2
 8011a96:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a9a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8011a9e:	2020      	movs	r0, #32
 8011aa0:	429d      	cmp	r5, r3
 8011aa2:	bfde      	ittt	le
 8011aa4:	461a      	movle	r2, r3
 8011aa6:	462b      	movle	r3, r5
 8011aa8:	4615      	movle	r5, r2
 8011aaa:	b21b      	sxth	r3, r3
 8011aac:	2d00      	cmp	r5, #0
 8011aae:	bfaa      	itet	ge
 8011ab0:	351f      	addge	r5, #31
 8011ab2:	fb95 f5f0 	sdivlt	r5, r5, r0
 8011ab6:	116d      	asrge	r5, r5, #5
 8011ab8:	fb93 f3f0 	sdiv	r3, r3, r0
 8011abc:	b22d      	sxth	r5, r5
 8011abe:	803b      	strh	r3, [r7, #0]
 8011ac0:	2d00      	cmp	r5, #0
 8011ac2:	8035      	strh	r5, [r6, #0]
 8011ac4:	da33      	bge.n	8011b2e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	8030      	strh	r0, [r6, #0]
 8011aca:	8038      	strh	r0, [r7, #0]
 8011acc:	e787      	b.n	80119de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8011ace:	f06f 0101 	mvn.w	r1, #1
 8011ad2:	fb01 5303 	mla	r3, r1, r3, r5
 8011ad6:	1e59      	subs	r1, r3, #1
 8011ad8:	2302      	movs	r3, #2
 8011ada:	fb91 f1f5 	sdiv	r1, r1, r5
 8011ade:	fb91 f1f3 	sdiv	r1, r1, r3
 8011ae2:	4249      	negs	r1, r1
 8011ae4:	e7a0      	b.n	8011a28 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8011ae6:	f06f 0301 	mvn.w	r3, #1
 8011aea:	2502      	movs	r5, #2
 8011aec:	fb03 c301 	mla	r3, r3, r1, ip
 8011af0:	3b01      	subs	r3, #1
 8011af2:	fb93 f3fc 	sdiv	r3, r3, ip
 8011af6:	fb93 f3f5 	sdiv	r3, r3, r5
 8011afa:	425b      	negs	r3, r3
 8011afc:	e7a4      	b.n	8011a48 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8011afe:	f06f 0101 	mvn.w	r1, #1
 8011b02:	fb01 c202 	mla	r2, r1, r2, ip
 8011b06:	1e51      	subs	r1, r2, #1
 8011b08:	2202      	movs	r2, #2
 8011b0a:	fb91 f1fc 	sdiv	r1, r1, ip
 8011b0e:	fb91 f1f2 	sdiv	r1, r1, r2
 8011b12:	4249      	negs	r1, r1
 8011b14:	e7ab      	b.n	8011a6e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8011b16:	f06f 0101 	mvn.w	r1, #1
 8011b1a:	fb01 2303 	mla	r3, r1, r3, r2
 8011b1e:	3b01      	subs	r3, #1
 8011b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b24:	2202      	movs	r2, #2
 8011b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8011b2a:	425b      	negs	r3, r3
 8011b2c:	e7b5      	b.n	8011a9a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8011b2e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8011b32:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011b36:	4293      	cmp	r3, r2
 8011b38:	dc05      	bgt.n	8011b46 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	2000      	movs	r0, #0
 8011b3e:	b21b      	sxth	r3, r3
 8011b40:	8033      	strh	r3, [r6, #0]
 8011b42:	803b      	strh	r3, [r7, #0]
 8011b44:	e74b      	b.n	80119de <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8011b46:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011b4a:	803a      	strh	r2, [r7, #0]
 8011b4c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8011b50:	f9b6 2000 	ldrsh.w	r2, [r6]
 8011b54:	4293      	cmp	r3, r2
 8011b56:	bfdc      	itt	le
 8011b58:	f103 33ff 	addle.w	r3, r3, #4294967295
 8011b5c:	b21a      	sxthle	r2, r3
 8011b5e:	8032      	strh	r2, [r6, #0]
 8011b60:	e750      	b.n	8011a04 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08011b64 <_ZN8touchgfx9ContainerC1Ev>:
 8011b64:	2101      	movs	r1, #1
 8011b66:	2200      	movs	r2, #0
 8011b68:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8011b6c:	4909      	ldr	r1, [pc, #36]	; (8011b94 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8011b6e:	8082      	strh	r2, [r0, #4]
 8011b70:	80c2      	strh	r2, [r0, #6]
 8011b72:	8102      	strh	r2, [r0, #8]
 8011b74:	8142      	strh	r2, [r0, #10]
 8011b76:	8182      	strh	r2, [r0, #12]
 8011b78:	81c2      	strh	r2, [r0, #14]
 8011b7a:	8202      	strh	r2, [r0, #16]
 8011b7c:	8242      	strh	r2, [r0, #18]
 8011b7e:	61c2      	str	r2, [r0, #28]
 8011b80:	8402      	strh	r2, [r0, #32]
 8011b82:	8442      	strh	r2, [r0, #34]	; 0x22
 8011b84:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8011b88:	6001      	str	r1, [r0, #0]
 8011b8a:	6282      	str	r2, [r0, #40]	; 0x28
 8011b8c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	08024d40 	.word	0x08024d40

08011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8011b98:	6800      	ldr	r0, [r0, #0]
 8011b9a:	2800      	cmp	r0, #0
 8011b9c:	bfbd      	ittte	lt
 8011b9e:	380f      	sublt	r0, #15
 8011ba0:	2320      	movlt	r3, #32
 8011ba2:	fb90 f0f3 	sdivlt	r0, r0, r3
 8011ba6:	3010      	addge	r0, #16
 8011ba8:	bfa8      	it	ge
 8011baa:	1140      	asrge	r0, r0, #5
 8011bac:	4770      	bx	lr

08011bae <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8011bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8011bb8:	4688      	mov	r8, r1
 8011bba:	4691      	mov	r9, r2
 8011bbc:	469a      	mov	sl, r3
 8011bbe:	b360      	cbz	r0, 8011c1a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8011bc0:	2700      	movs	r7, #0
 8011bc2:	f04f 3bff 	mov.w	fp, #4294967295
 8011bc6:	b23e      	sxth	r6, r7
 8011bc8:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 8011bcc:	42b3      	cmp	r3, r6
 8011bce:	dd23      	ble.n	8011c18 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8011bd0:	682b      	ldr	r3, [r5, #0]
 8011bd2:	4631      	mov	r1, r6
 8011bd4:	4628      	mov	r0, r5
 8011bd6:	3701      	adds	r7, #1
 8011bd8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8011bdc:	4798      	blx	r3
 8011bde:	9001      	str	r0, [sp, #4]
 8011be0:	a801      	add	r0, sp, #4
 8011be2:	f7ff ffd9 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8011be6:	682b      	ldr	r3, [r5, #0]
 8011be8:	eba0 0008 	sub.w	r0, r0, r8
 8011bec:	4631      	mov	r1, r6
 8011bee:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8011bf2:	b204      	sxth	r4, r0
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	4798      	blx	r3
 8011bf8:	9001      	str	r0, [sp, #4]
 8011bfa:	a801      	add	r0, sp, #4
 8011bfc:	f7ff ffcc 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8011c00:	eba0 0009 	sub.w	r0, r0, r9
 8011c04:	fb10 f000 	smulbb	r0, r0, r0
 8011c08:	fb04 0404 	mla	r4, r4, r4, r0
 8011c0c:	455c      	cmp	r4, fp
 8011c0e:	bf3c      	itt	cc
 8011c10:	f8aa 6000 	strhcc.w	r6, [sl]
 8011c14:	46a3      	movcc	fp, r4
 8011c16:	e7d6      	b.n	8011bc6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8011c18:	2001      	movs	r0, #1
 8011c1a:	b003      	add	sp, #12
 8011c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c20 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8011c20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c24:	4604      	mov	r4, r0
 8011c26:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8011c2a:	4688      	mov	r8, r1
 8011c2c:	4691      	mov	r9, r2
 8011c2e:	b1f8      	cbz	r0, 8011c70 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 8011c30:	2500      	movs	r5, #0
 8011c32:	f04f 37ff 	mov.w	r7, #4294967295
 8011c36:	b22e      	sxth	r6, r5
 8011c38:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8011c3c:	42b3      	cmp	r3, r6
 8011c3e:	dd16      	ble.n	8011c6e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 8011c40:	6823      	ldr	r3, [r4, #0]
 8011c42:	4631      	mov	r1, r6
 8011c44:	4620      	mov	r0, r4
 8011c46:	3501      	adds	r5, #1
 8011c48:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8011c4c:	4798      	blx	r3
 8011c4e:	9001      	str	r0, [sp, #4]
 8011c50:	a801      	add	r0, sp, #4
 8011c52:	f7ff ffa1 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8011c56:	b200      	sxth	r0, r0
 8011c58:	eba0 0008 	sub.w	r0, r0, r8
 8011c5c:	2800      	cmp	r0, #0
 8011c5e:	bfb8      	it	lt
 8011c60:	4240      	neglt	r0, r0
 8011c62:	42b8      	cmp	r0, r7
 8011c64:	bf3c      	itt	cc
 8011c66:	f8a9 6000 	strhcc.w	r6, [r9]
 8011c6a:	4607      	movcc	r7, r0
 8011c6c:	e7e3      	b.n	8011c36 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 8011c6e:	2001      	movs	r0, #1
 8011c70:	b003      	add	sp, #12
 8011c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011c76 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8011c76:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 8011c7a:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011c7e:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 8011c82:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 8011c86:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 8011c8a:	4770      	bx	lr

08011c8c <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8011c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	3038      	adds	r0, #56	; 0x38
 8011c92:	460d      	mov	r5, r1
 8011c94:	f7fe f9ea 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011c98:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8011c9c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	9200      	str	r2, [sp, #0]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	f7f1 fc1e 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011cac:	b003      	add	sp, #12
 8011cae:	bd30      	pop	{r4, r5, pc}

08011cb0 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 8011cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cb2:	4604      	mov	r4, r0
 8011cb4:	3064      	adds	r0, #100	; 0x64
 8011cb6:	460d      	mov	r5, r1
 8011cb8:	f7fe f9d8 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011cbc:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8011cc0:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	9200      	str	r2, [sp, #0]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	4611      	mov	r1, r2
 8011ccc:	f7f1 fc0c 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011cd0:	b003      	add	sp, #12
 8011cd2:	bd30      	pop	{r4, r5, pc}

08011cd4 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 8011cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	30e8      	adds	r0, #232	; 0xe8
 8011cda:	460d      	mov	r5, r1
 8011cdc:	f7fe f9c6 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011ce0:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8011ce4:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8011ce8:	4628      	mov	r0, r5
 8011cea:	9200      	str	r2, [sp, #0]
 8011cec:	2200      	movs	r2, #0
 8011cee:	4611      	mov	r1, r2
 8011cf0:	f7f1 fbfa 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011cf4:	b003      	add	sp, #12
 8011cf6:	bd30      	pop	{r4, r5, pc}

08011cf8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8011cf8:	b538      	push	{r3, r4, r5, lr}
 8011cfa:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8011cfe:	460d      	mov	r5, r1
 8011d00:	428b      	cmp	r3, r1
 8011d02:	dd08      	ble.n	8011d16 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8011d04:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8011d06:	b134      	cbz	r4, 8011d16 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8011d08:	6823      	ldr	r3, [r4, #0]
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d10:	4798      	blx	r3
 8011d12:	69a4      	ldr	r4, [r4, #24]
 8011d14:	e7f7      	b.n	8011d06 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8011d16:	bd38      	pop	{r3, r4, r5, pc}

08011d18 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	b20e      	sxth	r6, r1
 8011d1c:	4605      	mov	r5, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	4631      	mov	r1, r6
 8011d22:	f7ff ffe9 	bl	8011cf8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8011d26:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 8011d30:	00a3      	lsls	r3, r4, #2
 8011d32:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 8011d36:	1d1a      	adds	r2, r3, #4
 8011d38:	42a1      	cmp	r1, r4
 8011d3a:	dd0a      	ble.n	8011d52 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 8011d3c:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 8011d40:	3401      	adds	r4, #1
 8011d42:	5888      	ldr	r0, [r1, r2]
 8011d44:	50c8      	str	r0, [r1, r3]
 8011d46:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 8011d4a:	5888      	ldr	r0, [r1, r2]
 8011d4c:	50c8      	str	r0, [r1, r3]
 8011d4e:	4613      	mov	r3, r2
 8011d50:	e7ef      	b.n	8011d32 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 8011d52:	4630      	mov	r0, r6
 8011d54:	bd70      	pop	{r4, r5, r6, pc}

08011d56 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8011d56:	b570      	push	{r4, r5, r6, lr}
 8011d58:	4606      	mov	r6, r0
 8011d5a:	460d      	mov	r5, r1
 8011d5c:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 8011d60:	b134      	cbz	r4, 8011d70 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8011d62:	6823      	ldr	r3, [r4, #0]
 8011d64:	4620      	mov	r0, r4
 8011d66:	4629      	mov	r1, r5
 8011d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d6a:	4798      	blx	r3
 8011d6c:	69a4      	ldr	r4, [r4, #24]
 8011d6e:	e7f7      	b.n	8011d60 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8011d70:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 8011d74:	b134      	cbz	r4, 8011d84 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8011d76:	6823      	ldr	r3, [r4, #0]
 8011d78:	4620      	mov	r0, r4
 8011d7a:	4629      	mov	r1, r5
 8011d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d7e:	4798      	blx	r3
 8011d80:	69a4      	ldr	r4, [r4, #24]
 8011d82:	e7f7      	b.n	8011d74 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8011d84:	bd70      	pop	{r4, r5, r6, pc}

08011d86 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8011d86:	b538      	push	{r3, r4, r5, lr}
 8011d88:	4604      	mov	r4, r0
 8011d8a:	2500      	movs	r5, #0
 8011d8c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8011d90:	42ab      	cmp	r3, r5
 8011d92:	db05      	blt.n	8011da0 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8011d94:	b229      	sxth	r1, r5
 8011d96:	4620      	mov	r0, r4
 8011d98:	f7ff ffdd 	bl	8011d56 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8011d9c:	3501      	adds	r5, #1
 8011d9e:	e7f5      	b.n	8011d8c <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 8011da0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011da4:	f005 fbfb 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 8011da8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8011dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011db0:	f005 bbf5 	b.w	801759e <_ZNK8touchgfx8Drawable10invalidateEv>

08011db4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8011db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011db6:	4604      	mov	r4, r0
 8011db8:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8011dba:	b15d      	cbz	r5, 8011dd4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8011dbc:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011dc6:	9200      	str	r2, [sp, #0]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	4611      	mov	r1, r2
 8011dcc:	f7f1 fb8c 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011dd0:	69ad      	ldr	r5, [r5, #24]
 8011dd2:	e7f2      	b.n	8011dba <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8011dd4:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 8011dd8:	b15d      	cbz	r5, 8011df2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8011dda:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 8011dde:	4628      	mov	r0, r5
 8011de0:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 8011de4:	9200      	str	r2, [sp, #0]
 8011de6:	2200      	movs	r2, #0
 8011de8:	4611      	mov	r1, r2
 8011dea:	f7f1 fb7d 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011dee:	69ad      	ldr	r5, [r5, #24]
 8011df0:	e7f2      	b.n	8011dd8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8011df2:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 8011df6:	b15d      	cbz	r5, 8011e10 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8011df8:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 8011dfc:	4628      	mov	r0, r5
 8011dfe:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 8011e02:	9200      	str	r2, [sp, #0]
 8011e04:	2200      	movs	r2, #0
 8011e06:	4611      	mov	r1, r2
 8011e08:	f7f1 fb6e 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011e0c:	69ad      	ldr	r5, [r5, #24]
 8011e0e:	e7f2      	b.n	8011df6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8011e10:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 8011e14:	b15d      	cbz	r5, 8011e2e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8011e16:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8011e1a:	4628      	mov	r0, r5
 8011e1c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 8011e20:	9200      	str	r2, [sp, #0]
 8011e22:	2200      	movs	r2, #0
 8011e24:	4611      	mov	r1, r2
 8011e26:	f7f1 fb5f 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011e2a:	69ad      	ldr	r5, [r5, #24]
 8011e2c:	e7f2      	b.n	8011e14 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8011e2e:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8011e32:	b15d      	cbz	r5, 8011e4c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8011e34:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8011e3e:	9200      	str	r2, [sp, #0]
 8011e40:	2200      	movs	r2, #0
 8011e42:	4611      	mov	r1, r2
 8011e44:	f7f1 fb50 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011e48:	69ad      	ldr	r5, [r5, #24]
 8011e4a:	e7f2      	b.n	8011e32 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	4620      	mov	r0, r4
 8011e50:	695b      	ldr	r3, [r3, #20]
 8011e52:	b003      	add	sp, #12
 8011e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e58:	4718      	bx	r3

08011e5a <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8011e5a:	b430      	push	{r4, r5}
 8011e5c:	b28a      	uxth	r2, r1
 8011e5e:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8011e62:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8011e66:	1b15      	subs	r5, r2, r4
 8011e68:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8011e6c:	8101      	strh	r1, [r0, #8]
 8011e6e:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8011e72:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8011e76:	442c      	add	r4, r5
 8011e78:	1b12      	subs	r2, r2, r4
 8011e7a:	bc30      	pop	{r4, r5}
 8011e7c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8011e80:	f7ff bf98 	b.w	8011db4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08011e84 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8011e84:	b430      	push	{r4, r5}
 8011e86:	b28a      	uxth	r2, r1
 8011e88:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8011e8c:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8011e90:	1b15      	subs	r5, r2, r4
 8011e92:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8011e96:	8141      	strh	r1, [r0, #10]
 8011e98:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8011e9c:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8011ea0:	442c      	add	r4, r5
 8011ea2:	1b12      	subs	r2, r2, r4
 8011ea4:	bc30      	pop	{r4, r5}
 8011ea6:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8011eaa:	f7ff bf83 	b.w	8011db4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08011eae <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8011eae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb2:	fa1f fa83 	uxth.w	sl, r3
 8011eb6:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8011eba:	4615      	mov	r5, r2
 8011ebc:	4699      	mov	r9, r3
 8011ebe:	fa1f f887 	uxth.w	r8, r7
 8011ec2:	8903      	ldrh	r3, [r0, #8]
 8011ec4:	4452      	add	r2, sl
 8011ec6:	4604      	mov	r4, r0
 8011ec8:	8940      	ldrh	r0, [r0, #10]
 8011eca:	460e      	mov	r6, r1
 8011ecc:	1a9b      	subs	r3, r3, r2
 8011ece:	eb08 0201 	add.w	r2, r8, r1
 8011ed2:	1a80      	subs	r0, r0, r2
 8011ed4:	b21b      	sxth	r3, r3
 8011ed6:	460a      	mov	r2, r1
 8011ed8:	4629      	mov	r1, r5
 8011eda:	b200      	sxth	r0, r0
 8011edc:	9000      	str	r0, [sp, #0]
 8011ede:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011ee2:	f7f1 fb01 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011eec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	9600      	str	r6, [sp, #0]
 8011ef4:	f7f1 faf8 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011ef8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011efc:	2200      	movs	r2, #0
 8011efe:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	462b      	mov	r3, r5
 8011f06:	4611      	mov	r1, r2
 8011f08:	f7f1 faee 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011f0c:	8921      	ldrh	r1, [r4, #8]
 8011f0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8011f12:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8011f16:	eba1 010a 	sub.w	r1, r1, sl
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	9300      	str	r3, [sp, #0]
 8011f1e:	464b      	mov	r3, r9
 8011f20:	b209      	sxth	r1, r1
 8011f22:	f7f1 fae1 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011f26:	8962      	ldrh	r2, [r4, #10]
 8011f28:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8011f2c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8011f30:	eba2 0208 	sub.w	r2, r2, r8
 8011f34:	9700      	str	r7, [sp, #0]
 8011f36:	2100      	movs	r1, #0
 8011f38:	b212      	sxth	r2, r2
 8011f3a:	f7f1 fad5 	bl	80034e8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8011f3e:	4620      	mov	r0, r4
 8011f40:	b002      	add	sp, #8
 8011f42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f46:	f7ff bf35 	b.w	8011db4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

08011f4c <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	b085      	sub	sp, #20
 8011f52:	4604      	mov	r4, r0
 8011f54:	2601      	movs	r6, #1
 8011f56:	2500      	movs	r5, #0
 8011f58:	9103      	str	r1, [sp, #12]
 8011f5a:	f7ff fe03 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f5e:	4b2c      	ldr	r3, [pc, #176]	; (8012010 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8011f60:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8011f64:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8011f68:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8011f6c:	6023      	str	r3, [r4, #0]
 8011f6e:	23ff      	movs	r3, #255	; 0xff
 8011f70:	4658      	mov	r0, fp
 8011f72:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8011f76:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8011f7a:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8011f7e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011f82:	f7ff fdef 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f86:	4648      	mov	r0, r9
 8011f88:	f7ff fdec 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f8c:	4640      	mov	r0, r8
 8011f8e:	f7ff fde9 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f92:	4650      	mov	r0, sl
 8011f94:	f7ff fde6 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f98:	4638      	mov	r0, r7
 8011f9a:	f7ff fde3 	bl	8011b64 <_ZN8touchgfx9ContainerC1Ev>
 8011f9e:	9903      	ldr	r1, [sp, #12]
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8011fa6:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8011faa:	4659      	mov	r1, fp
 8011fac:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8011fb0:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8011fb4:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8011fb8:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8011fbc:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8011fc0:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8011fc4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8011fc8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8011fcc:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8011fd0:	f7fe f84c 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011fd4:	4651      	mov	r1, sl
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	f7fe f848 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011fdc:	4649      	mov	r1, r9
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f7fe f844 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011fe4:	4641      	mov	r1, r8
 8011fe6:	4620      	mov	r0, r4
 8011fe8:	f7fe f840 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011fec:	4639      	mov	r1, r7
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f7fe f83c 	bl	801006c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	9500      	str	r5, [sp, #0]
 8011ff8:	462b      	mov	r3, r5
 8011ffa:	462a      	mov	r2, r5
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	f7ff ff56 	bl	8011eae <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8012002:	4620      	mov	r0, r4
 8012004:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8012008:	b005      	add	sp, #20
 801200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801200e:	bf00      	nop
 8012010:	08025184 	.word	0x08025184

08012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012014:	4291      	cmp	r1, r2
 8012016:	4613      	mov	r3, r2
 8012018:	d003      	beq.n	8012022 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 801201a:	460a      	mov	r2, r1
 801201c:	4619      	mov	r1, r3
 801201e:	f005 bc85 	b.w	801792c <_ZN8touchgfx6muldivElll>
 8012022:	4770      	bx	lr

08012024 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012028:	6803      	ldr	r3, [r0, #0]
 801202a:	460d      	mov	r5, r1
 801202c:	4604      	mov	r4, r0
 801202e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012032:	4798      	blx	r3
 8012034:	42a8      	cmp	r0, r5
 8012036:	4606      	mov	r6, r0
 8012038:	d024      	beq.n	8012084 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	4601      	mov	r1, r0
 801203e:	462a      	mov	r2, r5
 8012040:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8012044:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 8012048:	f7ff ffe4 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801204c:	4680      	mov	r8, r0
 801204e:	462a      	mov	r2, r5
 8012050:	4631      	mov	r1, r6
 8012052:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8012056:	f7ff ffdd 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801205a:	4641      	mov	r1, r8
 801205c:	4602      	mov	r2, r0
 801205e:	4620      	mov	r0, r4
 8012060:	47b8      	blx	r7
 8012062:	462a      	mov	r2, r5
 8012064:	4631      	mov	r1, r6
 8012066:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 801206a:	f7ff ffd3 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801206e:	462a      	mov	r2, r5
 8012070:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8012074:	4631      	mov	r1, r6
 8012076:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 801207a:	f7ff ffcb 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801207e:	6325      	str	r5, [r4, #48]	; 0x30
 8012080:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 8012084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012088 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801208c:	4604      	mov	r4, r0
 801208e:	460f      	mov	r7, r1
 8012090:	b1b2      	cbz	r2, 80120c0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012092:	6803      	ldr	r3, [r0, #0]
 8012094:	2600      	movs	r6, #0
 8012096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801209a:	4798      	blx	r3
 801209c:	4681      	mov	r9, r0
 801209e:	b235      	sxth	r5, r6
 80120a0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80120a4:	3601      	adds	r6, #1
 80120a6:	42ab      	cmp	r3, r5
 80120a8:	dd0a      	ble.n	80120c0 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 80120aa:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 80120ae:	463a      	mov	r2, r7
 80120b0:	4649      	mov	r1, r9
 80120b2:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80120b6:	f7ff ffad 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80120ba:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80120be:	e7ee      	b.n	801209e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 80120c0:	6367      	str	r7, [r4, #52]	; 0x34
 80120c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080120c6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 80120c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120ca:	4604      	mov	r4, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	b1b2      	cbz	r2, 80120fe <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 80120d0:	6803      	ldr	r3, [r0, #0]
 80120d2:	2600      	movs	r6, #0
 80120d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80120d8:	4798      	blx	r3
 80120da:	4681      	mov	r9, r0
 80120dc:	b235      	sxth	r5, r6
 80120de:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80120e2:	3601      	adds	r6, #1
 80120e4:	42ab      	cmp	r3, r5
 80120e6:	dd0a      	ble.n	80120fe <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 80120e8:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 80120ec:	463a      	mov	r2, r7
 80120ee:	4649      	mov	r1, r9
 80120f0:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80120f4:	f7ff ff8e 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80120f8:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80120fc:	e7ee      	b.n	80120dc <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 80120fe:	6327      	str	r7, [r4, #48]	; 0x30
 8012100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012104 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 8012104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012108:	4604      	mov	r4, r0
 801210a:	460f      	mov	r7, r1
 801210c:	b1b2      	cbz	r2, 801213c <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 801210e:	6803      	ldr	r3, [r0, #0]
 8012110:	2600      	movs	r6, #0
 8012112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012116:	4798      	blx	r3
 8012118:	4681      	mov	r9, r0
 801211a:	b235      	sxth	r5, r6
 801211c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012120:	3601      	adds	r6, #1
 8012122:	42ab      	cmp	r3, r5
 8012124:	dd0a      	ble.n	801213c <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 8012126:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 801212a:	463a      	mov	r2, r7
 801212c:	4649      	mov	r1, r9
 801212e:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012132:	f7ff ff6f 	bl	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012136:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 801213a:	e7ee      	b.n	801211a <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 801213c:	6367      	str	r7, [r4, #52]	; 0x34
 801213e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012142 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012142:	b570      	push	{r4, r5, r6, lr}
 8012144:	6803      	ldr	r3, [r0, #0]
 8012146:	4604      	mov	r4, r0
 8012148:	460d      	mov	r5, r1
 801214a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 801214e:	4798      	blx	r3
 8012150:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012154:	4629      	mov	r1, r5
 8012156:	4620      	mov	r0, r4
 8012158:	3301      	adds	r3, #1
 801215a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012164:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8012168:	4718      	bx	r3

0801216a <_ZN8touchgfx9GraphData8addValueEii>:
 801216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8012172:	4605      	mov	r5, r0
 8012174:	4617      	mov	r7, r2
 8012176:	2b00      	cmp	r3, #0
 8012178:	d03e      	beq.n	80121f8 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 801217a:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 801217e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8012182:	3801      	subs	r0, #1
 8012184:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8012188:	4288      	cmp	r0, r1
 801218a:	db35      	blt.n	80121f8 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 801218c:	2000      	movs	r0, #0
 801218e:	b204      	sxth	r4, r0
 8012190:	42a3      	cmp	r3, r4
 8012192:	dd16      	ble.n	80121c2 <_ZN8touchgfx9GraphData8addValueEii+0x58>
 8012194:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8012198:	3001      	adds	r0, #1
 801219a:	f852 6008 	ldr.w	r6, [r2, r8]
 801219e:	428e      	cmp	r6, r1
 80121a0:	dbf5      	blt.n	801218e <_ZN8touchgfx9GraphData8addValueEii+0x24>
 80121a2:	d10f      	bne.n	80121c4 <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 80121a4:	4621      	mov	r1, r4
 80121a6:	4628      	mov	r0, r5
 80121a8:	f7ff fda6 	bl	8011cf8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80121ac:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 80121b0:	f843 7008 	str.w	r7, [r3, r8]
 80121b4:	4621      	mov	r1, r4
 80121b6:	4628      	mov	r0, r5
 80121b8:	f7ff fd9e 	bl	8011cf8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 80121bc:	4620      	mov	r0, r4
 80121be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c2:	d01a      	beq.n	80121fa <_ZN8touchgfx9GraphData8addValueEii+0x90>
 80121c4:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80121c8:	428a      	cmp	r2, r1
 80121ca:	dc16      	bgt.n	80121fa <_ZN8touchgfx9GraphData8addValueEii+0x90>
 80121cc:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80121d0:	3801      	subs	r0, #1
 80121d2:	0080      	lsls	r0, r0, #2
 80121d4:	42a3      	cmp	r3, r4
 80121d6:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 80121da:	dd15      	ble.n	8012208 <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 80121dc:	5832      	ldr	r2, [r6, r0]
 80121de:	f100 0c04 	add.w	ip, r0, #4
 80121e2:	3b01      	subs	r3, #1
 80121e4:	f846 200c 	str.w	r2, [r6, ip]
 80121e8:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 80121ec:	b21b      	sxth	r3, r3
 80121ee:	5832      	ldr	r2, [r6, r0]
 80121f0:	3804      	subs	r0, #4
 80121f2:	f846 200c 	str.w	r2, [r6, ip]
 80121f6:	e7ed      	b.n	80121d4 <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 80121f8:	461c      	mov	r4, r3
 80121fa:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 80121fe:	429a      	cmp	r2, r3
 8012200:	d1e4      	bne.n	80121cc <_ZN8touchgfx9GraphData8addValueEii+0x62>
 8012202:	f04f 34ff 	mov.w	r4, #4294967295
 8012206:	e7d9      	b.n	80121bc <_ZN8touchgfx9GraphData8addValueEii+0x52>
 8012208:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 801220c:	3301      	adds	r3, #1
 801220e:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 8012212:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 8012216:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 801221a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 801221e:	e7c9      	b.n	80121b4 <_ZN8touchgfx9GraphData8addValueEii+0x4a>

08012220 <_ZN8touchgfx16GraphElementLineD1Ev>:
 8012220:	4770      	bx	lr

08012222 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8012222:	b510      	push	{r4, lr}
 8012224:	4604      	mov	r4, r0
 8012226:	2130      	movs	r1, #48	; 0x30
 8012228:	f00f ff1b 	bl	8022062 <_ZdlPvj>
 801222c:	4620      	mov	r0, r4
 801222e:	bd10      	pop	{r4, pc}

08012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	4604      	mov	r4, r0
 8012234:	4608      	mov	r0, r1
 8012236:	460d      	mov	r5, r1
 8012238:	f7fe f8df 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801223c:	b978      	cbnz	r0, 801225e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801223e:	4620      	mov	r0, r4
 8012240:	f7fe f8db 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012244:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012248:	b150      	cbz	r0, 8012260 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801224a:	8026      	strh	r6, [r4, #0]
 801224c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012250:	8063      	strh	r3, [r4, #2]
 8012252:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012256:	80a3      	strh	r3, [r4, #4]
 8012258:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801225c:	80e3      	strh	r3, [r4, #6]
 801225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012260:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012264:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012268:	42b1      	cmp	r1, r6
 801226a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801226e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012272:	460f      	mov	r7, r1
 8012274:	88ed      	ldrh	r5, [r5, #6]
 8012276:	bfa8      	it	ge
 8012278:	4637      	movge	r7, r6
 801227a:	4293      	cmp	r3, r2
 801227c:	4618      	mov	r0, r3
 801227e:	4466      	add	r6, ip
 8012280:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012284:	bfa8      	it	ge
 8012286:	4610      	movge	r0, r2
 8012288:	442a      	add	r2, r5
 801228a:	88e5      	ldrh	r5, [r4, #6]
 801228c:	4461      	add	r1, ip
 801228e:	b236      	sxth	r6, r6
 8012290:	8027      	strh	r7, [r4, #0]
 8012292:	442b      	add	r3, r5
 8012294:	b209      	sxth	r1, r1
 8012296:	b212      	sxth	r2, r2
 8012298:	8060      	strh	r0, [r4, #2]
 801229a:	b21b      	sxth	r3, r3
 801229c:	428e      	cmp	r6, r1
 801229e:	bfac      	ite	ge
 80122a0:	ebc7 0106 	rsbge	r1, r7, r6
 80122a4:	ebc7 0101 	rsblt	r1, r7, r1
 80122a8:	429a      	cmp	r2, r3
 80122aa:	bfac      	ite	ge
 80122ac:	ebc0 0202 	rsbge	r2, r0, r2
 80122b0:	ebc0 0203 	rsblt	r2, r0, r3
 80122b4:	80a1      	strh	r1, [r4, #4]
 80122b6:	80e2      	strh	r2, [r4, #6]
 80122b8:	e7d1      	b.n	801225e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

080122ba <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80122ba:	6800      	ldr	r0, [r0, #0]
 80122bc:	2800      	cmp	r0, #0
 80122be:	bfb9      	ittee	lt
 80122c0:	2320      	movlt	r3, #32
 80122c2:	fb90 f0f3 	sdivlt	r0, r0, r3
 80122c6:	301f      	addge	r0, #31
 80122c8:	1140      	asrge	r0, r0, #5
 80122ca:	4770      	bx	lr

080122cc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 80122cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d0:	6803      	ldr	r3, [r0, #0]
 80122d2:	b093      	sub	sp, #76	; 0x4c
 80122d4:	6945      	ldr	r5, [r0, #20]
 80122d6:	4604      	mov	r4, r0
 80122d8:	460f      	mov	r7, r1
 80122da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122dc:	2d00      	cmp	r5, #0
 80122de:	f000 81ad 	beq.w	801263c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80122e2:	696d      	ldr	r5, [r5, #20]
 80122e4:	4798      	blx	r3
 80122e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d077      	beq.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80122ee:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80122f2:	fb13 f000 	smulbb	r0, r3, r0
 80122f6:	b283      	uxth	r3, r0
 80122f8:	1c58      	adds	r0, r3, #1
 80122fa:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80122fe:	1200      	asrs	r0, r0, #8
 8012300:	d06d      	beq.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012302:	b2c3      	uxtb	r3, r0
 8012304:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012308:	462a      	mov	r2, r5
 801230a:	4621      	mov	r1, r4
 801230c:	9308      	str	r3, [sp, #32]
 801230e:	4640      	mov	r0, r8
 8012310:	6823      	ldr	r3, [r4, #0]
 8012312:	ae0e      	add	r6, sp, #56	; 0x38
 8012314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012318:	4798      	blx	r3
 801231a:	e898 0003 	ldmia.w	r8, {r0, r1}
 801231e:	e886 0003 	stmia.w	r6, {r0, r1}
 8012322:	4639      	mov	r1, r7
 8012324:	4630      	mov	r0, r6
 8012326:	f7fe f825 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	4629      	mov	r1, r5
 801232e:	4620      	mov	r0, r4
 8012330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012334:	4798      	blx	r3
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	4607      	mov	r7, r0
 801233a:	4629      	mov	r1, r5
 801233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012340:	4620      	mov	r0, r4
 8012342:	4798      	blx	r3
 8012344:	4681      	mov	r9, r0
 8012346:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 801234a:	4629      	mov	r1, r5
 801234c:	0103      	lsls	r3, r0, #4
 801234e:	4620      	mov	r0, r4
 8012350:	9309      	str	r3, [sp, #36]	; 0x24
 8012352:	6823      	ldr	r3, [r4, #0]
 8012354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012358:	4798      	blx	r3
 801235a:	4629      	mov	r1, r5
 801235c:	b203      	sxth	r3, r0
 801235e:	4620      	mov	r0, r4
 8012360:	9306      	str	r3, [sp, #24]
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012368:	4798      	blx	r3
 801236a:	2f00      	cmp	r7, #0
 801236c:	b203      	sxth	r3, r0
 801236e:	9307      	str	r3, [sp, #28]
 8012370:	d138      	bne.n	80123e4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8012372:	f1b9 0f00 	cmp.w	r9, #0
 8012376:	d132      	bne.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012378:	6823      	ldr	r3, [r4, #0]
 801237a:	464a      	mov	r2, r9
 801237c:	4629      	mov	r1, r5
 801237e:	4620      	mov	r0, r4
 8012380:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012384:	4798      	blx	r3
 8012386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012388:	1ac0      	subs	r0, r0, r3
 801238a:	9010      	str	r0, [sp, #64]	; 0x40
 801238c:	4640      	mov	r0, r8
 801238e:	f7ff fc03 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012392:	6823      	ldr	r3, [r4, #0]
 8012394:	4607      	mov	r7, r0
 8012396:	4629      	mov	r1, r5
 8012398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801239c:	4620      	mov	r0, r4
 801239e:	4798      	blx	r3
 80123a0:	1a38      	subs	r0, r7, r0
 80123a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80123a6:	fa0f f880 	sxth.w	r8, r0
 80123aa:	eb13 0f08 	cmn.w	r3, r8
 80123ae:	d416      	bmi.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	4629      	mov	r1, r5
 80123b4:	4620      	mov	r0, r4
 80123b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80123ba:	4798      	blx	r3
 80123bc:	4580      	cmp	r8, r0
 80123be:	da0e      	bge.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80123c0:	9a08      	ldr	r2, [sp, #32]
 80123c2:	b23f      	sxth	r7, r7
 80123c4:	6823      	ldr	r3, [r4, #0]
 80123c6:	4631      	mov	r1, r6
 80123c8:	9202      	str	r2, [sp, #8]
 80123ca:	4620      	mov	r0, r4
 80123cc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80123d0:	9700      	str	r7, [sp, #0]
 80123d2:	9201      	str	r2, [sp, #4]
 80123d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80123d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123dc:	47a8      	blx	r5
 80123de:	b013      	add	sp, #76	; 0x4c
 80123e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e4:	ddfb      	ble.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	4629      	mov	r1, r5
 80123ea:	4620      	mov	r0, r4
 80123ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80123f0:	4798      	blx	r3
 80123f2:	6823      	ldr	r3, [r4, #0]
 80123f4:	4683      	mov	fp, r0
 80123f6:	4629      	mov	r1, r5
 80123f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80123fc:	4620      	mov	r0, r4
 80123fe:	4798      	blx	r3
 8012400:	eba0 030b 	sub.w	r3, r0, fp
 8012404:	4680      	mov	r8, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	bfb8      	it	lt
 801240a:	425b      	neglt	r3, r3
 801240c:	fb93 f3f7 	sdiv	r3, r3, r7
 8012410:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012414:	dce3      	bgt.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012416:	6823      	ldr	r3, [r4, #0]
 8012418:	465a      	mov	r2, fp
 801241a:	4629      	mov	r1, r5
 801241c:	4620      	mov	r0, r4
 801241e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012422:	4798      	blx	r3
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	4606      	mov	r6, r0
 8012428:	4642      	mov	r2, r8
 801242a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801242e:	4629      	mov	r1, r5
 8012430:	4620      	mov	r0, r4
 8012432:	4798      	blx	r3
 8012434:	42b0      	cmp	r0, r6
 8012436:	bfa2      	ittt	ge
 8012438:	4643      	movge	r3, r8
 801243a:	46d8      	movge	r8, fp
 801243c:	469b      	movge	fp, r3
 801243e:	fb98 f6f7 	sdiv	r6, r8, r7
 8012442:	fb9b f2f7 	sdiv	r2, fp, r7
 8012446:	45d8      	cmp	r8, fp
 8012448:	bfac      	ite	ge
 801244a:	f04f 33ff 	movge.w	r3, #4294967295
 801244e:	2301      	movlt	r3, #1
 8012450:	1af6      	subs	r6, r6, r3
 8012452:	441a      	add	r2, r3
 8012454:	4296      	cmp	r6, r2
 8012456:	bfac      	ite	ge
 8012458:	f04f 3aff 	movge.w	sl, #4294967295
 801245c:	f04f 0a01 	movlt.w	sl, #1
 8012460:	f1b9 0f00 	cmp.w	r9, #0
 8012464:	d13e      	bne.n	80124e4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8012466:	fb07 fb0a 	mul.w	fp, r7, sl
 801246a:	eb0a 0802 	add.w	r8, sl, r2
 801246e:	4377      	muls	r7, r6
 8012470:	45b0      	cmp	r8, r6
 8012472:	d0b4      	beq.n	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012474:	6823      	ldr	r3, [r4, #0]
 8012476:	463a      	mov	r2, r7
 8012478:	4629      	mov	r1, r5
 801247a:	4620      	mov	r0, r4
 801247c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012480:	4798      	blx	r3
 8012482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012484:	1ac0      	subs	r0, r0, r3
 8012486:	9010      	str	r0, [sp, #64]	; 0x40
 8012488:	a810      	add	r0, sp, #64	; 0x40
 801248a:	f7ff fb85 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801248e:	6823      	ldr	r3, [r4, #0]
 8012490:	4681      	mov	r9, r0
 8012492:	4629      	mov	r1, r5
 8012494:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012498:	4620      	mov	r0, r4
 801249a:	4798      	blx	r3
 801249c:	eba9 0000 	sub.w	r0, r9, r0
 80124a0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80124a4:	b203      	sxth	r3, r0
 80124a6:	42da      	cmn	r2, r3
 80124a8:	9304      	str	r3, [sp, #16]
 80124aa:	d418      	bmi.n	80124de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80124ac:	6822      	ldr	r2, [r4, #0]
 80124ae:	4629      	mov	r1, r5
 80124b0:	4620      	mov	r0, r4
 80124b2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80124b6:	4790      	blx	r2
 80124b8:	9b04      	ldr	r3, [sp, #16]
 80124ba:	4283      	cmp	r3, r0
 80124bc:	da0f      	bge.n	80124de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 80124be:	9b08      	ldr	r3, [sp, #32]
 80124c0:	a90e      	add	r1, sp, #56	; 0x38
 80124c2:	6822      	ldr	r2, [r4, #0]
 80124c4:	4620      	mov	r0, r4
 80124c6:	9302      	str	r3, [sp, #8]
 80124c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80124cc:	9301      	str	r3, [sp, #4]
 80124ce:	fa0f f389 	sxth.w	r3, r9
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 80124d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124dc:	47c8      	blx	r9
 80124de:	4456      	add	r6, sl
 80124e0:	445f      	add	r7, fp
 80124e2:	e7c5      	b.n	8012470 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 80124e4:	fb98 f8f9 	sdiv	r8, r8, r9
 80124e8:	eba8 0203 	sub.w	r2, r8, r3
 80124ec:	4629      	mov	r1, r5
 80124ee:	4620      	mov	r0, r4
 80124f0:	9204      	str	r2, [sp, #16]
 80124f2:	fb9b f8f9 	sdiv	r8, fp, r9
 80124f6:	4498      	add	r8, r3
 80124f8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 80124fc:	4542      	cmp	r2, r8
 80124fe:	bfac      	ite	ge
 8012500:	f04f 33ff 	movge.w	r3, #4294967295
 8012504:	2301      	movlt	r3, #1
 8012506:	fb02 f209 	mul.w	r2, r2, r9
 801250a:	930a      	str	r3, [sp, #40]	; 0x28
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012512:	4798      	blx	r3
 8012514:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8012518:	4658      	mov	r0, fp
 801251a:	f7ff fb3d 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801251e:	fb06 f207 	mul.w	r2, r6, r7
 8012522:	b203      	sxth	r3, r0
 8012524:	4629      	mov	r1, r5
 8012526:	4620      	mov	r0, r4
 8012528:	9305      	str	r3, [sp, #20]
 801252a:	6823      	ldr	r3, [r4, #0]
 801252c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012530:	4798      	blx	r3
 8012532:	9010      	str	r0, [sp, #64]	; 0x40
 8012534:	4658      	mov	r0, fp
 8012536:	f7ff fb2f 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801253a:	fb07 f20a 	mul.w	r2, r7, sl
 801253e:	b203      	sxth	r3, r0
 8012540:	920b      	str	r2, [sp, #44]	; 0x2c
 8012542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012544:	4442      	add	r2, r8
 8012546:	920c      	str	r2, [sp, #48]	; 0x30
 8012548:	9a05      	ldr	r2, [sp, #20]
 801254a:	429a      	cmp	r2, r3
 801254c:	dc16      	bgt.n	801257c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 801254e:	eb06 080a 	add.w	r8, r6, sl
 8012552:	fb07 f808 	mul.w	r8, r7, r8
 8012556:	9a05      	ldr	r2, [sp, #20]
 8012558:	429a      	cmp	r2, r3
 801255a:	db54      	blt.n	8012606 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	4642      	mov	r2, r8
 8012560:	4629      	mov	r1, r5
 8012562:	4620      	mov	r0, r4
 8012564:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012568:	4456      	add	r6, sl
 801256a:	4798      	blx	r3
 801256c:	9010      	str	r0, [sp, #64]	; 0x40
 801256e:	4658      	mov	r0, fp
 8012570:	f7ff fb12 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012576:	b203      	sxth	r3, r0
 8012578:	4490      	add	r8, r2
 801257a:	e7ec      	b.n	8012556 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 801257c:	6823      	ldr	r3, [r4, #0]
 801257e:	fb07 f206 	mul.w	r2, r7, r6
 8012582:	4629      	mov	r1, r5
 8012584:	4620      	mov	r0, r4
 8012586:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801258a:	4798      	blx	r3
 801258c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801258e:	1ac0      	subs	r0, r0, r3
 8012590:	9010      	str	r0, [sp, #64]	; 0x40
 8012592:	4658      	mov	r0, fp
 8012594:	f7ff fb00 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012598:	6823      	ldr	r3, [r4, #0]
 801259a:	4680      	mov	r8, r0
 801259c:	4629      	mov	r1, r5
 801259e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80125a2:	4620      	mov	r0, r4
 80125a4:	4798      	blx	r3
 80125a6:	eba8 0000 	sub.w	r0, r8, r0
 80125aa:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80125ae:	b203      	sxth	r3, r0
 80125b0:	42da      	cmn	r2, r3
 80125b2:	930d      	str	r3, [sp, #52]	; 0x34
 80125b4:	d418      	bmi.n	80125e8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80125b6:	6822      	ldr	r2, [r4, #0]
 80125b8:	4629      	mov	r1, r5
 80125ba:	4620      	mov	r0, r4
 80125bc:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80125c0:	4790      	blx	r2
 80125c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125c4:	4283      	cmp	r3, r0
 80125c6:	da0f      	bge.n	80125e8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 80125c8:	9b08      	ldr	r3, [sp, #32]
 80125ca:	a90e      	add	r1, sp, #56	; 0x38
 80125cc:	6822      	ldr	r2, [r4, #0]
 80125ce:	4620      	mov	r0, r4
 80125d0:	9302      	str	r3, [sp, #8]
 80125d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80125d6:	9301      	str	r3, [sp, #4]
 80125d8:	fa0f f388 	sxth.w	r3, r8
 80125dc:	9300      	str	r3, [sp, #0]
 80125de:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 80125e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80125e6:	47c0      	blx	r8
 80125e8:	6823      	ldr	r3, [r4, #0]
 80125ea:	4456      	add	r6, sl
 80125ec:	4629      	mov	r1, r5
 80125ee:	4620      	mov	r0, r4
 80125f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80125f4:	fb06 f207 	mul.w	r2, r6, r7
 80125f8:	4798      	blx	r3
 80125fa:	9010      	str	r0, [sp, #64]	; 0x40
 80125fc:	4658      	mov	r0, fp
 80125fe:	f7ff facb 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012602:	b203      	sxth	r3, r0
 8012604:	e7a0      	b.n	8012548 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8012606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012608:	930d      	str	r3, [sp, #52]	; 0x34
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	4413      	add	r3, r2
 801260e:	9304      	str	r3, [sp, #16]
 8012610:	9a04      	ldr	r2, [sp, #16]
 8012612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012614:	4293      	cmp	r3, r2
 8012616:	f43f aee2 	beq.w	80123de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 801261a:	9b04      	ldr	r3, [sp, #16]
 801261c:	4629      	mov	r1, r5
 801261e:	6822      	ldr	r2, [r4, #0]
 8012620:	4620      	mov	r0, r4
 8012622:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 8012626:	fb03 f209 	mul.w	r2, r3, r9
 801262a:	47c0      	blx	r8
 801262c:	9010      	str	r0, [sp, #64]	; 0x40
 801262e:	4658      	mov	r0, fp
 8012630:	f7ff fab2 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012634:	b203      	sxth	r3, r0
 8012636:	9305      	str	r3, [sp, #20]
 8012638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801263a:	e785      	b.n	8012548 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 801263c:	4798      	blx	r3
 801263e:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012642:	deff      	udf	#255	; 0xff

08012644 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8012644:	b510      	push	{r4, lr}
 8012646:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801264a:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801264e:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8012652:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8012656:	139b      	asrs	r3, r3, #14
 8012658:	13a4      	asrs	r4, r4, #14
 801265a:	429c      	cmp	r4, r3
 801265c:	bfb8      	it	lt
 801265e:	461c      	movlt	r4, r3
 8012660:	2c01      	cmp	r4, #1
 8012662:	dd07      	ble.n	8012674 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8012664:	fb91 f1f4 	sdiv	r1, r1, r4
 8012668:	fb90 f0f4 	sdiv	r0, r0, r4
 801266c:	f7ff ffea 	bl	8012644 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8012670:	4360      	muls	r0, r4
 8012672:	bd10      	pop	{r4, pc}
 8012674:	4340      	muls	r0, r0
 8012676:	fb01 0101 	mla	r1, r1, r1, r0
 801267a:	2000      	movs	r0, #0
 801267c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012680:	bfb4      	ite	lt
 8012682:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 8012686:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 801268a:	18c2      	adds	r2, r0, r3
 801268c:	428a      	cmp	r2, r1
 801268e:	bf9c      	itt	ls
 8012690:	1898      	addls	r0, r3, r2
 8012692:	1a89      	subls	r1, r1, r2
 8012694:	089b      	lsrs	r3, r3, #2
 8012696:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801269a:	d1f6      	bne.n	801268a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 801269c:	e7e9      	b.n	8012672 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0801269e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801269e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126a0:	9906      	ldr	r1, [sp, #24]
 80126a2:	4606      	mov	r6, r0
 80126a4:	461c      	mov	r4, r3
 80126a6:	2020      	movs	r0, #32
 80126a8:	4291      	cmp	r1, r2
 80126aa:	bfbc      	itt	lt
 80126ac:	9206      	strlt	r2, [sp, #24]
 80126ae:	460a      	movlt	r2, r1
 80126b0:	9907      	ldr	r1, [sp, #28]
 80126b2:	428b      	cmp	r3, r1
 80126b4:	bfc4      	itt	gt
 80126b6:	460c      	movgt	r4, r1
 80126b8:	9307      	strgt	r3, [sp, #28]
 80126ba:	fb92 f5f0 	sdiv	r5, r2, r0
 80126be:	fb94 f4f0 	sdiv	r4, r4, r0
 80126c2:	a806      	add	r0, sp, #24
 80126c4:	f7ff fdf9 	bl	80122ba <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80126c8:	4607      	mov	r7, r0
 80126ca:	a807      	add	r0, sp, #28
 80126cc:	f7ff fdf5 	bl	80122ba <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80126d0:	1b7a      	subs	r2, r7, r5
 80126d2:	1b00      	subs	r0, r0, r4
 80126d4:	8035      	strh	r5, [r6, #0]
 80126d6:	8074      	strh	r4, [r6, #2]
 80126d8:	80f0      	strh	r0, [r6, #6]
 80126da:	4630      	mov	r0, r6
 80126dc:	80b2      	strh	r2, [r6, #4]
 80126de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080126e0 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80126e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126e2:	9c08      	ldr	r4, [sp, #32]
 80126e4:	2602      	movs	r6, #2
 80126e6:	4605      	mov	r5, r0
 80126e8:	3401      	adds	r4, #1
 80126ea:	fb94 f4f6 	sdiv	r4, r4, r6
 80126ee:	18a6      	adds	r6, r4, r2
 80126f0:	191f      	adds	r7, r3, r4
 80126f2:	1b12      	subs	r2, r2, r4
 80126f4:	1b1b      	subs	r3, r3, r4
 80126f6:	e9cd 6700 	strd	r6, r7, [sp]
 80126fa:	f7ff ffd0 	bl	801269e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80126fe:	4628      	mov	r0, r5
 8012700:	b003      	add	sp, #12
 8012702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012704 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8012704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012708:	6943      	ldr	r3, [r0, #20]
 801270a:	b087      	sub	sp, #28
 801270c:	4606      	mov	r6, r0
 801270e:	460d      	mov	r5, r1
 8012710:	2b00      	cmp	r3, #0
 8012712:	d072      	beq.n	80127fa <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8012714:	695c      	ldr	r4, [r3, #20]
 8012716:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 801271a:	6823      	ldr	r3, [r4, #0]
 801271c:	4620      	mov	r0, r4
 801271e:	017f      	lsls	r7, r7, #5
 8012720:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012724:	4798      	blx	r3
 8012726:	6823      	ldr	r3, [r4, #0]
 8012728:	4680      	mov	r8, r0
 801272a:	4629      	mov	r1, r5
 801272c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012730:	4620      	mov	r0, r4
 8012732:	4798      	blx	r3
 8012734:	9700      	str	r7, [sp, #0]
 8012736:	4603      	mov	r3, r0
 8012738:	4642      	mov	r2, r8
 801273a:	4631      	mov	r1, r6
 801273c:	a802      	add	r0, sp, #8
 801273e:	f7ff ffcf 	bl	80126e0 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012742:	2d00      	cmp	r5, #0
 8012744:	dd1b      	ble.n	801277e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8012746:	f105 38ff 	add.w	r8, r5, #4294967295
 801274a:	6823      	ldr	r3, [r4, #0]
 801274c:	4620      	mov	r0, r4
 801274e:	fa0f f888 	sxth.w	r8, r8
 8012752:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012756:	4641      	mov	r1, r8
 8012758:	4798      	blx	r3
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	4681      	mov	r9, r0
 801275e:	4641      	mov	r1, r8
 8012760:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012764:	4620      	mov	r0, r4
 8012766:	4798      	blx	r3
 8012768:	4631      	mov	r1, r6
 801276a:	4603      	mov	r3, r0
 801276c:	9700      	str	r7, [sp, #0]
 801276e:	a804      	add	r0, sp, #16
 8012770:	464a      	mov	r2, r9
 8012772:	f7ff ffb5 	bl	80126e0 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8012776:	a904      	add	r1, sp, #16
 8012778:	a802      	add	r0, sp, #8
 801277a:	f7ff fd59 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801277e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012782:	3b01      	subs	r3, #1
 8012784:	429d      	cmp	r5, r3
 8012786:	da19      	bge.n	80127bc <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8012788:	3501      	adds	r5, #1
 801278a:	6823      	ldr	r3, [r4, #0]
 801278c:	4620      	mov	r0, r4
 801278e:	b22d      	sxth	r5, r5
 8012790:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012794:	4629      	mov	r1, r5
 8012796:	4798      	blx	r3
 8012798:	6823      	ldr	r3, [r4, #0]
 801279a:	4680      	mov	r8, r0
 801279c:	4629      	mov	r1, r5
 801279e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80127a2:	4620      	mov	r0, r4
 80127a4:	4798      	blx	r3
 80127a6:	4631      	mov	r1, r6
 80127a8:	4603      	mov	r3, r0
 80127aa:	9700      	str	r7, [sp, #0]
 80127ac:	a804      	add	r0, sp, #16
 80127ae:	4642      	mov	r2, r8
 80127b0:	f7ff ff96 	bl	80126e0 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80127b4:	a904      	add	r1, sp, #16
 80127b6:	a802      	add	r0, sp, #8
 80127b8:	f7ff fd3a 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80127bc:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 80127c0:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80127c4:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80127c8:	18ca      	adds	r2, r1, r3
 80127ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80127ce:	f8ad 1012 	strh.w	r1, [sp, #18]
 80127d2:	a904      	add	r1, sp, #16
 80127d4:	1a9b      	subs	r3, r3, r2
 80127d6:	2200      	movs	r2, #0
 80127d8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80127dc:	a802      	add	r0, sp, #8
 80127de:	f8ad 2010 	strh.w	r2, [sp, #16]
 80127e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80127e6:	f7fd fdc5 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 80127ea:	6833      	ldr	r3, [r6, #0]
 80127ec:	a902      	add	r1, sp, #8
 80127ee:	4630      	mov	r0, r6
 80127f0:	691b      	ldr	r3, [r3, #16]
 80127f2:	4798      	blx	r3
 80127f4:	b007      	add	sp, #28
 80127f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	deff      	udf	#255	; 0xff

080127fe <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 80127fe:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	da05      	bge.n	8012812 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8012806:	b29b      	uxth	r3, r3
 8012808:	880a      	ldrh	r2, [r1, #0]
 801280a:	441a      	add	r2, r3
 801280c:	425b      	negs	r3, r3
 801280e:	800a      	strh	r2, [r1, #0]
 8012810:	808b      	strh	r3, [r1, #4]
 8012812:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012816:	2b00      	cmp	r3, #0
 8012818:	da05      	bge.n	8012826 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 801281a:	b29b      	uxth	r3, r3
 801281c:	884a      	ldrh	r2, [r1, #2]
 801281e:	441a      	add	r2, r3
 8012820:	425b      	negs	r3, r3
 8012822:	804a      	strh	r2, [r1, #2]
 8012824:	80cb      	strh	r3, [r1, #6]
 8012826:	4770      	bx	lr

08012828 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8012828:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801282a:	4604      	mov	r4, r0
 801282c:	460d      	mov	r5, r1
 801282e:	6801      	ldr	r1, [r0, #0]
 8012830:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8012834:	9001      	str	r0, [sp, #4]
 8012836:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801283a:	9000      	str	r0, [sp, #0]
 801283c:	a802      	add	r0, sp, #8
 801283e:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8012842:	4621      	mov	r1, r4
 8012844:	47b0      	blx	r6
 8012846:	a902      	add	r1, sp, #8
 8012848:	4620      	mov	r0, r4
 801284a:	f7ff ffd8 	bl	80127fe <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 801284e:	a802      	add	r0, sp, #8
 8012850:	4629      	mov	r1, r5
 8012852:	f7fd fd8f 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8012856:	a802      	add	r0, sp, #8
 8012858:	f7fd fdcf 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801285c:	b968      	cbnz	r0, 801287a <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 801285e:	6823      	ldr	r3, [r4, #0]
 8012860:	a902      	add	r1, sp, #8
 8012862:	4620      	mov	r0, r4
 8012864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012866:	4798      	blx	r3
 8012868:	f7fe f854 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 801286c:	6803      	ldr	r3, [r0, #0]
 801286e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012870:	a902      	add	r1, sp, #8
 8012872:	6a1d      	ldr	r5, [r3, #32]
 8012874:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012878:	47a8      	blx	r5
 801287a:	b004      	add	sp, #16
 801287c:	bd70      	pop	{r4, r5, r6, pc}

0801287e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 801287e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012882:	b08b      	sub	sp, #44	; 0x2c
 8012884:	461e      	mov	r6, r3
 8012886:	460f      	mov	r7, r1
 8012888:	4615      	mov	r5, r2
 801288a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 801288e:	429e      	cmp	r6, r3
 8012890:	9304      	str	r3, [sp, #16]
 8012892:	d074      	beq.n	801297e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8012894:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8012898:	4631      	mov	r1, r6
 801289a:	4610      	mov	r0, r2
 801289c:	4634      	mov	r4, r6
 801289e:	015b      	lsls	r3, r3, #5
 80128a0:	9303      	str	r3, [sp, #12]
 80128a2:	6813      	ldr	r3, [r2, #0]
 80128a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80128a8:	4798      	blx	r3
 80128aa:	ab0a      	add	r3, sp, #40	; 0x28
 80128ac:	f843 0d10 	str.w	r0, [r3, #-16]!
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ff f971 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128b6:	682b      	ldr	r3, [r5, #0]
 80128b8:	4631      	mov	r1, r6
 80128ba:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80128be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80128c2:	4628      	mov	r0, r5
 80128c4:	4798      	blx	r3
 80128c6:	ab0a      	add	r3, sp, #40	; 0x28
 80128c8:	f843 0d0c 	str.w	r0, [r3, #-12]!
 80128cc:	4618      	mov	r0, r3
 80128ce:	f7ff f963 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128d2:	4641      	mov	r1, r8
 80128d4:	ea4f 1940 	mov.w	r9, r0, lsl #5
 80128d8:	4638      	mov	r0, r7
 80128da:	464a      	mov	r2, r9
 80128dc:	f00f fb00 	bl	8021ee0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80128e0:	2301      	movs	r3, #1
 80128e2:	9300      	str	r3, [sp, #0]
 80128e4:	4628      	mov	r0, r5
 80128e6:	9b00      	ldr	r3, [sp, #0]
 80128e8:	441c      	add	r4, r3
 80128ea:	682b      	ldr	r3, [r5, #0]
 80128ec:	b224      	sxth	r4, r4
 80128ee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80128f2:	4621      	mov	r1, r4
 80128f4:	4798      	blx	r3
 80128f6:	9008      	str	r0, [sp, #32]
 80128f8:	a808      	add	r0, sp, #32
 80128fa:	f7ff f94d 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128fe:	4621      	mov	r1, r4
 8012900:	0143      	lsls	r3, r0, #5
 8012902:	4628      	mov	r0, r5
 8012904:	9301      	str	r3, [sp, #4]
 8012906:	682b      	ldr	r3, [r5, #0]
 8012908:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801290c:	4798      	blx	r3
 801290e:	9009      	str	r0, [sp, #36]	; 0x24
 8012910:	a809      	add	r0, sp, #36	; 0x24
 8012912:	f7ff f941 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012916:	0143      	lsls	r3, r0, #5
 8012918:	9302      	str	r3, [sp, #8]
 801291a:	9b01      	ldr	r3, [sp, #4]
 801291c:	eba3 0b08 	sub.w	fp, r3, r8
 8012920:	9b02      	ldr	r3, [sp, #8]
 8012922:	eba3 0a09 	sub.w	sl, r3, r9
 8012926:	4658      	mov	r0, fp
 8012928:	4651      	mov	r1, sl
 801292a:	f7ff fe8b 	bl	8012644 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801292e:	b320      	cbz	r0, 801297a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8012930:	4602      	mov	r2, r0
 8012932:	4651      	mov	r1, sl
 8012934:	9005      	str	r0, [sp, #20]
 8012936:	9803      	ldr	r0, [sp, #12]
 8012938:	f004 fff8 	bl	801792c <_ZN8touchgfx6muldivElll>
 801293c:	2302      	movs	r3, #2
 801293e:	4659      	mov	r1, fp
 8012940:	fb90 faf3 	sdiv	sl, r0, r3
 8012944:	9b05      	ldr	r3, [sp, #20]
 8012946:	9803      	ldr	r0, [sp, #12]
 8012948:	461a      	mov	r2, r3
 801294a:	f004 ffef 	bl	801792c <_ZN8touchgfx6muldivElll>
 801294e:	2302      	movs	r3, #2
 8012950:	eba8 010a 	sub.w	r1, r8, sl
 8012954:	fb90 fbf3 	sdiv	fp, r0, r3
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	eb0b 0209 	add.w	r2, fp, r9
 801295e:	4638      	mov	r0, r7
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	4798      	blx	r3
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	9a02      	ldr	r2, [sp, #8]
 8012968:	4638      	mov	r0, r7
 801296a:	9901      	ldr	r1, [sp, #4]
 801296c:	689b      	ldr	r3, [r3, #8]
 801296e:	445a      	add	r2, fp
 8012970:	eba1 010a 	sub.w	r1, r1, sl
 8012974:	4798      	blx	r3
 8012976:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 801297a:	42a6      	cmp	r6, r4
 801297c:	db02      	blt.n	8012984 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 801297e:	b00b      	add	sp, #44	; 0x2c
 8012980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012984:	9b00      	ldr	r3, [sp, #0]
 8012986:	9a04      	ldr	r2, [sp, #16]
 8012988:	42a2      	cmp	r2, r4
 801298a:	bf08      	it	eq
 801298c:	f04f 33ff 	moveq.w	r3, #4294967295
 8012990:	e7a7      	b.n	80128e2 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08012994 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8012994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012998:	6943      	ldr	r3, [r0, #20]
 801299a:	b0a2      	sub	sp, #136	; 0x88
 801299c:	4606      	mov	r6, r0
 801299e:	460f      	mov	r7, r1
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d06c      	beq.n	8012a7e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 80129a4:	695c      	ldr	r4, [r3, #20]
 80129a6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	dc04      	bgt.n	80129b8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 80129ae:	2401      	movs	r4, #1
 80129b0:	4620      	mov	r0, r4
 80129b2:	b022      	add	sp, #136	; 0x88
 80129b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80129bc:	ad22      	add	r5, sp, #136	; 0x88
 80129be:	011b      	lsls	r3, r3, #4
 80129c0:	f845 3d70 	str.w	r3, [r5, #-112]!
 80129c4:	4628      	mov	r0, r5
 80129c6:	f7ff fc78 	bl	80122ba <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80129ca:	8839      	ldrh	r1, [r7, #0]
 80129cc:	88ba      	ldrh	r2, [r7, #4]
 80129ce:	b280      	uxth	r0, r0
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	440a      	add	r2, r1
 80129d4:	1a09      	subs	r1, r1, r0
 80129d6:	4402      	add	r2, r0
 80129d8:	f10d 000e 	add.w	r0, sp, #14
 80129dc:	b209      	sxth	r1, r1
 80129de:	9000      	str	r0, [sp, #0]
 80129e0:	b212      	sxth	r2, r2
 80129e2:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 80129e6:	4620      	mov	r0, r4
 80129e8:	ab03      	add	r3, sp, #12
 80129ea:	47c0      	blx	r8
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d0de      	beq.n	80129ae <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80129f0:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 80129f4:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80129f8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80129fc:	18ca      	adds	r2, r1, r3
 80129fe:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012a02:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012a06:	4639      	mov	r1, r7
 8012a08:	1a9b      	subs	r3, r3, r2
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012a10:	a804      	add	r0, sp, #16
 8012a12:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012a16:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012a1a:	f7fd fcab 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8012a1e:	aa04      	add	r2, sp, #16
 8012a20:	4631      	mov	r1, r6
 8012a22:	4628      	mov	r0, r5
 8012a24:	f00f f8e2 	bl	8021bec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8012a28:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8012a2c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012a30:	2f00      	cmp	r7, #0
 8012a32:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8012a36:	dd03      	ble.n	8012a40 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012a38:	42bb      	cmp	r3, r7
 8012a3a:	da01      	bge.n	8012a40 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8012a3c:	42ba      	cmp	r2, r7
 8012a3e:	da11      	bge.n	8012a64 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8012a40:	9200      	str	r2, [sp, #0]
 8012a42:	4622      	mov	r2, r4
 8012a44:	4629      	mov	r1, r5
 8012a46:	4630      	mov	r0, r6
 8012a48:	f7ff ff19 	bl	801287e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012a4c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012a50:	4628      	mov	r0, r5
 8012a52:	f00f f987 	bl	8021d64 <_ZN8touchgfx6Canvas6renderEh>
 8012a56:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8012a58:	4604      	mov	r4, r0
 8012a5a:	a80e      	add	r0, sp, #56	; 0x38
 8012a5c:	9306      	str	r3, [sp, #24]
 8012a5e:	f001 fa53 	bl	8013f08 <_ZN8touchgfx7OutlineD1Ev>
 8012a62:	e7a5      	b.n	80129b0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 8012a64:	1e7a      	subs	r2, r7, #1
 8012a66:	4629      	mov	r1, r5
 8012a68:	4630      	mov	r0, r6
 8012a6a:	b212      	sxth	r2, r2
 8012a6c:	9200      	str	r2, [sp, #0]
 8012a6e:	4622      	mov	r2, r4
 8012a70:	f7ff ff05 	bl	801287e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8012a74:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012a78:	9300      	str	r3, [sp, #0]
 8012a7a:	463b      	mov	r3, r7
 8012a7c:	e7e1      	b.n	8012a42 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8012a7e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012a82:	deff      	udf	#255	; 0xff
 8012a84:	080259f4 	.word	0x080259f4

08012a88 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8012a88:	4770      	bx	lr

08012a8a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8012a8a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012a8c:	b118      	cbz	r0, 8012a96 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8012a8e:	6803      	ldr	r3, [r0, #0]
 8012a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a94:	4718      	bx	r3
 8012a96:	4770      	bx	lr

08012a98 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012a98:	680b      	ldr	r3, [r1, #0]
 8012a9a:	4608      	mov	r0, r1
 8012a9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8012aa0:	4718      	bx	r3

08012aa2 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012aa2:	680b      	ldr	r3, [r1, #0]
 8012aa4:	4608      	mov	r0, r1
 8012aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012aaa:	4718      	bx	r3

08012aac <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8012aac:	680b      	ldr	r3, [r1, #0]
 8012aae:	4608      	mov	r0, r1
 8012ab0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8012ab4:	4718      	bx	r3

08012ab6 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 8012ab6:	680b      	ldr	r3, [r1, #0]
 8012ab8:	4608      	mov	r0, r1
 8012aba:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8012abe:	4718      	bx	r3

08012ac0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8012ac0:	4a38      	ldr	r2, [pc, #224]	; (8012ba4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 8012ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012ac8:	b087      	sub	sp, #28
 8012aca:	8812      	ldrh	r2, [r2, #0]
 8012acc:	4604      	mov	r4, r0
 8012ace:	4689      	mov	r9, r1
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d937      	bls.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012ad4:	4a34      	ldr	r2, [pc, #208]	; (8012ba8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 8012ad6:	6812      	ldr	r2, [r2, #0]
 8012ad8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012adc:	4b33      	ldr	r3, [pc, #204]	; (8012bac <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012ae4:	f1b8 0f00 	cmp.w	r8, #0
 8012ae8:	d02c      	beq.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012aea:	6803      	ldr	r3, [r0, #0]
 8012aec:	6945      	ldr	r5, [r0, #20]
 8012aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012af0:	2d00      	cmp	r5, #0
 8012af2:	d052      	beq.n	8012b9a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 8012af4:	696f      	ldr	r7, [r5, #20]
 8012af6:	4798      	blx	r3
 8012af8:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 8012afc:	fb15 f000 	smulbb	r0, r5, r0
 8012b00:	b280      	uxth	r0, r0
 8012b02:	1c45      	adds	r5, r0, #1
 8012b04:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8012b08:	122d      	asrs	r5, r5, #8
 8012b0a:	d01b      	beq.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	4639      	mov	r1, r7
 8012b10:	4620      	mov	r0, r4
 8012b12:	b2ed      	uxtb	r5, r5
 8012b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b18:	4798      	blx	r3
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b24:	4620      	mov	r0, r4
 8012b26:	4798      	blx	r3
 8012b28:	4683      	mov	fp, r0
 8012b2a:	b970      	cbnz	r0, 8012b4a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012b2c:	b96e      	cbnz	r6, 8012b4a <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	4642      	mov	r2, r8
 8012b32:	9600      	str	r6, [sp, #0]
 8012b34:	4649      	mov	r1, r9
 8012b36:	4620      	mov	r0, r4
 8012b38:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8012b3c:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8012b40:	463b      	mov	r3, r7
 8012b42:	47a8      	blx	r5
 8012b44:	b007      	add	sp, #28
 8012b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b4a:	2e00      	cmp	r6, #0
 8012b4c:	ddfa      	ble.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012b4e:	6823      	ldr	r3, [r4, #0]
 8012b50:	4639      	mov	r1, r7
 8012b52:	4620      	mov	r0, r4
 8012b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b58:	4798      	blx	r3
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	4682      	mov	sl, r0
 8012b5e:	4639      	mov	r1, r7
 8012b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012b64:	4620      	mov	r0, r4
 8012b66:	4798      	blx	r3
 8012b68:	4582      	cmp	sl, r0
 8012b6a:	bfde      	ittt	le
 8012b6c:	4603      	movle	r3, r0
 8012b6e:	4650      	movle	r0, sl
 8012b70:	469a      	movle	sl, r3
 8012b72:	ebaa 0300 	sub.w	r3, sl, r0
 8012b76:	fb93 f3f6 	sdiv	r3, r3, r6
 8012b7a:	2b64      	cmp	r3, #100	; 0x64
 8012b7c:	dce2      	bgt.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012b7e:	6823      	ldr	r3, [r4, #0]
 8012b80:	4642      	mov	r2, r8
 8012b82:	9000      	str	r0, [sp, #0]
 8012b84:	4649      	mov	r1, r9
 8012b86:	4620      	mov	r0, r4
 8012b88:	e9cd b503 	strd	fp, r5, [sp, #12]
 8012b8c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012b90:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012b94:	463b      	mov	r3, r7
 8012b96:	47a8      	blx	r5
 8012b98:	e7d4      	b.n	8012b44 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8012b9a:	4798      	blx	r3
 8012b9c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012ba0:	deff      	udf	#255	; 0xff
 8012ba2:	bf00      	nop
 8012ba4:	2400f29c 	.word	0x2400f29c
 8012ba8:	2400f298 	.word	0x2400f298
 8012bac:	2400f2a0 	.word	0x2400f2a0

08012bb0 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8012bb0:	4770      	bx	lr

08012bb2 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 8012bb2:	4770      	bx	lr

08012bb4 <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	680a      	ldr	r2, [r1, #0]
 8012bb8:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8012bbc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8012bc0:	4608      	mov	r0, r1
 8012bc2:	4790      	blx	r2
 8012bc4:	4629      	mov	r1, r5
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	4620      	mov	r0, r4
 8012bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bce:	f7ff ba21 	b.w	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08012bd2 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 8012bd2:	b538      	push	{r3, r4, r5, lr}
 8012bd4:	680a      	ldr	r2, [r1, #0]
 8012bd6:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8012bda:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8012bde:	4608      	mov	r0, r1
 8012be0:	4790      	blx	r2
 8012be2:	4629      	mov	r1, r5
 8012be4:	4602      	mov	r2, r0
 8012be6:	4620      	mov	r0, r4
 8012be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bec:	f7ff ba12 	b.w	8012014 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08012bf0 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 8012bf0:	b510      	push	{r4, lr}
 8012bf2:	4604      	mov	r4, r0
 8012bf4:	214c      	movs	r1, #76	; 0x4c
 8012bf6:	f00f fa34 	bl	8022062 <_ZdlPvj>
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	bd10      	pop	{r4, pc}

08012bfe <_ZN8touchgfx12GraphLabelsXD0Ev>:
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	4604      	mov	r4, r0
 8012c02:	214c      	movs	r1, #76	; 0x4c
 8012c04:	f00f fa2d 	bl	8022062 <_ZdlPvj>
 8012c08:	4620      	mov	r0, r4
 8012c0a:	bd10      	pop	{r4, pc}

08012c0c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8012c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c10:	b08d      	sub	sp, #52	; 0x34
 8012c12:	4606      	mov	r6, r0
 8012c14:	9309      	str	r3, [sp, #36]	; 0x24
 8012c16:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8012c1a:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 8012c1e:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8012c22:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 8012c26:	930a      	str	r3, [sp, #40]	; 0x28
 8012c28:	f1b9 0f00 	cmp.w	r9, #0
 8012c2c:	d117      	bne.n	8012c5e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8012c2e:	2f00      	cmp	r7, #0
 8012c30:	dc7c      	bgt.n	8012d2c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 8012c32:	f1b8 0f00 	cmp.w	r8, #0
 8012c36:	da01      	bge.n	8012c3c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8012c38:	2f00      	cmp	r7, #0
 8012c3a:	d17a      	bne.n	8012d32 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8012c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c3e:	4630      	mov	r0, r6
 8012c40:	6832      	ldr	r2, [r6, #0]
 8012c42:	9318      	str	r3, [sp, #96]	; 0x60
 8012c44:	2300      	movs	r3, #0
 8012c46:	9907      	ldr	r1, [sp, #28]
 8012c48:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8012c4c:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8012c50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012c54:	46a4      	mov	ip, r4
 8012c56:	b00d      	add	sp, #52	; 0x34
 8012c58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5c:	4760      	bx	ip
 8012c5e:	fb97 f4f9 	sdiv	r4, r7, r9
 8012c62:	1e63      	subs	r3, r4, #1
 8012c64:	9305      	str	r3, [sp, #20]
 8012c66:	f1ba 0f00 	cmp.w	sl, #0
 8012c6a:	d122      	bne.n	8012cb2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8012c6c:	fb03 f509 	mul.w	r5, r3, r9
 8012c70:	fb98 faf9 	sdiv	sl, r8, r9
 8012c74:	f10a 0a02 	add.w	sl, sl, #2
 8012c78:	9b05      	ldr	r3, [sp, #20]
 8012c7a:	459a      	cmp	sl, r3
 8012c7c:	d059      	beq.n	8012d32 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8012c7e:	42af      	cmp	r7, r5
 8012c80:	dc5a      	bgt.n	8012d38 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 8012c82:	45a8      	cmp	r8, r5
 8012c84:	da01      	bge.n	8012c8a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 8012c86:	42af      	cmp	r7, r5
 8012c88:	db0e      	blt.n	8012ca8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8012c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	9905      	ldr	r1, [sp, #20]
 8012c90:	9302      	str	r3, [sp, #8]
 8012c92:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012c94:	6832      	ldr	r2, [r6, #0]
 8012c96:	434b      	muls	r3, r1
 8012c98:	9907      	ldr	r1, [sp, #28]
 8012c9a:	e9cd 5300 	strd	r5, r3, [sp]
 8012c9e:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 8012ca2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ca6:	47d8      	blx	fp
 8012ca8:	9b05      	ldr	r3, [sp, #20]
 8012caa:	444d      	add	r5, r9
 8012cac:	3301      	adds	r3, #1
 8012cae:	9305      	str	r3, [sp, #20]
 8012cb0:	e7e2      	b.n	8012c78 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 8012cb2:	fb97 f3fa 	sdiv	r3, r7, sl
 8012cb6:	3b01      	subs	r3, #1
 8012cb8:	9306      	str	r3, [sp, #24]
 8012cba:	9a06      	ldr	r2, [sp, #24]
 8012cbc:	fb98 f3fa 	sdiv	r3, r8, sl
 8012cc0:	fb02 fb0a 	mul.w	fp, r2, sl
 8012cc4:	9a05      	ldr	r2, [sp, #20]
 8012cc6:	3302      	adds	r3, #2
 8012cc8:	fb02 f509 	mul.w	r5, r2, r9
 8012ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cce:	45ab      	cmp	fp, r5
 8012cd0:	dd1d      	ble.n	8012d0e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8012cd2:	42af      	cmp	r7, r5
 8012cd4:	dc08      	bgt.n	8012ce8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 8012cd6:	45a8      	cmp	r8, r5
 8012cd8:	da08      	bge.n	8012cec <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8012cda:	42af      	cmp	r7, r5
 8012cdc:	da06      	bge.n	8012cec <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 8012cde:	9b05      	ldr	r3, [sp, #20]
 8012ce0:	444d      	add	r5, r9
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	9305      	str	r3, [sp, #20]
 8012ce6:	e7f2      	b.n	8012cce <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8012ce8:	45a8      	cmp	r8, r5
 8012cea:	dcf8      	bgt.n	8012cde <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8012cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cee:	4630      	mov	r0, r6
 8012cf0:	9905      	ldr	r1, [sp, #20]
 8012cf2:	9302      	str	r3, [sp, #8]
 8012cf4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012cf6:	6832      	ldr	r2, [r6, #0]
 8012cf8:	434b      	muls	r3, r1
 8012cfa:	9907      	ldr	r1, [sp, #28]
 8012cfc:	e9cd 5300 	strd	r5, r3, [sp]
 8012d00:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8012d04:	461c      	mov	r4, r3
 8012d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d0a:	47a0      	blx	r4
 8012d0c:	e7e7      	b.n	8012cde <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 8012d0e:	45ab      	cmp	fp, r5
 8012d10:	db04      	blt.n	8012d1c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 8012d12:	9b05      	ldr	r3, [sp, #20]
 8012d14:	444d      	add	r5, r9
 8012d16:	3301      	adds	r3, #1
 8012d18:	9305      	str	r3, [sp, #20]
 8012d1a:	e7f8      	b.n	8012d0e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 8012d1c:	9b06      	ldr	r3, [sp, #24]
 8012d1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d20:	3301      	adds	r3, #1
 8012d22:	4293      	cmp	r3, r2
 8012d24:	9306      	str	r3, [sp, #24]
 8012d26:	d004      	beq.n	8012d32 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8012d28:	44d3      	add	fp, sl
 8012d2a:	e7d0      	b.n	8012cce <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8012d2c:	f1b8 0f00 	cmp.w	r8, #0
 8012d30:	dd84      	ble.n	8012c3c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8012d32:	b00d      	add	sp, #52	; 0x34
 8012d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d38:	45a8      	cmp	r8, r5
 8012d3a:	dcb5      	bgt.n	8012ca8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8012d3c:	e7a5      	b.n	8012c8a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08012d3e <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8012d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d42:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 8012d46:	b089      	sub	sp, #36	; 0x24
 8012d48:	468a      	mov	sl, r1
 8012d4a:	4693      	mov	fp, r2
 8012d4c:	2c00      	cmp	r4, #0
 8012d4e:	9007      	str	r0, [sp, #28]
 8012d50:	461d      	mov	r5, r3
 8012d52:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8012d56:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 8012d5a:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 8012d5e:	dd03      	ble.n	8012d68 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 8012d60:	4564      	cmp	r4, ip
 8012d62:	dd01      	ble.n	8012d68 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 8012d64:	42b4      	cmp	r4, r6
 8012d66:	dd0e      	ble.n	8012d86 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 8012d68:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8012d6c:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8012d70:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 8012d74:	462b      	mov	r3, r5
 8012d76:	465a      	mov	r2, fp
 8012d78:	4651      	mov	r1, sl
 8012d7a:	9807      	ldr	r0, [sp, #28]
 8012d7c:	b009      	add	sp, #36	; 0x24
 8012d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d82:	f7ff bf43 	b.w	8012c0c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 8012d86:	f104 3eff 	add.w	lr, r4, #4294967295
 8012d8a:	9702      	str	r7, [sp, #8]
 8012d8c:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8012d90:	e9cd ce00 	strd	ip, lr, [sp]
 8012d94:	f7ff ff3a 	bl	8012c0c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 8012d98:	9412      	str	r4, [sp, #72]	; 0x48
 8012d9a:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8012d9e:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 8012da2:	e7e7      	b.n	8012d74 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

08012da4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 8012da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da8:	f1b3 0900 	subs.w	r9, r3, #0
 8012dac:	460d      	mov	r5, r1
 8012dae:	4690      	mov	r8, r2
 8012db0:	9f08      	ldr	r7, [sp, #32]
 8012db2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 8012db6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012db8:	da18      	bge.n	8012dec <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8012dba:	2a01      	cmp	r2, #1
 8012dbc:	dd16      	ble.n	8012dec <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8012dbe:	232d      	movs	r3, #45	; 0x2d
 8012dc0:	f1c9 0900 	rsb	r9, r9, #0
 8012dc4:	2001      	movs	r0, #1
 8012dc6:	800b      	strh	r3, [r1, #0]
 8012dc8:	2f00      	cmp	r7, #0
 8012dca:	d111      	bne.n	8012df0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 8012dcc:	2302      	movs	r3, #2
 8012dce:	eba8 0100 	sub.w	r1, r8, r0
 8012dd2:	4a26      	ldr	r2, [pc, #152]	; (8012e6c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8012dd4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8012dd8:	b289      	uxth	r1, r1
 8012dda:	fb96 f3f3 	sdiv	r3, r6, r3
 8012dde:	444b      	add	r3, r9
 8012de0:	fb93 f3f6 	sdiv	r3, r3, r6
 8012de4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012de8:	f006 bbd4 	b.w	8019594 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012dec:	2000      	movs	r0, #0
 8012dee:	e7eb      	b.n	8012dc8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 8012df0:	dd39      	ble.n	8012e66 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8012df2:	eba8 0100 	sub.w	r1, r8, r0
 8012df6:	4a1d      	ldr	r2, [pc, #116]	; (8012e6c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 8012df8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8012dfc:	f108 38ff 	add.w	r8, r8, #4294967295
 8012e00:	b289      	uxth	r1, r1
 8012e02:	fb99 f4f6 	sdiv	r4, r9, r6
 8012e06:	4623      	mov	r3, r4
 8012e08:	f006 fbc4 	bl	8019594 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012e0c:	4628      	mov	r0, r5
 8012e0e:	f006 f84f 	bl	8018eb0 <_ZN8touchgfx7Unicode6strlenEPKt>
 8012e12:	4580      	cmp	r8, r0
 8012e14:	dd27      	ble.n	8012e66 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 8012e16:	f04f 0e02 	mov.w	lr, #2
 8012e1a:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 8012e1e:	fb06 9314 	mls	r3, r6, r4, r9
 8012e22:	3001      	adds	r0, #1
 8012e24:	2200      	movs	r2, #0
 8012e26:	f04f 090a 	mov.w	r9, #10
 8012e2a:	f107 3aff 	add.w	sl, r7, #4294967295
 8012e2e:	fb96 fefe 	sdiv	lr, r6, lr
 8012e32:	4580      	cmp	r8, r0
 8012e34:	4684      	mov	ip, r0
 8012e36:	dd13      	ble.n	8012e60 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8012e38:	fb09 f303 	mul.w	r3, r9, r3
 8012e3c:	4592      	cmp	sl, r2
 8012e3e:	f102 0201 	add.w	r2, r2, #1
 8012e42:	f100 0c01 	add.w	ip, r0, #1
 8012e46:	bf08      	it	eq
 8012e48:	4473      	addeq	r3, lr
 8012e4a:	4297      	cmp	r7, r2
 8012e4c:	fb93 f4f6 	sdiv	r4, r3, r6
 8012e50:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012e54:	fb06 3314 	mls	r3, r6, r4, r3
 8012e58:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8012e5c:	4660      	mov	r0, ip
 8012e5e:	d1e8      	bne.n	8012e32 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8012e60:	2300      	movs	r3, #0
 8012e62:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 8012e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08025328 	.word	0x08025328

08012e70 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 8012e70:	4a69      	ldr	r2, [pc, #420]	; (8013018 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 8012e72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e76:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012e78:	b093      	sub	sp, #76	; 0x4c
 8012e7a:	8812      	ldrh	r2, [r2, #0]
 8012e7c:	4604      	mov	r4, r0
 8012e7e:	460e      	mov	r6, r1
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d93a      	bls.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012e84:	4a65      	ldr	r2, [pc, #404]	; (801301c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 8012e86:	6812      	ldr	r2, [r2, #0]
 8012e88:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012e8c:	4b64      	ldr	r3, [pc, #400]	; (8013020 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8012e94:	f1b8 0f00 	cmp.w	r8, #0
 8012e98:	d02f      	beq.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012e9a:	6803      	ldr	r3, [r0, #0]
 8012e9c:	6945      	ldr	r5, [r0, #20]
 8012e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ea0:	2d00      	cmp	r5, #0
 8012ea2:	f000 80b5 	beq.w	8013010 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 8012ea6:	696f      	ldr	r7, [r5, #20]
 8012ea8:	4798      	blx	r3
 8012eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eae:	fb13 f000 	smulbb	r0, r3, r0
 8012eb2:	b280      	uxth	r0, r0
 8012eb4:	1c43      	adds	r3, r0, #1
 8012eb6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8012eba:	0a03      	lsrs	r3, r0, #8
 8012ebc:	d01d      	beq.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ec0:	4620      	mov	r0, r4
 8012ec2:	6823      	ldr	r3, [r4, #0]
 8012ec4:	434e      	muls	r6, r1
 8012ec6:	4639      	mov	r1, r7
 8012ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ecc:	4798      	blx	r3
 8012ece:	6823      	ldr	r3, [r4, #0]
 8012ed0:	4605      	mov	r5, r0
 8012ed2:	4639      	mov	r1, r7
 8012ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ed8:	4620      	mov	r0, r4
 8012eda:	4798      	blx	r3
 8012edc:	2d00      	cmp	r5, #0
 8012ede:	dd0f      	ble.n	8012f00 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 8012ee0:	fb96 f3f5 	sdiv	r3, r6, r5
 8012ee4:	436b      	muls	r3, r5
 8012ee6:	1b9a      	subs	r2, r3, r6
 8012ee8:	4253      	negs	r3, r2
 8012eea:	4153      	adcs	r3, r2
 8012eec:	2800      	cmp	r0, #0
 8012eee:	dd09      	ble.n	8012f04 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 8012ef0:	fb96 f2f0 	sdiv	r2, r6, r0
 8012ef4:	4350      	muls	r0, r2
 8012ef6:	42b0      	cmp	r0, r6
 8012ef8:	d10d      	bne.n	8012f16 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8012efa:	b013      	add	sp, #76	; 0x4c
 8012efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f00:	2300      	movs	r3, #0
 8012f02:	e7f3      	b.n	8012eec <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 8012f04:	d107      	bne.n	8012f16 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 8012f06:	2d00      	cmp	r5, #0
 8012f08:	d17f      	bne.n	801300a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 8012f0a:	2e00      	cmp	r6, #0
 8012f0c:	d063      	beq.n	8012fd6 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d0f3      	beq.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012f12:	462a      	mov	r2, r5
 8012f14:	e007      	b.n	8012f26 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d0ef      	beq.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012f1a:	2d00      	cmp	r5, #0
 8012f1c:	d0f9      	beq.n	8012f12 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 8012f1e:	fb96 f2f5 	sdiv	r2, r6, r5
 8012f22:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8012f24:	436a      	muls	r2, r5
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	4631      	mov	r1, r6
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8012f30:	4798      	blx	r3
 8012f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012f34:	2214      	movs	r2, #20
 8012f36:	a908      	add	r1, sp, #32
 8012f38:	9302      	str	r3, [sp, #8]
 8012f3a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8012f3e:	9301      	str	r3, [sp, #4]
 8012f40:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	4603      	mov	r3, r0
 8012f48:	4620      	mov	r0, r4
 8012f4a:	f7ff ff2b 	bl	8012da4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8012f4e:	4b35      	ldr	r3, [pc, #212]	; (8013024 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 8012f50:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8012f52:	6818      	ldr	r0, [r3, #0]
 8012f54:	f7f4 fac8 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8012f58:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012f5c:	4681      	mov	r9, r0
 8012f5e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8012f62:	f8d8 3000 	ldr.w	r3, [r8]
 8012f66:	d138      	bne.n	8012fda <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 8012f68:	4601      	mov	r1, r0
 8012f6a:	699b      	ldr	r3, [r3, #24]
 8012f6c:	aa08      	add	r2, sp, #32
 8012f6e:	4640      	mov	r0, r8
 8012f70:	4798      	blx	r3
 8012f72:	b205      	sxth	r5, r0
 8012f74:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8012f78:	2002      	movs	r0, #2
 8012f7a:	4631      	mov	r1, r6
 8012f7c:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	bf88      	it	hi
 8012f86:	f105 0801 	addhi.w	r8, r5, #1
 8012f8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012f8e:	bf8c      	ite	hi
 8012f90:	fb98 f8f0 	sdivhi	r8, r8, r0
 8012f94:	fb95 f8f0 	sdivls	r8, r5, r0
 8012f98:	4638      	mov	r0, r7
 8012f9a:	bf88      	it	hi
 8012f9c:	fa0f f888 	sxthhi.w	r8, r8
 8012fa0:	4798      	blx	r3
 8012fa2:	ab12      	add	r3, sp, #72	; 0x48
 8012fa4:	f843 0d34 	str.w	r0, [r3, #-52]!
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fe fdf5 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012fae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012fb2:	4448      	add	r0, r9
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012fba:	a906      	add	r1, sp, #24
 8012fbc:	eba0 0808 	sub.w	r8, r0, r8
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f8ad 8018 	strh.w	r8, [sp, #24]
 8012fcc:	f8ad 501c 	strh.w	r5, [sp, #28]
 8012fd0:	691b      	ldr	r3, [r3, #16]
 8012fd2:	4798      	blx	r3
 8012fd4:	e791      	b.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8012fd6:	4632      	mov	r2, r6
 8012fd8:	e7a5      	b.n	8012f26 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 8012fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fdc:	4640      	mov	r0, r8
 8012fde:	4798      	blx	r3
 8012fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	aa08      	add	r2, sp, #32
 8012fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fea:	4649      	mov	r1, r9
 8012fec:	4640      	mov	r0, r8
 8012fee:	4798      	blx	r3
 8012ff0:	fb15 f500 	smulbb	r5, r5, r0
 8012ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8012ff8:	aa08      	add	r2, sp, #32
 8012ffa:	b2ad      	uxth	r5, r5
 8012ffc:	4649      	mov	r1, r9
 8012ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013000:	4640      	mov	r0, r8
 8013002:	4798      	blx	r3
 8013004:	4405      	add	r5, r0
 8013006:	b22d      	sxth	r5, r5
 8013008:	e7b4      	b.n	8012f74 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 801300a:	2b00      	cmp	r3, #0
 801300c:	d187      	bne.n	8012f1e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 801300e:	e774      	b.n	8012efa <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8013010:	4798      	blx	r3
 8013012:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8013016:	deff      	udf	#255	; 0xff
 8013018:	2400f29c 	.word	0x2400f29c
 801301c:	2400f298 	.word	0x2400f298
 8013020:	2400f2a0 	.word	0x2400f2a0
 8013024:	2400f2a4 	.word	0x2400f2a4

08013028 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801302c:	b09b      	sub	sp, #108	; 0x6c
 801302e:	461e      	mov	r6, r3
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	4604      	mov	r4, r0
 8013034:	af1a      	add	r7, sp, #104	; 0x68
 8013036:	9104      	str	r1, [sp, #16]
 8013038:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801303c:	4630      	mov	r0, r6
 801303e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013040:	4690      	mov	r8, r2
 8013042:	4798      	blx	r3
 8013044:	f847 0d28 	str.w	r0, [r7, #-40]!
 8013048:	4638      	mov	r0, r7
 801304a:	f7fe fda5 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801304e:	f8b6 3116 	ldrh.w	r3, [r6, #278]	; 0x116
 8013052:	1ac0      	subs	r0, r0, r3
 8013054:	b200      	sxth	r0, r0
 8013056:	2800      	cmp	r0, #0
 8013058:	f2c0 80b8 	blt.w	80131cc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 801305c:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 8013060:	441a      	add	r2, r3
 8013062:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 8013066:	1a9b      	subs	r3, r3, r2
 8013068:	b21b      	sxth	r3, r3
 801306a:	4298      	cmp	r0, r3
 801306c:	f280 80ae 	bge.w	80131cc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013070:	6833      	ldr	r3, [r6, #0]
 8013072:	4630      	mov	r0, r6
 8013074:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 8013078:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801307c:	4798      	blx	r3
 801307e:	6833      	ldr	r3, [r6, #0]
 8013080:	f8b4 9042 	ldrh.w	r9, [r4, #66]	; 0x42
 8013084:	4605      	mov	r5, r0
 8013086:	f8b4 b044 	ldrh.w	fp, [r4, #68]	; 0x44
 801308a:	4630      	mov	r0, r6
 801308c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013090:	4798      	blx	r3
 8013092:	f8cd 9000 	str.w	r9, [sp]
 8013096:	462b      	mov	r3, r5
 8013098:	2214      	movs	r2, #20
 801309a:	4639      	mov	r1, r7
 801309c:	e9cd b001 	strd	fp, r0, [sp, #4]
 80130a0:	4620      	mov	r0, r4
 80130a2:	f7ff fe7f 	bl	8012da4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 80130a6:	4b57      	ldr	r3, [pc, #348]	; (8013204 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 80130a8:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80130aa:	6818      	ldr	r0, [r3, #0]
 80130ac:	f7f4 fa1c 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 80130b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80130b4:	4681      	mov	r9, r0
 80130b6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80130ba:	f8d8 3000 	ldr.w	r3, [r8]
 80130be:	f040 8088 	bne.w	80131d2 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 80130c2:	4601      	mov	r1, r0
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	463a      	mov	r2, r7
 80130c8:	4640      	mov	r0, r8
 80130ca:	4798      	blx	r3
 80130cc:	b205      	sxth	r5, r0
 80130ce:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80130d2:	2002      	movs	r0, #2
 80130d4:	6832      	ldr	r2, [r6, #0]
 80130d6:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80130da:	2b01      	cmp	r3, #1
 80130dc:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
 80130e0:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80130e4:	bf88      	it	hi
 80130e6:	f105 0b01 	addhi.w	fp, r5, #1
 80130ea:	9305      	str	r3, [sp, #20]
 80130ec:	9924      	ldr	r1, [sp, #144]	; 0x90
 80130ee:	bf8c      	ite	hi
 80130f0:	fb9b fbf0 	sdivhi	fp, fp, r0
 80130f4:	fb95 fbf0 	sdivls	fp, r5, r0
 80130f8:	4630      	mov	r0, r6
 80130fa:	bf88      	it	hi
 80130fc:	fa0f fb8b 	sxthhi.w	fp, fp
 8013100:	4790      	blx	r2
 8013102:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 8013106:	4650      	mov	r0, sl
 8013108:	2600      	movs	r6, #0
 801310a:	f7fe fd45 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801310e:	9b05      	ldr	r3, [sp, #20]
 8013110:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8013114:	4418      	add	r0, r3
 8013116:	f8ad 5020 	strh.w	r5, [sp, #32]
 801311a:	ad07      	add	r5, sp, #28
 801311c:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013120:	eba0 0b0b 	sub.w	fp, r0, fp
 8013124:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8013128:	f8ad b01c 	strh.w	fp, [sp, #28]
 801312c:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8013130:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013134:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013138:	9904      	ldr	r1, [sp, #16]
 801313a:	4658      	mov	r0, fp
 801313c:	f7fd f91a 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8013140:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8013144:	42b3      	cmp	r3, r6
 8013146:	dd41      	ble.n	80131cc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013148:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801314c:	42b3      	cmp	r3, r6
 801314e:	dd3d      	ble.n	80131cc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8013150:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013154:	4620      	mov	r0, r4
 8013156:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801315a:	1a5b      	subs	r3, r3, r1
 801315c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8013160:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013164:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013168:	1a5b      	subs	r3, r3, r1
 801316a:	4629      	mov	r1, r5
 801316c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013174:	4798      	blx	r3
 8013176:	4b24      	ldr	r3, [pc, #144]	; (8013208 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 8013178:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8013180:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013184:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013186:	785b      	ldrb	r3, [r3, #1]
 8013188:	910d      	str	r1, [sp, #52]	; 0x34
 801318a:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 801318e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013192:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8013196:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801319a:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 801319e:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 80131a2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80131a6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 80131aa:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 80131ae:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 80131b2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80131b6:	f7fd fbad 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 80131ba:	465b      	mov	r3, fp
 80131bc:	e9cd 7602 	strd	r7, r6, [sp, #8]
 80131c0:	e9cd a900 	strd	sl, r9, [sp]
 80131c4:	e895 0006 	ldmia.w	r5, {r1, r2}
 80131c8:	f7f4 f940 	bl	800744c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80131cc:	b01b      	add	sp, #108	; 0x6c
 80131ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131d4:	4640      	mov	r0, r8
 80131d6:	4798      	blx	r3
 80131d8:	f8d8 3000 	ldr.w	r3, [r8]
 80131dc:	4605      	mov	r5, r0
 80131de:	463a      	mov	r2, r7
 80131e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131e2:	4649      	mov	r1, r9
 80131e4:	4640      	mov	r0, r8
 80131e6:	4798      	blx	r3
 80131e8:	fb15 f500 	smulbb	r5, r5, r0
 80131ec:	f8d8 3000 	ldr.w	r3, [r8]
 80131f0:	463a      	mov	r2, r7
 80131f2:	b2ad      	uxth	r5, r5
 80131f4:	4649      	mov	r1, r9
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	4640      	mov	r0, r8
 80131fa:	4798      	blx	r3
 80131fc:	4405      	add	r5, r0
 80131fe:	b22d      	sxth	r5, r5
 8013200:	e765      	b.n	80130ce <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 8013202:	bf00      	nop
 8013204:	2400f2a4 	.word	0x2400f2a4
 8013208:	2400f298 	.word	0x2400f298

0801320c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 801320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013210:	b09b      	sub	sp, #108	; 0x6c
 8013212:	4698      	mov	r8, r3
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4604      	mov	r4, r0
 8013218:	ae1a      	add	r6, sp, #104	; 0x68
 801321a:	9104      	str	r1, [sp, #16]
 801321c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8013220:	4640      	mov	r0, r8
 8013222:	9924      	ldr	r1, [sp, #144]	; 0x90
 8013224:	4617      	mov	r7, r2
 8013226:	4798      	blx	r3
 8013228:	f846 0d28 	str.w	r0, [r6, #-40]!
 801322c:	4630      	mov	r0, r6
 801322e:	f7fe fcb3 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013232:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 8013236:	1ac0      	subs	r0, r0, r3
 8013238:	b200      	sxth	r0, r0
 801323a:	2800      	cmp	r0, #0
 801323c:	f2c0 80ba 	blt.w	80133b4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013240:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 8013244:	441a      	add	r2, r3
 8013246:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 801324a:	1a9b      	subs	r3, r3, r2
 801324c:	b21b      	sxth	r3, r3
 801324e:	4298      	cmp	r0, r3
 8013250:	f280 80b0 	bge.w	80133b4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013254:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013256:	2214      	movs	r2, #20
 8013258:	4631      	mov	r1, r6
 801325a:	4620      	mov	r0, r4
 801325c:	9302      	str	r3, [sp, #8]
 801325e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8013262:	9301      	str	r3, [sp, #4]
 8013264:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801326c:	f7ff fd9a 	bl	8012da4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8013270:	4b55      	ldr	r3, [pc, #340]	; (80133c8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 8013272:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013274:	6818      	ldr	r0, [r3, #0]
 8013276:	f7f4 f937 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 801327a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801327e:	4681      	mov	r9, r0
 8013280:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	f040 8098 	bne.w	80133ba <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 801328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801328c:	4638      	mov	r0, r7
 801328e:	4798      	blx	r3
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	4605      	mov	r5, r0
 8013294:	4632      	mov	r2, r6
 8013296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013298:	4649      	mov	r1, r9
 801329a:	4638      	mov	r0, r7
 801329c:	4798      	blx	r3
 801329e:	fb15 f500 	smulbb	r5, r5, r0
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	4632      	mov	r2, r6
 80132a6:	b2ad      	uxth	r5, r5
 80132a8:	4649      	mov	r1, r9
 80132aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ac:	4638      	mov	r0, r7
 80132ae:	4798      	blx	r3
 80132b0:	4405      	add	r5, r0
 80132b2:	b22d      	sxth	r5, r5
 80132b4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80132b8:	2002      	movs	r0, #2
 80132ba:	f8d8 2000 	ldr.w	r2, [r8]
 80132be:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 80132c8:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 80132cc:	bf88      	it	hi
 80132ce:	f105 0b01 	addhi.w	fp, r5, #1
 80132d2:	9305      	str	r3, [sp, #20]
 80132d4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80132d6:	bf8c      	ite	hi
 80132d8:	fb9b fbf0 	sdivhi	fp, fp, r0
 80132dc:	fb95 fbf0 	sdivls	fp, r5, r0
 80132e0:	4640      	mov	r0, r8
 80132e2:	bf88      	it	hi
 80132e4:	fa0f fb8b 	sxthhi.w	fp, fp
 80132e8:	4790      	blx	r2
 80132ea:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 80132ee:	4650      	mov	r0, sl
 80132f0:	f04f 0800 	mov.w	r8, #0
 80132f4:	f7fe fc50 	bl	8011b98 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80132f8:	9b05      	ldr	r3, [sp, #20]
 80132fa:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80132fe:	4418      	add	r0, r3
 8013300:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8013304:	ad07      	add	r5, sp, #28
 8013306:	f8ad 801c 	strh.w	r8, [sp, #28]
 801330a:	eba0 0b0b 	sub.w	fp, r0, fp
 801330e:	f8ad 1020 	strh.w	r1, [sp, #32]
 8013312:	f8ad b01e 	strh.w	fp, [sp, #30]
 8013316:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 801331a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801331e:	e88b 0003 	stmia.w	fp, {r0, r1}
 8013322:	9904      	ldr	r1, [sp, #16]
 8013324:	4658      	mov	r0, fp
 8013326:	f7fd f825 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801332a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801332e:	4543      	cmp	r3, r8
 8013330:	dd40      	ble.n	80133b4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8013332:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8013336:	4543      	cmp	r3, r8
 8013338:	dd3c      	ble.n	80133b4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801333a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801333e:	4620      	mov	r0, r4
 8013340:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013344:	1a5b      	subs	r3, r3, r1
 8013346:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801334a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801334e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8013352:	1a5b      	subs	r3, r3, r1
 8013354:	4629      	mov	r1, r5
 8013356:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801335a:	6823      	ldr	r3, [r4, #0]
 801335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801335e:	4798      	blx	r3
 8013360:	4b1a      	ldr	r3, [pc, #104]	; (80133cc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 8013362:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 801336a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801336e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013370:	785b      	ldrb	r3, [r3, #1]
 8013372:	910d      	str	r1, [sp, #52]	; 0x34
 8013374:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8013378:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801337c:	970b      	str	r7, [sp, #44]	; 0x2c
 801337e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8013382:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8013386:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 801338a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801338e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 8013392:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 8013396:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 801339a:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 801339e:	f7fd fab9 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 80133a2:	465b      	mov	r3, fp
 80133a4:	e9cd 6802 	strd	r6, r8, [sp, #8]
 80133a8:	e9cd a900 	strd	sl, r9, [sp]
 80133ac:	e895 0006 	ldmia.w	r5, {r1, r2}
 80133b0:	f7f4 f84c 	bl	800744c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80133b4:	b01b      	add	sp, #108	; 0x6c
 80133b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ba:	4601      	mov	r1, r0
 80133bc:	699b      	ldr	r3, [r3, #24]
 80133be:	4632      	mov	r2, r6
 80133c0:	4638      	mov	r0, r7
 80133c2:	4798      	blx	r3
 80133c4:	b205      	sxth	r5, r0
 80133c6:	e775      	b.n	80132b4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 80133c8:	2400f2a4 	.word	0x2400f2a4
 80133cc:	2400f298 	.word	0x2400f298

080133d0 <_ZN8touchgfx15GraphScrollData5clearEv>:
 80133d0:	b510      	push	{r4, lr}
 80133d2:	4604      	mov	r4, r0
 80133d4:	f7fe f98f 	bl	80116f6 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 80133d8:	2300      	movs	r3, #0
 80133da:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 80133de:	bd10      	pop	{r4, pc}

080133e0 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 80133e0:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80133e4:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d101      	bne.n	80133f0 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 80133ec:	f7fe bccb 	b.w	8011d86 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80133f0:	4770      	bx	lr

080133f2 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 80133f2:	b538      	push	{r3, r4, r5, lr}
 80133f4:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 80133f8:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 80133fc:	42a5      	cmp	r5, r4
 80133fe:	da04      	bge.n	801340a <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 8013400:	6803      	ldr	r3, [r0, #0]
 8013402:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8013406:	4798      	blx	r3
 8013408:	bd38      	pop	{r3, r4, r5, pc}
 801340a:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 801340e:	4408      	add	r0, r1
 8013410:	1b00      	subs	r0, r0, r4
 8013412:	e7f9      	b.n	8013408 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

08013414 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 801341a:	4604      	mov	r4, r0
 801341c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8013420:	1c6b      	adds	r3, r5, #1
 8013422:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 8013426:	b21b      	sxth	r3, r3
 8013428:	42ae      	cmp	r6, r5
 801342a:	fb93 f0f2 	sdiv	r0, r3, r2
 801342e:	bf08      	it	eq
 8013430:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 8013434:	4296      	cmp	r6, r2
 8013436:	fb02 3010 	mls	r0, r2, r0, r3
 801343a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 801343e:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 8013442:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013446:	d108      	bne.n	801345a <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8013448:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801344c:	f004 f8a7 	bl	801759e <_ZNK8touchgfx8Drawable10invalidateEv>
 8013450:	4620      	mov	r0, r4
 8013452:	f7fe fc98 	bl	8011d86 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013456:	4628      	mov	r0, r5
 8013458:	bd70      	pop	{r4, r5, r6, pc}
 801345a:	4629      	mov	r1, r5
 801345c:	4620      	mov	r0, r4
 801345e:	f7fe fc4b 	bl	8011cf8 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013462:	e7f8      	b.n	8013456 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08013464 <_ZN8touchgfx8TextArea8setWidthEs>:
 8013464:	b530      	push	{r4, r5, lr}
 8013466:	b085      	sub	sp, #20
 8013468:	6803      	ldr	r3, [r0, #0]
 801346a:	4604      	mov	r4, r0
 801346c:	8101      	strh	r1, [r0, #8]
 801346e:	466d      	mov	r5, sp
 8013470:	4601      	mov	r1, r0
 8013472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013476:	343c      	adds	r4, #60	; 0x3c
 8013478:	4628      	mov	r0, r5
 801347a:	4798      	blx	r3
 801347c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013480:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013484:	b005      	add	sp, #20
 8013486:	bd30      	pop	{r4, r5, pc}

08013488 <_ZN8touchgfx8TextArea9setHeightEs>:
 8013488:	b530      	push	{r4, r5, lr}
 801348a:	b085      	sub	sp, #20
 801348c:	6803      	ldr	r3, [r0, #0]
 801348e:	4604      	mov	r4, r0
 8013490:	8141      	strh	r1, [r0, #10]
 8013492:	466d      	mov	r5, sp
 8013494:	4601      	mov	r1, r0
 8013496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801349a:	343c      	adds	r4, #60	; 0x3c
 801349c:	4628      	mov	r0, r5
 801349e:	4798      	blx	r3
 80134a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80134a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80134a8:	b005      	add	sp, #20
 80134aa:	bd30      	pop	{r4, r5, pc}

080134ac <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80134ac:	2200      	movs	r2, #0
 80134ae:	8002      	strh	r2, [r0, #0]
 80134b0:	8042      	strh	r2, [r0, #2]
 80134b2:	8082      	strh	r2, [r0, #4]
 80134b4:	80c2      	strh	r2, [r0, #6]
 80134b6:	4770      	bx	lr

080134b8 <_ZN8touchgfx8TextArea8setAlphaEh>:
 80134b8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 80134bc:	4770      	bx	lr
	...

080134c0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80134c0:	b570      	push	{r4, r5, r6, lr}
 80134c2:	6803      	ldr	r3, [r0, #0]
 80134c4:	4604      	mov	r4, r0
 80134c6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80134c8:	460d      	mov	r5, r1
 80134ca:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80134cc:	4b08      	ldr	r3, [pc, #32]	; (80134f0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80134d4:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80134dc:	6803      	ldr	r3, [r0, #0]
 80134de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e0:	4798      	blx	r3
 80134e2:	1a29      	subs	r1, r5, r0
 80134e4:	4633      	mov	r3, r6
 80134e6:	4620      	mov	r0, r4
 80134e8:	b209      	sxth	r1, r1
 80134ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134ee:	4718      	bx	r3
 80134f0:	2400f298 	.word	0x2400f298
 80134f4:	2400f2a0 	.word	0x2400f2a0

080134f8 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80134f8:	b570      	push	{r4, r5, r6, lr}
 80134fa:	6803      	ldr	r3, [r0, #0]
 80134fc:	4604      	mov	r4, r0
 80134fe:	4615      	mov	r5, r2
 8013500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013502:	4798      	blx	r3
 8013504:	6823      	ldr	r3, [r4, #0]
 8013506:	4629      	mov	r1, r5
 8013508:	4620      	mov	r0, r4
 801350a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801350c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013510:	4718      	bx	r3

08013512 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8013512:	2000      	movs	r0, #0
 8013514:	4770      	bx	lr

08013516 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8013516:	2000      	movs	r0, #0
 8013518:	4770      	bx	lr
	...

0801351c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801351c:	4b07      	ldr	r3, [pc, #28]	; (801353c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801351e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	4293      	cmp	r3, r2
 8013524:	bf81      	itttt	hi
 8013526:	4b06      	ldrhi	r3, [pc, #24]	; (8013540 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8013528:	681b      	ldrhi	r3, [r3, #0]
 801352a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801352e:	7858      	ldrbhi	r0, [r3, #1]
 8013530:	bf8c      	ite	hi
 8013532:	f000 0003 	andhi.w	r0, r0, #3
 8013536:	2000      	movls	r0, #0
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	2400f29c 	.word	0x2400f29c
 8013540:	2400f298 	.word	0x2400f298

08013544 <_ZN8touchgfx8TextAreaD1Ev>:
 8013544:	4770      	bx	lr
	...

08013548 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013548:	4b11      	ldr	r3, [pc, #68]	; (8013590 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801354a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801354e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013550:	4604      	mov	r4, r0
 8013552:	881b      	ldrh	r3, [r3, #0]
 8013554:	428b      	cmp	r3, r1
 8013556:	d918      	bls.n	801358a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013558:	6803      	ldr	r3, [r0, #0]
 801355a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801355c:	4b0d      	ldr	r3, [pc, #52]	; (8013594 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801355e:	6818      	ldr	r0, [r3, #0]
 8013560:	f7f3 ffc2 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	4606      	mov	r6, r0
 8013568:	4620      	mov	r0, r4
 801356a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801356c:	4798      	blx	r3
 801356e:	6823      	ldr	r3, [r4, #0]
 8013570:	4607      	mov	r7, r0
 8013572:	4620      	mov	r0, r4
 8013574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013578:	4798      	blx	r3
 801357a:	463a      	mov	r2, r7
 801357c:	4603      	mov	r3, r0
 801357e:	4631      	mov	r1, r6
 8013580:	4620      	mov	r0, r4
 8013582:	46ac      	mov	ip, r5
 8013584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013588:	4760      	bx	ip
 801358a:	2000      	movs	r0, #0
 801358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013590:	2400f29c 	.word	0x2400f29c
 8013594:	2400f2a4 	.word	0x2400f2a4

08013598 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013598:	4b18      	ldr	r3, [pc, #96]	; (80135fc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801359a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801359e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80135a0:	4604      	mov	r4, r0
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	428b      	cmp	r3, r1
 80135a6:	d926      	bls.n	80135f6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80135a8:	4b15      	ldr	r3, [pc, #84]	; (8013600 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80135b0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80135b4:	4b13      	ldr	r3, [pc, #76]	; (8013604 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80135b6:	7855      	ldrb	r5, [r2, #1]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80135be:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80135c2:	6833      	ldr	r3, [r6, #0]
 80135c4:	69df      	ldr	r7, [r3, #28]
 80135c6:	4b10      	ldr	r3, [pc, #64]	; (8013608 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80135c8:	6818      	ldr	r0, [r3, #0]
 80135ca:	f7f3 ff8d 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	4680      	mov	r8, r0
 80135d2:	4620      	mov	r0, r4
 80135d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135d6:	4798      	blx	r3
 80135d8:	6823      	ldr	r3, [r4, #0]
 80135da:	4681      	mov	r9, r0
 80135dc:	4620      	mov	r0, r4
 80135de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135e2:	4798      	blx	r3
 80135e4:	464b      	mov	r3, r9
 80135e6:	9000      	str	r0, [sp, #0]
 80135e8:	4642      	mov	r2, r8
 80135ea:	4629      	mov	r1, r5
 80135ec:	4630      	mov	r0, r6
 80135ee:	47b8      	blx	r7
 80135f0:	b003      	add	sp, #12
 80135f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135f6:	2000      	movs	r0, #0
 80135f8:	e7fa      	b.n	80135f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80135fa:	bf00      	nop
 80135fc:	2400f29c 	.word	0x2400f29c
 8013600:	2400f298 	.word	0x2400f298
 8013604:	2400f2a0 	.word	0x2400f2a0
 8013608:	2400f2a4 	.word	0x2400f2a4

0801360c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801360c:	b40e      	push	{r1, r2, r3}
 801360e:	4b30      	ldr	r3, [pc, #192]	; (80136d0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8013610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013614:	881a      	ldrh	r2, [r3, #0]
 8013616:	b09d      	sub	sp, #116	; 0x74
 8013618:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801361a:	4604      	mov	r4, r0
 801361c:	429a      	cmp	r2, r3
 801361e:	d954      	bls.n	80136ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8013620:	aa26      	add	r2, sp, #152	; 0x98
 8013622:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80136d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8013626:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80136d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801362a:	9202      	str	r2, [sp, #8]
 801362c:	f8d9 2000 	ldr.w	r2, [r9]
 8013630:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8013634:	f8d8 3000 	ldr.w	r3, [r8]
 8013638:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801363c:	682b      	ldr	r3, [r5, #0]
 801363e:	4628      	mov	r0, r5
 8013640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013642:	4798      	blx	r3
 8013644:	4606      	mov	r6, r0
 8013646:	b207      	sxth	r7, r0
 8013648:	a803      	add	r0, sp, #12
 801364a:	f004 fccb 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 801364e:	682b      	ldr	r3, [r5, #0]
 8013650:	4628      	mov	r0, r5
 8013652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013654:	4798      	blx	r3
 8013656:	682b      	ldr	r3, [r5, #0]
 8013658:	4682      	mov	sl, r0
 801365a:	4628      	mov	r0, r5
 801365c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801365e:	4798      	blx	r3
 8013660:	4653      	mov	r3, sl
 8013662:	9000      	str	r0, [sp, #0]
 8013664:	a803      	add	r0, sp, #12
 8013666:	9a02      	ldr	r2, [sp, #8]
 8013668:	9925      	ldr	r1, [sp, #148]	; 0x94
 801366a:	f004 fd16 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801366e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013670:	f8d9 3000 	ldr.w	r3, [r9]
 8013674:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013678:	8925      	ldrh	r5, [r4, #8]
 801367a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801367e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8013682:	eba5 050c 	sub.w	r5, r5, ip
 8013686:	784a      	ldrb	r2, [r1, #1]
 8013688:	f8d8 3000 	ldr.w	r3, [r8]
 801368c:	b22d      	sxth	r5, r5
 801368e:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8013692:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013696:	9500      	str	r5, [sp, #0]
 8013698:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801369c:	a803      	add	r0, sp, #12
 801369e:	f002 fb0d 	bl	8015cbc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80136a2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80136a6:	b203      	sxth	r3, r0
 80136a8:	18b9      	adds	r1, r7, r2
 80136aa:	2900      	cmp	r1, #0
 80136ac:	dd0b      	ble.n	80136c6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80136ae:	3b01      	subs	r3, #1
 80136b0:	fb13 f302 	smulbb	r3, r3, r2
 80136b4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80136b8:	b21f      	sxth	r7, r3
 80136ba:	4638      	mov	r0, r7
 80136bc:	b01d      	add	sp, #116	; 0x74
 80136be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136c2:	b003      	add	sp, #12
 80136c4:	4770      	bx	lr
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	dcf7      	bgt.n	80136ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80136ca:	2700      	movs	r7, #0
 80136cc:	e7f5      	b.n	80136ba <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80136ce:	bf00      	nop
 80136d0:	2400f29c 	.word	0x2400f29c
 80136d4:	2400f298 	.word	0x2400f298
 80136d8:	2400f2a0 	.word	0x2400f2a0

080136dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 80136dc:	4bbd      	ldr	r3, [pc, #756]	; (80139d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80136de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e2:	460c      	mov	r4, r1
 80136e4:	881b      	ldrh	r3, [r3, #0]
 80136e6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80136e8:	b0a9      	sub	sp, #164	; 0xa4
 80136ea:	4680      	mov	r8, r0
 80136ec:	428b      	cmp	r3, r1
 80136ee:	d809      	bhi.n	8013704 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80136f0:	2300      	movs	r3, #0
 80136f2:	f04f 32ff 	mov.w	r2, #4294967295
 80136f6:	6083      	str	r3, [r0, #8]
 80136f8:	e9c0 3200 	strd	r3, r2, [r0]
 80136fc:	4640      	mov	r0, r8
 80136fe:	b029      	add	sp, #164	; 0xa4
 8013700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013704:	4eb4      	ldr	r6, [pc, #720]	; (80139d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8013706:	6833      	ldr	r3, [r6, #0]
 8013708:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801370c:	4bb3      	ldr	r3, [pc, #716]	; (80139dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8013714:	4bb2      	ldr	r3, [pc, #712]	; (80139e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013716:	6818      	ldr	r0, [r3, #0]
 8013718:	f7f3 fee6 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 801371c:	682b      	ldr	r3, [r5, #0]
 801371e:	4681      	mov	r9, r0
 8013720:	4628      	mov	r0, r5
 8013722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013724:	4798      	blx	r3
 8013726:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8013728:	b203      	sxth	r3, r0
 801372a:	4682      	mov	sl, r0
 801372c:	4407      	add	r7, r0
 801372e:	a80f      	add	r0, sp, #60	; 0x3c
 8013730:	9304      	str	r3, [sp, #16]
 8013732:	b2bb      	uxth	r3, r7
 8013734:	9303      	str	r3, [sp, #12]
 8013736:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801373a:	2b00      	cmp	r3, #0
 801373c:	f040 80a5 	bne.w	801388a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8013740:	f004 fc50 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8013744:	682b      	ldr	r3, [r5, #0]
 8013746:	4628      	mov	r0, r5
 8013748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801374a:	4798      	blx	r3
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	4606      	mov	r6, r0
 8013750:	4628      	mov	r0, r5
 8013752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013754:	4798      	blx	r3
 8013756:	6823      	ldr	r3, [r4, #0]
 8013758:	4607      	mov	r7, r0
 801375a:	4620      	mov	r0, r4
 801375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801375e:	4798      	blx	r3
 8013760:	6823      	ldr	r3, [r4, #0]
 8013762:	4683      	mov	fp, r0
 8013764:	4620      	mov	r0, r4
 8013766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801376a:	4798      	blx	r3
 801376c:	463b      	mov	r3, r7
 801376e:	4649      	mov	r1, r9
 8013770:	4632      	mov	r2, r6
 8013772:	2600      	movs	r6, #0
 8013774:	e9cd b000 	strd	fp, r0, [sp]
 8013778:	a80f      	add	r0, sp, #60	; 0x3c
 801377a:	4637      	mov	r7, r6
 801377c:	f004 fca2 	bl	80180c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013780:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013784:	f8df b250 	ldr.w	fp, [pc, #592]	; 80139d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013788:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801378c:	bf0c      	ite	eq
 801378e:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8013792:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8013796:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013798:	4629      	mov	r1, r5
 801379a:	f8db 3000 	ldr.w	r3, [fp]
 801379e:	a80f      	add	r0, sp, #60	; 0x3c
 80137a0:	3701      	adds	r7, #1
 80137a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80137a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80137aa:	b2bf      	uxth	r7, r7
 80137ac:	785b      	ldrb	r3, [r3, #1]
 80137ae:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80137b2:	f001 ff9e 	bl	80156f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80137b6:	9b03      	ldr	r3, [sp, #12]
 80137b8:	4286      	cmp	r6, r0
 80137ba:	eba9 0903 	sub.w	r9, r9, r3
 80137be:	bfb8      	it	lt
 80137c0:	4606      	movlt	r6, r0
 80137c2:	a80f      	add	r0, sp, #60	; 0x3c
 80137c4:	fa0f f989 	sxth.w	r9, r9
 80137c8:	b236      	sxth	r6, r6
 80137ca:	f004 fc32 	bl	8018032 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80137ce:	b918      	cbnz	r0, 80137d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80137d0:	7a2b      	ldrb	r3, [r5, #8]
 80137d2:	444b      	add	r3, r9
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	dcde      	bgt.n	8013796 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 80137d8:	9b03      	ldr	r3, [sp, #12]
 80137da:	4620      	mov	r0, r4
 80137dc:	9a04      	ldr	r2, [sp, #16]
 80137de:	fb13 f707 	smulbb	r7, r3, r7
 80137e2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80137e4:	f895 9009 	ldrb.w	r9, [r5, #9]
 80137e8:	1aff      	subs	r7, r7, r3
 80137ea:	b2bf      	uxth	r7, r7
 80137ec:	b23b      	sxth	r3, r7
 80137ee:	429a      	cmp	r2, r3
 80137f0:	bfa8      	it	ge
 80137f2:	4657      	movge	r7, sl
 80137f4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80137f8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80137fc:	6823      	ldr	r3, [r4, #0]
 80137fe:	444f      	add	r7, r9
 8013800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013802:	bf08      	it	eq
 8013804:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8013808:	fa1f f987 	uxth.w	r9, r7
 801380c:	bf18      	it	ne
 801380e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8013812:	4798      	blx	r3
 8013814:	2801      	cmp	r0, #1
 8013816:	fa0f f789 	sxth.w	r7, r9
 801381a:	b2b3      	uxth	r3, r6
 801381c:	f000 80e2 	beq.w	80139e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8013820:	2802      	cmp	r0, #2
 8013822:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8013826:	f000 80e3 	beq.w	80139f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801382a:	7aea      	ldrb	r2, [r5, #11]
 801382c:	b236      	sxth	r6, r6
 801382e:	7b2d      	ldrb	r5, [r5, #12]
 8013830:	1ab6      	subs	r6, r6, r2
 8013832:	442a      	add	r2, r5
 8013834:	fa1f fa86 	uxth.w	sl, r6
 8013838:	4413      	add	r3, r2
 801383a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801383e:	fa0f fb8a 	sxth.w	fp, sl
 8013842:	b29b      	uxth	r3, r3
 8013844:	2a02      	cmp	r2, #2
 8013846:	b21e      	sxth	r6, r3
 8013848:	f000 80d6 	beq.w	80139f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801384c:	2a03      	cmp	r2, #3
 801384e:	f000 80de 	beq.w	8013a0e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013852:	2a01      	cmp	r2, #1
 8013854:	f040 80e6 	bne.w	8013a24 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013858:	8925      	ldrh	r5, [r4, #8]
 801385a:	4633      	mov	r3, r6
 801385c:	463e      	mov	r6, r7
 801385e:	eba5 0909 	sub.w	r9, r5, r9
 8013862:	461f      	mov	r7, r3
 8013864:	465d      	mov	r5, fp
 8013866:	fa0f fb89 	sxth.w	fp, r9
 801386a:	4b5d      	ldr	r3, [pc, #372]	; (80139e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801386c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801386e:	6818      	ldr	r0, [r3, #0]
 8013870:	f7f3 fe3a 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013874:	f8a8 b000 	strh.w	fp, [r8]
 8013878:	f8a8 5002 	strh.w	r5, [r8, #2]
 801387c:	f8a8 6004 	strh.w	r6, [r8, #4]
 8013880:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013884:	f8c8 0008 	str.w	r0, [r8, #8]
 8013888:	e738      	b.n	80136fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801388a:	f004 fbab 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 801388e:	682b      	ldr	r3, [r5, #0]
 8013890:	4628      	mov	r0, r5
 8013892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013894:	4798      	blx	r3
 8013896:	682b      	ldr	r3, [r5, #0]
 8013898:	4607      	mov	r7, r0
 801389a:	4628      	mov	r0, r5
 801389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801389e:	4798      	blx	r3
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	4683      	mov	fp, r0
 80138a4:	4620      	mov	r0, r4
 80138a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138a8:	4798      	blx	r3
 80138aa:	6822      	ldr	r2, [r4, #0]
 80138ac:	9005      	str	r0, [sp, #20]
 80138ae:	4620      	mov	r0, r4
 80138b0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80138b4:	4790      	blx	r2
 80138b6:	9b05      	ldr	r3, [sp, #20]
 80138b8:	463a      	mov	r2, r7
 80138ba:	4649      	mov	r1, r9
 80138bc:	9001      	str	r0, [sp, #4]
 80138be:	a80f      	add	r0, sp, #60	; 0x3c
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	465b      	mov	r3, fp
 80138c4:	f004 fbfe 	bl	80180c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80138c8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80138cc:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 80138d0:	af0f      	add	r7, sp, #60	; 0x3c
 80138d2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80138d6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80138da:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80138dc:	bf0a      	itet	eq
 80138de:	464a      	moveq	r2, r9
 80138e0:	461a      	movne	r2, r3
 80138e2:	4699      	moveq	r9, r3
 80138e4:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80138e8:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80138ec:	1ad2      	subs	r2, r2, r3
 80138ee:	6833      	ldr	r3, [r6, #0]
 80138f0:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 80138f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80138f8:	7859      	ldrb	r1, [r3, #1]
 80138fa:	2300      	movs	r3, #0
 80138fc:	9707      	str	r7, [sp, #28]
 80138fe:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013902:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013906:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801390a:	f88d 1020 	strb.w	r1, [sp, #32]
 801390e:	9509      	str	r5, [sp, #36]	; 0x24
 8013910:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013914:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013918:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801391c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013920:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013924:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013928:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801392c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013930:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013934:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013938:	b350      	cbz	r0, 8013990 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	4628      	mov	r0, r5
 801393e:	695b      	ldr	r3, [r3, #20]
 8013940:	4798      	blx	r3
 8013942:	4607      	mov	r7, r0
 8013944:	b320      	cbz	r0, 8013990 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013946:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013948:	4639      	mov	r1, r7
 801394a:	6803      	ldr	r3, [r0, #0]
 801394c:	68db      	ldr	r3, [r3, #12]
 801394e:	4798      	blx	r3
 8013950:	4606      	mov	r6, r0
 8013952:	b1e8      	cbz	r0, 8013990 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013954:	7b43      	ldrb	r3, [r0, #13]
 8013956:	7a82      	ldrb	r2, [r0, #10]
 8013958:	005b      	lsls	r3, r3, #1
 801395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801395e:	4313      	orrs	r3, r2
 8013960:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013964:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8013968:	2b06      	cmp	r3, #6
 801396a:	d111      	bne.n	8013990 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801396c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801396e:	4632      	mov	r2, r6
 8013970:	4639      	mov	r1, r7
 8013972:	6803      	ldr	r3, [r0, #0]
 8013974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013976:	4798      	blx	r3
 8013978:	7b73      	ldrb	r3, [r6, #13]
 801397a:	005b      	lsls	r3, r3, #1
 801397c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013980:	7ab3      	ldrb	r3, [r6, #10]
 8013982:	4313      	orrs	r3, r2
 8013984:	4418      	add	r0, r3
 8013986:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801398a:	4418      	add	r0, r3
 801398c:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8013990:	2600      	movs	r6, #0
 8013992:	4637      	mov	r7, r6
 8013994:	a806      	add	r0, sp, #24
 8013996:	3701      	adds	r7, #1
 8013998:	f002 f88d 	bl	8015ab6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801399c:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80139a0:	9b03      	ldr	r3, [sp, #12]
 80139a2:	b2bf      	uxth	r7, r7
 80139a4:	4286      	cmp	r6, r0
 80139a6:	eba9 0903 	sub.w	r9, r9, r3
 80139aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80139ae:	bfb8      	it	lt
 80139b0:	4606      	movlt	r6, r0
 80139b2:	fa0f f989 	sxth.w	r9, r9
 80139b6:	b236      	sxth	r6, r6
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f43f af0d 	beq.w	80137d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80139be:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f47f af08 	bne.w	80137d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80139c8:	7a2b      	ldrb	r3, [r5, #8]
 80139ca:	444b      	add	r3, r9
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	dce1      	bgt.n	8013994 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 80139d0:	e702      	b.n	80137d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80139d2:	bf00      	nop
 80139d4:	2400f29c 	.word	0x2400f29c
 80139d8:	2400f298 	.word	0x2400f298
 80139dc:	2400f2a0 	.word	0x2400f2a0
 80139e0:	2400f2a4 	.word	0x2400f2a4
 80139e4:	ebaa 0606 	sub.w	r6, sl, r6
 80139e8:	2002      	movs	r0, #2
 80139ea:	fb96 f6f0 	sdiv	r6, r6, r0
 80139ee:	e71c      	b.n	801382a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80139f0:	441e      	add	r6, r3
 80139f2:	ebaa 0606 	sub.w	r6, sl, r6
 80139f6:	e718      	b.n	801382a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 80139f8:	8925      	ldrh	r5, [r4, #8]
 80139fa:	1aed      	subs	r5, r5, r3
 80139fc:	eba5 050a 	sub.w	r5, r5, sl
 8013a00:	fa0f fb85 	sxth.w	fp, r5
 8013a04:	8965      	ldrh	r5, [r4, #10]
 8013a06:	eba5 0509 	sub.w	r5, r5, r9
 8013a0a:	b22d      	sxth	r5, r5
 8013a0c:	e72d      	b.n	801386a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013a0e:	8965      	ldrh	r5, [r4, #10]
 8013a10:	f04f 0b00 	mov.w	fp, #0
 8013a14:	1aed      	subs	r5, r5, r3
 8013a16:	4633      	mov	r3, r6
 8013a18:	463e      	mov	r6, r7
 8013a1a:	eba5 050a 	sub.w	r5, r5, sl
 8013a1e:	461f      	mov	r7, r3
 8013a20:	b22d      	sxth	r5, r5
 8013a22:	e722      	b.n	801386a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013a24:	2500      	movs	r5, #0
 8013a26:	e720      	b.n	801386a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013a28 <_ZN8touchgfx8TextAreaD0Ev>:
 8013a28:	b510      	push	{r4, lr}
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	2148      	movs	r1, #72	; 0x48
 8013a2e:	f00e fb18 	bl	8022062 <_ZdlPvj>
 8013a32:	4620      	mov	r0, r4
 8013a34:	bd10      	pop	{r4, pc}
	...

08013a38 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013a38:	b513      	push	{r0, r1, r4, lr}
 8013a3a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8013a3e:	4604      	mov	r4, r0
 8013a40:	b1fb      	cbz	r3, 8013a82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a42:	4b16      	ldr	r3, [pc, #88]	; (8013a9c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013a44:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013a46:	881b      	ldrh	r3, [r3, #0]
 8013a48:	428b      	cmp	r3, r1
 8013a4a:	d91a      	bls.n	8013a82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a4c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	dd16      	ble.n	8013a82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a54:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	dd12      	ble.n	8013a82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a5c:	4b10      	ldr	r3, [pc, #64]	; (8013aa0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013a5e:	6818      	ldr	r0, [r3, #0]
 8013a60:	f7f3 fd42 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013a64:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013a68:	6822      	ldr	r2, [r4, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	db06      	blt.n	8013a7c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013a6e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	db02      	blt.n	8013a7c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013a76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013a78:	4298      	cmp	r0, r3
 8013a7a:	d004      	beq.n	8013a86 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013a7c:	6953      	ldr	r3, [r2, #20]
 8013a7e:	4620      	mov	r0, r4
 8013a80:	4798      	blx	r3
 8013a82:	b002      	add	sp, #8
 8013a84:	bd10      	pop	{r4, pc}
 8013a86:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013a8a:	466b      	mov	r3, sp
 8013a8c:	6912      	ldr	r2, [r2, #16]
 8013a8e:	c903      	ldmia	r1, {r0, r1}
 8013a90:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a94:	4619      	mov	r1, r3
 8013a96:	4620      	mov	r0, r4
 8013a98:	4790      	blx	r2
 8013a9a:	e7f2      	b.n	8013a82 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013a9c:	2400f29c 	.word	0x2400f29c
 8013aa0:	2400f2a4 	.word	0x2400f2a4

08013aa4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013aa4:	4b45      	ldr	r3, [pc, #276]	; (8013bbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aaa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013aac:	b08e      	sub	sp, #56	; 0x38
 8013aae:	881b      	ldrh	r3, [r3, #0]
 8013ab0:	4604      	mov	r4, r0
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d97e      	bls.n	8013bb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013ab6:	6808      	ldr	r0, [r1, #0]
 8013ab8:	ab05      	add	r3, sp, #20
 8013aba:	6849      	ldr	r1, [r1, #4]
 8013abc:	4d40      	ldr	r5, [pc, #256]	; (8013bc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013abe:	c303      	stmia	r3!, {r0, r1}
 8013ac0:	4611      	mov	r1, r2
 8013ac2:	6828      	ldr	r0, [r5, #0]
 8013ac4:	f7f3 fd10 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013ac8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	db11      	blt.n	8013af4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013ad0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	db0d      	blt.n	8013af4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013ad8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013ada:	4298      	cmp	r0, r3
 8013adc:	d10a      	bne.n	8013af4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013ade:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8013ae2:	ab09      	add	r3, sp, #36	; 0x24
 8013ae4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ae8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013aec:	4619      	mov	r1, r3
 8013aee:	a805      	add	r0, sp, #20
 8013af0:	f7fc fc40 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8013af4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	dd5b      	ble.n	8013bb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013afc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	dd57      	ble.n	8013bb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b04:	4f2f      	ldr	r7, [pc, #188]	; (8013bc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013b06:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013b0e:	4b2e      	ldr	r3, [pc, #184]	; (8013bc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013b16:	2e00      	cmp	r6, #0
 8013b18:	d04c      	beq.n	8013bb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013b1a:	6823      	ldr	r3, [r4, #0]
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b24:	4798      	blx	r3
 8013b26:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013b2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013b32:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013b36:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013b3a:	785b      	ldrb	r3, [r3, #1]
 8013b3c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013b40:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013b44:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013b46:	9609      	str	r6, [sp, #36]	; 0x24
 8013b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b4c:	4b1f      	ldr	r3, [pc, #124]	; (8013bcc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013b4e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013b58:	910b      	str	r1, [sp, #44]	; 0x2c
 8013b5a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013b5e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013b62:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013b66:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013b6a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013b6e:	b10a      	cbz	r2, 8013b74 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013b70:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013b72:	b906      	cbnz	r6, 8013b76 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013b74:	689e      	ldr	r6, [r3, #8]
 8013b76:	af07      	add	r7, sp, #28
 8013b78:	4621      	mov	r1, r4
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	f003 fdaa 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b80:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013b82:	6828      	ldr	r0, [r5, #0]
 8013b84:	f7f3 fcb0 	bl	80074e8 <_ZNK8touchgfx5Texts7getTextEt>
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	4605      	mov	r5, r0
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b90:	4798      	blx	r3
 8013b92:	6823      	ldr	r3, [r4, #0]
 8013b94:	4680      	mov	r8, r0
 8013b96:	4620      	mov	r0, r4
 8013b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b9c:	4798      	blx	r3
 8013b9e:	ab09      	add	r3, sp, #36	; 0x24
 8013ba0:	9501      	str	r5, [sp, #4]
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	ab05      	add	r3, sp, #20
 8013ba6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013baa:	4630      	mov	r0, r6
 8013bac:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013bb0:	f7f3 fc4c 	bl	800744c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013bb4:	b00e      	add	sp, #56	; 0x38
 8013bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bba:	bf00      	nop
 8013bbc:	2400f29c 	.word	0x2400f29c
 8013bc0:	2400f2a4 	.word	0x2400f2a4
 8013bc4:	2400f298 	.word	0x2400f298
 8013bc8:	2400f2a0 	.word	0x2400f2a0
 8013bcc:	2400f240 	.word	0x2400f240

08013bd0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8013bd0:	b570      	push	{r4, r5, r6, lr}
 8013bd2:	6803      	ldr	r3, [r0, #0]
 8013bd4:	4604      	mov	r4, r0
 8013bd6:	4615      	mov	r5, r2
 8013bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bda:	4798      	blx	r3
 8013bdc:	6823      	ldr	r3, [r4, #0]
 8013bde:	4629      	mov	r1, r5
 8013be0:	4620      	mov	r0, r4
 8013be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013be4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013be8:	4718      	bx	r3
	...

08013bec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	4b0e      	ldr	r3, [pc, #56]	; (8013c28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013bf0:	4604      	mov	r4, r0
 8013bf2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013bf4:	881b      	ldrh	r3, [r3, #0]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d214      	bcs.n	8013c24 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013bfa:	6803      	ldr	r3, [r0, #0]
 8013bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bfe:	4798      	blx	r3
 8013c00:	6823      	ldr	r3, [r4, #0]
 8013c02:	4605      	mov	r5, r0
 8013c04:	4620      	mov	r0, r4
 8013c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c08:	4798      	blx	r3
 8013c0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013c0e:	b22d      	sxth	r5, r5
 8013c10:	4601      	mov	r1, r0
 8013c12:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013c16:	bf06      	itte	eq
 8013c18:	4602      	moveq	r2, r0
 8013c1a:	4629      	moveq	r1, r5
 8013c1c:	462a      	movne	r2, r5
 8013c1e:	4620      	mov	r0, r4
 8013c20:	f7ff ffd6 	bl	8013bd0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013c24:	bd38      	pop	{r3, r4, r5, pc}
 8013c26:	bf00      	nop
 8013c28:	2400f29c 	.word	0x2400f29c

08013c2c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013c2c:	b530      	push	{r4, r5, lr}
 8013c2e:	888b      	ldrh	r3, [r1, #4]
 8013c30:	b085      	sub	sp, #20
 8013c32:	4604      	mov	r4, r0
 8013c34:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013c36:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013c3a:	b923      	cbnz	r3, 8013c46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013c3c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013c40:	b90b      	cbnz	r3, 8013c46 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013c42:	f7ff ffd3 	bl	8013bec <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013c46:	6823      	ldr	r3, [r4, #0]
 8013c48:	466d      	mov	r5, sp
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	343c      	adds	r4, #60	; 0x3c
 8013c4e:	4628      	mov	r0, r5
 8013c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c54:	4798      	blx	r3
 8013c56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013c5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013c5e:	b005      	add	sp, #20
 8013c60:	bd30      	pop	{r4, r5, pc}

08013c62 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013c62:	2300      	movs	r3, #0
 8013c64:	8083      	strh	r3, [r0, #4]
 8013c66:	80c3      	strh	r3, [r0, #6]
 8013c68:	8003      	strh	r3, [r0, #0]
 8013c6a:	8043      	strh	r3, [r0, #2]
 8013c6c:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013c70:	2bff      	cmp	r3, #255	; 0xff
 8013c72:	bf01      	itttt	eq
 8013c74:	890b      	ldrheq	r3, [r1, #8]
 8013c76:	8083      	strheq	r3, [r0, #4]
 8013c78:	894b      	ldrheq	r3, [r1, #10]
 8013c7a:	80c3      	strheq	r3, [r0, #6]
 8013c7c:	4770      	bx	lr
	...

08013c80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c82:	4604      	mov	r4, r0
 8013c84:	466b      	mov	r3, sp
 8013c86:	6808      	ldr	r0, [r1, #0]
 8013c88:	6849      	ldr	r1, [r1, #4]
 8013c8a:	c303      	stmia	r3!, {r0, r1}
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	4669      	mov	r1, sp
 8013c90:	4620      	mov	r0, r4
 8013c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c94:	4798      	blx	r3
 8013c96:	4b08      	ldr	r3, [pc, #32]	; (8013cb8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013c9e:	b10a      	cbz	r2, 8013ca4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013ca0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ca2:	b900      	cbnz	r0, 8013ca6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013ca4:	6898      	ldr	r0, [r3, #8]
 8013ca6:	6803      	ldr	r3, [r0, #0]
 8013ca8:	4669      	mov	r1, sp
 8013caa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013cac:	6a1d      	ldr	r5, [r3, #32]
 8013cae:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013cb2:	47a8      	blx	r5
 8013cb4:	b003      	add	sp, #12
 8013cb6:	bd30      	pop	{r4, r5, pc}
 8013cb8:	2400f240 	.word	0x2400f240

08013cbc <_ZN8touchgfx3BoxD1Ev>:
 8013cbc:	4770      	bx	lr

08013cbe <_ZN8touchgfx3BoxD0Ev>:
 8013cbe:	b510      	push	{r4, lr}
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	212c      	movs	r1, #44	; 0x2c
 8013cc4:	f00e f9cd 	bl	8022062 <_ZdlPvj>
 8013cc8:	4620      	mov	r0, r4
 8013cca:	bd10      	pop	{r4, pc}

08013ccc <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013ccc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013cd0:	b12a      	cbz	r2, 8013cde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013cd2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013cd6:	b112      	cbz	r2, 8013cde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013cd8:	6803      	ldr	r3, [r0, #0]
 8013cda:	695b      	ldr	r3, [r3, #20]
 8013cdc:	4718      	bx	r3
 8013cde:	4770      	bx	lr

08013ce0 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8013ce0:	4770      	bx	lr

08013ce2 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8013ce2:	b510      	push	{r4, lr}
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	2134      	movs	r1, #52	; 0x34
 8013ce8:	f00e f9bb 	bl	8022062 <_ZdlPvj>
 8013cec:	4620      	mov	r0, r4
 8013cee:	bd10      	pop	{r4, pc}

08013cf0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8013cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	460e      	mov	r6, r1
 8013cfa:	b08e      	sub	sp, #56	; 0x38
 8013cfc:	b218      	sxth	r0, r3
 8013cfe:	8921      	ldrh	r1, [r4, #8]
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	8962      	ldrh	r2, [r4, #10]
 8013d04:	f8ad 0000 	strh.w	r0, [sp]
 8013d08:	b29b      	uxth	r3, r3
 8013d0a:	f8ad 0002 	strh.w	r0, [sp, #2]
 8013d0e:	1ac9      	subs	r1, r1, r3
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	b209      	sxth	r1, r1
 8013d14:	b21b      	sxth	r3, r3
 8013d16:	2900      	cmp	r1, #0
 8013d18:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013d1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013d20:	dd5e      	ble.n	8013de0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	dd5c      	ble.n	8013de0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013d26:	6830      	ldr	r0, [r6, #0]
 8013d28:	ab02      	add	r3, sp, #8
 8013d2a:	6871      	ldr	r1, [r6, #4]
 8013d2c:	c303      	stmia	r3!, {r0, r1}
 8013d2e:	4669      	mov	r1, sp
 8013d30:	a802      	add	r0, sp, #8
 8013d32:	f7fc fb1f 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8013d36:	4620      	mov	r0, r4
 8013d38:	a902      	add	r1, sp, #8
 8013d3a:	f7ff ffa1 	bl	8013c80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8013d3e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013d40:	2800      	cmp	r0, #0
 8013d42:	d05f      	beq.n	8013e04 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013d44:	8963      	ldrh	r3, [r4, #10]
 8013d46:	b202      	sxth	r2, r0
 8013d48:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013d4c:	2500      	movs	r5, #0
 8013d4e:	1a1f      	subs	r7, r3, r0
 8013d50:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8013d54:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013d58:	b21b      	sxth	r3, r3
 8013d5a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013d5e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8013d62:	af04      	add	r7, sp, #16
 8013d64:	1a09      	subs	r1, r1, r0
 8013d66:	9506      	str	r5, [sp, #24]
 8013d68:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013d6c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013d70:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013d74:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8013d78:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013d7c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013d80:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013d84:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8013d88:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8013d8c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013d90:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013d94:	ab06      	add	r3, sp, #24
 8013d96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013d9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013d9e:	e887 0003 	stmia.w	r7, {r0, r1}
 8013da2:	4631      	mov	r1, r6
 8013da4:	4638      	mov	r0, r7
 8013da6:	f7fc fae5 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8013daa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	dd12      	ble.n	8013dd8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013db2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	dd0e      	ble.n	8013dd8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	4639      	mov	r1, r7
 8013dbe:	4620      	mov	r0, r4
 8013dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc2:	4798      	blx	r3
 8013dc4:	f7fc fda6 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8013dc8:	6803      	ldr	r3, [r0, #0]
 8013dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013dcc:	4639      	mov	r1, r7
 8013dce:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013dd2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013dd6:	47c0      	blx	r8
 8013dd8:	3501      	adds	r5, #1
 8013dda:	2d04      	cmp	r5, #4
 8013ddc:	d1da      	bne.n	8013d94 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8013dde:	e011      	b.n	8013e04 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013de0:	6830      	ldr	r0, [r6, #0]
 8013de2:	ab06      	add	r3, sp, #24
 8013de4:	6871      	ldr	r1, [r6, #4]
 8013de6:	c303      	stmia	r3!, {r0, r1}
 8013de8:	6823      	ldr	r3, [r4, #0]
 8013dea:	a906      	add	r1, sp, #24
 8013dec:	4620      	mov	r0, r4
 8013dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013df0:	4798      	blx	r3
 8013df2:	f7fc fd8f 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8013df6:	6803      	ldr	r3, [r0, #0]
 8013df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013dfa:	a906      	add	r1, sp, #24
 8013dfc:	6a1d      	ldr	r5, [r3, #32]
 8013dfe:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013e02:	47a8      	blx	r5
 8013e04:	b00e      	add	sp, #56	; 0x38
 8013e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e0a <_ZN8touchgfx5ImageD1Ev>:
 8013e0a:	4770      	bx	lr

08013e0c <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013e0c:	b570      	push	{r4, r5, r6, lr}
 8013e0e:	880b      	ldrh	r3, [r1, #0]
 8013e10:	460d      	mov	r5, r1
 8013e12:	4604      	mov	r4, r0
 8013e14:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013e16:	4608      	mov	r0, r1
 8013e18:	f005 fd26 	bl	8019868 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	4628      	mov	r0, r5
 8013e20:	f005 fd56 	bl	80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	4605      	mov	r5, r0
 8013e28:	4631      	mov	r1, r6
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e2e:	4798      	blx	r3
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	4629      	mov	r1, r5
 8013e34:	4620      	mov	r0, r4
 8013e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e3c:	4718      	bx	r3

08013e3e <_ZN8touchgfx5ImageD0Ev>:
 8013e3e:	b510      	push	{r4, lr}
 8013e40:	4604      	mov	r4, r0
 8013e42:	212c      	movs	r1, #44	; 0x2c
 8013e44:	f00e f90d 	bl	8022062 <_ZdlPvj>
 8013e48:	4620      	mov	r0, r4
 8013e4a:	bd10      	pop	{r4, pc}

08013e4c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013e4c:	b510      	push	{r4, lr}
 8013e4e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8013e52:	4604      	mov	r4, r0
 8013e54:	2bff      	cmp	r3, #255	; 0xff
 8013e56:	d006      	beq.n	8013e66 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	8003      	strh	r3, [r0, #0]
 8013e5c:	8043      	strh	r3, [r0, #2]
 8013e5e:	8083      	strh	r3, [r0, #4]
 8013e60:	80c3      	strh	r3, [r0, #6]
 8013e62:	4620      	mov	r0, r4
 8013e64:	bd10      	pop	{r4, pc}
 8013e66:	3126      	adds	r1, #38	; 0x26
 8013e68:	f005 fd66 	bl	8019938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013e6c:	e7f9      	b.n	8013e62 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08013e6e <_ZNK8touchgfx5Image17invalidateContentEv>:
 8013e6e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8013e72:	b12a      	cbz	r2, 8013e80 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013e74:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013e78:	b112      	cbz	r2, 8013e80 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8013e7a:	6803      	ldr	r3, [r0, #0]
 8013e7c:	695b      	ldr	r3, [r3, #20]
 8013e7e:	4718      	bx	r3
 8013e80:	4770      	bx	lr
	...

08013e84 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e88:	4604      	mov	r4, r0
 8013e8a:	b088      	sub	sp, #32
 8013e8c:	2500      	movs	r5, #0
 8013e8e:	460f      	mov	r7, r1
 8013e90:	f854 3b26 	ldr.w	r3, [r4], #38
 8013e94:	a904      	add	r1, sp, #16
 8013e96:	4606      	mov	r6, r0
 8013e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013e9e:	4798      	blx	r3
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f005 fce1 	bl	8019868 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013ea6:	4680      	mov	r8, r0
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f005 fd11 	bl	80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013eae:	9506      	str	r5, [sp, #24]
 8013eb0:	ad06      	add	r5, sp, #24
 8013eb2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8013eb6:	4639      	mov	r1, r7
 8013eb8:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f7fc fa59 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8013ec2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	dd19      	ble.n	8013efe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013eca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	dd15      	ble.n	8013efe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013ed2:	4b0c      	ldr	r3, [pc, #48]	; (8013f04 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013eda:	b10a      	cbz	r2, 8013ee0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013edc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ede:	b900      	cbnz	r0, 8013ee2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013ee0:	6898      	ldr	r0, [r3, #8]
 8013ee2:	2701      	movs	r7, #1
 8013ee4:	6801      	ldr	r1, [r0, #0]
 8013ee6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8013eea:	9702      	str	r7, [sp, #8]
 8013eec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8013ef0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013ef4:	e9cd 5600 	strd	r5, r6, [sp]
 8013ef8:	688d      	ldr	r5, [r1, #8]
 8013efa:	4621      	mov	r1, r4
 8013efc:	47a8      	blx	r5
 8013efe:	b008      	add	sp, #32
 8013f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f04:	2400f240 	.word	0x2400f240

08013f08 <_ZN8touchgfx7OutlineD1Ev>:
 8013f08:	4770      	bx	lr

08013f0a <_ZN8touchgfx7OutlineD0Ev>:
 8013f0a:	b510      	push	{r4, lr}
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	2130      	movs	r1, #48	; 0x30
 8013f10:	f00e f8a7 	bl	8022062 <_ZdlPvj>
 8013f14:	4620      	mov	r0, r4
 8013f16:	bd10      	pop	{r4, pc}

08013f18 <_ZN8touchgfx7Outline5resetEv>:
 8013f18:	b510      	push	{r4, lr}
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	f000 fe86 	bl	8014c2c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8013f20:	60e0      	str	r0, [r4, #12]
 8013f22:	f000 fe89 	bl	8014c38 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8013f26:	68e3      	ldr	r3, [r4, #12]
 8013f28:	08c0      	lsrs	r0, r0, #3
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8013f30:	6123      	str	r3, [r4, #16]
 8013f32:	3801      	subs	r0, #1
 8013f34:	60a2      	str	r2, [r4, #8]
 8013f36:	6060      	str	r0, [r4, #4]
 8013f38:	8019      	strh	r1, [r3, #0]
 8013f3a:	8059      	strh	r1, [r3, #2]
 8013f3c:	809a      	strh	r2, [r3, #4]
 8013f3e:	80da      	strh	r2, [r3, #6]
 8013f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f42:	f023 0301 	bic.w	r3, r3, #1
 8013f46:	f043 0302 	orr.w	r3, r3, #2
 8013f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8013f4c:	bd10      	pop	{r4, pc}
	...

08013f50 <_ZN8touchgfx7OutlineC1Ev>:
 8013f50:	4b0a      	ldr	r3, [pc, #40]	; (8013f7c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8013f52:	b510      	push	{r4, lr}
 8013f54:	6003      	str	r3, [r0, #0]
 8013f56:	2300      	movs	r3, #0
 8013f58:	4604      	mov	r4, r0
 8013f5a:	6243      	str	r3, [r0, #36]	; 0x24
 8013f5c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8013f60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013f64:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8013f68:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8013f6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013f70:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8013f74:	f7ff ffd0 	bl	8013f18 <_ZN8touchgfx7Outline5resetEv>
 8013f78:	4620      	mov	r0, r4
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	080256e0 	.word	0x080256e0

08013f80 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8013f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f84:	b093      	sub	sp, #76	; 0x4c
 8013f86:	1156      	asrs	r6, r2, #5
 8013f88:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	1153      	asrs	r3, r2, #5
 8013f8e:	f004 051f 	and.w	r5, r4, #31
 8013f92:	9303      	str	r3, [sp, #12]
 8013f94:	1163      	asrs	r3, r4, #5
 8013f96:	9504      	str	r5, [sp, #16]
 8013f98:	1165      	asrs	r5, r4, #5
 8013f9a:	9306      	str	r3, [sp, #24]
 8013f9c:	f002 031f 	and.w	r3, r2, #31
 8013fa0:	42ae      	cmp	r6, r5
 8013fa2:	f040 80f4 	bne.w	801418e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8013fa6:	9c04      	ldr	r4, [sp, #16]
 8013fa8:	9a05      	ldr	r2, [sp, #20]
 8013faa:	42a3      	cmp	r3, r4
 8013fac:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8013fb0:	6902      	ldr	r2, [r0, #16]
 8013fb2:	d125      	bne.n	8014000 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8013fb4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013fb8:	459e      	cmp	lr, r3
 8013fba:	d103      	bne.n	8013fc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8013fbc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013fc0:	429e      	cmp	r6, r3
 8013fc2:	d035      	beq.n	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8013fc4:	88d1      	ldrh	r1, [r2, #6]
 8013fc6:	8893      	ldrh	r3, [r2, #4]
 8013fc8:	430b      	orrs	r3, r1
 8013fca:	d010      	beq.n	8013fee <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013fcc:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	db0c      	blt.n	8013fee <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013fd4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013fd6:	428b      	cmp	r3, r1
 8013fd8:	da09      	bge.n	8013fee <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8013fda:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8013fde:	428b      	cmp	r3, r1
 8013fe0:	f103 0301 	add.w	r3, r3, #1
 8013fe4:	bf38      	it	cc
 8013fe6:	3208      	addcc	r2, #8
 8013fe8:	6083      	str	r3, [r0, #8]
 8013fea:	bf38      	it	cc
 8013fec:	6102      	strcc	r2, [r0, #16]
 8013fee:	6903      	ldr	r3, [r0, #16]
 8013ff0:	9a03      	ldr	r2, [sp, #12]
 8013ff2:	f8a3 e000 	strh.w	lr, [r3]
 8013ff6:	805a      	strh	r2, [r3, #2]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	809a      	strh	r2, [r3, #4]
 8013ffc:	80da      	strh	r2, [r3, #6]
 8013ffe:	e017      	b.n	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014000:	9c05      	ldr	r4, [sp, #20]
 8014002:	114e      	asrs	r6, r1, #5
 8014004:	f001 0c1f 	and.w	ip, r1, #31
 8014008:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801400c:	f004 041f 	and.w	r4, r4, #31
 8014010:	4576      	cmp	r6, lr
 8014012:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8014016:	9402      	str	r4, [sp, #8]
 8014018:	9c04      	ldr	r4, [sp, #16]
 801401a:	eba4 0403 	sub.w	r4, r4, r3
 801401e:	d10a      	bne.n	8014036 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014020:	9b02      	ldr	r3, [sp, #8]
 8014022:	44a0      	add	r8, r4
 8014024:	449c      	add	ip, r3
 8014026:	f8a2 8004 	strh.w	r8, [r2, #4]
 801402a:	fb04 a40c 	mla	r4, r4, ip, sl
 801402e:	80d4      	strh	r4, [r2, #6]
 8014030:	b013      	add	sp, #76	; 0x4c
 8014032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014036:	9d05      	ldr	r5, [sp, #20]
 8014038:	1a69      	subs	r1, r5, r1
 801403a:	bf51      	iteee	pl
 801403c:	f1cc 0520 	rsbpl	r5, ip, #32
 8014040:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014044:	4249      	negmi	r1, r1
 8014046:	2500      	movmi	r5, #0
 8014048:	bf5d      	ittte	pl
 801404a:	436c      	mulpl	r4, r5
 801404c:	2520      	movpl	r5, #32
 801404e:	f04f 0901 	movpl.w	r9, #1
 8014052:	f04f 39ff 	movmi.w	r9, #4294967295
 8014056:	9501      	str	r5, [sp, #4]
 8014058:	9f01      	ldr	r7, [sp, #4]
 801405a:	444e      	add	r6, r9
 801405c:	fb94 f5f1 	sdiv	r5, r4, r1
 8014060:	fb01 4415 	mls	r4, r1, r5, r4
 8014064:	44bc      	add	ip, r7
 8014066:	2c00      	cmp	r4, #0
 8014068:	bfbc      	itt	lt
 801406a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801406e:	1864      	addlt	r4, r4, r1
 8014070:	44a8      	add	r8, r5
 8014072:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014076:	f8a2 8004 	strh.w	r8, [r2, #4]
 801407a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801407e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014082:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014086:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801408a:	ea58 0202 	orrs.w	r2, r8, r2
 801408e:	d011      	beq.n	80140b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014090:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014094:	f1b8 0f00 	cmp.w	r8, #0
 8014098:	db0c      	blt.n	80140b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801409a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801409c:	4590      	cmp	r8, r2
 801409e:	da09      	bge.n	80140b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80140a0:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80140a4:	4590      	cmp	r8, r2
 80140a6:	bf3c      	itt	cc
 80140a8:	f10c 0208 	addcc.w	r2, ip, #8
 80140ac:	6102      	strcc	r2, [r0, #16]
 80140ae:	f108 0201 	add.w	r2, r8, #1
 80140b2:	6082      	str	r2, [r0, #8]
 80140b4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140b8:	2700      	movs	r7, #0
 80140ba:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80140be:	45b6      	cmp	lr, r6
 80140c0:	f8ac 6000 	strh.w	r6, [ip]
 80140c4:	442b      	add	r3, r5
 80140c6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80140ca:	f8ac 7004 	strh.w	r7, [ip, #4]
 80140ce:	f8ac 7006 	strh.w	r7, [ip, #6]
 80140d2:	d04b      	beq.n	801416c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80140d4:	9f04      	ldr	r7, [sp, #16]
 80140d6:	1a64      	subs	r4, r4, r1
 80140d8:	f04f 0a00 	mov.w	sl, #0
 80140dc:	1aff      	subs	r7, r7, r3
 80140de:	443d      	add	r5, r7
 80140e0:	016d      	lsls	r5, r5, #5
 80140e2:	fb95 f8f1 	sdiv	r8, r5, r1
 80140e6:	fb01 5518 	mls	r5, r1, r8, r5
 80140ea:	2d00      	cmp	r5, #0
 80140ec:	bfbc      	itt	lt
 80140ee:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80140f2:	186d      	addlt	r5, r5, r1
 80140f4:	f108 0701 	add.w	r7, r8, #1
 80140f8:	9703      	str	r7, [sp, #12]
 80140fa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80140fe:	1964      	adds	r4, r4, r5
 8014100:	444e      	add	r6, r9
 8014102:	bf54      	ite	pl
 8014104:	9f03      	ldrpl	r7, [sp, #12]
 8014106:	4647      	movmi	r7, r8
 8014108:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801410c:	bf58      	it	pl
 801410e:	1a64      	subpl	r4, r4, r1
 8014110:	443b      	add	r3, r7
 8014112:	44bb      	add	fp, r7
 8014114:	f8ac b004 	strh.w	fp, [ip, #4]
 8014118:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801411c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014120:	f8ac b006 	strh.w	fp, [ip, #6]
 8014124:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014128:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801412c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014130:	ea5b 0707 	orrs.w	r7, fp, r7
 8014134:	d011      	beq.n	801415a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014136:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801413a:	f1bb 0f00 	cmp.w	fp, #0
 801413e:	db0c      	blt.n	801415a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014140:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014142:	45bb      	cmp	fp, r7
 8014144:	da09      	bge.n	801415a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014146:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801414a:	45bb      	cmp	fp, r7
 801414c:	bf3c      	itt	cc
 801414e:	f10c 0708 	addcc.w	r7, ip, #8
 8014152:	6107      	strcc	r7, [r0, #16]
 8014154:	f10b 0701 	add.w	r7, fp, #1
 8014158:	6087      	str	r7, [r0, #8]
 801415a:	6907      	ldr	r7, [r0, #16]
 801415c:	45b6      	cmp	lr, r6
 801415e:	803e      	strh	r6, [r7, #0]
 8014160:	807a      	strh	r2, [r7, #2]
 8014162:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014166:	f8a7 a006 	strh.w	sl, [r7, #6]
 801416a:	d1c6      	bne.n	80140fa <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801416c:	9a04      	ldr	r2, [sp, #16]
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	6902      	ldr	r2, [r0, #16]
 8014172:	8891      	ldrh	r1, [r2, #4]
 8014174:	88d6      	ldrh	r6, [r2, #6]
 8014176:	4419      	add	r1, r3
 8014178:	8091      	strh	r1, [r2, #4]
 801417a:	9902      	ldr	r1, [sp, #8]
 801417c:	f101 0c20 	add.w	ip, r1, #32
 8014180:	9901      	ldr	r1, [sp, #4]
 8014182:	ebac 0c01 	sub.w	ip, ip, r1
 8014186:	fb03 630c 	mla	r3, r3, ip, r6
 801418a:	80d3      	strh	r3, [r2, #6]
 801418c:	e750      	b.n	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801418e:	9d05      	ldr	r5, [sp, #20]
 8014190:	1aa2      	subs	r2, r4, r2
 8014192:	eba5 0501 	sub.w	r5, r5, r1
 8014196:	9202      	str	r2, [sp, #8]
 8014198:	9508      	str	r5, [sp, #32]
 801419a:	f140 8128 	bpl.w	80143ee <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801419e:	9a03      	ldr	r2, [sp, #12]
 80141a0:	2a00      	cmp	r2, #0
 80141a2:	f6ff af45 	blt.w	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80141a6:	9a02      	ldr	r2, [sp, #8]
 80141a8:	f04f 34ff 	mov.w	r4, #4294967295
 80141ac:	4252      	negs	r2, r2
 80141ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80141b0:	2400      	movs	r4, #0
 80141b2:	9202      	str	r2, [sp, #8]
 80141b4:	9a06      	ldr	r2, [sp, #24]
 80141b6:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80141ba:	9206      	str	r2, [sp, #24]
 80141bc:	462a      	mov	r2, r5
 80141be:	435a      	muls	r2, r3
 80141c0:	9401      	str	r4, [sp, #4]
 80141c2:	9c02      	ldr	r4, [sp, #8]
 80141c4:	9d02      	ldr	r5, [sp, #8]
 80141c6:	fb92 f4f4 	sdiv	r4, r2, r4
 80141ca:	fb05 2214 	mls	r2, r5, r4, r2
 80141ce:	2a00      	cmp	r2, #0
 80141d0:	9207      	str	r2, [sp, #28]
 80141d2:	bfbc      	itt	lt
 80141d4:	1952      	addlt	r2, r2, r5
 80141d6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80141da:	6905      	ldr	r5, [r0, #16]
 80141dc:	bfb8      	it	lt
 80141de:	9207      	strlt	r2, [sp, #28]
 80141e0:	eb04 0901 	add.w	r9, r4, r1
 80141e4:	9a01      	ldr	r2, [sp, #4]
 80141e6:	ea4f 1669 	mov.w	r6, r9, asr #5
 80141ea:	429a      	cmp	r2, r3
 80141ec:	f040 8111 	bne.w	8014412 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80141f0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80141f4:	429e      	cmp	r6, r3
 80141f6:	d104      	bne.n	8014202 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80141f8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80141fc:	9a03      	ldr	r2, [sp, #12]
 80141fe:	429a      	cmp	r2, r3
 8014200:	d01b      	beq.n	801423a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014202:	88ea      	ldrh	r2, [r5, #6]
 8014204:	88ab      	ldrh	r3, [r5, #4]
 8014206:	4313      	orrs	r3, r2
 8014208:	d010      	beq.n	801422c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801420a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801420e:	2a00      	cmp	r2, #0
 8014210:	db0c      	blt.n	801422c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014212:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014214:	429a      	cmp	r2, r3
 8014216:	da09      	bge.n	801422c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014218:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801421c:	429a      	cmp	r2, r3
 801421e:	f102 0201 	add.w	r2, r2, #1
 8014222:	bf38      	it	cc
 8014224:	3508      	addcc	r5, #8
 8014226:	6082      	str	r2, [r0, #8]
 8014228:	bf38      	it	cc
 801422a:	6105      	strcc	r5, [r0, #16]
 801422c:	6903      	ldr	r3, [r0, #16]
 801422e:	9a03      	ldr	r2, [sp, #12]
 8014230:	801e      	strh	r6, [r3, #0]
 8014232:	805a      	strh	r2, [r3, #2]
 8014234:	2200      	movs	r2, #0
 8014236:	809a      	strh	r2, [r3, #4]
 8014238:	80da      	strh	r2, [r3, #6]
 801423a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801423c:	9a03      	ldr	r2, [sp, #12]
 801423e:	6901      	ldr	r1, [r0, #16]
 8014240:	441a      	add	r2, r3
 8014242:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014246:	42b3      	cmp	r3, r6
 8014248:	d103      	bne.n	8014252 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801424a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801424e:	429a      	cmp	r2, r3
 8014250:	d01a      	beq.n	8014288 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8014252:	88cc      	ldrh	r4, [r1, #6]
 8014254:	888b      	ldrh	r3, [r1, #4]
 8014256:	4323      	orrs	r3, r4
 8014258:	d010      	beq.n	801427c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801425a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801425e:	2c00      	cmp	r4, #0
 8014260:	db0c      	blt.n	801427c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014262:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014264:	429c      	cmp	r4, r3
 8014266:	da09      	bge.n	801427c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014268:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801426c:	429c      	cmp	r4, r3
 801426e:	f104 0401 	add.w	r4, r4, #1
 8014272:	bf38      	it	cc
 8014274:	3108      	addcc	r1, #8
 8014276:	6084      	str	r4, [r0, #8]
 8014278:	bf38      	it	cc
 801427a:	6101      	strcc	r1, [r0, #16]
 801427c:	6903      	ldr	r3, [r0, #16]
 801427e:	2100      	movs	r1, #0
 8014280:	801e      	strh	r6, [r3, #0]
 8014282:	805a      	strh	r2, [r3, #2]
 8014284:	8099      	strh	r1, [r3, #4]
 8014286:	80d9      	strh	r1, [r3, #6]
 8014288:	9b06      	ldr	r3, [sp, #24]
 801428a:	4293      	cmp	r3, r2
 801428c:	f000 8082 	beq.w	8014394 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8014290:	9b08      	ldr	r3, [sp, #32]
 8014292:	9902      	ldr	r1, [sp, #8]
 8014294:	015b      	lsls	r3, r3, #5
 8014296:	9c02      	ldr	r4, [sp, #8]
 8014298:	fb93 f1f1 	sdiv	r1, r3, r1
 801429c:	fb04 3311 	mls	r3, r4, r1, r3
 80142a0:	9103      	str	r1, [sp, #12]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	9308      	str	r3, [sp, #32]
 80142a6:	da04      	bge.n	80142b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80142a8:	1e4b      	subs	r3, r1, #1
 80142aa:	9303      	str	r3, [sp, #12]
 80142ac:	9b08      	ldr	r3, [sp, #32]
 80142ae:	4423      	add	r3, r4
 80142b0:	9308      	str	r3, [sp, #32]
 80142b2:	9b07      	ldr	r3, [sp, #28]
 80142b4:	464f      	mov	r7, r9
 80142b6:	9902      	ldr	r1, [sp, #8]
 80142b8:	2600      	movs	r6, #0
 80142ba:	1a5b      	subs	r3, r3, r1
 80142bc:	9307      	str	r3, [sp, #28]
 80142be:	9b01      	ldr	r3, [sp, #4]
 80142c0:	f1c3 0320 	rsb	r3, r3, #32
 80142c4:	930e      	str	r3, [sp, #56]	; 0x38
 80142c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80142c8:	9b01      	ldr	r3, [sp, #4]
 80142ca:	1a5b      	subs	r3, r3, r1
 80142cc:	930a      	str	r3, [sp, #40]	; 0x28
 80142ce:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80142d2:	185b      	adds	r3, r3, r1
 80142d4:	bf58      	it	pl
 80142d6:	9902      	ldrpl	r1, [sp, #8]
 80142d8:	9307      	str	r3, [sp, #28]
 80142da:	bf57      	itett	pl
 80142dc:	1a5b      	subpl	r3, r3, r1
 80142de:	9903      	ldrmi	r1, [sp, #12]
 80142e0:	9307      	strpl	r3, [sp, #28]
 80142e2:	9b03      	ldrpl	r3, [sp, #12]
 80142e4:	bf58      	it	pl
 80142e6:	1c59      	addpl	r1, r3, #1
 80142e8:	2a00      	cmp	r2, #0
 80142ea:	4489      	add	r9, r1
 80142ec:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80142f0:	db2e      	blt.n	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80142f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80142f4:	4293      	cmp	r3, r2
 80142f6:	dd2b      	ble.n	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80142f8:	9c01      	ldr	r4, [sp, #4]
 80142fa:	6905      	ldr	r5, [r0, #16]
 80142fc:	46a0      	mov	r8, r4
 80142fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014300:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8014304:	45a0      	cmp	r8, r4
 8014306:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801430a:	f040 814c 	bne.w	80145a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801430e:	f9b5 1000 	ldrsh.w	r1, [r5]
 8014312:	4551      	cmp	r1, sl
 8014314:	d103      	bne.n	801431e <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8014316:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801431a:	4291      	cmp	r1, r2
 801431c:	d018      	beq.n	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801431e:	ea5c 010e 	orrs.w	r1, ip, lr
 8014322:	d00f      	beq.n	8014344 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014324:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014328:	2900      	cmp	r1, #0
 801432a:	db0b      	blt.n	8014344 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801432c:	428b      	cmp	r3, r1
 801432e:	dd09      	ble.n	8014344 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014330:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014334:	4299      	cmp	r1, r3
 8014336:	f101 0101 	add.w	r1, r1, #1
 801433a:	bf38      	it	cc
 801433c:	3508      	addcc	r5, #8
 801433e:	6081      	str	r1, [r0, #8]
 8014340:	bf38      	it	cc
 8014342:	6105      	strcc	r5, [r0, #16]
 8014344:	6903      	ldr	r3, [r0, #16]
 8014346:	f8a3 a000 	strh.w	sl, [r3]
 801434a:	805a      	strh	r2, [r3, #2]
 801434c:	809e      	strh	r6, [r3, #4]
 801434e:	80de      	strh	r6, [r3, #6]
 8014350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014352:	6901      	ldr	r1, [r0, #16]
 8014354:	441a      	add	r2, r3
 8014356:	88cc      	ldrh	r4, [r1, #6]
 8014358:	888b      	ldrh	r3, [r1, #4]
 801435a:	4323      	orrs	r3, r4
 801435c:	d010      	beq.n	8014380 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801435e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014362:	2c00      	cmp	r4, #0
 8014364:	db0c      	blt.n	8014380 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014366:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014368:	429c      	cmp	r4, r3
 801436a:	da09      	bge.n	8014380 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801436c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014370:	429c      	cmp	r4, r3
 8014372:	f104 0401 	add.w	r4, r4, #1
 8014376:	bf38      	it	cc
 8014378:	3108      	addcc	r1, #8
 801437a:	6084      	str	r4, [r0, #8]
 801437c:	bf38      	it	cc
 801437e:	6101      	strcc	r1, [r0, #16]
 8014380:	6903      	ldr	r3, [r0, #16]
 8014382:	464f      	mov	r7, r9
 8014384:	f8a3 a000 	strh.w	sl, [r3]
 8014388:	805a      	strh	r2, [r3, #2]
 801438a:	809e      	strh	r6, [r3, #4]
 801438c:	80de      	strh	r6, [r3, #6]
 801438e:	9b06      	ldr	r3, [sp, #24]
 8014390:	4293      	cmp	r3, r2
 8014392:	d19c      	bne.n	80142ce <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8014394:	9b01      	ldr	r3, [sp, #4]
 8014396:	6907      	ldr	r7, [r0, #16]
 8014398:	f1c3 0620 	rsb	r6, r3, #32
 801439c:	9b05      	ldr	r3, [sp, #20]
 801439e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80143a2:	9b04      	ldr	r3, [sp, #16]
 80143a4:	429e      	cmp	r6, r3
 80143a6:	f040 81c7 	bne.w	8014738 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80143aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80143ae:	459e      	cmp	lr, r3
 80143b0:	d104      	bne.n	80143bc <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80143b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	f43f ae3a 	beq.w	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80143bc:	88f9      	ldrh	r1, [r7, #6]
 80143be:	88bb      	ldrh	r3, [r7, #4]
 80143c0:	430b      	orrs	r3, r1
 80143c2:	d010      	beq.n	80143e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	db0c      	blt.n	80143e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80143ce:	428b      	cmp	r3, r1
 80143d0:	da09      	bge.n	80143e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80143d2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80143d6:	428b      	cmp	r3, r1
 80143d8:	f103 0301 	add.w	r3, r3, #1
 80143dc:	bf38      	it	cc
 80143de:	3708      	addcc	r7, #8
 80143e0:	6083      	str	r3, [r0, #8]
 80143e2:	bf38      	it	cc
 80143e4:	6107      	strcc	r7, [r0, #16]
 80143e6:	6903      	ldr	r3, [r0, #16]
 80143e8:	f8a3 e000 	strh.w	lr, [r3]
 80143ec:	e603      	b.n	8013ff6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80143ee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80143f0:	9c03      	ldr	r4, [sp, #12]
 80143f2:	42a2      	cmp	r2, r4
 80143f4:	f6ff ae1c 	blt.w	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80143f8:	9c06      	ldr	r4, [sp, #24]
 80143fa:	42a2      	cmp	r2, r4
 80143fc:	9c08      	ldr	r4, [sp, #32]
 80143fe:	bfbc      	itt	lt
 8014400:	3201      	addlt	r2, #1
 8014402:	9206      	strlt	r2, [sp, #24]
 8014404:	f1c3 0220 	rsb	r2, r3, #32
 8014408:	4362      	muls	r2, r4
 801440a:	2401      	movs	r4, #1
 801440c:	940b      	str	r4, [sp, #44]	; 0x2c
 801440e:	2420      	movs	r4, #32
 8014410:	e6d6      	b.n	80141c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014412:	ea4f 1861 	mov.w	r8, r1, asr #5
 8014416:	f009 021f 	and.w	r2, r9, #31
 801441a:	f001 011f 	and.w	r1, r1, #31
 801441e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014422:	920c      	str	r2, [sp, #48]	; 0x30
 8014424:	45b0      	cmp	r8, r6
 8014426:	9a01      	ldr	r2, [sp, #4]
 8014428:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801442c:	eba2 0203 	sub.w	r2, r2, r3
 8014430:	d108      	bne.n	8014444 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014434:	4496      	add	lr, r2
 8014436:	4419      	add	r1, r3
 8014438:	f8a5 e004 	strh.w	lr, [r5, #4]
 801443c:	fb02 a101 	mla	r1, r2, r1, sl
 8014440:	80e9      	strh	r1, [r5, #6]
 8014442:	e6fa      	b.n	801423a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014444:	2c00      	cmp	r4, #0
 8014446:	f2c0 80a7 	blt.w	8014598 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 801444a:	2701      	movs	r7, #1
 801444c:	f1c1 0c20 	rsb	ip, r1, #32
 8014450:	970a      	str	r7, [sp, #40]	; 0x28
 8014452:	2720      	movs	r7, #32
 8014454:	fb02 f20c 	mul.w	r2, r2, ip
 8014458:	9709      	str	r7, [sp, #36]	; 0x24
 801445a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801445c:	fb92 fcf4 	sdiv	ip, r2, r4
 8014460:	fb04 221c 	mls	r2, r4, ip, r2
 8014464:	4439      	add	r1, r7
 8014466:	2a00      	cmp	r2, #0
 8014468:	bfbc      	itt	lt
 801446a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801446e:	1912      	addlt	r2, r2, r4
 8014470:	fb0c a101 	mla	r1, ip, r1, sl
 8014474:	44e6      	add	lr, ip
 8014476:	80e9      	strh	r1, [r5, #6]
 8014478:	990a      	ldr	r1, [sp, #40]	; 0x28
 801447a:	f8a5 e004 	strh.w	lr, [r5, #4]
 801447e:	eb08 0501 	add.w	r5, r8, r1
 8014482:	6901      	ldr	r1, [r0, #16]
 8014484:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014488:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801448c:	ea58 070e 	orrs.w	r7, r8, lr
 8014490:	d010      	beq.n	80144b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014492:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014496:	f1be 0f00 	cmp.w	lr, #0
 801449a:	db0b      	blt.n	80144b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801449c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801449e:	45be      	cmp	lr, r7
 80144a0:	da08      	bge.n	80144b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80144a2:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80144a6:	45be      	cmp	lr, r7
 80144a8:	bf3c      	itt	cc
 80144aa:	3108      	addcc	r1, #8
 80144ac:	6101      	strcc	r1, [r0, #16]
 80144ae:	f10e 0101 	add.w	r1, lr, #1
 80144b2:	6081      	str	r1, [r0, #8]
 80144b4:	6901      	ldr	r1, [r0, #16]
 80144b6:	f04f 0e00 	mov.w	lr, #0
 80144ba:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80144be:	42ae      	cmp	r6, r5
 80144c0:	800d      	strh	r5, [r1, #0]
 80144c2:	4463      	add	r3, ip
 80144c4:	f8a1 8002 	strh.w	r8, [r1, #2]
 80144c8:	f8a1 e004 	strh.w	lr, [r1, #4]
 80144cc:	f8a1 e006 	strh.w	lr, [r1, #6]
 80144d0:	d053      	beq.n	801457a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80144d2:	9901      	ldr	r1, [sp, #4]
 80144d4:	1b12      	subs	r2, r2, r4
 80144d6:	1ac9      	subs	r1, r1, r3
 80144d8:	4461      	add	r1, ip
 80144da:	0149      	lsls	r1, r1, #5
 80144dc:	fb91 fef4 	sdiv	lr, r1, r4
 80144e0:	fb04 111e 	mls	r1, r4, lr, r1
 80144e4:	2900      	cmp	r1, #0
 80144e6:	bfbc      	itt	lt
 80144e8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80144ec:	1909      	addlt	r1, r1, r4
 80144ee:	f10e 0701 	add.w	r7, lr, #1
 80144f2:	970d      	str	r7, [sp, #52]	; 0x34
 80144f4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80144f8:	1852      	adds	r2, r2, r1
 80144fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80144fc:	bf54      	ite	pl
 80144fe:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8014502:	46f4      	movmi	ip, lr
 8014504:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014508:	bf58      	it	pl
 801450a:	1b12      	subpl	r2, r2, r4
 801450c:	4463      	add	r3, ip
 801450e:	443d      	add	r5, r7
 8014510:	44e3      	add	fp, ip
 8014512:	f8aa b004 	strh.w	fp, [sl, #4]
 8014516:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801451a:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801451e:	f8aa b006 	strh.w	fp, [sl, #6]
 8014522:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014526:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801452a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801452e:	ea5b 070a 	orrs.w	r7, fp, sl
 8014532:	d014      	beq.n	801455e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014534:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014538:	f1ba 0f00 	cmp.w	sl, #0
 801453c:	db0f      	blt.n	801455e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801453e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014540:	45ba      	cmp	sl, r7
 8014542:	da0c      	bge.n	801455e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014544:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014548:	45ba      	cmp	sl, r7
 801454a:	f10a 0a01 	add.w	sl, sl, #1
 801454e:	bf38      	it	cc
 8014550:	f10c 0c08 	addcc.w	ip, ip, #8
 8014554:	f8c0 a008 	str.w	sl, [r0, #8]
 8014558:	bf38      	it	cc
 801455a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801455e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014562:	f04f 0700 	mov.w	r7, #0
 8014566:	42ae      	cmp	r6, r5
 8014568:	f8ac 5000 	strh.w	r5, [ip]
 801456c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014570:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014574:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014578:	d1bc      	bne.n	80144f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 801457a:	6904      	ldr	r4, [r0, #16]
 801457c:	9a01      	ldr	r2, [sp, #4]
 801457e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	88a2      	ldrh	r2, [r4, #4]
 8014584:	3120      	adds	r1, #32
 8014586:	441a      	add	r2, r3
 8014588:	80a2      	strh	r2, [r4, #4]
 801458a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801458c:	1a89      	subs	r1, r1, r2
 801458e:	88e2      	ldrh	r2, [r4, #6]
 8014590:	fb03 2301 	mla	r3, r3, r1, r2
 8014594:	80e3      	strh	r3, [r4, #6]
 8014596:	e650      	b.n	801423a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014598:	f04f 37ff 	mov.w	r7, #4294967295
 801459c:	434a      	muls	r2, r1
 801459e:	4264      	negs	r4, r4
 80145a0:	970a      	str	r7, [sp, #40]	; 0x28
 80145a2:	2700      	movs	r7, #0
 80145a4:	e758      	b.n	8014458 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80145a6:	ea4f 1867 	mov.w	r8, r7, asr #5
 80145aa:	f009 031f 	and.w	r3, r9, #31
 80145ae:	f007 071f 	and.w	r7, r7, #31
 80145b2:	fa1f fc8c 	uxth.w	ip, ip
 80145b6:	45d0      	cmp	r8, sl
 80145b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80145ba:	fa1f fe8e 	uxth.w	lr, lr
 80145be:	d10a      	bne.n	80145d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80145c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145c2:	449c      	add	ip, r3
 80145c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145c6:	441f      	add	r7, r3
 80145c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145ca:	f8a5 c004 	strh.w	ip, [r5, #4]
 80145ce:	fb03 e707 	mla	r7, r3, r7, lr
 80145d2:	80ef      	strh	r7, [r5, #6]
 80145d4:	e6bc      	b.n	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80145d6:	2900      	cmp	r1, #0
 80145d8:	f2c0 80a6 	blt.w	8014728 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80145dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80145de:	f1c7 0320 	rsb	r3, r7, #32
 80145e2:	4363      	muls	r3, r4
 80145e4:	2401      	movs	r4, #1
 80145e6:	940d      	str	r4, [sp, #52]	; 0x34
 80145e8:	2420      	movs	r4, #32
 80145ea:	940c      	str	r4, [sp, #48]	; 0x30
 80145ec:	fb93 f4f1 	sdiv	r4, r3, r1
 80145f0:	fb01 3b14 	mls	fp, r1, r4, r3
 80145f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145f6:	f1bb 0f00 	cmp.w	fp, #0
 80145fa:	441f      	add	r7, r3
 80145fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145fe:	bfbc      	itt	lt
 8014600:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014604:	448b      	addlt	fp, r1
 8014606:	fb04 e707 	mla	r7, r4, r7, lr
 801460a:	44a4      	add	ip, r4
 801460c:	80ef      	strh	r7, [r5, #6]
 801460e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014612:	eb08 0503 	add.w	r5, r8, r3
 8014616:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801461a:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801461e:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014622:	ea5e 0307 	orrs.w	r3, lr, r7
 8014626:	d011      	beq.n	801464c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014628:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801462c:	f1be 0f00 	cmp.w	lr, #0
 8014630:	db0c      	blt.n	801464c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014632:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014634:	45be      	cmp	lr, r7
 8014636:	da09      	bge.n	801464c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014638:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801463c:	45be      	cmp	lr, r7
 801463e:	bf3c      	itt	cc
 8014640:	f10c 0708 	addcc.w	r7, ip, #8
 8014644:	6107      	strcc	r7, [r0, #16]
 8014646:	f10e 0701 	add.w	r7, lr, #1
 801464a:	6087      	str	r7, [r0, #8]
 801464c:	6907      	ldr	r7, [r0, #16]
 801464e:	b213      	sxth	r3, r2
 8014650:	4555      	cmp	r5, sl
 8014652:	9310      	str	r3, [sp, #64]	; 0x40
 8014654:	807b      	strh	r3, [r7, #2]
 8014656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014658:	803d      	strh	r5, [r7, #0]
 801465a:	80be      	strh	r6, [r7, #4]
 801465c:	eb04 0c03 	add.w	ip, r4, r3
 8014660:	80fe      	strh	r6, [r7, #6]
 8014662:	d050      	beq.n	8014706 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014664:	9b01      	ldr	r3, [sp, #4]
 8014666:	eba3 070c 	sub.w	r7, r3, ip
 801466a:	ebab 0301 	sub.w	r3, fp, r1
 801466e:	443c      	add	r4, r7
 8014670:	9309      	str	r3, [sp, #36]	; 0x24
 8014672:	0164      	lsls	r4, r4, #5
 8014674:	fb94 f8f1 	sdiv	r8, r4, r1
 8014678:	fb01 4418 	mls	r4, r1, r8, r4
 801467c:	2c00      	cmp	r4, #0
 801467e:	bfbc      	itt	lt
 8014680:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014684:	1864      	addlt	r4, r4, r1
 8014686:	f108 0701 	add.w	r7, r8, #1
 801468a:	9711      	str	r7, [sp, #68]	; 0x44
 801468c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801468e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014692:	191b      	adds	r3, r3, r4
 8014694:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014698:	bf54      	ite	pl
 801469a:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 801469c:	4647      	movmi	r7, r8
 801469e:	9309      	str	r3, [sp, #36]	; 0x24
 80146a0:	bf58      	it	pl
 80146a2:	1a5b      	subpl	r3, r3, r1
 80146a4:	44bb      	add	fp, r7
 80146a6:	44bc      	add	ip, r7
 80146a8:	bf58      	it	pl
 80146aa:	9309      	strpl	r3, [sp, #36]	; 0x24
 80146ac:	f8ae b004 	strh.w	fp, [lr, #4]
 80146b0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80146b4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80146b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80146ba:	f8ae b006 	strh.w	fp, [lr, #6]
 80146be:	443d      	add	r5, r7
 80146c0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80146c4:	f8be b006 	ldrh.w	fp, [lr, #6]
 80146c8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80146cc:	ea5b 0307 	orrs.w	r3, fp, r7
 80146d0:	d011      	beq.n	80146f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80146d2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80146d6:	f1bb 0f00 	cmp.w	fp, #0
 80146da:	db0c      	blt.n	80146f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80146dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80146de:	45bb      	cmp	fp, r7
 80146e0:	da09      	bge.n	80146f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80146e2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80146e6:	45bb      	cmp	fp, r7
 80146e8:	bf3c      	itt	cc
 80146ea:	f10e 0708 	addcc.w	r7, lr, #8
 80146ee:	6107      	strcc	r7, [r0, #16]
 80146f0:	f10b 0701 	add.w	r7, fp, #1
 80146f4:	6087      	str	r7, [r0, #8]
 80146f6:	6907      	ldr	r7, [r0, #16]
 80146f8:	4555      	cmp	r5, sl
 80146fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146fc:	803d      	strh	r5, [r7, #0]
 80146fe:	807b      	strh	r3, [r7, #2]
 8014700:	80be      	strh	r6, [r7, #4]
 8014702:	80fe      	strh	r6, [r7, #6]
 8014704:	d1c2      	bne.n	801468c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8014706:	9b01      	ldr	r3, [sp, #4]
 8014708:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801470a:	eba3 0c0c 	sub.w	ip, r3, ip
 801470e:	6903      	ldr	r3, [r0, #16]
 8014710:	3720      	adds	r7, #32
 8014712:	8899      	ldrh	r1, [r3, #4]
 8014714:	4461      	add	r1, ip
 8014716:	8099      	strh	r1, [r3, #4]
 8014718:	990c      	ldr	r1, [sp, #48]	; 0x30
 801471a:	1a7f      	subs	r7, r7, r1
 801471c:	88d9      	ldrh	r1, [r3, #6]
 801471e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014722:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014726:	e613      	b.n	8014350 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014728:	f04f 34ff 	mov.w	r4, #4294967295
 801472c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801472e:	4249      	negs	r1, r1
 8014730:	940d      	str	r4, [sp, #52]	; 0x34
 8014732:	2400      	movs	r4, #0
 8014734:	437b      	muls	r3, r7
 8014736:	e758      	b.n	80145ea <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014738:	9905      	ldr	r1, [sp, #20]
 801473a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801473e:	f009 0c1f 	and.w	ip, r9, #31
 8014742:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014746:	f001 011f 	and.w	r1, r1, #31
 801474a:	45f3      	cmp	fp, lr
 801474c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014750:	9102      	str	r1, [sp, #8]
 8014752:	9904      	ldr	r1, [sp, #16]
 8014754:	eba1 0406 	sub.w	r4, r1, r6
 8014758:	d108      	bne.n	801476c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801475a:	9b02      	ldr	r3, [sp, #8]
 801475c:	44a0      	add	r8, r4
 801475e:	449c      	add	ip, r3
 8014760:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014764:	fb04 a40c 	mla	r4, r4, ip, sl
 8014768:	80fc      	strh	r4, [r7, #6]
 801476a:	e461      	b.n	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801476c:	9905      	ldr	r1, [sp, #20]
 801476e:	ebb1 0109 	subs.w	r1, r1, r9
 8014772:	bf51      	iteee	pl
 8014774:	f1cc 0520 	rsbpl	r5, ip, #32
 8014778:	fb04 f40c 	mulmi.w	r4, r4, ip
 801477c:	4249      	negmi	r1, r1
 801477e:	2500      	movmi	r5, #0
 8014780:	bf5d      	ittte	pl
 8014782:	436c      	mulpl	r4, r5
 8014784:	2520      	movpl	r5, #32
 8014786:	f04f 0901 	movpl.w	r9, #1
 801478a:	f04f 39ff 	movmi.w	r9, #4294967295
 801478e:	9501      	str	r5, [sp, #4]
 8014790:	9b01      	ldr	r3, [sp, #4]
 8014792:	fb94 f5f1 	sdiv	r5, r4, r1
 8014796:	fb01 4415 	mls	r4, r1, r5, r4
 801479a:	449c      	add	ip, r3
 801479c:	eb0b 0309 	add.w	r3, fp, r9
 80147a0:	2c00      	cmp	r4, #0
 80147a2:	bfbc      	itt	lt
 80147a4:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80147a8:	1864      	addlt	r4, r4, r1
 80147aa:	44a8      	add	r8, r5
 80147ac:	fb05 ac0c 	mla	ip, r5, ip, sl
 80147b0:	f8a7 8004 	strh.w	r8, [r7, #4]
 80147b4:	f8a7 c006 	strh.w	ip, [r7, #6]
 80147b8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80147bc:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80147c0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80147c4:	ea58 0707 	orrs.w	r7, r8, r7
 80147c8:	d011      	beq.n	80147ee <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147ca:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80147ce:	f1b8 0f00 	cmp.w	r8, #0
 80147d2:	db0c      	blt.n	80147ee <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147d4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80147d6:	45b8      	cmp	r8, r7
 80147d8:	da09      	bge.n	80147ee <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80147da:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80147de:	45b8      	cmp	r8, r7
 80147e0:	bf3c      	itt	cc
 80147e2:	f10c 0708 	addcc.w	r7, ip, #8
 80147e6:	6107      	strcc	r7, [r0, #16]
 80147e8:	f108 0701 	add.w	r7, r8, #1
 80147ec:	6087      	str	r7, [r0, #8]
 80147ee:	6907      	ldr	r7, [r0, #16]
 80147f0:	f04f 0c00 	mov.w	ip, #0
 80147f4:	b212      	sxth	r2, r2
 80147f6:	459e      	cmp	lr, r3
 80147f8:	803b      	strh	r3, [r7, #0]
 80147fa:	442e      	add	r6, r5
 80147fc:	807a      	strh	r2, [r7, #2]
 80147fe:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014802:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014806:	d04b      	beq.n	80148a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014808:	9f04      	ldr	r7, [sp, #16]
 801480a:	1a64      	subs	r4, r4, r1
 801480c:	f04f 0a00 	mov.w	sl, #0
 8014810:	1bbf      	subs	r7, r7, r6
 8014812:	443d      	add	r5, r7
 8014814:	016d      	lsls	r5, r5, #5
 8014816:	fb95 f8f1 	sdiv	r8, r5, r1
 801481a:	fb01 5518 	mls	r5, r1, r8, r5
 801481e:	4565      	cmp	r5, ip
 8014820:	bfbc      	itt	lt
 8014822:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014826:	186d      	addlt	r5, r5, r1
 8014828:	f108 0701 	add.w	r7, r8, #1
 801482c:	9703      	str	r7, [sp, #12]
 801482e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014832:	1964      	adds	r4, r4, r5
 8014834:	444b      	add	r3, r9
 8014836:	bf54      	ite	pl
 8014838:	9f03      	ldrpl	r7, [sp, #12]
 801483a:	4647      	movmi	r7, r8
 801483c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014840:	bf58      	it	pl
 8014842:	1a64      	subpl	r4, r4, r1
 8014844:	443e      	add	r6, r7
 8014846:	44bb      	add	fp, r7
 8014848:	f8ac b004 	strh.w	fp, [ip, #4]
 801484c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014850:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014854:	f8ac b006 	strh.w	fp, [ip, #6]
 8014858:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801485c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014860:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014864:	ea5b 0707 	orrs.w	r7, fp, r7
 8014868:	d011      	beq.n	801488e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801486a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801486e:	f1bb 0f00 	cmp.w	fp, #0
 8014872:	db0c      	blt.n	801488e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014874:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014876:	45bb      	cmp	fp, r7
 8014878:	da09      	bge.n	801488e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801487a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801487e:	45bb      	cmp	fp, r7
 8014880:	bf3c      	itt	cc
 8014882:	f10c 0708 	addcc.w	r7, ip, #8
 8014886:	6107      	strcc	r7, [r0, #16]
 8014888:	f10b 0701 	add.w	r7, fp, #1
 801488c:	6087      	str	r7, [r0, #8]
 801488e:	6907      	ldr	r7, [r0, #16]
 8014890:	459e      	cmp	lr, r3
 8014892:	803b      	strh	r3, [r7, #0]
 8014894:	807a      	strh	r2, [r7, #2]
 8014896:	f8a7 a004 	strh.w	sl, [r7, #4]
 801489a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801489e:	d1c6      	bne.n	801482e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80148a0:	9b04      	ldr	r3, [sp, #16]
 80148a2:	1b9e      	subs	r6, r3, r6
 80148a4:	6903      	ldr	r3, [r0, #16]
 80148a6:	889a      	ldrh	r2, [r3, #4]
 80148a8:	4432      	add	r2, r6
 80148aa:	809a      	strh	r2, [r3, #4]
 80148ac:	9a02      	ldr	r2, [sp, #8]
 80148ae:	f102 0c20 	add.w	ip, r2, #32
 80148b2:	9a01      	ldr	r2, [sp, #4]
 80148b4:	ebac 0c02 	sub.w	ip, ip, r2
 80148b8:	88da      	ldrh	r2, [r3, #6]
 80148ba:	fb06 260c 	mla	r6, r6, ip, r2
 80148be:	80de      	strh	r6, [r3, #6]
 80148c0:	f7ff bbb6 	b.w	8014030 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080148c4 <_ZN8touchgfx7Outline6lineToEii>:
 80148c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148c6:	079b      	lsls	r3, r3, #30
 80148c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148ca:	460e      	mov	r6, r1
 80148cc:	4615      	mov	r5, r2
 80148ce:	d511      	bpl.n	80148f4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80148d0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80148d4:	ea86 0701 	eor.w	r7, r6, r1
 80148d8:	ea85 0302 	eor.w	r3, r5, r2
 80148dc:	433b      	orrs	r3, r7
 80148de:	d009      	beq.n	80148f4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80148e0:	4633      	mov	r3, r6
 80148e2:	9500      	str	r5, [sp, #0]
 80148e4:	f7ff fb4c 	bl	8013f80 <_ZN8touchgfx7Outline10renderLineEiiii>
 80148e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148ea:	f043 0301 	orr.w	r3, r3, #1
 80148ee:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80148f2:	6243      	str	r3, [r0, #36]	; 0x24
 80148f4:	b003      	add	sp, #12
 80148f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080148f8 <_ZN8touchgfx7Outline6moveToEii>:
 80148f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80148fc:	4615      	mov	r5, r2
 80148fe:	4604      	mov	r4, r0
 8014900:	460e      	mov	r6, r1
 8014902:	079a      	lsls	r2, r3, #30
 8014904:	d401      	bmi.n	801490a <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014906:	f7ff fb07 	bl	8013f18 <_ZN8touchgfx7Outline5resetEv>
 801490a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801490c:	07db      	lsls	r3, r3, #31
 801490e:	d504      	bpl.n	801491a <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014910:	4620      	mov	r0, r4
 8014912:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014916:	f7ff ffd5 	bl	80148c4 <_ZN8touchgfx7Outline6lineToEii>
 801491a:	6923      	ldr	r3, [r4, #16]
 801491c:	1170      	asrs	r0, r6, #5
 801491e:	1169      	asrs	r1, r5, #5
 8014920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014924:	4290      	cmp	r0, r2
 8014926:	d103      	bne.n	8014930 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014928:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801492c:	4291      	cmp	r1, r2
 801492e:	d01a      	beq.n	8014966 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014930:	88df      	ldrh	r7, [r3, #6]
 8014932:	889a      	ldrh	r2, [r3, #4]
 8014934:	433a      	orrs	r2, r7
 8014936:	d010      	beq.n	801495a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014938:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801493c:	2a00      	cmp	r2, #0
 801493e:	db0c      	blt.n	801495a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014940:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014942:	42ba      	cmp	r2, r7
 8014944:	da09      	bge.n	801495a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014946:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801494a:	42ba      	cmp	r2, r7
 801494c:	f102 0201 	add.w	r2, r2, #1
 8014950:	bf38      	it	cc
 8014952:	3308      	addcc	r3, #8
 8014954:	60a2      	str	r2, [r4, #8]
 8014956:	bf38      	it	cc
 8014958:	6123      	strcc	r3, [r4, #16]
 801495a:	6923      	ldr	r3, [r4, #16]
 801495c:	2200      	movs	r2, #0
 801495e:	8018      	strh	r0, [r3, #0]
 8014960:	8059      	strh	r1, [r3, #2]
 8014962:	809a      	strh	r2, [r3, #4]
 8014964:	80da      	strh	r2, [r3, #6]
 8014966:	6166      	str	r6, [r4, #20]
 8014968:	6225      	str	r5, [r4, #32]
 801496a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801496e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014970 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014974:	b0d0      	sub	sp, #320	; 0x140
 8014976:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801497a:	466c      	mov	r4, sp
 801497c:	4627      	mov	r7, r4
 801497e:	1a0d      	subs	r5, r1, r0
 8014980:	f100 0308 	add.w	r3, r0, #8
 8014984:	2d48      	cmp	r5, #72	; 0x48
 8014986:	f340 80d5 	ble.w	8014b34 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801498a:	112d      	asrs	r5, r5, #4
 801498c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014990:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014994:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014998:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801499c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80149a0:	6816      	ldr	r6, [r2, #0]
 80149a2:	6006      	str	r6, [r0, #0]
 80149a4:	6856      	ldr	r6, [r2, #4]
 80149a6:	6046      	str	r6, [r0, #4]
 80149a8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80149ac:	f8a2 8002 	strh.w	r8, [r2, #2]
 80149b0:	f8a2 e004 	strh.w	lr, [r2, #4]
 80149b4:	f8a2 c006 	strh.w	ip, [r2, #6]
 80149b8:	f1a1 0208 	sub.w	r2, r1, #8
 80149bc:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80149c0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80149c4:	4565      	cmp	r5, ip
 80149c6:	db06      	blt.n	80149d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80149c8:	d119      	bne.n	80149fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80149ca:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80149ce:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80149d2:	42ae      	cmp	r6, r5
 80149d4:	dd13      	ble.n	80149fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80149d6:	460e      	mov	r6, r1
 80149d8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80149dc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80149e0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80149e4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80149e8:	601d      	str	r5, [r3, #0]
 80149ea:	6875      	ldr	r5, [r6, #4]
 80149ec:	605d      	str	r5, [r3, #4]
 80149ee:	f821 9c08 	strh.w	r9, [r1, #-8]
 80149f2:	f821 cc06 	strh.w	ip, [r1, #-6]
 80149f6:	f821 8c04 	strh.w	r8, [r1, #-4]
 80149fa:	f821 ec02 	strh.w	lr, [r1, #-2]
 80149fe:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014a02:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014a06:	42ae      	cmp	r6, r5
 8014a08:	db06      	blt.n	8014a18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014a0a:	d116      	bne.n	8014a3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a0c:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014a10:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014a14:	45ac      	cmp	ip, r5
 8014a16:	da10      	bge.n	8014a3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014a18:	681d      	ldr	r5, [r3, #0]
 8014a1a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014a1e:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014a22:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014a26:	6005      	str	r5, [r0, #0]
 8014a28:	685d      	ldr	r5, [r3, #4]
 8014a2a:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014a2e:	6045      	str	r5, [r0, #4]
 8014a30:	8146      	strh	r6, [r0, #10]
 8014a32:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014a36:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014a3a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014a3e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014a42:	4565      	cmp	r5, ip
 8014a44:	db06      	blt.n	8014a54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014a46:	d119      	bne.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a48:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014a4c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014a50:	42ae      	cmp	r6, r5
 8014a52:	da13      	bge.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a54:	460e      	mov	r6, r1
 8014a56:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014a5a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014a5e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014a62:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014a66:	6005      	str	r5, [r0, #0]
 8014a68:	6875      	ldr	r5, [r6, #4]
 8014a6a:	6045      	str	r5, [r0, #4]
 8014a6c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014a70:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014a74:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014a78:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014a7c:	3308      	adds	r3, #8
 8014a7e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014a82:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014a86:	45e6      	cmp	lr, ip
 8014a88:	dbf8      	blt.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a8a:	d105      	bne.n	8014a98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014a8c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014a90:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014a94:	42ae      	cmp	r6, r5
 8014a96:	dbf1      	blt.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014a98:	4615      	mov	r5, r2
 8014a9a:	3a08      	subs	r2, #8
 8014a9c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014aa0:	45b4      	cmp	ip, r6
 8014aa2:	dbf9      	blt.n	8014a98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014aa4:	d105      	bne.n	8014ab2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014aa6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014aaa:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014aae:	45b0      	cmp	r8, r6
 8014ab0:	dbf2      	blt.n	8014a98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	f1a5 0608 	sub.w	r6, r5, #8
 8014ab8:	d816      	bhi.n	8014ae8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014aba:	f8d6 c000 	ldr.w	ip, [r6]
 8014abe:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014ac2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014ac6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014aca:	f8c3 c000 	str.w	ip, [r3]
 8014ace:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014ad2:	f8c3 c004 	str.w	ip, [r3, #4]
 8014ad6:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014ada:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014ade:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014ae2:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014ae6:	e7c9      	b.n	8014a7c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014ae8:	f8d6 e000 	ldr.w	lr, [r6]
 8014aec:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014af0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8014af4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014af8:	f8c0 e000 	str.w	lr, [r0]
 8014afc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014b00:	1a16      	subs	r6, r2, r0
 8014b02:	f8c0 e004 	str.w	lr, [r0, #4]
 8014b06:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014b0a:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014b0e:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014b12:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014b16:	1acd      	subs	r5, r1, r3
 8014b18:	10ed      	asrs	r5, r5, #3
 8014b1a:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014b1e:	bfb5      	itete	lt
 8014b20:	e9c4 0200 	strdlt	r0, r2, [r4]
 8014b24:	e9c4 3100 	strdge	r3, r1, [r4]
 8014b28:	460a      	movlt	r2, r1
 8014b2a:	4603      	movge	r3, r0
 8014b2c:	3408      	adds	r4, #8
 8014b2e:	4618      	mov	r0, r3
 8014b30:	4611      	mov	r1, r2
 8014b32:	e724      	b.n	801497e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014b34:	4299      	cmp	r1, r3
 8014b36:	d927      	bls.n	8014b88 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014b38:	f1a3 0210 	sub.w	r2, r3, #16
 8014b3c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014b40:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014b44:	45ac      	cmp	ip, r5
 8014b46:	db06      	blt.n	8014b56 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014b48:	d11c      	bne.n	8014b84 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014b4a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014b4e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014b52:	42ae      	cmp	r6, r5
 8014b54:	da16      	bge.n	8014b84 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014b56:	4615      	mov	r5, r2
 8014b58:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014b5c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014b60:	3a08      	subs	r2, #8
 8014b62:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8014b66:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014b6a:	6196      	str	r6, [r2, #24]
 8014b6c:	42a8      	cmp	r0, r5
 8014b6e:	686e      	ldr	r6, [r5, #4]
 8014b70:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014b74:	61d6      	str	r6, [r2, #28]
 8014b76:	f8a2 c012 	strh.w	ip, [r2, #18]
 8014b7a:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014b7e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014b82:	d1db      	bne.n	8014b3c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014b84:	3308      	adds	r3, #8
 8014b86:	e7d5      	b.n	8014b34 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014b88:	42bc      	cmp	r4, r7
 8014b8a:	d903      	bls.n	8014b94 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014b8c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014b90:	3c08      	subs	r4, #8
 8014b92:	e6f4      	b.n	801497e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014b94:	b050      	add	sp, #320	; 0x140
 8014b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014b9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014b9a:	b510      	push	{r4, lr}
 8014b9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014b9e:	4604      	mov	r4, r0
 8014ba0:	07da      	lsls	r2, r3, #31
 8014ba2:	d507      	bpl.n	8014bb4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014ba4:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014ba8:	f7ff fe8c 	bl	80148c4 <_ZN8touchgfx7Outline6lineToEii>
 8014bac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014bae:	f023 0301 	bic.w	r3, r3, #1
 8014bb2:	6243      	str	r3, [r0, #36]	; 0x24
 8014bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bb6:	079b      	lsls	r3, r3, #30
 8014bb8:	d521      	bpl.n	8014bfe <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	88d9      	ldrh	r1, [r3, #6]
 8014bbe:	889a      	ldrh	r2, [r3, #4]
 8014bc0:	430a      	orrs	r2, r1
 8014bc2:	d010      	beq.n	8014be6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014bc4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014bc8:	2a00      	cmp	r2, #0
 8014bca:	db0c      	blt.n	8014be6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014bcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014bce:	428a      	cmp	r2, r1
 8014bd0:	da09      	bge.n	8014be6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014bd2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014bd6:	4291      	cmp	r1, r2
 8014bd8:	f102 0201 	add.w	r2, r2, #1
 8014bdc:	bf88      	it	hi
 8014bde:	3308      	addhi	r3, #8
 8014be0:	60a2      	str	r2, [r4, #8]
 8014be2:	bf88      	it	hi
 8014be4:	6123      	strhi	r3, [r4, #16]
 8014be6:	68a1      	ldr	r1, [r4, #8]
 8014be8:	b129      	cbz	r1, 8014bf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014bea:	6863      	ldr	r3, [r4, #4]
 8014bec:	4299      	cmp	r1, r3
 8014bee:	d802      	bhi.n	8014bf6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014bf0:	68e0      	ldr	r0, [r4, #12]
 8014bf2:	f7ff febd 	bl	8014970 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bf8:	f023 0302 	bic.w	r3, r3, #2
 8014bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8014bfe:	68e0      	ldr	r0, [r4, #12]
 8014c00:	bd10      	pop	{r4, pc}
	...

08014c04 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8014c04:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8014c06:	6018      	str	r0, [r3, #0]
 8014c08:	4b02      	ldr	r3, [pc, #8]	; (8014c14 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014c0a:	6019      	str	r1, [r3, #0]
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	2400f248 	.word	0x2400f248
 8014c14:	2400f24c 	.word	0x2400f24c

08014c18 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014c18:	2300      	movs	r3, #0
 8014c1a:	4a02      	ldr	r2, [pc, #8]	; (8014c24 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014c1c:	6013      	str	r3, [r2, #0]
 8014c1e:	4a02      	ldr	r2, [pc, #8]	; (8014c28 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014c20:	6013      	str	r3, [r2, #0]
 8014c22:	4770      	bx	lr
 8014c24:	2400f248 	.word	0x2400f248
 8014c28:	2400f24c 	.word	0x2400f24c

08014c2c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014c2c:	4b01      	ldr	r3, [pc, #4]	; (8014c34 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014c2e:	6818      	ldr	r0, [r3, #0]
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop
 8014c34:	2400f248 	.word	0x2400f248

08014c38 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014c38:	4b01      	ldr	r3, [pc, #4]	; (8014c40 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014c3a:	6818      	ldr	r0, [r3, #0]
 8014c3c:	4770      	bx	lr
 8014c3e:	bf00      	nop
 8014c40:	2400f24c 	.word	0x2400f24c

08014c44 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014c44:	b510      	push	{r4, lr}
 8014c46:	6803      	ldr	r3, [r0, #0]
 8014c48:	460c      	mov	r4, r1
 8014c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c4c:	4798      	blx	r3
 8014c4e:	1b03      	subs	r3, r0, r4
 8014c50:	4258      	negs	r0, r3
 8014c52:	4158      	adcs	r0, r3
 8014c54:	bd10      	pop	{r4, pc}
	...

08014c58 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014c58:	4b01      	ldr	r3, [pc, #4]	; (8014c60 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014c5a:	6019      	str	r1, [r3, #0]
 8014c5c:	4770      	bx	lr
 8014c5e:	bf00      	nop
 8014c60:	2400f250 	.word	0x2400f250

08014c64 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c68:	4696      	mov	lr, r2
 8014c6a:	b097      	sub	sp, #92	; 0x5c
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	4614      	mov	r4, r2
 8014c70:	460e      	mov	r6, r1
 8014c72:	461f      	mov	r7, r3
 8014c74:	f10d 0c1c 	add.w	ip, sp, #28
 8014c78:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8014c7c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014c80:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014c84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c8c:	f8de 3000 	ldr.w	r3, [lr]
 8014c90:	f104 0e14 	add.w	lr, r4, #20
 8014c94:	f8cc 3000 	str.w	r3, [ip]
 8014c98:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014c9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ca4:	f8de 3000 	ldr.w	r3, [lr]
 8014ca8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014cac:	f8cc 3000 	str.w	r3, [ip]
 8014cb0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014cb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cbc:	f8de 3000 	ldr.w	r3, [lr]
 8014cc0:	4631      	mov	r1, r6
 8014cc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f8cc 3000 	str.w	r3, [ip]
 8014cca:	682b      	ldr	r3, [r5, #0]
 8014ccc:	9201      	str	r2, [sp, #4]
 8014cce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014cd0:	f8cd 8008 	str.w	r8, [sp, #8]
 8014cd4:	9200      	str	r2, [sp, #0]
 8014cd6:	aa07      	add	r2, sp, #28
 8014cd8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014cdc:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014ce0:	463b      	mov	r3, r7
 8014ce2:	47d8      	blx	fp
 8014ce4:	46a6      	mov	lr, r4
 8014ce6:	f10d 0c1c 	add.w	ip, sp, #28
 8014cea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014cee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014cf2:	f8de 3000 	ldr.w	r3, [lr]
 8014cf6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014cfa:	343c      	adds	r4, #60	; 0x3c
 8014cfc:	f8cc 3000 	str.w	r3, [ip]
 8014d00:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014d04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d0c:	f8de 3000 	ldr.w	r3, [lr]
 8014d10:	f8cc 3000 	str.w	r3, [ip]
 8014d14:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d1e:	6823      	ldr	r3, [r4, #0]
 8014d20:	4631      	mov	r1, r6
 8014d22:	4628      	mov	r0, r5
 8014d24:	f8cc 3000 	str.w	r3, [ip]
 8014d28:	682b      	ldr	r3, [r5, #0]
 8014d2a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014d2e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d30:	f8cd 8008 	str.w	r8, [sp, #8]
 8014d34:	9201      	str	r2, [sp, #4]
 8014d36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014d38:	9200      	str	r2, [sp, #0]
 8014d3a:	aa07      	add	r2, sp, #28
 8014d3c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8014d3e:	463b      	mov	r3, r7
 8014d40:	47a0      	blx	r4
 8014d42:	b017      	add	sp, #92	; 0x5c
 8014d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014d48 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	b08d      	sub	sp, #52	; 0x34
 8014d4e:	4688      	mov	r8, r1
 8014d50:	f8d3 c000 	ldr.w	ip, [r3]
 8014d54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014d56:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014d5a:	680f      	ldr	r7, [r1, #0]
 8014d5c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014d60:	eba7 070c 	sub.w	r7, r7, ip
 8014d64:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014d68:	edd3 6a07 	vldr	s13, [r3, #28]
 8014d6c:	42bc      	cmp	r4, r7
 8014d6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014d70:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014d74:	bfa8      	it	ge
 8014d76:	463c      	movge	r4, r7
 8014d78:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014d7c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014d80:	ee07 4a90 	vmov	s15, r4
 8014d84:	eb09 0e0c 	add.w	lr, r9, ip
 8014d88:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014d8c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014d90:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014d94:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014d98:	4571      	cmp	r1, lr
 8014d9a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014d9e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014da2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014da6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014daa:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014dae:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014db2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014db6:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014dba:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014dbe:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014dc2:	f340 808c 	ble.w	8014ede <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014dc6:	eba1 060e 	sub.w	r6, r1, lr
 8014dca:	fb96 f5f4 	sdiv	r5, r6, r4
 8014dce:	ee07 5a10 	vmov	s14, r5
 8014dd2:	2d00      	cmp	r5, #0
 8014dd4:	fb04 6615 	mls	r6, r4, r5, r6
 8014dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ddc:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014de0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014de4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014de8:	dd12      	ble.n	8014e10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014dea:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014dee:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014df2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014df6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dfe:	bf14      	ite	ne
 8014e00:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014e04:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014e08:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014e0c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014e10:	fb05 f204 	mul.w	r2, r5, r4
 8014e14:	1abf      	subs	r7, r7, r2
 8014e16:	4494      	add	ip, r2
 8014e18:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014e1c:	4411      	add	r1, r2
 8014e1e:	eb09 020c 	add.w	r2, r9, ip
 8014e22:	b209      	sxth	r1, r1
 8014e24:	443a      	add	r2, r7
 8014e26:	428a      	cmp	r2, r1
 8014e28:	bfc4      	itt	gt
 8014e2a:	eba1 0209 	subgt.w	r2, r1, r9
 8014e2e:	eba2 070c 	subgt.w	r7, r2, ip
 8014e32:	2f00      	cmp	r7, #0
 8014e34:	dd50      	ble.n	8014ed8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014e36:	fb97 f1f4 	sdiv	r1, r7, r4
 8014e3a:	fb04 7211 	mls	r2, r4, r1, r7
 8014e3e:	b90a      	cbnz	r2, 8014e44 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014e40:	3901      	subs	r1, #1
 8014e42:	4622      	mov	r2, r4
 8014e44:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014e48:	6840      	ldr	r0, [r0, #4]
 8014e4a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8014e4e:	44b6      	add	lr, r6
 8014e50:	f8d0 a000 	ldr.w	sl, [r0]
 8014e54:	2900      	cmp	r1, #0
 8014e56:	bfcc      	ite	gt
 8014e58:	46a1      	movgt	r9, r4
 8014e5a:	4691      	movle	r9, r2
 8014e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014e5e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014e60:	fb04 e505 	mla	r5, r4, r5, lr
 8014e64:	eef0 6a42 	vmov.f32	s13, s4
 8014e68:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8014e6c:	9008      	str	r0, [sp, #32]
 8014e6e:	eeb0 7a61 	vmov.f32	s14, s3
 8014e72:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014e74:	695b      	ldr	r3, [r3, #20]
 8014e76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014e7a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8014e7e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014e82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014e84:	445b      	add	r3, fp
 8014e86:	9307      	str	r3, [sp, #28]
 8014e88:	ee16 3a90 	vmov	r3, s13
 8014e8c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014e90:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014e94:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014e98:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8014e9c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014ea0:	ee17 7a90 	vmov	r7, s15
 8014ea4:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014ea8:	fb97 f7f4 	sdiv	r7, r7, r4
 8014eac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014eb0:	ee17 ca90 	vmov	ip, s15
 8014eb4:	fb9c fcf4 	sdiv	ip, ip, r4
 8014eb8:	fb0c 3306 	mla	r3, ip, r6, r3
 8014ebc:	9302      	str	r3, [sp, #8]
 8014ebe:	ee17 3a10 	vmov	r3, s14
 8014ec2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8014ec6:	fb07 3706 	mla	r7, r7, r6, r3
 8014eca:	eba9 0306 	sub.w	r3, r9, r6
 8014ece:	e9cd 4700 	strd	r4, r7, [sp]
 8014ed2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8014ed6:	47a0      	blx	r4
 8014ed8:	b00d      	add	sp, #52	; 0x34
 8014eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ede:	2500      	movs	r5, #0
 8014ee0:	462e      	mov	r6, r5
 8014ee2:	e799      	b.n	8014e18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08014ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee8:	b0db      	sub	sp, #364	; 0x16c
 8014eea:	461d      	mov	r5, r3
 8014eec:	4614      	mov	r4, r2
 8014eee:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8014ef2:	910f      	str	r1, [sp, #60]	; 0x3c
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8014ef8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8014efc:	9009      	str	r0, [sp, #36]	; 0x24
 8014efe:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f00:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8014f04:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8014f08:	9310      	str	r3, [sp, #64]	; 0x40
 8014f0a:	6803      	ldr	r3, [r0, #0]
 8014f0c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8014f0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014f12:	47b8      	blx	r7
 8014f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f16:	6058      	str	r0, [r3, #4]
 8014f18:	2800      	cmp	r0, #0
 8014f1a:	f000 83a1 	beq.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f1e:	682b      	ldr	r3, [r5, #0]
 8014f20:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014f24:	ed94 7a02 	vldr	s14, [r4, #8]
 8014f28:	9314      	str	r3, [sp, #80]	; 0x50
 8014f2a:	686b      	ldr	r3, [r5, #4]
 8014f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f30:	9315      	str	r3, [sp, #84]	; 0x54
 8014f32:	4bc1      	ldr	r3, [pc, #772]	; (8015238 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014f34:	7819      	ldrb	r1, [r3, #0]
 8014f36:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8014f3a:	2900      	cmp	r1, #0
 8014f3c:	bf16      	itet	ne
 8014f3e:	4619      	movne	r1, r3
 8014f40:	4611      	moveq	r1, r2
 8014f42:	4613      	movne	r3, r2
 8014f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f48:	9116      	str	r1, [sp, #88]	; 0x58
 8014f4a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8014f4e:	f240 8387 	bls.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f52:	ed94 7a07 	vldr	s14, [r4, #28]
 8014f56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f5e:	f240 837f 	bls.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f62:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6e:	f240 8377 	bls.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f72:	6822      	ldr	r2, [r4, #0]
 8014f74:	4bb1      	ldr	r3, [pc, #708]	; (801523c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014f76:	429a      	cmp	r2, r3
 8014f78:	f2c0 8372 	blt.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f7c:	49b0      	ldr	r1, [pc, #704]	; (8015240 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8014f7e:	6963      	ldr	r3, [r4, #20]
 8014f80:	428a      	cmp	r2, r1
 8014f82:	f300 836d 	bgt.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f86:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014f8a:	48ae      	ldr	r0, [pc, #696]	; (8015244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8014f8c:	33ff      	adds	r3, #255	; 0xff
 8014f8e:	4283      	cmp	r3, r0
 8014f90:	f200 8366 	bhi.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014f94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014f96:	4dac      	ldr	r5, [pc, #688]	; (8015248 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014f98:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8014f9c:	33ff      	adds	r3, #255	; 0xff
 8014f9e:	42ab      	cmp	r3, r5
 8014fa0:	f200 835e 	bhi.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fa4:	6862      	ldr	r2, [r4, #4]
 8014fa6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8014faa:	33ff      	adds	r3, #255	; 0xff
 8014fac:	4283      	cmp	r3, r0
 8014fae:	f200 8357 	bhi.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fb2:	69a1      	ldr	r1, [r4, #24]
 8014fb4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8014fb8:	33ff      	adds	r3, #255	; 0xff
 8014fba:	4283      	cmp	r3, r0
 8014fbc:	f200 8350 	bhi.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014fc2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8014fc6:	30ff      	adds	r0, #255	; 0xff
 8014fc8:	42a8      	cmp	r0, r5
 8014fca:	f200 8349 	bhi.w	8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014fce:	428a      	cmp	r2, r1
 8014fd0:	f280 8110 	bge.w	80151f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	f300 8119 	bgt.w	801520c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8014fda:	4299      	cmp	r1, r3
 8014fdc:	f280 811d 	bge.w	801521a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8014fe0:	2502      	movs	r5, #2
 8014fe2:	2701      	movs	r7, #1
 8014fe4:	46a9      	mov	r9, r5
 8014fe6:	46b8      	mov	r8, r7
 8014fe8:	f04f 0a00 	mov.w	sl, #0
 8014fec:	4621      	mov	r1, r4
 8014fee:	a849      	add	r0, sp, #292	; 0x124
 8014ff0:	f003 fd42 	bl	8018a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8014ff4:	4622      	mov	r2, r4
 8014ff6:	4653      	mov	r3, sl
 8014ff8:	a949      	add	r1, sp, #292	; 0x124
 8014ffa:	f8cd 9000 	str.w	r9, [sp]
 8014ffe:	a819      	add	r0, sp, #100	; 0x64
 8015000:	f003 fe6a 	bl	8018cd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015004:	4622      	mov	r2, r4
 8015006:	4653      	mov	r3, sl
 8015008:	a949      	add	r1, sp, #292	; 0x124
 801500a:	f8cd 8000 	str.w	r8, [sp]
 801500e:	a829      	add	r0, sp, #164	; 0xa4
 8015010:	f003 fe62 	bl	8018cd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015014:	4643      	mov	r3, r8
 8015016:	4622      	mov	r2, r4
 8015018:	a949      	add	r1, sp, #292	; 0x124
 801501a:	f8cd 9000 	str.w	r9, [sp]
 801501e:	a839      	add	r0, sp, #228	; 0xe4
 8015020:	f003 fe5a 	bl	8018cd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015024:	42af      	cmp	r7, r5
 8015026:	af12      	add	r7, sp, #72	; 0x48
 8015028:	bfb7      	itett	lt
 801502a:	2300      	movlt	r3, #0
 801502c:	2301      	movge	r3, #1
 801502e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8015030:	ac19      	addlt	r4, sp, #100	; 0x64
 8015032:	bfb1      	iteee	lt
 8015034:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015036:	ad19      	addge	r5, sp, #100	; 0x64
 8015038:	930e      	strge	r3, [sp, #56]	; 0x38
 801503a:	ac29      	addge	r4, sp, #164	; 0xa4
 801503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801503e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015042:	e887 0003 	stmia.w	r7, {r0, r1}
 8015046:	b928      	cbnz	r0, 8015054 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015048:	4b80      	ldr	r3, [pc, #512]	; (801524c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	6803      	ldr	r3, [r0, #0]
 801504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015050:	4798      	blx	r3
 8015052:	6038      	str	r0, [r7, #0]
 8015054:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015056:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801505a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801505e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8015060:	930c      	str	r3, [sp, #48]	; 0x30
 8015062:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015064:	6963      	ldr	r3, [r4, #20]
 8015066:	440b      	add	r3, r1
 8015068:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801506c:	4408      	add	r0, r1
 801506e:	b200      	sxth	r0, r0
 8015070:	4283      	cmp	r3, r0
 8015072:	900d      	str	r0, [sp, #52]	; 0x34
 8015074:	f280 80dd 	bge.w	8015232 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015078:	428b      	cmp	r3, r1
 801507a:	da08      	bge.n	801508e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801507c:	2a00      	cmp	r2, #0
 801507e:	dd06      	ble.n	801508e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015080:	1acb      	subs	r3, r1, r3
 8015082:	429a      	cmp	r2, r3
 8015084:	f2c0 80e4 	blt.w	8015250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015088:	2b00      	cmp	r3, #0
 801508a:	f300 80e2 	bgt.w	8015252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801508e:	6967      	ldr	r7, [r4, #20]
 8015090:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015096:	443b      	add	r3, r7
 8015098:	461f      	mov	r7, r3
 801509a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801509c:	1bdf      	subs	r7, r3, r7
 801509e:	4297      	cmp	r7, r2
 80150a0:	bfa8      	it	ge
 80150a2:	4617      	movge	r7, r2
 80150a4:	2f00      	cmp	r7, #0
 80150a6:	f340 8166 	ble.w	8015376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80150aa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80150ac:	6829      	ldr	r1, [r5, #0]
 80150ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80150b2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80150b6:	4411      	add	r1, r2
 80150b8:	6820      	ldr	r0, [r4, #0]
 80150ba:	4299      	cmp	r1, r3
 80150bc:	dd1a      	ble.n	80150f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80150be:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80150c2:	4402      	add	r2, r0
 80150c4:	440b      	add	r3, r1
 80150c6:	b21b      	sxth	r3, r3
 80150c8:	429a      	cmp	r2, r3
 80150ca:	dc13      	bgt.n	80150f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80150cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150ce:	a912      	add	r1, sp, #72	; 0x48
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	9206      	str	r2, [sp, #24]
 80150d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150da:	9500      	str	r5, [sp, #0]
 80150dc:	9205      	str	r2, [sp, #20]
 80150de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150e0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80150e4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80150e6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80150ea:	aa49      	add	r2, sp, #292	; 0x124
 80150ec:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80150f0:	4623      	mov	r3, r4
 80150f2:	47c8      	blx	r9
 80150f4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80150f8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80150fc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8015100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015104:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015108:	68a1      	ldr	r1, [r4, #8]
 801510a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801510e:	ed94 6a08 	vldr	s12, [r4, #32]
 8015112:	edd4 6a07 	vldr	s13, [r4, #28]
 8015116:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801511a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801511e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015122:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015126:	edc4 6a07 	vstr	s13, [r4, #28]
 801512a:	441a      	add	r2, r3
 801512c:	6963      	ldr	r3, [r4, #20]
 801512e:	3301      	adds	r3, #1
 8015130:	6022      	str	r2, [r4, #0]
 8015132:	6163      	str	r3, [r4, #20]
 8015134:	69a3      	ldr	r3, [r4, #24]
 8015136:	3b01      	subs	r3, #1
 8015138:	61a3      	str	r3, [r4, #24]
 801513a:	6923      	ldr	r3, [r4, #16]
 801513c:	440b      	add	r3, r1
 801513e:	68e1      	ldr	r1, [r4, #12]
 8015140:	428b      	cmp	r3, r1
 8015142:	6123      	str	r3, [r4, #16]
 8015144:	db15      	blt.n	8015172 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015146:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801514a:	3201      	adds	r2, #1
 801514c:	1a5b      	subs	r3, r3, r1
 801514e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015152:	6022      	str	r2, [r4, #0]
 8015154:	6123      	str	r3, [r4, #16]
 8015156:	edc4 6a07 	vstr	s13, [r4, #28]
 801515a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801515e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015162:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015166:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801516a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801516e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015172:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015176:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801517a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801517e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015182:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015186:	68a9      	ldr	r1, [r5, #8]
 8015188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801518c:	ed95 6a08 	vldr	s12, [r5, #32]
 8015190:	edd5 6a07 	vldr	s13, [r5, #28]
 8015194:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015198:	ee76 6a86 	vadd.f32	s13, s13, s12
 801519c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80151a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151a4:	edc5 6a07 	vstr	s13, [r5, #28]
 80151a8:	441a      	add	r2, r3
 80151aa:	696b      	ldr	r3, [r5, #20]
 80151ac:	3301      	adds	r3, #1
 80151ae:	602a      	str	r2, [r5, #0]
 80151b0:	616b      	str	r3, [r5, #20]
 80151b2:	69ab      	ldr	r3, [r5, #24]
 80151b4:	3b01      	subs	r3, #1
 80151b6:	61ab      	str	r3, [r5, #24]
 80151b8:	692b      	ldr	r3, [r5, #16]
 80151ba:	440b      	add	r3, r1
 80151bc:	68e9      	ldr	r1, [r5, #12]
 80151be:	428b      	cmp	r3, r1
 80151c0:	612b      	str	r3, [r5, #16]
 80151c2:	db15      	blt.n	80151f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80151c4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80151c8:	3201      	adds	r2, #1
 80151ca:	1a5b      	subs	r3, r3, r1
 80151cc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80151d0:	602a      	str	r2, [r5, #0]
 80151d2:	612b      	str	r3, [r5, #16]
 80151d4:	edc5 6a07 	vstr	s13, [r5, #28]
 80151d8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80151dc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80151e0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80151e4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80151e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151ec:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80151f0:	3f01      	subs	r7, #1
 80151f2:	e757      	b.n	80150a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80151f4:	4299      	cmp	r1, r3
 80151f6:	dc13      	bgt.n	8015220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80151f8:	429a      	cmp	r2, r3
 80151fa:	da14      	bge.n	8015226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80151fc:	2502      	movs	r5, #2
 80151fe:	2703      	movs	r7, #3
 8015200:	f04f 0800 	mov.w	r8, #0
 8015204:	46a9      	mov	r9, r5
 8015206:	f04f 0a01 	mov.w	sl, #1
 801520a:	e6ef      	b.n	8014fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801520c:	2501      	movs	r5, #1
 801520e:	2700      	movs	r7, #0
 8015210:	46a9      	mov	r9, r5
 8015212:	46b8      	mov	r8, r7
 8015214:	f04f 0a02 	mov.w	sl, #2
 8015218:	e6e8      	b.n	8014fec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801521a:	2501      	movs	r5, #1
 801521c:	2702      	movs	r7, #2
 801521e:	e6e1      	b.n	8014fe4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015220:	2500      	movs	r5, #0
 8015222:	2701      	movs	r7, #1
 8015224:	e7f4      	b.n	8015210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015226:	2702      	movs	r7, #2
 8015228:	2503      	movs	r5, #3
 801522a:	f04f 0900 	mov.w	r9, #0
 801522e:	46b8      	mov	r8, r7
 8015230:	e7e9      	b.n	8015206 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015232:	4613      	mov	r3, r2
 8015234:	e728      	b.n	8015088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015236:	bf00      	nop
 8015238:	2400f238 	.word	0x2400f238
 801523c:	fffd8f01 	.word	0xfffd8f01
 8015240:	00027100 	.word	0x00027100
 8015244:	0004e1ff 	.word	0x0004e1ff
 8015248:	0004e1fe 	.word	0x0004e1fe
 801524c:	2400f240 	.word	0x2400f240
 8015250:	4613      	mov	r3, r2
 8015252:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015254:	469e      	mov	lr, r3
 8015256:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015258:	469c      	mov	ip, r3
 801525a:	9111      	str	r1, [sp, #68]	; 0x44
 801525c:	f04f 0900 	mov.w	r9, #0
 8015260:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015264:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015268:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801526c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8015270:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015274:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015278:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801527c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8015280:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015284:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015288:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801528c:	f1bc 0f00 	cmp.w	ip, #0
 8015290:	d147      	bne.n	8015322 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8015292:	eb03 0c07 	add.w	ip, r3, r7
 8015296:	1ad7      	subs	r7, r2, r3
 8015298:	f1b9 0f00 	cmp.w	r9, #0
 801529c:	d009      	beq.n	80152b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801529e:	9029      	str	r0, [sp, #164]	; 0xa4
 80152a0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80152a4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80152a8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80152ac:	912d      	str	r1, [sp, #180]	; 0xb4
 80152ae:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80152b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80152b4:	f04f 0800 	mov.w	r8, #0
 80152b8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80152bc:	9111      	str	r1, [sp, #68]	; 0x44
 80152be:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80152c2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80152c6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80152ca:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80152ce:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80152d2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80152d6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80152da:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80152de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80152e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80152e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80152ea:	f1be 0f00 	cmp.w	lr, #0
 80152ee:	d031      	beq.n	8015354 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80152f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80152f2:	4450      	add	r0, sl
 80152f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80152f8:	4431      	add	r1, r6
 80152fa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80152fe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015302:	4549      	cmp	r1, r9
 8015304:	db08      	blt.n	8015318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015306:	ee77 7a85 	vadd.f32	s15, s15, s10
 801530a:	3001      	adds	r0, #1
 801530c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015310:	eba1 0109 	sub.w	r1, r1, r9
 8015314:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015318:	f10e 3eff 	add.w	lr, lr, #4294967295
 801531c:	f04f 0801 	mov.w	r8, #1
 8015320:	e7e3      	b.n	80152ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015322:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015324:	4450      	add	r0, sl
 8015326:	ee37 7a24 	vadd.f32	s14, s14, s9
 801532a:	4431      	add	r1, r6
 801532c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015330:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015334:	4541      	cmp	r1, r8
 8015336:	db08      	blt.n	801534a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015338:	ee76 6a85 	vadd.f32	s13, s13, s10
 801533c:	3001      	adds	r0, #1
 801533e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015342:	eba1 0108 	sub.w	r1, r1, r8
 8015346:	ee77 7a86 	vadd.f32	s15, s15, s12
 801534a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801534e:	f04f 0901 	mov.w	r9, #1
 8015352:	e79b      	b.n	801528c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015354:	449c      	add	ip, r3
 8015356:	1aff      	subs	r7, r7, r3
 8015358:	f1b8 0f00 	cmp.w	r8, #0
 801535c:	d009      	beq.n	8015372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801535e:	9019      	str	r0, [sp, #100]	; 0x64
 8015360:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015364:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015368:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801536c:	911d      	str	r1, [sp, #116]	; 0x74
 801536e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015372:	1ad2      	subs	r2, r2, r3
 8015374:	e68b      	b.n	801508e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015378:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801537a:	2b00      	cmp	r3, #0
 801537c:	f000 80d1 	beq.w	8015522 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015380:	ad19      	add	r5, sp, #100	; 0x64
 8015382:	ac39      	add	r4, sp, #228	; 0xe4
 8015384:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015386:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801538a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801538e:	930c      	str	r3, [sp, #48]	; 0x30
 8015390:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015392:	6963      	ldr	r3, [r4, #20]
 8015394:	440b      	add	r3, r1
 8015396:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801539a:	4408      	add	r0, r1
 801539c:	b200      	sxth	r0, r0
 801539e:	4283      	cmp	r3, r0
 80153a0:	900d      	str	r0, [sp, #52]	; 0x34
 80153a2:	f280 80c1 	bge.w	8015528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80153a6:	428b      	cmp	r3, r1
 80153a8:	da08      	bge.n	80153bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153aa:	2a00      	cmp	r2, #0
 80153ac:	dd06      	ble.n	80153bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80153ae:	1acb      	subs	r3, r1, r3
 80153b0:	429a      	cmp	r2, r3
 80153b2:	f2c0 80bb 	blt.w	801552c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	f300 80b9 	bgt.w	801552e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80153bc:	6967      	ldr	r7, [r4, #20]
 80153be:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80153c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153c4:	443b      	add	r3, r7
 80153c6:	461f      	mov	r7, r3
 80153c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80153ca:	1bdf      	subs	r7, r3, r7
 80153cc:	4297      	cmp	r7, r2
 80153ce:	bfa8      	it	ge
 80153d0:	4617      	movge	r7, r2
 80153d2:	2f00      	cmp	r7, #0
 80153d4:	f340 813c 	ble.w	8015650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80153d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80153da:	6829      	ldr	r1, [r5, #0]
 80153dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80153e0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80153e4:	4411      	add	r1, r2
 80153e6:	6820      	ldr	r0, [r4, #0]
 80153e8:	4299      	cmp	r1, r3
 80153ea:	dd1a      	ble.n	8015422 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80153ec:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80153f0:	4402      	add	r2, r0
 80153f2:	440b      	add	r3, r1
 80153f4:	b21b      	sxth	r3, r3
 80153f6:	429a      	cmp	r2, r3
 80153f8:	dc13      	bgt.n	8015422 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80153fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153fc:	a912      	add	r1, sp, #72	; 0x48
 80153fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	9206      	str	r2, [sp, #24]
 8015406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015408:	9500      	str	r5, [sp, #0]
 801540a:	9205      	str	r2, [sp, #20]
 801540c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801540e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015412:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8015414:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015418:	aa49      	add	r2, sp, #292	; 0x124
 801541a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801541e:	4623      	mov	r3, r4
 8015420:	47c8      	blx	r9
 8015422:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8015426:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801542a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801542e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015432:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8015436:	68a1      	ldr	r1, [r4, #8]
 8015438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801543c:	ed94 6a08 	vldr	s12, [r4, #32]
 8015440:	edd4 6a07 	vldr	s13, [r4, #28]
 8015444:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015448:	ee76 6a86 	vadd.f32	s13, s13, s12
 801544c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8015450:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015454:	edc4 6a07 	vstr	s13, [r4, #28]
 8015458:	441a      	add	r2, r3
 801545a:	6963      	ldr	r3, [r4, #20]
 801545c:	3301      	adds	r3, #1
 801545e:	6022      	str	r2, [r4, #0]
 8015460:	6163      	str	r3, [r4, #20]
 8015462:	69a3      	ldr	r3, [r4, #24]
 8015464:	3b01      	subs	r3, #1
 8015466:	61a3      	str	r3, [r4, #24]
 8015468:	6923      	ldr	r3, [r4, #16]
 801546a:	440b      	add	r3, r1
 801546c:	68e1      	ldr	r1, [r4, #12]
 801546e:	428b      	cmp	r3, r1
 8015470:	6123      	str	r3, [r4, #16]
 8015472:	db15      	blt.n	80154a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015474:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015478:	3201      	adds	r2, #1
 801547a:	1a5b      	subs	r3, r3, r1
 801547c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015480:	6022      	str	r2, [r4, #0]
 8015482:	6123      	str	r3, [r4, #16]
 8015484:	edc4 6a07 	vstr	s13, [r4, #28]
 8015488:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801548c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015490:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015494:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015498:	ee77 7a27 	vadd.f32	s15, s14, s15
 801549c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80154a0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80154a4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80154a8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80154ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80154b0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80154b4:	68a9      	ldr	r1, [r5, #8]
 80154b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154ba:	ed95 6a08 	vldr	s12, [r5, #32]
 80154be:	edd5 6a07 	vldr	s13, [r5, #28]
 80154c2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80154c6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80154ca:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80154ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80154d2:	edc5 6a07 	vstr	s13, [r5, #28]
 80154d6:	441a      	add	r2, r3
 80154d8:	696b      	ldr	r3, [r5, #20]
 80154da:	3301      	adds	r3, #1
 80154dc:	602a      	str	r2, [r5, #0]
 80154de:	616b      	str	r3, [r5, #20]
 80154e0:	69ab      	ldr	r3, [r5, #24]
 80154e2:	3b01      	subs	r3, #1
 80154e4:	61ab      	str	r3, [r5, #24]
 80154e6:	692b      	ldr	r3, [r5, #16]
 80154e8:	440b      	add	r3, r1
 80154ea:	68e9      	ldr	r1, [r5, #12]
 80154ec:	428b      	cmp	r3, r1
 80154ee:	612b      	str	r3, [r5, #16]
 80154f0:	db15      	blt.n	801551e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80154f2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80154f6:	3201      	adds	r2, #1
 80154f8:	1a5b      	subs	r3, r3, r1
 80154fa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80154fe:	602a      	str	r2, [r5, #0]
 8015500:	612b      	str	r3, [r5, #16]
 8015502:	edc5 6a07 	vstr	s13, [r5, #28]
 8015506:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801550a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801550e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015512:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8015516:	ee77 7a27 	vadd.f32	s15, s14, s15
 801551a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801551e:	3f01      	subs	r7, #1
 8015520:	e757      	b.n	80153d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015522:	ad39      	add	r5, sp, #228	; 0xe4
 8015524:	ac19      	add	r4, sp, #100	; 0x64
 8015526:	e72d      	b.n	8015384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015528:	4613      	mov	r3, r2
 801552a:	e744      	b.n	80153b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801552c:	4613      	mov	r3, r2
 801552e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8015530:	469e      	mov	lr, r3
 8015532:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8015536:	461f      	mov	r7, r3
 8015538:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801553c:	f04f 0900 	mov.w	r9, #0
 8015540:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015544:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015548:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801554c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8015550:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015554:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015556:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801555a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801555e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8015562:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015566:	960e      	str	r6, [sp, #56]	; 0x38
 8015568:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801556c:	2f00      	cmp	r7, #0
 801556e:	d146      	bne.n	80155fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015570:	449c      	add	ip, r3
 8015572:	1ad7      	subs	r7, r2, r3
 8015574:	f1b9 0f00 	cmp.w	r9, #0
 8015578:	d009      	beq.n	801558e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801557a:	9039      	str	r0, [sp, #228]	; 0xe4
 801557c:	913d      	str	r1, [sp, #244]	; 0xf4
 801557e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8015582:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015586:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801558a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801558e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015590:	f04f 0800 	mov.w	r8, #0
 8015594:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015598:	910e      	str	r1, [sp, #56]	; 0x38
 801559a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801559e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80155a2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80155a6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80155aa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80155ae:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80155b2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80155b6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80155ba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80155be:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80155c2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80155c6:	f1be 0f00 	cmp.w	lr, #0
 80155ca:	d030      	beq.n	801562e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80155cc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80155ce:	4450      	add	r0, sl
 80155d0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80155d4:	4431      	add	r1, r6
 80155d6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80155da:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80155de:	4549      	cmp	r1, r9
 80155e0:	db08      	blt.n	80155f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80155e2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80155e6:	3001      	adds	r0, #1
 80155e8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80155ec:	eba1 0109 	sub.w	r1, r1, r9
 80155f0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80155f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80155f8:	f04f 0801 	mov.w	r8, #1
 80155fc:	e7e3      	b.n	80155c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80155fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015600:	4450      	add	r0, sl
 8015602:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015606:	4431      	add	r1, r6
 8015608:	ee77 7a84 	vadd.f32	s15, s15, s8
 801560c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015610:	4541      	cmp	r1, r8
 8015612:	db08      	blt.n	8015626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015614:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015618:	3001      	adds	r0, #1
 801561a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801561e:	eba1 0108 	sub.w	r1, r1, r8
 8015622:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015626:	3f01      	subs	r7, #1
 8015628:	f04f 0901 	mov.w	r9, #1
 801562c:	e79e      	b.n	801556c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801562e:	449c      	add	ip, r3
 8015630:	1aff      	subs	r7, r7, r3
 8015632:	f1b8 0f00 	cmp.w	r8, #0
 8015636:	d009      	beq.n	801564c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015638:	9019      	str	r0, [sp, #100]	; 0x64
 801563a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801563e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015642:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015646:	911d      	str	r1, [sp, #116]	; 0x74
 8015648:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801564c:	1ad2      	subs	r2, r2, r3
 801564e:	e6b5      	b.n	80153bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	b923      	cbnz	r3, 8015660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015656:	4b04      	ldr	r3, [pc, #16]	; (8015668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015658:	6818      	ldr	r0, [r3, #0]
 801565a:	6803      	ldr	r3, [r0, #0]
 801565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801565e:	4798      	blx	r3
 8015660:	b05b      	add	sp, #364	; 0x16c
 8015662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015666:	bf00      	nop
 8015668:	2400f240 	.word	0x2400f240

0801566c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801566c:	b570      	push	{r4, r5, r6, lr}
 801566e:	4604      	mov	r4, r0
 8015670:	2500      	movs	r5, #0
 8015672:	9805      	ldr	r0, [sp, #20]
 8015674:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015678:	6061      	str	r1, [r4, #4]
 801567a:	8263      	strh	r3, [r4, #18]
 801567c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015680:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015684:	8025      	strh	r5, [r4, #0]
 8015686:	7221      	strb	r1, [r4, #8]
 8015688:	7266      	strb	r6, [r4, #9]
 801568a:	60e0      	str	r0, [r4, #12]
 801568c:	8222      	strh	r2, [r4, #16]
 801568e:	82a3      	strh	r3, [r4, #20]
 8015690:	82e5      	strh	r5, [r4, #22]
 8015692:	8325      	strh	r5, [r4, #24]
 8015694:	8365      	strh	r5, [r4, #26]
 8015696:	83a5      	strh	r5, [r4, #28]
 8015698:	83e5      	strh	r5, [r4, #30]
 801569a:	8425      	strh	r5, [r4, #32]
 801569c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80156a0:	b32e      	cbz	r6, 80156ee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156a2:	6803      	ldr	r3, [r0, #0]
 80156a4:	695b      	ldr	r3, [r3, #20]
 80156a6:	4798      	blx	r3
 80156a8:	4606      	mov	r6, r0
 80156aa:	b300      	cbz	r0, 80156ee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156ac:	68e0      	ldr	r0, [r4, #12]
 80156ae:	4631      	mov	r1, r6
 80156b0:	6803      	ldr	r3, [r0, #0]
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	4798      	blx	r3
 80156b6:	4605      	mov	r5, r0
 80156b8:	b1c8      	cbz	r0, 80156ee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156ba:	7b43      	ldrb	r3, [r0, #13]
 80156bc:	7a82      	ldrb	r2, [r0, #10]
 80156be:	005b      	lsls	r3, r3, #1
 80156c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156c4:	4313      	orrs	r3, r2
 80156c6:	8423      	strh	r3, [r4, #32]
 80156c8:	7a63      	ldrb	r3, [r4, #9]
 80156ca:	2b06      	cmp	r3, #6
 80156cc:	d10f      	bne.n	80156ee <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80156ce:	68e0      	ldr	r0, [r4, #12]
 80156d0:	462a      	mov	r2, r5
 80156d2:	4631      	mov	r1, r6
 80156d4:	6803      	ldr	r3, [r0, #0]
 80156d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80156d8:	4798      	blx	r3
 80156da:	7b6b      	ldrb	r3, [r5, #13]
 80156dc:	005b      	lsls	r3, r3, #1
 80156de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80156e2:	7aab      	ldrb	r3, [r5, #10]
 80156e4:	4313      	orrs	r3, r2
 80156e6:	4418      	add	r0, r3
 80156e8:	8c23      	ldrh	r3, [r4, #32]
 80156ea:	4418      	add	r0, r3
 80156ec:	8420      	strh	r0, [r4, #32]
 80156ee:	4620      	mov	r0, r4
 80156f0:	bd70      	pop	{r4, r5, r6, pc}

080156f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80156f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f6:	2400      	movs	r4, #0
 80156f8:	b085      	sub	sp, #20
 80156fa:	4681      	mov	r9, r0
 80156fc:	4688      	mov	r8, r1
 80156fe:	4692      	mov	sl, r2
 8015700:	469b      	mov	fp, r3
 8015702:	4627      	mov	r7, r4
 8015704:	4625      	mov	r5, r4
 8015706:	4626      	mov	r6, r4
 8015708:	4554      	cmp	r4, sl
 801570a:	da2a      	bge.n	8015762 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801570c:	2300      	movs	r3, #0
 801570e:	9303      	str	r3, [sp, #12]
 8015710:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015714:	429d      	cmp	r5, r3
 8015716:	d004      	beq.n	8015722 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015718:	f242 030b 	movw	r3, #8203	; 0x200b
 801571c:	429d      	cmp	r5, r3
 801571e:	bf18      	it	ne
 8015720:	462f      	movne	r7, r5
 8015722:	ab03      	add	r3, sp, #12
 8015724:	4642      	mov	r2, r8
 8015726:	4659      	mov	r1, fp
 8015728:	4648      	mov	r0, r9
 801572a:	f002 ffbb 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801572e:	4605      	mov	r5, r0
 8015730:	b1b8      	cbz	r0, 8015762 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015732:	280a      	cmp	r0, #10
 8015734:	d015      	beq.n	8015762 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015736:	9a03      	ldr	r2, [sp, #12]
 8015738:	b18a      	cbz	r2, 801575e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801573a:	7b50      	ldrb	r0, [r2, #13]
 801573c:	4639      	mov	r1, r7
 801573e:	7a93      	ldrb	r3, [r2, #10]
 8015740:	0040      	lsls	r0, r0, #1
 8015742:	8895      	ldrh	r5, [r2, #4]
 8015744:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015748:	4303      	orrs	r3, r0
 801574a:	4640      	mov	r0, r8
 801574c:	9301      	str	r3, [sp, #4]
 801574e:	f8d8 3000 	ldr.w	r3, [r8]
 8015752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015754:	4798      	blx	r3
 8015756:	9b01      	ldr	r3, [sp, #4]
 8015758:	4418      	add	r0, r3
 801575a:	4406      	add	r6, r0
 801575c:	b2b6      	uxth	r6, r6
 801575e:	3401      	adds	r4, #1
 8015760:	e7d2      	b.n	8015708 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015762:	4630      	mov	r0, r6
 8015764:	b005      	add	sp, #20
 8015766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801576a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801576a:	2a02      	cmp	r2, #2
 801576c:	b530      	push	{r4, r5, lr}
 801576e:	d011      	beq.n	8015794 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015770:	2a03      	cmp	r2, #3
 8015772:	d01c      	beq.n	80157ae <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015774:	2a01      	cmp	r2, #1
 8015776:	d10c      	bne.n	8015792 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015778:	888b      	ldrh	r3, [r1, #4]
 801577a:	8801      	ldrh	r1, [r0, #0]
 801577c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015780:	1a5b      	subs	r3, r3, r1
 8015782:	8844      	ldrh	r4, [r0, #2]
 8015784:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015788:	1a9b      	subs	r3, r3, r2
 801578a:	8004      	strh	r4, [r0, #0]
 801578c:	8081      	strh	r1, [r0, #4]
 801578e:	8043      	strh	r3, [r0, #2]
 8015790:	80c2      	strh	r2, [r0, #6]
 8015792:	bd30      	pop	{r4, r5, pc}
 8015794:	88cb      	ldrh	r3, [r1, #6]
 8015796:	8842      	ldrh	r2, [r0, #2]
 8015798:	1a9b      	subs	r3, r3, r2
 801579a:	88c2      	ldrh	r2, [r0, #6]
 801579c:	1a9b      	subs	r3, r3, r2
 801579e:	888a      	ldrh	r2, [r1, #4]
 80157a0:	8801      	ldrh	r1, [r0, #0]
 80157a2:	8043      	strh	r3, [r0, #2]
 80157a4:	1a52      	subs	r2, r2, r1
 80157a6:	8881      	ldrh	r1, [r0, #4]
 80157a8:	1a52      	subs	r2, r2, r1
 80157aa:	8002      	strh	r2, [r0, #0]
 80157ac:	e7f1      	b.n	8015792 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80157ae:	88cb      	ldrh	r3, [r1, #6]
 80157b0:	8841      	ldrh	r1, [r0, #2]
 80157b2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80157b6:	1a5b      	subs	r3, r3, r1
 80157b8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80157bc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80157c0:	1a9b      	subs	r3, r3, r2
 80157c2:	8045      	strh	r5, [r0, #2]
 80157c4:	8082      	strh	r2, [r0, #4]
 80157c6:	8003      	strh	r3, [r0, #0]
 80157c8:	80c4      	strh	r4, [r0, #6]
 80157ca:	e7e2      	b.n	8015792 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080157cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80157cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d0:	b09f      	sub	sp, #124	; 0x7c
 80157d2:	9116      	str	r1, [sp, #88]	; 0x58
 80157d4:	9317      	str	r3, [sp, #92]	; 0x5c
 80157d6:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80157d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80157da:	8809      	ldrh	r1, [r1, #0]
 80157dc:	889b      	ldrh	r3, [r3, #4]
 80157de:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80157e2:	440b      	add	r3, r1
 80157e4:	9212      	str	r2, [sp, #72]	; 0x48
 80157e6:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80157ea:	b21b      	sxth	r3, r3
 80157ec:	9011      	str	r0, [sp, #68]	; 0x44
 80157ee:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80157f2:	9310      	str	r3, [sp, #64]	; 0x40
 80157f4:	f8d8 3000 	ldr.w	r3, [r8]
 80157f8:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80157fc:	7b19      	ldrb	r1, [r3, #12]
 80157fe:	7adb      	ldrb	r3, [r3, #11]
 8015800:	9114      	str	r1, [sp, #80]	; 0x50
 8015802:	9315      	str	r3, [sp, #84]	; 0x54
 8015804:	2a00      	cmp	r2, #0
 8015806:	d06a      	beq.n	80158de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015808:	f898 3010 	ldrb.w	r3, [r8, #16]
 801580c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801580e:	2b06      	cmp	r3, #6
 8015810:	bf14      	ite	ne
 8015812:	2301      	movne	r3, #1
 8015814:	2302      	moveq	r3, #2
 8015816:	4413      	add	r3, r2
 8015818:	f04f 0900 	mov.w	r9, #0
 801581c:	930f      	str	r3, [sp, #60]	; 0x3c
 801581e:	464c      	mov	r4, r9
 8015820:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8015824:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8015828:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801582c:	4293      	cmp	r3, r2
 801582e:	f280 808f 	bge.w	8015950 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015832:	2300      	movs	r3, #0
 8015834:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8015838:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801583c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015840:	429c      	cmp	r4, r3
 8015842:	d006      	beq.n	8015852 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015846:	f242 020b 	movw	r2, #8203	; 0x200b
 801584a:	4294      	cmp	r4, r2
 801584c:	bf18      	it	ne
 801584e:	4623      	movne	r3, r4
 8015850:	930d      	str	r3, [sp, #52]	; 0x34
 8015852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015854:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8015856:	f8d8 2000 	ldr.w	r2, [r8]
 801585a:	428b      	cmp	r3, r1
 801585c:	db41      	blt.n	80158e2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801585e:	6813      	ldr	r3, [r2, #0]
 8015860:	4610      	mov	r0, r2
 8015862:	695b      	ldr	r3, [r3, #20]
 8015864:	4798      	blx	r3
 8015866:	4604      	mov	r4, r0
 8015868:	f8d8 0000 	ldr.w	r0, [r8]
 801586c:	aa1d      	add	r2, sp, #116	; 0x74
 801586e:	4621      	mov	r1, r4
 8015870:	6803      	ldr	r3, [r0, #0]
 8015872:	689d      	ldr	r5, [r3, #8]
 8015874:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015878:	47a8      	blx	r5
 801587a:	901c      	str	r0, [sp, #112]	; 0x70
 801587c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015880:	429c      	cmp	r4, r3
 8015882:	f000 80ec 	beq.w	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015886:	f242 030b 	movw	r3, #8203	; 0x200b
 801588a:	429c      	cmp	r4, r3
 801588c:	f000 80e7 	beq.w	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015890:	2c00      	cmp	r4, #0
 8015892:	f000 80f9 	beq.w	8015a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015896:	2c0a      	cmp	r4, #10
 8015898:	d060      	beq.n	801595c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801589a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801589c:	b36a      	cbz	r2, 80158fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801589e:	8894      	ldrh	r4, [r2, #4]
 80158a0:	f1bb 0f00 	cmp.w	fp, #0
 80158a4:	d03b      	beq.n	801591e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80158a6:	f892 900d 	ldrb.w	r9, [r2, #13]
 80158aa:	f1bb 0f01 	cmp.w	fp, #1
 80158ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80158b2:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80158b6:	f892 900a 	ldrb.w	r9, [r2, #10]
 80158ba:	ea49 0903 	orr.w	r9, r9, r3
 80158be:	d134      	bne.n	801592a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80158c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158c2:	eba6 0609 	sub.w	r6, r6, r9
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d14f      	bne.n	801596a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80158ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158cc:	eb09 0306 	add.w	r3, r9, r6
 80158d0:	4413      	add	r3, r2
 80158d2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80158d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80158d8:	4293      	cmp	r3, r2
 80158da:	da51      	bge.n	8015980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80158dc:	e038      	b.n	8015950 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80158de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80158e0:	e79a      	b.n	8015818 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80158e2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80158e6:	4659      	mov	r1, fp
 80158e8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80158ea:	9301      	str	r3, [sp, #4]
 80158ec:	ab1d      	add	r3, sp, #116	; 0x74
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	ab1c      	add	r3, sp, #112	; 0x70
 80158f2:	f002 ff20 	bl	8018736 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80158f6:	4604      	mov	r4, r0
 80158f8:	e7c0      	b.n	801587c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80158fa:	f8d8 0000 	ldr.w	r0, [r8]
 80158fe:	6803      	ldr	r3, [r0, #0]
 8015900:	691b      	ldr	r3, [r3, #16]
 8015902:	4798      	blx	r3
 8015904:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015908:	4298      	cmp	r0, r3
 801590a:	f000 80a8 	beq.w	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801590e:	f242 030b 	movw	r3, #8203	; 0x200b
 8015912:	4298      	cmp	r0, r3
 8015914:	f000 80a3 	beq.w	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015918:	f1bb 0f00 	cmp.w	fp, #0
 801591c:	d100      	bne.n	8015920 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801591e:	444e      	add	r6, r9
 8015920:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015922:	2a00      	cmp	r2, #0
 8015924:	d1bf      	bne.n	80158a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015926:	4691      	mov	r9, r2
 8015928:	e099      	b.n	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801592a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801592c:	2b00      	cmp	r3, #0
 801592e:	f000 80ad 	beq.w	8015a8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8015932:	f1bb 0f00 	cmp.w	fp, #0
 8015936:	d118      	bne.n	801596a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015938:	f8d8 0000 	ldr.w	r0, [r8]
 801593c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801593e:	6803      	ldr	r3, [r0, #0]
 8015940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015942:	4798      	blx	r3
 8015944:	4406      	add	r6, r0
 8015946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015948:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801594a:	1af3      	subs	r3, r6, r3
 801594c:	4293      	cmp	r3, r2
 801594e:	dd17      	ble.n	8015980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015950:	2c00      	cmp	r4, #0
 8015952:	f000 8099 	beq.w	8015a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015956:	2c0a      	cmp	r4, #10
 8015958:	f040 8087 	bne.w	8015a6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801595c:	240a      	movs	r4, #10
 801595e:	fab4 f084 	clz	r0, r4
 8015962:	0940      	lsrs	r0, r0, #5
 8015964:	b01f      	add	sp, #124	; 0x7c
 8015966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801596a:	f8d8 0000 	ldr.w	r0, [r8]
 801596e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015970:	6803      	ldr	r3, [r0, #0]
 8015972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015974:	4798      	blx	r3
 8015976:	f1bb 0f01 	cmp.w	fp, #1
 801597a:	eba6 0600 	sub.w	r6, r6, r0
 801597e:	d0a4      	beq.n	80158ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015980:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015982:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015984:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015988:	f9b3 7000 	ldrsh.w	r7, [r3]
 801598c:	7b43      	ldrb	r3, [r0, #13]
 801598e:	4431      	add	r1, r6
 8015990:	015b      	lsls	r3, r3, #5
 8015992:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015996:	7983      	ldrb	r3, [r0, #6]
 8015998:	4313      	orrs	r3, r2
 801599a:	440b      	add	r3, r1
 801599c:	42bb      	cmp	r3, r7
 801599e:	db5e      	blt.n	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80159a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80159a2:	4299      	cmp	r1, r3
 80159a4:	da5b      	bge.n	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80159a6:	f8d8 0000 	ldr.w	r0, [r8]
 80159aa:	42b7      	cmp	r7, r6
 80159ac:	6803      	ldr	r3, [r0, #0]
 80159ae:	bfcc      	ite	gt
 80159b0:	1bbf      	subgt	r7, r7, r6
 80159b2:	2700      	movle	r7, #0
 80159b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159b6:	bfc8      	it	gt
 80159b8:	b2bf      	uxthgt	r7, r7
 80159ba:	4798      	blx	r3
 80159bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80159be:	7b5a      	ldrb	r2, [r3, #13]
 80159c0:	00d1      	lsls	r1, r2, #3
 80159c2:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80159c6:	7a19      	ldrb	r1, [r3, #8]
 80159c8:	4329      	orrs	r1, r5
 80159ca:	0655      	lsls	r5, r2, #25
 80159cc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80159ce:	bf48      	it	mi
 80159d0:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80159d4:	4405      	add	r5, r0
 80159d6:	bf48      	it	mi
 80159d8:	b209      	sxthmi	r1, r1
 80159da:	1a6d      	subs	r5, r5, r1
 80159dc:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80159de:	b2ad      	uxth	r5, r5
 80159e0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80159e4:	fa0f fa85 	sxth.w	sl, r5
 80159e8:	4551      	cmp	r1, sl
 80159ea:	dd3c      	ble.n	8015a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80159ec:	0112      	lsls	r2, r2, #4
 80159ee:	79d8      	ldrb	r0, [r3, #7]
 80159f0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80159f4:	4302      	orrs	r2, r0
 80159f6:	4492      	add	sl, r2
 80159f8:	4551      	cmp	r1, sl
 80159fa:	dc30      	bgt.n	8015a5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80159fc:	1b4d      	subs	r5, r1, r5
 80159fe:	468a      	mov	sl, r1
 8015a00:	b22d      	sxth	r5, r5
 8015a02:	9319      	str	r3, [sp, #100]	; 0x64
 8015a04:	b2ad      	uxth	r5, r5
 8015a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a08:	f8d8 0000 	ldr.w	r0, [r8]
 8015a0c:	681a      	ldr	r2, [r3, #0]
 8015a0e:	6801      	ldr	r1, [r0, #0]
 8015a10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8015a12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015a14:	9313      	str	r3, [sp, #76]	; 0x4c
 8015a16:	9218      	str	r2, [sp, #96]	; 0x60
 8015a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015a1a:	4788      	blx	r1
 8015a1c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a22:	910b      	str	r1, [sp, #44]	; 0x2c
 8015a24:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015a28:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a2a:	910a      	str	r1, [sp, #40]	; 0x28
 8015a2c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8015a30:	9109      	str	r1, [sp, #36]	; 0x24
 8015a32:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015a36:	9305      	str	r3, [sp, #20]
 8015a38:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015a3a:	9206      	str	r2, [sp, #24]
 8015a3c:	9304      	str	r3, [sp, #16]
 8015a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a40:	f8cd a004 	str.w	sl, [sp, #4]
 8015a44:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8015a48:	4437      	add	r7, r6
 8015a4a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015a4c:	b23f      	sxth	r7, r7
 8015a4e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015a52:	9700      	str	r7, [sp, #0]
 8015a54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015a5a:	685b      	ldr	r3, [r3, #4]
 8015a5c:	47a8      	blx	r5
 8015a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a60:	3301      	adds	r3, #1
 8015a62:	930e      	str	r3, [sp, #56]	; 0x38
 8015a64:	e6e0      	b.n	8015828 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8015a66:	2500      	movs	r5, #0
 8015a68:	e7cb      	b.n	8015a02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8015a6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015a6c:	3501      	adds	r5, #1
 8015a6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a70:	429d      	cmp	r5, r3
 8015a72:	f6bf af74 	bge.w	801595e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015a76:	4659      	mov	r1, fp
 8015a78:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015a7a:	f7f1 fca3 	bl	80073c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015a7e:	4604      	mov	r4, r0
 8015a80:	b110      	cbz	r0, 8015a88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015a82:	280a      	cmp	r0, #10
 8015a84:	d1f2      	bne.n	8015a6c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8015a86:	e769      	b.n	801595c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015a88:	2400      	movs	r4, #0
 8015a8a:	e768      	b.n	801595e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015a8c:	f1bb 0f00 	cmp.w	fp, #0
 8015a90:	f43f af59 	beq.w	8015946 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8015a94:	e774      	b.n	8015980 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08015a96 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015a96:	b530      	push	{r4, r5, lr}
 8015a98:	8ac4      	ldrh	r4, [r0, #22]
 8015a9a:	8b45      	ldrh	r5, [r0, #26]
 8015a9c:	8343      	strh	r3, [r0, #26]
 8015a9e:	442c      	add	r4, r5
 8015aa0:	1ae4      	subs	r4, r4, r3
 8015aa2:	8b83      	ldrh	r3, [r0, #28]
 8015aa4:	82c4      	strh	r4, [r0, #22]
 8015aa6:	8b04      	ldrh	r4, [r0, #24]
 8015aa8:	4422      	add	r2, r4
 8015aaa:	440c      	add	r4, r1
 8015aac:	1a59      	subs	r1, r3, r1
 8015aae:	83c2      	strh	r2, [r0, #30]
 8015ab0:	8304      	strh	r4, [r0, #24]
 8015ab2:	8381      	strh	r1, [r0, #28]
 8015ab4:	bd30      	pop	{r4, r5, pc}

08015ab6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aba:	4604      	mov	r4, r0
 8015abc:	8a47      	ldrh	r7, [r0, #18]
 8015abe:	68c0      	ldr	r0, [r0, #12]
 8015ac0:	b085      	sub	sp, #20
 8015ac2:	6803      	ldr	r3, [r0, #0]
 8015ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ac6:	4798      	blx	r3
 8015ac8:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015acc:	7a63      	ldrb	r3, [r4, #9]
 8015ace:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015ad2:	3b01      	subs	r3, #1
 8015ad4:	42b7      	cmp	r7, r6
 8015ad6:	bfac      	ite	ge
 8015ad8:	f04f 0900 	movge.w	r9, #0
 8015adc:	f04f 0901 	movlt.w	r9, #1
 8015ae0:	2b05      	cmp	r3, #5
 8015ae2:	d804      	bhi.n	8015aee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8015ae4:	e8df f003 	tbb	[pc, r3]
 8015ae8:	470f0854 	.word	0x470f0854
 8015aec:	4c4c      	.short	0x4c4c
 8015aee:	2500      	movs	r5, #0
 8015af0:	46a9      	mov	r9, r5
 8015af2:	462e      	mov	r6, r5
 8015af4:	462f      	mov	r7, r5
 8015af6:	e00e      	b.n	8015b16 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015af8:	42b7      	cmp	r7, r6
 8015afa:	f04f 0500 	mov.w	r5, #0
 8015afe:	bfb4      	ite	lt
 8015b00:	2600      	movlt	r6, #0
 8015b02:	2601      	movge	r6, #1
 8015b04:	e7f6      	b.n	8015af4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015b06:	42b7      	cmp	r7, r6
 8015b08:	464d      	mov	r5, r9
 8015b0a:	f04f 0900 	mov.w	r9, #0
 8015b0e:	bfb4      	ite	lt
 8015b10:	2600      	movlt	r6, #0
 8015b12:	2601      	movge	r6, #1
 8015b14:	464f      	mov	r7, r9
 8015b16:	f04f 0800 	mov.w	r8, #0
 8015b1a:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015b1e:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015b22:	f8cd 8004 	str.w	r8, [sp, #4]
 8015b26:	2300      	movs	r3, #0
 8015b28:	9303      	str	r3, [sp, #12]
 8015b2a:	8823      	ldrh	r3, [r4, #0]
 8015b2c:	2b20      	cmp	r3, #32
 8015b2e:	d033      	beq.n	8015b98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015b30:	f242 010b 	movw	r1, #8203	; 0x200b
 8015b34:	1a5a      	subs	r2, r3, r1
 8015b36:	f1d2 0a00 	rsbs	sl, r2, #0
 8015b3a:	eb4a 0a02 	adc.w	sl, sl, r2
 8015b3e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015b42:	4293      	cmp	r3, r2
 8015b44:	d008      	beq.n	8015b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015b46:	428b      	cmp	r3, r1
 8015b48:	9a01      	ldr	r2, [sp, #4]
 8015b4a:	bf0e      	itee	eq
 8015b4c:	f04f 0a01 	moveq.w	sl, #1
 8015b50:	461a      	movne	r2, r3
 8015b52:	f04f 0a00 	movne.w	sl, #0
 8015b56:	9201      	str	r2, [sp, #4]
 8015b58:	ab03      	add	r3, sp, #12
 8015b5a:	68e2      	ldr	r2, [r4, #12]
 8015b5c:	7a21      	ldrb	r1, [r4, #8]
 8015b5e:	6860      	ldr	r0, [r4, #4]
 8015b60:	f002 fda0 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015b64:	8020      	strh	r0, [r4, #0]
 8015b66:	b9d8      	cbnz	r0, 8015ba0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015b68:	8ba2      	ldrh	r2, [r4, #28]
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	4611      	mov	r1, r2
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f7ff ff91 	bl	8015a96 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015b74:	e06e      	b.n	8015c54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015b76:	2500      	movs	r5, #0
 8015b78:	2701      	movs	r7, #1
 8015b7a:	46a9      	mov	r9, r5
 8015b7c:	462e      	mov	r6, r5
 8015b7e:	e7ca      	b.n	8015b16 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015b80:	42b7      	cmp	r7, r6
 8015b82:	f04f 0500 	mov.w	r5, #0
 8015b86:	bfb4      	ite	lt
 8015b88:	2700      	movlt	r7, #0
 8015b8a:	2701      	movge	r7, #1
 8015b8c:	462e      	mov	r6, r5
 8015b8e:	e7c2      	b.n	8015b16 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015b90:	2500      	movs	r5, #0
 8015b92:	2601      	movs	r6, #1
 8015b94:	46a9      	mov	r9, r5
 8015b96:	e7ad      	b.n	8015af4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015b98:	9301      	str	r3, [sp, #4]
 8015b9a:	f04f 0a01 	mov.w	sl, #1
 8015b9e:	e7db      	b.n	8015b58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015ba0:	8b63      	ldrh	r3, [r4, #26]
 8015ba2:	280a      	cmp	r0, #10
 8015ba4:	f103 0301 	add.w	r3, r3, #1
 8015ba8:	8363      	strh	r3, [r4, #26]
 8015baa:	d0dd      	beq.n	8015b68 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015bac:	9a03      	ldr	r2, [sp, #12]
 8015bae:	bb62      	cbnz	r2, 8015c0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015bb0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015bb4:	4298      	cmp	r0, r3
 8015bb6:	d003      	beq.n	8015bc0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015bb8:	f242 030b 	movw	r3, #8203	; 0x200b
 8015bbc:	4298      	cmp	r0, r3
 8015bbe:	d1b2      	bne.n	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015bc0:	8823      	ldrh	r3, [r4, #0]
 8015bc2:	8ba1      	ldrh	r1, [r4, #28]
 8015bc4:	2b20      	cmp	r3, #32
 8015bc6:	d003      	beq.n	8015bd0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015bc8:	f242 000b 	movw	r0, #8203	; 0x200b
 8015bcc:	4283      	cmp	r3, r0
 8015bce:	d131      	bne.n	8015c34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015bd0:	f1ba 0f00 	cmp.w	sl, #0
 8015bd4:	bf0a      	itet	eq
 8015bd6:	4688      	moveq	r8, r1
 8015bd8:	4650      	movne	r0, sl
 8015bda:	2001      	moveq	r0, #1
 8015bdc:	440a      	add	r2, r1
 8015bde:	8b23      	ldrh	r3, [r4, #24]
 8015be0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015be4:	b292      	uxth	r2, r2
 8015be6:	83a2      	strh	r2, [r4, #28]
 8015be8:	4413      	add	r3, r2
 8015bea:	f1b9 0f00 	cmp.w	r9, #0
 8015bee:	d102      	bne.n	8015bf6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015bf0:	2d00      	cmp	r5, #0
 8015bf2:	d042      	beq.n	8015c7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015bf4:	b300      	cbz	r0, 8015c38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015bf6:	8c21      	ldrh	r1, [r4, #32]
 8015bf8:	4419      	add	r1, r3
 8015bfa:	458c      	cmp	ip, r1
 8015bfc:	da37      	bge.n	8015c6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015bfe:	8ae1      	ldrh	r1, [r4, #22]
 8015c00:	2900      	cmp	r1, #0
 8015c02:	d034      	beq.n	8015c6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015c04:	4563      	cmp	r3, ip
 8015c06:	dd8e      	ble.n	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c08:	e01d      	b.n	8015c46 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015c0a:	8893      	ldrh	r3, [r2, #4]
 8015c0c:	9901      	ldr	r1, [sp, #4]
 8015c0e:	8023      	strh	r3, [r4, #0]
 8015c10:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015c14:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015c18:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8015c1c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015c20:	ea4b 0b00 	orr.w	fp, fp, r0
 8015c24:	68e0      	ldr	r0, [r4, #12]
 8015c26:	6803      	ldr	r3, [r0, #0]
 8015c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c2a:	4798      	blx	r3
 8015c2c:	eb0b 0200 	add.w	r2, fp, r0
 8015c30:	b292      	uxth	r2, r2
 8015c32:	e7c5      	b.n	8015bc0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015c34:	2000      	movs	r0, #0
 8015c36:	e7d1      	b.n	8015bdc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015c38:	4563      	cmp	r3, ip
 8015c3a:	f77f af74 	ble.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c3e:	8ae3      	ldrh	r3, [r4, #22]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	f43f af70 	beq.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c46:	2301      	movs	r3, #1
 8015c48:	8c22      	ldrh	r2, [r4, #32]
 8015c4a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8015c4e:	8be3      	ldrh	r3, [r4, #30]
 8015c50:	4413      	add	r3, r2
 8015c52:	83e3      	strh	r3, [r4, #30]
 8015c54:	68e0      	ldr	r0, [r4, #12]
 8015c56:	6803      	ldr	r3, [r0, #0]
 8015c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c5a:	4798      	blx	r3
 8015c5c:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015c60:	4418      	add	r0, r3
 8015c62:	8a63      	ldrh	r3, [r4, #18]
 8015c64:	1a18      	subs	r0, r3, r0
 8015c66:	8260      	strh	r0, [r4, #18]
 8015c68:	b005      	add	sp, #20
 8015c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c6e:	2300      	movs	r3, #0
 8015c70:	4611      	mov	r1, r2
 8015c72:	4620      	mov	r0, r4
 8015c74:	f7ff ff0f 	bl	8015a96 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015c78:	e755      	b.n	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c7a:	4563      	cmp	r3, ip
 8015c7c:	dd14      	ble.n	8015ca8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015c7e:	b117      	cbz	r7, 8015c86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015c80:	2301      	movs	r3, #1
 8015c82:	460a      	mov	r2, r1
 8015c84:	e772      	b.n	8015b6c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8015c86:	2e00      	cmp	r6, #0
 8015c88:	f43f af4d 	beq.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c8c:	2800      	cmp	r0, #0
 8015c8e:	f47f af4a 	bne.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015c92:	f1ba 0f00 	cmp.w	sl, #0
 8015c96:	d002      	beq.n	8015c9e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015c98:	2301      	movs	r3, #1
 8015c9a:	4642      	mov	r2, r8
 8015c9c:	e767      	b.n	8015b6e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015c9e:	8ae3      	ldrh	r3, [r4, #22]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	f43f af40 	beq.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015ca6:	e7d5      	b.n	8015c54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	f47f af3c 	bne.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cae:	f1ba 0f00 	cmp.w	sl, #0
 8015cb2:	f43f af38 	beq.w	8015b26 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	4642      	mov	r2, r8
 8015cba:	e7da      	b.n	8015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015cbc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cbe:	4605      	mov	r5, r0
 8015cc0:	b08f      	sub	sp, #60	; 0x3c
 8015cc2:	4617      	mov	r7, r2
 8015cc4:	461c      	mov	r4, r3
 8015cc6:	460e      	mov	r6, r1
 8015cc8:	b1d1      	cbz	r1, 8015d00 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	4620      	mov	r0, r4
 8015cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cd0:	4798      	blx	r3
 8015cd2:	4240      	negs	r0, r0
 8015cd4:	9603      	str	r6, [sp, #12]
 8015cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cda:	b200      	sxth	r0, r0
 8015cdc:	9700      	str	r7, [sp, #0]
 8015cde:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8015ce2:	4629      	mov	r1, r5
 8015ce4:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015ce8:	2401      	movs	r4, #1
 8015cea:	a805      	add	r0, sp, #20
 8015cec:	f7ff fcbe 	bl	801566c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015cf0:	a805      	add	r0, sp, #20
 8015cf2:	f7ff fee0 	bl	8015ab6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015cf6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015cfa:	b163      	cbz	r3, 8015d16 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015cfc:	3401      	adds	r4, #1
 8015cfe:	e7f7      	b.n	8015cf0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015d00:	2401      	movs	r4, #1
 8015d02:	f002 fd9b 	bl	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d06:	280a      	cmp	r0, #10
 8015d08:	4628      	mov	r0, r5
 8015d0a:	bf08      	it	eq
 8015d0c:	3401      	addeq	r4, #1
 8015d0e:	f002 fd95 	bl	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015d12:	2800      	cmp	r0, #0
 8015d14:	d1f7      	bne.n	8015d06 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015d16:	b2a0      	uxth	r0, r4
 8015d18:	b00f      	add	sp, #60	; 0x3c
 8015d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d1c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d20:	b0e3      	sub	sp, #396	; 0x18c
 8015d22:	461c      	mov	r4, r3
 8015d24:	4683      	mov	fp, r0
 8015d26:	4688      	mov	r8, r1
 8015d28:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	f000 810f 	beq.w	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	f000 810b 	beq.w	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015d38:	7ba3      	ldrb	r3, [r4, #14]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f000 8107 	beq.w	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015d40:	ad0a      	add	r5, sp, #40	; 0x28
 8015d42:	6810      	ldr	r0, [r2, #0]
 8015d44:	6851      	ldr	r1, [r2, #4]
 8015d46:	462b      	mov	r3, r5
 8015d48:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015d4c:	c303      	stmia	r3!, {r0, r1}
 8015d4e:	2100      	movs	r1, #0
 8015d50:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015d54:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015d58:	4628      	mov	r0, r5
 8015d5a:	910c      	str	r1, [sp, #48]	; 0x30
 8015d5c:	a90c      	add	r1, sp, #48	; 0x30
 8015d5e:	79a2      	ldrb	r2, [r4, #6]
 8015d60:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015d64:	f7ff fd01 	bl	801576a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015d68:	a90c      	add	r1, sp, #48	; 0x30
 8015d6a:	79a2      	ldrb	r2, [r4, #6]
 8015d6c:	4608      	mov	r0, r1
 8015d6e:	f7ff fcfc 	bl	801576a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015d72:	a817      	add	r0, sp, #92	; 0x5c
 8015d74:	f002 f936 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8015d78:	6820      	ldr	r0, [r4, #0]
 8015d7a:	6803      	ldr	r3, [r0, #0]
 8015d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d7e:	4798      	blx	r3
 8015d80:	4606      	mov	r6, r0
 8015d82:	6820      	ldr	r0, [r4, #0]
 8015d84:	6803      	ldr	r3, [r0, #0]
 8015d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d88:	4798      	blx	r3
 8015d8a:	4633      	mov	r3, r6
 8015d8c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015d8e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015d90:	9000      	str	r0, [sp, #0]
 8015d92:	a817      	add	r0, sp, #92	; 0x5c
 8015d94:	f002 f981 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015d98:	6820      	ldr	r0, [r4, #0]
 8015d9a:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015d9e:	6803      	ldr	r3, [r0, #0]
 8015da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015da2:	4798      	blx	r3
 8015da4:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	4607      	mov	r7, r0
 8015dac:	4406      	add	r6, r0
 8015dae:	a830      	add	r0, sp, #192	; 0xc0
 8015db0:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015db4:	f002 f916 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8015db8:	7c23      	ldrb	r3, [r4, #16]
 8015dba:	b17b      	cbz	r3, 8015ddc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015dbc:	6820      	ldr	r0, [r4, #0]
 8015dbe:	6803      	ldr	r3, [r0, #0]
 8015dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015dc2:	4798      	blx	r3
 8015dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8015dc6:	6820      	ldr	r0, [r4, #0]
 8015dc8:	6802      	ldr	r2, [r0, #0]
 8015dca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015dcc:	4790      	blx	r2
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	9000      	str	r0, [sp, #0]
 8015dd2:	a830      	add	r0, sp, #192	; 0xc0
 8015dd4:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015dd6:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015dd8:	f002 f95f 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015ddc:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015de0:	a80e      	add	r0, sp, #56	; 0x38
 8015de2:	7be2      	ldrb	r2, [r4, #15]
 8015de4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015de8:	1a8a      	subs	r2, r1, r2
 8015dea:	7c21      	ldrb	r1, [r4, #16]
 8015dec:	9103      	str	r1, [sp, #12]
 8015dee:	b292      	uxth	r2, r2
 8015df0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015df4:	9102      	str	r1, [sp, #8]
 8015df6:	6821      	ldr	r1, [r4, #0]
 8015df8:	9101      	str	r1, [sp, #4]
 8015dfa:	7961      	ldrb	r1, [r4, #5]
 8015dfc:	9100      	str	r1, [sp, #0]
 8015dfe:	a930      	add	r1, sp, #192	; 0xc0
 8015e00:	f7ff fc34 	bl	801566c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015e04:	2e00      	cmp	r6, #0
 8015e06:	dc5b      	bgt.n	8015ec0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015e08:	af17      	add	r7, sp, #92	; 0x5c
 8015e0a:	f04f 0900 	mov.w	r9, #0
 8015e0e:	7c23      	ldrb	r3, [r4, #16]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f000 80ae 	beq.w	8015f72 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015e16:	a80e      	add	r0, sp, #56	; 0x38
 8015e18:	f7ff fe4d 	bl	8015ab6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015e1c:	f1ba 0f00 	cmp.w	sl, #0
 8015e20:	f000 80a2 	beq.w	8015f68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015e24:	7c23      	ldrb	r3, [r4, #16]
 8015e26:	2264      	movs	r2, #100	; 0x64
 8015e28:	4639      	mov	r1, r7
 8015e2a:	a849      	add	r0, sp, #292	; 0x124
 8015e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e2e:	f00c faa5 	bl	802237c <memcpy>
 8015e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 80a4 	beq.w	8015f82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8015e3a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015e3e:	7922      	ldrb	r2, [r4, #4]
 8015e40:	2a01      	cmp	r2, #1
 8015e42:	f040 8087 	bne.w	8015f54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8015e46:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8015e4a:	1ac0      	subs	r0, r0, r3
 8015e4c:	2302      	movs	r3, #2
 8015e4e:	fb90 f0f3 	sdiv	r0, r0, r3
 8015e52:	b200      	sxth	r0, r0
 8015e54:	7c23      	ldrb	r3, [r4, #16]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	f000 8088 	beq.w	8015f6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8015e5c:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8015e60:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8015e64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015e68:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8015e6c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015e70:	2100      	movs	r1, #0
 8015e72:	4410      	add	r0, r2
 8015e74:	4642      	mov	r2, r8
 8015e76:	b200      	sxth	r0, r0
 8015e78:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8015e7c:	9000      	str	r0, [sp, #0]
 8015e7e:	4658      	mov	r0, fp
 8015e80:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8015e84:	f7ff fca2 	bl	80157cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d160      	bne.n	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015e8c:	b2b2      	uxth	r2, r6
 8015e8e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015e92:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015e96:	4413      	add	r3, r2
 8015e98:	1a8a      	subs	r2, r1, r2
 8015e9a:	b21b      	sxth	r3, r3
 8015e9c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8015ea0:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8015ea4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015ea8:	2a00      	cmp	r2, #0
 8015eaa:	d150      	bne.n	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015eac:	6822      	ldr	r2, [r4, #0]
 8015eae:	8869      	ldrh	r1, [r5, #2]
 8015eb0:	7a12      	ldrb	r2, [r2, #8]
 8015eb2:	1a9b      	subs	r3, r3, r2
 8015eb4:	88ea      	ldrh	r2, [r5, #6]
 8015eb6:	440a      	add	r2, r1
 8015eb8:	b212      	sxth	r2, r2
 8015eba:	4293      	cmp	r3, r2
 8015ebc:	dda7      	ble.n	8015e0e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8015ebe:	e046      	b.n	8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015ec0:	7c23      	ldrb	r3, [r4, #16]
 8015ec2:	444f      	add	r7, r9
 8015ec4:	b1c3      	cbz	r3, 8015ef8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8015ec6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015eca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015ece:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015ed2:	443b      	add	r3, r7
 8015ed4:	4293      	cmp	r3, r2
 8015ed6:	da97      	bge.n	8015e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015ed8:	a80e      	add	r0, sp, #56	; 0x38
 8015eda:	f7ff fdec 	bl	8015ab6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015ede:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8015ee2:	3b01      	subs	r3, #1
 8015ee4:	b29b      	uxth	r3, r3
 8015ee6:	454b      	cmp	r3, r9
 8015ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8015eea:	d021      	beq.n	8015f30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8015eec:	7961      	ldrb	r1, [r4, #5]
 8015eee:	a817      	add	r0, sp, #92	; 0x5c
 8015ef0:	f7f1 fa68 	bl	80073c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ef6:	e7f4      	b.n	8015ee2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8015ef8:	fa1f f986 	uxth.w	r9, r6
 8015efc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015f00:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015f04:	443b      	add	r3, r7
 8015f06:	4293      	cmp	r3, r2
 8015f08:	f6bf af7e 	bge.w	8015e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8015f0c:	a817      	add	r0, sp, #92	; 0x5c
 8015f0e:	f002 fc95 	bl	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015f12:	b1e0      	cbz	r0, 8015f4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015f14:	280a      	cmp	r0, #10
 8015f16:	d1f1      	bne.n	8015efc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f18:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015f1c:	444b      	add	r3, r9
 8015f1e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015f22:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015f26:	eba3 0309 	sub.w	r3, r3, r9
 8015f2a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015f2e:	e7e5      	b.n	8015efc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8015f30:	b2b3      	uxth	r3, r6
 8015f32:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015f36:	441a      	add	r2, r3
 8015f38:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015f3c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8015f40:	1ad3      	subs	r3, r2, r3
 8015f42:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015f46:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d1bd      	bne.n	8015eca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8015f4e:	b063      	add	sp, #396	; 0x18c
 8015f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f54:	2a02      	cmp	r2, #2
 8015f56:	d105      	bne.n	8015f64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8015f58:	7be2      	ldrb	r2, [r4, #15]
 8015f5a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8015f5e:	1a80      	subs	r0, r0, r2
 8015f60:	1ac0      	subs	r0, r0, r3
 8015f62:	e776      	b.n	8015e52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8015f64:	2000      	movs	r0, #0
 8015f66:	e775      	b.n	8015e54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015f68:	7be0      	ldrb	r0, [r4, #15]
 8015f6a:	e773      	b.n	8015e54 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8015f6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015f70:	e776      	b.n	8015e60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8015f72:	f1ba 0f00 	cmp.w	sl, #0
 8015f76:	d0f7      	beq.n	8015f68 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015f78:	2264      	movs	r2, #100	; 0x64
 8015f7a:	4639      	mov	r1, r7
 8015f7c:	a849      	add	r0, sp, #292	; 0x124
 8015f7e:	f00c f9fd 	bl	802237c <memcpy>
 8015f82:	2300      	movs	r3, #0
 8015f84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015f88:	6821      	ldr	r1, [r4, #0]
 8015f8a:	a849      	add	r0, sp, #292	; 0x124
 8015f8c:	f7ff fbb1 	bl	80156f2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015f90:	b203      	sxth	r3, r0
 8015f92:	e754      	b.n	8015e3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08015f94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8015f94:	2b03      	cmp	r3, #3
 8015f96:	d818      	bhi.n	8015fca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8015f98:	e8df f003 	tbb	[pc, r3]
 8015f9c:	130d0602 	.word	0x130d0602
 8015fa0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8015fa4:	1850      	adds	r0, r2, r1
 8015fa6:	4770      	bx	lr
 8015fa8:	8803      	ldrh	r3, [r0, #0]
 8015faa:	8880      	ldrh	r0, [r0, #4]
 8015fac:	4418      	add	r0, r3
 8015fae:	b200      	sxth	r0, r0
 8015fb0:	1a80      	subs	r0, r0, r2
 8015fb2:	3801      	subs	r0, #1
 8015fb4:	4770      	bx	lr
 8015fb6:	8803      	ldrh	r3, [r0, #0]
 8015fb8:	8880      	ldrh	r0, [r0, #4]
 8015fba:	4418      	add	r0, r3
 8015fbc:	b200      	sxth	r0, r0
 8015fbe:	1a40      	subs	r0, r0, r1
 8015fc0:	e7f7      	b.n	8015fb2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8015fc2:	f9b0 0000 	ldrsh.w	r0, [r0]
 8015fc6:	4410      	add	r0, r2
 8015fc8:	4770      	bx	lr
 8015fca:	2000      	movs	r0, #0
 8015fcc:	4770      	bx	lr

08015fce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8015fce:	2b03      	cmp	r3, #3
 8015fd0:	d817      	bhi.n	8016002 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8015fd2:	e8df f003 	tbb	[pc, r3]
 8015fd6:	0602      	.short	0x0602
 8015fd8:	1009      	.short	0x1009
 8015fda:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8015fde:	1850      	adds	r0, r2, r1
 8015fe0:	4770      	bx	lr
 8015fe2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8015fe6:	e7fa      	b.n	8015fde <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8015fe8:	8843      	ldrh	r3, [r0, #2]
 8015fea:	88c0      	ldrh	r0, [r0, #6]
 8015fec:	4418      	add	r0, r3
 8015fee:	b200      	sxth	r0, r0
 8015ff0:	1a80      	subs	r0, r0, r2
 8015ff2:	3801      	subs	r0, #1
 8015ff4:	4770      	bx	lr
 8015ff6:	8843      	ldrh	r3, [r0, #2]
 8015ff8:	88c0      	ldrh	r0, [r0, #6]
 8015ffa:	4418      	add	r0, r3
 8015ffc:	b200      	sxth	r0, r0
 8015ffe:	1a40      	subs	r0, r0, r1
 8016000:	e7f7      	b.n	8015ff2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016002:	2000      	movs	r0, #0
 8016004:	4770      	bx	lr
	...

08016008 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016008:	4b01      	ldr	r3, [pc, #4]	; (8016010 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801600a:	2200      	movs	r2, #0
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	4770      	bx	lr
 8016010:	2400f250 	.word	0x2400f250

08016014 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016014:	4603      	mov	r3, r0
 8016016:	b1c8      	cbz	r0, 801604c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016018:	0c02      	lsrs	r2, r0, #16
 801601a:	0412      	lsls	r2, r2, #16
 801601c:	b9a2      	cbnz	r2, 8016048 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801601e:	0403      	lsls	r3, r0, #16
 8016020:	2010      	movs	r0, #16
 8016022:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016026:	bf04      	itt	eq
 8016028:	021b      	lsleq	r3, r3, #8
 801602a:	3008      	addeq	r0, #8
 801602c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016030:	bf04      	itt	eq
 8016032:	011b      	lsleq	r3, r3, #4
 8016034:	3004      	addeq	r0, #4
 8016036:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801603a:	bf04      	itt	eq
 801603c:	009b      	lsleq	r3, r3, #2
 801603e:	3002      	addeq	r0, #2
 8016040:	2b00      	cmp	r3, #0
 8016042:	db04      	blt.n	801604e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016044:	3001      	adds	r0, #1
 8016046:	4770      	bx	lr
 8016048:	2000      	movs	r0, #0
 801604a:	e7ea      	b.n	8016022 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801604c:	2020      	movs	r0, #32
 801604e:	4770      	bx	lr

08016050 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8016050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016054:	b087      	sub	sp, #28
 8016056:	4681      	mov	r9, r0
 8016058:	4698      	mov	r8, r3
 801605a:	4610      	mov	r0, r2
 801605c:	460d      	mov	r5, r1
 801605e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8016062:	b981      	cbnz	r1, 8016086 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016064:	b14b      	cbz	r3, 801607a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016066:	460b      	mov	r3, r1
 8016068:	464a      	mov	r2, r9
 801606a:	4641      	mov	r1, r8
 801606c:	e9cd 4700 	strd	r4, r7, [sp]
 8016070:	f7ff ffee 	bl	8016050 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016074:	b007      	add	sp, #28
 8016076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801607a:	f04f 33ff 	mov.w	r3, #4294967295
 801607e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8016082:	603b      	str	r3, [r7, #0]
 8016084:	e7f6      	b.n	8016074 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016086:	fa32 fa01 	lsrs.w	sl, r2, r1
 801608a:	d107      	bne.n	801609c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801608c:	fb09 f602 	mul.w	r6, r9, r2
 8016090:	fbb6 f0f4 	udiv	r0, r6, r4
 8016094:	fb04 6610 	mls	r6, r4, r0, r6
 8016098:	603e      	str	r6, [r7, #0]
 801609a:	e7eb      	b.n	8016074 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801609c:	2601      	movs	r6, #1
 801609e:	fa09 fb01 	lsl.w	fp, r9, r1
 80160a2:	408e      	lsls	r6, r1
 80160a4:	fbbb f3f4 	udiv	r3, fp, r4
 80160a8:	3e01      	subs	r6, #1
 80160aa:	9302      	str	r3, [sp, #8]
 80160ac:	fb0a f303 	mul.w	r3, sl, r3
 80160b0:	4016      	ands	r6, r2
 80160b2:	9303      	str	r3, [sp, #12]
 80160b4:	4630      	mov	r0, r6
 80160b6:	f7ff ffad 	bl	8016014 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80160ba:	464a      	mov	r2, r9
 80160bc:	460b      	mov	r3, r1
 80160be:	4601      	mov	r1, r0
 80160c0:	4630      	mov	r0, r6
 80160c2:	e9cd 4700 	strd	r4, r7, [sp]
 80160c6:	f7ff ffc3 	bl	8016050 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80160ca:	9b02      	ldr	r3, [sp, #8]
 80160cc:	4606      	mov	r6, r0
 80160ce:	eb05 0108 	add.w	r1, r5, r8
 80160d2:	fb04 bb13 	mls	fp, r4, r3, fp
 80160d6:	4658      	mov	r0, fp
 80160d8:	f7ff ff9c 	bl	8016014 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80160dc:	ab05      	add	r3, sp, #20
 80160de:	465a      	mov	r2, fp
 80160e0:	e9cd 4300 	strd	r4, r3, [sp]
 80160e4:	4603      	mov	r3, r0
 80160e6:	4650      	mov	r0, sl
 80160e8:	f7ff ffb2 	bl	8016050 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80160ec:	6839      	ldr	r1, [r7, #0]
 80160ee:	9a05      	ldr	r2, [sp, #20]
 80160f0:	9b03      	ldr	r3, [sp, #12]
 80160f2:	4411      	add	r1, r2
 80160f4:	fbb1 f2f4 	udiv	r2, r1, r4
 80160f8:	18d3      	adds	r3, r2, r3
 80160fa:	fb04 1412 	mls	r4, r4, r2, r1
 80160fe:	441e      	add	r6, r3
 8016100:	603c      	str	r4, [r7, #0]
 8016102:	4430      	add	r0, r6
 8016104:	e7b6      	b.n	8016074 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08016106 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016106:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801610a:	b085      	sub	sp, #20
 801610c:	f1b0 0900 	subs.w	r9, r0, #0
 8016110:	461d      	mov	r5, r3
 8016112:	4617      	mov	r7, r2
 8016114:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016116:	bfbb      	ittet	lt
 8016118:	f1c9 0900 	rsblt	r9, r9, #0
 801611c:	f04f 36ff 	movlt.w	r6, #4294967295
 8016120:	2601      	movge	r6, #1
 8016122:	6823      	ldrlt	r3, [r4, #0]
 8016124:	bfbc      	itt	lt
 8016126:	425b      	neglt	r3, r3
 8016128:	6023      	strlt	r3, [r4, #0]
 801612a:	2a00      	cmp	r2, #0
 801612c:	da04      	bge.n	8016138 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801612e:	6823      	ldr	r3, [r4, #0]
 8016130:	4257      	negs	r7, r2
 8016132:	4276      	negs	r6, r6
 8016134:	425b      	negs	r3, r3
 8016136:	6023      	str	r3, [r4, #0]
 8016138:	2d00      	cmp	r5, #0
 801613a:	4638      	mov	r0, r7
 801613c:	bfba      	itte	lt
 801613e:	426d      	neglt	r5, r5
 8016140:	f04f 38ff 	movlt.w	r8, #4294967295
 8016144:	f04f 0801 	movge.w	r8, #1
 8016148:	f7ff ff64 	bl	8016014 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801614c:	ab03      	add	r3, sp, #12
 801614e:	463a      	mov	r2, r7
 8016150:	e9cd 5300 	strd	r5, r3, [sp]
 8016154:	4603      	mov	r3, r0
 8016156:	4648      	mov	r0, r9
 8016158:	f7ff ff7a 	bl	8016050 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801615c:	6823      	ldr	r3, [r4, #0]
 801615e:	9a03      	ldr	r2, [sp, #12]
 8016160:	4546      	cmp	r6, r8
 8016162:	441a      	add	r2, r3
 8016164:	fb92 f3f5 	sdiv	r3, r2, r5
 8016168:	4418      	add	r0, r3
 801616a:	fb05 2313 	mls	r3, r5, r3, r2
 801616e:	bf18      	it	ne
 8016170:	4240      	negne	r0, r0
 8016172:	1c72      	adds	r2, r6, #1
 8016174:	6023      	str	r3, [r4, #0]
 8016176:	d105      	bne.n	8016184 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016178:	2b00      	cmp	r3, #0
 801617a:	f1c3 0200 	rsb	r2, r3, #0
 801617e:	db0b      	blt.n	8016198 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8016180:	6022      	str	r2, [r4, #0]
 8016182:	e006      	b.n	8016192 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016184:	2e01      	cmp	r6, #1
 8016186:	d104      	bne.n	8016192 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016188:	2b00      	cmp	r3, #0
 801618a:	da02      	bge.n	8016192 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801618c:	442b      	add	r3, r5
 801618e:	3801      	subs	r0, #1
 8016190:	6023      	str	r3, [r4, #0]
 8016192:	b005      	add	sp, #20
 8016194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016198:	3801      	subs	r0, #1
 801619a:	1b52      	subs	r2, r2, r5
 801619c:	e7f0      	b.n	8016180 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080161a0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80161a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80161a4:	4c1c      	ldr	r4, [pc, #112]	; (8016218 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80161a6:	4605      	mov	r5, r0
 80161a8:	6807      	ldr	r7, [r0, #0]
 80161aa:	69a3      	ldr	r3, [r4, #24]
 80161ac:	b92b      	cbnz	r3, 80161ba <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80161ae:	6840      	ldr	r0, [r0, #4]
 80161b0:	e9c5 7000 	strd	r7, r0, [r5]
 80161b4:	b004      	add	sp, #16
 80161b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ba:	f04f 0802 	mov.w	r8, #2
 80161be:	68a2      	ldr	r2, [r4, #8]
 80161c0:	ae04      	add	r6, sp, #16
 80161c2:	6820      	ldr	r0, [r4, #0]
 80161c4:	fb93 f1f8 	sdiv	r1, r3, r8
 80161c8:	440a      	add	r2, r1
 80161ca:	69e1      	ldr	r1, [r4, #28]
 80161cc:	f846 2d04 	str.w	r2, [r6, #-4]!
 80161d0:	463a      	mov	r2, r7
 80161d2:	9600      	str	r6, [sp, #0]
 80161d4:	f7ff ff97 	bl	8016106 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80161d8:	69a3      	ldr	r3, [r4, #24]
 80161da:	4607      	mov	r7, r0
 80161dc:	686a      	ldr	r2, [r5, #4]
 80161de:	6a21      	ldr	r1, [r4, #32]
 80161e0:	9600      	str	r6, [sp, #0]
 80161e2:	6860      	ldr	r0, [r4, #4]
 80161e4:	f7ff ff8f 	bl	8016106 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80161e8:	69a3      	ldr	r3, [r4, #24]
 80161ea:	6962      	ldr	r2, [r4, #20]
 80161ec:	4407      	add	r7, r0
 80161ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80161f0:	9600      	str	r6, [sp, #0]
 80161f2:	68e0      	ldr	r0, [r4, #12]
 80161f4:	fb93 f8f8 	sdiv	r8, r3, r8
 80161f8:	4442      	add	r2, r8
 80161fa:	9203      	str	r2, [sp, #12]
 80161fc:	682a      	ldr	r2, [r5, #0]
 80161fe:	f7ff ff82 	bl	8016106 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016202:	4680      	mov	r8, r0
 8016204:	9600      	str	r6, [sp, #0]
 8016206:	69a3      	ldr	r3, [r4, #24]
 8016208:	686a      	ldr	r2, [r5, #4]
 801620a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801620c:	6920      	ldr	r0, [r4, #16]
 801620e:	f7ff ff7a 	bl	8016106 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016212:	4440      	add	r0, r8
 8016214:	e7cc      	b.n	80161b0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8016216:	bf00      	nop
 8016218:	2400f254 	.word	0x2400f254

0801621c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801621c:	4b07      	ldr	r3, [pc, #28]	; (801623c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801621e:	781b      	ldrb	r3, [r3, #0]
 8016220:	2b01      	cmp	r3, #1
 8016222:	d109      	bne.n	8016238 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8016224:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016228:	f9b0 2000 	ldrsh.w	r2, [r0]
 801622c:	8003      	strh	r3, [r0, #0]
 801622e:	4b04      	ldr	r3, [pc, #16]	; (8016240 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	3b01      	subs	r3, #1
 8016234:	1a9b      	subs	r3, r3, r2
 8016236:	800b      	strh	r3, [r1, #0]
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	2400f238 	.word	0x2400f238
 8016240:	2400f234 	.word	0x2400f234

08016244 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016244:	4b07      	ldr	r3, [pc, #28]	; (8016264 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016246:	b510      	push	{r4, lr}
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2b01      	cmp	r3, #1
 801624c:	d108      	bne.n	8016260 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801624e:	4b06      	ldr	r3, [pc, #24]	; (8016268 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016250:	880c      	ldrh	r4, [r1, #0]
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016258:	3b01      	subs	r3, #1
 801625a:	1b1b      	subs	r3, r3, r4
 801625c:	8003      	strh	r3, [r0, #0]
 801625e:	800a      	strh	r2, [r1, #0]
 8016260:	bd10      	pop	{r4, pc}
 8016262:	bf00      	nop
 8016264:	2400f238 	.word	0x2400f238
 8016268:	2400f234 	.word	0x2400f234

0801626c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801626c:	4b0a      	ldr	r3, [pc, #40]	; (8016298 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801626e:	b510      	push	{r4, lr}
 8016270:	781b      	ldrb	r3, [r3, #0]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d10e      	bne.n	8016294 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016276:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801627a:	8843      	ldrh	r3, [r0, #2]
 801627c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016280:	18ca      	adds	r2, r1, r3
 8016282:	4b06      	ldr	r3, [pc, #24]	; (801629c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016284:	8044      	strh	r4, [r0, #2]
 8016286:	881b      	ldrh	r3, [r3, #0]
 8016288:	1a9b      	subs	r3, r3, r2
 801628a:	8003      	strh	r3, [r0, #0]
 801628c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016290:	8081      	strh	r1, [r0, #4]
 8016292:	80c3      	strh	r3, [r0, #6]
 8016294:	bd10      	pop	{r4, pc}
 8016296:	bf00      	nop
 8016298:	2400f238 	.word	0x2400f238
 801629c:	2400f234 	.word	0x2400f234

080162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80162a0:	4b08      	ldr	r3, [pc, #32]	; (80162c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d10c      	bne.n	80162c2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80162a8:	8803      	ldrh	r3, [r0, #0]
 80162aa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80162ae:	8842      	ldrh	r2, [r0, #2]
 80162b0:	8002      	strh	r2, [r0, #0]
 80162b2:	185a      	adds	r2, r3, r1
 80162b4:	4b04      	ldr	r3, [pc, #16]	; (80162c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	1a9b      	subs	r3, r3, r2
 80162ba:	8043      	strh	r3, [r0, #2]
 80162bc:	88c3      	ldrh	r3, [r0, #6]
 80162be:	80c1      	strh	r1, [r0, #6]
 80162c0:	8083      	strh	r3, [r0, #4]
 80162c2:	4770      	bx	lr
 80162c4:	2400f238 	.word	0x2400f238
 80162c8:	2400f234 	.word	0x2400f234

080162cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80162cc:	4b07      	ldr	r3, [pc, #28]	; (80162ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80162ce:	b510      	push	{r4, lr}
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d108      	bne.n	80162e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80162d6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80162da:	f9b0 4000 	ldrsh.w	r4, [r0]
 80162de:	8003      	strh	r3, [r0, #0]
 80162e0:	8893      	ldrh	r3, [r2, #4]
 80162e2:	3b01      	subs	r3, #1
 80162e4:	1b1b      	subs	r3, r3, r4
 80162e6:	800b      	strh	r3, [r1, #0]
 80162e8:	bd10      	pop	{r4, pc}
 80162ea:	bf00      	nop
 80162ec:	2400f238 	.word	0x2400f238

080162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80162f0:	4b0a      	ldr	r3, [pc, #40]	; (801631c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80162f2:	460a      	mov	r2, r1
 80162f4:	b510      	push	{r4, lr}
 80162f6:	781b      	ldrb	r3, [r3, #0]
 80162f8:	2b01      	cmp	r3, #1
 80162fa:	d10d      	bne.n	8016318 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80162fc:	8881      	ldrh	r1, [r0, #4]
 80162fe:	8803      	ldrh	r3, [r0, #0]
 8016300:	440b      	add	r3, r1
 8016302:	4601      	mov	r1, r0
 8016304:	3b01      	subs	r3, #1
 8016306:	f821 3b02 	strh.w	r3, [r1], #2
 801630a:	f7ff ffdf 	bl	80162cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801630e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016312:	88c2      	ldrh	r2, [r0, #6]
 8016314:	80c3      	strh	r3, [r0, #6]
 8016316:	8082      	strh	r2, [r0, #4]
 8016318:	bd10      	pop	{r4, pc}
 801631a:	bf00      	nop
 801631c:	2400f238 	.word	0x2400f238

08016320 <_ZN8touchgfx11Application13requestRedrawEv>:
 8016320:	4b06      	ldr	r3, [pc, #24]	; (801633c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8016322:	2100      	movs	r1, #0
 8016324:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016328:	4b05      	ldr	r3, [pc, #20]	; (8016340 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801632a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801632e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016332:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8016336:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801633a:	4770      	bx	lr
 801633c:	2400f234 	.word	0x2400f234
 8016340:	2400f236 	.word	0x2400f236

08016344 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016344:	4b03      	ldr	r3, [pc, #12]	; (8016354 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016346:	6818      	ldr	r0, [r3, #0]
 8016348:	b110      	cbz	r0, 8016350 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801634a:	6803      	ldr	r3, [r0, #0]
 801634c:	699b      	ldr	r3, [r3, #24]
 801634e:	4718      	bx	r3
 8016350:	4770      	bx	lr
 8016352:	bf00      	nop
 8016354:	2400f284 	.word	0x2400f284

08016358 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016358:	4770      	bx	lr
	...

0801635c <_ZN8touchgfx11Application4drawEv>:
 801635c:	4b09      	ldr	r3, [pc, #36]	; (8016384 <_ZN8touchgfx11Application4drawEv+0x28>)
 801635e:	b507      	push	{r0, r1, r2, lr}
 8016360:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016364:	2100      	movs	r1, #0
 8016366:	4b08      	ldr	r3, [pc, #32]	; (8016388 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016368:	9100      	str	r1, [sp, #0]
 801636a:	4669      	mov	r1, sp
 801636c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016370:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016374:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016378:	6803      	ldr	r3, [r0, #0]
 801637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801637c:	4798      	blx	r3
 801637e:	b003      	add	sp, #12
 8016380:	f85d fb04 	ldr.w	pc, [sp], #4
 8016384:	2400f234 	.word	0x2400f234
 8016388:	2400f236 	.word	0x2400f236

0801638c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801638c:	4b03      	ldr	r3, [pc, #12]	; (801639c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801638e:	6818      	ldr	r0, [r3, #0]
 8016390:	b110      	cbz	r0, 8016398 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016392:	6803      	ldr	r3, [r0, #0]
 8016394:	69db      	ldr	r3, [r3, #28]
 8016396:	4718      	bx	r3
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop
 801639c:	2400f284 	.word	0x2400f284

080163a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80163a0:	4b03      	ldr	r3, [pc, #12]	; (80163b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80163a2:	6818      	ldr	r0, [r3, #0]
 80163a4:	b110      	cbz	r0, 80163ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80163a6:	6803      	ldr	r3, [r0, #0]
 80163a8:	6a1b      	ldr	r3, [r3, #32]
 80163aa:	4718      	bx	r3
 80163ac:	4770      	bx	lr
 80163ae:	bf00      	nop
 80163b0:	2400f284 	.word	0x2400f284

080163b4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80163b4:	2300      	movs	r3, #0
 80163b6:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80163ba:	4770      	bx	lr

080163bc <_ZN8touchgfx11Application14handleKeyEventEh>:
 80163bc:	4b03      	ldr	r3, [pc, #12]	; (80163cc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80163be:	6818      	ldr	r0, [r3, #0]
 80163c0:	b110      	cbz	r0, 80163c8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80163c2:	6803      	ldr	r3, [r0, #0]
 80163c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163c6:	4718      	bx	r3
 80163c8:	4770      	bx	lr
 80163ca:	bf00      	nop
 80163cc:	2400f284 	.word	0x2400f284

080163d0 <_ZN8touchgfx11ApplicationD1Ev>:
 80163d0:	4770      	bx	lr

080163d2 <_ZN8touchgfx11ApplicationD0Ev>:
 80163d2:	b510      	push	{r4, lr}
 80163d4:	4604      	mov	r4, r0
 80163d6:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80163da:	f00b fe42 	bl	8022062 <_ZdlPvj>
 80163de:	4620      	mov	r0, r4
 80163e0:	bd10      	pop	{r4, pc}

080163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80163e2:	b510      	push	{r4, lr}
 80163e4:	f9b1 4000 	ldrsh.w	r4, [r1]
 80163e8:	888a      	ldrh	r2, [r1, #4]
 80163ea:	f9b0 3000 	ldrsh.w	r3, [r0]
 80163ee:	4422      	add	r2, r4
 80163f0:	b212      	sxth	r2, r2
 80163f2:	4293      	cmp	r3, r2
 80163f4:	da15      	bge.n	8016422 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80163f6:	8882      	ldrh	r2, [r0, #4]
 80163f8:	4413      	add	r3, r2
 80163fa:	b21b      	sxth	r3, r3
 80163fc:	429c      	cmp	r4, r3
 80163fe:	da10      	bge.n	8016422 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016400:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8016404:	88c9      	ldrh	r1, [r1, #6]
 8016406:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801640a:	4419      	add	r1, r3
 801640c:	b209      	sxth	r1, r1
 801640e:	428a      	cmp	r2, r1
 8016410:	da07      	bge.n	8016422 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8016412:	88c0      	ldrh	r0, [r0, #6]
 8016414:	4410      	add	r0, r2
 8016416:	b200      	sxth	r0, r0
 8016418:	4283      	cmp	r3, r0
 801641a:	bfac      	ite	ge
 801641c:	2000      	movge	r0, #0
 801641e:	2001      	movlt	r0, #1
 8016420:	bd10      	pop	{r4, pc}
 8016422:	2000      	movs	r0, #0
 8016424:	e7fc      	b.n	8016420 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08016426 <_ZN8touchgfx4Rect10restrictToEss>:
 8016426:	f9b0 3000 	ldrsh.w	r3, [r0]
 801642a:	2b00      	cmp	r3, #0
 801642c:	b510      	push	{r4, lr}
 801642e:	da04      	bge.n	801643a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016430:	8884      	ldrh	r4, [r0, #4]
 8016432:	4423      	add	r3, r4
 8016434:	8083      	strh	r3, [r0, #4]
 8016436:	2300      	movs	r3, #0
 8016438:	8003      	strh	r3, [r0, #0]
 801643a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801643e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016442:	1b09      	subs	r1, r1, r4
 8016444:	428b      	cmp	r3, r1
 8016446:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801644a:	bfc8      	it	gt
 801644c:	8081      	strhgt	r1, [r0, #4]
 801644e:	2b00      	cmp	r3, #0
 8016450:	da04      	bge.n	801645c <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016452:	88c1      	ldrh	r1, [r0, #6]
 8016454:	440b      	add	r3, r1
 8016456:	80c3      	strh	r3, [r0, #6]
 8016458:	2300      	movs	r3, #0
 801645a:	8043      	strh	r3, [r0, #2]
 801645c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016460:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016464:	1a52      	subs	r2, r2, r1
 8016466:	4293      	cmp	r3, r2
 8016468:	bfc8      	it	gt
 801646a:	80c2      	strhgt	r2, [r0, #6]
 801646c:	bd10      	pop	{r4, pc}
	...

08016470 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016470:	4b10      	ldr	r3, [pc, #64]	; (80164b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016472:	b510      	push	{r4, lr}
 8016474:	460c      	mov	r4, r1
 8016476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801647a:	4b0f      	ldr	r3, [pc, #60]	; (80164b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801647c:	4620      	mov	r0, r4
 801647e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016482:	f7ff ffd0 	bl	8016426 <_ZN8touchgfx4Rect10restrictToEss>
 8016486:	4b0d      	ldr	r3, [pc, #52]	; (80164bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016488:	6818      	ldr	r0, [r3, #0]
 801648a:	b190      	cbz	r0, 80164b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801648c:	6803      	ldr	r3, [r0, #0]
 801648e:	4621      	mov	r1, r4
 8016490:	689b      	ldr	r3, [r3, #8]
 8016492:	4798      	blx	r3
 8016494:	4b0a      	ldr	r3, [pc, #40]	; (80164c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016496:	6818      	ldr	r0, [r3, #0]
 8016498:	b118      	cbz	r0, 80164a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801649a:	6803      	ldr	r3, [r0, #0]
 801649c:	4621      	mov	r1, r4
 801649e:	689b      	ldr	r3, [r3, #8]
 80164a0:	4798      	blx	r3
 80164a2:	4b08      	ldr	r3, [pc, #32]	; (80164c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80164a4:	4621      	mov	r1, r4
 80164a6:	6818      	ldr	r0, [r3, #0]
 80164a8:	6803      	ldr	r3, [r0, #0]
 80164aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164ae:	69db      	ldr	r3, [r3, #28]
 80164b0:	4718      	bx	r3
 80164b2:	bd10      	pop	{r4, pc}
 80164b4:	2400f236 	.word	0x2400f236
 80164b8:	2400f234 	.word	0x2400f234
 80164bc:	2400f284 	.word	0x2400f284
 80164c0:	2400f280 	.word	0x2400f280
 80164c4:	2400f240 	.word	0x2400f240

080164c8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80164c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ca:	4606      	mov	r6, r0
 80164cc:	4608      	mov	r0, r1
 80164ce:	460f      	mov	r7, r1
 80164d0:	f7f9 ff93 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80164d4:	b9e8      	cbnz	r0, 8016512 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80164d6:	f9b7 5000 	ldrsh.w	r5, [r7]
 80164da:	f9b6 4000 	ldrsh.w	r4, [r6]
 80164de:	42a5      	cmp	r5, r4
 80164e0:	db17      	blt.n	8016512 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80164e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80164e6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80164ea:	429a      	cmp	r2, r3
 80164ec:	db11      	blt.n	8016512 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80164ee:	88b9      	ldrh	r1, [r7, #4]
 80164f0:	440d      	add	r5, r1
 80164f2:	88b1      	ldrh	r1, [r6, #4]
 80164f4:	440c      	add	r4, r1
 80164f6:	b22d      	sxth	r5, r5
 80164f8:	b224      	sxth	r4, r4
 80164fa:	42a5      	cmp	r5, r4
 80164fc:	dc09      	bgt.n	8016512 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80164fe:	88f8      	ldrh	r0, [r7, #6]
 8016500:	4410      	add	r0, r2
 8016502:	88f2      	ldrh	r2, [r6, #6]
 8016504:	4413      	add	r3, r2
 8016506:	b200      	sxth	r0, r0
 8016508:	b21b      	sxth	r3, r3
 801650a:	4298      	cmp	r0, r3
 801650c:	bfcc      	ite	gt
 801650e:	2000      	movgt	r0, #0
 8016510:	2001      	movle	r0, #1
 8016512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016514 <_ZN8touchgfx11Application11getInstanceEv>:
 8016514:	4b01      	ldr	r3, [pc, #4]	; (801651c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016516:	6818      	ldr	r0, [r3, #0]
 8016518:	4770      	bx	lr
 801651a:	bf00      	nop
 801651c:	2400f294 	.word	0x2400f294

08016520 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016520:	2300      	movs	r3, #0
 8016522:	b510      	push	{r4, lr}
 8016524:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8016528:	4604      	mov	r4, r0
 801652a:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801652e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016532:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016536:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801653a:	429a      	cmp	r2, r3
 801653c:	d90e      	bls.n	801655c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801653e:	18e2      	adds	r2, r4, r3
 8016540:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8016544:	b122      	cbz	r2, 8016550 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016546:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801654a:	6803      	ldr	r3, [r0, #0]
 801654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801654e:	4798      	blx	r3
 8016550:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016554:	3301      	adds	r3, #1
 8016556:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801655a:	e7ea      	b.n	8016532 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801655c:	bd10      	pop	{r4, pc}

0801655e <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801655e:	2300      	movs	r3, #0
 8016560:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8016564:	30a4      	adds	r0, #164	; 0xa4
 8016566:	f820 3c24 	strh.w	r3, [r0, #-36]
 801656a:	f802 3b01 	strb.w	r3, [r2], #1
 801656e:	4282      	cmp	r2, r0
 8016570:	d1fb      	bne.n	801656a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016572:	4770      	bx	lr

08016574 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016574:	b570      	push	{r4, r5, r6, lr}
 8016576:	4c0b      	ldr	r4, [pc, #44]	; (80165a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016578:	4605      	mov	r5, r0
 801657a:	460e      	mov	r6, r1
 801657c:	6820      	ldr	r0, [r4, #0]
 801657e:	b110      	cbz	r0, 8016586 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016580:	6803      	ldr	r3, [r0, #0]
 8016582:	695b      	ldr	r3, [r3, #20]
 8016584:	4798      	blx	r3
 8016586:	1d28      	adds	r0, r5, #4
 8016588:	f7ff ffe9 	bl	801655e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801658c:	6026      	str	r6, [r4, #0]
 801658e:	6833      	ldr	r3, [r6, #0]
 8016590:	4630      	mov	r0, r6
 8016592:	68db      	ldr	r3, [r3, #12]
 8016594:	4798      	blx	r3
 8016596:	682b      	ldr	r3, [r5, #0]
 8016598:	4628      	mov	r0, r5
 801659a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801659c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165a0:	4718      	bx	r3
 80165a2:	bf00      	nop
 80165a4:	2400f284 	.word	0x2400f284

080165a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80165a8:	2300      	movs	r3, #0
 80165aa:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80165ae:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80165b2:	461a      	mov	r2, r3
 80165b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165b6:	461c      	mov	r4, r3
 80165b8:	461d      	mov	r5, r3
 80165ba:	459c      	cmp	ip, r3
 80165bc:	dd1a      	ble.n	80165f4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80165be:	18c6      	adds	r6, r0, r3
 80165c0:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80165c4:	b16e      	cbz	r6, 80165e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d008      	beq.n	80165dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80165ca:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80165ce:	fa1f fe82 	uxth.w	lr, r2
 80165d2:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80165d6:	1887      	adds	r7, r0, r2
 80165d8:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80165dc:	3201      	adds	r2, #1
 80165de:	3301      	adds	r3, #1
 80165e0:	e7eb      	b.n	80165ba <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80165e2:	4299      	cmp	r1, r3
 80165e4:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80165e8:	bfa8      	it	ge
 80165ea:	3501      	addge	r5, #1
 80165ec:	429e      	cmp	r6, r3
 80165ee:	bfc8      	it	gt
 80165f0:	3401      	addgt	r4, #1
 80165f2:	e7f4      	b.n	80165de <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80165f4:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80165f8:	1b49      	subs	r1, r1, r5
 80165fa:	1b1b      	subs	r3, r3, r4
 80165fc:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8016600:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8016604:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8016608:	4293      	cmp	r3, r2
 801660a:	dd03      	ble.n	8016614 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801660c:	3b01      	subs	r3, #1
 801660e:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8016612:	e7f7      	b.n	8016604 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016618 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016618:	b570      	push	{r4, r5, r6, lr}
 801661a:	4d16      	ldr	r5, [pc, #88]	; (8016674 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801661c:	4604      	mov	r4, r0
 801661e:	6828      	ldr	r0, [r5, #0]
 8016620:	b140      	cbz	r0, 8016634 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016622:	7a03      	ldrb	r3, [r0, #8]
 8016624:	b933      	cbnz	r3, 8016634 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016626:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801662a:	6803      	ldr	r3, [r0, #0]
 801662c:	689b      	ldr	r3, [r3, #8]
 801662e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016632:	4718      	bx	r3
 8016634:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8016638:	4e0f      	ldr	r6, [pc, #60]	; (8016678 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801663a:	b973      	cbnz	r3, 801665a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801663c:	b168      	cbz	r0, 801665a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801663e:	7a03      	ldrb	r3, [r0, #8]
 8016640:	b15b      	cbz	r3, 801665a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016642:	6830      	ldr	r0, [r6, #0]
 8016644:	b110      	cbz	r0, 801664c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016646:	6803      	ldr	r3, [r0, #0]
 8016648:	691b      	ldr	r3, [r3, #16]
 801664a:	4798      	blx	r3
 801664c:	6828      	ldr	r0, [r5, #0]
 801664e:	6803      	ldr	r3, [r0, #0]
 8016650:	68db      	ldr	r3, [r3, #12]
 8016652:	4798      	blx	r3
 8016654:	2301      	movs	r3, #1
 8016656:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801665a:	3404      	adds	r4, #4
 801665c:	4620      	mov	r0, r4
 801665e:	f7ff ff5f 	bl	8016520 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016662:	4620      	mov	r0, r4
 8016664:	f7ff ffa0 	bl	80165a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016668:	6830      	ldr	r0, [r6, #0]
 801666a:	b110      	cbz	r0, 8016672 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801666c:	6803      	ldr	r3, [r0, #0]
 801666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016670:	e7dd      	b.n	801662e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016672:	bd70      	pop	{r4, r5, r6, pc}
 8016674:	2400f288 	.word	0x2400f288
 8016678:	2400f284 	.word	0x2400f284

0801667c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801667c:	4603      	mov	r3, r0
 801667e:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8016682:	2200      	movs	r2, #0
 8016684:	801a      	strh	r2, [r3, #0]
 8016686:	3308      	adds	r3, #8
 8016688:	f823 2c06 	strh.w	r2, [r3, #-6]
 801668c:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016690:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016694:	428b      	cmp	r3, r1
 8016696:	d1f5      	bne.n	8016684 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016698:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801669c:	4770      	bx	lr
	...

080166a0 <_ZN8touchgfx11ApplicationC1Ev>:
 80166a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166a2:	4b1d      	ldr	r3, [pc, #116]	; (8016718 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80166a4:	4606      	mov	r6, r0
 80166a6:	4604      	mov	r4, r0
 80166a8:	2500      	movs	r5, #0
 80166aa:	f846 3b04 	str.w	r3, [r6], #4
 80166ae:	22a8      	movs	r2, #168	; 0xa8
 80166b0:	2100      	movs	r1, #0
 80166b2:	4630      	mov	r0, r6
 80166b4:	f00b fe70 	bl	8022398 <memset>
 80166b8:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80166bc:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80166c0:	4f16      	ldr	r7, [pc, #88]	; (801671c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80166c2:	f7ff ffdb 	bl	801667c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80166c6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80166ca:	f7ff ffd7 	bl	801667c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80166ce:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80166d2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80166d6:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80166da:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80166de:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80166e2:	490f      	ldr	r1, [pc, #60]	; (8016720 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80166e4:	480f      	ldr	r0, [pc, #60]	; (8016724 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80166e6:	f00b f891 	bl	802180c <CRC_Lock>
 80166ea:	4b0f      	ldr	r3, [pc, #60]	; (8016728 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80166ec:	b158      	cbz	r0, 8016706 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80166ee:	801d      	strh	r5, [r3, #0]
 80166f0:	2300      	movs	r3, #0
 80166f2:	4a0e      	ldr	r2, [pc, #56]	; (801672c <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80166f4:	4630      	mov	r0, r6
 80166f6:	6013      	str	r3, [r2, #0]
 80166f8:	4a0d      	ldr	r2, [pc, #52]	; (8016730 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80166fa:	603b      	str	r3, [r7, #0]
 80166fc:	6013      	str	r3, [r2, #0]
 80166fe:	f7ff ff2e 	bl	801655e <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016702:	4620      	mov	r0, r4
 8016704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801670a:	2002      	movs	r0, #2
 801670c:	801a      	strh	r2, [r3, #0]
 801670e:	6038      	str	r0, [r7, #0]
 8016710:	f001 faee 	bl	8017cf0 <_ZN8touchgfx6Screen4drawEv>
 8016714:	e7ec      	b.n	80166f0 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016716:	bf00      	nop
 8016718:	080256f0 	.word	0x080256f0
 801671c:	2400f284 	.word	0x2400f284
 8016720:	b5e8b5cd 	.word	0xb5e8b5cd
 8016724:	f407a5c2 	.word	0xf407a5c2
 8016728:	2400005c 	.word	0x2400005c
 801672c:	2400f294 	.word	0x2400f294
 8016730:	2400f288 	.word	0x2400f288

08016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016734:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8016738:	3b01      	subs	r3, #1
 801673a:	b29b      	uxth	r3, r3
 801673c:	428b      	cmp	r3, r1
 801673e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8016742:	b510      	push	{r4, lr}
 8016744:	d908      	bls.n	8016758 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016746:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801674a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016754:	685a      	ldr	r2, [r3, #4]
 8016756:	6062      	str	r2, [r4, #4]
 8016758:	bd10      	pop	{r4, pc}
	...

0801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016760:	b08f      	sub	sp, #60	; 0x3c
 8016762:	4b8f      	ldr	r3, [pc, #572]	; (80169a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016764:	4683      	mov	fp, r0
 8016766:	ac0a      	add	r4, sp, #40	; 0x28
 8016768:	e884 0006 	stmia.w	r4, {r1, r2}
 801676c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016770:	4620      	mov	r0, r4
 8016772:	4b8c      	ldr	r3, [pc, #560]	; (80169a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016774:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016778:	f7ff fe55 	bl	8016426 <_ZN8touchgfx4Rect10restrictToEss>
 801677c:	4620      	mov	r0, r4
 801677e:	f7f9 fe3c 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016782:	2800      	cmp	r0, #0
 8016784:	d16a      	bne.n	801685c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016786:	9403      	str	r4, [sp, #12]
 8016788:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801678c:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8016790:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016794:	9301      	str	r3, [sp, #4]
 8016796:	35a4      	adds	r5, #164	; 0xa4
 8016798:	b15c      	cbz	r4, 80167b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801679a:	4629      	mov	r1, r5
 801679c:	9803      	ldr	r0, [sp, #12]
 801679e:	f7ff fe93 	bl	80164c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80167a2:	3c01      	subs	r4, #1
 80167a4:	b118      	cbz	r0, 80167ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80167a6:	b2a1      	uxth	r1, r4
 80167a8:	9801      	ldr	r0, [sp, #4]
 80167aa:	f7ff ffc3 	bl	8016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80167ae:	3d08      	subs	r5, #8
 80167b0:	e7f2      	b.n	8016798 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80167b2:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80167b6:	f108 33ff 	add.w	r3, r8, #4294967295
 80167ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80167be:	9302      	str	r3, [sp, #8]
 80167c0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80167c4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80167c8:	9306      	str	r3, [sp, #24]
 80167ca:	445c      	add	r4, fp
 80167cc:	2500      	movs	r5, #0
 80167ce:	4626      	mov	r6, r4
 80167d0:	f8cd 8014 	str.w	r8, [sp, #20]
 80167d4:	462f      	mov	r7, r5
 80167d6:	9b05      	ldr	r3, [sp, #20]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d073      	beq.n	80168c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80167dc:	9903      	ldr	r1, [sp, #12]
 80167de:	4630      	mov	r0, r6
 80167e0:	f7ff fdff 	bl	80163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80167e4:	b350      	cbz	r0, 801683c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80167e6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80167ea:	f9b6 c000 	ldrsh.w	ip, [r6]
 80167ee:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80167f2:	45e6      	cmp	lr, ip
 80167f4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80167f8:	db33      	blt.n	8016862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80167fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80167fe:	88b3      	ldrh	r3, [r6, #4]
 8016800:	4472      	add	r2, lr
 8016802:	4463      	add	r3, ip
 8016804:	b212      	sxth	r2, r2
 8016806:	b21b      	sxth	r3, r3
 8016808:	429a      	cmp	r2, r3
 801680a:	dc2a      	bgt.n	8016862 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801680c:	fa1f f289 	uxth.w	r2, r9
 8016810:	88f3      	ldrh	r3, [r6, #6]
 8016812:	45ca      	cmp	sl, r9
 8016814:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8016818:	4413      	add	r3, r2
 801681a:	fa1f fc8a 	uxth.w	ip, sl
 801681e:	b29b      	uxth	r3, r3
 8016820:	fa0f fe83 	sxth.w	lr, r3
 8016824:	db0f      	blt.n	8016846 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016826:	eba3 030c 	sub.w	r3, r3, ip
 801682a:	1ac9      	subs	r1, r1, r3
 801682c:	b209      	sxth	r1, r1
 801682e:	2900      	cmp	r1, #0
 8016830:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016834:	dd12      	ble.n	801685c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016836:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801683a:	4605      	mov	r5, r0
 801683c:	9b05      	ldr	r3, [sp, #20]
 801683e:	3e08      	subs	r6, #8
 8016840:	3b01      	subs	r3, #1
 8016842:	9305      	str	r3, [sp, #20]
 8016844:	e7c7      	b.n	80167d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016846:	4461      	add	r1, ip
 8016848:	b209      	sxth	r1, r1
 801684a:	4571      	cmp	r1, lr
 801684c:	dc38      	bgt.n	80168c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801684e:	eba2 020c 	sub.w	r2, r2, ip
 8016852:	b212      	sxth	r2, r2
 8016854:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016858:	2a00      	cmp	r2, #0
 801685a:	dcee      	bgt.n	801683a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801685c:	b00f      	add	sp, #60	; 0x3c
 801685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016862:	45ca      	cmp	sl, r9
 8016864:	db2c      	blt.n	80168c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016866:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801686a:	449a      	add	sl, r3
 801686c:	88f3      	ldrh	r3, [r6, #6]
 801686e:	4499      	add	r9, r3
 8016870:	fa0f fa8a 	sxth.w	sl, sl
 8016874:	fa0f f989 	sxth.w	r9, r9
 8016878:	45ca      	cmp	sl, r9
 801687a:	dc21      	bgt.n	80168c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801687c:	fa1f f28c 	uxth.w	r2, ip
 8016880:	88b3      	ldrh	r3, [r6, #4]
 8016882:	45e6      	cmp	lr, ip
 8016884:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016888:	4413      	add	r3, r2
 801688a:	fa1f f98e 	uxth.w	r9, lr
 801688e:	b29b      	uxth	r3, r3
 8016890:	fa0f fa83 	sxth.w	sl, r3
 8016894:	db0a      	blt.n	80168ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016896:	eba3 0309 	sub.w	r3, r3, r9
 801689a:	1ac9      	subs	r1, r1, r3
 801689c:	b209      	sxth	r1, r1
 801689e:	2900      	cmp	r1, #0
 80168a0:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80168a4:	ddda      	ble.n	801685c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80168a6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80168aa:	e7c6      	b.n	801683a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80168ac:	4449      	add	r1, r9
 80168ae:	b209      	sxth	r1, r1
 80168b0:	4551      	cmp	r1, sl
 80168b2:	dc05      	bgt.n	80168c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80168b4:	eba2 0209 	sub.w	r2, r2, r9
 80168b8:	b212      	sxth	r2, r2
 80168ba:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80168be:	e7cb      	b.n	8016858 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80168c0:	4607      	mov	r7, r0
 80168c2:	e7bb      	b.n	801683c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80168c4:	2d00      	cmp	r5, #0
 80168c6:	d181      	bne.n	80167cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80168c8:	2f00      	cmp	r7, #0
 80168ca:	f000 81dd 	beq.w	8016c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80168ce:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80168d2:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80168d6:	b2b3      	uxth	r3, r6
 80168d8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80168dc:	b2b9      	uxth	r1, r7
 80168de:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80168e2:	441a      	add	r2, r3
 80168e4:	448a      	add	sl, r1
 80168e6:	9105      	str	r1, [sp, #20]
 80168e8:	b292      	uxth	r2, r2
 80168ea:	fa1f fa8a 	uxth.w	sl, sl
 80168ee:	fa0f f882 	sxth.w	r8, r2
 80168f2:	fa0f f98a 	sxth.w	r9, sl
 80168f6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80168fa:	9b04      	ldr	r3, [sp, #16]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d053      	beq.n	80169a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016900:	9903      	ldr	r1, [sp, #12]
 8016902:	4620      	mov	r0, r4
 8016904:	f7ff fd6d 	bl	80163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016908:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801690c:	b1c0      	cbz	r0, 8016940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801690e:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016912:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016916:	4576      	cmp	r6, lr
 8016918:	dc23      	bgt.n	8016962 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801691a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801691e:	44f4      	add	ip, lr
 8016920:	fa0f fc8c 	sxth.w	ip, ip
 8016924:	45e0      	cmp	r8, ip
 8016926:	db1c      	blt.n	8016962 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016928:	428f      	cmp	r7, r1
 801692a:	fa1f fc81 	uxth.w	ip, r1
 801692e:	88e1      	ldrh	r1, [r4, #6]
 8016930:	dc0d      	bgt.n	801694e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8016932:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016936:	f8a4 9002 	strh.w	r9, [r4, #2]
 801693a:	eba1 010c 	sub.w	r1, r1, ip
 801693e:	80e1      	strh	r1, [r4, #6]
 8016940:	4628      	mov	r0, r5
 8016942:	9904      	ldr	r1, [sp, #16]
 8016944:	3c08      	subs	r4, #8
 8016946:	4605      	mov	r5, r0
 8016948:	3901      	subs	r1, #1
 801694a:	9104      	str	r1, [sp, #16]
 801694c:	e7d3      	b.n	80168f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801694e:	4461      	add	r1, ip
 8016950:	b209      	sxth	r1, r1
 8016952:	4549      	cmp	r1, r9
 8016954:	dcf5      	bgt.n	8016942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016956:	9905      	ldr	r1, [sp, #20]
 8016958:	eba1 0c0c 	sub.w	ip, r1, ip
 801695c:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016960:	e7ee      	b.n	8016940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016962:	428f      	cmp	r7, r1
 8016964:	dced      	bgt.n	8016942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016966:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801696a:	4461      	add	r1, ip
 801696c:	b209      	sxth	r1, r1
 801696e:	4589      	cmp	r9, r1
 8016970:	dbe7      	blt.n	8016942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016972:	4576      	cmp	r6, lr
 8016974:	fa1f fc8e 	uxth.w	ip, lr
 8016978:	88a1      	ldrh	r1, [r4, #4]
 801697a:	dc07      	bgt.n	801698c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801697c:	eba2 0c0c 	sub.w	ip, r2, ip
 8016980:	f8a4 8000 	strh.w	r8, [r4]
 8016984:	eba1 010c 	sub.w	r1, r1, ip
 8016988:	80a1      	strh	r1, [r4, #4]
 801698a:	e7d9      	b.n	8016940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801698c:	4461      	add	r1, ip
 801698e:	b209      	sxth	r1, r1
 8016990:	4588      	cmp	r8, r1
 8016992:	dbd6      	blt.n	8016942 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016994:	eba3 0c0c 	sub.w	ip, r3, ip
 8016998:	f8a4 c004 	strh.w	ip, [r4, #4]
 801699c:	e7d0      	b.n	8016940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801699e:	bf00      	nop
 80169a0:	2400f236 	.word	0x2400f236
 80169a4:	2400f234 	.word	0x2400f234
 80169a8:	2d00      	cmp	r5, #0
 80169aa:	f000 816d 	beq.w	8016c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80169ae:	9b06      	ldr	r3, [sp, #24]
 80169b0:	445b      	add	r3, fp
 80169b2:	461c      	mov	r4, r3
 80169b4:	9b02      	ldr	r3, [sp, #8]
 80169b6:	3301      	adds	r3, #1
 80169b8:	f000 8166 	beq.w	8016c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80169bc:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80169c0:	9803      	ldr	r0, [sp, #12]
 80169c2:	4629      	mov	r1, r5
 80169c4:	f7ff fd80 	bl	80164c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80169c8:	b120      	cbz	r0, 80169d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80169ca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80169ce:	9801      	ldr	r0, [sp, #4]
 80169d0:	f7ff feb0 	bl	8016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80169d4:	9903      	ldr	r1, [sp, #12]
 80169d6:	4628      	mov	r0, r5
 80169d8:	f7ff fd03 	bl	80163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80169dc:	2800      	cmp	r0, #0
 80169de:	f000 809c 	beq.w	8016b1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80169e2:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80169e6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80169ea:	fa1f f189 	uxth.w	r1, r9
 80169ee:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80169f2:	9309      	str	r3, [sp, #36]	; 0x24
 80169f4:	eb01 0c03 	add.w	ip, r1, r3
 80169f8:	b283      	uxth	r3, r0
 80169fa:	4548      	cmp	r0, r9
 80169fc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8016a00:	fa1f fa8c 	uxth.w	sl, ip
 8016a04:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016a08:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8016a0c:	eb03 050c 	add.w	r5, r3, ip
 8016a10:	b2ad      	uxth	r5, r5
 8016a12:	9505      	str	r5, [sp, #20]
 8016a14:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016a18:	9504      	str	r5, [sp, #16]
 8016a1a:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8016a1e:	f340 8099 	ble.w	8016b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016a22:	1a5b      	subs	r3, r3, r1
 8016a24:	4596      	cmp	lr, r2
 8016a26:	fa0f f08a 	sxth.w	r0, sl
 8016a2a:	b29b      	uxth	r3, r3
 8016a2c:	b21e      	sxth	r6, r3
 8016a2e:	dd2e      	ble.n	8016a8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016a30:	9f02      	ldr	r7, [sp, #8]
 8016a32:	fa1f fe8e 	uxth.w	lr, lr
 8016a36:	b292      	uxth	r2, r2
 8016a38:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016a3c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016a40:	9f04      	ldr	r7, [sp, #16]
 8016a42:	ebae 0102 	sub.w	r1, lr, r2
 8016a46:	44a6      	add	lr, r4
 8016a48:	1a3f      	subs	r7, r7, r0
 8016a4a:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8016a4e:	b289      	uxth	r1, r1
 8016a50:	4402      	add	r2, r0
 8016a52:	fa0f fe8e 	sxth.w	lr, lr
 8016a56:	b20d      	sxth	r5, r1
 8016a58:	b212      	sxth	r2, r2
 8016a5a:	436f      	muls	r7, r5
 8016a5c:	ebae 0202 	sub.w	r2, lr, r2
 8016a60:	4372      	muls	r2, r6
 8016a62:	4297      	cmp	r7, r2
 8016a64:	db09      	blt.n	8016a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016a66:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8016a6a:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8016a6e:	449c      	add	ip, r3
 8016a70:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016a74:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016a78:	e686      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016a7a:	4421      	add	r1, r4
 8016a7c:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8016a80:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8016a84:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016a88:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016a8c:	e67c      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016a8e:	9f04      	ldr	r7, [sp, #16]
 8016a90:	42b8      	cmp	r0, r7
 8016a92:	da27      	bge.n	8016ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016a94:	9902      	ldr	r1, [sp, #8]
 8016a96:	1a3f      	subs	r7, r7, r0
 8016a98:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8016a9c:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016aa0:	eb05 010e 	add.w	r1, r5, lr
 8016aa4:	fa1f f881 	uxth.w	r8, r1
 8016aa8:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8016aac:	4411      	add	r1, r2
 8016aae:	fa0f f988 	sxth.w	r9, r8
 8016ab2:	eba2 020e 	sub.w	r2, r2, lr
 8016ab6:	eba1 0108 	sub.w	r1, r1, r8
 8016aba:	4372      	muls	r2, r6
 8016abc:	b289      	uxth	r1, r1
 8016abe:	fa0f f881 	sxth.w	r8, r1
 8016ac2:	fb08 f707 	mul.w	r7, r8, r7
 8016ac6:	42ba      	cmp	r2, r7
 8016ac8:	dc06      	bgt.n	8016ad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016aca:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8016ace:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8016ad2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8016ad6:	e7ca      	b.n	8016a6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016ad8:	4429      	add	r1, r5
 8016ada:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8016ade:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016ae2:	e651      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016ae4:	9805      	ldr	r0, [sp, #20]
 8016ae6:	2d06      	cmp	r5, #6
 8016ae8:	ebaa 0000 	sub.w	r0, sl, r0
 8016aec:	b280      	uxth	r0, r0
 8016aee:	fa0f fe80 	sxth.w	lr, r0
 8016af2:	d817      	bhi.n	8016b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016af4:	9b04      	ldr	r3, [sp, #16]
 8016af6:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8016afa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016afe:	1c6b      	adds	r3, r5, #1
 8016b00:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8016b04:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016b08:	9b01      	ldr	r3, [sp, #4]
 8016b0a:	9801      	ldr	r0, [sp, #4]
 8016b0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016b10:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016b14:	805a      	strh	r2, [r3, #2]
 8016b16:	809e      	strh	r6, [r3, #4]
 8016b18:	80d9      	strh	r1, [r3, #6]
 8016b1a:	9b02      	ldr	r3, [sp, #8]
 8016b1c:	3c08      	subs	r4, #8
 8016b1e:	3b01      	subs	r3, #1
 8016b20:	9302      	str	r3, [sp, #8]
 8016b22:	e747      	b.n	80169b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016b24:	9a02      	ldr	r2, [sp, #8]
 8016b26:	45b6      	cmp	lr, r6
 8016b28:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016b2c:	db0d      	blt.n	8016b4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016b2e:	449c      	add	ip, r3
 8016b30:	445a      	add	r2, fp
 8016b32:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016b36:	fa1f fc8c 	uxth.w	ip, ip
 8016b3a:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8016b3e:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016b42:	448c      	add	ip, r1
 8016b44:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016b48:	e61e      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016b4a:	445a      	add	r2, fp
 8016b4c:	4484      	add	ip, r0
 8016b4e:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8016b52:	e78f      	b.n	8016a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016b54:	fa1f f18e 	uxth.w	r1, lr
 8016b58:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016b5c:	b293      	uxth	r3, r2
 8016b5e:	4596      	cmp	lr, r2
 8016b60:	eb01 0806 	add.w	r8, r1, r6
 8016b64:	9306      	str	r3, [sp, #24]
 8016b66:	fa1f f888 	uxth.w	r8, r8
 8016b6a:	9f06      	ldr	r7, [sp, #24]
 8016b6c:	fa0f f388 	sxth.w	r3, r8
 8016b70:	9307      	str	r3, [sp, #28]
 8016b72:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016b76:	443b      	add	r3, r7
 8016b78:	b29b      	uxth	r3, r3
 8016b7a:	9308      	str	r3, [sp, #32]
 8016b7c:	da24      	bge.n	8016bc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016b7e:	9905      	ldr	r1, [sp, #20]
 8016b80:	eba3 0308 	sub.w	r3, r3, r8
 8016b84:	eba2 020e 	sub.w	r2, r2, lr
 8016b88:	eba9 0000 	sub.w	r0, r9, r0
 8016b8c:	ebaa 0401 	sub.w	r4, sl, r1
 8016b90:	b29b      	uxth	r3, r3
 8016b92:	b2a4      	uxth	r4, r4
 8016b94:	b219      	sxth	r1, r3
 8016b96:	b225      	sxth	r5, r4
 8016b98:	4348      	muls	r0, r1
 8016b9a:	436a      	muls	r2, r5
 8016b9c:	4282      	cmp	r2, r0
 8016b9e:	9a02      	ldr	r2, [sp, #8]
 8016ba0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016ba4:	445a      	add	r2, fp
 8016ba6:	dc06      	bgt.n	8016bb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016ba8:	9b07      	ldr	r3, [sp, #28]
 8016baa:	44a4      	add	ip, r4
 8016bac:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8016bb0:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8016bb4:	e75e      	b.n	8016a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016bb6:	9904      	ldr	r1, [sp, #16]
 8016bb8:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8016bbc:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8016bc0:	4433      	add	r3, r6
 8016bc2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016bc6:	e5df      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016bc8:	9f06      	ldr	r7, [sp, #24]
 8016bca:	9b04      	ldr	r3, [sp, #16]
 8016bcc:	1bc9      	subs	r1, r1, r7
 8016bce:	fa0f f78a 	sxth.w	r7, sl
 8016bd2:	b289      	uxth	r1, r1
 8016bd4:	429f      	cmp	r7, r3
 8016bd6:	fa0f fe81 	sxth.w	lr, r1
 8016bda:	dd23      	ble.n	8016c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016bdc:	9a05      	ldr	r2, [sp, #20]
 8016bde:	eba9 0000 	sub.w	r0, r9, r0
 8016be2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016be6:	ebaa 0202 	sub.w	r2, sl, r2
 8016bea:	9d07      	ldr	r5, [sp, #28]
 8016bec:	fb0e f000 	mul.w	r0, lr, r0
 8016bf0:	b292      	uxth	r2, r2
 8016bf2:	eba5 0a03 	sub.w	sl, r5, r3
 8016bf6:	9b02      	ldr	r3, [sp, #8]
 8016bf8:	b214      	sxth	r4, r2
 8016bfa:	00db      	lsls	r3, r3, #3
 8016bfc:	fb04 fa0a 	mul.w	sl, r4, sl
 8016c00:	445b      	add	r3, fp
 8016c02:	4550      	cmp	r0, sl
 8016c04:	db03      	blt.n	8016c0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016c06:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8016c0a:	4494      	add	ip, r2
 8016c0c:	e732      	b.n	8016a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016c0e:	9a04      	ldr	r2, [sp, #16]
 8016c10:	4431      	add	r1, r6
 8016c12:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8016c16:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016c1a:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8016c1e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016c22:	e75c      	b.n	8016ade <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016c24:	9b08      	ldr	r3, [sp, #32]
 8016c26:	2d06      	cmp	r5, #6
 8016c28:	eba3 0308 	sub.w	r3, r3, r8
 8016c2c:	b29b      	uxth	r3, r3
 8016c2e:	b218      	sxth	r0, r3
 8016c30:	d813      	bhi.n	8016c5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016c32:	9b07      	ldr	r3, [sp, #28]
 8016c34:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8016c38:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016c3c:	1c6b      	adds	r3, r5, #1
 8016c3e:	9901      	ldr	r1, [sp, #4]
 8016c40:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016c44:	9b01      	ldr	r3, [sp, #4]
 8016c46:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016c4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016c4e:	805a      	strh	r2, [r3, #2]
 8016c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c52:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016c56:	809a      	strh	r2, [r3, #4]
 8016c58:	e75f      	b.n	8016b1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016c5a:	9c02      	ldr	r4, [sp, #8]
 8016c5c:	4570      	cmp	r0, lr
 8016c5e:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016c62:	db0d      	blt.n	8016c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016c64:	4431      	add	r1, r6
 8016c66:	9b06      	ldr	r3, [sp, #24]
 8016c68:	445c      	add	r4, fp
 8016c6a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016c6e:	b289      	uxth	r1, r1
 8016c70:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8016c74:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016c78:	4419      	add	r1, r3
 8016c7a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8016c7e:	e583      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c80:	445c      	add	r4, fp
 8016c82:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016c86:	e79b      	b.n	8016bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016c88:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8016c8c:	2e07      	cmp	r6, #7
 8016c8e:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016c92:	d812      	bhi.n	8016cba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8016c94:	1c75      	adds	r5, r6, #1
 8016c96:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016c9a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016c9e:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8016ca2:	9d01      	ldr	r5, [sp, #4]
 8016ca4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016ca8:	442c      	add	r4, r5
 8016caa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016cae:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016cb2:	8061      	strh	r1, [r4, #2]
 8016cb4:	80a2      	strh	r2, [r4, #4]
 8016cb6:	80e3      	strh	r3, [r4, #6]
 8016cb8:	e5d0      	b.n	801685c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016cba:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8016cbe:	3e01      	subs	r6, #1
 8016cc0:	445c      	add	r4, fp
 8016cc2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8016cca:	2500      	movs	r5, #0
 8016ccc:	9305      	str	r3, [sp, #20]
 8016cce:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016cd2:	1e72      	subs	r2, r6, #1
 8016cd4:	9302      	str	r3, [sp, #8]
 8016cd6:	4691      	mov	r9, r2
 8016cd8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016cdc:	9304      	str	r3, [sp, #16]
 8016cde:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8016ce2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016ce6:	6818      	ldr	r0, [r3, #0]
 8016ce8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016cec:	9207      	str	r2, [sp, #28]
 8016cee:	bf16      	itet	ne
 8016cf0:	9905      	ldrne	r1, [sp, #20]
 8016cf2:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016cf6:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016cfa:	9306      	str	r3, [sp, #24]
 8016cfc:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016d00:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016d04:	fb18 f801 	smulbb	r8, r8, r1
 8016d08:	6859      	ldr	r1, [r3, #4]
 8016d0a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016d0e:	4671      	mov	r1, lr
 8016d10:	a80c      	add	r0, sp, #48	; 0x30
 8016d12:	f7fb fa8d 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016d16:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016d1a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016d1e:	f04f 0c08 	mov.w	ip, #8
 8016d22:	9b04      	ldr	r3, [sp, #16]
 8016d24:	9a02      	ldr	r2, [sp, #8]
 8016d26:	fb10 f001 	smulbb	r0, r0, r1
 8016d2a:	fb02 8803 	mla	r8, r2, r3, r8
 8016d2e:	eba0 0108 	sub.w	r1, r0, r8
 8016d32:	fb90 f0fc 	sdiv	r0, r0, ip
 8016d36:	4288      	cmp	r0, r1
 8016d38:	dc20      	bgt.n	8016d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016d3a:	4551      	cmp	r1, sl
 8016d3c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016d40:	da03      	bge.n	8016d4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8016d42:	b1d9      	cbz	r1, 8016d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016d44:	468a      	mov	sl, r1
 8016d46:	464f      	mov	r7, r9
 8016d48:	4635      	mov	r5, r6
 8016d4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d4e:	f119 0f02 	cmn.w	r9, #2
 8016d52:	d1c6      	bne.n	8016ce2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8016d54:	4616      	mov	r6, r2
 8016d56:	3201      	adds	r2, #1
 8016d58:	f1a4 0408 	sub.w	r4, r4, #8
 8016d5c:	d1b7      	bne.n	8016cce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8016d5e:	9b01      	ldr	r3, [sp, #4]
 8016d60:	b2ac      	uxth	r4, r5
 8016d62:	00ed      	lsls	r5, r5, #3
 8016d64:	1958      	adds	r0, r3, r5
 8016d66:	1c7b      	adds	r3, r7, #1
 8016d68:	d10b      	bne.n	8016d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8016d6a:	4601      	mov	r1, r0
 8016d6c:	9803      	ldr	r0, [sp, #12]
 8016d6e:	f7fb fa5f 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016d72:	4621      	mov	r1, r4
 8016d74:	9801      	ldr	r0, [sp, #4]
 8016d76:	f7ff fcdd 	bl	8016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016d7a:	e505      	b.n	8016788 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d7c:	464f      	mov	r7, r9
 8016d7e:	4635      	mov	r5, r6
 8016d80:	e7ed      	b.n	8016d5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8016d82:	9b01      	ldr	r3, [sp, #4]
 8016d84:	00ff      	lsls	r7, r7, #3
 8016d86:	445d      	add	r5, fp
 8016d88:	19d9      	adds	r1, r3, r7
 8016d8a:	445f      	add	r7, fp
 8016d8c:	f7fb fa50 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016d90:	9b03      	ldr	r3, [sp, #12]
 8016d92:	cb03      	ldmia	r3!, {r0, r1}
 8016d94:	9b03      	ldr	r3, [sp, #12]
 8016d96:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016d9a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8016d9e:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016da2:	6869      	ldr	r1, [r5, #4]
 8016da4:	c303      	stmia	r3!, {r0, r1}
 8016da6:	e7e4      	b.n	8016d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08016da8 <_ZN8touchgfx11Application10invalidateEv>:
 8016da8:	4b09      	ldr	r3, [pc, #36]	; (8016dd0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016daa:	b082      	sub	sp, #8
 8016dac:	2100      	movs	r1, #0
 8016dae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016db2:	4b08      	ldr	r3, [pc, #32]	; (8016dd4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016db4:	9100      	str	r1, [sp, #0]
 8016db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dba:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016dbe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016dc2:	ab02      	add	r3, sp, #8
 8016dc4:	e913 0006 	ldmdb	r3, {r1, r2}
 8016dc8:	b002      	add	sp, #8
 8016dca:	f7ff bcc7 	b.w	801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016dce:	bf00      	nop
 8016dd0:	2400f234 	.word	0x2400f234
 8016dd4:	2400f236 	.word	0x2400f236

08016dd8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8016de0:	b09b      	sub	sp, #108	; 0x6c
 8016de2:	4604      	mov	r4, r0
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7f9 fb08 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016dea:	4605      	mov	r5, r0
 8016dec:	b940      	cbnz	r0, 8016e00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016dee:	4620      	mov	r0, r4
 8016df0:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016df4:	f7ff fcb2 	bl	801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016df8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016dfc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8016e00:	4bc8      	ldr	r3, [pc, #800]	; (8017124 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d03e      	beq.n	8016e86 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016e08:	4dc7      	ldr	r5, [pc, #796]	; (8017128 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	f7f9 faf5 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e10:	4606      	mov	r6, r0
 8016e12:	2800      	cmp	r0, #0
 8016e14:	d137      	bne.n	8016e86 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016e16:	4628      	mov	r0, r5
 8016e18:	f7ff fa28 	bl	801626c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016e1c:	6829      	ldr	r1, [r5, #0]
 8016e1e:	686a      	ldr	r2, [r5, #4]
 8016e20:	4620      	mov	r0, r4
 8016e22:	f7ff fc9b 	bl	801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016e26:	802e      	strh	r6, [r5, #0]
 8016e28:	806e      	strh	r6, [r5, #2]
 8016e2a:	80ae      	strh	r6, [r5, #4]
 8016e2c:	80ee      	strh	r6, [r5, #6]
 8016e2e:	ae09      	add	r6, sp, #36	; 0x24
 8016e30:	4630      	mov	r0, r6
 8016e32:	f7ff fc23 	bl	801667c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016e36:	4abd      	ldr	r2, [pc, #756]	; (801712c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016e38:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016e3c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016e40:	8815      	ldrh	r5, [r2, #0]
 8016e42:	9202      	str	r2, [sp, #8]
 8016e44:	462b      	mov	r3, r5
 8016e46:	429f      	cmp	r7, r3
 8016e48:	d924      	bls.n	8016e94 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8016e4a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8016e4e:	2907      	cmp	r1, #7
 8016e50:	d816      	bhi.n	8016e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8016e52:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8016e56:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8016e5a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8016e5e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8016e62:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8016e66:	1c4a      	adds	r2, r1, #1
 8016e68:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8016e6c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8016e70:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8016e74:	f8a2 9002 	strh.w	r9, [r2, #2]
 8016e78:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016e7c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016e80:	3301      	adds	r3, #1
 8016e82:	b29b      	uxth	r3, r3
 8016e84:	e7df      	b.n	8016e46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8016e86:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d1cf      	bne.n	8016e2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8016e8e:	b01b      	add	sp, #108	; 0x6c
 8016e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e94:	462f      	mov	r7, r5
 8016e96:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8016e9a:	42bb      	cmp	r3, r7
 8016e9c:	d90b      	bls.n	8016eb6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8016e9e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8016ea2:	3701      	adds	r7, #1
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8016eaa:	b2bf      	uxth	r7, r7
 8016eac:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8016eb0:	f7ff fc54 	bl	801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016eb4:	e7ef      	b.n	8016e96 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8016eb6:	4a9e      	ldr	r2, [pc, #632]	; (8017130 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8016eb8:	6813      	ldr	r3, [r2, #0]
 8016eba:	4690      	mov	r8, r2
 8016ebc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8016ec0:	2b01      	cmp	r3, #1
 8016ec2:	f040 80e4 	bne.w	801708e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8016ec6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8016eca:	4629      	mov	r1, r5
 8016ecc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016ed0:	2500      	movs	r5, #0
 8016ed2:	33ae      	adds	r3, #174	; 0xae
 8016ed4:	428f      	cmp	r7, r1
 8016ed6:	f103 0308 	add.w	r3, r3, #8
 8016eda:	dd0a      	ble.n	8016ef2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8016edc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8016ee0:	3101      	adds	r1, #1
 8016ee2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8016ee6:	4402      	add	r2, r0
 8016ee8:	b212      	sxth	r2, r2
 8016eea:	4295      	cmp	r5, r2
 8016eec:	bfb8      	it	lt
 8016eee:	4615      	movlt	r5, r2
 8016ef0:	e7f0      	b.n	8016ed4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8016ef2:	4b90      	ldr	r3, [pc, #576]	; (8017134 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8016ef4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8017130 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8016ef8:	881b      	ldrh	r3, [r3, #0]
 8016efa:	46d8      	mov	r8, fp
 8016efc:	2b0f      	cmp	r3, #15
 8016efe:	bf8c      	ite	hi
 8016f00:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8016f04:	f04f 0a01 	movls.w	sl, #1
 8016f08:	2300      	movs	r3, #0
 8016f0a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8016f0e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8016f12:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016f16:	4438      	add	r0, r7
 8016f18:	b207      	sxth	r7, r0
 8016f1a:	f8db 0000 	ldr.w	r0, [fp]
 8016f1e:	42bd      	cmp	r5, r7
 8016f20:	6803      	ldr	r3, [r0, #0]
 8016f22:	f340 8084 	ble.w	801702e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8016f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016f2a:	4798      	blx	r3
 8016f2c:	eb07 030a 	add.w	r3, r7, sl
 8016f30:	4298      	cmp	r0, r3
 8016f32:	da07      	bge.n	8016f44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016f34:	4285      	cmp	r5, r0
 8016f36:	dd05      	ble.n	8016f44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8016f38:	4287      	cmp	r7, r0
 8016f3a:	dd6d      	ble.n	8017018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016f3c:	2f00      	cmp	r7, #0
 8016f3e:	dd6b      	ble.n	8017018 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8016f40:	4628      	mov	r0, r5
 8016f42:	e004      	b.n	8016f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8016f44:	4287      	cmp	r7, r0
 8016f46:	dcfb      	bgt.n	8016f40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8016f48:	42a8      	cmp	r0, r5
 8016f4a:	bfa8      	it	ge
 8016f4c:	4628      	movge	r0, r5
 8016f4e:	4b7a      	ldr	r3, [pc, #488]	; (8017138 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8016f50:	1bc0      	subs	r0, r0, r7
 8016f52:	2200      	movs	r2, #0
 8016f54:	f8ad 7016 	strh.w	r7, [sp, #22]
 8016f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016f60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016f64:	9b02      	ldr	r3, [sp, #8]
 8016f66:	f8ad 001a 	strh.w	r0, [sp, #26]
 8016f6a:	881f      	ldrh	r7, [r3, #0]
 8016f6c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8016f70:	42bb      	cmp	r3, r7
 8016f72:	d9cc      	bls.n	8016f0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8016f74:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8016f78:	ab07      	add	r3, sp, #28
 8016f7a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8016f7e:	6851      	ldr	r1, [r2, #4]
 8016f80:	c303      	stmia	r3!, {r0, r1}
 8016f82:	a905      	add	r1, sp, #20
 8016f84:	a807      	add	r0, sp, #28
 8016f86:	f7ff fa2c 	bl	80163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	d04c      	beq.n	8017028 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8016f8e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016f92:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8016f96:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8016f9a:	4686      	mov	lr, r0
 8016f9c:	4290      	cmp	r0, r2
 8016f9e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8016fa2:	4448      	add	r0, r9
 8016fa4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8016fa8:	bfb8      	it	lt
 8016faa:	4696      	movlt	lr, r2
 8016fac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016fb0:	444a      	add	r2, r9
 8016fb2:	b280      	uxth	r0, r0
 8016fb4:	4299      	cmp	r1, r3
 8016fb6:	468c      	mov	ip, r1
 8016fb8:	b292      	uxth	r2, r2
 8016fba:	9303      	str	r3, [sp, #12]
 8016fbc:	bfb8      	it	lt
 8016fbe:	469c      	movlt	ip, r3
 8016fc0:	b203      	sxth	r3, r0
 8016fc2:	fa0f f982 	sxth.w	r9, r2
 8016fc6:	f8ad e01c 	strh.w	lr, [sp, #28]
 8016fca:	f8ad c01e 	strh.w	ip, [sp, #30]
 8016fce:	454b      	cmp	r3, r9
 8016fd0:	bfb8      	it	lt
 8016fd2:	4602      	movlt	r2, r0
 8016fd4:	9b03      	ldr	r3, [sp, #12]
 8016fd6:	eba2 020e 	sub.w	r2, r2, lr
 8016fda:	f8ad 2020 	strh.w	r2, [sp, #32]
 8016fde:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016fe2:	4411      	add	r1, r2
 8016fe4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016fe8:	4413      	add	r3, r2
 8016fea:	b289      	uxth	r1, r1
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	b208      	sxth	r0, r1
 8016ff0:	b21a      	sxth	r2, r3
 8016ff2:	4290      	cmp	r0, r2
 8016ff4:	bfb8      	it	lt
 8016ff6:	460b      	movlt	r3, r1
 8016ff8:	eba3 030c 	sub.w	r3, r3, ip
 8016ffc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017000:	a807      	add	r0, sp, #28
 8017002:	f7f9 f9fa 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017006:	b920      	cbnz	r0, 8017012 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8017008:	6823      	ldr	r3, [r4, #0]
 801700a:	a907      	add	r1, sp, #28
 801700c:	4620      	mov	r0, r4
 801700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017010:	4798      	blx	r3
 8017012:	3701      	adds	r7, #1
 8017014:	b2bf      	uxth	r7, r7
 8017016:	e7a9      	b.n	8016f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8017018:	f8d8 0000 	ldr.w	r0, [r8]
 801701c:	2101      	movs	r1, #1
 801701e:	6803      	ldr	r3, [r0, #0]
 8017020:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8017024:	4798      	blx	r3
 8017026:	e772      	b.n	8016f0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8017028:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801702c:	e7e8      	b.n	8017000 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017030:	4798      	blx	r3
 8017032:	4b42      	ldr	r3, [pc, #264]	; (801713c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8017034:	781b      	ldrb	r3, [r3, #0]
 8017036:	2b00      	cmp	r3, #0
 8017038:	f43f af29 	beq.w	8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801703c:	2300      	movs	r3, #0
 801703e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8017042:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017046:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801704a:	9b02      	ldr	r3, [sp, #8]
 801704c:	881b      	ldrh	r3, [r3, #0]
 801704e:	429d      	cmp	r5, r3
 8017050:	f67f af1d 	bls.w	8016e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017054:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8017058:	2907      	cmp	r1, #7
 801705a:	d815      	bhi.n	8017088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801705c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8017060:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8017064:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017068:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801706c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8017070:	1c4a      	adds	r2, r1, #1
 8017072:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8017076:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801707a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801707e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8017082:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017086:	80d7      	strh	r7, [r2, #6]
 8017088:	3301      	adds	r3, #1
 801708a:	b29b      	uxth	r3, r3
 801708c:	e7df      	b.n	801704e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801708e:	2b02      	cmp	r3, #2
 8017090:	f040 8135 	bne.w	80172fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8017094:	4b2a      	ldr	r3, [pc, #168]	; (8017140 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8017096:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	2b01      	cmp	r3, #1
 801709e:	f000 809c 	beq.w	80171da <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80170a2:	9b02      	ldr	r3, [sp, #8]
 80170a4:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80170a8:	f8b3 b000 	ldrh.w	fp, [r3]
 80170ac:	f10b 0b01 	add.w	fp, fp, #1
 80170b0:	fa1f fb8b 	uxth.w	fp, fp
 80170b4:	2a00      	cmp	r2, #0
 80170b6:	d0bc      	beq.n	8017032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80170b8:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80170bc:	4659      	mov	r1, fp
 80170be:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80170c2:	f04f 0800 	mov.w	r8, #0
 80170c6:	441d      	add	r5, r3
 80170c8:	b22d      	sxth	r5, r5
 80170ca:	b28b      	uxth	r3, r1
 80170cc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80170d0:	429a      	cmp	r2, r3
 80170d2:	f240 80c0 	bls.w	8017256 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80170d6:	4427      	add	r7, r4
 80170d8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80170dc:	4608      	mov	r0, r1
 80170de:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80170e2:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80170e6:	4563      	cmp	r3, ip
 80170e8:	f340 80a2 	ble.w	8017230 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80170ec:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80170f0:	4465      	add	r5, ip
 80170f2:	b22d      	sxth	r5, r5
 80170f4:	429d      	cmp	r5, r3
 80170f6:	bfa8      	it	ge
 80170f8:	461d      	movge	r5, r3
 80170fa:	3101      	adds	r1, #1
 80170fc:	4680      	mov	r8, r0
 80170fe:	e7e4      	b.n	80170ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8017100:	d10b      	bne.n	801711a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8017102:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8017106:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801710a:	458c      	cmp	ip, r1
 801710c:	bfb4      	ite	lt
 801710e:	469c      	movlt	ip, r3
 8017110:	46bc      	movge	ip, r7
 8017112:	4572      	cmp	r2, lr
 8017114:	bfb8      	it	lt
 8017116:	4672      	movlt	r2, lr
 8017118:	e087      	b.n	801722a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801711a:	428a      	cmp	r2, r1
 801711c:	46bc      	mov	ip, r7
 801711e:	bfb8      	it	lt
 8017120:	460a      	movlt	r2, r1
 8017122:	e082      	b.n	801722a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8017124:	2400f280 	.word	0x2400f280
 8017128:	2400f28c 	.word	0x2400f28c
 801712c:	2400005c 	.word	0x2400005c
 8017130:	2400f240 	.word	0x2400f240
 8017134:	2400f236 	.word	0x2400f236
 8017138:	2400f234 	.word	0x2400f234
 801713c:	2400f23e 	.word	0x2400f23e
 8017140:	2400f238 	.word	0x2400f238
 8017144:	1961      	adds	r1, r4, r5
 8017146:	ab07      	add	r3, sp, #28
 8017148:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801714c:	6849      	ldr	r1, [r1, #4]
 801714e:	c303      	stmia	r3!, {r0, r1}
 8017150:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017154:	a807      	add	r0, sp, #28
 8017156:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801715a:	2b13      	cmp	r3, #19
 801715c:	440b      	add	r3, r1
 801715e:	bfd8      	it	le
 8017160:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017164:	1a9b      	subs	r3, r3, r2
 8017166:	f8ad 201c 	strh.w	r2, [sp, #28]
 801716a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801716e:	f7ff f897 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017172:	a807      	add	r0, sp, #28
 8017174:	f7f9 f941 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017178:	bb78      	cbnz	r0, 80171da <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801717a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801717e:	4425      	add	r5, r4
 8017180:	f8d8 0000 	ldr.w	r0, [r8]
 8017184:	f1bc 0f14 	cmp.w	ip, #20
 8017188:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801718c:	f8d0 e000 	ldr.w	lr, [r0]
 8017190:	bfa8      	it	ge
 8017192:	f04f 0c14 	movge.w	ip, #20
 8017196:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801719a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801719e:	fa1f fc8c 	uxth.w	ip, ip
 80171a2:	f8cd c000 	str.w	ip, [sp]
 80171a6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80171aa:	47d0      	blx	sl
 80171ac:	4682      	mov	sl, r0
 80171ae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80171b2:	a807      	add	r0, sp, #28
 80171b4:	f7ff f85a 	bl	801626c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	4620      	mov	r0, r4
 80171bc:	a907      	add	r1, sp, #28
 80171be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171c0:	4798      	blx	r3
 80171c2:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80171c6:	eba0 000a 	sub.w	r0, r0, sl
 80171ca:	b200      	sxth	r0, r0
 80171cc:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80171d0:	b918      	cbnz	r0, 80171da <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80171d2:	b2b9      	uxth	r1, r7
 80171d4:	4648      	mov	r0, r9
 80171d6:	f7ff faad 	bl	8016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80171da:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80171de:	f1bb 0f00 	cmp.w	fp, #0
 80171e2:	f43f af26 	beq.w	8017032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80171e6:	9b02      	ldr	r3, [sp, #8]
 80171e8:	2700      	movs	r7, #0
 80171ea:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	3301      	adds	r3, #1
 80171f2:	b29b      	uxth	r3, r3
 80171f4:	b299      	uxth	r1, r3
 80171f6:	00fd      	lsls	r5, r7, #3
 80171f8:	458b      	cmp	fp, r1
 80171fa:	d9a3      	bls.n	8017144 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80171fc:	4425      	add	r5, r4
 80171fe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8017202:	469c      	mov	ip, r3
 8017204:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8017208:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801720c:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8017210:	4408      	add	r0, r1
 8017212:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8017216:	4471      	add	r1, lr
 8017218:	b200      	sxth	r0, r0
 801721a:	b209      	sxth	r1, r1
 801721c:	4288      	cmp	r0, r1
 801721e:	f6bf af6f 	bge.w	8017100 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8017222:	4586      	cmp	lr, r0
 8017224:	4672      	mov	r2, lr
 8017226:	bfb8      	it	lt
 8017228:	4602      	movlt	r2, r0
 801722a:	3301      	adds	r3, #1
 801722c:	4667      	mov	r7, ip
 801722e:	e7e1      	b.n	80171f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8017230:	d10c      	bne.n	801724c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8017232:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8017236:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801723a:	4287      	cmp	r7, r0
 801723c:	bfb4      	ite	lt
 801723e:	4608      	movlt	r0, r1
 8017240:	4640      	movge	r0, r8
 8017242:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8017246:	443b      	add	r3, r7
 8017248:	b21b      	sxth	r3, r3
 801724a:	e753      	b.n	80170f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801724c:	4565      	cmp	r5, ip
 801724e:	4640      	mov	r0, r8
 8017250:	bfa8      	it	ge
 8017252:	4665      	movge	r5, ip
 8017254:	e751      	b.n	80170fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8017256:	eb09 0007 	add.w	r0, r9, r7
 801725a:	4427      	add	r7, r4
 801725c:	9203      	str	r2, [sp, #12]
 801725e:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 8017262:	f1ba 0f13 	cmp.w	sl, #19
 8017266:	bfde      	ittt	le
 8017268:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801726c:	4455      	addle	r5, sl
 801726e:	b22d      	sxthle	r5, r5
 8017270:	f7f9 f8c3 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017274:	9a03      	ldr	r2, [sp, #12]
 8017276:	2800      	cmp	r0, #0
 8017278:	f47f af1c 	bne.w	80170b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801727c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8017280:	fa1f fa8a 	uxth.w	sl, sl
 8017284:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017288:	1aad      	subs	r5, r5, r2
 801728a:	4829      	ldr	r0, [pc, #164]	; (8017330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801728c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8017290:	2d14      	cmp	r5, #20
 8017292:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017296:	6800      	ldr	r0, [r0, #0]
 8017298:	bfa8      	it	ge
 801729a:	2514      	movge	r5, #20
 801729c:	f8ad 101c 	strh.w	r1, [sp, #28]
 80172a0:	f8ad 201e 	strh.w	r2, [sp, #30]
 80172a4:	b289      	uxth	r1, r1
 80172a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80172aa:	b2ad      	uxth	r5, r5
 80172ac:	f8d0 c000 	ldr.w	ip, [r0]
 80172b0:	b292      	uxth	r2, r2
 80172b2:	4555      	cmp	r5, sl
 80172b4:	bf94      	ite	ls
 80172b6:	9500      	strls	r5, [sp, #0]
 80172b8:	f8cd a000 	strhi.w	sl, [sp]
 80172bc:	b29b      	uxth	r3, r3
 80172be:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80172c2:	47a8      	blx	r5
 80172c4:	6823      	ldr	r3, [r4, #0]
 80172c6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80172ca:	a907      	add	r1, sp, #28
 80172cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172ce:	4620      	mov	r0, r4
 80172d0:	4798      	blx	r3
 80172d2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80172d6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80172da:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80172de:	1a5b      	subs	r3, r3, r1
 80172e0:	440a      	add	r2, r1
 80172e2:	b21b      	sxth	r3, r3
 80172e4:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80172e8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	f47f aed8 	bne.w	80170a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80172f2:	fa1f f188 	uxth.w	r1, r8
 80172f6:	4648      	mov	r0, r9
 80172f8:	f7ff fa1c 	bl	8016734 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80172fc:	e6d1      	b.n	80170a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80172fe:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017302:	42ab      	cmp	r3, r5
 8017304:	f67f ae95 	bls.w	8017032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017308:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801730c:	ab07      	add	r3, sp, #28
 801730e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017312:	6851      	ldr	r1, [r2, #4]
 8017314:	c303      	stmia	r3!, {r0, r1}
 8017316:	a807      	add	r0, sp, #28
 8017318:	f7f9 f86f 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801731c:	b920      	cbnz	r0, 8017328 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801731e:	6823      	ldr	r3, [r4, #0]
 8017320:	a907      	add	r1, sp, #28
 8017322:	4620      	mov	r0, r4
 8017324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017326:	4798      	blx	r3
 8017328:	3501      	adds	r5, #1
 801732a:	b2ad      	uxth	r5, r5
 801732c:	e7e7      	b.n	80172fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801732e:	bf00      	nop
 8017330:	2400f240 	.word	0x2400f240

08017334 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017334:	4b03      	ldr	r3, [pc, #12]	; (8017344 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017336:	2200      	movs	r2, #0
 8017338:	801a      	strh	r2, [r3, #0]
 801733a:	805a      	strh	r2, [r3, #2]
 801733c:	809a      	strh	r2, [r3, #4]
 801733e:	80da      	strh	r2, [r3, #6]
 8017340:	4770      	bx	lr
 8017342:	bf00      	nop
 8017344:	2400f28c 	.word	0x2400f28c

08017348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801734c:	b09d      	sub	sp, #116	; 0x74
 801734e:	4606      	mov	r6, r0
 8017350:	4614      	mov	r4, r2
 8017352:	468a      	mov	sl, r1
 8017354:	a803      	add	r0, sp, #12
 8017356:	461d      	mov	r5, r3
 8017358:	f000 fe44 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 801735c:	6833      	ldr	r3, [r6, #0]
 801735e:	4630      	mov	r0, r6
 8017360:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017366:	4798      	blx	r3
 8017368:	6833      	ldr	r3, [r6, #0]
 801736a:	4607      	mov	r7, r0
 801736c:	4630      	mov	r0, r6
 801736e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017370:	4798      	blx	r3
 8017372:	462a      	mov	r2, r5
 8017374:	2500      	movs	r5, #0
 8017376:	4621      	mov	r1, r4
 8017378:	9000      	str	r0, [sp, #0]
 801737a:	463b      	mov	r3, r7
 801737c:	462c      	mov	r4, r5
 801737e:	46a9      	mov	r9, r5
 8017380:	46a8      	mov	r8, r5
 8017382:	a803      	add	r0, sp, #12
 8017384:	f000 fe89 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017388:	2300      	movs	r3, #0
 801738a:	9302      	str	r3, [sp, #8]
 801738c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017390:	429c      	cmp	r4, r3
 8017392:	d002      	beq.n	801739a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017394:	455c      	cmp	r4, fp
 8017396:	bf18      	it	ne
 8017398:	4625      	movne	r5, r4
 801739a:	ab02      	add	r3, sp, #8
 801739c:	4632      	mov	r2, r6
 801739e:	4651      	mov	r1, sl
 80173a0:	a803      	add	r0, sp, #12
 80173a2:	f001 f97f 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80173a6:	4604      	mov	r4, r0
 80173a8:	b108      	cbz	r0, 80173ae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80173aa:	280a      	cmp	r0, #10
 80173ac:	d10a      	bne.n	80173c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80173ae:	45c1      	cmp	r9, r8
 80173b0:	bf38      	it	cc
 80173b2:	46c1      	movcc	r9, r8
 80173b4:	f04f 0800 	mov.w	r8, #0
 80173b8:	2c00      	cmp	r4, #0
 80173ba:	d1e5      	bne.n	8017388 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80173bc:	4648      	mov	r0, r9
 80173be:	b01d      	add	sp, #116	; 0x74
 80173c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173c4:	9a02      	ldr	r2, [sp, #8]
 80173c6:	2a00      	cmp	r2, #0
 80173c8:	d0de      	beq.n	8017388 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80173ca:	7b57      	ldrb	r7, [r2, #13]
 80173cc:	4629      	mov	r1, r5
 80173ce:	6833      	ldr	r3, [r6, #0]
 80173d0:	007f      	lsls	r7, r7, #1
 80173d2:	8894      	ldrh	r4, [r2, #4]
 80173d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173d6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80173da:	7a97      	ldrb	r7, [r2, #10]
 80173dc:	4307      	orrs	r7, r0
 80173de:	4630      	mov	r0, r6
 80173e0:	4798      	blx	r3
 80173e2:	4438      	add	r0, r7
 80173e4:	4480      	add	r8, r0
 80173e6:	fa1f f888 	uxth.w	r8, r8
 80173ea:	e7e5      	b.n	80173b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080173ec <_ZNK8touchgfx4Font12getCharWidthEt>:
 80173ec:	b508      	push	{r3, lr}
 80173ee:	6803      	ldr	r3, [r0, #0]
 80173f0:	68db      	ldr	r3, [r3, #12]
 80173f2:	4798      	blx	r3
 80173f4:	b128      	cbz	r0, 8017402 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80173f6:	7b43      	ldrb	r3, [r0, #13]
 80173f8:	7a80      	ldrb	r0, [r0, #10]
 80173fa:	005b      	lsls	r3, r3, #1
 80173fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017400:	4318      	orrs	r0, r3
 8017402:	bd08      	pop	{r3, pc}

08017404 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017404:	b40e      	push	{r1, r2, r3}
 8017406:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017408:	b09e      	sub	sp, #120	; 0x78
 801740a:	4605      	mov	r5, r0
 801740c:	ab23      	add	r3, sp, #140	; 0x8c
 801740e:	a805      	add	r0, sp, #20
 8017410:	f853 4b04 	ldr.w	r4, [r3], #4
 8017414:	9303      	str	r3, [sp, #12]
 8017416:	f000 fde5 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 801741a:	682b      	ldr	r3, [r5, #0]
 801741c:	4628      	mov	r0, r5
 801741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017420:	4798      	blx	r3
 8017422:	682b      	ldr	r3, [r5, #0]
 8017424:	4606      	mov	r6, r0
 8017426:	4628      	mov	r0, r5
 8017428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801742a:	4798      	blx	r3
 801742c:	4633      	mov	r3, r6
 801742e:	4621      	mov	r1, r4
 8017430:	ae1e      	add	r6, sp, #120	; 0x78
 8017432:	2400      	movs	r4, #0
 8017434:	9000      	str	r0, [sp, #0]
 8017436:	9a03      	ldr	r2, [sp, #12]
 8017438:	a805      	add	r0, sp, #20
 801743a:	f000 fe2e 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801743e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017442:	462a      	mov	r2, r5
 8017444:	4633      	mov	r3, r6
 8017446:	4621      	mov	r1, r4
 8017448:	a805      	add	r0, sp, #20
 801744a:	f001 f92b 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801744e:	b300      	cbz	r0, 8017492 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017450:	280a      	cmp	r0, #10
 8017452:	d01a      	beq.n	801748a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017454:	9f04      	ldr	r7, [sp, #16]
 8017456:	b1c7      	cbz	r7, 801748a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017458:	7b78      	ldrb	r0, [r7, #13]
 801745a:	7a3b      	ldrb	r3, [r7, #8]
 801745c:	00c1      	lsls	r1, r0, #3
 801745e:	88ea      	ldrh	r2, [r5, #6]
 8017460:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017464:	4319      	orrs	r1, r3
 8017466:	0643      	lsls	r3, r0, #25
 8017468:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801746c:	bf48      	it	mi
 801746e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8017472:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017476:	bf48      	it	mi
 8017478:	b219      	sxthmi	r1, r3
 801747a:	79fb      	ldrb	r3, [r7, #7]
 801747c:	4303      	orrs	r3, r0
 801747e:	4413      	add	r3, r2
 8017480:	1a5b      	subs	r3, r3, r1
 8017482:	b21b      	sxth	r3, r3
 8017484:	429c      	cmp	r4, r3
 8017486:	bfb8      	it	lt
 8017488:	461c      	movlt	r4, r3
 801748a:	4633      	mov	r3, r6
 801748c:	462a      	mov	r2, r5
 801748e:	2100      	movs	r1, #0
 8017490:	e7da      	b.n	8017448 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017492:	b2a0      	uxth	r0, r4
 8017494:	b01e      	add	sp, #120	; 0x78
 8017496:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801749a:	b003      	add	sp, #12
 801749c:	4770      	bx	lr

0801749e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801749e:	7a43      	ldrb	r3, [r0, #9]
 80174a0:	8880      	ldrh	r0, [r0, #4]
 80174a2:	4418      	add	r0, r3
 80174a4:	b280      	uxth	r0, r0
 80174a6:	4770      	bx	lr

080174a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80174a8:	6803      	ldr	r3, [r0, #0]
 80174aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174ac:	4718      	bx	r3

080174ae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80174ae:	b40e      	push	{r1, r2, r3}
 80174b0:	b570      	push	{r4, r5, r6, lr}
 80174b2:	b09d      	sub	sp, #116	; 0x74
 80174b4:	4604      	mov	r4, r0
 80174b6:	ab21      	add	r3, sp, #132	; 0x84
 80174b8:	a803      	add	r0, sp, #12
 80174ba:	f853 5b04 	ldr.w	r5, [r3], #4
 80174be:	9302      	str	r3, [sp, #8]
 80174c0:	f000 fd90 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 80174c4:	6823      	ldr	r3, [r4, #0]
 80174c6:	4620      	mov	r0, r4
 80174c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80174ca:	4798      	blx	r3
 80174cc:	6823      	ldr	r3, [r4, #0]
 80174ce:	4606      	mov	r6, r0
 80174d0:	4620      	mov	r0, r4
 80174d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174d4:	2401      	movs	r4, #1
 80174d6:	4798      	blx	r3
 80174d8:	4633      	mov	r3, r6
 80174da:	9000      	str	r0, [sp, #0]
 80174dc:	4629      	mov	r1, r5
 80174de:	9a02      	ldr	r2, [sp, #8]
 80174e0:	a803      	add	r0, sp, #12
 80174e2:	f000 fdda 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80174e6:	a803      	add	r0, sp, #12
 80174e8:	f001 f9a8 	bl	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80174ec:	b2a3      	uxth	r3, r4
 80174ee:	b138      	cbz	r0, 8017500 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80174f0:	280a      	cmp	r0, #10
 80174f2:	a803      	add	r0, sp, #12
 80174f4:	bf04      	itt	eq
 80174f6:	3301      	addeq	r3, #1
 80174f8:	b21c      	sxtheq	r4, r3
 80174fa:	f001 f99f 	bl	801883c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80174fe:	e7f5      	b.n	80174ec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017500:	4618      	mov	r0, r3
 8017502:	b01d      	add	sp, #116	; 0x74
 8017504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017508:	b003      	add	sp, #12
 801750a:	4770      	bx	lr

0801750c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801750c:	b40e      	push	{r1, r2, r3}
 801750e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017510:	b09e      	sub	sp, #120	; 0x78
 8017512:	4604      	mov	r4, r0
 8017514:	ab23      	add	r3, sp, #140	; 0x8c
 8017516:	a805      	add	r0, sp, #20
 8017518:	f853 5b04 	ldr.w	r5, [r3], #4
 801751c:	9303      	str	r3, [sp, #12]
 801751e:	f000 fd61 	bl	8017fe4 <_ZN8touchgfx12TextProviderC1Ev>
 8017522:	6823      	ldr	r3, [r4, #0]
 8017524:	4620      	mov	r0, r4
 8017526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017528:	4798      	blx	r3
 801752a:	6823      	ldr	r3, [r4, #0]
 801752c:	4606      	mov	r6, r0
 801752e:	4620      	mov	r0, r4
 8017530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017532:	4798      	blx	r3
 8017534:	4633      	mov	r3, r6
 8017536:	4629      	mov	r1, r5
 8017538:	9000      	str	r0, [sp, #0]
 801753a:	9a03      	ldr	r2, [sp, #12]
 801753c:	a805      	add	r0, sp, #20
 801753e:	f000 fdac 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017542:	ad1e      	add	r5, sp, #120	; 0x78
 8017544:	2100      	movs	r1, #0
 8017546:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801754a:	4622      	mov	r2, r4
 801754c:	a805      	add	r0, sp, #20
 801754e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017552:	462b      	mov	r3, r5
 8017554:	f001 f8a6 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017558:	b1d8      	cbz	r0, 8017592 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801755a:	280a      	cmp	r0, #10
 801755c:	d012      	beq.n	8017584 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801755e:	9804      	ldr	r0, [sp, #16]
 8017560:	b180      	cbz	r0, 8017584 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017562:	7b47      	ldrb	r7, [r0, #13]
 8017564:	88e2      	ldrh	r2, [r4, #6]
 8017566:	00fb      	lsls	r3, r7, #3
 8017568:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801756c:	7a03      	ldrb	r3, [r0, #8]
 801756e:	430b      	orrs	r3, r1
 8017570:	0679      	lsls	r1, r7, #25
 8017572:	bf44      	itt	mi
 8017574:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017578:	b21b      	sxthmi	r3, r3
 801757a:	1ad3      	subs	r3, r2, r3
 801757c:	b21b      	sxth	r3, r3
 801757e:	429e      	cmp	r6, r3
 8017580:	bfa8      	it	ge
 8017582:	461e      	movge	r6, r3
 8017584:	462b      	mov	r3, r5
 8017586:	4622      	mov	r2, r4
 8017588:	2100      	movs	r1, #0
 801758a:	a805      	add	r0, sp, #20
 801758c:	f001 f88a 	bl	80186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017590:	e7e2      	b.n	8017558 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017592:	4630      	mov	r0, r6
 8017594:	b01e      	add	sp, #120	; 0x78
 8017596:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801759a:	b003      	add	sp, #12
 801759c:	4770      	bx	lr

0801759e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801759e:	b513      	push	{r0, r1, r4, lr}
 80175a0:	6803      	ldr	r3, [r0, #0]
 80175a2:	2400      	movs	r4, #0
 80175a4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80175a8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80175ac:	f8ad 1004 	strh.w	r1, [sp, #4]
 80175b0:	4669      	mov	r1, sp
 80175b2:	691b      	ldr	r3, [r3, #16]
 80175b4:	9400      	str	r4, [sp, #0]
 80175b6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80175ba:	4798      	blx	r3
 80175bc:	b002      	add	sp, #8
 80175be:	bd10      	pop	{r4, pc}

080175c0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80175c0:	b538      	push	{r3, r4, r5, lr}
 80175c2:	680b      	ldr	r3, [r1, #0]
 80175c4:	460c      	mov	r4, r1
 80175c6:	4605      	mov	r5, r0
 80175c8:	68db      	ldr	r3, [r3, #12]
 80175ca:	4798      	blx	r3
 80175cc:	6823      	ldr	r3, [r4, #0]
 80175ce:	4620      	mov	r0, r4
 80175d0:	4629      	mov	r1, r5
 80175d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d4:	4798      	blx	r3
 80175d6:	4628      	mov	r0, r5
 80175d8:	bd38      	pop	{r3, r4, r5, pc}

080175da <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80175da:	b410      	push	{r4}
 80175dc:	880a      	ldrh	r2, [r1, #0]
 80175de:	8884      	ldrh	r4, [r0, #4]
 80175e0:	4422      	add	r2, r4
 80175e2:	800a      	strh	r2, [r1, #0]
 80175e4:	884a      	ldrh	r2, [r1, #2]
 80175e6:	88c4      	ldrh	r4, [r0, #6]
 80175e8:	4422      	add	r2, r4
 80175ea:	804a      	strh	r2, [r1, #2]
 80175ec:	6940      	ldr	r0, [r0, #20]
 80175ee:	b120      	cbz	r0, 80175fa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80175f0:	6803      	ldr	r3, [r0, #0]
 80175f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175f8:	4718      	bx	r3
 80175fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175fe:	4770      	bx	lr

08017600 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017600:	b570      	push	{r4, r5, r6, lr}
 8017602:	8882      	ldrh	r2, [r0, #4]
 8017604:	460c      	mov	r4, r1
 8017606:	880b      	ldrh	r3, [r1, #0]
 8017608:	4605      	mov	r5, r0
 801760a:	4413      	add	r3, r2
 801760c:	800b      	strh	r3, [r1, #0]
 801760e:	884b      	ldrh	r3, [r1, #2]
 8017610:	88c2      	ldrh	r2, [r0, #6]
 8017612:	4413      	add	r3, r2
 8017614:	804b      	strh	r3, [r1, #2]
 8017616:	1d01      	adds	r1, r0, #4
 8017618:	4620      	mov	r0, r4
 801761a:	f7f8 feab 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801761e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017622:	2b00      	cmp	r3, #0
 8017624:	dd0b      	ble.n	801763e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017626:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801762a:	2b00      	cmp	r3, #0
 801762c:	dd07      	ble.n	801763e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801762e:	6968      	ldr	r0, [r5, #20]
 8017630:	b128      	cbz	r0, 801763e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017632:	6803      	ldr	r3, [r0, #0]
 8017634:	4621      	mov	r1, r4
 8017636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801763c:	4718      	bx	r3
 801763e:	bd70      	pop	{r4, r5, r6, pc}

08017640 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	8882      	ldrh	r2, [r0, #4]
 8017644:	460c      	mov	r4, r1
 8017646:	880b      	ldrh	r3, [r1, #0]
 8017648:	4605      	mov	r5, r0
 801764a:	4413      	add	r3, r2
 801764c:	800b      	strh	r3, [r1, #0]
 801764e:	884b      	ldrh	r3, [r1, #2]
 8017650:	88c2      	ldrh	r2, [r0, #6]
 8017652:	4413      	add	r3, r2
 8017654:	804b      	strh	r3, [r1, #2]
 8017656:	1d01      	adds	r1, r0, #4
 8017658:	4620      	mov	r0, r4
 801765a:	f7f8 fe8b 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801765e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017662:	2b00      	cmp	r3, #0
 8017664:	dd18      	ble.n	8017698 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017666:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801766a:	2b00      	cmp	r3, #0
 801766c:	dd14      	ble.n	8017698 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801766e:	6968      	ldr	r0, [r5, #20]
 8017670:	b128      	cbz	r0, 801767e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017672:	6803      	ldr	r3, [r0, #0]
 8017674:	4621      	mov	r1, r4
 8017676:	691b      	ldr	r3, [r3, #16]
 8017678:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801767c:	4718      	bx	r3
 801767e:	4b07      	ldr	r3, [pc, #28]	; (801769c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	3304      	adds	r3, #4
 8017684:	429d      	cmp	r5, r3
 8017686:	d107      	bne.n	8017698 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017688:	f7fe ff44 	bl	8016514 <_ZN8touchgfx11Application11getInstanceEv>
 801768c:	6821      	ldr	r1, [r4, #0]
 801768e:	6862      	ldr	r2, [r4, #4]
 8017690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017694:	f7ff b862 	b.w	801675c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017698:	bd70      	pop	{r4, r5, r6, pc}
 801769a:	bf00      	nop
 801769c:	2400f284 	.word	0x2400f284

080176a0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	4604      	mov	r4, r0
 80176a4:	4616      	mov	r6, r2
 80176a6:	460d      	mov	r5, r1
 80176a8:	b901      	cbnz	r1, 80176ac <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80176aa:	b192      	cbz	r2, 80176d2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80176ac:	6823      	ldr	r3, [r4, #0]
 80176ae:	4620      	mov	r0, r4
 80176b0:	699b      	ldr	r3, [r3, #24]
 80176b2:	4798      	blx	r3
 80176b4:	88e2      	ldrh	r2, [r4, #6]
 80176b6:	88a1      	ldrh	r1, [r4, #4]
 80176b8:	4620      	mov	r0, r4
 80176ba:	4432      	add	r2, r6
 80176bc:	4429      	add	r1, r5
 80176be:	b212      	sxth	r2, r2
 80176c0:	b209      	sxth	r1, r1
 80176c2:	f7eb ff04 	bl	80034ce <_ZN8touchgfx8Drawable5setXYEss>
 80176c6:	6823      	ldr	r3, [r4, #0]
 80176c8:	4620      	mov	r0, r4
 80176ca:	699b      	ldr	r3, [r3, #24]
 80176cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d0:	4718      	bx	r3
 80176d2:	bd70      	pop	{r4, r5, r6, pc}

080176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80176d4:	b510      	push	{r4, lr}
 80176d6:	2300      	movs	r3, #0
 80176d8:	4604      	mov	r4, r0
 80176da:	4608      	mov	r0, r1
 80176dc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80176e0:	8023      	strh	r3, [r4, #0]
 80176e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80176e6:	8063      	strh	r3, [r4, #2]
 80176e8:	6803      	ldr	r3, [r0, #0]
 80176ea:	80a1      	strh	r1, [r4, #4]
 80176ec:	4621      	mov	r1, r4
 80176ee:	80e2      	strh	r2, [r4, #6]
 80176f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176f2:	4798      	blx	r3
 80176f4:	4620      	mov	r0, r4
 80176f6:	bd10      	pop	{r4, pc}

080176f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80176f8:	b530      	push	{r4, r5, lr}
 80176fa:	8083      	strh	r3, [r0, #4]
 80176fc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017700:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8017704:	80c3      	strh	r3, [r0, #6]
 8017706:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801770a:	6141      	str	r1, [r0, #20]
 801770c:	7203      	strb	r3, [r0, #8]
 801770e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017712:	8302      	strh	r2, [r0, #24]
 8017714:	7243      	strb	r3, [r0, #9]
 8017716:	7a83      	ldrb	r3, [r0, #10]
 8017718:	f365 0306 	bfi	r3, r5, #0, #7
 801771c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8017720:	f365 13c7 	bfi	r3, r5, #7, #1
 8017724:	7283      	strb	r3, [r0, #10]
 8017726:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801772a:	72c3      	strb	r3, [r0, #11]
 801772c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8017730:	7303      	strb	r3, [r0, #12]
 8017732:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8017736:	81c3      	strh	r3, [r0, #14]
 8017738:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801773c:	8203      	strh	r3, [r0, #16]
 801773e:	4b01      	ldr	r3, [pc, #4]	; (8017744 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8017740:	6003      	str	r3, [r0, #0]
 8017742:	bd30      	pop	{r4, r5, pc}
 8017744:	0802573c 	.word	0x0802573c

08017748 <_ZNK8touchgfx9ConstFont4findEt>:
 8017748:	b5f0      	push	{r4, r5, r6, r7, lr}
 801774a:	6944      	ldr	r4, [r0, #20]
 801774c:	b3bc      	cbz	r4, 80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801774e:	88a3      	ldrh	r3, [r4, #4]
 8017750:	8b02      	ldrh	r2, [r0, #24]
 8017752:	1acb      	subs	r3, r1, r3
 8017754:	f102 32ff 	add.w	r2, r2, #4294967295
 8017758:	d431      	bmi.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801775a:	4293      	cmp	r3, r2
 801775c:	dd0c      	ble.n	8017778 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801775e:	230e      	movs	r3, #14
 8017760:	fb03 4302 	mla	r3, r3, r2, r4
 8017764:	889b      	ldrh	r3, [r3, #4]
 8017766:	1a5b      	subs	r3, r3, r1
 8017768:	1ad3      	subs	r3, r2, r3
 801776a:	429a      	cmp	r2, r3
 801776c:	db27      	blt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801776e:	2b00      	cmp	r3, #0
 8017770:	bfbc      	itt	lt
 8017772:	2302      	movlt	r3, #2
 8017774:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017778:	2500      	movs	r5, #0
 801777a:	260e      	movs	r6, #14
 801777c:	4295      	cmp	r5, r2
 801777e:	dc1e      	bgt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017780:	fb06 4003 	mla	r0, r6, r3, r4
 8017784:	8887      	ldrh	r7, [r0, #4]
 8017786:	42b9      	cmp	r1, r7
 8017788:	d01a      	beq.n	80177c0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801778a:	d20d      	bcs.n	80177a8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801778c:	1e5a      	subs	r2, r3, #1
 801778e:	4295      	cmp	r5, r2
 8017790:	dc15      	bgt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017792:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017796:	1a5b      	subs	r3, r3, r1
 8017798:	1ad3      	subs	r3, r2, r3
 801779a:	429a      	cmp	r2, r3
 801779c:	db0f      	blt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801779e:	429d      	cmp	r5, r3
 80177a0:	ddec      	ble.n	801777c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80177a2:	1953      	adds	r3, r2, r5
 80177a4:	105b      	asrs	r3, r3, #1
 80177a6:	e7e9      	b.n	801777c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80177a8:	1c5d      	adds	r5, r3, #1
 80177aa:	42aa      	cmp	r2, r5
 80177ac:	db07      	blt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80177ae:	8a43      	ldrh	r3, [r0, #18]
 80177b0:	1acb      	subs	r3, r1, r3
 80177b2:	442b      	add	r3, r5
 80177b4:	429d      	cmp	r5, r3
 80177b6:	dc02      	bgt.n	80177be <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80177b8:	429a      	cmp	r2, r3
 80177ba:	dadf      	bge.n	801777c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80177bc:	e7f1      	b.n	80177a2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80177be:	2000      	movs	r0, #0
 80177c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177c2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80177c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	4617      	mov	r7, r2
 80177c8:	461e      	mov	r6, r3
 80177ca:	b911      	cbnz	r1, 80177d2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80177cc:	2500      	movs	r5, #0
 80177ce:	4628      	mov	r0, r5
 80177d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177d2:	290a      	cmp	r1, #10
 80177d4:	d0fa      	beq.n	80177cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80177d6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80177da:	4291      	cmp	r1, r2
 80177dc:	d0f6      	beq.n	80177cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80177de:	f242 020b 	movw	r2, #8203	; 0x200b
 80177e2:	4291      	cmp	r1, r2
 80177e4:	d0f2      	beq.n	80177cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80177e6:	f7ff ffaf 	bl	8017748 <_ZNK8touchgfx9ConstFont4findEt>
 80177ea:	4605      	mov	r5, r0
 80177ec:	b950      	cbnz	r0, 8017804 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	4620      	mov	r0, r4
 80177f2:	691b      	ldr	r3, [r3, #16]
 80177f4:	4798      	blx	r3
 80177f6:	4601      	mov	r1, r0
 80177f8:	4620      	mov	r0, r4
 80177fa:	f7ff ffa5 	bl	8017748 <_ZNK8touchgfx9ConstFont4findEt>
 80177fe:	4605      	mov	r5, r0
 8017800:	2800      	cmp	r0, #0
 8017802:	d0e3      	beq.n	80177cc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017804:	6823      	ldr	r3, [r4, #0]
 8017806:	4629      	mov	r1, r5
 8017808:	4620      	mov	r0, r4
 801780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801780c:	4798      	blx	r3
 801780e:	6038      	str	r0, [r7, #0]
 8017810:	6823      	ldr	r3, [r4, #0]
 8017812:	4620      	mov	r0, r4
 8017814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017816:	4798      	blx	r3
 8017818:	7030      	strb	r0, [r6, #0]
 801781a:	e7d8      	b.n	80177ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801781c <_ZN8touchgfx4clzuEm>:
 801781c:	4603      	mov	r3, r0
 801781e:	b1c8      	cbz	r0, 8017854 <_ZN8touchgfx4clzuEm+0x38>
 8017820:	0c02      	lsrs	r2, r0, #16
 8017822:	0412      	lsls	r2, r2, #16
 8017824:	b9a2      	cbnz	r2, 8017850 <_ZN8touchgfx4clzuEm+0x34>
 8017826:	0403      	lsls	r3, r0, #16
 8017828:	2010      	movs	r0, #16
 801782a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801782e:	bf04      	itt	eq
 8017830:	021b      	lsleq	r3, r3, #8
 8017832:	3008      	addeq	r0, #8
 8017834:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8017838:	bf04      	itt	eq
 801783a:	011b      	lsleq	r3, r3, #4
 801783c:	3004      	addeq	r0, #4
 801783e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017842:	bf04      	itt	eq
 8017844:	009b      	lsleq	r3, r3, #2
 8017846:	3002      	addeq	r0, #2
 8017848:	2b00      	cmp	r3, #0
 801784a:	db04      	blt.n	8017856 <_ZN8touchgfx4clzuEm+0x3a>
 801784c:	3001      	adds	r0, #1
 801784e:	4770      	bx	lr
 8017850:	2000      	movs	r0, #0
 8017852:	e7ea      	b.n	801782a <_ZN8touchgfx4clzuEm+0xe>
 8017854:	2020      	movs	r0, #32
 8017856:	4770      	bx	lr

08017858 <_ZN8touchgfx7muldivuEmmmRm>:
 8017858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801785c:	4680      	mov	r8, r0
 801785e:	460f      	mov	r7, r1
 8017860:	4615      	mov	r5, r2
 8017862:	461e      	mov	r6, r3
 8017864:	f7ff ffda 	bl	801781c <_ZN8touchgfx4clzuEm>
 8017868:	b998      	cbnz	r0, 8017892 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801786a:	4608      	mov	r0, r1
 801786c:	f7ff ffd6 	bl	801781c <_ZN8touchgfx4clzuEm>
 8017870:	2800      	cmp	r0, #0
 8017872:	dd08      	ble.n	8017886 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017874:	4633      	mov	r3, r6
 8017876:	462a      	mov	r2, r5
 8017878:	4641      	mov	r1, r8
 801787a:	4638      	mov	r0, r7
 801787c:	f7ff ffec 	bl	8017858 <_ZN8touchgfx7muldivuEmmmRm>
 8017880:	b003      	add	sp, #12
 8017882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017886:	f04f 33ff 	mov.w	r3, #4294967295
 801788a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801788e:	6033      	str	r3, [r6, #0]
 8017890:	e7f6      	b.n	8017880 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017892:	fa31 f900 	lsrs.w	r9, r1, r0
 8017896:	fb01 f308 	mul.w	r3, r1, r8
 801789a:	d105      	bne.n	80178a8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801789c:	fbb3 f0f5 	udiv	r0, r3, r5
 80178a0:	fb05 3510 	mls	r5, r5, r0, r3
 80178a4:	6035      	str	r5, [r6, #0]
 80178a6:	e7eb      	b.n	8017880 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80178a8:	2301      	movs	r3, #1
 80178aa:	fa08 fb00 	lsl.w	fp, r8, r0
 80178ae:	462a      	mov	r2, r5
 80178b0:	4641      	mov	r1, r8
 80178b2:	fa03 f000 	lsl.w	r0, r3, r0
 80178b6:	4633      	mov	r3, r6
 80178b8:	fbbb faf5 	udiv	sl, fp, r5
 80178bc:	3801      	subs	r0, #1
 80178be:	fb09 f40a 	mul.w	r4, r9, sl
 80178c2:	4038      	ands	r0, r7
 80178c4:	f7ff ffc8 	bl	8017858 <_ZN8touchgfx7muldivuEmmmRm>
 80178c8:	462a      	mov	r2, r5
 80178ca:	4607      	mov	r7, r0
 80178cc:	ab01      	add	r3, sp, #4
 80178ce:	fb05 b11a 	mls	r1, r5, sl, fp
 80178d2:	4648      	mov	r0, r9
 80178d4:	f7ff ffc0 	bl	8017858 <_ZN8touchgfx7muldivuEmmmRm>
 80178d8:	9b01      	ldr	r3, [sp, #4]
 80178da:	6832      	ldr	r2, [r6, #0]
 80178dc:	441a      	add	r2, r3
 80178de:	fbb2 f3f5 	udiv	r3, r2, r5
 80178e2:	441c      	add	r4, r3
 80178e4:	fb05 2513 	mls	r5, r5, r3, r2
 80178e8:	443c      	add	r4, r7
 80178ea:	4420      	add	r0, r4
 80178ec:	e7da      	b.n	80178a4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080178ee <_ZN8touchgfx6muldivElllRl>:
 80178ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178f0:	2800      	cmp	r0, #0
 80178f2:	461e      	mov	r6, r3
 80178f4:	bfba      	itte	lt
 80178f6:	4240      	neglt	r0, r0
 80178f8:	f04f 34ff 	movlt.w	r4, #4294967295
 80178fc:	2401      	movge	r4, #1
 80178fe:	2900      	cmp	r1, #0
 8017900:	bfbc      	itt	lt
 8017902:	4249      	neglt	r1, r1
 8017904:	4264      	neglt	r4, r4
 8017906:	2a00      	cmp	r2, #0
 8017908:	bfb6      	itet	lt
 801790a:	4265      	neglt	r5, r4
 801790c:	4625      	movge	r5, r4
 801790e:	4252      	neglt	r2, r2
 8017910:	4288      	cmp	r0, r1
 8017912:	bfc2      	ittt	gt
 8017914:	4603      	movgt	r3, r0
 8017916:	4608      	movgt	r0, r1
 8017918:	4619      	movgt	r1, r3
 801791a:	ab01      	add	r3, sp, #4
 801791c:	f7ff ff9c 	bl	8017858 <_ZN8touchgfx7muldivuEmmmRm>
 8017920:	9b01      	ldr	r3, [sp, #4]
 8017922:	4368      	muls	r0, r5
 8017924:	435c      	muls	r4, r3
 8017926:	6034      	str	r4, [r6, #0]
 8017928:	b002      	add	sp, #8
 801792a:	bd70      	pop	{r4, r5, r6, pc}

0801792c <_ZN8touchgfx6muldivElll>:
 801792c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801792e:	4606      	mov	r6, r0
 8017930:	ab01      	add	r3, sp, #4
 8017932:	460d      	mov	r5, r1
 8017934:	4614      	mov	r4, r2
 8017936:	f7ff ffda 	bl	80178ee <_ZN8touchgfx6muldivElllRl>
 801793a:	2e00      	cmp	r6, #0
 801793c:	db20      	blt.n	8017980 <_ZN8touchgfx6muldivElll+0x54>
 801793e:	bf14      	ite	ne
 8017940:	2301      	movne	r3, #1
 8017942:	2300      	moveq	r3, #0
 8017944:	2d00      	cmp	r5, #0
 8017946:	db1e      	blt.n	8017986 <_ZN8touchgfx6muldivElll+0x5a>
 8017948:	bf14      	ite	ne
 801794a:	2201      	movne	r2, #1
 801794c:	2200      	moveq	r2, #0
 801794e:	2c00      	cmp	r4, #0
 8017950:	fb03 f202 	mul.w	r2, r3, r2
 8017954:	db1a      	blt.n	801798c <_ZN8touchgfx6muldivElll+0x60>
 8017956:	bf14      	ite	ne
 8017958:	2301      	movne	r3, #1
 801795a:	2300      	moveq	r3, #0
 801795c:	4353      	muls	r3, r2
 801795e:	2b01      	cmp	r3, #1
 8017960:	d117      	bne.n	8017992 <_ZN8touchgfx6muldivElll+0x66>
 8017962:	2c00      	cmp	r4, #0
 8017964:	9b01      	ldr	r3, [sp, #4]
 8017966:	bfb8      	it	lt
 8017968:	4264      	neglt	r4, r4
 801796a:	2b00      	cmp	r3, #0
 801796c:	f104 0401 	add.w	r4, r4, #1
 8017970:	bfb8      	it	lt
 8017972:	425b      	neglt	r3, r3
 8017974:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017978:	db00      	blt.n	801797c <_ZN8touchgfx6muldivElll+0x50>
 801797a:	3001      	adds	r0, #1
 801797c:	b002      	add	sp, #8
 801797e:	bd70      	pop	{r4, r5, r6, pc}
 8017980:	f04f 33ff 	mov.w	r3, #4294967295
 8017984:	e7de      	b.n	8017944 <_ZN8touchgfx6muldivElll+0x18>
 8017986:	f04f 32ff 	mov.w	r2, #4294967295
 801798a:	e7e0      	b.n	801794e <_ZN8touchgfx6muldivElll+0x22>
 801798c:	f04f 33ff 	mov.w	r3, #4294967295
 8017990:	e7e4      	b.n	801795c <_ZN8touchgfx6muldivElll+0x30>
 8017992:	3301      	adds	r3, #1
 8017994:	d1f2      	bne.n	801797c <_ZN8touchgfx6muldivElll+0x50>
 8017996:	9b01      	ldr	r3, [sp, #4]
 8017998:	2c00      	cmp	r4, #0
 801799a:	bfb8      	it	lt
 801799c:	4264      	neglt	r4, r4
 801799e:	2b00      	cmp	r3, #0
 80179a0:	bfb8      	it	lt
 80179a2:	425b      	neglt	r3, r3
 80179a4:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80179a8:	bfc8      	it	gt
 80179aa:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80179ae:	e7e5      	b.n	801797c <_ZN8touchgfx6muldivElll+0x50>

080179b0 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80179b0:	2000      	movs	r0, #0
 80179b2:	4770      	bx	lr

080179b4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80179b4:	2001      	movs	r0, #1
 80179b6:	4770      	bx	lr

080179b8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80179b8:	2002      	movs	r0, #2
 80179ba:	4770      	bx	lr

080179bc <_ZN8touchgfx6ScreenD1Ev>:
 80179bc:	4770      	bx	lr

080179be <_ZN8touchgfx12GestureEventD1Ev>:
 80179be:	4770      	bx	lr

080179c0 <_ZN8touchgfx9DragEventD1Ev>:
 80179c0:	4770      	bx	lr

080179c2 <_ZN8touchgfx10ClickEventD1Ev>:
 80179c2:	4770      	bx	lr

080179c4 <_ZN8touchgfx10ClickEventD0Ev>:
 80179c4:	b510      	push	{r4, lr}
 80179c6:	4604      	mov	r4, r0
 80179c8:	210c      	movs	r1, #12
 80179ca:	f00a fb4a 	bl	8022062 <_ZdlPvj>
 80179ce:	4620      	mov	r0, r4
 80179d0:	bd10      	pop	{r4, pc}

080179d2 <_ZN8touchgfx9DragEventD0Ev>:
 80179d2:	b510      	push	{r4, lr}
 80179d4:	4604      	mov	r4, r0
 80179d6:	2110      	movs	r1, #16
 80179d8:	f00a fb43 	bl	8022062 <_ZdlPvj>
 80179dc:	4620      	mov	r0, r4
 80179de:	bd10      	pop	{r4, pc}

080179e0 <_ZN8touchgfx12GestureEventD0Ev>:
 80179e0:	b510      	push	{r4, lr}
 80179e2:	4604      	mov	r4, r0
 80179e4:	210c      	movs	r1, #12
 80179e6:	f00a fb3c 	bl	8022062 <_ZdlPvj>
 80179ea:	4620      	mov	r0, r4
 80179ec:	bd10      	pop	{r4, pc}

080179ee <_ZN8touchgfx6ScreenD0Ev>:
 80179ee:	b510      	push	{r4, lr}
 80179f0:	4604      	mov	r4, r0
 80179f2:	213c      	movs	r1, #60	; 0x3c
 80179f4:	f00a fb35 	bl	8022062 <_ZdlPvj>
 80179f8:	4620      	mov	r0, r4
 80179fa:	bd10      	pop	{r4, pc}

080179fc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80179fc:	b530      	push	{r4, r5, lr}
 80179fe:	460d      	mov	r5, r1
 8017a00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017a02:	b087      	sub	sp, #28
 8017a04:	4604      	mov	r4, r0
 8017a06:	b301      	cbz	r1, 8017a4a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017a08:	a801      	add	r0, sp, #4
 8017a0a:	f7ff fe63 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a0e:	892a      	ldrh	r2, [r5, #8]
 8017a10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017a14:	7928      	ldrb	r0, [r5, #4]
 8017a16:	1ad2      	subs	r2, r2, r3
 8017a18:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017a1a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017a1e:	441a      	add	r2, r3
 8017a20:	896b      	ldrh	r3, [r5, #10]
 8017a22:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017a26:	f88d 0010 	strb.w	r0, [sp, #16]
 8017a2a:	1b5b      	subs	r3, r3, r5
 8017a2c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017a2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017a30:	442b      	add	r3, r5
 8017a32:	4d07      	ldr	r5, [pc, #28]	; (8017a50 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017a34:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017a38:	a903      	add	r1, sp, #12
 8017a3a:	9503      	str	r5, [sp, #12]
 8017a3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017a40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a44:	6803      	ldr	r3, [r0, #0]
 8017a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a48:	4798      	blx	r3
 8017a4a:	b007      	add	sp, #28
 8017a4c:	bd30      	pop	{r4, r5, pc}
 8017a4e:	bf00      	nop
 8017a50:	080257c4 	.word	0x080257c4

08017a54 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a58:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017a5a:	b08a      	sub	sp, #40	; 0x28
 8017a5c:	4604      	mov	r4, r0
 8017a5e:	460d      	mov	r5, r1
 8017a60:	b113      	cbz	r3, 8017a68 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017a62:	790b      	ldrb	r3, [r1, #4]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d044      	beq.n	8017af2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017a68:	f104 0804 	add.w	r8, r4, #4
 8017a6c:	a803      	add	r0, sp, #12
 8017a6e:	4641      	mov	r1, r8
 8017a70:	f7ff fe30 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017a74:	792b      	ldrb	r3, [r5, #4]
 8017a76:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017a7a:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017a7e:	b983      	cbnz	r3, 8017aa2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017a80:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017a84:	892a      	ldrh	r2, [r5, #8]
 8017a86:	88e9      	ldrh	r1, [r5, #6]
 8017a88:	4640      	mov	r0, r8
 8017a8a:	1b92      	subs	r2, r2, r6
 8017a8c:	9301      	str	r3, [sp, #4]
 8017a8e:	1bc9      	subs	r1, r1, r7
 8017a90:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8017a94:	b212      	sxth	r2, r2
 8017a96:	9300      	str	r3, [sp, #0]
 8017a98:	b209      	sxth	r1, r1
 8017a9a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8017a9e:	f7f8 fb87 	bl	80101b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8017aa2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017aa4:	b329      	cbz	r1, 8017af2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017aa6:	a805      	add	r0, sp, #20
 8017aa8:	f7ff fe14 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017aac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017ab0:	792b      	ldrb	r3, [r5, #4]
 8017ab2:	a907      	add	r1, sp, #28
 8017ab4:	1abf      	subs	r7, r7, r2
 8017ab6:	88ea      	ldrh	r2, [r5, #6]
 8017ab8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017aba:	4417      	add	r7, r2
 8017abc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017abe:	f88d 3020 	strb.w	r3, [sp, #32]
 8017ac2:	4417      	add	r7, r2
 8017ac4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017ac8:	1ab6      	subs	r6, r6, r2
 8017aca:	892a      	ldrh	r2, [r5, #8]
 8017acc:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017ad0:	4416      	add	r6, r2
 8017ad2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017ad4:	4416      	add	r6, r2
 8017ad6:	4a08      	ldr	r2, [pc, #32]	; (8017af8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017ad8:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8017adc:	2600      	movs	r6, #0
 8017ade:	9207      	str	r2, [sp, #28]
 8017ae0:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8017ae4:	6803      	ldr	r3, [r0, #0]
 8017ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ae8:	4798      	blx	r3
 8017aea:	792b      	ldrb	r3, [r5, #4]
 8017aec:	b10b      	cbz	r3, 8017af2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017aee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017af2:	b00a      	add	sp, #40	; 0x28
 8017af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af8:	0802579c 	.word	0x0802579c

08017afc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b00:	460c      	mov	r4, r1
 8017b02:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017b04:	b088      	sub	sp, #32
 8017b06:	4605      	mov	r5, r0
 8017b08:	2900      	cmp	r1, #0
 8017b0a:	d06d      	beq.n	8017be8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017b0c:	4668      	mov	r0, sp
 8017b0e:	f7ff fde1 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b12:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017b14:	88e3      	ldrh	r3, [r4, #6]
 8017b16:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017b1a:	440b      	add	r3, r1
 8017b1c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	4543      	cmp	r3, r8
 8017b24:	db31      	blt.n	8017b8a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017b26:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017b2a:	44c4      	add	ip, r8
 8017b2c:	fa0f fc8c 	sxth.w	ip, ip
 8017b30:	4563      	cmp	r3, ip
 8017b32:	da2a      	bge.n	8017b8a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017b34:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8017b36:	8926      	ldrh	r6, [r4, #8]
 8017b38:	4416      	add	r6, r2
 8017b3a:	b236      	sxth	r6, r6
 8017b3c:	42be      	cmp	r6, r7
 8017b3e:	db24      	blt.n	8017b8a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017b40:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017b44:	4438      	add	r0, r7
 8017b46:	b200      	sxth	r0, r0
 8017b48:	4286      	cmp	r6, r0
 8017b4a:	da1e      	bge.n	8017b8a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017b4c:	8963      	ldrh	r3, [r4, #10]
 8017b4e:	4419      	add	r1, r3
 8017b50:	b209      	sxth	r1, r1
 8017b52:	4541      	cmp	r1, r8
 8017b54:	db08      	blt.n	8017b68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017b56:	4561      	cmp	r1, ip
 8017b58:	da06      	bge.n	8017b68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017b5a:	89a3      	ldrh	r3, [r4, #12]
 8017b5c:	441a      	add	r2, r3
 8017b5e:	b212      	sxth	r2, r2
 8017b60:	42ba      	cmp	r2, r7
 8017b62:	db01      	blt.n	8017b68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017b64:	4282      	cmp	r2, r0
 8017b66:	db10      	blt.n	8017b8a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017b68:	4b21      	ldr	r3, [pc, #132]	; (8017bf0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017b6a:	a904      	add	r1, sp, #16
 8017b6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017b6e:	9304      	str	r3, [sp, #16]
 8017b70:	2302      	movs	r3, #2
 8017b72:	f88d 3014 	strb.w	r3, [sp, #20]
 8017b76:	2300      	movs	r3, #0
 8017b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017b80:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017b84:	6803      	ldr	r3, [r0, #0]
 8017b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b88:	4798      	blx	r3
 8017b8a:	1d29      	adds	r1, r5, #4
 8017b8c:	a802      	add	r0, sp, #8
 8017b8e:	f7ff fda1 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017b92:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017b96:	88e0      	ldrh	r0, [r4, #6]
 8017b98:	eba3 0808 	sub.w	r8, r3, r8
 8017b9c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017ba0:	7921      	ldrb	r1, [r4, #4]
 8017ba2:	fa1f f888 	uxth.w	r8, r8
 8017ba6:	1bdf      	subs	r7, r3, r7
 8017ba8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017bac:	b2bb      	uxth	r3, r7
 8017bae:	4440      	add	r0, r8
 8017bb0:	8922      	ldrh	r2, [r4, #8]
 8017bb2:	8967      	ldrh	r7, [r4, #10]
 8017bb4:	4460      	add	r0, ip
 8017bb6:	89a4      	ldrh	r4, [r4, #12]
 8017bb8:	441a      	add	r2, r3
 8017bba:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017bbc:	44b8      	add	r8, r7
 8017bbe:	4423      	add	r3, r4
 8017bc0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017bc4:	4432      	add	r2, r6
 8017bc6:	44e0      	add	r8, ip
 8017bc8:	4433      	add	r3, r6
 8017bca:	4c0a      	ldr	r4, [pc, #40]	; (8017bf4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017bcc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017bce:	f88d 1014 	strb.w	r1, [sp, #20]
 8017bd2:	a904      	add	r1, sp, #16
 8017bd4:	9404      	str	r4, [sp, #16]
 8017bd6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017bda:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017bde:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017be2:	6803      	ldr	r3, [r0, #0]
 8017be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017be6:	4798      	blx	r3
 8017be8:	b008      	add	sp, #32
 8017bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bee:	bf00      	nop
 8017bf0:	0802579c 	.word	0x0802579c
 8017bf4:	080257b0 	.word	0x080257b0

08017bf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017c00:	3201      	adds	r2, #1
 8017c02:	d112      	bne.n	8017c2a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017c04:	2500      	movs	r5, #0
 8017c06:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017c0a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017c0e:	6803      	ldr	r3, [r0, #0]
 8017c10:	9500      	str	r5, [sp, #0]
 8017c12:	466d      	mov	r5, sp
 8017c14:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017c18:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017c1c:	4629      	mov	r1, r5
 8017c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c20:	4798      	blx	r3
 8017c22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017c26:	e884 0003 	stmia.w	r4, {r0, r1}
 8017c2a:	4620      	mov	r0, r4
 8017c2c:	b003      	add	sp, #12
 8017c2e:	bd30      	pop	{r4, r5, pc}

08017c30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017c30:	b513      	push	{r0, r1, r4, lr}
 8017c32:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017c36:	4604      	mov	r4, r0
 8017c38:	3301      	adds	r3, #1
 8017c3a:	d109      	bne.n	8017c50 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017c3c:	4601      	mov	r1, r0
 8017c3e:	4668      	mov	r0, sp
 8017c40:	f7ff fd48 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c44:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c48:	8423      	strh	r3, [r4, #32]
 8017c4a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017c4e:	8463      	strh	r3, [r4, #34]	; 0x22
 8017c50:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017c54:	b002      	add	sp, #8
 8017c56:	bd10      	pop	{r4, pc}

08017c58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017c58:	b513      	push	{r0, r1, r4, lr}
 8017c5a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017c5e:	4604      	mov	r4, r0
 8017c60:	3301      	adds	r3, #1
 8017c62:	d109      	bne.n	8017c78 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017c64:	4601      	mov	r1, r0
 8017c66:	4668      	mov	r0, sp
 8017c68:	f7ff fd34 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c70:	8423      	strh	r3, [r4, #32]
 8017c72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017c76:	8463      	strh	r3, [r4, #34]	; 0x22
 8017c78:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017c7c:	b002      	add	sp, #8
 8017c7e:	bd10      	pop	{r4, pc}

08017c80 <_ZN8touchgfx6ScreenC1Ev>:
 8017c80:	b570      	push	{r4, r5, r6, lr}
 8017c82:	4b17      	ldr	r3, [pc, #92]	; (8017ce0 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017c84:	4605      	mov	r5, r0
 8017c86:	4a17      	ldr	r2, [pc, #92]	; (8017ce4 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017c88:	2101      	movs	r1, #1
 8017c8a:	f845 3b04 	str.w	r3, [r5], #4
 8017c8e:	2300      	movs	r3, #0
 8017c90:	6042      	str	r2, [r0, #4]
 8017c92:	4604      	mov	r4, r0
 8017c94:	8103      	strh	r3, [r0, #8]
 8017c96:	8143      	strh	r3, [r0, #10]
 8017c98:	8183      	strh	r3, [r0, #12]
 8017c9a:	81c3      	strh	r3, [r0, #14]
 8017c9c:	8203      	strh	r3, [r0, #16]
 8017c9e:	8243      	strh	r3, [r0, #18]
 8017ca0:	8283      	strh	r3, [r0, #20]
 8017ca2:	82c3      	strh	r3, [r0, #22]
 8017ca4:	6203      	str	r3, [r0, #32]
 8017ca6:	8483      	strh	r3, [r0, #36]	; 0x24
 8017ca8:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017caa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017cae:	6343      	str	r3, [r0, #52]	; 0x34
 8017cb0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8017cb4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017cb8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017cbc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8017cc0:	4b09      	ldr	r3, [pc, #36]	; (8017ce8 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017cc8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017cca:	4a08      	ldr	r2, [pc, #32]	; (8017cec <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017ccc:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017cd0:	4798      	blx	r3
 8017cd2:	6863      	ldr	r3, [r4, #4]
 8017cd4:	4628      	mov	r0, r5
 8017cd6:	4631      	mov	r1, r6
 8017cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cda:	4798      	blx	r3
 8017cdc:	4620      	mov	r0, r4
 8017cde:	bd70      	pop	{r4, r5, r6, pc}
 8017ce0:	080257d8 	.word	0x080257d8
 8017ce4:	08024d40 	.word	0x08024d40
 8017ce8:	2400f236 	.word	0x2400f236
 8017cec:	2400f234 	.word	0x2400f234

08017cf0 <_ZN8touchgfx6Screen4drawEv>:
 8017cf0:	4b09      	ldr	r3, [pc, #36]	; (8017d18 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017cf2:	b507      	push	{r0, r1, r2, lr}
 8017cf4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017cf8:	2100      	movs	r1, #0
 8017cfa:	4b08      	ldr	r3, [pc, #32]	; (8017d1c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017cfc:	9100      	str	r1, [sp, #0]
 8017cfe:	4669      	mov	r1, sp
 8017d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d04:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017d08:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017d0c:	6803      	ldr	r3, [r0, #0]
 8017d0e:	689b      	ldr	r3, [r3, #8]
 8017d10:	4798      	blx	r3
 8017d12:	b003      	add	sp, #12
 8017d14:	f85d fb04 	ldr.w	pc, [sp], #4
 8017d18:	2400f234 	.word	0x2400f234
 8017d1c:	2400f236 	.word	0x2400f236

08017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d24:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017d28:	b089      	sub	sp, #36	; 0x24
 8017d2a:	4680      	mov	r8, r0
 8017d2c:	460c      	mov	r4, r1
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	4615      	mov	r5, r2
 8017d32:	dd0e      	ble.n	8017d52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017d34:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	dd0a      	ble.n	8017d52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017d3c:	4628      	mov	r0, r5
 8017d3e:	f7ff ff5b 	bl	8017bf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017d42:	4621      	mov	r1, r4
 8017d44:	f7fe fb4d 	bl	80163e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017d48:	69eb      	ldr	r3, [r5, #28]
 8017d4a:	b928      	cbnz	r0, 8017d58 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017d4c:	461d      	mov	r5, r3
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d1f4      	bne.n	8017d3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017d52:	b009      	add	sp, #36	; 0x24
 8017d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d58:	ae04      	add	r6, sp, #16
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 80b5 	beq.w	8017eca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	4629      	mov	r1, r5
 8017d64:	a802      	add	r0, sp, #8
 8017d66:	68db      	ldr	r3, [r3, #12]
 8017d68:	4798      	blx	r3
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	f7ff ff60 	bl	8017c30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017d70:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017d74:	4407      	add	r7, r0
 8017d76:	4628      	mov	r0, r5
 8017d78:	f7ff ff6e 	bl	8017c58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017d7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017d80:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017d84:	b23f      	sxth	r7, r7
 8017d86:	4418      	add	r0, r3
 8017d88:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017d8c:	4621      	mov	r1, r4
 8017d8e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017d92:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017d96:	4630      	mov	r0, r6
 8017d98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017d9c:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017da0:	f7f8 fae8 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8017da4:	4628      	mov	r0, r5
 8017da6:	f7ff ff27 	bl	8017bf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017daa:	ab06      	add	r3, sp, #24
 8017dac:	4602      	mov	r2, r0
 8017dae:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017db2:	e883 0003 	stmia.w	r3, {r0, r1}
 8017db6:	4611      	mov	r1, r2
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7f8 fadb 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8017dbe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017dc2:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017dc6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017dca:	4299      	cmp	r1, r3
 8017dcc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017dd0:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017dd4:	d10b      	bne.n	8017dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017dd6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017dda:	4552      	cmp	r2, sl
 8017ddc:	d107      	bne.n	8017dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017dde:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017de2:	455a      	cmp	r2, fp
 8017de4:	d103      	bne.n	8017dee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017de6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017dea:	454a      	cmp	r2, r9
 8017dec:	d06d      	beq.n	8017eca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017dee:	f1bb 0f00 	cmp.w	fp, #0
 8017df2:	dd65      	ble.n	8017ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017df4:	f1b9 0f00 	cmp.w	r9, #0
 8017df8:	dd62      	ble.n	8017ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017dfa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017dfe:	fa1f f08a 	uxth.w	r0, sl
 8017e02:	4552      	cmp	r2, sl
 8017e04:	9000      	str	r0, [sp, #0]
 8017e06:	da12      	bge.n	8017e2e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017e08:	9301      	str	r3, [sp, #4]
 8017e0a:	9b00      	ldr	r3, [sp, #0]
 8017e0c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017e10:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017e14:	1a9a      	subs	r2, r3, r2
 8017e16:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017e1a:	4631      	mov	r1, r6
 8017e1c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017e20:	4640      	mov	r0, r8
 8017e22:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017e26:	69ea      	ldr	r2, [r5, #28]
 8017e28:	f7ff ff7a 	bl	8017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017e2c:	9b01      	ldr	r3, [sp, #4]
 8017e2e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017e32:	b29f      	uxth	r7, r3
 8017e34:	429a      	cmp	r2, r3
 8017e36:	da0d      	bge.n	8017e54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017e38:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017e3c:	1aba      	subs	r2, r7, r2
 8017e3e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017e42:	4631      	mov	r1, r6
 8017e44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017e48:	4640      	mov	r0, r8
 8017e4a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017e4e:	69ea      	ldr	r2, [r5, #28]
 8017e50:	f7ff ff66 	bl	8017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017e54:	8822      	ldrh	r2, [r4, #0]
 8017e56:	445f      	add	r7, fp
 8017e58:	88a3      	ldrh	r3, [r4, #4]
 8017e5a:	b2bf      	uxth	r7, r7
 8017e5c:	4413      	add	r3, r2
 8017e5e:	b23a      	sxth	r2, r7
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	b219      	sxth	r1, r3
 8017e64:	4291      	cmp	r1, r2
 8017e66:	dd0d      	ble.n	8017e84 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8017e68:	1bdb      	subs	r3, r3, r7
 8017e6a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017e6e:	f8ad a012 	strh.w	sl, [sp, #18]
 8017e72:	4631      	mov	r1, r6
 8017e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017e78:	4640      	mov	r0, r8
 8017e7a:	f8ad 9016 	strh.w	r9, [sp, #22]
 8017e7e:	69ea      	ldr	r2, [r5, #28]
 8017e80:	f7ff ff4e 	bl	8017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017e84:	88e2      	ldrh	r2, [r4, #6]
 8017e86:	8863      	ldrh	r3, [r4, #2]
 8017e88:	4413      	add	r3, r2
 8017e8a:	9a00      	ldr	r2, [sp, #0]
 8017e8c:	444a      	add	r2, r9
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	fa1f f982 	uxth.w	r9, r2
 8017e94:	b219      	sxth	r1, r3
 8017e96:	fa0f f289 	sxth.w	r2, r9
 8017e9a:	428a      	cmp	r2, r1
 8017e9c:	da15      	bge.n	8017eca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017e9e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017ea2:	eba3 0309 	sub.w	r3, r3, r9
 8017ea6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017eaa:	f8ad 1014 	strh.w	r1, [sp, #20]
 8017eae:	4631      	mov	r1, r6
 8017eb0:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017eb4:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017eb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017ebc:	69ea      	ldr	r2, [r5, #28]
 8017ebe:	e001      	b.n	8017ec4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8017ec0:	69ea      	ldr	r2, [r5, #28]
 8017ec2:	4621      	mov	r1, r4
 8017ec4:	4640      	mov	r0, r8
 8017ec6:	f7ff ff2b 	bl	8017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017eca:	4628      	mov	r0, r5
 8017ecc:	f7ff fe94 	bl	8017bf8 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017ed0:	6861      	ldr	r1, [r4, #4]
 8017ed2:	4602      	mov	r2, r0
 8017ed4:	4633      	mov	r3, r6
 8017ed6:	6820      	ldr	r0, [r4, #0]
 8017ed8:	c303      	stmia	r3!, {r0, r1}
 8017eda:	4611      	mov	r1, r2
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7f8 fa49 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8017ee2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	f77f af33 	ble.w	8017d52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017eec:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	f77f af2e 	ble.w	8017d52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f7ff fe9a 	bl	8017c30 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017efc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017f00:	1a18      	subs	r0, r3, r0
 8017f02:	f8ad 0010 	strh.w	r0, [sp, #16]
 8017f06:	4628      	mov	r0, r5
 8017f08:	f7ff fea6 	bl	8017c58 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017f0c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017f10:	4631      	mov	r1, r6
 8017f12:	1a18      	subs	r0, r3, r0
 8017f14:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017f18:	4628      	mov	r0, r5
 8017f1a:	682b      	ldr	r3, [r5, #0]
 8017f1c:	689b      	ldr	r3, [r3, #8]
 8017f1e:	4798      	blx	r3
 8017f20:	e717      	b.n	8017d52 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08017f22 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8017f22:	b570      	push	{r4, r5, r6, lr}
 8017f24:	1d06      	adds	r6, r0, #4
 8017f26:	b086      	sub	sp, #24
 8017f28:	460c      	mov	r4, r1
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	4631      	mov	r1, r6
 8017f2e:	4605      	mov	r5, r0
 8017f30:	a802      	add	r0, sp, #8
 8017f32:	9301      	str	r3, [sp, #4]
 8017f34:	f7ff fbce 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017f38:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017f3c:	8822      	ldrh	r2, [r4, #0]
 8017f3e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8017f42:	1ad2      	subs	r2, r2, r3
 8017f44:	8863      	ldrh	r3, [r4, #2]
 8017f46:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017f4a:	1a5b      	subs	r3, r3, r1
 8017f4c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8017f50:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017f54:	aa01      	add	r2, sp, #4
 8017f56:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017f5a:	4630      	mov	r0, r6
 8017f5c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017f60:	a904      	add	r1, sp, #16
 8017f62:	f8ad 3012 	strh.w	r3, [sp, #18]
 8017f66:	f7f8 fadd 	bl	8010524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8017f6a:	9a01      	ldr	r2, [sp, #4]
 8017f6c:	b11a      	cbz	r2, 8017f76 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8017f6e:	4621      	mov	r1, r4
 8017f70:	4628      	mov	r0, r5
 8017f72:	f7ff fed5 	bl	8017d20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017f76:	b006      	add	sp, #24
 8017f78:	bd70      	pop	{r4, r5, r6, pc}

08017f7a <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	b530      	push	{r4, r5, lr}
 8017f7e:	4604      	mov	r4, r0
 8017f80:	b085      	sub	sp, #20
 8017f82:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8017f86:	460d      	mov	r5, r1
 8017f88:	466b      	mov	r3, sp
 8017f8a:	6851      	ldr	r1, [r2, #4]
 8017f8c:	c303      	stmia	r3!, {r0, r1}
 8017f8e:	4629      	mov	r1, r5
 8017f90:	4668      	mov	r0, sp
 8017f92:	f7f8 f9ef 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 8017f96:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017f9a:	b12b      	cbz	r3, 8017fa8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8017f9c:	4669      	mov	r1, sp
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f7ff ffbf 	bl	8017f22 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8017fa4:	b005      	add	sp, #20
 8017fa6:	bd30      	pop	{r4, r5, pc}
 8017fa8:	3404      	adds	r4, #4
 8017faa:	a802      	add	r0, sp, #8
 8017fac:	4621      	mov	r1, r4
 8017fae:	f7ff fb91 	bl	80176d4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fb2:	f8bd 3000 	ldrh.w	r3, [sp]
 8017fb6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017fba:	4669      	mov	r1, sp
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	1a9b      	subs	r3, r3, r2
 8017fc0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017fc4:	f8ad 3000 	strh.w	r3, [sp]
 8017fc8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017fcc:	1a9b      	subs	r3, r3, r2
 8017fce:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017fd2:	f7f8 fa6e 	bl	80104b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8017fd6:	e7e5      	b.n	8017fa4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08017fd8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8017fd8:	460b      	mov	r3, r1
 8017fda:	680a      	ldr	r2, [r1, #0]
 8017fdc:	1d01      	adds	r1, r0, #4
 8017fde:	6992      	ldr	r2, [r2, #24]
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	4710      	bx	r2

08017fe4 <_ZN8touchgfx12TextProviderC1Ev>:
 8017fe4:	b538      	push	{r3, r4, r5, lr}
 8017fe6:	2500      	movs	r5, #0
 8017fe8:	2302      	movs	r3, #2
 8017fea:	4604      	mov	r4, r0
 8017fec:	220e      	movs	r2, #14
 8017fee:	7403      	strb	r3, [r0, #16]
 8017ff0:	4629      	mov	r1, r5
 8017ff2:	6145      	str	r5, [r0, #20]
 8017ff4:	7605      	strb	r5, [r0, #24]
 8017ff6:	83c5      	strh	r5, [r0, #30]
 8017ff8:	8405      	strh	r5, [r0, #32]
 8017ffa:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017ffc:	8705      	strh	r5, [r0, #56]	; 0x38
 8017ffe:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8018000:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8018004:	e9c0 5500 	strd	r5, r5, [r0]
 8018008:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801800c:	304c      	adds	r0, #76	; 0x4c
 801800e:	f00a f9c3 	bl	8022398 <memset>
 8018012:	2301      	movs	r3, #1
 8018014:	4620      	mov	r0, r4
 8018016:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801801a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801801e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8018022:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8018026:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801802a:	f7ef fa0d 	bl	8007448 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801802e:	4620      	mov	r0, r4
 8018030:	bd38      	pop	{r3, r4, r5, pc}

08018032 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018032:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018034:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018038:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801803a:	fab0 f080 	clz	r0, r0
 801803e:	0940      	lsrs	r0, r0, #5
 8018040:	4770      	bx	lr

08018042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018042:	b530      	push	{r4, r5, lr}
 8018044:	2500      	movs	r5, #0
 8018046:	2401      	movs	r4, #1
 8018048:	6843      	ldr	r3, [r0, #4]
 801804a:	b913      	cbnz	r3, 8018052 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801804c:	6803      	ldr	r3, [r0, #0]
 801804e:	b313      	cbz	r3, 8018096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018050:	6043      	str	r3, [r0, #4]
 8018052:	7e03      	ldrb	r3, [r0, #24]
 8018054:	b143      	cbz	r3, 8018068 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018056:	6943      	ldr	r3, [r0, #20]
 8018058:	b12b      	cbz	r3, 8018066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801805a:	881a      	ldrh	r2, [r3, #0]
 801805c:	b11a      	cbz	r2, 8018066 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801805e:	1c9a      	adds	r2, r3, #2
 8018060:	6142      	str	r2, [r0, #20]
 8018062:	8818      	ldrh	r0, [r3, #0]
 8018064:	bd30      	pop	{r4, r5, pc}
 8018066:	7605      	strb	r5, [r0, #24]
 8018068:	6843      	ldr	r3, [r0, #4]
 801806a:	8819      	ldrh	r1, [r3, #0]
 801806c:	b199      	cbz	r1, 8018096 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801806e:	1c9a      	adds	r2, r3, #2
 8018070:	2902      	cmp	r1, #2
 8018072:	6042      	str	r2, [r0, #4]
 8018074:	d1f5      	bne.n	8018062 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018076:	7c03      	ldrb	r3, [r0, #16]
 8018078:	2b01      	cmp	r3, #1
 801807a:	d8e5      	bhi.n	8018048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801807c:	1c5a      	adds	r2, r3, #1
 801807e:	3302      	adds	r3, #2
 8018080:	7402      	strb	r2, [r0, #16]
 8018082:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018086:	6143      	str	r3, [r0, #20]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d0dd      	beq.n	8018048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801808c:	881b      	ldrh	r3, [r3, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d0da      	beq.n	8018048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018092:	7604      	strb	r4, [r0, #24]
 8018094:	e7d8      	b.n	8018048 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018096:	2000      	movs	r0, #0
 8018098:	e7e4      	b.n	8018064 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801809a:	6001      	str	r1, [r0, #0]
 801809c:	2100      	movs	r1, #0
 801809e:	b430      	push	{r4, r5}
 80180a0:	6041      	str	r1, [r0, #4]
 80180a2:	6815      	ldr	r5, [r2, #0]
 80180a4:	6085      	str	r5, [r0, #8]
 80180a6:	6852      	ldr	r2, [r2, #4]
 80180a8:	6443      	str	r3, [r0, #68]	; 0x44
 80180aa:	9b02      	ldr	r3, [sp, #8]
 80180ac:	60c2      	str	r2, [r0, #12]
 80180ae:	7401      	strb	r1, [r0, #16]
 80180b0:	6141      	str	r1, [r0, #20]
 80180b2:	7601      	strb	r1, [r0, #24]
 80180b4:	8701      	strh	r1, [r0, #56]	; 0x38
 80180b6:	8401      	strh	r1, [r0, #32]
 80180b8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80180bc:	6483      	str	r3, [r0, #72]	; 0x48
 80180be:	bc30      	pop	{r4, r5}
 80180c0:	f7ef b9c2 	b.w	8007448 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080180c4 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80180c4:	b408      	push	{r3}
 80180c6:	b510      	push	{r4, lr}
 80180c8:	b085      	sub	sp, #20
 80180ca:	ac07      	add	r4, sp, #28
 80180cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80180d0:	9300      	str	r3, [sp, #0]
 80180d2:	4613      	mov	r3, r2
 80180d4:	4622      	mov	r2, r4
 80180d6:	9403      	str	r4, [sp, #12]
 80180d8:	f7ff ffdf 	bl	801809a <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80180dc:	b005      	add	sp, #20
 80180de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180e2:	b001      	add	sp, #4
 80180e4:	4770      	bx	lr

080180e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80180e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180e8:	4605      	mov	r5, r0
 80180ea:	4608      	mov	r0, r1
 80180ec:	b1f1      	cbz	r1, 801812c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80180ee:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80180f2:	460b      	mov	r3, r1
 80180f4:	f101 0708 	add.w	r7, r1, #8
 80180f8:	4622      	mov	r2, r4
 80180fa:	6818      	ldr	r0, [r3, #0]
 80180fc:	3308      	adds	r3, #8
 80180fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018102:	4626      	mov	r6, r4
 8018104:	42bb      	cmp	r3, r7
 8018106:	c603      	stmia	r6!, {r0, r1}
 8018108:	4634      	mov	r4, r6
 801810a:	d1f6      	bne.n	80180fa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801810c:	6818      	ldr	r0, [r3, #0]
 801810e:	6030      	str	r0, [r6, #0]
 8018110:	4610      	mov	r0, r2
 8018112:	889b      	ldrh	r3, [r3, #4]
 8018114:	80b3      	strh	r3, [r6, #4]
 8018116:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801811a:	015b      	lsls	r3, r3, #5
 801811c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8018120:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8018124:	430b      	orrs	r3, r1
 8018126:	425b      	negs	r3, r3
 8018128:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801812c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801812e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801812e:	b538      	push	{r3, r4, r5, lr}
 8018130:	460c      	mov	r4, r1
 8018132:	6811      	ldr	r1, [r2, #0]
 8018134:	4610      	mov	r0, r2
 8018136:	68cd      	ldr	r5, [r1, #12]
 8018138:	4619      	mov	r1, r3
 801813a:	47a8      	blx	r5
 801813c:	2800      	cmp	r0, #0
 801813e:	bf08      	it	eq
 8018140:	4620      	moveq	r0, r4
 8018142:	bd38      	pop	{r3, r4, r5, pc}

08018144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018146:	4604      	mov	r4, r0
 8018148:	4615      	mov	r5, r2
 801814a:	4608      	mov	r0, r1
 801814c:	b93a      	cbnz	r2, 801815e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801814e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8018152:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018156:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801815a:	4628      	mov	r0, r5
 801815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801815e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8018162:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8018166:	8893      	ldrh	r3, [r2, #4]
 8018168:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801816c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018170:	79ee      	ldrb	r6, [r5, #7]
 8018172:	4316      	orrs	r6, r2
 8018174:	19da      	adds	r2, r3, r7
 8018176:	b291      	uxth	r1, r2
 8018178:	b2b7      	uxth	r7, r6
 801817a:	291d      	cmp	r1, #29
 801817c:	d87b      	bhi.n	8018276 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801817e:	2201      	movs	r2, #1
 8018180:	10f6      	asrs	r6, r6, #3
 8018182:	408a      	lsls	r2, r1
 8018184:	4974      	ldr	r1, [pc, #464]	; (8018358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8018186:	420a      	tst	r2, r1
 8018188:	d12e      	bne.n	80181e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801818a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801818e:	d072      	beq.n	8018276 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8018190:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018194:	462b      	mov	r3, r5
 8018196:	f105 0e08 	add.w	lr, r5, #8
 801819a:	4615      	mov	r5, r2
 801819c:	6818      	ldr	r0, [r3, #0]
 801819e:	3308      	adds	r3, #8
 80181a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80181a4:	4694      	mov	ip, r2
 80181a6:	4573      	cmp	r3, lr
 80181a8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80181ac:	4662      	mov	r2, ip
 80181ae:	d1f5      	bne.n	801819c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80181b0:	6818      	ldr	r0, [r3, #0]
 80181b2:	f8cc 0000 	str.w	r0, [ip]
 80181b6:	889b      	ldrh	r3, [r3, #4]
 80181b8:	f8ac 3004 	strh.w	r3, [ip, #4]
 80181bc:	b2b3      	uxth	r3, r6
 80181be:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80181c2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80181c6:	1aca      	subs	r2, r1, r3
 80181c8:	1bcf      	subs	r7, r1, r7
 80181ca:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80181ce:	b292      	uxth	r2, r2
 80181d0:	1afb      	subs	r3, r7, r3
 80181d2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80181d6:	10d2      	asrs	r2, r2, #3
 80181d8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80181dc:	4302      	orrs	r2, r0
 80181de:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80181e2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80181e6:	e7b8      	b.n	801815a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80181e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80181ea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80181ee:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80181f0:	f640 6333 	movw	r3, #3635	; 0xe33
 80181f4:	4299      	cmp	r1, r3
 80181f6:	d110      	bne.n	801821a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80181f8:	6803      	ldr	r3, [r0, #0]
 80181fa:	68db      	ldr	r3, [r3, #12]
 80181fc:	4798      	blx	r3
 80181fe:	7b41      	ldrb	r1, [r0, #13]
 8018200:	00cb      	lsls	r3, r1, #3
 8018202:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018206:	7a03      	ldrb	r3, [r0, #8]
 8018208:	0648      	lsls	r0, r1, #25
 801820a:	ea43 0302 	orr.w	r3, r3, r2
 801820e:	bf44      	itt	mi
 8018210:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018214:	b21b      	sxthmi	r3, r3
 8018216:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801821a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801821e:	462a      	mov	r2, r5
 8018220:	f105 0c08 	add.w	ip, r5, #8
 8018224:	443b      	add	r3, r7
 8018226:	4433      	add	r3, r6
 8018228:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801822c:	b29b      	uxth	r3, r3
 801822e:	4635      	mov	r5, r6
 8018230:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018234:	6810      	ldr	r0, [r2, #0]
 8018236:	3208      	adds	r2, #8
 8018238:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801823c:	4637      	mov	r7, r6
 801823e:	4562      	cmp	r2, ip
 8018240:	c703      	stmia	r7!, {r0, r1}
 8018242:	463e      	mov	r6, r7
 8018244:	d1f6      	bne.n	8018234 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8018246:	6810      	ldr	r0, [r2, #0]
 8018248:	6038      	str	r0, [r7, #0]
 801824a:	8892      	ldrh	r2, [r2, #4]
 801824c:	80ba      	strh	r2, [r7, #4]
 801824e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018252:	10db      	asrs	r3, r3, #3
 8018254:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801825c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018260:	4313      	orrs	r3, r2
 8018262:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018266:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801826a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801826e:	1a9b      	subs	r3, r3, r2
 8018270:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018274:	e771      	b.n	801815a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018276:	f023 0204 	bic.w	r2, r3, #4
 801827a:	f640 611b 	movw	r1, #3611	; 0xe1b
 801827e:	428a      	cmp	r2, r1
 8018280:	d003      	beq.n	801828a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8018282:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018286:	4293      	cmp	r3, r2
 8018288:	d120      	bne.n	80182cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801828a:	3b01      	subs	r3, #1
 801828c:	4602      	mov	r2, r0
 801828e:	4629      	mov	r1, r5
 8018290:	4620      	mov	r0, r4
 8018292:	b29b      	uxth	r3, r3
 8018294:	f7ff ff4b 	bl	801812e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018298:	7b41      	ldrb	r1, [r0, #13]
 801829a:	00cb      	lsls	r3, r1, #3
 801829c:	0649      	lsls	r1, r1, #25
 801829e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80182a2:	7a03      	ldrb	r3, [r0, #8]
 80182a4:	ea43 0302 	orr.w	r3, r3, r2
 80182a8:	bf44      	itt	mi
 80182aa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80182ae:	b21b      	sxthmi	r3, r3
 80182b0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80182b4:	7b6b      	ldrb	r3, [r5, #13]
 80182b6:	7aaa      	ldrb	r2, [r5, #10]
 80182b8:	005b      	lsls	r3, r3, #1
 80182ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182be:	4313      	orrs	r3, r2
 80182c0:	115a      	asrs	r2, r3, #5
 80182c2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80182c6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80182ca:	e035      	b.n	8018338 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80182cc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80182d0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80182d4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80182d8:	7a2a      	ldrb	r2, [r5, #8]
 80182da:	ea42 0201 	orr.w	r2, r2, r1
 80182de:	f640 6109 	movw	r1, #3593	; 0xe09
 80182e2:	bf1c      	itt	ne
 80182e4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80182e8:	b212      	sxthne	r2, r2
 80182ea:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80182ee:	f023 0210 	bic.w	r2, r3, #16
 80182f2:	428a      	cmp	r2, r1
 80182f4:	d003      	beq.n	80182fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80182f6:	f640 6213 	movw	r2, #3603	; 0xe13
 80182fa:	4293      	cmp	r3, r2
 80182fc:	d129      	bne.n	8018352 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80182fe:	7b6e      	ldrb	r6, [r5, #13]
 8018300:	4629      	mov	r1, r5
 8018302:	0076      	lsls	r6, r6, #1
 8018304:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8018308:	7aae      	ldrb	r6, [r5, #10]
 801830a:	4316      	orrs	r6, r2
 801830c:	f640 6213 	movw	r2, #3603	; 0xe13
 8018310:	4293      	cmp	r3, r2
 8018312:	4602      	mov	r2, r0
 8018314:	4620      	mov	r0, r4
 8018316:	bf16      	itet	ne
 8018318:	f103 33ff 	addne.w	r3, r3, #4294967295
 801831c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8018320:	b29b      	uxthne	r3, r3
 8018322:	f7ff ff04 	bl	801812e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018326:	7b43      	ldrb	r3, [r0, #13]
 8018328:	7a82      	ldrb	r2, [r0, #10]
 801832a:	005b      	lsls	r3, r3, #1
 801832c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018330:	4313      	orrs	r3, r2
 8018332:	1af6      	subs	r6, r6, r3
 8018334:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8018338:	7b69      	ldrb	r1, [r5, #13]
 801833a:	00cb      	lsls	r3, r1, #3
 801833c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018340:	7a2b      	ldrb	r3, [r5, #8]
 8018342:	4313      	orrs	r3, r2
 8018344:	064a      	lsls	r2, r1, #25
 8018346:	bf44      	itt	mi
 8018348:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801834c:	b21b      	sxthmi	r3, r3
 801834e:	1bdb      	subs	r3, r3, r7
 8018350:	e747      	b.n	80181e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018352:	2300      	movs	r3, #0
 8018354:	e7b7      	b.n	80182c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8018356:	bf00      	nop
 8018358:	3fc00079 	.word	0x3fc00079

0801835c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801835c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018360:	4604      	mov	r4, r0
 8018362:	b942      	cbnz	r2, 8018376 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018368:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801836c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8018370:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018374:	e047      	b.n	8018406 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018376:	7b51      	ldrb	r1, [r2, #13]
 8018378:	8893      	ldrh	r3, [r2, #4]
 801837a:	010d      	lsls	r5, r1, #4
 801837c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8018380:	79d5      	ldrb	r5, [r2, #7]
 8018382:	4305      	orrs	r5, r0
 8018384:	2d04      	cmp	r5, #4
 8018386:	bfcc      	ite	gt
 8018388:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801838c:	f04f 0e01 	movle.w	lr, #1
 8018390:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018394:	f200 80ab 	bhi.w	80184ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018398:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801839c:	4283      	cmp	r3, r0
 801839e:	d216      	bcs.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80183a0:	f240 605b 	movw	r0, #1627	; 0x65b
 80183a4:	4283      	cmp	r3, r0
 80183a6:	d859      	bhi.n	801845c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80183a8:	f240 6057 	movw	r0, #1623	; 0x657
 80183ac:	4283      	cmp	r3, r0
 80183ae:	d20e      	bcs.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80183b0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80183b4:	d24a      	bcs.n	801844c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80183b6:	f240 604e 	movw	r0, #1614	; 0x64e
 80183ba:	4283      	cmp	r3, r0
 80183bc:	d207      	bcs.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80183be:	f240 601a 	movw	r0, #1562	; 0x61a
 80183c2:	4283      	cmp	r3, r0
 80183c4:	d02a      	beq.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80183c6:	d821      	bhi.n	801840c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80183c8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80183cc:	d35b      	bcc.n	8018486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80183ce:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80183d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80183d6:	f040 80d0 	bne.w	801857a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80183da:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80183de:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80183e2:	f040 80ca 	bne.w	801857a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80183e6:	00cb      	lsls	r3, r1, #3
 80183e8:	0649      	lsls	r1, r1, #25
 80183ea:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80183ee:	7a13      	ldrb	r3, [r2, #8]
 80183f0:	ea43 0300 	orr.w	r3, r3, r0
 80183f4:	bf44      	itt	mi
 80183f6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80183fa:	b21b      	sxthmi	r3, r3
 80183fc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018400:	1b5d      	subs	r5, r3, r5
 8018402:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018406:	4610      	mov	r0, r2
 8018408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801840c:	f240 604b 	movw	r0, #1611	; 0x64b
 8018410:	4283      	cmp	r3, r0
 8018412:	d338      	bcc.n	8018486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018414:	f240 604c 	movw	r0, #1612	; 0x64c
 8018418:	4283      	cmp	r3, r0
 801841a:	d9d8      	bls.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801841c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8018420:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8018424:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018428:	f040 80f3 	bne.w	8018612 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801842c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018430:	f040 80ef 	bne.w	8018612 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8018434:	00cb      	lsls	r3, r1, #3
 8018436:	064e      	lsls	r6, r1, #25
 8018438:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801843c:	7a13      	ldrb	r3, [r2, #8]
 801843e:	ea43 0300 	orr.w	r3, r3, r0
 8018442:	bf44      	itt	mi
 8018444:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018448:	b21b      	sxthmi	r3, r3
 801844a:	e7d9      	b.n	8018400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801844c:	f240 6054 	movw	r0, #1620	; 0x654
 8018450:	4283      	cmp	r3, r0
 8018452:	d8e3      	bhi.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018454:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018458:	d9e0      	bls.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801845a:	e7b8      	b.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801845c:	f240 6074 	movw	r0, #1652	; 0x674
 8018460:	4283      	cmp	r3, r0
 8018462:	d0b4      	beq.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018464:	d82d      	bhi.n	80184c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018466:	f240 605e 	movw	r0, #1630	; 0x65e
 801846a:	4283      	cmp	r3, r0
 801846c:	d804      	bhi.n	8018478 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801846e:	f240 605d 	movw	r0, #1629	; 0x65d
 8018472:	4283      	cmp	r3, r0
 8018474:	d3d2      	bcc.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018476:	e7aa      	b.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018478:	f240 605f 	movw	r0, #1631	; 0x65f
 801847c:	4283      	cmp	r3, r0
 801847e:	d0cd      	beq.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018480:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018484:	d0a3      	beq.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018486:	00cb      	lsls	r3, r1, #3
 8018488:	0649      	lsls	r1, r1, #25
 801848a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801848e:	7a13      	ldrb	r3, [r2, #8]
 8018490:	ea43 0300 	orr.w	r3, r3, r0
 8018494:	bf44      	itt	mi
 8018496:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801849a:	b21b      	sxthmi	r3, r3
 801849c:	1b5d      	subs	r5, r3, r5
 801849e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80184a2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80184a6:	7b53      	ldrb	r3, [r2, #13]
 80184a8:	015b      	lsls	r3, r3, #5
 80184aa:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80184ae:	7993      	ldrb	r3, [r2, #6]
 80184b0:	430b      	orrs	r3, r1
 80184b2:	2105      	movs	r1, #5
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	fb93 f3f1 	sdiv	r3, r3, r1
 80184ba:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80184be:	440b      	add	r3, r1
 80184c0:	e756      	b.n	8018370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80184c2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80184c6:	4283      	cmp	r3, r0
 80184c8:	d809      	bhi.n	80184de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80184ca:	f240 60df 	movw	r0, #1759	; 0x6df
 80184ce:	4283      	cmp	r3, r0
 80184d0:	f4bf af7d 	bcs.w	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80184d4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80184d8:	2b05      	cmp	r3, #5
 80184da:	d8d4      	bhi.n	8018486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80184dc:	e777      	b.n	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80184de:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80184e2:	4283      	cmp	r3, r0
 80184e4:	d09a      	beq.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80184e6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80184ea:	4283      	cmp	r3, r0
 80184ec:	e7ca      	b.n	8018484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80184ee:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80184f2:	d22b      	bcs.n	801854c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80184f4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80184f8:	4283      	cmp	r3, r0
 80184fa:	d28f      	bcs.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80184fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8018500:	4283      	cmp	r3, r0
 8018502:	d816      	bhi.n	8018532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8018504:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8018508:	4283      	cmp	r3, r0
 801850a:	f4bf af60 	bcs.w	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801850e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8018512:	4283      	cmp	r3, r0
 8018514:	d80a      	bhi.n	801852c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8018516:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801851a:	4283      	cmp	r3, r0
 801851c:	f4bf af57 	bcs.w	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018520:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8018524:	4283      	cmp	r3, r0
 8018526:	f43f af79 	beq.w	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801852a:	e7ac      	b.n	8018486 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801852c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8018530:	e7f8      	b.n	8018524 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8018532:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8018536:	4283      	cmp	r3, r0
 8018538:	d802      	bhi.n	8018540 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801853a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801853e:	e798      	b.n	8018472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8018540:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018544:	4283      	cmp	r3, r0
 8018546:	f47f af42 	bne.w	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801854a:	e767      	b.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801854c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8018550:	4283      	cmp	r3, r0
 8018552:	f43f af63 	beq.w	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018556:	d802      	bhi.n	801855e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018558:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801855c:	e7f2      	b.n	8018544 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801855e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8018562:	4283      	cmp	r3, r0
 8018564:	d805      	bhi.n	8018572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018566:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801856a:	4283      	cmp	r3, r0
 801856c:	f4ff af2f 	bcc.w	80183ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018570:	e754      	b.n	801841c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018572:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018576:	4283      	cmp	r3, r0
 8018578:	e7af      	b.n	80184da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801857a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801857e:	4617      	mov	r7, r2
 8018580:	f102 0808 	add.w	r8, r2, #8
 8018584:	4666      	mov	r6, ip
 8018586:	6838      	ldr	r0, [r7, #0]
 8018588:	3708      	adds	r7, #8
 801858a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801858e:	46e6      	mov	lr, ip
 8018590:	4547      	cmp	r7, r8
 8018592:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018596:	46f4      	mov	ip, lr
 8018598:	d1f5      	bne.n	8018586 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801859a:	6838      	ldr	r0, [r7, #0]
 801859c:	f8ce 0000 	str.w	r0, [lr]
 80185a0:	88b9      	ldrh	r1, [r7, #4]
 80185a2:	f8ae 1004 	strh.w	r1, [lr, #4]
 80185a6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80185aa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80185ae:	d009      	beq.n	80185c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80185b0:	7b51      	ldrb	r1, [r2, #13]
 80185b2:	7992      	ldrb	r2, [r2, #6]
 80185b4:	0149      	lsls	r1, r1, #5
 80185b6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80185ba:	4311      	orrs	r1, r2
 80185bc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80185c0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80185c4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80185c8:	b2ad      	uxth	r5, r5
 80185ca:	d00d      	beq.n	80185e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80185cc:	442b      	add	r3, r5
 80185ce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80185d2:	b29b      	uxth	r3, r3
 80185d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80185d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80185dc:	10db      	asrs	r3, r3, #3
 80185de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80185e2:	4313      	orrs	r3, r2
 80185e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80185e8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80185ec:	00cb      	lsls	r3, r1, #3
 80185ee:	064f      	lsls	r7, r1, #25
 80185f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80185f4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80185f8:	ea43 0302 	orr.w	r3, r3, r2
 80185fc:	bf44      	itt	mi
 80185fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018602:	b21b      	sxthmi	r3, r3
 8018604:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018608:	1b5b      	subs	r3, r3, r5
 801860a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801860e:	4632      	mov	r2, r6
 8018610:	e6f9      	b.n	8018406 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018612:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8018616:	4617      	mov	r7, r2
 8018618:	f102 0908 	add.w	r9, r2, #8
 801861c:	4666      	mov	r6, ip
 801861e:	6838      	ldr	r0, [r7, #0]
 8018620:	3708      	adds	r7, #8
 8018622:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8018626:	46e0      	mov	r8, ip
 8018628:	454f      	cmp	r7, r9
 801862a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801862e:	46c4      	mov	ip, r8
 8018630:	d1f5      	bne.n	801861e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8018632:	6838      	ldr	r0, [r7, #0]
 8018634:	f8c8 0000 	str.w	r0, [r8]
 8018638:	88b9      	ldrh	r1, [r7, #4]
 801863a:	f8a8 1004 	strh.w	r1, [r8, #4]
 801863e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018642:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018646:	d009      	beq.n	801865c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018648:	7b51      	ldrb	r1, [r2, #13]
 801864a:	7992      	ldrb	r2, [r2, #6]
 801864c:	0149      	lsls	r1, r1, #5
 801864e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018652:	4311      	orrs	r1, r2
 8018654:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018658:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801865c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018660:	d00e      	beq.n	8018680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8018662:	eba3 030e 	sub.w	r3, r3, lr
 8018666:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801866a:	b29b      	uxth	r3, r3
 801866c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018670:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018674:	10db      	asrs	r3, r3, #3
 8018676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801867a:	4313      	orrs	r3, r2
 801867c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018680:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018684:	00cb      	lsls	r3, r1, #3
 8018686:	0648      	lsls	r0, r1, #25
 8018688:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801868c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8018690:	ea43 0302 	orr.w	r3, r3, r2
 8018694:	bf44      	itt	mi
 8018696:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801869a:	b21b      	sxthmi	r3, r3
 801869c:	1b5d      	subs	r5, r3, r5
 801869e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80186a2:	e7b4      	b.n	801860e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080186a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80186a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186a8:	461e      	mov	r6, r3
 80186aa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80186ac:	4604      	mov	r4, r0
 80186ae:	4617      	mov	r7, r2
 80186b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80186b4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80186b8:	f7ee fe84 	bl	80073c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80186bc:	4605      	mov	r5, r0
 80186be:	b918      	cbnz	r0, 80186c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80186c0:	6030      	str	r0, [r6, #0]
 80186c2:	4628      	mov	r0, r5
 80186c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	4601      	mov	r1, r0
 80186cc:	4638      	mov	r0, r7
 80186ce:	68db      	ldr	r3, [r3, #12]
 80186d0:	4798      	blx	r3
 80186d2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80186d6:	4602      	mov	r2, r0
 80186d8:	6030      	str	r0, [r6, #0]
 80186da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80186de:	d213      	bcs.n	8018708 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80186e0:	4643      	mov	r3, r8
 80186e2:	4639      	mov	r1, r7
 80186e4:	4620      	mov	r0, r4
 80186e6:	f7ff fe39 	bl	801835c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80186ea:	6030      	str	r0, [r6, #0]
 80186ec:	6833      	ldr	r3, [r6, #0]
 80186ee:	b143      	cbz	r3, 8018702 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80186f0:	7b5a      	ldrb	r2, [r3, #13]
 80186f2:	7a9b      	ldrb	r3, [r3, #10]
 80186f4:	0052      	lsls	r2, r2, #1
 80186f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80186fa:	4313      	orrs	r3, r2
 80186fc:	bf0c      	ite	eq
 80186fe:	2301      	moveq	r3, #1
 8018700:	2300      	movne	r3, #0
 8018702:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8018706:	e7dc      	b.n	80186c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8018708:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801870c:	b29b      	uxth	r3, r3
 801870e:	2b7f      	cmp	r3, #127	; 0x7f
 8018710:	d804      	bhi.n	801871c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8018712:	4639      	mov	r1, r7
 8018714:	4620      	mov	r0, r4
 8018716:	f7ff fd15 	bl	8018144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801871a:	e7e6      	b.n	80186ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801871c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018720:	2b00      	cmp	r3, #0
 8018722:	d0e3      	beq.n	80186ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8018724:	f640 1302 	movw	r3, #2306	; 0x902
 8018728:	429d      	cmp	r5, r3
 801872a:	d1df      	bne.n	80186ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801872c:	4601      	mov	r1, r0
 801872e:	4620      	mov	r0, r4
 8018730:	f7ff fcd9 	bl	80180e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018734:	e7d9      	b.n	80186ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08018736 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8018736:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801873a:	461e      	mov	r6, r3
 801873c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801873e:	4604      	mov	r4, r0
 8018740:	4617      	mov	r7, r2
 8018742:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018746:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801874a:	f7ee fe3b 	bl	80073c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801874e:	4605      	mov	r5, r0
 8018750:	b918      	cbnz	r0, 801875a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8018752:	6030      	str	r0, [r6, #0]
 8018754:	4628      	mov	r0, r5
 8018756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801875a:	683b      	ldr	r3, [r7, #0]
 801875c:	4601      	mov	r1, r0
 801875e:	4638      	mov	r0, r7
 8018760:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018764:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018768:	47c8      	blx	r9
 801876a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801876e:	4602      	mov	r2, r0
 8018770:	6030      	str	r0, [r6, #0]
 8018772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018776:	d213      	bcs.n	80187a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018778:	4643      	mov	r3, r8
 801877a:	4639      	mov	r1, r7
 801877c:	4620      	mov	r0, r4
 801877e:	f7ff fded 	bl	801835c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8018782:	6030      	str	r0, [r6, #0]
 8018784:	6833      	ldr	r3, [r6, #0]
 8018786:	b143      	cbz	r3, 801879a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018788:	7b5a      	ldrb	r2, [r3, #13]
 801878a:	7a9b      	ldrb	r3, [r3, #10]
 801878c:	0052      	lsls	r2, r2, #1
 801878e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8018792:	4313      	orrs	r3, r2
 8018794:	bf0c      	ite	eq
 8018796:	2301      	moveq	r3, #1
 8018798:	2300      	movne	r3, #0
 801879a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801879e:	e7d9      	b.n	8018754 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80187a0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80187a4:	b29b      	uxth	r3, r3
 80187a6:	2b7f      	cmp	r3, #127	; 0x7f
 80187a8:	d804      	bhi.n	80187b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80187aa:	4639      	mov	r1, r7
 80187ac:	4620      	mov	r0, r4
 80187ae:	f7ff fcc9 	bl	8018144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80187b2:	e7e6      	b.n	8018782 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80187b4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d0e3      	beq.n	8018784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80187bc:	f640 1302 	movw	r3, #2306	; 0x902
 80187c0:	429d      	cmp	r5, r3
 80187c2:	d1df      	bne.n	8018784 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80187c4:	4601      	mov	r1, r0
 80187c6:	4620      	mov	r0, r4
 80187c8:	f7ff fc8d 	bl	80180e6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80187cc:	e7d9      	b.n	8018782 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080187ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80187ce:	b510      	push	{r4, lr}
 80187d0:	4604      	mov	r4, r0
 80187d2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80187d6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80187d8:	b1e1      	cbz	r1, 8018814 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80187da:	2b0a      	cmp	r3, #10
 80187dc:	d02d      	beq.n	801883a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80187de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80187e0:	3901      	subs	r1, #1
 80187e2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80187e6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80187e8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80187ec:	1c51      	adds	r1, r2, #1
 80187ee:	b289      	uxth	r1, r1
 80187f0:	2901      	cmp	r1, #1
 80187f2:	bf8a      	itet	hi
 80187f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80187f8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80187fa:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80187fc:	1c5a      	adds	r2, r3, #1
 80187fe:	8722      	strh	r2, [r4, #56]	; 0x38
 8018800:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018802:	4413      	add	r3, r2
 8018804:	b29b      	uxth	r3, r3
 8018806:	2b09      	cmp	r3, #9
 8018808:	bf88      	it	hi
 801880a:	3b0a      	subhi	r3, #10
 801880c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018810:	8458      	strh	r0, [r3, #34]	; 0x22
 8018812:	e7de      	b.n	80187d2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8018814:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018816:	2b0a      	cmp	r3, #10
 8018818:	d00f      	beq.n	801883a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801881a:	4620      	mov	r0, r4
 801881c:	f7ff fc11 	bl	8018042 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8018820:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018822:	1c5a      	adds	r2, r3, #1
 8018824:	8722      	strh	r2, [r4, #56]	; 0x38
 8018826:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8018828:	4413      	add	r3, r2
 801882a:	b29b      	uxth	r3, r3
 801882c:	2b09      	cmp	r3, #9
 801882e:	bf88      	it	hi
 8018830:	3b0a      	subhi	r3, #10
 8018832:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018836:	8458      	strh	r0, [r3, #34]	; 0x22
 8018838:	e7ec      	b.n	8018814 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801883a:	bd10      	pop	{r4, pc}

0801883c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018840:	4604      	mov	r4, r0
 8018842:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018846:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018848:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801884a:	3a01      	subs	r2, #1
 801884c:	8702      	strh	r2, [r0, #56]	; 0x38
 801884e:	1c5a      	adds	r2, r3, #1
 8018850:	b292      	uxth	r2, r2
 8018852:	2a09      	cmp	r2, #9
 8018854:	bf8a      	itet	hi
 8018856:	3b09      	subhi	r3, #9
 8018858:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801885a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801885c:	f7ff ffb7 	bl	80187ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018860:	8c23      	ldrh	r3, [r4, #32]
 8018862:	2b01      	cmp	r3, #1
 8018864:	bf9c      	itt	ls
 8018866:	3301      	addls	r3, #1
 8018868:	8423      	strhls	r3, [r4, #32]
 801886a:	8be3      	ldrh	r3, [r4, #30]
 801886c:	b90b      	cbnz	r3, 8018872 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801886e:	2302      	movs	r3, #2
 8018870:	83e3      	strh	r3, [r4, #30]
 8018872:	8be3      	ldrh	r3, [r4, #30]
 8018874:	4628      	mov	r0, r5
 8018876:	3b01      	subs	r3, #1
 8018878:	b29b      	uxth	r3, r3
 801887a:	83e3      	strh	r3, [r4, #30]
 801887c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018880:	8365      	strh	r5, [r4, #26]
 8018882:	bd38      	pop	{r3, r4, r5, pc}

08018884 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018884:	428a      	cmp	r2, r1
 8018886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801888a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801888c:	d932      	bls.n	80188f4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801888e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018890:	1a54      	subs	r4, r2, r1
 8018892:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018896:	19ee      	adds	r6, r5, r7
 8018898:	fa1f fe84 	uxth.w	lr, r4
 801889c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80188a0:	3e01      	subs	r6, #1
 80188a2:	b2b4      	uxth	r4, r6
 80188a4:	eba4 090e 	sub.w	r9, r4, lr
 80188a8:	fa1f f989 	uxth.w	r9, r9
 80188ac:	2c09      	cmp	r4, #9
 80188ae:	4626      	mov	r6, r4
 80188b0:	bf88      	it	hi
 80188b2:	f1a4 060a 	subhi.w	r6, r4, #10
 80188b6:	f1bc 0f00 	cmp.w	ip, #0
 80188ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80188be:	bf08      	it	eq
 80188c0:	f04f 0c02 	moveq.w	ip, #2
 80188c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80188c8:	b2a4      	uxth	r4, r4
 80188ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80188ce:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80188d2:	454c      	cmp	r4, r9
 80188d4:	fa1f fc8c 	uxth.w	ip, ip
 80188d8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80188dc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80188e0:	d1e4      	bne.n	80188ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80188e2:	eba5 050e 	sub.w	r5, r5, lr
 80188e6:	eb0e 0408 	add.w	r4, lr, r8
 80188ea:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80188ee:	8705      	strh	r5, [r0, #56]	; 0x38
 80188f0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80188f4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80188f6:	250a      	movs	r5, #10
 80188f8:	1a64      	subs	r4, r4, r1
 80188fa:	4439      	add	r1, r7
 80188fc:	b289      	uxth	r1, r1
 80188fe:	8704      	strh	r4, [r0, #56]	; 0x38
 8018900:	2909      	cmp	r1, #9
 8018902:	bf88      	it	hi
 8018904:	390a      	subhi	r1, #10
 8018906:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018908:	b18a      	cbz	r2, 801892e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801890a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801890c:	3a01      	subs	r2, #1
 801890e:	3101      	adds	r1, #1
 8018910:	b292      	uxth	r2, r2
 8018912:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018916:	8701      	strh	r1, [r0, #56]	; 0x38
 8018918:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801891a:	b901      	cbnz	r1, 801891e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801891c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801891e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018920:	3901      	subs	r1, #1
 8018922:	b289      	uxth	r1, r1
 8018924:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018926:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801892a:	844c      	strh	r4, [r1, #34]	; 0x22
 801892c:	e7ec      	b.n	8018908 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801892e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018932:	f7ff bf4c 	b.w	80187ce <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018936 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018936:	b570      	push	{r4, r5, r6, lr}
 8018938:	2500      	movs	r5, #0
 801893a:	4295      	cmp	r5, r2
 801893c:	d011      	beq.n	8018962 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801893e:	8bc4      	ldrh	r4, [r0, #30]
 8018940:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018944:	4414      	add	r4, r2
 8018946:	3c01      	subs	r4, #1
 8018948:	1b64      	subs	r4, r4, r5
 801894a:	b2a4      	uxth	r4, r4
 801894c:	2c01      	cmp	r4, #1
 801894e:	bf88      	it	hi
 8018950:	3c02      	subhi	r4, #2
 8018952:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018956:	8b64      	ldrh	r4, [r4, #26]
 8018958:	42b4      	cmp	r4, r6
 801895a:	d117      	bne.n	801898c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801895c:	3501      	adds	r5, #1
 801895e:	b2ad      	uxth	r5, r5
 8018960:	e7eb      	b.n	801893a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018962:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018966:	2400      	movs	r4, #0
 8018968:	4413      	add	r3, r2
 801896a:	b2a2      	uxth	r2, r4
 801896c:	429a      	cmp	r2, r3
 801896e:	da0f      	bge.n	8018990 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018970:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018972:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018976:	3401      	adds	r4, #1
 8018978:	4432      	add	r2, r6
 801897a:	b292      	uxth	r2, r2
 801897c:	2a09      	cmp	r2, #9
 801897e:	bf88      	it	hi
 8018980:	3a0a      	subhi	r2, #10
 8018982:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018986:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018988:	42aa      	cmp	r2, r5
 801898a:	d0ee      	beq.n	801896a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801898c:	2000      	movs	r0, #0
 801898e:	bd70      	pop	{r4, r5, r6, pc}
 8018990:	2001      	movs	r0, #1
 8018992:	e7fc      	b.n	801898e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018994 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018998:	4605      	mov	r5, r0
 801899a:	4616      	mov	r6, r2
 801899c:	1c8c      	adds	r4, r1, #2
 801899e:	8809      	ldrh	r1, [r1, #0]
 80189a0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80189a4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80189a8:	42b3      	cmp	r3, r6
 80189aa:	d124      	bne.n	80189f6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80189ac:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80189b0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80189b4:	f001 070f 	and.w	r7, r1, #15
 80189b8:	4652      	mov	r2, sl
 80189ba:	f8cd 8000 	str.w	r8, [sp]
 80189be:	464b      	mov	r3, r9
 80189c0:	4621      	mov	r1, r4
 80189c2:	4628      	mov	r0, r5
 80189c4:	f7ff ffb7 	bl	8018936 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80189c8:	4683      	mov	fp, r0
 80189ca:	b168      	cbz	r0, 80189e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80189cc:	eb0a 0109 	add.w	r1, sl, r9
 80189d0:	463a      	mov	r2, r7
 80189d2:	4628      	mov	r0, r5
 80189d4:	4441      	add	r1, r8
 80189d6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80189da:	4649      	mov	r1, r9
 80189dc:	f7ff ff52 	bl	8018884 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80189e0:	4658      	mov	r0, fp
 80189e2:	b003      	add	sp, #12
 80189e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e8:	eb07 010a 	add.w	r1, r7, sl
 80189ec:	4449      	add	r1, r9
 80189ee:	4441      	add	r1, r8
 80189f0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80189f4:	e7d2      	b.n	801899c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80189f6:	f04f 0b00 	mov.w	fp, #0
 80189fa:	e7f1      	b.n	80189e0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080189fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80189fc:	b570      	push	{r4, r5, r6, lr}
 80189fe:	8810      	ldrh	r0, [r2, #0]
 8018a00:	4298      	cmp	r0, r3
 8018a02:	d817      	bhi.n	8018a34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018a04:	1e48      	subs	r0, r1, #1
 8018a06:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018a0a:	4298      	cmp	r0, r3
 8018a0c:	d312      	bcc.n	8018a34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018a0e:	2400      	movs	r4, #0
 8018a10:	428c      	cmp	r4, r1
 8018a12:	d20f      	bcs.n	8018a34 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018a14:	1860      	adds	r0, r4, r1
 8018a16:	1040      	asrs	r0, r0, #1
 8018a18:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018a1c:	0085      	lsls	r5, r0, #2
 8018a1e:	42b3      	cmp	r3, r6
 8018a20:	d902      	bls.n	8018a28 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018a22:	3001      	adds	r0, #1
 8018a24:	b284      	uxth	r4, r0
 8018a26:	e7f3      	b.n	8018a10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018a28:	d201      	bcs.n	8018a2e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018a2a:	b281      	uxth	r1, r0
 8018a2c:	e7f0      	b.n	8018a10 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018a2e:	442a      	add	r2, r5
 8018a30:	8850      	ldrh	r0, [r2, #2]
 8018a32:	bd70      	pop	{r4, r5, r6, pc}
 8018a34:	2000      	movs	r0, #0
 8018a36:	e7fc      	b.n	8018a32 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018a38 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a3c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8018a3e:	4604      	mov	r4, r0
 8018a40:	260b      	movs	r6, #11
 8018a42:	886f      	ldrh	r7, [r5, #2]
 8018a44:	087f      	lsrs	r7, r7, #1
 8018a46:	3e01      	subs	r6, #1
 8018a48:	d013      	beq.n	8018a72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018a4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018a4c:	462a      	mov	r2, r5
 8018a4e:	4639      	mov	r1, r7
 8018a50:	4620      	mov	r0, r4
 8018a52:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018a56:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018a5a:	4643      	mov	r3, r8
 8018a5c:	f7ff ffce 	bl	80189fc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018a60:	b138      	cbz	r0, 8018a72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018a62:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018a66:	4642      	mov	r2, r8
 8018a68:	4620      	mov	r0, r4
 8018a6a:	f7ff ff93 	bl	8018994 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	d1e9      	bne.n	8018a46 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018a78:	b570      	push	{r4, r5, r6, lr}
 8018a7a:	694a      	ldr	r2, [r1, #20]
 8018a7c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018a7e:	684b      	ldr	r3, [r1, #4]
 8018a80:	1b54      	subs	r4, r2, r5
 8018a82:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018a84:	f000 8106 	beq.w	8018c94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018a88:	1b9b      	subs	r3, r3, r6
 8018a8a:	d003      	beq.n	8018a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018a8c:	4363      	muls	r3, r4
 8018a8e:	2210      	movs	r2, #16
 8018a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a94:	680c      	ldr	r4, [r1, #0]
 8018a96:	698a      	ldr	r2, [r1, #24]
 8018a98:	1b65      	subs	r5, r4, r5
 8018a9a:	f000 80fd 	beq.w	8018c98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018a9e:	1b92      	subs	r2, r2, r6
 8018aa0:	d003      	beq.n	8018aaa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018aa2:	436a      	muls	r2, r5
 8018aa4:	2410      	movs	r4, #16
 8018aa6:	fb92 f2f4 	sdiv	r2, r2, r4
 8018aaa:	1a9b      	subs	r3, r3, r2
 8018aac:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018cd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018ab4:	460a      	mov	r2, r1
 8018ab6:	ee07 3a90 	vmov	s15, r3
 8018aba:	f100 040c 	add.w	r4, r0, #12
 8018abe:	4603      	mov	r3, r0
 8018ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ac4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018ac8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018acc:	eeb1 6a43 	vneg.f32	s12, s6
 8018ad0:	edd2 7a02 	vldr	s15, [r2, #8]
 8018ad4:	3214      	adds	r2, #20
 8018ad6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018ada:	ece3 6a01 	vstmia	r3!, {s13}
 8018ade:	429c      	cmp	r4, r3
 8018ae0:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018ae4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018ae8:	edc3 7a02 	vstr	s15, [r3, #8]
 8018aec:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018af0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018af4:	edc3 7a05 	vstr	s15, [r3, #20]
 8018af8:	d1ea      	bne.n	8018ad0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018afa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018afc:	698b      	ldr	r3, [r1, #24]
 8018afe:	edd0 4a02 	vldr	s9, [r0, #8]
 8018b02:	1a9b      	subs	r3, r3, r2
 8018b04:	edd0 3a00 	vldr	s7, [r0]
 8018b08:	edd0 6a01 	vldr	s13, [r0, #4]
 8018b0c:	ee07 3a90 	vmov	s15, r3
 8018b10:	684b      	ldr	r3, [r1, #4]
 8018b12:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018b16:	ed90 5a05 	vldr	s10, [r0, #20]
 8018b1a:	1a9b      	subs	r3, r3, r2
 8018b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b20:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018b24:	ed90 2a03 	vldr	s4, [r0, #12]
 8018b28:	ee07 3a10 	vmov	s14, r3
 8018b2c:	edd0 5a04 	vldr	s11, [r0, #16]
 8018b30:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018b34:	ed90 1a07 	vldr	s2, [r0, #28]
 8018b38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b3c:	edd0 2a06 	vldr	s5, [r0, #24]
 8018b40:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018b44:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018b48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018b4c:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018b50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018b54:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018b58:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018b5c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018b5e:	694a      	ldr	r2, [r1, #20]
 8018b60:	1b13      	subs	r3, r2, r4
 8018b62:	ee07 3a10 	vmov	s14, r3
 8018b66:	680b      	ldr	r3, [r1, #0]
 8018b68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b6c:	1b1b      	subs	r3, r3, r4
 8018b6e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018b72:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018b76:	ee07 3a10 	vmov	s14, r3
 8018b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018b7e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018b82:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018b86:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018b8a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8018b8e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018b90:	698b      	ldr	r3, [r1, #24]
 8018b92:	1a9b      	subs	r3, r3, r2
 8018b94:	ee06 3a90 	vmov	s13, r3
 8018b98:	684b      	ldr	r3, [r1, #4]
 8018b9a:	1a9b      	subs	r3, r3, r2
 8018b9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018ba0:	ee07 3a10 	vmov	s14, r3
 8018ba4:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018ba8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018bac:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018bb0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018bb4:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018bb8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018bbc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018bc0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018bc2:	694a      	ldr	r2, [r1, #20]
 8018bc4:	1b13      	subs	r3, r2, r4
 8018bc6:	ee07 3a10 	vmov	s14, r3
 8018bca:	680b      	ldr	r3, [r1, #0]
 8018bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018bd0:	1b1b      	subs	r3, r3, r4
 8018bd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018bd6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018bda:	ee07 3a10 	vmov	s14, r3
 8018bde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018be2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018be6:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018bea:	edd0 5a08 	vldr	s11, [r0, #32]
 8018bee:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018bf2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018bf6:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018bfa:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8018bfe:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018c00:	698b      	ldr	r3, [r1, #24]
 8018c02:	1a9b      	subs	r3, r3, r2
 8018c04:	ee07 3a10 	vmov	s14, r3
 8018c08:	684b      	ldr	r3, [r1, #4]
 8018c0a:	1a9b      	subs	r3, r3, r2
 8018c0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018c10:	ee01 3a90 	vmov	s3, r3
 8018c14:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018c18:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018c1c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018c20:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018c24:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018c28:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018c2c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018c30:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018c32:	694a      	ldr	r2, [r1, #20]
 8018c34:	1b13      	subs	r3, r2, r4
 8018c36:	ee03 3a10 	vmov	s6, r3
 8018c3a:	680b      	ldr	r3, [r1, #0]
 8018c3c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018c40:	1b1b      	subs	r3, r3, r4
 8018c42:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018c46:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018c4a:	ee03 3a10 	vmov	s6, r3
 8018c4e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018c52:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018c56:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018c5a:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018c5e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018c62:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018c66:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018c6a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c72:	dd13      	ble.n	8018c9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018c78:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018c7c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018c7e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018c82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8a:	dd15      	ble.n	8018cb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018c8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018c90:	6403      	str	r3, [r0, #64]	; 0x40
 8018c92:	bd70      	pop	{r4, r5, r6, pc}
 8018c94:	4623      	mov	r3, r4
 8018c96:	e6fd      	b.n	8018a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018c98:	462a      	mov	r2, r5
 8018c9a:	e706      	b.n	8018aaa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018c9c:	d502      	bpl.n	8018ca4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018c9e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018ca2:	e7e9      	b.n	8018c78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018ca4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018ca8:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018cac:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb4:	dade      	bge.n	8018c74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018cb6:	e7f2      	b.n	8018c9e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018cb8:	d502      	bpl.n	8018cc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018cba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018cbe:	e7e7      	b.n	8018c90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018cc0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018cc4:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018cc8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cd0:	dadc      	bge.n	8018c8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018cd2:	e7f2      	b.n	8018cba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018cd4:	3d800000 	.word	0x3d800000

08018cd8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cdc:	2714      	movs	r7, #20
 8018cde:	435f      	muls	r7, r3
 8018ce0:	eb02 0c07 	add.w	ip, r2, r7
 8018ce4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018ce8:	f115 0e0f 	adds.w	lr, r5, #15
 8018cec:	f100 80a2 	bmi.w	8018e34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018cf0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018cf4:	9c08      	ldr	r4, [sp, #32]
 8018cf6:	2614      	movs	r6, #20
 8018cf8:	f8c0 e014 	str.w	lr, [r0, #20]
 8018cfc:	4366      	muls	r6, r4
 8018cfe:	eb02 0806 	add.w	r8, r2, r6
 8018d02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018d06:	f115 040f 	adds.w	r4, r5, #15
 8018d0a:	f100 809f 	bmi.w	8018e4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018d0e:	1124      	asrs	r4, r4, #4
 8018d10:	eba4 040e 	sub.w	r4, r4, lr
 8018d14:	6184      	str	r4, [r0, #24]
 8018d16:	2c00      	cmp	r4, #0
 8018d18:	f000 808a 	beq.w	8018e30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018d1c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018d20:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018d24:	5995      	ldr	r5, [r2, r6]
 8018d26:	eba4 0809 	sub.w	r8, r4, r9
 8018d2a:	59d4      	ldr	r4, [r2, r7]
 8018d2c:	eba5 0a04 	sub.w	sl, r5, r4
 8018d30:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018d34:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018d38:	fb0e fe05 	mul.w	lr, lr, r5
 8018d3c:	fb0a ee19 	mls	lr, sl, r9, lr
 8018d40:	fb08 e404 	mla	r4, r8, r4, lr
 8018d44:	3c01      	subs	r4, #1
 8018d46:	19a4      	adds	r4, r4, r6
 8018d48:	f100 808c 	bmi.w	8018e64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018d4c:	fb94 fef6 	sdiv	lr, r4, r6
 8018d50:	fb06 441e 	mls	r4, r6, lr, r4
 8018d54:	f8c0 e000 	str.w	lr, [r0]
 8018d58:	6104      	str	r4, [r0, #16]
 8018d5a:	2d00      	cmp	r5, #0
 8018d5c:	f2c0 8095 	blt.w	8018e8a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018d60:	fb95 f4f6 	sdiv	r4, r5, r6
 8018d64:	fb06 5514 	mls	r5, r6, r4, r5
 8018d68:	6044      	str	r4, [r0, #4]
 8018d6a:	6085      	str	r5, [r0, #8]
 8018d6c:	60c6      	str	r6, [r0, #12]
 8018d6e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018d72:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018d76:	6945      	ldr	r5, [r0, #20]
 8018d78:	59d2      	ldr	r2, [r2, r7]
 8018d7a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018d7e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8018eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018d82:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018d86:	ee07 4a10 	vmov	s14, r4
 8018d8a:	6804      	ldr	r4, [r0, #0]
 8018d8c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d94:	ee07 2a90 	vmov	s15, r2
 8018d98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018da0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018da4:	edd3 6a00 	vldr	s13, [r3]
 8018da8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018dac:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018db0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018db4:	edc0 6a07 	vstr	s13, [r0, #28]
 8018db8:	edd0 6a01 	vldr	s13, [r0, #4]
 8018dbc:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018dc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018dc4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018dc8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018dcc:	ed80 6a08 	vstr	s12, [r0, #32]
 8018dd0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018dd2:	6242      	str	r2, [r0, #36]	; 0x24
 8018dd4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018dd8:	ed93 6a03 	vldr	s12, [r3, #12]
 8018ddc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018de0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018de4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018de8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018dec:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018df0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018df4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018df8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018dfc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018dfe:	6302      	str	r2, [r0, #48]	; 0x30
 8018e00:	ed93 6a06 	vldr	s12, [r3, #24]
 8018e04:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018e08:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018e0c:	eeb0 7a46 	vmov.f32	s14, s12
 8018e10:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018e14:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018e18:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018e1c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018e20:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018e24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e28:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018e2c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8018e2e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e34:	2410      	movs	r4, #16
 8018e36:	f1c5 0501 	rsb	r5, r5, #1
 8018e3a:	fb9e fef4 	sdiv	lr, lr, r4
 8018e3e:	f015 050f 	ands.w	r5, r5, #15
 8018e42:	bf18      	it	ne
 8018e44:	2501      	movne	r5, #1
 8018e46:	ebae 0e05 	sub.w	lr, lr, r5
 8018e4a:	e753      	b.n	8018cf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8018e4c:	f04f 0910 	mov.w	r9, #16
 8018e50:	f1c5 0501 	rsb	r5, r5, #1
 8018e54:	fb94 f4f9 	sdiv	r4, r4, r9
 8018e58:	f015 050f 	ands.w	r5, r5, #15
 8018e5c:	bf18      	it	ne
 8018e5e:	2501      	movne	r5, #1
 8018e60:	1b64      	subs	r4, r4, r5
 8018e62:	e755      	b.n	8018d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8018e64:	4264      	negs	r4, r4
 8018e66:	fb94 fef6 	sdiv	lr, r4, r6
 8018e6a:	f1ce 0800 	rsb	r8, lr, #0
 8018e6e:	fb06 441e 	mls	r4, r6, lr, r4
 8018e72:	f8c0 8000 	str.w	r8, [r0]
 8018e76:	6104      	str	r4, [r0, #16]
 8018e78:	2c00      	cmp	r4, #0
 8018e7a:	f43f af6e 	beq.w	8018d5a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8018e7e:	ea6f 0e0e 	mvn.w	lr, lr
 8018e82:	1b34      	subs	r4, r6, r4
 8018e84:	f8c0 e000 	str.w	lr, [r0]
 8018e88:	e766      	b.n	8018d58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8018e8a:	426d      	negs	r5, r5
 8018e8c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018e90:	f1c4 0e00 	rsb	lr, r4, #0
 8018e94:	fb06 5514 	mls	r5, r6, r4, r5
 8018e98:	f8c0 e004 	str.w	lr, [r0, #4]
 8018e9c:	6085      	str	r5, [r0, #8]
 8018e9e:	2d00      	cmp	r5, #0
 8018ea0:	f43f af64 	beq.w	8018d6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8018ea4:	43e4      	mvns	r4, r4
 8018ea6:	1b75      	subs	r5, r6, r5
 8018ea8:	6044      	str	r4, [r0, #4]
 8018eaa:	e75e      	b.n	8018d6a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8018eac:	3d800000 	.word	0x3d800000

08018eb0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8018eb0:	4602      	mov	r2, r0
 8018eb2:	b148      	cbz	r0, 8018ec8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	b298      	uxth	r0, r3
 8018eb8:	3301      	adds	r3, #1
 8018eba:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018ebe:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8018ec2:	2900      	cmp	r1, #0
 8018ec4:	d1f7      	bne.n	8018eb6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8018ec6:	4770      	bx	lr
 8018ec8:	4770      	bx	lr

08018eca <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8018eca:	b530      	push	{r4, r5, lr}
 8018ecc:	4604      	mov	r4, r0
 8018ece:	b159      	cbz	r1, 8018ee8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8018ed0:	b148      	cbz	r0, 8018ee6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018ed2:	2300      	movs	r3, #0
 8018ed4:	b298      	uxth	r0, r3
 8018ed6:	4282      	cmp	r2, r0
 8018ed8:	d905      	bls.n	8018ee6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8018eda:	5ccd      	ldrb	r5, [r1, r3]
 8018edc:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8018ee0:	3301      	adds	r3, #1
 8018ee2:	2d00      	cmp	r5, #0
 8018ee4:	d1f6      	bne.n	8018ed4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8018ee6:	bd30      	pop	{r4, r5, pc}
 8018ee8:	4608      	mov	r0, r1
 8018eea:	e7fc      	b.n	8018ee6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08018eec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8018eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eee:	468c      	mov	ip, r1
 8018ef0:	b08b      	sub	sp, #44	; 0x2c
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	ae01      	add	r6, sp, #4
 8018ef6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018efa:	211f      	movs	r1, #31
 8018efc:	fbb0 f7f3 	udiv	r7, r0, r3
 8018f00:	fb03 0517 	mls	r5, r3, r7, r0
 8018f04:	4638      	mov	r0, r7
 8018f06:	b2ec      	uxtb	r4, r5
 8018f08:	2d09      	cmp	r5, #9
 8018f0a:	bfd4      	ite	le
 8018f0c:	3430      	addle	r4, #48	; 0x30
 8018f0e:	3457      	addgt	r4, #87	; 0x57
 8018f10:	b2e4      	uxtb	r4, r4
 8018f12:	558c      	strb	r4, [r1, r6]
 8018f14:	1e4c      	subs	r4, r1, #1
 8018f16:	b92f      	cbnz	r7, 8018f24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8018f18:	4431      	add	r1, r6
 8018f1a:	4660      	mov	r0, ip
 8018f1c:	f7ff ffd5 	bl	8018eca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018f20:	b00b      	add	sp, #44	; 0x2c
 8018f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f24:	4621      	mov	r1, r4
 8018f26:	e7e9      	b.n	8018efc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08018f28 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8018f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f2a:	4607      	mov	r7, r0
 8018f2c:	b08b      	sub	sp, #44	; 0x2c
 8018f2e:	4608      	mov	r0, r1
 8018f30:	b341      	cbz	r1, 8018f84 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018f32:	1e99      	subs	r1, r3, #2
 8018f34:	2922      	cmp	r1, #34	; 0x22
 8018f36:	d825      	bhi.n	8018f84 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8018f38:	2100      	movs	r1, #0
 8018f3a:	463c      	mov	r4, r7
 8018f3c:	261f      	movs	r6, #31
 8018f3e:	f10d 0c04 	add.w	ip, sp, #4
 8018f42:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018f46:	1e71      	subs	r1, r6, #1
 8018f48:	fb94 fef3 	sdiv	lr, r4, r3
 8018f4c:	fb03 441e 	mls	r4, r3, lr, r4
 8018f50:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8018f54:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8018f58:	b2ec      	uxtb	r4, r5
 8018f5a:	2d09      	cmp	r5, #9
 8018f5c:	bfd4      	ite	le
 8018f5e:	3430      	addle	r4, #48	; 0x30
 8018f60:	3457      	addgt	r4, #87	; 0x57
 8018f62:	b2e4      	uxtb	r4, r4
 8018f64:	f80c 4006 	strb.w	r4, [ip, r6]
 8018f68:	4674      	mov	r4, lr
 8018f6a:	b96c      	cbnz	r4, 8018f88 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8018f6c:	2f00      	cmp	r7, #0
 8018f6e:	da05      	bge.n	8018f7c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8018f70:	ab0a      	add	r3, sp, #40	; 0x28
 8018f72:	4419      	add	r1, r3
 8018f74:	232d      	movs	r3, #45	; 0x2d
 8018f76:	f801 3c24 	strb.w	r3, [r1, #-36]
 8018f7a:	1eb1      	subs	r1, r6, #2
 8018f7c:	3101      	adds	r1, #1
 8018f7e:	4461      	add	r1, ip
 8018f80:	f7ff ffa3 	bl	8018eca <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8018f84:	b00b      	add	sp, #44	; 0x2c
 8018f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f88:	460e      	mov	r6, r1
 8018f8a:	e7dc      	b.n	8018f46 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08018f8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8018f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f90:	b085      	sub	sp, #20
 8018f92:	4691      	mov	r9, r2
 8018f94:	6802      	ldr	r2, [r0, #0]
 8018f96:	4688      	mov	r8, r1
 8018f98:	461c      	mov	r4, r3
 8018f9a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8018f9e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8018fa2:	4683      	mov	fp, r0
 8018fa4:	4610      	mov	r0, r2
 8018fa6:	9103      	str	r1, [sp, #12]
 8018fa8:	9302      	str	r3, [sp, #8]
 8018faa:	9201      	str	r2, [sp, #4]
 8018fac:	f7ff ff80 	bl	8018eb0 <_ZN8touchgfx7Unicode6strlenEPKt>
 8018fb0:	f1b8 0f00 	cmp.w	r8, #0
 8018fb4:	bf0c      	ite	eq
 8018fb6:	4684      	moveq	ip, r0
 8018fb8:	f100 0c01 	addne.w	ip, r0, #1
 8018fbc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8018fc0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018fc4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018fc6:	fa1f fc8c 	uxth.w	ip, ip
 8018fca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018fcc:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8018fd0:	9903      	ldr	r1, [sp, #12]
 8018fd2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8018fd6:	d041      	beq.n	801905c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018fd8:	d834      	bhi.n	8019044 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8018fda:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8018fde:	d059      	beq.n	8019094 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8018fe0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8018fe4:	d03a      	beq.n	801905c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8018fe6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8018fea:	d034      	beq.n	8019056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8018fec:	2400      	movs	r4, #0
 8018fee:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8018ff2:	3a01      	subs	r2, #1
 8018ff4:	b169      	cbz	r1, 8019012 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8018ff6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018ff8:	458c      	cmp	ip, r1
 8018ffa:	da09      	bge.n	8019010 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8018ffc:	eba1 010c 	sub.w	r1, r1, ip
 8019000:	b289      	uxth	r1, r1
 8019002:	b933      	cbnz	r3, 8019012 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019004:	2e00      	cmp	r6, #0
 8019006:	d051      	beq.n	80190ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019008:	2800      	cmp	r0, #0
 801900a:	d04f      	beq.n	80190ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801900c:	440c      	add	r4, r1
 801900e:	b2a4      	uxth	r4, r4
 8019010:	2100      	movs	r1, #0
 8019012:	682b      	ldr	r3, [r5, #0]
 8019014:	4293      	cmp	r3, r2
 8019016:	da07      	bge.n	8019028 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019018:	f1b8 0f00 	cmp.w	r8, #0
 801901c:	d004      	beq.n	8019028 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801901e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8019022:	682b      	ldr	r3, [r5, #0]
 8019024:	3301      	adds	r3, #1
 8019026:	602b      	str	r3, [r5, #0]
 8019028:	2730      	movs	r7, #48	; 0x30
 801902a:	2c00      	cmp	r4, #0
 801902c:	d04e      	beq.n	80190cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801902e:	682e      	ldr	r6, [r5, #0]
 8019030:	3c01      	subs	r4, #1
 8019032:	42b2      	cmp	r2, r6
 8019034:	b2a4      	uxth	r4, r4
 8019036:	dd49      	ble.n	80190cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019038:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801903c:	682b      	ldr	r3, [r5, #0]
 801903e:	3301      	adds	r3, #1
 8019040:	602b      	str	r3, [r5, #0]
 8019042:	e7f2      	b.n	801902a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8019044:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8019048:	d01d      	beq.n	8019086 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801904a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801904e:	d002      	beq.n	8019056 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019050:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8019054:	e7c9      	b.n	8018fea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8019056:	4684      	mov	ip, r0
 8019058:	f04f 0800 	mov.w	r8, #0
 801905c:	2c00      	cmp	r4, #0
 801905e:	d0c6      	beq.n	8018fee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019060:	b947      	cbnz	r7, 8019074 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019062:	2801      	cmp	r0, #1
 8019064:	d106      	bne.n	8019074 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019066:	8814      	ldrh	r4, [r2, #0]
 8019068:	2c30      	cmp	r4, #48	; 0x30
 801906a:	bf02      	ittt	eq
 801906c:	3202      	addeq	r2, #2
 801906e:	4638      	moveq	r0, r7
 8019070:	f8cb 2000 	streq.w	r2, [fp]
 8019074:	45bc      	cmp	ip, r7
 8019076:	da14      	bge.n	80190a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8019078:	b2bf      	uxth	r7, r7
 801907a:	eba7 040c 	sub.w	r4, r7, ip
 801907e:	46bc      	mov	ip, r7
 8019080:	b2a4      	uxth	r4, r4
 8019082:	2600      	movs	r6, #0
 8019084:	e7b3      	b.n	8018fee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019086:	4684      	mov	ip, r0
 8019088:	b16c      	cbz	r4, 80190a6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801908a:	42b8      	cmp	r0, r7
 801908c:	dd00      	ble.n	8019090 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801908e:	b2b8      	uxth	r0, r7
 8019090:	2400      	movs	r4, #0
 8019092:	e003      	b.n	801909c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8019094:	f04f 0c01 	mov.w	ip, #1
 8019098:	2400      	movs	r4, #0
 801909a:	4660      	mov	r0, ip
 801909c:	4626      	mov	r6, r4
 801909e:	46a0      	mov	r8, r4
 80190a0:	e7a5      	b.n	8018fee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80190a2:	2400      	movs	r4, #0
 80190a4:	e7ed      	b.n	8019082 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80190a6:	4626      	mov	r6, r4
 80190a8:	46a0      	mov	r8, r4
 80190aa:	e7a0      	b.n	8018fee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80190ac:	2900      	cmp	r1, #0
 80190ae:	d0b0      	beq.n	8019012 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80190b0:	2720      	movs	r7, #32
 80190b2:	682e      	ldr	r6, [r5, #0]
 80190b4:	2900      	cmp	r1, #0
 80190b6:	d0ac      	beq.n	8019012 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 80190b8:	3901      	subs	r1, #1
 80190ba:	4296      	cmp	r6, r2
 80190bc:	b289      	uxth	r1, r1
 80190be:	daa7      	bge.n	8019010 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 80190c0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 80190c4:	682b      	ldr	r3, [r5, #0]
 80190c6:	3301      	adds	r3, #1
 80190c8:	602b      	str	r3, [r5, #0]
 80190ca:	e7f2      	b.n	80190b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 80190cc:	b188      	cbz	r0, 80190f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80190ce:	682b      	ldr	r3, [r5, #0]
 80190d0:	3801      	subs	r0, #1
 80190d2:	429a      	cmp	r2, r3
 80190d4:	b280      	uxth	r0, r0
 80190d6:	dd0c      	ble.n	80190f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 80190d8:	f8db 3000 	ldr.w	r3, [fp]
 80190dc:	1c9c      	adds	r4, r3, #2
 80190de:	f8cb 4000 	str.w	r4, [fp]
 80190e2:	881c      	ldrh	r4, [r3, #0]
 80190e4:	682b      	ldr	r3, [r5, #0]
 80190e6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 80190ea:	682b      	ldr	r3, [r5, #0]
 80190ec:	3301      	adds	r3, #1
 80190ee:	602b      	str	r3, [r5, #0]
 80190f0:	e7ec      	b.n	80190cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 80190f2:	2620      	movs	r6, #32
 80190f4:	b151      	cbz	r1, 801910c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 80190f6:	6828      	ldr	r0, [r5, #0]
 80190f8:	3901      	subs	r1, #1
 80190fa:	4282      	cmp	r2, r0
 80190fc:	b289      	uxth	r1, r1
 80190fe:	dd05      	ble.n	801910c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019100:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8019104:	682b      	ldr	r3, [r5, #0]
 8019106:	3301      	adds	r3, #1
 8019108:	602b      	str	r3, [r5, #0]
 801910a:	e7f3      	b.n	80190f4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801910c:	b005      	add	sp, #20
 801910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019112 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8019112:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019116:	2400      	movs	r4, #0
 8019118:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801911c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8019120:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8019124:	8014      	strh	r4, [r2, #0]
 8019126:	701c      	strb	r4, [r3, #0]
 8019128:	f888 4000 	strb.w	r4, [r8]
 801912c:	f88c 4000 	strb.w	r4, [ip]
 8019130:	f88e 4000 	strb.w	r4, [lr]
 8019134:	703c      	strb	r4, [r7, #0]
 8019136:	6804      	ldr	r4, [r0, #0]
 8019138:	b1a4      	cbz	r4, 8019164 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801913a:	8824      	ldrh	r4, [r4, #0]
 801913c:	f04f 0901 	mov.w	r9, #1
 8019140:	b314      	cbz	r4, 8019188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019142:	2c2b      	cmp	r4, #43	; 0x2b
 8019144:	d001      	beq.n	801914a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8019146:	2c20      	cmp	r4, #32
 8019148:	d110      	bne.n	801916c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801914a:	8014      	strh	r4, [r2, #0]
 801914c:	6804      	ldr	r4, [r0, #0]
 801914e:	b10c      	cbz	r4, 8019154 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8019150:	3402      	adds	r4, #2
 8019152:	6004      	str	r4, [r0, #0]
 8019154:	680c      	ldr	r4, [r1, #0]
 8019156:	b10c      	cbz	r4, 801915c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8019158:	3401      	adds	r4, #1
 801915a:	600c      	str	r4, [r1, #0]
 801915c:	6804      	ldr	r4, [r0, #0]
 801915e:	b17c      	cbz	r4, 8019180 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8019160:	8824      	ldrh	r4, [r4, #0]
 8019162:	e7ed      	b.n	8019140 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019164:	680c      	ldr	r4, [r1, #0]
 8019166:	b17c      	cbz	r4, 8019188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019168:	7824      	ldrb	r4, [r4, #0]
 801916a:	e7e7      	b.n	801913c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801916c:	2c2d      	cmp	r4, #45	; 0x2d
 801916e:	d102      	bne.n	8019176 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8019170:	f883 9000 	strb.w	r9, [r3]
 8019174:	e7ea      	b.n	801914c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019176:	2c23      	cmp	r4, #35	; 0x23
 8019178:	d107      	bne.n	801918a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801917a:	f888 9000 	strb.w	r9, [r8]
 801917e:	e7e5      	b.n	801914c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019180:	680c      	ldr	r4, [r1, #0]
 8019182:	b10c      	cbz	r4, 8019188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019184:	7824      	ldrb	r4, [r4, #0]
 8019186:	e7db      	b.n	8019140 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019188:	2400      	movs	r4, #0
 801918a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801918e:	2b09      	cmp	r3, #9
 8019190:	d901      	bls.n	8019196 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8019192:	2c2a      	cmp	r4, #42	; 0x2a
 8019194:	d122      	bne.n	80191dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019196:	2301      	movs	r3, #1
 8019198:	2c30      	cmp	r4, #48	; 0x30
 801919a:	f88e 3000 	strb.w	r3, [lr]
 801919e:	d10d      	bne.n	80191bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80191a0:	f88c 3000 	strb.w	r3, [ip]
 80191a4:	6803      	ldr	r3, [r0, #0]
 80191a6:	b10b      	cbz	r3, 80191ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80191a8:	3302      	adds	r3, #2
 80191aa:	6003      	str	r3, [r0, #0]
 80191ac:	680b      	ldr	r3, [r1, #0]
 80191ae:	b10b      	cbz	r3, 80191b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80191b0:	3301      	adds	r3, #1
 80191b2:	600b      	str	r3, [r1, #0]
 80191b4:	6803      	ldr	r3, [r0, #0]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d02f      	beq.n	801921a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80191ba:	881c      	ldrh	r4, [r3, #0]
 80191bc:	2c2a      	cmp	r4, #42	; 0x2a
 80191be:	d135      	bne.n	801922c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80191c0:	f04f 33ff 	mov.w	r3, #4294967295
 80191c4:	6033      	str	r3, [r6, #0]
 80191c6:	6803      	ldr	r3, [r0, #0]
 80191c8:	b10b      	cbz	r3, 80191ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80191ca:	3302      	adds	r3, #2
 80191cc:	6003      	str	r3, [r0, #0]
 80191ce:	680b      	ldr	r3, [r1, #0]
 80191d0:	b10b      	cbz	r3, 80191d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80191d2:	3301      	adds	r3, #1
 80191d4:	600b      	str	r3, [r1, #0]
 80191d6:	6803      	ldr	r3, [r0, #0]
 80191d8:	b31b      	cbz	r3, 8019222 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80191da:	881c      	ldrh	r4, [r3, #0]
 80191dc:	2c2e      	cmp	r4, #46	; 0x2e
 80191de:	d11a      	bne.n	8019216 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80191e0:	2301      	movs	r3, #1
 80191e2:	703b      	strb	r3, [r7, #0]
 80191e4:	6803      	ldr	r3, [r0, #0]
 80191e6:	b10b      	cbz	r3, 80191ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80191e8:	3302      	adds	r3, #2
 80191ea:	6003      	str	r3, [r0, #0]
 80191ec:	680b      	ldr	r3, [r1, #0]
 80191ee:	b10b      	cbz	r3, 80191f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80191f0:	3301      	adds	r3, #1
 80191f2:	600b      	str	r3, [r1, #0]
 80191f4:	6803      	ldr	r3, [r0, #0]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d036      	beq.n	8019268 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80191fa:	881b      	ldrh	r3, [r3, #0]
 80191fc:	2b2a      	cmp	r3, #42	; 0x2a
 80191fe:	d137      	bne.n	8019270 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019200:	f04f 33ff 	mov.w	r3, #4294967295
 8019204:	602b      	str	r3, [r5, #0]
 8019206:	6803      	ldr	r3, [r0, #0]
 8019208:	b10b      	cbz	r3, 801920e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801920a:	3302      	adds	r3, #2
 801920c:	6003      	str	r3, [r0, #0]
 801920e:	680b      	ldr	r3, [r1, #0]
 8019210:	b10b      	cbz	r3, 8019216 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019212:	3301      	adds	r3, #1
 8019214:	600b      	str	r3, [r1, #0]
 8019216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801921a:	680c      	ldr	r4, [r1, #0]
 801921c:	b134      	cbz	r4, 801922c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801921e:	7824      	ldrb	r4, [r4, #0]
 8019220:	e7cc      	b.n	80191bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019222:	680b      	ldr	r3, [r1, #0]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d0f6      	beq.n	8019216 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019228:	781c      	ldrb	r4, [r3, #0]
 801922a:	e7d7      	b.n	80191dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801922c:	2300      	movs	r3, #0
 801922e:	220a      	movs	r2, #10
 8019230:	6033      	str	r3, [r6, #0]
 8019232:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019236:	fa1f f38c 	uxth.w	r3, ip
 801923a:	2b09      	cmp	r3, #9
 801923c:	d8ce      	bhi.n	80191dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801923e:	6833      	ldr	r3, [r6, #0]
 8019240:	fb02 c303 	mla	r3, r2, r3, ip
 8019244:	6033      	str	r3, [r6, #0]
 8019246:	6803      	ldr	r3, [r0, #0]
 8019248:	b10b      	cbz	r3, 801924e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801924a:	3302      	adds	r3, #2
 801924c:	6003      	str	r3, [r0, #0]
 801924e:	680b      	ldr	r3, [r1, #0]
 8019250:	b10b      	cbz	r3, 8019256 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8019252:	3301      	adds	r3, #1
 8019254:	600b      	str	r3, [r1, #0]
 8019256:	6803      	ldr	r3, [r0, #0]
 8019258:	b10b      	cbz	r3, 801925e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801925a:	881c      	ldrh	r4, [r3, #0]
 801925c:	e7e9      	b.n	8019232 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801925e:	680c      	ldr	r4, [r1, #0]
 8019260:	2c00      	cmp	r4, #0
 8019262:	d0e6      	beq.n	8019232 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019264:	7824      	ldrb	r4, [r4, #0]
 8019266:	e7e4      	b.n	8019232 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019268:	680b      	ldr	r3, [r1, #0]
 801926a:	b10b      	cbz	r3, 8019270 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801926c:	781b      	ldrb	r3, [r3, #0]
 801926e:	e7c5      	b.n	80191fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8019270:	2200      	movs	r2, #0
 8019272:	240a      	movs	r4, #10
 8019274:	602a      	str	r2, [r5, #0]
 8019276:	3b30      	subs	r3, #48	; 0x30
 8019278:	682a      	ldr	r2, [r5, #0]
 801927a:	b29e      	uxth	r6, r3
 801927c:	2e09      	cmp	r6, #9
 801927e:	d813      	bhi.n	80192a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8019280:	fb04 3302 	mla	r3, r4, r2, r3
 8019284:	602b      	str	r3, [r5, #0]
 8019286:	6803      	ldr	r3, [r0, #0]
 8019288:	b10b      	cbz	r3, 801928e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801928a:	3302      	adds	r3, #2
 801928c:	6003      	str	r3, [r0, #0]
 801928e:	680b      	ldr	r3, [r1, #0]
 8019290:	b10b      	cbz	r3, 8019296 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8019292:	3301      	adds	r3, #1
 8019294:	600b      	str	r3, [r1, #0]
 8019296:	6803      	ldr	r3, [r0, #0]
 8019298:	b10b      	cbz	r3, 801929e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	e7eb      	b.n	8019276 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801929e:	680b      	ldr	r3, [r1, #0]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d0e8      	beq.n	8019276 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	e7e6      	b.n	8019276 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80192a8:	2a06      	cmp	r2, #6
 80192aa:	bfa8      	it	ge
 80192ac:	2206      	movge	r2, #6
 80192ae:	602a      	str	r2, [r5, #0]
 80192b0:	e7b1      	b.n	8019216 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080192b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80192b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b6:	b0a3      	sub	sp, #140	; 0x8c
 80192b8:	2600      	movs	r6, #0
 80192ba:	4607      	mov	r7, r0
 80192bc:	4688      	mov	r8, r1
 80192be:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 80192c2:	4631      	mov	r1, r6
 80192c4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80192c6:	4648      	mov	r0, r9
 80192c8:	960d      	str	r6, [sp, #52]	; 0x34
 80192ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80192ce:	2242      	movs	r2, #66	; 0x42
 80192d0:	f009 f862 	bl	8022398 <memset>
 80192d4:	b15f      	cbz	r7, 80192ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80192d6:	f108 3aff 	add.w	sl, r8, #4294967295
 80192da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192de:	b152      	cbz	r2, 80192f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80192e0:	8812      	ldrh	r2, [r2, #0]
 80192e2:	b10a      	cbz	r2, 80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80192e4:	459a      	cmp	sl, r3
 80192e6:	dc2e      	bgt.n	8019346 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80192e8:	2200      	movs	r2, #0
 80192ea:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80192ee:	4638      	mov	r0, r7
 80192f0:	b023      	add	sp, #140	; 0x8c
 80192f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192f6:	9a08      	ldr	r2, [sp, #32]
 80192f8:	2a00      	cmp	r2, #0
 80192fa:	d0f5      	beq.n	80192e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80192fc:	7812      	ldrb	r2, [r2, #0]
 80192fe:	e7f0      	b.n	80192e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8019300:	2d00      	cmp	r5, #0
 8019302:	d0ea      	beq.n	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019304:	782a      	ldrb	r2, [r5, #0]
 8019306:	b142      	cbz	r2, 801931a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8019308:	2a25      	cmp	r2, #37	; 0x25
 801930a:	d001      	beq.n	8019310 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801930c:	459a      	cmp	sl, r3
 801930e:	dc08      	bgt.n	8019322 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8019310:	f1bb 0f00 	cmp.w	fp, #0
 8019314:	d121      	bne.n	801935a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019316:	2d00      	cmp	r5, #0
 8019318:	d0df      	beq.n	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801931a:	782a      	ldrb	r2, [r5, #0]
 801931c:	f04f 0b00 	mov.w	fp, #0
 8019320:	e01d      	b.n	801935e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8019322:	f1bb 0f00 	cmp.w	fp, #0
 8019326:	d077      	beq.n	8019418 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019328:	f8bb 2000 	ldrh.w	r2, [fp]
 801932c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019330:	f1bb 0f00 	cmp.w	fp, #0
 8019334:	d002      	beq.n	801933c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019336:	f10b 0202 	add.w	r2, fp, #2
 801933a:	9209      	str	r2, [sp, #36]	; 0x24
 801933c:	b10d      	cbz	r5, 8019342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801933e:	3501      	adds	r5, #1
 8019340:	9508      	str	r5, [sp, #32]
 8019342:	3301      	adds	r3, #1
 8019344:	930d      	str	r3, [sp, #52]	; 0x34
 8019346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019348:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801934c:	f1bb 0f00 	cmp.w	fp, #0
 8019350:	d0d6      	beq.n	8019300 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8019352:	f8bb 2000 	ldrh.w	r2, [fp]
 8019356:	2a00      	cmp	r2, #0
 8019358:	d1d6      	bne.n	8019308 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801935a:	f8bb 2000 	ldrh.w	r2, [fp]
 801935e:	2a00      	cmp	r2, #0
 8019360:	d0bb      	beq.n	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019362:	459a      	cmp	sl, r3
 8019364:	ddb9      	ble.n	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019366:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801936a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801936e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8019372:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8019376:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801937a:	960e      	str	r6, [sp, #56]	; 0x38
 801937c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8019380:	960f      	str	r6, [sp, #60]	; 0x3c
 8019382:	f1bb 0f00 	cmp.w	fp, #0
 8019386:	d002      	beq.n	801938e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8019388:	f10b 0302 	add.w	r3, fp, #2
 801938c:	9309      	str	r3, [sp, #36]	; 0x24
 801938e:	b10d      	cbz	r5, 8019394 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8019390:	1c6b      	adds	r3, r5, #1
 8019392:	9308      	str	r3, [sp, #32]
 8019394:	ab0f      	add	r3, sp, #60	; 0x3c
 8019396:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801939a:	a908      	add	r1, sp, #32
 801939c:	a809      	add	r0, sp, #36	; 0x24
 801939e:	9305      	str	r3, [sp, #20]
 80193a0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80193a4:	9304      	str	r3, [sp, #16]
 80193a6:	ab0e      	add	r3, sp, #56	; 0x38
 80193a8:	9303      	str	r3, [sp, #12]
 80193aa:	ab0c      	add	r3, sp, #48	; 0x30
 80193ac:	9302      	str	r3, [sp, #8]
 80193ae:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80193b2:	9301      	str	r3, [sp, #4]
 80193b4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80193b8:	9300      	str	r3, [sp, #0]
 80193ba:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80193be:	f7ff fea8 	bl	8019112 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80193c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	bfbf      	itttt	lt
 80193c8:	6823      	ldrlt	r3, [r4, #0]
 80193ca:	3404      	addlt	r4, #4
 80193cc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80193d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80193d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	bfbe      	ittt	lt
 80193d8:	6823      	ldrlt	r3, [r4, #0]
 80193da:	3404      	addlt	r4, #4
 80193dc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80193e0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80193e4:	bfb8      	it	lt
 80193e6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80193e8:	b1d9      	cbz	r1, 8019422 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80193ea:	880b      	ldrh	r3, [r1, #0]
 80193ec:	2b69      	cmp	r3, #105	; 0x69
 80193ee:	d01f      	beq.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80193f0:	d82f      	bhi.n	8019452 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80193f2:	2b58      	cmp	r3, #88	; 0x58
 80193f4:	d01c      	beq.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80193f6:	d818      	bhi.n	801942a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80193f8:	2b25      	cmp	r3, #37	; 0x25
 80193fa:	d034      	beq.n	8019466 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80193fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193fe:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8019402:	f1bb 0f00 	cmp.w	fp, #0
 8019406:	f000 80b7 	beq.w	8019578 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801940a:	f8bb 5000 	ldrh.w	r5, [fp]
 801940e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8019412:	3301      	adds	r3, #1
 8019414:	930d      	str	r3, [sp, #52]	; 0x34
 8019416:	e029      	b.n	801946c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8019418:	b10d      	cbz	r5, 801941e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801941a:	782a      	ldrb	r2, [r5, #0]
 801941c:	e786      	b.n	801932c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801941e:	462a      	mov	r2, r5
 8019420:	e784      	b.n	801932c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8019422:	2a00      	cmp	r2, #0
 8019424:	d0ea      	beq.n	80193fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019426:	7813      	ldrb	r3, [r2, #0]
 8019428:	e7e0      	b.n	80193ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801942a:	3b63      	subs	r3, #99	; 0x63
 801942c:	2b01      	cmp	r3, #1
 801942e:	d8e5      	bhi.n	80193fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8019430:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8019434:	b329      	cbz	r1, 8019482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8019436:	880b      	ldrh	r3, [r1, #0]
 8019438:	2b69      	cmp	r3, #105	; 0x69
 801943a:	d063      	beq.n	8019504 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801943c:	d825      	bhi.n	801948a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801943e:	2b63      	cmp	r3, #99	; 0x63
 8019440:	d038      	beq.n	80194b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8019442:	2b64      	cmp	r3, #100	; 0x64
 8019444:	d05e      	beq.n	8019504 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8019446:	2b58      	cmp	r3, #88	; 0x58
 8019448:	d07a      	beq.n	8019540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801944a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801944e:	4625      	mov	r5, r4
 8019450:	e036      	b.n	80194c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019452:	2b73      	cmp	r3, #115	; 0x73
 8019454:	d0ec      	beq.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019456:	d802      	bhi.n	801945e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8019458:	2b6f      	cmp	r3, #111	; 0x6f
 801945a:	d1cf      	bne.n	80193fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801945c:	e7e8      	b.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801945e:	2b75      	cmp	r3, #117	; 0x75
 8019460:	d0e6      	beq.n	8019430 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8019462:	2b78      	cmp	r3, #120	; 0x78
 8019464:	e7f9      	b.n	801945a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8019466:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019468:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801946e:	b10b      	cbz	r3, 8019474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8019470:	3302      	adds	r3, #2
 8019472:	9309      	str	r3, [sp, #36]	; 0x24
 8019474:	9b08      	ldr	r3, [sp, #32]
 8019476:	2b00      	cmp	r3, #0
 8019478:	f43f af2f 	beq.w	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801947c:	3301      	adds	r3, #1
 801947e:	9308      	str	r3, [sp, #32]
 8019480:	e72b      	b.n	80192da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019482:	2a00      	cmp	r2, #0
 8019484:	d0e1      	beq.n	801944a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019486:	7813      	ldrb	r3, [r2, #0]
 8019488:	e7d6      	b.n	8019438 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801948a:	2b73      	cmp	r3, #115	; 0x73
 801948c:	d036      	beq.n	80194fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801948e:	d807      	bhi.n	80194a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8019490:	2b6f      	cmp	r3, #111	; 0x6f
 8019492:	d1da      	bne.n	801944a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8019494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019496:	1d25      	adds	r5, r4, #4
 8019498:	2308      	movs	r3, #8
 801949a:	eba8 0202 	sub.w	r2, r8, r2
 801949e:	e049      	b.n	8019534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80194a0:	2b75      	cmp	r3, #117	; 0x75
 80194a2:	d042      	beq.n	801952a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80194a4:	2b78      	cmp	r3, #120	; 0x78
 80194a6:	d1d0      	bne.n	801944a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80194a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80194aa:	1d25      	adds	r5, r4, #4
 80194ac:	2310      	movs	r3, #16
 80194ae:	eba8 0202 	sub.w	r2, r8, r2
 80194b2:	e03f      	b.n	8019534 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80194b4:	6823      	ldr	r3, [r4, #0]
 80194b6:	1d25      	adds	r5, r4, #4
 80194b8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80194bc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80194c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d051      	beq.n	801956e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80194ca:	881a      	ldrh	r2, [r3, #0]
 80194cc:	a80d      	add	r0, sp, #52	; 0x34
 80194ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80194d2:	462c      	mov	r4, r5
 80194d4:	9005      	str	r0, [sp, #20]
 80194d6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80194da:	9004      	str	r0, [sp, #16]
 80194dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80194de:	9003      	str	r0, [sp, #12]
 80194e0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80194e4:	9002      	str	r0, [sp, #8]
 80194e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80194e8:	9001      	str	r0, [sp, #4]
 80194ea:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80194ee:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80194f2:	9000      	str	r0, [sp, #0]
 80194f4:	a810      	add	r0, sp, #64	; 0x40
 80194f6:	f7ff fd49 	bl	8018f8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80194fa:	e7b7      	b.n	801946c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80194fc:	1d25      	adds	r5, r4, #4
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	9310      	str	r3, [sp, #64]	; 0x40
 8019502:	e7dd      	b.n	80194c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019506:	230a      	movs	r3, #10
 8019508:	4649      	mov	r1, r9
 801950a:	6820      	ldr	r0, [r4, #0]
 801950c:	eba8 0202 	sub.w	r2, r8, r2
 8019510:	1d25      	adds	r5, r4, #4
 8019512:	b292      	uxth	r2, r2
 8019514:	f7ff fd08 	bl	8018f28 <_ZN8touchgfx7Unicode4itoaElPtti>
 8019518:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801951c:	2b2d      	cmp	r3, #45	; 0x2d
 801951e:	d1cf      	bne.n	80194c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019520:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019526:	3302      	adds	r3, #2
 8019528:	e7ea      	b.n	8019500 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801952a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801952c:	1d25      	adds	r5, r4, #4
 801952e:	230a      	movs	r3, #10
 8019530:	eba8 0202 	sub.w	r2, r8, r2
 8019534:	b292      	uxth	r2, r2
 8019536:	4649      	mov	r1, r9
 8019538:	6820      	ldr	r0, [r4, #0]
 801953a:	f7ff fcd7 	bl	8018eec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801953e:	e7bf      	b.n	80194c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019542:	2310      	movs	r3, #16
 8019544:	4649      	mov	r1, r9
 8019546:	6820      	ldr	r0, [r4, #0]
 8019548:	eba8 0202 	sub.w	r2, r8, r2
 801954c:	1d25      	adds	r5, r4, #4
 801954e:	b292      	uxth	r2, r2
 8019550:	f7ff fccc 	bl	8018eec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8019554:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8019558:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801955c:	2b00      	cmp	r3, #0
 801955e:	d0af      	beq.n	80194c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8019560:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8019564:	2919      	cmp	r1, #25
 8019566:	d8f7      	bhi.n	8019558 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8019568:	3b20      	subs	r3, #32
 801956a:	8013      	strh	r3, [r2, #0]
 801956c:	e7f4      	b.n	8019558 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801956e:	9a08      	ldr	r2, [sp, #32]
 8019570:	2a00      	cmp	r2, #0
 8019572:	d0ab      	beq.n	80194cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019574:	7812      	ldrb	r2, [r2, #0]
 8019576:	e7a9      	b.n	80194cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8019578:	2d00      	cmp	r5, #0
 801957a:	f43f af48 	beq.w	801940e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801957e:	782d      	ldrb	r5, [r5, #0]
 8019580:	e745      	b.n	801940e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08019582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8019582:	b507      	push	{r0, r1, r2, lr}
 8019584:	9300      	str	r3, [sp, #0]
 8019586:	4613      	mov	r3, r2
 8019588:	2200      	movs	r2, #0
 801958a:	f7ff fe92 	bl	80192b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801958e:	b003      	add	sp, #12
 8019590:	f85d fb04 	ldr.w	pc, [sp], #4

08019594 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8019594:	b40c      	push	{r2, r3}
 8019596:	b507      	push	{r0, r1, r2, lr}
 8019598:	ab04      	add	r3, sp, #16
 801959a:	f853 2b04 	ldr.w	r2, [r3], #4
 801959e:	9301      	str	r3, [sp, #4]
 80195a0:	f7ff ffef 	bl	8019582 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80195a4:	b003      	add	sp, #12
 80195a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80195aa:	b002      	add	sp, #8
 80195ac:	4770      	bx	lr
	...

080195b0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80195b0:	4b01      	ldr	r3, [pc, #4]	; (80195b8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80195b2:	6018      	str	r0, [r3, #0]
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop
 80195b8:	2400f2a8 	.word	0x2400f2a8

080195bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80195bc:	4b06      	ldr	r3, [pc, #24]	; (80195d8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80195be:	881a      	ldrh	r2, [r3, #0]
 80195c0:	4282      	cmp	r2, r0
 80195c2:	d807      	bhi.n	80195d4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80195c4:	4b05      	ldr	r3, [pc, #20]	; (80195dc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80195c6:	881b      	ldrh	r3, [r3, #0]
 80195c8:	4413      	add	r3, r2
 80195ca:	4298      	cmp	r0, r3
 80195cc:	bfac      	ite	ge
 80195ce:	2000      	movge	r0, #0
 80195d0:	2001      	movlt	r0, #1
 80195d2:	4770      	bx	lr
 80195d4:	2000      	movs	r0, #0
 80195d6:	4770      	bx	lr
 80195d8:	2400f2c8 	.word	0x2400f2c8
 80195dc:	2400f2cc 	.word	0x2400f2cc

080195e0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80195e0:	b508      	push	{r3, lr}
 80195e2:	4601      	mov	r1, r0
 80195e4:	f7ff ffea 	bl	80195bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80195e8:	b118      	cbz	r0, 80195f2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80195ea:	4b02      	ldr	r3, [pc, #8]	; (80195f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80195f2:	bd08      	pop	{r3, pc}
 80195f4:	2400f2ac 	.word	0x2400f2ac

080195f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80195f8:	b538      	push	{r3, r4, r5, lr}
 80195fa:	4604      	mov	r4, r0
 80195fc:	f7ff ffde 	bl	80195bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8019600:	b188      	cbz	r0, 8019626 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8019602:	4b09      	ldr	r3, [pc, #36]	; (8019628 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8019604:	881a      	ldrh	r2, [r3, #0]
 8019606:	4b09      	ldr	r3, [pc, #36]	; (801962c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8019608:	1aa4      	subs	r4, r4, r2
 801960a:	220e      	movs	r2, #14
 801960c:	681d      	ldr	r5, [r3, #0]
 801960e:	4362      	muls	r2, r4
 8019610:	18ac      	adds	r4, r5, r2
 8019612:	7b23      	ldrb	r3, [r4, #12]
 8019614:	f013 0320 	ands.w	r3, r3, #32
 8019618:	bf17      	itett	ne
 801961a:	680b      	ldrne	r3, [r1, #0]
 801961c:	4618      	moveq	r0, r3
 801961e:	50ab      	strne	r3, [r5, r2]
 8019620:	684b      	ldrne	r3, [r1, #4]
 8019622:	bf18      	it	ne
 8019624:	6063      	strne	r3, [r4, #4]
 8019626:	bd38      	pop	{r3, r4, r5, pc}
 8019628:	2400f2c8 	.word	0x2400f2c8
 801962c:	2400f2b0 	.word	0x2400f2b0

08019630 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8019630:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019634:	4606      	mov	r6, r0
 8019636:	460c      	mov	r4, r1
 8019638:	f7ff ffc0 	bl	80195bc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801963c:	b918      	cbnz	r0, 8019646 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801963e:	2000      	movs	r0, #0
 8019640:	b002      	add	sp, #8
 8019642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019646:	4608      	mov	r0, r1
 8019648:	f7f6 fed7 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801964c:	2800      	cmp	r0, #0
 801964e:	d1f6      	bne.n	801963e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019650:	4b3f      	ldr	r3, [pc, #252]	; (8019750 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8019652:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8019754 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8019656:	881d      	ldrh	r5, [r3, #0]
 8019658:	f8d9 a000 	ldr.w	sl, [r9]
 801965c:	46c8      	mov	r8, r9
 801965e:	1b73      	subs	r3, r6, r5
 8019660:	250e      	movs	r5, #14
 8019662:	435d      	muls	r5, r3
 8019664:	eb0a 0705 	add.w	r7, sl, r5
 8019668:	7b3b      	ldrb	r3, [r7, #12]
 801966a:	f013 0f20 	tst.w	r3, #32
 801966e:	d0e6      	beq.n	801963e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019670:	4621      	mov	r1, r4
 8019672:	4638      	mov	r0, r7
 8019674:	f7fc ff28 	bl	80164c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019678:	2800      	cmp	r0, #0
 801967a:	d1e1      	bne.n	8019640 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801967c:	4639      	mov	r1, r7
 801967e:	4620      	mov	r0, r4
 8019680:	f7fc ff22 	bl	80164c8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019684:	b108      	cbz	r0, 801968a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8019686:	4621      	mov	r1, r4
 8019688:	e020      	b.n	80196cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801968a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801968e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8019692:	429a      	cmp	r2, r3
 8019694:	d11e      	bne.n	80196d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019696:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801969a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801969e:	429a      	cmp	r2, r3
 80196a0:	d118      	bne.n	80196d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80196a2:	6820      	ldr	r0, [r4, #0]
 80196a4:	466b      	mov	r3, sp
 80196a6:	6861      	ldr	r1, [r4, #4]
 80196a8:	c303      	stmia	r3!, {r0, r1}
 80196aa:	4639      	mov	r1, r7
 80196ac:	4668      	mov	r0, sp
 80196ae:	f7f8 fdbf 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80196b2:	f8d9 3000 	ldr.w	r3, [r9]
 80196b6:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80196ba:	442b      	add	r3, r5
 80196bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80196c0:	4413      	add	r3, r2
 80196c2:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80196c6:	4293      	cmp	r3, r2
 80196c8:	dc04      	bgt.n	80196d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80196ca:	4669      	mov	r1, sp
 80196cc:	4630      	mov	r0, r6
 80196ce:	f7ff ff93 	bl	80195f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80196d2:	e7b5      	b.n	8019640 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80196d4:	f8d8 3000 	ldr.w	r3, [r8]
 80196d8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80196dc:	442b      	add	r3, r5
 80196de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80196e2:	4291      	cmp	r1, r2
 80196e4:	d119      	bne.n	801971a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80196e6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80196ea:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80196ee:	4291      	cmp	r1, r2
 80196f0:	d113      	bne.n	801971a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80196f2:	6820      	ldr	r0, [r4, #0]
 80196f4:	466a      	mov	r2, sp
 80196f6:	6861      	ldr	r1, [r4, #4]
 80196f8:	c203      	stmia	r2!, {r0, r1}
 80196fa:	4619      	mov	r1, r3
 80196fc:	4668      	mov	r0, sp
 80196fe:	f7f8 fd97 	bl	8012230 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019702:	f8d8 3000 	ldr.w	r3, [r8]
 8019706:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801970a:	442b      	add	r3, r5
 801970c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8019710:	4413      	add	r3, r2
 8019712:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019716:	4293      	cmp	r3, r2
 8019718:	ddd7      	ble.n	80196ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801971a:	4620      	mov	r0, r4
 801971c:	f7f6 fe6d 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019720:	b990      	cbnz	r0, 8019748 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8019722:	88a7      	ldrh	r7, [r4, #4]
 8019724:	88e3      	ldrh	r3, [r4, #6]
 8019726:	fb17 f703 	smulbb	r7, r7, r3
 801972a:	f8d8 3000 	ldr.w	r3, [r8]
 801972e:	441d      	add	r5, r3
 8019730:	4628      	mov	r0, r5
 8019732:	f7f6 fe62 	bl	80103fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019736:	b948      	cbnz	r0, 801974c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8019738:	88ab      	ldrh	r3, [r5, #4]
 801973a:	88ea      	ldrh	r2, [r5, #6]
 801973c:	fb13 f302 	smulbb	r3, r3, r2
 8019740:	42bb      	cmp	r3, r7
 8019742:	f6bf af7c 	bge.w	801963e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019746:	e79e      	b.n	8019686 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8019748:	2700      	movs	r7, #0
 801974a:	e7ee      	b.n	801972a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801974c:	2300      	movs	r3, #0
 801974e:	e7f7      	b.n	8019740 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8019750:	2400f2c8 	.word	0x2400f2c8
 8019754:	2400f2b0 	.word	0x2400f2b0

08019758 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801975a:	4c24      	ldr	r4, [pc, #144]	; (80197ec <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801975c:	6823      	ldr	r3, [r4, #0]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d042      	beq.n	80197e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019762:	4a23      	ldr	r2, [pc, #140]	; (80197f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019764:	4d23      	ldr	r5, [pc, #140]	; (80197f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019766:	8811      	ldrh	r1, [r2, #0]
 8019768:	f8b5 c000 	ldrh.w	ip, [r5]
 801976c:	4822      	ldr	r0, [pc, #136]	; (80197f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801976e:	4461      	add	r1, ip
 8019770:	1c4a      	adds	r2, r1, #1
 8019772:	008f      	lsls	r7, r1, #2
 8019774:	f022 0201 	bic.w	r2, r2, #1
 8019778:	19de      	adds	r6, r3, r7
 801977a:	0412      	lsls	r2, r2, #16
 801977c:	6006      	str	r6, [r0, #0]
 801977e:	4e1f      	ldr	r6, [pc, #124]	; (80197fc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8019780:	0c12      	lsrs	r2, r2, #16
 8019782:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019786:	19da      	adds	r2, r3, r7
 8019788:	6032      	str	r2, [r6, #0]
 801978a:	220e      	movs	r2, #14
 801978c:	fb02 f20c 	mul.w	r2, r2, ip
 8019790:	3203      	adds	r2, #3
 8019792:	f022 0203 	bic.w	r2, r2, #3
 8019796:	443a      	add	r2, r7
 8019798:	4f19      	ldr	r7, [pc, #100]	; (8019800 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801979a:	4413      	add	r3, r2
 801979c:	603b      	str	r3, [r7, #0]
 801979e:	2300      	movs	r3, #0
 80197a0:	4f18      	ldr	r7, [pc, #96]	; (8019804 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80197a2:	469c      	mov	ip, r3
 80197a4:	803b      	strh	r3, [r7, #0]
 80197a6:	4f18      	ldr	r7, [pc, #96]	; (8019808 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80197a8:	683f      	ldr	r7, [r7, #0]
 80197aa:	1aba      	subs	r2, r7, r2
 80197ac:	4f17      	ldr	r7, [pc, #92]	; (801980c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80197ae:	603a      	str	r2, [r7, #0]
 80197b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80197b4:	4a16      	ldr	r2, [pc, #88]	; (8019810 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80197b6:	8013      	strh	r3, [r2, #0]
 80197b8:	428b      	cmp	r3, r1
 80197ba:	d10d      	bne.n	80197d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80197bc:	882d      	ldrh	r5, [r5, #0]
 80197be:	2300      	movs	r3, #0
 80197c0:	6830      	ldr	r0, [r6, #0]
 80197c2:	240e      	movs	r4, #14
 80197c4:	429d      	cmp	r5, r3
 80197c6:	d90f      	bls.n	80197e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80197c8:	fb04 0203 	mla	r2, r4, r3, r0
 80197cc:	3301      	adds	r3, #1
 80197ce:	7b11      	ldrb	r1, [r2, #12]
 80197d0:	f36f 1145 	bfc	r1, #5, #1
 80197d4:	7311      	strb	r1, [r2, #12]
 80197d6:	e7f5      	b.n	80197c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80197d8:	6822      	ldr	r2, [r4, #0]
 80197da:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80197de:	6802      	ldr	r2, [r0, #0]
 80197e0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80197e4:	3301      	adds	r3, #1
 80197e6:	e7e7      	b.n	80197b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80197e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197ea:	bf00      	nop
 80197ec:	2400f2ac 	.word	0x2400f2ac
 80197f0:	2400f2c8 	.word	0x2400f2c8
 80197f4:	2400f2cc 	.word	0x2400f2cc
 80197f8:	2400f2c0 	.word	0x2400f2c0
 80197fc:	2400f2b0 	.word	0x2400f2b0
 8019800:	2400f2b8 	.word	0x2400f2b8
 8019804:	2400f2ca 	.word	0x2400f2ca
 8019808:	2400f2b4 	.word	0x2400f2b4
 801980c:	2400f2c4 	.word	0x2400f2c4
 8019810:	2400f2bc 	.word	0x2400f2bc

08019814 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8019814:	4b06      	ldr	r3, [pc, #24]	; (8019830 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	b943      	cbnz	r3, 801982c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801981a:	b139      	cbz	r1, 801982c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801981c:	4b05      	ldr	r3, [pc, #20]	; (8019834 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801981e:	801a      	strh	r2, [r3, #0]
 8019820:	4b05      	ldr	r3, [pc, #20]	; (8019838 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8019822:	6019      	str	r1, [r3, #0]
 8019824:	4b05      	ldr	r3, [pc, #20]	; (801983c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8019826:	6018      	str	r0, [r3, #0]
 8019828:	f7ff bf96 	b.w	8019758 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801982c:	4770      	bx	lr
 801982e:	bf00      	nop
 8019830:	2400f2b8 	.word	0x2400f2b8
 8019834:	2400f2cc 	.word	0x2400f2cc
 8019838:	2400f2b4 	.word	0x2400f2b4
 801983c:	2400f2ac 	.word	0x2400f2ac

08019840 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8019840:	b470      	push	{r4, r5, r6}
 8019842:	4c07      	ldr	r4, [pc, #28]	; (8019860 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019844:	4605      	mov	r5, r0
 8019846:	4610      	mov	r0, r2
 8019848:	9a03      	ldr	r2, [sp, #12]
 801984a:	6826      	ldr	r6, [r4, #0]
 801984c:	b936      	cbnz	r6, 801985c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801984e:	6025      	str	r5, [r4, #0]
 8019850:	4c04      	ldr	r4, [pc, #16]	; (8019864 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8019852:	8021      	strh	r1, [r4, #0]
 8019854:	4619      	mov	r1, r3
 8019856:	bc70      	pop	{r4, r5, r6}
 8019858:	f7ff bfdc 	b.w	8019814 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801985c:	bc70      	pop	{r4, r5, r6}
 801985e:	4770      	bx	lr
 8019860:	2400f2d0 	.word	0x2400f2d0
 8019864:	2400f2c8 	.word	0x2400f2c8

08019868 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019868:	4a12      	ldr	r2, [pc, #72]	; (80198b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801986a:	8803      	ldrh	r3, [r0, #0]
 801986c:	8812      	ldrh	r2, [r2, #0]
 801986e:	4293      	cmp	r3, r2
 8019870:	d207      	bcs.n	8019882 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8019872:	4a11      	ldr	r2, [pc, #68]	; (80198b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019874:	2114      	movs	r1, #20
 8019876:	6812      	ldr	r2, [r2, #0]
 8019878:	fb01 2303 	mla	r3, r1, r3, r2
 801987c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8019880:	4770      	bx	lr
 8019882:	490e      	ldr	r1, [pc, #56]	; (80198bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019884:	8809      	ldrh	r1, [r1, #0]
 8019886:	4411      	add	r1, r2
 8019888:	428b      	cmp	r3, r1
 801988a:	da04      	bge.n	8019896 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801988c:	1a9b      	subs	r3, r3, r2
 801988e:	4a0c      	ldr	r2, [pc, #48]	; (80198c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8019890:	210e      	movs	r1, #14
 8019892:	6812      	ldr	r2, [r2, #0]
 8019894:	e7f0      	b.n	8019878 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019896:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801989a:	4293      	cmp	r3, r2
 801989c:	d108      	bne.n	80198b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801989e:	4b09      	ldr	r3, [pc, #36]	; (80198c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	b91b      	cbnz	r3, 80198ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80198a4:	4b08      	ldr	r3, [pc, #32]	; (80198c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80198a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80198aa:	4770      	bx	lr
 80198ac:	4b07      	ldr	r3, [pc, #28]	; (80198cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80198ae:	e7fa      	b.n	80198a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80198b0:	2000      	movs	r0, #0
 80198b2:	4770      	bx	lr
 80198b4:	2400f2c8 	.word	0x2400f2c8
 80198b8:	2400f2d0 	.word	0x2400f2d0
 80198bc:	2400f2cc 	.word	0x2400f2cc
 80198c0:	2400f2b0 	.word	0x2400f2b0
 80198c4:	2400f238 	.word	0x2400f238
 80198c8:	2400f23a 	.word	0x2400f23a
 80198cc:	2400f23c 	.word	0x2400f23c

080198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80198d0:	4a12      	ldr	r2, [pc, #72]	; (801991c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80198d2:	8803      	ldrh	r3, [r0, #0]
 80198d4:	8812      	ldrh	r2, [r2, #0]
 80198d6:	4293      	cmp	r3, r2
 80198d8:	d207      	bcs.n	80198ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80198da:	4a11      	ldr	r2, [pc, #68]	; (8019920 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80198dc:	2114      	movs	r1, #20
 80198de:	6812      	ldr	r2, [r2, #0]
 80198e0:	fb01 2303 	mla	r3, r1, r3, r2
 80198e4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80198e8:	4770      	bx	lr
 80198ea:	490e      	ldr	r1, [pc, #56]	; (8019924 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80198ec:	8809      	ldrh	r1, [r1, #0]
 80198ee:	4411      	add	r1, r2
 80198f0:	428b      	cmp	r3, r1
 80198f2:	da04      	bge.n	80198fe <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80198f4:	1a9b      	subs	r3, r3, r2
 80198f6:	4a0c      	ldr	r2, [pc, #48]	; (8019928 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80198f8:	210e      	movs	r1, #14
 80198fa:	6812      	ldr	r2, [r2, #0]
 80198fc:	e7f0      	b.n	80198e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80198fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019902:	4293      	cmp	r3, r2
 8019904:	d108      	bne.n	8019918 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8019906:	4b09      	ldr	r3, [pc, #36]	; (801992c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8019908:	781b      	ldrb	r3, [r3, #0]
 801990a:	b91b      	cbnz	r3, 8019914 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801990c:	4b08      	ldr	r3, [pc, #32]	; (8019930 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801990e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019912:	4770      	bx	lr
 8019914:	4b07      	ldr	r3, [pc, #28]	; (8019934 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8019916:	e7fa      	b.n	801990e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8019918:	2000      	movs	r0, #0
 801991a:	4770      	bx	lr
 801991c:	2400f2c8 	.word	0x2400f2c8
 8019920:	2400f2d0 	.word	0x2400f2d0
 8019924:	2400f2cc 	.word	0x2400f2cc
 8019928:	2400f2b0 	.word	0x2400f2b0
 801992c:	2400f238 	.word	0x2400f238
 8019930:	2400f23c 	.word	0x2400f23c
 8019934:	2400f23a 	.word	0x2400f23a

08019938 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8019938:	4a1f      	ldr	r2, [pc, #124]	; (80199b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801993a:	b510      	push	{r4, lr}
 801993c:	880b      	ldrh	r3, [r1, #0]
 801993e:	8812      	ldrh	r2, [r2, #0]
 8019940:	4293      	cmp	r3, r2
 8019942:	d213      	bcs.n	801996c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019944:	4a1d      	ldr	r2, [pc, #116]	; (80199bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019946:	2114      	movs	r1, #20
 8019948:	6812      	ldr	r2, [r2, #0]
 801994a:	fb01 2303 	mla	r3, r1, r3, r2
 801994e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8019952:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019956:	8a1a      	ldrh	r2, [r3, #16]
 8019958:	8a5b      	ldrh	r3, [r3, #18]
 801995a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801995e:	8004      	strh	r4, [r0, #0]
 8019960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019964:	8041      	strh	r1, [r0, #2]
 8019966:	8082      	strh	r2, [r0, #4]
 8019968:	80c3      	strh	r3, [r0, #6]
 801996a:	e00e      	b.n	801998a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801996c:	4914      	ldr	r1, [pc, #80]	; (80199c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801996e:	8809      	ldrh	r1, [r1, #0]
 8019970:	4411      	add	r1, r2
 8019972:	428b      	cmp	r3, r1
 8019974:	da0a      	bge.n	801998c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8019976:	1a9b      	subs	r3, r3, r2
 8019978:	4a12      	ldr	r2, [pc, #72]	; (80199c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801997a:	210e      	movs	r1, #14
 801997c:	6812      	ldr	r2, [r2, #0]
 801997e:	fb01 2303 	mla	r3, r1, r3, r2
 8019982:	681a      	ldr	r2, [r3, #0]
 8019984:	6002      	str	r2, [r0, #0]
 8019986:	685a      	ldr	r2, [r3, #4]
 8019988:	6042      	str	r2, [r0, #4]
 801998a:	bd10      	pop	{r4, pc}
 801998c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019990:	4293      	cmp	r3, r2
 8019992:	d10b      	bne.n	80199ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019994:	4b0c      	ldr	r3, [pc, #48]	; (80199c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019996:	f9b3 1000 	ldrsh.w	r1, [r3]
 801999a:	4b0c      	ldr	r3, [pc, #48]	; (80199cc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801999c:	8081      	strh	r1, [r0, #4]
 801999e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80199a2:	2300      	movs	r3, #0
 80199a4:	80c2      	strh	r2, [r0, #6]
 80199a6:	8003      	strh	r3, [r0, #0]
 80199a8:	8043      	strh	r3, [r0, #2]
 80199aa:	e7ee      	b.n	801998a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80199ac:	2300      	movs	r3, #0
 80199ae:	8003      	strh	r3, [r0, #0]
 80199b0:	8043      	strh	r3, [r0, #2]
 80199b2:	8083      	strh	r3, [r0, #4]
 80199b4:	e7d8      	b.n	8019968 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80199b6:	bf00      	nop
 80199b8:	2400f2c8 	.word	0x2400f2c8
 80199bc:	2400f2d0 	.word	0x2400f2d0
 80199c0:	2400f2cc 	.word	0x2400f2cc
 80199c4:	2400f2b0 	.word	0x2400f2b0
 80199c8:	2400f234 	.word	0x2400f234
 80199cc:	2400f236 	.word	0x2400f236

080199d0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80199d0:	4a12      	ldr	r2, [pc, #72]	; (8019a1c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80199d2:	8803      	ldrh	r3, [r0, #0]
 80199d4:	8811      	ldrh	r1, [r2, #0]
 80199d6:	428b      	cmp	r3, r1
 80199d8:	d20b      	bcs.n	80199f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80199da:	4a11      	ldr	r2, [pc, #68]	; (8019a20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80199dc:	6812      	ldr	r2, [r2, #0]
 80199de:	b112      	cbz	r2, 80199e6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80199e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80199e4:	b9c0      	cbnz	r0, 8019a18 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80199e6:	4a0f      	ldr	r2, [pc, #60]	; (8019a24 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80199e8:	6811      	ldr	r1, [r2, #0]
 80199ea:	2214      	movs	r2, #20
 80199ec:	4353      	muls	r3, r2
 80199ee:	58c8      	ldr	r0, [r1, r3]
 80199f0:	4770      	bx	lr
 80199f2:	4a0d      	ldr	r2, [pc, #52]	; (8019a28 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80199f4:	8812      	ldrh	r2, [r2, #0]
 80199f6:	440a      	add	r2, r1
 80199f8:	4293      	cmp	r3, r2
 80199fa:	da04      	bge.n	8019a06 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80199fc:	4a08      	ldr	r2, [pc, #32]	; (8019a20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80199fe:	6812      	ldr	r2, [r2, #0]
 8019a00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019a04:	4770      	bx	lr
 8019a06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019a0a:	4293      	cmp	r3, r2
 8019a0c:	d103      	bne.n	8019a16 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8019a0e:	4b07      	ldr	r3, [pc, #28]	; (8019a2c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8019a14:	4770      	bx	lr
 8019a16:	2000      	movs	r0, #0
 8019a18:	4770      	bx	lr
 8019a1a:	bf00      	nop
 8019a1c:	2400f2c8 	.word	0x2400f2c8
 8019a20:	2400f2ac 	.word	0x2400f2ac
 8019a24:	2400f2d0 	.word	0x2400f2d0
 8019a28:	2400f2cc 	.word	0x2400f2cc
 8019a2c:	2400f240 	.word	0x2400f240

08019a30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8019a30:	4b24      	ldr	r3, [pc, #144]	; (8019ac4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8019a32:	8802      	ldrh	r2, [r0, #0]
 8019a34:	8818      	ldrh	r0, [r3, #0]
 8019a36:	4282      	cmp	r2, r0
 8019a38:	d221      	bcs.n	8019a7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8019a3a:	4b23      	ldr	r3, [pc, #140]	; (8019ac8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8019a3c:	6819      	ldr	r1, [r3, #0]
 8019a3e:	2314      	movs	r3, #20
 8019a40:	fb03 1302 	mla	r3, r3, r2, r1
 8019a44:	6858      	ldr	r0, [r3, #4]
 8019a46:	2800      	cmp	r0, #0
 8019a48:	d03a      	beq.n	8019ac0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a4a:	4920      	ldr	r1, [pc, #128]	; (8019acc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019a4c:	6809      	ldr	r1, [r1, #0]
 8019a4e:	2900      	cmp	r1, #0
 8019a50:	d036      	beq.n	8019ac0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019a56:	2900      	cmp	r1, #0
 8019a58:	d032      	beq.n	8019ac0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019a5a:	891a      	ldrh	r2, [r3, #8]
 8019a5c:	8958      	ldrh	r0, [r3, #10]
 8019a5e:	4350      	muls	r0, r2
 8019a60:	7c5a      	ldrb	r2, [r3, #17]
 8019a62:	7cdb      	ldrb	r3, [r3, #19]
 8019a64:	0952      	lsrs	r2, r2, #5
 8019a66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019a6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8019a6e:	2b0b      	cmp	r3, #11
 8019a70:	bf18      	it	ne
 8019a72:	0040      	lslne	r0, r0, #1
 8019a74:	3003      	adds	r0, #3
 8019a76:	f020 0003 	bic.w	r0, r0, #3
 8019a7a:	4408      	add	r0, r1
 8019a7c:	4770      	bx	lr
 8019a7e:	4b14      	ldr	r3, [pc, #80]	; (8019ad0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8019a80:	881b      	ldrh	r3, [r3, #0]
 8019a82:	4403      	add	r3, r0
 8019a84:	429a      	cmp	r2, r3
 8019a86:	da1a      	bge.n	8019abe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019a88:	4b12      	ldr	r3, [pc, #72]	; (8019ad4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019a8a:	1a10      	subs	r0, r2, r0
 8019a8c:	210e      	movs	r1, #14
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	fb01 3000 	mla	r0, r1, r0, r3
 8019a94:	7b03      	ldrb	r3, [r0, #12]
 8019a96:	f003 031f 	and.w	r3, r3, #31
 8019a9a:	2b0b      	cmp	r3, #11
 8019a9c:	d10b      	bne.n	8019ab6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8019a9e:	8903      	ldrh	r3, [r0, #8]
 8019aa0:	8940      	ldrh	r0, [r0, #10]
 8019aa2:	4358      	muls	r0, r3
 8019aa4:	4b09      	ldr	r3, [pc, #36]	; (8019acc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019aa6:	3003      	adds	r0, #3
 8019aa8:	6819      	ldr	r1, [r3, #0]
 8019aaa:	f020 0303 	bic.w	r3, r0, #3
 8019aae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8019ab2:	4418      	add	r0, r3
 8019ab4:	4770      	bx	lr
 8019ab6:	2b0d      	cmp	r3, #13
 8019ab8:	d101      	bne.n	8019abe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019aba:	300d      	adds	r0, #13
 8019abc:	4770      	bx	lr
 8019abe:	2000      	movs	r0, #0
 8019ac0:	4770      	bx	lr
 8019ac2:	bf00      	nop
 8019ac4:	2400f2c8 	.word	0x2400f2c8
 8019ac8:	2400f2d0 	.word	0x2400f2d0
 8019acc:	2400f2ac 	.word	0x2400f2ac
 8019ad0:	2400f2cc 	.word	0x2400f2cc
 8019ad4:	2400f2b0 	.word	0x2400f2b0

08019ad8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019ad8:	4a17      	ldr	r2, [pc, #92]	; (8019b38 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019ada:	b510      	push	{r4, lr}
 8019adc:	8803      	ldrh	r3, [r0, #0]
 8019ade:	8812      	ldrh	r2, [r2, #0]
 8019ae0:	4293      	cmp	r3, r2
 8019ae2:	d20c      	bcs.n	8019afe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8019ae4:	4a15      	ldr	r2, [pc, #84]	; (8019b3c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8019ae6:	2114      	movs	r1, #20
 8019ae8:	6812      	ldr	r2, [r2, #0]
 8019aea:	fb01 2303 	mla	r3, r1, r3, r2
 8019aee:	7c58      	ldrb	r0, [r3, #17]
 8019af0:	0942      	lsrs	r2, r0, #5
 8019af2:	7cd8      	ldrb	r0, [r3, #19]
 8019af4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8019af8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8019afc:	bd10      	pop	{r4, pc}
 8019afe:	4910      	ldr	r1, [pc, #64]	; (8019b40 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8019b00:	8809      	ldrh	r1, [r1, #0]
 8019b02:	4411      	add	r1, r2
 8019b04:	428b      	cmp	r3, r1
 8019b06:	da09      	bge.n	8019b1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8019b08:	1a9b      	subs	r3, r3, r2
 8019b0a:	4a0e      	ldr	r2, [pc, #56]	; (8019b44 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8019b0c:	210e      	movs	r1, #14
 8019b0e:	6812      	ldr	r2, [r2, #0]
 8019b10:	fb01 2303 	mla	r3, r1, r3, r2
 8019b14:	7b18      	ldrb	r0, [r3, #12]
 8019b16:	f000 001f 	and.w	r0, r0, #31
 8019b1a:	e7ef      	b.n	8019afc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019b20:	4293      	cmp	r3, r2
 8019b22:	d106      	bne.n	8019b32 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8019b24:	f7f6 fef6 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8019b28:	6803      	ldr	r3, [r0, #0]
 8019b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b30:	4718      	bx	r3
 8019b32:	2000      	movs	r0, #0
 8019b34:	e7e2      	b.n	8019afc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8019b36:	bf00      	nop
 8019b38:	2400f2c8 	.word	0x2400f2c8
 8019b3c:	2400f2d0 	.word	0x2400f2d0
 8019b40:	2400f2cc 	.word	0x2400f2cc
 8019b44:	2400f2b0 	.word	0x2400f2b0

08019b48 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019b48:	2018      	movs	r0, #24
 8019b4a:	4770      	bx	lr

08019b4c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019b4c:	2001      	movs	r0, #1
 8019b4e:	4770      	bx	lr

08019b50 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8019b50:	4b02      	ldr	r3, [pc, #8]	; (8019b5c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8019b52:	8818      	ldrh	r0, [r3, #0]
 8019b54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b58:	b280      	uxth	r0, r0
 8019b5a:	4770      	bx	lr
 8019b5c:	2400f23a 	.word	0x2400f23a

08019b60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019b60:	2bff      	cmp	r3, #255	; 0xff
 8019b62:	d040      	beq.n	8019be6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8019b64:	2a2c      	cmp	r2, #44	; 0x2c
 8019b66:	d02a      	beq.n	8019bbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8019b68:	d80f      	bhi.n	8019b8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8019b6a:	2a08      	cmp	r2, #8
 8019b6c:	d037      	beq.n	8019bde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019b6e:	d805      	bhi.n	8019b7c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8019b70:	2a04      	cmp	r2, #4
 8019b72:	d032      	beq.n	8019bda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8019b74:	2a05      	cmp	r2, #5
 8019b76:	d02e      	beq.n	8019bd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019b78:	2000      	movs	r0, #0
 8019b7a:	4770      	bx	lr
 8019b7c:	2a0a      	cmp	r2, #10
 8019b7e:	d02e      	beq.n	8019bde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8019b80:	d301      	bcc.n	8019b86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8019b82:	2a0b      	cmp	r2, #11
 8019b84:	d1f8      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b86:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019b88:	4770      	bx	lr
 8019b8a:	2a30      	cmp	r2, #48	; 0x30
 8019b8c:	d029      	beq.n	8019be2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019b8e:	d808      	bhi.n	8019ba2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8019b90:	2a2e      	cmp	r2, #46	; 0x2e
 8019b92:	684b      	ldr	r3, [r1, #4]
 8019b94:	d01a      	beq.n	8019bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8019b96:	d90b      	bls.n	8019bb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8019b98:	781b      	ldrb	r3, [r3, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d1ec      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019b9e:	6a00      	ldr	r0, [r0, #32]
 8019ba0:	4770      	bx	lr
 8019ba2:	2a32      	cmp	r2, #50	; 0x32
 8019ba4:	d01d      	beq.n	8019be2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019ba6:	d301      	bcc.n	8019bac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8019ba8:	2a33      	cmp	r2, #51	; 0x33
 8019baa:	d1e5      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bac:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8019bae:	4770      	bx	lr
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d0f3      	beq.n	8019b9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d1de      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bba:	6900      	ldr	r0, [r0, #16]
 8019bbc:	4770      	bx	lr
 8019bbe:	684b      	ldr	r3, [r1, #4]
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	b133      	cbz	r3, 8019bd2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019bc4:	2b01      	cmp	r3, #1
 8019bc6:	d1d7      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bc8:	6880      	ldr	r0, [r0, #8]
 8019bca:	4770      	bx	lr
 8019bcc:	781b      	ldrb	r3, [r3, #0]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d1d2      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bd2:	6980      	ldr	r0, [r0, #24]
 8019bd4:	4770      	bx	lr
 8019bd6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019bd8:	4770      	bx	lr
 8019bda:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019bdc:	4770      	bx	lr
 8019bde:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8019be0:	4770      	bx	lr
 8019be2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019be4:	4770      	bx	lr
 8019be6:	2a2c      	cmp	r2, #44	; 0x2c
 8019be8:	d02a      	beq.n	8019c40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8019bea:	d80f      	bhi.n	8019c0c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8019bec:	2a08      	cmp	r2, #8
 8019bee:	d035      	beq.n	8019c5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8019bf0:	d805      	bhi.n	8019bfe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8019bf2:	2a04      	cmp	r2, #4
 8019bf4:	d030      	beq.n	8019c58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8019bf6:	2a05      	cmp	r2, #5
 8019bf8:	d1be      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019bfa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8019bfc:	4770      	bx	lr
 8019bfe:	2a0a      	cmp	r2, #10
 8019c00:	d02c      	beq.n	8019c5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8019c02:	d301      	bcc.n	8019c08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8019c04:	2a0b      	cmp	r2, #11
 8019c06:	d1b7      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c08:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8019c0a:	4770      	bx	lr
 8019c0c:	2a30      	cmp	r2, #48	; 0x30
 8019c0e:	d027      	beq.n	8019c60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8019c10:	d808      	bhi.n	8019c24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8019c12:	2a2e      	cmp	r2, #46	; 0x2e
 8019c14:	684b      	ldr	r3, [r1, #4]
 8019c16:	d01a      	beq.n	8019c4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8019c18:	d90b      	bls.n	8019c32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d1ab      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c20:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8019c22:	4770      	bx	lr
 8019c24:	2a32      	cmp	r2, #50	; 0x32
 8019c26:	d01b      	beq.n	8019c60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8019c28:	d301      	bcc.n	8019c2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8019c2a:	2a33      	cmp	r2, #51	; 0x33
 8019c2c:	d1a4      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c2e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8019c30:	4770      	bx	lr
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d0f3      	beq.n	8019c20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d19d      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c3c:	6940      	ldr	r0, [r0, #20]
 8019c3e:	4770      	bx	lr
 8019c40:	684b      	ldr	r3, [r1, #4]
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	b133      	cbz	r3, 8019c54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8019c46:	2b01      	cmp	r3, #1
 8019c48:	d196      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c4a:	68c0      	ldr	r0, [r0, #12]
 8019c4c:	4770      	bx	lr
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d191      	bne.n	8019b78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019c54:	69c0      	ldr	r0, [r0, #28]
 8019c56:	4770      	bx	lr
 8019c58:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019c5a:	4770      	bx	lr
 8019c5c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019c5e:	4770      	bx	lr
 8019c60:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8019c62:	4770      	bx	lr

08019c64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c68:	b085      	sub	sp, #20
 8019c6a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019c6c:	9203      	str	r2, [sp, #12]
 8019c6e:	6870      	ldr	r0, [r6, #4]
 8019c70:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019c74:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019c78:	9101      	str	r1, [sp, #4]
 8019c7a:	fa1f f885 	uxth.w	r8, r5
 8019c7e:	43ed      	mvns	r5, r5
 8019c80:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019c84:	b2ed      	uxtb	r5, r5
 8019c86:	fb00 2404 	mla	r4, r0, r4, r2
 8019c8a:	6832      	ldr	r2, [r6, #0]
 8019c8c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c90:	4414      	add	r4, r2
 8019c92:	f8dc 2000 	ldr.w	r2, [ip]
 8019c96:	9202      	str	r2, [sp, #8]
 8019c98:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019c9c:	f102 0e04 	add.w	lr, r2, #4
 8019ca0:	9a01      	ldr	r2, [sp, #4]
 8019ca2:	2a00      	cmp	r2, #0
 8019ca4:	dc03      	bgt.n	8019cae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019ca6:	9a03      	ldr	r2, [sp, #12]
 8019ca8:	2a00      	cmp	r2, #0
 8019caa:	f340 8116 	ble.w	8019eda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019cb0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019cb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019cb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019cba:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8019cbe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	dd0e      	ble.n	8019ce4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019cc6:	1406      	asrs	r6, r0, #16
 8019cc8:	d405      	bmi.n	8019cd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019cca:	4556      	cmp	r6, sl
 8019ccc:	da03      	bge.n	8019cd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019cce:	1416      	asrs	r6, r2, #16
 8019cd0:	d401      	bmi.n	8019cd6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019cd2:	454e      	cmp	r6, r9
 8019cd4:	db07      	blt.n	8019ce6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019cd6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019cd8:	3b01      	subs	r3, #1
 8019cda:	3403      	adds	r4, #3
 8019cdc:	4430      	add	r0, r6
 8019cde:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019ce0:	4432      	add	r2, r6
 8019ce2:	e7ee      	b.n	8019cc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019ce4:	d063      	beq.n	8019dae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019ce6:	1e5e      	subs	r6, r3, #1
 8019ce8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8019cea:	fb07 0706 	mla	r7, r7, r6, r0
 8019cee:	143f      	asrs	r7, r7, #16
 8019cf0:	d454      	bmi.n	8019d9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019cf2:	4557      	cmp	r7, sl
 8019cf4:	da52      	bge.n	8019d9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019cf6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8019cf8:	fb07 2606 	mla	r6, r7, r6, r2
 8019cfc:	1436      	asrs	r6, r6, #16
 8019cfe:	d44d      	bmi.n	8019d9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019d00:	454e      	cmp	r6, r9
 8019d02:	da4b      	bge.n	8019d9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019d04:	1ce6      	adds	r6, r4, #3
 8019d06:	4699      	mov	r9, r3
 8019d08:	f1b9 0f00 	cmp.w	r9, #0
 8019d0c:	f106 0603 	add.w	r6, r6, #3
 8019d10:	dd48      	ble.n	8019da4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8019d12:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8019d16:	1417      	asrs	r7, r2, #16
 8019d18:	9902      	ldr	r1, [sp, #8]
 8019d1a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8019d1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8019d22:	fb0b 1707 	mla	r7, fp, r7, r1
 8019d26:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8019d2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019d2c:	f817 700a 	ldrb.w	r7, [r7, sl]
 8019d30:	fb1b fb05 	smulbb	fp, fp, r5
 8019d34:	4408      	add	r0, r1
 8019d36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019d38:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019d3c:	440a      	add	r2, r1
 8019d3e:	eb0e 0a07 	add.w	sl, lr, r7
 8019d42:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8019d46:	fb07 b708 	mla	r7, r7, r8, fp
 8019d4a:	b2bf      	uxth	r7, r7
 8019d4c:	f107 0b01 	add.w	fp, r7, #1
 8019d50:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019d54:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019d58:	fb1b fb05 	smulbb	fp, fp, r5
 8019d5c:	123f      	asrs	r7, r7, #8
 8019d5e:	f806 7c06 	strb.w	r7, [r6, #-6]
 8019d62:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019d66:	fb07 b708 	mla	r7, r7, r8, fp
 8019d6a:	b2bf      	uxth	r7, r7
 8019d6c:	f107 0b01 	add.w	fp, r7, #1
 8019d70:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019d74:	123f      	asrs	r7, r7, #8
 8019d76:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019d7a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8019d7e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8019d82:	fb1a fa05 	smulbb	sl, sl, r5
 8019d86:	fb07 a708 	mla	r7, r7, r8, sl
 8019d8a:	b2bf      	uxth	r7, r7
 8019d8c:	f107 0a01 	add.w	sl, r7, #1
 8019d90:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019d94:	123f      	asrs	r7, r7, #8
 8019d96:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019d9a:	e7b5      	b.n	8019d08 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019d9c:	2700      	movs	r7, #0
 8019d9e:	1bde      	subs	r6, r3, r7
 8019da0:	2e00      	cmp	r6, #0
 8019da2:	dc42      	bgt.n	8019e2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dac:	441c      	add	r4, r3
 8019dae:	9b01      	ldr	r3, [sp, #4]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	f340 8092 	ble.w	8019eda <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dbc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019dc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019dc4:	eef0 6a62 	vmov.f32	s13, s5
 8019dc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019dcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019dd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019dd4:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019dd8:	eef0 6a43 	vmov.f32	s13, s6
 8019ddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019de0:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8019de4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019de8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019dec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019df0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019df4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019df8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019dfc:	ee12 2a90 	vmov	r2, s5
 8019e00:	eef0 2a47 	vmov.f32	s5, s14
 8019e04:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e08:	ee13 2a10 	vmov	r2, s6
 8019e0c:	9311      	str	r3, [sp, #68]	; 0x44
 8019e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e10:	eeb0 3a67 	vmov.f32	s6, s15
 8019e14:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e18:	9312      	str	r3, [sp, #72]	; 0x48
 8019e1a:	9b01      	ldr	r3, [sp, #4]
 8019e1c:	9a03      	ldr	r2, [sp, #12]
 8019e1e:	3b01      	subs	r3, #1
 8019e20:	9301      	str	r3, [sp, #4]
 8019e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e24:	bf08      	it	eq
 8019e26:	4613      	moveq	r3, r2
 8019e28:	e73a      	b.n	8019ca0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019e2a:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8019e2e:	d44e      	bmi.n	8019ece <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019e30:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019e34:	4556      	cmp	r6, sl
 8019e36:	dd4a      	ble.n	8019ece <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019e38:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8019e3c:	d447      	bmi.n	8019ece <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019e3e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8019e42:	4559      	cmp	r1, fp
 8019e44:	dd43      	ble.n	8019ece <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019e46:	fa0f f986 	sxth.w	r9, r6
 8019e4a:	9902      	ldr	r1, [sp, #8]
 8019e4c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8019e50:	fb0b 1909 	mla	r9, fp, r9, r1
 8019e54:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019e58:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019e5c:	fb1b fb05 	smulbb	fp, fp, r5
 8019e60:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019e64:	eb0e 0a09 	add.w	sl, lr, r9
 8019e68:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8019e6c:	fb09 b908 	mla	r9, r9, r8, fp
 8019e70:	fa1f f989 	uxth.w	r9, r9
 8019e74:	f109 0b01 	add.w	fp, r9, #1
 8019e78:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019e7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019e80:	f804 9006 	strb.w	r9, [r4, r6]
 8019e84:	4426      	add	r6, r4
 8019e86:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019e8a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019e8e:	fb1b fb05 	smulbb	fp, fp, r5
 8019e92:	fb09 b908 	mla	r9, r9, r8, fp
 8019e96:	fa1f f989 	uxth.w	r9, r9
 8019e9a:	f109 0b01 	add.w	fp, r9, #1
 8019e9e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019ea2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019ea6:	f886 9001 	strb.w	r9, [r6, #1]
 8019eaa:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019eae:	f896 a002 	ldrb.w	sl, [r6, #2]
 8019eb2:	fb1a fa05 	smulbb	sl, sl, r5
 8019eb6:	fb09 a908 	mla	r9, r9, r8, sl
 8019eba:	fa1f f989 	uxth.w	r9, r9
 8019ebe:	f109 0a01 	add.w	sl, r9, #1
 8019ec2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019ec6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019eca:	f886 9002 	strb.w	r9, [r6, #2]
 8019ece:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019ed0:	3701      	adds	r7, #1
 8019ed2:	4408      	add	r0, r1
 8019ed4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019ed6:	440a      	add	r2, r1
 8019ed8:	e761      	b.n	8019d9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019eda:	b005      	add	sp, #20
 8019edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019ee0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019ee6:	4693      	mov	fp, r2
 8019ee8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8019eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019eee:	6868      	ldr	r0, [r5, #4]
 8019ef0:	6877      	ldr	r7, [r6, #4]
 8019ef2:	9100      	str	r1, [sp, #0]
 8019ef4:	3704      	adds	r7, #4
 8019ef6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8019efa:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8019efe:	fb00 2404 	mla	r4, r0, r4, r2
 8019f02:	682a      	ldr	r2, [r5, #0]
 8019f04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f08:	4414      	add	r4, r2
 8019f0a:	6832      	ldr	r2, [r6, #0]
 8019f0c:	9201      	str	r2, [sp, #4]
 8019f0e:	9a00      	ldr	r2, [sp, #0]
 8019f10:	2a00      	cmp	r2, #0
 8019f12:	dc03      	bgt.n	8019f1c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019f14:	f1bb 0f00 	cmp.w	fp, #0
 8019f18:	f340 80bc 	ble.w	801a094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019f1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019f1e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8019f22:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f28:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8019f2c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	dd0c      	ble.n	8019f4e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8019f34:	1405      	asrs	r5, r0, #16
 8019f36:	d405      	bmi.n	8019f44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019f38:	4555      	cmp	r5, sl
 8019f3a:	da03      	bge.n	8019f44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019f3c:	1415      	asrs	r5, r2, #16
 8019f3e:	d401      	bmi.n	8019f44 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8019f40:	454d      	cmp	r5, r9
 8019f42:	db05      	blt.n	8019f50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019f44:	4440      	add	r0, r8
 8019f46:	4472      	add	r2, lr
 8019f48:	3b01      	subs	r3, #1
 8019f4a:	3403      	adds	r4, #3
 8019f4c:	e7f0      	b.n	8019f30 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019f4e:	d03f      	beq.n	8019fd0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8019f50:	1e5d      	subs	r5, r3, #1
 8019f52:	fb08 0c05 	mla	ip, r8, r5, r0
 8019f56:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8019f5a:	d42e      	bmi.n	8019fba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f5c:	45d4      	cmp	ip, sl
 8019f5e:	da2c      	bge.n	8019fba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f60:	fb0e 2505 	mla	r5, lr, r5, r2
 8019f64:	142d      	asrs	r5, r5, #16
 8019f66:	d428      	bmi.n	8019fba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f68:	454d      	cmp	r5, r9
 8019f6a:	da26      	bge.n	8019fba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019f6c:	1ce5      	adds	r5, r4, #3
 8019f6e:	469c      	mov	ip, r3
 8019f70:	f1bc 0f00 	cmp.w	ip, #0
 8019f74:	f105 0503 	add.w	r5, r5, #3
 8019f78:	dd25      	ble.n	8019fc6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8019f7a:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019f7e:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019f82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019f86:	4472      	add	r2, lr
 8019f88:	468a      	mov	sl, r1
 8019f8a:	9901      	ldr	r1, [sp, #4]
 8019f8c:	fb0a 1909 	mla	r9, sl, r9, r1
 8019f90:	1401      	asrs	r1, r0, #16
 8019f92:	4440      	add	r0, r8
 8019f94:	f819 9001 	ldrb.w	r9, [r9, r1]
 8019f98:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019f9c:	eb07 0a09 	add.w	sl, r7, r9
 8019fa0:	f817 9009 	ldrb.w	r9, [r7, r9]
 8019fa4:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019fa8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019fac:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019fb0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019fb4:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019fb8:	e7da      	b.n	8019f70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019fba:	2500      	movs	r5, #0
 8019fbc:	eba3 0c05 	sub.w	ip, r3, r5
 8019fc0:	f1bc 0f00 	cmp.w	ip, #0
 8019fc4:	dc3b      	bgt.n	801a03e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019fc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019fce:	441c      	add	r4, r3
 8019fd0:	9b00      	ldr	r3, [sp, #0]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	dd5e      	ble.n	801a094 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019fd6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fdc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019fe0:	eeb0 6a62 	vmov.f32	s12, s5
 8019fe4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019fe8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019fec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ff0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019ff4:	eeb0 6a43 	vmov.f32	s12, s6
 8019ff8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ffc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a000:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a004:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a008:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a00c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a010:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a014:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a018:	ee12 2a90 	vmov	r2, s5
 801a01c:	eef0 2a47 	vmov.f32	s5, s14
 801a020:	fb92 f8f3 	sdiv	r8, r2, r3
 801a024:	ee13 2a10 	vmov	r2, s6
 801a028:	eeb0 3a67 	vmov.f32	s6, s15
 801a02c:	fb92 fef3 	sdiv	lr, r2, r3
 801a030:	9b00      	ldr	r3, [sp, #0]
 801a032:	3b01      	subs	r3, #1
 801a034:	9300      	str	r3, [sp, #0]
 801a036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a038:	bf08      	it	eq
 801a03a:	465b      	moveq	r3, fp
 801a03c:	e767      	b.n	8019f0e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a03e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a042:	d423      	bmi.n	801a08c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a044:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801a048:	45cc      	cmp	ip, r9
 801a04a:	dd1f      	ble.n	801a08c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a04c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a050:	d41c      	bmi.n	801a08c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a052:	68f1      	ldr	r1, [r6, #12]
 801a054:	4551      	cmp	r1, sl
 801a056:	dd19      	ble.n	801a08c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801a058:	fa0f fc8c 	sxth.w	ip, ip
 801a05c:	9901      	ldr	r1, [sp, #4]
 801a05e:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801a062:	f81c c009 	ldrb.w	ip, [ip, r9]
 801a066:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a06a:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801a06e:	eb07 090c 	add.w	r9, r7, ip
 801a072:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801a076:	f804 a00c 	strb.w	sl, [r4, ip]
 801a07a:	44a4      	add	ip, r4
 801a07c:	f899 a001 	ldrb.w	sl, [r9, #1]
 801a080:	f88c a001 	strb.w	sl, [ip, #1]
 801a084:	f899 9002 	ldrb.w	r9, [r9, #2]
 801a088:	f88c 9002 	strb.w	r9, [ip, #2]
 801a08c:	4440      	add	r0, r8
 801a08e:	4472      	add	r2, lr
 801a090:	3501      	adds	r5, #1
 801a092:	e793      	b.n	8019fbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801a094:	b003      	add	sp, #12
 801a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a09a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a09a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09e:	b085      	sub	sp, #20
 801a0a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a0a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a0a6:	9202      	str	r2, [sp, #8]
 801a0a8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a0ac:	6860      	ldr	r0, [r4, #4]
 801a0ae:	9203      	str	r2, [sp, #12]
 801a0b0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a0b4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a0b8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a0bc:	fb00 2505 	mla	r5, r0, r5, r2
 801a0c0:	6822      	ldr	r2, [r4, #0]
 801a0c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a0c6:	4415      	add	r5, r2
 801a0c8:	f8dc 2000 	ldr.w	r2, [ip]
 801a0cc:	9200      	str	r2, [sp, #0]
 801a0ce:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a0d2:	3204      	adds	r2, #4
 801a0d4:	9201      	str	r2, [sp, #4]
 801a0d6:	2900      	cmp	r1, #0
 801a0d8:	dc03      	bgt.n	801a0e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a0da:	9a02      	ldr	r2, [sp, #8]
 801a0dc:	2a00      	cmp	r2, #0
 801a0de:	f340 8127 	ble.w	801a330 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a0e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a0e4:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a0e8:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a0ee:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a0f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	dd0d      	ble.n	801a116 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a0fa:	1422      	asrs	r2, r4, #16
 801a0fc:	d405      	bmi.n	801a10a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0fe:	4542      	cmp	r2, r8
 801a100:	da03      	bge.n	801a10a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a102:	1402      	asrs	r2, r0, #16
 801a104:	d401      	bmi.n	801a10a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a106:	42ba      	cmp	r2, r7
 801a108:	db06      	blt.n	801a118 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a10a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a10c:	4474      	add	r4, lr
 801a10e:	3b01      	subs	r3, #1
 801a110:	3503      	adds	r5, #3
 801a112:	4410      	add	r0, r2
 801a114:	e7ef      	b.n	801a0f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a116:	d075      	beq.n	801a204 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801a118:	1e5a      	subs	r2, r3, #1
 801a11a:	fb0e 4602 	mla	r6, lr, r2, r4
 801a11e:	1436      	asrs	r6, r6, #16
 801a120:	d465      	bmi.n	801a1ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a122:	4546      	cmp	r6, r8
 801a124:	da63      	bge.n	801a1ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a126:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a128:	fb06 0202 	mla	r2, r6, r2, r0
 801a12c:	1412      	asrs	r2, r2, #16
 801a12e:	d45e      	bmi.n	801a1ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a130:	42ba      	cmp	r2, r7
 801a132:	da5c      	bge.n	801a1ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801a134:	1cef      	adds	r7, r5, #3
 801a136:	4699      	mov	r9, r3
 801a138:	f1b9 0f00 	cmp.w	r9, #0
 801a13c:	dd5d      	ble.n	801a1fa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801a13e:	1402      	asrs	r2, r0, #16
 801a140:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a144:	1426      	asrs	r6, r4, #16
 801a146:	4692      	mov	sl, r2
 801a148:	9a00      	ldr	r2, [sp, #0]
 801a14a:	fb08 220a 	mla	r2, r8, sl, r2
 801a14e:	5d92      	ldrb	r2, [r2, r6]
 801a150:	9e01      	ldr	r6, [sp, #4]
 801a152:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a156:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a15a:	d041      	beq.n	801a1e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a15c:	9a03      	ldr	r2, [sp, #12]
 801a15e:	fa5f fb86 	uxtb.w	fp, r6
 801a162:	fb02 f808 	mul.w	r8, r2, r8
 801a166:	f108 0201 	add.w	r2, r8, #1
 801a16a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a16e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a172:	1212      	asrs	r2, r2, #8
 801a174:	fa1f fa82 	uxth.w	sl, r2
 801a178:	43d2      	mvns	r2, r2
 801a17a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a17e:	b2d2      	uxtb	r2, r2
 801a180:	fb08 b802 	mla	r8, r8, r2, fp
 801a184:	fa1f f888 	uxth.w	r8, r8
 801a188:	f108 0b01 	add.w	fp, r8, #1
 801a18c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a190:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a194:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a198:	fb1b fb0a 	smulbb	fp, fp, sl
 801a19c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a1a0:	fb16 fa0a 	smulbb	sl, r6, sl
 801a1a4:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a1a8:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a1ac:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a1b0:	fb06 aa02 	mla	sl, r6, r2, sl
 801a1b4:	fb08 b802 	mla	r8, r8, r2, fp
 801a1b8:	fa1f fa8a 	uxth.w	sl, sl
 801a1bc:	fa1f f888 	uxth.w	r8, r8
 801a1c0:	f10a 0601 	add.w	r6, sl, #1
 801a1c4:	f108 0b01 	add.w	fp, r8, #1
 801a1c8:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a1cc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a1d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a1d4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a1d8:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a1dc:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a1e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1e2:	4474      	add	r4, lr
 801a1e4:	3703      	adds	r7, #3
 801a1e6:	f109 39ff 	add.w	r9, r9, #4294967295
 801a1ea:	4410      	add	r0, r2
 801a1ec:	e7a4      	b.n	801a138 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801a1ee:	f04f 0800 	mov.w	r8, #0
 801a1f2:	eba3 0208 	sub.w	r2, r3, r8
 801a1f6:	2a00      	cmp	r2, #0
 801a1f8:	dc3b      	bgt.n	801a272 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801a1fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a202:	441d      	add	r5, r3
 801a204:	2900      	cmp	r1, #0
 801a206:	f340 8093 	ble.w	801a330 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801a20a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a210:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a214:	3901      	subs	r1, #1
 801a216:	eeb0 6a62 	vmov.f32	s12, s5
 801a21a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a21e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a222:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a226:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a22a:	eeb0 6a43 	vmov.f32	s12, s6
 801a22e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a232:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a236:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a23a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a23e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a242:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a246:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a24a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a24e:	ee12 2a90 	vmov	r2, s5
 801a252:	eef0 2a47 	vmov.f32	s5, s14
 801a256:	fb92 fef3 	sdiv	lr, r2, r3
 801a25a:	ee13 2a10 	vmov	r2, s6
 801a25e:	eeb0 3a67 	vmov.f32	s6, s15
 801a262:	fb92 f3f3 	sdiv	r3, r2, r3
 801a266:	9a02      	ldr	r2, [sp, #8]
 801a268:	9312      	str	r3, [sp, #72]	; 0x48
 801a26a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a26c:	bf08      	it	eq
 801a26e:	4613      	moveq	r3, r2
 801a270:	e731      	b.n	801a0d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a272:	1427      	asrs	r7, r4, #16
 801a274:	d456      	bmi.n	801a324 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a276:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a27a:	42be      	cmp	r6, r7
 801a27c:	dd52      	ble.n	801a324 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a27e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a282:	d44f      	bmi.n	801a324 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a284:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a288:	454a      	cmp	r2, r9
 801a28a:	dd4b      	ble.n	801a324 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a28c:	9a00      	ldr	r2, [sp, #0]
 801a28e:	b236      	sxth	r6, r6
 801a290:	fb09 2606 	mla	r6, r9, r6, r2
 801a294:	5df2      	ldrb	r2, [r6, r7]
 801a296:	9e01      	ldr	r6, [sp, #4]
 801a298:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801a29c:	0e3a      	lsrs	r2, r7, #24
 801a29e:	d041      	beq.n	801a324 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a2a0:	9e03      	ldr	r6, [sp, #12]
 801a2a2:	fa5f fb87 	uxtb.w	fp, r7
 801a2a6:	4372      	muls	r2, r6
 801a2a8:	1c56      	adds	r6, r2, #1
 801a2aa:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a2ae:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a2b2:	1212      	asrs	r2, r2, #8
 801a2b4:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a2b8:	fa1f fa82 	uxth.w	sl, r2
 801a2bc:	43d2      	mvns	r2, r2
 801a2be:	fb1b fb0a 	smulbb	fp, fp, sl
 801a2c2:	b2d2      	uxtb	r2, r2
 801a2c4:	fb09 b902 	mla	r9, r9, r2, fp
 801a2c8:	fa1f f989 	uxth.w	r9, r9
 801a2cc:	f109 0b01 	add.w	fp, r9, #1
 801a2d0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2d4:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a2d8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a2dc:	fb1b fb0a 	smulbb	fp, fp, sl
 801a2e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2e4:	fb17 fa0a 	smulbb	sl, r7, sl
 801a2e8:	f805 9006 	strb.w	r9, [r5, r6]
 801a2ec:	442e      	add	r6, r5
 801a2ee:	78b7      	ldrb	r7, [r6, #2]
 801a2f0:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a2f4:	fb07 aa02 	mla	sl, r7, r2, sl
 801a2f8:	fb09 b902 	mla	r9, r9, r2, fp
 801a2fc:	fa1f fa8a 	uxth.w	sl, sl
 801a300:	fa1f f989 	uxth.w	r9, r9
 801a304:	f10a 0701 	add.w	r7, sl, #1
 801a308:	f109 0b01 	add.w	fp, r9, #1
 801a30c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a310:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a314:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a318:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a31c:	f886 a002 	strb.w	sl, [r6, #2]
 801a320:	f886 9001 	strb.w	r9, [r6, #1]
 801a324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a326:	4474      	add	r4, lr
 801a328:	f108 0801 	add.w	r8, r8, #1
 801a32c:	4410      	add	r0, r2
 801a32e:	e760      	b.n	801a1f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801a330:	b005      	add	sp, #20
 801a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a336 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a336:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a33a:	b085      	sub	sp, #20
 801a33c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a340:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801a342:	9203      	str	r2, [sp, #12]
 801a344:	6868      	ldr	r0, [r5, #4]
 801a346:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a34a:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a34e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801a352:	fb00 2404 	mla	r4, r0, r4, r2
 801a356:	682a      	ldr	r2, [r5, #0]
 801a358:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a35c:	4414      	add	r4, r2
 801a35e:	f8dc 2000 	ldr.w	r2, [ip]
 801a362:	9201      	str	r2, [sp, #4]
 801a364:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801a368:	3204      	adds	r2, #4
 801a36a:	9202      	str	r2, [sp, #8]
 801a36c:	2900      	cmp	r1, #0
 801a36e:	dc03      	bgt.n	801a378 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801a370:	9a03      	ldr	r2, [sp, #12]
 801a372:	2a00      	cmp	r2, #0
 801a374:	f340 8137 	ble.w	801a5e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a37a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a37e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a382:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a384:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a388:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	dd0d      	ble.n	801a3ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a390:	1405      	asrs	r5, r0, #16
 801a392:	d405      	bmi.n	801a3a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a394:	4545      	cmp	r5, r8
 801a396:	da03      	bge.n	801a3a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a398:	1415      	asrs	r5, r2, #16
 801a39a:	d401      	bmi.n	801a3a0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a39c:	42bd      	cmp	r5, r7
 801a39e:	db06      	blt.n	801a3ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a3a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a3a2:	4470      	add	r0, lr
 801a3a4:	3b01      	subs	r3, #1
 801a3a6:	3403      	adds	r4, #3
 801a3a8:	442a      	add	r2, r5
 801a3aa:	e7ef      	b.n	801a38c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801a3ac:	d070      	beq.n	801a490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801a3ae:	1e5d      	subs	r5, r3, #1
 801a3b0:	fb0e 0605 	mla	r6, lr, r5, r0
 801a3b4:	1436      	asrs	r6, r6, #16
 801a3b6:	d462      	bmi.n	801a47e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a3b8:	4546      	cmp	r6, r8
 801a3ba:	da60      	bge.n	801a47e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a3bc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a3be:	fb06 2505 	mla	r5, r6, r5, r2
 801a3c2:	142d      	asrs	r5, r5, #16
 801a3c4:	d45b      	bmi.n	801a47e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a3c6:	42bd      	cmp	r5, r7
 801a3c8:	da59      	bge.n	801a47e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801a3ca:	1ce5      	adds	r5, r4, #3
 801a3cc:	469a      	mov	sl, r3
 801a3ce:	f1ba 0f00 	cmp.w	sl, #0
 801a3d2:	dd58      	ble.n	801a486 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801a3d4:	1416      	asrs	r6, r2, #16
 801a3d6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a3da:	1407      	asrs	r7, r0, #16
 801a3dc:	46b1      	mov	r9, r6
 801a3de:	9e01      	ldr	r6, [sp, #4]
 801a3e0:	fb08 6609 	mla	r6, r8, r9, r6
 801a3e4:	5df6      	ldrb	r6, [r6, r7]
 801a3e6:	9f02      	ldr	r7, [sp, #8]
 801a3e8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801a3ec:	0e37      	lsrs	r7, r6, #24
 801a3ee:	2fff      	cmp	r7, #255	; 0xff
 801a3f0:	f000 80f0 	beq.w	801a5d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a3f4:	fa5f f887 	uxtb.w	r8, r7
 801a3f8:	b3d7      	cbz	r7, 801a470 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a3fa:	fa1f f788 	uxth.w	r7, r8
 801a3fe:	ea6f 0808 	mvn.w	r8, r8
 801a402:	fa5f fb86 	uxtb.w	fp, r6
 801a406:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801a40a:	fa5f f888 	uxtb.w	r8, r8
 801a40e:	fb1b fb07 	smulbb	fp, fp, r7
 801a412:	fb09 b908 	mla	r9, r9, r8, fp
 801a416:	fa1f f989 	uxth.w	r9, r9
 801a41a:	f109 0b01 	add.w	fp, r9, #1
 801a41e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a422:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801a426:	fb1b fb08 	smulbb	fp, fp, r8
 801a42a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a42e:	f805 9c03 	strb.w	r9, [r5, #-3]
 801a432:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801a436:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a43a:	fb09 b907 	mla	r9, r9, r7, fp
 801a43e:	fa1f f989 	uxth.w	r9, r9
 801a442:	f109 0b01 	add.w	fp, r9, #1
 801a446:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a44a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a44e:	f805 9c02 	strb.w	r9, [r5, #-2]
 801a452:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801a456:	fb19 f808 	smulbb	r8, r9, r8
 801a45a:	fb06 8607 	mla	r6, r6, r7, r8
 801a45e:	b2b6      	uxth	r6, r6
 801a460:	f106 0801 	add.w	r8, r6, #1
 801a464:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801a468:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a46c:	f805 8c01 	strb.w	r8, [r5, #-1]
 801a470:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a472:	4470      	add	r0, lr
 801a474:	3503      	adds	r5, #3
 801a476:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a47a:	4432      	add	r2, r6
 801a47c:	e7a7      	b.n	801a3ce <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a47e:	2600      	movs	r6, #0
 801a480:	1b9d      	subs	r5, r3, r6
 801a482:	2d00      	cmp	r5, #0
 801a484:	dc3b      	bgt.n	801a4fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801a486:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a48a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a48e:	441c      	add	r4, r3
 801a490:	2900      	cmp	r1, #0
 801a492:	f340 80a8 	ble.w	801a5e6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a496:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a49a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a49c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a4a0:	3901      	subs	r1, #1
 801a4a2:	eeb0 6a62 	vmov.f32	s12, s5
 801a4a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a4aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a4ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a4b6:	eeb0 6a43 	vmov.f32	s12, s6
 801a4ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a4be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a4c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a4c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a4ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a4ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a4d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a4d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a4da:	ee12 2a90 	vmov	r2, s5
 801a4de:	eef0 2a47 	vmov.f32	s5, s14
 801a4e2:	fb92 fef3 	sdiv	lr, r2, r3
 801a4e6:	ee13 2a10 	vmov	r2, s6
 801a4ea:	eeb0 3a67 	vmov.f32	s6, s15
 801a4ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801a4f2:	9a03      	ldr	r2, [sp, #12]
 801a4f4:	9312      	str	r3, [sp, #72]	; 0x48
 801a4f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a4f8:	bf08      	it	eq
 801a4fa:	4613      	moveq	r3, r2
 801a4fc:	e736      	b.n	801a36c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a4fe:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a502:	d457      	bmi.n	801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a504:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801a508:	4547      	cmp	r7, r8
 801a50a:	dd53      	ble.n	801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a50c:	ea5f 4922 	movs.w	r9, r2, asr #16
 801a510:	d450      	bmi.n	801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a512:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801a516:	454d      	cmp	r5, r9
 801a518:	dd4c      	ble.n	801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a51a:	9d01      	ldr	r5, [sp, #4]
 801a51c:	b23f      	sxth	r7, r7
 801a51e:	fb09 5707 	mla	r7, r9, r7, r5
 801a522:	f817 5008 	ldrb.w	r5, [r7, r8]
 801a526:	9f02      	ldr	r7, [sp, #8]
 801a528:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801a52c:	0e2f      	lsrs	r7, r5, #24
 801a52e:	2fff      	cmp	r7, #255	; 0xff
 801a530:	d045      	beq.n	801a5be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801a532:	fa5f f987 	uxtb.w	r9, r7
 801a536:	b3ef      	cbz	r7, 801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a538:	fa1f f889 	uxth.w	r8, r9
 801a53c:	ea6f 0909 	mvn.w	r9, r9
 801a540:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a544:	fa5f fb85 	uxtb.w	fp, r5
 801a548:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a54c:	fa5f f989 	uxtb.w	r9, r9
 801a550:	fb1b fb08 	smulbb	fp, fp, r8
 801a554:	fb0a ba09 	mla	sl, sl, r9, fp
 801a558:	fa1f fa8a 	uxth.w	sl, sl
 801a55c:	f10a 0b01 	add.w	fp, sl, #1
 801a560:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a564:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a568:	f804 a007 	strb.w	sl, [r4, r7]
 801a56c:	4427      	add	r7, r4
 801a56e:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a572:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a576:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a57a:	fb1b fb09 	smulbb	fp, fp, r9
 801a57e:	fb0a ba08 	mla	sl, sl, r8, fp
 801a582:	fa1f fa8a 	uxth.w	sl, sl
 801a586:	f10a 0b01 	add.w	fp, sl, #1
 801a58a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a58e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a592:	f887 a001 	strb.w	sl, [r7, #1]
 801a596:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a59a:	fb1a f909 	smulbb	r9, sl, r9
 801a59e:	fb05 9508 	mla	r5, r5, r8, r9
 801a5a2:	b2ad      	uxth	r5, r5
 801a5a4:	f105 0901 	add.w	r9, r5, #1
 801a5a8:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a5ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a5b0:	f887 9002 	strb.w	r9, [r7, #2]
 801a5b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a5b6:	4470      	add	r0, lr
 801a5b8:	3601      	adds	r6, #1
 801a5ba:	442a      	add	r2, r5
 801a5bc:	e760      	b.n	801a480 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a5be:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a5c2:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801a5c6:	55e5      	strb	r5, [r4, r7]
 801a5c8:	4427      	add	r7, r4
 801a5ca:	0c2d      	lsrs	r5, r5, #16
 801a5cc:	f887 8001 	strb.w	r8, [r7, #1]
 801a5d0:	70bd      	strb	r5, [r7, #2]
 801a5d2:	e7ef      	b.n	801a5b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a5d4:	0a37      	lsrs	r7, r6, #8
 801a5d6:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a5da:	0c36      	lsrs	r6, r6, #16
 801a5dc:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a5e0:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a5e4:	e744      	b.n	801a470 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a5e6:	b005      	add	sp, #20
 801a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a5f2:	9201      	str	r2, [sp, #4]
 801a5f4:	6870      	ldr	r0, [r6, #4]
 801a5f6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a5fa:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a5fe:	fa1f fe85 	uxth.w	lr, r5
 801a602:	43ed      	mvns	r5, r5
 801a604:	f8dc 8000 	ldr.w	r8, [ip]
 801a608:	b2ed      	uxtb	r5, r5
 801a60a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a60e:	fb00 2404 	mla	r4, r0, r4, r2
 801a612:	6832      	ldr	r2, [r6, #0]
 801a614:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a618:	4414      	add	r4, r2
 801a61a:	2900      	cmp	r1, #0
 801a61c:	dc03      	bgt.n	801a626 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a61e:	9a01      	ldr	r2, [sp, #4]
 801a620:	2a00      	cmp	r2, #0
 801a622:	f340 810d 	ble.w	801a840 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a628:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a62c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a632:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a636:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	dd0e      	ble.n	801a65c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a63e:	1406      	asrs	r6, r0, #16
 801a640:	d405      	bmi.n	801a64e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a642:	4556      	cmp	r6, sl
 801a644:	da03      	bge.n	801a64e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a646:	1416      	asrs	r6, r2, #16
 801a648:	d401      	bmi.n	801a64e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a64a:	454e      	cmp	r6, r9
 801a64c:	db07      	blt.n	801a65e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a64e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a650:	3b01      	subs	r3, #1
 801a652:	3403      	adds	r4, #3
 801a654:	4430      	add	r0, r6
 801a656:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a658:	4432      	add	r2, r6
 801a65a:	e7ee      	b.n	801a63a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801a65c:	d060      	beq.n	801a720 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801a65e:	1e5e      	subs	r6, r3, #1
 801a660:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a662:	fb07 0706 	mla	r7, r7, r6, r0
 801a666:	143f      	asrs	r7, r7, #16
 801a668:	d451      	bmi.n	801a70e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a66a:	4557      	cmp	r7, sl
 801a66c:	da4f      	bge.n	801a70e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a66e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a670:	fb07 2606 	mla	r6, r7, r6, r2
 801a674:	1436      	asrs	r6, r6, #16
 801a676:	d44a      	bmi.n	801a70e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a678:	454e      	cmp	r6, r9
 801a67a:	da48      	bge.n	801a70e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a67c:	1ce6      	adds	r6, r4, #3
 801a67e:	4699      	mov	r9, r3
 801a680:	f1b9 0f00 	cmp.w	r9, #0
 801a684:	f106 0603 	add.w	r6, r6, #3
 801a688:	dd45      	ble.n	801a716 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801a68a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a68e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a692:	1417      	asrs	r7, r2, #16
 801a694:	f109 39ff 	add.w	r9, r9, #4294967295
 801a698:	fb0b a707 	mla	r7, fp, r7, sl
 801a69c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a6a0:	fb1b fb05 	smulbb	fp, fp, r5
 801a6a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a6a8:	eb08 0a07 	add.w	sl, r8, r7
 801a6ac:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a6b0:	fb07 b70e 	mla	r7, r7, lr, fp
 801a6b4:	b2bf      	uxth	r7, r7
 801a6b6:	f107 0b01 	add.w	fp, r7, #1
 801a6ba:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a6be:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a6c2:	fb1b fb05 	smulbb	fp, fp, r5
 801a6c6:	123f      	asrs	r7, r7, #8
 801a6c8:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a6cc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a6d0:	fb07 b70e 	mla	r7, r7, lr, fp
 801a6d4:	b2bf      	uxth	r7, r7
 801a6d6:	f107 0b01 	add.w	fp, r7, #1
 801a6da:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a6de:	123f      	asrs	r7, r7, #8
 801a6e0:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a6e4:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a6e8:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a6ec:	fb1a fa05 	smulbb	sl, sl, r5
 801a6f0:	fb07 a70e 	mla	r7, r7, lr, sl
 801a6f4:	b2bf      	uxth	r7, r7
 801a6f6:	f107 0a01 	add.w	sl, r7, #1
 801a6fa:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a6fe:	123f      	asrs	r7, r7, #8
 801a700:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a704:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a706:	4438      	add	r0, r7
 801a708:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a70a:	443a      	add	r2, r7
 801a70c:	e7b8      	b.n	801a680 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a70e:	2700      	movs	r7, #0
 801a710:	1bde      	subs	r6, r3, r7
 801a712:	2e00      	cmp	r6, #0
 801a714:	dc3f      	bgt.n	801a796 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801a716:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a71a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a71e:	441c      	add	r4, r3
 801a720:	2900      	cmp	r1, #0
 801a722:	f340 808d 	ble.w	801a840 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a72a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a72c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a730:	3901      	subs	r1, #1
 801a732:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a736:	eef0 6a62 	vmov.f32	s13, s5
 801a73a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a73e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a742:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a746:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801a74a:	eef0 6a43 	vmov.f32	s13, s6
 801a74e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a752:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801a756:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a75a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a75e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a762:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a766:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a76a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a76e:	ee12 2a90 	vmov	r2, s5
 801a772:	eef0 2a47 	vmov.f32	s5, s14
 801a776:	fb92 f3f3 	sdiv	r3, r2, r3
 801a77a:	ee13 2a10 	vmov	r2, s6
 801a77e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a782:	eeb0 3a67 	vmov.f32	s6, s15
 801a786:	fb92 f3f3 	sdiv	r3, r2, r3
 801a78a:	9a01      	ldr	r2, [sp, #4]
 801a78c:	9310      	str	r3, [sp, #64]	; 0x40
 801a78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a790:	bf08      	it	eq
 801a792:	4613      	moveq	r3, r2
 801a794:	e741      	b.n	801a61a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a796:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a79a:	d44b      	bmi.n	801a834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a79c:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a7a0:	45cb      	cmp	fp, r9
 801a7a2:	dd47      	ble.n	801a834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a7a4:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a7a8:	d444      	bmi.n	801a834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a7aa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a7ae:	4556      	cmp	r6, sl
 801a7b0:	dd40      	ble.n	801a834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a7b2:	fa0f f68b 	sxth.w	r6, fp
 801a7b6:	fb0a 9906 	mla	r9, sl, r6, r9
 801a7ba:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a7be:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a7c2:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a7c6:	fb1b fb05 	smulbb	fp, fp, r5
 801a7ca:	eb08 0a09 	add.w	sl, r8, r9
 801a7ce:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a7d2:	fb09 b90e 	mla	r9, r9, lr, fp
 801a7d6:	fa1f f989 	uxth.w	r9, r9
 801a7da:	f109 0b01 	add.w	fp, r9, #1
 801a7de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a7e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7e6:	f804 9006 	strb.w	r9, [r4, r6]
 801a7ea:	4426      	add	r6, r4
 801a7ec:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a7f0:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a7f4:	fb1b fb05 	smulbb	fp, fp, r5
 801a7f8:	fb09 b90e 	mla	r9, r9, lr, fp
 801a7fc:	fa1f f989 	uxth.w	r9, r9
 801a800:	f109 0b01 	add.w	fp, r9, #1
 801a804:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a808:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a80c:	f886 9001 	strb.w	r9, [r6, #1]
 801a810:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a814:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a818:	fb1a fa05 	smulbb	sl, sl, r5
 801a81c:	fb09 a90e 	mla	r9, r9, lr, sl
 801a820:	fa1f f989 	uxth.w	r9, r9
 801a824:	f109 0a01 	add.w	sl, r9, #1
 801a828:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a82c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a830:	f886 9002 	strb.w	r9, [r6, #2]
 801a834:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a836:	3701      	adds	r7, #1
 801a838:	4430      	add	r0, r6
 801a83a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a83c:	4432      	add	r2, r6
 801a83e:	e767      	b.n	801a710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a840:	b003      	add	sp, #12
 801a842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a846 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a846:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a84a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a84c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a850:	9201      	str	r2, [sp, #4]
 801a852:	6868      	ldr	r0, [r5, #4]
 801a854:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a856:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a85a:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801a85e:	fb00 2404 	mla	r4, r0, r4, r2
 801a862:	682a      	ldr	r2, [r5, #0]
 801a864:	f8d7 8000 	ldr.w	r8, [r7]
 801a868:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a86c:	4414      	add	r4, r2
 801a86e:	2900      	cmp	r1, #0
 801a870:	dc03      	bgt.n	801a87a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a872:	9a01      	ldr	r2, [sp, #4]
 801a874:	2a00      	cmp	r2, #0
 801a876:	f340 80af 	ble.w	801a9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a87a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a87c:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801a880:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a884:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a886:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801a88a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a88e:	2b00      	cmp	r3, #0
 801a890:	dd0c      	ble.n	801a8ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a892:	1405      	asrs	r5, r0, #16
 801a894:	d405      	bmi.n	801a8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a896:	4555      	cmp	r5, sl
 801a898:	da03      	bge.n	801a8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a89a:	1415      	asrs	r5, r2, #16
 801a89c:	d401      	bmi.n	801a8a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a89e:	454d      	cmp	r5, r9
 801a8a0:	db05      	blt.n	801a8ae <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a8a2:	4470      	add	r0, lr
 801a8a4:	4462      	add	r2, ip
 801a8a6:	3b01      	subs	r3, #1
 801a8a8:	3403      	adds	r4, #3
 801a8aa:	e7f0      	b.n	801a88e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a8ac:	d038      	beq.n	801a920 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a8ae:	1e5d      	subs	r5, r3, #1
 801a8b0:	fb0e 0605 	mla	r6, lr, r5, r0
 801a8b4:	1436      	asrs	r6, r6, #16
 801a8b6:	d42a      	bmi.n	801a90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a8b8:	4556      	cmp	r6, sl
 801a8ba:	da28      	bge.n	801a90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a8bc:	fb0c 2505 	mla	r5, ip, r5, r2
 801a8c0:	142d      	asrs	r5, r5, #16
 801a8c2:	d424      	bmi.n	801a90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a8c4:	454d      	cmp	r5, r9
 801a8c6:	da22      	bge.n	801a90e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a8c8:	1ce6      	adds	r6, r4, #3
 801a8ca:	4699      	mov	r9, r3
 801a8cc:	f1b9 0f00 	cmp.w	r9, #0
 801a8d0:	f106 0603 	add.w	r6, r6, #3
 801a8d4:	dd1f      	ble.n	801a916 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801a8d6:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801a8da:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a8de:	1415      	asrs	r5, r2, #16
 801a8e0:	4470      	add	r0, lr
 801a8e2:	4462      	add	r2, ip
 801a8e4:	f109 39ff 	add.w	r9, r9, #4294967295
 801a8e8:	fb0b a505 	mla	r5, fp, r5, sl
 801a8ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a8f0:	eb08 0a05 	add.w	sl, r8, r5
 801a8f4:	f818 5005 	ldrb.w	r5, [r8, r5]
 801a8f8:	f806 5c06 	strb.w	r5, [r6, #-6]
 801a8fc:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a900:	f806 5c05 	strb.w	r5, [r6, #-5]
 801a904:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801a908:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a90c:	e7de      	b.n	801a8cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a90e:	2600      	movs	r6, #0
 801a910:	1b9d      	subs	r5, r3, r6
 801a912:	2d00      	cmp	r5, #0
 801a914:	dc38      	bgt.n	801a988 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a916:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a91a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a91e:	441c      	add	r4, r3
 801a920:	2900      	cmp	r1, #0
 801a922:	dd59      	ble.n	801a9d8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a924:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a92a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a92e:	3901      	subs	r1, #1
 801a930:	eeb0 6a62 	vmov.f32	s12, s5
 801a934:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a938:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a93c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a940:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a944:	eeb0 6a43 	vmov.f32	s12, s6
 801a948:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a94c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a950:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a954:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a958:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a95c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a960:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a964:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a968:	ee12 2a90 	vmov	r2, s5
 801a96c:	eef0 2a47 	vmov.f32	s5, s14
 801a970:	fb92 fef3 	sdiv	lr, r2, r3
 801a974:	ee13 2a10 	vmov	r2, s6
 801a978:	eeb0 3a67 	vmov.f32	s6, s15
 801a97c:	fb92 fcf3 	sdiv	ip, r2, r3
 801a980:	9a01      	ldr	r2, [sp, #4]
 801a982:	bf08      	it	eq
 801a984:	4613      	moveq	r3, r2
 801a986:	e772      	b.n	801a86e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a988:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a98c:	d420      	bmi.n	801a9d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a98e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a992:	45cb      	cmp	fp, r9
 801a994:	dd1c      	ble.n	801a9d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a996:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a99a:	d419      	bmi.n	801a9d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a99c:	68fd      	ldr	r5, [r7, #12]
 801a99e:	4555      	cmp	r5, sl
 801a9a0:	dd16      	ble.n	801a9d0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a9a2:	fa0f f58b 	sxth.w	r5, fp
 801a9a6:	fb0a 9505 	mla	r5, sl, r5, r9
 801a9aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a9ae:	f818 9005 	ldrb.w	r9, [r8, r5]
 801a9b2:	eb08 0b05 	add.w	fp, r8, r5
 801a9b6:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801a9ba:	f804 9005 	strb.w	r9, [r4, r5]
 801a9be:	4425      	add	r5, r4
 801a9c0:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a9c4:	f885 9001 	strb.w	r9, [r5, #1]
 801a9c8:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a9cc:	f885 9002 	strb.w	r9, [r5, #2]
 801a9d0:	4470      	add	r0, lr
 801a9d2:	4462      	add	r2, ip
 801a9d4:	3601      	adds	r6, #1
 801a9d6:	e79b      	b.n	801a910 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801a9d8:	b003      	add	sp, #12
 801a9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e2:	b085      	sub	sp, #20
 801a9e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9ea:	9202      	str	r2, [sp, #8]
 801a9ec:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a9f0:	6860      	ldr	r0, [r4, #4]
 801a9f2:	9203      	str	r2, [sp, #12]
 801a9f4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a9f8:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a9fc:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801aa00:	fb00 2505 	mla	r5, r0, r5, r2
 801aa04:	6822      	ldr	r2, [r4, #0]
 801aa06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aa0a:	4415      	add	r5, r2
 801aa0c:	f8dc 2000 	ldr.w	r2, [ip]
 801aa10:	9201      	str	r2, [sp, #4]
 801aa12:	2900      	cmp	r1, #0
 801aa14:	dc03      	bgt.n	801aa1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801aa16:	9a02      	ldr	r2, [sp, #8]
 801aa18:	2a00      	cmp	r2, #0
 801aa1a:	f340 8122 	ble.w	801ac62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801aa1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa20:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aa24:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aa28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa2a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801aa2e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	dd0d      	ble.n	801aa52 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801aa36:	1422      	asrs	r2, r4, #16
 801aa38:	d405      	bmi.n	801aa46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801aa3a:	4542      	cmp	r2, r8
 801aa3c:	da03      	bge.n	801aa46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801aa3e:	1402      	asrs	r2, r0, #16
 801aa40:	d401      	bmi.n	801aa46 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801aa42:	42ba      	cmp	r2, r7
 801aa44:	db06      	blt.n	801aa54 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801aa46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa48:	4474      	add	r4, lr
 801aa4a:	3b01      	subs	r3, #1
 801aa4c:	3503      	adds	r5, #3
 801aa4e:	4410      	add	r0, r2
 801aa50:	e7ef      	b.n	801aa32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801aa52:	d072      	beq.n	801ab3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801aa54:	1e5a      	subs	r2, r3, #1
 801aa56:	fb0e 4602 	mla	r6, lr, r2, r4
 801aa5a:	1436      	asrs	r6, r6, #16
 801aa5c:	d462      	bmi.n	801ab24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa5e:	4546      	cmp	r6, r8
 801aa60:	da60      	bge.n	801ab24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa62:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801aa64:	fb06 0202 	mla	r2, r6, r2, r0
 801aa68:	1412      	asrs	r2, r2, #16
 801aa6a:	d45b      	bmi.n	801ab24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa6c:	42ba      	cmp	r2, r7
 801aa6e:	da59      	bge.n	801ab24 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801aa70:	1cef      	adds	r7, r5, #3
 801aa72:	4699      	mov	r9, r3
 801aa74:	f1b9 0f00 	cmp.w	r9, #0
 801aa78:	dd5a      	ble.n	801ab30 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801aa7a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aa7e:	1426      	asrs	r6, r4, #16
 801aa80:	1402      	asrs	r2, r0, #16
 801aa82:	fb08 6202 	mla	r2, r8, r2, r6
 801aa86:	9e01      	ldr	r6, [sp, #4]
 801aa88:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801aa8c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801aa90:	d041      	beq.n	801ab16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aa92:	9a03      	ldr	r2, [sp, #12]
 801aa94:	fa5f fb86 	uxtb.w	fp, r6
 801aa98:	fb02 f808 	mul.w	r8, r2, r8
 801aa9c:	f108 0201 	add.w	r2, r8, #1
 801aaa0:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801aaa4:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801aaa8:	1212      	asrs	r2, r2, #8
 801aaaa:	fa1f fa82 	uxth.w	sl, r2
 801aaae:	43d2      	mvns	r2, r2
 801aab0:	fb1b fb0a 	smulbb	fp, fp, sl
 801aab4:	b2d2      	uxtb	r2, r2
 801aab6:	fb08 b802 	mla	r8, r8, r2, fp
 801aaba:	fa1f f888 	uxth.w	r8, r8
 801aabe:	f108 0b01 	add.w	fp, r8, #1
 801aac2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aac6:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801aaca:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801aace:	fb1b fb0a 	smulbb	fp, fp, sl
 801aad2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aad6:	fb16 fa0a 	smulbb	sl, r6, sl
 801aada:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801aade:	f807 8c03 	strb.w	r8, [r7, #-3]
 801aae2:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801aae6:	fb06 aa02 	mla	sl, r6, r2, sl
 801aaea:	fb08 b802 	mla	r8, r8, r2, fp
 801aaee:	fa1f fa8a 	uxth.w	sl, sl
 801aaf2:	fa1f f888 	uxth.w	r8, r8
 801aaf6:	f10a 0601 	add.w	r6, sl, #1
 801aafa:	f108 0b01 	add.w	fp, r8, #1
 801aafe:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801ab02:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801ab06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ab0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ab0e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801ab12:	f807 8c02 	strb.w	r8, [r7, #-2]
 801ab16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab18:	4474      	add	r4, lr
 801ab1a:	3703      	adds	r7, #3
 801ab1c:	f109 39ff 	add.w	r9, r9, #4294967295
 801ab20:	4410      	add	r0, r2
 801ab22:	e7a7      	b.n	801aa74 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ab24:	f04f 0800 	mov.w	r8, #0
 801ab28:	eba3 0208 	sub.w	r2, r3, r8
 801ab2c:	2a00      	cmp	r2, #0
 801ab2e:	dc3b      	bgt.n	801aba8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ab30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab38:	441d      	add	r5, r3
 801ab3a:	2900      	cmp	r1, #0
 801ab3c:	f340 8091 	ble.w	801ac62 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801ab40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab4a:	3901      	subs	r1, #1
 801ab4c:	eeb0 6a62 	vmov.f32	s12, s5
 801ab50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab54:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab5c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ab60:	eeb0 6a43 	vmov.f32	s12, s6
 801ab64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab68:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ab6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab70:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab74:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab84:	ee12 2a90 	vmov	r2, s5
 801ab88:	eef0 2a47 	vmov.f32	s5, s14
 801ab8c:	fb92 fef3 	sdiv	lr, r2, r3
 801ab90:	ee13 2a10 	vmov	r2, s6
 801ab94:	eeb0 3a67 	vmov.f32	s6, s15
 801ab98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab9c:	9a02      	ldr	r2, [sp, #8]
 801ab9e:	9312      	str	r3, [sp, #72]	; 0x48
 801aba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aba2:	bf08      	it	eq
 801aba4:	4613      	moveq	r3, r2
 801aba6:	e734      	b.n	801aa12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801aba8:	1427      	asrs	r7, r4, #16
 801abaa:	d454      	bmi.n	801ac56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801abac:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801abb0:	42be      	cmp	r6, r7
 801abb2:	dd50      	ble.n	801ac56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801abb4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801abb8:	d44d      	bmi.n	801ac56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801abba:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801abbe:	454a      	cmp	r2, r9
 801abc0:	dd49      	ble.n	801ac56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801abc2:	b236      	sxth	r6, r6
 801abc4:	9a01      	ldr	r2, [sp, #4]
 801abc6:	fb09 7606 	mla	r6, r9, r6, r7
 801abca:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801abce:	0e3a      	lsrs	r2, r7, #24
 801abd0:	d041      	beq.n	801ac56 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801abd2:	9e03      	ldr	r6, [sp, #12]
 801abd4:	fa5f fb87 	uxtb.w	fp, r7
 801abd8:	4372      	muls	r2, r6
 801abda:	1c56      	adds	r6, r2, #1
 801abdc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801abe0:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801abe4:	1212      	asrs	r2, r2, #8
 801abe6:	f815 9006 	ldrb.w	r9, [r5, r6]
 801abea:	fa1f fa82 	uxth.w	sl, r2
 801abee:	43d2      	mvns	r2, r2
 801abf0:	fb1b fb0a 	smulbb	fp, fp, sl
 801abf4:	b2d2      	uxtb	r2, r2
 801abf6:	fb09 b902 	mla	r9, r9, r2, fp
 801abfa:	fa1f f989 	uxth.w	r9, r9
 801abfe:	f109 0b01 	add.w	fp, r9, #1
 801ac02:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac06:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801ac0a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801ac0e:	fb1b fb0a 	smulbb	fp, fp, sl
 801ac12:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac16:	fb17 fa0a 	smulbb	sl, r7, sl
 801ac1a:	f805 9006 	strb.w	r9, [r5, r6]
 801ac1e:	442e      	add	r6, r5
 801ac20:	78b7      	ldrb	r7, [r6, #2]
 801ac22:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ac26:	fb07 aa02 	mla	sl, r7, r2, sl
 801ac2a:	fb09 b902 	mla	r9, r9, r2, fp
 801ac2e:	fa1f fa8a 	uxth.w	sl, sl
 801ac32:	fa1f f989 	uxth.w	r9, r9
 801ac36:	f10a 0701 	add.w	r7, sl, #1
 801ac3a:	f109 0b01 	add.w	fp, r9, #1
 801ac3e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ac42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac46:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ac4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac4e:	f886 a002 	strb.w	sl, [r6, #2]
 801ac52:	f886 9001 	strb.w	r9, [r6, #1]
 801ac56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac58:	4474      	add	r4, lr
 801ac5a:	f108 0801 	add.w	r8, r8, #1
 801ac5e:	4410      	add	r0, r2
 801ac60:	e762      	b.n	801ab28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ac62:	b005      	add	sp, #20
 801ac64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ac6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac72:	9201      	str	r2, [sp, #4]
 801ac74:	6860      	ldr	r0, [r4, #4]
 801ac76:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801ac7a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801ac7e:	fb00 2505 	mla	r5, r0, r5, r2
 801ac82:	6822      	ldr	r2, [r4, #0]
 801ac84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac88:	4415      	add	r5, r2
 801ac8a:	f8dc 2000 	ldr.w	r2, [ip]
 801ac8e:	9200      	str	r2, [sp, #0]
 801ac90:	2900      	cmp	r1, #0
 801ac92:	dc03      	bgt.n	801ac9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ac94:	9a01      	ldr	r2, [sp, #4]
 801ac96:	2a00      	cmp	r2, #0
 801ac98:	f340 812b 	ble.w	801aef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ac9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ac9e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801aca2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aca8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801acac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	dd0e      	ble.n	801acd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801acb4:	1422      	asrs	r2, r4, #16
 801acb6:	d405      	bmi.n	801acc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801acb8:	4572      	cmp	r2, lr
 801acba:	da03      	bge.n	801acc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801acbc:	1402      	asrs	r2, r0, #16
 801acbe:	d401      	bmi.n	801acc4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801acc0:	42ba      	cmp	r2, r7
 801acc2:	db07      	blt.n	801acd4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801acc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acc6:	3b01      	subs	r3, #1
 801acc8:	3503      	adds	r5, #3
 801acca:	4414      	add	r4, r2
 801accc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801acce:	4410      	add	r0, r2
 801acd0:	e7ee      	b.n	801acb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801acd2:	d06f      	beq.n	801adb4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801acd4:	1e5a      	subs	r2, r3, #1
 801acd6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801acd8:	fb06 4602 	mla	r6, r6, r2, r4
 801acdc:	1436      	asrs	r6, r6, #16
 801acde:	d45e      	bmi.n	801ad9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ace0:	4576      	cmp	r6, lr
 801ace2:	da5c      	bge.n	801ad9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ace4:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ace6:	fb06 0202 	mla	r2, r6, r2, r0
 801acea:	1412      	asrs	r2, r2, #16
 801acec:	d457      	bmi.n	801ad9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801acee:	42ba      	cmp	r2, r7
 801acf0:	da55      	bge.n	801ad9e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801acf2:	1cee      	adds	r6, r5, #3
 801acf4:	469a      	mov	sl, r3
 801acf6:	f1ba 0f00 	cmp.w	sl, #0
 801acfa:	dd56      	ble.n	801adaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801acfc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ad00:	1427      	asrs	r7, r4, #16
 801ad02:	1402      	asrs	r2, r0, #16
 801ad04:	fb0e 7202 	mla	r2, lr, r2, r7
 801ad08:	9f00      	ldr	r7, [sp, #0]
 801ad0a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801ad0e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801ad12:	d03c      	beq.n	801ad8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ad14:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ad18:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ad1c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ad20:	fa5f f28e 	uxtb.w	r2, lr
 801ad24:	b2ff      	uxtb	r7, r7
 801ad26:	f000 80dd 	beq.w	801aee4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ad2a:	fa1f f882 	uxth.w	r8, r2
 801ad2e:	43d2      	mvns	r2, r2
 801ad30:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801ad34:	fb17 f708 	smulbb	r7, r7, r8
 801ad38:	b2d2      	uxtb	r2, r2
 801ad3a:	fb19 f908 	smulbb	r9, r9, r8
 801ad3e:	fb0e 7702 	mla	r7, lr, r2, r7
 801ad42:	fb1b f808 	smulbb	r8, fp, r8
 801ad46:	b2bf      	uxth	r7, r7
 801ad48:	f107 0e01 	add.w	lr, r7, #1
 801ad4c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ad50:	123f      	asrs	r7, r7, #8
 801ad52:	f806 7c03 	strb.w	r7, [r6, #-3]
 801ad56:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801ad5a:	fb07 9902 	mla	r9, r7, r2, r9
 801ad5e:	fa1f f989 	uxth.w	r9, r9
 801ad62:	f109 0701 	add.w	r7, r9, #1
 801ad66:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ad6a:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801ad6e:	fb07 8802 	mla	r8, r7, r2, r8
 801ad72:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad76:	fa1f f888 	uxth.w	r8, r8
 801ad7a:	f806 9c02 	strb.w	r9, [r6, #-2]
 801ad7e:	f108 0201 	add.w	r2, r8, #1
 801ad82:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801ad86:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad8a:	f806 8c01 	strb.w	r8, [r6, #-1]
 801ad8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad90:	3603      	adds	r6, #3
 801ad92:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad96:	4414      	add	r4, r2
 801ad98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad9a:	4410      	add	r0, r2
 801ad9c:	e7ab      	b.n	801acf6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ad9e:	f04f 0e00 	mov.w	lr, #0
 801ada2:	eba3 020e 	sub.w	r2, r3, lr
 801ada6:	2a00      	cmp	r2, #0
 801ada8:	dc3d      	bgt.n	801ae26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801adaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801adae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adb2:	441d      	add	r5, r3
 801adb4:	2900      	cmp	r1, #0
 801adb6:	f340 809c 	ble.w	801aef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801adba:	ee30 0a04 	vadd.f32	s0, s0, s8
 801adbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801adc0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801adc4:	3901      	subs	r1, #1
 801adc6:	eeb0 6a62 	vmov.f32	s12, s5
 801adca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801adce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801add2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801add6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801adda:	eeb0 6a43 	vmov.f32	s12, s6
 801adde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ade2:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801ade6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801adea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adf2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801adf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adfa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801adfe:	ee12 2a90 	vmov	r2, s5
 801ae02:	eef0 2a47 	vmov.f32	s5, s14
 801ae06:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae0a:	ee13 2a10 	vmov	r2, s6
 801ae0e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae12:	eeb0 3a67 	vmov.f32	s6, s15
 801ae16:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae1a:	9a01      	ldr	r2, [sp, #4]
 801ae1c:	9310      	str	r3, [sp, #64]	; 0x40
 801ae1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae20:	bf08      	it	eq
 801ae22:	4613      	moveq	r3, r2
 801ae24:	e734      	b.n	801ac90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801ae26:	1427      	asrs	r7, r4, #16
 801ae28:	d44d      	bmi.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae2a:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801ae2e:	42be      	cmp	r6, r7
 801ae30:	dd49      	ble.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae32:	ea5f 4820 	movs.w	r8, r0, asr #16
 801ae36:	d446      	bmi.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae38:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ae3c:	4542      	cmp	r2, r8
 801ae3e:	dd42      	ble.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae40:	b236      	sxth	r6, r6
 801ae42:	9a00      	ldr	r2, [sp, #0]
 801ae44:	fb08 7606 	mla	r6, r8, r6, r7
 801ae48:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801ae4c:	0e3a      	lsrs	r2, r7, #24
 801ae4e:	d03a      	beq.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801ae50:	2aff      	cmp	r2, #255	; 0xff
 801ae52:	b2d6      	uxtb	r6, r2
 801ae54:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ae58:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801ae5c:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801ae60:	b2ff      	uxtb	r7, r7
 801ae62:	d037      	beq.n	801aed4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801ae64:	fa1f f986 	uxth.w	r9, r6
 801ae68:	4472      	add	r2, lr
 801ae6a:	43f6      	mvns	r6, r6
 801ae6c:	f815 8002 	ldrb.w	r8, [r5, r2]
 801ae70:	fb17 f709 	smulbb	r7, r7, r9
 801ae74:	fb1a fa09 	smulbb	sl, sl, r9
 801ae78:	b2f6      	uxtb	r6, r6
 801ae7a:	fb1b f909 	smulbb	r9, fp, r9
 801ae7e:	fb08 7706 	mla	r7, r8, r6, r7
 801ae82:	b2bf      	uxth	r7, r7
 801ae84:	f107 0801 	add.w	r8, r7, #1
 801ae88:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801ae8c:	123f      	asrs	r7, r7, #8
 801ae8e:	54af      	strb	r7, [r5, r2]
 801ae90:	442a      	add	r2, r5
 801ae92:	7857      	ldrb	r7, [r2, #1]
 801ae94:	fb07 aa06 	mla	sl, r7, r6, sl
 801ae98:	fa1f fa8a 	uxth.w	sl, sl
 801ae9c:	f10a 0701 	add.w	r7, sl, #1
 801aea0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aea4:	7897      	ldrb	r7, [r2, #2]
 801aea6:	fb07 9906 	mla	r9, r7, r6, r9
 801aeaa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aeae:	fa1f f989 	uxth.w	r9, r9
 801aeb2:	f882 a001 	strb.w	sl, [r2, #1]
 801aeb6:	f109 0601 	add.w	r6, r9, #1
 801aeba:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801aebe:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aec2:	f882 9002 	strb.w	r9, [r2, #2]
 801aec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aec8:	f10e 0e01 	add.w	lr, lr, #1
 801aecc:	4414      	add	r4, r2
 801aece:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aed0:	4410      	add	r0, r2
 801aed2:	e766      	b.n	801ada2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801aed4:	4472      	add	r2, lr
 801aed6:	54af      	strb	r7, [r5, r2]
 801aed8:	442a      	add	r2, r5
 801aeda:	f882 a001 	strb.w	sl, [r2, #1]
 801aede:	f882 b002 	strb.w	fp, [r2, #2]
 801aee2:	e7f0      	b.n	801aec6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801aee4:	f806 7c03 	strb.w	r7, [r6, #-3]
 801aee8:	f806 9c02 	strb.w	r9, [r6, #-2]
 801aeec:	f806 bc01 	strb.w	fp, [r6, #-1]
 801aef0:	e74d      	b.n	801ad8e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aef2:	b003      	add	sp, #12
 801aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aef8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aefc:	b087      	sub	sp, #28
 801aefe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801af02:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801af04:	9204      	str	r2, [sp, #16]
 801af06:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801af0a:	6860      	ldr	r0, [r4, #4]
 801af0c:	9205      	str	r2, [sp, #20]
 801af0e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801af12:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801af16:	9101      	str	r1, [sp, #4]
 801af18:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801af1c:	fb00 2505 	mla	r5, r0, r5, r2
 801af20:	6822      	ldr	r2, [r4, #0]
 801af22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801af26:	4415      	add	r5, r2
 801af28:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801af2c:	3201      	adds	r2, #1
 801af2e:	f022 0201 	bic.w	r2, r2, #1
 801af32:	9202      	str	r2, [sp, #8]
 801af34:	f8dc 2000 	ldr.w	r2, [ip]
 801af38:	9203      	str	r2, [sp, #12]
 801af3a:	9a01      	ldr	r2, [sp, #4]
 801af3c:	2a00      	cmp	r2, #0
 801af3e:	dc03      	bgt.n	801af48 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801af40:	9a04      	ldr	r2, [sp, #16]
 801af42:	2a00      	cmp	r2, #0
 801af44:	f340 8135 	ble.w	801b1b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801af48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af4a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801af4e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801af52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af54:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801af58:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	dd0d      	ble.n	801af7c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801af60:	1422      	asrs	r2, r4, #16
 801af62:	d405      	bmi.n	801af70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af64:	4542      	cmp	r2, r8
 801af66:	da03      	bge.n	801af70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af68:	1402      	asrs	r2, r0, #16
 801af6a:	d401      	bmi.n	801af70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801af6c:	42ba      	cmp	r2, r7
 801af6e:	db06      	blt.n	801af7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801af70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af72:	4474      	add	r4, lr
 801af74:	3b01      	subs	r3, #1
 801af76:	3503      	adds	r5, #3
 801af78:	4410      	add	r0, r2
 801af7a:	e7ef      	b.n	801af5c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801af7c:	d077      	beq.n	801b06e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801af7e:	1e5a      	subs	r2, r3, #1
 801af80:	fb0e 4602 	mla	r6, lr, r2, r4
 801af84:	1436      	asrs	r6, r6, #16
 801af86:	d469      	bmi.n	801b05c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af88:	4546      	cmp	r6, r8
 801af8a:	da67      	bge.n	801b05c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af8c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801af8e:	fb06 0202 	mla	r2, r6, r2, r0
 801af92:	1412      	asrs	r2, r2, #16
 801af94:	d462      	bmi.n	801b05c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af96:	42ba      	cmp	r2, r7
 801af98:	da60      	bge.n	801b05c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801af9a:	1cee      	adds	r6, r5, #3
 801af9c:	4699      	mov	r9, r3
 801af9e:	f1b9 0f00 	cmp.w	r9, #0
 801afa2:	dd5f      	ble.n	801b064 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801afa4:	1422      	asrs	r2, r4, #16
 801afa6:	9902      	ldr	r1, [sp, #8]
 801afa8:	1407      	asrs	r7, r0, #16
 801afaa:	fb01 2707 	mla	r7, r1, r7, r2
 801afae:	9903      	ldr	r1, [sp, #12]
 801afb0:	087a      	lsrs	r2, r7, #1
 801afb2:	5c8a      	ldrb	r2, [r1, r2]
 801afb4:	07f9      	lsls	r1, r7, #31
 801afb6:	bf54      	ite	pl
 801afb8:	f002 020f 	andpl.w	r2, r2, #15
 801afbc:	1112      	asrmi	r2, r2, #4
 801afbe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801afc2:	b2d2      	uxtb	r2, r2
 801afc4:	2a00      	cmp	r2, #0
 801afc6:	d042      	beq.n	801b04e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801afc8:	497b      	ldr	r1, [pc, #492]	; (801b1b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801afca:	680f      	ldr	r7, [r1, #0]
 801afcc:	9905      	ldr	r1, [sp, #20]
 801afce:	fa5f fb87 	uxtb.w	fp, r7
 801afd2:	434a      	muls	r2, r1
 801afd4:	f102 0801 	add.w	r8, r2, #1
 801afd8:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801afdc:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801afe0:	1212      	asrs	r2, r2, #8
 801afe2:	fa1f fa82 	uxth.w	sl, r2
 801afe6:	43d2      	mvns	r2, r2
 801afe8:	fb1b fb0a 	smulbb	fp, fp, sl
 801afec:	b2d2      	uxtb	r2, r2
 801afee:	fb08 b802 	mla	r8, r8, r2, fp
 801aff2:	fa1f f888 	uxth.w	r8, r8
 801aff6:	f108 0b01 	add.w	fp, r8, #1
 801affa:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801affe:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b002:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b006:	fb1b fb0a 	smulbb	fp, fp, sl
 801b00a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b00e:	fb17 fa0a 	smulbb	sl, r7, sl
 801b012:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801b016:	f806 8c03 	strb.w	r8, [r6, #-3]
 801b01a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801b01e:	fb07 aa02 	mla	sl, r7, r2, sl
 801b022:	fb08 b802 	mla	r8, r8, r2, fp
 801b026:	fa1f fa8a 	uxth.w	sl, sl
 801b02a:	fa1f f888 	uxth.w	r8, r8
 801b02e:	f10a 0701 	add.w	r7, sl, #1
 801b032:	f108 0b01 	add.w	fp, r8, #1
 801b036:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b03a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b03e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b042:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b046:	f806 ac01 	strb.w	sl, [r6, #-1]
 801b04a:	f806 8c02 	strb.w	r8, [r6, #-2]
 801b04e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b050:	4474      	add	r4, lr
 801b052:	3603      	adds	r6, #3
 801b054:	f109 39ff 	add.w	r9, r9, #4294967295
 801b058:	4410      	add	r0, r2
 801b05a:	e7a0      	b.n	801af9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b05c:	2700      	movs	r7, #0
 801b05e:	1bda      	subs	r2, r3, r7
 801b060:	2a00      	cmp	r2, #0
 801b062:	dc3e      	bgt.n	801b0e2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b064:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b06c:	441d      	add	r5, r3
 801b06e:	9b01      	ldr	r3, [sp, #4]
 801b070:	2b00      	cmp	r3, #0
 801b072:	f340 809e 	ble.w	801b1b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801b076:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b07a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b07c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b080:	eeb0 6a62 	vmov.f32	s12, s5
 801b084:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b088:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b08c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b090:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801b094:	eeb0 6a43 	vmov.f32	s12, s6
 801b098:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b09c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801b0a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0b8:	ee12 2a90 	vmov	r2, s5
 801b0bc:	eef0 2a47 	vmov.f32	s5, s14
 801b0c0:	fb92 fef3 	sdiv	lr, r2, r3
 801b0c4:	ee13 2a10 	vmov	r2, s6
 801b0c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b0cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0d0:	9314      	str	r3, [sp, #80]	; 0x50
 801b0d2:	9b01      	ldr	r3, [sp, #4]
 801b0d4:	9a04      	ldr	r2, [sp, #16]
 801b0d6:	3b01      	subs	r3, #1
 801b0d8:	9301      	str	r3, [sp, #4]
 801b0da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b0dc:	bf08      	it	eq
 801b0de:	4613      	moveq	r3, r2
 801b0e0:	e72b      	b.n	801af3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b0e2:	1426      	asrs	r6, r4, #16
 801b0e4:	d460      	bmi.n	801b1a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0e6:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b0ea:	42b2      	cmp	r2, r6
 801b0ec:	dd5c      	ble.n	801b1a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0ee:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b0f2:	d459      	bmi.n	801b1a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b0f8:	4542      	cmp	r2, r8
 801b0fa:	dd55      	ble.n	801b1a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b0fc:	9a02      	ldr	r2, [sp, #8]
 801b0fe:	9903      	ldr	r1, [sp, #12]
 801b100:	fb08 6602 	mla	r6, r8, r2, r6
 801b104:	0872      	lsrs	r2, r6, #1
 801b106:	07f6      	lsls	r6, r6, #31
 801b108:	5c8a      	ldrb	r2, [r1, r2]
 801b10a:	bf54      	ite	pl
 801b10c:	f002 020f 	andpl.w	r2, r2, #15
 801b110:	1112      	asrmi	r2, r2, #4
 801b112:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b116:	b2d2      	uxtb	r2, r2
 801b118:	2a00      	cmp	r2, #0
 801b11a:	d045      	beq.n	801b1a8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b11c:	4926      	ldr	r1, [pc, #152]	; (801b1b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801b11e:	f8d1 8000 	ldr.w	r8, [r1]
 801b122:	9905      	ldr	r1, [sp, #20]
 801b124:	fa5f fb88 	uxtb.w	fp, r8
 801b128:	434a      	muls	r2, r1
 801b12a:	1c56      	adds	r6, r2, #1
 801b12c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b130:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b134:	1212      	asrs	r2, r2, #8
 801b136:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b13a:	fa1f fa82 	uxth.w	sl, r2
 801b13e:	43d2      	mvns	r2, r2
 801b140:	fb1b fb0a 	smulbb	fp, fp, sl
 801b144:	b2d2      	uxtb	r2, r2
 801b146:	fb09 b902 	mla	r9, r9, r2, fp
 801b14a:	fa1f f989 	uxth.w	r9, r9
 801b14e:	f109 0b01 	add.w	fp, r9, #1
 801b152:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b156:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801b15a:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801b15e:	fb1b fb0a 	smulbb	fp, fp, sl
 801b162:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b166:	fb18 fa0a 	smulbb	sl, r8, sl
 801b16a:	f805 9006 	strb.w	r9, [r5, r6]
 801b16e:	442e      	add	r6, r5
 801b170:	f896 8002 	ldrb.w	r8, [r6, #2]
 801b174:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b178:	fb08 aa02 	mla	sl, r8, r2, sl
 801b17c:	fb09 b902 	mla	r9, r9, r2, fp
 801b180:	fa1f fa8a 	uxth.w	sl, sl
 801b184:	fa1f f989 	uxth.w	r9, r9
 801b188:	f10a 0801 	add.w	r8, sl, #1
 801b18c:	f109 0b01 	add.w	fp, r9, #1
 801b190:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801b194:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b198:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b19c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1a0:	f886 a002 	strb.w	sl, [r6, #2]
 801b1a4:	f886 9001 	strb.w	r9, [r6, #1]
 801b1a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b1aa:	4474      	add	r4, lr
 801b1ac:	3701      	adds	r7, #1
 801b1ae:	4410      	add	r0, r2
 801b1b0:	e755      	b.n	801b05e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801b1b2:	b007      	add	sp, #28
 801b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1b8:	2400f250 	.word	0x2400f250

0801b1bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c0:	b085      	sub	sp, #20
 801b1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b1c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1c8:	9203      	str	r2, [sp, #12]
 801b1ca:	6860      	ldr	r0, [r4, #4]
 801b1cc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801b1d0:	9100      	str	r1, [sp, #0]
 801b1d2:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801b1d6:	fb00 2606 	mla	r6, r0, r6, r2
 801b1da:	6822      	ldr	r2, [r4, #0]
 801b1dc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b1e0:	4416      	add	r6, r2
 801b1e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b1e6:	3201      	adds	r2, #1
 801b1e8:	f022 0201 	bic.w	r2, r2, #1
 801b1ec:	9201      	str	r2, [sp, #4]
 801b1ee:	f8dc 2000 	ldr.w	r2, [ip]
 801b1f2:	9202      	str	r2, [sp, #8]
 801b1f4:	9a00      	ldr	r2, [sp, #0]
 801b1f6:	2a00      	cmp	r2, #0
 801b1f8:	dc03      	bgt.n	801b202 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801b1fa:	9a03      	ldr	r2, [sp, #12]
 801b1fc:	2a00      	cmp	r2, #0
 801b1fe:	f340 8140 	ble.w	801b482 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b204:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801b208:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801b20c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b20e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b212:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801b216:	2b00      	cmp	r3, #0
 801b218:	dd0e      	ble.n	801b238 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b21a:	142a      	asrs	r2, r5, #16
 801b21c:	d405      	bmi.n	801b22a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b21e:	4572      	cmp	r2, lr
 801b220:	da03      	bge.n	801b22a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b222:	1422      	asrs	r2, r4, #16
 801b224:	d401      	bmi.n	801b22a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b226:	42ba      	cmp	r2, r7
 801b228:	db07      	blt.n	801b23a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801b22a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b22c:	3b01      	subs	r3, #1
 801b22e:	3603      	adds	r6, #3
 801b230:	4415      	add	r5, r2
 801b232:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b234:	4414      	add	r4, r2
 801b236:	e7ee      	b.n	801b216 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b238:	d072      	beq.n	801b320 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801b23a:	1e5a      	subs	r2, r3, #1
 801b23c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b23e:	fb00 5002 	mla	r0, r0, r2, r5
 801b242:	1400      	asrs	r0, r0, #16
 801b244:	d463      	bmi.n	801b30e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b246:	4570      	cmp	r0, lr
 801b248:	da61      	bge.n	801b30e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b24a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801b24c:	fb00 4202 	mla	r2, r0, r2, r4
 801b250:	1412      	asrs	r2, r2, #16
 801b252:	d45c      	bmi.n	801b30e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b254:	42ba      	cmp	r2, r7
 801b256:	da5a      	bge.n	801b30e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b258:	1cf0      	adds	r0, r6, #3
 801b25a:	469a      	mov	sl, r3
 801b25c:	f1ba 0f00 	cmp.w	sl, #0
 801b260:	dd59      	ble.n	801b316 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b262:	142a      	asrs	r2, r5, #16
 801b264:	9901      	ldr	r1, [sp, #4]
 801b266:	1427      	asrs	r7, r4, #16
 801b268:	fb01 2707 	mla	r7, r1, r7, r2
 801b26c:	9902      	ldr	r1, [sp, #8]
 801b26e:	087a      	lsrs	r2, r7, #1
 801b270:	5c8a      	ldrb	r2, [r1, r2]
 801b272:	07f9      	lsls	r1, r7, #31
 801b274:	bf54      	ite	pl
 801b276:	f002 020f 	andpl.w	r2, r2, #15
 801b27a:	1112      	asrmi	r2, r2, #4
 801b27c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b280:	b2d2      	uxtb	r2, r2
 801b282:	2a00      	cmp	r2, #0
 801b284:	d03b      	beq.n	801b2fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b286:	4980      	ldr	r1, [pc, #512]	; (801b488 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b288:	2aff      	cmp	r2, #255	; 0xff
 801b28a:	680f      	ldr	r7, [r1, #0]
 801b28c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801b290:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801b294:	b2ff      	uxtb	r7, r7
 801b296:	f000 80ed 	beq.w	801b474 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801b29a:	fa1f f882 	uxth.w	r8, r2
 801b29e:	43d2      	mvns	r2, r2
 801b2a0:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801b2a4:	fb17 f708 	smulbb	r7, r7, r8
 801b2a8:	b2d2      	uxtb	r2, r2
 801b2aa:	fb19 f908 	smulbb	r9, r9, r8
 801b2ae:	fb0e 7702 	mla	r7, lr, r2, r7
 801b2b2:	fb1b f808 	smulbb	r8, fp, r8
 801b2b6:	b2bf      	uxth	r7, r7
 801b2b8:	f107 0e01 	add.w	lr, r7, #1
 801b2bc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b2c0:	123f      	asrs	r7, r7, #8
 801b2c2:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b2c6:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801b2ca:	fb07 9902 	mla	r9, r7, r2, r9
 801b2ce:	fa1f f989 	uxth.w	r9, r9
 801b2d2:	f109 0701 	add.w	r7, r9, #1
 801b2d6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b2da:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801b2de:	fb07 8802 	mla	r8, r7, r2, r8
 801b2e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b2e6:	fa1f f888 	uxth.w	r8, r8
 801b2ea:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b2ee:	f108 0201 	add.w	r2, r8, #1
 801b2f2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b2f6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b2fa:	f800 8c01 	strb.w	r8, [r0, #-1]
 801b2fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b300:	3003      	adds	r0, #3
 801b302:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b306:	4415      	add	r5, r2
 801b308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b30a:	4414      	add	r4, r2
 801b30c:	e7a6      	b.n	801b25c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801b30e:	2700      	movs	r7, #0
 801b310:	1bda      	subs	r2, r3, r7
 801b312:	2a00      	cmp	r2, #0
 801b314:	dc40      	bgt.n	801b398 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801b316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b31a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b31e:	441e      	add	r6, r3
 801b320:	9b00      	ldr	r3, [sp, #0]
 801b322:	2b00      	cmp	r3, #0
 801b324:	f340 80ad 	ble.w	801b482 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801b328:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b32c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b32e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b332:	eeb0 6a62 	vmov.f32	s12, s5
 801b336:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b33a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b33e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b342:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801b346:	eeb0 6a43 	vmov.f32	s12, s6
 801b34a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b34e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801b352:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b356:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b35a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b35e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b362:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b366:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b36a:	ee12 2a90 	vmov	r2, s5
 801b36e:	eef0 2a47 	vmov.f32	s5, s14
 801b372:	fb92 f3f3 	sdiv	r3, r2, r3
 801b376:	ee13 2a10 	vmov	r2, s6
 801b37a:	9311      	str	r3, [sp, #68]	; 0x44
 801b37c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b37e:	eeb0 3a67 	vmov.f32	s6, s15
 801b382:	fb92 f3f3 	sdiv	r3, r2, r3
 801b386:	9312      	str	r3, [sp, #72]	; 0x48
 801b388:	9b00      	ldr	r3, [sp, #0]
 801b38a:	9a03      	ldr	r2, [sp, #12]
 801b38c:	3b01      	subs	r3, #1
 801b38e:	9300      	str	r3, [sp, #0]
 801b390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b392:	bf08      	it	eq
 801b394:	4613      	moveq	r3, r2
 801b396:	e72d      	b.n	801b1f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801b398:	1428      	asrs	r0, r5, #16
 801b39a:	d45c      	bmi.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b39c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801b3a0:	4282      	cmp	r2, r0
 801b3a2:	dd58      	ble.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b3a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b3a8:	d455      	bmi.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b3aa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b3ae:	4572      	cmp	r2, lr
 801b3b0:	dd51      	ble.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b3b2:	9a01      	ldr	r2, [sp, #4]
 801b3b4:	9902      	ldr	r1, [sp, #8]
 801b3b6:	fb0e 0002 	mla	r0, lr, r2, r0
 801b3ba:	0842      	lsrs	r2, r0, #1
 801b3bc:	07c0      	lsls	r0, r0, #31
 801b3be:	5c8a      	ldrb	r2, [r1, r2]
 801b3c0:	bf54      	ite	pl
 801b3c2:	f002 020f 	andpl.w	r2, r2, #15
 801b3c6:	1112      	asrmi	r2, r2, #4
 801b3c8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b3cc:	b2d2      	uxtb	r2, r2
 801b3ce:	2a00      	cmp	r2, #0
 801b3d0:	d041      	beq.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b3d2:	492d      	ldr	r1, [pc, #180]	; (801b488 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801b3d4:	2aff      	cmp	r2, #255	; 0xff
 801b3d6:	6808      	ldr	r0, [r1, #0]
 801b3d8:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801b3dc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801b3e0:	fa5f fe80 	uxtb.w	lr, r0
 801b3e4:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801b3e8:	d03b      	beq.n	801b462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801b3ea:	fa1f f982 	uxth.w	r9, r2
 801b3ee:	4438      	add	r0, r7
 801b3f0:	43d2      	mvns	r2, r2
 801b3f2:	f816 8000 	ldrb.w	r8, [r6, r0]
 801b3f6:	fb1e fe09 	smulbb	lr, lr, r9
 801b3fa:	fb1a fa09 	smulbb	sl, sl, r9
 801b3fe:	b2d2      	uxtb	r2, r2
 801b400:	fb1b f909 	smulbb	r9, fp, r9
 801b404:	fb08 ee02 	mla	lr, r8, r2, lr
 801b408:	fa1f fe8e 	uxth.w	lr, lr
 801b40c:	f10e 0801 	add.w	r8, lr, #1
 801b410:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801b414:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b418:	f806 e000 	strb.w	lr, [r6, r0]
 801b41c:	4430      	add	r0, r6
 801b41e:	f890 e001 	ldrb.w	lr, [r0, #1]
 801b422:	fb0e aa02 	mla	sl, lr, r2, sl
 801b426:	fa1f fa8a 	uxth.w	sl, sl
 801b42a:	f10a 0e01 	add.w	lr, sl, #1
 801b42e:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801b432:	f890 e002 	ldrb.w	lr, [r0, #2]
 801b436:	fb0e 9902 	mla	r9, lr, r2, r9
 801b43a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b43e:	fa1f f989 	uxth.w	r9, r9
 801b442:	f880 a001 	strb.w	sl, [r0, #1]
 801b446:	f109 0201 	add.w	r2, r9, #1
 801b44a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801b44e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b452:	f880 9002 	strb.w	r9, [r0, #2]
 801b456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b458:	3701      	adds	r7, #1
 801b45a:	4415      	add	r5, r2
 801b45c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b45e:	4414      	add	r4, r2
 801b460:	e756      	b.n	801b310 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801b462:	4438      	add	r0, r7
 801b464:	f806 e000 	strb.w	lr, [r6, r0]
 801b468:	4430      	add	r0, r6
 801b46a:	f880 a001 	strb.w	sl, [r0, #1]
 801b46e:	f880 b002 	strb.w	fp, [r0, #2]
 801b472:	e7f0      	b.n	801b456 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801b474:	f800 7c03 	strb.w	r7, [r0, #-3]
 801b478:	f800 9c02 	strb.w	r9, [r0, #-2]
 801b47c:	f800 bc01 	strb.w	fp, [r0, #-1]
 801b480:	e73d      	b.n	801b2fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b482:	b005      	add	sp, #20
 801b484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b488:	2400f250 	.word	0x2400f250

0801b48c <_ZN8touchgfx8LCD24bppD1Ev>:
 801b48c:	4770      	bx	lr

0801b48e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801b48e:	4770      	bx	lr

0801b490 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801b490:	4770      	bx	lr

0801b492 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801b492:	4770      	bx	lr

0801b494 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801b494:	4770      	bx	lr

0801b496 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b496:	4770      	bx	lr

0801b498 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b498:	4770      	bx	lr

0801b49a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b49a:	4770      	bx	lr

0801b49c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b49c:	4770      	bx	lr

0801b49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b49e:	4770      	bx	lr

0801b4a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b4a0:	4770      	bx	lr

0801b4a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b4a2:	4770      	bx	lr

0801b4a4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b4a4:	4770      	bx	lr

0801b4a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801b4a6:	4770      	bx	lr

0801b4a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801b4a8:	4770      	bx	lr

0801b4aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801b4aa:	4770      	bx	lr

0801b4ac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801b4ac:	4770      	bx	lr

0801b4ae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801b4ae:	4770      	bx	lr

0801b4b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801b4b0:	4770      	bx	lr

0801b4b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801b4b2:	4770      	bx	lr

0801b4b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801b4b4:	4770      	bx	lr
	...

0801b4b8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801b4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4ba:	4606      	mov	r6, r0
 801b4bc:	b087      	sub	sp, #28
 801b4be:	4615      	mov	r5, r2
 801b4c0:	461f      	mov	r7, r3
 801b4c2:	b353      	cbz	r3, 801b51a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b4c4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	dd26      	ble.n	801b51a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b4cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	dd22      	ble.n	801b51a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b4d4:	6808      	ldr	r0, [r1, #0]
 801b4d6:	aa04      	add	r2, sp, #16
 801b4d8:	6849      	ldr	r1, [r1, #4]
 801b4da:	4c1b      	ldr	r4, [pc, #108]	; (801b548 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801b4dc:	c203      	stmia	r2!, {r0, r1}
 801b4de:	a804      	add	r0, sp, #16
 801b4e0:	f7fa fede 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b4e4:	6820      	ldr	r0, [r4, #0]
 801b4e6:	6803      	ldr	r3, [r0, #0]
 801b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4ea:	4798      	blx	r3
 801b4ec:	2fff      	cmp	r7, #255	; 0xff
 801b4ee:	d016      	beq.n	801b51e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801b4f0:	f010 0f08 	tst.w	r0, #8
 801b4f4:	6820      	ldr	r0, [r4, #0]
 801b4f6:	d015      	beq.n	801b524 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801b4f8:	2400      	movs	r4, #0
 801b4fa:	6801      	ldr	r1, [r0, #0]
 801b4fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b500:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b504:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801b508:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801b50c:	9401      	str	r4, [sp, #4]
 801b50e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801b512:	9400      	str	r4, [sp, #0]
 801b514:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801b516:	4629      	mov	r1, r5
 801b518:	47a0      	blx	r4
 801b51a:	b007      	add	sp, #28
 801b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b51e:	f010 0f02 	tst.w	r0, #2
 801b522:	e7e7      	b.n	801b4f4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801b524:	6803      	ldr	r3, [r0, #0]
 801b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b528:	4798      	blx	r3
 801b52a:	4b08      	ldr	r3, [pc, #32]	; (801b54c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801b52c:	4601      	mov	r1, r0
 801b52e:	4630      	mov	r0, r6
 801b530:	881a      	ldrh	r2, [r3, #0]
 801b532:	6833      	ldr	r3, [r6, #0]
 801b534:	e9cd 5700 	strd	r5, r7, [sp]
 801b538:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801b53a:	ab04      	add	r3, sp, #16
 801b53c:	47a8      	blx	r5
 801b53e:	6820      	ldr	r0, [r4, #0]
 801b540:	6803      	ldr	r3, [r0, #0]
 801b542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b544:	4798      	blx	r3
 801b546:	e7e8      	b.n	801b51a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b548:	2400f240 	.word	0x2400f240
 801b54c:	2400f23a 	.word	0x2400f23a

0801b550 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b554:	b08b      	sub	sp, #44	; 0x2c
 801b556:	460d      	mov	r5, r1
 801b558:	4616      	mov	r6, r2
 801b55a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801b55e:	f1b8 0f00 	cmp.w	r8, #0
 801b562:	d047      	beq.n	801b5f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b564:	6810      	ldr	r0, [r2, #0]
 801b566:	ac06      	add	r4, sp, #24
 801b568:	6851      	ldr	r1, [r2, #4]
 801b56a:	4f51      	ldr	r7, [pc, #324]	; (801b6b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b56c:	c403      	stmia	r4!, {r0, r1}
 801b56e:	6818      	ldr	r0, [r3, #0]
 801b570:	ac08      	add	r4, sp, #32
 801b572:	6859      	ldr	r1, [r3, #4]
 801b574:	c403      	stmia	r4!, {r0, r1}
 801b576:	a806      	add	r0, sp, #24
 801b578:	f7fa fe92 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b57c:	4631      	mov	r1, r6
 801b57e:	a808      	add	r0, sp, #32
 801b580:	f7fa feb6 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b584:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b588:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b58c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b590:	6838      	ldr	r0, [r7, #0]
 801b592:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b596:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801b59a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801b59e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b5a2:	440d      	add	r5, r1
 801b5a4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b5a8:	440a      	add	r2, r1
 801b5aa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b5ae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b5b2:	4413      	add	r3, r2
 801b5b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b5b8:	6803      	ldr	r3, [r0, #0]
 801b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b5bc:	4798      	blx	r3
 801b5be:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b5c2:	d01a      	beq.n	801b5fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801b5c4:	f010 0f04 	tst.w	r0, #4
 801b5c8:	6838      	ldr	r0, [r7, #0]
 801b5ca:	d019      	beq.n	801b600 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801b5cc:	2100      	movs	r1, #0
 801b5ce:	6807      	ldr	r7, [r0, #0]
 801b5d0:	b2a4      	uxth	r4, r4
 801b5d2:	f8cd 800c 	str.w	r8, [sp, #12]
 801b5d6:	b2b6      	uxth	r6, r6
 801b5d8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b5dc:	9401      	str	r4, [sp, #4]
 801b5de:	9600      	str	r6, [sp, #0]
 801b5e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b5e4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801b5e8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b5ec:	9102      	str	r1, [sp, #8]
 801b5ee:	4629      	mov	r1, r5
 801b5f0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801b5f2:	47a0      	blx	r4
 801b5f4:	b00b      	add	sp, #44	; 0x2c
 801b5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5fa:	f010 0f01 	tst.w	r0, #1
 801b5fe:	e7e3      	b.n	801b5c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b600:	6803      	ldr	r3, [r0, #0]
 801b602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b604:	4798      	blx	r3
 801b606:	4a2b      	ldr	r2, [pc, #172]	; (801b6b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801b608:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b60c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b610:	8813      	ldrh	r3, [r2, #0]
 801b612:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b616:	fb03 f404 	mul.w	r4, r3, r4
 801b61a:	fb03 c101 	mla	r1, r3, r1, ip
 801b61e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b622:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b626:	4408      	add	r0, r1
 801b628:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b62c:	4404      	add	r4, r0
 801b62e:	d02e      	beq.n	801b68e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b630:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b634:	1b9b      	subs	r3, r3, r6
 801b636:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801b63a:	1b96      	subs	r6, r2, r6
 801b63c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b640:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b644:	42a0      	cmp	r0, r4
 801b646:	d22d      	bcs.n	801b6a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b648:	eb00 0e01 	add.w	lr, r0, r1
 801b64c:	4570      	cmp	r0, lr
 801b64e:	d210      	bcs.n	801b672 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801b650:	f890 9000 	ldrb.w	r9, [r0]
 801b654:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b658:	fb19 f90c 	smulbb	r9, r9, ip
 801b65c:	fb02 9208 	mla	r2, r2, r8, r9
 801b660:	b292      	uxth	r2, r2
 801b662:	f102 0901 	add.w	r9, r2, #1
 801b666:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b66a:	1212      	asrs	r2, r2, #8
 801b66c:	f800 2b01 	strb.w	r2, [r0], #1
 801b670:	e7ec      	b.n	801b64c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801b672:	4418      	add	r0, r3
 801b674:	4435      	add	r5, r6
 801b676:	e7e5      	b.n	801b644 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801b678:	8813      	ldrh	r3, [r2, #0]
 801b67a:	1b9b      	subs	r3, r3, r6
 801b67c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b680:	4418      	add	r0, r3
 801b682:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b686:	1b9b      	subs	r3, r3, r6
 801b688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b68c:	441d      	add	r5, r3
 801b68e:	42a0      	cmp	r0, r4
 801b690:	d208      	bcs.n	801b6a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b692:	eb00 0c01 	add.w	ip, r0, r1
 801b696:	4560      	cmp	r0, ip
 801b698:	d2ee      	bcs.n	801b678 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801b69a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b69e:	f800 3b01 	strb.w	r3, [r0], #1
 801b6a2:	e7f8      	b.n	801b696 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801b6a4:	6838      	ldr	r0, [r7, #0]
 801b6a6:	6803      	ldr	r3, [r0, #0]
 801b6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6aa:	4798      	blx	r3
 801b6ac:	e7a2      	b.n	801b5f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b6ae:	bf00      	nop
 801b6b0:	2400f240 	.word	0x2400f240
 801b6b4:	2400f23a 	.word	0x2400f23a

0801b6b8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	b085      	sub	sp, #20
 801b6be:	9300      	str	r3, [sp, #0]
 801b6c0:	4b41      	ldr	r3, [pc, #260]	; (801b7c8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801b6c2:	781b      	ldrb	r3, [r3, #0]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d136      	bne.n	801b736 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801b6c8:	4a40      	ldr	r2, [pc, #256]	; (801b7cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b6ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b6ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d131      	bne.n	801b73a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801b6d6:	4b3e      	ldr	r3, [pc, #248]	; (801b7d0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b6d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6dc:	ac02      	add	r4, sp, #8
 801b6de:	6808      	ldr	r0, [r1, #0]
 801b6e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6e4:	ab02      	add	r3, sp, #8
 801b6e6:	6849      	ldr	r1, [r1, #4]
 801b6e8:	4d3a      	ldr	r5, [pc, #232]	; (801b7d4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801b6ea:	c303      	stmia	r3!, {r0, r1}
 801b6ec:	4669      	mov	r1, sp
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	f7fa fdfe 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b6f4:	4668      	mov	r0, sp
 801b6f6:	f7fa fdd3 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b6fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b6fe:	f8bd 2000 	ldrh.w	r2, [sp]
 801b702:	462e      	mov	r6, r5
 801b704:	6828      	ldr	r0, [r5, #0]
 801b706:	4413      	add	r3, r2
 801b708:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b70c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b710:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b714:	4413      	add	r3, r2
 801b716:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b71a:	6803      	ldr	r3, [r0, #0]
 801b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b71e:	4798      	blx	r3
 801b720:	f010 0f01 	tst.w	r0, #1
 801b724:	d00b      	beq.n	801b73e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801b726:	6828      	ldr	r0, [r5, #0]
 801b728:	6803      	ldr	r3, [r0, #0]
 801b72a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b730:	4798      	blx	r3
 801b732:	b005      	add	sp, #20
 801b734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b736:	4a26      	ldr	r2, [pc, #152]	; (801b7d0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b738:	e7c7      	b.n	801b6ca <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b73a:	4b24      	ldr	r3, [pc, #144]	; (801b7cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b73c:	e7cc      	b.n	801b6d8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b73e:	6830      	ldr	r0, [r6, #0]
 801b740:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801b744:	6803      	ldr	r3, [r0, #0]
 801b746:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b74c:	4798      	blx	r3
 801b74e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b752:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b756:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801b75a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801b75e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b762:	4404      	add	r4, r0
 801b764:	6830      	ldr	r0, [r6, #0]
 801b766:	6803      	ldr	r3, [r0, #0]
 801b768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b76a:	4798      	blx	r3
 801b76c:	4917      	ldr	r1, [pc, #92]	; (801b7cc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b76e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b772:	880b      	ldrh	r3, [r1, #0]
 801b774:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801b778:	fb03 c202 	mla	r2, r3, r2, ip
 801b77c:	437b      	muls	r3, r7
 801b77e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801b782:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b78a:	4410      	add	r0, r2
 801b78c:	18c2      	adds	r2, r0, r3
 801b78e:	4290      	cmp	r0, r2
 801b790:	d214      	bcs.n	801b7bc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801b792:	eb00 0c07 	add.w	ip, r0, r7
 801b796:	4560      	cmp	r0, ip
 801b798:	d204      	bcs.n	801b7a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801b79a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b79e:	f800 3b01 	strb.w	r3, [r0], #1
 801b7a2:	e7f8      	b.n	801b796 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801b7a4:	880b      	ldrh	r3, [r1, #0]
 801b7a6:	1b5b      	subs	r3, r3, r5
 801b7a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7ac:	4418      	add	r0, r3
 801b7ae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b7b2:	1b5b      	subs	r3, r3, r5
 801b7b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b7b8:	441c      	add	r4, r3
 801b7ba:	e7e8      	b.n	801b78e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801b7bc:	6830      	ldr	r0, [r6, #0]
 801b7be:	6803      	ldr	r3, [r0, #0]
 801b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7c2:	4798      	blx	r3
 801b7c4:	e7b5      	b.n	801b732 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b7c6:	bf00      	nop
 801b7c8:	2400f238 	.word	0x2400f238
 801b7cc:	2400f23a 	.word	0x2400f23a
 801b7d0:	2400f23c 	.word	0x2400f23c
 801b7d4:	2400f240 	.word	0x2400f240

0801b7d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7dc:	b089      	sub	sp, #36	; 0x24
 801b7de:	4607      	mov	r7, r0
 801b7e0:	4689      	mov	r9, r1
 801b7e2:	4692      	mov	sl, r2
 801b7e4:	ac08      	add	r4, sp, #32
 801b7e6:	461e      	mov	r6, r3
 801b7e8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f7fe f8ef 	bl	80199d0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b7f2:	683b      	ldr	r3, [r7, #0]
 801b7f4:	4605      	mov	r5, r0
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801b7fc:	f7fe f834 	bl	8019868 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b800:	4683      	mov	fp, r0
 801b802:	4620      	mov	r0, r4
 801b804:	f7fe f864 	bl	80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b808:	4653      	mov	r3, sl
 801b80a:	464a      	mov	r2, r9
 801b80c:	4639      	mov	r1, r7
 801b80e:	9500      	str	r5, [sp, #0]
 801b810:	e9cd b001 	strd	fp, r0, [sp, #4]
 801b814:	a806      	add	r0, sp, #24
 801b816:	47c0      	blx	r8
 801b818:	a906      	add	r1, sp, #24
 801b81a:	4630      	mov	r0, r6
 801b81c:	f7fd ff08 	bl	8019630 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801b820:	4628      	mov	r0, r5
 801b822:	b009      	add	sp, #36	; 0x24
 801b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b828 <_ZN8touchgfx8LCD24bppD0Ev>:
 801b828:	b510      	push	{r4, lr}
 801b82a:	4604      	mov	r4, r0
 801b82c:	2158      	movs	r1, #88	; 0x58
 801b82e:	f006 fc18 	bl	8022062 <_ZdlPvj>
 801b832:	4620      	mov	r0, r4
 801b834:	bd10      	pop	{r4, pc}

0801b836 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b836:	b510      	push	{r4, lr}
 801b838:	4604      	mov	r4, r0
 801b83a:	2104      	movs	r1, #4
 801b83c:	f006 fc11 	bl	8022062 <_ZdlPvj>
 801b840:	4620      	mov	r0, r4
 801b842:	bd10      	pop	{r4, pc}

0801b844 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b844:	b510      	push	{r4, lr}
 801b846:	4604      	mov	r4, r0
 801b848:	2104      	movs	r1, #4
 801b84a:	f006 fc0a 	bl	8022062 <_ZdlPvj>
 801b84e:	4620      	mov	r0, r4
 801b850:	bd10      	pop	{r4, pc}

0801b852 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b852:	b510      	push	{r4, lr}
 801b854:	4604      	mov	r4, r0
 801b856:	2104      	movs	r1, #4
 801b858:	f006 fc03 	bl	8022062 <_ZdlPvj>
 801b85c:	4620      	mov	r0, r4
 801b85e:	bd10      	pop	{r4, pc}

0801b860 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b860:	b510      	push	{r4, lr}
 801b862:	4604      	mov	r4, r0
 801b864:	2104      	movs	r1, #4
 801b866:	f006 fbfc 	bl	8022062 <_ZdlPvj>
 801b86a:	4620      	mov	r0, r4
 801b86c:	bd10      	pop	{r4, pc}

0801b86e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b86e:	b510      	push	{r4, lr}
 801b870:	4604      	mov	r4, r0
 801b872:	2104      	movs	r1, #4
 801b874:	f006 fbf5 	bl	8022062 <_ZdlPvj>
 801b878:	4620      	mov	r0, r4
 801b87a:	bd10      	pop	{r4, pc}

0801b87c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b87c:	b510      	push	{r4, lr}
 801b87e:	4604      	mov	r4, r0
 801b880:	2104      	movs	r1, #4
 801b882:	f006 fbee 	bl	8022062 <_ZdlPvj>
 801b886:	4620      	mov	r0, r4
 801b888:	bd10      	pop	{r4, pc}

0801b88a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b88a:	b510      	push	{r4, lr}
 801b88c:	4604      	mov	r4, r0
 801b88e:	2104      	movs	r1, #4
 801b890:	f006 fbe7 	bl	8022062 <_ZdlPvj>
 801b894:	4620      	mov	r0, r4
 801b896:	bd10      	pop	{r4, pc}

0801b898 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b898:	b510      	push	{r4, lr}
 801b89a:	4604      	mov	r4, r0
 801b89c:	2104      	movs	r1, #4
 801b89e:	f006 fbe0 	bl	8022062 <_ZdlPvj>
 801b8a2:	4620      	mov	r0, r4
 801b8a4:	bd10      	pop	{r4, pc}

0801b8a6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	4604      	mov	r4, r0
 801b8aa:	2104      	movs	r1, #4
 801b8ac:	f006 fbd9 	bl	8022062 <_ZdlPvj>
 801b8b0:	4620      	mov	r0, r4
 801b8b2:	bd10      	pop	{r4, pc}

0801b8b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b8b4:	b510      	push	{r4, lr}
 801b8b6:	4604      	mov	r4, r0
 801b8b8:	2104      	movs	r1, #4
 801b8ba:	f006 fbd2 	bl	8022062 <_ZdlPvj>
 801b8be:	4620      	mov	r0, r4
 801b8c0:	bd10      	pop	{r4, pc}

0801b8c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b8c2:	b510      	push	{r4, lr}
 801b8c4:	4604      	mov	r4, r0
 801b8c6:	2104      	movs	r1, #4
 801b8c8:	f006 fbcb 	bl	8022062 <_ZdlPvj>
 801b8cc:	4620      	mov	r0, r4
 801b8ce:	bd10      	pop	{r4, pc}

0801b8d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b8d0:	b510      	push	{r4, lr}
 801b8d2:	4604      	mov	r4, r0
 801b8d4:	2104      	movs	r1, #4
 801b8d6:	f006 fbc4 	bl	8022062 <_ZdlPvj>
 801b8da:	4620      	mov	r0, r4
 801b8dc:	bd10      	pop	{r4, pc}

0801b8de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b8de:	b510      	push	{r4, lr}
 801b8e0:	4604      	mov	r4, r0
 801b8e2:	2104      	movs	r1, #4
 801b8e4:	f006 fbbd 	bl	8022062 <_ZdlPvj>
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	bd10      	pop	{r4, pc}

0801b8ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b8ec:	b510      	push	{r4, lr}
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	2104      	movs	r1, #4
 801b8f2:	f006 fbb6 	bl	8022062 <_ZdlPvj>
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	bd10      	pop	{r4, pc}

0801b8fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b8fa:	b510      	push	{r4, lr}
 801b8fc:	4604      	mov	r4, r0
 801b8fe:	2104      	movs	r1, #4
 801b900:	f006 fbaf 	bl	8022062 <_ZdlPvj>
 801b904:	4620      	mov	r0, r4
 801b906:	bd10      	pop	{r4, pc}

0801b908 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b908:	b510      	push	{r4, lr}
 801b90a:	4604      	mov	r4, r0
 801b90c:	2104      	movs	r1, #4
 801b90e:	f006 fba8 	bl	8022062 <_ZdlPvj>
 801b912:	4620      	mov	r0, r4
 801b914:	bd10      	pop	{r4, pc}

0801b916 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b916:	b510      	push	{r4, lr}
 801b918:	4604      	mov	r4, r0
 801b91a:	2104      	movs	r1, #4
 801b91c:	f006 fba1 	bl	8022062 <_ZdlPvj>
 801b920:	4620      	mov	r0, r4
 801b922:	bd10      	pop	{r4, pc}

0801b924 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b924:	b510      	push	{r4, lr}
 801b926:	4604      	mov	r4, r0
 801b928:	2104      	movs	r1, #4
 801b92a:	f006 fb9a 	bl	8022062 <_ZdlPvj>
 801b92e:	4620      	mov	r0, r4
 801b930:	bd10      	pop	{r4, pc}

0801b932 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b932:	b510      	push	{r4, lr}
 801b934:	4604      	mov	r4, r0
 801b936:	2104      	movs	r1, #4
 801b938:	f006 fb93 	bl	8022062 <_ZdlPvj>
 801b93c:	4620      	mov	r0, r4
 801b93e:	bd10      	pop	{r4, pc}

0801b940 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b940:	b510      	push	{r4, lr}
 801b942:	4604      	mov	r4, r0
 801b944:	2104      	movs	r1, #4
 801b946:	f006 fb8c 	bl	8022062 <_ZdlPvj>
 801b94a:	4620      	mov	r0, r4
 801b94c:	bd10      	pop	{r4, pc}

0801b94e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b94e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b952:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b956:	9c06      	ldr	r4, [sp, #24]
 801b958:	2800      	cmp	r0, #0
 801b95a:	d06e      	beq.n	801ba3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b95c:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b960:	2d00      	cmp	r5, #0
 801b962:	dd6a      	ble.n	801ba3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b964:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b968:	f1bc 0f00 	cmp.w	ip, #0
 801b96c:	dd65      	ble.n	801ba3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b96e:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b972:	28ff      	cmp	r0, #255	; 0xff
 801b974:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b978:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b97c:	fb02 3306 	mla	r3, r2, r6, r3
 801b980:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b984:	b2e4      	uxtb	r4, r4
 801b986:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b98a:	4419      	add	r1, r3
 801b98c:	fb02 f30c 	mul.w	r3, r2, ip
 801b990:	eba2 0205 	sub.w	r2, r2, r5
 801b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b998:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b99c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b9a0:	440b      	add	r3, r1
 801b9a2:	d03e      	beq.n	801ba22 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b9a4:	fa1f fc80 	uxth.w	ip, r0
 801b9a8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b9ac:	fb06 f60c 	mul.w	r6, r6, ip
 801b9b0:	b280      	uxth	r0, r0
 801b9b2:	fb07 f70c 	mul.w	r7, r7, ip
 801b9b6:	fb04 f40c 	mul.w	r4, r4, ip
 801b9ba:	4299      	cmp	r1, r3
 801b9bc:	d23d      	bcs.n	801ba3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b9be:	eb01 0c05 	add.w	ip, r1, r5
 801b9c2:	458c      	cmp	ip, r1
 801b9c4:	f101 0e03 	add.w	lr, r1, #3
 801b9c8:	d928      	bls.n	801ba1c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b9ca:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b9ce:	fb11 f100 	smulbb	r1, r1, r0
 801b9d2:	4421      	add	r1, r4
 801b9d4:	b289      	uxth	r1, r1
 801b9d6:	f101 0801 	add.w	r8, r1, #1
 801b9da:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b9de:	1209      	asrs	r1, r1, #8
 801b9e0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b9e4:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b9e8:	fb11 f100 	smulbb	r1, r1, r0
 801b9ec:	4439      	add	r1, r7
 801b9ee:	b289      	uxth	r1, r1
 801b9f0:	f101 0801 	add.w	r8, r1, #1
 801b9f4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b9f8:	1209      	asrs	r1, r1, #8
 801b9fa:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b9fe:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ba02:	fb11 f100 	smulbb	r1, r1, r0
 801ba06:	4431      	add	r1, r6
 801ba08:	b289      	uxth	r1, r1
 801ba0a:	f101 0801 	add.w	r8, r1, #1
 801ba0e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801ba12:	1209      	asrs	r1, r1, #8
 801ba14:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801ba18:	4671      	mov	r1, lr
 801ba1a:	e7d2      	b.n	801b9c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801ba1c:	4411      	add	r1, r2
 801ba1e:	e7cc      	b.n	801b9ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801ba20:	4411      	add	r1, r2
 801ba22:	4299      	cmp	r1, r3
 801ba24:	d209      	bcs.n	801ba3a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801ba26:	1948      	adds	r0, r1, r5
 801ba28:	4281      	cmp	r1, r0
 801ba2a:	d2f9      	bcs.n	801ba20 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801ba2c:	700c      	strb	r4, [r1, #0]
 801ba2e:	3103      	adds	r1, #3
 801ba30:	f801 7c02 	strb.w	r7, [r1, #-2]
 801ba34:	f801 6c01 	strb.w	r6, [r1, #-1]
 801ba38:	e7f6      	b.n	801ba28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801ba3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801ba40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba44:	b093      	sub	sp, #76	; 0x4c
 801ba46:	4699      	mov	r9, r3
 801ba48:	4617      	mov	r7, r2
 801ba4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ba4e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801ba52:	4604      	mov	r4, r0
 801ba54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ba58:	a80c      	add	r0, sp, #48	; 0x30
 801ba5a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801ba5e:	460d      	mov	r5, r1
 801ba60:	4649      	mov	r1, r9
 801ba62:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801ba66:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ba6a:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801ba6e:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801ba72:	f7f4 fc7f 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801ba76:	4639      	mov	r1, r7
 801ba78:	a80c      	add	r0, sp, #48	; 0x30
 801ba7a:	f7f4 fc7b 	bl	8010374 <_ZN8touchgfx4RectaNERKS0_>
 801ba7e:	4b78      	ldr	r3, [pc, #480]	; (801bc60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801ba80:	8818      	ldrh	r0, [r3, #0]
 801ba82:	4b78      	ldr	r3, [pc, #480]	; (801bc64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801ba84:	b202      	sxth	r2, r0
 801ba86:	8819      	ldrh	r1, [r3, #0]
 801ba88:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801ba8c:	b20f      	sxth	r7, r1
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	da07      	bge.n	801baa2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801ba92:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801ba96:	4463      	add	r3, ip
 801ba98:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801baa2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801baa6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801baaa:	1ad2      	subs	r2, r2, r3
 801baac:	4594      	cmp	ip, r2
 801baae:	bfc4      	itt	gt
 801bab0:	1ac2      	subgt	r2, r0, r3
 801bab2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801bab6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801baba:	2a00      	cmp	r2, #0
 801babc:	da07      	bge.n	801bace <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801babe:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801bac2:	4462      	add	r2, ip
 801bac4:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801bac8:	2200      	movs	r2, #0
 801baca:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801bace:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801bad2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801bad6:	1abf      	subs	r7, r7, r2
 801bad8:	45bc      	cmp	ip, r7
 801bada:	f8df c190 	ldr.w	ip, [pc, #400]	; 801bc6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801bade:	bfc8      	it	gt
 801bae0:	1a8f      	subgt	r7, r1, r2
 801bae2:	f89c c000 	ldrb.w	ip, [ip]
 801bae6:	bfc8      	it	gt
 801bae8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801baec:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801baf0:	f1bc 0f00 	cmp.w	ip, #0
 801baf4:	d176      	bne.n	801bbe4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801baf6:	4287      	cmp	r7, r0
 801baf8:	bf14      	ite	ne
 801bafa:	2100      	movne	r1, #0
 801bafc:	2101      	moveq	r1, #1
 801bafe:	2f00      	cmp	r7, #0
 801bb00:	9107      	str	r1, [sp, #28]
 801bb02:	dd73      	ble.n	801bbec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bb04:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801bb08:	2900      	cmp	r1, #0
 801bb0a:	9104      	str	r1, [sp, #16]
 801bb0c:	dd6e      	ble.n	801bbec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801bb0e:	f8b9 1000 	ldrh.w	r1, [r9]
 801bb12:	a80e      	add	r0, sp, #56	; 0x38
 801bb14:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801bb18:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801bb1c:	1a5b      	subs	r3, r3, r1
 801bb1e:	a910      	add	r1, sp, #64	; 0x40
 801bb20:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bb24:	b21b      	sxth	r3, r3
 801bb26:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801bb2a:	f8df a144 	ldr.w	sl, [pc, #324]	; 801bc70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801bb2e:	9305      	str	r3, [sp, #20]
 801bb30:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801bb34:	1ad2      	subs	r2, r2, r3
 801bb36:	b213      	sxth	r3, r2
 801bb38:	9306      	str	r3, [sp, #24]
 801bb3a:	9b05      	ldr	r3, [sp, #20]
 801bb3c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801bb40:	9b06      	ldr	r3, [sp, #24]
 801bb42:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bb46:	9b04      	ldr	r3, [sp, #16]
 801bb48:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	9310      	str	r3, [sp, #64]	; 0x40
 801bb50:	f7fa fbce 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb54:	4640      	mov	r0, r8
 801bb56:	f7fa fba3 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb5a:	a810      	add	r0, sp, #64	; 0x40
 801bb5c:	f7fa fba0 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb60:	4b41      	ldr	r3, [pc, #260]	; (801bc68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801bb62:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801bb66:	4628      	mov	r0, r5
 801bb68:	881b      	ldrh	r3, [r3, #0]
 801bb6a:	9308      	str	r3, [sp, #32]
 801bb6c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801bb70:	b21b      	sxth	r3, r3
 801bb72:	9303      	str	r3, [sp, #12]
 801bb74:	682b      	ldr	r3, [r5, #0]
 801bb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb78:	4798      	blx	r3
 801bb7a:	9a03      	ldr	r2, [sp, #12]
 801bb7c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801bb80:	4681      	mov	r9, r0
 801bb82:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801bb86:	fb13 f302 	smulbb	r3, r3, r2
 801bb8a:	2203      	movs	r2, #3
 801bb8c:	f8da 0000 	ldr.w	r0, [sl]
 801bb90:	fb15 3302 	smlabb	r3, r5, r2, r3
 801bb94:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801bb96:	920b      	str	r2, [sp, #44]	; 0x2c
 801bb98:	441d      	add	r5, r3
 801bb9a:	6803      	ldr	r3, [r0, #0]
 801bb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb9e:	4798      	blx	r3
 801bba0:	9009      	str	r0, [sp, #36]	; 0x24
 801bba2:	f8da 0000 	ldr.w	r0, [sl]
 801bba6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801bbaa:	6803      	ldr	r3, [r0, #0]
 801bbac:	910a      	str	r1, [sp, #40]	; 0x28
 801bbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bbb0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801bbb4:	4798      	blx	r3
 801bbb6:	f010 0f01 	tst.w	r0, #1
 801bbba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801bbbe:	d01e      	beq.n	801bbfe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801bbc0:	f8da 0000 	ldr.w	r0, [sl]
 801bbc4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801bbc8:	6803      	ldr	r3, [r0, #0]
 801bbca:	9200      	str	r2, [sp, #0]
 801bbcc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801bbce:	462b      	mov	r3, r5
 801bbd0:	e898 0006 	ldmia.w	r8, {r1, r2}
 801bbd4:	47b0      	blx	r6
 801bbd6:	9b05      	ldr	r3, [sp, #20]
 801bbd8:	80a7      	strh	r7, [r4, #4]
 801bbda:	8023      	strh	r3, [r4, #0]
 801bbdc:	9b06      	ldr	r3, [sp, #24]
 801bbde:	8063      	strh	r3, [r4, #2]
 801bbe0:	9b04      	ldr	r3, [sp, #16]
 801bbe2:	e007      	b.n	801bbf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801bbe4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801bbe8:	4288      	cmp	r0, r1
 801bbea:	e785      	b.n	801baf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801bbec:	2300      	movs	r3, #0
 801bbee:	8023      	strh	r3, [r4, #0]
 801bbf0:	8063      	strh	r3, [r4, #2]
 801bbf2:	80a3      	strh	r3, [r4, #4]
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	80e3      	strh	r3, [r4, #6]
 801bbf8:	b013      	add	sp, #76	; 0x4c
 801bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbfe:	fb09 f606 	mul.w	r6, r9, r6
 801bc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc04:	fb11 6602 	smlabb	r6, r1, r2, r6
 801bc08:	9a07      	ldr	r2, [sp, #28]
 801bc0a:	4433      	add	r3, r6
 801bc0c:	461e      	mov	r6, r3
 801bc0e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801bc12:	b16a      	cbz	r2, 801bc30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801bc14:	9a08      	ldr	r2, [sp, #32]
 801bc16:	4593      	cmp	fp, r2
 801bc18:	d10a      	bne.n	801bc30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801bc1a:	f8da 0000 	ldr.w	r0, [sl]
 801bc1e:	fb09 f303 	mul.w	r3, r9, r3
 801bc22:	4629      	mov	r1, r5
 801bc24:	6802      	ldr	r2, [r0, #0]
 801bc26:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801bc2a:	4632      	mov	r2, r6
 801bc2c:	47d0      	blx	sl
 801bc2e:	e7d2      	b.n	801bbd6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801bc30:	9a03      	ldr	r2, [sp, #12]
 801bc32:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801bc70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801bc36:	fb02 5803 	mla	r8, r2, r3, r5
 801bc3a:	4545      	cmp	r5, r8
 801bc3c:	d2cb      	bcs.n	801bbd6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801bc3e:	f8db 0000 	ldr.w	r0, [fp]
 801bc42:	4629      	mov	r1, r5
 801bc44:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801bc48:	6802      	ldr	r2, [r0, #0]
 801bc4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc4e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801bc52:	4632      	mov	r2, r6
 801bc54:	47d0      	blx	sl
 801bc56:	9b03      	ldr	r3, [sp, #12]
 801bc58:	444e      	add	r6, r9
 801bc5a:	441d      	add	r5, r3
 801bc5c:	e7ed      	b.n	801bc3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801bc5e:	bf00      	nop
 801bc60:	2400f234 	.word	0x2400f234
 801bc64:	2400f236 	.word	0x2400f236
 801bc68:	2400f23a 	.word	0x2400f23a
 801bc6c:	2400f238 	.word	0x2400f238
 801bc70:	2400f240 	.word	0x2400f240

0801bc74 <_ZN8touchgfx8LCD24bppC1Ev>:
 801bc74:	2200      	movs	r2, #0
 801bc76:	490c      	ldr	r1, [pc, #48]	; (801bca8 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801bc78:	6042      	str	r2, [r0, #4]
 801bc7a:	6001      	str	r1, [r0, #0]
 801bc7c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801bc80:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801bc84:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801bc88:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801bc8c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801bc90:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801bc94:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801bc98:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801bc9c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801bca0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801bca4:	4770      	bx	lr
 801bca6:	bf00      	nop
 801bca8:	0802599c 	.word	0x0802599c

0801bcac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb0:	b091      	sub	sp, #68	; 0x44
 801bcb2:	4607      	mov	r7, r0
 801bcb4:	4688      	mov	r8, r1
 801bcb6:	6810      	ldr	r0, [r2, #0]
 801bcb8:	6851      	ldr	r1, [r2, #4]
 801bcba:	ac0c      	add	r4, sp, #48	; 0x30
 801bcbc:	4616      	mov	r6, r2
 801bcbe:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801bcc2:	4d64      	ldr	r5, [pc, #400]	; (801be54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801bcc4:	f8df a190 	ldr.w	sl, [pc, #400]	; 801be58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801bcc8:	c403      	stmia	r4!, {r0, r1}
 801bcca:	6818      	ldr	r0, [r3, #0]
 801bccc:	ac0e      	add	r4, sp, #56	; 0x38
 801bcce:	6859      	ldr	r1, [r3, #4]
 801bcd0:	c403      	stmia	r4!, {r0, r1}
 801bcd2:	a80c      	add	r0, sp, #48	; 0x30
 801bcd4:	f7fa fae4 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bcd8:	4631      	mov	r1, r6
 801bcda:	a80e      	add	r0, sp, #56	; 0x38
 801bcdc:	f7fa fb08 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bce0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801bce4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bce8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801bcec:	6828      	ldr	r0, [r5, #0]
 801bcee:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bcf2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801bcf6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801bcfa:	440f      	add	r7, r1
 801bcfc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801bd00:	440a      	add	r2, r1
 801bd02:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801bd06:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801bd0a:	4413      	add	r3, r2
 801bd0c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bd10:	6803      	ldr	r3, [r0, #0]
 801bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd14:	4798      	blx	r3
 801bd16:	f010 0f80 	tst.w	r0, #128	; 0x80
 801bd1a:	6828      	ldr	r0, [r5, #0]
 801bd1c:	d01f      	beq.n	801bd5e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801bd1e:	2201      	movs	r2, #1
 801bd20:	2500      	movs	r5, #0
 801bd22:	6801      	ldr	r1, [r0, #0]
 801bd24:	b2a4      	uxth	r4, r4
 801bd26:	b2b6      	uxth	r6, r6
 801bd28:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bd2c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801bd30:	250b      	movs	r5, #11
 801bd32:	9507      	str	r5, [sp, #28]
 801bd34:	f8ba 5000 	ldrh.w	r5, [sl]
 801bd38:	f8cd 9010 	str.w	r9, [sp, #16]
 801bd3c:	9602      	str	r6, [sp, #8]
 801bd3e:	9401      	str	r4, [sp, #4]
 801bd40:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801bd44:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801bd48:	9203      	str	r2, [sp, #12]
 801bd4a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bd4e:	9200      	str	r2, [sp, #0]
 801bd50:	4642      	mov	r2, r8
 801bd52:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801bd54:	4639      	mov	r1, r7
 801bd56:	47a0      	blx	r4
 801bd58:	b011      	add	sp, #68	; 0x44
 801bd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd5e:	6803      	ldr	r3, [r0, #0]
 801bd60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd62:	4798      	blx	r3
 801bd64:	f8ba 5000 	ldrh.w	r5, [sl]
 801bd68:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801bd6c:	f04f 0e04 	mov.w	lr, #4
 801bd70:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bd74:	436e      	muls	r6, r5
 801bd76:	fb05 2303 	mla	r3, r5, r3, r2
 801bd7a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bd7e:	1b2d      	subs	r5, r5, r4
 801bd80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd88:	4418      	add	r0, r3
 801bd8a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801bd8e:	1982      	adds	r2, r0, r6
 801bd90:	1b1b      	subs	r3, r3, r4
 801bd92:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd96:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd98:	4290      	cmp	r0, r2
 801bd9a:	d254      	bcs.n	801be46 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bd9c:	eb00 0a04 	add.w	sl, r0, r4
 801bda0:	4550      	cmp	r0, sl
 801bda2:	d24c      	bcs.n	801be3e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801bda4:	f817 1b01 	ldrb.w	r1, [r7], #1
 801bda8:	fb1e e101 	smlabb	r1, lr, r1, lr
 801bdac:	eb08 0c01 	add.w	ip, r8, r1
 801bdb0:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801bdb4:	b173      	cbz	r3, 801bdd4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801bdb6:	2bff      	cmp	r3, #255	; 0xff
 801bdb8:	f818 b001 	ldrb.w	fp, [r8, r1]
 801bdbc:	d10c      	bne.n	801bdd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801bdbe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bdc2:	d109      	bne.n	801bdd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801bdc4:	f880 b000 	strb.w	fp, [r0]
 801bdc8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801bdcc:	7043      	strb	r3, [r0, #1]
 801bdce:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801bdd2:	7083      	strb	r3, [r0, #2]
 801bdd4:	3003      	adds	r0, #3
 801bdd6:	e7e3      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801bdd8:	fb09 f103 	mul.w	r1, r9, r3
 801bddc:	1c4b      	adds	r3, r1, #1
 801bdde:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bde2:	7801      	ldrb	r1, [r0, #0]
 801bde4:	121b      	asrs	r3, r3, #8
 801bde6:	b29e      	uxth	r6, r3
 801bde8:	43db      	mvns	r3, r3
 801bdea:	fb1b fb06 	smulbb	fp, fp, r6
 801bdee:	b2db      	uxtb	r3, r3
 801bdf0:	fb01 b103 	mla	r1, r1, r3, fp
 801bdf4:	b289      	uxth	r1, r1
 801bdf6:	f101 0b01 	add.w	fp, r1, #1
 801bdfa:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801bdfe:	f890 b001 	ldrb.w	fp, [r0, #1]
 801be02:	fb1b fb03 	smulbb	fp, fp, r3
 801be06:	1209      	asrs	r1, r1, #8
 801be08:	7001      	strb	r1, [r0, #0]
 801be0a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801be0e:	fb01 b106 	mla	r1, r1, r6, fp
 801be12:	b289      	uxth	r1, r1
 801be14:	f101 0b01 	add.w	fp, r1, #1
 801be18:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801be1c:	1209      	asrs	r1, r1, #8
 801be1e:	7041      	strb	r1, [r0, #1]
 801be20:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801be24:	f890 c002 	ldrb.w	ip, [r0, #2]
 801be28:	fb1c f303 	smulbb	r3, ip, r3
 801be2c:	fb01 3606 	mla	r6, r1, r6, r3
 801be30:	b2b6      	uxth	r6, r6
 801be32:	1c73      	adds	r3, r6, #1
 801be34:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801be38:	1236      	asrs	r6, r6, #8
 801be3a:	7086      	strb	r6, [r0, #2]
 801be3c:	e7ca      	b.n	801bdd4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801be3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be40:	4428      	add	r0, r5
 801be42:	441f      	add	r7, r3
 801be44:	e7a8      	b.n	801bd98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801be46:	4b03      	ldr	r3, [pc, #12]	; (801be54 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801be48:	6818      	ldr	r0, [r3, #0]
 801be4a:	6803      	ldr	r3, [r0, #0]
 801be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be4e:	4798      	blx	r3
 801be50:	e782      	b.n	801bd58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801be52:	bf00      	nop
 801be54:	2400f240 	.word	0x2400f240
 801be58:	2400f23a 	.word	0x2400f23a

0801be5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be60:	b091      	sub	sp, #68	; 0x44
 801be62:	4680      	mov	r8, r0
 801be64:	460e      	mov	r6, r1
 801be66:	6810      	ldr	r0, [r2, #0]
 801be68:	6851      	ldr	r1, [r2, #4]
 801be6a:	ad0c      	add	r5, sp, #48	; 0x30
 801be6c:	4614      	mov	r4, r2
 801be6e:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801be72:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801c00c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801be76:	f8df a198 	ldr.w	sl, [pc, #408]	; 801c010 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801be7a:	c503      	stmia	r5!, {r0, r1}
 801be7c:	6818      	ldr	r0, [r3, #0]
 801be7e:	ad0e      	add	r5, sp, #56	; 0x38
 801be80:	6859      	ldr	r1, [r3, #4]
 801be82:	c503      	stmia	r5!, {r0, r1}
 801be84:	a80c      	add	r0, sp, #48	; 0x30
 801be86:	f7fa fa0b 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801be8a:	4621      	mov	r1, r4
 801be8c:	a80e      	add	r0, sp, #56	; 0x38
 801be8e:	f7fa fa2f 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801be92:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801be96:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801be9a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801be9e:	f8d9 0000 	ldr.w	r0, [r9]
 801bea2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bea6:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801beaa:	eb08 0401 	add.w	r4, r8, r1
 801beae:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801beb2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801beb6:	440a      	add	r2, r1
 801beb8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801bebc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801bec0:	4413      	add	r3, r2
 801bec2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801bec6:	6803      	ldr	r3, [r0, #0]
 801bec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801beca:	4798      	blx	r3
 801becc:	f010 0f80 	tst.w	r0, #128	; 0x80
 801bed0:	f8d9 0000 	ldr.w	r0, [r9]
 801bed4:	d022      	beq.n	801bf1c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801bed6:	2200      	movs	r2, #0
 801bed8:	f04f 0c01 	mov.w	ip, #1
 801bedc:	6801      	ldr	r1, [r0, #0]
 801bede:	b2ad      	uxth	r5, r5
 801bee0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801bee4:	e9cd c208 	strd	ip, r2, [sp, #32]
 801bee8:	f04f 0c0b 	mov.w	ip, #11
 801beec:	f8cd c01c 	str.w	ip, [sp, #28]
 801bef0:	f8ba c000 	ldrh.w	ip, [sl]
 801bef4:	9704      	str	r7, [sp, #16]
 801bef6:	9502      	str	r5, [sp, #8]
 801bef8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801befc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801bf00:	9203      	str	r2, [sp, #12]
 801bf02:	fa1f f288 	uxth.w	r2, r8
 801bf06:	9201      	str	r2, [sp, #4]
 801bf08:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801bf0c:	9200      	str	r2, [sp, #0]
 801bf0e:	4632      	mov	r2, r6
 801bf10:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801bf12:	4621      	mov	r1, r4
 801bf14:	47a8      	blx	r5
 801bf16:	b011      	add	sp, #68	; 0x44
 801bf18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf1c:	6803      	ldr	r3, [r0, #0]
 801bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf20:	4798      	blx	r3
 801bf22:	f8ba 2000 	ldrh.w	r2, [sl]
 801bf26:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801bf2a:	f04f 0e03 	mov.w	lr, #3
 801bf2e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801bf32:	4355      	muls	r5, r2
 801bf34:	fa1f fc87 	uxth.w	ip, r7
 801bf38:	fb02 1303 	mla	r3, r2, r3, r1
 801bf3c:	eba2 0208 	sub.w	r2, r2, r8
 801bf40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf4c:	4418      	add	r0, r3
 801bf4e:	920b      	str	r2, [sp, #44]	; 0x2c
 801bf50:	1943      	adds	r3, r0, r5
 801bf52:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801bf56:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801bf5a:	eba2 0208 	sub.w	r2, r2, r8
 801bf5e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bf62:	b2ad      	uxth	r5, r5
 801bf64:	4298      	cmp	r0, r3
 801bf66:	d24a      	bcs.n	801bffe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801bf68:	eb00 0908 	add.w	r9, r0, r8
 801bf6c:	4621      	mov	r1, r4
 801bf6e:	4548      	cmp	r0, r9
 801bf70:	460c      	mov	r4, r1
 801bf72:	d240      	bcs.n	801bff6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801bf74:	f04f 0a04 	mov.w	sl, #4
 801bf78:	7824      	ldrb	r4, [r4, #0]
 801bf7a:	2fff      	cmp	r7, #255	; 0xff
 801bf7c:	f101 0101 	add.w	r1, r1, #1
 801bf80:	fb1e a404 	smlabb	r4, lr, r4, sl
 801bf84:	eb06 0a04 	add.w	sl, r6, r4
 801bf88:	f816 b004 	ldrb.w	fp, [r6, r4]
 801bf8c:	d02b      	beq.n	801bfe6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801bf8e:	7804      	ldrb	r4, [r0, #0]
 801bf90:	fb14 f405 	smulbb	r4, r4, r5
 801bf94:	fb0b 440c 	mla	r4, fp, ip, r4
 801bf98:	b2a4      	uxth	r4, r4
 801bf9a:	f104 0b01 	add.w	fp, r4, #1
 801bf9e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bfa2:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bfa6:	fb1b fb05 	smulbb	fp, fp, r5
 801bfaa:	1224      	asrs	r4, r4, #8
 801bfac:	7004      	strb	r4, [r0, #0]
 801bfae:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bfb2:	fb04 b40c 	mla	r4, r4, ip, fp
 801bfb6:	b2a4      	uxth	r4, r4
 801bfb8:	f104 0b01 	add.w	fp, r4, #1
 801bfbc:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801bfc0:	1224      	asrs	r4, r4, #8
 801bfc2:	7044      	strb	r4, [r0, #1]
 801bfc4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bfc8:	f890 a002 	ldrb.w	sl, [r0, #2]
 801bfcc:	fb1a fa05 	smulbb	sl, sl, r5
 801bfd0:	fb04 a40c 	mla	r4, r4, ip, sl
 801bfd4:	b2a4      	uxth	r4, r4
 801bfd6:	f104 0a01 	add.w	sl, r4, #1
 801bfda:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bfde:	1224      	asrs	r4, r4, #8
 801bfe0:	7084      	strb	r4, [r0, #2]
 801bfe2:	3003      	adds	r0, #3
 801bfe4:	e7c3      	b.n	801bf6e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801bfe6:	f880 b000 	strb.w	fp, [r0]
 801bfea:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801bfee:	7044      	strb	r4, [r0, #1]
 801bff0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bff4:	e7f4      	b.n	801bfe0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801bff6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bff8:	4420      	add	r0, r4
 801bffa:	188c      	adds	r4, r1, r2
 801bffc:	e7b2      	b.n	801bf64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801bffe:	4b03      	ldr	r3, [pc, #12]	; (801c00c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801c000:	6818      	ldr	r0, [r3, #0]
 801c002:	6803      	ldr	r3, [r0, #0]
 801c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c006:	4798      	blx	r3
 801c008:	e785      	b.n	801bf16 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801c00a:	bf00      	nop
 801c00c:	2400f240 	.word	0x2400f240
 801c010:	2400f23a 	.word	0x2400f23a

0801c014 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801c014:	b430      	push	{r4, r5}
 801c016:	780d      	ldrb	r5, [r1, #0]
 801c018:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801c01c:	b11d      	cbz	r5, 801c026 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801c01e:	2d01      	cmp	r5, #1
 801c020:	d005      	beq.n	801c02e <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801c022:	bc30      	pop	{r4, r5}
 801c024:	4770      	bx	lr
 801c026:	9402      	str	r4, [sp, #8]
 801c028:	bc30      	pop	{r4, r5}
 801c02a:	f7ff be3f 	b.w	801bcac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801c02e:	9402      	str	r4, [sp, #8]
 801c030:	bc30      	pop	{r4, r5}
 801c032:	f7ff bf13 	b.w	801be5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801c038 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801c038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c03c:	4605      	mov	r5, r0
 801c03e:	b08f      	sub	sp, #60	; 0x3c
 801c040:	460c      	mov	r4, r1
 801c042:	461f      	mov	r7, r3
 801c044:	2b00      	cmp	r3, #0
 801c046:	d052      	beq.n	801c0ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c048:	6808      	ldr	r0, [r1, #0]
 801c04a:	ab0a      	add	r3, sp, #40	; 0x28
 801c04c:	6849      	ldr	r1, [r1, #4]
 801c04e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801c218 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801c052:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801c21c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801c056:	c303      	stmia	r3!, {r0, r1}
 801c058:	6810      	ldr	r0, [r2, #0]
 801c05a:	ab0c      	add	r3, sp, #48	; 0x30
 801c05c:	6851      	ldr	r1, [r2, #4]
 801c05e:	c303      	stmia	r3!, {r0, r1}
 801c060:	a80a      	add	r0, sp, #40	; 0x28
 801c062:	f7fa f91d 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c066:	4621      	mov	r1, r4
 801c068:	a80c      	add	r0, sp, #48	; 0x30
 801c06a:	f7fa f941 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c06e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801c072:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c076:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c07a:	f8d8 0000 	ldr.w	r0, [r8]
 801c07e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c082:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801c086:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801c08a:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801c08e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801c092:	440a      	add	r2, r1
 801c094:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801c098:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801c09c:	4413      	add	r3, r2
 801c09e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801c0a2:	6803      	ldr	r3, [r0, #0]
 801c0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0a6:	4798      	blx	r3
 801c0a8:	2fff      	cmp	r7, #255	; 0xff
 801c0aa:	d023      	beq.n	801c0f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801c0ac:	f010 0f04 	tst.w	r0, #4
 801c0b0:	f8d8 0000 	ldr.w	r0, [r8]
 801c0b4:	d021      	beq.n	801c0fa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801c0b6:	2100      	movs	r1, #0
 801c0b8:	f04f 0e01 	mov.w	lr, #1
 801c0bc:	f8d0 c000 	ldr.w	ip, [r0]
 801c0c0:	b2a4      	uxth	r4, r4
 801c0c2:	9106      	str	r1, [sp, #24]
 801c0c4:	b2b6      	uxth	r6, r6
 801c0c6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801c0ca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801c0ce:	e9cd e107 	strd	lr, r1, [sp, #28]
 801c0d2:	f8b9 e000 	ldrh.w	lr, [r9]
 801c0d6:	9703      	str	r7, [sp, #12]
 801c0d8:	9401      	str	r4, [sp, #4]
 801c0da:	9600      	str	r6, [sp, #0]
 801c0dc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801c0e0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c0e4:	9102      	str	r1, [sp, #8]
 801c0e6:	4629      	mov	r1, r5
 801c0e8:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801c0ec:	47a0      	blx	r4
 801c0ee:	b00f      	add	sp, #60	; 0x3c
 801c0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0f4:	f010 0f01 	tst.w	r0, #1
 801c0f8:	e7da      	b.n	801c0b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801c0fa:	6803      	ldr	r3, [r0, #0]
 801c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c0fe:	4798      	blx	r3
 801c100:	f8b9 1000 	ldrh.w	r1, [r9]
 801c104:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801c108:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801c10c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801c110:	434c      	muls	r4, r1
 801c112:	2fff      	cmp	r7, #255	; 0xff
 801c114:	fb01 2303 	mla	r3, r1, r3, r2
 801c118:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c11c:	eba1 0106 	sub.w	r1, r1, r6
 801c120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c124:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c128:	4418      	add	r0, r3
 801c12a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801c12e:	eba3 0606 	sub.w	r6, r3, r6
 801c132:	4404      	add	r4, r0
 801c134:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801c138:	d04a      	beq.n	801c1d0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801c13a:	43fa      	mvns	r2, r7
 801c13c:	b2bb      	uxth	r3, r7
 801c13e:	b2d7      	uxtb	r7, r2
 801c140:	42a0      	cmp	r0, r4
 801c142:	d263      	bcs.n	801c20c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c144:	eb00 0e0c 	add.w	lr, r0, ip
 801c148:	4586      	cmp	lr, r0
 801c14a:	f100 0803 	add.w	r8, r0, #3
 801c14e:	d93a      	bls.n	801c1c6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801c150:	f835 2b02 	ldrh.w	r2, [r5], #2
 801c154:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801c158:	00d0      	lsls	r0, r2, #3
 801c15a:	fb19 f907 	smulbb	r9, r9, r7
 801c15e:	b2c0      	uxtb	r0, r0
 801c160:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801c164:	fb00 9003 	mla	r0, r0, r3, r9
 801c168:	b280      	uxth	r0, r0
 801c16a:	f100 0901 	add.w	r9, r0, #1
 801c16e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c172:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801c176:	fb19 f907 	smulbb	r9, r9, r7
 801c17a:	1200      	asrs	r0, r0, #8
 801c17c:	f808 0c03 	strb.w	r0, [r8, #-3]
 801c180:	10d0      	asrs	r0, r2, #3
 801c182:	1212      	asrs	r2, r2, #8
 801c184:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c188:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c18c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801c190:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c194:	fb00 9003 	mla	r0, r0, r3, r9
 801c198:	b280      	uxth	r0, r0
 801c19a:	f100 0901 	add.w	r9, r0, #1
 801c19e:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801c1a2:	1200      	asrs	r0, r0, #8
 801c1a4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801c1a8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801c1ac:	fb10 f007 	smulbb	r0, r0, r7
 801c1b0:	fb02 0203 	mla	r2, r2, r3, r0
 801c1b4:	b292      	uxth	r2, r2
 801c1b6:	1c50      	adds	r0, r2, #1
 801c1b8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c1bc:	4640      	mov	r0, r8
 801c1be:	1212      	asrs	r2, r2, #8
 801c1c0:	f808 2c01 	strb.w	r2, [r8, #-1]
 801c1c4:	e7c0      	b.n	801c148 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801c1c6:	4408      	add	r0, r1
 801c1c8:	4435      	add	r5, r6
 801c1ca:	e7b9      	b.n	801c140 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801c1cc:	4408      	add	r0, r1
 801c1ce:	4435      	add	r5, r6
 801c1d0:	42a0      	cmp	r0, r4
 801c1d2:	d21b      	bcs.n	801c20c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801c1d4:	eb00 070c 	add.w	r7, r0, ip
 801c1d8:	42b8      	cmp	r0, r7
 801c1da:	d2f7      	bcs.n	801c1cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801c1dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 801c1e0:	3003      	adds	r0, #3
 801c1e2:	00da      	lsls	r2, r3, #3
 801c1e4:	b2d2      	uxtb	r2, r2
 801c1e6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801c1ea:	f800 2c03 	strb.w	r2, [r0, #-3]
 801c1ee:	10da      	asrs	r2, r3, #3
 801c1f0:	121b      	asrs	r3, r3, #8
 801c1f2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c1f6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c1fa:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801c1fe:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801c202:	f800 2c02 	strb.w	r2, [r0, #-2]
 801c206:	f800 3c01 	strb.w	r3, [r0, #-1]
 801c20a:	e7e5      	b.n	801c1d8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801c20c:	4b02      	ldr	r3, [pc, #8]	; (801c218 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801c20e:	6818      	ldr	r0, [r3, #0]
 801c210:	6803      	ldr	r3, [r0, #0]
 801c212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c214:	4798      	blx	r3
 801c216:	e76a      	b.n	801c0ee <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801c218:	2400f240 	.word	0x2400f240
 801c21c:	2400f23a 	.word	0x2400f23a

0801c220 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801c220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c224:	b08a      	sub	sp, #40	; 0x28
 801c226:	460d      	mov	r5, r1
 801c228:	4604      	mov	r4, r0
 801c22a:	461e      	mov	r6, r3
 801c22c:	6808      	ldr	r0, [r1, #0]
 801c22e:	ab06      	add	r3, sp, #24
 801c230:	6849      	ldr	r1, [r1, #4]
 801c232:	4f5d      	ldr	r7, [pc, #372]	; (801c3a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801c234:	c303      	stmia	r3!, {r0, r1}
 801c236:	6810      	ldr	r0, [r2, #0]
 801c238:	ab08      	add	r3, sp, #32
 801c23a:	6851      	ldr	r1, [r2, #4]
 801c23c:	c303      	stmia	r3!, {r0, r1}
 801c23e:	a806      	add	r0, sp, #24
 801c240:	f7fa f82e 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c244:	4629      	mov	r1, r5
 801c246:	a808      	add	r0, sp, #32
 801c248:	f7fa f852 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c24c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c250:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c254:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c258:	6838      	ldr	r0, [r7, #0]
 801c25a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c25e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801c262:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801c266:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801c26a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c26e:	440a      	add	r2, r1
 801c270:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c274:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c278:	4413      	add	r3, r2
 801c27a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c27e:	6803      	ldr	r3, [r0, #0]
 801c280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c282:	4798      	blx	r3
 801c284:	2eff      	cmp	r6, #255	; 0xff
 801c286:	d119      	bne.n	801c2bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801c288:	f010 0f20 	tst.w	r0, #32
 801c28c:	6838      	ldr	r0, [r7, #0]
 801c28e:	d018      	beq.n	801c2c2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801c290:	b2ad      	uxth	r5, r5
 801c292:	2700      	movs	r7, #0
 801c294:	6801      	ldr	r1, [r0, #0]
 801c296:	9501      	str	r5, [sp, #4]
 801c298:	fa1f f588 	uxth.w	r5, r8
 801c29c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801c2a0:	9500      	str	r5, [sp, #0]
 801c2a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c2a6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801c2aa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801c2ae:	9602      	str	r6, [sp, #8]
 801c2b0:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801c2b2:	4621      	mov	r1, r4
 801c2b4:	47a8      	blx	r5
 801c2b6:	b00a      	add	sp, #40	; 0x28
 801c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c2c0:	e7e4      	b.n	801c28c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801c2c2:	6803      	ldr	r3, [r0, #0]
 801c2c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c2c6:	4798      	blx	r3
 801c2c8:	4b38      	ldr	r3, [pc, #224]	; (801c3ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801c2ca:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c2ce:	f8b3 c000 	ldrh.w	ip, [r3]
 801c2d2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801c2d6:	fb0c f505 	mul.w	r5, ip, r5
 801c2da:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801c2de:	fb0c 2303 	mla	r3, ip, r3, r2
 801c2e2:	ebac 0c08 	sub.w	ip, ip, r8
 801c2e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c2ea:	ebae 0e08 	sub.w	lr, lr, r8
 801c2ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c2f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c2f6:	4418      	add	r0, r3
 801c2f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801c2fc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801c300:	4405      	add	r5, r0
 801c302:	42a8      	cmp	r0, r5
 801c304:	d24a      	bcs.n	801c39c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801c306:	eb00 0803 	add.w	r8, r0, r3
 801c30a:	4540      	cmp	r0, r8
 801c30c:	d243      	bcs.n	801c396 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801c30e:	78e2      	ldrb	r2, [r4, #3]
 801c310:	b15a      	cbz	r2, 801c32a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801c312:	2aff      	cmp	r2, #255	; 0xff
 801c314:	f894 9000 	ldrb.w	r9, [r4]
 801c318:	d10a      	bne.n	801c330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c31a:	2eff      	cmp	r6, #255	; 0xff
 801c31c:	d108      	bne.n	801c330 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801c31e:	f880 9000 	strb.w	r9, [r0]
 801c322:	7862      	ldrb	r2, [r4, #1]
 801c324:	7042      	strb	r2, [r0, #1]
 801c326:	78a2      	ldrb	r2, [r4, #2]
 801c328:	7082      	strb	r2, [r0, #2]
 801c32a:	3003      	adds	r0, #3
 801c32c:	3404      	adds	r4, #4
 801c32e:	e7ec      	b.n	801c30a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801c330:	4372      	muls	r2, r6
 801c332:	1c51      	adds	r1, r2, #1
 801c334:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801c338:	1209      	asrs	r1, r1, #8
 801c33a:	fa1f fa81 	uxth.w	sl, r1
 801c33e:	43c9      	mvns	r1, r1
 801c340:	fb19 f90a 	smulbb	r9, r9, sl
 801c344:	b2ca      	uxtb	r2, r1
 801c346:	7801      	ldrb	r1, [r0, #0]
 801c348:	fb01 9902 	mla	r9, r1, r2, r9
 801c34c:	fa1f f989 	uxth.w	r9, r9
 801c350:	f109 0101 	add.w	r1, r9, #1
 801c354:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801c358:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c35c:	f880 9000 	strb.w	r9, [r0]
 801c360:	f890 9001 	ldrb.w	r9, [r0, #1]
 801c364:	7861      	ldrb	r1, [r4, #1]
 801c366:	fb19 f902 	smulbb	r9, r9, r2
 801c36a:	fb01 910a 	mla	r1, r1, sl, r9
 801c36e:	b289      	uxth	r1, r1
 801c370:	f101 0901 	add.w	r9, r1, #1
 801c374:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801c378:	1209      	asrs	r1, r1, #8
 801c37a:	7041      	strb	r1, [r0, #1]
 801c37c:	7881      	ldrb	r1, [r0, #2]
 801c37e:	f894 9002 	ldrb.w	r9, [r4, #2]
 801c382:	fb11 f202 	smulbb	r2, r1, r2
 801c386:	fb09 220a 	mla	r2, r9, sl, r2
 801c38a:	b292      	uxth	r2, r2
 801c38c:	1c51      	adds	r1, r2, #1
 801c38e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c392:	1212      	asrs	r2, r2, #8
 801c394:	e7c8      	b.n	801c328 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801c396:	4460      	add	r0, ip
 801c398:	4474      	add	r4, lr
 801c39a:	e7b2      	b.n	801c302 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801c39c:	6838      	ldr	r0, [r7, #0]
 801c39e:	6803      	ldr	r3, [r0, #0]
 801c3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3a2:	4798      	blx	r3
 801c3a4:	e787      	b.n	801c2b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801c3a6:	bf00      	nop
 801c3a8:	2400f240 	.word	0x2400f240
 801c3ac:	2400f23a 	.word	0x2400f23a

0801c3b0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801c3b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c3b4:	b085      	sub	sp, #20
 801c3b6:	4606      	mov	r6, r0
 801c3b8:	460c      	mov	r4, r1
 801c3ba:	4691      	mov	r9, r2
 801c3bc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801c3c0:	4698      	mov	r8, r3
 801c3c2:	b31d      	cbz	r5, 801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c3c4:	4608      	mov	r0, r1
 801c3c6:	f7fd fa4f 	bl	8019868 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c3ca:	4607      	mov	r7, r0
 801c3cc:	4620      	mov	r0, r4
 801c3ce:	f7fd fa7f 	bl	80198d0 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c3d2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801c3dc:	f8ad 800a 	strh.w	r8, [sp, #10]
 801c3e0:	f8ad 700c 	strh.w	r7, [sp, #12]
 801c3e4:	f7fd fb78 	bl	8019ad8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c3e8:	280b      	cmp	r0, #11
 801c3ea:	d80f      	bhi.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c3ec:	e8df f000 	tbb	[pc, r0]
 801c3f0:	0e062920 	.word	0x0e062920
 801c3f4:	0e0e0e0e 	.word	0x0e0e0e0e
 801c3f8:	110e0e0e 	.word	0x110e0e0e
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f7fd fae7 	bl	80199d0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c402:	462b      	mov	r3, r5
 801c404:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c406:	a902      	add	r1, sp, #8
 801c408:	f7ff ff0a 	bl	801c220 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c40c:	b005      	add	sp, #20
 801c40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c412:	4620      	mov	r0, r4
 801c414:	f7fd fadc 	bl	80199d0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c418:	4606      	mov	r6, r0
 801c41a:	4620      	mov	r0, r4
 801c41c:	f7fd fb08 	bl	8019a30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801c420:	9500      	str	r5, [sp, #0]
 801c422:	4601      	mov	r1, r0
 801c424:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c426:	aa02      	add	r2, sp, #8
 801c428:	4630      	mov	r0, r6
 801c42a:	f7ff fdf3 	bl	801c014 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801c42e:	e7ed      	b.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c430:	4620      	mov	r0, r4
 801c432:	f7fd facd 	bl	80199d0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c436:	462b      	mov	r3, r5
 801c438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c43a:	a902      	add	r1, sp, #8
 801c43c:	f7ff fdfc 	bl	801c038 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c440:	e7e4      	b.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801c442:	6833      	ldr	r3, [r6, #0]
 801c444:	4620      	mov	r0, r4
 801c446:	68df      	ldr	r7, [r3, #12]
 801c448:	f7fd fac2 	bl	80199d0 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c44c:	2300      	movs	r3, #0
 801c44e:	4601      	mov	r1, r0
 801c450:	aa02      	add	r2, sp, #8
 801c452:	4630      	mov	r0, r6
 801c454:	e9cd 5300 	strd	r5, r3, [sp]
 801c458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c45a:	47b8      	blx	r7
 801c45c:	e7d6      	b.n	801c40c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801c45e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801c45e:	b4f0      	push	{r4, r5, r6, r7}
 801c460:	4616      	mov	r6, r2
 801c462:	461c      	mov	r4, r3
 801c464:	460d      	mov	r5, r1
 801c466:	9a04      	ldr	r2, [sp, #16]
 801c468:	2e01      	cmp	r6, #1
 801c46a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c46e:	d00e      	beq.n	801c48e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801c470:	d303      	bcc.n	801c47a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801c472:	2e02      	cmp	r6, #2
 801c474:	d006      	beq.n	801c484 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801c476:	bcf0      	pop	{r4, r5, r6, r7}
 801c478:	4770      	bx	lr
 801c47a:	4621      	mov	r1, r4
 801c47c:	4628      	mov	r0, r5
 801c47e:	bcf0      	pop	{r4, r5, r6, r7}
 801c480:	f7ff bdda 	b.w	801c038 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801c484:	4621      	mov	r1, r4
 801c486:	4628      	mov	r0, r5
 801c488:	bcf0      	pop	{r4, r5, r6, r7}
 801c48a:	f7ff bec9 	b.w	801c220 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801c48e:	6805      	ldr	r5, [r0, #0]
 801c490:	2600      	movs	r6, #0
 801c492:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801c496:	68ed      	ldr	r5, [r5, #12]
 801c498:	4613      	mov	r3, r2
 801c49a:	4622      	mov	r2, r4
 801c49c:	46ac      	mov	ip, r5
 801c49e:	bcf0      	pop	{r4, r5, r6, r7}
 801c4a0:	4760      	bx	ip
	...

0801c4a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801c4a4:	b160      	cbz	r0, 801c4c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801c4a6:	2903      	cmp	r1, #3
 801c4a8:	d818      	bhi.n	801c4dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c4aa:	e8df f001 	tbb	[pc, r1]
 801c4ae:	1902      	.short	0x1902
 801c4b0:	1b06      	.short	0x1b06
 801c4b2:	4b0e      	ldr	r3, [pc, #56]	; (801c4ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c4b4:	8818      	ldrh	r0, [r3, #0]
 801c4b6:	4240      	negs	r0, r0
 801c4b8:	4770      	bx	lr
 801c4ba:	4b0c      	ldr	r3, [pc, #48]	; (801c4ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801c4bc:	8818      	ldrh	r0, [r3, #0]
 801c4be:	4770      	bx	lr
 801c4c0:	2903      	cmp	r1, #3
 801c4c2:	d80b      	bhi.n	801c4dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801c4c4:	a301      	add	r3, pc, #4	; (adr r3, 801c4cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801c4c6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c4ca:	bf00      	nop
 801c4cc:	0801c4e1 	.word	0x0801c4e1
 801c4d0:	0801c4bb 	.word	0x0801c4bb
 801c4d4:	0801c4e5 	.word	0x0801c4e5
 801c4d8:	0801c4b3 	.word	0x0801c4b3
 801c4dc:	2000      	movs	r0, #0
 801c4de:	4770      	bx	lr
 801c4e0:	2001      	movs	r0, #1
 801c4e2:	4770      	bx	lr
 801c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 801c4e8:	4770      	bx	lr
 801c4ea:	bf00      	nop
 801c4ec:	2400f23a 	.word	0x2400f23a

0801c4f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801c4f0:	b160      	cbz	r0, 801c50c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801c4f2:	2903      	cmp	r1, #3
 801c4f4:	d818      	bhi.n	801c528 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c4f6:	e8df f001 	tbb	[pc, r1]
 801c4fa:	0219      	.short	0x0219
 801c4fc:	051b      	.short	0x051b
 801c4fe:	4b0e      	ldr	r3, [pc, #56]	; (801c538 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c500:	8818      	ldrh	r0, [r3, #0]
 801c502:	4770      	bx	lr
 801c504:	4b0c      	ldr	r3, [pc, #48]	; (801c538 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801c506:	8818      	ldrh	r0, [r3, #0]
 801c508:	4240      	negs	r0, r0
 801c50a:	4770      	bx	lr
 801c50c:	2903      	cmp	r1, #3
 801c50e:	d80b      	bhi.n	801c528 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801c510:	a301      	add	r3, pc, #4	; (adr r3, 801c518 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801c512:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801c516:	bf00      	nop
 801c518:	0801c4ff 	.word	0x0801c4ff
 801c51c:	0801c531 	.word	0x0801c531
 801c520:	0801c505 	.word	0x0801c505
 801c524:	0801c52d 	.word	0x0801c52d
 801c528:	2000      	movs	r0, #0
 801c52a:	4770      	bx	lr
 801c52c:	2001      	movs	r0, #1
 801c52e:	4770      	bx	lr
 801c530:	f04f 30ff 	mov.w	r0, #4294967295
 801c534:	4770      	bx	lr
 801c536:	bf00      	nop
 801c538:	2400f23a 	.word	0x2400f23a

0801c53c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c540:	b097      	sub	sp, #92	; 0x5c
 801c542:	910b      	str	r1, [sp, #44]	; 0x2c
 801c544:	a912      	add	r1, sp, #72	; 0x48
 801c546:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801c54a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801c54e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801c552:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801c556:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801c55a:	e881 000c 	stmia.w	r1, {r2, r3}
 801c55e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801c562:	930a      	str	r3, [sp, #40]	; 0x28
 801c564:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801c568:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801c56c:	9311      	str	r3, [sp, #68]	; 0x44
 801c56e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801c572:	798d      	ldrb	r5, [r1, #6]
 801c574:	930c      	str	r3, [sp, #48]	; 0x30
 801c576:	7b4b      	ldrb	r3, [r1, #13]
 801c578:	0158      	lsls	r0, r3, #5
 801c57a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c57e:	4328      	orrs	r0, r5
 801c580:	9009      	str	r0, [sp, #36]	; 0x24
 801c582:	f000 817c 	beq.w	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c586:	011b      	lsls	r3, r3, #4
 801c588:	79c8      	ldrb	r0, [r1, #7]
 801c58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c58e:	4303      	orrs	r3, r0
 801c590:	930e      	str	r3, [sp, #56]	; 0x38
 801c592:	f000 8174 	beq.w	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c596:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c59a:	b29b      	uxth	r3, r3
 801c59c:	2f00      	cmp	r7, #0
 801c59e:	f000 8116 	beq.w	801c7ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c5a2:	1aff      	subs	r7, r7, r3
 801c5a4:	b2bf      	uxth	r7, r7
 801c5a6:	043b      	lsls	r3, r7, #16
 801c5a8:	d502      	bpl.n	801c5b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c5aa:	1bf6      	subs	r6, r6, r7
 801c5ac:	2700      	movs	r7, #0
 801c5ae:	b236      	sxth	r6, r6
 801c5b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c5b4:	a812      	add	r0, sp, #72	; 0x48
 801c5b6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c5ba:	428e      	cmp	r6, r1
 801c5bc:	b28b      	uxth	r3, r1
 801c5be:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c5c2:	bfbf      	itttt	lt
 801c5c4:	18ff      	addlt	r7, r7, r3
 801c5c6:	1bbe      	sublt	r6, r7, r6
 801c5c8:	b2b7      	uxthlt	r7, r6
 801c5ca:	460e      	movlt	r6, r1
 801c5cc:	8891      	ldrh	r1, [r2, #4]
 801c5ce:	440b      	add	r3, r1
 801c5d0:	4631      	mov	r1, r6
 801c5d2:	b21b      	sxth	r3, r3
 801c5d4:	9310      	str	r3, [sp, #64]	; 0x40
 801c5d6:	88d3      	ldrh	r3, [r2, #6]
 801c5d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c5da:	449a      	add	sl, r3
 801c5dc:	fa0f f38a 	sxth.w	r3, sl
 801c5e0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801c5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5e6:	4bb5      	ldr	r3, [pc, #724]	; (801c8bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c5e8:	f893 b000 	ldrb.w	fp, [r3]
 801c5ec:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c5f0:	f1dc 0300 	rsbs	r3, ip, #0
 801c5f4:	eb43 030c 	adc.w	r3, r3, ip
 801c5f8:	930d      	str	r3, [sp, #52]	; 0x34
 801c5fa:	464b      	mov	r3, r9
 801c5fc:	f7f9 fcca 	bl	8015f94 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c600:	4631      	mov	r1, r6
 801c602:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801c606:	464b      	mov	r3, r9
 801c608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c60a:	a812      	add	r0, sp, #72	; 0x48
 801c60c:	f7f9 fcdf 	bl	8015fce <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c610:	a916      	add	r1, sp, #88	; 0x58
 801c612:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c616:	a815      	add	r0, sp, #84	; 0x54
 801c618:	f7f9 fe00 	bl	801621c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c61c:	f1b9 0f00 	cmp.w	r9, #0
 801c620:	f040 80d8 	bne.w	801c7d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c624:	f1bb 0f01 	cmp.w	fp, #1
 801c628:	f040 80dc 	bne.w	801c7e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c62c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c62e:	b153      	cbz	r3, 801c646 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c630:	2508      	movs	r5, #8
 801c632:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c634:	fb95 f3f8 	sdiv	r3, r5, r8
 801c638:	1e5d      	subs	r5, r3, #1
 801c63a:	4415      	add	r5, r2
 801c63c:	fb95 f5f3 	sdiv	r5, r5, r3
 801c640:	fb15 f503 	smulbb	r5, r5, r3
 801c644:	b2ad      	uxth	r5, r5
 801c646:	b907      	cbnz	r7, 801c64a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c648:	b16c      	cbz	r4, 801c666 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c64a:	fb04 7305 	mla	r3, r4, r5, r7
 801c64e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c650:	ebaa 0a04 	sub.w	sl, sl, r4
 801c654:	fb08 f303 	mul.w	r3, r8, r3
 801c658:	fa1f fa8a 	uxth.w	sl, sl
 801c65c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c660:	f003 0407 	and.w	r4, r3, #7
 801c664:	9226      	str	r2, [sp, #152]	; 0x98
 801c666:	4649      	mov	r1, r9
 801c668:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c66a:	f7ff ff1b 	bl	801c4a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c66e:	4683      	mov	fp, r0
 801c670:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c672:	f7ff ff3d 	bl	801c4f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c67a:	4681      	mov	r9, r0
 801c67c:	1a9b      	subs	r3, r3, r2
 801c67e:	459a      	cmp	sl, r3
 801c680:	bfa8      	it	ge
 801c682:	469a      	movge	sl, r3
 801c684:	f1ba 0f00 	cmp.w	sl, #0
 801c688:	f340 80f9 	ble.w	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c68c:	1bf6      	subs	r6, r6, r7
 801c68e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c690:	1b9e      	subs	r6, r3, r6
 801c692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c694:	429e      	cmp	r6, r3
 801c696:	bfd4      	ite	le
 801c698:	ebc7 0706 	rsble	r7, r7, r6
 801c69c:	ebc7 0703 	rsbgt	r7, r7, r3
 801c6a0:	2f00      	cmp	r7, #0
 801c6a2:	f340 80ec 	ble.w	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c6a6:	1bed      	subs	r5, r5, r7
 801c6a8:	fb08 f305 	mul.w	r3, r8, r5
 801c6ac:	930d      	str	r3, [sp, #52]	; 0x34
 801c6ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6b0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c6b4:	930e      	str	r3, [sp, #56]	; 0x38
 801c6b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801c6be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c6c0:	b2db      	uxtb	r3, r3
 801c6c2:	9310      	str	r3, [sp, #64]	; 0x40
 801c6c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f040 80de 	bne.w	801c888 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c6cc:	4b7c      	ldr	r3, [pc, #496]	; (801c8c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c6ce:	6818      	ldr	r0, [r3, #0]
 801c6d0:	6803      	ldr	r3, [r0, #0]
 801c6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6d4:	4798      	blx	r3
 801c6d6:	2301      	movs	r3, #1
 801c6d8:	4a7a      	ldr	r2, [pc, #488]	; (801c8c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c6da:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c6de:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c6e2:	fa03 f308 	lsl.w	r3, r3, r8
 801c6e6:	8811      	ldrh	r1, [r2, #0]
 801c6e8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c6ec:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c6f0:	3b01      	subs	r3, #1
 801c6f2:	fb06 bb07 	mla	fp, r6, r7, fp
 801c6f6:	b2db      	uxtb	r3, r3
 801c6f8:	930a      	str	r3, [sp, #40]	; 0x28
 801c6fa:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801c6fe:	fb01 2303 	mla	r3, r1, r3, r2
 801c702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c706:	18c3      	adds	r3, r0, r3
 801c708:	9309      	str	r3, [sp, #36]	; 0x24
 801c70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c70c:	781a      	ldrb	r2, [r3, #0]
 801c70e:	4122      	asrs	r2, r4
 801c710:	b2d2      	uxtb	r2, r2
 801c712:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c716:	f0c0 80d7 	bcc.w	801c8c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c71a:	46be      	mov	lr, r7
 801c71c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c71e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c722:	f0c0 80ba 	bcc.w	801c89a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c728:	4013      	ands	r3, r2
 801c72a:	d041      	beq.n	801c7b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c72c:	20ff      	movs	r0, #255	; 0xff
 801c72e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c730:	fb90 f5f5 	sdiv	r5, r0, r5
 801c734:	436b      	muls	r3, r5
 801c736:	2bfe      	cmp	r3, #254	; 0xfe
 801c738:	dd03      	ble.n	801c742 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c73a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c73c:	4285      	cmp	r5, r0
 801c73e:	f000 80a5 	beq.w	801c88c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c744:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c746:	fb15 f303 	smulbb	r3, r5, r3
 801c74a:	b29b      	uxth	r3, r3
 801c74c:	1c5d      	adds	r5, r3, #1
 801c74e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c752:	780d      	ldrb	r5, [r1, #0]
 801c754:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c758:	fa1f fc83 	uxth.w	ip, r3
 801c75c:	43db      	mvns	r3, r3
 801c75e:	fb10 f90c 	smulbb	r9, r0, ip
 801c762:	b2db      	uxtb	r3, r3
 801c764:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c766:	fb05 9503 	mla	r5, r5, r3, r9
 801c76a:	b2ad      	uxth	r5, r5
 801c76c:	f105 0901 	add.w	r9, r5, #1
 801c770:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c774:	fb10 f90c 	smulbb	r9, r0, ip
 801c778:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c77a:	122d      	asrs	r5, r5, #8
 801c77c:	fb10 fc0c 	smulbb	ip, r0, ip
 801c780:	700d      	strb	r5, [r1, #0]
 801c782:	784d      	ldrb	r5, [r1, #1]
 801c784:	fb05 9503 	mla	r5, r5, r3, r9
 801c788:	b2ad      	uxth	r5, r5
 801c78a:	f105 0901 	add.w	r9, r5, #1
 801c78e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c792:	122d      	asrs	r5, r5, #8
 801c794:	704d      	strb	r5, [r1, #1]
 801c796:	788d      	ldrb	r5, [r1, #2]
 801c798:	fb05 cc03 	mla	ip, r5, r3, ip
 801c79c:	fa1f fc8c 	uxth.w	ip, ip
 801c7a0:	f10c 0301 	add.w	r3, ip, #1
 801c7a4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c7a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c7ac:	f881 c002 	strb.w	ip, [r1, #2]
 801c7b0:	4444      	add	r4, r8
 801c7b2:	4431      	add	r1, r6
 801c7b4:	b2a4      	uxth	r4, r4
 801c7b6:	2c07      	cmp	r4, #7
 801c7b8:	bf89      	itett	hi
 801c7ba:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801c7bc:	fa42 f208 	asrls.w	r2, r2, r8
 801c7c0:	2400      	movhi	r4, #0
 801c7c2:	785a      	ldrbhi	r2, [r3, #1]
 801c7c4:	bf8a      	itet	hi
 801c7c6:	3301      	addhi	r3, #1
 801c7c8:	b2d2      	uxtbls	r2, r2
 801c7ca:	9326      	strhi	r3, [sp, #152]	; 0x98
 801c7cc:	e7a7      	b.n	801c71e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c7ce:	441e      	add	r6, r3
 801c7d0:	b236      	sxth	r6, r6
 801c7d2:	e6ed      	b.n	801c5b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c7d4:	f1b9 0f01 	cmp.w	r9, #1
 801c7d8:	f47f af28 	bne.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c7dc:	f1bb 0f01 	cmp.w	fp, #1
 801c7e0:	f47f af24 	bne.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c7e4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801c8c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c7e8:	f8db 0000 	ldr.w	r0, [fp]
 801c7ec:	6803      	ldr	r3, [r0, #0]
 801c7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c7f0:	4798      	blx	r3
 801c7f2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801c7f6:	465a      	mov	r2, fp
 801c7f8:	d006      	beq.n	801c808 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c7fa:	f1b8 0f04 	cmp.w	r8, #4
 801c7fe:	d141      	bne.n	801c884 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c802:	3300      	adds	r3, #0
 801c804:	bf18      	it	ne
 801c806:	2301      	movne	r3, #1
 801c808:	0580      	lsls	r0, r0, #22
 801c80a:	d566      	bpl.n	801c8da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c80c:	f1b8 0f08 	cmp.w	r8, #8
 801c810:	d163      	bne.n	801c8da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c812:	2b00      	cmp	r3, #0
 801c814:	bf0c      	ite	eq
 801c816:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801c81a:	f44f 7180 	movne.w	r1, #256	; 0x100
 801c81e:	2f00      	cmp	r7, #0
 801c820:	f47f af04 	bne.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c824:	2c00      	cmp	r4, #0
 801c826:	f47f af01 	bne.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c82c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c82e:	18f3      	adds	r3, r6, r3
 801c830:	4283      	cmp	r3, r0
 801c832:	f73f aefb 	bgt.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c836:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c83a:	4403      	add	r3, r0
 801c83c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c83e:	4283      	cmp	r3, r0
 801c840:	f73f aef4 	bgt.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c844:	f1b8 0f08 	cmp.w	r8, #8
 801c848:	6810      	ldr	r0, [r2, #0]
 801c84a:	f04f 0600 	mov.w	r6, #0
 801c84e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801c852:	bf18      	it	ne
 801c854:	3501      	addne	r5, #1
 801c856:	6804      	ldr	r4, [r0, #0]
 801c858:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801c85c:	bf18      	it	ne
 801c85e:	f025 0501 	bicne.w	r5, r5, #1
 801c862:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c866:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c868:	bf18      	it	ne
 801c86a:	b2ad      	uxthne	r5, r5
 801c86c:	9104      	str	r1, [sp, #16]
 801c86e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c870:	e9cd 5a00 	strd	r5, sl, [sp]
 801c874:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c878:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c87a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801c87c:	47a0      	blx	r4
 801c87e:	b017      	add	sp, #92	; 0x5c
 801c880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c884:	2300      	movs	r3, #0
 801c886:	e7bf      	b.n	801c808 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c888:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c88a:	e724      	b.n	801c6d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c88c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c88e:	700b      	strb	r3, [r1, #0]
 801c890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c892:	704b      	strb	r3, [r1, #1]
 801c894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c896:	708b      	strb	r3, [r1, #2]
 801c898:	e78a      	b.n	801c7b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c89a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c89c:	b153      	cbz	r3, 801c8b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c89e:	441c      	add	r4, r3
 801c8a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8a2:	b2a4      	uxth	r4, r4
 801c8a4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c8a8:	f004 0407 	and.w	r4, r4, #7
 801c8ac:	781a      	ldrb	r2, [r3, #0]
 801c8ae:	9326      	str	r3, [sp, #152]	; 0x98
 801c8b0:	4122      	asrs	r2, r4
 801c8b2:	b2d2      	uxtb	r2, r2
 801c8b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8b6:	445b      	add	r3, fp
 801c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 801c8ba:	e72a      	b.n	801c712 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c8bc:	2400f238 	.word	0x2400f238
 801c8c0:	2400f240 	.word	0x2400f240
 801c8c4:	2400f23a 	.word	0x2400f23a
 801c8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d1d7      	bne.n	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c8ce:	4b06      	ldr	r3, [pc, #24]	; (801c8e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c8d0:	6818      	ldr	r0, [r3, #0]
 801c8d2:	6803      	ldr	r3, [r0, #0]
 801c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8d6:	4798      	blx	r3
 801c8d8:	e7d1      	b.n	801c87e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	f43f aea6 	beq.w	801c62c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c8e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c8e4:	e79b      	b.n	801c81e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c8e6:	bf00      	nop
 801c8e8:	2400f240 	.word	0x2400f240

0801c8ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c8ec:	b538      	push	{r3, r4, r5, lr}
 801c8ee:	4c15      	ldr	r4, [pc, #84]	; (801c944 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c8f0:	4605      	mov	r5, r0
 801c8f2:	7823      	ldrb	r3, [r4, #0]
 801c8f4:	f3bf 8f5b 	dmb	ish
 801c8f8:	07da      	lsls	r2, r3, #31
 801c8fa:	d40b      	bmi.n	801c914 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c8fc:	4620      	mov	r0, r4
 801c8fe:	f005 fbb2 	bl	8022066 <__cxa_guard_acquire>
 801c902:	b138      	cbz	r0, 801c914 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c904:	4620      	mov	r0, r4
 801c906:	f005 fbba 	bl	802207e <__cxa_guard_release>
 801c90a:	4a0f      	ldr	r2, [pc, #60]	; (801c948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c90c:	490f      	ldr	r1, [pc, #60]	; (801c94c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c90e:	4810      	ldr	r0, [pc, #64]	; (801c950 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c910:	f005 fba2 	bl	8022058 <__aeabi_atexit>
 801c914:	4c0f      	ldr	r4, [pc, #60]	; (801c954 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c916:	7823      	ldrb	r3, [r4, #0]
 801c918:	f3bf 8f5b 	dmb	ish
 801c91c:	07db      	lsls	r3, r3, #31
 801c91e:	d40b      	bmi.n	801c938 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c920:	4620      	mov	r0, r4
 801c922:	f005 fba0 	bl	8022066 <__cxa_guard_acquire>
 801c926:	b138      	cbz	r0, 801c938 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c928:	4620      	mov	r0, r4
 801c92a:	f005 fba8 	bl	802207e <__cxa_guard_release>
 801c92e:	4a06      	ldr	r2, [pc, #24]	; (801c948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c930:	4909      	ldr	r1, [pc, #36]	; (801c958 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c932:	480a      	ldr	r0, [pc, #40]	; (801c95c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c934:	f005 fb90 	bl	8022058 <__aeabi_atexit>
 801c938:	4b05      	ldr	r3, [pc, #20]	; (801c950 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c93a:	612b      	str	r3, [r5, #16]
 801c93c:	4b07      	ldr	r3, [pc, #28]	; (801c95c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c93e:	616b      	str	r3, [r5, #20]
 801c940:	bd38      	pop	{r3, r4, r5, pc}
 801c942:	bf00      	nop
 801c944:	2400f314 	.word	0x2400f314
 801c948:	24000000 	.word	0x24000000
 801c94c:	0801b4b1 	.word	0x0801b4b1
 801c950:	240000a0 	.word	0x240000a0
 801c954:	2400f318 	.word	0x2400f318
 801c958:	0801b4af 	.word	0x0801b4af
 801c95c:	240000a4 	.word	0x240000a4

0801c960 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c960:	b538      	push	{r3, r4, r5, lr}
 801c962:	4c15      	ldr	r4, [pc, #84]	; (801c9b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c964:	4605      	mov	r5, r0
 801c966:	7823      	ldrb	r3, [r4, #0]
 801c968:	f3bf 8f5b 	dmb	ish
 801c96c:	07da      	lsls	r2, r3, #31
 801c96e:	d40b      	bmi.n	801c988 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c970:	4620      	mov	r0, r4
 801c972:	f005 fb78 	bl	8022066 <__cxa_guard_acquire>
 801c976:	b138      	cbz	r0, 801c988 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c978:	4620      	mov	r0, r4
 801c97a:	f005 fb80 	bl	802207e <__cxa_guard_release>
 801c97e:	4a0f      	ldr	r2, [pc, #60]	; (801c9bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c980:	490f      	ldr	r1, [pc, #60]	; (801c9c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c982:	4810      	ldr	r0, [pc, #64]	; (801c9c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c984:	f005 fb68 	bl	8022058 <__aeabi_atexit>
 801c988:	4c0f      	ldr	r4, [pc, #60]	; (801c9c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c98a:	7823      	ldrb	r3, [r4, #0]
 801c98c:	f3bf 8f5b 	dmb	ish
 801c990:	07db      	lsls	r3, r3, #31
 801c992:	d40b      	bmi.n	801c9ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c994:	4620      	mov	r0, r4
 801c996:	f005 fb66 	bl	8022066 <__cxa_guard_acquire>
 801c99a:	b138      	cbz	r0, 801c9ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c99c:	4620      	mov	r0, r4
 801c99e:	f005 fb6e 	bl	802207e <__cxa_guard_release>
 801c9a2:	4a06      	ldr	r2, [pc, #24]	; (801c9bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c9a4:	4909      	ldr	r1, [pc, #36]	; (801c9cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c9a6:	480a      	ldr	r0, [pc, #40]	; (801c9d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c9a8:	f005 fb56 	bl	8022058 <__aeabi_atexit>
 801c9ac:	4b05      	ldr	r3, [pc, #20]	; (801c9c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c9ae:	60ab      	str	r3, [r5, #8]
 801c9b0:	4b07      	ldr	r3, [pc, #28]	; (801c9d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c9b2:	60eb      	str	r3, [r5, #12]
 801c9b4:	bd38      	pop	{r3, r4, r5, pc}
 801c9b6:	bf00      	nop
 801c9b8:	2400f2f4 	.word	0x2400f2f4
 801c9bc:	24000000 	.word	0x24000000
 801c9c0:	0801b4b5 	.word	0x0801b4b5
 801c9c4:	24000080 	.word	0x24000080
 801c9c8:	2400f2f8 	.word	0x2400f2f8
 801c9cc:	0801b4b3 	.word	0x0801b4b3
 801c9d0:	24000084 	.word	0x24000084

0801c9d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c9d4:	b510      	push	{r4, lr}
 801c9d6:	4604      	mov	r4, r0
 801c9d8:	f7ff ff88 	bl	801c8ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c9dc:	4620      	mov	r0, r4
 801c9de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9e2:	f7ff bfbd 	b.w	801c960 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c9e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c9e8:	b538      	push	{r3, r4, r5, lr}
 801c9ea:	4c15      	ldr	r4, [pc, #84]	; (801ca40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c9ec:	4605      	mov	r5, r0
 801c9ee:	7823      	ldrb	r3, [r4, #0]
 801c9f0:	f3bf 8f5b 	dmb	ish
 801c9f4:	07da      	lsls	r2, r3, #31
 801c9f6:	d40b      	bmi.n	801ca10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c9f8:	4620      	mov	r0, r4
 801c9fa:	f005 fb34 	bl	8022066 <__cxa_guard_acquire>
 801c9fe:	b138      	cbz	r0, 801ca10 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801ca00:	4620      	mov	r0, r4
 801ca02:	f005 fb3c 	bl	802207e <__cxa_guard_release>
 801ca06:	4a0f      	ldr	r2, [pc, #60]	; (801ca44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ca08:	490f      	ldr	r1, [pc, #60]	; (801ca48 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801ca0a:	4810      	ldr	r0, [pc, #64]	; (801ca4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ca0c:	f005 fb24 	bl	8022058 <__aeabi_atexit>
 801ca10:	4c0f      	ldr	r4, [pc, #60]	; (801ca50 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801ca12:	7823      	ldrb	r3, [r4, #0]
 801ca14:	f3bf 8f5b 	dmb	ish
 801ca18:	07db      	lsls	r3, r3, #31
 801ca1a:	d40b      	bmi.n	801ca34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ca1c:	4620      	mov	r0, r4
 801ca1e:	f005 fb22 	bl	8022066 <__cxa_guard_acquire>
 801ca22:	b138      	cbz	r0, 801ca34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801ca24:	4620      	mov	r0, r4
 801ca26:	f005 fb2a 	bl	802207e <__cxa_guard_release>
 801ca2a:	4a06      	ldr	r2, [pc, #24]	; (801ca44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801ca2c:	4909      	ldr	r1, [pc, #36]	; (801ca54 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801ca2e:	480a      	ldr	r0, [pc, #40]	; (801ca58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ca30:	f005 fb12 	bl	8022058 <__aeabi_atexit>
 801ca34:	4b05      	ldr	r3, [pc, #20]	; (801ca4c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801ca36:	622b      	str	r3, [r5, #32]
 801ca38:	4b07      	ldr	r3, [pc, #28]	; (801ca58 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801ca3a:	626b      	str	r3, [r5, #36]	; 0x24
 801ca3c:	bd38      	pop	{r3, r4, r5, pc}
 801ca3e:	bf00      	nop
 801ca40:	2400f31c 	.word	0x2400f31c
 801ca44:	24000000 	.word	0x24000000
 801ca48:	0801b4a9 	.word	0x0801b4a9
 801ca4c:	240000a8 	.word	0x240000a8
 801ca50:	2400f320 	.word	0x2400f320
 801ca54:	0801b4a7 	.word	0x0801b4a7
 801ca58:	240000ac 	.word	0x240000ac

0801ca5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801ca5c:	b538      	push	{r3, r4, r5, lr}
 801ca5e:	4c15      	ldr	r4, [pc, #84]	; (801cab4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801ca60:	4605      	mov	r5, r0
 801ca62:	7823      	ldrb	r3, [r4, #0]
 801ca64:	f3bf 8f5b 	dmb	ish
 801ca68:	07da      	lsls	r2, r3, #31
 801ca6a:	d40b      	bmi.n	801ca84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ca6c:	4620      	mov	r0, r4
 801ca6e:	f005 fafa 	bl	8022066 <__cxa_guard_acquire>
 801ca72:	b138      	cbz	r0, 801ca84 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801ca74:	4620      	mov	r0, r4
 801ca76:	f005 fb02 	bl	802207e <__cxa_guard_release>
 801ca7a:	4a0f      	ldr	r2, [pc, #60]	; (801cab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801ca7c:	490f      	ldr	r1, [pc, #60]	; (801cabc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801ca7e:	4810      	ldr	r0, [pc, #64]	; (801cac0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801ca80:	f005 faea 	bl	8022058 <__aeabi_atexit>
 801ca84:	4c0f      	ldr	r4, [pc, #60]	; (801cac4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801ca86:	7823      	ldrb	r3, [r4, #0]
 801ca88:	f3bf 8f5b 	dmb	ish
 801ca8c:	07db      	lsls	r3, r3, #31
 801ca8e:	d40b      	bmi.n	801caa8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ca90:	4620      	mov	r0, r4
 801ca92:	f005 fae8 	bl	8022066 <__cxa_guard_acquire>
 801ca96:	b138      	cbz	r0, 801caa8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801ca98:	4620      	mov	r0, r4
 801ca9a:	f005 faf0 	bl	802207e <__cxa_guard_release>
 801ca9e:	4a06      	ldr	r2, [pc, #24]	; (801cab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801caa0:	4909      	ldr	r1, [pc, #36]	; (801cac8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801caa2:	480a      	ldr	r0, [pc, #40]	; (801cacc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801caa4:	f005 fad8 	bl	8022058 <__aeabi_atexit>
 801caa8:	4b05      	ldr	r3, [pc, #20]	; (801cac0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801caaa:	61ab      	str	r3, [r5, #24]
 801caac:	4b07      	ldr	r3, [pc, #28]	; (801cacc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801caae:	61eb      	str	r3, [r5, #28]
 801cab0:	bd38      	pop	{r3, r4, r5, pc}
 801cab2:	bf00      	nop
 801cab4:	2400f2fc 	.word	0x2400f2fc
 801cab8:	24000000 	.word	0x24000000
 801cabc:	0801b4ad 	.word	0x0801b4ad
 801cac0:	24000088 	.word	0x24000088
 801cac4:	2400f300 	.word	0x2400f300
 801cac8:	0801b4ab 	.word	0x0801b4ab
 801cacc:	2400008c 	.word	0x2400008c

0801cad0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801cad0:	b510      	push	{r4, lr}
 801cad2:	4604      	mov	r4, r0
 801cad4:	f7ff ff88 	bl	801c9e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801cad8:	4620      	mov	r0, r4
 801cada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cade:	f7ff bfbd 	b.w	801ca5c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801cae4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801cae4:	b538      	push	{r3, r4, r5, lr}
 801cae6:	4c15      	ldr	r4, [pc, #84]	; (801cb3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801cae8:	4605      	mov	r5, r0
 801caea:	7823      	ldrb	r3, [r4, #0]
 801caec:	f3bf 8f5b 	dmb	ish
 801caf0:	07da      	lsls	r2, r3, #31
 801caf2:	d40b      	bmi.n	801cb0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801caf4:	4620      	mov	r0, r4
 801caf6:	f005 fab6 	bl	8022066 <__cxa_guard_acquire>
 801cafa:	b138      	cbz	r0, 801cb0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801cafc:	4620      	mov	r0, r4
 801cafe:	f005 fabe 	bl	802207e <__cxa_guard_release>
 801cb02:	4a0f      	ldr	r2, [pc, #60]	; (801cb40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cb04:	490f      	ldr	r1, [pc, #60]	; (801cb44 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801cb06:	4810      	ldr	r0, [pc, #64]	; (801cb48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cb08:	f005 faa6 	bl	8022058 <__aeabi_atexit>
 801cb0c:	4c0f      	ldr	r4, [pc, #60]	; (801cb4c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801cb0e:	7823      	ldrb	r3, [r4, #0]
 801cb10:	f3bf 8f5b 	dmb	ish
 801cb14:	07db      	lsls	r3, r3, #31
 801cb16:	d40b      	bmi.n	801cb30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f005 faa4 	bl	8022066 <__cxa_guard_acquire>
 801cb1e:	b138      	cbz	r0, 801cb30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801cb20:	4620      	mov	r0, r4
 801cb22:	f005 faac 	bl	802207e <__cxa_guard_release>
 801cb26:	4a06      	ldr	r2, [pc, #24]	; (801cb40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801cb28:	4909      	ldr	r1, [pc, #36]	; (801cb50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801cb2a:	480a      	ldr	r0, [pc, #40]	; (801cb54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cb2c:	f005 fa94 	bl	8022058 <__aeabi_atexit>
 801cb30:	4b05      	ldr	r3, [pc, #20]	; (801cb48 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801cb32:	632b      	str	r3, [r5, #48]	; 0x30
 801cb34:	4b07      	ldr	r3, [pc, #28]	; (801cb54 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801cb36:	636b      	str	r3, [r5, #52]	; 0x34
 801cb38:	bd38      	pop	{r3, r4, r5, pc}
 801cb3a:	bf00      	nop
 801cb3c:	2400f304 	.word	0x2400f304
 801cb40:	24000000 	.word	0x24000000
 801cb44:	0801b4a1 	.word	0x0801b4a1
 801cb48:	24000090 	.word	0x24000090
 801cb4c:	2400f308 	.word	0x2400f308
 801cb50:	0801b49f 	.word	0x0801b49f
 801cb54:	24000094 	.word	0x24000094

0801cb58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801cb58:	b538      	push	{r3, r4, r5, lr}
 801cb5a:	4c15      	ldr	r4, [pc, #84]	; (801cbb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801cb5c:	4605      	mov	r5, r0
 801cb5e:	7823      	ldrb	r3, [r4, #0]
 801cb60:	f3bf 8f5b 	dmb	ish
 801cb64:	07da      	lsls	r2, r3, #31
 801cb66:	d40b      	bmi.n	801cb80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cb68:	4620      	mov	r0, r4
 801cb6a:	f005 fa7c 	bl	8022066 <__cxa_guard_acquire>
 801cb6e:	b138      	cbz	r0, 801cb80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801cb70:	4620      	mov	r0, r4
 801cb72:	f005 fa84 	bl	802207e <__cxa_guard_release>
 801cb76:	4a0f      	ldr	r2, [pc, #60]	; (801cbb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cb78:	490f      	ldr	r1, [pc, #60]	; (801cbb8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801cb7a:	4810      	ldr	r0, [pc, #64]	; (801cbbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cb7c:	f005 fa6c 	bl	8022058 <__aeabi_atexit>
 801cb80:	4c0f      	ldr	r4, [pc, #60]	; (801cbc0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801cb82:	7823      	ldrb	r3, [r4, #0]
 801cb84:	f3bf 8f5b 	dmb	ish
 801cb88:	07db      	lsls	r3, r3, #31
 801cb8a:	d40b      	bmi.n	801cba4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cb8c:	4620      	mov	r0, r4
 801cb8e:	f005 fa6a 	bl	8022066 <__cxa_guard_acquire>
 801cb92:	b138      	cbz	r0, 801cba4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801cb94:	4620      	mov	r0, r4
 801cb96:	f005 fa72 	bl	802207e <__cxa_guard_release>
 801cb9a:	4a06      	ldr	r2, [pc, #24]	; (801cbb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801cb9c:	4909      	ldr	r1, [pc, #36]	; (801cbc4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801cb9e:	480a      	ldr	r0, [pc, #40]	; (801cbc8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cba0:	f005 fa5a 	bl	8022058 <__aeabi_atexit>
 801cba4:	4b05      	ldr	r3, [pc, #20]	; (801cbbc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801cba6:	62ab      	str	r3, [r5, #40]	; 0x28
 801cba8:	4b07      	ldr	r3, [pc, #28]	; (801cbc8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801cbaa:	62eb      	str	r3, [r5, #44]	; 0x2c
 801cbac:	bd38      	pop	{r3, r4, r5, pc}
 801cbae:	bf00      	nop
 801cbb0:	2400f2dc 	.word	0x2400f2dc
 801cbb4:	24000000 	.word	0x24000000
 801cbb8:	0801b4a5 	.word	0x0801b4a5
 801cbbc:	24000068 	.word	0x24000068
 801cbc0:	2400f2e0 	.word	0x2400f2e0
 801cbc4:	0801b4a3 	.word	0x0801b4a3
 801cbc8:	2400006c 	.word	0x2400006c

0801cbcc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801cbcc:	b510      	push	{r4, lr}
 801cbce:	4604      	mov	r4, r0
 801cbd0:	f7ff ff88 	bl	801cae4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801cbd4:	4620      	mov	r0, r4
 801cbd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbda:	f7ff bfbd 	b.w	801cb58 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801cbe0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801cbe0:	b538      	push	{r3, r4, r5, lr}
 801cbe2:	4c15      	ldr	r4, [pc, #84]	; (801cc38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801cbe4:	4605      	mov	r5, r0
 801cbe6:	7823      	ldrb	r3, [r4, #0]
 801cbe8:	f3bf 8f5b 	dmb	ish
 801cbec:	07da      	lsls	r2, r3, #31
 801cbee:	d40b      	bmi.n	801cc08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cbf0:	4620      	mov	r0, r4
 801cbf2:	f005 fa38 	bl	8022066 <__cxa_guard_acquire>
 801cbf6:	b138      	cbz	r0, 801cc08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f005 fa40 	bl	802207e <__cxa_guard_release>
 801cbfe:	4a0f      	ldr	r2, [pc, #60]	; (801cc3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cc00:	490f      	ldr	r1, [pc, #60]	; (801cc40 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801cc02:	4810      	ldr	r0, [pc, #64]	; (801cc44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cc04:	f005 fa28 	bl	8022058 <__aeabi_atexit>
 801cc08:	4c0f      	ldr	r4, [pc, #60]	; (801cc48 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801cc0a:	7823      	ldrb	r3, [r4, #0]
 801cc0c:	f3bf 8f5b 	dmb	ish
 801cc10:	07db      	lsls	r3, r3, #31
 801cc12:	d40b      	bmi.n	801cc2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cc14:	4620      	mov	r0, r4
 801cc16:	f005 fa26 	bl	8022066 <__cxa_guard_acquire>
 801cc1a:	b138      	cbz	r0, 801cc2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801cc1c:	4620      	mov	r0, r4
 801cc1e:	f005 fa2e 	bl	802207e <__cxa_guard_release>
 801cc22:	4a06      	ldr	r2, [pc, #24]	; (801cc3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801cc24:	4909      	ldr	r1, [pc, #36]	; (801cc4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801cc26:	480a      	ldr	r0, [pc, #40]	; (801cc50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cc28:	f005 fa16 	bl	8022058 <__aeabi_atexit>
 801cc2c:	4b05      	ldr	r3, [pc, #20]	; (801cc44 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801cc2e:	642b      	str	r3, [r5, #64]	; 0x40
 801cc30:	4b07      	ldr	r3, [pc, #28]	; (801cc50 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801cc32:	646b      	str	r3, [r5, #68]	; 0x44
 801cc34:	bd38      	pop	{r3, r4, r5, pc}
 801cc36:	bf00      	nop
 801cc38:	2400f30c 	.word	0x2400f30c
 801cc3c:	24000000 	.word	0x24000000
 801cc40:	0801b499 	.word	0x0801b499
 801cc44:	24000098 	.word	0x24000098
 801cc48:	2400f310 	.word	0x2400f310
 801cc4c:	0801b497 	.word	0x0801b497
 801cc50:	2400009c 	.word	0x2400009c

0801cc54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801cc54:	b538      	push	{r3, r4, r5, lr}
 801cc56:	4c15      	ldr	r4, [pc, #84]	; (801ccac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801cc58:	4605      	mov	r5, r0
 801cc5a:	7823      	ldrb	r3, [r4, #0]
 801cc5c:	f3bf 8f5b 	dmb	ish
 801cc60:	07da      	lsls	r2, r3, #31
 801cc62:	d40b      	bmi.n	801cc7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cc64:	4620      	mov	r0, r4
 801cc66:	f005 f9fe 	bl	8022066 <__cxa_guard_acquire>
 801cc6a:	b138      	cbz	r0, 801cc7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801cc6c:	4620      	mov	r0, r4
 801cc6e:	f005 fa06 	bl	802207e <__cxa_guard_release>
 801cc72:	4a0f      	ldr	r2, [pc, #60]	; (801ccb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cc74:	490f      	ldr	r1, [pc, #60]	; (801ccb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801cc76:	4810      	ldr	r0, [pc, #64]	; (801ccb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cc78:	f005 f9ee 	bl	8022058 <__aeabi_atexit>
 801cc7c:	4c0f      	ldr	r4, [pc, #60]	; (801ccbc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801cc7e:	7823      	ldrb	r3, [r4, #0]
 801cc80:	f3bf 8f5b 	dmb	ish
 801cc84:	07db      	lsls	r3, r3, #31
 801cc86:	d40b      	bmi.n	801cca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cc88:	4620      	mov	r0, r4
 801cc8a:	f005 f9ec 	bl	8022066 <__cxa_guard_acquire>
 801cc8e:	b138      	cbz	r0, 801cca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801cc90:	4620      	mov	r0, r4
 801cc92:	f005 f9f4 	bl	802207e <__cxa_guard_release>
 801cc96:	4a06      	ldr	r2, [pc, #24]	; (801ccb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801cc98:	4909      	ldr	r1, [pc, #36]	; (801ccc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801cc9a:	480a      	ldr	r0, [pc, #40]	; (801ccc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cc9c:	f005 f9dc 	bl	8022058 <__aeabi_atexit>
 801cca0:	4b05      	ldr	r3, [pc, #20]	; (801ccb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801cca2:	63ab      	str	r3, [r5, #56]	; 0x38
 801cca4:	4b07      	ldr	r3, [pc, #28]	; (801ccc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801cca6:	63eb      	str	r3, [r5, #60]	; 0x3c
 801cca8:	bd38      	pop	{r3, r4, r5, pc}
 801ccaa:	bf00      	nop
 801ccac:	2400f2ec 	.word	0x2400f2ec
 801ccb0:	24000000 	.word	0x24000000
 801ccb4:	0801b49d 	.word	0x0801b49d
 801ccb8:	24000078 	.word	0x24000078
 801ccbc:	2400f2f0 	.word	0x2400f2f0
 801ccc0:	0801b49b 	.word	0x0801b49b
 801ccc4:	2400007c 	.word	0x2400007c

0801ccc8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801ccc8:	b510      	push	{r4, lr}
 801ccca:	4604      	mov	r4, r0
 801cccc:	f7ff ff88 	bl	801cbe0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801ccd0:	4620      	mov	r0, r4
 801ccd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccd6:	f7ff bfbd 	b.w	801cc54 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801ccdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801ccdc:	b538      	push	{r3, r4, r5, lr}
 801ccde:	4c15      	ldr	r4, [pc, #84]	; (801cd34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801cce0:	4605      	mov	r5, r0
 801cce2:	7823      	ldrb	r3, [r4, #0]
 801cce4:	f3bf 8f5b 	dmb	ish
 801cce8:	07da      	lsls	r2, r3, #31
 801ccea:	d40b      	bmi.n	801cd04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ccec:	4620      	mov	r0, r4
 801ccee:	f005 f9ba 	bl	8022066 <__cxa_guard_acquire>
 801ccf2:	b138      	cbz	r0, 801cd04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801ccf4:	4620      	mov	r0, r4
 801ccf6:	f005 f9c2 	bl	802207e <__cxa_guard_release>
 801ccfa:	4a0f      	ldr	r2, [pc, #60]	; (801cd38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801ccfc:	490f      	ldr	r1, [pc, #60]	; (801cd3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ccfe:	4810      	ldr	r0, [pc, #64]	; (801cd40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cd00:	f005 f9aa 	bl	8022058 <__aeabi_atexit>
 801cd04:	4c0f      	ldr	r4, [pc, #60]	; (801cd44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801cd06:	7823      	ldrb	r3, [r4, #0]
 801cd08:	f3bf 8f5b 	dmb	ish
 801cd0c:	07db      	lsls	r3, r3, #31
 801cd0e:	d40b      	bmi.n	801cd28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cd10:	4620      	mov	r0, r4
 801cd12:	f005 f9a8 	bl	8022066 <__cxa_guard_acquire>
 801cd16:	b138      	cbz	r0, 801cd28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801cd18:	4620      	mov	r0, r4
 801cd1a:	f005 f9b0 	bl	802207e <__cxa_guard_release>
 801cd1e:	4a06      	ldr	r2, [pc, #24]	; (801cd38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801cd20:	4909      	ldr	r1, [pc, #36]	; (801cd48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801cd22:	480a      	ldr	r0, [pc, #40]	; (801cd4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801cd24:	f005 f998 	bl	8022058 <__aeabi_atexit>
 801cd28:	4b05      	ldr	r3, [pc, #20]	; (801cd40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801cd2a:	652b      	str	r3, [r5, #80]	; 0x50
 801cd2c:	4b07      	ldr	r3, [pc, #28]	; (801cd4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801cd2e:	656b      	str	r3, [r5, #84]	; 0x54
 801cd30:	bd38      	pop	{r3, r4, r5, pc}
 801cd32:	bf00      	nop
 801cd34:	2400f2e4 	.word	0x2400f2e4
 801cd38:	24000000 	.word	0x24000000
 801cd3c:	0801b491 	.word	0x0801b491
 801cd40:	24000070 	.word	0x24000070
 801cd44:	2400f2e8 	.word	0x2400f2e8
 801cd48:	0801b48f 	.word	0x0801b48f
 801cd4c:	24000074 	.word	0x24000074

0801cd50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801cd50:	b538      	push	{r3, r4, r5, lr}
 801cd52:	4c15      	ldr	r4, [pc, #84]	; (801cda8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801cd54:	4605      	mov	r5, r0
 801cd56:	7823      	ldrb	r3, [r4, #0]
 801cd58:	f3bf 8f5b 	dmb	ish
 801cd5c:	07da      	lsls	r2, r3, #31
 801cd5e:	d40b      	bmi.n	801cd78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cd60:	4620      	mov	r0, r4
 801cd62:	f005 f980 	bl	8022066 <__cxa_guard_acquire>
 801cd66:	b138      	cbz	r0, 801cd78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801cd68:	4620      	mov	r0, r4
 801cd6a:	f005 f988 	bl	802207e <__cxa_guard_release>
 801cd6e:	4a0f      	ldr	r2, [pc, #60]	; (801cdac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cd70:	490f      	ldr	r1, [pc, #60]	; (801cdb0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801cd72:	4810      	ldr	r0, [pc, #64]	; (801cdb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cd74:	f005 f970 	bl	8022058 <__aeabi_atexit>
 801cd78:	4c0f      	ldr	r4, [pc, #60]	; (801cdb8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801cd7a:	7823      	ldrb	r3, [r4, #0]
 801cd7c:	f3bf 8f5b 	dmb	ish
 801cd80:	07db      	lsls	r3, r3, #31
 801cd82:	d40b      	bmi.n	801cd9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cd84:	4620      	mov	r0, r4
 801cd86:	f005 f96e 	bl	8022066 <__cxa_guard_acquire>
 801cd8a:	b138      	cbz	r0, 801cd9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801cd8c:	4620      	mov	r0, r4
 801cd8e:	f005 f976 	bl	802207e <__cxa_guard_release>
 801cd92:	4a06      	ldr	r2, [pc, #24]	; (801cdac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801cd94:	4909      	ldr	r1, [pc, #36]	; (801cdbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801cd96:	480a      	ldr	r0, [pc, #40]	; (801cdc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cd98:	f005 f95e 	bl	8022058 <__aeabi_atexit>
 801cd9c:	4b05      	ldr	r3, [pc, #20]	; (801cdb4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801cd9e:	64ab      	str	r3, [r5, #72]	; 0x48
 801cda0:	4b07      	ldr	r3, [pc, #28]	; (801cdc0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801cda2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801cda4:	bd38      	pop	{r3, r4, r5, pc}
 801cda6:	bf00      	nop
 801cda8:	2400f2d4 	.word	0x2400f2d4
 801cdac:	24000000 	.word	0x24000000
 801cdb0:	0801b495 	.word	0x0801b495
 801cdb4:	24000060 	.word	0x24000060
 801cdb8:	2400f2d8 	.word	0x2400f2d8
 801cdbc:	0801b493 	.word	0x0801b493
 801cdc0:	24000064 	.word	0x24000064

0801cdc4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801cdc4:	b510      	push	{r4, lr}
 801cdc6:	4604      	mov	r4, r0
 801cdc8:	f7ff ff88 	bl	801ccdc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801cdcc:	4620      	mov	r0, r4
 801cdce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdd2:	f7ff bfbd 	b.w	801cd50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801cdd6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801cdd6:	b510      	push	{r4, lr}
 801cdd8:	4604      	mov	r4, r0
 801cdda:	f7ff fff3 	bl	801cdc4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801cdde:	4620      	mov	r0, r4
 801cde0:	f7ff ff72 	bl	801ccc8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801cde4:	4620      	mov	r0, r4
 801cde6:	f7ff fe73 	bl	801cad0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801cdea:	4620      	mov	r0, r4
 801cdec:	f7ff fdf2 	bl	801c9d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801cdf0:	4620      	mov	r0, r4
 801cdf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cdf6:	f7ff bee9 	b.w	801cbcc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801cdfa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801cdfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdfe:	b087      	sub	sp, #28
 801ce00:	788d      	ldrb	r5, [r1, #2]
 801ce02:	f891 9000 	ldrb.w	r9, [r1]
 801ce06:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ce0a:	9501      	str	r5, [sp, #4]
 801ce0c:	784d      	ldrb	r5, [r1, #1]
 801ce0e:	9203      	str	r2, [sp, #12]
 801ce10:	9502      	str	r5, [sp, #8]
 801ce12:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801ce16:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801ce1a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801ce1e:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801ce22:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801ce26:	fb06 0708 	mla	r7, r6, r8, r0
 801ce2a:	2e00      	cmp	r6, #0
 801ce2c:	eb02 0a07 	add.w	sl, r2, r7
 801ce30:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801ce34:	9d01      	ldr	r5, [sp, #4]
 801ce36:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801ce3a:	ea45 0509 	orr.w	r5, r5, r9
 801ce3e:	9505      	str	r5, [sp, #20]
 801ce40:	f2c0 80b2 	blt.w	801cfa8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801ce44:	45b3      	cmp	fp, r6
 801ce46:	f340 80af 	ble.w	801cfa8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801ce4a:	2800      	cmp	r0, #0
 801ce4c:	f2c0 80aa 	blt.w	801cfa4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ce50:	4580      	cmp	r8, r0
 801ce52:	f340 80a7 	ble.w	801cfa4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801ce56:	9a03      	ldr	r2, [sp, #12]
 801ce58:	5dd7      	ldrb	r7, [r2, r7]
 801ce5a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ce5e:	441f      	add	r7, r3
 801ce60:	1c42      	adds	r2, r0, #1
 801ce62:	f100 80a4 	bmi.w	801cfae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ce66:	4590      	cmp	r8, r2
 801ce68:	f340 80a1 	ble.w	801cfae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ce6c:	2c00      	cmp	r4, #0
 801ce6e:	f000 809e 	beq.w	801cfae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801ce72:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801ce76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce7a:	441d      	add	r5, r3
 801ce7c:	3601      	adds	r6, #1
 801ce7e:	f100 809a 	bmi.w	801cfb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ce82:	45b3      	cmp	fp, r6
 801ce84:	f340 8097 	ble.w	801cfb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ce88:	f1bc 0f00 	cmp.w	ip, #0
 801ce8c:	f000 8093 	beq.w	801cfb6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801ce90:	2800      	cmp	r0, #0
 801ce92:	f2c0 808e 	blt.w	801cfb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801ce96:	4580      	cmp	r8, r0
 801ce98:	f340 808b 	ble.w	801cfb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801ce9c:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801cea0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cea4:	441e      	add	r6, r3
 801cea6:	3001      	adds	r0, #1
 801cea8:	f100 8088 	bmi.w	801cfbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801ceac:	4580      	cmp	r8, r0
 801ceae:	f340 8085 	ble.w	801cfbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801ceb2:	2c00      	cmp	r4, #0
 801ceb4:	f000 8082 	beq.w	801cfbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801ceb8:	44d0      	add	r8, sl
 801ceba:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cebe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cec2:	4413      	add	r3, r2
 801cec4:	b2a4      	uxth	r4, r4
 801cec6:	f895 a000 	ldrb.w	sl, [r5]
 801ceca:	fa1f fc8c 	uxth.w	ip, ip
 801cece:	fb04 fb0c 	mul.w	fp, r4, ip
 801ced2:	0124      	lsls	r4, r4, #4
 801ced4:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801ced8:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801cedc:	eba4 040b 	sub.w	r4, r4, fp
 801cee0:	fa1f f08c 	uxth.w	r0, ip
 801cee4:	b2a2      	uxth	r2, r4
 801cee6:	783c      	ldrb	r4, [r7, #0]
 801cee8:	eba8 0800 	sub.w	r8, r8, r0
 801ceec:	fa1f fc8e 	uxth.w	ip, lr
 801cef0:	fb02 fa0a 	mul.w	sl, r2, sl
 801cef4:	ea6f 0e0e 	mvn.w	lr, lr
 801cef8:	fa1f f888 	uxth.w	r8, r8
 801cefc:	fa5f fe8e 	uxtb.w	lr, lr
 801cf00:	fb08 aa04 	mla	sl, r8, r4, sl
 801cf04:	7834      	ldrb	r4, [r6, #0]
 801cf06:	fb19 f90e 	smulbb	r9, r9, lr
 801cf0a:	fb00 aa04 	mla	sl, r0, r4, sl
 801cf0e:	781c      	ldrb	r4, [r3, #0]
 801cf10:	fb0b a404 	mla	r4, fp, r4, sl
 801cf14:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cf18:	fb04 990c 	mla	r9, r4, ip, r9
 801cf1c:	fa1f f989 	uxth.w	r9, r9
 801cf20:	f109 0401 	add.w	r4, r9, #1
 801cf24:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801cf28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf2c:	f881 9000 	strb.w	r9, [r1]
 801cf30:	f895 9001 	ldrb.w	r9, [r5, #1]
 801cf34:	787c      	ldrb	r4, [r7, #1]
 801cf36:	fb02 f909 	mul.w	r9, r2, r9
 801cf3a:	fb08 9904 	mla	r9, r8, r4, r9
 801cf3e:	7874      	ldrb	r4, [r6, #1]
 801cf40:	fb00 9904 	mla	r9, r0, r4, r9
 801cf44:	785c      	ldrb	r4, [r3, #1]
 801cf46:	fb0b 9404 	mla	r4, fp, r4, r9
 801cf4a:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801cf4e:	9c02      	ldr	r4, [sp, #8]
 801cf50:	fb14 f90e 	smulbb	r9, r4, lr
 801cf54:	fb0a 940c 	mla	r4, sl, ip, r9
 801cf58:	b2a4      	uxth	r4, r4
 801cf5a:	f104 0901 	add.w	r9, r4, #1
 801cf5e:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801cf62:	1224      	asrs	r4, r4, #8
 801cf64:	704c      	strb	r4, [r1, #1]
 801cf66:	78ad      	ldrb	r5, [r5, #2]
 801cf68:	78bc      	ldrb	r4, [r7, #2]
 801cf6a:	436a      	muls	r2, r5
 801cf6c:	789b      	ldrb	r3, [r3, #2]
 801cf6e:	fb08 2204 	mla	r2, r8, r4, r2
 801cf72:	78b4      	ldrb	r4, [r6, #2]
 801cf74:	fb00 2004 	mla	r0, r0, r4, r2
 801cf78:	fb0b 0b03 	mla	fp, fp, r3, r0
 801cf7c:	9b01      	ldr	r3, [sp, #4]
 801cf7e:	fb13 fe0e 	smulbb	lr, r3, lr
 801cf82:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801cf86:	fb0b ec0c 	mla	ip, fp, ip, lr
 801cf8a:	fa1f fc8c 	uxth.w	ip, ip
 801cf8e:	f10c 0e01 	add.w	lr, ip, #1
 801cf92:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801cf96:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf9a:	f881 c002 	strb.w	ip, [r1, #2]
 801cf9e:	b007      	add	sp, #28
 801cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfa4:	af05      	add	r7, sp, #20
 801cfa6:	e75b      	b.n	801ce60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801cfa8:	ad05      	add	r5, sp, #20
 801cfaa:	462f      	mov	r7, r5
 801cfac:	e766      	b.n	801ce7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801cfae:	ad05      	add	r5, sp, #20
 801cfb0:	e764      	b.n	801ce7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801cfb2:	ae05      	add	r6, sp, #20
 801cfb4:	e777      	b.n	801cea6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801cfb6:	ab05      	add	r3, sp, #20
 801cfb8:	461e      	mov	r6, r3
 801cfba:	e783      	b.n	801cec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801cfbc:	ab05      	add	r3, sp, #20
 801cfbe:	e781      	b.n	801cec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801cfc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc4:	b093      	sub	sp, #76	; 0x4c
 801cfc6:	9210      	str	r2, [sp, #64]	; 0x40
 801cfc8:	9309      	str	r3, [sp, #36]	; 0x24
 801cfca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cfcc:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801cfd0:	9011      	str	r0, [sp, #68]	; 0x44
 801cfd2:	930e      	str	r3, [sp, #56]	; 0x38
 801cfd4:	6850      	ldr	r0, [r2, #4]
 801cfd6:	910d      	str	r1, [sp, #52]	; 0x34
 801cfd8:	6812      	ldr	r2, [r2, #0]
 801cfda:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801cfde:	fb00 1303 	mla	r3, r0, r3, r1
 801cfe2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfe6:	18d3      	adds	r3, r2, r3
 801cfe8:	930a      	str	r3, [sp, #40]	; 0x28
 801cfea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	930c      	str	r3, [sp, #48]	; 0x30
 801cff0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cff2:	685c      	ldr	r4, [r3, #4]
 801cff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cff6:	3404      	adds	r4, #4
 801cff8:	43db      	mvns	r3, r3
 801cffa:	b2db      	uxtb	r3, r3
 801cffc:	930b      	str	r3, [sp, #44]	; 0x2c
 801cffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d000:	2b00      	cmp	r3, #0
 801d002:	dc03      	bgt.n	801d00c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d006:	2b00      	cmp	r3, #0
 801d008:	f340 8250 	ble.w	801d4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d00c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d00e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d012:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d016:	1e48      	subs	r0, r1, #1
 801d018:	1e55      	subs	r5, r2, #1
 801d01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d01c:	2b00      	cmp	r3, #0
 801d01e:	f340 80ee 	ble.w	801d1fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d022:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801d024:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d026:	1436      	asrs	r6, r6, #16
 801d028:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d02c:	d406      	bmi.n	801d03c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d02e:	4286      	cmp	r6, r0
 801d030:	da04      	bge.n	801d03c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d032:	2b00      	cmp	r3, #0
 801d034:	db02      	blt.n	801d03c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d036:	42ab      	cmp	r3, r5
 801d038:	f2c0 80e2 	blt.w	801d200 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d03c:	3601      	adds	r6, #1
 801d03e:	f100 80cf 	bmi.w	801d1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d042:	42b1      	cmp	r1, r6
 801d044:	f2c0 80cc 	blt.w	801d1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d048:	3301      	adds	r3, #1
 801d04a:	f100 80c9 	bmi.w	801d1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d04e:	429a      	cmp	r2, r3
 801d050:	f2c0 80c6 	blt.w	801d1e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801d054:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801d058:	f1bb 0f00 	cmp.w	fp, #0
 801d05c:	f340 80f1 	ble.w	801d242 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d060:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d062:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d064:	9824      	ldr	r0, [sp, #144]	; 0x90
 801d066:	141d      	asrs	r5, r3, #16
 801d068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d06a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d06e:	68c7      	ldr	r7, [r0, #12]
 801d070:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d072:	1418      	asrs	r0, r3, #16
 801d074:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801d078:	6892      	ldr	r2, [r2, #8]
 801d07a:	f100 8137 	bmi.w	801d2ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d07e:	f102 3cff 	add.w	ip, r2, #4294967295
 801d082:	4560      	cmp	r0, ip
 801d084:	f280 8132 	bge.w	801d2ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d088:	2d00      	cmp	r5, #0
 801d08a:	f2c0 812f 	blt.w	801d2ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d08e:	f107 3cff 	add.w	ip, r7, #4294967295
 801d092:	4565      	cmp	r5, ip
 801d094:	f280 812a 	bge.w	801d2ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801d098:	b212      	sxth	r2, r2
 801d09a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d09c:	fb05 0002 	mla	r0, r5, r2, r0
 801d0a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d0a2:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d0a6:	4405      	add	r5, r0
 801d0a8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d0ac:	eb04 0e0c 	add.w	lr, r4, ip
 801d0b0:	f1b8 0f00 	cmp.w	r8, #0
 801d0b4:	f000 810c 	beq.w	801d2d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801d0b8:	786f      	ldrb	r7, [r5, #1]
 801d0ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d0be:	4427      	add	r7, r4
 801d0c0:	2900      	cmp	r1, #0
 801d0c2:	f000 810d 	beq.w	801d2e0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801d0c6:	18a8      	adds	r0, r5, r2
 801d0c8:	5caa      	ldrb	r2, [r5, r2]
 801d0ca:	7840      	ldrb	r0, [r0, #1]
 801d0cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d0d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d0d4:	4422      	add	r2, r4
 801d0d6:	4420      	add	r0, r4
 801d0d8:	fa1f f388 	uxth.w	r3, r8
 801d0dc:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801d0e0:	b289      	uxth	r1, r1
 801d0e2:	f897 c000 	ldrb.w	ip, [r7]
 801d0e6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801d0ea:	fb03 f901 	mul.w	r9, r3, r1
 801d0ee:	011b      	lsls	r3, r3, #4
 801d0f0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d0f4:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d0f8:	eba3 0309 	sub.w	r3, r3, r9
 801d0fc:	b289      	uxth	r1, r1
 801d0fe:	b29b      	uxth	r3, r3
 801d100:	eba8 0801 	sub.w	r8, r8, r1
 801d104:	fb03 fc0c 	mul.w	ip, r3, ip
 801d108:	fa1f f888 	uxth.w	r8, r8
 801d10c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d110:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d114:	f892 a000 	ldrb.w	sl, [r2]
 801d118:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d11c:	f890 a000 	ldrb.w	sl, [r0]
 801d120:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d124:	f896 a000 	ldrb.w	sl, [r6]
 801d128:	fb1a fa03 	smulbb	sl, sl, r3
 801d12c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d132:	fb0c ac05 	mla	ip, ip, r5, sl
 801d136:	fa1f fc8c 	uxth.w	ip, ip
 801d13a:	f10c 0a01 	add.w	sl, ip, #1
 801d13e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801d142:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d146:	f886 a000 	strb.w	sl, [r6]
 801d14a:	f897 c001 	ldrb.w	ip, [r7, #1]
 801d14e:	f89e a001 	ldrb.w	sl, [lr, #1]
 801d152:	fb03 fc0c 	mul.w	ip, r3, ip
 801d156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d158:	fb08 cc0a 	mla	ip, r8, sl, ip
 801d15c:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d160:	fb01 cc0a 	mla	ip, r1, sl, ip
 801d164:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d168:	fb09 cc0a 	mla	ip, r9, sl, ip
 801d16c:	f896 a001 	ldrb.w	sl, [r6, #1]
 801d170:	fb1a fa03 	smulbb	sl, sl, r3
 801d174:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d17a:	fb0c ac05 	mla	ip, ip, r5, sl
 801d17e:	fa1f fc8c 	uxth.w	ip, ip
 801d182:	f10c 0a01 	add.w	sl, ip, #1
 801d186:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801d18a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d18e:	f886 c001 	strb.w	ip, [r6, #1]
 801d192:	78bf      	ldrb	r7, [r7, #2]
 801d194:	f89e c002 	ldrb.w	ip, [lr, #2]
 801d198:	437b      	muls	r3, r7
 801d19a:	fb08 330c 	mla	r3, r8, ip, r3
 801d19e:	f892 c002 	ldrb.w	ip, [r2, #2]
 801d1a2:	7882      	ldrb	r2, [r0, #2]
 801d1a4:	fb01 310c 	mla	r1, r1, ip, r3
 801d1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1aa:	fb09 1902 	mla	r9, r9, r2, r1
 801d1ae:	78b1      	ldrb	r1, [r6, #2]
 801d1b0:	fb11 f103 	smulbb	r1, r1, r3
 801d1b4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d1b8:	fb09 1505 	mla	r5, r9, r5, r1
 801d1bc:	b2ad      	uxth	r5, r5
 801d1be:	1c6b      	adds	r3, r5, #1
 801d1c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801d1c4:	122d      	asrs	r5, r5, #8
 801d1c6:	70b5      	strb	r5, [r6, #2]
 801d1c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1ca:	3603      	adds	r6, #3
 801d1cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d1ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d1d2:	4413      	add	r3, r2
 801d1d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d1d6:	931d      	str	r3, [sp, #116]	; 0x74
 801d1d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d1da:	4413      	add	r3, r2
 801d1dc:	931e      	str	r3, [sp, #120]	; 0x78
 801d1de:	e73b      	b.n	801d058 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d1e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d1e2:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801d1e4:	4433      	add	r3, r6
 801d1e6:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801d1e8:	931d      	str	r3, [sp, #116]	; 0x74
 801d1ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d1ec:	4433      	add	r3, r6
 801d1ee:	931e      	str	r3, [sp, #120]	; 0x78
 801d1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1f2:	3b01      	subs	r3, #1
 801d1f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1f8:	3303      	adds	r3, #3
 801d1fa:	930a      	str	r3, [sp, #40]	; 0x28
 801d1fc:	e70d      	b.n	801d01a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d1fe:	d028      	beq.n	801d252 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d202:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d204:	3b01      	subs	r3, #1
 801d206:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801d208:	fb00 5003 	mla	r0, r0, r3, r5
 801d20c:	1400      	asrs	r0, r0, #16
 801d20e:	f53f af21 	bmi.w	801d054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d212:	3901      	subs	r1, #1
 801d214:	4288      	cmp	r0, r1
 801d216:	f6bf af1d 	bge.w	801d054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d21a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d21c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801d21e:	fb01 0303 	mla	r3, r1, r3, r0
 801d222:	141b      	asrs	r3, r3, #16
 801d224:	f53f af16 	bmi.w	801d054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d228:	3a01      	subs	r2, #1
 801d22a:	4293      	cmp	r3, r2
 801d22c:	f6bf af12 	bge.w	801d054 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801d230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d232:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801d236:	1cdf      	adds	r7, r3, #3
 801d238:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801d23c:	f1b9 0f00 	cmp.w	r9, #0
 801d240:	dc73      	bgt.n	801d32a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d24a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d24e:	441a      	add	r2, r3
 801d250:	920a      	str	r2, [sp, #40]	; 0x28
 801d252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d254:	2b00      	cmp	r3, #0
 801d256:	f340 8129 	ble.w	801d4ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801d25a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d25e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d260:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d264:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d268:	eef0 6a62 	vmov.f32	s13, s5
 801d26c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d270:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d274:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d278:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801d27c:	eef0 6a43 	vmov.f32	s13, s6
 801d280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d284:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801d288:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d28c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d290:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d294:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d298:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d29c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d2a0:	ee12 2a90 	vmov	r2, s5
 801d2a4:	eef0 2a47 	vmov.f32	s5, s14
 801d2a8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2ac:	ee13 2a10 	vmov	r2, s6
 801d2b0:	931f      	str	r3, [sp, #124]	; 0x7c
 801d2b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d2b4:	eeb0 3a67 	vmov.f32	s6, s15
 801d2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2bc:	9320      	str	r3, [sp, #128]	; 0x80
 801d2be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d2c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	930d      	str	r3, [sp, #52]	; 0x34
 801d2c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d2c8:	bf08      	it	eq
 801d2ca:	4613      	moveq	r3, r2
 801d2cc:	9309      	str	r3, [sp, #36]	; 0x24
 801d2ce:	e696      	b.n	801cffe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d2d0:	b149      	cbz	r1, 801d2e6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801d2d2:	5caa      	ldrb	r2, [r5, r2]
 801d2d4:	4670      	mov	r0, lr
 801d2d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d2da:	4422      	add	r2, r4
 801d2dc:	4677      	mov	r7, lr
 801d2de:	e6fb      	b.n	801d0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d2e0:	4670      	mov	r0, lr
 801d2e2:	4672      	mov	r2, lr
 801d2e4:	e6f8      	b.n	801d0d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d2e6:	4670      	mov	r0, lr
 801d2e8:	4672      	mov	r2, lr
 801d2ea:	e7f7      	b.n	801d2dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d2ec:	f110 0c01 	adds.w	ip, r0, #1
 801d2f0:	f53f af6a 	bmi.w	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d2f4:	4562      	cmp	r2, ip
 801d2f6:	f6ff af67 	blt.w	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d2fa:	f115 0c01 	adds.w	ip, r5, #1
 801d2fe:	f53f af63 	bmi.w	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d302:	4567      	cmp	r7, ip
 801d304:	f6ff af60 	blt.w	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d30a:	b23f      	sxth	r7, r7
 801d30c:	b212      	sxth	r2, r2
 801d30e:	9002      	str	r0, [sp, #8]
 801d310:	9701      	str	r7, [sp, #4]
 801d312:	9200      	str	r2, [sp, #0]
 801d314:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d318:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801d31c:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801d320:	4623      	mov	r3, r4
 801d322:	4631      	mov	r1, r6
 801d324:	f7ff fd69 	bl	801cdfa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801d328:	e74e      	b.n	801d1c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801d32a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d32c:	981e      	ldr	r0, [sp, #120]	; 0x78
 801d32e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d332:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801d334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801d336:	1400      	asrs	r0, r0, #16
 801d338:	142d      	asrs	r5, r5, #16
 801d33a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d33c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d340:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d344:	fb02 5000 	mla	r0, r2, r0, r5
 801d348:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d34a:	f815 e000 	ldrb.w	lr, [r5, r0]
 801d34e:	eb05 0c00 	add.w	ip, r5, r0
 801d352:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d356:	eb04 060e 	add.w	r6, r4, lr
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	f000 8097 	beq.w	801d48e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801d360:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d368:	4425      	add	r5, r4
 801d36a:	2900      	cmp	r1, #0
 801d36c:	f000 8098 	beq.w	801d4a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801d370:	eb0c 0002 	add.w	r0, ip, r2
 801d374:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d378:	7840      	ldrb	r0, [r0, #1]
 801d37a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d37e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d382:	4422      	add	r2, r4
 801d384:	4420      	add	r0, r4
 801d386:	b29b      	uxth	r3, r3
 801d388:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801d38c:	b289      	uxth	r1, r1
 801d38e:	f895 e000 	ldrb.w	lr, [r5]
 801d392:	3703      	adds	r7, #3
 801d394:	f109 39ff 	add.w	r9, r9, #4294967295
 801d398:	fb03 f801 	mul.w	r8, r3, r1
 801d39c:	011b      	lsls	r3, r3, #4
 801d39e:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d3a2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d3a6:	eba3 0308 	sub.w	r3, r3, r8
 801d3aa:	b289      	uxth	r1, r1
 801d3ac:	b29b      	uxth	r3, r3
 801d3ae:	ebac 0c01 	sub.w	ip, ip, r1
 801d3b2:	fb03 fe0e 	mul.w	lr, r3, lr
 801d3b6:	fa1f fc8c 	uxth.w	ip, ip
 801d3ba:	930f      	str	r3, [sp, #60]	; 0x3c
 801d3bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3be:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d3c2:	f892 b000 	ldrb.w	fp, [r2]
 801d3c6:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d3ca:	f890 b000 	ldrb.w	fp, [r0]
 801d3ce:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d3d2:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801d3d6:	fb1b fb03 	smulbb	fp, fp, r3
 801d3da:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d3e0:	fb0e be0a 	mla	lr, lr, sl, fp
 801d3e4:	fa1f fe8e 	uxth.w	lr, lr
 801d3e8:	f10e 0b01 	add.w	fp, lr, #1
 801d3ec:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d3f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d3f4:	f807 ec06 	strb.w	lr, [r7, #-6]
 801d3f8:	f895 e001 	ldrb.w	lr, [r5, #1]
 801d3fc:	f896 b001 	ldrb.w	fp, [r6, #1]
 801d400:	fb03 fe0e 	mul.w	lr, r3, lr
 801d404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d406:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d40a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d40e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d412:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d416:	fb08 ee0b 	mla	lr, r8, fp, lr
 801d41a:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801d41e:	fb1b fb03 	smulbb	fp, fp, r3
 801d422:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801d426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d428:	fb0e be0a 	mla	lr, lr, sl, fp
 801d42c:	fa1f fe8e 	uxth.w	lr, lr
 801d430:	f10e 0b01 	add.w	fp, lr, #1
 801d434:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801d438:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d43c:	f807 ec05 	strb.w	lr, [r7, #-5]
 801d440:	78ad      	ldrb	r5, [r5, #2]
 801d442:	78b6      	ldrb	r6, [r6, #2]
 801d444:	436b      	muls	r3, r5
 801d446:	7895      	ldrb	r5, [r2, #2]
 801d448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d44a:	fb0c 3306 	mla	r3, ip, r6, r3
 801d44e:	fb01 3305 	mla	r3, r1, r5, r3
 801d452:	7885      	ldrb	r5, [r0, #2]
 801d454:	fb08 3805 	mla	r8, r8, r5, r3
 801d458:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801d45c:	fb13 f302 	smulbb	r3, r3, r2
 801d460:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801d464:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801d466:	fb08 380a 	mla	r8, r8, sl, r3
 801d46a:	fa1f f888 	uxth.w	r8, r8
 801d46e:	f108 0301 	add.w	r3, r8, #1
 801d472:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801d476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d478:	4413      	add	r3, r2
 801d47a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d47c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d480:	931d      	str	r3, [sp, #116]	; 0x74
 801d482:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d484:	f807 8c04 	strb.w	r8, [r7, #-4]
 801d488:	4413      	add	r3, r2
 801d48a:	931e      	str	r3, [sp, #120]	; 0x78
 801d48c:	e6d6      	b.n	801d23c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d48e:	b151      	cbz	r1, 801d4a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801d490:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d494:	4630      	mov	r0, r6
 801d496:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d49a:	4422      	add	r2, r4
 801d49c:	4635      	mov	r5, r6
 801d49e:	e772      	b.n	801d386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d4a0:	4630      	mov	r0, r6
 801d4a2:	4632      	mov	r2, r6
 801d4a4:	e76f      	b.n	801d386 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801d4a6:	4630      	mov	r0, r6
 801d4a8:	4632      	mov	r2, r6
 801d4aa:	e7f7      	b.n	801d49c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d4ac:	b013      	add	sp, #76	; 0x4c
 801d4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801d4b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d4b6:	784c      	ldrb	r4, [r1, #1]
 801d4b8:	f891 a002 	ldrb.w	sl, [r1, #2]
 801d4bc:	0224      	lsls	r4, r4, #8
 801d4be:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801d4c2:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801d4c6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d4ca:	f891 a000 	ldrb.w	sl, [r1]
 801d4ce:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801d4d2:	ea44 040a 	orr.w	r4, r4, sl
 801d4d6:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801d4da:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801d4de:	9401      	str	r4, [sp, #4]
 801d4e0:	fb05 c70e 	mla	r7, r5, lr, ip
 801d4e4:	2d00      	cmp	r5, #0
 801d4e6:	eb02 0807 	add.w	r8, r2, r7
 801d4ea:	db72      	blt.n	801d5d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d4ec:	45a9      	cmp	r9, r5
 801d4ee:	dd70      	ble.n	801d5d2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801d4f0:	f1bc 0f00 	cmp.w	ip, #0
 801d4f4:	db6b      	blt.n	801d5ce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d4f6:	45e6      	cmp	lr, ip
 801d4f8:	dd69      	ble.n	801d5ce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801d4fa:	5dd7      	ldrb	r7, [r2, r7]
 801d4fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d500:	441f      	add	r7, r3
 801d502:	f11c 0201 	adds.w	r2, ip, #1
 801d506:	d467      	bmi.n	801d5d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d508:	4596      	cmp	lr, r2
 801d50a:	dd65      	ble.n	801d5d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d50c:	2800      	cmp	r0, #0
 801d50e:	d063      	beq.n	801d5d8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801d510:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d514:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d518:	441c      	add	r4, r3
 801d51a:	3501      	adds	r5, #1
 801d51c:	d460      	bmi.n	801d5e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d51e:	45a9      	cmp	r9, r5
 801d520:	dd5e      	ble.n	801d5e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d522:	2e00      	cmp	r6, #0
 801d524:	d05c      	beq.n	801d5e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801d526:	f1bc 0f00 	cmp.w	ip, #0
 801d52a:	db57      	blt.n	801d5dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d52c:	45e6      	cmp	lr, ip
 801d52e:	dd55      	ble.n	801d5dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801d530:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d538:	441d      	add	r5, r3
 801d53a:	f11c 0201 	adds.w	r2, ip, #1
 801d53e:	d452      	bmi.n	801d5e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d540:	4596      	cmp	lr, r2
 801d542:	dd50      	ble.n	801d5e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d544:	2800      	cmp	r0, #0
 801d546:	d04e      	beq.n	801d5e6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d548:	44c6      	add	lr, r8
 801d54a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d54e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d552:	4413      	add	r3, r2
 801d554:	b280      	uxth	r0, r0
 801d556:	f897 8000 	ldrb.w	r8, [r7]
 801d55a:	b2b2      	uxth	r2, r6
 801d55c:	fb00 f602 	mul.w	r6, r0, r2
 801d560:	0100      	lsls	r0, r0, #4
 801d562:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d566:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801d56a:	1b80      	subs	r0, r0, r6
 801d56c:	fa1f fc82 	uxth.w	ip, r2
 801d570:	b282      	uxth	r2, r0
 801d572:	7820      	ldrb	r0, [r4, #0]
 801d574:	ebae 0e0c 	sub.w	lr, lr, ip
 801d578:	4350      	muls	r0, r2
 801d57a:	fa1f fe8e 	uxth.w	lr, lr
 801d57e:	fb0e 0808 	mla	r8, lr, r8, r0
 801d582:	7828      	ldrb	r0, [r5, #0]
 801d584:	fb0c 8800 	mla	r8, ip, r0, r8
 801d588:	7818      	ldrb	r0, [r3, #0]
 801d58a:	fb06 8000 	mla	r0, r6, r0, r8
 801d58e:	1200      	asrs	r0, r0, #8
 801d590:	7008      	strb	r0, [r1, #0]
 801d592:	7860      	ldrb	r0, [r4, #1]
 801d594:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d598:	4350      	muls	r0, r2
 801d59a:	fb0e 0808 	mla	r8, lr, r8, r0
 801d59e:	7868      	ldrb	r0, [r5, #1]
 801d5a0:	fb0c 8800 	mla	r8, ip, r0, r8
 801d5a4:	7858      	ldrb	r0, [r3, #1]
 801d5a6:	fb06 8000 	mla	r0, r6, r0, r8
 801d5aa:	1200      	asrs	r0, r0, #8
 801d5ac:	7048      	strb	r0, [r1, #1]
 801d5ae:	78a0      	ldrb	r0, [r4, #2]
 801d5b0:	78bf      	ldrb	r7, [r7, #2]
 801d5b2:	4350      	muls	r0, r2
 801d5b4:	78aa      	ldrb	r2, [r5, #2]
 801d5b6:	fb0e 0007 	mla	r0, lr, r7, r0
 801d5ba:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d5be:	789a      	ldrb	r2, [r3, #2]
 801d5c0:	fb06 c202 	mla	r2, r6, r2, ip
 801d5c4:	1212      	asrs	r2, r2, #8
 801d5c6:	708a      	strb	r2, [r1, #2]
 801d5c8:	b002      	add	sp, #8
 801d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5ce:	af01      	add	r7, sp, #4
 801d5d0:	e797      	b.n	801d502 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d5d2:	ac01      	add	r4, sp, #4
 801d5d4:	4627      	mov	r7, r4
 801d5d6:	e7a0      	b.n	801d51a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d5d8:	ac01      	add	r4, sp, #4
 801d5da:	e79e      	b.n	801d51a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d5dc:	ad01      	add	r5, sp, #4
 801d5de:	e7ac      	b.n	801d53a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d5e0:	ab01      	add	r3, sp, #4
 801d5e2:	461d      	mov	r5, r3
 801d5e4:	e7b6      	b.n	801d554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d5e6:	ab01      	add	r3, sp, #4
 801d5e8:	e7b4      	b.n	801d554 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d5ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d5ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5ee:	b08d      	sub	sp, #52	; 0x34
 801d5f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5f4:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801d5f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d5fa:	900b      	str	r0, [sp, #44]	; 0x2c
 801d5fc:	9306      	str	r3, [sp, #24]
 801d5fe:	6850      	ldr	r0, [r2, #4]
 801d600:	6812      	ldr	r2, [r2, #0]
 801d602:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d604:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801d608:	fb00 1303 	mla	r3, r0, r3, r1
 801d60c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d610:	18d3      	adds	r3, r2, r3
 801d612:	9307      	str	r3, [sp, #28]
 801d614:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	9308      	str	r3, [sp, #32]
 801d61a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d61c:	685d      	ldr	r5, [r3, #4]
 801d61e:	3504      	adds	r5, #4
 801d620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d622:	2b00      	cmp	r3, #0
 801d624:	dc03      	bgt.n	801d62e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d628:	2b00      	cmp	r3, #0
 801d62a:	f340 81e6 	ble.w	801d9fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d62e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d630:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d634:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d638:	1e48      	subs	r0, r1, #1
 801d63a:	1e56      	subs	r6, r2, #1
 801d63c:	9b06      	ldr	r3, [sp, #24]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	f340 80bd 	ble.w	801d7be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d644:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d646:	1427      	asrs	r7, r4, #16
 801d648:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d64c:	d406      	bmi.n	801d65c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d64e:	4287      	cmp	r7, r0
 801d650:	da04      	bge.n	801d65c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d652:	2b00      	cmp	r3, #0
 801d654:	db02      	blt.n	801d65c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d656:	42b3      	cmp	r3, r6
 801d658:	f2c0 80b2 	blt.w	801d7c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d65c:	3701      	adds	r7, #1
 801d65e:	f100 80a1 	bmi.w	801d7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d662:	42b9      	cmp	r1, r7
 801d664:	f2c0 809e 	blt.w	801d7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d668:	3301      	adds	r3, #1
 801d66a:	f100 809b 	bmi.w	801d7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d66e:	429a      	cmp	r2, r3
 801d670:	f2c0 8098 	blt.w	801d7a4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d674:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d678:	f1bb 0f00 	cmp.w	fp, #0
 801d67c:	f340 80bf 	ble.w	801d7fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d680:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d682:	981e      	ldr	r0, [sp, #120]	; 0x78
 801d684:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d686:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d68a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d68e:	1420      	asrs	r0, r4, #16
 801d690:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d692:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d696:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d69a:	6892      	ldr	r2, [r2, #8]
 801d69c:	f100 8103 	bmi.w	801d8a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d6a0:	f102 3eff 	add.w	lr, r2, #4294967295
 801d6a4:	4570      	cmp	r0, lr
 801d6a6:	f280 80fe 	bge.w	801d8a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d6aa:	2f00      	cmp	r7, #0
 801d6ac:	f2c0 80fb 	blt.w	801d8a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d6b0:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d6b4:	4577      	cmp	r7, lr
 801d6b6:	f280 80f6 	bge.w	801d8a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d6ba:	b212      	sxth	r2, r2
 801d6bc:	fb07 0002 	mla	r0, r7, r2, r0
 801d6c0:	9f08      	ldr	r7, [sp, #32]
 801d6c2:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d6c6:	eb07 0e00 	add.w	lr, r7, r0
 801d6ca:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d6ce:	eb05 0c08 	add.w	ip, r5, r8
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	f000 80d8 	beq.w	801d888 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d6d8:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d6dc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d6e0:	442f      	add	r7, r5
 801d6e2:	2900      	cmp	r1, #0
 801d6e4:	f000 80d9 	beq.w	801d89a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6e8:	eb0e 0002 	add.w	r0, lr, r2
 801d6ec:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d6f0:	7840      	ldrb	r0, [r0, #1]
 801d6f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d6f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d6fa:	442a      	add	r2, r5
 801d6fc:	4428      	add	r0, r5
 801d6fe:	b29b      	uxth	r3, r3
 801d700:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d704:	b289      	uxth	r1, r1
 801d706:	f897 8000 	ldrb.w	r8, [r7]
 801d70a:	fb03 f901 	mul.w	r9, r3, r1
 801d70e:	011b      	lsls	r3, r3, #4
 801d710:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d714:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d718:	eba3 0309 	sub.w	r3, r3, r9
 801d71c:	b289      	uxth	r1, r1
 801d71e:	b29b      	uxth	r3, r3
 801d720:	ebae 0e01 	sub.w	lr, lr, r1
 801d724:	fb03 f808 	mul.w	r8, r3, r8
 801d728:	fa1f fe8e 	uxth.w	lr, lr
 801d72c:	fb0e 880a 	mla	r8, lr, sl, r8
 801d730:	f892 a000 	ldrb.w	sl, [r2]
 801d734:	fb01 880a 	mla	r8, r1, sl, r8
 801d738:	f890 a000 	ldrb.w	sl, [r0]
 801d73c:	fb09 880a 	mla	r8, r9, sl, r8
 801d740:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d744:	f886 8000 	strb.w	r8, [r6]
 801d748:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d74c:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d750:	fb03 f808 	mul.w	r8, r3, r8
 801d754:	fb0e 880a 	mla	r8, lr, sl, r8
 801d758:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d75c:	fb01 880a 	mla	r8, r1, sl, r8
 801d760:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d764:	fb09 880a 	mla	r8, r9, sl, r8
 801d768:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d76c:	f886 8001 	strb.w	r8, [r6, #1]
 801d770:	78bf      	ldrb	r7, [r7, #2]
 801d772:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d776:	437b      	muls	r3, r7
 801d778:	7892      	ldrb	r2, [r2, #2]
 801d77a:	fb0e 330c 	mla	r3, lr, ip, r3
 801d77e:	fb01 3102 	mla	r1, r1, r2, r3
 801d782:	7882      	ldrb	r2, [r0, #2]
 801d784:	fb09 1902 	mla	r9, r9, r2, r1
 801d788:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d78c:	f886 9002 	strb.w	r9, [r6, #2]
 801d790:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d792:	3603      	adds	r6, #3
 801d794:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d796:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d79a:	441c      	add	r4, r3
 801d79c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d79e:	4413      	add	r3, r2
 801d7a0:	9318      	str	r3, [sp, #96]	; 0x60
 801d7a2:	e769      	b.n	801d678 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d7a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d7a6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801d7a8:	441c      	add	r4, r3
 801d7aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d7ac:	443b      	add	r3, r7
 801d7ae:	9318      	str	r3, [sp, #96]	; 0x60
 801d7b0:	9b06      	ldr	r3, [sp, #24]
 801d7b2:	3b01      	subs	r3, #1
 801d7b4:	9306      	str	r3, [sp, #24]
 801d7b6:	9b07      	ldr	r3, [sp, #28]
 801d7b8:	3303      	adds	r3, #3
 801d7ba:	9307      	str	r3, [sp, #28]
 801d7bc:	e73e      	b.n	801d63c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d7be:	d026      	beq.n	801d80e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d7c0:	9b06      	ldr	r3, [sp, #24]
 801d7c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d7c4:	3b01      	subs	r3, #1
 801d7c6:	fb00 4003 	mla	r0, r0, r3, r4
 801d7ca:	1400      	asrs	r0, r0, #16
 801d7cc:	f53f af52 	bmi.w	801d674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7d0:	3901      	subs	r1, #1
 801d7d2:	4288      	cmp	r0, r1
 801d7d4:	f6bf af4e 	bge.w	801d674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d7da:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d7dc:	fb01 0303 	mla	r3, r1, r3, r0
 801d7e0:	141b      	asrs	r3, r3, #16
 801d7e2:	f53f af47 	bmi.w	801d674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7e6:	3a01      	subs	r2, #1
 801d7e8:	4293      	cmp	r3, r2
 801d7ea:	f6bf af43 	bge.w	801d674 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7ee:	9b07      	ldr	r3, [sp, #28]
 801d7f0:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d7f4:	f103 0803 	add.w	r8, r3, #3
 801d7f8:	f1ba 0f00 	cmp.w	sl, #0
 801d7fc:	dc71      	bgt.n	801d8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d7fe:	9b06      	ldr	r3, [sp, #24]
 801d800:	9a07      	ldr	r2, [sp, #28]
 801d802:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d806:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d80a:	441a      	add	r2, r3
 801d80c:	9207      	str	r2, [sp, #28]
 801d80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d810:	2b00      	cmp	r3, #0
 801d812:	f340 80f2 	ble.w	801d9fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d816:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d81a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d81c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d820:	eeb0 6a62 	vmov.f32	s12, s5
 801d824:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d828:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d82c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d830:	ee16 4a10 	vmov	r4, s12
 801d834:	eeb0 6a43 	vmov.f32	s12, s6
 801d838:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d83c:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801d840:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d844:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d848:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d84c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d850:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d854:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d858:	ee12 2a90 	vmov	r2, s5
 801d85c:	eef0 2a47 	vmov.f32	s5, s14
 801d860:	fb92 f3f3 	sdiv	r3, r2, r3
 801d864:	ee13 2a10 	vmov	r2, s6
 801d868:	9319      	str	r3, [sp, #100]	; 0x64
 801d86a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d86c:	eeb0 3a67 	vmov.f32	s6, s15
 801d870:	fb92 f3f3 	sdiv	r3, r2, r3
 801d874:	931a      	str	r3, [sp, #104]	; 0x68
 801d876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d87a:	3b01      	subs	r3, #1
 801d87c:	9309      	str	r3, [sp, #36]	; 0x24
 801d87e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d880:	bf08      	it	eq
 801d882:	4613      	moveq	r3, r2
 801d884:	9306      	str	r3, [sp, #24]
 801d886:	e6cb      	b.n	801d620 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d888:	b151      	cbz	r1, 801d8a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d88a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d88e:	4660      	mov	r0, ip
 801d890:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d894:	442a      	add	r2, r5
 801d896:	4667      	mov	r7, ip
 801d898:	e731      	b.n	801d6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d89a:	4660      	mov	r0, ip
 801d89c:	4662      	mov	r2, ip
 801d89e:	e72e      	b.n	801d6fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d8a0:	4660      	mov	r0, ip
 801d8a2:	4662      	mov	r2, ip
 801d8a4:	e7f7      	b.n	801d896 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d8a6:	f110 0e01 	adds.w	lr, r0, #1
 801d8aa:	f53f af71 	bmi.w	801d790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d8ae:	4572      	cmp	r2, lr
 801d8b0:	f6ff af6e 	blt.w	801d790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d8b4:	f117 0e01 	adds.w	lr, r7, #1
 801d8b8:	f53f af6a 	bmi.w	801d790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d8bc:	45f4      	cmp	ip, lr
 801d8be:	f6ff af67 	blt.w	801d790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d8c2:	b212      	sxth	r2, r2
 801d8c4:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d8c8:	fa0f f38c 	sxth.w	r3, ip
 801d8cc:	9200      	str	r2, [sp, #0]
 801d8ce:	4631      	mov	r1, r6
 801d8d0:	9a08      	ldr	r2, [sp, #32]
 801d8d2:	9301      	str	r3, [sp, #4]
 801d8d4:	462b      	mov	r3, r5
 801d8d6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d8da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d8dc:	f7ff fde9 	bl	801d4b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d8e0:	e756      	b.n	801d790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d8e4:	1426      	asrs	r6, r4, #16
 801d8e6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d8e8:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d8ec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d8f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d8f2:	1400      	asrs	r0, r0, #16
 801d8f4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d8f8:	fb02 6000 	mla	r0, r2, r0, r6
 801d8fc:	9e08      	ldr	r6, [sp, #32]
 801d8fe:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d902:	eb06 0c00 	add.w	ip, r6, r0
 801d906:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d90a:	eb05 070e 	add.w	r7, r5, lr
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d064      	beq.n	801d9dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d912:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d916:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d91a:	442e      	add	r6, r5
 801d91c:	2900      	cmp	r1, #0
 801d91e:	d066      	beq.n	801d9ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d920:	eb0c 0002 	add.w	r0, ip, r2
 801d924:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d928:	7840      	ldrb	r0, [r0, #1]
 801d92a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d92e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d932:	442a      	add	r2, r5
 801d934:	4428      	add	r0, r5
 801d936:	b29b      	uxth	r3, r3
 801d938:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d93c:	b289      	uxth	r1, r1
 801d93e:	f896 e000 	ldrb.w	lr, [r6]
 801d942:	f108 0803 	add.w	r8, r8, #3
 801d946:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d94a:	fb03 f901 	mul.w	r9, r3, r1
 801d94e:	011b      	lsls	r3, r3, #4
 801d950:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d954:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d958:	eba3 0309 	sub.w	r3, r3, r9
 801d95c:	b289      	uxth	r1, r1
 801d95e:	b29b      	uxth	r3, r3
 801d960:	ebac 0c01 	sub.w	ip, ip, r1
 801d964:	fb03 fe0e 	mul.w	lr, r3, lr
 801d968:	fa1f fc8c 	uxth.w	ip, ip
 801d96c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d970:	f892 b000 	ldrb.w	fp, [r2]
 801d974:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d978:	f890 b000 	ldrb.w	fp, [r0]
 801d97c:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d980:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d984:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d988:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d98c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d990:	fb03 fe0e 	mul.w	lr, r3, lr
 801d994:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d998:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d99c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d9a0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d9a4:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d9a8:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d9ac:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d9b0:	78b6      	ldrb	r6, [r6, #2]
 801d9b2:	78bf      	ldrb	r7, [r7, #2]
 801d9b4:	4373      	muls	r3, r6
 801d9b6:	7896      	ldrb	r6, [r2, #2]
 801d9b8:	7882      	ldrb	r2, [r0, #2]
 801d9ba:	fb0c 3307 	mla	r3, ip, r7, r3
 801d9be:	fb01 3306 	mla	r3, r1, r6, r3
 801d9c2:	fb09 3902 	mla	r9, r9, r2, r3
 801d9c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d9c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d9ca:	441c      	add	r4, r3
 801d9cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d9ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d9d2:	4413      	add	r3, r2
 801d9d4:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d9d8:	9318      	str	r3, [sp, #96]	; 0x60
 801d9da:	e70d      	b.n	801d7f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d9dc:	b151      	cbz	r1, 801d9f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d9de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d9e2:	4638      	mov	r0, r7
 801d9e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d9e8:	442a      	add	r2, r5
 801d9ea:	463e      	mov	r6, r7
 801d9ec:	e7a3      	b.n	801d936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d9ee:	4638      	mov	r0, r7
 801d9f0:	463a      	mov	r2, r7
 801d9f2:	e7a0      	b.n	801d936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d9f4:	4638      	mov	r0, r7
 801d9f6:	463a      	mov	r2, r7
 801d9f8:	e7f7      	b.n	801d9ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d9fa:	b00d      	add	sp, #52	; 0x34
 801d9fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801da00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da04:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801da08:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801da0c:	2d00      	cmp	r5, #0
 801da0e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801da12:	fb05 700c 	mla	r0, r5, ip, r7
 801da16:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801da1a:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801da1e:	eb02 0800 	add.w	r8, r2, r0
 801da22:	f2c0 8118 	blt.w	801dc56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801da26:	45a9      	cmp	r9, r5
 801da28:	f340 8115 	ble.w	801dc56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801da2c:	2f00      	cmp	r7, #0
 801da2e:	f2c0 8110 	blt.w	801dc52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801da32:	45bc      	cmp	ip, r7
 801da34:	f340 810d 	ble.w	801dc52 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801da38:	5c12      	ldrb	r2, [r2, r0]
 801da3a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801da3e:	1c7a      	adds	r2, r7, #1
 801da40:	f100 810c 	bmi.w	801dc5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801da44:	4594      	cmp	ip, r2
 801da46:	f340 8109 	ble.w	801dc5c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801da4a:	2c00      	cmp	r4, #0
 801da4c:	f000 8108 	beq.w	801dc60 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801da50:	f898 2001 	ldrb.w	r2, [r8, #1]
 801da54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801da58:	3501      	adds	r5, #1
 801da5a:	f100 8105 	bmi.w	801dc68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801da5e:	45a9      	cmp	r9, r5
 801da60:	f340 8102 	ble.w	801dc68 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801da64:	f1be 0f00 	cmp.w	lr, #0
 801da68:	f000 8101 	beq.w	801dc6e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801da6c:	2f00      	cmp	r7, #0
 801da6e:	f2c0 80f9 	blt.w	801dc64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801da72:	45bc      	cmp	ip, r7
 801da74:	f340 80f6 	ble.w	801dc64 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801da78:	f818 200c 	ldrb.w	r2, [r8, ip]
 801da7c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801da80:	3701      	adds	r7, #1
 801da82:	f100 80f7 	bmi.w	801dc74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801da86:	45bc      	cmp	ip, r7
 801da88:	f340 80f4 	ble.w	801dc74 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801da8c:	2c00      	cmp	r4, #0
 801da8e:	f000 80f3 	beq.w	801dc78 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801da92:	44c4      	add	ip, r8
 801da94:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801da98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801da9c:	fa1f fc84 	uxth.w	ip, r4
 801daa0:	fa1f f48e 	uxth.w	r4, lr
 801daa4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801daa8:	fb04 fe0c 	mul.w	lr, r4, ip
 801daac:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801dab0:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801dab4:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801dab8:	ebac 070e 	sub.w	r7, ip, lr
 801dabc:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801dac0:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801dac4:	b2a4      	uxth	r4, r4
 801dac6:	b2bf      	uxth	r7, r7
 801dac8:	1b1b      	subs	r3, r3, r4
 801daca:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dace:	fb07 fc0a 	mul.w	ip, r7, sl
 801dad2:	b29b      	uxth	r3, r3
 801dad4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801dad8:	9300      	str	r3, [sp, #0]
 801dada:	fb04 cc09 	mla	ip, r4, r9, ip
 801dade:	fb0e cc08 	mla	ip, lr, r8, ip
 801dae2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801dae6:	9301      	str	r3, [sp, #4]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	f000 80af 	beq.w	801dc4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801daee:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801daf2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801daf6:	fb0b fc0c 	mul.w	ip, fp, ip
 801dafa:	fb0b f606 	mul.w	r6, fp, r6
 801dafe:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801db02:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801db06:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801db0a:	44dc      	add	ip, fp
 801db0c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801db10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801db14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db18:	fb0a fb0b 	mul.w	fp, sl, fp
 801db1c:	fb0a fa00 	mul.w	sl, sl, r0
 801db20:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801db24:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801db28:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801db2c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801db30:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801db34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801db38:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801db3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801db40:	0a36      	lsrs	r6, r6, #8
 801db42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801db46:	44dc      	add	ip, fp
 801db48:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801db4c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801db50:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801db54:	fb09 fb0b 	mul.w	fp, r9, fp
 801db58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801db5c:	fb09 f905 	mul.w	r9, r9, r5
 801db60:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801db64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801db68:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801db6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801db70:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801db74:	fb0c fc07 	mul.w	ip, ip, r7
 801db78:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801db7c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801db80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801db84:	4458      	add	r0, fp
 801db86:	fb08 f505 	mul.w	r5, r8, r5
 801db8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801db8e:	fb08 f802 	mul.w	r8, r8, r2
 801db92:	0a00      	lsrs	r0, r0, #8
 801db94:	0a2a      	lsrs	r2, r5, #8
 801db96:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801db9a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801db9e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dba2:	4415      	add	r5, r2
 801dba4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801dba8:	0a2d      	lsrs	r5, r5, #8
 801dbaa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801dbae:	9a00      	ldr	r2, [sp, #0]
 801dbb0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dbb4:	fb03 cc02 	mla	ip, r3, r2, ip
 801dbb8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dbbc:	9b01      	ldr	r3, [sp, #4]
 801dbbe:	fb05 c50e 	mla	r5, r5, lr, ip
 801dbc2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dbc6:	fb00 5004 	mla	r0, r0, r4, r5
 801dbca:	0a00      	lsrs	r0, r0, #8
 801dbcc:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801dbd0:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801dbd4:	4378      	muls	r0, r7
 801dbd6:	fb02 0006 	mla	r0, r2, r6, r0
 801dbda:	fb0e 0e08 	mla	lr, lr, r8, r0
 801dbde:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801dbe2:	fb04 e000 	mla	r0, r4, r0, lr
 801dbe6:	0a00      	lsrs	r0, r0, #8
 801dbe8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dbec:	4328      	orrs	r0, r5
 801dbee:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801dbf2:	b2ad      	uxth	r5, r5
 801dbf4:	b2c4      	uxtb	r4, r0
 801dbf6:	436b      	muls	r3, r5
 801dbf8:	fb14 f405 	smulbb	r4, r4, r5
 801dbfc:	1c5a      	adds	r2, r3, #1
 801dbfe:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc02:	780b      	ldrb	r3, [r1, #0]
 801dc04:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801dc08:	b2d2      	uxtb	r2, r2
 801dc0a:	fb03 4302 	mla	r3, r3, r2, r4
 801dc0e:	b29b      	uxth	r3, r3
 801dc10:	1c5c      	adds	r4, r3, #1
 801dc12:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dc16:	784c      	ldrb	r4, [r1, #1]
 801dc18:	fb14 f402 	smulbb	r4, r4, r2
 801dc1c:	121b      	asrs	r3, r3, #8
 801dc1e:	700b      	strb	r3, [r1, #0]
 801dc20:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801dc24:	fb03 4305 	mla	r3, r3, r5, r4
 801dc28:	b29b      	uxth	r3, r3
 801dc2a:	1c5c      	adds	r4, r3, #1
 801dc2c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801dc30:	0c04      	lsrs	r4, r0, #16
 801dc32:	7888      	ldrb	r0, [r1, #2]
 801dc34:	121b      	asrs	r3, r3, #8
 801dc36:	fb10 f002 	smulbb	r0, r0, r2
 801dc3a:	704b      	strb	r3, [r1, #1]
 801dc3c:	fb04 0005 	mla	r0, r4, r5, r0
 801dc40:	b280      	uxth	r0, r0
 801dc42:	1c43      	adds	r3, r0, #1
 801dc44:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801dc48:	1200      	asrs	r0, r0, #8
 801dc4a:	7088      	strb	r0, [r1, #2]
 801dc4c:	b003      	add	sp, #12
 801dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc52:	2600      	movs	r6, #0
 801dc54:	e6f3      	b.n	801da3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801dc56:	2000      	movs	r0, #0
 801dc58:	4606      	mov	r6, r0
 801dc5a:	e6fd      	b.n	801da58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dc5c:	2000      	movs	r0, #0
 801dc5e:	e6fb      	b.n	801da58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dc60:	4620      	mov	r0, r4
 801dc62:	e6f9      	b.n	801da58 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801dc64:	2500      	movs	r5, #0
 801dc66:	e70b      	b.n	801da80 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801dc68:	2200      	movs	r2, #0
 801dc6a:	4615      	mov	r5, r2
 801dc6c:	e716      	b.n	801da9c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dc6e:	4672      	mov	r2, lr
 801dc70:	4675      	mov	r5, lr
 801dc72:	e713      	b.n	801da9c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dc74:	2200      	movs	r2, #0
 801dc76:	e711      	b.n	801da9c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801dc78:	4622      	mov	r2, r4
 801dc7a:	e70f      	b.n	801da9c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801dc7c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc80:	b09f      	sub	sp, #124	; 0x7c
 801dc82:	921b      	str	r2, [sp, #108]	; 0x6c
 801dc84:	9309      	str	r3, [sp, #36]	; 0x24
 801dc86:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801dc88:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801dc8c:	901d      	str	r0, [sp, #116]	; 0x74
 801dc8e:	931c      	str	r3, [sp, #112]	; 0x70
 801dc90:	6850      	ldr	r0, [r2, #4]
 801dc92:	9119      	str	r1, [sp, #100]	; 0x64
 801dc94:	6812      	ldr	r2, [r2, #0]
 801dc96:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801dc98:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801dc9c:	fb00 1303 	mla	r3, r0, r3, r1
 801dca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dca4:	18d3      	adds	r3, r2, r3
 801dca6:	930c      	str	r3, [sp, #48]	; 0x30
 801dca8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	9312      	str	r3, [sp, #72]	; 0x48
 801dcae:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dcb0:	685e      	ldr	r6, [r3, #4]
 801dcb2:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801dcb6:	3604      	adds	r6, #4
 801dcb8:	930d      	str	r3, [sp, #52]	; 0x34
 801dcba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	dc03      	bgt.n	801dcc8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dcc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	f340 8378 	ble.w	801e3b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801dcc8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dcca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dcce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dcd2:	1e48      	subs	r0, r1, #1
 801dcd4:	1e57      	subs	r7, r2, #1
 801dcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	f340 818c 	ble.w	801dff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801dcde:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801dce0:	142b      	asrs	r3, r5, #16
 801dce2:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801dce6:	d406      	bmi.n	801dcf6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dce8:	4584      	cmp	ip, r0
 801dcea:	da04      	bge.n	801dcf6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	db02      	blt.n	801dcf6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dcf0:	42bb      	cmp	r3, r7
 801dcf2:	f2c0 8181 	blt.w	801dff8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801dcf6:	f11c 0c01 	adds.w	ip, ip, #1
 801dcfa:	f100 816f 	bmi.w	801dfdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dcfe:	4561      	cmp	r1, ip
 801dd00:	f2c0 816c 	blt.w	801dfdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dd04:	3301      	adds	r3, #1
 801dd06:	f100 8169 	bmi.w	801dfdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dd0a:	429a      	cmp	r2, r3
 801dd0c:	f2c0 8166 	blt.w	801dfdc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801dd10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801dd14:	931a      	str	r3, [sp, #104]	; 0x68
 801dd16:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dd18:	2b00      	cmp	r3, #0
 801dd1a:	f340 818c 	ble.w	801e036 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801dd1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dd20:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801dd24:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dd28:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dd2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dd2e:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dd32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dd34:	141b      	asrs	r3, r3, #16
 801dd36:	f100 81d0 	bmi.w	801e0da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dd3a:	f100 38ff 	add.w	r8, r0, #4294967295
 801dd3e:	4543      	cmp	r3, r8
 801dd40:	f280 81cb 	bge.w	801e0da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dd44:	f1bc 0f00 	cmp.w	ip, #0
 801dd48:	f2c0 81c7 	blt.w	801e0da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dd4c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dd50:	45c4      	cmp	ip, r8
 801dd52:	f280 81c2 	bge.w	801e0da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801dd56:	b200      	sxth	r0, r0
 801dd58:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dd5a:	fb0c 3300 	mla	r3, ip, r0, r3
 801dd5e:	eb04 0803 	add.w	r8, r4, r3
 801dd62:	5ce3      	ldrb	r3, [r4, r3]
 801dd64:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dd68:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dd6c:	2a00      	cmp	r2, #0
 801dd6e:	f000 81a9 	beq.w	801e0c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801dd72:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dd76:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dd7a:	940e      	str	r4, [sp, #56]	; 0x38
 801dd7c:	0e24      	lsrs	r4, r4, #24
 801dd7e:	9415      	str	r4, [sp, #84]	; 0x54
 801dd80:	b179      	cbz	r1, 801dda2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801dd82:	eb08 0c00 	add.w	ip, r8, r0
 801dd86:	f818 0000 	ldrb.w	r0, [r8, r0]
 801dd8a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dd8e:	900a      	str	r0, [sp, #40]	; 0x28
 801dd90:	0e00      	lsrs	r0, r0, #24
 801dd92:	9013      	str	r0, [sp, #76]	; 0x4c
 801dd94:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801dd98:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801dd9c:	900f      	str	r0, [sp, #60]	; 0x3c
 801dd9e:	0e00      	lsrs	r0, r0, #24
 801dda0:	9016      	str	r0, [sp, #88]	; 0x58
 801dda2:	b292      	uxth	r2, r2
 801dda4:	9815      	ldr	r0, [sp, #84]	; 0x54
 801dda6:	b289      	uxth	r1, r1
 801dda8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ddaa:	fb02 f901 	mul.w	r9, r2, r1
 801ddae:	0112      	lsls	r2, r2, #4
 801ddb0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ddb4:	eba2 0809 	sub.w	r8, r2, r9
 801ddb8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ddbc:	b289      	uxth	r1, r1
 801ddbe:	fa1f f888 	uxth.w	r8, r8
 801ddc2:	1a52      	subs	r2, r2, r1
 801ddc4:	fb08 f000 	mul.w	r0, r8, r0
 801ddc8:	b292      	uxth	r2, r2
 801ddca:	fb02 000e 	mla	r0, r2, lr, r0
 801ddce:	fb01 0004 	mla	r0, r1, r4, r0
 801ddd2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ddd4:	fb09 0004 	mla	r0, r9, r4, r0
 801ddd8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dddc:	2800      	cmp	r0, #0
 801ddde:	f000 80f2 	beq.w	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dde2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801dde6:	d01b      	beq.n	801de20 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801dde8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ddec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ddf0:	fb0e fa0a 	mul.w	sl, lr, sl
 801ddf4:	fb0e fe03 	mul.w	lr, lr, r3
 801ddf8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ddfc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801de00:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801de04:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801de08:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801de0c:	4453      	add	r3, sl
 801de0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de12:	0a1b      	lsrs	r3, r3, #8
 801de14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801de18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801de1c:	ea43 030c 	orr.w	r3, r3, ip
 801de20:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801de22:	2cff      	cmp	r4, #255	; 0xff
 801de24:	d021      	beq.n	801de6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801de26:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801de28:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801de2c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801de2e:	fb04 fb0b 	mul.w	fp, r4, fp
 801de32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801de34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801de38:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801de3a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801de3e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801de42:	fb04 fa0a 	mul.w	sl, r4, sl
 801de46:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de4a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801de4e:	44de      	add	lr, fp
 801de50:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801de54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801de58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de5c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801de64:	ea4e 040a 	orr.w	r4, lr, sl
 801de68:	940e      	str	r4, [sp, #56]	; 0x38
 801de6a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de6c:	2cff      	cmp	r4, #255	; 0xff
 801de6e:	d021      	beq.n	801deb4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801de70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801de72:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801de76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de78:	fb04 fb0b 	mul.w	fp, r4, fp
 801de7c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801de7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801de82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801de84:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801de88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801de8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801de90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801de94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801de98:	44de      	add	lr, fp
 801de9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801de9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dea2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dea6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801deaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801deae:	ea4e 040a 	orr.w	r4, lr, sl
 801deb2:	940a      	str	r4, [sp, #40]	; 0x28
 801deb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801deb6:	2cff      	cmp	r4, #255	; 0xff
 801deb8:	d021      	beq.n	801defe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801deba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801debc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801dec0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dec2:	fb04 fb0b 	mul.w	fp, r4, fp
 801dec6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801dec8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801decc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801dece:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ded2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ded6:	fb04 fa0a 	mul.w	sl, r4, sl
 801deda:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801dede:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801dee2:	44de      	add	lr, fp
 801dee4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dee8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801deec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801def0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801def4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801def8:	ea4e 040a 	orr.w	r4, lr, sl
 801defc:	940f      	str	r4, [sp, #60]	; 0x3c
 801defe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801df00:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801df04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df08:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801df0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801df0e:	fb08 fc0c 	mul.w	ip, r8, ip
 801df12:	fb02 cc0e 	mla	ip, r2, lr, ip
 801df16:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801df1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801df1c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801df20:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801df24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801df26:	fb09 cc0e 	mla	ip, r9, lr, ip
 801df2a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801df2e:	fb08 f80e 	mul.w	r8, r8, lr
 801df32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df36:	fb02 8303 	mla	r3, r2, r3, r8
 801df3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801df3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801df40:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801df44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df46:	fb01 330a 	mla	r3, r1, sl, r3
 801df4a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801df4e:	fb09 3901 	mla	r9, r9, r1, r3
 801df52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801df54:	990d      	ldr	r1, [sp, #52]	; 0x34
 801df56:	4343      	muls	r3, r0
 801df58:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801df5c:	1c58      	adds	r0, r3, #1
 801df5e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801df62:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801df66:	ea4c 0c09 	orr.w	ip, ip, r9
 801df6a:	783b      	ldrb	r3, [r7, #0]
 801df6c:	fa5f f28c 	uxtb.w	r2, ip
 801df70:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801df74:	fb12 f201 	smulbb	r2, r2, r1
 801df78:	b2c0      	uxtb	r0, r0
 801df7a:	fb03 2300 	mla	r3, r3, r0, r2
 801df7e:	b29b      	uxth	r3, r3
 801df80:	1c5a      	adds	r2, r3, #1
 801df82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801df86:	787a      	ldrb	r2, [r7, #1]
 801df88:	fb12 f200 	smulbb	r2, r2, r0
 801df8c:	121b      	asrs	r3, r3, #8
 801df8e:	703b      	strb	r3, [r7, #0]
 801df90:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801df94:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801df98:	fb03 2301 	mla	r3, r3, r1, r2
 801df9c:	b29b      	uxth	r3, r3
 801df9e:	1c5a      	adds	r2, r3, #1
 801dfa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dfa4:	121b      	asrs	r3, r3, #8
 801dfa6:	707b      	strb	r3, [r7, #1]
 801dfa8:	78bb      	ldrb	r3, [r7, #2]
 801dfaa:	fb13 f000 	smulbb	r0, r3, r0
 801dfae:	fb0c 0c01 	mla	ip, ip, r1, r0
 801dfb2:	fa1f fc8c 	uxth.w	ip, ip
 801dfb6:	f10c 0301 	add.w	r3, ip, #1
 801dfba:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801dfbe:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801dfc2:	f887 c002 	strb.w	ip, [r7, #2]
 801dfc6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dfc8:	3703      	adds	r7, #3
 801dfca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801dfcc:	441a      	add	r2, r3
 801dfce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dfd0:	441d      	add	r5, r3
 801dfd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801dfd4:	9229      	str	r2, [sp, #164]	; 0xa4
 801dfd6:	3b01      	subs	r3, #1
 801dfd8:	931a      	str	r3, [sp, #104]	; 0x68
 801dfda:	e69c      	b.n	801dd16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801dfdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801dfde:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801dfe0:	441c      	add	r4, r3
 801dfe2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801dfe4:	441d      	add	r5, r3
 801dfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfe8:	9429      	str	r4, [sp, #164]	; 0xa4
 801dfea:	3b01      	subs	r3, #1
 801dfec:	9309      	str	r3, [sp, #36]	; 0x24
 801dfee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dff0:	3303      	adds	r3, #3
 801dff2:	930c      	str	r3, [sp, #48]	; 0x30
 801dff4:	e66f      	b.n	801dcd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801dff6:	d026      	beq.n	801e046 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dffa:	982b      	ldr	r0, [sp, #172]	; 0xac
 801dffc:	3b01      	subs	r3, #1
 801dffe:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e000:	fb00 4003 	mla	r0, r0, r3, r4
 801e004:	1400      	asrs	r0, r0, #16
 801e006:	f53f ae83 	bmi.w	801dd10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e00a:	3901      	subs	r1, #1
 801e00c:	4288      	cmp	r0, r1
 801e00e:	f6bf ae7f 	bge.w	801dd10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e012:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e014:	fb01 5303 	mla	r3, r1, r3, r5
 801e018:	141b      	asrs	r3, r3, #16
 801e01a:	f53f ae79 	bmi.w	801dd10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e01e:	3a01      	subs	r2, #1
 801e020:	4293      	cmp	r3, r2
 801e022:	f6bf ae75 	bge.w	801dd10 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801e026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e028:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e02c:	f103 0e03 	add.w	lr, r3, #3
 801e030:	f1bb 0f00 	cmp.w	fp, #0
 801e034:	dc71      	bgt.n	801e11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e038:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e03e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e042:	4423      	add	r3, r4
 801e044:	930c      	str	r3, [sp, #48]	; 0x30
 801e046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e048:	2b00      	cmp	r3, #0
 801e04a:	f340 81b5 	ble.w	801e3b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801e04e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e054:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e058:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e05c:	eef0 6a62 	vmov.f32	s13, s5
 801e060:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e064:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e068:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e06c:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801e070:	eef0 6a43 	vmov.f32	s13, s6
 801e074:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e078:	ee16 5a90 	vmov	r5, s13
 801e07c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e080:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e084:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e088:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e08c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e090:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e094:	ee12 2a90 	vmov	r2, s5
 801e098:	eef0 2a47 	vmov.f32	s5, s14
 801e09c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0a0:	ee13 2a10 	vmov	r2, s6
 801e0a4:	932b      	str	r3, [sp, #172]	; 0xac
 801e0a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0a8:	eeb0 3a67 	vmov.f32	s6, s15
 801e0ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0b0:	932c      	str	r3, [sp, #176]	; 0xb0
 801e0b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e0b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e0b6:	3b01      	subs	r3, #1
 801e0b8:	9319      	str	r3, [sp, #100]	; 0x64
 801e0ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e0bc:	bf08      	it	eq
 801e0be:	4613      	moveq	r3, r2
 801e0c0:	9309      	str	r3, [sp, #36]	; 0x24
 801e0c2:	e5fa      	b.n	801dcba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e0c4:	2900      	cmp	r1, #0
 801e0c6:	f43f ae6c 	beq.w	801dda2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e0ca:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e0ce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e0d2:	900a      	str	r0, [sp, #40]	; 0x28
 801e0d4:	0e00      	lsrs	r0, r0, #24
 801e0d6:	9013      	str	r0, [sp, #76]	; 0x4c
 801e0d8:	e663      	b.n	801dda2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801e0da:	f113 0801 	adds.w	r8, r3, #1
 801e0de:	f53f af72 	bmi.w	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e0e2:	4540      	cmp	r0, r8
 801e0e4:	f6ff af6f 	blt.w	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e0e8:	f11c 0801 	adds.w	r8, ip, #1
 801e0ec:	f53f af6b 	bmi.w	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e0f0:	45c6      	cmp	lr, r8
 801e0f2:	f6ff af68 	blt.w	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e0f6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e0f8:	b200      	sxth	r0, r0
 801e0fa:	9302      	str	r3, [sp, #8]
 801e0fc:	fa0f f38e 	sxth.w	r3, lr
 801e100:	9000      	str	r0, [sp, #0]
 801e102:	9301      	str	r3, [sp, #4]
 801e104:	4633      	mov	r3, r6
 801e106:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e108:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e10c:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e110:	4639      	mov	r1, r7
 801e112:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e114:	f7ff fc74 	bl	801da00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801e118:	e755      	b.n	801dfc6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e11a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e11c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e120:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e122:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e126:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e128:	1427      	asrs	r7, r4, #16
 801e12a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e12c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e130:	142b      	asrs	r3, r5, #16
 801e132:	fb01 7303 	mla	r3, r1, r3, r7
 801e136:	18e7      	adds	r7, r4, r3
 801e138:	5ce3      	ldrb	r3, [r4, r3]
 801e13a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e13e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e142:	2a00      	cmp	r2, #0
 801e144:	f000 812e 	beq.w	801e3a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801e148:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e14c:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e150:	9410      	str	r4, [sp, #64]	; 0x40
 801e152:	0e24      	lsrs	r4, r4, #24
 801e154:	9417      	str	r4, [sp, #92]	; 0x5c
 801e156:	b170      	cbz	r0, 801e176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e158:	eb07 0801 	add.w	r8, r7, r1
 801e15c:	5c79      	ldrb	r1, [r7, r1]
 801e15e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e162:	910b      	str	r1, [sp, #44]	; 0x2c
 801e164:	0e09      	lsrs	r1, r1, #24
 801e166:	9114      	str	r1, [sp, #80]	; 0x50
 801e168:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e16c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e170:	9111      	str	r1, [sp, #68]	; 0x44
 801e172:	0e09      	lsrs	r1, r1, #24
 801e174:	9118      	str	r1, [sp, #96]	; 0x60
 801e176:	b292      	uxth	r2, r2
 801e178:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e17a:	b280      	uxth	r0, r0
 801e17c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e17e:	fb02 f900 	mul.w	r9, r2, r0
 801e182:	0112      	lsls	r2, r2, #4
 801e184:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e188:	eba2 0809 	sub.w	r8, r2, r9
 801e18c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e190:	b280      	uxth	r0, r0
 801e192:	fa1f f888 	uxth.w	r8, r8
 801e196:	1a12      	subs	r2, r2, r0
 801e198:	fb08 f101 	mul.w	r1, r8, r1
 801e19c:	b292      	uxth	r2, r2
 801e19e:	fb02 110c 	mla	r1, r2, ip, r1
 801e1a2:	fb00 1104 	mla	r1, r0, r4, r1
 801e1a6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e1a8:	fb09 1104 	mla	r1, r9, r4, r1
 801e1ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e1b0:	2900      	cmp	r1, #0
 801e1b2:	f000 80ec 	beq.w	801e38e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801e1b6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e1ba:	d019      	beq.n	801e1f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801e1bc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e1c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e1c4:	fb0c fa0a 	mul.w	sl, ip, sl
 801e1c8:	fb0c fc03 	mul.w	ip, ip, r3
 801e1cc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e1d0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e1d4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e1d8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e1dc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e1e0:	4453      	add	r3, sl
 801e1e2:	0a3f      	lsrs	r7, r7, #8
 801e1e4:	0a1b      	lsrs	r3, r3, #8
 801e1e6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e1ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e1ee:	433b      	orrs	r3, r7
 801e1f0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e1f2:	2cff      	cmp	r4, #255	; 0xff
 801e1f4:	d020      	beq.n	801e238 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801e1f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e1f8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e1fc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e1fe:	4367      	muls	r7, r4
 801e200:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e202:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e206:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e20a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e20c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e210:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e214:	fb04 fa0a 	mul.w	sl, r4, sl
 801e218:	44bc      	add	ip, r7
 801e21a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e21e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e222:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e226:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e22a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e22e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e232:	ea4c 040a 	orr.w	r4, ip, sl
 801e236:	9410      	str	r4, [sp, #64]	; 0x40
 801e238:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e23a:	2cff      	cmp	r4, #255	; 0xff
 801e23c:	d020      	beq.n	801e280 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801e23e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e240:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e244:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e246:	4367      	muls	r7, r4
 801e248:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e24a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e24e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e252:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e254:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e258:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e25c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e260:	44bc      	add	ip, r7
 801e262:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e266:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e26a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e26e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e272:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e276:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e27a:	ea4c 040a 	orr.w	r4, ip, sl
 801e27e:	940b      	str	r4, [sp, #44]	; 0x2c
 801e280:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e282:	2cff      	cmp	r4, #255	; 0xff
 801e284:	d020      	beq.n	801e2c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801e286:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e288:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e28c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e28e:	4367      	muls	r7, r4
 801e290:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e292:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e296:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e29a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e29c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e2a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801e2a8:	44bc      	add	ip, r7
 801e2aa:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e2ae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2b2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e2b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e2ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2c2:	ea4c 040a 	orr.w	r4, ip, sl
 801e2c6:	9411      	str	r4, [sp, #68]	; 0x44
 801e2c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2ca:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e2ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e2d2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e2d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e2d8:	fb08 f707 	mul.w	r7, r8, r7
 801e2dc:	fb02 770c 	mla	r7, r2, ip, r7
 801e2e0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e2e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e2e6:	fb00 770c 	mla	r7, r0, ip, r7
 801e2ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e2ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2f0:	fb09 770c 	mla	r7, r9, ip, r7
 801e2f4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e2f8:	fb08 f80c 	mul.w	r8, r8, ip
 801e2fc:	0a3f      	lsrs	r7, r7, #8
 801e2fe:	fb02 8303 	mla	r3, r2, r3, r8
 801e302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e304:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e308:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e30c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e30e:	fb00 330a 	mla	r3, r0, sl, r3
 801e312:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e316:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e318:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e31e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e322:	434b      	muls	r3, r1
 801e324:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e328:	1c59      	adds	r1, r3, #1
 801e32a:	ea47 070c 	orr.w	r7, r7, ip
 801e32e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e332:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e336:	b2fa      	uxtb	r2, r7
 801e338:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e33c:	fb12 f200 	smulbb	r2, r2, r0
 801e340:	b2c9      	uxtb	r1, r1
 801e342:	fb03 2301 	mla	r3, r3, r1, r2
 801e346:	b29b      	uxth	r3, r3
 801e348:	1c5a      	adds	r2, r3, #1
 801e34a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e34e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e352:	fb12 f201 	smulbb	r2, r2, r1
 801e356:	121b      	asrs	r3, r3, #8
 801e358:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e35c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e360:	0c3f      	lsrs	r7, r7, #16
 801e362:	fb03 2300 	mla	r3, r3, r0, r2
 801e366:	b29b      	uxth	r3, r3
 801e368:	1c5a      	adds	r2, r3, #1
 801e36a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e36e:	121b      	asrs	r3, r3, #8
 801e370:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e374:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e378:	fb13 f101 	smulbb	r1, r3, r1
 801e37c:	fb07 1700 	mla	r7, r7, r0, r1
 801e380:	b2bf      	uxth	r7, r7
 801e382:	1c7b      	adds	r3, r7, #1
 801e384:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801e388:	123f      	asrs	r7, r7, #8
 801e38a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e38e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e390:	f10e 0e03 	add.w	lr, lr, #3
 801e394:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e396:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e39a:	441a      	add	r2, r3
 801e39c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e39e:	9229      	str	r2, [sp, #164]	; 0xa4
 801e3a0:	441d      	add	r5, r3
 801e3a2:	e645      	b.n	801e030 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801e3a4:	2800      	cmp	r0, #0
 801e3a6:	f43f aee6 	beq.w	801e176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e3aa:	5c79      	ldrb	r1, [r7, r1]
 801e3ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e3b0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e3b2:	0e09      	lsrs	r1, r1, #24
 801e3b4:	9114      	str	r1, [sp, #80]	; 0x50
 801e3b6:	e6de      	b.n	801e176 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801e3b8:	b01f      	add	sp, #124	; 0x7c
 801e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e3be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801e3be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801e3c6:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801e3ca:	2d00      	cmp	r5, #0
 801e3cc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801e3d0:	fb05 700e 	mla	r0, r5, lr, r7
 801e3d4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801e3d8:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801e3dc:	eb02 0800 	add.w	r8, r2, r0
 801e3e0:	f2c0 8105 	blt.w	801e5ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e3e4:	45a9      	cmp	r9, r5
 801e3e6:	f340 8102 	ble.w	801e5ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801e3ea:	2f00      	cmp	r7, #0
 801e3ec:	f2c0 80fd 	blt.w	801e5ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e3f0:	45be      	cmp	lr, r7
 801e3f2:	f340 80fa 	ble.w	801e5ea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801e3f6:	5c12      	ldrb	r2, [r2, r0]
 801e3f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e3fc:	1c7a      	adds	r2, r7, #1
 801e3fe:	f100 80f9 	bmi.w	801e5f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e402:	4596      	cmp	lr, r2
 801e404:	f340 80f6 	ble.w	801e5f4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801e408:	2c00      	cmp	r4, #0
 801e40a:	f000 80f5 	beq.w	801e5f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801e40e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801e412:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e416:	3501      	adds	r5, #1
 801e418:	f100 80f2 	bmi.w	801e600 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e41c:	45a9      	cmp	r9, r5
 801e41e:	f340 80ef 	ble.w	801e600 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801e422:	f1bc 0f00 	cmp.w	ip, #0
 801e426:	f000 80ee 	beq.w	801e606 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801e42a:	2f00      	cmp	r7, #0
 801e42c:	f2c0 80e6 	blt.w	801e5fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e430:	45be      	cmp	lr, r7
 801e432:	f340 80e3 	ble.w	801e5fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801e436:	f818 200e 	ldrb.w	r2, [r8, lr]
 801e43a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801e43e:	3701      	adds	r7, #1
 801e440:	f100 80e4 	bmi.w	801e60c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e444:	45be      	cmp	lr, r7
 801e446:	f340 80e1 	ble.w	801e60c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801e44a:	2c00      	cmp	r4, #0
 801e44c:	f000 80e0 	beq.w	801e610 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801e450:	44c6      	add	lr, r8
 801e452:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801e45a:	b2a3      	uxth	r3, r4
 801e45c:	fa1f fc8c 	uxth.w	ip, ip
 801e460:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e464:	fb0c fe03 	mul.w	lr, ip, r3
 801e468:	011b      	lsls	r3, r3, #4
 801e46a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e46e:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801e472:	eba3 070e 	sub.w	r7, r3, lr
 801e476:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801e47a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801e47e:	fa1f f48c 	uxth.w	r4, ip
 801e482:	b2bf      	uxth	r7, r7
 801e484:	1b1b      	subs	r3, r3, r4
 801e486:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e48a:	fb07 fc0a 	mul.w	ip, r7, sl
 801e48e:	b29b      	uxth	r3, r3
 801e490:	fb03 cc0b 	mla	ip, r3, fp, ip
 801e494:	9300      	str	r3, [sp, #0]
 801e496:	fb04 cc09 	mla	ip, r4, r9, ip
 801e49a:	fb0e cc08 	mla	ip, lr, r8, ip
 801e49e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e4a2:	9301      	str	r3, [sp, #4]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	f000 809d 	beq.w	801e5e4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801e4aa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e4ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e4b2:	fb0b fc0c 	mul.w	ip, fp, ip
 801e4b6:	fb0b f606 	mul.w	r6, fp, r6
 801e4ba:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801e4be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e4c2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801e4c6:	44dc      	add	ip, fp
 801e4c8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801e4cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e4d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4d4:	fb0a fb0b 	mul.w	fp, sl, fp
 801e4d8:	fb0a fa00 	mul.w	sl, sl, r0
 801e4dc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801e4e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801e4e4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801e4e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e4ec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801e4f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e4f4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801e4f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e4fc:	0a36      	lsrs	r6, r6, #8
 801e4fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e502:	44dc      	add	ip, fp
 801e504:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801e508:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e50c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e510:	fb09 fb0b 	mul.w	fp, r9, fp
 801e514:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e518:	fb09 f905 	mul.w	r9, r9, r5
 801e51c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801e520:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e524:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801e528:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e52c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e530:	fb0c fc07 	mul.w	ip, ip, r7
 801e534:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801e538:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801e53c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e540:	4458      	add	r0, fp
 801e542:	fb08 f505 	mul.w	r5, r8, r5
 801e546:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e54a:	fb08 f802 	mul.w	r8, r8, r2
 801e54e:	0a00      	lsrs	r0, r0, #8
 801e550:	0a2a      	lsrs	r2, r5, #8
 801e552:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e556:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e55a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e55e:	4415      	add	r5, r2
 801e560:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801e564:	0a2d      	lsrs	r5, r5, #8
 801e566:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e56a:	9a00      	ldr	r2, [sp, #0]
 801e56c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e570:	fb03 cc02 	mla	ip, r3, r2, ip
 801e574:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e578:	9b01      	ldr	r3, [sp, #4]
 801e57a:	fb05 c50e 	mla	r5, r5, lr, ip
 801e57e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e582:	43db      	mvns	r3, r3
 801e584:	fb00 5004 	mla	r0, r0, r4, r5
 801e588:	b2db      	uxtb	r3, r3
 801e58a:	0a00      	lsrs	r0, r0, #8
 801e58c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e590:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801e594:	4378      	muls	r0, r7
 801e596:	fb02 0006 	mla	r0, r2, r6, r0
 801e59a:	780a      	ldrb	r2, [r1, #0]
 801e59c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e5a0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801e5a4:	fb04 e000 	mla	r0, r4, r0, lr
 801e5a8:	fb02 f403 	mul.w	r4, r2, r3
 801e5ac:	0a00      	lsrs	r0, r0, #8
 801e5ae:	1c62      	adds	r2, r4, #1
 801e5b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e5b4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e5b8:	4328      	orrs	r0, r5
 801e5ba:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e5be:	700a      	strb	r2, [r1, #0]
 801e5c0:	784a      	ldrb	r2, [r1, #1]
 801e5c2:	435a      	muls	r2, r3
 801e5c4:	1c54      	adds	r4, r2, #1
 801e5c6:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e5ca:	0a02      	lsrs	r2, r0, #8
 801e5cc:	0c00      	lsrs	r0, r0, #16
 801e5ce:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e5d2:	704a      	strb	r2, [r1, #1]
 801e5d4:	788a      	ldrb	r2, [r1, #2]
 801e5d6:	4353      	muls	r3, r2
 801e5d8:	1c5a      	adds	r2, r3, #1
 801e5da:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e5de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e5e2:	7088      	strb	r0, [r1, #2]
 801e5e4:	b003      	add	sp, #12
 801e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5ea:	2600      	movs	r6, #0
 801e5ec:	e706      	b.n	801e3fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e5ee:	2000      	movs	r0, #0
 801e5f0:	4606      	mov	r6, r0
 801e5f2:	e710      	b.n	801e416 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e5f4:	2000      	movs	r0, #0
 801e5f6:	e70e      	b.n	801e416 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e5f8:	4620      	mov	r0, r4
 801e5fa:	e70c      	b.n	801e416 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e5fc:	2500      	movs	r5, #0
 801e5fe:	e71e      	b.n	801e43e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e600:	2200      	movs	r2, #0
 801e602:	4615      	mov	r5, r2
 801e604:	e729      	b.n	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e606:	4662      	mov	r2, ip
 801e608:	4665      	mov	r5, ip
 801e60a:	e726      	b.n	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e60c:	2200      	movs	r2, #0
 801e60e:	e724      	b.n	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e610:	4622      	mov	r2, r4
 801e612:	e722      	b.n	801e45a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e614 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e618:	b09b      	sub	sp, #108	; 0x6c
 801e61a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e61e:	9218      	str	r2, [sp, #96]	; 0x60
 801e620:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e622:	9019      	str	r0, [sp, #100]	; 0x64
 801e624:	9116      	str	r1, [sp, #88]	; 0x58
 801e626:	6850      	ldr	r0, [r2, #4]
 801e628:	9307      	str	r3, [sp, #28]
 801e62a:	6812      	ldr	r2, [r2, #0]
 801e62c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801e62e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e632:	fb00 1303 	mla	r3, r0, r3, r1
 801e636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e63a:	18d3      	adds	r3, r2, r3
 801e63c:	930a      	str	r3, [sp, #40]	; 0x28
 801e63e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	930f      	str	r3, [sp, #60]	; 0x3c
 801e644:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e646:	685e      	ldr	r6, [r3, #4]
 801e648:	3604      	adds	r6, #4
 801e64a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	dc03      	bgt.n	801e658 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e650:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e652:	2b00      	cmp	r3, #0
 801e654:	f340 834f 	ble.w	801ecf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e658:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e65a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e65e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e662:	1e48      	subs	r0, r1, #1
 801e664:	1e57      	subs	r7, r2, #1
 801e666:	9b07      	ldr	r3, [sp, #28]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	f340 8178 	ble.w	801e95e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e66e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e670:	142b      	asrs	r3, r5, #16
 801e672:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e676:	d406      	bmi.n	801e686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e678:	4584      	cmp	ip, r0
 801e67a:	da04      	bge.n	801e686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e67c:	2b00      	cmp	r3, #0
 801e67e:	db02      	blt.n	801e686 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e680:	42bb      	cmp	r3, r7
 801e682:	f2c0 816d 	blt.w	801e960 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e686:	f11c 0c01 	adds.w	ip, ip, #1
 801e68a:	f100 815b 	bmi.w	801e944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e68e:	4561      	cmp	r1, ip
 801e690:	f2c0 8158 	blt.w	801e944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e694:	3301      	adds	r3, #1
 801e696:	f100 8155 	bmi.w	801e944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e69a:	429a      	cmp	r2, r3
 801e69c:	f2c0 8152 	blt.w	801e944 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e6a0:	9b07      	ldr	r3, [sp, #28]
 801e6a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e6a4:	9317      	str	r3, [sp, #92]	; 0x5c
 801e6a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	f340 8178 	ble.w	801e99e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e6ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e6b0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e6b4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e6b8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e6bc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e6be:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e6c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e6c4:	141b      	asrs	r3, r3, #16
 801e6c6:	f100 81ba 	bmi.w	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e6ca:	f101 38ff 	add.w	r8, r1, #4294967295
 801e6ce:	4543      	cmp	r3, r8
 801e6d0:	f280 81b5 	bge.w	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e6d4:	f1bc 0f00 	cmp.w	ip, #0
 801e6d8:	f2c0 81b1 	blt.w	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e6dc:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e6e0:	45c4      	cmp	ip, r8
 801e6e2:	f280 81ac 	bge.w	801ea3e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e6e6:	b209      	sxth	r1, r1
 801e6e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e6ea:	fb0c 3301 	mla	r3, ip, r1, r3
 801e6ee:	eb04 0803 	add.w	r8, r4, r3
 801e6f2:	5ce3      	ldrb	r3, [r4, r3]
 801e6f4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e6f8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e6fc:	2a00      	cmp	r2, #0
 801e6fe:	f000 8193 	beq.w	801ea28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e702:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e706:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e70a:	940b      	str	r4, [sp, #44]	; 0x2c
 801e70c:	0e24      	lsrs	r4, r4, #24
 801e70e:	9412      	str	r4, [sp, #72]	; 0x48
 801e710:	b178      	cbz	r0, 801e732 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e712:	eb08 0c01 	add.w	ip, r8, r1
 801e716:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e71a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e71e:	9108      	str	r1, [sp, #32]
 801e720:	0e09      	lsrs	r1, r1, #24
 801e722:	9110      	str	r1, [sp, #64]	; 0x40
 801e724:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e728:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e72c:	910c      	str	r1, [sp, #48]	; 0x30
 801e72e:	0e09      	lsrs	r1, r1, #24
 801e730:	9113      	str	r1, [sp, #76]	; 0x4c
 801e732:	b292      	uxth	r2, r2
 801e734:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e736:	b280      	uxth	r0, r0
 801e738:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e73a:	fb02 f900 	mul.w	r9, r2, r0
 801e73e:	0112      	lsls	r2, r2, #4
 801e740:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e744:	eba2 0809 	sub.w	r8, r2, r9
 801e748:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e74c:	b280      	uxth	r0, r0
 801e74e:	fa1f f888 	uxth.w	r8, r8
 801e752:	1a12      	subs	r2, r2, r0
 801e754:	fb08 f101 	mul.w	r1, r8, r1
 801e758:	b292      	uxth	r2, r2
 801e75a:	fb02 110e 	mla	r1, r2, lr, r1
 801e75e:	fb00 1104 	mla	r1, r0, r4, r1
 801e762:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e764:	fb09 1104 	mla	r1, r9, r4, r1
 801e768:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e76c:	2900      	cmp	r1, #0
 801e76e:	f000 80de 	beq.w	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e772:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e776:	d01b      	beq.n	801e7b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e778:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e77c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e780:	fb0e fa0a 	mul.w	sl, lr, sl
 801e784:	fb0e fe03 	mul.w	lr, lr, r3
 801e788:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e78c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e790:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e794:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e798:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e79c:	4453      	add	r3, sl
 801e79e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7a2:	0a1b      	lsrs	r3, r3, #8
 801e7a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e7a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e7ac:	ea43 030c 	orr.w	r3, r3, ip
 801e7b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e7b2:	2cff      	cmp	r4, #255	; 0xff
 801e7b4:	d021      	beq.n	801e7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e7b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e7b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e7bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e7be:	fb04 fb0b 	mul.w	fp, r4, fp
 801e7c2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e7c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e7c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e7ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e7ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e7d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801e7d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e7de:	44de      	add	lr, fp
 801e7e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e7e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e7ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e7f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e7f4:	ea4e 040a 	orr.w	r4, lr, sl
 801e7f8:	940b      	str	r4, [sp, #44]	; 0x2c
 801e7fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e7fc:	2cff      	cmp	r4, #255	; 0xff
 801e7fe:	d021      	beq.n	801e844 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e800:	9c08      	ldr	r4, [sp, #32]
 801e802:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e806:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e808:	fb04 fb0b 	mul.w	fp, r4, fp
 801e80c:	9c08      	ldr	r4, [sp, #32]
 801e80e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e812:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e814:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e818:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e81c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e820:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e824:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e828:	44de      	add	lr, fp
 801e82a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e82e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e832:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e836:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e83a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e83e:	ea4e 040a 	orr.w	r4, lr, sl
 801e842:	9408      	str	r4, [sp, #32]
 801e844:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e846:	2cff      	cmp	r4, #255	; 0xff
 801e848:	d021      	beq.n	801e88e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e84a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e84c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e850:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e852:	fb04 fb0b 	mul.w	fp, r4, fp
 801e856:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e858:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e85c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e85e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e862:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e866:	fb04 fa0a 	mul.w	sl, r4, sl
 801e86a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e86e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e872:	44de      	add	lr, fp
 801e874:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e878:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e87c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e880:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e884:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e888:	ea4e 040a 	orr.w	r4, lr, sl
 801e88c:	940c      	str	r4, [sp, #48]	; 0x30
 801e88e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e890:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e898:	43c9      	mvns	r1, r1
 801e89a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e89e:	9c08      	ldr	r4, [sp, #32]
 801e8a0:	b2c9      	uxtb	r1, r1
 801e8a2:	fb08 fc0c 	mul.w	ip, r8, ip
 801e8a6:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e8aa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e8ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e8b0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e8b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e8b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e8ba:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e8be:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e8c2:	fb08 f80e 	mul.w	r8, r8, lr
 801e8c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e8ca:	fb02 8303 	mla	r3, r2, r3, r8
 801e8ce:	9a08      	ldr	r2, [sp, #32]
 801e8d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e8d4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e8d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e8da:	fb00 330a 	mla	r3, r0, sl, r3
 801e8de:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e8e2:	fb09 3900 	mla	r9, r9, r0, r3
 801e8e6:	783b      	ldrb	r3, [r7, #0]
 801e8e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e8ec:	fb03 f201 	mul.w	r2, r3, r1
 801e8f0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e8f4:	1c53      	adds	r3, r2, #1
 801e8f6:	ea4c 0c09 	orr.w	ip, ip, r9
 801e8fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e8fe:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e902:	703b      	strb	r3, [r7, #0]
 801e904:	787b      	ldrb	r3, [r7, #1]
 801e906:	434b      	muls	r3, r1
 801e908:	1c5a      	adds	r2, r3, #1
 801e90a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e90e:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e912:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e916:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e91a:	707b      	strb	r3, [r7, #1]
 801e91c:	78bb      	ldrb	r3, [r7, #2]
 801e91e:	4359      	muls	r1, r3
 801e920:	1c4b      	adds	r3, r1, #1
 801e922:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e926:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e92a:	f887 c002 	strb.w	ip, [r7, #2]
 801e92e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e930:	3703      	adds	r7, #3
 801e932:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e934:	441a      	add	r2, r3
 801e936:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e938:	441d      	add	r5, r3
 801e93a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e93c:	9225      	str	r2, [sp, #148]	; 0x94
 801e93e:	3b01      	subs	r3, #1
 801e940:	9317      	str	r3, [sp, #92]	; 0x5c
 801e942:	e6b0      	b.n	801e6a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e944:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e946:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e948:	441c      	add	r4, r3
 801e94a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e94c:	441d      	add	r5, r3
 801e94e:	9b07      	ldr	r3, [sp, #28]
 801e950:	9425      	str	r4, [sp, #148]	; 0x94
 801e952:	3b01      	subs	r3, #1
 801e954:	9307      	str	r3, [sp, #28]
 801e956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e958:	3303      	adds	r3, #3
 801e95a:	930a      	str	r3, [sp, #40]	; 0x28
 801e95c:	e683      	b.n	801e666 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e95e:	d026      	beq.n	801e9ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e960:	9b07      	ldr	r3, [sp, #28]
 801e962:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e964:	3b01      	subs	r3, #1
 801e966:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e968:	fb00 4003 	mla	r0, r0, r3, r4
 801e96c:	1400      	asrs	r0, r0, #16
 801e96e:	f53f ae97 	bmi.w	801e6a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e972:	3901      	subs	r1, #1
 801e974:	4288      	cmp	r0, r1
 801e976:	f6bf ae93 	bge.w	801e6a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e97a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e97c:	fb01 5303 	mla	r3, r1, r3, r5
 801e980:	141b      	asrs	r3, r3, #16
 801e982:	f53f ae8d 	bmi.w	801e6a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e986:	3a01      	subs	r2, #1
 801e988:	4293      	cmp	r3, r2
 801e98a:	f6bf ae89 	bge.w	801e6a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e990:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e994:	f103 0e03 	add.w	lr, r3, #3
 801e998:	f1bb 0f00 	cmp.w	fp, #0
 801e99c:	dc6d      	bgt.n	801ea7a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e99e:	9b07      	ldr	r3, [sp, #28]
 801e9a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e9aa:	4423      	add	r3, r4
 801e9ac:	930a      	str	r3, [sp, #40]	; 0x28
 801e9ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	f340 81a0 	ble.w	801ecf6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e9b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e9bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9c0:	eeb0 6a62 	vmov.f32	s12, s5
 801e9c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e9c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9d0:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801e9d4:	eeb0 6a43 	vmov.f32	s12, s6
 801e9d8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9dc:	ee16 5a10 	vmov	r5, s12
 801e9e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9f8:	ee12 2a90 	vmov	r2, s5
 801e9fc:	eef0 2a47 	vmov.f32	s5, s14
 801ea00:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea04:	ee13 2a10 	vmov	r2, s6
 801ea08:	9327      	str	r3, [sp, #156]	; 0x9c
 801ea0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea0c:	eeb0 3a67 	vmov.f32	s6, s15
 801ea10:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea14:	9328      	str	r3, [sp, #160]	; 0xa0
 801ea16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ea18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ea1a:	3b01      	subs	r3, #1
 801ea1c:	9316      	str	r3, [sp, #88]	; 0x58
 801ea1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea20:	bf08      	it	eq
 801ea22:	4613      	moveq	r3, r2
 801ea24:	9307      	str	r3, [sp, #28]
 801ea26:	e610      	b.n	801e64a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ea28:	2800      	cmp	r0, #0
 801ea2a:	f43f ae82 	beq.w	801e732 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ea2e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ea32:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ea36:	9108      	str	r1, [sp, #32]
 801ea38:	0e09      	lsrs	r1, r1, #24
 801ea3a:	9110      	str	r1, [sp, #64]	; 0x40
 801ea3c:	e679      	b.n	801e732 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ea3e:	f113 0801 	adds.w	r8, r3, #1
 801ea42:	f53f af74 	bmi.w	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ea46:	4541      	cmp	r1, r8
 801ea48:	f6ff af71 	blt.w	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ea4c:	f11c 0801 	adds.w	r8, ip, #1
 801ea50:	f53f af6d 	bmi.w	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ea54:	45c6      	cmp	lr, r8
 801ea56:	f6ff af6a 	blt.w	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ea5a:	b209      	sxth	r1, r1
 801ea5c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ea60:	fa0f f38e 	sxth.w	r3, lr
 801ea64:	9100      	str	r1, [sp, #0]
 801ea66:	4639      	mov	r1, r7
 801ea68:	9301      	str	r3, [sp, #4]
 801ea6a:	4633      	mov	r3, r6
 801ea6c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ea70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ea72:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ea74:	f7ff fca3 	bl	801e3be <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801ea78:	e759      	b.n	801e92e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ea7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ea7c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ea80:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ea82:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ea86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ea88:	1427      	asrs	r7, r4, #16
 801ea8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ea8c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ea90:	142b      	asrs	r3, r5, #16
 801ea92:	fb01 7303 	mla	r3, r1, r3, r7
 801ea96:	18e7      	adds	r7, r4, r3
 801ea98:	5ce3      	ldrb	r3, [r4, r3]
 801ea9a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ea9e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801eaa2:	2a00      	cmp	r2, #0
 801eaa4:	f000 811d 	beq.w	801ece2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801eaa8:	f897 8001 	ldrb.w	r8, [r7, #1]
 801eaac:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801eab0:	940d      	str	r4, [sp, #52]	; 0x34
 801eab2:	0e24      	lsrs	r4, r4, #24
 801eab4:	9414      	str	r4, [sp, #80]	; 0x50
 801eab6:	b170      	cbz	r0, 801ead6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801eab8:	eb07 0801 	add.w	r8, r7, r1
 801eabc:	5c79      	ldrb	r1, [r7, r1]
 801eabe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801eac2:	9109      	str	r1, [sp, #36]	; 0x24
 801eac4:	0e09      	lsrs	r1, r1, #24
 801eac6:	9111      	str	r1, [sp, #68]	; 0x44
 801eac8:	f898 1001 	ldrb.w	r1, [r8, #1]
 801eacc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ead0:	910e      	str	r1, [sp, #56]	; 0x38
 801ead2:	0e09      	lsrs	r1, r1, #24
 801ead4:	9115      	str	r1, [sp, #84]	; 0x54
 801ead6:	b292      	uxth	r2, r2
 801ead8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eada:	b280      	uxth	r0, r0
 801eadc:	fb02 f900 	mul.w	r9, r2, r0
 801eae0:	0112      	lsls	r2, r2, #4
 801eae2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801eae6:	eba2 0809 	sub.w	r8, r2, r9
 801eaea:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801eaee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eaf0:	b280      	uxth	r0, r0
 801eaf2:	fa1f f888 	uxth.w	r8, r8
 801eaf6:	1a09      	subs	r1, r1, r0
 801eaf8:	fb08 f202 	mul.w	r2, r8, r2
 801eafc:	b289      	uxth	r1, r1
 801eafe:	fb01 220c 	mla	r2, r1, ip, r2
 801eb02:	fb00 2204 	mla	r2, r0, r4, r2
 801eb06:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eb08:	fb09 2204 	mla	r2, r9, r4, r2
 801eb0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801eb10:	2a00      	cmp	r2, #0
 801eb12:	f000 80db 	beq.w	801eccc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801eb16:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801eb1a:	d019      	beq.n	801eb50 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801eb1c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801eb20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eb24:	fb0c fa0a 	mul.w	sl, ip, sl
 801eb28:	fb0c fc03 	mul.w	ip, ip, r3
 801eb2c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801eb30:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801eb34:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801eb38:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eb3c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801eb40:	4453      	add	r3, sl
 801eb42:	0a3f      	lsrs	r7, r7, #8
 801eb44:	0a1b      	lsrs	r3, r3, #8
 801eb46:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801eb4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801eb4e:	433b      	orrs	r3, r7
 801eb50:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb52:	2cff      	cmp	r4, #255	; 0xff
 801eb54:	d020      	beq.n	801eb98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801eb56:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eb58:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eb5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb5e:	4367      	muls	r7, r4
 801eb60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801eb62:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eb66:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb6c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eb70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb74:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb78:	44bc      	add	ip, r7
 801eb7a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eb7e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb82:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eb86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb92:	ea4c 040a 	orr.w	r4, ip, sl
 801eb96:	940d      	str	r4, [sp, #52]	; 0x34
 801eb98:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eb9a:	2cff      	cmp	r4, #255	; 0xff
 801eb9c:	d020      	beq.n	801ebe0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801eb9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eba0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eba4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801eba6:	4367      	muls	r7, r4
 801eba8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ebaa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ebae:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ebb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ebb4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ebb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ebbc:	fb04 fa0a 	mul.w	sl, r4, sl
 801ebc0:	44bc      	add	ip, r7
 801ebc2:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ebc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ebca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ebce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ebd2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ebd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ebda:	ea4c 040a 	orr.w	r4, ip, sl
 801ebde:	9409      	str	r4, [sp, #36]	; 0x24
 801ebe0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ebe2:	2cff      	cmp	r4, #255	; 0xff
 801ebe4:	d020      	beq.n	801ec28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ebe6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ebe8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ebec:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ebee:	4367      	muls	r7, r4
 801ebf0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ebf2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ebf6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ebfa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ebfc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ec00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec04:	fb04 fa0a 	mul.w	sl, r4, sl
 801ec08:	44bc      	add	ip, r7
 801ec0a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ec0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ec16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ec1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ec1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ec22:	ea4c 040a 	orr.w	r4, ip, sl
 801ec26:	940e      	str	r4, [sp, #56]	; 0x38
 801ec28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ec2a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ec2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ec32:	43d2      	mvns	r2, r2
 801ec34:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ec38:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ec3a:	b2d2      	uxtb	r2, r2
 801ec3c:	fb08 f707 	mul.w	r7, r8, r7
 801ec40:	fb01 770c 	mla	r7, r1, ip, r7
 801ec44:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ec48:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ec4a:	fb00 770c 	mla	r7, r0, ip, r7
 801ec4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ec52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ec54:	fb09 770c 	mla	r7, r9, ip, r7
 801ec58:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ec5c:	fb08 f80c 	mul.w	r8, r8, ip
 801ec60:	0a3f      	lsrs	r7, r7, #8
 801ec62:	fb01 8303 	mla	r3, r1, r3, r8
 801ec66:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ec68:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ec6c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ec70:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ec72:	fb00 330a 	mla	r3, r0, sl, r3
 801ec76:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ec7a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ec7e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ec82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec86:	fb03 f102 	mul.w	r1, r3, r2
 801ec8a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ec8e:	1c4b      	adds	r3, r1, #1
 801ec90:	ea47 070c 	orr.w	r7, r7, ip
 801ec94:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ec98:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ec9c:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801eca0:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801eca4:	4353      	muls	r3, r2
 801eca6:	1c59      	adds	r1, r3, #1
 801eca8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ecac:	0a3b      	lsrs	r3, r7, #8
 801ecae:	0c3f      	lsrs	r7, r7, #16
 801ecb0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ecb4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ecb8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ecbc:	435a      	muls	r2, r3
 801ecbe:	1c53      	adds	r3, r2, #1
 801ecc0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ecc4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ecc8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801eccc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ecce:	f10e 0e03 	add.w	lr, lr, #3
 801ecd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ecd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ecd8:	441a      	add	r2, r3
 801ecda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecdc:	9225      	str	r2, [sp, #148]	; 0x94
 801ecde:	441d      	add	r5, r3
 801ece0:	e65a      	b.n	801e998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ece2:	2800      	cmp	r0, #0
 801ece4:	f43f aef7 	beq.w	801ead6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ece8:	5c79      	ldrb	r1, [r7, r1]
 801ecea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ecee:	9109      	str	r1, [sp, #36]	; 0x24
 801ecf0:	0e09      	lsrs	r1, r1, #24
 801ecf2:	9111      	str	r1, [sp, #68]	; 0x44
 801ecf4:	e6ef      	b.n	801ead6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ecf6:	b01b      	add	sp, #108	; 0x6c
 801ecf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ecfc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed00:	b08d      	sub	sp, #52	; 0x34
 801ed02:	468b      	mov	fp, r1
 801ed04:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801ed08:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ed0c:	fb0c 5703 	mla	r7, ip, r3, r5
 801ed10:	f1bc 0f00 	cmp.w	ip, #0
 801ed14:	910b      	str	r1, [sp, #44]	; 0x2c
 801ed16:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ed1a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ed1e:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801ed22:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801ed26:	eb02 0607 	add.w	r6, r2, r7
 801ed2a:	f89b 4000 	ldrb.w	r4, [fp]
 801ed2e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801ed32:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ed36:	f2c0 80c1 	blt.w	801eebc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ed3a:	45e6      	cmp	lr, ip
 801ed3c:	f340 80be 	ble.w	801eebc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ed40:	2d00      	cmp	r5, #0
 801ed42:	f2c0 80b7 	blt.w	801eeb4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ed46:	42ab      	cmp	r3, r5
 801ed48:	f340 80b4 	ble.w	801eeb4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ed4c:	5dd2      	ldrb	r2, [r2, r7]
 801ed4e:	9205      	str	r2, [sp, #20]
 801ed50:	7872      	ldrb	r2, [r6, #1]
 801ed52:	9206      	str	r2, [sp, #24]
 801ed54:	78b2      	ldrb	r2, [r6, #2]
 801ed56:	9207      	str	r2, [sp, #28]
 801ed58:	1c6a      	adds	r2, r5, #1
 801ed5a:	f100 80b6 	bmi.w	801eeca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ed5e:	4293      	cmp	r3, r2
 801ed60:	f340 80b3 	ble.w	801eeca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ed64:	f1b8 0f00 	cmp.w	r8, #0
 801ed68:	f000 80af 	beq.w	801eeca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ed6c:	78f2      	ldrb	r2, [r6, #3]
 801ed6e:	9201      	str	r2, [sp, #4]
 801ed70:	7932      	ldrb	r2, [r6, #4]
 801ed72:	9202      	str	r2, [sp, #8]
 801ed74:	7972      	ldrb	r2, [r6, #5]
 801ed76:	9203      	str	r2, [sp, #12]
 801ed78:	f11c 0c01 	adds.w	ip, ip, #1
 801ed7c:	f100 80ad 	bmi.w	801eeda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ed80:	45e6      	cmp	lr, ip
 801ed82:	f340 80aa 	ble.w	801eeda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ed86:	f1ba 0f00 	cmp.w	sl, #0
 801ed8a:	f000 80a6 	beq.w	801eeda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ed8e:	2d00      	cmp	r5, #0
 801ed90:	f2c0 809f 	blt.w	801eed2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ed94:	42ab      	cmp	r3, r5
 801ed96:	f340 809c 	ble.w	801eed2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ed9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ed9e:	f816 9002 	ldrb.w	r9, [r6, r2]
 801eda2:	2203      	movs	r2, #3
 801eda4:	fb03 6c02 	mla	ip, r3, r2, r6
 801eda8:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801edac:	f89c e002 	ldrb.w	lr, [ip, #2]
 801edb0:	9704      	str	r7, [sp, #16]
 801edb2:	3501      	adds	r5, #1
 801edb4:	f100 8098 	bmi.w	801eee8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801edb8:	42ab      	cmp	r3, r5
 801edba:	f340 8095 	ble.w	801eee8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801edbe:	f1b8 0f00 	cmp.w	r8, #0
 801edc2:	f000 8091 	beq.w	801eee8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801edc6:	f04f 0c03 	mov.w	ip, #3
 801edca:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801edce:	5cb5      	ldrb	r5, [r6, r2]
 801edd0:	fb03 620c 	mla	r2, r3, ip, r6
 801edd4:	fb03 630c 	mla	r3, r3, ip, r6
 801edd8:	7912      	ldrb	r2, [r2, #4]
 801edda:	795e      	ldrb	r6, [r3, #5]
 801eddc:	fa1f f388 	uxth.w	r3, r8
 801ede0:	fa1f fc8a 	uxth.w	ip, sl
 801ede4:	fb03 f70c 	mul.w	r7, r3, ip
 801ede8:	011b      	lsls	r3, r3, #4
 801edea:	9708      	str	r7, [sp, #32]
 801edec:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801edf0:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801edf4:	1bdb      	subs	r3, r3, r7
 801edf6:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801edfa:	fa1f fc8c 	uxth.w	ip, ip
 801edfe:	b29b      	uxth	r3, r3
 801ee00:	9709      	str	r7, [sp, #36]	; 0x24
 801ee02:	ebaa 0a0c 	sub.w	sl, sl, ip
 801ee06:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ee08:	930a      	str	r3, [sp, #40]	; 0x28
 801ee0a:	fa1f fa8a 	uxth.w	sl, sl
 801ee0e:	ea6f 0807 	mvn.w	r8, r7
 801ee12:	9f01      	ldr	r7, [sp, #4]
 801ee14:	435f      	muls	r7, r3
 801ee16:	9b05      	ldr	r3, [sp, #20]
 801ee18:	fa5f f888 	uxtb.w	r8, r8
 801ee1c:	fb0a 7703 	mla	r7, sl, r3, r7
 801ee20:	9b08      	ldr	r3, [sp, #32]
 801ee22:	fb14 f408 	smulbb	r4, r4, r8
 801ee26:	fb0c 7709 	mla	r7, ip, r9, r7
 801ee2a:	fb10 f008 	smulbb	r0, r0, r8
 801ee2e:	fb11 f108 	smulbb	r1, r1, r8
 801ee32:	fb03 7705 	mla	r7, r3, r5, r7
 801ee36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee38:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ee3c:	fb07 4703 	mla	r7, r7, r3, r4
 801ee40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee42:	b2bf      	uxth	r7, r7
 801ee44:	1c7c      	adds	r4, r7, #1
 801ee46:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801ee4a:	1224      	asrs	r4, r4, #8
 801ee4c:	f88b 4000 	strb.w	r4, [fp]
 801ee50:	9c02      	ldr	r4, [sp, #8]
 801ee52:	435c      	muls	r4, r3
 801ee54:	9b06      	ldr	r3, [sp, #24]
 801ee56:	fb0a 4403 	mla	r4, sl, r3, r4
 801ee5a:	9b04      	ldr	r3, [sp, #16]
 801ee5c:	fb0c 4403 	mla	r4, ip, r3, r4
 801ee60:	9b08      	ldr	r3, [sp, #32]
 801ee62:	fb03 4402 	mla	r4, r3, r2, r4
 801ee66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ee6a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ee6e:	fb04 0403 	mla	r4, r4, r3, r0
 801ee72:	9b03      	ldr	r3, [sp, #12]
 801ee74:	435a      	muls	r2, r3
 801ee76:	b2a4      	uxth	r4, r4
 801ee78:	4613      	mov	r3, r2
 801ee7a:	9a07      	ldr	r2, [sp, #28]
 801ee7c:	1c60      	adds	r0, r4, #1
 801ee7e:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ee82:	9b08      	ldr	r3, [sp, #32]
 801ee84:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ee88:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ee8c:	1224      	asrs	r4, r4, #8
 801ee8e:	fb03 c606 	mla	r6, r3, r6, ip
 801ee92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee94:	f88b 4001 	strb.w	r4, [fp, #1]
 801ee98:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ee9c:	fb06 1103 	mla	r1, r6, r3, r1
 801eea0:	b289      	uxth	r1, r1
 801eea2:	1c4e      	adds	r6, r1, #1
 801eea4:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801eea8:	1209      	asrs	r1, r1, #8
 801eeaa:	f88b 1002 	strb.w	r1, [fp, #2]
 801eeae:	b00d      	add	sp, #52	; 0x34
 801eeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eeb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801eeb8:	9405      	str	r4, [sp, #20]
 801eeba:	e74d      	b.n	801ed58 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801eebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eec0:	9401      	str	r4, [sp, #4]
 801eec2:	9405      	str	r4, [sp, #20]
 801eec4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801eec8:	e756      	b.n	801ed78 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801eeca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eece:	9401      	str	r4, [sp, #4]
 801eed0:	e752      	b.n	801ed78 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801eed2:	468e      	mov	lr, r1
 801eed4:	9004      	str	r0, [sp, #16]
 801eed6:	46a1      	mov	r9, r4
 801eed8:	e76b      	b.n	801edb2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801eeda:	460e      	mov	r6, r1
 801eedc:	4602      	mov	r2, r0
 801eede:	4625      	mov	r5, r4
 801eee0:	468e      	mov	lr, r1
 801eee2:	9004      	str	r0, [sp, #16]
 801eee4:	46a1      	mov	r9, r4
 801eee6:	e779      	b.n	801eddc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801eee8:	460e      	mov	r6, r1
 801eeea:	4602      	mov	r2, r0
 801eeec:	4625      	mov	r5, r4
 801eeee:	e775      	b.n	801eddc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801eef0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eef4:	b09f      	sub	sp, #124	; 0x7c
 801eef6:	920e      	str	r2, [sp, #56]	; 0x38
 801eef8:	9307      	str	r3, [sp, #28]
 801eefa:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801eefc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ef00:	901d      	str	r0, [sp, #116]	; 0x74
 801ef02:	930c      	str	r3, [sp, #48]	; 0x30
 801ef04:	6850      	ldr	r0, [r2, #4]
 801ef06:	910b      	str	r1, [sp, #44]	; 0x2c
 801ef08:	6812      	ldr	r2, [r2, #0]
 801ef0a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ef0e:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801ef12:	fb00 1303 	mla	r3, r0, r3, r1
 801ef16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef1a:	18d3      	adds	r3, r2, r3
 801ef1c:	9308      	str	r3, [sp, #32]
 801ef1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	930a      	str	r3, [sp, #40]	; 0x28
 801ef24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ef26:	43db      	mvns	r3, r3
 801ef28:	b2db      	uxtb	r3, r3
 801ef2a:	9309      	str	r3, [sp, #36]	; 0x24
 801ef2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	dc03      	bgt.n	801ef3a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ef32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	f340 81f5 	ble.w	801f324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ef3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef3c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef40:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef44:	1e48      	subs	r0, r1, #1
 801ef46:	1e54      	subs	r4, r2, #1
 801ef48:	9b07      	ldr	r3, [sp, #28]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	f340 80d5 	ble.w	801f0fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801ef50:	ea5f 452a 	movs.w	r5, sl, asr #16
 801ef54:	ea4f 4328 	mov.w	r3, r8, asr #16
 801ef58:	d406      	bmi.n	801ef68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ef5a:	4285      	cmp	r5, r0
 801ef5c:	da04      	bge.n	801ef68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	db02      	blt.n	801ef68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ef62:	42a3      	cmp	r3, r4
 801ef64:	f2c0 80ca 	blt.w	801f0fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ef68:	3501      	adds	r5, #1
 801ef6a:	f100 80bb 	bmi.w	801f0e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ef6e:	42a9      	cmp	r1, r5
 801ef70:	f2c0 80b8 	blt.w	801f0e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ef74:	3301      	adds	r3, #1
 801ef76:	f100 80b5 	bmi.w	801f0e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ef7a:	429a      	cmp	r2, r3
 801ef7c:	f2c0 80b2 	blt.w	801f0e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ef80:	9b07      	ldr	r3, [sp, #28]
 801ef82:	9d08      	ldr	r5, [sp, #32]
 801ef84:	930d      	str	r3, [sp, #52]	; 0x34
 801ef86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	f340 80d6 	ble.w	801f13a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801ef8e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801ef90:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ef94:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ef96:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ef9a:	68c6      	ldr	r6, [r0, #12]
 801ef9c:	ea5f 402a 	movs.w	r0, sl, asr #16
 801efa0:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801efa4:	689b      	ldr	r3, [r3, #8]
 801efa6:	f100 810f 	bmi.w	801f1c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801efaa:	1e5f      	subs	r7, r3, #1
 801efac:	42b8      	cmp	r0, r7
 801efae:	f280 810b 	bge.w	801f1c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801efb2:	2c00      	cmp	r4, #0
 801efb4:	f2c0 8108 	blt.w	801f1c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801efb8:	1e77      	subs	r7, r6, #1
 801efba:	42bc      	cmp	r4, r7
 801efbc:	f280 8104 	bge.w	801f1c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801efc0:	b21b      	sxth	r3, r3
 801efc2:	fb04 0003 	mla	r0, r4, r3, r0
 801efc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801efc8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801efcc:	1826      	adds	r6, r4, r0
 801efce:	5c24      	ldrb	r4, [r4, r0]
 801efd0:	78b7      	ldrb	r7, [r6, #2]
 801efd2:	7870      	ldrb	r0, [r6, #1]
 801efd4:	970f      	str	r7, [sp, #60]	; 0x3c
 801efd6:	7977      	ldrb	r7, [r6, #5]
 801efd8:	f896 e003 	ldrb.w	lr, [r6, #3]
 801efdc:	f896 c004 	ldrb.w	ip, [r6, #4]
 801efe0:	9710      	str	r7, [sp, #64]	; 0x40
 801efe2:	b1c9      	cbz	r1, 801f018 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801efe4:	f04f 0b03 	mov.w	fp, #3
 801efe8:	f06f 0904 	mvn.w	r9, #4
 801efec:	3605      	adds	r6, #5
 801efee:	fb13 930b 	smlabb	r3, r3, fp, r9
 801eff2:	eb06 0b03 	add.w	fp, r6, r3
 801eff6:	5cf3      	ldrb	r3, [r6, r3]
 801eff8:	9311      	str	r3, [sp, #68]	; 0x44
 801effa:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801effe:	9313      	str	r3, [sp, #76]	; 0x4c
 801f000:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801f004:	9315      	str	r3, [sp, #84]	; 0x54
 801f006:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801f00a:	9312      	str	r3, [sp, #72]	; 0x48
 801f00c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801f010:	9314      	str	r3, [sp, #80]	; 0x50
 801f012:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801f016:	9316      	str	r3, [sp, #88]	; 0x58
 801f018:	b292      	uxth	r2, r2
 801f01a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801f01c:	b289      	uxth	r1, r1
 801f01e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f022:	fb02 f601 	mul.w	r6, r2, r1
 801f026:	0112      	lsls	r2, r2, #4
 801f028:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801f02c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801f030:	1b92      	subs	r2, r2, r6
 801f032:	b289      	uxth	r1, r1
 801f034:	b292      	uxth	r2, r2
 801f036:	eba9 0901 	sub.w	r9, r9, r1
 801f03a:	fb02 fe0e 	mul.w	lr, r2, lr
 801f03e:	fa1f f989 	uxth.w	r9, r9
 801f042:	fb02 fc0c 	mul.w	ip, r2, ip
 801f046:	fb09 e404 	mla	r4, r9, r4, lr
 801f04a:	f895 e000 	ldrb.w	lr, [r5]
 801f04e:	fb09 c000 	mla	r0, r9, r0, ip
 801f052:	fb01 4407 	mla	r4, r1, r7, r4
 801f056:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801f058:	fb06 4407 	mla	r4, r6, r7, r4
 801f05c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f05e:	fb1e fe07 	smulbb	lr, lr, r7
 801f062:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f066:	fb04 e403 	mla	r4, r4, r3, lr
 801f06a:	b2a4      	uxth	r4, r4
 801f06c:	f104 0e01 	add.w	lr, r4, #1
 801f070:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801f074:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f076:	fb01 0004 	mla	r0, r1, r4, r0
 801f07a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f07c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f080:	fb06 0004 	mla	r0, r6, r4, r0
 801f084:	786c      	ldrb	r4, [r5, #1]
 801f086:	f885 e000 	strb.w	lr, [r5]
 801f08a:	fb14 f407 	smulbb	r4, r4, r7
 801f08e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f092:	fb00 4003 	mla	r0, r0, r3, r4
 801f096:	b280      	uxth	r0, r0
 801f098:	1c44      	adds	r4, r0, #1
 801f09a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f09e:	1200      	asrs	r0, r0, #8
 801f0a0:	7068      	strb	r0, [r5, #1]
 801f0a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f0a4:	4342      	muls	r2, r0
 801f0a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f0a8:	fb09 2200 	mla	r2, r9, r0, r2
 801f0ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f0ae:	fb01 2100 	mla	r1, r1, r0, r2
 801f0b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f0b4:	fb06 1602 	mla	r6, r6, r2, r1
 801f0b8:	78a9      	ldrb	r1, [r5, #2]
 801f0ba:	fb11 f107 	smulbb	r1, r1, r7
 801f0be:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f0c2:	fb06 1303 	mla	r3, r6, r3, r1
 801f0c6:	b29b      	uxth	r3, r3
 801f0c8:	1c5e      	adds	r6, r3, #1
 801f0ca:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801f0ce:	121b      	asrs	r3, r3, #8
 801f0d0:	70ab      	strb	r3, [r5, #2]
 801f0d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f0d4:	3503      	adds	r5, #3
 801f0d6:	449a      	add	sl, r3
 801f0d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f0da:	4498      	add	r8, r3
 801f0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f0de:	3b01      	subs	r3, #1
 801f0e0:	930d      	str	r3, [sp, #52]	; 0x34
 801f0e2:	e750      	b.n	801ef86 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f0e6:	449a      	add	sl, r3
 801f0e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f0ea:	4498      	add	r8, r3
 801f0ec:	9b07      	ldr	r3, [sp, #28]
 801f0ee:	3b01      	subs	r3, #1
 801f0f0:	9307      	str	r3, [sp, #28]
 801f0f2:	9b08      	ldr	r3, [sp, #32]
 801f0f4:	3303      	adds	r3, #3
 801f0f6:	9308      	str	r3, [sp, #32]
 801f0f8:	e726      	b.n	801ef48 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f0fa:	d026      	beq.n	801f14a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801f0fc:	9b07      	ldr	r3, [sp, #28]
 801f0fe:	982b      	ldr	r0, [sp, #172]	; 0xac
 801f100:	3b01      	subs	r3, #1
 801f102:	fb00 a003 	mla	r0, r0, r3, sl
 801f106:	1400      	asrs	r0, r0, #16
 801f108:	f53f af3a 	bmi.w	801ef80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f10c:	3901      	subs	r1, #1
 801f10e:	4288      	cmp	r0, r1
 801f110:	f6bf af36 	bge.w	801ef80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f114:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f116:	fb01 8303 	mla	r3, r1, r3, r8
 801f11a:	141b      	asrs	r3, r3, #16
 801f11c:	f53f af30 	bmi.w	801ef80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f120:	3a01      	subs	r2, #1
 801f122:	4293      	cmp	r3, r2
 801f124:	f6bf af2c 	bge.w	801ef80 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f128:	9b08      	ldr	r3, [sp, #32]
 801f12a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801f12e:	1cdd      	adds	r5, r3, #3
 801f130:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801f134:	f1bc 0f00 	cmp.w	ip, #0
 801f138:	dc5f      	bgt.n	801f1fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801f13a:	9b07      	ldr	r3, [sp, #28]
 801f13c:	9a08      	ldr	r2, [sp, #32]
 801f13e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f142:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f146:	441a      	add	r2, r3
 801f148:	9208      	str	r2, [sp, #32]
 801f14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f14c:	2b00      	cmp	r3, #0
 801f14e:	f340 80e9 	ble.w	801f324 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801f152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f156:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f158:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f15c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f160:	eef0 6a62 	vmov.f32	s13, s5
 801f164:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f168:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f16c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f170:	ee16 aa90 	vmov	sl, s13
 801f174:	eef0 6a43 	vmov.f32	s13, s6
 801f178:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f17c:	ee16 8a90 	vmov	r8, s13
 801f180:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f184:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f188:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f18c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f190:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f194:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f198:	ee12 2a90 	vmov	r2, s5
 801f19c:	eef0 2a47 	vmov.f32	s5, s14
 801f1a0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1a4:	ee13 2a10 	vmov	r2, s6
 801f1a8:	932b      	str	r3, [sp, #172]	; 0xac
 801f1aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f1ac:	eeb0 3a67 	vmov.f32	s6, s15
 801f1b0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1b4:	932c      	str	r3, [sp, #176]	; 0xb0
 801f1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f1ba:	3b01      	subs	r3, #1
 801f1bc:	930b      	str	r3, [sp, #44]	; 0x2c
 801f1be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f1c0:	bf08      	it	eq
 801f1c2:	4613      	moveq	r3, r2
 801f1c4:	9307      	str	r3, [sp, #28]
 801f1c6:	e6b1      	b.n	801ef2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f1c8:	1c47      	adds	r7, r0, #1
 801f1ca:	d482      	bmi.n	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f1cc:	42bb      	cmp	r3, r7
 801f1ce:	db80      	blt.n	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f1d0:	1c67      	adds	r7, r4, #1
 801f1d2:	f53f af7e 	bmi.w	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f1d6:	42be      	cmp	r6, r7
 801f1d8:	f6ff af7b 	blt.w	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f1dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f1de:	b236      	sxth	r6, r6
 801f1e0:	9001      	str	r0, [sp, #4]
 801f1e2:	b21b      	sxth	r3, r3
 801f1e4:	9600      	str	r6, [sp, #0]
 801f1e6:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f1e8:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801f1ec:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801f1f0:	4629      	mov	r1, r5
 801f1f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f1f4:	f7ff fd82 	bl	801ecfc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801f1f8:	e76b      	b.n	801f0d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f1fa:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801f1fc:	ea4f 402a 	mov.w	r0, sl, asr #16
 801f200:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801f204:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801f208:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801f20c:	ea4f 4128 	mov.w	r1, r8, asr #16
 801f210:	fb07 0101 	mla	r1, r7, r1, r0
 801f214:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f216:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f21a:	1844      	adds	r4, r0, r1
 801f21c:	5c40      	ldrb	r0, [r0, r1]
 801f21e:	78a6      	ldrb	r6, [r4, #2]
 801f220:	7861      	ldrb	r1, [r4, #1]
 801f222:	960f      	str	r6, [sp, #60]	; 0x3c
 801f224:	78e6      	ldrb	r6, [r4, #3]
 801f226:	910d      	str	r1, [sp, #52]	; 0x34
 801f228:	9610      	str	r6, [sp, #64]	; 0x40
 801f22a:	f894 9004 	ldrb.w	r9, [r4, #4]
 801f22e:	f894 b005 	ldrb.w	fp, [r4, #5]
 801f232:	b192      	cbz	r2, 801f25a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f234:	f06f 0604 	mvn.w	r6, #4
 801f238:	2103      	movs	r1, #3
 801f23a:	3405      	adds	r4, #5
 801f23c:	fb17 6701 	smlabb	r7, r7, r1, r6
 801f240:	19e6      	adds	r6, r4, r7
 801f242:	5de4      	ldrb	r4, [r4, r7]
 801f244:	9417      	str	r4, [sp, #92]	; 0x5c
 801f246:	7874      	ldrb	r4, [r6, #1]
 801f248:	9419      	str	r4, [sp, #100]	; 0x64
 801f24a:	78b4      	ldrb	r4, [r6, #2]
 801f24c:	941b      	str	r4, [sp, #108]	; 0x6c
 801f24e:	78f4      	ldrb	r4, [r6, #3]
 801f250:	9418      	str	r4, [sp, #96]	; 0x60
 801f252:	7934      	ldrb	r4, [r6, #4]
 801f254:	941a      	str	r4, [sp, #104]	; 0x68
 801f256:	7974      	ldrb	r4, [r6, #5]
 801f258:	941c      	str	r4, [sp, #112]	; 0x70
 801f25a:	b29b      	uxth	r3, r3
 801f25c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801f25e:	b292      	uxth	r2, r2
 801f260:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f262:	3503      	adds	r5, #3
 801f264:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f268:	fb03 f402 	mul.w	r4, r3, r2
 801f26c:	011b      	lsls	r3, r3, #4
 801f26e:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801f272:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801f276:	1b1b      	subs	r3, r3, r4
 801f278:	b292      	uxth	r2, r2
 801f27a:	b29b      	uxth	r3, r3
 801f27c:	1ab6      	subs	r6, r6, r2
 801f27e:	435f      	muls	r7, r3
 801f280:	b2b6      	uxth	r6, r6
 801f282:	fb03 f909 	mul.w	r9, r3, r9
 801f286:	fb03 fb0b 	mul.w	fp, r3, fp
 801f28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f28c:	fb06 7000 	mla	r0, r6, r0, r7
 801f290:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801f292:	fb06 bb03 	mla	fp, r6, r3, fp
 801f296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f298:	fb02 0007 	mla	r0, r2, r7, r0
 801f29c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801f29e:	fb02 bb03 	mla	fp, r2, r3, fp
 801f2a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f2a4:	fb04 0007 	mla	r0, r4, r7, r0
 801f2a8:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801f2ac:	fb17 f701 	smulbb	r7, r7, r1
 801f2b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f2b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801f2b6:	fb00 700e 	mla	r0, r0, lr, r7
 801f2ba:	fb06 9101 	mla	r1, r6, r1, r9
 801f2be:	b280      	uxth	r0, r0
 801f2c0:	1c47      	adds	r7, r0, #1
 801f2c2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801f2c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f2c8:	1200      	asrs	r0, r0, #8
 801f2ca:	f805 0c06 	strb.w	r0, [r5, #-6]
 801f2ce:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f2d0:	fb02 1100 	mla	r1, r2, r0, r1
 801f2d4:	981a      	ldr	r0, [sp, #104]	; 0x68
 801f2d6:	fb04 1100 	mla	r1, r4, r0, r1
 801f2da:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801f2de:	fb04 b403 	mla	r4, r4, r3, fp
 801f2e2:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801f2e6:	fb10 f007 	smulbb	r0, r0, r7
 801f2ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801f2ee:	fb13 f307 	smulbb	r3, r3, r7
 801f2f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f2f6:	fb01 010e 	mla	r1, r1, lr, r0
 801f2fa:	fb04 340e 	mla	r4, r4, lr, r3
 801f2fe:	b289      	uxth	r1, r1
 801f300:	b2a4      	uxth	r4, r4
 801f302:	1c48      	adds	r0, r1, #1
 801f304:	1c63      	adds	r3, r4, #1
 801f306:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801f30a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f30e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801f310:	1209      	asrs	r1, r1, #8
 801f312:	1224      	asrs	r4, r4, #8
 801f314:	449a      	add	sl, r3
 801f316:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f318:	f805 1c05 	strb.w	r1, [r5, #-5]
 801f31c:	f805 4c04 	strb.w	r4, [r5, #-4]
 801f320:	4498      	add	r8, r3
 801f322:	e707      	b.n	801f134 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801f324:	b01f      	add	sp, #124	; 0x7c
 801f326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f32a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801f32a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f32e:	b087      	sub	sp, #28
 801f330:	780d      	ldrb	r5, [r1, #0]
 801f332:	784c      	ldrb	r4, [r1, #1]
 801f334:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801f338:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801f33c:	9004      	str	r0, [sp, #16]
 801f33e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801f342:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801f346:	9005      	str	r0, [sp, #20]
 801f348:	fb06 bc03 	mla	ip, r6, r3, fp
 801f34c:	2e00      	cmp	r6, #0
 801f34e:	7888      	ldrb	r0, [r1, #2]
 801f350:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f354:	eb02 090c 	add.w	r9, r2, ip
 801f358:	f2c0 8084 	blt.w	801f464 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f35c:	42b7      	cmp	r7, r6
 801f35e:	f340 8081 	ble.w	801f464 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801f362:	f1bb 0f00 	cmp.w	fp, #0
 801f366:	db79      	blt.n	801f45c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f368:	455b      	cmp	r3, fp
 801f36a:	dd77      	ble.n	801f45c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801f36c:	f812 200c 	ldrb.w	r2, [r2, ip]
 801f370:	9201      	str	r2, [sp, #4]
 801f372:	f899 2001 	ldrb.w	r2, [r9, #1]
 801f376:	9202      	str	r2, [sp, #8]
 801f378:	f899 2002 	ldrb.w	r2, [r9, #2]
 801f37c:	9203      	str	r2, [sp, #12]
 801f37e:	f11b 0201 	adds.w	r2, fp, #1
 801f382:	d476      	bmi.n	801f472 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f384:	4293      	cmp	r3, r2
 801f386:	dd74      	ble.n	801f472 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f388:	9a04      	ldr	r2, [sp, #16]
 801f38a:	2a00      	cmp	r2, #0
 801f38c:	d071      	beq.n	801f472 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801f38e:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f392:	f899 c004 	ldrb.w	ip, [r9, #4]
 801f396:	f899 a005 	ldrb.w	sl, [r9, #5]
 801f39a:	3601      	adds	r6, #1
 801f39c:	d471      	bmi.n	801f482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f39e:	42b7      	cmp	r7, r6
 801f3a0:	dd6f      	ble.n	801f482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f3a2:	9a05      	ldr	r2, [sp, #20]
 801f3a4:	2a00      	cmp	r2, #0
 801f3a6:	d06c      	beq.n	801f482 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801f3a8:	f1bb 0f00 	cmp.w	fp, #0
 801f3ac:	db65      	blt.n	801f47a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f3ae:	455b      	cmp	r3, fp
 801f3b0:	dd63      	ble.n	801f47a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801f3b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801f3b6:	f819 e002 	ldrb.w	lr, [r9, r2]
 801f3ba:	2203      	movs	r2, #3
 801f3bc:	fb03 9602 	mla	r6, r3, r2, r9
 801f3c0:	7877      	ldrb	r7, [r6, #1]
 801f3c2:	78b6      	ldrb	r6, [r6, #2]
 801f3c4:	f11b 0b01 	adds.w	fp, fp, #1
 801f3c8:	d40c      	bmi.n	801f3e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f3ca:	455b      	cmp	r3, fp
 801f3cc:	dd0a      	ble.n	801f3e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f3ce:	9a04      	ldr	r2, [sp, #16]
 801f3d0:	b142      	cbz	r2, 801f3e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801f3d2:	2203      	movs	r2, #3
 801f3d4:	fb13 2002 	smlabb	r0, r3, r2, r2
 801f3d8:	f819 5000 	ldrb.w	r5, [r9, r0]
 801f3dc:	fb03 9002 	mla	r0, r3, r2, r9
 801f3e0:	7904      	ldrb	r4, [r0, #4]
 801f3e2:	7940      	ldrb	r0, [r0, #5]
 801f3e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801f3e8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f3ec:	fb03 fb02 	mul.w	fp, r3, r2
 801f3f0:	011b      	lsls	r3, r3, #4
 801f3f2:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801f3f6:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801f3fa:	eba3 030b 	sub.w	r3, r3, fp
 801f3fe:	b292      	uxth	r2, r2
 801f400:	b29b      	uxth	r3, r3
 801f402:	eba9 0902 	sub.w	r9, r9, r2
 801f406:	9304      	str	r3, [sp, #16]
 801f408:	fa1f f989 	uxth.w	r9, r9
 801f40c:	fb03 f808 	mul.w	r8, r3, r8
 801f410:	9b01      	ldr	r3, [sp, #4]
 801f412:	fb09 8803 	mla	r8, r9, r3, r8
 801f416:	9b04      	ldr	r3, [sp, #16]
 801f418:	fb03 fc0c 	mul.w	ip, r3, ip
 801f41c:	9b02      	ldr	r3, [sp, #8]
 801f41e:	fb02 880e 	mla	r8, r2, lr, r8
 801f422:	fb09 cc03 	mla	ip, r9, r3, ip
 801f426:	9b04      	ldr	r3, [sp, #16]
 801f428:	fb0b 8805 	mla	r8, fp, r5, r8
 801f42c:	fb02 c707 	mla	r7, r2, r7, ip
 801f430:	fb03 f30a 	mul.w	r3, r3, sl
 801f434:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f438:	fb0b 7404 	mla	r4, fp, r4, r7
 801f43c:	f881 8000 	strb.w	r8, [r1]
 801f440:	1224      	asrs	r4, r4, #8
 801f442:	704c      	strb	r4, [r1, #1]
 801f444:	9c03      	ldr	r4, [sp, #12]
 801f446:	fb09 3904 	mla	r9, r9, r4, r3
 801f44a:	fb02 9206 	mla	r2, r2, r6, r9
 801f44e:	fb0b 2000 	mla	r0, fp, r0, r2
 801f452:	1200      	asrs	r0, r0, #8
 801f454:	7088      	strb	r0, [r1, #2]
 801f456:	b007      	add	sp, #28
 801f458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f45c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f460:	9501      	str	r5, [sp, #4]
 801f462:	e78c      	b.n	801f37e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801f464:	4682      	mov	sl, r0
 801f466:	46a4      	mov	ip, r4
 801f468:	46a8      	mov	r8, r5
 801f46a:	9501      	str	r5, [sp, #4]
 801f46c:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801f470:	e793      	b.n	801f39a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f472:	4682      	mov	sl, r0
 801f474:	46a4      	mov	ip, r4
 801f476:	46a8      	mov	r8, r5
 801f478:	e78f      	b.n	801f39a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801f47a:	4606      	mov	r6, r0
 801f47c:	4627      	mov	r7, r4
 801f47e:	46ae      	mov	lr, r5
 801f480:	e7a0      	b.n	801f3c4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801f482:	4606      	mov	r6, r0
 801f484:	4627      	mov	r7, r4
 801f486:	46ae      	mov	lr, r5
 801f488:	e7ac      	b.n	801f3e4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801f48a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f48a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f48e:	b09b      	sub	sp, #108	; 0x6c
 801f490:	920b      	str	r2, [sp, #44]	; 0x2c
 801f492:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f494:	9019      	str	r0, [sp, #100]	; 0x64
 801f496:	9109      	str	r1, [sp, #36]	; 0x24
 801f498:	6850      	ldr	r0, [r2, #4]
 801f49a:	9306      	str	r3, [sp, #24]
 801f49c:	6812      	ldr	r2, [r2, #0]
 801f49e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801f4a2:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801f4a6:	fb00 1303 	mla	r3, r0, r3, r1
 801f4aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4ae:	18d3      	adds	r3, r2, r3
 801f4b0:	9307      	str	r3, [sp, #28]
 801f4b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	9308      	str	r3, [sp, #32]
 801f4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f4ba:	2b00      	cmp	r3, #0
 801f4bc:	dc03      	bgt.n	801f4c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f4c0:	2b00      	cmp	r3, #0
 801f4c2:	f340 81ab 	ble.w	801f81c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f4c6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f4c8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f4cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f4d0:	1e48      	subs	r0, r1, #1
 801f4d2:	1e55      	subs	r5, r2, #1
 801f4d4:	9b06      	ldr	r3, [sp, #24]
 801f4d6:	2b00      	cmp	r3, #0
 801f4d8:	f340 80b1 	ble.w	801f63e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f4dc:	ea5f 462b 	movs.w	r6, fp, asr #16
 801f4e0:	ea4f 4324 	mov.w	r3, r4, asr #16
 801f4e4:	d406      	bmi.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f4e6:	4286      	cmp	r6, r0
 801f4e8:	da04      	bge.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	db02      	blt.n	801f4f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f4ee:	42ab      	cmp	r3, r5
 801f4f0:	f2c0 80a6 	blt.w	801f640 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801f4f4:	3601      	adds	r6, #1
 801f4f6:	f100 8097 	bmi.w	801f628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f4fa:	42b1      	cmp	r1, r6
 801f4fc:	f2c0 8094 	blt.w	801f628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f500:	3301      	adds	r3, #1
 801f502:	f100 8091 	bmi.w	801f628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f506:	429a      	cmp	r2, r3
 801f508:	f2c0 808e 	blt.w	801f628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f50c:	9b06      	ldr	r3, [sp, #24]
 801f50e:	9e07      	ldr	r6, [sp, #28]
 801f510:	930a      	str	r3, [sp, #40]	; 0x28
 801f512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f514:	2b00      	cmp	r3, #0
 801f516:	f340 80b0 	ble.w	801f67a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f51a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801f51c:	1425      	asrs	r5, r4, #16
 801f51e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801f520:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801f524:	68c7      	ldr	r7, [r0, #12]
 801f526:	ea5f 402b 	movs.w	r0, fp, asr #16
 801f52a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f52e:	689b      	ldr	r3, [r3, #8]
 801f530:	f100 80ea 	bmi.w	801f708 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f534:	f103 3cff 	add.w	ip, r3, #4294967295
 801f538:	4560      	cmp	r0, ip
 801f53a:	f280 80e5 	bge.w	801f708 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f53e:	2d00      	cmp	r5, #0
 801f540:	f2c0 80e2 	blt.w	801f708 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f544:	f107 3cff 	add.w	ip, r7, #4294967295
 801f548:	4565      	cmp	r5, ip
 801f54a:	f280 80dd 	bge.w	801f708 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f54e:	b21b      	sxth	r3, r3
 801f550:	fb05 0003 	mla	r0, r5, r3, r0
 801f554:	9d08      	ldr	r5, [sp, #32]
 801f556:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f55a:	182f      	adds	r7, r5, r0
 801f55c:	5c2d      	ldrb	r5, [r5, r0]
 801f55e:	7878      	ldrb	r0, [r7, #1]
 801f560:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f564:	900c      	str	r0, [sp, #48]	; 0x30
 801f566:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f56a:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f56e:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f572:	b1c9      	cbz	r1, 801f5a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f574:	f04f 0c03 	mov.w	ip, #3
 801f578:	f06f 0004 	mvn.w	r0, #4
 801f57c:	3705      	adds	r7, #5
 801f57e:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f582:	eb07 0c03 	add.w	ip, r7, r3
 801f586:	5cfb      	ldrb	r3, [r7, r3]
 801f588:	930d      	str	r3, [sp, #52]	; 0x34
 801f58a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f58e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f590:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f594:	9311      	str	r3, [sp, #68]	; 0x44
 801f596:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f59a:	930e      	str	r3, [sp, #56]	; 0x38
 801f59c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f5a0:	9310      	str	r3, [sp, #64]	; 0x40
 801f5a2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f5a6:	9312      	str	r3, [sp, #72]	; 0x48
 801f5a8:	b292      	uxth	r2, r2
 801f5aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f5ac:	b289      	uxth	r1, r1
 801f5ae:	fb02 f301 	mul.w	r3, r2, r1
 801f5b2:	0112      	lsls	r2, r2, #4
 801f5b4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f5b8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801f5bc:	1ad2      	subs	r2, r2, r3
 801f5be:	b289      	uxth	r1, r1
 801f5c0:	b292      	uxth	r2, r2
 801f5c2:	1a7f      	subs	r7, r7, r1
 801f5c4:	fb02 f909 	mul.w	r9, r2, r9
 801f5c8:	b2bf      	uxth	r7, r7
 801f5ca:	fb02 f808 	mul.w	r8, r2, r8
 801f5ce:	fb02 fa0a 	mul.w	sl, r2, sl
 801f5d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f5d4:	fb07 9905 	mla	r9, r7, r5, r9
 801f5d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f5da:	fb07 8800 	mla	r8, r7, r0, r8
 801f5de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f5e0:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f5e4:	fb01 9905 	mla	r9, r1, r5, r9
 801f5e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f5ea:	fb01 8800 	mla	r8, r1, r0, r8
 801f5ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f5f0:	fb01 a102 	mla	r1, r1, r2, sl
 801f5f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f5f6:	fb03 9905 	mla	r9, r3, r5, r9
 801f5fa:	fb03 8800 	mla	r8, r3, r0, r8
 801f5fe:	fb03 1302 	mla	r3, r3, r2, r1
 801f602:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f606:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f60a:	121b      	asrs	r3, r3, #8
 801f60c:	f886 9000 	strb.w	r9, [r6]
 801f610:	f886 8001 	strb.w	r8, [r6, #1]
 801f614:	70b3      	strb	r3, [r6, #2]
 801f616:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f618:	3603      	adds	r6, #3
 801f61a:	449b      	add	fp, r3
 801f61c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f61e:	441c      	add	r4, r3
 801f620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f622:	3b01      	subs	r3, #1
 801f624:	930a      	str	r3, [sp, #40]	; 0x28
 801f626:	e774      	b.n	801f512 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f628:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f62a:	449b      	add	fp, r3
 801f62c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f62e:	441c      	add	r4, r3
 801f630:	9b06      	ldr	r3, [sp, #24]
 801f632:	3b01      	subs	r3, #1
 801f634:	9306      	str	r3, [sp, #24]
 801f636:	9b07      	ldr	r3, [sp, #28]
 801f638:	3303      	adds	r3, #3
 801f63a:	9307      	str	r3, [sp, #28]
 801f63c:	e74a      	b.n	801f4d4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f63e:	d024      	beq.n	801f68a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f640:	9b06      	ldr	r3, [sp, #24]
 801f642:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f644:	3b01      	subs	r3, #1
 801f646:	fb00 b003 	mla	r0, r0, r3, fp
 801f64a:	1400      	asrs	r0, r0, #16
 801f64c:	f53f af5e 	bmi.w	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f650:	3901      	subs	r1, #1
 801f652:	4288      	cmp	r0, r1
 801f654:	f6bf af5a 	bge.w	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f658:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f65a:	fb01 4303 	mla	r3, r1, r3, r4
 801f65e:	141b      	asrs	r3, r3, #16
 801f660:	f53f af54 	bmi.w	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f664:	3a01      	subs	r2, #1
 801f666:	4293      	cmp	r3, r2
 801f668:	f6bf af50 	bge.w	801f50c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f66c:	9b07      	ldr	r3, [sp, #28]
 801f66e:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f672:	1cde      	adds	r6, r3, #3
 801f674:	f1be 0f00 	cmp.w	lr, #0
 801f678:	dc5f      	bgt.n	801f73a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f67a:	9b06      	ldr	r3, [sp, #24]
 801f67c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f680:	9b07      	ldr	r3, [sp, #28]
 801f682:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f686:	4423      	add	r3, r4
 801f688:	9307      	str	r3, [sp, #28]
 801f68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	f340 80c5 	ble.w	801f81c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f692:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f696:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f698:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f69c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6a0:	eef0 6a62 	vmov.f32	s13, s5
 801f6a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f6a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6b0:	ee16 ba90 	vmov	fp, s13
 801f6b4:	eef0 6a43 	vmov.f32	s13, s6
 801f6b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f6bc:	ee16 4a90 	vmov	r4, s13
 801f6c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6d8:	ee12 2a90 	vmov	r2, s5
 801f6dc:	eef0 2a47 	vmov.f32	s5, s14
 801f6e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6e4:	ee13 2a10 	vmov	r2, s6
 801f6e8:	9327      	str	r3, [sp, #156]	; 0x9c
 801f6ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f6ec:	eeb0 3a67 	vmov.f32	s6, s15
 801f6f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f6f4:	9328      	str	r3, [sp, #160]	; 0xa0
 801f6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f6fa:	3b01      	subs	r3, #1
 801f6fc:	9309      	str	r3, [sp, #36]	; 0x24
 801f6fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f700:	bf08      	it	eq
 801f702:	4613      	moveq	r3, r2
 801f704:	9306      	str	r3, [sp, #24]
 801f706:	e6d7      	b.n	801f4b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f708:	f110 0c01 	adds.w	ip, r0, #1
 801f70c:	d483      	bmi.n	801f616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f70e:	4563      	cmp	r3, ip
 801f710:	db81      	blt.n	801f616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f712:	f115 0c01 	adds.w	ip, r5, #1
 801f716:	f53f af7e 	bmi.w	801f616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f71a:	4567      	cmp	r7, ip
 801f71c:	f6ff af7b 	blt.w	801f616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f720:	b23f      	sxth	r7, r7
 801f722:	b21b      	sxth	r3, r3
 801f724:	9700      	str	r7, [sp, #0]
 801f726:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f72a:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f72e:	9a08      	ldr	r2, [sp, #32]
 801f730:	4631      	mov	r1, r6
 801f732:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f734:	f7ff fdf9 	bl	801f32a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f738:	e76d      	b.n	801f616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f73a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f73c:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f740:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f744:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f748:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f74c:	1421      	asrs	r1, r4, #16
 801f74e:	930a      	str	r3, [sp, #40]	; 0x28
 801f750:	fb0c 0101 	mla	r1, ip, r1, r0
 801f754:	9808      	ldr	r0, [sp, #32]
 801f756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f75a:	1845      	adds	r5, r0, r1
 801f75c:	5c40      	ldrb	r0, [r0, r1]
 801f75e:	796f      	ldrb	r7, [r5, #5]
 801f760:	7869      	ldrb	r1, [r5, #1]
 801f762:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f766:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f76a:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f76e:	970c      	str	r7, [sp, #48]	; 0x30
 801f770:	b1a2      	cbz	r2, 801f79c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f772:	2703      	movs	r7, #3
 801f774:	f06f 0304 	mvn.w	r3, #4
 801f778:	3505      	adds	r5, #5
 801f77a:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f77e:	eb05 070c 	add.w	r7, r5, ip
 801f782:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f786:	9513      	str	r5, [sp, #76]	; 0x4c
 801f788:	787d      	ldrb	r5, [r7, #1]
 801f78a:	9515      	str	r5, [sp, #84]	; 0x54
 801f78c:	78bd      	ldrb	r5, [r7, #2]
 801f78e:	9517      	str	r5, [sp, #92]	; 0x5c
 801f790:	78fd      	ldrb	r5, [r7, #3]
 801f792:	9514      	str	r5, [sp, #80]	; 0x50
 801f794:	793d      	ldrb	r5, [r7, #4]
 801f796:	9516      	str	r5, [sp, #88]	; 0x58
 801f798:	797d      	ldrb	r5, [r7, #5]
 801f79a:	9518      	str	r5, [sp, #96]	; 0x60
 801f79c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f7a0:	b292      	uxth	r2, r2
 801f7a2:	3603      	adds	r6, #3
 801f7a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f7a8:	fb03 f502 	mul.w	r5, r3, r2
 801f7ac:	011b      	lsls	r3, r3, #4
 801f7ae:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f7b2:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f7b6:	1b5b      	subs	r3, r3, r5
 801f7b8:	b292      	uxth	r2, r2
 801f7ba:	b29b      	uxth	r3, r3
 801f7bc:	1abf      	subs	r7, r7, r2
 801f7be:	fb03 f909 	mul.w	r9, r3, r9
 801f7c2:	b2bf      	uxth	r7, r7
 801f7c4:	fb03 fa0a 	mul.w	sl, r3, sl
 801f7c8:	fb07 9901 	mla	r9, r7, r1, r9
 801f7cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f7ce:	fb07 aa00 	mla	sl, r7, r0, sl
 801f7d2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f7d4:	fb02 9901 	mla	r9, r2, r1, r9
 801f7d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f7da:	fb02 aa00 	mla	sl, r2, r0, sl
 801f7de:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f7e0:	fb05 9901 	mla	r9, r5, r1, r9
 801f7e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f7e6:	fb05 aa00 	mla	sl, r5, r0, sl
 801f7ea:	434b      	muls	r3, r1
 801f7ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f7ee:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f7f2:	fb07 3308 	mla	r3, r7, r8, r3
 801f7f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f7fa:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f7fe:	fb02 3201 	mla	r2, r2, r1, r3
 801f802:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f804:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f808:	fb05 2503 	mla	r5, r5, r3, r2
 801f80c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f80e:	122d      	asrs	r5, r5, #8
 801f810:	449b      	add	fp, r3
 801f812:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f814:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f818:	441c      	add	r4, r3
 801f81a:	e72b      	b.n	801f674 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f81c:	b01b      	add	sp, #108	; 0x6c
 801f81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f822 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f822:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f826:	b087      	sub	sp, #28
 801f828:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801f82c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f830:	fb05 7003 	mla	r0, r5, r3, r7
 801f834:	2d00      	cmp	r5, #0
 801f836:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801f83a:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801f83e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f842:	f2c0 811f 	blt.w	801fa84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f846:	45a8      	cmp	r8, r5
 801f848:	f340 811c 	ble.w	801fa84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f84c:	2f00      	cmp	r7, #0
 801f84e:	f2c0 8117 	blt.w	801fa80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f852:	42bb      	cmp	r3, r7
 801f854:	f340 8114 	ble.w	801fa80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f858:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f85c:	1c7a      	adds	r2, r7, #1
 801f85e:	f100 8114 	bmi.w	801fa8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f862:	4293      	cmp	r3, r2
 801f864:	f340 8111 	ble.w	801fa8a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f868:	2c00      	cmp	r4, #0
 801f86a:	f000 8110 	beq.w	801fa8e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f86e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f872:	3501      	adds	r5, #1
 801f874:	f100 810f 	bmi.w	801fa96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f878:	45a8      	cmp	r8, r5
 801f87a:	f340 810c 	ble.w	801fa96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f87e:	f1be 0f00 	cmp.w	lr, #0
 801f882:	f000 810b 	beq.w	801fa9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f886:	2f00      	cmp	r7, #0
 801f888:	f2c0 8103 	blt.w	801fa92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f88c:	42bb      	cmp	r3, r7
 801f88e:	f340 8100 	ble.w	801fa92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f892:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f896:	3701      	adds	r7, #1
 801f898:	f100 8103 	bmi.w	801faa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f89c:	42bb      	cmp	r3, r7
 801f89e:	f340 8100 	ble.w	801faa2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f8a2:	2c00      	cmp	r4, #0
 801f8a4:	f000 80ff 	beq.w	801faa6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f8a8:	3301      	adds	r3, #1
 801f8aa:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f8ae:	fa1f fc84 	uxth.w	ip, r4
 801f8b2:	fa1f fe8e 	uxth.w	lr, lr
 801f8b6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f8ba:	fb0c f90e 	mul.w	r9, ip, lr
 801f8be:	0e13      	lsrs	r3, r2, #24
 801f8c0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f8c4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f8c8:	9302      	str	r3, [sp, #8]
 801f8ca:	ebac 0709 	sub.w	r7, ip, r9
 801f8ce:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f8d2:	fa1f f48e 	uxth.w	r4, lr
 801f8d6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801f8da:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f8de:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f8e2:	fb0a fe0e 	mul.w	lr, sl, lr
 801f8e6:	1b1b      	subs	r3, r3, r4
 801f8e8:	fb0a f606 	mul.w	r6, sl, r6
 801f8ec:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f8f0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f8f4:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f8f8:	b29b      	uxth	r3, r3
 801f8fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f8fe:	b2bf      	uxth	r7, r7
 801f900:	9301      	str	r3, [sp, #4]
 801f902:	44e6      	add	lr, ip
 801f904:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f908:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f90c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f910:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801f914:	9303      	str	r3, [sp, #12]
 801f916:	0a33      	lsrs	r3, r6, #8
 801f918:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801f91c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f920:	9304      	str	r3, [sp, #16]
 801f922:	fb0b f606 	mul.w	r6, fp, r6
 801f926:	fb0b f000 	mul.w	r0, fp, r0
 801f92a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f92e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f932:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f936:	44b6      	add	lr, r6
 801f938:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801f93c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f940:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801f944:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f948:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f94c:	fb08 f606 	mul.w	r6, r8, r6
 801f950:	0a03      	lsrs	r3, r0, #8
 801f952:	fb08 f505 	mul.w	r5, r8, r5
 801f956:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f95a:	0a30      	lsrs	r0, r6, #8
 801f95c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f960:	9305      	str	r3, [sp, #20]
 801f962:	0e13      	lsrs	r3, r2, #24
 801f964:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f968:	fb0e fe07 	mul.w	lr, lr, r7
 801f96c:	4430      	add	r0, r6
 801f96e:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f972:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f976:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801f97a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f97e:	0a00      	lsrs	r0, r0, #8
 801f980:	435e      	muls	r6, r3
 801f982:	0a2d      	lsrs	r5, r5, #8
 801f984:	435a      	muls	r2, r3
 801f986:	9b03      	ldr	r3, [sp, #12]
 801f988:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f98c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f990:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f994:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f998:	44b4      	add	ip, r6
 801f99a:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801f99e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9a2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f9a6:	9e01      	ldr	r6, [sp, #4]
 801f9a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f9ac:	fb03 ee06 	mla	lr, r3, r6, lr
 801f9b0:	9b04      	ldr	r3, [sp, #16]
 801f9b2:	0a12      	lsrs	r2, r2, #8
 801f9b4:	fb0c ee09 	mla	lr, ip, r9, lr
 801f9b8:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801f9bc:	9b05      	ldr	r3, [sp, #20]
 801f9be:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f9c2:	fb00 ee04 	mla	lr, r0, r4, lr
 801f9c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f9ca:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801f9ce:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801f9d2:	9b01      	ldr	r3, [sp, #4]
 801f9d4:	fb07 fe0e 	mul.w	lr, r7, lr
 801f9d8:	fb07 f70b 	mul.w	r7, r7, fp
 801f9dc:	fb03 ee06 	mla	lr, r3, r6, lr
 801f9e0:	fb03 730a 	mla	r3, r3, sl, r7
 801f9e4:	fb09 e202 	mla	r2, r9, r2, lr
 801f9e8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801f9ec:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f9f0:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801f9f4:	fb04 3408 	mla	r4, r4, r8, r3
 801f9f8:	9b02      	ldr	r3, [sp, #8]
 801f9fa:	b292      	uxth	r2, r2
 801f9fc:	fb09 4903 	mla	r9, r9, r3, r4
 801fa00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fa04:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801fa08:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fa0c:	fb09 f902 	mul.w	r9, r9, r2
 801fa10:	ea40 0e0e 	orr.w	lr, r0, lr
 801fa14:	f109 0301 	add.w	r3, r9, #1
 801fa18:	fa5f f08e 	uxtb.w	r0, lr
 801fa1c:	fb10 f002 	smulbb	r0, r0, r2
 801fa20:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801fa24:	780b      	ldrb	r3, [r1, #0]
 801fa26:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801fa2a:	fa5f f989 	uxtb.w	r9, r9
 801fa2e:	fb03 0309 	mla	r3, r3, r9, r0
 801fa32:	b29b      	uxth	r3, r3
 801fa34:	1c58      	adds	r0, r3, #1
 801fa36:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fa3a:	7848      	ldrb	r0, [r1, #1]
 801fa3c:	fb10 f009 	smulbb	r0, r0, r9
 801fa40:	121b      	asrs	r3, r3, #8
 801fa42:	700b      	strb	r3, [r1, #0]
 801fa44:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801fa48:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fa4c:	fb03 0302 	mla	r3, r3, r2, r0
 801fa50:	b29b      	uxth	r3, r3
 801fa52:	1c58      	adds	r0, r3, #1
 801fa54:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801fa58:	121b      	asrs	r3, r3, #8
 801fa5a:	704b      	strb	r3, [r1, #1]
 801fa5c:	788b      	ldrb	r3, [r1, #2]
 801fa5e:	fb13 f909 	smulbb	r9, r3, r9
 801fa62:	fb0e 9e02 	mla	lr, lr, r2, r9
 801fa66:	fa1f fe8e 	uxth.w	lr, lr
 801fa6a:	f10e 0301 	add.w	r3, lr, #1
 801fa6e:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801fa72:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fa76:	f881 e002 	strb.w	lr, [r1, #2]
 801fa7a:	b007      	add	sp, #28
 801fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa80:	2600      	movs	r6, #0
 801fa82:	e6eb      	b.n	801f85c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801fa84:	2000      	movs	r0, #0
 801fa86:	4606      	mov	r6, r0
 801fa88:	e6f3      	b.n	801f872 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fa8a:	2000      	movs	r0, #0
 801fa8c:	e6f1      	b.n	801f872 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fa8e:	4620      	mov	r0, r4
 801fa90:	e6ef      	b.n	801f872 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801fa92:	2500      	movs	r5, #0
 801fa94:	e6ff      	b.n	801f896 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801fa96:	2200      	movs	r2, #0
 801fa98:	4615      	mov	r5, r2
 801fa9a:	e708      	b.n	801f8ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801fa9c:	4672      	mov	r2, lr
 801fa9e:	4675      	mov	r5, lr
 801faa0:	e705      	b.n	801f8ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801faa2:	2200      	movs	r2, #0
 801faa4:	e703      	b.n	801f8ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801faa6:	4622      	mov	r2, r4
 801faa8:	e701      	b.n	801f8ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801faaa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801faaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faae:	b09d      	sub	sp, #116	; 0x74
 801fab0:	9219      	str	r2, [sp, #100]	; 0x64
 801fab2:	9307      	str	r3, [sp, #28]
 801fab4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801fab6:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801faba:	901b      	str	r0, [sp, #108]	; 0x6c
 801fabc:	931a      	str	r3, [sp, #104]	; 0x68
 801fabe:	6850      	ldr	r0, [r2, #4]
 801fac0:	9117      	str	r1, [sp, #92]	; 0x5c
 801fac2:	6812      	ldr	r2, [r2, #0]
 801fac4:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801fac8:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801facc:	fb00 1303 	mla	r3, r0, r3, r1
 801fad0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fad4:	18d3      	adds	r3, r2, r3
 801fad6:	930a      	str	r3, [sp, #40]	; 0x28
 801fad8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fada:	681b      	ldr	r3, [r3, #0]
 801fadc:	9310      	str	r3, [sp, #64]	; 0x40
 801fade:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801fae2:	930b      	str	r3, [sp, #44]	; 0x2c
 801fae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	dc03      	bgt.n	801faf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801faea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801faec:	2b00      	cmp	r3, #0
 801faee:	f340 8368 	ble.w	80201c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801faf2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801faf4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801faf8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fafc:	1e48      	subs	r0, r1, #1
 801fafe:	1e57      	subs	r7, r2, #1
 801fb00:	9b07      	ldr	r3, [sp, #28]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	f340 8187 	ble.w	801fe16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801fb08:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fb0c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fb10:	d406      	bmi.n	801fb20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb12:	4584      	cmp	ip, r0
 801fb14:	da04      	bge.n	801fb20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb16:	2b00      	cmp	r3, #0
 801fb18:	db02      	blt.n	801fb20 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb1a:	42bb      	cmp	r3, r7
 801fb1c:	f2c0 817c 	blt.w	801fe18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801fb20:	f11c 0c01 	adds.w	ip, ip, #1
 801fb24:	f100 816c 	bmi.w	801fe00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fb28:	4561      	cmp	r1, ip
 801fb2a:	f2c0 8169 	blt.w	801fe00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fb2e:	3301      	adds	r3, #1
 801fb30:	f100 8166 	bmi.w	801fe00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fb34:	429a      	cmp	r2, r3
 801fb36:	f2c0 8163 	blt.w	801fe00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801fb3a:	9b07      	ldr	r3, [sp, #28]
 801fb3c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fb3e:	9318      	str	r3, [sp, #96]	; 0x60
 801fb40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	f340 8186 	ble.w	801fe54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801fb48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fb4a:	142a      	asrs	r2, r5, #16
 801fb4c:	ea4f 4026 	mov.w	r0, r6, asr #16
 801fb50:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801fb54:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fb58:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801fb5c:	f100 81cb 	bmi.w	801fef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fb60:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fb64:	4542      	cmp	r2, r8
 801fb66:	f280 81c6 	bge.w	801fef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fb6a:	2800      	cmp	r0, #0
 801fb6c:	f2c0 81c3 	blt.w	801fef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fb70:	f103 38ff 	add.w	r8, r3, #4294967295
 801fb74:	4540      	cmp	r0, r8
 801fb76:	f280 81be 	bge.w	801fef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801fb7a:	fa0f f38e 	sxth.w	r3, lr
 801fb7e:	fb00 2203 	mla	r2, r0, r3, r2
 801fb82:	9810      	ldr	r0, [sp, #64]	; 0x40
 801fb84:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801fb88:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801fb8c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fb90:	2900      	cmp	r1, #0
 801fb92:	f000 81a6 	beq.w	801fee2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801fb96:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fb9a:	900c      	str	r0, [sp, #48]	; 0x30
 801fb9c:	0e00      	lsrs	r0, r0, #24
 801fb9e:	9013      	str	r0, [sp, #76]	; 0x4c
 801fba0:	f1bc 0f00 	cmp.w	ip, #0
 801fba4:	d00f      	beq.n	801fbc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fba6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801fbaa:	3b01      	subs	r3, #1
 801fbac:	009b      	lsls	r3, r3, #2
 801fbae:	3304      	adds	r3, #4
 801fbb0:	eb08 0003 	add.w	r0, r8, r3
 801fbb4:	f858 3003 	ldr.w	r3, [r8, r3]
 801fbb8:	9308      	str	r3, [sp, #32]
 801fbba:	0e1b      	lsrs	r3, r3, #24
 801fbbc:	9311      	str	r3, [sp, #68]	; 0x44
 801fbbe:	6843      	ldr	r3, [r0, #4]
 801fbc0:	930d      	str	r3, [sp, #52]	; 0x34
 801fbc2:	0e1b      	lsrs	r3, r3, #24
 801fbc4:	9314      	str	r3, [sp, #80]	; 0x50
 801fbc6:	b289      	uxth	r1, r1
 801fbc8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fbca:	fa1f fc8c 	uxth.w	ip, ip
 801fbce:	0108      	lsls	r0, r1, #4
 801fbd0:	fb01 f90c 	mul.w	r9, r1, ip
 801fbd4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801fbd8:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801fbdc:	eba0 0809 	sub.w	r8, r0, r9
 801fbe0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fbe2:	fa1f f18c 	uxth.w	r1, ip
 801fbe6:	fa1f f888 	uxth.w	r8, r8
 801fbea:	1a5b      	subs	r3, r3, r1
 801fbec:	fb08 f000 	mul.w	r0, r8, r0
 801fbf0:	b29b      	uxth	r3, r3
 801fbf2:	fb03 000e 	mla	r0, r3, lr, r0
 801fbf6:	fb01 0004 	mla	r0, r1, r4, r0
 801fbfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fbfc:	fb09 0004 	mla	r0, r9, r4, r0
 801fc00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fc04:	2800      	cmp	r0, #0
 801fc06:	f000 80f2 	beq.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fc0a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fc0e:	d01b      	beq.n	801fc48 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801fc10:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801fc14:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fc18:	fb0e fa0a 	mul.w	sl, lr, sl
 801fc1c:	fb0e fe02 	mul.w	lr, lr, r2
 801fc20:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fc24:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fc28:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fc2c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fc30:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fc34:	4452      	add	r2, sl
 801fc36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc3a:	0a12      	lsrs	r2, r2, #8
 801fc3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fc40:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fc44:	ea42 020c 	orr.w	r2, r2, ip
 801fc48:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc4a:	2cff      	cmp	r4, #255	; 0xff
 801fc4c:	d021      	beq.n	801fc92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fc50:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fc54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc56:	fb04 fb0b 	mul.w	fp, r4, fp
 801fc5a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fc5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fc60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc62:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fc66:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc6a:	fb04 fa0a 	mul.w	sl, r4, sl
 801fc6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc72:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fc76:	44de      	add	lr, fp
 801fc78:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc88:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc8c:	ea4e 040a 	orr.w	r4, lr, sl
 801fc90:	940c      	str	r4, [sp, #48]	; 0x30
 801fc92:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fc94:	2cff      	cmp	r4, #255	; 0xff
 801fc96:	d021      	beq.n	801fcdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801fc98:	9c08      	ldr	r4, [sp, #32]
 801fc9a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fc9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fca0:	fb04 fb0b 	mul.w	fp, r4, fp
 801fca4:	9c08      	ldr	r4, [sp, #32]
 801fca6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fcaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fcac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fcb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fcb4:	fb04 fa0a 	mul.w	sl, r4, sl
 801fcb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fcbc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fcc0:	44de      	add	lr, fp
 801fcc2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fcc6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fcca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fcce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fcd2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fcd6:	ea4e 040a 	orr.w	r4, lr, sl
 801fcda:	9408      	str	r4, [sp, #32]
 801fcdc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fcde:	2cff      	cmp	r4, #255	; 0xff
 801fce0:	d021      	beq.n	801fd26 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fce2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fce4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801fce8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fcea:	fb04 fb0b 	mul.w	fp, r4, fp
 801fcee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fcf0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fcf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fcf6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fcfa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fcfe:	fb04 fa0a 	mul.w	sl, r4, sl
 801fd02:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd06:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fd0a:	44de      	add	lr, fp
 801fd0c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fd10:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd14:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fd18:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fd20:	ea4e 040a 	orr.w	r4, lr, sl
 801fd24:	940d      	str	r4, [sp, #52]	; 0x34
 801fd26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fd28:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fd2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fd30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fd34:	9c08      	ldr	r4, [sp, #32]
 801fd36:	fb08 fc0c 	mul.w	ip, r8, ip
 801fd3a:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fd3e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fd42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801fd44:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fd48:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801fd4c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801fd4e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fd52:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801fd56:	fb08 f80e 	mul.w	r8, r8, lr
 801fd5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fd5e:	fb03 8202 	mla	r2, r3, r2, r8
 801fd62:	9b08      	ldr	r3, [sp, #32]
 801fd64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd68:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801fd6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fd6e:	fb01 220a 	mla	r2, r1, sl, r2
 801fd72:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801fd76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd78:	fb09 2901 	mla	r9, r9, r1, r2
 801fd7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fd7e:	4343      	muls	r3, r0
 801fd80:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fd84:	1c58      	adds	r0, r3, #1
 801fd86:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fd8a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801fd8e:	783b      	ldrb	r3, [r7, #0]
 801fd90:	ea4c 0c09 	orr.w	ip, ip, r9
 801fd94:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fd98:	fa5f f28c 	uxtb.w	r2, ip
 801fd9c:	b2c0      	uxtb	r0, r0
 801fd9e:	fb12 f201 	smulbb	r2, r2, r1
 801fda2:	fb03 2300 	mla	r3, r3, r0, r2
 801fda6:	b29b      	uxth	r3, r3
 801fda8:	1c5a      	adds	r2, r3, #1
 801fdaa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fdae:	787a      	ldrb	r2, [r7, #1]
 801fdb0:	fb12 f200 	smulbb	r2, r2, r0
 801fdb4:	121b      	asrs	r3, r3, #8
 801fdb6:	703b      	strb	r3, [r7, #0]
 801fdb8:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801fdbc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801fdc0:	fb03 2301 	mla	r3, r3, r1, r2
 801fdc4:	b29b      	uxth	r3, r3
 801fdc6:	1c5a      	adds	r2, r3, #1
 801fdc8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fdcc:	121b      	asrs	r3, r3, #8
 801fdce:	707b      	strb	r3, [r7, #1]
 801fdd0:	78bb      	ldrb	r3, [r7, #2]
 801fdd2:	fb13 f000 	smulbb	r0, r3, r0
 801fdd6:	fb0c 0c01 	mla	ip, ip, r1, r0
 801fdda:	fa1f fc8c 	uxth.w	ip, ip
 801fdde:	f10c 0301 	add.w	r3, ip, #1
 801fde2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801fde6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801fdea:	f887 c002 	strb.w	ip, [r7, #2]
 801fdee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fdf0:	3703      	adds	r7, #3
 801fdf2:	441d      	add	r5, r3
 801fdf4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fdf6:	441e      	add	r6, r3
 801fdf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fdfa:	3b01      	subs	r3, #1
 801fdfc:	9318      	str	r3, [sp, #96]	; 0x60
 801fdfe:	e69f      	b.n	801fb40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fe00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fe02:	441d      	add	r5, r3
 801fe04:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fe06:	441e      	add	r6, r3
 801fe08:	9b07      	ldr	r3, [sp, #28]
 801fe0a:	3b01      	subs	r3, #1
 801fe0c:	9307      	str	r3, [sp, #28]
 801fe0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe10:	3303      	adds	r3, #3
 801fe12:	930a      	str	r3, [sp, #40]	; 0x28
 801fe14:	e674      	b.n	801fb00 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fe16:	d025      	beq.n	801fe64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801fe18:	9b07      	ldr	r3, [sp, #28]
 801fe1a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801fe1c:	3b01      	subs	r3, #1
 801fe1e:	fb00 5003 	mla	r0, r0, r3, r5
 801fe22:	1400      	asrs	r0, r0, #16
 801fe24:	f53f ae89 	bmi.w	801fb3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe28:	3901      	subs	r1, #1
 801fe2a:	4288      	cmp	r0, r1
 801fe2c:	f6bf ae85 	bge.w	801fb3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe30:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fe32:	fb01 6303 	mla	r3, r1, r3, r6
 801fe36:	141b      	asrs	r3, r3, #16
 801fe38:	f53f ae7f 	bmi.w	801fb3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe3c:	3a01      	subs	r2, #1
 801fe3e:	4293      	cmp	r3, r2
 801fe40:	f6bf ae7b 	bge.w	801fb3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fe44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe46:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fe4a:	f103 0e03 	add.w	lr, r3, #3
 801fe4e:	f1bb 0f00 	cmp.w	fp, #0
 801fe52:	dc6e      	bgt.n	801ff32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801fe54:	9b07      	ldr	r3, [sp, #28]
 801fe56:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801fe5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fe60:	4423      	add	r3, r4
 801fe62:	930a      	str	r3, [sp, #40]	; 0x28
 801fe64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	f340 81ab 	ble.w	80201c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801fe6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fe70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fe72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe7a:	eef0 6a62 	vmov.f32	s13, s5
 801fe7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fe82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe8a:	ee16 5a90 	vmov	r5, s13
 801fe8e:	eef0 6a43 	vmov.f32	s13, s6
 801fe92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fe96:	ee16 6a90 	vmov	r6, s13
 801fe9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fea2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fea6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801feaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801feae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801feb2:	ee12 2a90 	vmov	r2, s5
 801feb6:	eef0 2a47 	vmov.f32	s5, s14
 801feba:	fb92 f3f3 	sdiv	r3, r2, r3
 801febe:	ee13 2a10 	vmov	r2, s6
 801fec2:	9329      	str	r3, [sp, #164]	; 0xa4
 801fec4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fec6:	eeb0 3a67 	vmov.f32	s6, s15
 801feca:	fb92 f3f3 	sdiv	r3, r2, r3
 801fece:	932a      	str	r3, [sp, #168]	; 0xa8
 801fed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fed2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fed4:	3b01      	subs	r3, #1
 801fed6:	9317      	str	r3, [sp, #92]	; 0x5c
 801fed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801feda:	bf08      	it	eq
 801fedc:	4613      	moveq	r3, r2
 801fede:	9307      	str	r3, [sp, #28]
 801fee0:	e600      	b.n	801fae4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fee2:	f1bc 0f00 	cmp.w	ip, #0
 801fee6:	f43f ae6e 	beq.w	801fbc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801feea:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801feee:	9308      	str	r3, [sp, #32]
 801fef0:	0e1b      	lsrs	r3, r3, #24
 801fef2:	9311      	str	r3, [sp, #68]	; 0x44
 801fef4:	e667      	b.n	801fbc6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fef6:	f112 0801 	adds.w	r8, r2, #1
 801fefa:	f53f af78 	bmi.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801fefe:	45c6      	cmp	lr, r8
 801ff00:	f6ff af75 	blt.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ff04:	f110 0801 	adds.w	r8, r0, #1
 801ff08:	f53f af71 	bmi.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ff0c:	4543      	cmp	r3, r8
 801ff0e:	f6ff af6e 	blt.w	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ff12:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801ff14:	b21b      	sxth	r3, r3
 801ff16:	9201      	str	r2, [sp, #4]
 801ff18:	9300      	str	r3, [sp, #0]
 801ff1a:	fa0f f38e 	sxth.w	r3, lr
 801ff1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ff24:	e9cd c404 	strd	ip, r4, [sp, #16]
 801ff28:	4639      	mov	r1, r7
 801ff2a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801ff2c:	f7ff fc79 	bl	801f822 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801ff30:	e75d      	b.n	801fdee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801ff32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ff34:	142f      	asrs	r7, r5, #16
 801ff36:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ff38:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ff3c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801ff40:	1433      	asrs	r3, r6, #16
 801ff42:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ff46:	fb02 7303 	mla	r3, r2, r3, r7
 801ff4a:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801ff4e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ff52:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ff56:	2900      	cmp	r1, #0
 801ff58:	f000 812a 	beq.w	80201b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ff5c:	687c      	ldr	r4, [r7, #4]
 801ff5e:	940e      	str	r4, [sp, #56]	; 0x38
 801ff60:	0e24      	lsrs	r4, r4, #24
 801ff62:	9415      	str	r4, [sp, #84]	; 0x54
 801ff64:	b178      	cbz	r0, 801ff86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ff66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801ff6a:	3a01      	subs	r2, #1
 801ff6c:	0092      	lsls	r2, r2, #2
 801ff6e:	3204      	adds	r2, #4
 801ff70:	eb07 0802 	add.w	r8, r7, r2
 801ff74:	58ba      	ldr	r2, [r7, r2]
 801ff76:	9209      	str	r2, [sp, #36]	; 0x24
 801ff78:	0e12      	lsrs	r2, r2, #24
 801ff7a:	9212      	str	r2, [sp, #72]	; 0x48
 801ff7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ff80:	920f      	str	r2, [sp, #60]	; 0x3c
 801ff82:	0e12      	lsrs	r2, r2, #24
 801ff84:	9216      	str	r2, [sp, #88]	; 0x58
 801ff86:	b289      	uxth	r1, r1
 801ff88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ff8a:	b280      	uxth	r0, r0
 801ff8c:	fb01 f900 	mul.w	r9, r1, r0
 801ff90:	0109      	lsls	r1, r1, #4
 801ff92:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ff96:	eba1 0809 	sub.w	r8, r1, r9
 801ff9a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ff9e:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ffa0:	b280      	uxth	r0, r0
 801ffa2:	fa1f f888 	uxth.w	r8, r8
 801ffa6:	1a12      	subs	r2, r2, r0
 801ffa8:	fb08 f101 	mul.w	r1, r8, r1
 801ffac:	b292      	uxth	r2, r2
 801ffae:	fb02 110c 	mla	r1, r2, ip, r1
 801ffb2:	fb00 1104 	mla	r1, r0, r4, r1
 801ffb6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801ffb8:	fb09 1104 	mla	r1, r9, r4, r1
 801ffbc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ffc0:	2900      	cmp	r1, #0
 801ffc2:	f000 80ec 	beq.w	802019e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801ffc6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ffca:	d019      	beq.n	8020000 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801ffcc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ffd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ffd4:	fb0c fa0a 	mul.w	sl, ip, sl
 801ffd8:	fb0c fc03 	mul.w	ip, ip, r3
 801ffdc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ffe0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ffe4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ffe8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ffec:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801fff0:	4453      	add	r3, sl
 801fff2:	0a3f      	lsrs	r7, r7, #8
 801fff4:	0a1b      	lsrs	r3, r3, #8
 801fff6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fffa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801fffe:	433b      	orrs	r3, r7
 8020000:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020002:	2cff      	cmp	r4, #255	; 0xff
 8020004:	d020      	beq.n	8020048 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8020006:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020008:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802000c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802000e:	4367      	muls	r7, r4
 8020010:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020012:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020016:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802001a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802001c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020020:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020024:	fb04 fa0a 	mul.w	sl, r4, sl
 8020028:	44bc      	add	ip, r7
 802002a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802002e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020032:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020036:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802003a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802003e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020042:	ea4c 040a 	orr.w	r4, ip, sl
 8020046:	940e      	str	r4, [sp, #56]	; 0x38
 8020048:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802004a:	2cff      	cmp	r4, #255	; 0xff
 802004c:	d020      	beq.n	8020090 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802004e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8020050:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020054:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020056:	4367      	muls	r7, r4
 8020058:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802005a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802005e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020062:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020064:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020068:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802006c:	fb04 fa0a 	mul.w	sl, r4, sl
 8020070:	44bc      	add	ip, r7
 8020072:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020076:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802007a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802007e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020082:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020086:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802008a:	ea4c 040a 	orr.w	r4, ip, sl
 802008e:	9409      	str	r4, [sp, #36]	; 0x24
 8020090:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8020092:	2cff      	cmp	r4, #255	; 0xff
 8020094:	d020      	beq.n	80200d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8020096:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020098:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802009c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802009e:	4367      	muls	r7, r4
 80200a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80200a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80200a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80200aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80200ac:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80200b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80200b8:	44bc      	add	ip, r7
 80200ba:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80200be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80200c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80200c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80200ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80200ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80200d2:	ea4c 040a 	orr.w	r4, ip, sl
 80200d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80200d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80200da:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80200de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80200e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80200e6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80200e8:	fb08 f707 	mul.w	r7, r8, r7
 80200ec:	fb02 770c 	mla	r7, r2, ip, r7
 80200f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80200f6:	fb00 770c 	mla	r7, r0, ip, r7
 80200fa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020100:	fb09 770c 	mla	r7, r9, ip, r7
 8020104:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8020108:	fb08 f80c 	mul.w	r8, r8, ip
 802010c:	0a3f      	lsrs	r7, r7, #8
 802010e:	fb02 8303 	mla	r3, r2, r3, r8
 8020112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020114:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020118:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802011c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802011e:	fb00 330a 	mla	r3, r0, sl, r3
 8020122:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020126:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8020128:	fb09 3c0c 	mla	ip, r9, ip, r3
 802012c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802012e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020132:	434b      	muls	r3, r1
 8020134:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020138:	1c59      	adds	r1, r3, #1
 802013a:	ea47 070c 	orr.w	r7, r7, ip
 802013e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020142:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020146:	b2fa      	uxtb	r2, r7
 8020148:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802014c:	fb12 f200 	smulbb	r2, r2, r0
 8020150:	b2c9      	uxtb	r1, r1
 8020152:	fb03 2301 	mla	r3, r3, r1, r2
 8020156:	b29b      	uxth	r3, r3
 8020158:	1c5a      	adds	r2, r3, #1
 802015a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802015e:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020162:	fb12 f201 	smulbb	r2, r2, r1
 8020166:	121b      	asrs	r3, r3, #8
 8020168:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802016c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020170:	0c3f      	lsrs	r7, r7, #16
 8020172:	fb03 2300 	mla	r3, r3, r0, r2
 8020176:	b29b      	uxth	r3, r3
 8020178:	1c5a      	adds	r2, r3, #1
 802017a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802017e:	121b      	asrs	r3, r3, #8
 8020180:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020184:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020188:	fb13 f101 	smulbb	r1, r3, r1
 802018c:	fb07 1700 	mla	r7, r7, r0, r1
 8020190:	b2bf      	uxth	r7, r7
 8020192:	1c79      	adds	r1, r7, #1
 8020194:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8020198:	123f      	asrs	r7, r7, #8
 802019a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802019e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80201a0:	f10e 0e03 	add.w	lr, lr, #3
 80201a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80201a8:	441d      	add	r5, r3
 80201aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80201ac:	441e      	add	r6, r3
 80201ae:	e64e      	b.n	801fe4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80201b0:	2800      	cmp	r0, #0
 80201b2:	f43f aee8 	beq.w	801ff86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80201b6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80201ba:	9209      	str	r2, [sp, #36]	; 0x24
 80201bc:	0e12      	lsrs	r2, r2, #24
 80201be:	9212      	str	r2, [sp, #72]	; 0x48
 80201c0:	e6e1      	b.n	801ff86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80201c2:	b01d      	add	sp, #116	; 0x74
 80201c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80201c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201cc:	b087      	sub	sp, #28
 80201ce:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80201d2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80201d6:	fb05 7003 	mla	r0, r5, r3, r7
 80201da:	2d00      	cmp	r5, #0
 80201dc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80201e0:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80201e4:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80201e8:	f2c0 810a 	blt.w	8020400 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80201ec:	45a8      	cmp	r8, r5
 80201ee:	f340 8107 	ble.w	8020400 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80201f2:	2f00      	cmp	r7, #0
 80201f4:	f2c0 8102 	blt.w	80203fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80201f8:	42bb      	cmp	r3, r7
 80201fa:	f340 80ff 	ble.w	80203fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80201fe:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8020202:	1c7a      	adds	r2, r7, #1
 8020204:	f100 80ff 	bmi.w	8020406 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8020208:	4293      	cmp	r3, r2
 802020a:	f340 80fc 	ble.w	8020406 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802020e:	2c00      	cmp	r4, #0
 8020210:	f000 80fb 	beq.w	802040a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8020214:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8020218:	3501      	adds	r5, #1
 802021a:	f100 80fa 	bmi.w	8020412 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802021e:	45a8      	cmp	r8, r5
 8020220:	f340 80f7 	ble.w	8020412 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8020224:	f1be 0f00 	cmp.w	lr, #0
 8020228:	f000 80f6 	beq.w	8020418 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 802022c:	2f00      	cmp	r7, #0
 802022e:	f2c0 80ee 	blt.w	802040e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020232:	42bb      	cmp	r3, r7
 8020234:	f340 80eb 	ble.w	802040e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8020238:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 802023c:	3701      	adds	r7, #1
 802023e:	f100 80ee 	bmi.w	802041e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020242:	42bb      	cmp	r3, r7
 8020244:	f340 80eb 	ble.w	802041e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8020248:	2c00      	cmp	r4, #0
 802024a:	f000 80ea 	beq.w	8020422 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802024e:	3301      	adds	r3, #1
 8020250:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8020254:	fa1f fc84 	uxth.w	ip, r4
 8020258:	fa1f fe8e 	uxth.w	lr, lr
 802025c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8020260:	fb0c f90e 	mul.w	r9, ip, lr
 8020264:	0e13      	lsrs	r3, r2, #24
 8020266:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802026a:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802026e:	9302      	str	r3, [sp, #8]
 8020270:	ebac 0709 	sub.w	r7, ip, r9
 8020274:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8020278:	fa1f f48e 	uxth.w	r4, lr
 802027c:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8020280:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020284:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8020288:	fb0a fe0e 	mul.w	lr, sl, lr
 802028c:	1b1b      	subs	r3, r3, r4
 802028e:	fb0a f606 	mul.w	r6, sl, r6
 8020292:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8020296:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 802029a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802029e:	b29b      	uxth	r3, r3
 80202a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80202a4:	b2bf      	uxth	r7, r7
 80202a6:	9301      	str	r3, [sp, #4]
 80202a8:	44e6      	add	lr, ip
 80202aa:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80202ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202b2:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80202b6:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80202ba:	9303      	str	r3, [sp, #12]
 80202bc:	0a33      	lsrs	r3, r6, #8
 80202be:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80202c2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80202c6:	9304      	str	r3, [sp, #16]
 80202c8:	fb0b f606 	mul.w	r6, fp, r6
 80202cc:	fb0b f000 	mul.w	r0, fp, r0
 80202d0:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80202d4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80202d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80202dc:	44b6      	add	lr, r6
 80202de:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80202e2:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80202e6:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80202ea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80202ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80202f2:	fb08 f606 	mul.w	r6, r8, r6
 80202f6:	0a03      	lsrs	r3, r0, #8
 80202f8:	fb08 f505 	mul.w	r5, r8, r5
 80202fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020300:	0a30      	lsrs	r0, r6, #8
 8020302:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020306:	9305      	str	r3, [sp, #20]
 8020308:	0e13      	lsrs	r3, r2, #24
 802030a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802030e:	fb0e fe07 	mul.w	lr, lr, r7
 8020312:	4430      	add	r0, r6
 8020314:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8020318:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 802031c:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8020320:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020324:	0a00      	lsrs	r0, r0, #8
 8020326:	435e      	muls	r6, r3
 8020328:	0a2d      	lsrs	r5, r5, #8
 802032a:	435a      	muls	r2, r3
 802032c:	9b03      	ldr	r3, [sp, #12]
 802032e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8020332:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8020336:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802033a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802033e:	44b4      	add	ip, r6
 8020340:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8020344:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020348:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 802034c:	9e01      	ldr	r6, [sp, #4]
 802034e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020352:	fb03 ee06 	mla	lr, r3, r6, lr
 8020356:	9b04      	ldr	r3, [sp, #16]
 8020358:	0a12      	lsrs	r2, r2, #8
 802035a:	fb0c ee09 	mla	lr, ip, r9, lr
 802035e:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8020362:	9b05      	ldr	r3, [sp, #20]
 8020364:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020368:	fb00 ee04 	mla	lr, r0, r4, lr
 802036c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020370:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8020374:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8020378:	9b01      	ldr	r3, [sp, #4]
 802037a:	fb07 fe0e 	mul.w	lr, r7, lr
 802037e:	fb07 f70b 	mul.w	r7, r7, fp
 8020382:	fb03 ee06 	mla	lr, r3, r6, lr
 8020386:	fb03 730a 	mla	r3, r3, sl, r7
 802038a:	fb09 e202 	mla	r2, r9, r2, lr
 802038e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8020392:	fb04 2e0e 	mla	lr, r4, lr, r2
 8020396:	fb04 3408 	mla	r4, r4, r8, r3
 802039a:	9b02      	ldr	r3, [sp, #8]
 802039c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80203a0:	fb09 4903 	mla	r9, r9, r3, r4
 80203a4:	780b      	ldrb	r3, [r1, #0]
 80203a6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80203aa:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80203ae:	ea40 0e0e 	orr.w	lr, r0, lr
 80203b2:	fa5f f989 	uxtb.w	r9, r9
 80203b6:	fb03 f209 	mul.w	r2, r3, r9
 80203ba:	1c53      	adds	r3, r2, #1
 80203bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80203c0:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80203c4:	700b      	strb	r3, [r1, #0]
 80203c6:	784b      	ldrb	r3, [r1, #1]
 80203c8:	fb03 f309 	mul.w	r3, r3, r9
 80203cc:	1c5a      	adds	r2, r3, #1
 80203ce:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80203d2:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80203d6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80203da:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80203de:	704b      	strb	r3, [r1, #1]
 80203e0:	788b      	ldrb	r3, [r1, #2]
 80203e2:	fb03 f909 	mul.w	r9, r3, r9
 80203e6:	f109 0301 	add.w	r3, r9, #1
 80203ea:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80203ee:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80203f2:	f881 e002 	strb.w	lr, [r1, #2]
 80203f6:	b007      	add	sp, #28
 80203f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203fc:	2600      	movs	r6, #0
 80203fe:	e700      	b.n	8020202 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8020400:	2000      	movs	r0, #0
 8020402:	4606      	mov	r6, r0
 8020404:	e708      	b.n	8020218 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8020406:	2000      	movs	r0, #0
 8020408:	e706      	b.n	8020218 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802040a:	4620      	mov	r0, r4
 802040c:	e704      	b.n	8020218 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 802040e:	2500      	movs	r5, #0
 8020410:	e714      	b.n	802023c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8020412:	2200      	movs	r2, #0
 8020414:	4615      	mov	r5, r2
 8020416:	e71d      	b.n	8020254 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020418:	4672      	mov	r2, lr
 802041a:	4675      	mov	r5, lr
 802041c:	e71a      	b.n	8020254 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 802041e:	2200      	movs	r2, #0
 8020420:	e718      	b.n	8020254 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8020422:	4622      	mov	r2, r4
 8020424:	e716      	b.n	8020254 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08020426 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802042a:	b099      	sub	sp, #100	; 0x64
 802042c:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8020430:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020432:	9017      	str	r0, [sp, #92]	; 0x5c
 8020434:	9306      	str	r3, [sp, #24]
 8020436:	6850      	ldr	r0, [r2, #4]
 8020438:	6812      	ldr	r2, [r2, #0]
 802043a:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802043e:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8020442:	fb00 1303 	mla	r3, r0, r3, r1
 8020446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802044a:	18d3      	adds	r3, r2, r3
 802044c:	9309      	str	r3, [sp, #36]	; 0x24
 802044e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	930e      	str	r3, [sp, #56]	; 0x38
 8020454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020456:	2b00      	cmp	r3, #0
 8020458:	dc03      	bgt.n	8020462 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802045a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802045c:	2b00      	cmp	r3, #0
 802045e:	f340 8360 	ble.w	8020b22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8020462:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020464:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020468:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802046c:	1e48      	subs	r0, r1, #1
 802046e:	1e57      	subs	r7, r2, #1
 8020470:	9b06      	ldr	r3, [sp, #24]
 8020472:	2b00      	cmp	r3, #0
 8020474:	f340 817b 	ble.w	802076e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8020478:	ea5f 4c25 	movs.w	ip, r5, asr #16
 802047c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020480:	d406      	bmi.n	8020490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020482:	4584      	cmp	ip, r0
 8020484:	da04      	bge.n	8020490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020486:	2b00      	cmp	r3, #0
 8020488:	db02      	blt.n	8020490 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802048a:	42bb      	cmp	r3, r7
 802048c:	f2c0 8170 	blt.w	8020770 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020490:	f11c 0c01 	adds.w	ip, ip, #1
 8020494:	f100 8160 	bmi.w	8020758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8020498:	4561      	cmp	r1, ip
 802049a:	f2c0 815d 	blt.w	8020758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802049e:	3301      	adds	r3, #1
 80204a0:	f100 815a 	bmi.w	8020758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80204a4:	429a      	cmp	r2, r3
 80204a6:	f2c0 8157 	blt.w	8020758 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80204aa:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80204ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80204b0:	f1b8 0f00 	cmp.w	r8, #0
 80204b4:	f340 8179 	ble.w	80207aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80204b8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80204ba:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80204be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80204c0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80204c4:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80204c8:	142a      	asrs	r2, r5, #16
 80204ca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80204ce:	689b      	ldr	r3, [r3, #8]
 80204d0:	f100 81be 	bmi.w	8020850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80204d4:	f103 39ff 	add.w	r9, r3, #4294967295
 80204d8:	454a      	cmp	r2, r9
 80204da:	f280 81b9 	bge.w	8020850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80204de:	f1bc 0f00 	cmp.w	ip, #0
 80204e2:	f2c0 81b5 	blt.w	8020850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80204e6:	f10e 39ff 	add.w	r9, lr, #4294967295
 80204ea:	45cc      	cmp	ip, r9
 80204ec:	f280 81b0 	bge.w	8020850 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80204f0:	b21b      	sxth	r3, r3
 80204f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204f4:	fb0c 2203 	mla	r2, ip, r3, r2
 80204f8:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80204fc:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020500:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020504:	2900      	cmp	r1, #0
 8020506:	f000 8197 	beq.w	8020838 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 802050a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 802050e:	940a      	str	r4, [sp, #40]	; 0x28
 8020510:	0e24      	lsrs	r4, r4, #24
 8020512:	9411      	str	r4, [sp, #68]	; 0x44
 8020514:	b180      	cbz	r0, 8020538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802051a:	3b01      	subs	r3, #1
 802051c:	009b      	lsls	r3, r3, #2
 802051e:	3304      	adds	r3, #4
 8020520:	eb09 0c03 	add.w	ip, r9, r3
 8020524:	f859 3003 	ldr.w	r3, [r9, r3]
 8020528:	9307      	str	r3, [sp, #28]
 802052a:	0e1b      	lsrs	r3, r3, #24
 802052c:	930f      	str	r3, [sp, #60]	; 0x3c
 802052e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020532:	930b      	str	r3, [sp, #44]	; 0x2c
 8020534:	0e1b      	lsrs	r3, r3, #24
 8020536:	9312      	str	r3, [sp, #72]	; 0x48
 8020538:	b289      	uxth	r1, r1
 802053a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802053c:	b280      	uxth	r0, r0
 802053e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020540:	fb01 fa00 	mul.w	sl, r1, r0
 8020544:	0109      	lsls	r1, r1, #4
 8020546:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 802054a:	eba1 090a 	sub.w	r9, r1, sl
 802054e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8020552:	b280      	uxth	r0, r0
 8020554:	fa1f f989 	uxth.w	r9, r9
 8020558:	1a09      	subs	r1, r1, r0
 802055a:	fb09 f303 	mul.w	r3, r9, r3
 802055e:	b289      	uxth	r1, r1
 8020560:	fb01 330e 	mla	r3, r1, lr, r3
 8020564:	fb00 3304 	mla	r3, r0, r4, r3
 8020568:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802056a:	fb0a 3304 	mla	r3, sl, r4, r3
 802056e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020572:	2b00      	cmp	r3, #0
 8020574:	f000 80e8 	beq.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020578:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802057c:	d01b      	beq.n	80205b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802057e:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8020582:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020586:	fb0e fb0b 	mul.w	fp, lr, fp
 802058a:	fb0e fe02 	mul.w	lr, lr, r2
 802058e:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8020592:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020596:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802059a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802059e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205a2:	445a      	add	r2, fp
 80205a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205a8:	0a12      	lsrs	r2, r2, #8
 80205aa:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80205ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80205b2:	ea42 020c 	orr.w	r2, r2, ip
 80205b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205b8:	2cff      	cmp	r4, #255	; 0xff
 80205ba:	d021      	beq.n	8020600 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80205bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80205be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80205c2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205c4:	fb04 fc0c 	mul.w	ip, r4, ip
 80205c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80205ca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80205ce:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80205d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80205d4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80205d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80205e0:	44e6      	add	lr, ip
 80205e2:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80205e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205ea:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80205ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205f2:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80205f6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80205fa:	ea4e 040b 	orr.w	r4, lr, fp
 80205fe:	940a      	str	r4, [sp, #40]	; 0x28
 8020600:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020602:	2cff      	cmp	r4, #255	; 0xff
 8020604:	d021      	beq.n	802064a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8020606:	9c07      	ldr	r4, [sp, #28]
 8020608:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802060c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802060e:	fb04 fc0c 	mul.w	ip, r4, ip
 8020612:	9c07      	ldr	r4, [sp, #28]
 8020614:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020618:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802061c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802061e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020622:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020626:	fb04 fb0b 	mul.w	fp, r4, fp
 802062a:	44e6      	add	lr, ip
 802062c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8020630:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020634:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020638:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802063c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020640:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020644:	ea4e 040b 	orr.w	r4, lr, fp
 8020648:	9407      	str	r4, [sp, #28]
 802064a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802064c:	2cff      	cmp	r4, #255	; 0xff
 802064e:	d021      	beq.n	8020694 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020650:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020652:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020656:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020658:	fb04 fc0c 	mul.w	ip, r4, ip
 802065c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802065e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020662:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8020666:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020668:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802066c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020670:	fb04 fb0b 	mul.w	fp, r4, fp
 8020674:	44e6      	add	lr, ip
 8020676:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802067a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802067e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8020682:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020686:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 802068a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802068e:	ea4e 040b 	orr.w	r4, lr, fp
 8020692:	940b      	str	r4, [sp, #44]	; 0x2c
 8020694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020696:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802069a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802069e:	2bff      	cmp	r3, #255	; 0xff
 80206a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80206a4:	9c07      	ldr	r4, [sp, #28]
 80206a6:	fb09 fc0c 	mul.w	ip, r9, ip
 80206aa:	fb01 cc0e 	mla	ip, r1, lr, ip
 80206ae:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80206b4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80206b8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80206bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80206be:	fb0a cc0e 	mla	ip, sl, lr, ip
 80206c2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80206c6:	fb09 f90e 	mul.w	r9, r9, lr
 80206ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206ce:	fb01 9202 	mla	r2, r1, r2, r9
 80206d2:	9907      	ldr	r1, [sp, #28]
 80206d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80206d8:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 80206dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80206de:	fb00 220b 	mla	r2, r0, fp, r2
 80206e2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80206e6:	fb0a 2a00 	mla	sl, sl, r0, r2
 80206ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80206f2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80206f6:	fa5f f08c 	uxtb.w	r0, ip
 80206fa:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80206fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020702:	f000 80a2 	beq.w	802084a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8020706:	43db      	mvns	r3, r3
 8020708:	783a      	ldrb	r2, [r7, #0]
 802070a:	f897 a002 	ldrb.w	sl, [r7, #2]
 802070e:	b2db      	uxtb	r3, r3
 8020710:	fb02 fe03 	mul.w	lr, r2, r3
 8020714:	fb0a fa03 	mul.w	sl, sl, r3
 8020718:	f10e 0201 	add.w	r2, lr, #1
 802071c:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8020720:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020724:	703a      	strb	r2, [r7, #0]
 8020726:	787a      	ldrb	r2, [r7, #1]
 8020728:	fb02 f003 	mul.w	r0, r2, r3
 802072c:	f10a 0301 	add.w	r3, sl, #1
 8020730:	1c42      	adds	r2, r0, #1
 8020732:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8020736:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802073a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802073e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020742:	707a      	strb	r2, [r7, #1]
 8020744:	f887 c002 	strb.w	ip, [r7, #2]
 8020748:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802074a:	3703      	adds	r7, #3
 802074c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020750:	441d      	add	r5, r3
 8020752:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020754:	441e      	add	r6, r3
 8020756:	e6ab      	b.n	80204b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020758:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802075a:	441d      	add	r5, r3
 802075c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802075e:	441e      	add	r6, r3
 8020760:	9b06      	ldr	r3, [sp, #24]
 8020762:	3b01      	subs	r3, #1
 8020764:	9306      	str	r3, [sp, #24]
 8020766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020768:	3303      	adds	r3, #3
 802076a:	9309      	str	r3, [sp, #36]	; 0x24
 802076c:	e680      	b.n	8020470 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802076e:	d024      	beq.n	80207ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8020770:	9b06      	ldr	r3, [sp, #24]
 8020772:	9825      	ldr	r0, [sp, #148]	; 0x94
 8020774:	3b01      	subs	r3, #1
 8020776:	fb00 5003 	mla	r0, r0, r3, r5
 802077a:	1400      	asrs	r0, r0, #16
 802077c:	f53f ae95 	bmi.w	80204aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020780:	3901      	subs	r1, #1
 8020782:	4288      	cmp	r0, r1
 8020784:	f6bf ae91 	bge.w	80204aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020788:	9926      	ldr	r1, [sp, #152]	; 0x98
 802078a:	fb01 6303 	mla	r3, r1, r3, r6
 802078e:	141b      	asrs	r3, r3, #16
 8020790:	f53f ae8b 	bmi.w	80204aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020794:	3a01      	subs	r2, #1
 8020796:	4293      	cmp	r3, r2
 8020798:	f6bf ae87 	bge.w	80204aa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802079c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802079e:	f8dd b018 	ldr.w	fp, [sp, #24]
 80207a2:	1cdf      	adds	r7, r3, #3
 80207a4:	f1bb 0f00 	cmp.w	fp, #0
 80207a8:	dc6e      	bgt.n	8020888 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 80207aa:	9b06      	ldr	r3, [sp, #24]
 80207ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80207b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80207b6:	4423      	add	r3, r4
 80207b8:	9309      	str	r3, [sp, #36]	; 0x24
 80207ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80207bc:	2b00      	cmp	r3, #0
 80207be:	f340 81b0 	ble.w	8020b22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 80207c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80207c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80207c8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80207cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80207d0:	eef0 6a62 	vmov.f32	s13, s5
 80207d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80207d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80207dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207e0:	ee16 5a90 	vmov	r5, s13
 80207e4:	eef0 6a43 	vmov.f32	s13, s6
 80207e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207ec:	ee16 6a90 	vmov	r6, s13
 80207f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020800:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020804:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020808:	ee12 2a90 	vmov	r2, s5
 802080c:	eef0 2a47 	vmov.f32	s5, s14
 8020810:	fb92 f3f3 	sdiv	r3, r2, r3
 8020814:	ee13 2a10 	vmov	r2, s6
 8020818:	9325      	str	r3, [sp, #148]	; 0x94
 802081a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802081c:	eeb0 3a67 	vmov.f32	s6, s15
 8020820:	fb92 f3f3 	sdiv	r3, r2, r3
 8020824:	9326      	str	r3, [sp, #152]	; 0x98
 8020826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020828:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802082a:	3b01      	subs	r3, #1
 802082c:	9315      	str	r3, [sp, #84]	; 0x54
 802082e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020830:	bf08      	it	eq
 8020832:	4613      	moveq	r3, r2
 8020834:	9306      	str	r3, [sp, #24]
 8020836:	e60d      	b.n	8020454 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8020838:	2800      	cmp	r0, #0
 802083a:	f43f ae7d 	beq.w	8020538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802083e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8020842:	9307      	str	r3, [sp, #28]
 8020844:	0e1b      	lsrs	r3, r3, #24
 8020846:	930f      	str	r3, [sp, #60]	; 0x3c
 8020848:	e676      	b.n	8020538 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 802084a:	7038      	strb	r0, [r7, #0]
 802084c:	7079      	strb	r1, [r7, #1]
 802084e:	e779      	b.n	8020744 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020850:	f112 0901 	adds.w	r9, r2, #1
 8020854:	f53f af78 	bmi.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020858:	454b      	cmp	r3, r9
 802085a:	f6ff af75 	blt.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802085e:	f11c 0901 	adds.w	r9, ip, #1
 8020862:	f53f af71 	bmi.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020866:	45ce      	cmp	lr, r9
 8020868:	f6ff af6e 	blt.w	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802086c:	b21b      	sxth	r3, r3
 802086e:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8020872:	fa0f f28e 	sxth.w	r2, lr
 8020876:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802087a:	9200      	str	r2, [sp, #0]
 802087c:	4639      	mov	r1, r7
 802087e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020880:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020882:	f7ff fca1 	bl	80201c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020886:	e75f      	b.n	8020748 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020888:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802088a:	1429      	asrs	r1, r5, #16
 802088c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802088e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020892:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8020896:	1433      	asrs	r3, r6, #16
 8020898:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802089c:	fb0c 1303 	mla	r3, ip, r3, r1
 80208a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80208a2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80208a6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80208aa:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80208ae:	2a00      	cmp	r2, #0
 80208b0:	f000 8129 	beq.w	8020b06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80208b4:	684c      	ldr	r4, [r1, #4]
 80208b6:	940c      	str	r4, [sp, #48]	; 0x30
 80208b8:	0e24      	lsrs	r4, r4, #24
 80208ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80208bc:	b198      	cbz	r0, 80208e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80208be:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80208c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80208c6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80208ca:	f10c 0c04 	add.w	ip, ip, #4
 80208ce:	eb01 080c 	add.w	r8, r1, ip
 80208d2:	f851 100c 	ldr.w	r1, [r1, ip]
 80208d6:	9108      	str	r1, [sp, #32]
 80208d8:	0e09      	lsrs	r1, r1, #24
 80208da:	9110      	str	r1, [sp, #64]	; 0x40
 80208dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80208e0:	910d      	str	r1, [sp, #52]	; 0x34
 80208e2:	0e09      	lsrs	r1, r1, #24
 80208e4:	9114      	str	r1, [sp, #80]	; 0x50
 80208e6:	b292      	uxth	r2, r2
 80208e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80208ea:	b280      	uxth	r0, r0
 80208ec:	fb02 f900 	mul.w	r9, r2, r0
 80208f0:	0112      	lsls	r2, r2, #4
 80208f2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80208f6:	eba2 0809 	sub.w	r8, r2, r9
 80208fa:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80208fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020900:	b280      	uxth	r0, r0
 8020902:	fa1f f888 	uxth.w	r8, r8
 8020906:	1a09      	subs	r1, r1, r0
 8020908:	fb08 f202 	mul.w	r2, r8, r2
 802090c:	b289      	uxth	r1, r1
 802090e:	fb01 220e 	mla	r2, r1, lr, r2
 8020912:	fb00 2204 	mla	r2, r0, r4, r2
 8020916:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020918:	fb09 2204 	mla	r2, r9, r4, r2
 802091c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020920:	2a00      	cmp	r2, #0
 8020922:	f000 80e8 	beq.w	8020af6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8020926:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802092a:	d01b      	beq.n	8020964 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 802092c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020934:	fb0e fa0a 	mul.w	sl, lr, sl
 8020938:	fb0e fe03 	mul.w	lr, lr, r3
 802093c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020940:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020944:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020948:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802094c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020950:	4453      	add	r3, sl
 8020952:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020956:	0a1b      	lsrs	r3, r3, #8
 8020958:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802095c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020960:	ea43 030c 	orr.w	r3, r3, ip
 8020964:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020966:	2cff      	cmp	r4, #255	; 0xff
 8020968:	d021      	beq.n	80209ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 802096a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802096c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020970:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020972:	fb04 fc0c 	mul.w	ip, r4, ip
 8020976:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020978:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802097c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020980:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020982:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802098a:	fb04 fa0a 	mul.w	sl, r4, sl
 802098e:	44e6      	add	lr, ip
 8020990:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020994:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020998:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802099c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209a8:	ea4e 040a 	orr.w	r4, lr, sl
 80209ac:	940c      	str	r4, [sp, #48]	; 0x30
 80209ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209b0:	2cff      	cmp	r4, #255	; 0xff
 80209b2:	d021      	beq.n	80209f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 80209b4:	9c08      	ldr	r4, [sp, #32]
 80209b6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80209ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209bc:	fb04 fc0c 	mul.w	ip, r4, ip
 80209c0:	9c08      	ldr	r4, [sp, #32]
 80209c2:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80209c6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80209c8:	fb04 fa0e 	mul.w	sl, r4, lr
 80209cc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80209d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80209d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209d8:	44e6      	add	lr, ip
 80209da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80209de:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80209e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80209e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80209ee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80209f2:	ea4e 040a 	orr.w	r4, lr, sl
 80209f6:	9408      	str	r4, [sp, #32]
 80209f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80209fa:	2cff      	cmp	r4, #255	; 0xff
 80209fc:	d021      	beq.n	8020a42 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80209fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a00:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a04:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a06:	fb04 fc0c 	mul.w	ip, r4, ip
 8020a0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a0c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020a10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020a14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020a16:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020a1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a22:	44e6      	add	lr, ip
 8020a24:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020a28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a2c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020a30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020a3c:	ea4e 040a 	orr.w	r4, lr, sl
 8020a40:	940d      	str	r4, [sp, #52]	; 0x34
 8020a42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a44:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020a4c:	2aff      	cmp	r2, #255	; 0xff
 8020a4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020a52:	9c08      	ldr	r4, [sp, #32]
 8020a54:	fb08 fc0c 	mul.w	ip, r8, ip
 8020a58:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020a5c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020a62:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020a66:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020a6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020a6c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020a70:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020a74:	fb08 f80e 	mul.w	r8, r8, lr
 8020a78:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a7c:	fb01 8303 	mla	r3, r1, r3, r8
 8020a80:	9908      	ldr	r1, [sp, #32]
 8020a82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020a86:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020a8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020a8c:	fb00 330a 	mla	r3, r0, sl, r3
 8020a90:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8020a94:	fb09 3e0e 	mla	lr, r9, lr, r3
 8020a98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020a9c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8020aa0:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020aa4:	fa5f f08c 	uxtb.w	r0, ip
 8020aa8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020aac:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020ab0:	d032      	beq.n	8020b18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8020ab2:	43d2      	mvns	r2, r2
 8020ab4:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8020ab8:	b2d2      	uxtb	r2, r2
 8020aba:	fb0e fe02 	mul.w	lr, lr, r2
 8020abe:	f10e 0301 	add.w	r3, lr, #1
 8020ac2:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8020ac6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020aca:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 8020ace:	4350      	muls	r0, r2
 8020ad0:	f807 3c03 	strb.w	r3, [r7, #-3]
 8020ad4:	1c43      	adds	r3, r0, #1
 8020ad6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020ada:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020ade:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8020ae2:	4353      	muls	r3, r2
 8020ae4:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020ae8:	1c5a      	adds	r2, r3, #1
 8020aea:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020aee:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8020af2:	f807 cc01 	strb.w	ip, [r7, #-1]
 8020af6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020af8:	3703      	adds	r7, #3
 8020afa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020afe:	441d      	add	r5, r3
 8020b00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020b02:	441e      	add	r6, r3
 8020b04:	e64e      	b.n	80207a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8020b06:	2800      	cmp	r0, #0
 8020b08:	f43f aeed 	beq.w	80208e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020b0c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8020b10:	9108      	str	r1, [sp, #32]
 8020b12:	0e09      	lsrs	r1, r1, #24
 8020b14:	9110      	str	r1, [sp, #64]	; 0x40
 8020b16:	e6e6      	b.n	80208e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8020b18:	f807 0c03 	strb.w	r0, [r7, #-3]
 8020b1c:	f807 1c02 	strb.w	r1, [r7, #-2]
 8020b20:	e7e7      	b.n	8020af2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 8020b22:	b019      	add	sp, #100	; 0x64
 8020b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8020b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b2c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 8020b30:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020b34:	2c00      	cmp	r4, #0
 8020b36:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020b3a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8020b3e:	fb00 4e03 	mla	lr, r0, r3, r4
 8020b42:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8020b46:	f2c0 80b8 	blt.w	8020cba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020b4a:	45a1      	cmp	r9, r4
 8020b4c:	f340 80b5 	ble.w	8020cba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020b50:	2800      	cmp	r0, #0
 8020b52:	f2c0 80b2 	blt.w	8020cba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020b56:	4580      	cmp	r8, r0
 8020b58:	f340 80af 	ble.w	8020cba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020b5c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8020b60:	f01e 0f01 	tst.w	lr, #1
 8020b64:	5d56      	ldrb	r6, [r2, r5]
 8020b66:	bf0c      	ite	eq
 8020b68:	f006 060f 	andeq.w	r6, r6, #15
 8020b6c:	1136      	asrne	r6, r6, #4
 8020b6e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020b72:	b2f6      	uxtb	r6, r6
 8020b74:	f114 0a01 	adds.w	sl, r4, #1
 8020b78:	f100 80a1 	bmi.w	8020cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020b7c:	45d1      	cmp	r9, sl
 8020b7e:	f340 809e 	ble.w	8020cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020b82:	2800      	cmp	r0, #0
 8020b84:	f2c0 809b 	blt.w	8020cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020b88:	4580      	cmp	r8, r0
 8020b8a:	f340 8098 	ble.w	8020cbe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020b8e:	2f00      	cmp	r7, #0
 8020b90:	f000 8097 	beq.w	8020cc2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020b94:	f10e 0b01 	add.w	fp, lr, #1
 8020b98:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020b9c:	f01b 0f01 	tst.w	fp, #1
 8020ba0:	5d55      	ldrb	r5, [r2, r5]
 8020ba2:	bf0c      	ite	eq
 8020ba4:	f005 050f 	andeq.w	r5, r5, #15
 8020ba8:	112d      	asrne	r5, r5, #4
 8020baa:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020bae:	b2ed      	uxtb	r5, r5
 8020bb0:	f1bc 0f00 	cmp.w	ip, #0
 8020bb4:	f000 8089 	beq.w	8020cca <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020bb8:	2c00      	cmp	r4, #0
 8020bba:	f100 0001 	add.w	r0, r0, #1
 8020bbe:	f2c0 8082 	blt.w	8020cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020bc2:	45a1      	cmp	r9, r4
 8020bc4:	dd7f      	ble.n	8020cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020bc6:	2800      	cmp	r0, #0
 8020bc8:	db7d      	blt.n	8020cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020bca:	4580      	cmp	r8, r0
 8020bcc:	dd7b      	ble.n	8020cc6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020bce:	eb03 0b0e 	add.w	fp, r3, lr
 8020bd2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020bd6:	f01b 0f01 	tst.w	fp, #1
 8020bda:	5d14      	ldrb	r4, [r2, r4]
 8020bdc:	bf0c      	ite	eq
 8020bde:	f004 040f 	andeq.w	r4, r4, #15
 8020be2:	1124      	asrne	r4, r4, #4
 8020be4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020be8:	b2e4      	uxtb	r4, r4
 8020bea:	f1ba 0f00 	cmp.w	sl, #0
 8020bee:	db6f      	blt.n	8020cd0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020bf0:	45d1      	cmp	r9, sl
 8020bf2:	dd6d      	ble.n	8020cd0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020bf4:	2800      	cmp	r0, #0
 8020bf6:	db6b      	blt.n	8020cd0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020bf8:	4580      	cmp	r8, r0
 8020bfa:	dd69      	ble.n	8020cd0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 8020bfc:	2f00      	cmp	r7, #0
 8020bfe:	d069      	beq.n	8020cd4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 8020c00:	3301      	adds	r3, #1
 8020c02:	449e      	add	lr, r3
 8020c04:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020c08:	f01e 0f01 	tst.w	lr, #1
 8020c0c:	5cd0      	ldrb	r0, [r2, r3]
 8020c0e:	bf0c      	ite	eq
 8020c10:	f000 000f 	andeq.w	r0, r0, #15
 8020c14:	1100      	asrne	r0, r0, #4
 8020c16:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020c1a:	b2c3      	uxtb	r3, r0
 8020c1c:	b2ba      	uxth	r2, r7
 8020c1e:	fa1f fc8c 	uxth.w	ip, ip
 8020c22:	fb02 f00c 	mul.w	r0, r2, ip
 8020c26:	0112      	lsls	r2, r2, #4
 8020c28:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020c2c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020c30:	1a12      	subs	r2, r2, r0
 8020c32:	fa1f fc8c 	uxth.w	ip, ip
 8020c36:	b292      	uxth	r2, r2
 8020c38:	eba7 070c 	sub.w	r7, r7, ip
 8020c3c:	436a      	muls	r2, r5
 8020c3e:	b2bf      	uxth	r7, r7
 8020c40:	fb06 2207 	mla	r2, r6, r7, r2
 8020c44:	fb0c 2404 	mla	r4, ip, r4, r2
 8020c48:	fb00 4303 	mla	r3, r0, r3, r4
 8020c4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020c50:	b38b      	cbz	r3, 8020cb6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8020c52:	4a21      	ldr	r2, [pc, #132]	; (8020cd8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020c54:	6814      	ldr	r4, [r2, #0]
 8020c56:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8020c5a:	b2e5      	uxtb	r5, r4
 8020c5c:	4353      	muls	r3, r2
 8020c5e:	1c5a      	adds	r2, r3, #1
 8020c60:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020c64:	1212      	asrs	r2, r2, #8
 8020c66:	b290      	uxth	r0, r2
 8020c68:	43d2      	mvns	r2, r2
 8020c6a:	fb15 f500 	smulbb	r5, r5, r0
 8020c6e:	b2d3      	uxtb	r3, r2
 8020c70:	780a      	ldrb	r2, [r1, #0]
 8020c72:	fb02 5203 	mla	r2, r2, r3, r5
 8020c76:	b292      	uxth	r2, r2
 8020c78:	1c55      	adds	r5, r2, #1
 8020c7a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020c7e:	784d      	ldrb	r5, [r1, #1]
 8020c80:	fb15 f503 	smulbb	r5, r5, r3
 8020c84:	1212      	asrs	r2, r2, #8
 8020c86:	700a      	strb	r2, [r1, #0]
 8020c88:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020c8c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020c90:	fb02 5200 	mla	r2, r2, r0, r5
 8020c94:	b292      	uxth	r2, r2
 8020c96:	1c55      	adds	r5, r2, #1
 8020c98:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020c9c:	1212      	asrs	r2, r2, #8
 8020c9e:	704a      	strb	r2, [r1, #1]
 8020ca0:	788a      	ldrb	r2, [r1, #2]
 8020ca2:	fb12 f303 	smulbb	r3, r2, r3
 8020ca6:	fb04 3300 	mla	r3, r4, r0, r3
 8020caa:	b29b      	uxth	r3, r3
 8020cac:	1c5a      	adds	r2, r3, #1
 8020cae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020cb2:	121b      	asrs	r3, r3, #8
 8020cb4:	708b      	strb	r3, [r1, #2]
 8020cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cba:	2600      	movs	r6, #0
 8020cbc:	e75a      	b.n	8020b74 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 8020cbe:	2500      	movs	r5, #0
 8020cc0:	e776      	b.n	8020bb0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020cc2:	463d      	mov	r5, r7
 8020cc4:	e774      	b.n	8020bb0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020cc6:	2400      	movs	r4, #0
 8020cc8:	e78f      	b.n	8020bea <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020cca:	4663      	mov	r3, ip
 8020ccc:	4664      	mov	r4, ip
 8020cce:	e7a5      	b.n	8020c1c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020cd0:	2300      	movs	r3, #0
 8020cd2:	e7a3      	b.n	8020c1c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020cd4:	463b      	mov	r3, r7
 8020cd6:	e7a1      	b.n	8020c1c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020cd8:	2400f250 	.word	0x2400f250

08020cdc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ce0:	b097      	sub	sp, #92	; 0x5c
 8020ce2:	9214      	str	r2, [sp, #80]	; 0x50
 8020ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8020ce6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020ce8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020cec:	9015      	str	r0, [sp, #84]	; 0x54
 8020cee:	910c      	str	r1, [sp, #48]	; 0x30
 8020cf0:	6850      	ldr	r0, [r2, #4]
 8020cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8020cf4:	6812      	ldr	r2, [r2, #0]
 8020cf6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020cfa:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 8020cfe:	fb00 1303 	mla	r3, r0, r3, r1
 8020d02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020d06:	eb02 0a03 	add.w	sl, r2, r3
 8020d0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d0c:	689b      	ldr	r3, [r3, #8]
 8020d0e:	3301      	adds	r3, #1
 8020d10:	f023 0301 	bic.w	r3, r3, #1
 8020d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8020d16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d18:	681f      	ldr	r7, [r3, #0]
 8020d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	dc03      	bgt.n	8020d28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020d20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	f340 8247 	ble.w	80211b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020d28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020d2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020d32:	1e48      	subs	r0, r1, #1
 8020d34:	f102 3cff 	add.w	ip, r2, #4294967295
 8020d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d3a:	2b00      	cmp	r3, #0
 8020d3c:	f340 80e5 	ble.w	8020f0a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8020d40:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020d44:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020d48:	d406      	bmi.n	8020d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d4a:	4586      	cmp	lr, r0
 8020d4c:	da04      	bge.n	8020d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d4e:	2b00      	cmp	r3, #0
 8020d50:	db02      	blt.n	8020d58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020d52:	4563      	cmp	r3, ip
 8020d54:	f2c0 80da 	blt.w	8020f0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020d58:	f11e 0e01 	adds.w	lr, lr, #1
 8020d5c:	f100 80cb 	bmi.w	8020ef6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020d60:	4571      	cmp	r1, lr
 8020d62:	f2c0 80c8 	blt.w	8020ef6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020d66:	3301      	adds	r3, #1
 8020d68:	f100 80c5 	bmi.w	8020ef6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020d6c:	429a      	cmp	r2, r3
 8020d6e:	f2c0 80c2 	blt.w	8020ef6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d74:	46d0      	mov	r8, sl
 8020d76:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020d7a:	930d      	str	r3, [sp, #52]	; 0x34
 8020d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	f340 80e3 	ble.w	8020f4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d86:	1430      	asrs	r0, r6, #16
 8020d88:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020d8c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020d90:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020d94:	142b      	asrs	r3, r5, #16
 8020d96:	f100 812e 	bmi.w	8020ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020d9a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020d9e:	455b      	cmp	r3, fp
 8020da0:	f280 8129 	bge.w	8020ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020da4:	2800      	cmp	r0, #0
 8020da6:	f2c0 8126 	blt.w	8020ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020daa:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020dae:	4558      	cmp	r0, fp
 8020db0:	f280 8121 	bge.w	8020ff6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020db4:	fb00 3309 	mla	r3, r0, r9, r3
 8020db8:	0858      	lsrs	r0, r3, #1
 8020dba:	07dc      	lsls	r4, r3, #31
 8020dbc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020dc0:	bf54      	ite	pl
 8020dc2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020dc6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020dca:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020dce:	fa5f fc8c 	uxtb.w	ip, ip
 8020dd2:	2a00      	cmp	r2, #0
 8020dd4:	f000 80fe 	beq.w	8020fd4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020dd8:	1c58      	adds	r0, r3, #1
 8020dda:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020dde:	07c0      	lsls	r0, r0, #31
 8020de0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020de4:	bf54      	ite	pl
 8020de6:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020dea:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020dee:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020df2:	fa5f f08e 	uxtb.w	r0, lr
 8020df6:	9010      	str	r0, [sp, #64]	; 0x40
 8020df8:	b1d9      	cbz	r1, 8020e32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020dfa:	444b      	add	r3, r9
 8020dfc:	0858      	lsrs	r0, r3, #1
 8020dfe:	07dc      	lsls	r4, r3, #31
 8020e00:	f103 0301 	add.w	r3, r3, #1
 8020e04:	5c38      	ldrb	r0, [r7, r0]
 8020e06:	bf54      	ite	pl
 8020e08:	f000 000f 	andpl.w	r0, r0, #15
 8020e0c:	1100      	asrmi	r0, r0, #4
 8020e0e:	07dc      	lsls	r4, r3, #31
 8020e10:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020e14:	b2c0      	uxtb	r0, r0
 8020e16:	900a      	str	r0, [sp, #40]	; 0x28
 8020e18:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8020e1c:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020e20:	bf54      	ite	pl
 8020e22:	f00e 030f 	andpl.w	r3, lr, #15
 8020e26:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020e2a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020e2e:	b2db      	uxtb	r3, r3
 8020e30:	9311      	str	r3, [sp, #68]	; 0x44
 8020e32:	b292      	uxth	r2, r2
 8020e34:	b289      	uxth	r1, r1
 8020e36:	0113      	lsls	r3, r2, #4
 8020e38:	fb02 f001 	mul.w	r0, r2, r1
 8020e3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e3e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8020e42:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020e46:	1a1b      	subs	r3, r3, r0
 8020e48:	b289      	uxth	r1, r1
 8020e4a:	b29b      	uxth	r3, r3
 8020e4c:	ebae 0e01 	sub.w	lr, lr, r1
 8020e50:	4353      	muls	r3, r2
 8020e52:	fa1f fe8e 	uxth.w	lr, lr
 8020e56:	fb0c 320e 	mla	r2, ip, lr, r3
 8020e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e5c:	fb01 2203 	mla	r2, r1, r3, r2
 8020e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020e62:	fb00 2203 	mla	r2, r0, r3, r2
 8020e66:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020e6a:	2a00      	cmp	r2, #0
 8020e6c:	d039      	beq.n	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020e6e:	4bc7      	ldr	r3, [pc, #796]	; (802118c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020e70:	6819      	ldr	r1, [r3, #0]
 8020e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e74:	fa5f fc81 	uxtb.w	ip, r1
 8020e78:	435a      	muls	r2, r3
 8020e7a:	1c53      	adds	r3, r2, #1
 8020e7c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020e80:	1212      	asrs	r2, r2, #8
 8020e82:	b290      	uxth	r0, r2
 8020e84:	43d2      	mvns	r2, r2
 8020e86:	fb1c fc00 	smulbb	ip, ip, r0
 8020e8a:	b2d3      	uxtb	r3, r2
 8020e8c:	f898 2000 	ldrb.w	r2, [r8]
 8020e90:	fb02 c203 	mla	r2, r2, r3, ip
 8020e94:	b292      	uxth	r2, r2
 8020e96:	f102 0c01 	add.w	ip, r2, #1
 8020e9a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020e9e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020ea2:	fb1c fc03 	smulbb	ip, ip, r3
 8020ea6:	1212      	asrs	r2, r2, #8
 8020ea8:	f888 2000 	strb.w	r2, [r8]
 8020eac:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020eb0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020eb4:	fb02 c200 	mla	r2, r2, r0, ip
 8020eb8:	b292      	uxth	r2, r2
 8020eba:	f102 0c01 	add.w	ip, r2, #1
 8020ebe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020ec2:	1212      	asrs	r2, r2, #8
 8020ec4:	f888 2001 	strb.w	r2, [r8, #1]
 8020ec8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020ecc:	fb12 f303 	smulbb	r3, r2, r3
 8020ed0:	fb01 3300 	mla	r3, r1, r0, r3
 8020ed4:	b29b      	uxth	r3, r3
 8020ed6:	1c5a      	adds	r2, r3, #1
 8020ed8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020edc:	121b      	asrs	r3, r3, #8
 8020ede:	f888 3002 	strb.w	r3, [r8, #2]
 8020ee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020ee4:	f108 0803 	add.w	r8, r8, #3
 8020ee8:	441d      	add	r5, r3
 8020eea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020eec:	441e      	add	r6, r3
 8020eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ef0:	3b01      	subs	r3, #1
 8020ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8020ef4:	e742      	b.n	8020d7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ef6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020ef8:	f10a 0a03 	add.w	sl, sl, #3
 8020efc:	441d      	add	r5, r3
 8020efe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020f00:	441e      	add	r6, r3
 8020f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f04:	3b01      	subs	r3, #1
 8020f06:	9309      	str	r3, [sp, #36]	; 0x24
 8020f08:	e716      	b.n	8020d38 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020f0a:	d024      	beq.n	8020f56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f0e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020f10:	3b01      	subs	r3, #1
 8020f12:	fb00 5003 	mla	r0, r0, r3, r5
 8020f16:	1400      	asrs	r0, r0, #16
 8020f18:	f53f af2b 	bmi.w	8020d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f1c:	3901      	subs	r1, #1
 8020f1e:	4288      	cmp	r0, r1
 8020f20:	f6bf af27 	bge.w	8020d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f24:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020f26:	fb01 6303 	mla	r3, r1, r3, r6
 8020f2a:	141b      	asrs	r3, r3, #16
 8020f2c:	f53f af21 	bmi.w	8020d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f30:	3a01      	subs	r2, #1
 8020f32:	4293      	cmp	r3, r2
 8020f34:	f6bf af1d 	bge.w	8020d72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020f38:	f10a 0e03 	add.w	lr, sl, #3
 8020f3c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8020f40:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020f44:	f1b8 0f00 	cmp.w	r8, #0
 8020f48:	dc76      	bgt.n	8021038 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020f50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020f54:	44a2      	add	sl, r4
 8020f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	f340 812c 	ble.w	80211b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020f62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f64:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f6c:	eef0 6a62 	vmov.f32	s13, s5
 8020f70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020f74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f7c:	ee16 5a90 	vmov	r5, s13
 8020f80:	eef0 6a43 	vmov.f32	s13, s6
 8020f84:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f88:	ee16 6a90 	vmov	r6, s13
 8020f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020fa0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020fa4:	ee12 2a90 	vmov	r2, s5
 8020fa8:	eef0 2a47 	vmov.f32	s5, s14
 8020fac:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fb0:	ee13 2a10 	vmov	r2, s6
 8020fb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8020fb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8020fbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8020fc0:	9324      	str	r3, [sp, #144]	; 0x90
 8020fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020fc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020fc6:	3b01      	subs	r3, #1
 8020fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8020fca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fcc:	bf08      	it	eq
 8020fce:	4613      	moveq	r3, r2
 8020fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8020fd2:	e6a2      	b.n	8020d1a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020fd4:	2900      	cmp	r1, #0
 8020fd6:	f43f af2c 	beq.w	8020e32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020fda:	eb09 0003 	add.w	r0, r9, r3
 8020fde:	0843      	lsrs	r3, r0, #1
 8020fe0:	07c0      	lsls	r0, r0, #31
 8020fe2:	5cfb      	ldrb	r3, [r7, r3]
 8020fe4:	bf54      	ite	pl
 8020fe6:	f003 030f 	andpl.w	r3, r3, #15
 8020fea:	111b      	asrmi	r3, r3, #4
 8020fec:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ff0:	b2db      	uxtb	r3, r3
 8020ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8020ff4:	e71d      	b.n	8020e32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020ff6:	f113 0b01 	adds.w	fp, r3, #1
 8020ffa:	f53f af72 	bmi.w	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ffe:	45dc      	cmp	ip, fp
 8021000:	f6ff af6f 	blt.w	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021004:	f110 0b01 	adds.w	fp, r0, #1
 8021008:	f53f af6b 	bmi.w	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802100c:	45de      	cmp	lr, fp
 802100e:	f6ff af68 	blt.w	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021012:	9302      	str	r3, [sp, #8]
 8021014:	fa0f f38e 	sxth.w	r3, lr
 8021018:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802101a:	9301      	str	r3, [sp, #4]
 802101c:	fa0f f38c 	sxth.w	r3, ip
 8021020:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021024:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021028:	9300      	str	r3, [sp, #0]
 802102a:	463a      	mov	r2, r7
 802102c:	464b      	mov	r3, r9
 802102e:	4641      	mov	r1, r8
 8021030:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021032:	f7ff fd79 	bl	8020b28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8021036:	e754      	b.n	8020ee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8021038:	142a      	asrs	r2, r5, #16
 802103a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802103e:	1433      	asrs	r3, r6, #16
 8021040:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021044:	fb09 2303 	mla	r3, r9, r3, r2
 8021048:	085a      	lsrs	r2, r3, #1
 802104a:	07dc      	lsls	r4, r3, #31
 802104c:	5cba      	ldrb	r2, [r7, r2]
 802104e:	bf54      	ite	pl
 8021050:	f002 020f 	andpl.w	r2, r2, #15
 8021054:	1112      	asrmi	r2, r2, #4
 8021056:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802105a:	b2d2      	uxtb	r2, r2
 802105c:	2900      	cmp	r1, #0
 802105e:	f000 8097 	beq.w	8021190 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8021062:	f103 0b01 	add.w	fp, r3, #1
 8021066:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802106a:	f01b 0f01 	tst.w	fp, #1
 802106e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021072:	bf0c      	ite	eq
 8021074:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021078:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802107c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021080:	fa5f f48c 	uxtb.w	r4, ip
 8021084:	9412      	str	r4, [sp, #72]	; 0x48
 8021086:	b300      	cbz	r0, 80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021088:	444b      	add	r3, r9
 802108a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802108e:	07dc      	lsls	r4, r3, #31
 8021090:	f103 0301 	add.w	r3, r3, #1
 8021094:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021098:	bf54      	ite	pl
 802109a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802109e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80210a2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80210a6:	fa5f f48c 	uxtb.w	r4, ip
 80210aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80210ae:	940b      	str	r4, [sp, #44]	; 0x2c
 80210b0:	07dc      	lsls	r4, r3, #31
 80210b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80210b6:	bf54      	ite	pl
 80210b8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80210bc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80210c0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80210c4:	fa5f f38c 	uxtb.w	r3, ip
 80210c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80210ca:	b289      	uxth	r1, r1
 80210cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80210ce:	b280      	uxth	r0, r0
 80210d0:	fb01 f300 	mul.w	r3, r1, r0
 80210d4:	0109      	lsls	r1, r1, #4
 80210d6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80210da:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80210de:	1ac9      	subs	r1, r1, r3
 80210e0:	b280      	uxth	r0, r0
 80210e2:	b289      	uxth	r1, r1
 80210e4:	ebac 0c00 	sub.w	ip, ip, r0
 80210e8:	4361      	muls	r1, r4
 80210ea:	fa1f fc8c 	uxth.w	ip, ip
 80210ee:	fb02 120c 	mla	r2, r2, ip, r1
 80210f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80210f4:	fb00 2001 	mla	r0, r0, r1, r2
 80210f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80210fa:	fb03 0302 	mla	r3, r3, r2, r0
 80210fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021102:	2b00      	cmp	r3, #0
 8021104:	d039      	beq.n	802117a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021106:	4a21      	ldr	r2, [pc, #132]	; (802118c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8021108:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 802110c:	6810      	ldr	r0, [r2, #0]
 802110e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021110:	fa5f fc80 	uxtb.w	ip, r0
 8021114:	4353      	muls	r3, r2
 8021116:	1c5a      	adds	r2, r3, #1
 8021118:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802111c:	121b      	asrs	r3, r3, #8
 802111e:	b29a      	uxth	r2, r3
 8021120:	43db      	mvns	r3, r3
 8021122:	fb1c fc02 	smulbb	ip, ip, r2
 8021126:	b2db      	uxtb	r3, r3
 8021128:	fb01 c103 	mla	r1, r1, r3, ip
 802112c:	b289      	uxth	r1, r1
 802112e:	f101 0c01 	add.w	ip, r1, #1
 8021132:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8021136:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 802113a:	fb1c fc03 	smulbb	ip, ip, r3
 802113e:	1209      	asrs	r1, r1, #8
 8021140:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8021144:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8021148:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802114c:	fb01 c102 	mla	r1, r1, r2, ip
 8021150:	b289      	uxth	r1, r1
 8021152:	f101 0c01 	add.w	ip, r1, #1
 8021156:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802115a:	1209      	asrs	r1, r1, #8
 802115c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8021160:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8021164:	fb11 f303 	smulbb	r3, r1, r3
 8021168:	fb00 3002 	mla	r0, r0, r2, r3
 802116c:	b280      	uxth	r0, r0
 802116e:	1c42      	adds	r2, r0, #1
 8021170:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021174:	1200      	asrs	r0, r0, #8
 8021176:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802117a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802117c:	f10e 0e03 	add.w	lr, lr, #3
 8021180:	f108 38ff 	add.w	r8, r8, #4294967295
 8021184:	441d      	add	r5, r3
 8021186:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021188:	441e      	add	r6, r3
 802118a:	e6db      	b.n	8020f44 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802118c:	2400f250 	.word	0x2400f250
 8021190:	2800      	cmp	r0, #0
 8021192:	d09a      	beq.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8021194:	444b      	add	r3, r9
 8021196:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802119a:	07db      	lsls	r3, r3, #31
 802119c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80211a0:	bf54      	ite	pl
 80211a2:	f00c 0c0f 	andpl.w	ip, ip, #15
 80211a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80211aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80211ae:	fa5f f38c 	uxtb.w	r3, ip
 80211b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80211b4:	e789      	b.n	80210ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80211b6:	b017      	add	sp, #92	; 0x5c
 80211b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80211bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211c0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80211c4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80211c8:	2d00      	cmp	r5, #0
 80211ca:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80211ce:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80211d2:	fb04 5e03 	mla	lr, r4, r3, r5
 80211d6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80211da:	f2c0 80b1 	blt.w	8021340 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80211de:	45a9      	cmp	r9, r5
 80211e0:	f340 80ae 	ble.w	8021340 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80211e4:	2c00      	cmp	r4, #0
 80211e6:	f2c0 80ab 	blt.w	8021340 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80211ea:	45a0      	cmp	r8, r4
 80211ec:	f340 80a8 	ble.w	8021340 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80211f0:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80211f4:	f01e 0f01 	tst.w	lr, #1
 80211f8:	5d97      	ldrb	r7, [r2, r6]
 80211fa:	bf0c      	ite	eq
 80211fc:	f007 070f 	andeq.w	r7, r7, #15
 8021200:	113f      	asrne	r7, r7, #4
 8021202:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8021206:	b2ff      	uxtb	r7, r7
 8021208:	f115 0a01 	adds.w	sl, r5, #1
 802120c:	f100 809a 	bmi.w	8021344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021210:	45d1      	cmp	r9, sl
 8021212:	f340 8097 	ble.w	8021344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021216:	2c00      	cmp	r4, #0
 8021218:	f2c0 8094 	blt.w	8021344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802121c:	45a0      	cmp	r8, r4
 802121e:	f340 8091 	ble.w	8021344 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8021222:	2800      	cmp	r0, #0
 8021224:	f000 8090 	beq.w	8021348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8021228:	f10e 0b01 	add.w	fp, lr, #1
 802122c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8021230:	f01b 0f01 	tst.w	fp, #1
 8021234:	5d96      	ldrb	r6, [r2, r6]
 8021236:	bf0c      	ite	eq
 8021238:	f006 060f 	andeq.w	r6, r6, #15
 802123c:	1136      	asrne	r6, r6, #4
 802123e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021242:	b2f6      	uxtb	r6, r6
 8021244:	f1bc 0f00 	cmp.w	ip, #0
 8021248:	f000 8082 	beq.w	8021350 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 802124c:	2d00      	cmp	r5, #0
 802124e:	f104 0401 	add.w	r4, r4, #1
 8021252:	db7b      	blt.n	802134c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021254:	45a9      	cmp	r9, r5
 8021256:	dd79      	ble.n	802134c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021258:	2c00      	cmp	r4, #0
 802125a:	db77      	blt.n	802134c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802125c:	45a0      	cmp	r8, r4
 802125e:	dd75      	ble.n	802134c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8021260:	eb03 0b0e 	add.w	fp, r3, lr
 8021264:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8021268:	f01b 0f01 	tst.w	fp, #1
 802126c:	5d55      	ldrb	r5, [r2, r5]
 802126e:	bf0c      	ite	eq
 8021270:	f005 050f 	andeq.w	r5, r5, #15
 8021274:	112d      	asrne	r5, r5, #4
 8021276:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802127a:	b2ed      	uxtb	r5, r5
 802127c:	f1ba 0f00 	cmp.w	sl, #0
 8021280:	db69      	blt.n	8021356 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021282:	45d1      	cmp	r9, sl
 8021284:	dd67      	ble.n	8021356 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8021286:	2c00      	cmp	r4, #0
 8021288:	db65      	blt.n	8021356 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802128a:	45a0      	cmp	r8, r4
 802128c:	dd63      	ble.n	8021356 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802128e:	2800      	cmp	r0, #0
 8021290:	d063      	beq.n	802135a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8021292:	3301      	adds	r3, #1
 8021294:	449e      	add	lr, r3
 8021296:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802129a:	f01e 0f01 	tst.w	lr, #1
 802129e:	5cd4      	ldrb	r4, [r2, r3]
 80212a0:	bf0c      	ite	eq
 80212a2:	f004 040f 	andeq.w	r4, r4, #15
 80212a6:	1124      	asrne	r4, r4, #4
 80212a8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80212ac:	b2e3      	uxtb	r3, r4
 80212ae:	b282      	uxth	r2, r0
 80212b0:	fa1f fc8c 	uxth.w	ip, ip
 80212b4:	fb02 f40c 	mul.w	r4, r2, ip
 80212b8:	0112      	lsls	r2, r2, #4
 80212ba:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80212be:	fa1f f08c 	uxth.w	r0, ip
 80212c2:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80212c6:	1b12      	subs	r2, r2, r4
 80212c8:	ebac 0c00 	sub.w	ip, ip, r0
 80212cc:	b292      	uxth	r2, r2
 80212ce:	fa1f fc8c 	uxth.w	ip, ip
 80212d2:	4372      	muls	r2, r6
 80212d4:	fb07 220c 	mla	r2, r7, ip, r2
 80212d8:	fb00 2005 	mla	r0, r0, r5, r2
 80212dc:	fb04 0303 	mla	r3, r4, r3, r0
 80212e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80212e4:	b353      	cbz	r3, 802133c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80212e6:	4a1e      	ldr	r2, [pc, #120]	; (8021360 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80212e8:	7808      	ldrb	r0, [r1, #0]
 80212ea:	6814      	ldr	r4, [r2, #0]
 80212ec:	b29a      	uxth	r2, r3
 80212ee:	43db      	mvns	r3, r3
 80212f0:	b2e5      	uxtb	r5, r4
 80212f2:	b2db      	uxtb	r3, r3
 80212f4:	fb15 f502 	smulbb	r5, r5, r2
 80212f8:	fb00 5003 	mla	r0, r0, r3, r5
 80212fc:	b280      	uxth	r0, r0
 80212fe:	1c45      	adds	r5, r0, #1
 8021300:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021304:	784d      	ldrb	r5, [r1, #1]
 8021306:	fb15 f503 	smulbb	r5, r5, r3
 802130a:	1200      	asrs	r0, r0, #8
 802130c:	7008      	strb	r0, [r1, #0]
 802130e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8021312:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8021316:	fb00 5002 	mla	r0, r0, r2, r5
 802131a:	b280      	uxth	r0, r0
 802131c:	1c45      	adds	r5, r0, #1
 802131e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8021322:	1200      	asrs	r0, r0, #8
 8021324:	7048      	strb	r0, [r1, #1]
 8021326:	7888      	ldrb	r0, [r1, #2]
 8021328:	fb10 f303 	smulbb	r3, r0, r3
 802132c:	fb04 3202 	mla	r2, r4, r2, r3
 8021330:	b292      	uxth	r2, r2
 8021332:	1c53      	adds	r3, r2, #1
 8021334:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021338:	1212      	asrs	r2, r2, #8
 802133a:	708a      	strb	r2, [r1, #2]
 802133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021340:	2700      	movs	r7, #0
 8021342:	e761      	b.n	8021208 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8021344:	2600      	movs	r6, #0
 8021346:	e77d      	b.n	8021244 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8021348:	4606      	mov	r6, r0
 802134a:	e77b      	b.n	8021244 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 802134c:	2500      	movs	r5, #0
 802134e:	e795      	b.n	802127c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8021350:	4663      	mov	r3, ip
 8021352:	4665      	mov	r5, ip
 8021354:	e7ab      	b.n	80212ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8021356:	2300      	movs	r3, #0
 8021358:	e7a9      	b.n	80212ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802135a:	4603      	mov	r3, r0
 802135c:	e7a7      	b.n	80212ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802135e:	bf00      	nop
 8021360:	2400f250 	.word	0x2400f250

08021364 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021368:	b093      	sub	sp, #76	; 0x4c
 802136a:	461c      	mov	r4, r3
 802136c:	920c      	str	r2, [sp, #48]	; 0x30
 802136e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021370:	9011      	str	r0, [sp, #68]	; 0x44
 8021372:	9107      	str	r1, [sp, #28]
 8021374:	6850      	ldr	r0, [r2, #4]
 8021376:	6812      	ldr	r2, [r2, #0]
 8021378:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802137c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8021380:	fb00 1303 	mla	r3, r0, r3, r1
 8021384:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021388:	eb02 0b03 	add.w	fp, r2, r3
 802138c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802138e:	689b      	ldr	r3, [r3, #8]
 8021390:	3301      	adds	r3, #1
 8021392:	f023 0301 	bic.w	r3, r3, #1
 8021396:	9309      	str	r3, [sp, #36]	; 0x24
 8021398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802139a:	f8d3 8000 	ldr.w	r8, [r3]
 802139e:	9b07      	ldr	r3, [sp, #28]
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	dc03      	bgt.n	80213ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80213a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	f340 822b 	ble.w	8021802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80213ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80213b6:	1e48      	subs	r0, r1, #1
 80213b8:	1e57      	subs	r7, r2, #1
 80213ba:	2c00      	cmp	r4, #0
 80213bc:	f340 80d7 	ble.w	802156e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80213c0:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80213c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80213c8:	d406      	bmi.n	80213d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80213ca:	4584      	cmp	ip, r0
 80213cc:	da04      	bge.n	80213d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	db02      	blt.n	80213d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80213d2:	42bb      	cmp	r3, r7
 80213d4:	f2c0 80cc 	blt.w	8021570 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80213d8:	f11c 0c01 	adds.w	ip, ip, #1
 80213dc:	f100 80bf 	bmi.w	802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80213e0:	4561      	cmp	r1, ip
 80213e2:	f2c0 80bc 	blt.w	802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80213e6:	3301      	adds	r3, #1
 80213e8:	f100 80b9 	bmi.w	802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80213ec:	429a      	cmp	r2, r3
 80213ee:	f2c0 80b6 	blt.w	802155e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80213f2:	46a2      	mov	sl, r4
 80213f4:	465f      	mov	r7, fp
 80213f6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80213fa:	f1ba 0f00 	cmp.w	sl, #0
 80213fe:	f340 80d4 	ble.w	80215aa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8021402:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8021406:	1430      	asrs	r0, r6, #16
 8021408:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802140c:	9308      	str	r3, [sp, #32]
 802140e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021410:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021414:	142b      	asrs	r3, r5, #16
 8021416:	f100 8124 	bmi.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802141a:	f10c 32ff 	add.w	r2, ip, #4294967295
 802141e:	4293      	cmp	r3, r2
 8021420:	f280 811f 	bge.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021424:	2800      	cmp	r0, #0
 8021426:	f2c0 811c 	blt.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802142a:	f10e 32ff 	add.w	r2, lr, #4294967295
 802142e:	4290      	cmp	r0, r2
 8021430:	f280 8117 	bge.w	8021662 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8021434:	fb00 3309 	mla	r3, r0, r9, r3
 8021438:	0858      	lsrs	r0, r3, #1
 802143a:	07da      	lsls	r2, r3, #31
 802143c:	9a08      	ldr	r2, [sp, #32]
 802143e:	f818 c000 	ldrb.w	ip, [r8, r0]
 8021442:	bf54      	ite	pl
 8021444:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021448:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802144c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021450:	fa5f fc8c 	uxtb.w	ip, ip
 8021454:	2a00      	cmp	r2, #0
 8021456:	f000 80ed 	beq.w	8021634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 802145a:	1c58      	adds	r0, r3, #1
 802145c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021460:	07c0      	lsls	r0, r0, #31
 8021462:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8021466:	bf54      	ite	pl
 8021468:	f00e 0e0f 	andpl.w	lr, lr, #15
 802146c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8021470:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8021474:	fa5f fe8e 	uxtb.w	lr, lr
 8021478:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802147c:	b1c9      	cbz	r1, 80214b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802147e:	444b      	add	r3, r9
 8021480:	0858      	lsrs	r0, r3, #1
 8021482:	07da      	lsls	r2, r3, #31
 8021484:	f818 0000 	ldrb.w	r0, [r8, r0]
 8021488:	bf54      	ite	pl
 802148a:	f000 000f 	andpl.w	r0, r0, #15
 802148e:	1100      	asrmi	r0, r0, #4
 8021490:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8021494:	b2c0      	uxtb	r0, r0
 8021496:	900a      	str	r0, [sp, #40]	; 0x28
 8021498:	1c58      	adds	r0, r3, #1
 802149a:	0843      	lsrs	r3, r0, #1
 802149c:	07c2      	lsls	r2, r0, #31
 802149e:	f818 3003 	ldrb.w	r3, [r8, r3]
 80214a2:	bf54      	ite	pl
 80214a4:	f003 030f 	andpl.w	r3, r3, #15
 80214a8:	111b      	asrmi	r3, r3, #4
 80214aa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214ae:	b2db      	uxtb	r3, r3
 80214b0:	930e      	str	r3, [sp, #56]	; 0x38
 80214b2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80214b6:	b289      	uxth	r1, r1
 80214b8:	fb02 f301 	mul.w	r3, r2, r1
 80214bc:	0112      	lsls	r2, r2, #4
 80214be:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80214c2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80214c6:	1ad2      	subs	r2, r2, r3
 80214c8:	b289      	uxth	r1, r1
 80214ca:	b292      	uxth	r2, r2
 80214cc:	1a40      	subs	r0, r0, r1
 80214ce:	fa1f fe80 	uxth.w	lr, r0
 80214d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80214d4:	4342      	muls	r2, r0
 80214d6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80214da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80214dc:	fb01 c102 	mla	r1, r1, r2, ip
 80214e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80214e2:	fb03 1302 	mla	r3, r3, r2, r1
 80214e6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80214ea:	b383      	cbz	r3, 802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80214ec:	4ac6      	ldr	r2, [pc, #792]	; (8021808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 80214ee:	2bff      	cmp	r3, #255	; 0xff
 80214f0:	6812      	ldr	r2, [r2, #0]
 80214f2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80214f6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80214fa:	b2d2      	uxtb	r2, r2
 80214fc:	f000 80ac 	beq.w	8021658 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021500:	b299      	uxth	r1, r3
 8021502:	43db      	mvns	r3, r3
 8021504:	f897 c000 	ldrb.w	ip, [r7]
 8021508:	fb12 f201 	smulbb	r2, r2, r1
 802150c:	b2db      	uxtb	r3, r3
 802150e:	fb10 f001 	smulbb	r0, r0, r1
 8021512:	fb0c 2203 	mla	r2, ip, r3, r2
 8021516:	fb1e f101 	smulbb	r1, lr, r1
 802151a:	b292      	uxth	r2, r2
 802151c:	f102 0c01 	add.w	ip, r2, #1
 8021520:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8021524:	1212      	asrs	r2, r2, #8
 8021526:	703a      	strb	r2, [r7, #0]
 8021528:	787a      	ldrb	r2, [r7, #1]
 802152a:	fb02 0003 	mla	r0, r2, r3, r0
 802152e:	b280      	uxth	r0, r0
 8021530:	1c42      	adds	r2, r0, #1
 8021532:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021536:	78ba      	ldrb	r2, [r7, #2]
 8021538:	fb02 1303 	mla	r3, r2, r3, r1
 802153c:	1200      	asrs	r0, r0, #8
 802153e:	b29b      	uxth	r3, r3
 8021540:	7078      	strb	r0, [r7, #1]
 8021542:	f103 0e01 	add.w	lr, r3, #1
 8021546:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 802154a:	121b      	asrs	r3, r3, #8
 802154c:	70bb      	strb	r3, [r7, #2]
 802154e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021550:	3703      	adds	r7, #3
 8021552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021556:	441d      	add	r5, r3
 8021558:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802155a:	441e      	add	r6, r3
 802155c:	e74d      	b.n	80213fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802155e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021560:	3c01      	subs	r4, #1
 8021562:	f10b 0b03 	add.w	fp, fp, #3
 8021566:	441d      	add	r5, r3
 8021568:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802156a:	441e      	add	r6, r3
 802156c:	e725      	b.n	80213ba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802156e:	d021      	beq.n	80215b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8021570:	1e63      	subs	r3, r4, #1
 8021572:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021574:	fb00 5003 	mla	r0, r0, r3, r5
 8021578:	1400      	asrs	r0, r0, #16
 802157a:	f53f af3a 	bmi.w	80213f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802157e:	3901      	subs	r1, #1
 8021580:	4288      	cmp	r0, r1
 8021582:	f6bf af36 	bge.w	80213f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021586:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021588:	fb01 6303 	mla	r3, r1, r3, r6
 802158c:	141b      	asrs	r3, r3, #16
 802158e:	f53f af30 	bmi.w	80213f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021592:	3a01      	subs	r2, #1
 8021594:	4293      	cmp	r3, r2
 8021596:	f6bf af2c 	bge.w	80213f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802159a:	f10b 0c03 	add.w	ip, fp, #3
 802159e:	46a6      	mov	lr, r4
 80215a0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80215a4:	f1be 0f00 	cmp.w	lr, #0
 80215a8:	dc79      	bgt.n	802169e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80215aa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80215ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80215b2:	44a3      	add	fp, r4
 80215b4:	9b07      	ldr	r3, [sp, #28]
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	f340 8123 	ble.w	8021802 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80215bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215ca:	eef0 6a62 	vmov.f32	s13, s5
 80215ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215da:	ee16 5a90 	vmov	r5, s13
 80215de:	eef0 6a43 	vmov.f32	s13, s6
 80215e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215e6:	ee16 6a90 	vmov	r6, s13
 80215ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021602:	ee12 2a90 	vmov	r2, s5
 8021606:	eef0 2a47 	vmov.f32	s5, s14
 802160a:	fb92 f3f3 	sdiv	r3, r2, r3
 802160e:	ee13 2a10 	vmov	r2, s6
 8021612:	931f      	str	r3, [sp, #124]	; 0x7c
 8021614:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021616:	eeb0 3a67 	vmov.f32	s6, s15
 802161a:	fb92 f3f3 	sdiv	r3, r2, r3
 802161e:	9320      	str	r3, [sp, #128]	; 0x80
 8021620:	9b07      	ldr	r3, [sp, #28]
 8021622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021624:	3b01      	subs	r3, #1
 8021626:	9307      	str	r3, [sp, #28]
 8021628:	bf08      	it	eq
 802162a:	4614      	moveq	r4, r2
 802162c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802162e:	bf18      	it	ne
 8021630:	461c      	movne	r4, r3
 8021632:	e6b4      	b.n	802139e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021634:	2900      	cmp	r1, #0
 8021636:	f43f af3c 	beq.w	80214b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802163a:	eb09 0003 	add.w	r0, r9, r3
 802163e:	0843      	lsrs	r3, r0, #1
 8021640:	07c0      	lsls	r0, r0, #31
 8021642:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021646:	bf54      	ite	pl
 8021648:	f003 030f 	andpl.w	r3, r3, #15
 802164c:	111b      	asrmi	r3, r3, #4
 802164e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8021652:	b2db      	uxtb	r3, r3
 8021654:	930a      	str	r3, [sp, #40]	; 0x28
 8021656:	e72c      	b.n	80214b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021658:	703a      	strb	r2, [r7, #0]
 802165a:	7078      	strb	r0, [r7, #1]
 802165c:	f887 e002 	strb.w	lr, [r7, #2]
 8021660:	e775      	b.n	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021662:	1c5a      	adds	r2, r3, #1
 8021664:	f53f af73 	bmi.w	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021668:	4594      	cmp	ip, r2
 802166a:	f6ff af70 	blt.w	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802166e:	1c42      	adds	r2, r0, #1
 8021670:	f53f af6d 	bmi.w	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021674:	4596      	cmp	lr, r2
 8021676:	f6ff af6a 	blt.w	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802167a:	9302      	str	r3, [sp, #8]
 802167c:	fa0f f38e 	sxth.w	r3, lr
 8021680:	9a08      	ldr	r2, [sp, #32]
 8021682:	9301      	str	r3, [sp, #4]
 8021684:	fa0f f38c 	sxth.w	r3, ip
 8021688:	9105      	str	r1, [sp, #20]
 802168a:	4639      	mov	r1, r7
 802168c:	9300      	str	r3, [sp, #0]
 802168e:	464b      	mov	r3, r9
 8021690:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021694:	4642      	mov	r2, r8
 8021696:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021698:	f7ff fd90 	bl	80211bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 802169c:	e757      	b.n	802154e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802169e:	142a      	asrs	r2, r5, #16
 80216a0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80216a4:	1433      	asrs	r3, r6, #16
 80216a6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80216aa:	fb09 2303 	mla	r3, r9, r3, r2
 80216ae:	085a      	lsrs	r2, r3, #1
 80216b0:	07d9      	lsls	r1, r3, #31
 80216b2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80216b6:	bf54      	ite	pl
 80216b8:	f002 020f 	andpl.w	r2, r2, #15
 80216bc:	1112      	asrmi	r2, r2, #4
 80216be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80216c2:	b2d2      	uxtb	r2, r2
 80216c4:	2800      	cmp	r0, #0
 80216c6:	f000 8085 	beq.w	80217d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80216ca:	f103 0a01 	add.w	sl, r3, #1
 80216ce:	ea4f 015a 	mov.w	r1, sl, lsr #1
 80216d2:	f01a 0f01 	tst.w	sl, #1
 80216d6:	f818 1001 	ldrb.w	r1, [r8, r1]
 80216da:	bf0c      	ite	eq
 80216dc:	f001 010f 	andeq.w	r1, r1, #15
 80216e0:	1109      	asrne	r1, r1, #4
 80216e2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80216e6:	b2c9      	uxtb	r1, r1
 80216e8:	910f      	str	r1, [sp, #60]	; 0x3c
 80216ea:	b1df      	cbz	r7, 8021724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80216ec:	444b      	add	r3, r9
 80216ee:	0859      	lsrs	r1, r3, #1
 80216f0:	f013 0f01 	tst.w	r3, #1
 80216f4:	f103 0301 	add.w	r3, r3, #1
 80216f8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80216fc:	bf0c      	ite	eq
 80216fe:	f001 010f 	andeq.w	r1, r1, #15
 8021702:	1109      	asrne	r1, r1, #4
 8021704:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021708:	b2c9      	uxtb	r1, r1
 802170a:	910b      	str	r1, [sp, #44]	; 0x2c
 802170c:	0859      	lsrs	r1, r3, #1
 802170e:	07db      	lsls	r3, r3, #31
 8021710:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021714:	bf54      	ite	pl
 8021716:	f001 010f 	andpl.w	r1, r1, #15
 802171a:	1109      	asrmi	r1, r1, #4
 802171c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021720:	b2c9      	uxtb	r1, r1
 8021722:	9110      	str	r1, [sp, #64]	; 0x40
 8021724:	b280      	uxth	r0, r0
 8021726:	b2bf      	uxth	r7, r7
 8021728:	fb00 f307 	mul.w	r3, r0, r7
 802172c:	0100      	lsls	r0, r0, #4
 802172e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8021732:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8021736:	1ac0      	subs	r0, r0, r3
 8021738:	b2bf      	uxth	r7, r7
 802173a:	b280      	uxth	r0, r0
 802173c:	1bc9      	subs	r1, r1, r7
 802173e:	fa1f fa81 	uxth.w	sl, r1
 8021742:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021744:	4348      	muls	r0, r1
 8021746:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021748:	fb02 020a 	mla	r2, r2, sl, r0
 802174c:	fb07 2701 	mla	r7, r7, r1, r2
 8021750:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021752:	fb03 7302 	mla	r3, r3, r2, r7
 8021756:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802175a:	b393      	cbz	r3, 80217c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802175c:	4a2a      	ldr	r2, [pc, #168]	; (8021808 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802175e:	2bff      	cmp	r3, #255	; 0xff
 8021760:	6811      	ldr	r1, [r2, #0]
 8021762:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021766:	f3c1 2707 	ubfx	r7, r1, #8, #8
 802176a:	b2c9      	uxtb	r1, r1
 802176c:	d042      	beq.n	80217f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802176e:	b298      	uxth	r0, r3
 8021770:	43db      	mvns	r3, r3
 8021772:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8021776:	fb11 f100 	smulbb	r1, r1, r0
 802177a:	b2db      	uxtb	r3, r3
 802177c:	fb17 f700 	smulbb	r7, r7, r0
 8021780:	fb02 1103 	mla	r1, r2, r3, r1
 8021784:	fb1a f000 	smulbb	r0, sl, r0
 8021788:	b289      	uxth	r1, r1
 802178a:	1c4a      	adds	r2, r1, #1
 802178c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8021790:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8021794:	fb02 7703 	mla	r7, r2, r3, r7
 8021798:	1209      	asrs	r1, r1, #8
 802179a:	b2bf      	uxth	r7, r7
 802179c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80217a0:	1c7a      	adds	r2, r7, #1
 80217a2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80217a6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 80217aa:	fb02 0303 	mla	r3, r2, r3, r0
 80217ae:	123f      	asrs	r7, r7, #8
 80217b0:	b29b      	uxth	r3, r3
 80217b2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80217b6:	1c5a      	adds	r2, r3, #1
 80217b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80217bc:	121b      	asrs	r3, r3, #8
 80217be:	f80c 3c01 	strb.w	r3, [ip, #-1]
 80217c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80217c4:	f10c 0c03 	add.w	ip, ip, #3
 80217c8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80217cc:	441d      	add	r5, r3
 80217ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217d0:	441e      	add	r6, r3
 80217d2:	e6e7      	b.n	80215a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80217d4:	2f00      	cmp	r7, #0
 80217d6:	d0a5      	beq.n	8021724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80217d8:	444b      	add	r3, r9
 80217da:	0859      	lsrs	r1, r3, #1
 80217dc:	07db      	lsls	r3, r3, #31
 80217de:	f818 1001 	ldrb.w	r1, [r8, r1]
 80217e2:	bf54      	ite	pl
 80217e4:	f001 010f 	andpl.w	r1, r1, #15
 80217e8:	1109      	asrmi	r1, r1, #4
 80217ea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80217ee:	b2c9      	uxtb	r1, r1
 80217f0:	910b      	str	r1, [sp, #44]	; 0x2c
 80217f2:	e797      	b.n	8021724 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80217f4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80217f8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80217fc:	f80c ac01 	strb.w	sl, [ip, #-1]
 8021800:	e7df      	b.n	80217c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021802:	b013      	add	sp, #76	; 0x4c
 8021804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021808:	2400f250 	.word	0x2400f250

0802180c <CRC_Lock>:
 802180c:	4a20      	ldr	r2, [pc, #128]	; (8021890 <CRC_Lock+0x84>)
 802180e:	b530      	push	{r4, r5, lr}
 8021810:	6813      	ldr	r3, [r2, #0]
 8021812:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8021816:	f24c 2540 	movw	r5, #49728	; 0xc240
 802181a:	f023 0301 	bic.w	r3, r3, #1
 802181e:	6013      	str	r3, [r2, #0]
 8021820:	4b1c      	ldr	r3, [pc, #112]	; (8021894 <CRC_Lock+0x88>)
 8021822:	681a      	ldr	r2, [r3, #0]
 8021824:	4022      	ands	r2, r4
 8021826:	42aa      	cmp	r2, r5
 8021828:	d005      	beq.n	8021836 <CRC_Lock+0x2a>
 802182a:	681b      	ldr	r3, [r3, #0]
 802182c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8021830:	4023      	ands	r3, r4
 8021832:	4293      	cmp	r3, r2
 8021834:	d124      	bne.n	8021880 <CRC_Lock+0x74>
 8021836:	4b18      	ldr	r3, [pc, #96]	; (8021898 <CRC_Lock+0x8c>)
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	bb0b      	cbnz	r3, 8021880 <CRC_Lock+0x74>
 802183c:	4b17      	ldr	r3, [pc, #92]	; (802189c <CRC_Lock+0x90>)
 802183e:	681a      	ldr	r2, [r3, #0]
 8021840:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021844:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8021848:	d00d      	beq.n	8021866 <CRC_Lock+0x5a>
 802184a:	681a      	ldr	r2, [r3, #0]
 802184c:	f240 4483 	movw	r4, #1155	; 0x483
 8021850:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021854:	42a2      	cmp	r2, r4
 8021856:	d006      	beq.n	8021866 <CRC_Lock+0x5a>
 8021858:	681b      	ldr	r3, [r3, #0]
 802185a:	f240 4285 	movw	r2, #1157	; 0x485
 802185e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021862:	4293      	cmp	r3, r2
 8021864:	d10c      	bne.n	8021880 <CRC_Lock+0x74>
 8021866:	4b0e      	ldr	r3, [pc, #56]	; (80218a0 <CRC_Lock+0x94>)
 8021868:	2201      	movs	r2, #1
 802186a:	601a      	str	r2, [r3, #0]
 802186c:	681a      	ldr	r2, [r3, #0]
 802186e:	2a00      	cmp	r2, #0
 8021870:	d1fc      	bne.n	802186c <CRC_Lock+0x60>
 8021872:	4b0c      	ldr	r3, [pc, #48]	; (80218a4 <CRC_Lock+0x98>)
 8021874:	6018      	str	r0, [r3, #0]
 8021876:	6818      	ldr	r0, [r3, #0]
 8021878:	1a43      	subs	r3, r0, r1
 802187a:	4258      	negs	r0, r3
 802187c:	4158      	adcs	r0, r3
 802187e:	bd30      	pop	{r4, r5, pc}
 8021880:	4b09      	ldr	r3, [pc, #36]	; (80218a8 <CRC_Lock+0x9c>)
 8021882:	2201      	movs	r2, #1
 8021884:	601a      	str	r2, [r3, #0]
 8021886:	681a      	ldr	r2, [r3, #0]
 8021888:	2a00      	cmp	r2, #0
 802188a:	d1fc      	bne.n	8021886 <CRC_Lock+0x7a>
 802188c:	4b07      	ldr	r3, [pc, #28]	; (80218ac <CRC_Lock+0xa0>)
 802188e:	e7f1      	b.n	8021874 <CRC_Lock+0x68>
 8021890:	e0002000 	.word	0xe0002000
 8021894:	e000ed00 	.word	0xe000ed00
 8021898:	e0042000 	.word	0xe0042000
 802189c:	5c001000 	.word	0x5c001000
 80218a0:	58024c08 	.word	0x58024c08
 80218a4:	58024c00 	.word	0x58024c00
 80218a8:	40023008 	.word	0x40023008
 80218ac:	40023000 	.word	0x40023000

080218b0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80218b0:	6101      	str	r1, [r0, #16]
 80218b2:	4770      	bx	lr

080218b4 <_ZN8touchgfx8Gestures4tickEv>:
 80218b4:	7b83      	ldrb	r3, [r0, #14]
 80218b6:	b14b      	cbz	r3, 80218cc <_ZN8touchgfx8Gestures4tickEv+0x18>
 80218b8:	8903      	ldrh	r3, [r0, #8]
 80218ba:	3301      	adds	r3, #1
 80218bc:	b29b      	uxth	r3, r3
 80218be:	2b07      	cmp	r3, #7
 80218c0:	8103      	strh	r3, [r0, #8]
 80218c2:	bf81      	itttt	hi
 80218c4:	2300      	movhi	r3, #0
 80218c6:	8143      	strhhi	r3, [r0, #10]
 80218c8:	8183      	strhhi	r3, [r0, #12]
 80218ca:	7383      	strbhi	r3, [r0, #14]
 80218cc:	4770      	bx	lr
	...

080218d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80218d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80218d4:	4698      	mov	r8, r3
 80218d6:	8883      	ldrh	r3, [r0, #4]
 80218d8:	4604      	mov	r4, r0
 80218da:	4617      	mov	r7, r2
 80218dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80218e0:	eba8 0303 	sub.w	r3, r8, r3
 80218e4:	4a19      	ldr	r2, [pc, #100]	; (802194c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80218e6:	460e      	mov	r6, r1
 80218e8:	b21b      	sxth	r3, r3
 80218ea:	88c1      	ldrh	r1, [r0, #6]
 80218ec:	9200      	str	r2, [sp, #0]
 80218ee:	2000      	movs	r0, #0
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	8aa2      	ldrh	r2, [r4, #20]
 80218f4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80218f8:	bfb8      	it	lt
 80218fa:	425b      	neglt	r3, r3
 80218fc:	f88d 0004 	strb.w	r0, [sp, #4]
 8021900:	f8ad 1008 	strh.w	r1, [sp, #8]
 8021904:	b21b      	sxth	r3, r3
 8021906:	f8ad 800a 	strh.w	r8, [sp, #10]
 802190a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802190e:	4293      	cmp	r3, r2
 8021910:	dc07      	bgt.n	8021922 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8021912:	1a69      	subs	r1, r5, r1
 8021914:	b209      	sxth	r1, r1
 8021916:	2900      	cmp	r1, #0
 8021918:	bfb8      	it	lt
 802191a:	4249      	neglt	r1, r1
 802191c:	b209      	sxth	r1, r1
 802191e:	428a      	cmp	r2, r1
 8021920:	da10      	bge.n	8021944 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8021922:	6920      	ldr	r0, [r4, #16]
 8021924:	4669      	mov	r1, sp
 8021926:	eba8 0606 	sub.w	r6, r8, r6
 802192a:	1bef      	subs	r7, r5, r7
 802192c:	6803      	ldr	r3, [r0, #0]
 802192e:	685b      	ldr	r3, [r3, #4]
 8021930:	4798      	blx	r3
 8021932:	2300      	movs	r3, #0
 8021934:	2001      	movs	r0, #1
 8021936:	8166      	strh	r6, [r4, #10]
 8021938:	8123      	strh	r3, [r4, #8]
 802193a:	81a7      	strh	r7, [r4, #12]
 802193c:	f8a4 8004 	strh.w	r8, [r4, #4]
 8021940:	80e5      	strh	r5, [r4, #6]
 8021942:	73a0      	strb	r0, [r4, #14]
 8021944:	b004      	add	sp, #16
 8021946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802194a:	bf00      	nop
 802194c:	080257b0 	.word	0x080257b0

08021950 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8021950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021952:	461e      	mov	r6, r3
 8021954:	1e4b      	subs	r3, r1, #1
 8021956:	b085      	sub	sp, #20
 8021958:	4604      	mov	r4, r0
 802195a:	2b01      	cmp	r3, #1
 802195c:	460d      	mov	r5, r1
 802195e:	4617      	mov	r7, r2
 8021960:	d84b      	bhi.n	80219fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021962:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021966:	1cd3      	adds	r3, r2, #3
 8021968:	b29b      	uxth	r3, r3
 802196a:	2b06      	cmp	r3, #6
 802196c:	d916      	bls.n	802199c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802196e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8021a10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021972:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021976:	f8cd c004 	str.w	ip, [sp, #4]
 802197a:	f04f 0c00 	mov.w	ip, #0
 802197e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021982:	6900      	ldr	r0, [r0, #16]
 8021984:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021988:	a901      	add	r1, sp, #4
 802198a:	f88d c008 	strb.w	ip, [sp, #8]
 802198e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021992:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021996:	6803      	ldr	r3, [r0, #0]
 8021998:	689b      	ldr	r3, [r3, #8]
 802199a:	4798      	blx	r3
 802199c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80219a0:	1cd3      	adds	r3, r2, #3
 80219a2:	b29b      	uxth	r3, r3
 80219a4:	2b06      	cmp	r3, #6
 80219a6:	d916      	bls.n	80219d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80219a8:	f8df c064 	ldr.w	ip, [pc, #100]	; 8021a10 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80219ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80219b0:	f8cd c004 	str.w	ip, [sp, #4]
 80219b4:	f04f 0c01 	mov.w	ip, #1
 80219b8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80219bc:	6920      	ldr	r0, [r4, #16]
 80219be:	f8ad 100c 	strh.w	r1, [sp, #12]
 80219c2:	a901      	add	r1, sp, #4
 80219c4:	f88d c008 	strb.w	ip, [sp, #8]
 80219c8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80219cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80219d0:	6803      	ldr	r3, [r0, #0]
 80219d2:	689b      	ldr	r3, [r3, #8]
 80219d4:	4798      	blx	r3
 80219d6:	4b0d      	ldr	r3, [pc, #52]	; (8021a0c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80219d8:	a901      	add	r1, sp, #4
 80219da:	6920      	ldr	r0, [r4, #16]
 80219dc:	9301      	str	r3, [sp, #4]
 80219de:	2300      	movs	r3, #0
 80219e0:	f88d 5008 	strb.w	r5, [sp, #8]
 80219e4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80219e8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80219ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 80219f0:	6803      	ldr	r3, [r0, #0]
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	4798      	blx	r3
 80219f6:	b005      	add	sp, #20
 80219f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80219fa:	2900      	cmp	r1, #0
 80219fc:	d1eb      	bne.n	80219d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80219fe:	80a2      	strh	r2, [r4, #4]
 8021a00:	80c6      	strh	r6, [r0, #6]
 8021a02:	60a1      	str	r1, [r4, #8]
 8021a04:	81a1      	strh	r1, [r4, #12]
 8021a06:	73a1      	strb	r1, [r4, #14]
 8021a08:	e7e5      	b.n	80219d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021a0a:	bf00      	nop
 8021a0c:	0802579c 	.word	0x0802579c
 8021a10:	080257c4 	.word	0x080257c4

08021a14 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8021a14:	10c9      	asrs	r1, r1, #3
 8021a16:	2900      	cmp	r1, #0
 8021a18:	bfb8      	it	lt
 8021a1a:	4249      	neglt	r1, r1
 8021a1c:	2801      	cmp	r0, #1
 8021a1e:	d108      	bne.n	8021a32 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8021a20:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8021a24:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8021a28:	4601      	mov	r1, r0
 8021a2a:	dd02      	ble.n	8021a32 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8021a2c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 8021a30:	4770      	bx	lr
 8021a32:	29ff      	cmp	r1, #255	; 0xff
 8021a34:	bfa8      	it	ge
 8021a36:	21ff      	movge	r1, #255	; 0xff
 8021a38:	4608      	mov	r0, r1
 8021a3a:	4770      	bx	lr

08021a3c <_ZN8touchgfx10Rasterizer6lineToEii>:
 8021a3c:	b410      	push	{r4}
 8021a3e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8021a42:	429c      	cmp	r4, r3
 8021a44:	d803      	bhi.n	8021a4e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021a4a:	f7f2 bf3b 	b.w	80148c4 <_ZN8touchgfx7Outline6lineToEii>
 8021a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021a52:	4770      	bx	lr

08021a54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a58:	b08b      	sub	sp, #44	; 0x2c
 8021a5a:	4606      	mov	r6, r0
 8021a5c:	468a      	mov	sl, r1
 8021a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8021a62:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8021a66:	9308      	str	r3, [sp, #32]
 8021a68:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8021a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8021a6e:	f7f3 f894 	bl	8014b9a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8021a72:	68b5      	ldr	r5, [r6, #8]
 8021a74:	4604      	mov	r4, r0
 8021a76:	2d00      	cmp	r5, #0
 8021a78:	d044      	beq.n	8021b04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021a7a:	6873      	ldr	r3, [r6, #4]
 8021a7c:	42ab      	cmp	r3, r5
 8021a7e:	d33d      	bcc.n	8021afc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8021a80:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021a84:	f04f 0800 	mov.w	r8, #0
 8021a88:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8021a8c:	eb02 0b03 	add.w	fp, r2, r3
 8021a90:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021a94:	fb02 1203 	mla	r2, r2, r3, r1
 8021a98:	9205      	str	r2, [sp, #20]
 8021a9a:	1e6a      	subs	r2, r5, #1
 8021a9c:	9204      	str	r2, [sp, #16]
 8021a9e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8021aa2:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021aa6:	454b      	cmp	r3, r9
 8021aa8:	463a      	mov	r2, r7
 8021aaa:	d008      	beq.n	8021abe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8021aac:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8021ab0:	eb03 0b09 	add.w	fp, r3, r9
 8021ab4:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021ab8:	fb03 1309 	mla	r3, r3, r9, r1
 8021abc:	9305      	str	r3, [sp, #20]
 8021abe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8021ac2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021ac6:	4498      	add	r8, r3
 8021ac8:	9b04      	ldr	r3, [sp, #16]
 8021aca:	3b01      	subs	r3, #1
 8021acc:	9304      	str	r3, [sp, #16]
 8021ace:	9b04      	ldr	r3, [sp, #16]
 8021ad0:	3301      	adds	r3, #1
 8021ad2:	d015      	beq.n	8021b00 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021ad4:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021ad8:	42bb      	cmp	r3, r7
 8021ada:	d117      	bne.n	8021b0c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021adc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8021ae0:	9b04      	ldr	r3, [sp, #16]
 8021ae2:	4548      	cmp	r0, r9
 8021ae4:	f103 33ff 	add.w	r3, r3, #4294967295
 8021ae8:	d17d      	bne.n	8021be6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8021aea:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8021aee:	4401      	add	r1, r0
 8021af0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021af4:	4480      	add	r8, r0
 8021af6:	e7e9      	b.n	8021acc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8021af8:	461f      	mov	r7, r3
 8021afa:	e042      	b.n	8021b82 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8021afc:	2000      	movs	r0, #0
 8021afe:	e002      	b.n	8021b06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8021b00:	2900      	cmp	r1, #0
 8021b02:	d16d      	bne.n	8021be0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8021b04:	2001      	movs	r0, #1
 8021b06:	b00b      	add	sp, #44	; 0x2c
 8021b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b0c:	b379      	cbz	r1, 8021b6e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8021b0e:	2f00      	cmp	r7, #0
 8021b10:	db29      	blt.n	8021b66 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021b12:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8021b16:	42bb      	cmp	r3, r7
 8021b18:	dd25      	ble.n	8021b66 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021b1a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8021b1e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8021b22:	f7ff ff77 	bl	8021a14 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8021b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b28:	fb10 f003 	smulbb	r0, r0, r3
 8021b2c:	b280      	uxth	r0, r0
 8021b2e:	1c41      	adds	r1, r0, #1
 8021b30:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021b34:	1209      	asrs	r1, r1, #8
 8021b36:	f011 0fff 	tst.w	r1, #255	; 0xff
 8021b3a:	d014      	beq.n	8021b66 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8021b3c:	b2c9      	uxtb	r1, r1
 8021b3e:	9808      	ldr	r0, [sp, #32]
 8021b40:	b2ba      	uxth	r2, r7
 8021b42:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8021b44:	9102      	str	r1, [sp, #8]
 8021b46:	2101      	movs	r1, #1
 8021b48:	4413      	add	r3, r2
 8021b4a:	4402      	add	r2, r0
 8021b4c:	9101      	str	r1, [sp, #4]
 8021b4e:	fa0f f18b 	sxth.w	r1, fp
 8021b52:	f8da 0000 	ldr.w	r0, [sl]
 8021b56:	b21b      	sxth	r3, r3
 8021b58:	9100      	str	r1, [sp, #0]
 8021b5a:	b212      	sxth	r2, r2
 8021b5c:	6941      	ldr	r1, [r0, #20]
 8021b5e:	4650      	mov	r0, sl
 8021b60:	460d      	mov	r5, r1
 8021b62:	9905      	ldr	r1, [sp, #20]
 8021b64:	47a8      	blx	r5
 8021b66:	9b04      	ldr	r3, [sp, #16]
 8021b68:	1c7a      	adds	r2, r7, #1
 8021b6a:	3301      	adds	r3, #1
 8021b6c:	d0ca      	beq.n	8021b04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021b6e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021b72:	1abb      	subs	r3, r7, r2
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	dd31      	ble.n	8021bdc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021b78:	2a00      	cmp	r2, #0
 8021b7a:	dabd      	bge.n	8021af8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021b7c:	2f00      	cmp	r7, #0
 8021b7e:	dd2d      	ble.n	8021bdc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021b80:	2200      	movs	r2, #0
 8021b82:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8021b86:	19d1      	adds	r1, r2, r7
 8021b88:	4299      	cmp	r1, r3
 8021b8a:	db02      	blt.n	8021b92 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021b8c:	1a9f      	subs	r7, r3, r2
 8021b8e:	2f00      	cmp	r7, #0
 8021b90:	dd24      	ble.n	8021bdc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021b92:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021b96:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8021b9a:	f7ff ff3b 	bl	8021a14 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8021b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ba0:	fb10 f003 	smulbb	r0, r0, r3
 8021ba4:	b280      	uxth	r0, r0
 8021ba6:	1c41      	adds	r1, r0, #1
 8021ba8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021bac:	1209      	asrs	r1, r1, #8
 8021bae:	f011 0fff 	tst.w	r1, #255	; 0xff
 8021bb2:	d013      	beq.n	8021bdc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021bb4:	b292      	uxth	r2, r2
 8021bb6:	9808      	ldr	r0, [sp, #32]
 8021bb8:	b2c9      	uxtb	r1, r1
 8021bba:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8021bbc:	b23f      	sxth	r7, r7
 8021bbe:	4413      	add	r3, r2
 8021bc0:	9102      	str	r1, [sp, #8]
 8021bc2:	4402      	add	r2, r0
 8021bc4:	fa0f f18b 	sxth.w	r1, fp
 8021bc8:	f8da 0000 	ldr.w	r0, [sl]
 8021bcc:	b21b      	sxth	r3, r3
 8021bce:	9100      	str	r1, [sp, #0]
 8021bd0:	b212      	sxth	r2, r2
 8021bd2:	9701      	str	r7, [sp, #4]
 8021bd4:	9905      	ldr	r1, [sp, #20]
 8021bd6:	6947      	ldr	r7, [r0, #20]
 8021bd8:	4650      	mov	r0, sl
 8021bda:	47b8      	blx	r7
 8021bdc:	464b      	mov	r3, r9
 8021bde:	e75e      	b.n	8021a9e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8021be0:	2f00      	cmp	r7, #0
 8021be2:	da96      	bge.n	8021b12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8021be4:	e78e      	b.n	8021b04 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021be6:	2900      	cmp	r1, #0
 8021be8:	d0f8      	beq.n	8021bdc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021bea:	e790      	b.n	8021b0e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08021bec <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8021bec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8021bf0:	4b4a      	ldr	r3, [pc, #296]	; (8021d1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 8021bf2:	2500      	movs	r5, #0
 8021bf4:	f100 0620 	add.w	r6, r0, #32
 8021bf8:	4604      	mov	r4, r0
 8021bfa:	4690      	mov	r8, r2
 8021bfc:	f100 0718 	add.w	r7, r0, #24
 8021c00:	e9c0 3100 	strd	r3, r1, [r0]
 8021c04:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8021c08:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8021c0c:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8021c10:	4630      	mov	r0, r6
 8021c12:	f7f2 f99d 	bl	8013f50 <_ZN8touchgfx7OutlineC1Ev>
 8021c16:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8021c1a:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8021c1e:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8021c22:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8021c26:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8021c2a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8021c2e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8021c32:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8021c36:	9500      	str	r5, [sp, #0]
 8021c38:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8021c3c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8021c40:	f9b8 2000 	ldrsh.w	r2, [r8]
 8021c44:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8021c48:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8021c4c:	4410      	add	r0, r2
 8021c4e:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8021c52:	b280      	uxth	r0, r0
 8021c54:	fa0f fa80 	sxth.w	sl, r0
 8021c58:	45aa      	cmp	sl, r5
 8021c5a:	dd5c      	ble.n	8021d16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021c5c:	4591      	cmp	r9, r2
 8021c5e:	dd5a      	ble.n	8021d16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021c60:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8021c64:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8021c68:	440b      	add	r3, r1
 8021c6a:	b29b      	uxth	r3, r3
 8021c6c:	b21d      	sxth	r5, r3
 8021c6e:	2d00      	cmp	r5, #0
 8021c70:	dd51      	ble.n	8021d16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021c72:	458e      	cmp	lr, r1
 8021c74:	dd4f      	ble.n	8021d16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021c76:	45d1      	cmp	r9, sl
 8021c78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8021c7c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8021c80:	bfb8      	it	lt
 8021c82:	fa1f f089 	uxthlt.w	r0, r9
 8021c86:	45ae      	cmp	lr, r5
 8021c88:	f8ad 2000 	strh.w	r2, [sp]
 8021c8c:	bfb8      	it	lt
 8021c8e:	fa1f f38e 	uxthlt.w	r3, lr
 8021c92:	1a80      	subs	r0, r0, r2
 8021c94:	f8ad 1002 	strh.w	r1, [sp, #2]
 8021c98:	1a5b      	subs	r3, r3, r1
 8021c9a:	f8ad 0004 	strh.w	r0, [sp, #4]
 8021c9e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021ca2:	466d      	mov	r5, sp
 8021ca4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021ca8:	e887 0003 	stmia.w	r7, {r0, r1}
 8021cac:	f8dc 3000 	ldr.w	r3, [ip]
 8021cb0:	4660      	mov	r0, ip
 8021cb2:	4639      	mov	r1, r7
 8021cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cb6:	4798      	blx	r3
 8021cb8:	6861      	ldr	r1, [r4, #4]
 8021cba:	4628      	mov	r0, r5
 8021cbc:	3104      	adds	r1, #4
 8021cbe:	f7f4 fb17 	bl	80162f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021cc2:	4638      	mov	r0, r7
 8021cc4:	f7f4 faec 	bl	80162a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021cc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021ccc:	f8bd 2000 	ldrh.w	r2, [sp]
 8021cd0:	4630      	mov	r0, r6
 8021cd2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8021cd6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8021cda:	f7f2 f91d 	bl	8013f18 <_ZN8touchgfx7Outline5resetEv>
 8021cde:	f9bd 3000 	ldrsh.w	r3, [sp]
 8021ce2:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8021ce6:	4620      	mov	r0, r4
 8021ce8:	015b      	lsls	r3, r3, #5
 8021cea:	60a3      	str	r3, [r4, #8]
 8021cec:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021cf0:	015b      	lsls	r3, r3, #5
 8021cf2:	60e3      	str	r3, [r4, #12]
 8021cf4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8021cf8:	015b      	lsls	r3, r3, #5
 8021cfa:	6123      	str	r3, [r4, #16]
 8021cfc:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8021d00:	015b      	lsls	r3, r3, #5
 8021d02:	6163      	str	r3, [r4, #20]
 8021d04:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8021d08:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8021d0c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8021d10:	b002      	add	sp, #8
 8021d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021d16:	2300      	movs	r3, #0
 8021d18:	9301      	str	r3, [sp, #4]
 8021d1a:	e7c2      	b.n	8021ca2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8021d1c:	080259f4 	.word	0x080259f4

08021d20 <_ZN8touchgfx6Canvas5closeEv>:
 8021d20:	b538      	push	{r3, r4, r5, lr}
 8021d22:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8021d26:	4604      	mov	r4, r0
 8021d28:	b193      	cbz	r3, 8021d50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021d2a:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8021d2e:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8021d32:	4213      	tst	r3, r2
 8021d34:	d10c      	bne.n	8021d50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8021d36:	f100 0520 	add.w	r5, r0, #32
 8021d3a:	b123      	cbz	r3, 8021d46 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8021d3c:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8021d40:	4628      	mov	r0, r5
 8021d42:	f7ff fe7b 	bl	8021a3c <_ZN8touchgfx10Rasterizer6lineToEii>
 8021d46:	4628      	mov	r0, r5
 8021d48:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8021d4c:	f7ff fe76 	bl	8021a3c <_ZN8touchgfx10Rasterizer6lineToEii>
 8021d50:	2300      	movs	r3, #0
 8021d52:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8021d56:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8021d5a:	4298      	cmp	r0, r3
 8021d5c:	bf34      	ite	cc
 8021d5e:	2000      	movcc	r0, #0
 8021d60:	2001      	movcs	r0, #1
 8021d62:	bd38      	pop	{r3, r4, r5, pc}

08021d64 <_ZN8touchgfx6Canvas6renderEh>:
 8021d64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021d68:	4604      	mov	r4, r0
 8021d6a:	6840      	ldr	r0, [r0, #4]
 8021d6c:	460d      	mov	r5, r1
 8021d6e:	6803      	ldr	r3, [r0, #0]
 8021d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8021d72:	4798      	blx	r3
 8021d74:	fb10 f105 	smulbb	r1, r0, r5
 8021d78:	b289      	uxth	r1, r1
 8021d7a:	1c4d      	adds	r5, r1, #1
 8021d7c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8021d80:	122d      	asrs	r5, r5, #8
 8021d82:	f000 8097 	beq.w	8021eb4 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8021d86:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8021d8a:	2b00      	cmp	r3, #0
 8021d8c:	f000 8092 	beq.w	8021eb4 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8021d90:	4620      	mov	r0, r4
 8021d92:	f7ff ffc5 	bl	8021d20 <_ZN8touchgfx6Canvas5closeEv>
 8021d96:	4607      	mov	r7, r0
 8021d98:	2800      	cmp	r0, #0
 8021d9a:	d043      	beq.n	8021e24 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8021d9c:	6863      	ldr	r3, [r4, #4]
 8021d9e:	4e46      	ldr	r6, [pc, #280]	; (8021eb8 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8021da0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8021da2:	6837      	ldr	r7, [r6, #0]
 8021da4:	6803      	ldr	r3, [r0, #0]
 8021da6:	689b      	ldr	r3, [r3, #8]
 8021da8:	4798      	blx	r3
 8021daa:	4601      	mov	r1, r0
 8021dac:	4638      	mov	r0, r7
 8021dae:	f7ef f9ed 	bl	801118c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8021db2:	4607      	mov	r7, r0
 8021db4:	f7ee fdae 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8021db8:	6803      	ldr	r3, [r0, #0]
 8021dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dbc:	4798      	blx	r3
 8021dbe:	4680      	mov	r8, r0
 8021dc0:	f7ee fda8 	bl	8010914 <_ZN8touchgfx3HAL3lcdEv>
 8021dc4:	6803      	ldr	r3, [r0, #0]
 8021dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021dc8:	4798      	blx	r3
 8021dca:	280b      	cmp	r0, #11
 8021dcc:	d857      	bhi.n	8021e7e <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8021dce:	e8df f000 	tbb	[pc, r0]
 8021dd2:	584d      	.short	0x584d
 8021dd4:	2d560668 	.word	0x2d560668
 8021dd8:	6161613d 	.word	0x6161613d
 8021ddc:	6161      	.short	0x6161
 8021dde:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8021de2:	2208      	movs	r2, #8
 8021de4:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021de8:	fb91 f2f2 	sdiv	r2, r1, r2
 8021dec:	fb08 2303 	mla	r3, r8, r3, r2
 8021df0:	441f      	add	r7, r3
 8021df2:	424b      	negs	r3, r1
 8021df4:	f001 0107 	and.w	r1, r1, #7
 8021df8:	f003 0307 	and.w	r3, r3, #7
 8021dfc:	bf58      	it	pl
 8021dfe:	4259      	negpl	r1, r3
 8021e00:	b2c9      	uxtb	r1, r1
 8021e02:	6860      	ldr	r0, [r4, #4]
 8021e04:	b2ed      	uxtb	r5, r5
 8021e06:	fa0f f388 	sxth.w	r3, r8
 8021e0a:	463a      	mov	r2, r7
 8021e0c:	e9cd 1500 	strd	r1, r5, [sp]
 8021e10:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8021e12:	f104 0020 	add.w	r0, r4, #32
 8021e16:	f7ff fe1d 	bl	8021a54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8021e1a:	4607      	mov	r7, r0
 8021e1c:	6830      	ldr	r0, [r6, #0]
 8021e1e:	6803      	ldr	r3, [r0, #0]
 8021e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e22:	4798      	blx	r3
 8021e24:	4638      	mov	r0, r7
 8021e26:	b002      	add	sp, #8
 8021e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021e2c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8021e30:	2204      	movs	r2, #4
 8021e32:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021e36:	fb91 f2f2 	sdiv	r2, r1, r2
 8021e3a:	fb08 2303 	mla	r3, r8, r3, r2
 8021e3e:	441f      	add	r7, r3
 8021e40:	424b      	negs	r3, r1
 8021e42:	f001 0103 	and.w	r1, r1, #3
 8021e46:	f003 0303 	and.w	r3, r3, #3
 8021e4a:	e7d7      	b.n	8021dfc <_ZN8touchgfx6Canvas6renderEh+0x98>
 8021e4c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8021e50:	2202      	movs	r2, #2
 8021e52:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021e56:	2900      	cmp	r1, #0
 8021e58:	fb91 f2f2 	sdiv	r2, r1, r2
 8021e5c:	f001 0101 	and.w	r1, r1, #1
 8021e60:	fb08 2303 	mla	r3, r8, r3, r2
 8021e64:	bfb8      	it	lt
 8021e66:	4249      	neglt	r1, r1
 8021e68:	441f      	add	r7, r3
 8021e6a:	e7c9      	b.n	8021e00 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8021e6c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021e70:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021e74:	fb08 f303 	mul.w	r3, r8, r3
 8021e78:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021e7c:	441f      	add	r7, r3
 8021e7e:	2100      	movs	r1, #0
 8021e80:	e7bf      	b.n	8021e02 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8021e82:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021e86:	2103      	movs	r1, #3
 8021e88:	fb08 f203 	mul.w	r2, r8, r3
 8021e8c:	8b23      	ldrh	r3, [r4, #24]
 8021e8e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8021e92:	e7f3      	b.n	8021e7c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8021e94:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021e98:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021e9c:	fb08 2303 	mla	r3, r8, r3, r2
 8021ea0:	e7ec      	b.n	8021e7c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8021ea2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021ea6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021eaa:	fb08 f303 	mul.w	r3, r8, r3
 8021eae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021eb2:	e7e3      	b.n	8021e7c <_ZN8touchgfx6Canvas6renderEh+0x118>
 8021eb4:	2701      	movs	r7, #1
 8021eb6:	e7b5      	b.n	8021e24 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8021eb8:	2400f240 	.word	0x2400f240

08021ebc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021ebc:	4b07      	ldr	r3, [pc, #28]	; (8021edc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8021ebe:	b510      	push	{r4, lr}
 8021ec0:	781b      	ldrb	r3, [r3, #0]
 8021ec2:	2b01      	cmp	r3, #1
 8021ec4:	d108      	bne.n	8021ed8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8021ec6:	6843      	ldr	r3, [r0, #4]
 8021ec8:	6814      	ldr	r4, [r2, #0]
 8021eca:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8021ece:	680b      	ldr	r3, [r1, #0]
 8021ed0:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021ed4:	6013      	str	r3, [r2, #0]
 8021ed6:	600c      	str	r4, [r1, #0]
 8021ed8:	bd10      	pop	{r4, pc}
 8021eda:	bf00      	nop
 8021edc:	2400f238 	.word	0x2400f238

08021ee0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8021ee0:	b513      	push	{r0, r1, r4, lr}
 8021ee2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8021ee6:	4604      	mov	r4, r0
 8021ee8:	e9cd 2100 	strd	r2, r1, [sp]
 8021eec:	b9a3      	cbnz	r3, 8021f18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8021eee:	466a      	mov	r2, sp
 8021ef0:	a901      	add	r1, sp, #4
 8021ef2:	4620      	mov	r0, r4
 8021ef4:	f7ff ffe2 	bl	8021ebc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021ef8:	68a3      	ldr	r3, [r4, #8]
 8021efa:	9901      	ldr	r1, [sp, #4]
 8021efc:	9a00      	ldr	r2, [sp, #0]
 8021efe:	1ac9      	subs	r1, r1, r3
 8021f00:	68e3      	ldr	r3, [r4, #12]
 8021f02:	1ad2      	subs	r2, r2, r3
 8021f04:	9101      	str	r1, [sp, #4]
 8021f06:	2a00      	cmp	r2, #0
 8021f08:	9200      	str	r2, [sp, #0]
 8021f0a:	da0b      	bge.n	8021f24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8021f0c:	2301      	movs	r3, #1
 8021f0e:	2900      	cmp	r1, #0
 8021f10:	da0e      	bge.n	8021f30 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8021f12:	f043 0304 	orr.w	r3, r3, #4
 8021f16:	e013      	b.n	8021f40 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8021f18:	f7ff ff02 	bl	8021d20 <_ZN8touchgfx6Canvas5closeEv>
 8021f1c:	2800      	cmp	r0, #0
 8021f1e:	d1e6      	bne.n	8021eee <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8021f20:	b002      	add	sp, #8
 8021f22:	bd10      	pop	{r4, pc}
 8021f24:	6963      	ldr	r3, [r4, #20]
 8021f26:	429a      	cmp	r2, r3
 8021f28:	bfac      	ite	ge
 8021f2a:	2302      	movge	r3, #2
 8021f2c:	2300      	movlt	r3, #0
 8021f2e:	e7ee      	b.n	8021f0e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8021f30:	6920      	ldr	r0, [r4, #16]
 8021f32:	4281      	cmp	r1, r0
 8021f34:	bfac      	ite	ge
 8021f36:	2008      	movge	r0, #8
 8021f38:	2000      	movlt	r0, #0
 8021f3a:	4318      	orrs	r0, r3
 8021f3c:	b2c3      	uxtb	r3, r0
 8021f3e:	b158      	cbz	r0, 8021f58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8021f40:	2200      	movs	r2, #0
 8021f42:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8021f46:	9901      	ldr	r1, [sp, #4]
 8021f48:	9a00      	ldr	r2, [sp, #0]
 8021f4a:	66a1      	str	r1, [r4, #104]	; 0x68
 8021f4c:	66e2      	str	r2, [r4, #108]	; 0x6c
 8021f4e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8021f52:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8021f56:	e7e3      	b.n	8021f20 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8021f58:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8021f5c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8021f60:	4298      	cmp	r0, r3
 8021f62:	d803      	bhi.n	8021f6c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8021f64:	f104 0020 	add.w	r0, r4, #32
 8021f68:	f7f2 fcc6 	bl	80148f8 <_ZN8touchgfx7Outline6moveToEii>
 8021f6c:	2301      	movs	r3, #1
 8021f6e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8021f72:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8021f76:	2300      	movs	r3, #0
 8021f78:	e7e5      	b.n	8021f46 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08021f7a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021f7c:	ab02      	add	r3, sp, #8
 8021f7e:	4604      	mov	r4, r0
 8021f80:	9101      	str	r1, [sp, #4]
 8021f82:	a901      	add	r1, sp, #4
 8021f84:	f843 2d08 	str.w	r2, [r3, #-8]!
 8021f88:	461a      	mov	r2, r3
 8021f8a:	f7ff ff97 	bl	8021ebc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021f8e:	68a3      	ldr	r3, [r4, #8]
 8021f90:	9901      	ldr	r1, [sp, #4]
 8021f92:	9a00      	ldr	r2, [sp, #0]
 8021f94:	1ac9      	subs	r1, r1, r3
 8021f96:	68e3      	ldr	r3, [r4, #12]
 8021f98:	1ad2      	subs	r2, r2, r3
 8021f9a:	9101      	str	r1, [sp, #4]
 8021f9c:	2a00      	cmp	r2, #0
 8021f9e:	9200      	str	r2, [sp, #0]
 8021fa0:	db1c      	blt.n	8021fdc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8021fa2:	6963      	ldr	r3, [r4, #20]
 8021fa4:	429a      	cmp	r2, r3
 8021fa6:	bfac      	ite	ge
 8021fa8:	2002      	movge	r0, #2
 8021faa:	2000      	movlt	r0, #0
 8021fac:	2900      	cmp	r1, #0
 8021fae:	db17      	blt.n	8021fe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8021fb0:	6923      	ldr	r3, [r4, #16]
 8021fb2:	4299      	cmp	r1, r3
 8021fb4:	bfac      	ite	ge
 8021fb6:	2308      	movge	r3, #8
 8021fb8:	2300      	movlt	r3, #0
 8021fba:	4303      	orrs	r3, r0
 8021fbc:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8021fc0:	b2dd      	uxtb	r5, r3
 8021fc2:	b978      	cbnz	r0, 8021fe4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8021fc4:	f104 0020 	add.w	r0, r4, #32
 8021fc8:	f7ff fd38 	bl	8021a3c <_ZN8touchgfx10Rasterizer6lineToEii>
 8021fcc:	9b01      	ldr	r3, [sp, #4]
 8021fce:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8021fd2:	65e3      	str	r3, [r4, #92]	; 0x5c
 8021fd4:	9b00      	ldr	r3, [sp, #0]
 8021fd6:	6623      	str	r3, [r4, #96]	; 0x60
 8021fd8:	b002      	add	sp, #8
 8021fda:	bd70      	pop	{r4, r5, r6, pc}
 8021fdc:	2001      	movs	r0, #1
 8021fde:	e7e5      	b.n	8021fac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8021fe0:	2304      	movs	r3, #4
 8021fe2:	e7ea      	b.n	8021fba <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8021fe4:	b113      	cbz	r3, 8021fec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8021fe6:	ea10 0305 	ands.w	r3, r0, r5
 8021fea:	d11c      	bne.n	8022026 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8021fec:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8021ff0:	f104 0620 	add.w	r6, r4, #32
 8021ff4:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8021ff8:	b98b      	cbnz	r3, 802201e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8021ffa:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8021ffe:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8022002:	4298      	cmp	r0, r3
 8022004:	d802      	bhi.n	802200c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8022006:	4630      	mov	r0, r6
 8022008:	f7f2 fc76 	bl	80148f8 <_ZN8touchgfx7Outline6moveToEii>
 802200c:	2301      	movs	r3, #1
 802200e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8022012:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8022016:	4630      	mov	r0, r6
 8022018:	e9dd 2100 	ldrd	r2, r1, [sp]
 802201c:	e7d4      	b.n	8021fc8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802201e:	4630      	mov	r0, r6
 8022020:	f7ff fd0c 	bl	8021a3c <_ZN8touchgfx10Rasterizer6lineToEii>
 8022024:	e7f7      	b.n	8022016 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8022026:	461d      	mov	r5, r3
 8022028:	e7d0      	b.n	8021fcc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802202c <_ZN8touchgfx6CanvasD1Ev>:
 802202c:	4b04      	ldr	r3, [pc, #16]	; (8022040 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802202e:	b510      	push	{r4, lr}
 8022030:	4604      	mov	r4, r0
 8022032:	f840 3b20 	str.w	r3, [r0], #32
 8022036:	f7f1 ff67 	bl	8013f08 <_ZN8touchgfx7OutlineD1Ev>
 802203a:	4620      	mov	r0, r4
 802203c:	bd10      	pop	{r4, pc}
 802203e:	bf00      	nop
 8022040:	080259f4 	.word	0x080259f4

08022044 <_ZN8touchgfx6CanvasD0Ev>:
 8022044:	b510      	push	{r4, lr}
 8022046:	4604      	mov	r4, r0
 8022048:	f7ff fff0 	bl	802202c <_ZN8touchgfx6CanvasD1Ev>
 802204c:	2170      	movs	r1, #112	; 0x70
 802204e:	4620      	mov	r0, r4
 8022050:	f000 f807 	bl	8022062 <_ZdlPvj>
 8022054:	4620      	mov	r0, r4
 8022056:	bd10      	pop	{r4, pc}

08022058 <__aeabi_atexit>:
 8022058:	460b      	mov	r3, r1
 802205a:	4601      	mov	r1, r0
 802205c:	4618      	mov	r0, r3
 802205e:	f000 b933 	b.w	80222c8 <__cxa_atexit>

08022062 <_ZdlPvj>:
 8022062:	f000 b812 	b.w	802208a <_ZdlPv>

08022066 <__cxa_guard_acquire>:
 8022066:	6803      	ldr	r3, [r0, #0]
 8022068:	07db      	lsls	r3, r3, #31
 802206a:	d406      	bmi.n	802207a <__cxa_guard_acquire+0x14>
 802206c:	7843      	ldrb	r3, [r0, #1]
 802206e:	b103      	cbz	r3, 8022072 <__cxa_guard_acquire+0xc>
 8022070:	deff      	udf	#255	; 0xff
 8022072:	2301      	movs	r3, #1
 8022074:	7043      	strb	r3, [r0, #1]
 8022076:	4618      	mov	r0, r3
 8022078:	4770      	bx	lr
 802207a:	2000      	movs	r0, #0
 802207c:	4770      	bx	lr

0802207e <__cxa_guard_release>:
 802207e:	2301      	movs	r3, #1
 8022080:	6003      	str	r3, [r0, #0]
 8022082:	4770      	bx	lr

08022084 <__cxa_pure_virtual>:
 8022084:	b508      	push	{r3, lr}
 8022086:	f000 f80f 	bl	80220a8 <_ZSt9terminatev>

0802208a <_ZdlPv>:
 802208a:	f000 b96f 	b.w	802236c <free>

0802208e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802208e:	b508      	push	{r3, lr}
 8022090:	4780      	blx	r0
 8022092:	f000 f8ed 	bl	8022270 <abort>
	...

08022098 <_ZSt13get_terminatev>:
 8022098:	4b02      	ldr	r3, [pc, #8]	; (80220a4 <_ZSt13get_terminatev+0xc>)
 802209a:	6818      	ldr	r0, [r3, #0]
 802209c:	f3bf 8f5b 	dmb	ish
 80220a0:	4770      	bx	lr
 80220a2:	bf00      	nop
 80220a4:	240000b0 	.word	0x240000b0

080220a8 <_ZSt9terminatev>:
 80220a8:	b508      	push	{r3, lr}
 80220aa:	f7ff fff5 	bl	8022098 <_ZSt13get_terminatev>
 80220ae:	f7ff ffee 	bl	802208e <_ZN10__cxxabiv111__terminateEPFvvE>

080220b2 <with_errnof>:
 80220b2:	b513      	push	{r0, r1, r4, lr}
 80220b4:	4604      	mov	r4, r0
 80220b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80220ba:	f000 f913 	bl	80222e4 <__errno>
 80220be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80220c2:	6004      	str	r4, [r0, #0]
 80220c4:	b002      	add	sp, #8
 80220c6:	bd10      	pop	{r4, pc}

080220c8 <__math_invalidf>:
 80220c8:	eef0 7a40 	vmov.f32	s15, s0
 80220cc:	ee30 7a40 	vsub.f32	s14, s0, s0
 80220d0:	eef4 7a67 	vcmp.f32	s15, s15
 80220d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80220d8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80220dc:	d602      	bvs.n	80220e4 <__math_invalidf+0x1c>
 80220de:	2021      	movs	r0, #33	; 0x21
 80220e0:	f7ff bfe7 	b.w	80220b2 <with_errnof>
 80220e4:	4770      	bx	lr

080220e6 <sinf_poly>:
 80220e6:	07cb      	lsls	r3, r1, #31
 80220e8:	d412      	bmi.n	8022110 <sinf_poly+0x2a>
 80220ea:	ee21 5b00 	vmul.f64	d5, d1, d0
 80220ee:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80220f2:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80220f6:	eea6 7b01 	vfma.f64	d7, d6, d1
 80220fa:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80220fe:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022102:	eea6 0b05 	vfma.f64	d0, d6, d5
 8022106:	eea7 0b01 	vfma.f64	d0, d7, d1
 802210a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802210e:	4770      	bx	lr
 8022110:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8022114:	ee21 5b01 	vmul.f64	d5, d1, d1
 8022118:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802211c:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8022120:	eea1 7b06 	vfma.f64	d7, d1, d6
 8022124:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8022128:	eea1 0b06 	vfma.f64	d0, d1, d6
 802212c:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8022130:	ee21 1b05 	vmul.f64	d1, d1, d5
 8022134:	eea5 0b06 	vfma.f64	d0, d5, d6
 8022138:	e7e5      	b.n	8022106 <sinf_poly+0x20>
 802213a:	0000      	movs	r0, r0
 802213c:	0000      	movs	r0, r0
	...

08022140 <sinf>:
 8022140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022142:	ee10 4a10 	vmov	r4, s0
 8022146:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802214a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 802214e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8022152:	eef0 7a40 	vmov.f32	s15, s0
 8022156:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802215a:	d218      	bcs.n	802218e <sinf+0x4e>
 802215c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8022160:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8022164:	d20a      	bcs.n	802217c <sinf+0x3c>
 8022166:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 802216a:	d103      	bne.n	8022174 <sinf+0x34>
 802216c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8022170:	ed8d 1a01 	vstr	s2, [sp, #4]
 8022174:	eeb0 0a67 	vmov.f32	s0, s15
 8022178:	b003      	add	sp, #12
 802217a:	bd30      	pop	{r4, r5, pc}
 802217c:	483a      	ldr	r0, [pc, #232]	; (8022268 <sinf+0x128>)
 802217e:	eeb0 0b46 	vmov.f64	d0, d6
 8022182:	2100      	movs	r1, #0
 8022184:	b003      	add	sp, #12
 8022186:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802218a:	f7ff bfac 	b.w	80220e6 <sinf_poly>
 802218e:	f240 422e 	movw	r2, #1070	; 0x42e
 8022192:	4293      	cmp	r3, r2
 8022194:	d824      	bhi.n	80221e0 <sinf+0xa0>
 8022196:	4b34      	ldr	r3, [pc, #208]	; (8022268 <sinf+0x128>)
 8022198:	ed93 7b08 	vldr	d7, [r3, #32]
 802219c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80221a0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80221a4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80221a8:	ee17 1a90 	vmov	r1, s15
 80221ac:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80221b0:	1609      	asrs	r1, r1, #24
 80221b2:	ee07 1a90 	vmov	s15, r1
 80221b6:	f001 0203 	and.w	r2, r1, #3
 80221ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80221be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80221c2:	ed92 0b00 	vldr	d0, [r2]
 80221c6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80221ca:	f011 0f02 	tst.w	r1, #2
 80221ce:	eea5 6b47 	vfms.f64	d6, d5, d7
 80221d2:	bf08      	it	eq
 80221d4:	4618      	moveq	r0, r3
 80221d6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80221da:	ee20 0b06 	vmul.f64	d0, d0, d6
 80221de:	e7d1      	b.n	8022184 <sinf+0x44>
 80221e0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80221e4:	d237      	bcs.n	8022256 <sinf+0x116>
 80221e6:	4a21      	ldr	r2, [pc, #132]	; (802226c <sinf+0x12c>)
 80221e8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80221ec:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80221f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80221f4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80221f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80221fc:	4083      	lsls	r3, r0
 80221fe:	6a28      	ldr	r0, [r5, #32]
 8022200:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8022204:	fba3 1000 	umull	r1, r0, r3, r0
 8022208:	6929      	ldr	r1, [r5, #16]
 802220a:	435a      	muls	r2, r3
 802220c:	fbe3 0201 	umlal	r0, r2, r3, r1
 8022210:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8022214:	0f8d      	lsrs	r5, r1, #30
 8022216:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 802221a:	1a51      	subs	r1, r2, r1
 802221c:	f7de fa3e 	bl	800069c <__aeabi_l2d>
 8022220:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8022224:	4b10      	ldr	r3, [pc, #64]	; (8022268 <sinf+0x128>)
 8022226:	f004 0203 	and.w	r2, r4, #3
 802222a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802222e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8022260 <sinf+0x120>
 8022232:	ed92 0b00 	vldr	d0, [r2]
 8022236:	ec41 0b16 	vmov	d6, r0, r1
 802223a:	f014 0f02 	tst.w	r4, #2
 802223e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8022242:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8022246:	4629      	mov	r1, r5
 8022248:	bf08      	it	eq
 802224a:	4618      	moveq	r0, r3
 802224c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8022250:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022254:	e796      	b.n	8022184 <sinf+0x44>
 8022256:	b003      	add	sp, #12
 8022258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802225c:	f7ff bf34 	b.w	80220c8 <__math_invalidf>
 8022260:	54442d18 	.word	0x54442d18
 8022264:	3c1921fb 	.word	0x3c1921fb
 8022268:	08025a60 	.word	0x08025a60
 802226c:	08025a00 	.word	0x08025a00

08022270 <abort>:
 8022270:	b508      	push	{r3, lr}
 8022272:	2006      	movs	r0, #6
 8022274:	f000 fcdc 	bl	8022c30 <raise>
 8022278:	2001      	movs	r0, #1
 802227a:	f7df f92d 	bl	80014d8 <_exit>
	...

08022280 <__assert_func>:
 8022280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022282:	4614      	mov	r4, r2
 8022284:	461a      	mov	r2, r3
 8022286:	4b09      	ldr	r3, [pc, #36]	; (80222ac <__assert_func+0x2c>)
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	4605      	mov	r5, r0
 802228c:	68d8      	ldr	r0, [r3, #12]
 802228e:	b14c      	cbz	r4, 80222a4 <__assert_func+0x24>
 8022290:	4b07      	ldr	r3, [pc, #28]	; (80222b0 <__assert_func+0x30>)
 8022292:	9100      	str	r1, [sp, #0]
 8022294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022298:	4906      	ldr	r1, [pc, #24]	; (80222b4 <__assert_func+0x34>)
 802229a:	462b      	mov	r3, r5
 802229c:	f000 f828 	bl	80222f0 <fiprintf>
 80222a0:	f7ff ffe6 	bl	8022270 <abort>
 80222a4:	4b04      	ldr	r3, [pc, #16]	; (80222b8 <__assert_func+0x38>)
 80222a6:	461c      	mov	r4, r3
 80222a8:	e7f3      	b.n	8022292 <__assert_func+0x12>
 80222aa:	bf00      	nop
 80222ac:	240000b4 	.word	0x240000b4
 80222b0:	08025b40 	.word	0x08025b40
 80222b4:	08025b4d 	.word	0x08025b4d
 80222b8:	08025b7b 	.word	0x08025b7b

080222bc <atexit>:
 80222bc:	2300      	movs	r3, #0
 80222be:	4601      	mov	r1, r0
 80222c0:	461a      	mov	r2, r3
 80222c2:	4618      	mov	r0, r3
 80222c4:	f000 bd90 	b.w	8022de8 <__register_exitproc>

080222c8 <__cxa_atexit>:
 80222c8:	b510      	push	{r4, lr}
 80222ca:	4c05      	ldr	r4, [pc, #20]	; (80222e0 <__cxa_atexit+0x18>)
 80222cc:	4613      	mov	r3, r2
 80222ce:	b12c      	cbz	r4, 80222dc <__cxa_atexit+0x14>
 80222d0:	460a      	mov	r2, r1
 80222d2:	4601      	mov	r1, r0
 80222d4:	2002      	movs	r0, #2
 80222d6:	f000 fd87 	bl	8022de8 <__register_exitproc>
 80222da:	bd10      	pop	{r4, pc}
 80222dc:	4620      	mov	r0, r4
 80222de:	e7fc      	b.n	80222da <__cxa_atexit+0x12>
 80222e0:	08022de9 	.word	0x08022de9

080222e4 <__errno>:
 80222e4:	4b01      	ldr	r3, [pc, #4]	; (80222ec <__errno+0x8>)
 80222e6:	6818      	ldr	r0, [r3, #0]
 80222e8:	4770      	bx	lr
 80222ea:	bf00      	nop
 80222ec:	240000b4 	.word	0x240000b4

080222f0 <fiprintf>:
 80222f0:	b40e      	push	{r1, r2, r3}
 80222f2:	b503      	push	{r0, r1, lr}
 80222f4:	4601      	mov	r1, r0
 80222f6:	ab03      	add	r3, sp, #12
 80222f8:	4805      	ldr	r0, [pc, #20]	; (8022310 <fiprintf+0x20>)
 80222fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80222fe:	6800      	ldr	r0, [r0, #0]
 8022300:	9301      	str	r3, [sp, #4]
 8022302:	f000 f95b 	bl	80225bc <_vfiprintf_r>
 8022306:	b002      	add	sp, #8
 8022308:	f85d eb04 	ldr.w	lr, [sp], #4
 802230c:	b003      	add	sp, #12
 802230e:	4770      	bx	lr
 8022310:	240000b4 	.word	0x240000b4

08022314 <__libc_init_array>:
 8022314:	b570      	push	{r4, r5, r6, lr}
 8022316:	4d0d      	ldr	r5, [pc, #52]	; (802234c <__libc_init_array+0x38>)
 8022318:	4c0d      	ldr	r4, [pc, #52]	; (8022350 <__libc_init_array+0x3c>)
 802231a:	1b64      	subs	r4, r4, r5
 802231c:	10a4      	asrs	r4, r4, #2
 802231e:	2600      	movs	r6, #0
 8022320:	42a6      	cmp	r6, r4
 8022322:	d109      	bne.n	8022338 <__libc_init_array+0x24>
 8022324:	4d0b      	ldr	r5, [pc, #44]	; (8022354 <__libc_init_array+0x40>)
 8022326:	4c0c      	ldr	r4, [pc, #48]	; (8022358 <__libc_init_array+0x44>)
 8022328:	f001 f898 	bl	802345c <_init>
 802232c:	1b64      	subs	r4, r4, r5
 802232e:	10a4      	asrs	r4, r4, #2
 8022330:	2600      	movs	r6, #0
 8022332:	42a6      	cmp	r6, r4
 8022334:	d105      	bne.n	8022342 <__libc_init_array+0x2e>
 8022336:	bd70      	pop	{r4, r5, r6, pc}
 8022338:	f855 3b04 	ldr.w	r3, [r5], #4
 802233c:	4798      	blx	r3
 802233e:	3601      	adds	r6, #1
 8022340:	e7ee      	b.n	8022320 <__libc_init_array+0xc>
 8022342:	f855 3b04 	ldr.w	r3, [r5], #4
 8022346:	4798      	blx	r3
 8022348:	3601      	adds	r6, #1
 802234a:	e7f2      	b.n	8022332 <__libc_init_array+0x1e>
 802234c:	08026734 	.word	0x08026734
 8022350:	08026734 	.word	0x08026734
 8022354:	08026734 	.word	0x08026734
 8022358:	0802674c 	.word	0x0802674c

0802235c <malloc>:
 802235c:	4b02      	ldr	r3, [pc, #8]	; (8022368 <malloc+0xc>)
 802235e:	4601      	mov	r1, r0
 8022360:	6818      	ldr	r0, [r3, #0]
 8022362:	f000 b88d 	b.w	8022480 <_malloc_r>
 8022366:	bf00      	nop
 8022368:	240000b4 	.word	0x240000b4

0802236c <free>:
 802236c:	4b02      	ldr	r3, [pc, #8]	; (8022378 <free+0xc>)
 802236e:	4601      	mov	r1, r0
 8022370:	6818      	ldr	r0, [r3, #0]
 8022372:	f000 b819 	b.w	80223a8 <_free_r>
 8022376:	bf00      	nop
 8022378:	240000b4 	.word	0x240000b4

0802237c <memcpy>:
 802237c:	440a      	add	r2, r1
 802237e:	4291      	cmp	r1, r2
 8022380:	f100 33ff 	add.w	r3, r0, #4294967295
 8022384:	d100      	bne.n	8022388 <memcpy+0xc>
 8022386:	4770      	bx	lr
 8022388:	b510      	push	{r4, lr}
 802238a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802238e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022392:	4291      	cmp	r1, r2
 8022394:	d1f9      	bne.n	802238a <memcpy+0xe>
 8022396:	bd10      	pop	{r4, pc}

08022398 <memset>:
 8022398:	4402      	add	r2, r0
 802239a:	4603      	mov	r3, r0
 802239c:	4293      	cmp	r3, r2
 802239e:	d100      	bne.n	80223a2 <memset+0xa>
 80223a0:	4770      	bx	lr
 80223a2:	f803 1b01 	strb.w	r1, [r3], #1
 80223a6:	e7f9      	b.n	802239c <memset+0x4>

080223a8 <_free_r>:
 80223a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80223aa:	2900      	cmp	r1, #0
 80223ac:	d044      	beq.n	8022438 <_free_r+0x90>
 80223ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80223b2:	9001      	str	r0, [sp, #4]
 80223b4:	2b00      	cmp	r3, #0
 80223b6:	f1a1 0404 	sub.w	r4, r1, #4
 80223ba:	bfb8      	it	lt
 80223bc:	18e4      	addlt	r4, r4, r3
 80223be:	f000 ff95 	bl	80232ec <__malloc_lock>
 80223c2:	4a1e      	ldr	r2, [pc, #120]	; (802243c <_free_r+0x94>)
 80223c4:	9801      	ldr	r0, [sp, #4]
 80223c6:	6813      	ldr	r3, [r2, #0]
 80223c8:	b933      	cbnz	r3, 80223d8 <_free_r+0x30>
 80223ca:	6063      	str	r3, [r4, #4]
 80223cc:	6014      	str	r4, [r2, #0]
 80223ce:	b003      	add	sp, #12
 80223d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80223d4:	f000 bf90 	b.w	80232f8 <__malloc_unlock>
 80223d8:	42a3      	cmp	r3, r4
 80223da:	d908      	bls.n	80223ee <_free_r+0x46>
 80223dc:	6825      	ldr	r5, [r4, #0]
 80223de:	1961      	adds	r1, r4, r5
 80223e0:	428b      	cmp	r3, r1
 80223e2:	bf01      	itttt	eq
 80223e4:	6819      	ldreq	r1, [r3, #0]
 80223e6:	685b      	ldreq	r3, [r3, #4]
 80223e8:	1949      	addeq	r1, r1, r5
 80223ea:	6021      	streq	r1, [r4, #0]
 80223ec:	e7ed      	b.n	80223ca <_free_r+0x22>
 80223ee:	461a      	mov	r2, r3
 80223f0:	685b      	ldr	r3, [r3, #4]
 80223f2:	b10b      	cbz	r3, 80223f8 <_free_r+0x50>
 80223f4:	42a3      	cmp	r3, r4
 80223f6:	d9fa      	bls.n	80223ee <_free_r+0x46>
 80223f8:	6811      	ldr	r1, [r2, #0]
 80223fa:	1855      	adds	r5, r2, r1
 80223fc:	42a5      	cmp	r5, r4
 80223fe:	d10b      	bne.n	8022418 <_free_r+0x70>
 8022400:	6824      	ldr	r4, [r4, #0]
 8022402:	4421      	add	r1, r4
 8022404:	1854      	adds	r4, r2, r1
 8022406:	42a3      	cmp	r3, r4
 8022408:	6011      	str	r1, [r2, #0]
 802240a:	d1e0      	bne.n	80223ce <_free_r+0x26>
 802240c:	681c      	ldr	r4, [r3, #0]
 802240e:	685b      	ldr	r3, [r3, #4]
 8022410:	6053      	str	r3, [r2, #4]
 8022412:	4421      	add	r1, r4
 8022414:	6011      	str	r1, [r2, #0]
 8022416:	e7da      	b.n	80223ce <_free_r+0x26>
 8022418:	d902      	bls.n	8022420 <_free_r+0x78>
 802241a:	230c      	movs	r3, #12
 802241c:	6003      	str	r3, [r0, #0]
 802241e:	e7d6      	b.n	80223ce <_free_r+0x26>
 8022420:	6825      	ldr	r5, [r4, #0]
 8022422:	1961      	adds	r1, r4, r5
 8022424:	428b      	cmp	r3, r1
 8022426:	bf04      	itt	eq
 8022428:	6819      	ldreq	r1, [r3, #0]
 802242a:	685b      	ldreq	r3, [r3, #4]
 802242c:	6063      	str	r3, [r4, #4]
 802242e:	bf04      	itt	eq
 8022430:	1949      	addeq	r1, r1, r5
 8022432:	6021      	streq	r1, [r4, #0]
 8022434:	6054      	str	r4, [r2, #4]
 8022436:	e7ca      	b.n	80223ce <_free_r+0x26>
 8022438:	b003      	add	sp, #12
 802243a:	bd30      	pop	{r4, r5, pc}
 802243c:	2400f324 	.word	0x2400f324

08022440 <sbrk_aligned>:
 8022440:	b570      	push	{r4, r5, r6, lr}
 8022442:	4e0e      	ldr	r6, [pc, #56]	; (802247c <sbrk_aligned+0x3c>)
 8022444:	460c      	mov	r4, r1
 8022446:	6831      	ldr	r1, [r6, #0]
 8022448:	4605      	mov	r5, r0
 802244a:	b911      	cbnz	r1, 8022452 <sbrk_aligned+0x12>
 802244c:	f000 fbb8 	bl	8022bc0 <_sbrk_r>
 8022450:	6030      	str	r0, [r6, #0]
 8022452:	4621      	mov	r1, r4
 8022454:	4628      	mov	r0, r5
 8022456:	f000 fbb3 	bl	8022bc0 <_sbrk_r>
 802245a:	1c43      	adds	r3, r0, #1
 802245c:	d00a      	beq.n	8022474 <sbrk_aligned+0x34>
 802245e:	1cc4      	adds	r4, r0, #3
 8022460:	f024 0403 	bic.w	r4, r4, #3
 8022464:	42a0      	cmp	r0, r4
 8022466:	d007      	beq.n	8022478 <sbrk_aligned+0x38>
 8022468:	1a21      	subs	r1, r4, r0
 802246a:	4628      	mov	r0, r5
 802246c:	f000 fba8 	bl	8022bc0 <_sbrk_r>
 8022470:	3001      	adds	r0, #1
 8022472:	d101      	bne.n	8022478 <sbrk_aligned+0x38>
 8022474:	f04f 34ff 	mov.w	r4, #4294967295
 8022478:	4620      	mov	r0, r4
 802247a:	bd70      	pop	{r4, r5, r6, pc}
 802247c:	2400f328 	.word	0x2400f328

08022480 <_malloc_r>:
 8022480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022484:	1ccd      	adds	r5, r1, #3
 8022486:	f025 0503 	bic.w	r5, r5, #3
 802248a:	3508      	adds	r5, #8
 802248c:	2d0c      	cmp	r5, #12
 802248e:	bf38      	it	cc
 8022490:	250c      	movcc	r5, #12
 8022492:	2d00      	cmp	r5, #0
 8022494:	4607      	mov	r7, r0
 8022496:	db01      	blt.n	802249c <_malloc_r+0x1c>
 8022498:	42a9      	cmp	r1, r5
 802249a:	d905      	bls.n	80224a8 <_malloc_r+0x28>
 802249c:	230c      	movs	r3, #12
 802249e:	603b      	str	r3, [r7, #0]
 80224a0:	2600      	movs	r6, #0
 80224a2:	4630      	mov	r0, r6
 80224a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224a8:	4e2e      	ldr	r6, [pc, #184]	; (8022564 <_malloc_r+0xe4>)
 80224aa:	f000 ff1f 	bl	80232ec <__malloc_lock>
 80224ae:	6833      	ldr	r3, [r6, #0]
 80224b0:	461c      	mov	r4, r3
 80224b2:	bb34      	cbnz	r4, 8022502 <_malloc_r+0x82>
 80224b4:	4629      	mov	r1, r5
 80224b6:	4638      	mov	r0, r7
 80224b8:	f7ff ffc2 	bl	8022440 <sbrk_aligned>
 80224bc:	1c43      	adds	r3, r0, #1
 80224be:	4604      	mov	r4, r0
 80224c0:	d14d      	bne.n	802255e <_malloc_r+0xde>
 80224c2:	6834      	ldr	r4, [r6, #0]
 80224c4:	4626      	mov	r6, r4
 80224c6:	2e00      	cmp	r6, #0
 80224c8:	d140      	bne.n	802254c <_malloc_r+0xcc>
 80224ca:	6823      	ldr	r3, [r4, #0]
 80224cc:	4631      	mov	r1, r6
 80224ce:	4638      	mov	r0, r7
 80224d0:	eb04 0803 	add.w	r8, r4, r3
 80224d4:	f000 fb74 	bl	8022bc0 <_sbrk_r>
 80224d8:	4580      	cmp	r8, r0
 80224da:	d13a      	bne.n	8022552 <_malloc_r+0xd2>
 80224dc:	6821      	ldr	r1, [r4, #0]
 80224de:	3503      	adds	r5, #3
 80224e0:	1a6d      	subs	r5, r5, r1
 80224e2:	f025 0503 	bic.w	r5, r5, #3
 80224e6:	3508      	adds	r5, #8
 80224e8:	2d0c      	cmp	r5, #12
 80224ea:	bf38      	it	cc
 80224ec:	250c      	movcc	r5, #12
 80224ee:	4629      	mov	r1, r5
 80224f0:	4638      	mov	r0, r7
 80224f2:	f7ff ffa5 	bl	8022440 <sbrk_aligned>
 80224f6:	3001      	adds	r0, #1
 80224f8:	d02b      	beq.n	8022552 <_malloc_r+0xd2>
 80224fa:	6823      	ldr	r3, [r4, #0]
 80224fc:	442b      	add	r3, r5
 80224fe:	6023      	str	r3, [r4, #0]
 8022500:	e00e      	b.n	8022520 <_malloc_r+0xa0>
 8022502:	6822      	ldr	r2, [r4, #0]
 8022504:	1b52      	subs	r2, r2, r5
 8022506:	d41e      	bmi.n	8022546 <_malloc_r+0xc6>
 8022508:	2a0b      	cmp	r2, #11
 802250a:	d916      	bls.n	802253a <_malloc_r+0xba>
 802250c:	1961      	adds	r1, r4, r5
 802250e:	42a3      	cmp	r3, r4
 8022510:	6025      	str	r5, [r4, #0]
 8022512:	bf18      	it	ne
 8022514:	6059      	strne	r1, [r3, #4]
 8022516:	6863      	ldr	r3, [r4, #4]
 8022518:	bf08      	it	eq
 802251a:	6031      	streq	r1, [r6, #0]
 802251c:	5162      	str	r2, [r4, r5]
 802251e:	604b      	str	r3, [r1, #4]
 8022520:	4638      	mov	r0, r7
 8022522:	f104 060b 	add.w	r6, r4, #11
 8022526:	f000 fee7 	bl	80232f8 <__malloc_unlock>
 802252a:	f026 0607 	bic.w	r6, r6, #7
 802252e:	1d23      	adds	r3, r4, #4
 8022530:	1af2      	subs	r2, r6, r3
 8022532:	d0b6      	beq.n	80224a2 <_malloc_r+0x22>
 8022534:	1b9b      	subs	r3, r3, r6
 8022536:	50a3      	str	r3, [r4, r2]
 8022538:	e7b3      	b.n	80224a2 <_malloc_r+0x22>
 802253a:	6862      	ldr	r2, [r4, #4]
 802253c:	42a3      	cmp	r3, r4
 802253e:	bf0c      	ite	eq
 8022540:	6032      	streq	r2, [r6, #0]
 8022542:	605a      	strne	r2, [r3, #4]
 8022544:	e7ec      	b.n	8022520 <_malloc_r+0xa0>
 8022546:	4623      	mov	r3, r4
 8022548:	6864      	ldr	r4, [r4, #4]
 802254a:	e7b2      	b.n	80224b2 <_malloc_r+0x32>
 802254c:	4634      	mov	r4, r6
 802254e:	6876      	ldr	r6, [r6, #4]
 8022550:	e7b9      	b.n	80224c6 <_malloc_r+0x46>
 8022552:	230c      	movs	r3, #12
 8022554:	603b      	str	r3, [r7, #0]
 8022556:	4638      	mov	r0, r7
 8022558:	f000 fece 	bl	80232f8 <__malloc_unlock>
 802255c:	e7a1      	b.n	80224a2 <_malloc_r+0x22>
 802255e:	6025      	str	r5, [r4, #0]
 8022560:	e7de      	b.n	8022520 <_malloc_r+0xa0>
 8022562:	bf00      	nop
 8022564:	2400f324 	.word	0x2400f324

08022568 <__sfputc_r>:
 8022568:	6893      	ldr	r3, [r2, #8]
 802256a:	3b01      	subs	r3, #1
 802256c:	2b00      	cmp	r3, #0
 802256e:	b410      	push	{r4}
 8022570:	6093      	str	r3, [r2, #8]
 8022572:	da08      	bge.n	8022586 <__sfputc_r+0x1e>
 8022574:	6994      	ldr	r4, [r2, #24]
 8022576:	42a3      	cmp	r3, r4
 8022578:	db01      	blt.n	802257e <__sfputc_r+0x16>
 802257a:	290a      	cmp	r1, #10
 802257c:	d103      	bne.n	8022586 <__sfputc_r+0x1e>
 802257e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022582:	f000 bb71 	b.w	8022c68 <__swbuf_r>
 8022586:	6813      	ldr	r3, [r2, #0]
 8022588:	1c58      	adds	r0, r3, #1
 802258a:	6010      	str	r0, [r2, #0]
 802258c:	7019      	strb	r1, [r3, #0]
 802258e:	4608      	mov	r0, r1
 8022590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022594:	4770      	bx	lr

08022596 <__sfputs_r>:
 8022596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022598:	4606      	mov	r6, r0
 802259a:	460f      	mov	r7, r1
 802259c:	4614      	mov	r4, r2
 802259e:	18d5      	adds	r5, r2, r3
 80225a0:	42ac      	cmp	r4, r5
 80225a2:	d101      	bne.n	80225a8 <__sfputs_r+0x12>
 80225a4:	2000      	movs	r0, #0
 80225a6:	e007      	b.n	80225b8 <__sfputs_r+0x22>
 80225a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225ac:	463a      	mov	r2, r7
 80225ae:	4630      	mov	r0, r6
 80225b0:	f7ff ffda 	bl	8022568 <__sfputc_r>
 80225b4:	1c43      	adds	r3, r0, #1
 80225b6:	d1f3      	bne.n	80225a0 <__sfputs_r+0xa>
 80225b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080225bc <_vfiprintf_r>:
 80225bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225c0:	460d      	mov	r5, r1
 80225c2:	b09d      	sub	sp, #116	; 0x74
 80225c4:	4614      	mov	r4, r2
 80225c6:	4698      	mov	r8, r3
 80225c8:	4606      	mov	r6, r0
 80225ca:	b118      	cbz	r0, 80225d4 <_vfiprintf_r+0x18>
 80225cc:	6983      	ldr	r3, [r0, #24]
 80225ce:	b90b      	cbnz	r3, 80225d4 <_vfiprintf_r+0x18>
 80225d0:	f000 fd86 	bl	80230e0 <__sinit>
 80225d4:	4b89      	ldr	r3, [pc, #548]	; (80227fc <_vfiprintf_r+0x240>)
 80225d6:	429d      	cmp	r5, r3
 80225d8:	d11b      	bne.n	8022612 <_vfiprintf_r+0x56>
 80225da:	6875      	ldr	r5, [r6, #4]
 80225dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80225de:	07d9      	lsls	r1, r3, #31
 80225e0:	d405      	bmi.n	80225ee <_vfiprintf_r+0x32>
 80225e2:	89ab      	ldrh	r3, [r5, #12]
 80225e4:	059a      	lsls	r2, r3, #22
 80225e6:	d402      	bmi.n	80225ee <_vfiprintf_r+0x32>
 80225e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80225ea:	f000 fe17 	bl	802321c <__retarget_lock_acquire_recursive>
 80225ee:	89ab      	ldrh	r3, [r5, #12]
 80225f0:	071b      	lsls	r3, r3, #28
 80225f2:	d501      	bpl.n	80225f8 <_vfiprintf_r+0x3c>
 80225f4:	692b      	ldr	r3, [r5, #16]
 80225f6:	b9eb      	cbnz	r3, 8022634 <_vfiprintf_r+0x78>
 80225f8:	4629      	mov	r1, r5
 80225fa:	4630      	mov	r0, r6
 80225fc:	f000 fb86 	bl	8022d0c <__swsetup_r>
 8022600:	b1c0      	cbz	r0, 8022634 <_vfiprintf_r+0x78>
 8022602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022604:	07dc      	lsls	r4, r3, #31
 8022606:	d50e      	bpl.n	8022626 <_vfiprintf_r+0x6a>
 8022608:	f04f 30ff 	mov.w	r0, #4294967295
 802260c:	b01d      	add	sp, #116	; 0x74
 802260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022612:	4b7b      	ldr	r3, [pc, #492]	; (8022800 <_vfiprintf_r+0x244>)
 8022614:	429d      	cmp	r5, r3
 8022616:	d101      	bne.n	802261c <_vfiprintf_r+0x60>
 8022618:	68b5      	ldr	r5, [r6, #8]
 802261a:	e7df      	b.n	80225dc <_vfiprintf_r+0x20>
 802261c:	4b79      	ldr	r3, [pc, #484]	; (8022804 <_vfiprintf_r+0x248>)
 802261e:	429d      	cmp	r5, r3
 8022620:	bf08      	it	eq
 8022622:	68f5      	ldreq	r5, [r6, #12]
 8022624:	e7da      	b.n	80225dc <_vfiprintf_r+0x20>
 8022626:	89ab      	ldrh	r3, [r5, #12]
 8022628:	0598      	lsls	r0, r3, #22
 802262a:	d4ed      	bmi.n	8022608 <_vfiprintf_r+0x4c>
 802262c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802262e:	f000 fdf7 	bl	8023220 <__retarget_lock_release_recursive>
 8022632:	e7e9      	b.n	8022608 <_vfiprintf_r+0x4c>
 8022634:	2300      	movs	r3, #0
 8022636:	9309      	str	r3, [sp, #36]	; 0x24
 8022638:	2320      	movs	r3, #32
 802263a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802263e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022642:	2330      	movs	r3, #48	; 0x30
 8022644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022808 <_vfiprintf_r+0x24c>
 8022648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802264c:	f04f 0901 	mov.w	r9, #1
 8022650:	4623      	mov	r3, r4
 8022652:	469a      	mov	sl, r3
 8022654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022658:	b10a      	cbz	r2, 802265e <_vfiprintf_r+0xa2>
 802265a:	2a25      	cmp	r2, #37	; 0x25
 802265c:	d1f9      	bne.n	8022652 <_vfiprintf_r+0x96>
 802265e:	ebba 0b04 	subs.w	fp, sl, r4
 8022662:	d00b      	beq.n	802267c <_vfiprintf_r+0xc0>
 8022664:	465b      	mov	r3, fp
 8022666:	4622      	mov	r2, r4
 8022668:	4629      	mov	r1, r5
 802266a:	4630      	mov	r0, r6
 802266c:	f7ff ff93 	bl	8022596 <__sfputs_r>
 8022670:	3001      	adds	r0, #1
 8022672:	f000 80aa 	beq.w	80227ca <_vfiprintf_r+0x20e>
 8022676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022678:	445a      	add	r2, fp
 802267a:	9209      	str	r2, [sp, #36]	; 0x24
 802267c:	f89a 3000 	ldrb.w	r3, [sl]
 8022680:	2b00      	cmp	r3, #0
 8022682:	f000 80a2 	beq.w	80227ca <_vfiprintf_r+0x20e>
 8022686:	2300      	movs	r3, #0
 8022688:	f04f 32ff 	mov.w	r2, #4294967295
 802268c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022690:	f10a 0a01 	add.w	sl, sl, #1
 8022694:	9304      	str	r3, [sp, #16]
 8022696:	9307      	str	r3, [sp, #28]
 8022698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802269c:	931a      	str	r3, [sp, #104]	; 0x68
 802269e:	4654      	mov	r4, sl
 80226a0:	2205      	movs	r2, #5
 80226a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226a6:	4858      	ldr	r0, [pc, #352]	; (8022808 <_vfiprintf_r+0x24c>)
 80226a8:	f7dd fe1a 	bl	80002e0 <memchr>
 80226ac:	9a04      	ldr	r2, [sp, #16]
 80226ae:	b9d8      	cbnz	r0, 80226e8 <_vfiprintf_r+0x12c>
 80226b0:	06d1      	lsls	r1, r2, #27
 80226b2:	bf44      	itt	mi
 80226b4:	2320      	movmi	r3, #32
 80226b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80226ba:	0713      	lsls	r3, r2, #28
 80226bc:	bf44      	itt	mi
 80226be:	232b      	movmi	r3, #43	; 0x2b
 80226c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80226c4:	f89a 3000 	ldrb.w	r3, [sl]
 80226c8:	2b2a      	cmp	r3, #42	; 0x2a
 80226ca:	d015      	beq.n	80226f8 <_vfiprintf_r+0x13c>
 80226cc:	9a07      	ldr	r2, [sp, #28]
 80226ce:	4654      	mov	r4, sl
 80226d0:	2000      	movs	r0, #0
 80226d2:	f04f 0c0a 	mov.w	ip, #10
 80226d6:	4621      	mov	r1, r4
 80226d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80226dc:	3b30      	subs	r3, #48	; 0x30
 80226de:	2b09      	cmp	r3, #9
 80226e0:	d94e      	bls.n	8022780 <_vfiprintf_r+0x1c4>
 80226e2:	b1b0      	cbz	r0, 8022712 <_vfiprintf_r+0x156>
 80226e4:	9207      	str	r2, [sp, #28]
 80226e6:	e014      	b.n	8022712 <_vfiprintf_r+0x156>
 80226e8:	eba0 0308 	sub.w	r3, r0, r8
 80226ec:	fa09 f303 	lsl.w	r3, r9, r3
 80226f0:	4313      	orrs	r3, r2
 80226f2:	9304      	str	r3, [sp, #16]
 80226f4:	46a2      	mov	sl, r4
 80226f6:	e7d2      	b.n	802269e <_vfiprintf_r+0xe2>
 80226f8:	9b03      	ldr	r3, [sp, #12]
 80226fa:	1d19      	adds	r1, r3, #4
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	9103      	str	r1, [sp, #12]
 8022700:	2b00      	cmp	r3, #0
 8022702:	bfbb      	ittet	lt
 8022704:	425b      	neglt	r3, r3
 8022706:	f042 0202 	orrlt.w	r2, r2, #2
 802270a:	9307      	strge	r3, [sp, #28]
 802270c:	9307      	strlt	r3, [sp, #28]
 802270e:	bfb8      	it	lt
 8022710:	9204      	strlt	r2, [sp, #16]
 8022712:	7823      	ldrb	r3, [r4, #0]
 8022714:	2b2e      	cmp	r3, #46	; 0x2e
 8022716:	d10c      	bne.n	8022732 <_vfiprintf_r+0x176>
 8022718:	7863      	ldrb	r3, [r4, #1]
 802271a:	2b2a      	cmp	r3, #42	; 0x2a
 802271c:	d135      	bne.n	802278a <_vfiprintf_r+0x1ce>
 802271e:	9b03      	ldr	r3, [sp, #12]
 8022720:	1d1a      	adds	r2, r3, #4
 8022722:	681b      	ldr	r3, [r3, #0]
 8022724:	9203      	str	r2, [sp, #12]
 8022726:	2b00      	cmp	r3, #0
 8022728:	bfb8      	it	lt
 802272a:	f04f 33ff 	movlt.w	r3, #4294967295
 802272e:	3402      	adds	r4, #2
 8022730:	9305      	str	r3, [sp, #20]
 8022732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022818 <_vfiprintf_r+0x25c>
 8022736:	7821      	ldrb	r1, [r4, #0]
 8022738:	2203      	movs	r2, #3
 802273a:	4650      	mov	r0, sl
 802273c:	f7dd fdd0 	bl	80002e0 <memchr>
 8022740:	b140      	cbz	r0, 8022754 <_vfiprintf_r+0x198>
 8022742:	2340      	movs	r3, #64	; 0x40
 8022744:	eba0 000a 	sub.w	r0, r0, sl
 8022748:	fa03 f000 	lsl.w	r0, r3, r0
 802274c:	9b04      	ldr	r3, [sp, #16]
 802274e:	4303      	orrs	r3, r0
 8022750:	3401      	adds	r4, #1
 8022752:	9304      	str	r3, [sp, #16]
 8022754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022758:	482c      	ldr	r0, [pc, #176]	; (802280c <_vfiprintf_r+0x250>)
 802275a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802275e:	2206      	movs	r2, #6
 8022760:	f7dd fdbe 	bl	80002e0 <memchr>
 8022764:	2800      	cmp	r0, #0
 8022766:	d03f      	beq.n	80227e8 <_vfiprintf_r+0x22c>
 8022768:	4b29      	ldr	r3, [pc, #164]	; (8022810 <_vfiprintf_r+0x254>)
 802276a:	bb1b      	cbnz	r3, 80227b4 <_vfiprintf_r+0x1f8>
 802276c:	9b03      	ldr	r3, [sp, #12]
 802276e:	3307      	adds	r3, #7
 8022770:	f023 0307 	bic.w	r3, r3, #7
 8022774:	3308      	adds	r3, #8
 8022776:	9303      	str	r3, [sp, #12]
 8022778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802277a:	443b      	add	r3, r7
 802277c:	9309      	str	r3, [sp, #36]	; 0x24
 802277e:	e767      	b.n	8022650 <_vfiprintf_r+0x94>
 8022780:	fb0c 3202 	mla	r2, ip, r2, r3
 8022784:	460c      	mov	r4, r1
 8022786:	2001      	movs	r0, #1
 8022788:	e7a5      	b.n	80226d6 <_vfiprintf_r+0x11a>
 802278a:	2300      	movs	r3, #0
 802278c:	3401      	adds	r4, #1
 802278e:	9305      	str	r3, [sp, #20]
 8022790:	4619      	mov	r1, r3
 8022792:	f04f 0c0a 	mov.w	ip, #10
 8022796:	4620      	mov	r0, r4
 8022798:	f810 2b01 	ldrb.w	r2, [r0], #1
 802279c:	3a30      	subs	r2, #48	; 0x30
 802279e:	2a09      	cmp	r2, #9
 80227a0:	d903      	bls.n	80227aa <_vfiprintf_r+0x1ee>
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d0c5      	beq.n	8022732 <_vfiprintf_r+0x176>
 80227a6:	9105      	str	r1, [sp, #20]
 80227a8:	e7c3      	b.n	8022732 <_vfiprintf_r+0x176>
 80227aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80227ae:	4604      	mov	r4, r0
 80227b0:	2301      	movs	r3, #1
 80227b2:	e7f0      	b.n	8022796 <_vfiprintf_r+0x1da>
 80227b4:	ab03      	add	r3, sp, #12
 80227b6:	9300      	str	r3, [sp, #0]
 80227b8:	462a      	mov	r2, r5
 80227ba:	4b16      	ldr	r3, [pc, #88]	; (8022814 <_vfiprintf_r+0x258>)
 80227bc:	a904      	add	r1, sp, #16
 80227be:	4630      	mov	r0, r6
 80227c0:	f3af 8000 	nop.w
 80227c4:	4607      	mov	r7, r0
 80227c6:	1c78      	adds	r0, r7, #1
 80227c8:	d1d6      	bne.n	8022778 <_vfiprintf_r+0x1bc>
 80227ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80227cc:	07d9      	lsls	r1, r3, #31
 80227ce:	d405      	bmi.n	80227dc <_vfiprintf_r+0x220>
 80227d0:	89ab      	ldrh	r3, [r5, #12]
 80227d2:	059a      	lsls	r2, r3, #22
 80227d4:	d402      	bmi.n	80227dc <_vfiprintf_r+0x220>
 80227d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80227d8:	f000 fd22 	bl	8023220 <__retarget_lock_release_recursive>
 80227dc:	89ab      	ldrh	r3, [r5, #12]
 80227de:	065b      	lsls	r3, r3, #25
 80227e0:	f53f af12 	bmi.w	8022608 <_vfiprintf_r+0x4c>
 80227e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80227e6:	e711      	b.n	802260c <_vfiprintf_r+0x50>
 80227e8:	ab03      	add	r3, sp, #12
 80227ea:	9300      	str	r3, [sp, #0]
 80227ec:	462a      	mov	r2, r5
 80227ee:	4b09      	ldr	r3, [pc, #36]	; (8022814 <_vfiprintf_r+0x258>)
 80227f0:	a904      	add	r1, sp, #16
 80227f2:	4630      	mov	r0, r6
 80227f4:	f000 f880 	bl	80228f8 <_printf_i>
 80227f8:	e7e4      	b.n	80227c4 <_vfiprintf_r+0x208>
 80227fa:	bf00      	nop
 80227fc:	08025c4c 	.word	0x08025c4c
 8022800:	08025c6c 	.word	0x08025c6c
 8022804:	08025c2c 	.word	0x08025c2c
 8022808:	08025b80 	.word	0x08025b80
 802280c:	08025b8a 	.word	0x08025b8a
 8022810:	00000000 	.word	0x00000000
 8022814:	08022597 	.word	0x08022597
 8022818:	08025b86 	.word	0x08025b86

0802281c <_printf_common>:
 802281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022820:	4616      	mov	r6, r2
 8022822:	4699      	mov	r9, r3
 8022824:	688a      	ldr	r2, [r1, #8]
 8022826:	690b      	ldr	r3, [r1, #16]
 8022828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802282c:	4293      	cmp	r3, r2
 802282e:	bfb8      	it	lt
 8022830:	4613      	movlt	r3, r2
 8022832:	6033      	str	r3, [r6, #0]
 8022834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022838:	4607      	mov	r7, r0
 802283a:	460c      	mov	r4, r1
 802283c:	b10a      	cbz	r2, 8022842 <_printf_common+0x26>
 802283e:	3301      	adds	r3, #1
 8022840:	6033      	str	r3, [r6, #0]
 8022842:	6823      	ldr	r3, [r4, #0]
 8022844:	0699      	lsls	r1, r3, #26
 8022846:	bf42      	ittt	mi
 8022848:	6833      	ldrmi	r3, [r6, #0]
 802284a:	3302      	addmi	r3, #2
 802284c:	6033      	strmi	r3, [r6, #0]
 802284e:	6825      	ldr	r5, [r4, #0]
 8022850:	f015 0506 	ands.w	r5, r5, #6
 8022854:	d106      	bne.n	8022864 <_printf_common+0x48>
 8022856:	f104 0a19 	add.w	sl, r4, #25
 802285a:	68e3      	ldr	r3, [r4, #12]
 802285c:	6832      	ldr	r2, [r6, #0]
 802285e:	1a9b      	subs	r3, r3, r2
 8022860:	42ab      	cmp	r3, r5
 8022862:	dc26      	bgt.n	80228b2 <_printf_common+0x96>
 8022864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022868:	1e13      	subs	r3, r2, #0
 802286a:	6822      	ldr	r2, [r4, #0]
 802286c:	bf18      	it	ne
 802286e:	2301      	movne	r3, #1
 8022870:	0692      	lsls	r2, r2, #26
 8022872:	d42b      	bmi.n	80228cc <_printf_common+0xb0>
 8022874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022878:	4649      	mov	r1, r9
 802287a:	4638      	mov	r0, r7
 802287c:	47c0      	blx	r8
 802287e:	3001      	adds	r0, #1
 8022880:	d01e      	beq.n	80228c0 <_printf_common+0xa4>
 8022882:	6823      	ldr	r3, [r4, #0]
 8022884:	68e5      	ldr	r5, [r4, #12]
 8022886:	6832      	ldr	r2, [r6, #0]
 8022888:	f003 0306 	and.w	r3, r3, #6
 802288c:	2b04      	cmp	r3, #4
 802288e:	bf08      	it	eq
 8022890:	1aad      	subeq	r5, r5, r2
 8022892:	68a3      	ldr	r3, [r4, #8]
 8022894:	6922      	ldr	r2, [r4, #16]
 8022896:	bf0c      	ite	eq
 8022898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802289c:	2500      	movne	r5, #0
 802289e:	4293      	cmp	r3, r2
 80228a0:	bfc4      	itt	gt
 80228a2:	1a9b      	subgt	r3, r3, r2
 80228a4:	18ed      	addgt	r5, r5, r3
 80228a6:	2600      	movs	r6, #0
 80228a8:	341a      	adds	r4, #26
 80228aa:	42b5      	cmp	r5, r6
 80228ac:	d11a      	bne.n	80228e4 <_printf_common+0xc8>
 80228ae:	2000      	movs	r0, #0
 80228b0:	e008      	b.n	80228c4 <_printf_common+0xa8>
 80228b2:	2301      	movs	r3, #1
 80228b4:	4652      	mov	r2, sl
 80228b6:	4649      	mov	r1, r9
 80228b8:	4638      	mov	r0, r7
 80228ba:	47c0      	blx	r8
 80228bc:	3001      	adds	r0, #1
 80228be:	d103      	bne.n	80228c8 <_printf_common+0xac>
 80228c0:	f04f 30ff 	mov.w	r0, #4294967295
 80228c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228c8:	3501      	adds	r5, #1
 80228ca:	e7c6      	b.n	802285a <_printf_common+0x3e>
 80228cc:	18e1      	adds	r1, r4, r3
 80228ce:	1c5a      	adds	r2, r3, #1
 80228d0:	2030      	movs	r0, #48	; 0x30
 80228d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80228d6:	4422      	add	r2, r4
 80228d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80228dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80228e0:	3302      	adds	r3, #2
 80228e2:	e7c7      	b.n	8022874 <_printf_common+0x58>
 80228e4:	2301      	movs	r3, #1
 80228e6:	4622      	mov	r2, r4
 80228e8:	4649      	mov	r1, r9
 80228ea:	4638      	mov	r0, r7
 80228ec:	47c0      	blx	r8
 80228ee:	3001      	adds	r0, #1
 80228f0:	d0e6      	beq.n	80228c0 <_printf_common+0xa4>
 80228f2:	3601      	adds	r6, #1
 80228f4:	e7d9      	b.n	80228aa <_printf_common+0x8e>
	...

080228f8 <_printf_i>:
 80228f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80228fc:	7e0f      	ldrb	r7, [r1, #24]
 80228fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022900:	2f78      	cmp	r7, #120	; 0x78
 8022902:	4691      	mov	r9, r2
 8022904:	4680      	mov	r8, r0
 8022906:	460c      	mov	r4, r1
 8022908:	469a      	mov	sl, r3
 802290a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802290e:	d807      	bhi.n	8022920 <_printf_i+0x28>
 8022910:	2f62      	cmp	r7, #98	; 0x62
 8022912:	d80a      	bhi.n	802292a <_printf_i+0x32>
 8022914:	2f00      	cmp	r7, #0
 8022916:	f000 80d8 	beq.w	8022aca <_printf_i+0x1d2>
 802291a:	2f58      	cmp	r7, #88	; 0x58
 802291c:	f000 80a3 	beq.w	8022a66 <_printf_i+0x16e>
 8022920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022928:	e03a      	b.n	80229a0 <_printf_i+0xa8>
 802292a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802292e:	2b15      	cmp	r3, #21
 8022930:	d8f6      	bhi.n	8022920 <_printf_i+0x28>
 8022932:	a101      	add	r1, pc, #4	; (adr r1, 8022938 <_printf_i+0x40>)
 8022934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022938:	08022991 	.word	0x08022991
 802293c:	080229a5 	.word	0x080229a5
 8022940:	08022921 	.word	0x08022921
 8022944:	08022921 	.word	0x08022921
 8022948:	08022921 	.word	0x08022921
 802294c:	08022921 	.word	0x08022921
 8022950:	080229a5 	.word	0x080229a5
 8022954:	08022921 	.word	0x08022921
 8022958:	08022921 	.word	0x08022921
 802295c:	08022921 	.word	0x08022921
 8022960:	08022921 	.word	0x08022921
 8022964:	08022ab1 	.word	0x08022ab1
 8022968:	080229d5 	.word	0x080229d5
 802296c:	08022a93 	.word	0x08022a93
 8022970:	08022921 	.word	0x08022921
 8022974:	08022921 	.word	0x08022921
 8022978:	08022ad3 	.word	0x08022ad3
 802297c:	08022921 	.word	0x08022921
 8022980:	080229d5 	.word	0x080229d5
 8022984:	08022921 	.word	0x08022921
 8022988:	08022921 	.word	0x08022921
 802298c:	08022a9b 	.word	0x08022a9b
 8022990:	682b      	ldr	r3, [r5, #0]
 8022992:	1d1a      	adds	r2, r3, #4
 8022994:	681b      	ldr	r3, [r3, #0]
 8022996:	602a      	str	r2, [r5, #0]
 8022998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802299c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80229a0:	2301      	movs	r3, #1
 80229a2:	e0a3      	b.n	8022aec <_printf_i+0x1f4>
 80229a4:	6820      	ldr	r0, [r4, #0]
 80229a6:	6829      	ldr	r1, [r5, #0]
 80229a8:	0606      	lsls	r6, r0, #24
 80229aa:	f101 0304 	add.w	r3, r1, #4
 80229ae:	d50a      	bpl.n	80229c6 <_printf_i+0xce>
 80229b0:	680e      	ldr	r6, [r1, #0]
 80229b2:	602b      	str	r3, [r5, #0]
 80229b4:	2e00      	cmp	r6, #0
 80229b6:	da03      	bge.n	80229c0 <_printf_i+0xc8>
 80229b8:	232d      	movs	r3, #45	; 0x2d
 80229ba:	4276      	negs	r6, r6
 80229bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80229c0:	485e      	ldr	r0, [pc, #376]	; (8022b3c <_printf_i+0x244>)
 80229c2:	230a      	movs	r3, #10
 80229c4:	e019      	b.n	80229fa <_printf_i+0x102>
 80229c6:	680e      	ldr	r6, [r1, #0]
 80229c8:	602b      	str	r3, [r5, #0]
 80229ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80229ce:	bf18      	it	ne
 80229d0:	b236      	sxthne	r6, r6
 80229d2:	e7ef      	b.n	80229b4 <_printf_i+0xbc>
 80229d4:	682b      	ldr	r3, [r5, #0]
 80229d6:	6820      	ldr	r0, [r4, #0]
 80229d8:	1d19      	adds	r1, r3, #4
 80229da:	6029      	str	r1, [r5, #0]
 80229dc:	0601      	lsls	r1, r0, #24
 80229de:	d501      	bpl.n	80229e4 <_printf_i+0xec>
 80229e0:	681e      	ldr	r6, [r3, #0]
 80229e2:	e002      	b.n	80229ea <_printf_i+0xf2>
 80229e4:	0646      	lsls	r6, r0, #25
 80229e6:	d5fb      	bpl.n	80229e0 <_printf_i+0xe8>
 80229e8:	881e      	ldrh	r6, [r3, #0]
 80229ea:	4854      	ldr	r0, [pc, #336]	; (8022b3c <_printf_i+0x244>)
 80229ec:	2f6f      	cmp	r7, #111	; 0x6f
 80229ee:	bf0c      	ite	eq
 80229f0:	2308      	moveq	r3, #8
 80229f2:	230a      	movne	r3, #10
 80229f4:	2100      	movs	r1, #0
 80229f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80229fa:	6865      	ldr	r5, [r4, #4]
 80229fc:	60a5      	str	r5, [r4, #8]
 80229fe:	2d00      	cmp	r5, #0
 8022a00:	bfa2      	ittt	ge
 8022a02:	6821      	ldrge	r1, [r4, #0]
 8022a04:	f021 0104 	bicge.w	r1, r1, #4
 8022a08:	6021      	strge	r1, [r4, #0]
 8022a0a:	b90e      	cbnz	r6, 8022a10 <_printf_i+0x118>
 8022a0c:	2d00      	cmp	r5, #0
 8022a0e:	d04d      	beq.n	8022aac <_printf_i+0x1b4>
 8022a10:	4615      	mov	r5, r2
 8022a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8022a16:	fb03 6711 	mls	r7, r3, r1, r6
 8022a1a:	5dc7      	ldrb	r7, [r0, r7]
 8022a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022a20:	4637      	mov	r7, r6
 8022a22:	42bb      	cmp	r3, r7
 8022a24:	460e      	mov	r6, r1
 8022a26:	d9f4      	bls.n	8022a12 <_printf_i+0x11a>
 8022a28:	2b08      	cmp	r3, #8
 8022a2a:	d10b      	bne.n	8022a44 <_printf_i+0x14c>
 8022a2c:	6823      	ldr	r3, [r4, #0]
 8022a2e:	07de      	lsls	r6, r3, #31
 8022a30:	d508      	bpl.n	8022a44 <_printf_i+0x14c>
 8022a32:	6923      	ldr	r3, [r4, #16]
 8022a34:	6861      	ldr	r1, [r4, #4]
 8022a36:	4299      	cmp	r1, r3
 8022a38:	bfde      	ittt	le
 8022a3a:	2330      	movle	r3, #48	; 0x30
 8022a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022a40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022a44:	1b52      	subs	r2, r2, r5
 8022a46:	6122      	str	r2, [r4, #16]
 8022a48:	f8cd a000 	str.w	sl, [sp]
 8022a4c:	464b      	mov	r3, r9
 8022a4e:	aa03      	add	r2, sp, #12
 8022a50:	4621      	mov	r1, r4
 8022a52:	4640      	mov	r0, r8
 8022a54:	f7ff fee2 	bl	802281c <_printf_common>
 8022a58:	3001      	adds	r0, #1
 8022a5a:	d14c      	bne.n	8022af6 <_printf_i+0x1fe>
 8022a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8022a60:	b004      	add	sp, #16
 8022a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a66:	4835      	ldr	r0, [pc, #212]	; (8022b3c <_printf_i+0x244>)
 8022a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022a6c:	6829      	ldr	r1, [r5, #0]
 8022a6e:	6823      	ldr	r3, [r4, #0]
 8022a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8022a74:	6029      	str	r1, [r5, #0]
 8022a76:	061d      	lsls	r5, r3, #24
 8022a78:	d514      	bpl.n	8022aa4 <_printf_i+0x1ac>
 8022a7a:	07df      	lsls	r7, r3, #31
 8022a7c:	bf44      	itt	mi
 8022a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8022a82:	6023      	strmi	r3, [r4, #0]
 8022a84:	b91e      	cbnz	r6, 8022a8e <_printf_i+0x196>
 8022a86:	6823      	ldr	r3, [r4, #0]
 8022a88:	f023 0320 	bic.w	r3, r3, #32
 8022a8c:	6023      	str	r3, [r4, #0]
 8022a8e:	2310      	movs	r3, #16
 8022a90:	e7b0      	b.n	80229f4 <_printf_i+0xfc>
 8022a92:	6823      	ldr	r3, [r4, #0]
 8022a94:	f043 0320 	orr.w	r3, r3, #32
 8022a98:	6023      	str	r3, [r4, #0]
 8022a9a:	2378      	movs	r3, #120	; 0x78
 8022a9c:	4828      	ldr	r0, [pc, #160]	; (8022b40 <_printf_i+0x248>)
 8022a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022aa2:	e7e3      	b.n	8022a6c <_printf_i+0x174>
 8022aa4:	0659      	lsls	r1, r3, #25
 8022aa6:	bf48      	it	mi
 8022aa8:	b2b6      	uxthmi	r6, r6
 8022aaa:	e7e6      	b.n	8022a7a <_printf_i+0x182>
 8022aac:	4615      	mov	r5, r2
 8022aae:	e7bb      	b.n	8022a28 <_printf_i+0x130>
 8022ab0:	682b      	ldr	r3, [r5, #0]
 8022ab2:	6826      	ldr	r6, [r4, #0]
 8022ab4:	6961      	ldr	r1, [r4, #20]
 8022ab6:	1d18      	adds	r0, r3, #4
 8022ab8:	6028      	str	r0, [r5, #0]
 8022aba:	0635      	lsls	r5, r6, #24
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	d501      	bpl.n	8022ac4 <_printf_i+0x1cc>
 8022ac0:	6019      	str	r1, [r3, #0]
 8022ac2:	e002      	b.n	8022aca <_printf_i+0x1d2>
 8022ac4:	0670      	lsls	r0, r6, #25
 8022ac6:	d5fb      	bpl.n	8022ac0 <_printf_i+0x1c8>
 8022ac8:	8019      	strh	r1, [r3, #0]
 8022aca:	2300      	movs	r3, #0
 8022acc:	6123      	str	r3, [r4, #16]
 8022ace:	4615      	mov	r5, r2
 8022ad0:	e7ba      	b.n	8022a48 <_printf_i+0x150>
 8022ad2:	682b      	ldr	r3, [r5, #0]
 8022ad4:	1d1a      	adds	r2, r3, #4
 8022ad6:	602a      	str	r2, [r5, #0]
 8022ad8:	681d      	ldr	r5, [r3, #0]
 8022ada:	6862      	ldr	r2, [r4, #4]
 8022adc:	2100      	movs	r1, #0
 8022ade:	4628      	mov	r0, r5
 8022ae0:	f7dd fbfe 	bl	80002e0 <memchr>
 8022ae4:	b108      	cbz	r0, 8022aea <_printf_i+0x1f2>
 8022ae6:	1b40      	subs	r0, r0, r5
 8022ae8:	6060      	str	r0, [r4, #4]
 8022aea:	6863      	ldr	r3, [r4, #4]
 8022aec:	6123      	str	r3, [r4, #16]
 8022aee:	2300      	movs	r3, #0
 8022af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022af4:	e7a8      	b.n	8022a48 <_printf_i+0x150>
 8022af6:	6923      	ldr	r3, [r4, #16]
 8022af8:	462a      	mov	r2, r5
 8022afa:	4649      	mov	r1, r9
 8022afc:	4640      	mov	r0, r8
 8022afe:	47d0      	blx	sl
 8022b00:	3001      	adds	r0, #1
 8022b02:	d0ab      	beq.n	8022a5c <_printf_i+0x164>
 8022b04:	6823      	ldr	r3, [r4, #0]
 8022b06:	079b      	lsls	r3, r3, #30
 8022b08:	d413      	bmi.n	8022b32 <_printf_i+0x23a>
 8022b0a:	68e0      	ldr	r0, [r4, #12]
 8022b0c:	9b03      	ldr	r3, [sp, #12]
 8022b0e:	4298      	cmp	r0, r3
 8022b10:	bfb8      	it	lt
 8022b12:	4618      	movlt	r0, r3
 8022b14:	e7a4      	b.n	8022a60 <_printf_i+0x168>
 8022b16:	2301      	movs	r3, #1
 8022b18:	4632      	mov	r2, r6
 8022b1a:	4649      	mov	r1, r9
 8022b1c:	4640      	mov	r0, r8
 8022b1e:	47d0      	blx	sl
 8022b20:	3001      	adds	r0, #1
 8022b22:	d09b      	beq.n	8022a5c <_printf_i+0x164>
 8022b24:	3501      	adds	r5, #1
 8022b26:	68e3      	ldr	r3, [r4, #12]
 8022b28:	9903      	ldr	r1, [sp, #12]
 8022b2a:	1a5b      	subs	r3, r3, r1
 8022b2c:	42ab      	cmp	r3, r5
 8022b2e:	dcf2      	bgt.n	8022b16 <_printf_i+0x21e>
 8022b30:	e7eb      	b.n	8022b0a <_printf_i+0x212>
 8022b32:	2500      	movs	r5, #0
 8022b34:	f104 0619 	add.w	r6, r4, #25
 8022b38:	e7f5      	b.n	8022b26 <_printf_i+0x22e>
 8022b3a:	bf00      	nop
 8022b3c:	08025b91 	.word	0x08025b91
 8022b40:	08025ba2 	.word	0x08025ba2

08022b44 <rand>:
 8022b44:	4b16      	ldr	r3, [pc, #88]	; (8022ba0 <rand+0x5c>)
 8022b46:	b510      	push	{r4, lr}
 8022b48:	681c      	ldr	r4, [r3, #0]
 8022b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022b4c:	b9b3      	cbnz	r3, 8022b7c <rand+0x38>
 8022b4e:	2018      	movs	r0, #24
 8022b50:	f7ff fc04 	bl	802235c <malloc>
 8022b54:	63a0      	str	r0, [r4, #56]	; 0x38
 8022b56:	b928      	cbnz	r0, 8022b64 <rand+0x20>
 8022b58:	4602      	mov	r2, r0
 8022b5a:	4b12      	ldr	r3, [pc, #72]	; (8022ba4 <rand+0x60>)
 8022b5c:	4812      	ldr	r0, [pc, #72]	; (8022ba8 <rand+0x64>)
 8022b5e:	214e      	movs	r1, #78	; 0x4e
 8022b60:	f7ff fb8e 	bl	8022280 <__assert_func>
 8022b64:	4a11      	ldr	r2, [pc, #68]	; (8022bac <rand+0x68>)
 8022b66:	4b12      	ldr	r3, [pc, #72]	; (8022bb0 <rand+0x6c>)
 8022b68:	e9c0 2300 	strd	r2, r3, [r0]
 8022b6c:	4b11      	ldr	r3, [pc, #68]	; (8022bb4 <rand+0x70>)
 8022b6e:	6083      	str	r3, [r0, #8]
 8022b70:	230b      	movs	r3, #11
 8022b72:	8183      	strh	r3, [r0, #12]
 8022b74:	2201      	movs	r2, #1
 8022b76:	2300      	movs	r3, #0
 8022b78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022b7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022b7e:	4a0e      	ldr	r2, [pc, #56]	; (8022bb8 <rand+0x74>)
 8022b80:	6920      	ldr	r0, [r4, #16]
 8022b82:	6963      	ldr	r3, [r4, #20]
 8022b84:	490d      	ldr	r1, [pc, #52]	; (8022bbc <rand+0x78>)
 8022b86:	4342      	muls	r2, r0
 8022b88:	fb01 2203 	mla	r2, r1, r3, r2
 8022b8c:	fba0 0101 	umull	r0, r1, r0, r1
 8022b90:	1c43      	adds	r3, r0, #1
 8022b92:	eb42 0001 	adc.w	r0, r2, r1
 8022b96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022b9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022b9e:	bd10      	pop	{r4, pc}
 8022ba0:	240000b4 	.word	0x240000b4
 8022ba4:	08025bb8 	.word	0x08025bb8
 8022ba8:	08025bcf 	.word	0x08025bcf
 8022bac:	abcd330e 	.word	0xabcd330e
 8022bb0:	e66d1234 	.word	0xe66d1234
 8022bb4:	0005deec 	.word	0x0005deec
 8022bb8:	5851f42d 	.word	0x5851f42d
 8022bbc:	4c957f2d 	.word	0x4c957f2d

08022bc0 <_sbrk_r>:
 8022bc0:	b538      	push	{r3, r4, r5, lr}
 8022bc2:	4d06      	ldr	r5, [pc, #24]	; (8022bdc <_sbrk_r+0x1c>)
 8022bc4:	2300      	movs	r3, #0
 8022bc6:	4604      	mov	r4, r0
 8022bc8:	4608      	mov	r0, r1
 8022bca:	602b      	str	r3, [r5, #0]
 8022bcc:	f7de fcb2 	bl	8001534 <_sbrk>
 8022bd0:	1c43      	adds	r3, r0, #1
 8022bd2:	d102      	bne.n	8022bda <_sbrk_r+0x1a>
 8022bd4:	682b      	ldr	r3, [r5, #0]
 8022bd6:	b103      	cbz	r3, 8022bda <_sbrk_r+0x1a>
 8022bd8:	6023      	str	r3, [r4, #0]
 8022bda:	bd38      	pop	{r3, r4, r5, pc}
 8022bdc:	2400f4c8 	.word	0x2400f4c8

08022be0 <_raise_r>:
 8022be0:	291f      	cmp	r1, #31
 8022be2:	b538      	push	{r3, r4, r5, lr}
 8022be4:	4604      	mov	r4, r0
 8022be6:	460d      	mov	r5, r1
 8022be8:	d904      	bls.n	8022bf4 <_raise_r+0x14>
 8022bea:	2316      	movs	r3, #22
 8022bec:	6003      	str	r3, [r0, #0]
 8022bee:	f04f 30ff 	mov.w	r0, #4294967295
 8022bf2:	bd38      	pop	{r3, r4, r5, pc}
 8022bf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022bf6:	b112      	cbz	r2, 8022bfe <_raise_r+0x1e>
 8022bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022bfc:	b94b      	cbnz	r3, 8022c12 <_raise_r+0x32>
 8022bfe:	4620      	mov	r0, r4
 8022c00:	f000 f830 	bl	8022c64 <_getpid_r>
 8022c04:	462a      	mov	r2, r5
 8022c06:	4601      	mov	r1, r0
 8022c08:	4620      	mov	r0, r4
 8022c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c0e:	f000 b817 	b.w	8022c40 <_kill_r>
 8022c12:	2b01      	cmp	r3, #1
 8022c14:	d00a      	beq.n	8022c2c <_raise_r+0x4c>
 8022c16:	1c59      	adds	r1, r3, #1
 8022c18:	d103      	bne.n	8022c22 <_raise_r+0x42>
 8022c1a:	2316      	movs	r3, #22
 8022c1c:	6003      	str	r3, [r0, #0]
 8022c1e:	2001      	movs	r0, #1
 8022c20:	e7e7      	b.n	8022bf2 <_raise_r+0x12>
 8022c22:	2400      	movs	r4, #0
 8022c24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022c28:	4628      	mov	r0, r5
 8022c2a:	4798      	blx	r3
 8022c2c:	2000      	movs	r0, #0
 8022c2e:	e7e0      	b.n	8022bf2 <_raise_r+0x12>

08022c30 <raise>:
 8022c30:	4b02      	ldr	r3, [pc, #8]	; (8022c3c <raise+0xc>)
 8022c32:	4601      	mov	r1, r0
 8022c34:	6818      	ldr	r0, [r3, #0]
 8022c36:	f7ff bfd3 	b.w	8022be0 <_raise_r>
 8022c3a:	bf00      	nop
 8022c3c:	240000b4 	.word	0x240000b4

08022c40 <_kill_r>:
 8022c40:	b538      	push	{r3, r4, r5, lr}
 8022c42:	4d07      	ldr	r5, [pc, #28]	; (8022c60 <_kill_r+0x20>)
 8022c44:	2300      	movs	r3, #0
 8022c46:	4604      	mov	r4, r0
 8022c48:	4608      	mov	r0, r1
 8022c4a:	4611      	mov	r1, r2
 8022c4c:	602b      	str	r3, [r5, #0]
 8022c4e:	f7de fc3b 	bl	80014c8 <_kill>
 8022c52:	1c43      	adds	r3, r0, #1
 8022c54:	d102      	bne.n	8022c5c <_kill_r+0x1c>
 8022c56:	682b      	ldr	r3, [r5, #0]
 8022c58:	b103      	cbz	r3, 8022c5c <_kill_r+0x1c>
 8022c5a:	6023      	str	r3, [r4, #0]
 8022c5c:	bd38      	pop	{r3, r4, r5, pc}
 8022c5e:	bf00      	nop
 8022c60:	2400f4c8 	.word	0x2400f4c8

08022c64 <_getpid_r>:
 8022c64:	f7de bc2e 	b.w	80014c4 <_getpid>

08022c68 <__swbuf_r>:
 8022c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c6a:	460e      	mov	r6, r1
 8022c6c:	4614      	mov	r4, r2
 8022c6e:	4605      	mov	r5, r0
 8022c70:	b118      	cbz	r0, 8022c7a <__swbuf_r+0x12>
 8022c72:	6983      	ldr	r3, [r0, #24]
 8022c74:	b90b      	cbnz	r3, 8022c7a <__swbuf_r+0x12>
 8022c76:	f000 fa33 	bl	80230e0 <__sinit>
 8022c7a:	4b21      	ldr	r3, [pc, #132]	; (8022d00 <__swbuf_r+0x98>)
 8022c7c:	429c      	cmp	r4, r3
 8022c7e:	d12b      	bne.n	8022cd8 <__swbuf_r+0x70>
 8022c80:	686c      	ldr	r4, [r5, #4]
 8022c82:	69a3      	ldr	r3, [r4, #24]
 8022c84:	60a3      	str	r3, [r4, #8]
 8022c86:	89a3      	ldrh	r3, [r4, #12]
 8022c88:	071a      	lsls	r2, r3, #28
 8022c8a:	d52f      	bpl.n	8022cec <__swbuf_r+0x84>
 8022c8c:	6923      	ldr	r3, [r4, #16]
 8022c8e:	b36b      	cbz	r3, 8022cec <__swbuf_r+0x84>
 8022c90:	6923      	ldr	r3, [r4, #16]
 8022c92:	6820      	ldr	r0, [r4, #0]
 8022c94:	1ac0      	subs	r0, r0, r3
 8022c96:	6963      	ldr	r3, [r4, #20]
 8022c98:	b2f6      	uxtb	r6, r6
 8022c9a:	4283      	cmp	r3, r0
 8022c9c:	4637      	mov	r7, r6
 8022c9e:	dc04      	bgt.n	8022caa <__swbuf_r+0x42>
 8022ca0:	4621      	mov	r1, r4
 8022ca2:	4628      	mov	r0, r5
 8022ca4:	f000 f988 	bl	8022fb8 <_fflush_r>
 8022ca8:	bb30      	cbnz	r0, 8022cf8 <__swbuf_r+0x90>
 8022caa:	68a3      	ldr	r3, [r4, #8]
 8022cac:	3b01      	subs	r3, #1
 8022cae:	60a3      	str	r3, [r4, #8]
 8022cb0:	6823      	ldr	r3, [r4, #0]
 8022cb2:	1c5a      	adds	r2, r3, #1
 8022cb4:	6022      	str	r2, [r4, #0]
 8022cb6:	701e      	strb	r6, [r3, #0]
 8022cb8:	6963      	ldr	r3, [r4, #20]
 8022cba:	3001      	adds	r0, #1
 8022cbc:	4283      	cmp	r3, r0
 8022cbe:	d004      	beq.n	8022cca <__swbuf_r+0x62>
 8022cc0:	89a3      	ldrh	r3, [r4, #12]
 8022cc2:	07db      	lsls	r3, r3, #31
 8022cc4:	d506      	bpl.n	8022cd4 <__swbuf_r+0x6c>
 8022cc6:	2e0a      	cmp	r6, #10
 8022cc8:	d104      	bne.n	8022cd4 <__swbuf_r+0x6c>
 8022cca:	4621      	mov	r1, r4
 8022ccc:	4628      	mov	r0, r5
 8022cce:	f000 f973 	bl	8022fb8 <_fflush_r>
 8022cd2:	b988      	cbnz	r0, 8022cf8 <__swbuf_r+0x90>
 8022cd4:	4638      	mov	r0, r7
 8022cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022cd8:	4b0a      	ldr	r3, [pc, #40]	; (8022d04 <__swbuf_r+0x9c>)
 8022cda:	429c      	cmp	r4, r3
 8022cdc:	d101      	bne.n	8022ce2 <__swbuf_r+0x7a>
 8022cde:	68ac      	ldr	r4, [r5, #8]
 8022ce0:	e7cf      	b.n	8022c82 <__swbuf_r+0x1a>
 8022ce2:	4b09      	ldr	r3, [pc, #36]	; (8022d08 <__swbuf_r+0xa0>)
 8022ce4:	429c      	cmp	r4, r3
 8022ce6:	bf08      	it	eq
 8022ce8:	68ec      	ldreq	r4, [r5, #12]
 8022cea:	e7ca      	b.n	8022c82 <__swbuf_r+0x1a>
 8022cec:	4621      	mov	r1, r4
 8022cee:	4628      	mov	r0, r5
 8022cf0:	f000 f80c 	bl	8022d0c <__swsetup_r>
 8022cf4:	2800      	cmp	r0, #0
 8022cf6:	d0cb      	beq.n	8022c90 <__swbuf_r+0x28>
 8022cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8022cfc:	e7ea      	b.n	8022cd4 <__swbuf_r+0x6c>
 8022cfe:	bf00      	nop
 8022d00:	08025c4c 	.word	0x08025c4c
 8022d04:	08025c6c 	.word	0x08025c6c
 8022d08:	08025c2c 	.word	0x08025c2c

08022d0c <__swsetup_r>:
 8022d0c:	4b32      	ldr	r3, [pc, #200]	; (8022dd8 <__swsetup_r+0xcc>)
 8022d0e:	b570      	push	{r4, r5, r6, lr}
 8022d10:	681d      	ldr	r5, [r3, #0]
 8022d12:	4606      	mov	r6, r0
 8022d14:	460c      	mov	r4, r1
 8022d16:	b125      	cbz	r5, 8022d22 <__swsetup_r+0x16>
 8022d18:	69ab      	ldr	r3, [r5, #24]
 8022d1a:	b913      	cbnz	r3, 8022d22 <__swsetup_r+0x16>
 8022d1c:	4628      	mov	r0, r5
 8022d1e:	f000 f9df 	bl	80230e0 <__sinit>
 8022d22:	4b2e      	ldr	r3, [pc, #184]	; (8022ddc <__swsetup_r+0xd0>)
 8022d24:	429c      	cmp	r4, r3
 8022d26:	d10f      	bne.n	8022d48 <__swsetup_r+0x3c>
 8022d28:	686c      	ldr	r4, [r5, #4]
 8022d2a:	89a3      	ldrh	r3, [r4, #12]
 8022d2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022d30:	0719      	lsls	r1, r3, #28
 8022d32:	d42c      	bmi.n	8022d8e <__swsetup_r+0x82>
 8022d34:	06dd      	lsls	r5, r3, #27
 8022d36:	d411      	bmi.n	8022d5c <__swsetup_r+0x50>
 8022d38:	2309      	movs	r3, #9
 8022d3a:	6033      	str	r3, [r6, #0]
 8022d3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022d40:	81a3      	strh	r3, [r4, #12]
 8022d42:	f04f 30ff 	mov.w	r0, #4294967295
 8022d46:	e03e      	b.n	8022dc6 <__swsetup_r+0xba>
 8022d48:	4b25      	ldr	r3, [pc, #148]	; (8022de0 <__swsetup_r+0xd4>)
 8022d4a:	429c      	cmp	r4, r3
 8022d4c:	d101      	bne.n	8022d52 <__swsetup_r+0x46>
 8022d4e:	68ac      	ldr	r4, [r5, #8]
 8022d50:	e7eb      	b.n	8022d2a <__swsetup_r+0x1e>
 8022d52:	4b24      	ldr	r3, [pc, #144]	; (8022de4 <__swsetup_r+0xd8>)
 8022d54:	429c      	cmp	r4, r3
 8022d56:	bf08      	it	eq
 8022d58:	68ec      	ldreq	r4, [r5, #12]
 8022d5a:	e7e6      	b.n	8022d2a <__swsetup_r+0x1e>
 8022d5c:	0758      	lsls	r0, r3, #29
 8022d5e:	d512      	bpl.n	8022d86 <__swsetup_r+0x7a>
 8022d60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022d62:	b141      	cbz	r1, 8022d76 <__swsetup_r+0x6a>
 8022d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d68:	4299      	cmp	r1, r3
 8022d6a:	d002      	beq.n	8022d72 <__swsetup_r+0x66>
 8022d6c:	4630      	mov	r0, r6
 8022d6e:	f7ff fb1b 	bl	80223a8 <_free_r>
 8022d72:	2300      	movs	r3, #0
 8022d74:	6363      	str	r3, [r4, #52]	; 0x34
 8022d76:	89a3      	ldrh	r3, [r4, #12]
 8022d78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022d7c:	81a3      	strh	r3, [r4, #12]
 8022d7e:	2300      	movs	r3, #0
 8022d80:	6063      	str	r3, [r4, #4]
 8022d82:	6923      	ldr	r3, [r4, #16]
 8022d84:	6023      	str	r3, [r4, #0]
 8022d86:	89a3      	ldrh	r3, [r4, #12]
 8022d88:	f043 0308 	orr.w	r3, r3, #8
 8022d8c:	81a3      	strh	r3, [r4, #12]
 8022d8e:	6923      	ldr	r3, [r4, #16]
 8022d90:	b94b      	cbnz	r3, 8022da6 <__swsetup_r+0x9a>
 8022d92:	89a3      	ldrh	r3, [r4, #12]
 8022d94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022d9c:	d003      	beq.n	8022da6 <__swsetup_r+0x9a>
 8022d9e:	4621      	mov	r1, r4
 8022da0:	4630      	mov	r0, r6
 8022da2:	f000 fa63 	bl	802326c <__smakebuf_r>
 8022da6:	89a0      	ldrh	r0, [r4, #12]
 8022da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022dac:	f010 0301 	ands.w	r3, r0, #1
 8022db0:	d00a      	beq.n	8022dc8 <__swsetup_r+0xbc>
 8022db2:	2300      	movs	r3, #0
 8022db4:	60a3      	str	r3, [r4, #8]
 8022db6:	6963      	ldr	r3, [r4, #20]
 8022db8:	425b      	negs	r3, r3
 8022dba:	61a3      	str	r3, [r4, #24]
 8022dbc:	6923      	ldr	r3, [r4, #16]
 8022dbe:	b943      	cbnz	r3, 8022dd2 <__swsetup_r+0xc6>
 8022dc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022dc4:	d1ba      	bne.n	8022d3c <__swsetup_r+0x30>
 8022dc6:	bd70      	pop	{r4, r5, r6, pc}
 8022dc8:	0781      	lsls	r1, r0, #30
 8022dca:	bf58      	it	pl
 8022dcc:	6963      	ldrpl	r3, [r4, #20]
 8022dce:	60a3      	str	r3, [r4, #8]
 8022dd0:	e7f4      	b.n	8022dbc <__swsetup_r+0xb0>
 8022dd2:	2000      	movs	r0, #0
 8022dd4:	e7f7      	b.n	8022dc6 <__swsetup_r+0xba>
 8022dd6:	bf00      	nop
 8022dd8:	240000b4 	.word	0x240000b4
 8022ddc:	08025c4c 	.word	0x08025c4c
 8022de0:	08025c6c 	.word	0x08025c6c
 8022de4:	08025c2c 	.word	0x08025c2c

08022de8 <__register_exitproc>:
 8022de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022dec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8022ea8 <__register_exitproc+0xc0>
 8022df0:	4606      	mov	r6, r0
 8022df2:	f8d8 0000 	ldr.w	r0, [r8]
 8022df6:	461f      	mov	r7, r3
 8022df8:	460d      	mov	r5, r1
 8022dfa:	4691      	mov	r9, r2
 8022dfc:	f000 fa0e 	bl	802321c <__retarget_lock_acquire_recursive>
 8022e00:	4b25      	ldr	r3, [pc, #148]	; (8022e98 <__register_exitproc+0xb0>)
 8022e02:	681c      	ldr	r4, [r3, #0]
 8022e04:	b934      	cbnz	r4, 8022e14 <__register_exitproc+0x2c>
 8022e06:	4c25      	ldr	r4, [pc, #148]	; (8022e9c <__register_exitproc+0xb4>)
 8022e08:	601c      	str	r4, [r3, #0]
 8022e0a:	4b25      	ldr	r3, [pc, #148]	; (8022ea0 <__register_exitproc+0xb8>)
 8022e0c:	b113      	cbz	r3, 8022e14 <__register_exitproc+0x2c>
 8022e0e:	681b      	ldr	r3, [r3, #0]
 8022e10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022e14:	6863      	ldr	r3, [r4, #4]
 8022e16:	2b1f      	cmp	r3, #31
 8022e18:	dd07      	ble.n	8022e2a <__register_exitproc+0x42>
 8022e1a:	f8d8 0000 	ldr.w	r0, [r8]
 8022e1e:	f000 f9ff 	bl	8023220 <__retarget_lock_release_recursive>
 8022e22:	f04f 30ff 	mov.w	r0, #4294967295
 8022e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e2a:	b34e      	cbz	r6, 8022e80 <__register_exitproc+0x98>
 8022e2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022e30:	b988      	cbnz	r0, 8022e56 <__register_exitproc+0x6e>
 8022e32:	4b1c      	ldr	r3, [pc, #112]	; (8022ea4 <__register_exitproc+0xbc>)
 8022e34:	b923      	cbnz	r3, 8022e40 <__register_exitproc+0x58>
 8022e36:	f8d8 0000 	ldr.w	r0, [r8]
 8022e3a:	f000 f9f0 	bl	802321e <__retarget_lock_release>
 8022e3e:	e7f0      	b.n	8022e22 <__register_exitproc+0x3a>
 8022e40:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022e44:	f7ff fa8a 	bl	802235c <malloc>
 8022e48:	2800      	cmp	r0, #0
 8022e4a:	d0f4      	beq.n	8022e36 <__register_exitproc+0x4e>
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8022e52:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022e56:	6863      	ldr	r3, [r4, #4]
 8022e58:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022e5c:	2201      	movs	r2, #1
 8022e5e:	409a      	lsls	r2, r3
 8022e60:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022e64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022e68:	4313      	orrs	r3, r2
 8022e6a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022e6e:	2e02      	cmp	r6, #2
 8022e70:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8022e74:	bf02      	ittt	eq
 8022e76:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8022e7a:	4313      	orreq	r3, r2
 8022e7c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022e80:	6863      	ldr	r3, [r4, #4]
 8022e82:	f8d8 0000 	ldr.w	r0, [r8]
 8022e86:	1c5a      	adds	r2, r3, #1
 8022e88:	3302      	adds	r3, #2
 8022e8a:	6062      	str	r2, [r4, #4]
 8022e8c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8022e90:	f000 f9c6 	bl	8023220 <__retarget_lock_release_recursive>
 8022e94:	2000      	movs	r0, #0
 8022e96:	e7c6      	b.n	8022e26 <__register_exitproc+0x3e>
 8022e98:	2400f4c0 	.word	0x2400f4c0
 8022e9c:	2400f434 	.word	0x2400f434
 8022ea0:	08025bb4 	.word	0x08025bb4
 8022ea4:	0802235d 	.word	0x0802235d
 8022ea8:	24000118 	.word	0x24000118

08022eac <__sflush_r>:
 8022eac:	898a      	ldrh	r2, [r1, #12]
 8022eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022eb2:	4605      	mov	r5, r0
 8022eb4:	0710      	lsls	r0, r2, #28
 8022eb6:	460c      	mov	r4, r1
 8022eb8:	d458      	bmi.n	8022f6c <__sflush_r+0xc0>
 8022eba:	684b      	ldr	r3, [r1, #4]
 8022ebc:	2b00      	cmp	r3, #0
 8022ebe:	dc05      	bgt.n	8022ecc <__sflush_r+0x20>
 8022ec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022ec2:	2b00      	cmp	r3, #0
 8022ec4:	dc02      	bgt.n	8022ecc <__sflush_r+0x20>
 8022ec6:	2000      	movs	r0, #0
 8022ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022ece:	2e00      	cmp	r6, #0
 8022ed0:	d0f9      	beq.n	8022ec6 <__sflush_r+0x1a>
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022ed8:	682f      	ldr	r7, [r5, #0]
 8022eda:	602b      	str	r3, [r5, #0]
 8022edc:	d032      	beq.n	8022f44 <__sflush_r+0x98>
 8022ede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022ee0:	89a3      	ldrh	r3, [r4, #12]
 8022ee2:	075a      	lsls	r2, r3, #29
 8022ee4:	d505      	bpl.n	8022ef2 <__sflush_r+0x46>
 8022ee6:	6863      	ldr	r3, [r4, #4]
 8022ee8:	1ac0      	subs	r0, r0, r3
 8022eea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022eec:	b10b      	cbz	r3, 8022ef2 <__sflush_r+0x46>
 8022eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022ef0:	1ac0      	subs	r0, r0, r3
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	4602      	mov	r2, r0
 8022ef6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022ef8:	6a21      	ldr	r1, [r4, #32]
 8022efa:	4628      	mov	r0, r5
 8022efc:	47b0      	blx	r6
 8022efe:	1c43      	adds	r3, r0, #1
 8022f00:	89a3      	ldrh	r3, [r4, #12]
 8022f02:	d106      	bne.n	8022f12 <__sflush_r+0x66>
 8022f04:	6829      	ldr	r1, [r5, #0]
 8022f06:	291d      	cmp	r1, #29
 8022f08:	d82c      	bhi.n	8022f64 <__sflush_r+0xb8>
 8022f0a:	4a2a      	ldr	r2, [pc, #168]	; (8022fb4 <__sflush_r+0x108>)
 8022f0c:	40ca      	lsrs	r2, r1
 8022f0e:	07d6      	lsls	r6, r2, #31
 8022f10:	d528      	bpl.n	8022f64 <__sflush_r+0xb8>
 8022f12:	2200      	movs	r2, #0
 8022f14:	6062      	str	r2, [r4, #4]
 8022f16:	04d9      	lsls	r1, r3, #19
 8022f18:	6922      	ldr	r2, [r4, #16]
 8022f1a:	6022      	str	r2, [r4, #0]
 8022f1c:	d504      	bpl.n	8022f28 <__sflush_r+0x7c>
 8022f1e:	1c42      	adds	r2, r0, #1
 8022f20:	d101      	bne.n	8022f26 <__sflush_r+0x7a>
 8022f22:	682b      	ldr	r3, [r5, #0]
 8022f24:	b903      	cbnz	r3, 8022f28 <__sflush_r+0x7c>
 8022f26:	6560      	str	r0, [r4, #84]	; 0x54
 8022f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022f2a:	602f      	str	r7, [r5, #0]
 8022f2c:	2900      	cmp	r1, #0
 8022f2e:	d0ca      	beq.n	8022ec6 <__sflush_r+0x1a>
 8022f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022f34:	4299      	cmp	r1, r3
 8022f36:	d002      	beq.n	8022f3e <__sflush_r+0x92>
 8022f38:	4628      	mov	r0, r5
 8022f3a:	f7ff fa35 	bl	80223a8 <_free_r>
 8022f3e:	2000      	movs	r0, #0
 8022f40:	6360      	str	r0, [r4, #52]	; 0x34
 8022f42:	e7c1      	b.n	8022ec8 <__sflush_r+0x1c>
 8022f44:	6a21      	ldr	r1, [r4, #32]
 8022f46:	2301      	movs	r3, #1
 8022f48:	4628      	mov	r0, r5
 8022f4a:	47b0      	blx	r6
 8022f4c:	1c41      	adds	r1, r0, #1
 8022f4e:	d1c7      	bne.n	8022ee0 <__sflush_r+0x34>
 8022f50:	682b      	ldr	r3, [r5, #0]
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	d0c4      	beq.n	8022ee0 <__sflush_r+0x34>
 8022f56:	2b1d      	cmp	r3, #29
 8022f58:	d001      	beq.n	8022f5e <__sflush_r+0xb2>
 8022f5a:	2b16      	cmp	r3, #22
 8022f5c:	d101      	bne.n	8022f62 <__sflush_r+0xb6>
 8022f5e:	602f      	str	r7, [r5, #0]
 8022f60:	e7b1      	b.n	8022ec6 <__sflush_r+0x1a>
 8022f62:	89a3      	ldrh	r3, [r4, #12]
 8022f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f68:	81a3      	strh	r3, [r4, #12]
 8022f6a:	e7ad      	b.n	8022ec8 <__sflush_r+0x1c>
 8022f6c:	690f      	ldr	r7, [r1, #16]
 8022f6e:	2f00      	cmp	r7, #0
 8022f70:	d0a9      	beq.n	8022ec6 <__sflush_r+0x1a>
 8022f72:	0793      	lsls	r3, r2, #30
 8022f74:	680e      	ldr	r6, [r1, #0]
 8022f76:	bf08      	it	eq
 8022f78:	694b      	ldreq	r3, [r1, #20]
 8022f7a:	600f      	str	r7, [r1, #0]
 8022f7c:	bf18      	it	ne
 8022f7e:	2300      	movne	r3, #0
 8022f80:	eba6 0807 	sub.w	r8, r6, r7
 8022f84:	608b      	str	r3, [r1, #8]
 8022f86:	f1b8 0f00 	cmp.w	r8, #0
 8022f8a:	dd9c      	ble.n	8022ec6 <__sflush_r+0x1a>
 8022f8c:	6a21      	ldr	r1, [r4, #32]
 8022f8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022f90:	4643      	mov	r3, r8
 8022f92:	463a      	mov	r2, r7
 8022f94:	4628      	mov	r0, r5
 8022f96:	47b0      	blx	r6
 8022f98:	2800      	cmp	r0, #0
 8022f9a:	dc06      	bgt.n	8022faa <__sflush_r+0xfe>
 8022f9c:	89a3      	ldrh	r3, [r4, #12]
 8022f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fa2:	81a3      	strh	r3, [r4, #12]
 8022fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8022fa8:	e78e      	b.n	8022ec8 <__sflush_r+0x1c>
 8022faa:	4407      	add	r7, r0
 8022fac:	eba8 0800 	sub.w	r8, r8, r0
 8022fb0:	e7e9      	b.n	8022f86 <__sflush_r+0xda>
 8022fb2:	bf00      	nop
 8022fb4:	20400001 	.word	0x20400001

08022fb8 <_fflush_r>:
 8022fb8:	b538      	push	{r3, r4, r5, lr}
 8022fba:	690b      	ldr	r3, [r1, #16]
 8022fbc:	4605      	mov	r5, r0
 8022fbe:	460c      	mov	r4, r1
 8022fc0:	b913      	cbnz	r3, 8022fc8 <_fflush_r+0x10>
 8022fc2:	2500      	movs	r5, #0
 8022fc4:	4628      	mov	r0, r5
 8022fc6:	bd38      	pop	{r3, r4, r5, pc}
 8022fc8:	b118      	cbz	r0, 8022fd2 <_fflush_r+0x1a>
 8022fca:	6983      	ldr	r3, [r0, #24]
 8022fcc:	b90b      	cbnz	r3, 8022fd2 <_fflush_r+0x1a>
 8022fce:	f000 f887 	bl	80230e0 <__sinit>
 8022fd2:	4b14      	ldr	r3, [pc, #80]	; (8023024 <_fflush_r+0x6c>)
 8022fd4:	429c      	cmp	r4, r3
 8022fd6:	d11b      	bne.n	8023010 <_fflush_r+0x58>
 8022fd8:	686c      	ldr	r4, [r5, #4]
 8022fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	d0ef      	beq.n	8022fc2 <_fflush_r+0xa>
 8022fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022fe4:	07d0      	lsls	r0, r2, #31
 8022fe6:	d404      	bmi.n	8022ff2 <_fflush_r+0x3a>
 8022fe8:	0599      	lsls	r1, r3, #22
 8022fea:	d402      	bmi.n	8022ff2 <_fflush_r+0x3a>
 8022fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022fee:	f000 f915 	bl	802321c <__retarget_lock_acquire_recursive>
 8022ff2:	4628      	mov	r0, r5
 8022ff4:	4621      	mov	r1, r4
 8022ff6:	f7ff ff59 	bl	8022eac <__sflush_r>
 8022ffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ffc:	07da      	lsls	r2, r3, #31
 8022ffe:	4605      	mov	r5, r0
 8023000:	d4e0      	bmi.n	8022fc4 <_fflush_r+0xc>
 8023002:	89a3      	ldrh	r3, [r4, #12]
 8023004:	059b      	lsls	r3, r3, #22
 8023006:	d4dd      	bmi.n	8022fc4 <_fflush_r+0xc>
 8023008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802300a:	f000 f909 	bl	8023220 <__retarget_lock_release_recursive>
 802300e:	e7d9      	b.n	8022fc4 <_fflush_r+0xc>
 8023010:	4b05      	ldr	r3, [pc, #20]	; (8023028 <_fflush_r+0x70>)
 8023012:	429c      	cmp	r4, r3
 8023014:	d101      	bne.n	802301a <_fflush_r+0x62>
 8023016:	68ac      	ldr	r4, [r5, #8]
 8023018:	e7df      	b.n	8022fda <_fflush_r+0x22>
 802301a:	4b04      	ldr	r3, [pc, #16]	; (802302c <_fflush_r+0x74>)
 802301c:	429c      	cmp	r4, r3
 802301e:	bf08      	it	eq
 8023020:	68ec      	ldreq	r4, [r5, #12]
 8023022:	e7da      	b.n	8022fda <_fflush_r+0x22>
 8023024:	08025c4c 	.word	0x08025c4c
 8023028:	08025c6c 	.word	0x08025c6c
 802302c:	08025c2c 	.word	0x08025c2c

08023030 <std>:
 8023030:	2300      	movs	r3, #0
 8023032:	b510      	push	{r4, lr}
 8023034:	4604      	mov	r4, r0
 8023036:	e9c0 3300 	strd	r3, r3, [r0]
 802303a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802303e:	6083      	str	r3, [r0, #8]
 8023040:	8181      	strh	r1, [r0, #12]
 8023042:	6643      	str	r3, [r0, #100]	; 0x64
 8023044:	81c2      	strh	r2, [r0, #14]
 8023046:	6183      	str	r3, [r0, #24]
 8023048:	4619      	mov	r1, r3
 802304a:	2208      	movs	r2, #8
 802304c:	305c      	adds	r0, #92	; 0x5c
 802304e:	f7ff f9a3 	bl	8022398 <memset>
 8023052:	4b05      	ldr	r3, [pc, #20]	; (8023068 <std+0x38>)
 8023054:	6263      	str	r3, [r4, #36]	; 0x24
 8023056:	4b05      	ldr	r3, [pc, #20]	; (802306c <std+0x3c>)
 8023058:	62a3      	str	r3, [r4, #40]	; 0x28
 802305a:	4b05      	ldr	r3, [pc, #20]	; (8023070 <std+0x40>)
 802305c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802305e:	4b05      	ldr	r3, [pc, #20]	; (8023074 <std+0x44>)
 8023060:	6224      	str	r4, [r4, #32]
 8023062:	6323      	str	r3, [r4, #48]	; 0x30
 8023064:	bd10      	pop	{r4, pc}
 8023066:	bf00      	nop
 8023068:	08023305 	.word	0x08023305
 802306c:	08023327 	.word	0x08023327
 8023070:	0802335f 	.word	0x0802335f
 8023074:	08023383 	.word	0x08023383

08023078 <_cleanup_r>:
 8023078:	4901      	ldr	r1, [pc, #4]	; (8023080 <_cleanup_r+0x8>)
 802307a:	f000 b8af 	b.w	80231dc <_fwalk_reent>
 802307e:	bf00      	nop
 8023080:	08022fb9 	.word	0x08022fb9

08023084 <__sfmoreglue>:
 8023084:	b570      	push	{r4, r5, r6, lr}
 8023086:	2268      	movs	r2, #104	; 0x68
 8023088:	1e4d      	subs	r5, r1, #1
 802308a:	4355      	muls	r5, r2
 802308c:	460e      	mov	r6, r1
 802308e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023092:	f7ff f9f5 	bl	8022480 <_malloc_r>
 8023096:	4604      	mov	r4, r0
 8023098:	b140      	cbz	r0, 80230ac <__sfmoreglue+0x28>
 802309a:	2100      	movs	r1, #0
 802309c:	e9c0 1600 	strd	r1, r6, [r0]
 80230a0:	300c      	adds	r0, #12
 80230a2:	60a0      	str	r0, [r4, #8]
 80230a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80230a8:	f7ff f976 	bl	8022398 <memset>
 80230ac:	4620      	mov	r0, r4
 80230ae:	bd70      	pop	{r4, r5, r6, pc}

080230b0 <__sfp_lock_acquire>:
 80230b0:	4801      	ldr	r0, [pc, #4]	; (80230b8 <__sfp_lock_acquire+0x8>)
 80230b2:	f000 b8b3 	b.w	802321c <__retarget_lock_acquire_recursive>
 80230b6:	bf00      	nop
 80230b8:	2400f4c6 	.word	0x2400f4c6

080230bc <__sfp_lock_release>:
 80230bc:	4801      	ldr	r0, [pc, #4]	; (80230c4 <__sfp_lock_release+0x8>)
 80230be:	f000 b8af 	b.w	8023220 <__retarget_lock_release_recursive>
 80230c2:	bf00      	nop
 80230c4:	2400f4c6 	.word	0x2400f4c6

080230c8 <__sinit_lock_acquire>:
 80230c8:	4801      	ldr	r0, [pc, #4]	; (80230d0 <__sinit_lock_acquire+0x8>)
 80230ca:	f000 b8a7 	b.w	802321c <__retarget_lock_acquire_recursive>
 80230ce:	bf00      	nop
 80230d0:	2400f4c7 	.word	0x2400f4c7

080230d4 <__sinit_lock_release>:
 80230d4:	4801      	ldr	r0, [pc, #4]	; (80230dc <__sinit_lock_release+0x8>)
 80230d6:	f000 b8a3 	b.w	8023220 <__retarget_lock_release_recursive>
 80230da:	bf00      	nop
 80230dc:	2400f4c7 	.word	0x2400f4c7

080230e0 <__sinit>:
 80230e0:	b510      	push	{r4, lr}
 80230e2:	4604      	mov	r4, r0
 80230e4:	f7ff fff0 	bl	80230c8 <__sinit_lock_acquire>
 80230e8:	69a3      	ldr	r3, [r4, #24]
 80230ea:	b11b      	cbz	r3, 80230f4 <__sinit+0x14>
 80230ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230f0:	f7ff bff0 	b.w	80230d4 <__sinit_lock_release>
 80230f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80230f8:	6523      	str	r3, [r4, #80]	; 0x50
 80230fa:	4b13      	ldr	r3, [pc, #76]	; (8023148 <__sinit+0x68>)
 80230fc:	4a13      	ldr	r2, [pc, #76]	; (802314c <__sinit+0x6c>)
 80230fe:	681b      	ldr	r3, [r3, #0]
 8023100:	62a2      	str	r2, [r4, #40]	; 0x28
 8023102:	42a3      	cmp	r3, r4
 8023104:	bf04      	itt	eq
 8023106:	2301      	moveq	r3, #1
 8023108:	61a3      	streq	r3, [r4, #24]
 802310a:	4620      	mov	r0, r4
 802310c:	f000 f820 	bl	8023150 <__sfp>
 8023110:	6060      	str	r0, [r4, #4]
 8023112:	4620      	mov	r0, r4
 8023114:	f000 f81c 	bl	8023150 <__sfp>
 8023118:	60a0      	str	r0, [r4, #8]
 802311a:	4620      	mov	r0, r4
 802311c:	f000 f818 	bl	8023150 <__sfp>
 8023120:	2200      	movs	r2, #0
 8023122:	60e0      	str	r0, [r4, #12]
 8023124:	2104      	movs	r1, #4
 8023126:	6860      	ldr	r0, [r4, #4]
 8023128:	f7ff ff82 	bl	8023030 <std>
 802312c:	68a0      	ldr	r0, [r4, #8]
 802312e:	2201      	movs	r2, #1
 8023130:	2109      	movs	r1, #9
 8023132:	f7ff ff7d 	bl	8023030 <std>
 8023136:	68e0      	ldr	r0, [r4, #12]
 8023138:	2202      	movs	r2, #2
 802313a:	2112      	movs	r1, #18
 802313c:	f7ff ff78 	bl	8023030 <std>
 8023140:	2301      	movs	r3, #1
 8023142:	61a3      	str	r3, [r4, #24]
 8023144:	e7d2      	b.n	80230ec <__sinit+0xc>
 8023146:	bf00      	nop
 8023148:	08025b7c 	.word	0x08025b7c
 802314c:	08023079 	.word	0x08023079

08023150 <__sfp>:
 8023150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023152:	4607      	mov	r7, r0
 8023154:	f7ff ffac 	bl	80230b0 <__sfp_lock_acquire>
 8023158:	4b1e      	ldr	r3, [pc, #120]	; (80231d4 <__sfp+0x84>)
 802315a:	681e      	ldr	r6, [r3, #0]
 802315c:	69b3      	ldr	r3, [r6, #24]
 802315e:	b913      	cbnz	r3, 8023166 <__sfp+0x16>
 8023160:	4630      	mov	r0, r6
 8023162:	f7ff ffbd 	bl	80230e0 <__sinit>
 8023166:	3648      	adds	r6, #72	; 0x48
 8023168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802316c:	3b01      	subs	r3, #1
 802316e:	d503      	bpl.n	8023178 <__sfp+0x28>
 8023170:	6833      	ldr	r3, [r6, #0]
 8023172:	b30b      	cbz	r3, 80231b8 <__sfp+0x68>
 8023174:	6836      	ldr	r6, [r6, #0]
 8023176:	e7f7      	b.n	8023168 <__sfp+0x18>
 8023178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802317c:	b9d5      	cbnz	r5, 80231b4 <__sfp+0x64>
 802317e:	4b16      	ldr	r3, [pc, #88]	; (80231d8 <__sfp+0x88>)
 8023180:	60e3      	str	r3, [r4, #12]
 8023182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023186:	6665      	str	r5, [r4, #100]	; 0x64
 8023188:	f000 f847 	bl	802321a <__retarget_lock_init_recursive>
 802318c:	f7ff ff96 	bl	80230bc <__sfp_lock_release>
 8023190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023198:	6025      	str	r5, [r4, #0]
 802319a:	61a5      	str	r5, [r4, #24]
 802319c:	2208      	movs	r2, #8
 802319e:	4629      	mov	r1, r5
 80231a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80231a4:	f7ff f8f8 	bl	8022398 <memset>
 80231a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80231ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80231b0:	4620      	mov	r0, r4
 80231b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231b4:	3468      	adds	r4, #104	; 0x68
 80231b6:	e7d9      	b.n	802316c <__sfp+0x1c>
 80231b8:	2104      	movs	r1, #4
 80231ba:	4638      	mov	r0, r7
 80231bc:	f7ff ff62 	bl	8023084 <__sfmoreglue>
 80231c0:	4604      	mov	r4, r0
 80231c2:	6030      	str	r0, [r6, #0]
 80231c4:	2800      	cmp	r0, #0
 80231c6:	d1d5      	bne.n	8023174 <__sfp+0x24>
 80231c8:	f7ff ff78 	bl	80230bc <__sfp_lock_release>
 80231cc:	230c      	movs	r3, #12
 80231ce:	603b      	str	r3, [r7, #0]
 80231d0:	e7ee      	b.n	80231b0 <__sfp+0x60>
 80231d2:	bf00      	nop
 80231d4:	08025b7c 	.word	0x08025b7c
 80231d8:	ffff0001 	.word	0xffff0001

080231dc <_fwalk_reent>:
 80231dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231e0:	4606      	mov	r6, r0
 80231e2:	4688      	mov	r8, r1
 80231e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80231e8:	2700      	movs	r7, #0
 80231ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231ee:	f1b9 0901 	subs.w	r9, r9, #1
 80231f2:	d505      	bpl.n	8023200 <_fwalk_reent+0x24>
 80231f4:	6824      	ldr	r4, [r4, #0]
 80231f6:	2c00      	cmp	r4, #0
 80231f8:	d1f7      	bne.n	80231ea <_fwalk_reent+0xe>
 80231fa:	4638      	mov	r0, r7
 80231fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023200:	89ab      	ldrh	r3, [r5, #12]
 8023202:	2b01      	cmp	r3, #1
 8023204:	d907      	bls.n	8023216 <_fwalk_reent+0x3a>
 8023206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802320a:	3301      	adds	r3, #1
 802320c:	d003      	beq.n	8023216 <_fwalk_reent+0x3a>
 802320e:	4629      	mov	r1, r5
 8023210:	4630      	mov	r0, r6
 8023212:	47c0      	blx	r8
 8023214:	4307      	orrs	r7, r0
 8023216:	3568      	adds	r5, #104	; 0x68
 8023218:	e7e9      	b.n	80231ee <_fwalk_reent+0x12>

0802321a <__retarget_lock_init_recursive>:
 802321a:	4770      	bx	lr

0802321c <__retarget_lock_acquire_recursive>:
 802321c:	4770      	bx	lr

0802321e <__retarget_lock_release>:
 802321e:	4770      	bx	lr

08023220 <__retarget_lock_release_recursive>:
 8023220:	4770      	bx	lr

08023222 <__swhatbuf_r>:
 8023222:	b570      	push	{r4, r5, r6, lr}
 8023224:	460e      	mov	r6, r1
 8023226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802322a:	2900      	cmp	r1, #0
 802322c:	b096      	sub	sp, #88	; 0x58
 802322e:	4614      	mov	r4, r2
 8023230:	461d      	mov	r5, r3
 8023232:	da08      	bge.n	8023246 <__swhatbuf_r+0x24>
 8023234:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023238:	2200      	movs	r2, #0
 802323a:	602a      	str	r2, [r5, #0]
 802323c:	061a      	lsls	r2, r3, #24
 802323e:	d410      	bmi.n	8023262 <__swhatbuf_r+0x40>
 8023240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023244:	e00e      	b.n	8023264 <__swhatbuf_r+0x42>
 8023246:	466a      	mov	r2, sp
 8023248:	f000 f8c2 	bl	80233d0 <_fstat_r>
 802324c:	2800      	cmp	r0, #0
 802324e:	dbf1      	blt.n	8023234 <__swhatbuf_r+0x12>
 8023250:	9a01      	ldr	r2, [sp, #4]
 8023252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802325a:	425a      	negs	r2, r3
 802325c:	415a      	adcs	r2, r3
 802325e:	602a      	str	r2, [r5, #0]
 8023260:	e7ee      	b.n	8023240 <__swhatbuf_r+0x1e>
 8023262:	2340      	movs	r3, #64	; 0x40
 8023264:	2000      	movs	r0, #0
 8023266:	6023      	str	r3, [r4, #0]
 8023268:	b016      	add	sp, #88	; 0x58
 802326a:	bd70      	pop	{r4, r5, r6, pc}

0802326c <__smakebuf_r>:
 802326c:	898b      	ldrh	r3, [r1, #12]
 802326e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023270:	079d      	lsls	r5, r3, #30
 8023272:	4606      	mov	r6, r0
 8023274:	460c      	mov	r4, r1
 8023276:	d507      	bpl.n	8023288 <__smakebuf_r+0x1c>
 8023278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802327c:	6023      	str	r3, [r4, #0]
 802327e:	6123      	str	r3, [r4, #16]
 8023280:	2301      	movs	r3, #1
 8023282:	6163      	str	r3, [r4, #20]
 8023284:	b002      	add	sp, #8
 8023286:	bd70      	pop	{r4, r5, r6, pc}
 8023288:	ab01      	add	r3, sp, #4
 802328a:	466a      	mov	r2, sp
 802328c:	f7ff ffc9 	bl	8023222 <__swhatbuf_r>
 8023290:	9900      	ldr	r1, [sp, #0]
 8023292:	4605      	mov	r5, r0
 8023294:	4630      	mov	r0, r6
 8023296:	f7ff f8f3 	bl	8022480 <_malloc_r>
 802329a:	b948      	cbnz	r0, 80232b0 <__smakebuf_r+0x44>
 802329c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232a0:	059a      	lsls	r2, r3, #22
 80232a2:	d4ef      	bmi.n	8023284 <__smakebuf_r+0x18>
 80232a4:	f023 0303 	bic.w	r3, r3, #3
 80232a8:	f043 0302 	orr.w	r3, r3, #2
 80232ac:	81a3      	strh	r3, [r4, #12]
 80232ae:	e7e3      	b.n	8023278 <__smakebuf_r+0xc>
 80232b0:	4b0d      	ldr	r3, [pc, #52]	; (80232e8 <__smakebuf_r+0x7c>)
 80232b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80232b4:	89a3      	ldrh	r3, [r4, #12]
 80232b6:	6020      	str	r0, [r4, #0]
 80232b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80232bc:	81a3      	strh	r3, [r4, #12]
 80232be:	9b00      	ldr	r3, [sp, #0]
 80232c0:	6163      	str	r3, [r4, #20]
 80232c2:	9b01      	ldr	r3, [sp, #4]
 80232c4:	6120      	str	r0, [r4, #16]
 80232c6:	b15b      	cbz	r3, 80232e0 <__smakebuf_r+0x74>
 80232c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232cc:	4630      	mov	r0, r6
 80232ce:	f000 f891 	bl	80233f4 <_isatty_r>
 80232d2:	b128      	cbz	r0, 80232e0 <__smakebuf_r+0x74>
 80232d4:	89a3      	ldrh	r3, [r4, #12]
 80232d6:	f023 0303 	bic.w	r3, r3, #3
 80232da:	f043 0301 	orr.w	r3, r3, #1
 80232de:	81a3      	strh	r3, [r4, #12]
 80232e0:	89a0      	ldrh	r0, [r4, #12]
 80232e2:	4305      	orrs	r5, r0
 80232e4:	81a5      	strh	r5, [r4, #12]
 80232e6:	e7cd      	b.n	8023284 <__smakebuf_r+0x18>
 80232e8:	08023079 	.word	0x08023079

080232ec <__malloc_lock>:
 80232ec:	4801      	ldr	r0, [pc, #4]	; (80232f4 <__malloc_lock+0x8>)
 80232ee:	f7ff bf95 	b.w	802321c <__retarget_lock_acquire_recursive>
 80232f2:	bf00      	nop
 80232f4:	2400f4c5 	.word	0x2400f4c5

080232f8 <__malloc_unlock>:
 80232f8:	4801      	ldr	r0, [pc, #4]	; (8023300 <__malloc_unlock+0x8>)
 80232fa:	f7ff bf91 	b.w	8023220 <__retarget_lock_release_recursive>
 80232fe:	bf00      	nop
 8023300:	2400f4c5 	.word	0x2400f4c5

08023304 <__sread>:
 8023304:	b510      	push	{r4, lr}
 8023306:	460c      	mov	r4, r1
 8023308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802330c:	f000 f894 	bl	8023438 <_read_r>
 8023310:	2800      	cmp	r0, #0
 8023312:	bfab      	itete	ge
 8023314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023316:	89a3      	ldrhlt	r3, [r4, #12]
 8023318:	181b      	addge	r3, r3, r0
 802331a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802331e:	bfac      	ite	ge
 8023320:	6563      	strge	r3, [r4, #84]	; 0x54
 8023322:	81a3      	strhlt	r3, [r4, #12]
 8023324:	bd10      	pop	{r4, pc}

08023326 <__swrite>:
 8023326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802332a:	461f      	mov	r7, r3
 802332c:	898b      	ldrh	r3, [r1, #12]
 802332e:	05db      	lsls	r3, r3, #23
 8023330:	4605      	mov	r5, r0
 8023332:	460c      	mov	r4, r1
 8023334:	4616      	mov	r6, r2
 8023336:	d505      	bpl.n	8023344 <__swrite+0x1e>
 8023338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802333c:	2302      	movs	r3, #2
 802333e:	2200      	movs	r2, #0
 8023340:	f000 f868 	bl	8023414 <_lseek_r>
 8023344:	89a3      	ldrh	r3, [r4, #12]
 8023346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802334a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802334e:	81a3      	strh	r3, [r4, #12]
 8023350:	4632      	mov	r2, r6
 8023352:	463b      	mov	r3, r7
 8023354:	4628      	mov	r0, r5
 8023356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802335a:	f000 b817 	b.w	802338c <_write_r>

0802335e <__sseek>:
 802335e:	b510      	push	{r4, lr}
 8023360:	460c      	mov	r4, r1
 8023362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023366:	f000 f855 	bl	8023414 <_lseek_r>
 802336a:	1c43      	adds	r3, r0, #1
 802336c:	89a3      	ldrh	r3, [r4, #12]
 802336e:	bf15      	itete	ne
 8023370:	6560      	strne	r0, [r4, #84]	; 0x54
 8023372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802337a:	81a3      	strheq	r3, [r4, #12]
 802337c:	bf18      	it	ne
 802337e:	81a3      	strhne	r3, [r4, #12]
 8023380:	bd10      	pop	{r4, pc}

08023382 <__sclose>:
 8023382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023386:	f000 b813 	b.w	80233b0 <_close_r>
	...

0802338c <_write_r>:
 802338c:	b538      	push	{r3, r4, r5, lr}
 802338e:	4d07      	ldr	r5, [pc, #28]	; (80233ac <_write_r+0x20>)
 8023390:	4604      	mov	r4, r0
 8023392:	4608      	mov	r0, r1
 8023394:	4611      	mov	r1, r2
 8023396:	2200      	movs	r2, #0
 8023398:	602a      	str	r2, [r5, #0]
 802339a:	461a      	mov	r2, r3
 802339c:	f7de f8b0 	bl	8001500 <_write>
 80233a0:	1c43      	adds	r3, r0, #1
 80233a2:	d102      	bne.n	80233aa <_write_r+0x1e>
 80233a4:	682b      	ldr	r3, [r5, #0]
 80233a6:	b103      	cbz	r3, 80233aa <_write_r+0x1e>
 80233a8:	6023      	str	r3, [r4, #0]
 80233aa:	bd38      	pop	{r3, r4, r5, pc}
 80233ac:	2400f4c8 	.word	0x2400f4c8

080233b0 <_close_r>:
 80233b0:	b538      	push	{r3, r4, r5, lr}
 80233b2:	4d06      	ldr	r5, [pc, #24]	; (80233cc <_close_r+0x1c>)
 80233b4:	2300      	movs	r3, #0
 80233b6:	4604      	mov	r4, r0
 80233b8:	4608      	mov	r0, r1
 80233ba:	602b      	str	r3, [r5, #0]
 80233bc:	f7de f8ae 	bl	800151c <_close>
 80233c0:	1c43      	adds	r3, r0, #1
 80233c2:	d102      	bne.n	80233ca <_close_r+0x1a>
 80233c4:	682b      	ldr	r3, [r5, #0]
 80233c6:	b103      	cbz	r3, 80233ca <_close_r+0x1a>
 80233c8:	6023      	str	r3, [r4, #0]
 80233ca:	bd38      	pop	{r3, r4, r5, pc}
 80233cc:	2400f4c8 	.word	0x2400f4c8

080233d0 <_fstat_r>:
 80233d0:	b538      	push	{r3, r4, r5, lr}
 80233d2:	4d07      	ldr	r5, [pc, #28]	; (80233f0 <_fstat_r+0x20>)
 80233d4:	2300      	movs	r3, #0
 80233d6:	4604      	mov	r4, r0
 80233d8:	4608      	mov	r0, r1
 80233da:	4611      	mov	r1, r2
 80233dc:	602b      	str	r3, [r5, #0]
 80233de:	f7de f8a0 	bl	8001522 <_fstat>
 80233e2:	1c43      	adds	r3, r0, #1
 80233e4:	d102      	bne.n	80233ec <_fstat_r+0x1c>
 80233e6:	682b      	ldr	r3, [r5, #0]
 80233e8:	b103      	cbz	r3, 80233ec <_fstat_r+0x1c>
 80233ea:	6023      	str	r3, [r4, #0]
 80233ec:	bd38      	pop	{r3, r4, r5, pc}
 80233ee:	bf00      	nop
 80233f0:	2400f4c8 	.word	0x2400f4c8

080233f4 <_isatty_r>:
 80233f4:	b538      	push	{r3, r4, r5, lr}
 80233f6:	4d06      	ldr	r5, [pc, #24]	; (8023410 <_isatty_r+0x1c>)
 80233f8:	2300      	movs	r3, #0
 80233fa:	4604      	mov	r4, r0
 80233fc:	4608      	mov	r0, r1
 80233fe:	602b      	str	r3, [r5, #0]
 8023400:	f7de f894 	bl	800152c <_isatty>
 8023404:	1c43      	adds	r3, r0, #1
 8023406:	d102      	bne.n	802340e <_isatty_r+0x1a>
 8023408:	682b      	ldr	r3, [r5, #0]
 802340a:	b103      	cbz	r3, 802340e <_isatty_r+0x1a>
 802340c:	6023      	str	r3, [r4, #0]
 802340e:	bd38      	pop	{r3, r4, r5, pc}
 8023410:	2400f4c8 	.word	0x2400f4c8

08023414 <_lseek_r>:
 8023414:	b538      	push	{r3, r4, r5, lr}
 8023416:	4d07      	ldr	r5, [pc, #28]	; (8023434 <_lseek_r+0x20>)
 8023418:	4604      	mov	r4, r0
 802341a:	4608      	mov	r0, r1
 802341c:	4611      	mov	r1, r2
 802341e:	2200      	movs	r2, #0
 8023420:	602a      	str	r2, [r5, #0]
 8023422:	461a      	mov	r2, r3
 8023424:	f7de f884 	bl	8001530 <_lseek>
 8023428:	1c43      	adds	r3, r0, #1
 802342a:	d102      	bne.n	8023432 <_lseek_r+0x1e>
 802342c:	682b      	ldr	r3, [r5, #0]
 802342e:	b103      	cbz	r3, 8023432 <_lseek_r+0x1e>
 8023430:	6023      	str	r3, [r4, #0]
 8023432:	bd38      	pop	{r3, r4, r5, pc}
 8023434:	2400f4c8 	.word	0x2400f4c8

08023438 <_read_r>:
 8023438:	b538      	push	{r3, r4, r5, lr}
 802343a:	4d07      	ldr	r5, [pc, #28]	; (8023458 <_read_r+0x20>)
 802343c:	4604      	mov	r4, r0
 802343e:	4608      	mov	r0, r1
 8023440:	4611      	mov	r1, r2
 8023442:	2200      	movs	r2, #0
 8023444:	602a      	str	r2, [r5, #0]
 8023446:	461a      	mov	r2, r3
 8023448:	f7de f84c 	bl	80014e4 <_read>
 802344c:	1c43      	adds	r3, r0, #1
 802344e:	d102      	bne.n	8023456 <_read_r+0x1e>
 8023450:	682b      	ldr	r3, [r5, #0]
 8023452:	b103      	cbz	r3, 8023456 <_read_r+0x1e>
 8023454:	6023      	str	r3, [r4, #0]
 8023456:	bd38      	pop	{r3, r4, r5, pc}
 8023458:	2400f4c8 	.word	0x2400f4c8

0802345c <_init>:
 802345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802345e:	bf00      	nop
 8023460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023462:	bc08      	pop	{r3}
 8023464:	469e      	mov	lr, r3
 8023466:	4770      	bx	lr

08023468 <_fini>:
 8023468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802346a:	bf00      	nop
 802346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802346e:	bc08      	pop	{r3}
 8023470:	469e      	mov	lr, r3
 8023472:	4770      	bx	lr
