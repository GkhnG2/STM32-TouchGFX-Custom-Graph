
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002010c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002550  080203ac  080203ac  000303ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000df2  080228fc  080228fc  000328fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000000a0  080236f0  080236f0  000336f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000074  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08023790  08023790  001c7074  2**0
                  CONTENTS
  8 .ARM          00000008  08023790  08023790  00033790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08023798  08023798  001c7074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08023798  08023798  00033798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080237b0  080237b0  000337b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000180  24000000  080237b8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000f5d8  24000180  08023938  00040180  2**2
                  ALLOC
 14 ._user_heap_stack 00002000  2400f758  08023938  0004f758  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c7074  2**0
                  CONTENTS, READONLY
 16 .debug_info   001034c2  00000000  00000000  001c70a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017997  00000000  00000000  002ca564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000036a0  00000000  00000000  002e1f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00007158  00000000  00000000  002e55a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00051680  00000000  00000000  002ec6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00062853  00000000  00000000  0033dd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001df755  00000000  00000000  003a05cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0057fd20  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a57c  00000000  00000000  0057fdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00035ae5  00000000  00000000  0058a36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000180 	.word	0x24000180
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08020394 	.word	0x08020394

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000184 	.word	0x24000184
 80002dc:	08020394 	.word	0x08020394

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ldivmod>:
 80003a4:	b97b      	cbnz	r3, 80003c6 <__aeabi_ldivmod+0x22>
 80003a6:	b972      	cbnz	r2, 80003c6 <__aeabi_ldivmod+0x22>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bfbe      	ittt	lt
 80003ac:	2000      	movlt	r0, #0
 80003ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003b2:	e006      	blt.n	80003c2 <__aeabi_ldivmod+0x1e>
 80003b4:	bf08      	it	eq
 80003b6:	2800      	cmpeq	r0, #0
 80003b8:	bf1c      	itt	ne
 80003ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003be:	f04f 30ff 	movne.w	r0, #4294967295
 80003c2:	f000 b9a7 	b.w	8000714 <__aeabi_idiv0>
 80003c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ce:	2900      	cmp	r1, #0
 80003d0:	db09      	blt.n	80003e6 <__aeabi_ldivmod+0x42>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db1a      	blt.n	800040c <__aeabi_ldivmod+0x68>
 80003d6:	f000 f835 	bl	8000444 <__udivmoddi4>
 80003da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e2:	b004      	add	sp, #16
 80003e4:	4770      	bx	lr
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db1b      	blt.n	8000428 <__aeabi_ldivmod+0x84>
 80003f0:	f000 f828 	bl	8000444 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4240      	negs	r0, r0
 8000400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000404:	4252      	negs	r2, r2
 8000406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040a:	4770      	bx	lr
 800040c:	4252      	negs	r2, r2
 800040e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000412:	f000 f817 	bl	8000444 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4240      	negs	r0, r0
 8000422:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f809 	bl	8000444 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4252      	negs	r2, r2
 800043e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000442:	4770      	bx	lr

08000444 <__udivmoddi4>:
 8000444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000448:	9d08      	ldr	r5, [sp, #32]
 800044a:	4604      	mov	r4, r0
 800044c:	468e      	mov	lr, r1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d14d      	bne.n	80004ee <__udivmoddi4+0xaa>
 8000452:	428a      	cmp	r2, r1
 8000454:	4694      	mov	ip, r2
 8000456:	d969      	bls.n	800052c <__udivmoddi4+0xe8>
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	b152      	cbz	r2, 8000474 <__udivmoddi4+0x30>
 800045e:	fa01 f302 	lsl.w	r3, r1, r2
 8000462:	f1c2 0120 	rsb	r1, r2, #32
 8000466:	fa20 f101 	lsr.w	r1, r0, r1
 800046a:	fa0c fc02 	lsl.w	ip, ip, r2
 800046e:	ea41 0e03 	orr.w	lr, r1, r3
 8000472:	4094      	lsls	r4, r2
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	0c21      	lsrs	r1, r4, #16
 800047a:	fbbe f6f8 	udiv	r6, lr, r8
 800047e:	fa1f f78c 	uxth.w	r7, ip
 8000482:	fb08 e316 	mls	r3, r8, r6, lr
 8000486:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048a:	fb06 f107 	mul.w	r1, r6, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d90a      	bls.n	80004a8 <__udivmoddi4+0x64>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 811f 	bcs.w	80006dc <__udivmoddi4+0x298>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 811c 	bls.w	80006dc <__udivmoddi4+0x298>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 f707 	mul.w	r7, r0, r7
 80004bc:	42a7      	cmp	r7, r4
 80004be:	d90a      	bls.n	80004d6 <__udivmoddi4+0x92>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	f080 810a 	bcs.w	80006e0 <__udivmoddi4+0x29c>
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	f240 8107 	bls.w	80006e0 <__udivmoddi4+0x29c>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004da:	1be4      	subs	r4, r4, r7
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa4>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d909      	bls.n	8000506 <__udivmoddi4+0xc2>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	f000 80ef 	beq.w	80006d6 <__udivmoddi4+0x292>
 80004f8:	2600      	movs	r6, #0
 80004fa:	e9c5 0100 	strd	r0, r1, [r5]
 80004fe:	4630      	mov	r0, r6
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	fab3 f683 	clz	r6, r3
 800050a:	2e00      	cmp	r6, #0
 800050c:	d14a      	bne.n	80005a4 <__udivmoddi4+0x160>
 800050e:	428b      	cmp	r3, r1
 8000510:	d302      	bcc.n	8000518 <__udivmoddi4+0xd4>
 8000512:	4282      	cmp	r2, r0
 8000514:	f200 80f9 	bhi.w	800070a <__udivmoddi4+0x2c6>
 8000518:	1a84      	subs	r4, r0, r2
 800051a:	eb61 0303 	sbc.w	r3, r1, r3
 800051e:	2001      	movs	r0, #1
 8000520:	469e      	mov	lr, r3
 8000522:	2d00      	cmp	r5, #0
 8000524:	d0e0      	beq.n	80004e8 <__udivmoddi4+0xa4>
 8000526:	e9c5 4e00 	strd	r4, lr, [r5]
 800052a:	e7dd      	b.n	80004e8 <__udivmoddi4+0xa4>
 800052c:	b902      	cbnz	r2, 8000530 <__udivmoddi4+0xec>
 800052e:	deff      	udf	#255	; 0xff
 8000530:	fab2 f282 	clz	r2, r2
 8000534:	2a00      	cmp	r2, #0
 8000536:	f040 8092 	bne.w	800065e <__udivmoddi4+0x21a>
 800053a:	eba1 010c 	sub.w	r1, r1, ip
 800053e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000542:	fa1f fe8c 	uxth.w	lr, ip
 8000546:	2601      	movs	r6, #1
 8000548:	0c20      	lsrs	r0, r4, #16
 800054a:	fbb1 f3f7 	udiv	r3, r1, r7
 800054e:	fb07 1113 	mls	r1, r7, r3, r1
 8000552:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000556:	fb0e f003 	mul.w	r0, lr, r3
 800055a:	4288      	cmp	r0, r1
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x12c>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f103 38ff 	add.w	r8, r3, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x12a>
 8000568:	4288      	cmp	r0, r1
 800056a:	f200 80cb 	bhi.w	8000704 <__udivmoddi4+0x2c0>
 800056e:	4643      	mov	r3, r8
 8000570:	1a09      	subs	r1, r1, r0
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb1 f0f7 	udiv	r0, r1, r7
 8000578:	fb07 1110 	mls	r1, r7, r0, r1
 800057c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000580:	fb0e fe00 	mul.w	lr, lr, r0
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x156>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x154>
 8000592:	45a6      	cmp	lr, r4
 8000594:	f200 80bb 	bhi.w	800070e <__udivmoddi4+0x2ca>
 8000598:	4608      	mov	r0, r1
 800059a:	eba4 040e 	sub.w	r4, r4, lr
 800059e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a2:	e79c      	b.n	80004de <__udivmoddi4+0x9a>
 80005a4:	f1c6 0720 	rsb	r7, r6, #32
 80005a8:	40b3      	lsls	r3, r6
 80005aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b2:	fa20 f407 	lsr.w	r4, r0, r7
 80005b6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ba:	431c      	orrs	r4, r3
 80005bc:	40f9      	lsrs	r1, r7
 80005be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c2:	fa00 f306 	lsl.w	r3, r0, r6
 80005c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ca:	0c20      	lsrs	r0, r4, #16
 80005cc:	fa1f fe8c 	uxth.w	lr, ip
 80005d0:	fb09 1118 	mls	r1, r9, r8, r1
 80005d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005d8:	fb08 f00e 	mul.w	r0, r8, lr
 80005dc:	4288      	cmp	r0, r1
 80005de:	fa02 f206 	lsl.w	r2, r2, r6
 80005e2:	d90b      	bls.n	80005fc <__udivmoddi4+0x1b8>
 80005e4:	eb1c 0101 	adds.w	r1, ip, r1
 80005e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005ec:	f080 8088 	bcs.w	8000700 <__udivmoddi4+0x2bc>
 80005f0:	4288      	cmp	r0, r1
 80005f2:	f240 8085 	bls.w	8000700 <__udivmoddi4+0x2bc>
 80005f6:	f1a8 0802 	sub.w	r8, r8, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	1a09      	subs	r1, r1, r0
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb1 f0f9 	udiv	r0, r1, r9
 8000604:	fb09 1110 	mls	r1, r9, r0, r1
 8000608:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800060c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000610:	458e      	cmp	lr, r1
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x1e2>
 8000614:	eb1c 0101 	adds.w	r1, ip, r1
 8000618:	f100 34ff 	add.w	r4, r0, #4294967295
 800061c:	d26c      	bcs.n	80006f8 <__udivmoddi4+0x2b4>
 800061e:	458e      	cmp	lr, r1
 8000620:	d96a      	bls.n	80006f8 <__udivmoddi4+0x2b4>
 8000622:	3802      	subs	r0, #2
 8000624:	4461      	add	r1, ip
 8000626:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062a:	fba0 9402 	umull	r9, r4, r0, r2
 800062e:	eba1 010e 	sub.w	r1, r1, lr
 8000632:	42a1      	cmp	r1, r4
 8000634:	46c8      	mov	r8, r9
 8000636:	46a6      	mov	lr, r4
 8000638:	d356      	bcc.n	80006e8 <__udivmoddi4+0x2a4>
 800063a:	d053      	beq.n	80006e4 <__udivmoddi4+0x2a0>
 800063c:	b15d      	cbz	r5, 8000656 <__udivmoddi4+0x212>
 800063e:	ebb3 0208 	subs.w	r2, r3, r8
 8000642:	eb61 010e 	sbc.w	r1, r1, lr
 8000646:	fa01 f707 	lsl.w	r7, r1, r7
 800064a:	fa22 f306 	lsr.w	r3, r2, r6
 800064e:	40f1      	lsrs	r1, r6
 8000650:	431f      	orrs	r7, r3
 8000652:	e9c5 7100 	strd	r7, r1, [r5]
 8000656:	2600      	movs	r6, #0
 8000658:	4631      	mov	r1, r6
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	40d8      	lsrs	r0, r3
 8000664:	fa0c fc02 	lsl.w	ip, ip, r2
 8000668:	fa21 f303 	lsr.w	r3, r1, r3
 800066c:	4091      	lsls	r1, r2
 800066e:	4301      	orrs	r1, r0
 8000670:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000674:	fa1f fe8c 	uxth.w	lr, ip
 8000678:	fbb3 f0f7 	udiv	r0, r3, r7
 800067c:	fb07 3610 	mls	r6, r7, r0, r3
 8000680:	0c0b      	lsrs	r3, r1, #16
 8000682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000686:	fb00 f60e 	mul.w	r6, r0, lr
 800068a:	429e      	cmp	r6, r3
 800068c:	fa04 f402 	lsl.w	r4, r4, r2
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0x260>
 8000692:	eb1c 0303 	adds.w	r3, ip, r3
 8000696:	f100 38ff 	add.w	r8, r0, #4294967295
 800069a:	d22f      	bcs.n	80006fc <__udivmoddi4+0x2b8>
 800069c:	429e      	cmp	r6, r3
 800069e:	d92d      	bls.n	80006fc <__udivmoddi4+0x2b8>
 80006a0:	3802      	subs	r0, #2
 80006a2:	4463      	add	r3, ip
 80006a4:	1b9b      	subs	r3, r3, r6
 80006a6:	b289      	uxth	r1, r1
 80006a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006ac:	fb07 3316 	mls	r3, r7, r6, r3
 80006b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b4:	fb06 f30e 	mul.w	r3, r6, lr
 80006b8:	428b      	cmp	r3, r1
 80006ba:	d908      	bls.n	80006ce <__udivmoddi4+0x28a>
 80006bc:	eb1c 0101 	adds.w	r1, ip, r1
 80006c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c4:	d216      	bcs.n	80006f4 <__udivmoddi4+0x2b0>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d914      	bls.n	80006f4 <__udivmoddi4+0x2b0>
 80006ca:	3e02      	subs	r6, #2
 80006cc:	4461      	add	r1, ip
 80006ce:	1ac9      	subs	r1, r1, r3
 80006d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d4:	e738      	b.n	8000548 <__udivmoddi4+0x104>
 80006d6:	462e      	mov	r6, r5
 80006d8:	4628      	mov	r0, r5
 80006da:	e705      	b.n	80004e8 <__udivmoddi4+0xa4>
 80006dc:	4606      	mov	r6, r0
 80006de:	e6e3      	b.n	80004a8 <__udivmoddi4+0x64>
 80006e0:	4618      	mov	r0, r3
 80006e2:	e6f8      	b.n	80004d6 <__udivmoddi4+0x92>
 80006e4:	454b      	cmp	r3, r9
 80006e6:	d2a9      	bcs.n	800063c <__udivmoddi4+0x1f8>
 80006e8:	ebb9 0802 	subs.w	r8, r9, r2
 80006ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f0:	3801      	subs	r0, #1
 80006f2:	e7a3      	b.n	800063c <__udivmoddi4+0x1f8>
 80006f4:	4646      	mov	r6, r8
 80006f6:	e7ea      	b.n	80006ce <__udivmoddi4+0x28a>
 80006f8:	4620      	mov	r0, r4
 80006fa:	e794      	b.n	8000626 <__udivmoddi4+0x1e2>
 80006fc:	4640      	mov	r0, r8
 80006fe:	e7d1      	b.n	80006a4 <__udivmoddi4+0x260>
 8000700:	46d0      	mov	r8, sl
 8000702:	e77b      	b.n	80005fc <__udivmoddi4+0x1b8>
 8000704:	3b02      	subs	r3, #2
 8000706:	4461      	add	r1, ip
 8000708:	e732      	b.n	8000570 <__udivmoddi4+0x12c>
 800070a:	4630      	mov	r0, r6
 800070c:	e709      	b.n	8000522 <__udivmoddi4+0xde>
 800070e:	4464      	add	r4, ip
 8000710:	3802      	subs	r0, #2
 8000712:	e742      	b.n	800059a <__udivmoddi4+0x156>

08000714 <__aeabi_idiv0>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000718:	4901      	ldr	r1, [pc, #4]	; (8000720 <vApplicationIdleHook+0x8>)
 800071a:	2000      	movs	r0, #0
 800071c:	f00b bcac 	b.w	800c078 <vTaskSetApplicationTaskTag>
 8000720:	08001e49 	.word	0x08001e49

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000728:	224c      	movs	r2, #76	; 0x4c
 800072a:	2100      	movs	r1, #0
 800072c:	a809      	add	r0, sp, #36	; 0x24
 800072e:	f01d fdb5 	bl	801e29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	a801      	add	r0, sp, #4
 8000738:	f01d fdb0 	bl	801e29c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800073c:	2004      	movs	r0, #4
 800073e:	f007 fef3 	bl	8008528 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SystemClock_Config+0xcc>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	f022 0201 	bic.w	r2, r2, #1
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	699a      	ldr	r2, [r3, #24]
 8000764:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	0491      	lsls	r1, r2, #18
 8000770:	d5fc      	bpl.n	800076c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000772:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000780:	f023 0303 	bic.w	r3, r3, #3
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800078e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2301      	movs	r3, #1
 8000798:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f008 f9a7 	bl	8008b04 <HAL_RCC_OscConfig>
 80007b6:	b108      	cbz	r0, 80007bc <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f008 fd37 	bl	8009248 <HAL_RCC_ClockConfig>
 80007da:	4601      	mov	r1, r0
 80007dc:	b108      	cbz	r0, 80007e2 <SystemClock_Config+0xbe>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e6:	f008 fc41 	bl	800906c <HAL_RCC_MCOConfig>
}
 80007ea:	b01d      	add	sp, #116	; 0x74
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58000400 	.word	0x58000400
 80007f4:	58024800 	.word	0x58024800
 80007f8:	58024400 	.word	0x58024400

080007fc <main>:
{
 80007fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000800:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000802:	2210      	movs	r2, #16
 8000804:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000806:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000808:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800080a:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080c:	f01d fd46 	bl	801e29c <memset>
  HAL_MPU_Disable();
 8000810:	f006 f926 	bl	8006a60 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000814:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 8000818:	4bb7      	ldr	r3, [pc, #732]	; (8000af8 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081a:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081c:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000820:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000822:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000826:	f006 f939 	bl	8006a9c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800082a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800082e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000836:	f006 f931 	bl	8006a9c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800083a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800083e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000842:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000846:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800084a:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800084c:	2318      	movs	r3, #24
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f006 f923 	bl	8006a9c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000856:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800085a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800085e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000862:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000864:	2312      	movs	r3, #18
 8000866:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000870:	f006 f914 	bl	8006a9c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000878:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800087a:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800087e:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000880:	2311      	movs	r3, #17
 8000882:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000886:	f006 f909 	bl	8006a9c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800088a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800088e:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000892:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000896:	4b99      	ldr	r3, [pc, #612]	; (8000afc <main+0x300>)
 8000898:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800089a:	230e      	movs	r3, #14
 800089c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a0:	f006 f8fc 	bl	8006a9c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a4:	4628      	mov	r0, r5
 80008a6:	f006 f8e9 	bl	8006a7c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008aa:	4b95      	ldr	r3, [pc, #596]	; (8000b00 <main+0x304>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80008b2:	d111      	bne.n	80008d8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d8:	4a89      	ldr	r2, [pc, #548]	; (8000b00 <main+0x304>)
 80008da:	6953      	ldr	r3, [r2, #20]
 80008dc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008e0:	d123      	bne.n	800092a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ee:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008f6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008fa:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000900:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000902:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000906:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000908:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800090c:	d2f9      	bcs.n	8000902 <main+0x106>
    } while(sets-- != 0U);
 800090e:	3b20      	subs	r3, #32
 8000910:	f113 0f20 	cmn.w	r3, #32
 8000914:	d1f2      	bne.n	80008fc <main+0x100>
 8000916:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091a:	6953      	ldr	r3, [r2, #20]
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000926:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	4d75      	ldr	r5, [pc, #468]	; (8000b04 <main+0x308>)
 8000930:	682c      	ldr	r4, [r5, #0]
 8000932:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000936:	f000 82b0 	beq.w	8000e9a <main+0x69e>
 800093a:	3b01      	subs	r3, #1
 800093c:	d1f8      	bne.n	8000930 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
  while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x144>
 8000942:	b672      	cpsid	i
 8000944:	e7fe      	b.n	8000944 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000946:	f005 fd1b 	bl	8006380 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800094a:	4640      	mov	r0, r8
 800094c:	f005 fd66 	bl	800641c <BSP_SDRAM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	b108      	cbz	r0, 8000958 <main+0x15c>
 8000954:	b672      	cpsid	i
  while (1)
 8000956:	e7fe      	b.n	8000956 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000958:	486b      	ldr	r0, [pc, #428]	; (8000b08 <main+0x30c>)
 800095a:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800095c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800095e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000960:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000964:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000968:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800096c:	f007 fef0 	bl	8008750 <HAL_QSPI_Init>
 8000970:	b108      	cbz	r0, 8000976 <main+0x17a>
 8000972:	b672      	cpsid	i
  while (1)
 8000974:	e7fe      	b.n	8000974 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000976:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000978:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800097c:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000980:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000984:	f005 fb42 	bl	800600c <BSP_QSPI_Init>
 8000988:	b108      	cbz	r0, 800098e <main+0x192>
 800098a:	b672      	cpsid	i
  while (1)
 800098c:	e7fe      	b.n	800098c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800098e:	f005 fae9 	bl	8005f64 <BSP_QSPI_EnableMemoryMappedMode>
 8000992:	4603      	mov	r3, r0
 8000994:	b108      	cbz	r0, 800099a <main+0x19e>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800099a:	485d      	ldr	r0, [pc, #372]	; (8000b10 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800099c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a0:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000b1c <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 80009a4:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 80009a8:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009ac:	f006 f902 	bl	8006bb4 <HAL_DMA2D_Init>
 80009b0:	4605      	mov	r5, r0
 80009b2:	b108      	cbz	r0, 80009b8 <main+0x1bc>
 80009b4:	b672      	cpsid	i
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 80009b8:	4602      	mov	r2, r0
 80009ba:	4631      	mov	r1, r6
 80009bc:	4855      	ldr	r0, [pc, #340]	; (8000b14 <main+0x318>)
 80009be:	f006 ffa5 	bl	800790c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009c2:	2014      	movs	r0, #20
 80009c4:	f005 ffce 	bl	8006964 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009c8:	4631      	mov	r1, r6
 80009ca:	4622      	mov	r2, r4
 80009cc:	4851      	ldr	r0, [pc, #324]	; (8000b14 <main+0x318>)
 80009ce:	f006 ff9d 	bl	800790c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009d2:	200a      	movs	r0, #10
 80009d4:	f005 ffc6 	bl	8006964 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009d8:	2224      	movs	r2, #36	; 0x24
 80009da:	4629      	mov	r1, r5
 80009dc:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80009de:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009e0:	f01d fc5c 	bl	801e29c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009e4:	2218      	movs	r2, #24
 80009e6:	4629      	mov	r1, r5
 80009e8:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 80009ea:	4e4b      	ldr	r6, [pc, #300]	; (8000b18 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009ec:	f01d fc56 	bl	801e29c <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009f0:	2234      	movs	r2, #52	; 0x34
 80009f2:	4629      	mov	r1, r5
 80009f4:	a82d      	add	r0, sp, #180	; 0xb4
 80009f6:	f01d fc51 	bl	801e29c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009fa:	4629      	mov	r1, r5
 80009fc:	222c      	movs	r2, #44	; 0x2c
 80009fe:	a820      	add	r0, sp, #128	; 0x80
 8000a00:	f01d fc4c 	bl	801e29c <memset>
  hdsi.Instance = DSI;
 8000a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a08:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a0c:	a90e      	add	r1, sp, #56	; 0x38
 8000a0e:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a10:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a14:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a16:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a20:	f006 fa14 	bl	8006e4c <HAL_DSI_Init>
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x22e>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a2a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a2e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a32:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a36:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 8000a3a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a3c:	a917      	add	r1, sp, #92	; 0x5c
 8000a3e:	4630      	mov	r0, r6
 8000a40:	f006 fc30 	bl	80072a4 <HAL_DSI_ConfigHostTimeouts>
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x24e>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a4a:	2321      	movs	r3, #33	; 0x21
 8000a4c:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a4e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a50:	a911      	add	r1, sp, #68	; 0x44
 8000a52:	4831      	ldr	r0, [pc, #196]	; (8000b18 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a54:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a58:	2319      	movs	r3, #25
 8000a5a:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a5e:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 8000a60:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a64:	f006 fbe1 	bl	800722a <HAL_DSI_ConfigPhyTimer>
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x272>
 8000a6a:	b672      	cpsid	i
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a6e:	2104      	movs	r1, #4
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <main+0x31c>)
 8000a72:	f006 fbc9 	bl	8007208 <HAL_DSI_ConfigFlowControl>
 8000a76:	b108      	cbz	r0, 8000a7c <main+0x280>
 8000a78:	b672      	cpsid	i
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a7c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <main+0x31c>)
 8000a82:	f006 fd99 	bl	80075b8 <HAL_DSI_SetLowPowerRXFilter>
 8000a86:	4601      	mov	r1, r0
 8000a88:	b108      	cbz	r0, 8000a8e <main+0x292>
 8000a8a:	b672      	cpsid	i
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a8e:	4822      	ldr	r0, [pc, #136]	; (8000b18 <main+0x31c>)
 8000a90:	f006 f97a 	bl	8006d88 <HAL_DSI_ConfigErrorMonitor>
 8000a94:	b108      	cbz	r0, 8000a9a <main+0x29e>
 8000a96:	b672      	cpsid	i
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a9a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000aaa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000aae:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ab2:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000ab6:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000abe:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000ac2:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000aca:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ace:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ad6:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ad8:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ae2:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aea:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aee:	f006 fb57 	bl	80071a0 <HAL_DSI_ConfigCommand>
 8000af2:	b1a8      	cbz	r0, 8000b20 <main+0x324>
 8000af4:	b672      	cpsid	i
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <main+0x2fa>
 8000af8:	0300001b 	.word	0x0300001b
 8000afc:	10040000 	.word	0x10040000
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	58024400 	.word	0x58024400
 8000b08:	24000320 	.word	0x24000320
 8000b0c:	52005000 	.word	0x52005000
 8000b10:	240001f4 	.word	0x240001f4
 8000b14:	58021800 	.word	0x58021800
 8000b18:	2400025c 	.word	0x2400025c
 8000b1c:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000b20:	2305      	movs	r3, #5
 8000b22:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b26:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000b28:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b2a:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b2c:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000b2e:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b32:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b34:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b38:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b3a:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b3e:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b42:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b46:	4851      	ldr	r0, [pc, #324]	; (8000c8c <main+0x490>)
 8000b48:	f006 fab8 	bl	80070bc <HAL_DSI_ConfigAdaptedCommandMode>
 8000b4c:	4601      	mov	r1, r0
 8000b4e:	b108      	cbz	r0, 8000b54 <main+0x358>
 8000b50:	b672      	cpsid	i
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b54:	484d      	ldr	r0, [pc, #308]	; (8000c8c <main+0x490>)
 8000b56:	f006 faa0 	bl	800709a <HAL_DSI_SetGenericVCID>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	b108      	cbz	r0, 8000b62 <main+0x366>
 8000b5e:	b672      	cpsid	i
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b62:	4601      	mov	r1, r0
 8000b64:	2234      	movs	r2, #52	; 0x34
 8000b66:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000b68:	4d49      	ldr	r5, [pc, #292]	; (8000c90 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b6a:	f01d fb97 	bl	801e29c <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b6e:	4849      	ldr	r0, [pc, #292]	; (8000c94 <main+0x498>)
 8000b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b74:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 8000b78:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 8000b7c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8000b7e:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 8000b82:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b86:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b8e:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b90:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b94:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000b98:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b9c:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000ba0:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8000ba4:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000ba8:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bac:	f007 faf8 	bl	80081a0 <HAL_LTDC_Init>
 8000bb0:	b108      	cbz	r0, 8000bb6 <main+0x3ba>
 8000bb2:	b672      	cpsid	i
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <main+0x3b8>
  pLayerCfg.Alpha = 255;
 8000bb6:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000bbc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000bc0:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000bc2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000bc6:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000bca:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000bcc:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bd6:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bda:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000bdc:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000be0:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be4:	4602      	mov	r2, r0
 8000be6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000be8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bec:	f007 fba4 	bl	8008338 <HAL_LTDC_ConfigLayer>
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	b108      	cbz	r0, 8000bf8 <main+0x3fc>
 8000bf4:	b672      	cpsid	i
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bf8:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bfa:	4824      	ldr	r0, [pc, #144]	; (8000c8c <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bfc:	6993      	ldr	r3, [r2, #24]
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000c04:	f006 fbb4 	bl	8007370 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000c08:	4923      	ldr	r1, [pc, #140]	; (8000c98 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c0a:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c0c:	4824      	ldr	r0, [pc, #144]	; (8000ca0 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c0e:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <main+0x4a8>)
  IOCtx.Address     = 0;
 8000c12:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c14:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0x4ac>)
 8000c18:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c1a:	f004 ff97 	bl	8005b4c <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000c1e:	4632      	mov	r2, r6
 8000c20:	4621      	mov	r1, r4
 8000c22:	481f      	ldr	r0, [pc, #124]	; (8000ca0 <main+0x4a4>)
 8000c24:	f004 fbee 	bl	8005404 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c28:	2328      	movs	r3, #40	; 0x28
 8000c2a:	2215      	movs	r2, #21
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <main+0x490>)
 8000c30:	9400      	str	r4, [sp, #0]
 8000c32:	f006 fbd0 	bl	80073d6 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c36:	a92d      	add	r1, sp, #180	; 0xb4
 8000c38:	4814      	ldr	r0, [pc, #80]	; (8000c8c <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c3a:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c3c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c40:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c44:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c48:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c4c:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c50:	f006 faa6 	bl	80071a0 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c54:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c58:	4622      	mov	r2, r4
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f007 fb9a 	bl	8008394 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c60:	682a      	ldr	r2, [r5, #0]
 8000c62:	6993      	ldr	r3, [r2, #24]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c6a:	f000 fcbd 	bl	80015e8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c6e:	f000 fcba 	bl	80015e6 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c72:	f009 fd7d 	bl	800a770 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c76:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <main+0x4b0>)
 8000c78:	4621      	mov	r1, r4
 8000c7a:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <main+0x4b4>)
 8000c7c:	f009 fda4 	bl	800a7c8 <osThreadNew>
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <main+0x4b8>)
 8000c82:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c84:	f009 fd86 	bl	800a794 <osKernelStart>
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <main+0x48c>
 8000c8a:	bf00      	nop
 8000c8c:	2400025c 	.word	0x2400025c
 8000c90:	24000278 	.word	0x24000278
 8000c94:	50001000 	.word	0x50001000
 8000c98:	2400019c 	.word	0x2400019c
 8000c9c:	08005f35 	.word	0x08005f35
 8000ca0:	240001ac 	.word	0x240001ac
 8000ca4:	08001b7d 	.word	0x08001b7d
 8000ca8:	08001bb5 	.word	0x08001bb5
 8000cac:	08020408 	.word	0x08020408
 8000cb0:	080015f7 	.word	0x080015f7
 8000cb4:	240001cc 	.word	0x240001cc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	2214      	movs	r2, #20
 8000cba:	2100      	movs	r1, #0
 8000cbc:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f01d faec 	bl	801e29c <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cd2:	4883      	ldr	r0, [pc, #524]	; (8000ee0 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cda:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cde:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce8:	9304      	str	r3, [sp, #16]
 8000cea:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d00:	9305      	str	r3, [sp, #20]
 8000d02:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d04:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d14:	f003 0310 	and.w	r3, r3, #16
 8000d18:	9306      	str	r3, [sp, #24]
 8000d1a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d24:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d30:	9307      	str	r3, [sp, #28]
 8000d32:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	9308      	str	r3, [sp, #32]
 8000d4a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d4c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d54:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d58:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d60:	9309      	str	r3, [sp, #36]	; 0x24
 8000d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d74:	f003 0308 	and.w	r3, r3, #8
 8000d78:	930a      	str	r3, [sp, #40]	; 0x28
 8000d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d94:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d98:	f043 0320 	orr.w	r3, r3, #32
 8000d9c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000da0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000da4:	f003 0320 	and.w	r3, r3, #32
 8000da8:	930c      	str	r3, [sp, #48]	; 0x30
 8000daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000db8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8000dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000dc6:	f006 fda1 	bl	800790c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4845      	ldr	r0, [pc, #276]	; (8000ee4 <main+0x6e8>)
 8000dd0:	f006 fd9c 	bl	800790c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	4843      	ldr	r0, [pc, #268]	; (8000ee8 <main+0x6ec>)
 8000ddc:	f006 fd96 	bl	800790c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000de6:	483e      	ldr	r0, [pc, #248]	; (8000ee0 <main+0x6e4>)
 8000de8:	f006 fd90 	bl	800790c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df0:	a92d      	add	r1, sp, #180	; 0xb4
 8000df2:	483b      	ldr	r0, [pc, #236]	; (8000ee0 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfc:	f006 fbf2 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	; 0xb4
 8000e04:	4839      	ldr	r0, [pc, #228]	; (8000eec <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f006 fbe8 	bl	80075e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e14:	a92d      	add	r1, sp, #180	; 0xb4
 8000e16:	4833      	ldr	r0, [pc, #204]	; (8000ee4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f006 fbe0 	bl	80075e4 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e24:	a92d      	add	r1, sp, #180	; 0xb4
 8000e26:	4830      	ldr	r0, [pc, #192]	; (8000ee8 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f006 fbd8 	bl	80075e4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e34:	482e      	ldr	r0, [pc, #184]	; (8000ef0 <main+0x6f4>)
 8000e36:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e38:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000e3a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e3c:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e3e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e42:	f005 fe57 	bl	8006af4 <HAL_CRC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	f47f ad7a 	bne.w	8000942 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e4e:	492a      	ldr	r1, [pc, #168]	; (8000ef8 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e50:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e52:	482a      	ldr	r0, [pc, #168]	; (8000efc <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e54:	680a      	ldr	r2, [r1, #0]
 8000e56:	f022 0201 	bic.w	r2, r2, #1
 8000e5a:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e5c:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e5e:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e60:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e62:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e66:	2220      	movs	r2, #32
 8000e68:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e6c:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e6e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e72:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e76:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e7a:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e7c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e80:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e84:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e88:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e8a:	f009 f995 	bl	800a1b8 <HAL_SDRAM_Init>
 8000e8e:	4680      	mov	r8, r0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	f43f ad58 	beq.w	8000946 <main+0x14a>
 8000e96:	b672      	cpsid	i
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <main+0x69c>
  HAL_Init();
 8000e9a:	f005 fd23 	bl	80068e4 <HAL_Init>
  SystemClock_Config();
 8000e9e:	f7ff fc41 	bl	8000724 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ea2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ea6:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000eb0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ebc:	f006 fd34 	bl	8007928 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ec0:	4621      	mov	r1, r4
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f006 fd3e 	bl	8007944 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ec8:	4c0e      	ldr	r4, [pc, #56]	; (8000f04 <main+0x708>)
 8000eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ece:	6822      	ldr	r2, [r4, #0]
 8000ed0:	0412      	lsls	r2, r2, #16
 8000ed2:	f53f aef1 	bmi.w	8000cb8 <main+0x4bc>
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	d1f9      	bne.n	8000ece <main+0x6d2>
 8000eda:	b672      	cpsid	i
  while (1)
 8000edc:	e7fe      	b.n	8000edc <main+0x6e0>
 8000ede:	bf00      	nop
 8000ee0:	58022400 	.word	0x58022400
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58021400 	.word	0x58021400
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	240001d0 	.word	0x240001d0
 8000ef4:	58024c00 	.word	0x58024c00
 8000ef8:	52004000 	.word	0x52004000
 8000efc:	2400036c 	.word	0x2400036c
 8000f00:	52004140 	.word	0x52004140
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f08:	6802      	ldr	r2, [r0, #0]
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d101      	bne.n	8000f14 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f10:	f005 bd16 	b.w	8006940 <HAL_IncTick>
}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40001000 	.word	0x40001000

08000f1c <Error_Handler>:
 8000f1c:	b672      	cpsid	i
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <Error_Handler+0x2>

08000f20 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_MspInit+0x2c>)
{
 8000f22:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f2e:	f042 0202 	orr.w	r2, r2, #2
 8000f32:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f36:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f44:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	f005 bd37 	b.w	80069b8 <HAL_NVIC_SetPriority>
 8000f4a:	bf00      	nop
 8000f4c:	58024400 	.word	0x58024400

08000f50 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f50:	6802      	ldr	r2, [r0, #0]
{
 8000f52:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_CRC_MspInit+0x2c>)
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d10d      	bne.n	8000f76 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f5a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f62:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f76:	b002      	add	sp, #8
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	58024c00 	.word	0x58024c00

08000f80 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_DMA2D_MspInit+0x40>)
{
 8000f82:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000f84:	6802      	ldr	r2, [r0, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d117      	bne.n	8000fba <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f8c:	2107      	movs	r1, #7
 8000f8e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f90:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f94:	f042 0210 	orr.w	r2, r2, #16
 8000f98:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f9c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000faa:	f005 fd05 	bl	80069b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fae:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fb0:	b003      	add	sp, #12
 8000fb2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fb6:	f005 bd31 	b.w	8006a1c <HAL_NVIC_EnableIRQ>
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fc0:	52001000 	.word	0x52001000
 8000fc4:	58024400 	.word	0x58024400

08000fc8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b0ba      	sub	sp, #232	; 0xe8
 8000fcc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	2214      	movs	r2, #20
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	a803      	add	r0, sp, #12
 8000fd4:	f01d f962 	bl	801e29c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	22c8      	movs	r2, #200	; 0xc8
 8000fda:	2100      	movs	r1, #0
 8000fdc:	a808      	add	r0, sp, #32
 8000fde:	f01d f95d 	bl	801e29c <memset>
  if(hdsi->Instance==DSI)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fe8:	d138      	bne.n	800105c <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fee:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000ff2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff6:	f008 fbad 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	b108      	cbz	r0, 8001000 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000ffc:	f7ff ff8e 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001004:	a903      	add	r1, sp, #12
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001008:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800100c:	f042 0210 	orr.w	r2, r2, #16
 8001010:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001014:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001018:	f002 0210 	and.w	r2, r2, #16
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001020:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001028:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001040:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001046:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001048:	f006 facc 	bl	80075e4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800104c:	207b      	movs	r0, #123	; 0x7b
 800104e:	4622      	mov	r2, r4
 8001050:	2107      	movs	r1, #7
 8001052:	f005 fcb1 	bl	80069b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001056:	207b      	movs	r0, #123	; 0x7b
 8001058:	f005 fce0 	bl	8006a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800105c:	b03a      	add	sp, #232	; 0xe8
 800105e:	bd10      	pop	{r4, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	58022400 	.word	0x58022400

08001068 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001068:	b510      	push	{r4, lr}
 800106a:	b0b4      	sub	sp, #208	; 0xd0
 800106c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106e:	22c8      	movs	r2, #200	; 0xc8
 8001070:	2100      	movs	r1, #0
 8001072:	a802      	add	r0, sp, #8
 8001074:	f01d f912 	bl	801e29c <memset>
  if(hltdc->Instance==LTDC)
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_LTDC_MspInit+0x74>)
 800107c:	429a      	cmp	r2, r3
 800107e:	d12b      	bne.n	80010d8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001080:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001084:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001086:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800108a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800108e:	23a1      	movs	r3, #161	; 0xa1
 8001090:	2205      	movs	r2, #5
 8001092:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001096:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001098:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800109c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a0:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f008 fb56 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	b108      	cbz	r0, 80010ae <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80010aa:	f7ff ff37 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010ae:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010b0:	2058      	movs	r0, #88	; 0x58
 80010b2:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010b4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80010b8:	f042 0208 	orr.w	r2, r2, #8
 80010bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010c0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010ce:	f005 fc73 	bl	80069b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f005 fca2 	bl	8006a1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010d8:	b034      	add	sp, #208	; 0xd0
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	50001000 	.word	0x50001000
 80010e0:	58024400 	.word	0x58024400

080010e4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b0bf      	sub	sp, #252	; 0xfc
 80010e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	2214      	movs	r2, #20
 80010ec:	2100      	movs	r1, #0
 80010ee:	a807      	add	r0, sp, #28
 80010f0:	f01d f8d4 	bl	801e29c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	22c8      	movs	r2, #200	; 0xc8
 80010f6:	2100      	movs	r1, #0
 80010f8:	a80c      	add	r0, sp, #48	; 0x30
 80010fa:	f01d f8cf 	bl	801e29c <memset>
  if(hqspi->Instance==QUADSPI)
 80010fe:	6822      	ldr	r2, [r4, #0]
 8001100:	4b53      	ldr	r3, [pc, #332]	; (8001250 <HAL_QSPI_MspInit+0x16c>)
 8001102:	429a      	cmp	r2, r3
 8001104:	f040 80a1 	bne.w	800124a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800110c:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001110:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001114:	f008 fb1e 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	b108      	cbz	r0, 800111e <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800111a:	f7ff feff 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001124:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001126:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112a:	a907      	add	r1, sp, #28
 800112c:	484a      	ldr	r0, [pc, #296]	; (8001258 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800112e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001134:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001138:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800113c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001144:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800114c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001150:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001154:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001158:	9202      	str	r2, [sp, #8]
 800115a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800115c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001168:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800116c:	f002 0220 	and.w	r2, r2, #32
 8001170:	9203      	str	r2, [sp, #12]
 8001172:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001174:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800117c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001180:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001184:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001188:	9204      	str	r2, [sp, #16]
 800118a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001190:	f042 0202 	orr.w	r2, r2, #2
 8001194:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001198:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800119c:	f002 0202 	and.w	r2, r2, #2
 80011a0:	9205      	str	r2, [sp, #20]
 80011a2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011a8:	f042 0208 	orr.w	r2, r2, #8
 80011ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	9306      	str	r3, [sp, #24]
 80011ba:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ca:	f006 fa0b 	bl	80075e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ce:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	a907      	add	r1, sp, #28
 80011d2:	4821      	ldr	r0, [pc, #132]	; (8001258 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011d4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011de:	f006 fa01 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e4:	a907      	add	r1, sp, #28
 80011e6:	481d      	ldr	r0, [pc, #116]	; (800125c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011e8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f2:	f006 f9f7 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011fa:	a907      	add	r1, sp, #28
 80011fc:	4817      	ldr	r0, [pc, #92]	; (800125c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011fe:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001208:	f006 f9ec 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800120c:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120e:	a907      	add	r1, sp, #28
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001212:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800121c:	f006 f9e2 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001220:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	a907      	add	r1, sp, #28
 8001224:	480f      	ldr	r0, [pc, #60]	; (8001264 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001226:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f006 f9d8 	bl	80075e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001234:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001238:	a907      	add	r1, sp, #28
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800123c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f006 f9cd 	bl	80075e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800124a:	b03f      	add	sp, #252	; 0xfc
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	bf00      	nop
 8001250:	52005000 	.word	0x52005000
 8001254:	58024400 	.word	0x58024400
 8001258:	58021800 	.word	0x58021800
 800125c:	58021400 	.word	0x58021400
 8001260:	58021c00 	.word	0x58021c00
 8001264:	58020400 	.word	0x58020400
 8001268:	58020c00 	.word	0x58020c00

0800126c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001270:	2100      	movs	r1, #0
 8001272:	2214      	movs	r2, #20
 8001274:	a801      	add	r0, sp, #4
 8001276:	f01d f811 	bl	801e29c <memset>
  if (FMC_Initialized) {
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_SDRAM_MspInit+0xf8>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	2900      	cmp	r1, #0
 8001280:	d16d      	bne.n	800135e <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001282:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001286:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	22c0      	movs	r2, #192	; 0xc0
 800128a:	f01d f807 	bl	801e29c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800128e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001292:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001294:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001296:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129a:	f008 fa5b 	bl	8009754 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	b108      	cbz	r0, 80012a4 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80012a0:	f7ff fe3c 	bl	8000f1c <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a4:	4b30      	ldr	r3, [pc, #192]	; (8001368 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2600      	movs	r6, #0
 80012aa:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80012ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b0:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b2:	a901      	add	r1, sp, #4
 80012b4:	482d      	ldr	r0, [pc, #180]	; (800136c <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80012b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80012be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80012c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012d8:	f006 f984 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	4823      	ldr	r0, [pc, #140]	; (8001370 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ee:	f006 f979 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80012f2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012f6:	a901      	add	r1, sp, #4
 80012f8:	481e      	ldr	r0, [pc, #120]	; (8001374 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012fa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001304:	f006 f96e 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001308:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	a901      	add	r1, sp, #4
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001310:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800131a:	f006 f963 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800131e:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	a901      	add	r1, sp, #4
 8001324:	4815      	ldr	r0, [pc, #84]	; (800137c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001326:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001330:	f006 f958 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001334:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	a901      	add	r1, sp, #4
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800133c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001346:	f006 f94d 	bl	80075e4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800134a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	a901      	add	r1, sp, #4
 800134e:	480d      	ldr	r0, [pc, #52]	; (8001384 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001350:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135a:	f006 f943 	bl	80075e4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800135e:	b039      	add	sp, #228	; 0xe4
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	bf00      	nop
 8001364:	240003a4 	.word	0x240003a4
 8001368:	58024400 	.word	0x58024400
 800136c:	58022000 	.word	0x58022000
 8001370:	58021000 	.word	0x58021000
 8001374:	58021c00 	.word	0x58021c00
 8001378:	58021800 	.word	0x58021800
 800137c:	58020c00 	.word	0x58020c00
 8001380:	58021400 	.word	0x58021400
 8001384:	58020800 	.word	0x58020800

08001388 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001388:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_SDRAM_MspDeInit+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	bb62      	cbnz	r2, 80013ea <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001390:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001392:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001396:	4816      	ldr	r0, [pc, #88]	; (80013f0 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001398:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_SDRAM_MspDeInit+0x6c>)
 800139c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 80013a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013a4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80013a8:	f006 fa08 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80013ac:	f64f 7183 	movw	r1, #65411	; 0xff83
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <HAL_SDRAM_MspDeInit+0x70>)
 80013b2:	f006 fa03 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80013b6:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <HAL_SDRAM_MspDeInit+0x74>)
 80013bc:	f006 f9fe 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013c0:	f248 1131 	movw	r1, #33073	; 0x8131
 80013c4:	480e      	ldr	r0, [pc, #56]	; (8001400 <HAL_SDRAM_MspDeInit+0x78>)
 80013c6:	f006 f9f9 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013ca:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <HAL_SDRAM_MspDeInit+0x7c>)
 80013d0:	f006 f9f4 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013d4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013d8:	480b      	ldr	r0, [pc, #44]	; (8001408 <HAL_SDRAM_MspDeInit+0x80>)
 80013da:	f006 f9ef 	bl	80077bc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013de:	210d      	movs	r1, #13
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013e6:	f006 b9e9 	b.w	80077bc <HAL_GPIO_DeInit>
}
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	240003a0 	.word	0x240003a0
 80013f0:	58022000 	.word	0x58022000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58021000 	.word	0x58021000
 80013fc:	58021c00 	.word	0x58021c00
 8001400:	58021800 	.word	0x58021800
 8001404:	58020c00 	.word	0x58020c00
 8001408:	58021400 	.word	0x58021400
 800140c:	58020800 	.word	0x58020800

08001410 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001410:	280f      	cmp	r0, #15
{
 8001412:	b510      	push	{r4, lr}
 8001414:	4604      	mov	r4, r0
 8001416:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001418:	d902      	bls.n	8001420 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800141c:	b00a      	add	sp, #40	; 0x28
 800141e:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001420:	4601      	mov	r1, r0
 8001422:	2200      	movs	r2, #0
 8001424:	2036      	movs	r0, #54	; 0x36
 8001426:	f005 fac7 	bl	80069b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142a:	2036      	movs	r0, #54	; 0x36
 800142c:	f005 faf6 	bl	8006a1c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	4669      	mov	r1, sp
 8001434:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001436:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_InitTick+0x88>)
 800143a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800143e:	f042 0210 	orr.w	r2, r2, #16
 8001442:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001452:	f008 f865 	bl	8009520 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001456:	9b07      	ldr	r3, [sp, #28]
 8001458:	b9c3      	cbnz	r3, 800148c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800145a:	f008 f83d 	bl	80094d8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800145e:	4c0f      	ldr	r4, [pc, #60]	; (800149c <HAL_InitTick+0x8c>)
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_InitTick+0x90>)
 8001462:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001464:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001468:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_InitTick+0x94>)
 800146c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001470:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001472:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001474:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001476:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001478:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800147c:	f009 f89c 	bl	800a5b8 <HAL_TIM_Base_Init>
 8001480:	2800      	cmp	r0, #0
 8001482:	d1ca      	bne.n	800141a <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001484:	4620      	mov	r0, r4
 8001486:	f008 ff3f 	bl	800a308 <HAL_TIM_Base_Start_IT>
 800148a:	e7c7      	b.n	800141c <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800148c:	f008 f824 	bl	80094d8 <HAL_RCC_GetPCLK1Freq>
 8001490:	0040      	lsls	r0, r0, #1
 8001492:	e7e4      	b.n	800145e <HAL_InitTick+0x4e>
 8001494:	24000058 	.word	0x24000058
 8001498:	58024400 	.word	0x58024400
 800149c:	240003a8 	.word	0x240003a8
 80014a0:	40001000 	.word	0x40001000
 80014a4:	000f4240 	.word	0x000f4240

080014a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler>

080014aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler>

080014ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler>

080014ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler>

080014b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler>

080014b2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	4770      	bx	lr

080014b4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014b4:	4801      	ldr	r0, [pc, #4]	; (80014bc <TIM6_DAC_IRQHandler+0x8>)
 80014b6:	f008 bf69 	b.w	800a38c <HAL_TIM_IRQHandler>
 80014ba:	bf00      	nop
 80014bc:	240003a8 	.word	0x240003a8

080014c0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014c0:	4801      	ldr	r0, [pc, #4]	; (80014c8 <LTDC_IRQHandler+0x8>)
 80014c2:	f006 bedc 	b.w	800827e <HAL_LTDC_IRQHandler>
 80014c6:	bf00      	nop
 80014c8:	24000278 	.word	0x24000278

080014cc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014cc:	4801      	ldr	r0, [pc, #4]	; (80014d4 <DMA2D_IRQHandler+0x8>)
 80014ce:	f005 bbb0 	b.w	8006c32 <HAL_DMA2D_IRQHandler>
 80014d2:	bf00      	nop
 80014d4:	240001f4 	.word	0x240001f4

080014d8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80014d8:	4801      	ldr	r0, [pc, #4]	; (80014e0 <DSI_IRQHandler+0x8>)
 80014da:	f005 bd6c 	b.w	8006fb6 <HAL_DSI_IRQHandler>
 80014de:	bf00      	nop
 80014e0:	2400025c 	.word	0x2400025c

080014e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014e4:	2001      	movs	r0, #1
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ea:	f01c fd89 	bl	801e000 <__errno>
 80014ee:	2316      	movs	r3, #22
 80014f0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	bd08      	pop	{r3, pc}

080014f8 <_exit>:

void _exit (int status)
{
 80014f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014fa:	f01c fd81 	bl	801e000 <__errno>
 80014fe:	2316      	movs	r3, #22
 8001500:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001502:	e7fe      	b.n	8001502 <_exit+0xa>

08001504 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	460d      	mov	r5, r1
 8001508:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	460e      	mov	r6, r1
 800150c:	1b73      	subs	r3, r6, r5
 800150e:	429c      	cmp	r4, r3
 8001510:	dc01      	bgt.n	8001516 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001512:	4620      	mov	r0, r4
 8001514:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001516:	f3af 8000 	nop.w
 800151a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	e7f5      	b.n	800150c <_read+0x8>

08001520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	460d      	mov	r5, r1
 8001524:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	460e      	mov	r6, r1
 8001528:	1b73      	subs	r3, r6, r5
 800152a:	429c      	cmp	r4, r3
 800152c:	dc01      	bgt.n	8001532 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800152e:	4620      	mov	r0, r4
 8001530:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001532:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001536:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	e7f5      	b.n	8001528 <_write+0x8>

0800153c <_close>:

int _close(int file)
{
	return -1;
}
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	4770      	bx	lr

08001542 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001546:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001548:	604b      	str	r3, [r1, #4]
}
 800154a:	4770      	bx	lr

0800154c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800154c:	2001      	movs	r0, #1
 800154e:	4770      	bx	lr

08001550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001550:	2000      	movs	r0, #0
 8001552:	4770      	bx	lr

08001554 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <_sbrk+0x30>)
{
 8001556:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001558:	6811      	ldr	r1, [r2, #0]
{
 800155a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800155c:	b909      	cbnz	r1, 8001562 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800155e:	490a      	ldr	r1, [pc, #40]	; (8001588 <_sbrk+0x34>)
 8001560:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	6810      	ldr	r0, [r2, #0]
 8001564:	4909      	ldr	r1, [pc, #36]	; (800158c <_sbrk+0x38>)
 8001566:	4c0a      	ldr	r4, [pc, #40]	; (8001590 <_sbrk+0x3c>)
 8001568:	4403      	add	r3, r0
 800156a:	1b09      	subs	r1, r1, r4
 800156c:	428b      	cmp	r3, r1
 800156e:	d906      	bls.n	800157e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001570:	f01c fd46 	bl	801e000 <__errno>
 8001574:	230c      	movs	r3, #12
 8001576:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001578:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800157c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800157e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001580:	e7fc      	b.n	800157c <_sbrk+0x28>
 8001582:	bf00      	nop
 8001584:	240003f8 	.word	0x240003f8
 8001588:	2400f758 	.word	0x2400f758
 800158c:	24080000 	.word	0x24080000
 8001590:	00001000 	.word	0x00001000

08001594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001598:	f005 f934 	bl	8006804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f01c fd35 	bl	801e030 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c6:	f7ff f919 	bl	80007fc <main>
  bx  lr
 80015ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015d4:	24000180 	.word	0x24000180
  ldr r2, =_sidata
 80015d8:	080237b8 	.word	0x080237b8
  ldr r2, =_sbss
 80015dc:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 80015e0:	2400f758 	.word	0x2400f758

080015e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC3_IRQHandler>

080015e6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015e6:	4770      	bx	lr

080015e8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80015e8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80015ea:	f000 ff6d 	bl	80024c8 <touchgfx_components_init>
  touchgfx_init();
}
 80015ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80015f2:	f000 bef5 	b.w	80023e0 <touchgfx_init>

080015f6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015f6:	f000 bf69 	b.w	80024cc <touchgfx_taskEntry>

080015fa <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015fa:	6840      	ldr	r0, [r0, #4]
    }
 80015fc:	4770      	bx	lr

080015fe <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015fe:	6041      	str	r1, [r0, #4]
    }
 8001600:	4770      	bx	lr

08001602 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001602:	1a51      	subs	r1, r2, r1
 8001604:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001608:	fbb1 f0f3 	udiv	r0, r1, r3
 800160c:	4770      	bx	lr
	...

08001610 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001612:	68c0      	ldr	r0, [r0, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001618:	4358      	muls	r0, r3
 800161a:	4770      	bx	lr
 800161c:	240003fc 	.word	0x240003fc

08001620 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001620:	4770      	bx	lr
	...

08001624 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001624:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001628:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800162c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 800162e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800164c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001650:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001656:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001658:	2101      	movs	r1, #1
 800165a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800165c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	2210      	movs	r2, #16
 8001660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001664:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001668:	fab2 f282 	clz	r2, r2
 800166c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	b983      	cbnz	r3, 8001696 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001674:	f007 ff0e 	bl	8009494 <HAL_RCC_GetHCLKFreq>
 8001678:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800167a:	f007 fd45 	bl	8009108 <HAL_RCC_GetSysClockFreq>
 800167e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001682:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001686:	f008 ff97 	bl	800a5b8 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800168c:	b003      	add	sp, #12
 800168e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001692:	f008 bdff 	b.w	800a294 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001696:	f007 ff1f 	bl	80094d8 <HAL_RCC_GetPCLK1Freq>
 800169a:	0044      	lsls	r4, r0, #1
 800169c:	e7ed      	b.n	800167a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	240003fc 	.word	0x240003fc
 80016a8:	08021b78 	.word	0x08021b78

080016ac <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	4604      	mov	r4, r0
 80016b0:	2110      	movs	r1, #16
 80016b2:	f01c fc44 	bl	801df3e <_ZdlPvj>
 80016b6:	4620      	mov	r0, r4
 80016b8:	bd10      	pop	{r4, pc}

080016ba <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 80016ba:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 80016bc:	6803      	ldr	r3, [r0, #0]
{
 80016be:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80016c0:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80016c2:	b131      	cbz	r1, 80016d2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80016c4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80016c6:	4790      	blx	r2
 80016c8:	6863      	ldr	r3, [r4, #4]
 80016ca:	1b5b      	subs	r3, r3, r5
 80016cc:	4418      	add	r0, r3
 80016ce:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80016d0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80016d2:	4790      	blx	r2
 80016d4:	60a0      	str	r0, [r4, #8]
}
 80016d6:	e7fb      	b.n	80016d0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080016d8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016d8:	4770      	bx	lr

080016da <_ZN20STM32TouchControllerD0Ev>:
 80016da:	b510      	push	{r4, lr}
 80016dc:	4604      	mov	r4, r0
 80016de:	2104      	movs	r1, #4
 80016e0:	f01c fc2d 	bl	801df3e <_ZdlPvj>
 80016e4:	4620      	mov	r0, r4
 80016e6:	bd10      	pop	{r4, pc}

080016e8 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80016e8:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80016ec:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80016f0:	2000      	movs	r0, #0
    hTS->Width = 800;
 80016f2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80016f4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80016fc:	230c      	movs	r3, #12
 80016fe:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001702:	f004 ff8b 	bl	800661c <BSP_TS_Init>
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_ZN20STM32TouchController4initEv+0x40>)
 8001708:	b910      	cbnz	r0, 8001710 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 800170e:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1fb      	bne.n	800170e <_ZN20STM32TouchController4initEv+0x26>
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <_ZN20STM32TouchController4initEv+0x44>)
 8001718:	212e      	movs	r1, #46	; 0x2e
 800171a:	4a05      	ldr	r2, [pc, #20]	; (8001730 <_ZN20STM32TouchController4initEv+0x48>)
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <_ZN20STM32TouchController4initEv+0x4c>)
 800171e:	f01c fc3d 	bl	801df9c <__assert_func>
 8001722:	bf00      	nop
 8001724:	24000458 	.word	0x24000458
 8001728:	24000454 	.word	0x24000454
 800172c:	08020454 	.word	0x08020454
 8001730:	08020467 	.word	0x08020467
 8001734:	08020491 	.word	0x08020491

08001738 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800173c:	460f      	mov	r7, r1
 800173e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001740:	781d      	ldrb	r5, [r3, #0]
 8001742:	b915      	cbnz	r5, 800174a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001744:	2500      	movs	r5, #0
}
 8001746:	4628      	mov	r0, r5
 8001748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800174a:	4c07      	ldr	r4, [pc, #28]	; (8001768 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800174c:	2000      	movs	r0, #0
 800174e:	4621      	mov	r1, r4
 8001750:	f004 fff8 	bl	8006744 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f4      	beq.n	8001744 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800175e:	68a3      	ldr	r3, [r4, #8]
 8001760:	6033      	str	r3, [r6, #0]
            return true;
 8001762:	e7f0      	b.n	8001746 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001764:	24000454 	.word	0x24000454
 8001768:	24000448 	.word	0x24000448

0800176c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800176c:	2803      	cmp	r0, #3
 800176e:	d825      	bhi.n	80017bc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001770:	e8df f000 	tbb	[pc, r0]
 8001774:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800177a:	2108      	movs	r1, #8
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	fab2 f282 	clz	r2, r2
 8001782:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001784:	480f      	ldr	r0, [pc, #60]	; (80017c4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001786:	f006 b8c1 	b.w	800790c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	fab2 f282 	clz	r2, r2
 8001796:	0952      	lsrs	r2, r2, #5
 8001798:	e7f4      	b.n	8001784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800179c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	fab2 f282 	clz	r2, r2
 80017a6:	0952      	lsrs	r2, r2, #5
 80017a8:	e7ec      	b.n	8001784 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	fab2 f282 	clz	r2, r2
 80017b8:	0952      	lsrs	r2, r2, #5
 80017ba:	e7e4      	b.n	8001786 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2400045c 	.word	0x2400045c
 80017c4:	58022400 	.word	0x58022400
 80017c8:	58021400 	.word	0x58021400

080017cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80017cc:	2803      	cmp	r0, #3
 80017ce:	d825      	bhi.n	800181c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80017d0:	e8df f000 	tbb	[pc, r0]
 80017d4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017da:	2108      	movs	r1, #8
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	3a00      	subs	r2, #0
 80017e0:	bf18      	it	ne
 80017e2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017e6:	f006 b891 	b.w	800790c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	3a00      	subs	r2, #0
 80017f4:	bf18      	it	ne
 80017f6:	2201      	movne	r2, #1
 80017f8:	e7f4      	b.n	80017e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	3a00      	subs	r2, #0
 8001804:	bf18      	it	ne
 8001806:	2201      	movne	r2, #1
 8001808:	e7ec      	b.n	80017e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	3a00      	subs	r2, #0
 8001816:	bf18      	it	ne
 8001818:	2201      	movne	r2, #1
 800181a:	e7e4      	b.n	80017e6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	2400045c 	.word	0x2400045c
 8001824:	58022400 	.word	0x58022400
 8001828:	58021400 	.word	0x58021400

0800182c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800182c:	2803      	cmp	r0, #3
 800182e:	d811      	bhi.n	8001854 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001830:	e8df f000 	tbb	[pc, r0]
 8001834:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001838:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800183a:	4807      	ldr	r0, [pc, #28]	; (8001858 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800183c:	f006 b86b 	b.w	8007916 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001844:	e7f9      	b.n	800183a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184a:	e7f6      	b.n	800183a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800184c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001852:	e7f3      	b.n	800183c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	58022400 	.word	0x58022400
 800185c:	58021400 	.word	0x58021400

08001860 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001860:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001862:	2803      	cmp	r0, #3
 8001864:	d815      	bhi.n	8001892 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001866:	e8df f000 	tbb	[pc, r0]
 800186a:	0a02      	.short	0x0a02
 800186c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800186e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001872:	f006 f845 	bl	8007900 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001876:	1e43      	subs	r3, r0, #1
 8001878:	4258      	negs	r0, r3
 800187a:	4158      	adcs	r0, r3
 800187c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800187e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001882:	e7f5      	b.n	8001870 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	e7f2      	b.n	8001870 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800188a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188e:	4803      	ldr	r0, [pc, #12]	; (800189c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001890:	e7ef      	b.n	8001872 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001892:	2000      	movs	r0, #0
 8001894:	e7ef      	b.n	8001876 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001896:	bf00      	nop
 8001898:	58022400 	.word	0x58022400
 800189c:	58021400 	.word	0x58021400

080018a0 <_ZN8touchgfx4GPIO4initEv>:
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4d08      	ldr	r5, [pc, #32]	; (80018c4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80018a4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80018a6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80018a8:	b2e0      	uxtb	r0, r4
 80018aa:	f7ff ffd9 	bl	8001860 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80018ae:	b118      	cbz	r0, 80018b8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80018b0:	682b      	ldr	r3, [r5, #0]
 80018b2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80018b4:	bf18      	it	ne
 80018b6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80018b8:	3401      	adds	r4, #1
 80018ba:	3504      	adds	r5, #4
 80018bc:	2c05      	cmp	r4, #5
 80018be:	d1f3      	bne.n	80018a8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	bf00      	nop
 80018c4:	2400045c 	.word	0x2400045c

080018c8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80018c8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80018ca:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80018ce:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80018d2:	4770      	bx	lr

080018d4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80018d4:	2000      	movs	r0, #0
 80018d6:	4770      	bx	lr

080018d8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80018d8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80018da:	3900      	subs	r1, #0
 80018dc:	4b02      	ldr	r3, [pc, #8]	; (80018e8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80018de:	bf18      	it	ne
 80018e0:	2101      	movne	r1, #1
 80018e2:	7019      	strb	r1, [r3, #0]
    }
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2400f4a3 	.word	0x2400f4a3

080018ec <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80018ec:	2000      	movs	r0, #0
 80018ee:	4770      	bx	lr

080018f0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80018f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018f2:	b10b      	cbz	r3, 80018f8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80018f4:	4608      	mov	r0, r1
 80018f6:	4718      	bx	r3
        }
    }
 80018f8:	4770      	bx	lr

080018fa <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80018fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018fe:	4770      	bx	lr

08001900 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001900:	6840      	ldr	r0, [r0, #4]
 8001902:	6803      	ldr	r3, [r0, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4718      	bx	r3

08001908 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001908:	4b01      	ldr	r3, [pc, #4]	; (8001910 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2400046c 	.word	0x2400046c

08001914 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001914:	4770      	bx	lr

08001916 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001916:	f000 be75 	b.w	8002604 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

0800191a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 800191a:	f000 be53 	b.w	80025c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

0800191e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 800191e:	f000 beb1 	b.w	8002684 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001922 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001922:	f000 bea3 	b.w	800266c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001926 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001926:	f000 be55 	b.w	80025d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800192a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800192a:	b510      	push	{r4, lr}
 800192c:	4604      	mov	r4, r0
        swapFrameBuffers();
 800192e:	f00c f85b 	bl	800d9e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	4620      	mov	r0, r4
 8001936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 800193a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800193e:	4718      	bx	r3

08001940 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001940:	f00b bab8 	b.w	800ceb4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001944 <_ZN11TouchGFXHALD0Ev>:
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
 8001948:	217c      	movs	r1, #124	; 0x7c
 800194a:	f01c faf8 	bl	801df3e <_ZdlPvj>
 800194e:	4620      	mov	r0, r4
 8001950:	bd10      	pop	{r4, pc}
	...

08001954 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800195a:	f00b bae7 	b.w	800cf2c <_ZN8touchgfx3HAL10beginFrameEv>
 800195e:	bf00      	nop
 8001960:	24000010 	.word	0x24000010

08001964 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001964:	b510      	push	{r4, lr}
 8001966:	4604      	mov	r4, r0
    HAL::endFrame();
 8001968:	f00b faec 	bl	800cf44 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 800196c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001970:	b113      	cbz	r3, 8001978 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001972:	4b02      	ldr	r3, [pc, #8]	; (800197c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
    }
}
 8001978:	bd10      	pop	{r4, pc}
 800197a:	bf00      	nop
 800197c:	24000010 	.word	0x24000010

08001980 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	4604      	mov	r4, r0
    GPIO::init();
 8001984:	f7ff ff8c 	bl	80018a0 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001988:	4d07      	ldr	r5, [pc, #28]	; (80019a8 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800198a:	4620      	mov	r0, r4
 800198c:	f000 fe23 	bl	80025d6 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001990:	2300      	movs	r3, #0
    mcuInstr.init();
 8001992:	4628      	mov	r0, r5
 8001994:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001998:	f7ff fe44 	bl	8001624 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800199c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800199e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80019a0:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
 80019a6:	bf00      	nop
 80019a8:	24000474 	.word	0x24000474

080019ac <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 80019ac:	6803      	ldr	r3, [r0, #0]
{
 80019ae:	4604      	mov	r4, r0
 80019b0:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b6:	4798      	blx	r3
    enableInterrupts();
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	4620      	mov	r0, r4
 80019bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019be:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80019c0:	f000 faa6 	bl	8001f10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	4620      	mov	r0, r4
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80019cc:	2100      	movs	r1, #0
 80019ce:	2329      	movs	r3, #41	; 0x29
 80019d0:	2215      	movs	r2, #21
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80019d4:	9100      	str	r1, [sp, #0]
 80019d6:	f005 fcfe 	bl	80073d6 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80019da:	f000 fa99 	bl	8001f10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	4620      	mov	r0, r4
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4798      	blx	r3
    for (;;)
 80019e6:	e7f8      	b.n	80019da <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80019e8:	2400025c 	.word	0x2400025c

080019ec <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80019ec:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80019f0:	b11b      	cbz	r3, 80019fa <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80019f2:	6840      	ldr	r0, [r0, #4]
 80019f4:	6803      	ldr	r3, [r0, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4718      	bx	r3
    }
 80019fa:	4618      	mov	r0, r3
 80019fc:	4770      	bx	lr
	...

08001a00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001a00:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001a06:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001a08:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001a0c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001a0e:	428c      	cmp	r4, r1
 8001a10:	d009      	beq.n	8001a26 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001a12:	b93a      	cbnz	r2, 8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a14:	490a      	ldr	r1, [pc, #40]	; (8001a40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001a18:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a1a:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001a1c:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001a1e:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a20:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a22:	701a      	strb	r2, [r3, #0]
        }
    }
 8001a24:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a26:	2a00      	cmp	r2, #0
 8001a28:	d0fc      	beq.n	8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a2c:	4904      	ldr	r1, [pc, #16]	; (8001a40 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a2e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a30:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a32:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001a34:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a36:	2200      	movs	r2, #0
 8001a38:	e7f3      	b.n	8001a22 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001a3a:	bf00      	nop
 8001a3c:	2400f49c 	.word	0x2400f49c
 8001a40:	2400f49a 	.word	0x2400f49a
 8001a44:	2400f498 	.word	0x2400f498

08001a48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a48:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d803      	bhi.n	8001a5a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d905      	bls.n	8001a66 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a5c:	219e      	movs	r1, #158	; 0x9e
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a60:	4807      	ldr	r0, [pc, #28]	; (8001a80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a62:	f01c fa9b 	bl	801df9c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a68:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a6c:	801a      	strh	r2, [r3, #0]
    }
 8001a6e:	bd08      	pop	{r3, pc}
 8001a70:	2400f498 	.word	0x2400f498
 8001a74:	2400f49a 	.word	0x2400f49a
 8001a78:	080204f8 	.word	0x080204f8
 8001a7c:	0802055b 	.word	0x0802055b
 8001a80:	0802059e 	.word	0x0802059e
 8001a84:	2400f49e 	.word	0x2400f49e
 8001a88:	2400f4a0 	.word	0x2400f4a0

08001a8c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	460d      	mov	r5, r1
 8001a90:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001a94:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a96:	b935      	cbnz	r5, 8001aa6 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001a9a:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001aa2:	f01c fa7b 	bl	801df9c <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001aa6:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001aaa:	3a00      	subs	r2, #0
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001aae:	bf18      	it	ne
 8001ab0:	2201      	movne	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001ab4:	6803      	ldr	r3, [r0, #0]
}
 8001ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001abe:	4718      	bx	r3
 8001ac0:	2400046c 	.word	0x2400046c
 8001ac4:	080205f1 	.word	0x080205f1
 8001ac8:	08020629 	.word	0x08020629
 8001acc:	0802059e 	.word	0x0802059e
 8001ad0:	2400f4a2 	.word	0x2400f4a2

08001ad4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001ad4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001ad8:	60c3      	str	r3, [r0, #12]
 8001ada:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001ae6:	8503      	strh	r3, [r0, #40]	; 0x28
 8001ae8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001aec:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001aee:	8603      	strh	r3, [r0, #48]	; 0x30
 8001af0:	6603      	str	r3, [r0, #96]	; 0x60
 8001af2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001af6:	6703      	str	r3, [r0, #112]	; 0x70
 8001af8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b00:	6742      	str	r2, [r0, #116]	; 0x74
 8001b02:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001b04:	b570      	push	{r4, r5, r6, lr}
 8001b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b0a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001b0e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001b12:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001b16:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001b1a:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001b1e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b22:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b26:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b2a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b2e:	42b5      	cmp	r5, r6
        instance = this;
 8001b30:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b32:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b36:	8015      	strh	r5, [r2, #0]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b3a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b3c:	bf28      	it	cs
 8001b3e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b42:	bf38      	it	cc
 8001b44:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b46:	8016      	strh	r6, [r2, #0]
 8001b48:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b4a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b4e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b52:	7013      	strb	r3, [r2, #0]
                           height)
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b56:	6003      	str	r3, [r0, #0]
}
 8001b58:	bd70      	pop	{r4, r5, r6, pc}
 8001b5a:	bf00      	nop
 8001b5c:	01000001 	.word	0x01000001
 8001b60:	2400f4a4 	.word	0x2400f4a4
 8001b64:	2400f498 	.word	0x2400f498
 8001b68:	2400f49e 	.word	0x2400f49e
 8001b6c:	2400f49a 	.word	0x2400f49a
 8001b70:	2400f4a0 	.word	0x2400f4a0
 8001b74:	2400f49c 	.word	0x2400f49c
 8001b78:	08020680 	.word	0x08020680

08001b7c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001b7c:	2b01      	cmp	r3, #1
    {
 8001b7e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001b80:	d80e      	bhi.n	8001ba0 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	2215      	movs	r2, #21
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <DSI_IO_Write+0x34>)
 8001b8e:	f005 fc22 	bl	80073d6 <HAL_DSI_ShortWrite>
 8001b92:	b118      	cbz	r0, 8001b9c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b94:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	e7fb      	b.n	8001b98 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001ba0:	e9cd 1200 	strd	r1, r2, [sp]
 8001ba4:	4601      	mov	r1, r0
 8001ba6:	2239      	movs	r2, #57	; 0x39
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <DSI_IO_Write+0x34>)
 8001baa:	f005 fc25 	bl	80073f8 <HAL_DSI_LongWrite>
 8001bae:	e7f0      	b.n	8001b92 <DSI_IO_Write+0x16>
 8001bb0:	2400025c 	.word	0x2400025c

08001bb4 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001bb6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001bba:	2106      	movs	r1, #6
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <DSI_IO_Read+0x24>)
 8001bc2:	f005 fc7a 	bl	80074ba <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001bc6:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001bc8:	bf14      	ite	ne
 8001bca:	f06f 0007 	mvnne.w	r0, #7
 8001bce:	2000      	moveq	r0, #0
 8001bd0:	b005      	add	sp, #20
 8001bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bd6:	bf00      	nop
 8001bd8:	2400025c 	.word	0x2400025c

08001bdc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001bdc:	b530      	push	{r4, r5, lr}
 8001bde:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001be0:	4c0c      	ldr	r4, [pc, #48]	; (8001c14 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001be2:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001be4:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001be6:	aa03      	add	r2, sp, #12
 8001be8:	2100      	movs	r1, #0
 8001bea:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001bec:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bf0:	9201      	str	r2, [sp, #4]
 8001bf2:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001bf4:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	2239      	movs	r2, #57	; 0x39
 8001bfc:	f005 fbfc 	bl	80073f8 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2335      	movs	r3, #53	; 0x35
 8001c04:	462a      	mov	r2, r5
 8001c06:	4620      	mov	r0, r4
 8001c08:	9100      	str	r1, [sp, #0]
 8001c0a:	f005 fbe4 	bl	80073d6 <HAL_DSI_ShortWrite>
    }
 8001c0e:	b005      	add	sp, #20
 8001c10:	bd30      	pop	{r4, r5, pc}
 8001c12:	bf00      	nop
 8001c14:	2400025c 	.word	0x2400025c

08001c18 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001c18:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001c1a:	f7ff ffdf 	bl	8001bdc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c20:	2202      	movs	r2, #2
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c2e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c3e:	f042 0202 	orr.w	r2, r2, #2
 8001c42:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c46:	2203      	movs	r2, #3
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c4a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop
 8001c50:	2400025c 	.word	0x2400025c
 8001c54:	50001000 	.word	0x50001000

08001c58 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <LCD_ReqEnable+0x20>)
    {
 8001c5a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c5c:	7819      	ldrb	r1, [r3, #0]
 8001c5e:	b939      	cbnz	r1, 8001c70 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c60:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c64:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c66:	2329      	movs	r3, #41	; 0x29
 8001c68:	2215      	movs	r2, #21
 8001c6a:	9100      	str	r1, [sp, #0]
 8001c6c:	f005 fbb3 	bl	80073d6 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001c70:	b003      	add	sp, #12
 8001c72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c76:	bf00      	nop
 8001c78:	24000484 	.word	0x24000484
 8001c7c:	2400025c 	.word	0x2400025c

08001c80 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001c82:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	232a      	movs	r3, #42	; 0x2a
 8001c88:	2239      	movs	r2, #57	; 0x39
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2304      	movs	r3, #4
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <LCD_SetUpdateRegionLeft+0x20>)
 8001c92:	f005 fbb1 	bl	80073f8 <HAL_DSI_LongWrite>
    }
 8001c96:	b003      	add	sp, #12
 8001c98:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c9c:	24000008 	.word	0x24000008
 8001ca0:	2400025c 	.word	0x2400025c

08001ca4 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001ca6:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	232a      	movs	r3, #42	; 0x2a
 8001cac:	2239      	movs	r2, #57	; 0x39
 8001cae:	2100      	movs	r1, #0
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <LCD_SetUpdateRegionRight+0x20>)
 8001cb6:	f005 fb9f 	bl	80073f8 <HAL_DSI_LongWrite>
    }
 8001cba:	b003      	add	sp, #12
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc0:	2400000c 	.word	0x2400000c
 8001cc4:	2400025c 	.word	0x2400025c

08001cc8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001cc8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001cca:	4d14      	ldr	r5, [pc, #80]	; (8001d1c <HAL_DSI_TearingEffectCallback+0x54>)
 8001ccc:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff fd4c 	bl	800176c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001cd4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001cd6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001ce0:	f000 f90a 	bl	8001ef8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001ce6:	682a      	ldr	r2, [r5, #0]
 8001ce8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001cf0:	b173      	cbz	r3, 8001d10 <HAL_DSI_TearingEffectCallback+0x48>
 8001cf2:	4d0c      	ldr	r5, [pc, #48]	; (8001d24 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001cf4:	782b      	ldrb	r3, [r5, #0]
 8001cf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cfa:	b94b      	cbnz	r3, 8001d10 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_DSI_TearingEffectCallback+0x60>)
 8001cfe:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001d00:	f7ff ffbe 	bl	8001c80 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f005 fb56 	bl	80073b6 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001d0e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001d10:	2000      	movs	r0, #0
    }
 8001d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001d16:	f7ff bd59 	b.w	80017cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001d1a:	bf00      	nop
 8001d1c:	2400f4a4 	.word	0x2400f4a4
 8001d20:	24000010 	.word	0x24000010
 8001d24:	24000485 	.word	0x24000485
 8001d28:	24000470 	.word	0x24000470

08001d2c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d30:	4e3f      	ldr	r6, [pc, #252]	; (8001e30 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d32:	b085      	sub	sp, #20
 8001d34:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d36:	7833      	ldrb	r3, [r6, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d076      	beq.n	8001e2a <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d3c:	4d3d      	ldr	r5, [pc, #244]	; (8001e34 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d3e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e44 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d42:	f8d5 9000 	ldr.w	r9, [r5]
 8001d46:	4f3c      	ldr	r7, [pc, #240]	; (8001e38 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d48:	f1b9 0f00 	cmp.w	r9, #0
 8001d4c:	d139      	bne.n	8001dc2 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f004 fe08 	bl	8006964 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f8cd 9000 	str.w	r9, [sp]
 8001d5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d5e:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d62:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d6c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d70:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d74:	f002 0208 	and.w	r2, r2, #8
 8001d78:	9200      	str	r2, [sp, #0]
 8001d7a:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d7c:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001d7e:	8812      	ldrh	r2, [r2, #0]
 8001d80:	0852      	lsrs	r2, r2, #1
 8001d82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d86:	4402      	add	r2, r0
 8001d88:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d8a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d92:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001da2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001dae:	f7ff ff79 	bl	8001ca4 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001db2:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001db4:	4620      	mov	r0, r4
                updateRegion = 1;
 8001db6:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001db8:	b005      	add	sp, #20
 8001dba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001dbe:	f005 bafa 	b.w	80073b6 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001dc2:	6803      	ldr	r3, [r0, #0]
 8001dc4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dc6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001dc8:	9502      	str	r5, [sp, #8]
 8001dca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dce:	f022 0208 	bic.w	r2, r2, #8
 8001dd2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dda:	f002 0208 	and.w	r2, r2, #8
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001de2:	f8d8 2000 	ldr.w	r2, [r8]
 8001de6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dea:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dec:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001dee:	f041 0101 	orr.w	r1, r1, #1
 8001df2:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001df4:	9503      	str	r5, [sp, #12]
 8001df6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dfa:	f042 0208 	orr.w	r2, r2, #8
 8001dfe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	9303      	str	r3, [sp, #12]
 8001e0c:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001e0e:	f7ff fcdd 	bl	80017cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001e12:	f7ff ff21 	bl	8001c58 <LCD_ReqEnable>
        return instance;
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001e18:	7035      	strb	r5, [r6, #0]
 8001e1a:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001e1c:	b128      	cbz	r0, 8001e2a <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e22:	b005      	add	sp, #20
 8001e24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e28:	4718      	bx	r3
 8001e2a:	b005      	add	sp, #20
 8001e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e30:	24000485 	.word	0x24000485
 8001e34:	24000470 	.word	0x24000470
 8001e38:	2400046c 	.word	0x2400046c
 8001e3c:	2400f49e 	.word	0x2400f49e
 8001e40:	2400f4a4 	.word	0x2400f4a4
 8001e44:	24000278 	.word	0x24000278

08001e48 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e48:	4601      	mov	r1, r0
 8001e4a:	b508      	push	{r3, lr}
        return instance;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <IdleTaskHook+0x14>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e50:	b101      	cbz	r1, 8001e54 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e52:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e54:	f00b fde2 	bl	800da1c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e58:	2001      	movs	r0, #1
 8001e5a:	bd08      	pop	{r3, pc}
 8001e5c:	2400f4a4 	.word	0x2400f4a4

08001e60 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	4a02      	ldr	r2, [pc, #8]	; (8001e74 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001e6a:	601a      	str	r2, [r3, #0]

}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	24000474 	.word	0x24000474
 8001e74:	08020434 	.word	0x08020434

08001e78 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2200      	movs	r2, #0
{
 8001e7c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e7e:	4608      	mov	r0, r1
 8001e80:	f008 fceb 	bl	800a85a <osSemaphoreNew>
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e86:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e88:	b928      	cbnz	r0, 8001e96 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e8c:	2128      	movs	r1, #40	; 0x28
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	; (8001eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e90:	480a      	ldr	r0, [pc, #40]	; (8001ebc <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e92:	f01c f883 	bl	801df9c <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f008 fd7a 	bl	800a994 <osMessageQueueNew>
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001ea2:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001ea4:	b918      	cbnz	r0, 8001eae <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001eac:	e7f0      	b.n	8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001eae:	bd08      	pop	{r3, pc}
 8001eb0:	2400048c 	.word	0x2400048c
 8001eb4:	08020750 	.word	0x08020750
 8001eb8:	08020799 	.word	0x08020799
 8001ebc:	080207c8 	.word	0x080207c8
 8001ec0:	24000488 	.word	0x24000488
 8001ec4:	08020817 	.word	0x08020817

08001ec8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ec8:	4b02      	ldr	r3, [pc, #8]	; (8001ed4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eca:	f04f 31ff 	mov.w	r1, #4294967295
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	f008 bd0d 	b.w	800a8ee <osSemaphoreAcquire>
 8001ed4:	2400048c 	.word	0x2400048c

08001ed8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f008 bd32 	b.w	800a944 <osSemaphoreRelease>
 8001ee0:	2400048c 	.word	0x2400048c

08001ee4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	f008 bd00 	b.w	800a8ee <osSemaphoreAcquire>
 8001eee:	bf00      	nop
 8001ef0:	2400048c 	.word	0x2400048c

08001ef4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ef4:	f7ff bff0 	b.w	8001ed8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ef8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4803      	ldr	r0, [pc, #12]	; (8001f08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001efc:	4903      	ldr	r1, [pc, #12]	; (8001f0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001efe:	461a      	mov	r2, r3
 8001f00:	6800      	ldr	r0, [r0, #0]
 8001f02:	f008 bd82 	b.w	800aa0a <osMessageQueuePut>
 8001f06:	bf00      	nop
 8001f08:	24000488 	.word	0x24000488
 8001f0c:	24000014 	.word	0x24000014

08001f10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001f10:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001f12:	2300      	movs	r3, #0
 8001f14:	4c07      	ldr	r4, [pc, #28]	; (8001f34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001f16:	a901      	add	r1, sp, #4
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	f008 fda5 	bl	800aa6a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2200      	movs	r2, #0
 8001f26:	a901      	add	r1, sp, #4
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	f008 fd9e 	bl	800aa6a <osMessageQueueGet>
}
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd10      	pop	{r4, pc}
 8001f32:	bf00      	nop
 8001f34:	24000488 	.word	0x24000488

08001f38 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f38:	6803      	ldr	r3, [r0, #0]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	4718      	bx	r3

08001f3e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f3e:	2001      	movs	r0, #1
 8001f40:	4770      	bx	lr

08001f42 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f42:	6803      	ldr	r3, [r0, #0]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	4718      	bx	r3

08001f48 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f48:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f4c:	4770      	bx	lr
	...

08001f50 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f56:	6003      	str	r3, [r0, #0]
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f62:	f3bf 8f6f 	isb	sy
}
 8001f66:	4770      	bx	lr
 8001f68:	080209b8 	.word	0x080209b8
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f70:	b510      	push	{r4, lr}
 8001f72:	4604      	mov	r4, r0
}
 8001f74:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f78:	f7ff ffea 	bl	8001f50 <_ZN8STM32DMAD1Ev>
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f01b ffde 	bl	801df3e <_ZdlPvj>
 8001f82:	4620      	mov	r0, r4
 8001f84:	bd10      	pop	{r4, pc}
	...

08001f88 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001f8a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f8c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f90:	f042 0210 	orr.w	r2, r2, #16
 8001f94:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001f98:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f9c:	f002 0210 	and.w	r2, r2, #16
 8001fa0:	9201      	str	r2, [sp, #4]
 8001fa2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001fa4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fa6:	f042 0210 	orr.w	r2, r2, #16
 8001faa:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001fac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fae:	f022 0210 	bic.w	r2, r2, #16
 8001fb2:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <_ZN8STM32DMA10initializeEv+0x44>)
 8001fb6:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <_ZN8STM32DMA10initializeEv+0x48>)
 8001fb8:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001fbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fc0:	609a      	str	r2, [r3, #8]
}
 8001fc2:	b002      	add	sp, #8
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	240001f4 	.word	0x240001f4
 8001fd0:	08001fd9 	.word	0x08001fd9
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <DMA2D_XferCpltCallback>:
 8001fd8:	4b02      	ldr	r3, [pc, #8]	; (8001fe4 <DMA2D_XferCpltCallback+0xc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fde:	6803      	ldr	r3, [r0, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	4718      	bx	r3
 8001fe4:	2400f4a4 	.word	0x2400f4a4

08001fe8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <_ZN8STM32DMAC1Ev+0x30>)
 8001fee:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	4625      	mov	r5, r4
 8001ff4:	2260      	movs	r2, #96	; 0x60
 8001ff6:	6060      	str	r0, [r4, #4]
 8001ff8:	7226      	strb	r6, [r4, #8]
 8001ffa:	7266      	strb	r6, [r4, #9]
 8001ffc:	f845 3b20 	str.w	r3, [r5], #32
 8002000:	4629      	mov	r1, r5
 8002002:	f00b fe5f 	bl	800dcc4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002006:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 800200a:	60ee      	str	r6, [r5, #12]
 800200c:	3524      	adds	r5, #36	; 0x24
 800200e:	42ab      	cmp	r3, r5
 8002010:	d1fb      	bne.n	800200a <_ZN8STM32DMAC1Ev+0x22>
}
 8002012:	4620      	mov	r0, r4
 8002014:	bd70      	pop	{r4, r5, r6, pc}
 8002016:	bf00      	nop
 8002018:	080209b8 	.word	0x080209b8

0800201c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800201c:	b508      	push	{r3, lr}
    switch (format)
 800201e:	290b      	cmp	r1, #11
 8002020:	d80b      	bhi.n	800203a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002022:	e8df f001 	tbb	[pc, r1]
 8002026:	0612      	.short	0x0612
 8002028:	0a0a0a10 	.word	0x0a0a0a10
 800202c:	0808080a 	.word	0x0808080a
 8002030:	0808      	.short	0x0808
 8002032:	2001      	movs	r0, #1
}
 8002034:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002036:	2005      	movs	r0, #5
        break;
 8002038:	e7fc      	b.n	8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800203a:	4b05      	ldr	r3, [pc, #20]	; (8002050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800203c:	2166      	movs	r1, #102	; 0x66
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002040:	4805      	ldr	r0, [pc, #20]	; (8002058 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002042:	f01b ffab 	bl	801df9c <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002046:	2000      	movs	r0, #0
 8002048:	e7f4      	b.n	8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800204a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800204c:	e7f2      	b.n	8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800204e:	bf00      	nop
 8002050:	08020859 	.word	0x08020859
 8002054:	08020874 	.word	0x08020874
 8002058:	080208be 	.word	0x080208be

0800205c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800205c:	b508      	push	{r3, lr}
    switch (format)
 800205e:	290a      	cmp	r1, #10
 8002060:	d809      	bhi.n	8002076 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002062:	e8df f001 	tbb	[pc, r1]
 8002066:	0610      	.short	0x0610
 8002068:	0808080e 	.word	0x0808080e
 800206c:	06060608 	.word	0x06060608
 8002070:	06          	.byte	0x06
 8002071:	00          	.byte	0x00
 8002072:	2001      	movs	r0, #1
}
 8002074:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002078:	2187      	movs	r1, #135	; 0x87
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800207c:	4805      	ldr	r0, [pc, #20]	; (8002094 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800207e:	f01b ff8d 	bl	801df9c <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002082:	2000      	movs	r0, #0
 8002084:	e7f6      	b.n	8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002086:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002088:	e7f4      	b.n	8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800208a:	bf00      	nop
 800208c:	08020859 	.word	0x08020859
 8002090:	0802090b 	.word	0x0802090b
 8002094:	080208be 	.word	0x080208be

08002098 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800209c:	7f4f      	ldrb	r7, [r1, #29]
{
 800209e:	460c      	mov	r4, r1
 80020a0:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020a2:	4639      	mov	r1, r7
 80020a4:	f7ff ffba 	bl	800201c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020a8:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80020ac:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020ae:	4648      	mov	r0, r9
 80020b0:	4641      	mov	r1, r8
 80020b2:	f7ff ffb3 	bl	800201c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020b6:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020b8:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80020ba:	4648      	mov	r0, r9
 80020bc:	f7ff ffce 	bl	800205c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020c0:	8aa1      	ldrh	r1, [r4, #20]
 80020c2:	8b62      	ldrh	r2, [r4, #26]
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020c6:	1a52      	subs	r2, r2, r1
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020ca:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020cc:	8b22      	ldrh	r2, [r4, #24]
 80020ce:	1a52      	subs	r2, r2, r1
 80020d0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020d2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020d4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020da:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020de:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020e0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020e2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020e4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ea:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ec:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020f0:	d026      	beq.n	8002140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020f2:	d810      	bhi.n	8002116 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020f4:	2920      	cmp	r1, #32
 80020f6:	ea45 0402 	orr.w	r4, r5, r2
 80020fa:	d062      	beq.n	80021c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020fc:	2940      	cmp	r1, #64	; 0x40
 80020fe:	d060      	beq.n	80021c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002100:	2904      	cmp	r1, #4
 8002102:	d05e      	beq.n	80021c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002104:	432a      	orrs	r2, r5
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002108:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800210e:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002110:	d05b      	beq.n	80021ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002112:	4a30      	ldr	r2, [pc, #192]	; (80021d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8002114:	e040      	b.n	8002198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002116:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800211a:	d007      	beq.n	800212c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 800211c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002120:	d1f0      	bne.n	8002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002122:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002126:	f042 0209 	orr.w	r2, r2, #9
 800212a:	e003      	b.n	8002134 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800212c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002130:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002134:	61da      	str	r2, [r3, #28]
        return color;
 8002136:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002138:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800213a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800213c:	6158      	str	r0, [r3, #20]
 800213e:	e02a      	b.n	8002196 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002140:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002142:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002144:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002148:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800214a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800214c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800214e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002152:	7822      	ldrb	r2, [r4, #0]
 8002154:	b142      	cbz	r2, 8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002156:	2a01      	cmp	r2, #1
 8002158:	d021      	beq.n	800219e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800215c:	f240 1101 	movw	r1, #257	; 0x101
 8002160:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002162:	481f      	ldr	r0, [pc, #124]	; (80021e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002164:	f01b ff1a 	bl	801df9c <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002168:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800216a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800216c:	8861      	ldrh	r1, [r4, #2]
 800216e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002172:	3901      	subs	r1, #1
 8002174:	f022 0210 	bic.w	r2, r2, #16
 8002178:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800217c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002180:	69da      	ldr	r2, [r3, #28]
 8002182:	f042 0220 	orr.w	r2, r2, #32
 8002186:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	0692      	lsls	r2, r2, #26
 800218c:	d4fc      	bmi.n	8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800218e:	2210      	movs	r2, #16
 8002190:	609a      	str	r2, [r3, #8]
            if(blend)
 8002192:	2800      	cmp	r0, #0
 8002194:	d0bd      	beq.n	8002112 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002196:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002198:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800219a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800219e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 80021a0:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021a4:	69d9      	ldr	r1, [r3, #28]
 80021a6:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 80021aa:	bf18      	it	ne
 80021ac:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80021ae:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80021b2:	f022 0210 	bic.w	r2, r2, #16
 80021b6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80021ba:	f042 0210 	orr.w	r2, r2, #16
 80021be:	61da      	str	r2, [r3, #28]
                break;
 80021c0:	e7dd      	b.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021c2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021c6:	61dc      	str	r4, [r3, #28]
 80021c8:	e7b7      	b.n	800213a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021ca:	f240 2201 	movw	r2, #513	; 0x201
 80021ce:	e7e3      	b.n	8002198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021d0:	52001000 	.word	0x52001000
 80021d4:	00010201 	.word	0x00010201
 80021d8:	08020956 	.word	0x08020956
 80021dc:	08020970 	.word	0x08020970
 80021e0:	080208be 	.word	0x080208be
 80021e4:	00020201 	.word	0x00020201

080021e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021ec:	7f89      	ldrb	r1, [r1, #30]
 80021ee:	f7ff ff35 	bl	800205c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021f4:	8aa5      	ldrh	r5, [r4, #20]
 80021f6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021fa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021fe:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002200:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002202:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002204:	6921      	ldr	r1, [r4, #16]
 8002206:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002208:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800220a:	6826      	ldr	r6, [r4, #0]
 800220c:	68e5      	ldr	r5, [r4, #12]
 800220e:	2e08      	cmp	r6, #8
 8002210:	d10d      	bne.n	800222e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002212:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002214:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002216:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002218:	4a09      	ldr	r2, [pc, #36]	; (8002240 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 800221a:	7f20      	ldrb	r0, [r4, #28]
 800221c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002220:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002224:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002226:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002228:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800222a:	601a      	str	r2, [r3, #0]
    }
}
 800222c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800222e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002230:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002232:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002236:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002238:	e7f7      	b.n	800222a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800223a:	bf00      	nop
 800223c:	52001000 	.word	0x52001000
 8002240:	00010009 	.word	0x00010009
 8002244:	00020201 	.word	0x00020201
 8002248:	00030201 	.word	0x00030201

0800224c <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	07d2      	lsls	r2, r2, #31
 8002252:	d4fc      	bmi.n	800224e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002254:	2223      	movs	r2, #35	; 0x23
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	52001000 	.word	0x52001000

08002260 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002260:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002262:	4c10      	ldr	r4, [pc, #64]	; (80022a4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002264:	6825      	ldr	r5, [r4, #0]
 8002266:	07ed      	lsls	r5, r5, #31
 8002268:	d4fc      	bmi.n	8002264 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800226a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800226c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800226e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002270:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002272:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002276:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800227a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800227c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800227e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002280:	d00c      	beq.n	800229c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002282:	4909      	ldr	r1, [pc, #36]	; (80022a8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002284:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002288:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800228a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800228e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002292:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002294:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002296:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002298:	6023      	str	r3, [r4, #0]
    }
}
 800229a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800229c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 80022a0:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 80022a2:	e7f9      	b.n	8002298 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 80022a4:	52001000 	.word	0x52001000
 80022a8:	00010009 	.word	0x00010009
 80022ac:	00020001 	.word	0x00020001
 80022b0:	00030001 	.word	0x00030001

080022b4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80022b4:	2001      	movs	r0, #1
 80022b6:	4770      	bx	lr

080022b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80022b8:	200c      	movs	r0, #12
 80022ba:	4770      	bx	lr

080022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80022bc:	230c      	movs	r3, #12
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022c6:	230c      	movs	r3, #12
 80022c8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022cc:	3008      	adds	r0, #8
 80022ce:	4770      	bx	lr

080022d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d0:	2001      	movs	r0, #1
 80022d2:	4770      	bx	lr

080022d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d4:	f244 50a0 	movw	r0, #17824	; 0x45a0
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	f244 53a0 	movw	r3, #17824	; 0x45a0
 80022de:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022e2:	3008      	adds	r0, #8
 80022e4:	4770      	bx	lr

080022e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e6:	f244 53a0 	movw	r3, #17824	; 0x45a0
 80022ea:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ee:	3008      	adds	r0, #8
 80022f0:	4770      	bx	lr

080022f2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022f2:	2001      	movs	r0, #1
 80022f4:	4770      	bx	lr

080022f6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022f6:	2010      	movs	r0, #16
 80022f8:	4770      	bx	lr

080022fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022fa:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022fe:	3008      	adds	r0, #8
 8002300:	4770      	bx	lr

08002302 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002302:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002306:	3008      	adds	r0, #8
 8002308:	4770      	bx	lr

0800230a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 800230a:	4608      	mov	r0, r1
 800230c:	f000 bb8a 	b.w	8002a24 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002312:	b510      	push	{r4, lr}
 8002314:	4604      	mov	r4, r0
 8002316:	6003      	str	r3, [r0, #0]
 8002318:	f00a fb25 	bl	800c966 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800231c:	4620      	mov	r0, r4
 800231e:	bd10      	pop	{r4, pc}
 8002320:	08020a70 	.word	0x08020a70

08002324 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002324:	b510      	push	{r4, lr}
 8002326:	4604      	mov	r4, r0
 8002328:	f7ff fff2 	bl	8002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800232c:	2114      	movs	r1, #20
 800232e:	4620      	mov	r0, r4
 8002330:	f01b fe05 	bl	801df3e <_ZdlPvj>
 8002334:	4620      	mov	r0, r4
 8002336:	bd10      	pop	{r4, pc}

08002338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800233a:	b510      	push	{r4, lr}
 800233c:	4604      	mov	r4, r0
 800233e:	6003      	str	r3, [r0, #0]
 8002340:	f00a fb11 	bl	800c966 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002344:	4620      	mov	r0, r4
 8002346:	bd10      	pop	{r4, pc}
 8002348:	08020a3c 	.word	0x08020a3c

0800234c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800234c:	b510      	push	{r4, lr}
 800234e:	4604      	mov	r4, r0
 8002350:	f7ff fff2 	bl	8002338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002354:	f244 51a8 	movw	r1, #17832	; 0x45a8
 8002358:	4620      	mov	r0, r4
 800235a:	f01b fdf0 	bl	801df3e <_ZdlPvj>
 800235e:	4620      	mov	r0, r4
 8002360:	bd10      	pop	{r4, pc}
	...

08002364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002366:	b510      	push	{r4, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	6003      	str	r3, [r0, #0]
 800236c:	f00a fafb 	bl	800c966 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002370:	4620      	mov	r0, r4
 8002372:	bd10      	pop	{r4, pc}
 8002374:	08020a08 	.word	0x08020a08

08002378 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002378:	b510      	push	{r4, lr}
 800237a:	4604      	mov	r4, r0
 800237c:	f7ff fff2 	bl	8002364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002380:	2118      	movs	r1, #24
 8002382:	4620      	mov	r0, r4
 8002384:	f01b fddb 	bl	801df3e <_ZdlPvj>
 8002388:	4620      	mov	r0, r4
 800238a:	bd10      	pop	{r4, pc}

0800238c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800238c:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <_ZN12FrontendHeapD1Ev+0x28>)
 800238e:	b510      	push	{r4, lr}
 8002390:	4604      	mov	r4, r0
 8002392:	6003      	str	r3, [r0, #0]
 8002394:	f500 408b 	add.w	r0, r0, #17792	; 0x4580
 8002398:	3054      	adds	r0, #84	; 0x54
 800239a:	f7ff ffb9 	bl	8002310 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800239e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80023a2:	f7ff ffc9 	bl	8002338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80023a6:	f104 0014 	add.w	r0, r4, #20
 80023aa:	f7ff ffdb 	bl	8002364 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80023ae:	4620      	mov	r0, r4
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	bf00      	nop
 80023b4:	08020aa4 	.word	0x08020aa4

080023b8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80023b8:	b508      	push	{r3, lr}
 80023ba:	4802      	ldr	r0, [pc, #8]	; (80023c4 <__tcf_0+0xc>)
 80023bc:	f7ff ffe6 	bl	800238c <_ZN12FrontendHeapD1Ev>
 80023c0:	bd08      	pop	{r3, pc}
 80023c2:	bf00      	nop
 80023c4:	24000494 	.word	0x24000494

080023c8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023c8:	b510      	push	{r4, lr}
 80023ca:	4604      	mov	r4, r0
 80023cc:	f7ff ffde 	bl	800238c <_ZN12FrontendHeapD1Ev>
 80023d0:	f244 7148 	movw	r1, #18248	; 0x4748
 80023d4:	4620      	mov	r0, r4
 80023d6:	f01b fdb2 	bl	801df3e <_ZdlPvj>
 80023da:	4620      	mov	r0, r4
 80023dc:	bd10      	pop	{r4, pc}
	...

080023e0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023e4:	f000 f9aa 	bl	800273c <_ZN14BitmapDatabase11getInstanceEv>
 80023e8:	2400      	movs	r4, #0
 80023ea:	4605      	mov	r5, r0
 80023ec:	f000 f9aa 	bl	8002744 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023f0:	4623      	mov	r3, r4
 80023f2:	4601      	mov	r1, r0
 80023f4:	4622      	mov	r2, r4
 80023f6:	4628      	mov	r0, r5
 80023f8:	9400      	str	r4, [sp, #0]
 80023fa:	f013 f98f 	bl	801571c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <touchgfx_init+0xb8>)
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002402:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002404:	4d26      	ldr	r5, [pc, #152]	; (80024a0 <touchgfx_init+0xc0>)
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f000 fd96 	bl	8002f38 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800240c:	4825      	ldr	r0, [pc, #148]	; (80024a4 <touchgfx_init+0xc4>)
 800240e:	f013 f83d 	bl	801548c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002412:	782b      	ldrb	r3, [r5, #0]
 8002414:	f3bf 8f5b 	dmb	ish
 8002418:	07db      	lsls	r3, r3, #31
 800241a:	d436      	bmi.n	800248a <touchgfx_init+0xaa>
 800241c:	4628      	mov	r0, r5
 800241e:	f01b fd90 	bl	801df42 <__cxa_guard_acquire>
 8002422:	b390      	cbz	r0, 800248a <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002424:	4c20      	ldr	r4, [pc, #128]	; (80024a8 <touchgfx_init+0xc8>)
 8002426:	4f21      	ldr	r7, [pc, #132]	; (80024ac <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <touchgfx_init+0xd0>)
 800242a:	f104 0014 	add.w	r0, r4, #20
 800242e:	f107 0618 	add.w	r6, r7, #24
 8002432:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002436:	6023      	str	r3, [r4, #0]
 8002438:	6060      	str	r0, [r4, #4]
 800243a:	f8c4 8008 	str.w	r8, [r4, #8]
 800243e:	60e7      	str	r7, [r4, #12]
 8002440:	6126      	str	r6, [r4, #16]
 8002442:	f00a fa91 	bl	800c968 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <touchgfx_init+0xd4>)
 8002448:	4640      	mov	r0, r8
 800244a:	6163      	str	r3, [r4, #20]
 800244c:	f00a fa8c 	bl	800c968 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002450:	4b19      	ldr	r3, [pc, #100]	; (80024b8 <touchgfx_init+0xd8>)
 8002452:	4638      	mov	r0, r7
 8002454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002456:	f00a fa87 	bl	800c968 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800245a:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <touchgfx_init+0xdc>)
 8002460:	f503 60bd 	add.w	r0, r3, #1512	; 0x5e8
 8002464:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
 8002468:	f001 fdb6 	bl	8003fd8 <_ZN5ModelC1Ev>
 800246c:	4622      	mov	r2, r4
 800246e:	f107 0114 	add.w	r1, r7, #20
 8002472:	4630      	mov	r0, r6
 8002474:	f001 fda6 	bl	8003fc4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002478:	4630      	mov	r0, r6
 800247a:	f000 fad3 	bl	8002a24 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800247e:	4810      	ldr	r0, [pc, #64]	; (80024c0 <touchgfx_init+0xe0>)
 8002480:	f01b fdaa 	bl	801dfd8 <atexit>
 8002484:	4628      	mov	r0, r5
 8002486:	f01b fd68 	bl	801df5a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800248a:	480e      	ldr	r0, [pc, #56]	; (80024c4 <touchgfx_init+0xe4>)
}
 800248c:	b002      	add	sp, #8
 800248e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002492:	f7ff ba75 	b.w	8001980 <_ZN11TouchGFXHAL10initializeEv>
 8002496:	bf00      	nop
 8002498:	2400f508 	.word	0x2400f508
 800249c:	240059fc 	.word	0x240059fc
 80024a0:	24000490 	.word	0x24000490
 80024a4:	24000018 	.word	0x24000018
 80024a8:	24000494 	.word	0x24000494
 80024ac:	24004a68 	.word	0x24004a68
 80024b0:	08020aa4 	.word	0x08020aa4
 80024b4:	08020a08 	.word	0x08020a08
 80024b8:	08020a3c 	.word	0x08020a3c
 80024bc:	08020a70 	.word	0x08020a70
 80024c0:	080023b9 	.word	0x080023b9
 80024c4:	24005980 	.word	0x24005980

080024c8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024c8:	4770      	bx	lr
	...

080024cc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <touchgfx_taskEntry+0x8>)
 80024ce:	f7ff ba6d 	b.w	80019ac <_ZN11TouchGFXHAL9taskEntryEv>
 80024d2:	bf00      	nop
 80024d4:	24005980 	.word	0x24005980

080024d8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024d8:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024da:	490c      	ldr	r1, [pc, #48]	; (800250c <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024de:	4c0d      	ldr	r4, [pc, #52]	; (8002514 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024e0:	4608      	mov	r0, r1
 80024e2:	6023      	str	r3, [r4, #0]
 80024e4:	f7ff fd80 	bl	8001fe8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024e8:	4a0b      	ldr	r2, [pc, #44]	; (8002518 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ea:	4610      	mov	r0, r2
 80024ec:	f015 fb30 	bl	8017b50 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024f0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024fa:	4808      	ldr	r0, [pc, #32]	; (800251c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024fc:	e9cd 3200 	strd	r3, r2, [sp]
 8002500:	4623      	mov	r3, r4
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 8002504:	f7ff fae6 	bl	8001ad4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8002508:	b002      	add	sp, #8
 800250a:	bd10      	pop	{r4, pc}
 800250c:	24004be0 	.word	0x24004be0
 8002510:	080204e8 	.word	0x080204e8
 8002514:	24004bdc 	.word	0x24004bdc
 8002518:	24005a00 	.word	0x24005a00
 800251c:	24005980 	.word	0x24005980

08002520 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002520:	4801      	ldr	r0, [pc, #4]	; (8002528 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002522:	f7ff bd15 	b.w	8001f50 <_ZN8STM32DMAD1Ev>
 8002526:	bf00      	nop
 8002528:	24004be0 	.word	0x24004be0

0800252c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800252c:	2000      	movs	r0, #0
 800252e:	4770      	bx	lr

08002530 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002530:	8081      	strh	r1, [r0, #4]
    }
 8002532:	4770      	bx	lr

08002534 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002534:	80c1      	strh	r1, [r0, #6]
    }
 8002536:	4770      	bx	lr

08002538 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002538:	8101      	strh	r1, [r0, #8]
    }
 800253a:	4770      	bx	lr

0800253c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800253c:	8141      	strh	r1, [r0, #10]
    }
 800253e:	4770      	bx	lr

08002540 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002540:	4770      	bx	lr

08002542 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002542:	4770      	bx	lr

08002544 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002544:	4770      	bx	lr

08002546 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002546:	4770      	bx	lr

08002548 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002548:	4770      	bx	lr

0800254a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800254a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800254c:	88c4      	ldrh	r4, [r0, #6]
 800254e:	6803      	ldr	r3, [r0, #0]
 8002550:	1b12      	subs	r2, r2, r4
 8002552:	8884      	ldrh	r4, [r0, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	1b09      	subs	r1, r1, r4
 8002558:	b212      	sxth	r2, r2
    }
 800255a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800255e:	b209      	sxth	r1, r1
 8002560:	4718      	bx	r3

08002562 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002566:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002568:	f04f 33ff 	mov.w	r3, #4294967295
 800256c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800256e:	6813      	ldr	r3, [r2, #0]
 8002570:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002572:	6010      	str	r0, [r2, #0]
    }
 8002574:	4770      	bx	lr

08002576 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002576:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800257a:	b11a      	cbz	r2, 8002584 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800257c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002580:	b102      	cbz	r2, 8002584 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002582:	6018      	str	r0, [r3, #0]
        }
    }
 8002584:	4770      	bx	lr

08002586 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002586:	2000      	movs	r0, #0
 8002588:	4770      	bx	lr

0800258a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800258a:	888b      	ldrh	r3, [r1, #4]
 800258c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800258e:	2001      	movs	r0, #1
 8002590:	4770      	bx	lr

08002592 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002592:	4770      	bx	lr

08002594 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002594:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002598:	4770      	bx	lr

0800259a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800259a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800259e:	4770      	bx	lr

080025a0 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80025a0:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80025a2:	b510      	push	{r4, lr}
        return rect.width;
 80025a4:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80025a8:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80025ac:	8002      	strh	r2, [r0, #0]
 80025ae:	8042      	strh	r2, [r0, #2]
 80025b0:	8084      	strh	r4, [r0, #4]
 80025b2:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80025b6:	2200      	movs	r2, #0
 80025b8:	8002      	strh	r2, [r0, #0]
 80025ba:	8042      	strh	r2, [r0, #2]
 80025bc:	8082      	strh	r2, [r0, #4]
 80025be:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80025c0:	4770      	bx	lr
	...

080025c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80025c6:	2290      	movs	r2, #144	; 0x90
 80025c8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000e100 	.word	0xe000e100

080025d4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025d4:	4770      	bx	lr

080025d6 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025d6:	b570      	push	{r4, r5, r6, lr}
 80025d8:	4604      	mov	r4, r0
    HAL::initialize();
 80025da:	f00a fcc0 	bl	800cf5e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025de:	6823      	ldr	r3, [r4, #0]
 80025e0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025e2:	f00f ff1d 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
 80025e6:	4601      	mov	r1, r0
 80025e8:	4620      	mov	r0, r4
 80025ea:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	4620      	mov	r0, r4
 80025f0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80025f4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025f8:	2300      	movs	r3, #0
 80025fa:	46ac      	mov	ip, r5
 80025fc:	461a      	mov	r2, r3
}
 80025fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002602:	4760      	bx	ip

08002604 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8002604:	f00a bc5c 	b.w	800cec0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08002608 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002608:	f00a bdb7 	b.w	800d17a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800260c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800260c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002610:	b112      	cbz	r2, 8002618 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	4718      	bx	r3
    }
 8002618:	4770      	bx	lr
	...

0800261c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800261c:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800261e:	6953      	ldr	r3, [r2, #20]
 8002620:	03db      	lsls	r3, r3, #15
{
 8002622:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002624:	d51e      	bpl.n	8002664 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002626:	2300      	movs	r3, #0
 8002628:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800262c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002630:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002634:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002638:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800263c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002640:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002642:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002646:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002648:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800264c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800264e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002652:	d2f9      	bcs.n	8002648 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002654:	3b20      	subs	r3, #32
 8002656:	f113 0f20 	cmn.w	r3, #32
 800265a:	d1f2      	bne.n	8002642 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800265c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002660:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800266e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002676:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800267a:	f3bf 8f6f 	isb	sy
}
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100

08002684 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002684:	4b02      	ldr	r3, [pc, #8]	; (8002690 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8002686:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002694:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002696:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002698:	4e12      	ldr	r6, [pc, #72]	; (80026e4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800269a:	4604      	mov	r4, r0
 800269c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 80026a0:	6003      	str	r3, [r0, #0]
 80026a2:	6833      	ldr	r3, [r6, #0]
 80026a4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80026a8:	b10a      	cbz	r2, 80026ae <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 80026aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026ac:	b900      	cbnz	r0, 80026b0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 80026ae:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4798      	blx	r3
 80026b6:	1e43      	subs	r3, r0, #1
 80026b8:	425d      	negs	r5, r3
 80026ba:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80026bc:	6833      	ldr	r3, [r6, #0]
 80026be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026c0:	b130      	cbz	r0, 80026d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026c2:	6803      	ldr	r3, [r0, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	4798      	blx	r3
 80026c8:	2801      	cmp	r0, #1
 80026ca:	bf08      	it	eq
 80026cc:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80026d0:	b92d      	cbnz	r5, 80026de <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80026d4:	2127      	movs	r1, #39	; 0x27
 80026d6:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80026da:	f01b fc5f 	bl	801df9c <__assert_func>
    }
 80026de:	4620      	mov	r0, r4
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	bf00      	nop
 80026e4:	2400f4a4 	.word	0x2400f4a4
 80026e8:	08020bc0 	.word	0x08020bc0
 80026ec:	08020ab0 	.word	0x08020ab0
 80026f0:	08020b0e 	.word	0x08020b0e
 80026f4:	08020b47 	.word	0x08020b47

080026f8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026f8:	4770      	bx	lr

080026fa <_ZN23ApplicationFontProviderD0Ev>:
 80026fa:	b510      	push	{r4, lr}
 80026fc:	4604      	mov	r4, r0
 80026fe:	2104      	movs	r1, #4
 8002700:	f01b fc1d 	bl	801df3e <_ZdlPvj>
 8002704:	4620      	mov	r0, r4
 8002706:	bd10      	pop	{r4, pc}

08002708 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002708:	b508      	push	{r3, lr}
    switch (typography)
 800270a:	2903      	cmp	r1, #3
 800270c:	d813      	bhi.n	8002736 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800270e:	e8df f001 	tbb	[pc, r1]
 8002712:	0602      	.short	0x0602
 8002714:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002716:	f000 fc5b 	bl	8002fd0 <_ZN17TypedTextDatabase8getFontsEv>
 800271a:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 800271c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800271e:	f000 fc57 	bl	8002fd0 <_ZN17TypedTextDatabase8getFontsEv>
 8002722:	6840      	ldr	r0, [r0, #4]
 8002724:	e7fa      	b.n	800271c <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002726:	f000 fc53 	bl	8002fd0 <_ZN17TypedTextDatabase8getFontsEv>
 800272a:	6880      	ldr	r0, [r0, #8]
 800272c:	e7f6      	b.n	800271c <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800272e:	f000 fc4f 	bl	8002fd0 <_ZN17TypedTextDatabase8getFontsEv>
 8002732:	68c0      	ldr	r0, [r0, #12]
 8002734:	e7f2      	b.n	800271c <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8002736:	2000      	movs	r0, #0
 8002738:	e7f0      	b.n	800271c <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

0800273c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800273c:	4800      	ldr	r0, [pc, #0]	; (8002740 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800273e:	4770      	bx	lr
 8002740:	08020bec 	.word	0x08020bec

08002744 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002744:	2001      	movs	r0, #1
 8002746:	4770      	bx	lr

08002748 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002748:	b513      	push	{r0, r1, r4, lr}
 800274a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800274c:	b151      	cbz	r1, 8002764 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800274e:	6803      	ldr	r3, [r0, #0]
 8002750:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002752:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002754:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002758:	689c      	ldr	r4, [r3, #8]
 800275a:	f10d 0303 	add.w	r3, sp, #3
 800275e:	47a0      	blx	r4
        return glyph;
    }
 8002760:	b002      	add	sp, #8
 8002762:	bd10      	pop	{r4, pc}
            return 0;
 8002764:	4608      	mov	r0, r1
 8002766:	e7fb      	b.n	8002760 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002768 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002768:	89c0      	ldrh	r0, [r0, #14]
 800276a:	4770      	bx	lr

0800276c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800276c:	8a00      	ldrh	r0, [r0, #16]
 800276e:	4770      	bx	lr

08002770 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002770:	88c0      	ldrh	r0, [r0, #6]
 8002772:	4770      	bx	lr

08002774 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002774:	8880      	ldrh	r0, [r0, #4]
 8002776:	4770      	bx	lr

08002778 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002778:	7a80      	ldrb	r0, [r0, #10]
    }
 800277a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800277e:	4770      	bx	lr

08002780 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002780:	7a80      	ldrb	r0, [r0, #10]
    }
 8002782:	09c0      	lsrs	r0, r0, #7
 8002784:	4770      	bx	lr

08002786 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002786:	4770      	bx	lr

08002788 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002788:	b510      	push	{r4, lr}
 800278a:	4604      	mov	r4, r0
    }
 800278c:	2108      	movs	r1, #8
 800278e:	f01b fbd6 	bl	801df3e <_ZdlPvj>
 8002792:	4620      	mov	r0, r4
 8002794:	bd10      	pop	{r4, pc}

08002796 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002796:	4770      	bx	lr

08002798 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002798:	4770      	bx	lr

0800279a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800279a:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800279e:	6808      	ldr	r0, [r1, #0]
 80027a0:	6849      	ldr	r1, [r1, #4]
 80027a2:	c303      	stmia	r3!, {r0, r1}
    }
 80027a4:	4770      	bx	lr

080027a6 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80027a6:	4770      	bx	lr

080027a8 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80027a8:	4770      	bx	lr

080027aa <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80027aa:	6041      	str	r1, [r0, #4]
    }
 80027ac:	4770      	bx	lr

080027ae <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80027ae:	4770      	bx	lr

080027b0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80027b2:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80027b6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027c0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80027c4:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	08002871 	.word	0x08002871

080027d0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80027d0:	2301      	movs	r3, #1
 80027d2:	7203      	strb	r3, [r0, #8]
    }
 80027d4:	4770      	bx	lr

080027d6 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027d6:	4770      	bx	lr

080027d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80027d8:	4770      	bx	lr

080027da <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027da:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027dc:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80027de:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027e0:	68c2      	ldr	r2, [r0, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	1054      	asrs	r4, r2, #1
 80027e6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027ea:	07d2      	lsls	r2, r2, #31
 80027ec:	bf48      	it	mi
 80027ee:	590a      	ldrmi	r2, [r1, r4]
    }
 80027f0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027f4:	bf48      	it	mi
 80027f6:	58d3      	ldrmi	r3, [r2, r3]
 80027f8:	4718      	bx	r3

080027fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80027fa:	6843      	ldr	r3, [r0, #4]
 80027fc:	b12b      	cbz	r3, 800280a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80027fe:	6883      	ldr	r3, [r0, #8]
 8002800:	b92b      	cbnz	r3, 800280e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002802:	68c0      	ldr	r0, [r0, #12]
 8002804:	f000 0001 	and.w	r0, r0, #1
 8002808:	4770      	bx	lr
 800280a:	4618      	mov	r0, r3
 800280c:	4770      	bx	lr
 800280e:	2001      	movs	r0, #1
    }
 8002810:	4770      	bx	lr

08002812 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
 8002816:	210c      	movs	r1, #12
 8002818:	f01b fb91 	bl	801df3e <_ZdlPvj>
 800281c:	4620      	mov	r0, r4
 800281e:	bd10      	pop	{r4, pc}

08002820 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002820:	b510      	push	{r4, lr}
 8002822:	4604      	mov	r4, r0
 8002824:	2110      	movs	r1, #16
 8002826:	f01b fb8a 	bl	801df3e <_ZdlPvj>
 800282a:	4620      	mov	r0, r4
 800282c:	bd10      	pop	{r4, pc}

0800282e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800282e:	b510      	push	{r4, lr}
 8002830:	4604      	mov	r4, r0
 8002832:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002836:	f01b fb82 	bl	801df3e <_ZdlPvj>
 800283a:	4620      	mov	r0, r4
 800283c:	bd10      	pop	{r4, pc}

0800283e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800283e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002840:	f00f fdee 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002848:	f010 ba34 	b.w	8012cb4 <_ZN8touchgfx11Application10invalidateEv>

0800284c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002850:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002854:	b158      	cbz	r0, 800286e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002856:	6803      	ldr	r3, [r0, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4798      	blx	r3
 800285c:	b138      	cbz	r0, 800286e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800285e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002862:	6803      	ldr	r3, [r0, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800286e:	bd10      	pop	{r4, pc}

08002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002870:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002874:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002878:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800287a:	68a8      	ldr	r0, [r5, #8]
 800287c:	6803      	ldr	r3, [r0, #0]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	4798      	blx	r3
 8002882:	f244 539f 	movw	r3, #17823	; 0x459f
 8002886:	4298      	cmp	r0, r3
 8002888:	d805      	bhi.n	8002896 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800288c:	21a3      	movs	r1, #163	; 0xa3
 800288e:	4a46      	ldr	r2, [pc, #280]	; (80029a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002890:	4846      	ldr	r0, [pc, #280]	; (80029ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002892:	f01b fb83 	bl	801df9c <__assert_func>
 8002896:	6868      	ldr	r0, [r5, #4]
 8002898:	6803      	ldr	r3, [r0, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4798      	blx	r3
 800289e:	280f      	cmp	r0, #15
 80028a0:	d803      	bhi.n	80028aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80028a4:	21a4      	movs	r1, #164	; 0xa4
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80028a8:	e7f2      	b.n	8002890 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80028aa:	68e8      	ldr	r0, [r5, #12]
 80028ac:	6803      	ldr	r3, [r0, #0]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4798      	blx	r3
 80028b2:	280b      	cmp	r0, #11
 80028b4:	d803      	bhi.n	80028be <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80028b8:	21a5      	movs	r1, #165	; 0xa5
 80028ba:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80028bc:	e7e8      	b.n	8002890 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80028be:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80029bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80028c2:	f00f fdad 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80028c6:	3004      	adds	r0, #4
 80028c8:	f00f fdcf 	bl	801246a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80028cc:	f8d9 0000 	ldr.w	r0, [r9]
 80028d0:	b110      	cbz	r0, 80028d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4798      	blx	r3
    if (*currentTrans)
 80028d8:	f8d9 0000 	ldr.w	r0, [r9]
 80028dc:	b110      	cbz	r0, 80028e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4798      	blx	r3
    if (*currentScreen)
 80028e4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80029c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80028e8:	f8d8 0000 	ldr.w	r0, [r8]
 80028ec:	b110      	cbz	r0, 80028f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80028ee:	6803      	ldr	r3, [r0, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4798      	blx	r3
    if (*currentPresenter)
 80028f4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028f8:	b110      	cbz	r0, 8002900 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80028fa:	6803      	ldr	r3, [r0, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4798      	blx	r3
    if (*currentScreen)
 8002900:	f8d8 0000 	ldr.w	r0, [r8]
 8002904:	b110      	cbz	r0, 800290c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8002906:	6803      	ldr	r3, [r0, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4798      	blx	r3
    if (*currentPresenter)
 800290c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8002910:	b110      	cbz	r0, 8002918 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8002912:	6803      	ldr	r3, [r0, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002918:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 800291a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 800291c:	f04f 0b00 	mov.w	fp, #0
 8002920:	6803      	ldr	r3, [r0, #0]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	4798      	blx	r3
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002928:	4604      	mov	r4, r0
 800292a:	f8c0 b004 	str.w	fp, [r0, #4]
 800292e:	6003      	str	r3, [r0, #0]
 8002930:	4659      	mov	r1, fp
 8002932:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002936:	68a8      	ldr	r0, [r5, #8]
 8002938:	6803      	ldr	r3, [r0, #0]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	4798      	blx	r3
 800293e:	4606      	mov	r6, r0
 8002940:	f001 fb94 	bl	800406c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002944:	6868      	ldr	r0, [r5, #4]
 8002946:	4659      	mov	r1, fp
 8002948:	6803      	ldr	r3, [r0, #0]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	4798      	blx	r3
 800294e:	4605      	mov	r5, r0
 8002950:	4631      	mov	r1, r6
 8002952:	f001 fb53 	bl	8003ffc <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002956:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800295a:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800295e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002962:	b1e5      	cbz	r5, 800299e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002964:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002966:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800296a:	4630      	mov	r0, r6
 800296c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800296e:	f8c5 a008 	str.w	sl, [r5, #8]
 8002972:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002974:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002976:	4798      	blx	r3
    newPresenter->activate();
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	4628      	mov	r0, r5
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002980:	4621      	mov	r1, r4
 8002982:	4630      	mov	r0, r6
 8002984:	f011 faae 	bl	8013ee4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002988:	6823      	ldr	r3, [r4, #0]
 800298a:	4620      	mov	r0, r4
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4798      	blx	r3
    newTransition->invalidate();
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	4620      	mov	r0, r4
 8002994:	695b      	ldr	r3, [r3, #20]
}
 8002996:	b001      	add	sp, #4
 8002998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800299c:	4718      	bx	r3
    model->bind(newPresenter);
 800299e:	462b      	mov	r3, r5
 80029a0:	e7e1      	b.n	8002966 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 80029a2:	bf00      	nop
 80029a4:	08020c10 	.word	0x08020c10
 80029a8:	08020c9e 	.word	0x08020c9e
 80029ac:	08020da2 	.word	0x08020da2
 80029b0:	08020df7 	.word	0x08020df7
 80029b4:	08020e9a 	.word	0x08020e9a
 80029b8:	08020fac 	.word	0x08020fac
 80029bc:	2400f4ec 	.word	0x2400f4ec
 80029c0:	2400f4e8 	.word	0x2400f4e8

080029c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80029c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c6:	4604      	mov	r4, r0
 80029c8:	4617      	mov	r7, r2
 80029ca:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80029cc:	f00f fdee 	bl	80125ac <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80029d0:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80029d2:	2500      	movs	r5, #0
        instance = this;
 80029d4:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029d6:	4629      	mov	r1, r5
      model(m)
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80029da:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80029de:	4e0f      	ldr	r6, [pc, #60]	; (8002a1c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80029e6:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80029ea:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029ee:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80029f0:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 fa9d 	bl	8002f38 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80029fe:	6833      	ldr	r3, [r6, #0]
 8002a00:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002a04:	b10a      	cbz	r2, 8002a0a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002a06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a08:	b900      	cbnz	r0, 8002a0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002a0a:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002a0c:	f016 f951 	bl	8018cb2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002a10:	4620      	mov	r0, r4
 8002a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a14:	2400f4f8 	.word	0x2400f4f8
 8002a18:	08020f60 	.word	0x08020f60
 8002a1c:	2400f4a4 	.word	0x2400f4a4
 8002a20:	08020f48 	.word	0x08020f48

08002a24 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002a26:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002a2a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002a34:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a38:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	08002871 	.word	0x08002871

08002a44 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002a44:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a46:	4770      	bx	lr

08002a48 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002a48:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a4a:	4770      	bx	lr

08002a4c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002a4c:	4770      	bx	lr

08002a4e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002a4e:	888b      	ldrh	r3, [r1, #4]
 8002a50:	69c0      	ldr	r0, [r0, #28]
 8002a52:	0adb      	lsrs	r3, r3, #11
 8002a54:	680a      	ldr	r2, [r1, #0]
 8002a56:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002a5a:	4410      	add	r0, r2
 8002a5c:	4770      	bx	lr

08002a5e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002a5e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002a60:	b1c2      	cbz	r2, 8002a94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002a62:	7b13      	ldrb	r3, [r2, #12]
 8002a64:	b1b3      	cbz	r3, 8002a94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002a66:	7b54      	ldrb	r4, [r2, #13]
 8002a68:	7ad2      	ldrb	r2, [r2, #11]
 8002a6a:	0224      	lsls	r4, r4, #8
 8002a6c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a70:	4314      	orrs	r4, r2
 8002a72:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a74:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a76:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002a7a:	8813      	ldrh	r3, [r2, #0]
 8002a7c:	428b      	cmp	r3, r1
 8002a7e:	d102      	bne.n	8002a86 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002a80:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002a84:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002a86:	d805      	bhi.n	8002a94 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a88:	3801      	subs	r0, #1
 8002a8a:	3204      	adds	r2, #4
 8002a8c:	b280      	uxth	r0, r0
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1f3      	bne.n	8002a7a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002a92:	e7f7      	b.n	8002a84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e7f5      	b.n	8002a84 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002a98 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002a98:	b510      	push	{r4, lr}
 8002a9a:	4604      	mov	r4, r0
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	f01b fa4e 	bl	801df3e <_ZdlPvj>
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	bd10      	pop	{r4, pc}
	...

08002aa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002aa8:	b530      	push	{r4, r5, lr}
 8002aaa:	b08b      	sub	sp, #44	; 0x2c
 8002aac:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002aae:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002ab2:	9508      	str	r5, [sp, #32]
 8002ab4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002ab8:	9507      	str	r5, [sp, #28]
 8002aba:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002abe:	9506      	str	r5, [sp, #24]
 8002ac0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002ac4:	9505      	str	r5, [sp, #20]
 8002ac6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002aca:	9504      	str	r5, [sp, #16]
 8002acc:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002ad0:	9503      	str	r5, [sp, #12]
 8002ad2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002ad6:	9502      	str	r5, [sp, #8]
 8002ad8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002adc:	9501      	str	r5, [sp, #4]
 8002ade:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002ae2:	9500      	str	r5, [sp, #0]
 8002ae4:	f010 fd8e 	bl	8013604 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002aea:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002af0:	61e3      	str	r3, [r4, #28]
 8002af2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002af4:	6223      	str	r3, [r4, #32]
 8002af6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002af8:	6263      	str	r3, [r4, #36]	; 0x24
 8002afa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002afc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002afe:	b00b      	add	sp, #44	; 0x2c
 8002b00:	bd30      	pop	{r4, r5, pc}
 8002b02:	bf00      	nop
 8002b04:	08020fd0 	.word	0x08020fd0

08002b08 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002b08:	4770      	bx	lr

08002b0a <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002b0a:	4770      	bx	lr

08002b0c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002b0c:	4770      	bx	lr

08002b0e <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002b0e:	4770      	bx	lr

08002b10 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002b10:	4770      	bx	lr

08002b12 <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 8002b12:	3098      	adds	r0, #152	; 0x98
 8002b14:	f002 b830 	b.w	8004b78 <_ZN11customGraph10initializeEv>

08002b18 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <_ZN15Screen1ViewBaseD1Ev+0x1c>)
 8002b1a:	b510      	push	{r4, lr}
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8002b20:	f00e f800 	bl	8010b24 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <_ZN15Screen1ViewBaseD1Ev+0x20>)
 8002b26:	4620      	mov	r0, r4
 8002b28:	f840 3f98 	str.w	r3, [r0, #152]!
 8002b2c:	f000 fd17 	bl	800355e <_ZN15customGraphBaseD1Ev>
}
 8002b30:	4620      	mov	r0, r4
 8002b32:	bd10      	pop	{r4, pc}
 8002b34:	08021030 	.word	0x08021030
 8002b38:	08021994 	.word	0x08021994

08002b3c <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	4604      	mov	r4, r0
}
 8002b40:	f7ff ffea 	bl	8002b18 <_ZN15Screen1ViewBaseD1Ev>
 8002b44:	f244 5190 	movw	r1, #17808	; 0x4590
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f01b f9f8 	bl	801df3e <_ZdlPvj>
 8002b4e:	4620      	mov	r0, r4
 8002b50:	bd10      	pop	{r4, pc}

08002b52 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002b52:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	4604      	mov	r4, r0
        setX(x);
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8002b5a:	4615      	mov	r5, r2
        setX(x);
 8002b5c:	4798      	blx	r3
        setY(y);
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	4620      	mov	r0, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8002b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002b6a:	4718      	bx	r3

08002b6c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8002b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002b70:	4604      	mov	r4, r0
        : presenter(0)
 8002b72:	2500      	movs	r5, #0
 8002b74:	f011 f80a 	bl	8013b8c <_ZN8touchgfx6ScreenC1Ev>
 8002b78:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <_ZN15Screen1ViewBaseC1Ev+0xf0>)
 8002b7a:	4626      	mov	r6, r4
 8002b7c:	63e5      	str	r5, [r4, #60]	; 0x3c
          visible(true)
 8002b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b82:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8002b86:	f846 3b40 	str.w	r3, [r6], #64
 8002b8a:	f104 0998 	add.w	r9, r4, #152	; 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <_ZN15Screen1ViewBaseC1Ev+0xf4>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 8002b90:	a901      	add	r1, sp, #4
 8002b92:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 8002b96:	4638      	mov	r0, r7
 8002b98:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002b9c:	f104 0804 	add.w	r8, r4, #4
        : Widget(), bitmap(bmp), alpha(255)
 8002ba0:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <_ZN15Screen1ViewBaseC1Ev+0xf8>)
 8002ba2:	6625      	str	r5, [r4, #96]	; 0x60
 8002ba4:	66e2      	str	r2, [r4, #108]	; 0x6c
        : color(col)
 8002ba6:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 8002ba8:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8002bac:	23ff      	movs	r3, #255	; 0xff
 8002bae:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bba:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8002bbe:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 8002bc2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002bc6:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8002bca:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8002bce:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8002bd2:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8002bd6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8002bda:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 8002bde:	f00d f89c 	bl	800fd1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002be2:	4648      	mov	r0, r9
 8002be4:	f001 fad6 	bl	8004194 <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8002be8:	f504 50b5 	add.w	r0, r4, #5792	; 0x16a0
 8002bec:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002bf0:	3010      	adds	r0, #16
 8002bf2:	f00d ff8d 	bl	8010b10 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        setXY(x, y);
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	4629      	mov	r1, r5
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7ff ffa9 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002c00:	4630      	mov	r0, r6
 8002c02:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002c06:	f7ff fc97 	bl	8002538 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002c10:	f7ff fc94 	bl	800253c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002c14:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002c18:	4631      	mov	r1, r6
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	66a3      	str	r3, [r4, #104]	; 0x68
 8002c1e:	f009 feb5 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8002c22:	462a      	mov	r2, r5
 8002c24:	4629      	mov	r1, r5
 8002c26:	4638      	mov	r0, r7
 8002c28:	f7ff ff93 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8002c2c:	a901      	add	r1, sp, #4
 8002c2e:	4638      	mov	r0, r7
 8002c30:	f8ad 5004 	strh.w	r5, [sp, #4]
 8002c34:	f00d f871 	bl	800fd1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002c38:	4639      	mov	r1, r7
 8002c3a:	4640      	mov	r0, r8
 8002c3c:	f009 fea6 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(245, 140);
 8002c40:	228c      	movs	r2, #140	; 0x8c
 8002c42:	4648      	mov	r0, r9
 8002c44:	21f5      	movs	r1, #245	; 0xf5
 8002c46:	f7ff ff84 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f009 fe9d 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002c52:	4620      	mov	r0, r4
 8002c54:	b003      	add	sp, #12
 8002c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c5a:	bf00      	nop
 8002c5c:	08021030 	.word	0x08021030
 8002c60:	08022210 	.word	0x08022210
 8002c64:	08022278 	.word	0x08022278

08002c68 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002c68:	4770      	bx	lr
	...

08002c6c <_Z23getFont_verdana_10_4bppv>:
{
 8002c6c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002c6e:	4d16      	ldr	r5, [pc, #88]	; (8002cc8 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8002c70:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002c72:	782c      	ldrb	r4, [r5, #0]
 8002c74:	f3bf 8f5b 	dmb	ish
 8002c78:	f014 0401 	ands.w	r4, r4, #1
 8002c7c:	d120      	bne.n	8002cc0 <_Z23getFont_verdana_10_4bppv+0x54>
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f01b f95f 	bl	801df42 <__cxa_guard_acquire>
 8002c84:	b1e0      	cbz	r0, 8002cc0 <_Z23getFont_verdana_10_4bppv+0x54>
 8002c86:	233f      	movs	r3, #63	; 0x3f
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4910      	ldr	r1, [pc, #64]	; (8002ccc <_Z23getFont_verdana_10_4bppv+0x60>)
 8002c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002c90:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002c92:	9308      	str	r3, [sp, #32]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002c96:	940a      	str	r4, [sp, #40]	; 0x28
 8002c98:	9405      	str	r4, [sp, #20]
 8002c9a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002ca4:	230a      	movs	r3, #10
 8002ca6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002cb0:	f7ff fefa 	bl	8002aa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002cb4:	4809      	ldr	r0, [pc, #36]	; (8002cdc <_Z23getFont_verdana_10_4bppv+0x70>)
 8002cb6:	f01b f98f 	bl	801dfd8 <atexit>
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f01b f94d 	bl	801df5a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002cc0:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002cc2:	b00f      	add	sp, #60	; 0x3c
 8002cc4:	bd30      	pop	{r4, r5, pc}
 8002cc6:	bf00      	nop
 8002cc8:	24005a58 	.word	0x24005a58
 8002ccc:	0802343c 	.word	0x0802343c
 8002cd0:	080236f0 	.word	0x080236f0
 8002cd4:	24005a5c 	.word	0x24005a5c
 8002cd8:	08023780 	.word	0x08023780
 8002cdc:	08002c69 	.word	0x08002c69

08002ce0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 46, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002ce0:	4770      	bx	lr
	...

08002ce4 <_Z23getFont_verdana_16_4bppv>:
{
 8002ce4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 46, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002ce6:	4d17      	ldr	r5, [pc, #92]	; (8002d44 <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8002ce8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 46, 19, 16, 0, 0, 4, 1, 0, 0, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002cea:	782c      	ldrb	r4, [r5, #0]
 8002cec:	f3bf 8f5b 	dmb	ish
 8002cf0:	f014 0401 	ands.w	r4, r4, #1
 8002cf4:	d122      	bne.n	8002d3c <_Z23getFont_verdana_16_4bppv+0x58>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f01b f923 	bl	801df42 <__cxa_guard_acquire>
 8002cfc:	b1f0      	cbz	r0, 8002d3c <_Z23getFont_verdana_16_4bppv+0x58>
 8002cfe:	233a      	movs	r3, #58	; 0x3a
 8002d00:	2201      	movs	r2, #1
 8002d02:	4911      	ldr	r1, [pc, #68]	; (8002d48 <_Z23getFont_verdana_16_4bppv+0x64>)
 8002d04:	9309      	str	r3, [sp, #36]	; 0x24
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <_Z23getFont_verdana_16_4bppv+0x68>)
 8002d08:	4811      	ldr	r0, [pc, #68]	; (8002d50 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8002d0a:	9308      	str	r3, [sp, #32]
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_Z23getFont_verdana_16_4bppv+0x70>)
 8002d0e:	940a      	str	r4, [sp, #40]	; 0x28
 8002d10:	9405      	str	r4, [sp, #20]
 8002d12:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002d16:	2304      	movs	r3, #4
 8002d18:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	222e      	movs	r2, #46	; 0x2e
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	2313      	movs	r3, #19
 8002d24:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002d28:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002d2c:	f7ff febc 	bl	8002aa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <_Z23getFont_verdana_16_4bppv+0x74>)
 8002d32:	f01b f951 	bl	801dfd8 <atexit>
 8002d36:	4628      	mov	r0, r5
 8002d38:	f01b f90f 	bl	801df5a <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8002d3c:	4804      	ldr	r0, [pc, #16]	; (8002d50 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8002d3e:	b00f      	add	sp, #60	; 0x3c
 8002d40:	bd30      	pop	{r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	24005a88 	.word	0x24005a88
 8002d48:	0802344c 	.word	0x0802344c
 8002d4c:	080236f4 	.word	0x080236f4
 8002d50:	24005a8c 	.word	0x24005a8c
 8002d54:	08023784 	.word	0x08023784
 8002d58:	08002ce1 	.word	0x08002ce1

08002d5c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002d5c:	4770      	bx	lr
	...

08002d60 <_Z23getFont_verdana_20_4bppv>:
{
 8002d60:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002d62:	4d16      	ldr	r5, [pc, #88]	; (8002dbc <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8002d64:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002d66:	782c      	ldrb	r4, [r5, #0]
 8002d68:	f3bf 8f5b 	dmb	ish
 8002d6c:	f014 0401 	ands.w	r4, r4, #1
 8002d70:	d120      	bne.n	8002db4 <_Z23getFont_verdana_20_4bppv+0x54>
 8002d72:	4628      	mov	r0, r5
 8002d74:	f01b f8e5 	bl	801df42 <__cxa_guard_acquire>
 8002d78:	b1e0      	cbz	r0, 8002db4 <_Z23getFont_verdana_20_4bppv+0x54>
 8002d7a:	233f      	movs	r3, #63	; 0x3f
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002d80:	9309      	str	r3, [sp, #36]	; 0x24
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002d84:	4810      	ldr	r0, [pc, #64]	; (8002dc8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002d86:	9308      	str	r3, [sp, #32]
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002d8a:	940a      	str	r4, [sp, #40]	; 0x28
 8002d8c:	9405      	str	r4, [sp, #20]
 8002d8e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002d92:	2304      	movs	r3, #4
 8002d94:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002d98:	2314      	movs	r3, #20
 8002d9a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002da4:	f7ff fe80 	bl	8002aa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002da8:	4809      	ldr	r0, [pc, #36]	; (8002dd0 <_Z23getFont_verdana_20_4bppv+0x70>)
 8002daa:	f01b f915 	bl	801dfd8 <atexit>
 8002dae:	4628      	mov	r0, r5
 8002db0:	f01b f8d3 	bl	801df5a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002db4:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002db6:	b00f      	add	sp, #60	; 0x3c
 8002db8:	bd30      	pop	{r4, r5, pc}
 8002dba:	bf00      	nop
 8002dbc:	24005ab8 	.word	0x24005ab8
 8002dc0:	080236d0 	.word	0x080236d0
 8002dc4:	08023778 	.word	0x08023778
 8002dc8:	24005abc 	.word	0x24005abc
 8002dcc:	08023788 	.word	0x08023788
 8002dd0:	08002d5d 	.word	0x08002d5d

08002dd4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002dd4:	4770      	bx	lr
	...

08002dd8 <_Z23getFont_verdana_40_4bppv>:
{
 8002dd8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002dda:	4d16      	ldr	r5, [pc, #88]	; (8002e34 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8002ddc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002dde:	782c      	ldrb	r4, [r5, #0]
 8002de0:	f3bf 8f5b 	dmb	ish
 8002de4:	f014 0401 	ands.w	r4, r4, #1
 8002de8:	d120      	bne.n	8002e2c <_Z23getFont_verdana_40_4bppv+0x54>
 8002dea:	4628      	mov	r0, r5
 8002dec:	f01b f8a9 	bl	801df42 <__cxa_guard_acquire>
 8002df0:	b1e0      	cbz	r0, 8002e2c <_Z23getFont_verdana_40_4bppv+0x54>
 8002df2:	233f      	movs	r3, #63	; 0x3f
 8002df4:	2201      	movs	r2, #1
 8002df6:	4910      	ldr	r1, [pc, #64]	; (8002e38 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002df8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <_Z23getFont_verdana_40_4bppv+0x64>)
 8002dfc:	4810      	ldr	r0, [pc, #64]	; (8002e40 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002dfe:	9308      	str	r3, [sp, #32]
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002e02:	940a      	str	r4, [sp, #40]	; 0x28
 8002e04:	9405      	str	r4, [sp, #20]
 8002e06:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002e10:	2328      	movs	r3, #40	; 0x28
 8002e12:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e1c:	f7ff fe44 	bl	8002aa8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002e22:	f01b f8d9 	bl	801dfd8 <atexit>
 8002e26:	4628      	mov	r0, r5
 8002e28:	f01b f897 	bl	801df5a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002e2c:	4804      	ldr	r0, [pc, #16]	; (8002e40 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002e2e:	b00f      	add	sp, #60	; 0x3c
 8002e30:	bd30      	pop	{r4, r5, pc}
 8002e32:	bf00      	nop
 8002e34:	24005ae8 	.word	0x24005ae8
 8002e38:	080236e0 	.word	0x080236e0
 8002e3c:	0802377c 	.word	0x0802377c
 8002e40:	24005aec 	.word	0x24005aec
 8002e44:	0802378c 	.word	0x0802378c
 8002e48:	08002dd5 	.word	0x08002dd5

08002e4c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002e50:	2000      	movs	r0, #0
 8002e52:	4770      	bx	lr

08002e54 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002e54:	b40e      	push	{r1, r2, r3}
 8002e56:	b503      	push	{r0, r1, lr}
 8002e58:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002e5a:	2100      	movs	r1, #0
{
 8002e5c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002e60:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002e62:	f010 f9f7 	bl	8013254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002e66:	b002      	add	sp, #8
 8002e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e6c:	b003      	add	sp, #12
 8002e6e:	4770      	bx	lr

08002e70 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002e70:	b40c      	push	{r2, r3}
 8002e72:	b507      	push	{r0, r1, r2, lr}
 8002e74:	ab04      	add	r3, sp, #16
 8002e76:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002e7a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002e7c:	f010 f9ea 	bl	8013254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002e80:	b003      	add	sp, #12
 8002e82:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e86:	b002      	add	sp, #8
 8002e88:	4770      	bx	lr
	...

08002e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002e8c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002e92:	b373      	cbz	r3, 8002ef2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002e94:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002e96:	b92b      	cbnz	r3, 8002ea4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002e9a:	21c5      	movs	r1, #197	; 0xc5
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002e9e:	4819      	ldr	r0, [pc, #100]	; (8002f04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002ea0:	f01b f87c 	bl	801df9c <__assert_func>
            return buffer[pos];
 8002ea4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002ea6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002eaa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002eac:	b30b      	cbz	r3, 8002ef2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002eae:	f011 fd31 	bl	8014914 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002eb2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d803      	bhi.n	8002ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002eba:	21cb      	movs	r1, #203	; 0xcb
 8002ebc:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002ebe:	e7ee      	b.n	8002e9e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002ec0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002ec2:	f640 103f 	movw	r0, #2367	; 0x93f
 8002ec6:	1c53      	adds	r3, r2, #1
 8002ec8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002eca:	2b09      	cmp	r3, #9
 8002ecc:	4619      	mov	r1, r3
 8002ece:	bf88      	it	hi
 8002ed0:	f1a3 010a 	subhi.w	r1, r3, #10
 8002ed4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002ed8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002eda:	4281      	cmp	r1, r0
 8002edc:	d109      	bne.n	8002ef2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002ede:	2b0a      	cmp	r3, #10
 8002ee0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002ee4:	bf28      	it	cs
 8002ee6:	2300      	movcs	r3, #0
            return buffer[pos];
 8002ee8:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002eea:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002eee:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002ef0:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002ef2:	4620      	mov	r0, r4
}
 8002ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002ef8:	f011 bc0e 	b.w	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002efc:	0802105c 	.word	0x0802105c
 8002f00:	08021065 	.word	0x08021065
 8002f04:	08021110 	.word	0x08021110
 8002f08:	08021168 	.word	0x08021168
 8002f0c:	08021176 	.word	0x08021176

08002f10 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002f10:	f011 bbcb 	b.w	80146aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002f14 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002f14:	b510      	push	{r4, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	ac02      	add	r4, sp, #8
 8002f1a:	e884 0006 	stmia.w	r4, {r1, r2}
 8002f1e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002f20:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002f22:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002f24:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	9b08      	ldr	r3, [sp, #32]
 8002f2e:	f00e fe7b 	bl	8011c28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8002f32:	b006      	add	sp, #24
 8002f34:	bd10      	pop	{r4, pc}
	...

08002f38 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002f38:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002f3a:	bb18      	cbnz	r0, 8002f84 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8002f3c:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8002f3e:	4813      	ldr	r0, [pc, #76]	; (8002f8c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4913      	ldr	r1, [pc, #76]	; (8002f90 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002f44:	b1b3      	cbz	r3, 8002f74 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002f46:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002f48:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002f4a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002f4c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002f4e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	441a      	add	r2, r3
 8002f54:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002f5c:	f000 f838 	bl	8002fd0 <_ZN17TypedTextDatabase8getFontsEv>
 8002f60:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002f62:	f000 f833 	bl	8002fcc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002f68:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002f6c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002f70:	8018      	strh	r0, [r3, #0]
    }
}
 8002f72:	e007      	b.n	8002f84 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002f76:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002f78:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002f7a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002f7e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8002f80:	2c00      	cmp	r4, #0
 8002f82:	d1e8      	bne.n	8002f56 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8002f84:	bd38      	pop	{r3, r4, r5, pc}
 8002f86:	bf00      	nop
 8002f88:	24005b18 	.word	0x24005b18
 8002f8c:	24005b1c 	.word	0x24005b1c
 8002f90:	24005b20 	.word	0x24005b20
 8002f94:	24005b24 	.word	0x24005b24
 8002f98:	2400f4fc 	.word	0x2400f4fc
 8002f9c:	2400f504 	.word	0x2400f504
 8002fa0:	2400f500 	.word	0x2400f500
 8002fa4:	90177034 	.word	0x90177034
 8002fa8:	90177000 	.word	0x90177000
 8002fac:	90177070 	.word	0x90177070

08002fb0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002fb8:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8002fba:	681b      	ldr	r3, [r3, #0]
}
 8002fbc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	24005b20 	.word	0x24005b20
 8002fc8:	24005b1c 	.word	0x24005b1c

08002fcc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8002fcc:	200d      	movs	r0, #13
 8002fce:	4770      	bx	lr

08002fd0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002fd0:	4800      	ldr	r0, [pc, #0]	; (8002fd4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002fd2:	4770      	bx	lr
 8002fd4:	24005b28 	.word	0x24005b28

08002fd8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002fd8:	b510      	push	{r4, lr}
};
 8002fda:	4c07      	ldr	r4, [pc, #28]	; (8002ff8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 8002fdc:	f7ff fe82 	bl	8002ce4 <_Z23getFont_verdana_16_4bppv>
};
 8002fe0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002fe2:	f7ff fef9 	bl	8002dd8 <_Z23getFont_verdana_40_4bppv>
};
 8002fe6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8002fe8:	f7ff fe40 	bl	8002c6c <_Z23getFont_verdana_10_4bppv>
};
 8002fec:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8002fee:	f7ff feb7 	bl	8002d60 <_Z23getFont_verdana_20_4bppv>
};
 8002ff2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	bf00      	nop
 8002ff8:	24005b28 	.word	0x24005b28

08002ffc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002ffc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002ffe:	4770      	bx	lr

08003000 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 8003000:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8003002:	4770      	bx	lr

08003004 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 8003004:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8003006:	4770      	bx	lr

08003008 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003008:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 800300c:	4770      	bx	lr

0800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800300e:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003010:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8003012:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003018:	4362      	muls	r2, r4
 800301a:	4361      	muls	r1, r4
    }
 800301c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003020:	4718      	bx	r3

08003022 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8003022:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003026:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800302c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8003030:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8003034:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	db17      	blt.n	800306e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 800303e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003042:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003046:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800304a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800304e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8003052:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8003056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305a:	db1c      	blt.n	8003096 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 800305c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003060:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003064:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003068:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800306c:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800306e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003072:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003076:	ee17 2a10 	vmov	r2, s14
 800307a:	1e51      	subs	r1, r2, #1
 800307c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003080:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003084:	ee30 0a26 	vadd.f32	s0, s0, s13
 8003088:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800308c:	ee10 2a10 	vmov	r2, s0
 8003090:	440a      	add	r2, r1
 8003092:	4611      	mov	r1, r2
 8003094:	e7db      	b.n	800304e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8003096:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800309a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800309e:	ee17 2a90 	vmov	r2, s15
 80030a2:	3a01      	subs	r2, #1
 80030a4:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80030a8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80030ac:	ee70 0a87 	vadd.f32	s1, s1, s14
 80030b0:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80030b4:	ee10 ca90 	vmov	ip, s1
 80030b8:	4494      	add	ip, r2
 80030ba:	4662      	mov	r2, ip
 80030bc:	e7d6      	b.n	800306c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

080030be <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 80030be:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80030c0:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80030c2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80030c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030c8:	4362      	muls	r2, r4
    }
 80030ca:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80030ce:	4718      	bx	r3

080030d0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 80030d0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80030d4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80030d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80030da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 80030de:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80030e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	db08      	blt.n	80030fe <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 80030ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80030f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80030f4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80030f8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80030fc:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80030fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003106:	ee17 2a90 	vmov	r2, s15
 800310a:	3a01      	subs	r2, #1
 800310c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003110:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003114:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003118:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800311c:	ee10 ca10 	vmov	ip, s0
 8003120:	4494      	add	ip, r2
 8003122:	4662      	mov	r2, ip
 8003124:	e7ea      	b.n	80030fc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08003126 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8003126:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8003128:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 800312a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800312c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003130:	4362      	muls	r2, r4
 8003132:	4361      	muls	r1, r4
    }
 8003134:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8003138:	4718      	bx	r3

0800313a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 800313a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800313e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003144:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8003148:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 800314c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	db17      	blt.n	8003186 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8003156:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800315a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800315e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003162:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8003166:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800316a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800316e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003172:	db1c      	blt.n	80031ae <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8003174:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003178:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800317c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003180:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003184:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003186:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800318a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800318e:	ee17 2a10 	vmov	r2, s14
 8003192:	1e51      	subs	r1, r2, #1
 8003194:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003198:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800319c:	ee30 0a26 	vadd.f32	s0, s0, s13
 80031a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80031a4:	ee10 2a10 	vmov	r2, s0
 80031a8:	440a      	add	r2, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	e7db      	b.n	8003166 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 80031ae:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80031b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031b6:	ee17 2a90 	vmov	r2, s15
 80031ba:	3a01      	subs	r2, #1
 80031bc:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80031c0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80031c4:	ee70 0a87 	vadd.f32	s1, s1, s14
 80031c8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80031cc:	ee10 ca90 	vmov	ip, s1
 80031d0:	4494      	add	ip, r2
 80031d2:	4662      	mov	r2, ip
 80031d4:	e7d6      	b.n	8003184 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

080031d6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 80031d6:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80031d8:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80031da:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80031dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031e0:	4362      	muls	r2, r4
    }
 80031e2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80031e6:	4718      	bx	r3

080031e8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 80031e8:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80031ec:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80031f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 80031f6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80031fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	db08      	blt.n	8003216 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8003204:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003208:	ee30 0a27 	vadd.f32	s0, s0, s15
 800320c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003210:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003214:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003216:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800321a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321e:	ee17 2a90 	vmov	r2, s15
 8003222:	3a01      	subs	r2, #1
 8003224:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003228:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800322c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003230:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003234:	ee10 ca10 	vmov	ip, s0
 8003238:	4494      	add	ip, r2
 800323a:	4662      	mov	r2, ip
 800323c:	e7ea      	b.n	8003214 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

0800323e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 800323e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8003242:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8003244:	2b00      	cmp	r3, #0
 8003246:	db07      	blt.n	8003258 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003248:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800324c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003250:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003254:	1040      	asrs	r0, r0, #1
 8003256:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003258:	f06f 0001 	mvn.w	r0, #1
 800325c:	fb00 2003 	mla	r0, r0, r3, r2
 8003260:	3801      	subs	r0, #1
 8003262:	fb90 f0f2 	sdiv	r0, r0, r2
 8003266:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800326a:	1040      	asrs	r0, r0, #1
 800326c:	4240      	negs	r0, r0
    }
 800326e:	4770      	bx	lr

08003270 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8003270:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8003274:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003278:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800327c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003280:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003284:	4770      	bx	lr

08003286 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8003286:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 800328a:	4770      	bx	lr

0800328c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 800328c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8003290:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8003292:	2b00      	cmp	r3, #0
 8003294:	db07      	blt.n	80032a6 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003296:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800329a:	fb93 f0f2 	sdiv	r0, r3, r2
 800329e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80032a2:	1040      	asrs	r0, r0, #1
 80032a4:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80032a6:	f06f 0001 	mvn.w	r0, #1
 80032aa:	fb00 2003 	mla	r0, r0, r3, r2
 80032ae:	3801      	subs	r0, #1
 80032b0:	fb90 f0f2 	sdiv	r0, r0, r2
 80032b4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80032b8:	1040      	asrs	r0, r0, #1
 80032ba:	4240      	negs	r0, r0
    }
 80032bc:	4770      	bx	lr

080032be <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 80032be:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 80032c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80032c6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80032ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80032ce:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80032d2:	4770      	bx	lr

080032d4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80032d4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 80032d8:	4770      	bx	lr

080032da <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80032da:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 80032de:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	db07      	blt.n	80032f4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80032e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80032e8:	fb93 f0f2 	sdiv	r0, r3, r2
 80032ec:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80032f0:	1040      	asrs	r0, r0, #1
 80032f2:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80032f4:	f06f 0001 	mvn.w	r0, #1
 80032f8:	fb00 2003 	mla	r0, r0, r3, r2
 80032fc:	3801      	subs	r0, #1
 80032fe:	fb90 f0f2 	sdiv	r0, r0, r2
 8003302:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003306:	1040      	asrs	r0, r0, #1
 8003308:	4240      	negs	r0, r0
    }
 800330a:	4770      	bx	lr

0800330c <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 800330c:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8003310:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003314:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8003318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800331c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003320:	4770      	bx	lr

08003322 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8003322:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8003326:	4770      	bx	lr

08003328 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8003328:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 800332c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 800332e:	2b00      	cmp	r3, #0
 8003330:	db07      	blt.n	8003342 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003332:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003336:	fb93 f0f2 	sdiv	r0, r3, r2
 800333a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800333e:	1040      	asrs	r0, r0, #1
 8003340:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003342:	f06f 0001 	mvn.w	r0, #1
 8003346:	fb00 2003 	mla	r0, r0, r3, r2
 800334a:	3801      	subs	r0, #1
 800334c:	fb90 f0f2 	sdiv	r0, r0, r2
 8003350:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003354:	1040      	asrs	r0, r0, #1
 8003356:	4240      	negs	r0, r0
    }
 8003358:	4770      	bx	lr

0800335a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 800335a:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 800335e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003362:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8003366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800336a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800336e:	4770      	bx	lr

08003370 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8003370:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8003374:	4770      	bx	lr

08003376 <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 8003376:	4610      	mov	r0, r2
 8003378:	4770      	bx	lr

0800337a <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 800337a:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800337e:	6803      	ldr	r3, [r0, #0]
 8003380:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003384:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003388:	4718      	bx	r3

0800338a <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 800338a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800338e:	6803      	ldr	r3, [r0, #0]
 8003390:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003394:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003398:	4718      	bx	r3

0800339a <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 800339a:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 800339c:	4770      	bx	lr

0800339e <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 800339e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80033a0:	4770      	bx	lr

080033a2 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 80033a2:	2001      	movs	r0, #1
 80033a4:	4770      	bx	lr

080033a6 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 80033a6:	4770      	bx	lr

080033a8 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 80033a8:	4770      	bx	lr

080033aa <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80033aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80033ac:	b118      	cbz	r0, 80033b6 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b4:	4718      	bx	r3
    }
 80033b6:	4770      	bx	lr

080033b8 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80033b8:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80033bc:	b530      	push	{r4, r5, lr}
        return topPadding;
 80033be:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 80033c2:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80033c6:	4421      	add	r1, r4
 80033c8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80033cc:	8044      	strh	r4, [r0, #2]
 80033ce:	1a52      	subs	r2, r2, r1
 80033d0:	2100      	movs	r1, #0
 80033d2:	8085      	strh	r5, [r0, #4]
 80033d4:	8001      	strh	r1, [r0, #0]
 80033d6:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 80033d8:	bd30      	pop	{r4, r5, pc}

080033da <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80033da:	b510      	push	{r4, lr}
 80033dc:	8042      	strh	r2, [r0, #2]
 80033de:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80033e2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80033e6:	8004      	strh	r4, [r0, #0]
 80033e8:	8082      	strh	r2, [r0, #4]
 80033ea:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 80033ec:	bd10      	pop	{r4, pc}

080033ee <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 80033ee:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80033f0:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 80033f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033f6:	4718      	bx	r3

080033f8 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 80033f8:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80033fa:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 80033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003400:	4718      	bx	r3

08003402 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003402:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003406:	4770      	bx	lr

08003408 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003408:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800340c:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003410:	4403      	add	r3, r0
 8003412:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003416:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003418:	b200      	sxth	r0, r0
 800341a:	4770      	bx	lr

0800341c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800341c:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003420:	4770      	bx	lr

08003422 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003422:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003426:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 800342a:	4403      	add	r3, r0
 800342c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003430:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003432:	b200      	sxth	r0, r0
 8003434:	4770      	bx	lr

08003436 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8003436:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003438:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800343a:	4611      	mov	r1, r2
 800343c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003440:	4718      	bx	r3

08003442 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 8003442:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003446:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8003448:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800344c:	186c      	adds	r4, r5, r1
 800344e:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 8003452:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 8003456:	1b09      	subs	r1, r1, r4
 8003458:	2400      	movs	r4, #0
 800345a:	8005      	strh	r5, [r0, #0]
 800345c:	8044      	strh	r4, [r0, #2]
 800345e:	8081      	strh	r1, [r0, #4]
 8003460:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 8003462:	bd30      	pop	{r4, r5, pc}

08003464 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 8003464:	8002      	strh	r2, [r0, #0]
 8003466:	8083      	strh	r3, [r0, #4]
 8003468:	f9bd 2000 	ldrsh.w	r2, [sp]
 800346c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003470:	8042      	strh	r2, [r0, #2]
 8003472:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8003474:	4770      	bx	lr

08003476 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 8003476:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003478:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 800347a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800347e:	4718      	bx	r3

08003480 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003480:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8003482:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8003484:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003488:	4718      	bx	r3

0800348a <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800348a:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 800348e:	4770      	bx	lr

08003490 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003490:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003494:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003498:	4403      	add	r3, r0
 800349a:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 800349e:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80034a0:	b200      	sxth	r0, r0
 80034a2:	4770      	bx	lr

080034a4 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80034a4:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80034a8:	4770      	bx	lr

080034aa <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034aa:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80034ae:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80034b2:	4403      	add	r3, r0
 80034b4:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80034b8:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80034ba:	b200      	sxth	r0, r0
 80034bc:	4770      	bx	lr

080034be <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 80034be:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80034c0:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 80034c2:	4611      	mov	r1, r2
 80034c4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80034c8:	4718      	bx	r3

080034ca <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80034ca:	b530      	push	{r4, r5, lr}
 80034cc:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80034ce:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80034d0:	4604      	mov	r4, r0
        rect.width = width;
 80034d2:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80034d4:	466d      	mov	r5, sp
 80034d6:	4601      	mov	r1, r0
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	343c      	adds	r4, #60	; 0x3c
 80034de:	4628      	mov	r0, r5
 80034e0:	4798      	blx	r3
 80034e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80034ea:	b005      	add	sp, #20
 80034ec:	bd30      	pop	{r4, r5, pc}

080034ee <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80034ee:	b530      	push	{r4, r5, lr}
 80034f0:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80034f2:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80034f4:	4604      	mov	r4, r0
        rect.height = height;
 80034f6:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80034f8:	466d      	mov	r5, sp
 80034fa:	4601      	mov	r1, r0
 80034fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003500:	343c      	adds	r4, #60	; 0x3c
 8003502:	4628      	mov	r0, r5
 8003504:	4798      	blx	r3
 8003506:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800350a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800350e:	b005      	add	sp, #20
 8003510:	bd30      	pop	{r4, r5, pc}

08003512 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003512:	2200      	movs	r2, #0
 8003514:	8002      	strh	r2, [r0, #0]
 8003516:	8042      	strh	r2, [r0, #2]
 8003518:	8082      	strh	r2, [r0, #4]
 800351a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800351c:	4770      	bx	lr

0800351e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800351e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8003522:	4770      	bx	lr

08003524 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003524:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003526:	b570      	push	{r4, r5, r6, lr}
 8003528:	4604      	mov	r4, r0
        setX(x);
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800352c:	4615      	mov	r5, r2
        setX(x);
 800352e:	4798      	blx	r3
        setBaselineY(baselineY);
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8003538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800353c:	4718      	bx	r3

0800353e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800353e:	2000      	movs	r0, #0
 8003540:	4770      	bx	lr

08003542 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003542:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003544:	4770      	bx	lr

08003546 <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8003546:	b082      	sub	sp, #8
 8003548:	ab02      	add	r3, sp, #8
 800354a:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 800354e:	b002      	add	sp, #8
 8003550:	4770      	bx	lr

08003552 <_ZN15customGraphBase13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
    virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8003552:	b082      	sub	sp, #8
 8003554:	ab02      	add	r3, sp, #8
 8003556:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 800355a:	b002      	add	sp, #8
 800355c:	4770      	bx	lr

0800355e <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 800355e:	4770      	bx	lr

08003560 <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 8003560:	4770      	bx	lr

08003562 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003562:	4770      	bx	lr

08003564 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
 8003564:	4770      	bx	lr

08003566 <_ZN8touchgfx5GraphILs500EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 8003566:	4770      	bx	lr

08003568 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003568:	4770      	bx	lr

0800356a <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800356a:	4770      	bx	lr

0800356c <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800356c:	4770      	bx	lr

0800356e <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 800356e:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8003570:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8003572:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 8003574:	68c4      	ldr	r4, [r0, #12]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	1066      	asrs	r6, r4, #1
 800357a:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800357e:	07e4      	lsls	r4, r4, #31
 8003580:	bf44      	itt	mi
 8003582:	59ac      	ldrmi	r4, [r5, r6]
 8003584:	58e3      	ldrmi	r3, [r4, r3]
    }
 8003586:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8003588:	4718      	bx	r3

0800358a <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800358a:	6843      	ldr	r3, [r0, #4]
 800358c:	b12b      	cbz	r3, 800359a <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x10>
 800358e:	6883      	ldr	r3, [r0, #8]
 8003590:	b92b      	cbnz	r3, 800359e <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x14>
 8003592:	68c0      	ldr	r0, [r0, #12]
 8003594:	f000 0001 	and.w	r0, r0, #1
 8003598:	4770      	bx	lr
 800359a:	4618      	mov	r0, r3
 800359c:	4770      	bx	lr
 800359e:	2001      	movs	r0, #1
    }
 80035a0:	4770      	bx	lr

080035a2 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80035a2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80035a4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80035a6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80035a8:	68c4      	ldr	r4, [r0, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	1066      	asrs	r6, r4, #1
 80035ae:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80035b2:	07e4      	lsls	r4, r4, #31
 80035b4:	bf44      	itt	mi
 80035b6:	59ac      	ldrmi	r4, [r5, r6]
 80035b8:	58e3      	ldrmi	r3, [r4, r3]
    }
 80035ba:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80035bc:	4718      	bx	r3

080035be <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80035be:	6843      	ldr	r3, [r0, #4]
 80035c0:	b12b      	cbz	r3, 80035ce <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 80035c2:	6883      	ldr	r3, [r0, #8]
 80035c4:	b92b      	cbnz	r3, 80035d2 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 80035c6:	68c0      	ldr	r0, [r0, #12]
 80035c8:	f000 0001 	and.w	r0, r0, #1
 80035cc:	4770      	bx	lr
 80035ce:	4618      	mov	r0, r3
 80035d0:	4770      	bx	lr
 80035d2:	2001      	movs	r0, #1
    }
 80035d4:	4770      	bx	lr

080035d6 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80035d6:	b510      	push	{r4, lr}
 80035d8:	4604      	mov	r4, r0
 80035da:	214c      	movs	r1, #76	; 0x4c
 80035dc:	f01a fcaf 	bl	801df3e <_ZdlPvj>
 80035e0:	4620      	mov	r0, r4
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	4604      	mov	r4, r0
 80035e8:	2140      	movs	r1, #64	; 0x40
 80035ea:	f01a fca8 	bl	801df3e <_ZdlPvj>
 80035ee:	4620      	mov	r0, r4
 80035f0:	bd10      	pop	{r4, pc}

080035f2 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80035f2:	b510      	push	{r4, lr}
 80035f4:	4604      	mov	r4, r0
 80035f6:	2140      	movs	r1, #64	; 0x40
 80035f8:	f01a fca1 	bl	801df3e <_ZdlPvj>
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd10      	pop	{r4, pc}

08003600 <_ZN8touchgfx5GraphILs500EED0Ev>:
 8003600:	b510      	push	{r4, lr}
 8003602:	4604      	mov	r4, r0
 8003604:	f241 01e4 	movw	r1, #4324	; 0x10e4
 8003608:	f01a fc99 	bl	801df3e <_ZdlPvj>
 800360c:	4620      	mov	r0, r4
 800360e:	bd10      	pop	{r4, pc}

08003610 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003610:	b510      	push	{r4, lr}
 8003612:	4604      	mov	r4, r0
 8003614:	2110      	movs	r1, #16
 8003616:	f01a fc92 	bl	801df3e <_ZdlPvj>
 800361a:	4620      	mov	r0, r4
 800361c:	bd10      	pop	{r4, pc}

0800361e <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
 800361e:	b510      	push	{r4, lr}
 8003620:	4604      	mov	r4, r0
 8003622:	2110      	movs	r1, #16
 8003624:	f01a fc8b 	bl	801df3e <_ZdlPvj>
 8003628:	4620      	mov	r0, r4
 800362a:	bd10      	pop	{r4, pc}

0800362c <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 800362c:	b510      	push	{r4, lr}
 800362e:	4604      	mov	r4, r0
}
 8003630:	f241 41f8 	movw	r1, #5368	; 0x14f8
 8003634:	f01a fc83 	bl	801df3e <_ZdlPvj>
 8003638:	4620      	mov	r0, r4
 800363a:	bd10      	pop	{r4, pc}

0800363c <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800363c:	b513      	push	{r0, r1, r4, lr}
 800363e:	4603      	mov	r3, r0
 8003640:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003642:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003646:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003648:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800364a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364e:	4798      	blx	r3
 8003650:	9901      	ldr	r1, [sp, #4]
 8003652:	4602      	mov	r2, r0
 8003654:	4620      	mov	r0, r4
    }
 8003656:	b002      	add	sp, #8
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800365c:	f00b b812 	b.w	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08003660 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8003660:	b513      	push	{r0, r1, r4, lr}
 8003662:	4603      	mov	r3, r0
 8003664:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003666:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800366a:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800366c:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	4798      	blx	r3
 8003674:	9901      	ldr	r1, [sp, #4]
 8003676:	4602      	mov	r2, r0
 8003678:	4620      	mov	r0, r4
    }
 800367a:	b002      	add	sp, #8
 800367c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003680:	f00b b800 	b.w	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08003684 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8003684:	b508      	push	{r3, lr}
        if (alpha > 0)
 8003686:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800368a:	b10b      	cbz	r3, 8003690 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 800368c:	f7fe ffbe 	bl	800260c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003690:	bd08      	pop	{r3, pc}

08003692 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003692:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003694:	f7fe ffba 	bl	800260c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003698:	bd08      	pop	{r3, pc}

0800369a <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 800369a:	b410      	push	{r4}
    if (&src == &graph1)
 800369c:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80036a0:	428c      	cmp	r4, r1
 80036a2:	d106      	bne.n	80036b2 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 80036a4:	6803      	ldr	r3, [r0, #0]
    }
}
 80036a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 80036aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ae:	ca06      	ldmia	r2, {r1, r2}
 80036b0:	4718      	bx	r3
}
 80036b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void customGraphBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 80036b8:	b410      	push	{r4}
    if (&src == &graph1)
 80036ba:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80036be:	428c      	cmp	r4, r1
 80036c0:	d106      	bne.n	80036d0 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x18>
    {
        //Interaction2
        //When graph1 clicked call virtual function
        //Call graph1clicked
        graph1clicked(value);
 80036c2:	6803      	ldr	r3, [r0, #0]
    }
}
 80036c4:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1clicked(value);
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	ca06      	ldmia	r2, {r1, r2}
 80036ce:	4718      	bx	r3
}
 80036d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80036d8:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80036da:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 80036dc:	db03      	blt.n	80036e6 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 80036de:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 80036e2:	428b      	cmp	r3, r1
 80036e4:	dc06      	bgt.n	80036f4 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 80036e8:	f240 61f5 	movw	r1, #1781	; 0x6f5
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 80036ee:	4806      	ldr	r0, [pc, #24]	; (8003708 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 80036f0:	f01a fc54 	bl	801df9c <__assert_func>
        return yValues[index];
 80036f4:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 80036f8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80036fc:	bd08      	pop	{r3, pc}
 80036fe:	bf00      	nop
 8003700:	08021248 	.word	0x08021248
 8003704:	0802126b 	.word	0x0802126b
 8003708:	080212b9 	.word	0x080212b9

0800370c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 800370c:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800370e:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003710:	db03      	blt.n	800371a <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 8003712:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003716:	428b      	cmp	r3, r1
 8003718:	dc06      	bgt.n	8003728 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 800371c:	f240 61e5 	movw	r1, #1765	; 0x6e5
 8003720:	4a05      	ldr	r2, [pc, #20]	; (8003738 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003724:	f01a fc3a 	bl	801df9c <__assert_func>
        return xValues[index];
 8003728:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 800372c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003730:	bd08      	pop	{r3, pc}
 8003732:	bf00      	nop
 8003734:	08021248 	.word	0x08021248
 8003738:	08021324 	.word	0x08021324
 800373c:	080212b9 	.word	0x080212b9

08003740 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003740:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8003742:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003744:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003746:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800374a:	b28d      	uxth	r5, r1
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	b92b      	cbnz	r3, 800375c <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8003750:	4b10      	ldr	r3, [pc, #64]	; (8003794 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003752:	216c      	movs	r1, #108	; 0x6c
 8003754:	4a10      	ldr	r2, [pc, #64]	; (8003798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003756:	4811      	ldr	r0, [pc, #68]	; (800379c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003758:	f01a fc20 	bl	801df9c <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800375c:	4910      	ldr	r1, [pc, #64]	; (80037a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800375e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003760:	8809      	ldrh	r1, [r1, #0]
 8003762:	4291      	cmp	r1, r2
 8003764:	d803      	bhi.n	800376e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003768:	216d      	movs	r1, #109	; 0x6d
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800376c:	e7f3      	b.n	8003756 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800376e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800377a:	6803      	ldr	r3, [r0, #0]
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4798      	blx	r3
 8003780:	1a28      	subs	r0, r5, r0
 8003782:	4633      	mov	r3, r6
 8003784:	b201      	sxth	r1, r0
 8003786:	4620      	mov	r0, r4
    }
 8003788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800378c:	4718      	bx	r3
 800378e:	bf00      	nop
 8003790:	2400f4fc 	.word	0x2400f4fc
 8003794:	08021372 	.word	0x08021372
 8003798:	080213b4 	.word	0x080213b4
 800379c:	080213ef 	.word	0x080213ef
 80037a0:	2400f500 	.word	0x2400f500
 80037a4:	08021444 	.word	0x08021444
 80037a8:	2400f504 	.word	0x2400f504

080037ac <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80037ac:	2200      	movs	r2, #0
 80037ae:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80037b2:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80037b4:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80037b8:	4770      	bx	lr
	...

080037bc <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80037be:	6002      	str	r2, [r0, #0]
 80037c0:	2200      	movs	r2, #0
 80037c2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80037c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80037ca:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80037ce:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80037d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d6:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08022340 	.word	0x08022340

080037e0 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	461d      	mov	r5, r3
 80037e6:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80037ea:	f7ff f9b2 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	4629      	mov	r1, r5
 80037f2:	4620      	mov	r0, r4
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4798      	blx	r3
        setHeight(height);
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	4631      	mov	r1, r6
 80037fc:	4620      	mov	r0, r4
 80037fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003804:	4718      	bx	r3

08003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003806:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003808:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800380a:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800380c:	f00f fff5 	bl	80137fa <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8003810:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003812:	462a      	mov	r2, r5
 8003814:	9901      	ldr	r1, [sp, #4]
 8003816:	ea4f 1440 	mov.w	r4, r0, lsl #5
 800381a:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 800381e:	db04      	blt.n	800382a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003820:	f010 f80a 	bl	8013838 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8003824:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8003826:	b003      	add	sp, #12
 8003828:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800382a:	f010 f805 	bl	8013838 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 800382e:	1a20      	subs	r0, r4, r0
 8003830:	e7f9      	b.n	8003826 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08003832 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003832:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003834:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003838:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800383a:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 800383e:	1963      	adds	r3, r4, r5
 8003840:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 8003844:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8003846:	b22d      	sxth	r5, r5
 8003848:	442c      	add	r4, r5
 800384a:	1e69      	subs	r1, r5, #1
 800384c:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 8003850:	3c01      	subs	r4, #1
 8003852:	1ad2      	subs	r2, r2, r3
 8003854:	1af0      	subs	r0, r6, r3
 8003856:	f7ff ffd6 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 800385a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800385e:	bd70      	pop	{r4, r5, r6, pc}

08003860 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003866:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800386a:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800386e:	440b      	add	r3, r1
 8003870:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8003874:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8003876:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 800387a:	b209      	sxth	r1, r1
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	1b40      	subs	r0, r0, r5
 8003880:	3901      	subs	r1, #1
 8003882:	f7ff ffc0 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003886:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 800388a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800388e:	bd38      	pop	{r3, r4, r5, pc}

08003890 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
        : CanvasWidget()
 8003894:	f00a faf4 	bl	800de80 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x34>)
        : color(col)
 800389a:	2300      	movs	r3, #0
    {
    }
 800389c:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800389e:	6022      	str	r2, [r4, #0]
 80038a0:	2201      	movs	r2, #1
 80038a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80038a8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 80038ac:	64a3      	str	r3, [r4, #72]	; 0x48
 80038ae:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        : typedTextId(id)
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 80038b4:	63a2      	str	r2, [r4, #56]	; 0x38
 80038b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ba:	87a2      	strh	r2, [r4, #60]	; 0x3c
 80038bc:	222e      	movs	r2, #46	; 0x2e
 80038be:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    }
 80038c2:	bd10      	pop	{r4, pc}
 80038c4:	08022170 	.word	0x08022170
 80038c8:	08020c08 	.word	0x08020c08

080038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 80038d0:	2226      	movs	r2, #38	; 0x26
 80038d2:	2100      	movs	r1, #0
 80038d4:	f01a fce2 	bl	801e29c <memset>
class Widget : public Drawable
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff ff6f 	bl	80037bc <_ZN8touchgfx8DrawableC1Ev>
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 80038e0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 80038e4:	4620      	mov	r0, r4
 80038e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80038e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ec:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80038ee:	2300      	movs	r3, #0
 80038f0:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 80038f4:	4a05      	ldr	r2, [pc, #20]	; (800390c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 80038f6:	8723      	strh	r3, [r4, #56]	; 0x38
 80038f8:	6022      	str	r2, [r4, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80038fa:	f04f 32ff 	mov.w	r2, #4294967295
 80038fe:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003900:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 8003902:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003906:	bd10      	pop	{r4, pc}
 8003908:	08020c08 	.word	0x08020c08
 800390c:	08021638 	.word	0x08021638

08003910 <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 8003910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003914:	4605      	mov	r5, r0
          firstChild(0)
 8003916:	2600      	movs	r6, #0
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003918:	f04f 0801 	mov.w	r8, #1
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 800391c:	46aa      	mov	sl, r5
 800391e:	f105 0758 	add.w	r7, r5, #88	; 0x58
        : color(col)
 8003922:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
 8003926:	f505 5994 	add.w	r9, r5, #4736	; 0x1280
 800392a:	f505 5b9e 	add.w	fp, r5, #5056	; 0x13c0
 800392e:	f109 0918 	add.w	r9, r9, #24
 8003932:	f10b 0b08 	add.w	fp, fp, #8
customGraphBase::customGraphBase() :
 8003936:	ed2d 8b04 	vpush	{d8-d9}
 800393a:	b08f      	sub	sp, #60	; 0x3c
 800393c:	f7ff ff3e 	bl	80037bc <_ZN8touchgfx8DrawableC1Ev>
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 8003940:	4bdd      	ldr	r3, [pc, #884]	; (8003cb8 <_ZN15customGraphBaseC1Ev+0x3a8>)
        : Widget(), alpha(255), color(0)
 8003942:	2226      	movs	r2, #38	; 0x26
 8003944:	4631      	mov	r1, r6
 8003946:	62ae      	str	r6, [r5, #40]	; 0x28
 8003948:	f84a 3b2c 	str.w	r3, [sl], #44
 800394c:	4650      	mov	r0, sl
 800394e:	f01a fca5 	bl	801e29c <memset>
 8003952:	4650      	mov	r0, sl
 8003954:	f7ff ff32 	bl	80037bc <_ZN8touchgfx8DrawableC1Ev>
 8003958:	4bd8      	ldr	r3, [pc, #864]	; (8003cbc <_ZN15customGraphBaseC1Ev+0x3ac>)
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 800395a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800395e:	4638      	mov	r0, r7
 8003960:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003962:	23ff      	movs	r3, #255	; 0xff
 8003964:	656e      	str	r6, [r5, #84]	; 0x54
 8003966:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
 800396a:	f00a fe27 	bl	800e5bc <_ZN8touchgfx17AbstractDataGraphC1Es>
 800396e:	4bd4      	ldr	r3, [pc, #848]	; (8003cc0 <_ZN15customGraphBaseC1Ev+0x3b0>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8003970:	4631      	mov	r1, r6
 8003972:	f240 12f3 	movw	r2, #499	; 0x1f3
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003976:	65ab      	str	r3, [r5, #88]	; 0x58
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 8003978:	f505 73ce 	add.w	r3, r5, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 800397c:	4638      	mov	r0, r7
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 800397e:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
 8003982:	f605 136c 	addw	r3, r5, #2412	; 0x96c
 8003986:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 800398a:	f7ff fb40 	bl	800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 800398e:	4bcd      	ldr	r3, [pc, #820]	; (8003cc4 <_ZN15customGraphBaseC1Ev+0x3b4>)
 8003990:	65ab      	str	r3, [r5, #88]	; 0x58
 8003992:	f505 5389 	add.w	r3, r5, #4384	; 0x1120
 8003996:	331c      	adds	r3, #28
        : CanvasWidget()
 8003998:	4618      	mov	r0, r3
 800399a:	9302      	str	r3, [sp, #8]
 800399c:	f00a fa70 	bl	800de80 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80039a0:	2201      	movs	r2, #1
 80039a2:	230a      	movs	r3, #10
 80039a4:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
 80039a8:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
 80039ac:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
 80039b0:	e9c4 235b 	strd	r2, r3, [r4, #364]	; 0x16c
class GraphElementGridX : public GraphElementGridBase
 80039b4:	4bc4      	ldr	r3, [pc, #784]	; (8003cc8 <_ZN15customGraphBaseC1Ev+0x3b8>)
 80039b6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80039ba:	f505 538b 	add.w	r3, r5, #4448	; 0x1160
 80039be:	331c      	adds	r3, #28
        : CanvasWidget()
 80039c0:	4618      	mov	r0, r3
 80039c2:	9303      	str	r3, [sp, #12]
 80039c4:	f00a fa5c 	bl	800de80 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80039c8:	2101      	movs	r1, #1
 80039ca:	230a      	movs	r3, #10
 80039cc:	f884 81b4 	strb.w	r8, [r4, #436]	; 0x1b4
 80039d0:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
 80039d4:	f505 58a0 	add.w	r8, r5, #5120	; 0x1400
 80039d8:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
 80039dc:	f108 0814 	add.w	r8, r8, #20
 80039e0:	e9c4 136b 	strd	r1, r3, [r4, #428]	; 0x1ac
class GraphElementGridY : public GraphElementGridBase
 80039e4:	4bb9      	ldr	r3, [pc, #740]	; (8003ccc <_ZN15customGraphBaseC1Ev+0x3bc>)
 80039e6:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 80039ea:	f505 538d 	add.w	r3, r5, #4512	; 0x11a0
 80039ee:	331c      	adds	r3, #28

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 80039f0:	4618      	mov	r0, r3
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	f7ff ff4c 	bl	8003890 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80039f8:	4bb5      	ldr	r3, [pc, #724]	; (8003cd0 <_ZN15customGraphBaseC1Ev+0x3c0>)
 80039fa:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
 80039fe:	f505 5390 	add.w	r3, r5, #4608	; 0x1200
 8003a02:	3308      	adds	r3, #8

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8003a04:	4618      	mov	r0, r3
 8003a06:	9305      	str	r3, [sp, #20]
 8003a08:	f7ff ff42 	bl	8003890 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8003a0c:	4bb1      	ldr	r3, [pc, #708]	; (8003cd4 <_ZN15customGraphBaseC1Ev+0x3c4>)
 8003a0e:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8003a12:	f505 5392 	add.w	r3, r5, #4672	; 0x1240
 8003a16:	3314      	adds	r3, #20
        : CanvasWidget()
 8003a18:	4618      	mov	r0, r3
 8003a1a:	9306      	str	r3, [sp, #24]
 8003a1c:	f00a fa30 	bl	800de80 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003a20:	4bad      	ldr	r3, [pc, #692]	; (8003cd8 <_ZN15customGraphBaseC1Ev+0x3c8>)
 8003a22:	f04f 0202 	mov.w	r2, #2
 8003a26:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
 8003a2a:	f505 5394 	add.w	r3, r5, #4736	; 0x1280
 8003a2e:	f884 2280 	strb.w	r2, [r4, #640]	; 0x280
 8003a32:	3304      	adds	r3, #4
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003a34:	4618      	mov	r0, r3
 8003a36:	9307      	str	r3, [sp, #28]
 8003a38:	f7fe fe2c 	bl	8002694 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003a3c:	4ba7      	ldr	r3, [pc, #668]	; (8003cdc <_ZN15customGraphBaseC1Ev+0x3cc>)
 8003a3e:	4648      	mov	r0, r9
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003a40:	f8c4 6290 	str.w	r6, [r4, #656]	; 0x290
 8003a44:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
 8003a48:	3324      	adds	r3, #36	; 0x24
 8003a4a:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
 8003a4e:	f7ff ff3d 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003a52:	f505 5397 	add.w	r3, r5, #4832	; 0x12e0
 8003a56:	3304      	adds	r3, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	ee09 3a10 	vmov	s18, r3
 8003a5e:	f7ff ff35 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003a62:	f505 5399 	add.w	r3, r5, #4896	; 0x1320
 8003a66:	3310      	adds	r3, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	ee08 3a10 	vmov	s16, r3
 8003a6e:	f7ff ff2d 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003a72:	f505 539b 	add.w	r3, r5, #4960	; 0x1360
 8003a76:	331c      	adds	r3, #28
 8003a78:	4618      	mov	r0, r3
 8003a7a:	ee08 3a90 	vmov	s17, r3
 8003a7e:	f7ff ff25 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003a82:	4658      	mov	r0, fp
 8003a84:	f7ff ff22 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003a88:	4640      	mov	r0, r8
 8003a8a:	f7ff ff1f 	bl	80038cc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_2)
 8003a8e:	4b94      	ldr	r3, [pc, #592]	; (8003ce0 <_ZN15customGraphBaseC1Ev+0x3d0>)
 8003a90:	f8c4 54dc 	str.w	r5, [r4, #1244]	; 0x4dc
    box1.setPosition(0, 0, 310, 200);
 8003a94:	4632      	mov	r2, r6
 8003a96:	f8c4 34d8 	str.w	r3, [r4, #1240]	; 0x4d8
 8003a9a:	4650      	mov	r0, sl
 8003a9c:	4b91      	ldr	r3, [pc, #580]	; (8003ce4 <_ZN15customGraphBaseC1Ev+0x3d4>)
 8003a9e:	4631      	mov	r1, r6
 8003aa0:	f8c4 64e4 	str.w	r6, [r4, #1252]	; 0x4e4
 8003aa4:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	; (8003ce8 <_ZN15customGraphBaseC1Ev+0x3d8>)
 8003aaa:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
 8003aae:	f8c4 34e8 	str.w	r3, [r4, #1256]	; 0x4e8
 8003ab2:	4b8e      	ldr	r3, [pc, #568]	; (8003cec <_ZN15customGraphBaseC1Ev+0x3dc>)
 8003ab4:	f8c4 64f4 	str.w	r6, [r4, #1268]	; 0x4f4
 8003ab8:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
        rect.width = width;
 8003abc:	4b8c      	ldr	r3, [pc, #560]	; (8003cf0 <_ZN15customGraphBaseC1Ev+0x3e0>)
 8003abe:	60ab      	str	r3, [r5, #8]
 8003ac0:	23c8      	movs	r3, #200	; 0xc8
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003ac8:	f7ff fe8a 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	656b      	str	r3, [r5, #84]	; 0x54
    graph1.setGraphAreaMargin(25, 45, 5, 40);
 8003ad6:	f04f 0a28 	mov.w	sl, #40	; 0x28
    add(box1);
 8003ada:	f008 ff57 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph1.setPosition(0, 0, 310, 200);
 8003ade:	23c8      	movs	r3, #200	; 0xc8
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	4632      	mov	r2, r6
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003aec:	f7ff fe78 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setScaleX(1);
 8003af0:	4638      	mov	r0, r7
 8003af2:	4632      	mov	r2, r6
 8003af4:	2101      	movs	r1, #1
 8003af6:	f00a fdcd 	bl	800e694 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(10);
 8003afa:	4638      	mov	r0, r7
 8003afc:	4632      	mov	r2, r6
 8003afe:	210a      	movs	r1, #10
 8003b00:	f00a fde7 	bl	800e6d2 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setGraphAreaMargin(25, 45, 5, 40);
 8003b04:	4638      	mov	r0, r7
 8003b06:	2305      	movs	r3, #5
 8003b08:	222d      	movs	r2, #45	; 0x2d
 8003b0a:	2119      	movs	r1, #25
 8003b0c:	f8cd a000 	str.w	sl, [sp]
 8003b10:	f00a fd05 	bl	800e51e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 8003b14:	4633      	mov	r3, r6
 8003b16:	4638      	mov	r0, r7
 8003b18:	4632      	mov	r2, r6
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	9600      	str	r6, [sp, #0]
 8003b1e:	f00a fc11 	bl	800e344 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(0, 60);
 8003b22:	4638      	mov	r0, r7
 8003b24:	223c      	movs	r2, #60	; 0x3c
 8003b26:	4631      	mov	r1, r6
 8003b28:	f7ff fa71 	bl	800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(-100, 100);
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	2264      	movs	r2, #100	; 0x64
 8003b30:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8003b34:	f7ff faf7 	bl	8003126 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    graph1.setDragAction(graphDraggedCallback);
 8003b38:	f505 53a6 	add.w	r3, r5, #5312	; 0x14c0
        setIntervalScaled(abs(interval) * dataScale);
 8003b3c:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003b40:	2201      	movs	r2, #1
 8003b42:	3318      	adds	r3, #24
        setIntervalScaled(abs(interval) * dataScale);
 8003b44:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
        dragAction = &callback;
 8003b48:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    graph1.setClickAction(graphClickedCallback);
 8003b4c:	f505 53a7 	add.w	r3, r5, #5344	; 0x14e0
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003b50:	2800      	cmp	r0, #0
 8003b52:	f103 0308 	add.w	r3, r3, #8
 8003b56:	bfb8      	it	lt
 8003b58:	4240      	neglt	r0, r0
        clickAction = &callback;
 8003b5a:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
        color = newColor;
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <_ZN15customGraphBaseC1Ev+0x3e4>)
        gridInterval = abs(interval);
 8003b60:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
        color = newColor;
 8003b64:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
        lineWidth = width;
 8003b68:	f04f 0301 	mov.w	r3, #1
 8003b6c:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003b70:	f00a fd88 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003b74:	2201      	movs	r2, #1
    graph1.addGraphElement(graph1MajorXAxisGrid);
 8003b76:	9902      	ldr	r1, [sp, #8]
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003b78:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 8003b7c:	4638      	mov	r0, r7
        dataScale = scale;
 8003b7e:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 8003b82:	f00a fbea 	bl	800e35a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003b86:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
 8003b8a:	2014      	movs	r0, #20
        color = newColor;
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <_ZN15customGraphBaseC1Ev+0x3e4>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003b8e:	220a      	movs	r2, #10
        setIntervalScaled(abs(interval) * dataScale);
 8003b90:	4348      	muls	r0, r1
        color = newColor;
 8003b92:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
        lineWidth = width;
 8003b96:	f04f 0301 	mov.w	r3, #1
 8003b9a:	2800      	cmp	r0, #0
 8003b9c:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
 8003ba0:	bfb8      	it	lt
 8003ba2:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003ba4:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003ba8:	f00a fd6c 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003bac:	230a      	movs	r3, #10
    graph1.addGraphElement(graph1MajorYAxisGrid);
 8003bae:	9903      	ldr	r1, [sp, #12]
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003bb0:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
 8003bb4:	4638      	mov	r0, r7
        dataScale = scale;
 8003bb6:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
 8003bba:	f00a fbce 	bl	800e35a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8003bbe:	f8d4 11ec 	ldr.w	r1, [r4, #492]	; 0x1ec
class TypedText
 8003bc2:	2309      	movs	r3, #9
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003bc4:	2201      	movs	r2, #1
        return i * scale;
 8003bc6:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
 8003bca:	f8a4 31f8 	strh.w	r3, [r4, #504]	; 0x1f8
        color = newColor;
 8003bce:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
 8003bd8:	bfb8      	it	lt
 8003bda:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8003bdc:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003be0:	f00a fd50 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003be4:	2301      	movs	r3, #1
    graph1.addBottomElement(graph1MajorXAxisLabel);
 8003be6:	9904      	ldr	r1, [sp, #16]
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003be8:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
 8003bec:	4638      	mov	r0, r7
        dataScale = scale;
 8003bee:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 8003bf2:	f00a fbd6 	bl	800e3a2 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8003bf6:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 8003bfa:	230c      	movs	r3, #12
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003bfc:	220a      	movs	r2, #10
 8003bfe:	fb0a f001 	mul.w	r0, sl, r1
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 8003c02:	f505 5aa3 	add.w	sl, r5, #5216	; 0x1460
 8003c06:	f8a4 3244 	strh.w	r3, [r4, #580]	; 0x244
 8003c0a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
 8003c14:	bfb8      	it	lt
 8003c16:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8003c18:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003c1c:	f00a fd32 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003c20:	230a      	movs	r3, #10
    graph1.addLeftElement(graph1MajorYAxisLabel);
 8003c22:	9905      	ldr	r1, [sp, #20]
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003c24:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
 8003c28:	4638      	mov	r0, r7
        dataScale = scale;
 8003c2a:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
 8003c2e:	f00a fba6 	bl	800e37e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <_ZN15customGraphBaseC1Ev+0x3e8>)
    graph1.addGraphElement(graph1Line1);
 8003c34:	4638      	mov	r0, r7
 8003c36:	9906      	ldr	r1, [sp, #24]
 8003c38:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003c3c:	f24c 2332 	movw	r3, #49714	; 0xc232
 8003c40:	f8a4 3294 	strh.w	r3, [r4, #660]	; 0x294
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003c44:	2337      	movs	r3, #55	; 0x37
 8003c46:	f884 3296 	strb.w	r3, [r4, #662]	; 0x296
        canvasPainter = &painter;
 8003c4a:	9b07      	ldr	r3, [sp, #28]
 8003c4c:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003c50:	f04f 0304 	mov.w	r3, #4
 8003c54:	f884 3280 	strb.w	r3, [r4, #640]	; 0x280
 8003c58:	f00a fb7f 	bl	800e35a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
    add(graph1);
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4628      	mov	r0, r5
        boundingArea = calculateBoundingArea();
 8003c60:	af08      	add	r7, sp, #32
 8003c62:	f008 fe93 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    debugText.setXY(94, 0);
 8003c66:	4632      	mov	r2, r6
 8003c68:	215e      	movs	r1, #94	; 0x5e
 8003c6a:	4648      	mov	r0, r9
 8003c6c:	f7fe ff71 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c70:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003c74:	4649      	mov	r1, r9
 8003c76:	4638      	mov	r0, r7
        color = newColor;
 8003c78:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
        boundingArea = calculateBoundingArea();
 8003c7c:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
        linespace = space;
 8003c80:	f8a4 62cc 	strh.w	r6, [r4, #716]	; 0x2cc
        boundingArea = calculateBoundingArea();
 8003c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c88:	4798      	blx	r3
 8003c8a:	f109 033c 	add.w	r3, r9, #60	; 0x3c
 8003c8e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003c92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <_ZN15customGraphBaseC1Ev+0x3ec>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b92b      	cbnz	r3, 8003ca8 <_ZN15customGraphBaseC1Ev+0x398>
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <_ZN15customGraphBaseC1Ev+0x3f0>)
 8003c9e:	2160      	movs	r1, #96	; 0x60
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <_ZN15customGraphBaseC1Ev+0x3f4>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003ca2:	4819      	ldr	r0, [pc, #100]	; (8003d08 <_ZN15customGraphBaseC1Ev+0x3f8>)
 8003ca4:	f01a f97a 	bl	801df9c <__assert_func>
 8003ca8:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <_ZN15customGraphBaseC1Ev+0x3fc>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	2b06      	cmp	r3, #6
 8003cae:	d831      	bhi.n	8003d14 <_ZN15customGraphBaseC1Ev+0x404>
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <_ZN15customGraphBaseC1Ev+0x400>)
 8003cb2:	2161      	movs	r1, #97	; 0x61
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <_ZN15customGraphBaseC1Ev+0x3f4>)
 8003cb6:	e7f4      	b.n	8003ca2 <_ZN15customGraphBaseC1Ev+0x392>
 8003cb8:	08021834 	.word	0x08021834
 8003cbc:	08022210 	.word	0x08022210
 8003cc0:	08021d48 	.word	0x08021d48
 8003cc4:	080216c8 	.word	0x080216c8
 8003cc8:	080214c8 	.word	0x080214c8
 8003ccc:	08021580 	.word	0x08021580
 8003cd0:	08022030 	.word	0x08022030
 8003cd4:	080220d0 	.word	0x080220d0
 8003cd8:	08021fb4 	.word	0x08021fb4
 8003cdc:	08021c98 	.word	0x08021c98
 8003ce0:	08021804 	.word	0x08021804
 8003ce4:	0800369b 	.word	0x0800369b
 8003ce8:	0802181c 	.word	0x0802181c
 8003cec:	080036b9 	.word	0x080036b9
 8003cf0:	00c80136 	.word	0x00c80136
 8003cf4:	ff1497c5 	.word	0xff1497c5
 8003cf8:	ff32c237 	.word	0xff32c237
 8003cfc:	2400f4fc 	.word	0x2400f4fc
 8003d00:	08021372 	.word	0x08021372
 8003d04:	08021482 	.word	0x08021482
 8003d08:	080213ef 	.word	0x080213ef
 8003d0c:	2400f500 	.word	0x2400f500
 8003d10:	08021444 	.word	0x08021444
        return texts->getText(typedTextId);
 8003d14:	4b9c      	ldr	r3, [pc, #624]	; (8003f88 <_ZN15customGraphBaseC1Ev+0x678>)
 8003d16:	2106      	movs	r1, #6
 8003d18:	6818      	ldr	r0, [r3, #0]
 8003d1a:	f7ff f949 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 8003d1e:	4a9b      	ldr	r2, [pc, #620]	; (8003f8c <_ZN15customGraphBaseC1Ev+0x67c>)
 8003d20:	4603      	mov	r3, r0
 8003d22:	210a      	movs	r1, #10
 8003d24:	4650      	mov	r0, sl
 8003d26:	f011 fba3 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    debugText.resizeToCurrentText();
 8003d2a:	4648      	mov	r0, r9
        wc1 = value;
 8003d2c:	f8c4 a2e0 	str.w	sl, [r4, #736]	; 0x2e0
 8003d30:	f00b ff0c 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003d34:	f8df a260 	ldr.w	sl, [pc, #608]	; 8003f98 <_ZN15customGraphBaseC1Ev+0x688>
 8003d38:	2308      	movs	r3, #8
    debugText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LR9V));
 8003d3a:	a90c      	add	r1, sp, #48	; 0x30
 8003d3c:	4648      	mov	r0, r9
 8003d3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003d42:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003d46:	f00b ff21 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(debugText);
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f008 fe1d 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel4.setXY(278, 180);
 8003d52:	22b4      	movs	r2, #180	; 0xb4
 8003d54:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003d58:	ee19 0a10 	vmov	r0, s18
 8003d5c:	f7fe fef9 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d60:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003d64:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8003d68:	ee19 1a10 	vmov	r1, s18
 8003d6c:	4638      	mov	r0, r7
        color = newColor;
 8003d6e:	f8c4 2314 	str.w	r2, [r4, #788]	; 0x314
        boundingArea = calculateBoundingArea();
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003d76:	f8a4 6318 	strh.w	r6, [r4, #792]	; 0x318
        boundingArea = calculateBoundingArea();
 8003d7a:	4798      	blx	r3
 8003d7c:	f505 5399 	add.w	r3, r5, #4896	; 0x1320
 8003d80:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003d84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003d88:	f505 53a3 	add.w	r3, r5, #5216	; 0x1460
    timeLabel4.resizeToCurrentText();
 8003d8c:	ee19 0a10 	vmov	r0, s18
    timeLabel4Buffer[0] = 0;
 8003d90:	f8a4 6474 	strh.w	r6, [r4, #1140]	; 0x474
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003d94:	3314      	adds	r3, #20
 8003d96:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
    timeLabel4.resizeToCurrentText();
 8003d9a:	f00b fed7 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003d9e:	f04f 0204 	mov.w	r2, #4
    timeLabel4.setTypedText(touchgfx::TypedText(T_TIMEL4));
 8003da2:	a90c      	add	r1, sp, #48	; 0x30
 8003da4:	ee19 0a10 	vmov	r0, s18
 8003da8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8003dac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003db0:	f00b feec 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel4);
 8003db4:	ee19 1a10 	vmov	r1, s18
 8003db8:	4628      	mov	r0, r5
 8003dba:	f008 fde7 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel3.setXY(215, 180);
 8003dbe:	22b4      	movs	r2, #180	; 0xb4
 8003dc0:	21d7      	movs	r1, #215	; 0xd7
 8003dc2:	ee18 0a10 	vmov	r0, s16
 8003dc6:	f7fe fec4 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003dca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003dce:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 8003dd2:	ee18 1a10 	vmov	r1, s16
 8003dd6:	4638      	mov	r0, r7
        color = newColor;
 8003dd8:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
        boundingArea = calculateBoundingArea();
 8003ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003de0:	f8a4 6364 	strh.w	r6, [r4, #868]	; 0x364
        boundingArea = calculateBoundingArea();
 8003de4:	4798      	blx	r3
 8003de6:	ee18 2a10 	vmov	r2, s16
 8003dea:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8003dee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003df2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003df6:	f505 53a4 	add.w	r3, r5, #5248	; 0x1480
    timeLabel3.resizeToCurrentText();
 8003dfa:	ee18 0a10 	vmov	r0, s16
    timeLabel3Buffer[0] = 0;
 8003dfe:	f8a4 6488 	strh.w	r6, [r4, #1160]	; 0x488
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003e02:	3308      	adds	r3, #8
 8003e04:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
    timeLabel3.resizeToCurrentText();
 8003e08:	f00b fea0 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003e0c:	f04f 0201 	mov.w	r2, #1
    timeLabel3.setTypedText(touchgfx::TypedText(T_TIMEL3));
 8003e10:	a90c      	add	r1, sp, #48	; 0x30
 8003e12:	ee18 0a10 	vmov	r0, s16
 8003e16:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8003e1a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003e1e:	f00b feb5 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel3);
 8003e22:	ee18 1a10 	vmov	r1, s16
 8003e26:	4628      	mov	r0, r5
 8003e28:	f008 fdb0 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel2.setXY(151, 180);
 8003e2c:	22b4      	movs	r2, #180	; 0xb4
 8003e2e:	2197      	movs	r1, #151	; 0x97
 8003e30:	ee18 0a90 	vmov	r0, s17
 8003e34:	f7fe fe8d 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e38:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003e3c:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003e40:	ee18 1a90 	vmov	r1, s17
 8003e44:	4638      	mov	r0, r7
        color = newColor;
 8003e46:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
        boundingArea = calculateBoundingArea();
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003e4e:	f8a4 63b0 	strh.w	r6, [r4, #944]	; 0x3b0
        boundingArea = calculateBoundingArea();
 8003e52:	4798      	blx	r3
 8003e54:	ee18 2a90 	vmov	r2, s17
 8003e58:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8003e5c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003e60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003e64:	f505 53a4 	add.w	r3, r5, #5248	; 0x1480
    timeLabel2.resizeToCurrentText();
 8003e68:	ee18 0a90 	vmov	r0, s17
    timeLabel2Buffer[0] = 0;
 8003e6c:	f8a4 649c 	strh.w	r6, [r4, #1180]	; 0x49c
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003e70:	331c      	adds	r3, #28
 8003e72:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
    timeLabel2.resizeToCurrentText();
 8003e76:	f00b fe69 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003e7a:	2305      	movs	r3, #5
    timeLabel2.setTypedText(touchgfx::TypedText(T_TIMEL2));
 8003e7c:	a90c      	add	r1, sp, #48	; 0x30
 8003e7e:	ee18 0a90 	vmov	r0, s17
 8003e82:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003e86:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003e8a:	f00b fe7f 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel2);
 8003e8e:	ee18 1a90 	vmov	r1, s17
 8003e92:	4628      	mov	r0, r5
 8003e94:	f008 fd7a 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel1.setXY(84, 180);
 8003e98:	22b4      	movs	r2, #180	; 0xb4
 8003e9a:	2154      	movs	r1, #84	; 0x54
 8003e9c:	4658      	mov	r0, fp
 8003e9e:	f7fe fe58 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ea2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003ea6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003eaa:	4659      	mov	r1, fp
 8003eac:	4638      	mov	r0, r7
        color = newColor;
 8003eae:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
        boundingArea = calculateBoundingArea();
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003eb6:	f8a4 63fc 	strh.w	r6, [r4, #1020]	; 0x3fc
        boundingArea = calculateBoundingArea();
 8003eba:	4798      	blx	r3
 8003ebc:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 8003ec0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003ec4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003ec8:	f505 53a5 	add.w	r3, r5, #5280	; 0x14a0
    timeLabel1.resizeToCurrentText();
 8003ecc:	4658      	mov	r0, fp
    timeLabel1Buffer[0] = 0;
 8003ece:	f8a4 64b0 	strh.w	r6, [r4, #1200]	; 0x4b0
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    timeLabel1.resizeToCurrentText();
 8003ed8:	f00b fe38 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003edc:	2307      	movs	r3, #7
    timeLabel1.setTypedText(touchgfx::TypedText(T_TIMEL1));
 8003ede:	a90c      	add	r1, sp, #48	; 0x30
 8003ee0:	4658      	mov	r0, fp
 8003ee2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003ee6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003eea:	f00b fe4f 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel1);
 8003eee:	4659      	mov	r1, fp
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f008 fd4b 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dateLabel.setXY(215, 0);
 8003ef6:	4632      	mov	r2, r6
 8003ef8:	21d7      	movs	r1, #215	; 0xd7
 8003efa:	4640      	mov	r0, r8
 8003efc:	f7fe fe29 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003f00:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003f04:	f8d4 3414 	ldr.w	r3, [r4, #1044]	; 0x414
 8003f08:	4641      	mov	r1, r8
 8003f0a:	4638      	mov	r0, r7
        color = newColor;
 8003f0c:	f8c4 2444 	str.w	r2, [r4, #1092]	; 0x444
        boundingArea = calculateBoundingArea();
 8003f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003f14:	f8a4 6448 	strh.w	r6, [r4, #1096]	; 0x448
    Unicode::snprintf(dateLabelBuffer, DATELABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WAHU).getText());
 8003f18:	f505 56a6 	add.w	r6, r5, #5312	; 0x14c0
        boundingArea = calculateBoundingArea();
 8003f1c:	4798      	blx	r3
 8003f1e:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 8003f22:	3604      	adds	r6, #4
 8003f24:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <_ZN15customGraphBaseC1Ev+0x680>)
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f43f aeb3 	beq.w	8003c9c <_ZN15customGraphBaseC1Ev+0x38c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003f36:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <_ZN15customGraphBaseC1Ev+0x684>)
 8003f38:	8813      	ldrh	r3, [r2, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	f67f aeb8 	bls.w	8003cb0 <_ZN15customGraphBaseC1Ev+0x3a0>
        return texts->getText(typedTextId);
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <_ZN15customGraphBaseC1Ev+0x678>)
 8003f42:	2102      	movs	r1, #2
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	f7ff f833 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 8003f4a:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <_ZN15customGraphBaseC1Ev+0x67c>)
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	210a      	movs	r1, #10
 8003f50:	4630      	mov	r0, r6
 8003f52:	f011 fa8d 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    dateLabel.resizeToCurrentText();
 8003f56:	4640      	mov	r0, r8
 8003f58:	f8c4 645c 	str.w	r6, [r4, #1116]	; 0x45c
 8003f5c:	f00b fdf6 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003f60:	2303      	movs	r3, #3
    dateLabel.setTypedText(touchgfx::TypedText(T_DATE));
 8003f62:	a90c      	add	r1, sp, #48	; 0x30
 8003f64:	4640      	mov	r0, r8
 8003f66:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003f6a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003f6e:	f00b fe0d 	bl	800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(dateLabel);
 8003f72:	4628      	mov	r0, r5
 8003f74:	4641      	mov	r1, r8
 8003f76:	f008 fd09 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	b00f      	add	sp, #60	; 0x3c
 8003f7e:	ecbd 8b04 	vpop	{d8-d9}
 8003f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f86:	bf00      	nop
 8003f88:	2400f508 	.word	0x2400f508
 8003f8c:	080214ba 	.word	0x080214ba
 8003f90:	2400f4fc 	.word	0x2400f4fc
 8003f94:	2400f500 	.word	0x2400f500
 8003f98:	08020c08 	.word	0x08020c08

08003f9c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003f9c:	4770      	bx	lr

08003f9e <_ZN19FrontendApplicationD0Ev>:
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	4604      	mov	r4, r0
 8003fa2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003fa6:	f019 ffca 	bl	801df3e <_ZdlPvj>
 8003faa:	4620      	mov	r0, r4
 8003fac:	bd10      	pop	{r4, pc}

08003fae <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	4604      	mov	r4, r0
    {
        model.tick();
 8003fb2:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003fb6:	f000 f812 	bl	8003fde <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003fba:	4620      	mov	r0, r4
    }
 8003fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003fc0:	f00e bab0 	b.w	8012524 <_ZN8touchgfx11Application15handleTickEventEv>

08003fc4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003fc8:	f7fe fcfc 	bl	80029c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003fcc:	4b01      	ldr	r3, [pc, #4]	; (8003fd4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003fce:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003fd0:	6023      	str	r3, [r4, #0]
}
 8003fd2:	bd10      	pop	{r4, pc}
 8003fd4:	080218d0 	.word	0x080218d0

08003fd8 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	6002      	str	r2, [r0, #0]
{

}
 8003fdc:	4770      	bx	lr

08003fde <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003fde:	4770      	bx	lr

08003fe0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003fe0:	4770      	bx	lr

08003fe2 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003fe2:	3804      	subs	r0, #4
 8003fe4:	4770      	bx	lr

08003fe6 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003fe6:	4770      	bx	lr

08003fe8 <_ZN16Screen1PresenterD0Ev>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4604      	mov	r4, r0
 8003fec:	2110      	movs	r1, #16
 8003fee:	f019 ffa6 	bl	801df3e <_ZdlPvj>
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	bd10      	pop	{r4, pc}

08003ff6 <_ZThn4_N16Screen1PresenterD0Ev>:
 8003ff6:	f1a0 0004 	sub.w	r0, r0, #4
 8003ffa:	e7f5      	b.n	8003fe8 <_ZN16Screen1PresenterD0Ev>

08003ffc <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003ffc:	2200      	movs	r2, #0
    : view(v)
 8003ffe:	60c1      	str	r1, [r0, #12]
 8004000:	6082      	str	r2, [r0, #8]
 8004002:	4a04      	ldr	r2, [pc, #16]	; (8004014 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004004:	b510      	push	{r4, lr}
    : view(v)
 8004006:	f102 0408 	add.w	r4, r2, #8
 800400a:	3220      	adds	r2, #32
 800400c:	6004      	str	r4, [r0, #0]
 800400e:	6042      	str	r2, [r0, #4]
}
 8004010:	bd10      	pop	{r4, pc}
 8004012:	bf00      	nop
 8004014:	08021914 	.word	0x08021914

08004018 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004018:	4770      	bx	lr

0800401a <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter++;
 800401a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800401e:	f8d0 3590 	ldr.w	r3, [r0, #1424]	; 0x590
	tickCounter2++;
 8004022:	f8d0 2594 	ldr.w	r2, [r0, #1428]	; 0x594
	tickCounter++;
 8004026:	3301      	adds	r3, #1
	tickCounter2++;
 8004028:	3201      	adds	r2, #1
	if(tickCounter == 10){
 800402a:	2b0a      	cmp	r3, #10
	tickCounter++;
 800402c:	f8c0 3590 	str.w	r3, [r0, #1424]	; 0x590
	tickCounter2++;
 8004030:	f8c0 2594 	str.w	r2, [r0, #1428]	; 0x594
		tickCounter= 0;
 8004034:	bf04      	itt	eq
 8004036:	2300      	moveq	r3, #0
 8004038:	f8c0 3590 	streq.w	r3, [r0, #1424]	; 0x590
	if(tickCounter2 % 3 == 0)
	{
		//customGraph1.addPoint((sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, (float)tickCounter2);
		//graph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, tickCounter2);
	}
}
 800403c:	4770      	bx	lr
	...

08004040 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <_ZN11Screen1ViewD1Ev+0x10>)
 8004042:	b510      	push	{r4, lr}
 8004044:	4604      	mov	r4, r0
 8004046:	6003      	str	r3, [r0, #0]
 8004048:	f7fe fd66 	bl	8002b18 <_ZN15Screen1ViewBaseD1Ev>
 800404c:	4620      	mov	r0, r4
 800404e:	bd10      	pop	{r4, pc}
 8004050:	08021944 	.word	0x08021944

08004054 <_ZN11Screen1ViewD0Ev>:
 8004054:	b510      	push	{r4, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	f7ff fff2 	bl	8004040 <_ZN11Screen1ViewD1Ev>
 800405c:	f244 51a0 	movw	r1, #17824	; 0x45a0
 8004060:	4620      	mov	r0, r4
 8004062:	f019 ff6c 	bl	801df3e <_ZdlPvj>
 8004066:	4620      	mov	r0, r4
 8004068:	bd10      	pop	{r4, pc}
	...

0800406c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800406c:	b510      	push	{r4, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	f7fe fd7c 	bl	8002b6c <_ZN15Screen1ViewBaseC1Ev>
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <_ZN11Screen1ViewC1Ev+0x28>)
 8004076:	2200      	movs	r2, #0
}
 8004078:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8004080:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
 8004084:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
	tickCounter  = 0;
 8004088:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
	tickCounter2 = 0;
 800408c:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
}
 8004090:	bd10      	pop	{r4, pc}
 8004092:	bf00      	nop
 8004094:	08021944 	.word	0x08021944

08004098 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004098:	f7fe bd3b 	b.w	8002b12 <_ZN15Screen1ViewBase11setupScreenEv>

0800409c <_ZN11customGraphD1Ev>:
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <_ZN11customGraphD1Ev+0x10>)
 800409e:	b510      	push	{r4, lr}
 80040a0:	4604      	mov	r4, r0
 80040a2:	6003      	str	r3, [r0, #0]
 80040a4:	f7ff fa5b 	bl	800355e <_ZN15customGraphBaseD1Ev>
 80040a8:	4620      	mov	r0, r4
 80040aa:	bd10      	pop	{r4, pc}
 80040ac:	08021994 	.word	0x08021994

080040b0 <_ZN11customGraphD0Ev>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	f7ff fff2 	bl	800409c <_ZN11customGraphD1Ev>
 80040b8:	f241 6118 	movw	r1, #5656	; 0x1618
 80040bc:	4620      	mov	r0, r4
 80040be:	f019 ff3e 	bl	801df3e <_ZdlPvj>
 80040c2:	4620      	mov	r0, r4
 80040c4:	bd10      	pop	{r4, pc}

080040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
            return v < 0 ? Q5((v + 1) - toQ5(1).v / 2).to<int>() : Q5(v + toQ5(1).v / 2).to<int>();
 80040c6:	6803      	ldr	r3, [r0, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da02      	bge.n	80040d2 <_ZNK8touchgfx7CWRUtil2Q55roundEv+0xc>
            return (T)((T)v / (T)Rasterizer::POLY_BASE_SIZE);
 80040cc:	f1b3 000f 	subs.w	r0, r3, #15
 80040d0:	d501      	bpl.n	80040d6 <_ZNK8touchgfx7CWRUtil2Q55roundEv+0x10>
 80040d2:	f103 0010 	add.w	r0, r3, #16
 80040d6:	1140      	asrs	r0, r0, #5
 80040d8:	4770      	bx	lr
	...

080040dc <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);

	}

	virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 80040dc:	b530      	push	{r4, r5, lr}
 80040de:	b087      	sub	sp, #28
 80040e0:	4604      	mov	r4, r0
 80040e2:	ab02      	add	r3, sp, #8
 80040e4:	e883 0006 	stmia.w	r3, {r1, r2}
            : v(0)
 80040e8:	2300      	movs	r3, #0
 80040ea:	9305      	str	r3, [sp, #20]
	{
		CWRUtil::Q5 test;
		//int x;
		// Override and implement this function in customGraph
		if(value.clickEvent.getType() == ClickEvent::PRESSED){
 80040ec:	7913      	ldrb	r3, [r2, #4]
 80040ee:	bb83      	cbnz	r3, 8004152 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x76>
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80040f0:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getUsedCapacity());
			//x = graph1.int2scaledX(value.index);
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 80040f4:	f504 55a3 	add.w	r5, r4, #5216	; 0x1460
 80040f8:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80040fc:	440b      	add	r3, r1
 80040fe:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8004102:	1ac9      	subs	r1, r1, r3
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004104:	e9d0 0261 	ldrd	r0, r2, [r0, #388]	; 0x184
 8004108:	b209      	sxth	r1, r1
 800410a:	1a12      	subs	r2, r2, r0
 800410c:	f1c0 000c 	rsb	r0, r0, #12
 8004110:	3901      	subs	r1, #1
 8004112:	f7ff fb78 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8004116:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 800411a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800411e:	9005      	str	r0, [sp, #20]
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 8004120:	a805      	add	r0, sp, #20
 8004122:	f7ff ffd0 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004126:	4a0c      	ldr	r2, [pc, #48]	; (8004158 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x7c>)
 8004128:	4603      	mov	r3, r0
 800412a:	210a      	movs	r1, #10
 800412c:	4628      	mov	r0, r5
 800412e:	f011 f99f 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.indexToScreenX(value.index));
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled());
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphAreaPaddingLeft());
			debugText.setWildcard(debugTextBuffer);
			debugText.invalidate();
 8004132:	f504 5094 	add.w	r0, r4, #4736	; 0x1280
 8004136:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800413a:	3018      	adds	r0, #24
 800413c:	f8c3 52e0 	str.w	r5, [r3, #736]	; 0x2e0
 8004140:	9001      	str	r0, [sp, #4]
 8004142:	f00f f9b2 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
			debugText.resizeToCurrentText();
 8004146:	9801      	ldr	r0, [sp, #4]
 8004148:	f00b fd00 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			debugText.invalidate();
 800414c:	9801      	ldr	r0, [sp, #4]
 800414e:	f00f f9ac 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
		}
		if(value.clickEvent.getType() == ClickEvent::RELEASED){

		}
	}
 8004152:	b007      	add	sp, #28
 8004154:	bd30      	pop	{r4, r5, pc}
 8004156:	bf00      	nop
 8004158:	08021970 	.word	0x08021970

0800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>:
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 800415c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800415e:	4615      	mov	r5, r2
    	Unicode::snprintf(timeLabelBuf, 10, "%02dc%02d",time->tm_hour, time->tm_min);
 8004160:	685a      	ldr	r2, [r3, #4]
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 8004162:	460c      	mov	r4, r1
    	Unicode::snprintf(timeLabelBuf, 10, "%02dc%02d",time->tm_hour, time->tm_min);
 8004164:	210a      	movs	r1, #10
 8004166:	9200      	str	r2, [sp, #0]
 8004168:	4628      	mov	r0, r5
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm+0x34>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f011 f97f 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    	timelabel->invalidate();
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	4620      	mov	r0, r4
 8004176:	64a5      	str	r5, [r4, #72]	; 0x48
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	4798      	blx	r3
    	timelabel->resizeToCurrentText();
 800417c:	4620      	mov	r0, r4
 800417e:	f00b fce5 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	timelabel->invalidate();
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	4620      	mov	r0, r4
 8004186:	695b      	ldr	r3, [r3, #20]
    }
 8004188:	b003      	add	sp, #12
 800418a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    	timelabel->invalidate();
 800418e:	4718      	bx	r3
 8004190:	08021973 	.word	0x08021973

08004194 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 8004194:	b510      	push	{r4, lr}
 8004196:	4604      	mov	r4, r0
 8004198:	f7ff fbba 	bl	8003910 <_ZN15customGraphBaseC1Ev>
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <_ZN11customGraphC1Ev+0x54>)
            : v(0)
 800419e:	2200      	movs	r2, #0
{

}
 80041a0:	4620      	mov	r0, r4
customGraph::customGraph()
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80041a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
 80041ac:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
 80041b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 80041b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 80041b8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
 80041bc:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
 80041c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 80041c4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
 80041c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 80041cc:	f883 254c 	strb.w	r2, [r3, #1356]	; 0x54c
 80041d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041d4:	f8a3 260c 	strh.w	r2, [r3, #1548]	; 0x60c
 80041d8:	2218      	movs	r2, #24
 80041da:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
 80041de:	227d      	movs	r2, #125	; 0x7d
 80041e0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
}
 80041e4:	bd10      	pop	{r4, pc}
 80041e6:	bf00      	nop
 80041e8:	08021994 	.word	0x08021994

080041ec <_ZN11customGraph12setTimeRangeEi.part.0>:
{
	customGraphMaxPoint = maxPoint;
}


void customGraph::setTimeRange(int hours)
 80041ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{

	if(hours == 1 || hours ==8 || hours == 24)
	{
		customGraphTimeRange = hours;
		customGraphInterval = (hours*60)/4;
 80041f0:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
		customGraphTimeRange = hours;
 80041f4:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 80041f8:	263c      	movs	r6, #60	; 0x3c
void customGraph::setTimeRange(int hours)
 80041fa:	4604      	mov	r4, r0
 80041fc:	b085      	sub	sp, #20
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 80041fe:	3058      	adds	r0, #88	; 0x58
 8004200:	fb06 f201 	mul.w	r2, r6, r1
		customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);

		customGraphBase::graph1MajorYAxisLabel.setInterval(1);
		customGraphBase::graph1MajorYAxisGrid.setInterval(1);

		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004204:	f241 5a50 	movw	sl, #5456	; 0x1550
		customGraphTimeRange = hours;
 8004208:	f8c5 1610 	str.w	r1, [r5, #1552]	; 0x610
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 800420c:	2100      	movs	r1, #0
		customGraphInterval = (hours*60)/4;
 800420e:	f8c5 3614 	str.w	r3, [r5, #1556]	; 0x614
		convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 8004212:	f504 59aa 	add.w	r9, r4, #5440	; 0x1540
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004216:	9003      	str	r0, [sp, #12]
 8004218:	f7fe fef9 	bl	800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		customGraphBase::graph1MajorXAxisLabel.setInterval(customGraphInterval);
 800421c:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004220:	eb04 080a 	add.w	r8, r4, sl
        return i * scale;
 8004224:	f8d5 21ec 	ldr.w	r2, [r5, #492]	; 0x1ec
		convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 8004228:	f109 0918 	add.w	r9, r9, #24
		customGraphBase::graph1.setGraphRangeYAutoScaled(true,1);
 800422c:	9803      	ldr	r0, [sp, #12]

		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 800422e:	f504 57ac 	add.w	r7, r4, #5504	; 0x1580
 8004232:	435a      	muls	r2, r3
		convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);

		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 8004234:	f241 5bb0 	movw	fp, #5552	; 0x15b0
 8004238:	2a00      	cmp	r2, #0
 800423a:	bfb8      	it	lt
 800423c:	4252      	neglt	r2, r2
        labelInterval = abs(interval);
 800423e:	f8c5 21f0 	str.w	r2, [r5, #496]	; 0x1f0
        setIntervalScaled(abs(interval) * dataScale);
 8004242:	f8d5 216c 	ldr.w	r2, [r5, #364]	; 0x16c
 8004246:	4353      	muls	r3, r2
		customGraphBase::graph1.setGraphRangeYAutoScaled(true,1);
 8004248:	2201      	movs	r2, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	4611      	mov	r1, r2
 800424e:	bfb8      	it	lt
 8004250:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8004252:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
 8004256:	f009 fedf 	bl	800e018 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
 800425a:	f8d5 2238 	ldr.w	r2, [r5, #568]	; 0x238
        setIntervalScaled(abs(interval) * dataScale);
 800425e:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004262:	f504 51a9 	add.w	r1, r4, #5408	; 0x1520
 8004266:	2a00      	cmp	r2, #0
    	localtime_r(timestamp, date_time);
 8004268:	4640      	mov	r0, r8
		convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 800426a:	f108 0838 	add.w	r8, r8, #56	; 0x38
 800426e:	bfb8      	it	lt
 8004270:	4252      	neglt	r2, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	f8c5 223c 	str.w	r2, [r5, #572]	; 0x23c
 8004278:	bfb8      	it	lt
 800427a:	425b      	neglt	r3, r3
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 800427c:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
        gridInterval = abs(interval);
 8004280:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
 8004284:	4372      	muls	r2, r6
 8004286:	e9d1 3100 	ldrd	r3, r1, [r1]
 800428a:	189b      	adds	r3, r3, r2
 800428c:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 8004290:	f844 300a 	str.w	r3, [r4, sl]
 8004294:	4649      	mov	r1, r9
 8004296:	f848 2c34 	str.w	r2, [r8, #-52]
 800429a:	f019 feed 	bl	801e078 <localtime_r>
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 800429e:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
 80042a2:	f854 300a 	ldr.w	r3, [r4, sl]
 80042a6:	4638      	mov	r0, r7
 80042a8:	4372      	muls	r2, r6
 80042aa:	f858 1c34 	ldr.w	r1, [r8, #-52]
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80042ae:	eb04 0a0b 	add.w	sl, r4, fp
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 80042b2:	189b      	adds	r3, r3, r2
 80042b4:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 80042b8:	4641      	mov	r1, r8
 80042ba:	e9c7 3200 	strd	r3, r2, [r7]
 80042be:	f019 fedb 	bl	801e078 <localtime_r>
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80042c2:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
 80042c6:	4650      	mov	r0, sl
 80042c8:	4372      	muls	r2, r6
 80042ca:	e9d7 3100 	ldrd	r3, r1, [r7]
		convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 80042ce:	f504 57ad 	add.w	r7, r4, #5536	; 0x15a0
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80042d2:	189b      	adds	r3, r3, r2
		convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 80042d4:	f107 0718 	add.w	r7, r7, #24
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80042d8:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 80042dc:	f844 300b 	str.w	r3, [r4, fp]
 80042e0:	4639      	mov	r1, r7
 80042e2:	f8ca 2004 	str.w	r2, [sl, #4]
 80042e6:	f019 fec7 	bl	801e078 <localtime_r>

		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80042ea:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 80042ee:	f8da 2004 	ldr.w	r2, [sl, #4]
 80042f2:	f504 50af 	add.w	r0, r4, #5600	; 0x15e0
 80042f6:	435e      	muls	r6, r3
 80042f8:	f854 300b 	ldr.w	r3, [r4, fp]
		convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);

		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 80042fc:	f504 5aa6 	add.w	sl, r4, #5312	; 0x14c0
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 8004300:	199b      	adds	r3, r3, r6
		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 8004302:	f10a 0a04 	add.w	sl, sl, #4
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 8004306:	eb42 76e6 	adc.w	r6, r2, r6, asr #31
 800430a:	e9c0 3600 	strd	r3, r6, [r0]
		convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 800430e:	4606      	mov	r6, r0
 8004310:	3608      	adds	r6, #8
 8004312:	4631      	mov	r1, r6
 8004314:	f019 feb0 	bl	801e078 <localtime_r>
		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 8004318:	f8d5 353c 	ldr.w	r3, [r5, #1340]	; 0x53c
 800431c:	4a3a      	ldr	r2, [pc, #232]	; (8004408 <_ZN11customGraph12setTimeRangeEi.part.0+0x21c>)
 800431e:	210a      	movs	r1, #10
 8004320:	3b64      	subs	r3, #100	; 0x64
 8004322:	4650      	mov	r0, sl
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	f8d5 3538 	ldr.w	r3, [r5, #1336]	; 0x538
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	f8d5 3534 	ldr.w	r3, [r5, #1332]	; 0x534
 8004330:	f011 f89e 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		dateLabel.setWildcard(dateLabelBuffer);
		dateLabel.invalidate();
 8004334:	f504 50a0 	add.w	r0, r4, #5120	; 0x1400
 8004338:	f8c5 a45c 	str.w	sl, [r5, #1116]	; 0x45c
 800433c:	3014      	adds	r0, #20
 800433e:	9003      	str	r0, [sp, #12]
 8004340:	f00f f8b3 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
		dateLabel.resizeToCurrentText();
 8004344:	9803      	ldr	r0, [sp, #12]
 8004346:	f00b fc01 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		dateLabel.invalidate();
 800434a:	9803      	ldr	r0, [sp, #12]
 800434c:	f00f f8ad 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>

		updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004350:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 8004354:	f504 519e 	add.w	r1, r4, #5056	; 0x13c0
 8004358:	464b      	mov	r3, r9
 800435a:	4620      	mov	r0, r4
 800435c:	3210      	adds	r2, #16
 800435e:	3108      	adds	r1, #8
 8004360:	f7ff fefc 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004364:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004368:	f504 519b 	add.w	r1, r4, #4960	; 0x1360
 800436c:	4643      	mov	r3, r8
 800436e:	4620      	mov	r0, r4
 8004370:	321c      	adds	r2, #28
 8004372:	311c      	adds	r1, #28
 8004374:	f7ff fef2 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004378:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 800437c:	f504 5199 	add.w	r1, r4, #4896	; 0x1320
 8004380:	463b      	mov	r3, r7
 8004382:	4620      	mov	r0, r4
 8004384:	3208      	adds	r2, #8
 8004386:	3110      	adds	r1, #16
 8004388:	f7ff fee8 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 800438c:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 8004390:	f504 5197 	add.w	r1, r4, #4832	; 0x12e0
 8004394:	4633      	mov	r3, r6
 8004396:	4620      	mov	r0, r4
 8004398:	3214      	adds	r2, #20
 800439a:	3104      	adds	r1, #4
 800439c:	f7ff fede 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80043a0:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 80043a4:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
 80043a8:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
 80043ac:	441a      	add	r2, r3
 80043ae:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80043b8:	440a      	add	r2, r1
 80043ba:	b298      	uxth	r0, r3
 80043bc:	f8b4 10f0 	ldrh.w	r1, [r4, #240]	; 0xf0
 80043c0:	b21b      	sxth	r3, r3
        return rect.width;
 80043c2:	3a16      	subs	r2, #22

		customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	eba2 0201 	sub.w	r2, r2, r1
 80043ca:	4619      	mov	r1, r3
 80043cc:	bfb8      	it	lt
 80043ce:	1cd9      	addlt	r1, r3, #3
 80043d0:	b292      	uxth	r2, r2
 80043d2:	eb02 01a1 	add.w	r1, r2, r1, asr #2
        rect.x = x;
 80043d6:	f8a5 13cc 	strh.w	r1, [r5, #972]	; 0x3cc
		customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043da:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
		customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043de:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
		customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043e2:	eb02 0161 	add.w	r1, r2, r1, asr #1
		customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043e6:	bf48      	it	mi
 80043e8:	3303      	addmi	r3, #3
 80043ea:	f8a5 1380 	strh.w	r1, [r5, #896]	; 0x380
 80043ee:	eb02 03a3 	add.w	r3, r2, r3, asr #2
		customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/4) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 80043f2:	4402      	add	r2, r0
 80043f4:	f8a5 3334 	strh.w	r3, [r5, #820]	; 0x334

		scrollCounter = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8a5 22e8 	strh.w	r2, [r5, #744]	; 0x2e8
 80043fe:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
	}
}
 8004402:	b005      	add	sp, #20
 8004404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004408:	0802197d 	.word	0x0802197d

0800440c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 800440c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004410:	ab02      	add	r3, sp, #8
 8004412:	4604      	mov	r4, r0
 8004414:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8004418:	e903 0006 	stmdb	r3, {r1, r2}
 800441c:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 800441e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 8004422:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0){
 8004426:	4293      	cmp	r3, r2
 8004428:	f280 8111 	bge.w	800464e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x242>
 800442c:	f8d5 1508 	ldr.w	r1, [r5, #1288]	; 0x508
 8004430:	2900      	cmp	r1, #0
 8004432:	f340 810e 	ble.w	8004652 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
			scrollCounter -= (customGraphTimeRange/2);
 8004436:	f8d5 6610 	ldr.w	r6, [r5, #1552]	; 0x610
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 800443a:	f100 0758 	add.w	r7, r0, #88	; 0x58
			scrollCounter -= (customGraphTimeRange/2);
 800443e:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 8004442:	4638      	mov	r0, r7
			scrollCounter -= (customGraphTimeRange/2);
 8004444:	eba1 0666 	sub.w	r6, r1, r6, asr #1
 8004448:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 800444c:	f7fe ff1e 	bl	800328c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 8004450:	4680      	mov	r8, r0
 8004452:	4638      	mov	r0, r7
 8004454:	f7fe fef3 	bl	800323e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 8004458:	eba8 0000 	sub.w	r0, r8, r0
 800445c:	4631      	mov	r1, r6
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800445e:	f04f 0803 	mov.w	r8, #3
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 8004462:	1982      	adds	r2, r0, r6
 8004464:	4638      	mov	r0, r7
 8004466:	f7fe fdd2 	bl	800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,1);
 800446a:	2201      	movs	r2, #1
 800446c:	4638      	mov	r0, r7
 800446e:	4611      	mov	r1, r2
 8004470:	f009 fdd2 	bl	800e018 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004474:	4638      	mov	r0, r7
 8004476:	f7fe ff57 	bl	8003328 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800447a:	4606      	mov	r6, r0
 800447c:	4638      	mov	r0, r7
 800447e:	f7fe ff2c 	bl	80032da <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004482:	1a33      	subs	r3, r6, r0
        return i * scale;
 8004484:	f8d5 6238 	ldr.w	r6, [r5, #568]	; 0x238
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004488:	4638      	mov	r0, r7
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800448a:	fb93 f3f8 	sdiv	r3, r3, r8
 800448e:	4373      	muls	r3, r6
 8004490:	2b00      	cmp	r3, #0
 8004492:	bfb8      	it	lt
 8004494:	425b      	neglt	r3, r3
 8004496:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800449a:	f7fe ff45 	bl	8003328 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800449e:	4606      	mov	r6, r0
 80044a0:	4638      	mov	r0, r7
 80044a2:	f7fe ff1a 	bl	80032da <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 80044a6:	1a36      	subs	r6, r6, r0
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80044a8:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80044ac:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
        setIntervalScaled(abs(interval) * dataScale);
 80044b0:	f8d5 01ac 	ldr.w	r0, [r5, #428]	; 0x1ac
 80044b4:	4419      	add	r1, r3
 80044b6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80044ba:	f9b5 23cc 	ldrsh.w	r2, [r5, #972]	; 0x3cc
 80044be:	1a5b      	subs	r3, r3, r1
 80044c0:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80044c4:	3210      	adds	r2, #16
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 80044c6:	fb96 f6f8 	sdiv	r6, r6, r8
 80044ca:	4346      	muls	r6, r0
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80044cc:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80044d0:	4401      	add	r1, r0
 80044d2:	2e00      	cmp	r6, #0
 80044d4:	fa01 f383 	sxtah	r3, r1, r3
 80044d8:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80044dc:	bfb8      	it	lt
 80044de:	4276      	neglt	r6, r6
 80044e0:	1a5b      	subs	r3, r3, r1
        gridInterval = abs(interval);
 80044e2:	f8c5 61b0 	str.w	r6, [r5, #432]	; 0x1b0
 80044e6:	429a      	cmp	r2, r3
 80044e8:	f280 8151 	bge.w	800478e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x382>
 80044ec:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80044f0:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel2.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80044f4:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80044f8:	4419      	add	r1, r3
 80044fa:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80044fe:	f9b5 2380 	ldrsh.w	r2, [r5, #896]	; 0x380
 8004502:	1a5b      	subs	r3, r3, r1
 8004504:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8004508:	3210      	adds	r2, #16
 800450a:	4401      	add	r1, r0
 800450c:	fa01 f383 	sxtah	r3, r1, r3
 8004510:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004514:	1a5b      	subs	r3, r3, r1
 8004516:	429a      	cmp	r2, r3
 8004518:	db22      	blt.n	8004560 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x154>
				if(timeLabel2_pageCNTR > 0){
 800451a:	f8d5 2510 	ldr.w	r2, [r5, #1296]	; 0x510
 800451e:	2a00      	cmp	r2, #0
 8004520:	dd1e      	ble.n	8004560 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x154>
					timeLabel2_pageCNTR--;
 8004522:	3a01      	subs	r2, #1
					timeLabel2_time = timeLabel2_time - customGraphInterval*4*60;
 8004524:	f504 50ac 	add.w	r0, r4, #5504	; 0x1580
 8004528:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
					timeLabel2_pageCNTR--;
 800452c:	f8c5 2510 	str.w	r2, [r5, #1296]	; 0x510
					timeLabel2_time = timeLabel2_time - customGraphInterval*4*60;
 8004530:	22f0      	movs	r2, #240	; 0xf0
					convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004532:	4606      	mov	r6, r0
					timeLabel2_time = timeLabel2_time - customGraphInterval*4*60;
 8004534:	4353      	muls	r3, r2
					convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004536:	3608      	adds	r6, #8
					timeLabel2_time = timeLabel2_time - customGraphInterval*4*60;
 8004538:	e9d0 2100 	ldrd	r2, r1, [r0]
 800453c:	1ad2      	subs	r2, r2, r3
 800453e:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
    	localtime_r(timestamp, date_time);
 8004542:	4631      	mov	r1, r6
					timeLabel2_time = timeLabel2_time - customGraphInterval*4*60;
 8004544:	e9c0 2300 	strd	r2, r3, [r0]
    	localtime_r(timestamp, date_time);
 8004548:	f019 fd96 	bl	801e078 <localtime_r>
					updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800454c:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004550:	f504 519b 	add.w	r1, r4, #4960	; 0x1360
 8004554:	4633      	mov	r3, r6
 8004556:	321c      	adds	r2, #28
 8004558:	4620      	mov	r0, r4
 800455a:	311c      	adds	r1, #28
 800455c:	f7ff fdfe 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004560:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004564:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel3.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 8004568:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 800456c:	4419      	add	r1, r3
 800456e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004572:	f9b5 2334 	ldrsh.w	r2, [r5, #820]	; 0x334
 8004576:	1a5b      	subs	r3, r3, r1
 8004578:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 800457c:	3210      	adds	r2, #16
 800457e:	4401      	add	r1, r0
 8004580:	fa01 f383 	sxtah	r3, r1, r3
 8004584:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004588:	1a5b      	subs	r3, r3, r1
 800458a:	429a      	cmp	r2, r3
 800458c:	db24      	blt.n	80045d8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x1cc>
				if(timeLabel3_pageCNTR > 0){
 800458e:	f8d5 2514 	ldr.w	r2, [r5, #1300]	; 0x514
 8004592:	2a00      	cmp	r2, #0
 8004594:	dd20      	ble.n	80045d8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x1cc>
					timeLabel3_pageCNTR--;
 8004596:	3a01      	subs	r2, #1
					timeLabel3_time = timeLabel3_time - customGraphInterval*4*60;
 8004598:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 800459c:	f241 56b0 	movw	r6, #5552	; 0x15b0
					timeLabel3_pageCNTR--;
 80045a0:	f8c5 2514 	str.w	r2, [r5, #1300]	; 0x514
					timeLabel3_time = timeLabel3_time - customGraphInterval*4*60;
 80045a4:	22f0      	movs	r2, #240	; 0xf0
 80045a6:	19a0      	adds	r0, r4, r6
 80045a8:	4353      	muls	r3, r2
 80045aa:	59a2      	ldr	r2, [r4, r6]
 80045ac:	6841      	ldr	r1, [r0, #4]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	51a2      	str	r2, [r4, r6]
					convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 80045b2:	f504 56ad 	add.w	r6, r4, #5536	; 0x15a0
					timeLabel3_time = timeLabel3_time - customGraphInterval*4*60;
 80045b6:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
					convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 80045ba:	3618      	adds	r6, #24
					timeLabel3_time = timeLabel3_time - customGraphInterval*4*60;
 80045bc:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 80045be:	4631      	mov	r1, r6
 80045c0:	f019 fd5a 	bl	801e078 <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 80045c4:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 80045c8:	f504 5199 	add.w	r1, r4, #4896	; 0x1320
 80045cc:	4633      	mov	r3, r6
 80045ce:	3208      	adds	r2, #8
 80045d0:	4620      	mov	r0, r4
 80045d2:	3110      	adds	r1, #16
 80045d4:	f7ff fdc2 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 80045d8:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80045dc:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel4.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80045e0:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80045e4:	4419      	add	r1, r3
 80045e6:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80045ea:	f9b5 22e8 	ldrsh.w	r2, [r5, #744]	; 0x2e8
 80045ee:	1a5b      	subs	r3, r3, r1
 80045f0:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80045f4:	3210      	adds	r2, #16
 80045f6:	4401      	add	r1, r0
 80045f8:	fa01 f383 	sxtah	r3, r1, r3
 80045fc:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004600:	1a5b      	subs	r3, r3, r1
 8004602:	429a      	cmp	r2, r3
 8004604:	db25      	blt.n	8004652 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
				if(timeLabel4_pageCNTR > 0){
 8004606:	f8d5 2518 	ldr.w	r2, [r5, #1304]	; 0x518
 800460a:	2a00      	cmp	r2, #0
 800460c:	dd21      	ble.n	8004652 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
					timeLabel4_pageCNTR--;
 800460e:	3a01      	subs	r2, #1
					timeLabel4_time = timeLabel4_time - customGraphInterval*4*60;
 8004610:	f504 50af 	add.w	r0, r4, #5600	; 0x15e0
 8004614:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
					timeLabel4_pageCNTR--;
 8004618:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
					timeLabel4_time = timeLabel4_time - customGraphInterval*4*60;
 800461c:	22f0      	movs	r2, #240	; 0xf0
					convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 800461e:	4606      	mov	r6, r0
					timeLabel4_time = timeLabel4_time - customGraphInterval*4*60;
 8004620:	4353      	muls	r3, r2
					convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 8004622:	3608      	adds	r6, #8
					timeLabel4_time = timeLabel4_time - customGraphInterval*4*60;
 8004624:	e9d0 2100 	ldrd	r2, r1, [r0]
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
    	localtime_r(timestamp, date_time);
 800462e:	4631      	mov	r1, r6
					timeLabel4_time = timeLabel4_time - customGraphInterval*4*60;
 8004630:	e9c0 2300 	strd	r2, r3, [r0]
    	localtime_r(timestamp, date_time);
 8004634:	f019 fd20 	bl	801e078 <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel4Buffer, &timeLabel4_time_tm);
 8004638:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 800463c:	f504 5199 	add.w	r1, r4, #4896	; 0x1320
 8004640:	4633      	mov	r3, r6
 8004642:	3214      	adds	r2, #20
 8004644:	3110      	adds	r1, #16
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff fd88 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 800464c:	e001      	b.n	8004652 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()/* && (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())+scrollCounter<graph1.getUsedCapacity()*/){
 800464e:	f300 80c5 	bgt.w	80047dc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x3d0>
 8004652:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
 8004656:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*4)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800465a:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 800465e:	440e      	add	r6, r1
 8004660:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8004664:	1b89      	subs	r1, r1, r6
 8004666:	f8d5 650c 	ldr.w	r6, [r5, #1292]	; 0x50c
 800466a:	435e      	muls	r6, r3
 800466c:	b209      	sxth	r1, r1
 800466e:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004672:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8004676:	3901      	subs	r1, #1
 8004678:	1a12      	subs	r2, r2, r0
 800467a:	1a18      	subs	r0, r3, r0
 800467c:	f7ff f8c3 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004680:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004684:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
            return Q5(v + q5.v);
 8004688:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*4)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800468c:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 8004690:	440e      	add	r6, r1
 8004692:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*4)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004696:	f8c5 04f8 	str.w	r0, [r5, #1272]	; 0x4f8
 800469a:	1b89      	subs	r1, r1, r6
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*4)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800469c:	f8d5 6510 	ldr.w	r6, [r5, #1296]	; 0x510
 80046a0:	435e      	muls	r6, r3
 80046a2:	b209      	sxth	r1, r1
 80046a4:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 80046a8:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80046ac:	3901      	subs	r1, #1
 80046ae:	1a12      	subs	r2, r2, r0
 80046b0:	ebc0 0043 	rsb	r0, r0, r3, lsl #1
 80046b4:	f7ff f8a7 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 80046b8:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80046bc:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 80046c0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*4)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80046c4:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 80046c8:	440e      	add	r6, r1
 80046ca:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*4)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80046ce:	f8c5 04fc 	str.w	r0, [r5, #1276]	; 0x4fc
 80046d2:	1b89      	subs	r1, r1, r6
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*4)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80046d4:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
 80046d8:	435e      	muls	r6, r3
 80046da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80046de:	b209      	sxth	r1, r1
 80046e0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80046e4:	3901      	subs	r1, #1
 80046e6:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 80046ea:	1a12      	subs	r2, r2, r0
 80046ec:	1a18      	subs	r0, r3, r0
 80046ee:	f7ff f88a 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 80046f2:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80046f6:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 80046fa:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*4)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80046fe:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 8004702:	440e      	add	r6, r1
 8004704:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*4)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004708:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
 800470c:	1b89      	subs	r1, r1, r6
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*4)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800470e:	f8d5 6518 	ldr.w	r6, [r5, #1304]	; 0x518
 8004712:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004716:	fb06 3303 	mla	r3, r6, r3, r3
 800471a:	b209      	sxth	r1, r1
 800471c:	1a12      	subs	r2, r2, r0
 800471e:	3901      	subs	r1, #1
 8004720:	ebc0 0083 	rsb	r0, r0, r3, lsl #2
 8004724:	f7ff f86f 	bl	8003806 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8004728:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 800472c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004730:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
		timeLabel1.setX(graph1.getX() + timeLabel1_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8004734:	f504 50a7 	add.w	r0, r4, #5344	; 0x14e0
 8004738:	3018      	adds	r0, #24
 800473a:	f7ff fcc4 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
        return rect.width;
 800473e:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8004742:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004746:	4413      	add	r3, r2
 8004748:	f8b4 20f0 	ldrh.w	r2, [r4, #240]	; 0xf0
 800474c:	3b16      	subs	r3, #22
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	fa10 f083 	uxtah	r0, r0, r3
 8004754:	b29e      	uxth	r6, r3
        rect.x = x;
 8004756:	f8a5 03cc 	strh.w	r0, [r5, #972]	; 0x3cc
		timeLabel2.setX(graph1.getX() + timeLabel2_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 800475a:	f504 50a7 	add.w	r0, r4, #5344	; 0x14e0
 800475e:	301c      	adds	r0, #28
 8004760:	f7ff fcb1 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004764:	4430      	add	r0, r6
 8004766:	f8a5 0380 	strh.w	r0, [r5, #896]	; 0x380
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 800476a:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 800476e:	f7ff fcaa 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004772:	4430      	add	r0, r6
 8004774:	f8a5 0334 	strh.w	r0, [r5, #820]	; 0x334
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - 22);
 8004778:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 800477c:	3004      	adds	r0, #4
 800477e:	f7ff fca2 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004782:	4430      	add	r0, r6
 8004784:	f8a5 02e8 	strh.w	r0, [r5, #744]	; 0x2e8
	}
 8004788:	b002      	add	sp, #8
 800478a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if(timeLabel1_pageCNTR > 0){
 800478e:	f8d5 250c 	ldr.w	r2, [r5, #1292]	; 0x50c
 8004792:	2a00      	cmp	r2, #0
 8004794:	f77f aeaa 	ble.w	80044ec <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xe0>
					timeLabel1_pageCNTR--;
 8004798:	3a01      	subs	r2, #1
					timeLabel1_time = timeLabel1_time - customGraphInterval*4*60;
 800479a:	f8d5 3614 	ldr.w	r3, [r5, #1556]	; 0x614
 800479e:	f241 5650 	movw	r6, #5456	; 0x1550
					timeLabel1_pageCNTR--;
 80047a2:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
					timeLabel1_time = timeLabel1_time - customGraphInterval*4*60;
 80047a6:	22f0      	movs	r2, #240	; 0xf0
 80047a8:	19a0      	adds	r0, r4, r6
 80047aa:	4353      	muls	r3, r2
 80047ac:	59a2      	ldr	r2, [r4, r6]
 80047ae:	6841      	ldr	r1, [r0, #4]
 80047b0:	1ad2      	subs	r2, r2, r3
 80047b2:	51a2      	str	r2, [r4, r6]
					convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 80047b4:	f504 56aa 	add.w	r6, r4, #5440	; 0x1540
					timeLabel1_time = timeLabel1_time - customGraphInterval*4*60;
 80047b8:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
					convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 80047bc:	3618      	adds	r6, #24
					timeLabel1_time = timeLabel1_time - customGraphInterval*4*60;
 80047be:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 80047c0:	4631      	mov	r1, r6
 80047c2:	f019 fc59 	bl	801e078 <localtime_r>
					updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80047c6:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 80047ca:	f504 519e 	add.w	r1, r4, #5056	; 0x13c0
 80047ce:	4633      	mov	r3, r6
 80047d0:	3210      	adds	r2, #16
 80047d2:	4620      	mov	r0, r4
 80047d4:	3108      	adds	r1, #8
 80047d6:	f7ff fcc1 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 80047da:	e687      	b.n	80044ec <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xe0>
			scrollCounter += (customGraphTimeRange/2);
 80047dc:	f8d5 1610 	ldr.w	r1, [r5, #1552]	; 0x610
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80047e0:	f100 0758 	add.w	r7, r0, #88	; 0x58
			scrollCounter += (customGraphTimeRange/2);
 80047e4:	f8d5 6508 	ldr.w	r6, [r5, #1288]	; 0x508
 80047e8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80047ec:	4638      	mov	r0, r7
			scrollCounter += (customGraphTimeRange/2);
 80047ee:	eb06 0661 	add.w	r6, r6, r1, asr #1
 80047f2:	f8c5 6508 	str.w	r6, [r5, #1288]	; 0x508
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 80047f6:	f7fe fd49 	bl	800328c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 80047fa:	4680      	mov	r8, r0
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7fe fd1e 	bl	800323e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 8004802:	eba8 0000 	sub.w	r0, r8, r0
 8004806:	4631      	mov	r1, r6
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004808:	f04f 0803 	mov.w	r8, #3
			graph1.setGraphRangeX(0 + scrollCounter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + scrollCounter);
 800480c:	1982      	adds	r2, r0, r6
 800480e:	4638      	mov	r0, r7
 8004810:	f7fe fbfd 	bl	800300e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,1);
 8004814:	2201      	movs	r2, #1
 8004816:	4638      	mov	r0, r7
 8004818:	4611      	mov	r1, r2
 800481a:	f009 fbfd 	bl	800e018 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800481e:	4638      	mov	r0, r7
 8004820:	f7fe fd82 	bl	8003328 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004824:	4606      	mov	r6, r0
 8004826:	4638      	mov	r0, r7
 8004828:	f7fe fd57 	bl	80032da <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800482c:	1a33      	subs	r3, r6, r0
        return i * scale;
 800482e:	f8d5 6238 	ldr.w	r6, [r5, #568]	; 0x238
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004832:	4638      	mov	r0, r7
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004834:	fb93 f3f8 	sdiv	r3, r3, r8
 8004838:	4373      	muls	r3, r6
 800483a:	2b00      	cmp	r3, #0
 800483c:	bfb8      	it	lt
 800483e:	425b      	neglt	r3, r3
 8004840:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 8004844:	f7fe fd70 	bl	8003328 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004848:	4606      	mov	r6, r0
 800484a:	4638      	mov	r0, r7
 800484c:	f7fe fd45 	bl	80032da <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004850:	1a36      	subs	r6, r6, r0
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004852:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
        setIntervalScaled(abs(interval) * dataScale);
 8004856:	f8d5 01ac 	ldr.w	r0, [r5, #428]	; 0x1ac
 800485a:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800485e:	f9b5 23cc 	ldrsh.w	r2, [r5, #972]	; 0x3cc
 8004862:	440b      	add	r3, r1
 8004864:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004868:	320f      	adds	r2, #15
 800486a:	1a5b      	subs	r3, r3, r1
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/3);
 800486c:	fb96 f6f8 	sdiv	r6, r6, r8
 8004870:	4346      	muls	r6, r0
 8004872:	2e00      	cmp	r6, #0
 8004874:	bfb8      	it	lt
 8004876:	4276      	neglt	r6, r6
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004878:	429a      	cmp	r2, r3
        gridInterval = abs(interval);
 800487a:	f8c5 61b0 	str.w	r6, [r5, #432]	; 0x1b0
 800487e:	da22      	bge.n	80048c6 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x4ba>
				timeLabel1_pageCNTR++;
 8004880:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
				timeLabel1_time = timeLabel1_time + customGraphInterval*4*60;
 8004884:	f241 5650 	movw	r6, #5456	; 0x1550
 8004888:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
				timeLabel1_pageCNTR++;
 800488c:	3301      	adds	r3, #1
				timeLabel1_time = timeLabel1_time + customGraphInterval*4*60;
 800488e:	19a0      	adds	r0, r4, r6
				timeLabel1_pageCNTR++;
 8004890:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
				timeLabel1_time = timeLabel1_time + customGraphInterval*4*60;
 8004894:	23f0      	movs	r3, #240	; 0xf0
 8004896:	6841      	ldr	r1, [r0, #4]
 8004898:	435a      	muls	r2, r3
 800489a:	59a3      	ldr	r3, [r4, r6]
 800489c:	189b      	adds	r3, r3, r2
 800489e:	51a3      	str	r3, [r4, r6]
				convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 80048a0:	f504 56aa 	add.w	r6, r4, #5440	; 0x1540
				timeLabel1_time = timeLabel1_time + customGraphInterval*4*60;
 80048a4:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
				convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 80048a8:	3618      	adds	r6, #24
				timeLabel1_time = timeLabel1_time + customGraphInterval*4*60;
 80048aa:	6042      	str	r2, [r0, #4]
    	localtime_r(timestamp, date_time);
 80048ac:	4631      	mov	r1, r6
 80048ae:	f019 fbe3 	bl	801e078 <localtime_r>
				updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80048b2:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 80048b6:	f504 519e 	add.w	r1, r4, #5056	; 0x13c0
 80048ba:	4633      	mov	r3, r6
 80048bc:	3210      	adds	r2, #16
 80048be:	4620      	mov	r0, r4
 80048c0:	3108      	adds	r1, #8
 80048c2:	f7ff fc4b 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel2.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 80048c6:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 80048ca:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80048ce:	f9b5 2380 	ldrsh.w	r2, [r5, #896]	; 0x380
 80048d2:	440b      	add	r3, r1
 80048d4:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80048d8:	320f      	adds	r2, #15
 80048da:	1a5b      	subs	r3, r3, r1
 80048dc:	429a      	cmp	r2, r3
 80048de:	da20      	bge.n	8004922 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x516>
				timeLabel2_pageCNTR++;
 80048e0:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
				timeLabel2_time = timeLabel2_time + customGraphInterval*4*60;
 80048e4:	f504 50ac 	add.w	r0, r4, #5504	; 0x1580
 80048e8:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
				timeLabel2_pageCNTR++;
 80048ec:	3301      	adds	r3, #1
				convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 80048ee:	4606      	mov	r6, r0
				timeLabel2_pageCNTR++;
 80048f0:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
				timeLabel2_time = timeLabel2_time + customGraphInterval*4*60;
 80048f4:	23f0      	movs	r3, #240	; 0xf0
				convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 80048f6:	3608      	adds	r6, #8
				timeLabel2_time = timeLabel2_time + customGraphInterval*4*60;
 80048f8:	435a      	muls	r2, r3
 80048fa:	e9d0 3100 	ldrd	r3, r1, [r0]
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    	localtime_r(timestamp, date_time);
 8004904:	4631      	mov	r1, r6
				timeLabel2_time = timeLabel2_time + customGraphInterval*4*60;
 8004906:	e9c0 3200 	strd	r3, r2, [r0]
    	localtime_r(timestamp, date_time);
 800490a:	f019 fbb5 	bl	801e078 <localtime_r>
				updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800490e:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004912:	f504 519b 	add.w	r1, r4, #4960	; 0x1360
 8004916:	4633      	mov	r3, r6
 8004918:	321c      	adds	r2, #28
 800491a:	4620      	mov	r0, r4
 800491c:	311c      	adds	r1, #28
 800491e:	f7ff fc1d 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel3.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004922:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004926:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800492a:	f9b5 2334 	ldrsh.w	r2, [r5, #820]	; 0x334
 800492e:	440b      	add	r3, r1
 8004930:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004934:	320f      	adds	r2, #15
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	429a      	cmp	r2, r3
 800493a:	da22      	bge.n	8004982 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x576>
				timeLabel3_pageCNTR++;
 800493c:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
				timeLabel3_time = timeLabel3_time + customGraphInterval*4*60;
 8004940:	f241 56b0 	movw	r6, #5552	; 0x15b0
 8004944:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
				timeLabel3_pageCNTR++;
 8004948:	3301      	adds	r3, #1
				timeLabel3_time = timeLabel3_time + customGraphInterval*4*60;
 800494a:	19a0      	adds	r0, r4, r6
				timeLabel3_pageCNTR++;
 800494c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
				timeLabel3_time = timeLabel3_time + customGraphInterval*4*60;
 8004950:	23f0      	movs	r3, #240	; 0xf0
 8004952:	6841      	ldr	r1, [r0, #4]
 8004954:	435a      	muls	r2, r3
 8004956:	59a3      	ldr	r3, [r4, r6]
 8004958:	189b      	adds	r3, r3, r2
 800495a:	51a3      	str	r3, [r4, r6]
				convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 800495c:	f504 56ad 	add.w	r6, r4, #5536	; 0x15a0
				timeLabel3_time = timeLabel3_time + customGraphInterval*4*60;
 8004960:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
				convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 8004964:	3618      	adds	r6, #24
				timeLabel3_time = timeLabel3_time + customGraphInterval*4*60;
 8004966:	6042      	str	r2, [r0, #4]
    	localtime_r(timestamp, date_time);
 8004968:	4631      	mov	r1, r6
 800496a:	f019 fb85 	bl	801e078 <localtime_r>
				updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 800496e:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004972:	f504 5199 	add.w	r1, r4, #4896	; 0x1320
 8004976:	4633      	mov	r3, r6
 8004978:	3208      	adds	r2, #8
 800497a:	4620      	mov	r0, r4
 800497c:	3110      	adds	r1, #16
 800497e:	f7ff fbed 	bl	800415c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel4.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004982:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004986:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800498a:	f9b5 22e8 	ldrsh.w	r2, [r5, #744]	; 0x2e8
 800498e:	440b      	add	r3, r1
 8004990:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004994:	320f      	adds	r2, #15
 8004996:	1a5b      	subs	r3, r3, r1
 8004998:	429a      	cmp	r2, r3
 800499a:	f6bf ae5a 	bge.w	8004652 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
				timeLabel4_pageCNTR++;
 800499e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
				timeLabel4_time = timeLabel4_time + customGraphInterval*4*60;
 80049a2:	f504 50af 	add.w	r0, r4, #5600	; 0x15e0
 80049a6:	f8d5 2614 	ldr.w	r2, [r5, #1556]	; 0x614
				timeLabel4_pageCNTR++;
 80049aa:	3301      	adds	r3, #1
				convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 80049ac:	4606      	mov	r6, r0
				timeLabel4_pageCNTR++;
 80049ae:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
				timeLabel4_time = timeLabel4_time + customGraphInterval*4*60;
 80049b2:	23f0      	movs	r3, #240	; 0xf0
				convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 80049b4:	3608      	adds	r6, #8
				timeLabel4_time = timeLabel4_time + customGraphInterval*4*60;
 80049b6:	435a      	muls	r2, r3
 80049b8:	e9d0 3100 	ldrd	r3, r1, [r0]
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    	localtime_r(timestamp, date_time);
 80049c2:	4631      	mov	r1, r6
				timeLabel4_time = timeLabel4_time + customGraphInterval*4*60;
 80049c4:	e9c0 3200 	strd	r3, r2, [r0]
    	localtime_r(timestamp, date_time);
 80049c8:	f019 fb56 	bl	801e078 <localtime_r>
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 80049cc:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 80049d0:	f504 5197 	add.w	r1, r4, #4832	; 0x12e0
 80049d4:	4633      	mov	r3, r6
 80049d6:	3214      	adds	r2, #20
 80049d8:	3104      	adds	r1, #4
 80049da:	e634      	b.n	8004646 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x23a>

080049dc <_ZN11customGraph8addPointExf>:
{
 80049dc:	b530      	push	{r4, r5, lr}
	if(firstDataTaken == 0)
 80049de:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
{
 80049e2:	4604      	mov	r4, r0
 80049e4:	ed2d 8b02 	vpush	{d8}
 80049e8:	b08d      	sub	sp, #52	; 0x34
	if(firstDataTaken == 0)
 80049ea:	f895 154c 	ldrb.w	r1, [r5, #1356]	; 0x54c
{
 80049ee:	eeb0 8a40 	vmov.f32	s16, s0
 80049f2:	e9cd 2300 	strd	r2, r3, [sp]
	if(firstDataTaken == 0)
 80049f6:	2900      	cmp	r1, #0
 80049f8:	d14e      	bne.n	8004a98 <_ZN11customGraph8addPointExf+0xbc>
		firstDataTime = x;
 80049fa:	f500 50a9 	add.w	r0, r0, #5408	; 0x1520
		firstDataTaken = 1;
 80049fe:	2101      	movs	r1, #1
 8004a00:	f885 154c 	strb.w	r1, [r5, #1356]	; 0x54c
    	localtime_r(timestamp, date_time);
 8004a04:	4601      	mov	r1, r0
		firstDataTime = x;
 8004a06:	e9c0 2300 	strd	r2, r3, [r0]
 8004a0a:	3108      	adds	r1, #8
 8004a0c:	f019 fb34 	bl	801e078 <localtime_r>
        const float fs = f * (float)scale;
 8004a10:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 8004a14:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004b70 <_ZN11customGraph8addPointExf+0x194>
		customGraphBase::graph1.addDataPoint(float(0.0), y);
 8004a18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a20:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2c:	db20      	blt.n	8004a70 <_ZN11customGraph8addPointExf+0x94>
            return (int)(fs + 0.5f);
 8004a2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3a:	ee17 1a90 	vmov	r1, s15
        const float fs = f * (float)scale;
 8004a3e:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
 8004a42:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004a46:	ee20 0a08 	vmul.f32	s0, s0, s16
        if (fs >= 0)
 8004a4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a52:	db78      	blt.n	8004b46 <_ZN11customGraph8addPointExf+0x16a>
            return (int)(fs + 0.5f);
 8004a54:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a58:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004a5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004a60:	ee17 2a90 	vmov	r2, s15
        return addValue(float2scaledX(x), float2scaledY(y));
 8004a64:	f009 fe54 	bl	800e710 <_ZN8touchgfx9GraphData8addValueEii>
}
 8004a68:	b00d      	add	sp, #52	; 0x34
 8004a6a:	ecbd 8b02 	vpop	{d8}
 8004a6e:	bd30      	pop	{r4, r5, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004a70:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004a74:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004a78:	ee17 3a10 	vmov	r3, s14
 8004a7c:	1e59      	subs	r1, r3, #1
 8004a7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a82:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a8e:	ee17 3a90 	vmov	r3, s15
 8004a92:	440b      	add	r3, r1
 8004a94:	4619      	mov	r1, r3
 8004a96:	e7d2      	b.n	8004a3e <_ZN11customGraph8addPointExf+0x62>
 8004a98:	a903      	add	r1, sp, #12
 8004a9a:	4668      	mov	r0, sp
 8004a9c:	f019 faec 	bl	801e078 <localtime_r>
		if(x_tm.tm_year == firstDataTime_tm.tm_year && x_tm.tm_mon == firstDataTime_tm.tm_mon && (x_tm.tm_mday - firstDataTime_tm.tm_mday) < 2)
 8004aa0:	f8d5 353c 	ldr.w	r3, [r5, #1340]	; 0x53c
 8004aa4:	9a08      	ldr	r2, [sp, #32]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d1de      	bne.n	8004a68 <_ZN11customGraph8addPointExf+0x8c>
 8004aaa:	f8d5 3538 	ldr.w	r3, [r5, #1336]	; 0x538
 8004aae:	9a07      	ldr	r2, [sp, #28]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1d9      	bne.n	8004a68 <_ZN11customGraph8addPointExf+0x8c>
 8004ab4:	f8d5 2534 	ldr.w	r2, [r5, #1332]	; 0x534
 8004ab8:	9b06      	ldr	r3, [sp, #24]
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	dcd3      	bgt.n	8004a68 <_ZN11customGraph8addPointExf+0x8c>
			x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 8004ac0:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
			customGraphBase::graph1.addDataPoint(float(x_axisVal), y);
 8004ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
			x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 8004ac8:	9a05      	ldr	r2, [sp, #20]
        const float fs = f * (float)scale;
 8004aca:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8004ace:	1a52      	subs	r2, r2, r1
 8004ad0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8004ad4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ad8:	434b      	muls	r3, r1
 8004ada:	213c      	movs	r1, #60	; 0x3c
 8004adc:	fb01 3302 	mla	r3, r1, r2, r3
 8004ae0:	f8d5 152c 	ldr.w	r1, [r5, #1324]	; 0x52c
 8004ae4:	9a04      	ldr	r2, [sp, #16]
 8004ae6:	1a52      	subs	r2, r2, r1
 8004ae8:	4413      	add	r3, r2
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	db0e      	blt.n	8004b1e <_ZN11customGraph8addPointExf+0x142>
            return (int)(fs + 0.5f);
 8004b00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b0c:	ee17 1a90 	vmov	r1, s15
        const float fs = f * (float)scale;
 8004b10:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8004b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b18:	ee27 0a88 	vmul.f32	s0, s15, s16
 8004b1c:	e795      	b.n	8004a4a <_ZN11customGraph8addPointExf+0x6e>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8004b1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004b22:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004b26:	ee17 3a10 	vmov	r3, s14
 8004b2a:	1e59      	subs	r1, r3, #1
 8004b2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004b30:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b3c:	ee17 3a90 	vmov	r3, s15
 8004b40:	440b      	add	r3, r1
 8004b42:	4619      	mov	r1, r3
 8004b44:	e7e4      	b.n	8004b10 <_ZN11customGraph8addPointExf+0x134>
 8004b46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b4e:	ee17 3a90 	vmov	r3, s15
 8004b52:	1e5a      	subs	r2, r3, #1
 8004b54:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004b58:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004b5c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004b60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004b64:	ee10 3a10 	vmov	r3, s0
 8004b68:	4413      	add	r3, r2
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	e77a      	b.n	8004a64 <_ZN11customGraph8addPointExf+0x88>
 8004b6e:	bf00      	nop
	...

08004b78 <_ZN11customGraph10initializeEv>:
{
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4604      	mov	r4, r0
    customGraphBase::initialize();
 8004b7c:	f7fe fcf0 	bl	8003560 <_ZN15customGraphBase10initializeEv>
    firstDataTime = 1681492804;			// 1681492804 --> 14 April 2023 17:20			//firstDataTime = time(NULL);
 8004b80:	f504 55a9 	add.w	r5, r4, #5408	; 0x1520
 8004b84:	a31e      	add	r3, pc, #120	; (adr r3, 8004c00 <_ZN11customGraph10initializeEv+0x88>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	3108      	adds	r1, #8
 8004b90:	e9c5 2300 	strd	r2, r3, [r5]
 8004b94:	f019 fa70 	bl	801e078 <localtime_r>
    addPoint(firstDataTime, float(1.0));
 8004b98:	4620      	mov	r0, r4
 8004b9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004b9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ba2:	f7ff ff1b 	bl	80049dc <_ZN11customGraph8addPointExf>
	addPoint(firstDataTime + 1200, float(1.3));
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8004bf8 <_ZN11customGraph10initializeEv+0x80>
 8004bac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bb0:	f512 6296 	adds.w	r2, r2, #1200	; 0x4b0
 8004bb4:	f143 0300 	adc.w	r3, r3, #0
 8004bb8:	f7ff ff10 	bl	80049dc <_ZN11customGraph8addPointExf>
	addPoint(firstDataTime + 1200, float(1.8));
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8004bfc <_ZN11customGraph10initializeEv+0x84>
 8004bc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bc6:	f512 6296 	adds.w	r2, r2, #1200	; 0x4b0
 8004bca:	f143 0300 	adc.w	r3, r3, #0
 8004bce:	f7ff ff05 	bl	80049dc <_ZN11customGraph8addPointExf>
	addPoint(firstDataTime + 2400, float(2.0));
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004bd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bdc:	f512 6216 	adds.w	r2, r2, #2400	; 0x960
 8004be0:	f143 0300 	adc.w	r3, r3, #0
 8004be4:	f7ff fefa 	bl	80049dc <_ZN11customGraph8addPointExf>
	if(hours == 1 || hours ==8 || hours == 24)
 8004be8:	4620      	mov	r0, r4
 8004bea:	2118      	movs	r1, #24
}
 8004bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf0:	f7ff bafc 	b.w	80041ec <_ZN11customGraph12setTimeRangeEi.part.0>
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	3fa66666 	.word	0x3fa66666
 8004bfc:	3fe66666 	.word	0x3fe66666
 8004c00:	64398b44 	.word	0x64398b44
 8004c04:	00000000 	.word	0x00000000

08004c08 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004c08:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004c0a:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 8004c0e:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004c10:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004c12:	2302      	movs	r3, #2
 8004c14:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004c16:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004c1a:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004c1e:	4770      	bx	lr

08004c20 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004c20:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004c24:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004c26:	bf04      	itt	eq
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 8004c2e:	2000      	movs	r0, #0
 8004c30:	4770      	bx	lr

08004c32 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004c32:	2000      	movs	r0, #0
 8004c34:	4770      	bx	lr

08004c36 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004c36:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c38:	6904      	ldr	r4, [r0, #16]
 8004c3a:	8900      	ldrh	r0, [r0, #8]
 8004c3c:	46a4      	mov	ip, r4
}
 8004c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c42:	4760      	bx	ip

08004c44 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004c44:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c46:	68c4      	ldr	r4, [r0, #12]
 8004c48:	8900      	ldrh	r0, [r0, #8]
 8004c4a:	46a4      	mov	ip, r4
}
 8004c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c50:	4760      	bx	ip

08004c52 <FT6X06_GestureConfig>:
{
 8004c52:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004c56:	f100 0818 	add.w	r8, r0, #24
{
 8004c5a:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004c5c:	7809      	ldrb	r1, [r1, #0]
 8004c5e:	4640      	mov	r0, r8
 8004c60:	f000 f918 	bl	8004e94 <ft6x06_radian_value>
 8004c64:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004c66:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f000 f91e 	bl	8004eac <ft6x06_offset_left_right>
 8004c70:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004c72:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004c76:	4640      	mov	r0, r8
 8004c78:	f000 f924 	bl	8004ec4 <ft6x06_offset_up_down>
 8004c7c:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004c7e:	f899 100c 	ldrb.w	r1, [r9, #12]
 8004c82:	4640      	mov	r0, r8
 8004c84:	f000 f92a 	bl	8004edc <ft6x06_disatnce_left_right>
 8004c88:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004c8a:	f899 1010 	ldrb.w	r1, [r9, #16]
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f000 f930 	bl	8004ef4 <ft6x06_distance_up_down>
 8004c94:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004c96:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f000 f936 	bl	8004f0c <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004ca0:	42c5      	cmn	r5, r0
}
 8004ca2:	bf14      	ite	ne
 8004ca4:	f04f 30ff 	movne.w	r0, #4294967295
 8004ca8:	2000      	moveq	r0, #0
 8004caa:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08004cae <FT6X06_ReadID>:
{
 8004cae:	b513      	push	{r0, r1, r4, lr}
 8004cb0:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004cb2:	3018      	adds	r0, #24
 8004cb4:	f10d 0107 	add.w	r1, sp, #7
 8004cb8:	f000 f940 	bl	8004f3c <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8004cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cc0:	6023      	str	r3, [r4, #0]
}
 8004cc2:	b002      	add	sp, #8
 8004cc4:	bd10      	pop	{r4, pc}

08004cc6 <FT6X06_GetState>:
{
 8004cc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004cc8:	f100 0518 	add.w	r5, r0, #24
{
 8004ccc:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004cce:	a901      	add	r1, sp, #4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f000 f8d2 	bl	8004e7a <ft6x06_td_status>
 8004cd6:	bb08      	cbnz	r0, 8004d1c <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004cd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	bf98      	it	ls
 8004ce0:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004ce2:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004ce4:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	4628      	mov	r0, r5
 8004cea:	eb0d 0203 	add.w	r2, sp, r3
 8004cee:	f000 f8b1 	bl	8004e54 <ft6x06_read_reg>
 8004cf2:	b9b0      	cbnz	r0, 8004d22 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004cf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cf8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004cfc:	021b      	lsls	r3, r3, #8
 8004cfe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d02:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004d04:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004d08:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004d0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60a3      	str	r3, [r4, #8]
}
 8004d18:	b003      	add	sp, #12
 8004d1a:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d20:	e7df      	b.n	8004ce2 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004d22:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004d26:	e7f7      	b.n	8004d18 <FT6X06_GetState+0x52>

08004d28 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004d28:	3018      	adds	r0, #24
 8004d2a:	f000 b8a1 	b.w	8004e70 <ft6x06_gest_id>

08004d2e <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004d2e:	2101      	movs	r1, #1
 8004d30:	3018      	adds	r0, #24
 8004d32:	f000 b8f7 	b.w	8004f24 <ft6x06_g_mode>

08004d36 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004d36:	2100      	movs	r1, #0
 8004d38:	3018      	adds	r0, #24
 8004d3a:	f000 b8f3 	b.w	8004f24 <ft6x06_g_mode>

08004d3e <FT6X06_Init>:
{
 8004d3e:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004d40:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8004d44:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004d46:	b96b      	cbnz	r3, 8004d64 <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004d48:	6803      	ldr	r3, [r0, #0]
 8004d4a:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7ff fff2 	bl	8004d36 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004d52:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004d54:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004d58:	bf18      	it	ne
 8004d5a:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004d5c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 8004d60:	4240      	negs	r0, r0
}
 8004d62:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8004d64:	2000      	movs	r0, #0
  return ret;
 8004d66:	e7fc      	b.n	8004d62 <FT6X06_Init+0x24>

08004d68 <FT6X06_ClearIT>:
 8004d68:	2000      	movs	r0, #0
 8004d6a:	4770      	bx	lr

08004d6c <FT6X06_GetMultiTouchState>:
{
 8004d6c:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004d6e:	f100 0518 	add.w	r5, r0, #24
{
 8004d72:	b085      	sub	sp, #20
 8004d74:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004d76:	4628      	mov	r0, r5
 8004d78:	a901      	add	r1, sp, #4
 8004d7a:	f000 f87e 	bl	8004e7a <ft6x06_td_status>
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	d145      	bne.n	8004e0e <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004d82:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	bf98      	it	ls
 8004d8a:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004d8c:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004d8e:	230c      	movs	r3, #12
 8004d90:	aa01      	add	r2, sp, #4
 8004d92:	2103      	movs	r1, #3
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f85d 	bl	8004e54 <ft6x06_read_reg>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d13a      	bne.n	8004e14 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004d9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004da2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004da6:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004da8:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004daa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004dae:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004db0:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004db2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004db6:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004dba:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004dbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004dc0:	021b      	lsls	r3, r3, #8
 8004dc2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004dc6:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004dc8:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004dcc:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004dce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004dd2:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004dd4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004ddc:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004dde:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004de4:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004de6:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004de8:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004dec:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004dee:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004dfc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004e00:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004e02:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8004e0a:	b005      	add	sp, #20
 8004e0c:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e12:	e7bb      	b.n	8004d8c <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004e18:	e7f7      	b.n	8004e0a <FT6X06_GetMultiTouchState+0x9e>
	...

08004e1c <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004e1c:	b190      	cbz	r0, 8004e44 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004e1e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004e20:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004e22:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004e24:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004e26:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004e28:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004e2a:	68ca      	ldr	r2, [r1, #12]
 8004e2c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004e2e:	690a      	ldr	r2, [r1, #16]
 8004e30:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e32:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004e34:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e36:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <FT6X06_RegisterBusIO+0x30>)
 8004e3a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <FT6X06_RegisterBusIO+0x34>)
 8004e3e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004e40:	b103      	cbz	r3, 8004e44 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004e42:	4718      	bx	r3
}
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	08004c37 	.word	0x08004c37
 8004e50:	08004c45 	.word	0x08004c45

08004e54 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004e54:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004e56:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004e5a:	46a4      	mov	ip, r4
}
 8004e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004e60:	4760      	bx	ip

08004e62 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004e62:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004e64:	6804      	ldr	r4, [r0, #0]
 8004e66:	6880      	ldr	r0, [r0, #8]
 8004e68:	46a4      	mov	ip, r4
}
 8004e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004e6e:	4760      	bx	ip

08004e70 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004e70:	2301      	movs	r3, #1
{
 8004e72:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7ff bfed 	b.w	8004e54 <ft6x06_read_reg>

08004e7a <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004e7a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004e7c:	460a      	mov	r2, r1
{
 8004e7e:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004e80:	2301      	movs	r3, #1
 8004e82:	2102      	movs	r1, #2
 8004e84:	f7ff ffe6 	bl	8004e54 <ft6x06_read_reg>
  
  if(ret == 0)
 8004e88:	b918      	cbnz	r0, 8004e92 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004e8a:	7823      	ldrb	r3, [r4, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004e92:	bd10      	pop	{r4, pc}

08004e94 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004e94:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004e96:	2301      	movs	r3, #1
{
 8004e98:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004e9c:	f10d 0207 	add.w	r2, sp, #7
 8004ea0:	2191      	movs	r1, #145	; 0x91
 8004ea2:	f7ff ffde 	bl	8004e62 <ft6x06_write_reg>
}
 8004ea6:	b003      	add	sp, #12
 8004ea8:	f85d fb04 	ldr.w	pc, [sp], #4

08004eac <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004eac:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004eae:	2301      	movs	r3, #1
{
 8004eb0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004eb4:	f10d 0207 	add.w	r2, sp, #7
 8004eb8:	2192      	movs	r1, #146	; 0x92
 8004eba:	f7ff ffd2 	bl	8004e62 <ft6x06_write_reg>
}
 8004ebe:	b003      	add	sp, #12
 8004ec0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ec4 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ec4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004ec6:	2301      	movs	r3, #1
{
 8004ec8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004ecc:	f10d 0207 	add.w	r2, sp, #7
 8004ed0:	2193      	movs	r1, #147	; 0x93
 8004ed2:	f7ff ffc6 	bl	8004e62 <ft6x06_write_reg>
}
 8004ed6:	b003      	add	sp, #12
 8004ed8:	f85d fb04 	ldr.w	pc, [sp], #4

08004edc <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004edc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004ede:	2301      	movs	r3, #1
{
 8004ee0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004ee4:	f10d 0207 	add.w	r2, sp, #7
 8004ee8:	2194      	movs	r1, #148	; 0x94
 8004eea:	f7ff ffba 	bl	8004e62 <ft6x06_write_reg>
}
 8004eee:	b003      	add	sp, #12
 8004ef0:	f85d fb04 	ldr.w	pc, [sp], #4

08004ef4 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004ef4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004ef6:	2301      	movs	r3, #1
{
 8004ef8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004efc:	f10d 0207 	add.w	r2, sp, #7
 8004f00:	2195      	movs	r1, #149	; 0x95
 8004f02:	f7ff ffae 	bl	8004e62 <ft6x06_write_reg>
}
 8004f06:	b003      	add	sp, #12
 8004f08:	f85d fb04 	ldr.w	pc, [sp], #4

08004f0c <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004f0c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004f0e:	2301      	movs	r3, #1
{
 8004f10:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004f14:	f10d 0207 	add.w	r2, sp, #7
 8004f18:	2196      	movs	r1, #150	; 0x96
 8004f1a:	f7ff ffa2 	bl	8004e62 <ft6x06_write_reg>
}
 8004f1e:	b003      	add	sp, #12
 8004f20:	f85d fb04 	ldr.w	pc, [sp], #4

08004f24 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004f24:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004f26:	2301      	movs	r3, #1
{
 8004f28:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004f2c:	f10d 0207 	add.w	r2, sp, #7
 8004f30:	21a4      	movs	r1, #164	; 0xa4
 8004f32:	f7ff ff96 	bl	8004e62 <ft6x06_write_reg>
}
 8004f36:	b003      	add	sp, #12
 8004f38:	f85d fb04 	ldr.w	pc, [sp], #4

08004f3c <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004f3c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004f3e:	2301      	movs	r3, #1
 8004f40:	21a8      	movs	r1, #168	; 0xa8
 8004f42:	f7ff bf87 	b.w	8004e54 <ft6x06_read_reg>
	...

08004f48 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004f48:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004f4e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004f52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004f54:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004f56:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004f58:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004f5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f5e:	f005 f961 	bl	800a224 <HAL_SDRAM_SendCommand>
 8004f62:	3800      	subs	r0, #0
 8004f64:	bf18      	it	ne
 8004f66:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004f68:	4240      	negs	r0, r0
 8004f6a:	bd08      	pop	{r3, pc}
 8004f6c:	24005b38 	.word	0x24005b38

08004f70 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004f70:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004f72:	2202      	movs	r2, #2
 8004f74:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004f76:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f86:	4619      	mov	r1, r3
 8004f88:	f005 f94c 	bl	800a224 <HAL_SDRAM_SendCommand>
 8004f8c:	3800      	subs	r0, #0
 8004f8e:	bf18      	it	ne
 8004f90:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004f92:	4240      	negs	r0, r0
 8004f94:	bd08      	pop	{r3, pc}
 8004f96:	bf00      	nop
 8004f98:	24005b38 	.word	0x24005b38

08004f9c <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004f9c:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8004fa0:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004fa2:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8004fa4:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004fa6:	4c0b      	ldr	r4, [pc, #44]	; (8004fd4 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8004fa8:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8004faa:	698a      	ldr	r2, [r1, #24]
 8004fac:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004fae:	69ca      	ldr	r2, [r1, #28]
 8004fb0:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004fb6:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004fb8:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8004fba:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8004fbc:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8004fbe:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fc6:	f005 f92d 	bl	800a224 <HAL_SDRAM_SendCommand>
 8004fca:	3800      	subs	r0, #0
 8004fcc:	bf18      	it	ne
 8004fce:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004fd0:	4240      	negs	r0, r0
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	24005b38 	.word	0x24005b38

08004fd8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004fd8:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004fdc:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004fe0:	2108      	movs	r1, #8
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fec:	4619      	mov	r1, r3
 8004fee:	f005 f919 	bl	800a224 <HAL_SDRAM_SendCommand>
 8004ff2:	3800      	subs	r0, #0
 8004ff4:	bf18      	it	ne
 8004ff6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004ff8:	4240      	negs	r0, r0
 8004ffa:	bd08      	pop	{r3, pc}
 8004ffc:	24005b38 	.word	0x24005b38

08005000 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005000:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005002:	f005 f92e 	bl	800a262 <HAL_SDRAM_ProgramRefreshRate>
 8005006:	3800      	subs	r0, #0
 8005008:	bf18      	it	ne
 800500a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800500c:	4240      	negs	r0, r0
 800500e:	bd08      	pop	{r3, pc}

08005010 <IS42S32800J_Init>:
{
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005014:	6809      	ldr	r1, [r1, #0]
{
 8005016:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005018:	f7ff ff96 	bl	8004f48 <IS42S32800J_ClockEnable>
 800501c:	b110      	cbz	r0, 8005024 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800501e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005022:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005024:	f001 fc98 	bl	8006958 <HAL_GetTick>
 8005028:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800502a:	f001 fc95 	bl	8006958 <HAL_GetTick>
 800502e:	4286      	cmp	r6, r0
 8005030:	d0fb      	beq.n	800502a <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005032:	6821      	ldr	r1, [r4, #0]
 8005034:	4628      	mov	r0, r5
 8005036:	f7ff ff9b 	bl	8004f70 <IS42S32800J_Precharge>
 800503a:	2800      	cmp	r0, #0
 800503c:	d1ef      	bne.n	800501e <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800503e:	4628      	mov	r0, r5
 8005040:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005044:	f7ff ffc8 	bl	8004fd8 <IS42S32800J_RefreshMode>
 8005048:	2800      	cmp	r0, #0
 800504a:	d1e8      	bne.n	800501e <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f7ff ffa4 	bl	8004f9c <IS42S32800J_ModeRegConfig>
 8005054:	2800      	cmp	r0, #0
 8005056:	d1e2      	bne.n	800501e <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8005058:	68a1      	ldr	r1, [r4, #8]
 800505a:	4628      	mov	r0, r5
 800505c:	f7ff ffd0 	bl	8005000 <IS42S32800J_RefreshRate>
 8005060:	3800      	subs	r0, #0
 8005062:	bf18      	it	ne
 8005064:	2001      	movne	r0, #1
 8005066:	4240      	negs	r0, r0
  return ret;
 8005068:	e7db      	b.n	8005022 <IS42S32800J_Init+0x12>

0800506a <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800506a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800506e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005072:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005076:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800507a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800507e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005082:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005086:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005088:	2000      	movs	r0, #0
 800508a:	4770      	bx	lr

0800508c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800508c:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800508e:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 8005092:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005094:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005098:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800509a:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800509c:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 800509e:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80050a0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80050a2:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80050a4:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050a6:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80050a8:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80050aa:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80050ac:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80050ae:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050b0:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80050b2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80050b6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80050ba:	2310      	movs	r3, #16
 80050bc:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80050be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050c2:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80050c4:	f240 1301 	movw	r3, #257	; 0x101
 80050c8:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80050ce:	f003 fc88 	bl	80089e2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80050d2:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 80050d4:	bf14      	ite	ne
 80050d6:	f06f 0004 	mvnne.w	r0, #4
 80050da:	2000      	moveq	r0, #0
 80050dc:	b015      	add	sp, #84	; 0x54
 80050de:	f85d fb04 	ldr.w	pc, [sp], #4

080050e2 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050e2:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80050e8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050ea:	bf08      	it	eq
 80050ec:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80050f0:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050f2:	bf18      	it	ne
 80050f4:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80050f8:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050fa:	a906      	add	r1, sp, #24
{
 80050fc:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050fe:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005100:	2306      	movs	r3, #6
 8005102:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005104:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005106:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800510a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800510c:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800510e:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005110:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005114:	f003 fb6a 	bl	80087ec <HAL_QSPI_Command>
 8005118:	bb20      	cbnz	r0, 8005164 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800511a:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800511e:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005120:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005126:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005128:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800512a:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800512e:	f04f 0310 	mov.w	r3, #16
 8005132:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005136:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800513a:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800513c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005140:	bf0c      	ite	eq
 8005142:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 8005146:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800514a:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800514c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800514e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005152:	f003 fc46 	bl	80089e2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8005156:	2800      	cmp	r0, #0
 8005158:	bf0c      	ite	eq
 800515a:	2000      	moveq	r0, #0
 800515c:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 8005160:	b015      	add	sp, #84	; 0x54
 8005162:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005164:	f06f 0001 	mvn.w	r0, #1
 8005168:	e7fa      	b.n	8005160 <MT25TL01G_WriteEnable+0x7e>

0800516a <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800516a:	2903      	cmp	r1, #3
{
 800516c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800516e:	bf08      	it	eq
 8005170:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8005174:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005176:	bf18      	it	ne
 8005178:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005180:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005182:	23b7      	movs	r3, #183	; 0xb7
 8005184:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005186:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005188:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800518c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800518e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005190:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005192:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8005196:	f7ff ffa4 	bl	80050e2 <MT25TL01G_WriteEnable>
 800519a:	b958      	cbnz	r0, 80051b4 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800519c:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a0:	4669      	mov	r1, sp
 80051a2:	4620      	mov	r0, r4
 80051a4:	f003 fb22 	bl	80087ec <HAL_QSPI_Command>
 80051a8:	b920      	cbnz	r0, 80051b4 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80051aa:	4629      	mov	r1, r5
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ff6d 	bl	800508c <MT25TL01G_AutoPollingMemReady>
 80051b2:	b108      	cbz	r0, 80051b8 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 80051b4:	f06f 0001 	mvn.w	r0, #1
}
 80051b8:	b00f      	add	sp, #60	; 0x3c
 80051ba:	bd30      	pop	{r4, r5, pc}

080051bc <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80051bc:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051be:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80051c2:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051c4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051c8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80051ca:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051cc:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80051ce:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80051d0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80051d2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80051d8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80051da:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80051dc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051e0:	f003 fb04 	bl	80087ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80051e4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80051e6:	bf14      	ite	ne
 80051e8:	f06f 0001 	mvnne.w	r0, #1
 80051ec:	2000      	moveq	r0, #0
 80051ee:	b00f      	add	sp, #60	; 0x3c
 80051f0:	f85d fb04 	ldr.w	pc, [sp], #4

080051f4 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80051f4:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80051f6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80051fa:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005200:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005202:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005204:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005206:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005208:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800520a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800520e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005210:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005212:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005214:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005218:	f003 fae8 	bl	80087ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800521c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800521e:	bf14      	ite	ne
 8005220:	f06f 0001 	mvnne.w	r0, #1
 8005224:	2000      	moveq	r0, #0
 8005226:	b00f      	add	sp, #60	; 0x3c
 8005228:	f85d fb04 	ldr.w	pc, [sp], #4

0800522c <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800522c:	b500      	push	{lr}
 800522e:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005230:	2903      	cmp	r1, #3
 8005232:	d80e      	bhi.n	8005252 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005234:	e8df f001 	tbb	[pc, r1]
 8005238:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800523c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005240:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005242:	230e      	movs	r3, #14
 8005244:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800524c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005250:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005252:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005254:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005258:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800525c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800525e:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005264:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005266:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005268:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800526c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800526e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005270:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005272:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005276:	f003 fc04 	bl	8008a82 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800527a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800527c:	bf14      	ite	ne
 800527e:	f06f 0005 	mvnne.w	r0, #5
 8005282:	2000      	moveq	r0, #0
 8005284:	b011      	add	sp, #68	; 0x44
 8005286:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800528a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800528e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8005290:	233d      	movs	r3, #61	; 0x3d
 8005292:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005298:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800529a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800529e:	e7d7      	b.n	8005250 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80052a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052a4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80052a6:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80052a8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80052aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052ae:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80052b0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80052b4:	e7cc      	b.n	8005250 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80052b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80052ba:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80052bc:	23ed      	movs	r3, #237	; 0xed
 80052be:	e7f3      	b.n	80052a8 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080052c0 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80052c0:	b500      	push	{lr}
 80052c2:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80052c4:	2903      	cmp	r1, #3
 80052c6:	d80e      	bhi.n	80052e6 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80052c8:	e8df f001 	tbb	[pc, r1]
 80052cc:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80052d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80052d6:	230c      	movs	r3, #12
 80052d8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80052da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052de:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80052e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80052e4:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80052e6:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80052e8:	466a      	mov	r2, sp
 80052ea:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80052ec:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80052ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052f2:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80052f8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80052fa:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80052fe:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005302:	f003 fbbe 	bl	8008a82 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8005306:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005308:	bf14      	ite	ne
 800530a:	f06f 0005 	mvnne.w	r0, #5
 800530e:	2000      	moveq	r0, #0
 8005310:	b011      	add	sp, #68	; 0x44
 8005312:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800531a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800531c:	23bc      	movs	r3, #188	; 0xbc
 800531e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8005320:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005324:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800532a:	e7db      	b.n	80052e4 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800532c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005330:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005332:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005334:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005336:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800533a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800533c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005340:	e7d0      	b.n	80052e4 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005342:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005346:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005348:	23eb      	movs	r3, #235	; 0xeb
 800534a:	e7f3      	b.n	8005334 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800534c <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800534c:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005352:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005354:	bf08      	it	eq
 8005356:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800535a:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800535c:	bf18      	it	ne
 800535e:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005362:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005364:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005366:	2366      	movs	r3, #102	; 0x66
 8005368:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800536a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800536c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005370:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005372:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005374:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005376:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800537a:	f003 fa37 	bl	80087ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800537e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005380:	bf14      	ite	ne
 8005382:	f06f 0001 	mvnne.w	r0, #1
 8005386:	2000      	moveq	r0, #0
 8005388:	b00f      	add	sp, #60	; 0x3c
 800538a:	f85d fb04 	ldr.w	pc, [sp], #4

0800538e <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800538e:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005394:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005396:	bf08      	it	eq
 8005398:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800539c:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800539e:	bf18      	it	ne
 80053a0:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053a4:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80053a6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80053a8:	2399      	movs	r3, #153	; 0x99
 80053aa:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053ac:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053ae:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80053b2:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80053b4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053b6:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053b8:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053bc:	f003 fa16 	bl	80087ec <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80053c0:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80053c2:	bf14      	ite	ne
 80053c4:	f06f 0001 	mvnne.w	r0, #1
 80053c8:	2000      	moveq	r0, #0
 80053ca:	b00f      	add	sp, #60	; 0x3c
 80053cc:	f85d fb04 	ldr.w	pc, [sp], #4

080053d0 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80053d0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053d2:	6884      	ldr	r4, [r0, #8]
 80053d4:	8800      	ldrh	r0, [r0, #0]
 80053d6:	46a4      	mov	ip, r4
}
 80053d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053dc:	4760      	bx	ip

080053de <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80053de:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80053e0:	6844      	ldr	r4, [r0, #4]
 80053e2:	8800      	ldrh	r0, [r0, #0]
 80053e4:	46a4      	mov	ip, r4
}
 80053e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80053ea:	4760      	bx	ip

080053ec <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80053ec:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80053ee:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80053f4:	4798      	blx	r3
 80053f6:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	4798      	blx	r3
 80053fc:	1b83      	subs	r3, r0, r6
 80053fe:	42ab      	cmp	r3, r5
 8005400:	d3fa      	bcc.n	80053f8 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005402:	bd70      	pop	{r4, r5, r6, pc}

08005404 <OTM8009A_Init>:
{
 8005404:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005408:	2300      	movs	r3, #0
 800540a:	f100 0810 	add.w	r8, r0, #16
{
 800540e:	4682      	mov	sl, r0
 8005410:	4689      	mov	r9, r1
 8005412:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005414:	4619      	mov	r1, r3
 8005416:	4add      	ldr	r2, [pc, #884]	; (800578c <OTM8009A_Init+0x388>)
 8005418:	4640      	mov	r0, r8
 800541a:	f000 fbad 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800541e:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005420:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005422:	4adb      	ldr	r2, [pc, #876]	; (8005790 <OTM8009A_Init+0x38c>)
 8005424:	21ff      	movs	r1, #255	; 0xff
 8005426:	4640      	mov	r0, r8
 8005428:	f000 fba6 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800542c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800542e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005430:	4ad8      	ldr	r2, [pc, #864]	; (8005794 <OTM8009A_Init+0x390>)
 8005432:	4619      	mov	r1, r3
 8005434:	4640      	mov	r0, r8
 8005436:	f000 fb9f 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800543a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800543c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800543e:	4ad6      	ldr	r2, [pc, #856]	; (8005798 <OTM8009A_Init+0x394>)
 8005440:	21ff      	movs	r1, #255	; 0xff
 8005442:	4640      	mov	r0, r8
 8005444:	f000 fb98 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005448:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800544a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800544c:	4ad1      	ldr	r2, [pc, #836]	; (8005794 <OTM8009A_Init+0x390>)
 800544e:	4619      	mov	r1, r3
 8005450:	4640      	mov	r0, r8
 8005452:	f000 fb91 	bl	8005b78 <otm8009a_write_reg>
 8005456:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005458:	2300      	movs	r3, #0
 800545a:	4ad0      	ldr	r2, [pc, #832]	; (800579c <OTM8009A_Init+0x398>)
 800545c:	21c4      	movs	r1, #196	; 0xc4
 800545e:	4640      	mov	r0, r8
 8005460:	f000 fb8a 	bl	8005b78 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005464:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005466:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005468:	4650      	mov	r0, sl
 800546a:	f7ff ffbf 	bl	80053ec <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800546e:	2300      	movs	r3, #0
 8005470:	4acb      	ldr	r2, [pc, #812]	; (80057a0 <OTM8009A_Init+0x39c>)
 8005472:	4640      	mov	r0, r8
 8005474:	4619      	mov	r1, r3
 8005476:	4dcb      	ldr	r5, [pc, #812]	; (80057a4 <OTM8009A_Init+0x3a0>)
 8005478:	f000 fb7e 	bl	8005b78 <otm8009a_write_reg>
 800547c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800547e:	2300      	movs	r3, #0
 8005480:	4ac9      	ldr	r2, [pc, #804]	; (80057a8 <OTM8009A_Init+0x3a4>)
 8005482:	21c4      	movs	r1, #196	; 0xc4
 8005484:	4640      	mov	r0, r8
 8005486:	f000 fb77 	bl	8005b78 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 800548a:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800548c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800548e:	4650      	mov	r0, sl
 8005490:	f7ff ffac 	bl	80053ec <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005494:	2300      	movs	r3, #0
 8005496:	4ac5      	ldr	r2, [pc, #788]	; (80057ac <OTM8009A_Init+0x3a8>)
 8005498:	4640      	mov	r0, r8
 800549a:	4619      	mov	r1, r3
 800549c:	f000 fb6c 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80054a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80054a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80054a4:	4ac2      	ldr	r2, [pc, #776]	; (80057b0 <OTM8009A_Init+0x3ac>)
 80054a6:	21c5      	movs	r1, #197	; 0xc5
 80054a8:	4640      	mov	r0, r8
 80054aa:	f000 fb65 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80054ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80054b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80054b2:	4ac0      	ldr	r2, [pc, #768]	; (80057b4 <OTM8009A_Init+0x3b0>)
 80054b4:	4619      	mov	r1, r3
 80054b6:	4640      	mov	r0, r8
 80054b8:	f000 fb5e 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80054bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80054be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80054c0:	4abd      	ldr	r2, [pc, #756]	; (80057b8 <OTM8009A_Init+0x3b4>)
 80054c2:	21c5      	movs	r1, #197	; 0xc5
 80054c4:	4640      	mov	r0, r8
 80054c6:	f000 fb57 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80054ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80054cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80054ce:	4abb      	ldr	r2, [pc, #748]	; (80057bc <OTM8009A_Init+0x3b8>)
 80054d0:	4619      	mov	r1, r3
 80054d2:	4640      	mov	r0, r8
 80054d4:	f000 fb50 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80054d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 80054da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80054dc:	4ab8      	ldr	r2, [pc, #736]	; (80057c0 <OTM8009A_Init+0x3bc>)
 80054de:	21c0      	movs	r1, #192	; 0xc0
 80054e0:	4640      	mov	r0, r8
 80054e2:	f000 fb49 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80054e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054ea:	4aa8      	ldr	r2, [pc, #672]	; (800578c <OTM8009A_Init+0x388>)
 80054ec:	4619      	mov	r1, r3
 80054ee:	4640      	mov	r0, r8
 80054f0:	f000 fb42 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80054f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80054f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80054f8:	4ab2      	ldr	r2, [pc, #712]	; (80057c4 <OTM8009A_Init+0x3c0>)
 80054fa:	21d9      	movs	r1, #217	; 0xd9
 80054fc:	4640      	mov	r0, r8
 80054fe:	f000 fb3b 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005502:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005504:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005506:	4ab0      	ldr	r2, [pc, #704]	; (80057c8 <OTM8009A_Init+0x3c4>)
 8005508:	4619      	mov	r1, r3
 800550a:	4640      	mov	r0, r8
 800550c:	f000 fb34 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005510:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005512:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005514:	4aad      	ldr	r2, [pc, #692]	; (80057cc <OTM8009A_Init+0x3c8>)
 8005516:	21c1      	movs	r1, #193	; 0xc1
 8005518:	4640      	mov	r0, r8
 800551a:	f000 fb2d 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800551e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005520:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005522:	4aab      	ldr	r2, [pc, #684]	; (80057d0 <OTM8009A_Init+0x3cc>)
 8005524:	4619      	mov	r1, r3
 8005526:	4640      	mov	r0, r8
 8005528:	f000 fb26 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800552c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800552e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005530:	4aa8      	ldr	r2, [pc, #672]	; (80057d4 <OTM8009A_Init+0x3d0>)
 8005532:	21c1      	movs	r1, #193	; 0xc1
 8005534:	4640      	mov	r0, r8
 8005536:	f000 fb1f 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800553a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800553c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800553e:	4aa6      	ldr	r2, [pc, #664]	; (80057d8 <OTM8009A_Init+0x3d4>)
 8005540:	4619      	mov	r1, r3
 8005542:	4640      	mov	r0, r8
 8005544:	f000 fb18 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005548:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800554a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800554c:	4aa3      	ldr	r2, [pc, #652]	; (80057dc <OTM8009A_Init+0x3d8>)
 800554e:	21c5      	movs	r1, #197	; 0xc5
 8005550:	4640      	mov	r0, r8
 8005552:	f000 fb11 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005556:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005558:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800555a:	4aa1      	ldr	r2, [pc, #644]	; (80057e0 <OTM8009A_Init+0x3dc>)
 800555c:	4619      	mov	r1, r3
 800555e:	4640      	mov	r0, r8
 8005560:	f000 fb0a 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005564:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005566:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005568:	4a93      	ldr	r2, [pc, #588]	; (80057b8 <OTM8009A_Init+0x3b4>)
 800556a:	21c5      	movs	r1, #197	; 0xc5
 800556c:	4640      	mov	r0, r8
 800556e:	f000 fb03 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005572:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005574:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005576:	4a85      	ldr	r2, [pc, #532]	; (800578c <OTM8009A_Init+0x388>)
 8005578:	4619      	mov	r1, r3
 800557a:	4640      	mov	r0, r8
 800557c:	f000 fafc 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005580:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005582:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005584:	4a97      	ldr	r2, [pc, #604]	; (80057e4 <OTM8009A_Init+0x3e0>)
 8005586:	21d8      	movs	r1, #216	; 0xd8
 8005588:	4640      	mov	r0, r8
 800558a:	f000 faf5 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800558e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005590:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005592:	4a95      	ldr	r2, [pc, #596]	; (80057e8 <OTM8009A_Init+0x3e4>)
 8005594:	4619      	mov	r1, r3
 8005596:	4640      	mov	r0, r8
 8005598:	f000 faee 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800559c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800559e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80055a0:	4a92      	ldr	r2, [pc, #584]	; (80057ec <OTM8009A_Init+0x3e8>)
 80055a2:	21c5      	movs	r1, #197	; 0xc5
 80055a4:	4640      	mov	r0, r8
 80055a6:	f000 fae7 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80055aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80055ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80055ae:	4a90      	ldr	r2, [pc, #576]	; (80057f0 <OTM8009A_Init+0x3ec>)
 80055b0:	4619      	mov	r1, r3
 80055b2:	4640      	mov	r0, r8
 80055b4:	f000 fae0 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80055b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80055ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80055bc:	4a8d      	ldr	r2, [pc, #564]	; (80057f4 <OTM8009A_Init+0x3f0>)
 80055be:	21c0      	movs	r1, #192	; 0xc0
 80055c0:	4640      	mov	r0, r8
 80055c2:	f000 fad9 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80055c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80055c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80055ca:	4a8b      	ldr	r2, [pc, #556]	; (80057f8 <OTM8009A_Init+0x3f4>)
 80055cc:	4619      	mov	r1, r3
 80055ce:	4640      	mov	r0, r8
 80055d0:	f000 fad2 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80055d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 80055d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80055d8:	4a88      	ldr	r2, [pc, #544]	; (80057fc <OTM8009A_Init+0x3f8>)
 80055da:	21c5      	movs	r1, #197	; 0xc5
 80055dc:	4640      	mov	r0, r8
 80055de:	f000 facb 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80055e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 80055e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80055e6:	4a78      	ldr	r2, [pc, #480]	; (80057c8 <OTM8009A_Init+0x3c4>)
 80055e8:	4619      	mov	r1, r3
 80055ea:	4640      	mov	r0, r8
 80055ec:	f000 fac4 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80055f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80055f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80055f4:	4a82      	ldr	r2, [pc, #520]	; (8005800 <OTM8009A_Init+0x3fc>)
 80055f6:	21c4      	movs	r1, #196	; 0xc4
 80055f8:	4640      	mov	r0, r8
 80055fa:	f000 fabd 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80055fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005600:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005602:	4a73      	ldr	r2, [pc, #460]	; (80057d0 <OTM8009A_Init+0x3cc>)
 8005604:	4619      	mov	r1, r3
 8005606:	4640      	mov	r0, r8
 8005608:	f000 fab6 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800560c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800560e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005610:	4a7c      	ldr	r2, [pc, #496]	; (8005804 <OTM8009A_Init+0x400>)
 8005612:	21c1      	movs	r1, #193	; 0xc1
 8005614:	4640      	mov	r0, r8
 8005616:	f000 faaf 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800561a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800561c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800561e:	4a7a      	ldr	r2, [pc, #488]	; (8005808 <OTM8009A_Init+0x404>)
 8005620:	4619      	mov	r1, r3
 8005622:	4640      	mov	r0, r8
 8005624:	f000 faa8 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005628:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800562a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800562c:	4a77      	ldr	r2, [pc, #476]	; (800580c <OTM8009A_Init+0x408>)
 800562e:	21b3      	movs	r1, #179	; 0xb3
 8005630:	4640      	mov	r0, r8
 8005632:	f000 faa1 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005636:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005638:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800563a:	4a56      	ldr	r2, [pc, #344]	; (8005794 <OTM8009A_Init+0x390>)
 800563c:	4619      	mov	r1, r3
 800563e:	4640      	mov	r0, r8
 8005640:	f000 fa9a 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005644:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005646:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005648:	4a71      	ldr	r2, [pc, #452]	; (8005810 <OTM8009A_Init+0x40c>)
 800564a:	21ce      	movs	r1, #206	; 0xce
 800564c:	4640      	mov	r0, r8
 800564e:	f000 fa93 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005652:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005654:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005656:	4a6f      	ldr	r2, [pc, #444]	; (8005814 <OTM8009A_Init+0x410>)
 8005658:	4619      	mov	r1, r3
 800565a:	4640      	mov	r0, r8
 800565c:	f000 fa8c 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005660:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005662:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005664:	4a6c      	ldr	r2, [pc, #432]	; (8005818 <OTM8009A_Init+0x414>)
 8005666:	21ce      	movs	r1, #206	; 0xce
 8005668:	4640      	mov	r0, r8
 800566a:	f000 fa85 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800566e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005670:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005672:	4a6a      	ldr	r2, [pc, #424]	; (800581c <OTM8009A_Init+0x418>)
 8005674:	4619      	mov	r1, r3
 8005676:	4640      	mov	r0, r8
 8005678:	f000 fa7e 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800567c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800567e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005680:	4a67      	ldr	r2, [pc, #412]	; (8005820 <OTM8009A_Init+0x41c>)
 8005682:	21ce      	movs	r1, #206	; 0xce
 8005684:	4640      	mov	r0, r8
 8005686:	f000 fa77 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800568a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800568c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800568e:	4a65      	ldr	r2, [pc, #404]	; (8005824 <OTM8009A_Init+0x420>)
 8005690:	4619      	mov	r1, r3
 8005692:	4640      	mov	r0, r8
 8005694:	f000 fa70 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005698:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800569a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800569c:	4a62      	ldr	r2, [pc, #392]	; (8005828 <OTM8009A_Init+0x424>)
 800569e:	21cf      	movs	r1, #207	; 0xcf
 80056a0:	4640      	mov	r0, r8
 80056a2:	f000 fa69 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80056a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056aa:	4a60      	ldr	r2, [pc, #384]	; (800582c <OTM8009A_Init+0x428>)
 80056ac:	4619      	mov	r1, r3
 80056ae:	4640      	mov	r0, r8
 80056b0:	f000 fa62 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80056b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80056b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80056b8:	4a5d      	ldr	r2, [pc, #372]	; (8005830 <OTM8009A_Init+0x42c>)
 80056ba:	21cf      	movs	r1, #207	; 0xcf
 80056bc:	4640      	mov	r0, r8
 80056be:	f000 fa5b 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80056c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80056c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80056c6:	4a33      	ldr	r2, [pc, #204]	; (8005794 <OTM8009A_Init+0x390>)
 80056c8:	4619      	mov	r1, r3
 80056ca:	4640      	mov	r0, r8
 80056cc:	f000 fa54 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80056d0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80056d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80056d4:	4a57      	ldr	r2, [pc, #348]	; (8005834 <OTM8009A_Init+0x430>)
 80056d6:	21cb      	movs	r1, #203	; 0xcb
 80056d8:	4640      	mov	r0, r8
 80056da:	f000 fa4d 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80056de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 80056e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80056e2:	4a55      	ldr	r2, [pc, #340]	; (8005838 <OTM8009A_Init+0x434>)
 80056e4:	4619      	mov	r1, r3
 80056e6:	4640      	mov	r0, r8
 80056e8:	f000 fa46 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80056ec:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80056ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80056f0:	4a52      	ldr	r2, [pc, #328]	; (800583c <OTM8009A_Init+0x438>)
 80056f2:	21cb      	movs	r1, #203	; 0xcb
 80056f4:	4640      	mov	r0, r8
 80056f6:	f000 fa3f 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80056fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80056fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80056fe:	4a45      	ldr	r2, [pc, #276]	; (8005814 <OTM8009A_Init+0x410>)
 8005700:	4619      	mov	r1, r3
 8005702:	4640      	mov	r0, r8
 8005704:	f000 fa38 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005708:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800570a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800570c:	4a4c      	ldr	r2, [pc, #304]	; (8005840 <OTM8009A_Init+0x43c>)
 800570e:	21cb      	movs	r1, #203	; 0xcb
 8005710:	4640      	mov	r0, r8
 8005712:	f000 fa31 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005716:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005718:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800571a:	4a40      	ldr	r2, [pc, #256]	; (800581c <OTM8009A_Init+0x418>)
 800571c:	4619      	mov	r1, r3
 800571e:	4640      	mov	r0, r8
 8005720:	f000 fa2a 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005724:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005726:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005728:	4a46      	ldr	r2, [pc, #280]	; (8005844 <OTM8009A_Init+0x440>)
 800572a:	21cb      	movs	r1, #203	; 0xcb
 800572c:	4640      	mov	r0, r8
 800572e:	f000 fa23 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005732:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005734:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005736:	4a3b      	ldr	r2, [pc, #236]	; (8005824 <OTM8009A_Init+0x420>)
 8005738:	4619      	mov	r1, r3
 800573a:	4640      	mov	r0, r8
 800573c:	f000 fa1c 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005740:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005742:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005744:	4a40      	ldr	r2, [pc, #256]	; (8005848 <OTM8009A_Init+0x444>)
 8005746:	21cb      	movs	r1, #203	; 0xcb
 8005748:	4640      	mov	r0, r8
 800574a:	f000 fa15 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800574e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005750:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005752:	4a36      	ldr	r2, [pc, #216]	; (800582c <OTM8009A_Init+0x428>)
 8005754:	4619      	mov	r1, r3
 8005756:	4640      	mov	r0, r8
 8005758:	f000 fa0e 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800575c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800575e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005760:	4a3a      	ldr	r2, [pc, #232]	; (800584c <OTM8009A_Init+0x448>)
 8005762:	21cb      	movs	r1, #203	; 0xcb
 8005764:	4640      	mov	r0, r8
 8005766:	f000 fa07 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800576a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800576c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800576e:	4a38      	ldr	r2, [pc, #224]	; (8005850 <OTM8009A_Init+0x44c>)
 8005770:	4619      	mov	r1, r3
 8005772:	4640      	mov	r0, r8
 8005774:	f000 fa00 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005778:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800577a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800577c:	4a35      	ldr	r2, [pc, #212]	; (8005854 <OTM8009A_Init+0x450>)
 800577e:	21cb      	movs	r1, #203	; 0xcb
 8005780:	4640      	mov	r0, r8
 8005782:	f000 f9f9 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005786:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005788:	4404      	add	r4, r0
 800578a:	e065      	b.n	8005858 <OTM8009A_Init+0x454>
 800578c:	08021b3d 	.word	0x08021b3d
 8005790:	08021a30 	.word	0x08021a30
 8005794:	08021b3e 	.word	0x08021b3e
 8005798:	08021aab 	.word	0x08021aab
 800579c:	08021b3f 	.word	0x08021b3f
 80057a0:	08021b40 	.word	0x08021b40
 80057a4:	24005b48 	.word	0x24005b48
 80057a8:	08021b41 	.word	0x08021b41
 80057ac:	08021b42 	.word	0x08021b42
 80057b0:	08021b43 	.word	0x08021b43
 80057b4:	08021b44 	.word	0x08021b44
 80057b8:	08021b45 	.word	0x08021b45
 80057bc:	08021b46 	.word	0x08021b46
 80057c0:	08021b47 	.word	0x08021b47
 80057c4:	08021b48 	.word	0x08021b48
 80057c8:	08021b49 	.word	0x08021b49
 80057cc:	08021b4a 	.word	0x08021b4a
 80057d0:	08021b4b 	.word	0x08021b4b
 80057d4:	08021b4c 	.word	0x08021b4c
 80057d8:	08021b4d 	.word	0x08021b4d
 80057dc:	08021b4e 	.word	0x08021b4e
 80057e0:	08021b4f 	.word	0x08021b4f
 80057e4:	08021b16 	.word	0x08021b16
 80057e8:	08021b50 	.word	0x08021b50
 80057ec:	08021b51 	.word	0x08021b51
 80057f0:	08021b52 	.word	0x08021b52
 80057f4:	08021b53 	.word	0x08021b53
 80057f8:	08021b54 	.word	0x08021b54
 80057fc:	08021b55 	.word	0x08021b55
 8005800:	08021b56 	.word	0x08021b56
 8005804:	08021b57 	.word	0x08021b57
 8005808:	08021b58 	.word	0x08021b58
 800580c:	08021b18 	.word	0x08021b18
 8005810:	08021b1a 	.word	0x08021b1a
 8005814:	08021b59 	.word	0x08021b59
 8005818:	08021b20 	.word	0x08021b20
 800581c:	08021b5a 	.word	0x08021b5a
 8005820:	08021b2e 	.word	0x08021b2e
 8005824:	08021b5b 	.word	0x08021b5b
 8005828:	08021a33 	.word	0x08021a33
 800582c:	08021b5c 	.word	0x08021b5c
 8005830:	08021b69 	.word	0x08021b69
 8005834:	08021a3d 	.word	0x08021a3d
 8005838:	08021b5d 	.word	0x08021b5d
 800583c:	08021a47 	.word	0x08021a47
 8005840:	08021a56 	.word	0x08021a56
 8005844:	08021a65 	.word	0x08021a65
 8005848:	08021a6f 	.word	0x08021a6f
 800584c:	08021a7e 	.word	0x08021a7e
 8005850:	08021b5e 	.word	0x08021b5e
 8005854:	08021a8d 	.word	0x08021a8d
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005858:	4a99      	ldr	r2, [pc, #612]	; (8005ac0 <OTM8009A_Init+0x6bc>)
 800585a:	4619      	mov	r1, r3
 800585c:	4640      	mov	r0, r8
 800585e:	f000 f98b 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005862:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005864:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005866:	4a97      	ldr	r2, [pc, #604]	; (8005ac4 <OTM8009A_Init+0x6c0>)
 8005868:	21cb      	movs	r1, #203	; 0xcb
 800586a:	4640      	mov	r0, r8
 800586c:	f000 f984 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005870:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005872:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005874:	4a94      	ldr	r2, [pc, #592]	; (8005ac8 <OTM8009A_Init+0x6c4>)
 8005876:	4619      	mov	r1, r3
 8005878:	4640      	mov	r0, r8
 800587a:	f000 f97d 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800587e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005880:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005882:	4a92      	ldr	r2, [pc, #584]	; (8005acc <OTM8009A_Init+0x6c8>)
 8005884:	21cc      	movs	r1, #204	; 0xcc
 8005886:	4640      	mov	r0, r8
 8005888:	f000 f976 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800588c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800588e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005890:	4a8f      	ldr	r2, [pc, #572]	; (8005ad0 <OTM8009A_Init+0x6cc>)
 8005892:	4619      	mov	r1, r3
 8005894:	4640      	mov	r0, r8
 8005896:	f000 f96f 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800589a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800589c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800589e:	4a8d      	ldr	r2, [pc, #564]	; (8005ad4 <OTM8009A_Init+0x6d0>)
 80058a0:	21cc      	movs	r1, #204	; 0xcc
 80058a2:	4640      	mov	r0, r8
 80058a4:	f000 f968 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80058a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80058aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80058ac:	4a8a      	ldr	r2, [pc, #552]	; (8005ad8 <OTM8009A_Init+0x6d4>)
 80058ae:	4619      	mov	r1, r3
 80058b0:	4640      	mov	r0, r8
 80058b2:	f000 f961 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80058b6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80058b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80058ba:	4a88      	ldr	r2, [pc, #544]	; (8005adc <OTM8009A_Init+0x6d8>)
 80058bc:	21cc      	movs	r1, #204	; 0xcc
 80058be:	4640      	mov	r0, r8
 80058c0:	f000 f95a 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80058c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80058c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80058c8:	4a85      	ldr	r2, [pc, #532]	; (8005ae0 <OTM8009A_Init+0x6dc>)
 80058ca:	4619      	mov	r1, r3
 80058cc:	4640      	mov	r0, r8
 80058ce:	f000 f953 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80058d2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80058d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80058d6:	4a83      	ldr	r2, [pc, #524]	; (8005ae4 <OTM8009A_Init+0x6e0>)
 80058d8:	21cc      	movs	r1, #204	; 0xcc
 80058da:	4640      	mov	r0, r8
 80058dc:	f000 f94c 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80058e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80058e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80058e4:	4a80      	ldr	r2, [pc, #512]	; (8005ae8 <OTM8009A_Init+0x6e4>)
 80058e6:	4619      	mov	r1, r3
 80058e8:	4640      	mov	r0, r8
 80058ea:	f000 f945 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80058ee:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80058f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80058f2:	4a7e      	ldr	r2, [pc, #504]	; (8005aec <OTM8009A_Init+0x6e8>)
 80058f4:	21cc      	movs	r1, #204	; 0xcc
 80058f6:	4640      	mov	r0, r8
 80058f8:	f000 f93e 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80058fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80058fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005900:	4a7b      	ldr	r2, [pc, #492]	; (8005af0 <OTM8009A_Init+0x6ec>)
 8005902:	4619      	mov	r1, r3
 8005904:	4640      	mov	r0, r8
 8005906:	f000 f937 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800590a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800590c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800590e:	4a79      	ldr	r2, [pc, #484]	; (8005af4 <OTM8009A_Init+0x6f0>)
 8005910:	21cc      	movs	r1, #204	; 0xcc
 8005912:	4640      	mov	r0, r8
 8005914:	f000 f930 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005918:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800591a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800591c:	4a76      	ldr	r2, [pc, #472]	; (8005af8 <OTM8009A_Init+0x6f4>)
 800591e:	4619      	mov	r1, r3
 8005920:	4640      	mov	r0, r8
 8005922:	f000 f929 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005926:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005928:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800592a:	4a74      	ldr	r2, [pc, #464]	; (8005afc <OTM8009A_Init+0x6f8>)
 800592c:	21c5      	movs	r1, #197	; 0xc5
 800592e:	4640      	mov	r0, r8
 8005930:	f000 f922 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005934:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005936:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005938:	4a71      	ldr	r2, [pc, #452]	; (8005b00 <OTM8009A_Init+0x6fc>)
 800593a:	4619      	mov	r1, r3
 800593c:	4640      	mov	r0, r8
 800593e:	f000 f91b 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005942:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005944:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005946:	4a6f      	ldr	r2, [pc, #444]	; (8005b04 <OTM8009A_Init+0x700>)
 8005948:	21f5      	movs	r1, #245	; 0xf5
 800594a:	4640      	mov	r0, r8
 800594c:	f000 f914 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005950:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005952:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005954:	4a6c      	ldr	r2, [pc, #432]	; (8005b08 <OTM8009A_Init+0x704>)
 8005956:	4619      	mov	r1, r3
 8005958:	4640      	mov	r0, r8
 800595a:	f000 f90d 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800595e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005960:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005962:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <OTM8009A_Init+0x708>)
 8005964:	21c6      	movs	r1, #198	; 0xc6
 8005966:	4640      	mov	r0, r8
 8005968:	f000 f906 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800596c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800596e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005970:	4a67      	ldr	r2, [pc, #412]	; (8005b10 <OTM8009A_Init+0x70c>)
 8005972:	4619      	mov	r1, r3
 8005974:	4640      	mov	r0, r8
 8005976:	f000 f8ff 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800597a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800597c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800597e:	4a65      	ldr	r2, [pc, #404]	; (8005b14 <OTM8009A_Init+0x710>)
 8005980:	21ff      	movs	r1, #255	; 0xff
 8005982:	4640      	mov	r0, r8
 8005984:	f000 f8f8 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005988:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800598a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800598c:	4a60      	ldr	r2, [pc, #384]	; (8005b10 <OTM8009A_Init+0x70c>)
 800598e:	4619      	mov	r1, r3
 8005990:	4640      	mov	r0, r8
 8005992:	f000 f8f1 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005996:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005998:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800599a:	4a5d      	ldr	r2, [pc, #372]	; (8005b10 <OTM8009A_Init+0x70c>)
 800599c:	4619      	mov	r1, r3
 800599e:	4640      	mov	r0, r8
 80059a0:	f000 f8ea 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80059a4:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80059a8:	4a5b      	ldr	r2, [pc, #364]	; (8005b18 <OTM8009A_Init+0x714>)
 80059aa:	21e1      	movs	r1, #225	; 0xe1
 80059ac:	4640      	mov	r0, r8
 80059ae:	f000 f8e3 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80059b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80059b6:	4a56      	ldr	r2, [pc, #344]	; (8005b10 <OTM8009A_Init+0x70c>)
 80059b8:	4619      	mov	r1, r3
 80059ba:	4640      	mov	r0, r8
 80059bc:	f000 f8dc 	bl	8005b78 <otm8009a_write_reg>
 80059c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80059c2:	2310      	movs	r3, #16
 80059c4:	4a55      	ldr	r2, [pc, #340]	; (8005b1c <OTM8009A_Init+0x718>)
 80059c6:	21e2      	movs	r1, #226	; 0xe2
 80059c8:	4640      	mov	r0, r8
 80059ca:	f000 f8d5 	bl	8005b78 <otm8009a_write_reg>
 80059ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80059d0:	2300      	movs	r3, #0
 80059d2:	4a53      	ldr	r2, [pc, #332]	; (8005b20 <OTM8009A_Init+0x71c>)
 80059d4:	2111      	movs	r1, #17
 80059d6:	4640      	mov	r0, r8
 80059d8:	f000 f8ce 	bl	8005b78 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80059dc:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80059de:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80059e0:	4650      	mov	r0, sl
 80059e2:	f7ff fd03 	bl	80053ec <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 80059e6:	f1b9 0f00 	cmp.w	r9, #0
 80059ea:	d062      	beq.n	8005ab2 <OTM8009A_Init+0x6ae>
 80059ec:	f1b9 0f02 	cmp.w	r9, #2
 80059f0:	d108      	bne.n	8005a04 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 80059f2:	2300      	movs	r3, #0
 80059f4:	4a4b      	ldr	r2, [pc, #300]	; (8005b24 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80059f6:	213a      	movs	r1, #58	; 0x3a
 80059f8:	4640      	mov	r0, r8
 80059fa:	f000 f8bd 	bl	8005b78 <otm8009a_write_reg>
 80059fe:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005a00:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005a04:	f1bb 0f01 	cmp.w	fp, #1
 8005a08:	d156      	bne.n	8005ab8 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005a0a:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005a0c:	f10d 0207 	add.w	r2, sp, #7
 8005a10:	2136      	movs	r1, #54	; 0x36
 8005a12:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005a14:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f000 f8ad 	bl	8005b78 <otm8009a_write_reg>
 8005a1e:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005a20:	2304      	movs	r3, #4
 8005a22:	4a41      	ldr	r2, [pc, #260]	; (8005b28 <OTM8009A_Init+0x724>)
 8005a24:	212a      	movs	r1, #42	; 0x2a
 8005a26:	4640      	mov	r0, r8
 8005a28:	f000 f8a6 	bl	8005b78 <otm8009a_write_reg>
 8005a2c:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005a2e:	2304      	movs	r3, #4
 8005a30:	4a3e      	ldr	r2, [pc, #248]	; (8005b2c <OTM8009A_Init+0x728>)
 8005a32:	212b      	movs	r1, #43	; 0x2b
 8005a34:	4640      	mov	r0, r8
 8005a36:	f000 f89f 	bl	8005b78 <otm8009a_write_reg>
 8005a3a:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005a3c:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005a40:	2300      	movs	r3, #0
 8005a42:	4a3b      	ldr	r2, [pc, #236]	; (8005b30 <OTM8009A_Init+0x72c>)
 8005a44:	2151      	movs	r1, #81	; 0x51
 8005a46:	4640      	mov	r0, r8
 8005a48:	f000 f896 	bl	8005b78 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005a4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005a4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005a50:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <OTM8009A_Init+0x730>)
 8005a52:	2153      	movs	r1, #83	; 0x53
 8005a54:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005a56:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005a58:	f000 f88e 	bl	8005b78 <otm8009a_write_reg>
 8005a5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	4a35      	ldr	r2, [pc, #212]	; (8005b38 <OTM8009A_Init+0x734>)
 8005a62:	2155      	movs	r1, #85	; 0x55
 8005a64:	4640      	mov	r0, r8
 8005a66:	f000 f887 	bl	8005b78 <otm8009a_write_reg>
 8005a6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4a33      	ldr	r2, [pc, #204]	; (8005b3c <OTM8009A_Init+0x738>)
 8005a70:	215e      	movs	r1, #94	; 0x5e
 8005a72:	4640      	mov	r0, r8
 8005a74:	f000 f880 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005a78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005a7a:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005a7c:	4a30      	ldr	r2, [pc, #192]	; (8005b40 <OTM8009A_Init+0x73c>)
 8005a7e:	2129      	movs	r1, #41	; 0x29
 8005a80:	4640      	mov	r0, r8
 8005a82:	f000 f879 	bl	8005b78 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005a88:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005a8a:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <OTM8009A_Init+0x70c>)
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4640      	mov	r0, r8
 8005a90:	f000 f872 	bl	8005b78 <otm8009a_write_reg>
 8005a94:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005a96:	2300      	movs	r3, #0
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <OTM8009A_Init+0x740>)
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	f000 f86b 	bl	8005b78 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005aa2:	42c5      	cmn	r5, r0
}
 8005aa4:	bf14      	ite	ne
 8005aa6:	f04f 30ff 	movne.w	r0, #4294967295
 8005aaa:	2000      	moveq	r0, #0
 8005aac:	b003      	add	sp, #12
 8005aae:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	4a24      	ldr	r2, [pc, #144]	; (8005b48 <OTM8009A_Init+0x744>)
 8005ab6:	e79e      	b.n	80059f6 <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	e7c0      	b.n	8005a40 <OTM8009A_Init+0x63c>
 8005abe:	bf00      	nop
 8005ac0:	08021b5f 	.word	0x08021b5f
 8005ac4:	08021a97 	.word	0x08021a97
 8005ac8:	08021b3e 	.word	0x08021b3e
 8005acc:	08021aa1 	.word	0x08021aa1
 8005ad0:	08021b5d 	.word	0x08021b5d
 8005ad4:	08021aad 	.word	0x08021aad
 8005ad8:	08021b59 	.word	0x08021b59
 8005adc:	08021abc 	.word	0x08021abc
 8005ae0:	08021b5a 	.word	0x08021b5a
 8005ae4:	08021acb 	.word	0x08021acb
 8005ae8:	08021b5b 	.word	0x08021b5b
 8005aec:	08021ad5 	.word	0x08021ad5
 8005af0:	08021b5c 	.word	0x08021b5c
 8005af4:	08021ae4 	.word	0x08021ae4
 8005af8:	08021b49 	.word	0x08021b49
 8005afc:	08021b6a 	.word	0x08021b6a
 8005b00:	08021b6b 	.word	0x08021b6b
 8005b04:	08021b6c 	.word	0x08021b6c
 8005b08:	08021b6d 	.word	0x08021b6d
 8005b0c:	08021b6e 	.word	0x08021b6e
 8005b10:	08021b3d 	.word	0x08021b3d
 8005b14:	08021af3 	.word	0x08021af3
 8005b18:	08021af6 	.word	0x08021af6
 8005b1c:	08021b06 	.word	0x08021b06
 8005b20:	08021b60 	.word	0x08021b60
 8005b24:	08021b61 	.word	0x08021b61
 8005b28:	08021a28 	.word	0x08021a28
 8005b2c:	08021a2c 	.word	0x08021a2c
 8005b30:	08021b63 	.word	0x08021b63
 8005b34:	08021b64 	.word	0x08021b64
 8005b38:	08021b65 	.word	0x08021b65
 8005b3c:	08021b66 	.word	0x08021b66
 8005b40:	08021b67 	.word	0x08021b67
 8005b44:	08021b68 	.word	0x08021b68
 8005b48:	08021b62 	.word	0x08021b62

08005b4c <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005b4c:	b160      	cbz	r0, 8005b68 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005b4e:	684b      	ldr	r3, [r1, #4]
 8005b50:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005b52:	688b      	ldr	r3, [r1, #8]
 8005b54:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b56:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005b58:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005b5a:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005b5c:	4b04      	ldr	r3, [pc, #16]	; (8005b70 <OTM8009A_RegisterBusIO+0x24>)
 8005b5e:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <OTM8009A_RegisterBusIO+0x28>)
 8005b62:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005b64:	2000      	movs	r0, #0
 8005b66:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	080053d1 	.word	0x080053d1
 8005b74:	080053df 	.word	0x080053df

08005b78 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005b78:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005b7a:	6804      	ldr	r4, [r0, #0]
 8005b7c:	6880      	ldr	r0, [r0, #8]
 8005b7e:	46a4      	mov	ip, r4
}
 8005b80:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005b84:	4760      	bx	ip
	...

08005b88 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005b88:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <BSP_I2C4_DeInit+0x44>)
{
 8005b8a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005b8c:	6813      	ldr	r3, [r2, #0]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005b92:	b10b      	cbz	r3, 8005b98 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005b94:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005b96:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005b9c:	480c      	ldr	r0, [pc, #48]	; (8005bd0 <BSP_I2C4_DeInit+0x48>)
 8005b9e:	f001 fe0d 	bl	80077bc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005ba2:	480b      	ldr	r0, [pc, #44]	; (8005bd0 <BSP_I2C4_DeInit+0x48>)
 8005ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ba8:	f001 fe08 	bl	80077bc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005bac:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005bae:	480a      	ldr	r0, [pc, #40]	; (8005bd8 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005bb0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005bbc:	f002 f849 	bl	8007c52 <HAL_I2C_DeInit>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d0e7      	beq.n	8005b94 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8005bc4:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005bc8:	e7e5      	b.n	8005b96 <BSP_I2C4_DeInit+0xe>
 8005bca:	bf00      	nop
 8005bcc:	24005b54 	.word	0x24005b54
 8005bd0:	58020c00 	.word	0x58020c00
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	2400655c 	.word	0x2400655c

08005bdc <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2201      	movs	r2, #1
{
 8005be0:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005be2:	6041      	str	r1, [r0, #4]
{
 8005be4:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005be6:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005be8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005bec:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005bf0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005bf4:	f001 ffdb 	bl	8007bae <HAL_I2C_Init>
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	b108      	cbz	r0, 8005c00 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005bfc:	2001      	movs	r0, #1
}
 8005bfe:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005c00:	4620      	mov	r0, r4
 8005c02:	f002 f9fc 	bl	8007ffe <HAL_I2CEx_ConfigAnalogFilter>
 8005c06:	4601      	mov	r1, r0
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d1f7      	bne.n	8005bfc <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f002 fa1c 	bl	800804a <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8005c12:	3800      	subs	r0, #0
 8005c14:	bf18      	it	ne
 8005c16:	2001      	movne	r0, #1
 8005c18:	e7f1      	b.n	8005bfe <MX_I2C4_Init+0x22>
	...

08005c1c <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005c1c:	4ba3      	ldr	r3, [pc, #652]	; (8005eac <BSP_I2C4_Init+0x290>)
 8005c1e:	48a4      	ldr	r0, [pc, #656]	; (8005eb0 <BSP_I2C4_Init+0x294>)
{
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005c24:	6003      	str	r3, [r0, #0]
{
 8005c26:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 8005c28:	4ba2      	ldr	r3, [pc, #648]	; (8005eb4 <BSP_I2C4_Init+0x298>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	9200      	str	r2, [sp, #0]
 8005c2e:	2a00      	cmp	r2, #0
 8005c30:	f040 80cf 	bne.w	8005dd2 <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005c38:	f002 f9dc 	bl	8007ff4 <HAL_I2C_GetState>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 80c8 	bne.w	8005dd2 <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005c42:	4d9d      	ldr	r5, [pc, #628]	; (8005eb8 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c44:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005c48:	2702      	movs	r7, #2
 8005c4a:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005c4c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005c50:	a90d      	add	r1, sp, #52	; 0x34
 8005c52:	489a      	ldr	r0, [pc, #616]	; (8005ebc <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005c54:	f043 0308 	orr.w	r3, r3, #8
 8005c58:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c5c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	930a      	str	r3, [sp, #40]	; 0x28
 8005c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005c68:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c6c:	f043 0308 	orr.w	r3, r3, #8
 8005c70:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005c74:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c84:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c88:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005c8a:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005c8e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005c90:	f001 fca8 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005c98:	a90d      	add	r1, sp, #52	; 0x34
 8005c9a:	4888      	ldr	r0, [pc, #544]	; (8005ebc <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005c9c:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005c9e:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005ca2:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005ca4:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005ca8:	f001 fc9c 	bl	80075e4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005cac:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005cb8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8005cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8005cc4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005cd0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8005cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cd8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005cdc:	f003 fc0e 	bl	80094fc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d070      	beq.n	8005dc6 <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005ce4:	4b76      	ldr	r3, [pc, #472]	; (8005ec0 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005ce6:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005cea:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8005ec8 <BSP_I2C4_Init+0x2ac>
 8005cee:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005cf2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8005cf6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005cfa:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005cfe:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005d02:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005d04:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005d08:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005d0c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d14:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	4b6a      	ldr	r3, [pc, #424]	; (8005ec4 <BSP_I2C4_Init+0x2a8>)
 8005d1a:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005d1e:	9a00      	ldr	r2, [sp, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4696      	mov	lr, r2
{
 8005d24:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005d26:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005d28:	f240 3479 	movw	r4, #889	; 0x379
 8005d2c:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005d2e:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005d30:	45a4      	cmp	ip, r4
 8005d32:	d959      	bls.n	8005de8 <BSP_I2C4_Init+0x1cc>
 8005d34:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005d36:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005d38:	45ab      	cmp	fp, r5
 8005d3a:	d851      	bhi.n	8005de0 <BSP_I2C4_Init+0x1c4>
 8005d3c:	9c02      	ldr	r4, [sp, #8]
 8005d3e:	42ac      	cmp	r4, r5
 8005d40:	d34e      	bcc.n	8005de0 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 8005d42:	4590      	cmp	r8, r2
 8005d44:	d04c      	beq.n	8005de0 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005d46:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8005d4a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005d4c:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005d4e:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005d52:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005d54:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005d58:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005d5c:	d93d      	bls.n	8005dda <BSP_I2C4_Init+0x1be>
 8005d5e:	4a59      	ldr	r2, [pc, #356]	; (8005ec4 <BSP_I2C4_Init+0x2a8>)
 8005d60:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005d62:	4b58      	ldr	r3, [pc, #352]	; (8005ec4 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005d64:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d68:	4957      	ldr	r1, [pc, #348]	; (8005ec8 <BSP_I2C4_Init+0x2ac>)
 8005d6a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005d6c:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005d6e:	9203      	str	r2, [sp, #12]
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005d74:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005d76:	0043      	lsls	r3, r0, #1
 8005d78:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8005d7c:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 8005d80:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8005d84:	f10b 0b0c 	add.w	fp, fp, #12
 8005d88:	9409      	str	r4, [sp, #36]	; 0x24
 8005d8a:	3b0a      	subs	r3, #10
 8005d8c:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005d8e:	9b05      	ldr	r3, [sp, #20]
 8005d90:	429f      	cmp	r7, r3
 8005d92:	d134      	bne.n	8005dfe <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8005d94:	2a7f      	cmp	r2, #127	; 0x7f
 8005d96:	d816      	bhi.n	8005dc6 <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005d98:	2314      	movs	r3, #20
 8005d9a:	435a      	muls	r2, r3
 8005d9c:	4b4a      	ldr	r3, [pc, #296]	; (8005ec8 <BSP_I2C4_Init+0x2ac>)
 8005d9e:	1899      	adds	r1, r3, r2
 8005da0:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005da2:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005da4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005da8:	684b      	ldr	r3, [r1, #4]
 8005daa:	051b      	lsls	r3, r3, #20
 8005dac:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005db0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005db2:	688b      	ldr	r3, [r1, #8]
 8005db4:	041b      	lsls	r3, r3, #16
 8005db6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005dba:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005dbc:	68cb      	ldr	r3, [r1, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005dc2:	4323      	orrs	r3, r4
 8005dc4:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005dc6:	9900      	ldr	r1, [sp, #0]
 8005dc8:	4839      	ldr	r0, [pc, #228]	; (8005eb0 <BSP_I2C4_Init+0x294>)
 8005dca:	f7ff ff07 	bl	8005bdc <MX_I2C4_Init>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d169      	bne.n	8005ea6 <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 8005dd2:	2000      	movs	r0, #0
}
 8005dd4:	b013      	add	sp, #76	; 0x4c
 8005dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dda:	4690      	mov	r8, r2
 8005ddc:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005de0:	3701      	adds	r7, #1
 8005de2:	440d      	add	r5, r1
 8005de4:	2f10      	cmp	r7, #16
 8005de6:	d1a7      	bne.n	8005d38 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005de8:	2e10      	cmp	r6, #16
 8005dea:	448c      	add	ip, r1
 8005dec:	d19c      	bne.n	8005d28 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005dee:	3201      	adds	r2, #1
 8005df0:	4401      	add	r1, r0
 8005df2:	2a10      	cmp	r2, #16
 8005df4:	d196      	bne.n	8005d24 <BSP_I2C4_Init+0x108>
 8005df6:	f1be 0f00 	cmp.w	lr, #0
 8005dfa:	d1b0      	bne.n	8005d5e <BSP_I2C4_Init+0x142>
 8005dfc:	e7b1      	b.n	8005d62 <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005dfe:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005e00:	f04f 0c00 	mov.w	ip, #0
 8005e04:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005e06:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005e0a:	441c      	add	r4, r3
 8005e0c:	ebab 0503 	sub.w	r5, fp, r3
 8005e10:	9404      	str	r4, [sp, #16]
 8005e12:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005e14:	9d04      	ldr	r5, [sp, #16]
 8005e16:	9401      	str	r4, [sp, #4]
 8005e18:	9c02      	ldr	r4, [sp, #8]
 8005e1a:	441c      	add	r4, r3
 8005e1c:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005e1e:	f241 245c 	movw	r4, #4700	; 0x125c
 8005e22:	f8cd c018 	str.w	ip, [sp, #24]
 8005e26:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005e2a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005e2e:	42a5      	cmp	r5, r4
 8005e30:	d92e      	bls.n	8005e90 <BSP_I2C4_Init+0x274>
 8005e32:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005e36:	d22b      	bcs.n	8005e90 <BSP_I2C4_Init+0x274>
 8005e38:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005e3a:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005e3e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005e42:	1966      	adds	r6, r4, r5
 8005e44:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005e48:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8005e4c:	f241 0447 	movw	r4, #4167	; 0x1047
 8005e50:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005e54:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005e58:	45a2      	cmp	sl, r4
 8005e5a:	d812      	bhi.n	8005e82 <BSP_I2C4_Init+0x266>
 8005e5c:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8005e60:	d30f      	bcc.n	8005e82 <BSP_I2C4_Init+0x266>
 8005e62:	4540      	cmp	r0, r8
 8005e64:	d20d      	bcs.n	8005e82 <BSP_I2C4_Init+0x266>
              error = -error;
 8005e66:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005e6a:	bf28      	it	cs
 8005e6c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005e6e:	9c03      	ldr	r4, [sp, #12]
 8005e70:	45a2      	cmp	sl, r4
 8005e72:	d206      	bcs.n	8005e82 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8005e74:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8005e76:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8005e7a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005e7c:	9a07      	ldr	r2, [sp, #28]
 8005e7e:	60ca      	str	r2, [r1, #12]
 8005e80:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005e82:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8005e86:	eba9 0903 	sub.w	r9, r9, r3
 8005e8a:	441e      	add	r6, r3
 8005e8c:	4498      	add	r8, r3
 8005e8e:	d1db      	bne.n	8005e48 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005e90:	9c01      	ldr	r4, [sp, #4]
 8005e92:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8005e96:	441d      	add	r5, r3
 8005e98:	eba4 0403 	sub.w	r4, r4, r3
 8005e9c:	9401      	str	r4, [sp, #4]
 8005e9e:	d1be      	bne.n	8005e1e <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005ea0:	3701      	adds	r7, #1
 8005ea2:	3114      	adds	r1, #20
 8005ea4:	e773      	b.n	8005d8e <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 8005ea6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005eaa:	e793      	b.n	8005dd4 <BSP_I2C4_Init+0x1b8>
 8005eac:	58001c00 	.word	0x58001c00
 8005eb0:	2400655c 	.word	0x2400655c
 8005eb4:	24005b54 	.word	0x24005b54
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	58020c00 	.word	0x58020c00
 8005ec0:	3b9aca00 	.word	0x3b9aca00
 8005ec4:	24006558 	.word	0x24006558
 8005ec8:	24005b58 	.word	0x24005b58

08005ecc <BSP_I2C4_WriteReg>:
{
 8005ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005ece:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005ed2:	9200      	str	r2, [sp, #0]
 8005ed4:	460a      	mov	r2, r1
 8005ed6:	4601      	mov	r1, r0
 8005ed8:	4808      	ldr	r0, [pc, #32]	; (8005efc <BSP_I2C4_WriteReg+0x30>)
 8005eda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f001 fed0 	bl	8007c84 <HAL_I2C_Mem_Write>
 8005ee4:	b140      	cbz	r0, 8005ef8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005ee6:	4805      	ldr	r0, [pc, #20]	; (8005efc <BSP_I2C4_WriteReg+0x30>)
 8005ee8:	f002 f887 	bl	8007ffa <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005eec:	2804      	cmp	r0, #4
 8005eee:	bf0c      	ite	eq
 8005ef0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005ef4:	f06f 0003 	mvnne.w	r0, #3
}
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd10      	pop	{r4, pc}
 8005efc:	2400655c 	.word	0x2400655c

08005f00 <BSP_I2C4_ReadReg>:
{
 8005f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005f02:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005f06:	9200      	str	r2, [sp, #0]
 8005f08:	460a      	mov	r2, r1
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	4808      	ldr	r0, [pc, #32]	; (8005f30 <BSP_I2C4_ReadReg+0x30>)
 8005f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f12:	2301      	movs	r3, #1
 8005f14:	f001 ff90 	bl	8007e38 <HAL_I2C_Mem_Read>
 8005f18:	b140      	cbz	r0, 8005f2c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005f1a:	4805      	ldr	r0, [pc, #20]	; (8005f30 <BSP_I2C4_ReadReg+0x30>)
 8005f1c:	f002 f86d 	bl	8007ffa <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005f20:	2804      	cmp	r0, #4
 8005f22:	bf0c      	ite	eq
 8005f24:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8005f28:	f06f 0003 	mvnne.w	r0, #3
}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	bd10      	pop	{r4, pc}
 8005f30:	2400655c 	.word	0x2400655c

08005f34 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005f34:	f000 bd10 	b.w	8006958 <HAL_GetTick>

08005f38 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005f38:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005f3a:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 8005f3e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005f40:	684a      	ldr	r2, [r1, #4]
 8005f42:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005f44:	2201      	movs	r2, #1
 8005f46:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005f48:	688a      	ldr	r2, [r1, #8]
 8005f4a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005f4c:	680a      	ldr	r2, [r1, #0]
 8005f4e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005f50:	2200      	movs	r2, #0
 8005f52:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005f56:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005f58:	68ca      	ldr	r2, [r1, #12]
 8005f5a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005f5c:	f002 bbf8 	b.w	8008750 <HAL_QSPI_Init>
 8005f60:	52005000 	.word	0x52005000

08005f64 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005f64:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005f66:	b988      	cbnz	r0, 8005f8c <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005f68:	4c0a      	ldr	r4, [pc, #40]	; (8005f94 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005f6a:	480b      	ldr	r0, [pc, #44]	; (8005f98 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005f6c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005f6e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005f70:	b94b      	cbnz	r3, 8005f86 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005f72:	f7ff f9a5 	bl	80052c0 <MT25TL01G_EnableMemoryMappedModeSTR>
 8005f76:	b110      	cbz	r0, 8005f7e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f78:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005f7c:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005f7e:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005f80:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005f82:	7023      	strb	r3, [r4, #0]
 8005f84:	e7fa      	b.n	8005f7c <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005f86:	f7ff f951 	bl	800522c <MT25TL01G_EnableMemoryMappedModeDTR>
 8005f8a:	e7f4      	b.n	8005f76 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005f8c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005f90:	e7f4      	b.n	8005f7c <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005f92:	bf00      	nop
 8005f94:	240065b0 	.word	0x240065b0
 8005f98:	24000320 	.word	0x24000320

08005f9c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005fa2:	bb28      	cbnz	r0, 8005ff0 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005fa4:	4d17      	ldr	r5, [pc, #92]	; (8006004 <BSP_QSPI_ConfigFlash+0x68>)
 8005fa6:	782b      	ldrb	r3, [r5, #0]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d024      	beq.n	8005ff6 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005fac:	2a00      	cmp	r2, #0
 8005fae:	4e16      	ldr	r6, [pc, #88]	; (8006008 <BSP_QSPI_ConfigFlash+0x6c>)
 8005fb0:	bf08      	it	eq
 8005fb2:	2010      	moveq	r0, #16
 8005fb4:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f002 fbca 	bl	8008750 <HAL_QSPI_Init>
 8005fbc:	b9f0      	cbnz	r0, 8005ffc <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005fbe:	786b      	ldrb	r3, [r5, #1]
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d10f      	bne.n	8005fe4 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005fc4:	2c03      	cmp	r4, #3
 8005fc6:	d105      	bne.n	8005fd4 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005fc8:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005fca:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005fcc:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005fce:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005fd0:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f7ff f90d 	bl	80051f4 <MT25TL01G_ExitQPIMode>
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d0f4      	beq.n	8005fc8 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fde:	f06f 0004 	mvn.w	r0, #4
 8005fe2:	e7f6      	b.n	8005fd2 <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8005fe4:	2c03      	cmp	r4, #3
 8005fe6:	d1ef      	bne.n	8005fc8 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff f8e7 	bl	80051bc <MT25TL01G_EnterQPIMode>
 8005fee:	e7f4      	b.n	8005fda <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8005ff0:	f06f 0001 	mvn.w	r0, #1
 8005ff4:	e7ed      	b.n	8005fd2 <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005ff6:	f06f 0019 	mvn.w	r0, #25
 8005ffa:	e7ea      	b.n	8005fd2 <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005ffc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006000:	e7e7      	b.n	8005fd2 <BSP_QSPI_ConfigFlash+0x36>
 8006002:	bf00      	nop
 8006004:	240065b0 	.word	0x240065b0
 8006008:	24000320 	.word	0x24000320

0800600c <BSP_QSPI_Init>:
{
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460d      	mov	r5, r1
 8006012:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006014:	4604      	mov	r4, r0
 8006016:	2800      	cmp	r0, #0
 8006018:	f040 81ac 	bne.w	8006374 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800601c:	4e03      	ldr	r6, [pc, #12]	; (800602c <BSP_QSPI_Init+0x20>)
 800601e:	7833      	ldrb	r3, [r6, #0]
 8006020:	b133      	cbz	r3, 8006030 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8006022:	2000      	movs	r0, #0
}
 8006024:	b024      	add	sp, #144	; 0x90
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	bf00      	nop
 800602c:	240065b0 	.word	0x240065b0
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006030:	4bc2      	ldr	r3, [pc, #776]	; (800633c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006032:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006036:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006038:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 800603a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800603e:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006042:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800604a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800604e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006052:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800605a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800605c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8006062:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006068:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800606a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800606e:	f042 0202 	orr.w	r2, r2, #2
 8006072:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006076:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800607a:	f002 0202 	and.w	r2, r2, #2
 800607e:	9202      	str	r2, [sp, #8]
 8006080:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006082:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800608e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006092:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006096:	9203      	str	r2, [sp, #12]
 8006098:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800609a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800609e:	f042 0208 	orr.w	r2, r2, #8
 80060a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80060a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060aa:	f002 0208 	and.w	r2, r2, #8
 80060ae:	9204      	str	r2, [sp, #16]
 80060b0:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80060b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060b6:	f042 0220 	orr.w	r2, r2, #32
 80060ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80060be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060c2:	f002 0220 	and.w	r2, r2, #32
 80060c6:	9205      	str	r2, [sp, #20]
 80060c8:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80060ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060ce:	f042 0220 	orr.w	r2, r2, #32
 80060d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80060d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060da:	f002 0220 	and.w	r2, r2, #32
 80060de:	9206      	str	r2, [sp, #24]
 80060e0:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80060e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060e6:	f042 0220 	orr.w	r2, r2, #32
 80060ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80060ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060f2:	f002 0220 	and.w	r2, r2, #32
 80060f6:	9207      	str	r2, [sp, #28]
 80060f8:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80060fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80060fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006102:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006106:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800610a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800610e:	9208      	str	r2, [sp, #32]
 8006110:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8006112:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006116:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800611a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800611e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006122:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006126:	9209      	str	r2, [sp, #36]	; 0x24
 8006128:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800612a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800612e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006132:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006136:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800613a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800613e:	920a      	str	r2, [sp, #40]	; 0x28
 8006140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006142:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800614e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006152:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006156:	920b      	str	r2, [sp, #44]	; 0x2c
 8006158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800615a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800615e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006162:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800616a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616e:	930c      	str	r3, [sp, #48]	; 0x30
 8006170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006172:	2302      	movs	r3, #2
 8006174:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006178:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800617a:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800617c:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006180:	486f      	ldr	r0, [pc, #444]	; (8006340 <BSP_QSPI_Init+0x334>)
 8006182:	f001 fa2f 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006186:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006188:	a916      	add	r1, sp, #88	; 0x58
 800618a:	486e      	ldr	r0, [pc, #440]	; (8006344 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800618c:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800618e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006192:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006196:	f001 fa25 	bl	80075e4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800619a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800619e:	a916      	add	r1, sp, #88	; 0x58
 80061a0:	4869      	ldr	r0, [pc, #420]	; (8006348 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80061a2:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80061a4:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80061a6:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80061a8:	f001 fa1c 	bl	80075e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80061ac:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80061ae:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80061b2:	4866      	ldr	r0, [pc, #408]	; (800634c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80061b4:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80061b8:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80061ba:	f001 fa13 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80061be:	a916      	add	r1, sp, #88	; 0x58
 80061c0:	4863      	ldr	r0, [pc, #396]	; (8006350 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80061c2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80061c6:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80061ca:	f001 fa0b 	bl	80075e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80061ce:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80061d0:	a916      	add	r1, sp, #88	; 0x58
 80061d2:	485e      	ldr	r0, [pc, #376]	; (800634c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80061d4:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80061d6:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80061d8:	f001 fa04 	bl	80075e4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80061dc:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80061de:	a916      	add	r1, sp, #88	; 0x58
 80061e0:	485b      	ldr	r0, [pc, #364]	; (8006350 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80061e2:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80061e4:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80061e6:	f001 f9fd 	bl	80075e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80061ea:	a916      	add	r1, sp, #88	; 0x58
 80061ec:	4855      	ldr	r0, [pc, #340]	; (8006344 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80061ee:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80061f2:	f001 f9f7 	bl	80075e4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80061f6:	a916      	add	r1, sp, #88	; 0x58
 80061f8:	4855      	ldr	r0, [pc, #340]	; (8006350 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80061fa:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80061fe:	f001 f9f1 	bl	80075e4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006202:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006206:	a916      	add	r1, sp, #88	; 0x58
 8006208:	484e      	ldr	r0, [pc, #312]	; (8006344 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800620a:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800620c:	f001 f9ea 	bl	80075e4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006210:	4622      	mov	r2, r4
 8006212:	210f      	movs	r1, #15
 8006214:	205c      	movs	r0, #92	; 0x5c
 8006216:	f000 fbcf 	bl	80069b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800621a:	205c      	movs	r0, #92	; 0x5c
 800621c:	f000 fbfe 	bl	8006a1c <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8006220:	a811      	add	r0, sp, #68	; 0x44
 8006222:	f7fe ff22 	bl	800506a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006226:	786a      	ldrb	r2, [r5, #1]
 8006228:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800622a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800622e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006232:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006234:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006236:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800623a:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 800623c:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006240:	a90d      	add	r1, sp, #52	; 0x34
 8006242:	4845      	ldr	r0, [pc, #276]	; (8006358 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006244:	bf08      	it	eq
 8006246:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006248:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800624a:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800624c:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800624e:	f7ff fe73 	bl	8005f38 <MX_QSPI_Init>
 8006252:	2800      	cmp	r0, #0
 8006254:	f040 8091 	bne.w	800637a <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006258:	2103      	movs	r1, #3
 800625a:	483f      	ldr	r0, [pc, #252]	; (8006358 <BSP_QSPI_Init+0x34c>)
 800625c:	f7ff f876 	bl	800534c <MT25TL01G_ResetEnable>
 8006260:	2800      	cmp	r0, #0
 8006262:	d17c      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006264:	2103      	movs	r1, #3
 8006266:	483c      	ldr	r0, [pc, #240]	; (8006358 <BSP_QSPI_Init+0x34c>)
 8006268:	f7ff f891 	bl	800538e <MT25TL01G_ResetMemory>
 800626c:	2800      	cmp	r0, #0
 800626e:	d176      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006270:	7871      	ldrb	r1, [r6, #1]
 8006272:	4839      	ldr	r0, [pc, #228]	; (8006358 <BSP_QSPI_Init+0x34c>)
 8006274:	f7fe ff0a 	bl	800508c <MT25TL01G_AutoPollingMemReady>
 8006278:	4601      	mov	r1, r0
 800627a:	2800      	cmp	r0, #0
 800627c:	d16f      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800627e:	4836      	ldr	r0, [pc, #216]	; (8006358 <BSP_QSPI_Init+0x34c>)
 8006280:	f7ff f864 	bl	800534c <MT25TL01G_ResetEnable>
 8006284:	4601      	mov	r1, r0
 8006286:	2800      	cmp	r0, #0
 8006288:	d169      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800628a:	4833      	ldr	r0, [pc, #204]	; (8006358 <BSP_QSPI_Init+0x34c>)
 800628c:	f7ff f87f 	bl	800538e <MT25TL01G_ResetMemory>
 8006290:	4601      	mov	r1, r0
 8006292:	2800      	cmp	r0, #0
 8006294:	d163      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006296:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8006298:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800629a:	482f      	ldr	r0, [pc, #188]	; (8006358 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800629c:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800629e:	f7fe fef5 	bl	800508c <MT25TL01G_AutoPollingMemReady>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d15b      	bne.n	800635e <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062a6:	7871      	ldrb	r1, [r6, #1]
 80062a8:	482b      	ldr	r0, [pc, #172]	; (8006358 <BSP_QSPI_Init+0x34c>)
 80062aa:	f7fe ff5e 	bl	800516a <MT25TL01G_Enter4BytesAddressMode>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d155      	bne.n	800635e <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80062b2:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 80062b6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80062ba:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062bc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80062c0:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80062c2:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062c4:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80062c6:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80062c8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80062cc:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 80062ce:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80062d0:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80062d4:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80062d8:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062dc:	481e      	ldr	r0, [pc, #120]	; (8006358 <BSP_QSPI_Init+0x34c>)
 80062de:	f002 fa85 	bl	80087ec <HAL_QSPI_Command>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d13b      	bne.n	800635e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	f10d 0102 	add.w	r1, sp, #2
 80062ee:	481a      	ldr	r0, [pc, #104]	; (8006358 <BSP_QSPI_Init+0x34c>)
 80062f0:	f002 fb18 	bl	8008924 <HAL_QSPI_Receive>
 80062f4:	bb98      	cbnz	r0, 800635e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062f6:	7871      	ldrb	r1, [r6, #1]
 80062f8:	4817      	ldr	r0, [pc, #92]	; (8006358 <BSP_QSPI_Init+0x34c>)
 80062fa:	f7fe fef2 	bl	80050e2 <MT25TL01G_WriteEnable>
 80062fe:	bb70      	cbnz	r0, 800635e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8006300:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	a916      	add	r1, sp, #88	; 0x58
 8006308:	4813      	ldr	r0, [pc, #76]	; (8006358 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800630a:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800630c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006314:	051b      	lsls	r3, r3, #20
 8006316:	0d1b      	lsrs	r3, r3, #20
 8006318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006320:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006324:	f002 fa62 	bl	80087ec <HAL_QSPI_Command>
 8006328:	b9c8      	cbnz	r0, 800635e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800632a:	f241 3288 	movw	r2, #5000	; 0x1388
 800632e:	f10d 0102 	add.w	r1, sp, #2
 8006332:	4809      	ldr	r0, [pc, #36]	; (8006358 <BSP_QSPI_Init+0x34c>)
 8006334:	f002 fa9d 	bl	8008872 <HAL_QSPI_Transmit>
 8006338:	e010      	b.n	800635c <BSP_QSPI_Init+0x350>
 800633a:	bf00      	nop
 800633c:	58024400 	.word	0x58024400
 8006340:	58020400 	.word	0x58020400
 8006344:	58021800 	.word	0x58021800
 8006348:	58020c00 	.word	0x58020c00
 800634c:	58021c00 	.word	0x58021c00
 8006350:	58021400 	.word	0x58021400
 8006354:	08021b70 	.word	0x08021b70
 8006358:	24000320 	.word	0x24000320
 800635c:	b110      	cbz	r0, 8006364 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800635e:	f06f 0004 	mvn.w	r0, #4
 8006362:	e65f      	b.n	8006024 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006364:	786a      	ldrb	r2, [r5, #1]
 8006366:	7829      	ldrb	r1, [r5, #0]
 8006368:	f7ff fe18 	bl	8005f9c <BSP_QSPI_ConfigFlash>
 800636c:	2800      	cmp	r0, #0
 800636e:	f43f ae58 	beq.w	8006022 <BSP_QSPI_Init+0x16>
 8006372:	e7f4      	b.n	800635e <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 8006374:	f06f 0001 	mvn.w	r0, #1
 8006378:	e654      	b.n	8006024 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800637a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800637e:	e651      	b.n	8006024 <BSP_QSPI_Init+0x18>

08006380 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006380:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006382:	4604      	mov	r4, r0
 8006384:	b970      	cbnz	r0, 80063a4 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <BSP_SDRAM_DeInit+0x2c>)
 8006388:	4809      	ldr	r0, [pc, #36]	; (80063b0 <BSP_SDRAM_DeInit+0x30>)
 800638a:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800638c:	f003 ff3c 	bl	800a208 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006390:	207a      	movs	r0, #122	; 0x7a
 8006392:	f000 fb51 	bl	8006a38 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8006396:	4807      	ldr	r0, [pc, #28]	; (80063b4 <BSP_SDRAM_DeInit+0x34>)
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <BSP_SDRAM_DeInit+0x38>)
 800639a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800639c:	f002 f8a5 	bl	80084ea <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80063a0:	4620      	mov	r0, r4
}
 80063a2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80063a4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80063a8:	e7fb      	b.n	80063a2 <BSP_SDRAM_DeInit+0x22>
 80063aa:	bf00      	nop
 80063ac:	52004140 	.word	0x52004140
 80063b0:	240065bc 	.word	0x240065bc
 80063b4:	240065f0 	.word	0x240065f0
 80063b8:	52000040 	.word	0x52000040

080063bc <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80063bc:	2201      	movs	r2, #1
 80063be:	4915      	ldr	r1, [pc, #84]	; (8006414 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80063c0:	4b15      	ldr	r3, [pc, #84]	; (8006418 <MX_SDRAM_Init+0x5c>)
{
 80063c2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80063c4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80063c8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80063ca:	2104      	movs	r1, #4
 80063cc:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80063ce:	2440      	movs	r4, #64	; 0x40
{
 80063d0:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80063d2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80063d6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80063da:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80063de:	2200      	movs	r2, #0
 80063e0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80063e4:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80063e8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80063ec:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80063ee:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80063f0:	2207      	movs	r2, #7
 80063f2:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 80063f4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80063f8:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80063fa:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80063fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8006400:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006404:	f003 fed8 	bl	800a1b8 <HAL_SDRAM_Init>
}
 8006408:	3800      	subs	r0, #0
 800640a:	bf18      	it	ne
 800640c:	2001      	movne	r0, #1
 800640e:	b008      	add	sp, #32
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop
 8006414:	52004140 	.word	0x52004140
 8006418:	240065bc 	.word	0x240065bc

0800641c <BSP_SDRAM_Init>:
{
 800641c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800641e:	4605      	mov	r5, r0
{
 8006420:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006422:	2800      	cmp	r0, #0
 8006424:	f040 80dd 	bne.w	80065e2 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8006428:	4b71      	ldr	r3, [pc, #452]	; (80065f0 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800642a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800642c:	a909      	add	r1, sp, #36	; 0x24
 800642e:	4871      	ldr	r0, [pc, #452]	; (80065f4 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006430:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006434:	4c70      	ldr	r4, [pc, #448]	; (80065f8 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800643a:	4e70      	ldr	r6, [pc, #448]	; (80065fc <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800643c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006440:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006444:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006448:	9201      	str	r2, [sp, #4]
 800644a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800644c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006450:	f042 0201 	orr.w	r2, r2, #1
 8006454:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006458:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800645c:	f002 0201 	and.w	r2, r2, #1
 8006460:	9202      	str	r2, [sp, #8]
 8006462:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006464:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006468:	f042 0208 	orr.w	r2, r2, #8
 800646c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006470:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006474:	f002 0208 	and.w	r2, r2, #8
 8006478:	9203      	str	r2, [sp, #12]
 800647a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800647c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006480:	f042 0210 	orr.w	r2, r2, #16
 8006484:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006488:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800648c:	f002 0210 	and.w	r2, r2, #16
 8006490:	9204      	str	r2, [sp, #16]
 8006492:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006494:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006498:	f042 0220 	orr.w	r2, r2, #32
 800649c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80064a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064a4:	f002 0220 	and.w	r2, r2, #32
 80064a8:	9205      	str	r2, [sp, #20]
 80064aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80064ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80064b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064bc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80064c0:	9206      	str	r2, [sp, #24]
 80064c2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80064c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80064d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064d4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80064d8:	9207      	str	r2, [sp, #28]
 80064da:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80064dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80064e8:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80064ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	9308      	str	r3, [sp, #32]
 80064f4:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80064fc:	230c      	movs	r3, #12
 80064fe:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006502:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006506:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006508:	f001 f86c 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800650c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006510:	a909      	add	r1, sp, #36	; 0x24
 8006512:	483b      	ldr	r0, [pc, #236]	; (8006600 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006514:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006516:	f001 f865 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800651a:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800651e:	a909      	add	r1, sp, #36	; 0x24
 8006520:	4838      	ldr	r0, [pc, #224]	; (8006604 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006522:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006524:	f001 f85e 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006528:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800652c:	a909      	add	r1, sp, #36	; 0x24
 800652e:	4836      	ldr	r0, [pc, #216]	; (8006608 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006532:	f001 f857 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006536:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800653a:	a909      	add	r1, sp, #36	; 0x24
 800653c:	4833      	ldr	r0, [pc, #204]	; (800660c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800653e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006540:	f001 f850 	bl	80075e4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006544:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006548:	a909      	add	r1, sp, #36	; 0x24
 800654a:	4831      	ldr	r0, [pc, #196]	; (8006610 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800654e:	f001 f849 	bl	80075e4 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006556:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800655a:	f240 2002 	movw	r0, #514	; 0x202
 800655e:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006562:	6334      	str	r4, [r6, #48]	; 0x30
 8006564:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006566:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800656a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800656e:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006570:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006572:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006574:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006576:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800657a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800657e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006584:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006586:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006588:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800658c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006590:	f001 ffab 	bl	80084ea <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006594:	4620      	mov	r0, r4
 8006596:	f001 ff39 	bl	800840c <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800659a:	462a      	mov	r2, r5
 800659c:	210f      	movs	r1, #15
 800659e:	207a      	movs	r0, #122	; 0x7a
 80065a0:	f000 fa0a 	bl	80069b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80065a4:	207a      	movs	r0, #122	; 0x7a
 80065a6:	f000 fa39 	bl	8006a1c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ff06 	bl	80063bc <MX_SDRAM_Init>
 80065b0:	b9d0      	cbnz	r0, 80065e8 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80065b2:	4919      	ldr	r1, [pc, #100]	; (8006618 <BSP_SDRAM_Init+0x1fc>)
 80065b4:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80065b6:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80065ba:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80065be:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80065c0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80065c4:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80065c6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80065ca:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80065ce:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80065d0:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80065d2:	f7fe fd1d 	bl	8005010 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80065d6:	2800      	cmp	r0, #0
 80065d8:	bf18      	it	ne
 80065da:	f06f 0004 	mvnne.w	r0, #4
}
 80065de:	b00f      	add	sp, #60	; 0x3c
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80065e2:	f06f 0001 	mvn.w	r0, #1
 80065e6:	e7fa      	b.n	80065de <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e7f7      	b.n	80065de <BSP_SDRAM_Init+0x1c2>
 80065ee:	bf00      	nop
 80065f0:	58024400 	.word	0x58024400
 80065f4:	58020c00 	.word	0x58020c00
 80065f8:	2400665c 	.word	0x2400665c
 80065fc:	240065bc 	.word	0x240065bc
 8006600:	58021000 	.word	0x58021000
 8006604:	58021400 	.word	0x58021400
 8006608:	58021800 	.word	0x58021800
 800660c:	58021c00 	.word	0x58021c00
 8006610:	58022000 	.word	0x58022000
 8006614:	52000040 	.word	0x52000040
 8006618:	240066c8 	.word	0x240066c8

0800661c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800661c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	460c      	mov	r4, r1
 8006622:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006624:	4606      	mov	r6, r0
 8006626:	2800      	cmp	r0, #0
 8006628:	d171      	bne.n	800670e <BSP_TS_Init+0xf2>
 800662a:	680b      	ldr	r3, [r1, #0]
 800662c:	1e5a      	subs	r2, r3, #1
 800662e:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8006632:	d26c      	bcs.n	800670e <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006634:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006636:	1e51      	subs	r1, r2, #1
 8006638:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800663c:	d267      	bcs.n	800670e <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800663e:	4293      	cmp	r3, r2
 8006640:	bf28      	it	cs
 8006642:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006644:	68e2      	ldr	r2, [r4, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d861      	bhi.n	800670e <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800664a:	2370      	movs	r3, #112	; 0x70
 800664c:	2254      	movs	r2, #84	; 0x54
 800664e:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006652:	4f32      	ldr	r7, [pc, #200]	; (800671c <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006654:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800673c <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006658:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006740 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800665c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8006660:	4b2f      	ldr	r3, [pc, #188]	; (8006720 <BSP_TS_Init+0x104>)
 8006662:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <BSP_TS_Init+0x108>)
 8006666:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006668:	4b2f      	ldr	r3, [pc, #188]	; (8006728 <BSP_TS_Init+0x10c>)
 800666a:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800666c:	4b2f      	ldr	r3, [pc, #188]	; (800672c <BSP_TS_Init+0x110>)
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8006670:	4b2f      	ldr	r3, [pc, #188]	; (8006730 <BSP_TS_Init+0x114>)
 8006672:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006674:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006678:	a906      	add	r1, sp, #24
 800667a:	4828      	ldr	r0, [pc, #160]	; (800671c <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800667c:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006680:	f7fe fbcc 	bl	8004e1c <FT6X06_RegisterBusIO>
 8006684:	b118      	cbz	r0, 800668e <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 8006686:	2e01      	cmp	r6, #1
 8006688:	d044      	beq.n	8006714 <BSP_TS_Init+0xf8>
 800668a:	2601      	movs	r6, #1
 800668c:	e7f2      	b.n	8006674 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800668e:	4669      	mov	r1, sp
 8006690:	4638      	mov	r0, r7
 8006692:	f7fe fb0c 	bl	8004cae <FT6X06_ReadID>
 8006696:	2800      	cmp	r0, #0
 8006698:	d1f5      	bne.n	8006686 <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	2b11      	cmp	r3, #17
 800669e:	d1f2      	bne.n	8006686 <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80066a0:	a903      	add	r1, sp, #12
 80066a2:	4638      	mov	r0, r7
 80066a4:	f7fe fab0 	bl	8004c08 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80066a8:	4b22      	ldr	r3, [pc, #136]	; (8006734 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80066aa:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 80066ac:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80066b0:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4798      	blx	r3
 80066b8:	4605      	mov	r5, r0
 80066ba:	2800      	cmp	r0, #0
 80066bc:	d1e3      	bne.n	8006686 <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80066be:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80066c0:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80066c2:	4e1d      	ldr	r6, [pc, #116]	; (8006738 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80066c4:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80066c8:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80066ca:	6863      	ldr	r3, [r4, #4]
 80066cc:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80066d2:	68e3      	ldr	r3, [r4, #12]
 80066d4:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80066d6:	f8d9 3000 	ldr.w	r3, [r9]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	4798      	blx	r3
 80066de:	2800      	cmp	r0, #0
 80066e0:	da02      	bge.n	80066e8 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066e2:	f06f 0504 	mvn.w	r5, #4
 80066e6:	e00e      	b.n	8006706 <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80066e8:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80066ea:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80066ec:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80066ee:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80066f0:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80066f2:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80066f4:	68e3      	ldr	r3, [r4, #12]
 80066f6:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80066f8:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80066fa:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80066fc:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80066fe:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006700:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006702:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006706:	4628      	mov	r0, r5
 8006708:	b00c      	add	sp, #48	; 0x30
 800670a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800670e:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006712:	e7f8      	b.n	8006706 <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8006714:	f04f 35ff 	mov.w	r5, #4294967295
 8006718:	e7f5      	b.n	8006706 <BSP_TS_Init+0xea>
 800671a:	bf00      	nop
 800671c:	240066e8 	.word	0x240066e8
 8006720:	08005c1d 	.word	0x08005c1d
 8006724:	08005b89 	.word	0x08005b89
 8006728:	08005f01 	.word	0x08005f01
 800672c:	08005ecd 	.word	0x08005ecd
 8006730:	08005f35 	.word	0x08005f35
 8006734:	2400001c 	.word	0x2400001c
 8006738:	24006714 	.word	0x24006714
 800673c:	24006710 	.word	0x24006710
 8006740:	2400673c 	.word	0x2400673c

08006744 <BSP_TS_GetState>:
{
 8006744:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006748:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 800674a:	2800      	cmp	r0, #0
 800674c:	d151      	bne.n	80067f2 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800674e:	4b2a      	ldr	r3, [pc, #168]	; (80067f8 <BSP_TS_GetState+0xb4>)
 8006750:	a901      	add	r1, sp, #4
 8006752:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <BSP_TS_GetState+0xb8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6810      	ldr	r0, [r2, #0]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	4798      	blx	r3
 800675c:	2800      	cmp	r0, #0
 800675e:	db45      	blt.n	80067ec <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006760:	4927      	ldr	r1, [pc, #156]	; (8006800 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 8006762:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006764:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006768:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 800676a:	2800      	cmp	r0, #0
 800676c:	d03a      	beq.n	80067e4 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800676e:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006770:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006774:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006776:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 800677a:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800677e:	bf42      	ittt	mi
 8006780:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 8006782:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8006784:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006786:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006788:	bf44      	itt	mi
 800678a:	f108 34ff 	addmi.w	r4, r8, #4294967295
 800678e:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006790:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006792:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006794:	bf48      	it	mi
 8006796:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800679a:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800679e:	bf48      	it	mi
 80067a0:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80067a2:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80067a4:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80067a6:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80067a8:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80067aa:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80067ae:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80067b2:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80067b4:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80067b6:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80067b8:	bf8c      	ite	hi
 80067ba:	eba4 050c 	subhi.w	r5, r4, ip
 80067be:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80067c2:	42bb      	cmp	r3, r7
 80067c4:	bf8c      	ite	hi
 80067c6:	1bda      	subhi	r2, r3, r7
 80067c8:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80067ca:	42a8      	cmp	r0, r5
 80067cc:	d301      	bcc.n	80067d2 <BSP_TS_GetState+0x8e>
 80067ce:	4290      	cmp	r0, r2
 80067d0:	d205      	bcs.n	80067de <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80067d2:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80067d4:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80067d6:	2000      	movs	r0, #0
}
 80067d8:	b004      	add	sp, #16
 80067da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80067de:	e9c6 c701 	strd	ip, r7, [r6, #4]
 80067e2:	e7f8      	b.n	80067d6 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80067e4:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80067e8:	60b7      	str	r7, [r6, #8]
 80067ea:	e7f5      	b.n	80067d8 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80067ec:	f06f 0004 	mvn.w	r0, #4
 80067f0:	e7f2      	b.n	80067d8 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80067f2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80067f6:	e7ef      	b.n	80067d8 <BSP_TS_GetState+0x94>
 80067f8:	2400673c 	.word	0x2400673c
 80067fc:	24006710 	.word	0x24006710
 8006800:	24006714 	.word	0x24006714

08006804 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006804:	4b2d      	ldr	r3, [pc, #180]	; (80068bc <SystemInit+0xb8>)
 8006806:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800680a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800680e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	f042 0210 	orr.w	r2, r2, #16
 8006818:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800681a:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <SystemInit+0xbc>)
 800681c:	6813      	ldr	r3, [r2, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	2b06      	cmp	r3, #6
 8006824:	d805      	bhi.n	8006832 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	f023 030f 	bic.w	r3, r3, #15
 800682c:	f043 0307 	orr.w	r3, r3, #7
 8006830:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <SystemInit+0xc0>)
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800683c:	2200      	movs	r2, #0
 800683e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006840:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <SystemInit+0xc4>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006846:	491e      	ldr	r1, [pc, #120]	; (80068c0 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006848:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800684a:	680a      	ldr	r2, [r1, #0]
 800684c:	0712      	lsls	r2, r2, #28
 800684e:	d505      	bpl.n	800685c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006850:	680a      	ldr	r2, [r1, #0]
 8006852:	f022 020f 	bic.w	r2, r2, #15
 8006856:	f042 0207 	orr.w	r2, r2, #7
 800685a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800685c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800685e:	491b      	ldr	r1, [pc, #108]	; (80068cc <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006860:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006862:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006864:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006866:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006868:	4919      	ldr	r1, [pc, #100]	; (80068d0 <SystemInit+0xcc>)
 800686a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800686c:	4919      	ldr	r1, [pc, #100]	; (80068d4 <SystemInit+0xd0>)
 800686e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006872:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006874:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006876:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006878:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800687a:	6819      	ldr	r1, [r3, #0]
 800687c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006880:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006882:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006888:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800688c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006890:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <SystemInit+0xd4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	0c1b      	lsrs	r3, r3, #16
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a0:	d203      	bcs.n	80068aa <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80068a2:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <SystemInit+0xd8>)
 80068a4:	2201      	movs	r2, #1
 80068a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <SystemInit+0xdc>)
 80068ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80068b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80068b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80068b6:	4b01      	ldr	r3, [pc, #4]	; (80068bc <SystemInit+0xb8>)
 80068b8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80068ba:	4770      	bx	lr
 80068bc:	e000ed00 	.word	0xe000ed00
 80068c0:	52002000 	.word	0x52002000
 80068c4:	58024400 	.word	0x58024400
 80068c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80068cc:	02020200 	.word	0x02020200
 80068d0:	01ff0000 	.word	0x01ff0000
 80068d4:	01010280 	.word	0x01010280
 80068d8:	5c001000 	.word	0x5c001000
 80068dc:	51008000 	.word	0x51008000
 80068e0:	52004000 	.word	0x52004000

080068e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068e6:	2003      	movs	r0, #3
 80068e8:	f000 f854 	bl	8006994 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068ec:	f002 fc0c 	bl	8009108 <HAL_RCC_GetSysClockFreq>
 80068f0:	490f      	ldr	r1, [pc, #60]	; (8006930 <HAL_Init+0x4c>)
 80068f2:	4a10      	ldr	r2, [pc, #64]	; (8006934 <HAL_Init+0x50>)
 80068f4:	698b      	ldr	r3, [r1, #24]
 80068f6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80068fa:	5cd3      	ldrb	r3, [r2, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006902:	698b      	ldr	r3, [r1, #24]
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	5cd3      	ldrb	r3, [r2, r3]
 800690a:	4a0b      	ldr	r2, [pc, #44]	; (8006938 <HAL_Init+0x54>)
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	fa20 f303 	lsr.w	r3, r0, r3
 8006914:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_Init+0x58>)
 8006918:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800691a:	2000      	movs	r0, #0
 800691c:	f7fa fd78 	bl	8001410 <HAL_InitTick>
 8006920:	4604      	mov	r4, r0
 8006922:	b918      	cbnz	r0, 800692c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006924:	f7fa fafc 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006928:	4620      	mov	r0, r4
 800692a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800692c:	2401      	movs	r4, #1
 800692e:	e7fb      	b.n	8006928 <HAL_Init+0x44>
 8006930:	58024400 	.word	0x58024400
 8006934:	08021b78 	.word	0x08021b78
 8006938:	24000050 	.word	0x24000050
 800693c:	2400004c 	.word	0x2400004c

08006940 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006940:	4a03      	ldr	r2, [pc, #12]	; (8006950 <HAL_IncTick+0x10>)
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <HAL_IncTick+0x14>)
 8006944:	6811      	ldr	r1, [r2, #0]
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	440b      	add	r3, r1
 800694a:	6013      	str	r3, [r2, #0]
}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	24006740 	.word	0x24006740
 8006954:	24000054 	.word	0x24000054

08006958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006958:	4b01      	ldr	r3, [pc, #4]	; (8006960 <HAL_GetTick+0x8>)
 800695a:	6818      	ldr	r0, [r3, #0]
}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	24006740 	.word	0x24006740

08006964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006968:	f7ff fff6 	bl	8006958 <HAL_GetTick>
 800696c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800696e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006970:	bf1e      	ittt	ne
 8006972:	4b04      	ldrne	r3, [pc, #16]	; (8006984 <HAL_Delay+0x20>)
 8006974:	781b      	ldrbne	r3, [r3, #0]
 8006976:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006978:	f7ff ffee 	bl	8006958 <HAL_GetTick>
 800697c:	1b43      	subs	r3, r0, r5
 800697e:	42a3      	cmp	r3, r4
 8006980:	d3fa      	bcc.n	8006978 <HAL_Delay+0x14>
  {
  }
}
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	24000054 	.word	0x24000054

08006988 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <HAL_GetREVID+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
}
 800698c:	0c00      	lsrs	r0, r0, #16
 800698e:	4770      	bx	lr
 8006990:	5c001000 	.word	0x5c001000

08006994 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006996:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006998:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800699a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800699e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a2:	0412      	lsls	r2, r2, #16
 80069a4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80069b0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80069b2:	4770      	bx	lr
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069b8:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069ba:	b530      	push	{r4, r5, lr}
 80069bc:	68dc      	ldr	r4, [r3, #12]
 80069be:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069c2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069c6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069c8:	2d04      	cmp	r5, #4
 80069ca:	bf28      	it	cs
 80069cc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069ce:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069d4:	bf8c      	ite	hi
 80069d6:	3c03      	subhi	r4, #3
 80069d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069da:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80069de:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069e0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069e8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069ec:	fa01 f104 	lsl.w	r1, r1, r4
 80069f0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80069f8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80069fa:	db06      	blt.n	8006a0a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006a00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006a04:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006a08:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0a:	f000 000f 	and.w	r0, r0, #15
 8006a0e:	4a02      	ldr	r2, [pc, #8]	; (8006a18 <HAL_NVIC_SetPriority+0x60>)
 8006a10:	5413      	strb	r3, [r2, r0]
 8006a12:	e7f9      	b.n	8006a08 <HAL_NVIC_SetPriority+0x50>
 8006a14:	e000ed00 	.word	0xe000ed00
 8006a18:	e000ed14 	.word	0xe000ed14

08006a1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	db08      	blt.n	8006a32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a20:	2301      	movs	r3, #1
 8006a22:	0942      	lsrs	r2, r0, #5
 8006a24:	f000 001f 	and.w	r0, r0, #31
 8006a28:	fa03 f000 	lsl.w	r0, r3, r0
 8006a2c:	4b01      	ldr	r3, [pc, #4]	; (8006a34 <HAL_NVIC_EnableIRQ+0x18>)
 8006a2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006a32:	4770      	bx	lr
 8006a34:	e000e100 	.word	0xe000e100

08006a38 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	db0d      	blt.n	8006a58 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a3c:	0943      	lsrs	r3, r0, #5
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f000 001f 	and.w	r0, r0, #31
 8006a44:	3320      	adds	r3, #32
 8006a46:	fa02 f000 	lsl.w	r0, r2, r0
 8006a4a:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <HAL_NVIC_DisableIRQ+0x24>)
 8006a4c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a54:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	e000e100 	.word	0xe000e100

08006a60 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006a60:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <HAL_MPU_Disable+0x18>)
 8006a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	e000ed00 	.word	0xe000ed00

08006a7c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <HAL_MPU_Enable+0x1c>)
 8006a7e:	f040 0001 	orr.w	r0, r0, #1
 8006a82:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a8c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a92:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006a96:	4770      	bx	lr
 8006a98:	e000ed00 	.word	0xe000ed00

08006a9c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006a9c:	7843      	ldrb	r3, [r0, #1]
 8006a9e:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <HAL_MPU_ConfigRegion+0x54>)
{
 8006aa0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006aa2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006aa6:	7801      	ldrb	r1, [r0, #0]
 8006aa8:	b1e9      	cbz	r1, 8006ae6 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006aaa:	6843      	ldr	r3, [r0, #4]
 8006aac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ab0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ab2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006ab4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ab6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006aba:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006abc:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006abe:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006ac2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ac4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006ac8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006aca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006ace:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006ad4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006ad6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ada:	7a01      	ldrb	r1, [r0, #8]
 8006adc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ae0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006ae4:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8006ae6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006aea:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8006aee:	e7f9      	b.n	8006ae4 <HAL_MPU_ConfigRegion+0x48>
 8006af0:	e000ed00 	.word	0xe000ed00

08006af4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006af4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006af6:	4604      	mov	r4, r0
 8006af8:	b908      	cbnz	r0, 8006afe <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006afa:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006afc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006afe:	7f43      	ldrb	r3, [r0, #29]
 8006b00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b04:	b913      	cbnz	r3, 8006b0c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006b06:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006b08:	f7fa fa22 	bl	8000f50 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b10:	7923      	ldrb	r3, [r4, #4]
 8006b12:	b9e3      	cbnz	r3, 8006b4e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	4a13      	ldr	r2, [pc, #76]	; (8006b64 <HAL_CRC_Init+0x70>)
 8006b18:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	f022 0218 	bic.w	r2, r2, #24
 8006b20:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b22:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b24:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b26:	b9d2      	cbnz	r2, 8006b5e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b2c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006b2e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	6961      	ldr	r1, [r4, #20]
 8006b34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b38:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b3a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b3c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b44:	430a      	orrs	r2, r1
 8006b46:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006b4c:	e7d6      	b.n	8006afc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b4e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 f808 	bl	8006b68 <HAL_CRCEx_Polynomial_Set>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d0e2      	beq.n	8006b22 <HAL_CRC_Init+0x2e>
 8006b5c:	e7cd      	b.n	8006afa <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b5e:	6922      	ldr	r2, [r4, #16]
 8006b60:	e7e4      	b.n	8006b2c <HAL_CRC_Init+0x38>
 8006b62:	bf00      	nop
 8006b64:	04c11db7 	.word	0x04c11db7

08006b68 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b68:	07cb      	lsls	r3, r1, #31
{
 8006b6a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006b6c:	d50c      	bpl.n	8006b88 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006b6e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006b70:	3b01      	subs	r3, #1
 8006b72:	d31c      	bcc.n	8006bae <HAL_CRCEx_Polynomial_Set+0x46>
 8006b74:	fa21 f403 	lsr.w	r4, r1, r3
 8006b78:	07e4      	lsls	r4, r4, #31
 8006b7a:	d5f9      	bpl.n	8006b70 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006b7c:	2a10      	cmp	r2, #16
 8006b7e:	d012      	beq.n	8006ba6 <HAL_CRCEx_Polynomial_Set+0x3e>
 8006b80:	d804      	bhi.n	8006b8c <HAL_CRCEx_Polynomial_Set+0x24>
 8006b82:	b13a      	cbz	r2, 8006b94 <HAL_CRCEx_Polynomial_Set+0x2c>
 8006b84:	2a08      	cmp	r2, #8
 8006b86:	d010      	beq.n	8006baa <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8006b88:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006b8a:	e00b      	b.n	8006ba4 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8006b8c:	2a18      	cmp	r2, #24
 8006b8e:	d1fb      	bne.n	8006b88 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 8006b90:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 8006b92:	d8f9      	bhi.n	8006b88 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006b94:	6800      	ldr	r0, [r0, #0]
 8006b96:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006b98:	6883      	ldr	r3, [r0, #8]
 8006b9a:	f023 0318 	bic.w	r3, r3, #24
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	6082      	str	r2, [r0, #8]
 8006ba2:	2000      	movs	r0, #0
}
 8006ba4:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8006ba6:	2b07      	cmp	r3, #7
 8006ba8:	e7f3      	b.n	8006b92 <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8006baa:	2b0f      	cmp	r3, #15
 8006bac:	e7f1      	b.n	8006b92 <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	d1ea      	bne.n	8006b88 <HAL_CRCEx_Polynomial_Set+0x20>
 8006bb2:	e7ef      	b.n	8006b94 <HAL_CRCEx_Polynomial_Set+0x2c>

08006bb4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006bb4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d036      	beq.n	8006c2a <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006bbc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006bc0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006bc4:	b91b      	cbnz	r3, 8006bce <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006bc6:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006bca:	f7fa f9d9 	bl	8000f80 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006bce:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006bd0:	69e0      	ldr	r0, [r4, #28]
 8006bd2:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006bd4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006bdc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006bde:	6819      	ldr	r1, [r3, #0]
 8006be0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006be4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006bec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bee:	68a2      	ldr	r2, [r4, #8]
 8006bf0:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8006bf4:	4302      	orrs	r2, r0
 8006bf6:	f021 0101 	bic.w	r1, r1, #1
 8006bfa:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006bfc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006bfe:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c02:	0c12      	lsrs	r2, r2, #16
 8006c04:	0412      	lsls	r2, r2, #16
 8006c06:	430a      	orrs	r2, r1
 8006c08:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006c0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c0c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006c10:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006c14:	0552      	lsls	r2, r2, #21
 8006c16:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006c1a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006c20:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006c22:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006c24:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006c28:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	e7fc      	b.n	8006c28 <HAL_DMA2D_Init+0x74>

08006c2e <HAL_DMA2D_LineEventCallback>:
 8006c2e:	4770      	bx	lr

08006c30 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8006c30:	4770      	bx	lr

08006c32 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c32:	6803      	ldr	r3, [r0, #0]
{
 8006c34:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c36:	685e      	ldr	r6, [r3, #4]
{
 8006c38:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006c3a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006c3c:	07f2      	lsls	r2, r6, #31
 8006c3e:	d514      	bpl.n	8006c6a <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006c40:	05e9      	lsls	r1, r5, #23
 8006c42:	d512      	bpl.n	8006c6a <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006c4c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006c54:	2201      	movs	r2, #1
 8006c56:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006c64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c66:	b103      	cbz	r3, 8006c6a <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c6a:	06b2      	lsls	r2, r6, #26
 8006c6c:	d516      	bpl.n	8006c9c <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006c6e:	04ab      	lsls	r3, r5, #18
 8006c70:	d514      	bpl.n	8006c9c <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c82:	f043 0302 	orr.w	r3, r3, #2
 8006c86:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c96:	b10b      	cbz	r3, 8006c9c <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c9c:	0730      	lsls	r0, r6, #28
 8006c9e:	d516      	bpl.n	8006cce <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006ca0:	0529      	lsls	r1, r5, #20
 8006ca2:	d514      	bpl.n	8006cce <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006cae:	2208      	movs	r2, #8
 8006cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cb4:	f043 0304 	orr.w	r3, r3, #4
 8006cb8:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cba:	2304      	movs	r3, #4
 8006cbc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cc8:	b10b      	cbz	r3, 8006cce <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006cce:	0772      	lsls	r2, r6, #29
 8006cd0:	d50b      	bpl.n	8006cea <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006cd2:	056b      	lsls	r3, r5, #21
 8006cd4:	d509      	bpl.n	8006cea <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006cd6:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006cd8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006ce2:	2204      	movs	r2, #4
 8006ce4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006ce6:	f7ff ffa2 	bl	8006c2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006cea:	07b0      	lsls	r0, r6, #30
 8006cec:	d514      	bpl.n	8006d18 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006cee:	05a9      	lsls	r1, r5, #22
 8006cf0:	d512      	bpl.n	8006d18 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cfa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d02:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8006d10:	6a23      	ldr	r3, [r4, #32]
 8006d12:	b10b      	cbz	r3, 8006d18 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006d14:	4620      	mov	r0, r4
 8006d16:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006d18:	06f2      	lsls	r2, r6, #27
 8006d1a:	d513      	bpl.n	8006d44 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006d1c:	04eb      	lsls	r3, r5, #19
 8006d1e:	d511      	bpl.n	8006d44 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006d20:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006d22:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006d2c:	2210      	movs	r2, #16
 8006d2e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d32:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006d40:	f7ff ff76 	bl	8006c30 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006d44:	bd70      	pop	{r4, r5, r6, pc}

08006d46 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	460d      	mov	r5, r1
 8006d4e:	4614      	mov	r4, r2
 8006d50:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d52:	f7ff fe01 	bl	8006958 <HAL_GetTick>
 8006d56:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006d5c:	07d2      	lsls	r2, r2, #31
 8006d5e:	d50a      	bpl.n	8006d76 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006d60:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006d64:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8006d66:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006d68:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8006d6c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006d70:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8006d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d76:	f7ff fdef 	bl	8006958 <HAL_GetTick>
 8006d7a:	eba0 0008 	sub.w	r0, r0, r8
 8006d7e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d82:	d9e9      	bls.n	8006d58 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8006d84:	2003      	movs	r0, #3
 8006d86:	e7f4      	b.n	8006d72 <DSI_ShortWrite+0x2c>

08006d88 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006d88:	7c03      	ldrb	r3, [r0, #16]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d05c      	beq.n	8006e48 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006d8e:	2200      	movs	r2, #0
 8006d90:	6803      	ldr	r3, [r0, #0]
 8006d92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006d96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006d9a:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006d9c:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006d9e:	d507      	bpl.n	8006db0 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006da0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006da4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8006da8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8006dac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006db0:	078a      	lsls	r2, r1, #30
 8006db2:	d505      	bpl.n	8006dc0 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006db4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8006db8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8006dbc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006dc0:	074a      	lsls	r2, r1, #29
 8006dc2:	d505      	bpl.n	8006dd0 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006dc4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006dd0:	070a      	lsls	r2, r1, #28
 8006dd2:	d505      	bpl.n	8006de0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006dd4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006dd8:	f042 0202 	orr.w	r2, r2, #2
 8006ddc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006de0:	06ca      	lsls	r2, r1, #27
 8006de2:	d505      	bpl.n	8006df0 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006de4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006de8:	f042 020c 	orr.w	r2, r2, #12
 8006dec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006df0:	068a      	lsls	r2, r1, #26
 8006df2:	d505      	bpl.n	8006e00 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006df4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006df8:	f042 0210 	orr.w	r2, r2, #16
 8006dfc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006e00:	064a      	lsls	r2, r1, #25
 8006e02:	d505      	bpl.n	8006e10 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006e04:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006e08:	f042 0220 	orr.w	r2, r2, #32
 8006e0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006e10:	060a      	lsls	r2, r1, #24
 8006e12:	d505      	bpl.n	8006e20 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006e14:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006e20:	05ca      	lsls	r2, r1, #23
 8006e22:	d505      	bpl.n	8006e30 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006e24:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006e28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006e30:	058a      	lsls	r2, r1, #22
 8006e32:	d505      	bpl.n	8006e40 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006e34:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8006e38:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8006e3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006e40:	2300      	movs	r3, #0
 8006e42:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006e44:	4618      	mov	r0, r3
 8006e46:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006e48:	2002      	movs	r0, #2
}
 8006e4a:	4770      	bx	lr

08006e4c <HAL_DSI_Init>:
{
 8006e4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e4e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006e50:	4604      	mov	r4, r0
 8006e52:	2800      	cmp	r0, #0
 8006e54:	f000 80a9 	beq.w	8006faa <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006e58:	7c43      	ldrb	r3, [r0, #17]
 8006e5a:	b90b      	cbnz	r3, 8006e60 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006e5c:	f7fa f8b4 	bl	8000fc8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006e60:	2303      	movs	r3, #3
 8006e62:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006e64:	2300      	movs	r3, #0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8006e6e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006e72:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8006e76:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8006e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006e82:	f7ff fd69 	bl	8006958 <HAL_GetTick>
 8006e86:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006e88:	6822      	ldr	r2, [r4, #0]
 8006e8a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8006e8e:	04d9      	lsls	r1, r3, #19
 8006e90:	d57a      	bpl.n	8006f88 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006e92:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006e96:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8006e9a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8006e9e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006ea2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006ea6:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006eaa:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006eac:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006eb0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006eb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006eb6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9301      	str	r3, [sp, #4]
 8006ec2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006ec6:	f043 0301 	orr.w	r3, r3, #1
 8006eca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8006ece:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006eda:	f7ff fd43 	bl	8006964 <HAL_Delay>
  tickstart = HAL_GetTick();
 8006ede:	f7ff fd3b 	bl	8006958 <HAL_GetTick>
 8006ee2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006eea:	05d2      	lsls	r2, r2, #23
 8006eec:	d556      	bpl.n	8006f9c <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006eee:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006ef2:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006ef6:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006ef8:	f042 0206 	orr.w	r2, r2, #6
 8006efc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006f00:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006f04:	f022 0203 	bic.w	r2, r2, #3
 8006f08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006f0c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8006f10:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006f12:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006f14:	f042 0201 	orr.w	r2, r2, #1
 8006f18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006f1c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006f20:	f022 0203 	bic.w	r2, r2, #3
 8006f24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006f28:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006f2c:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006f2e:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006f30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006f3a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006f40:	491b      	ldr	r1, [pc, #108]	; (8006fb0 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006f42:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006f44:	686a      	ldr	r2, [r5, #4]
 8006f46:	2a01      	cmp	r2, #1
 8006f48:	bf38      	it	cc
 8006f4a:	2201      	movcc	r2, #1
 8006f4c:	434a      	muls	r2, r1
 8006f4e:	68a9      	ldr	r1, [r5, #8]
 8006f50:	f001 0103 	and.w	r1, r1, #3
 8006f54:	408a      	lsls	r2, r1
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006f5a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006f5c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006f60:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006f64:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006f68:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006f6c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8006f70:	430a      	orrs	r2, r1
 8006f72:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006f76:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006f7a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8006f7e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006f80:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8006f82:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006f84:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8006f86:	e007      	b.n	8006f98 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f88:	f7ff fce6 	bl	8006958 <HAL_GetTick>
 8006f8c:	1b80      	subs	r0, r0, r6
 8006f8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006f92:	f67f af79 	bls.w	8006e88 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006f96:	2003      	movs	r0, #3
}
 8006f98:	b002      	add	sp, #8
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f9c:	f7ff fcdc 	bl	8006958 <HAL_GetTick>
 8006fa0:	1b80      	subs	r0, r0, r6
 8006fa2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fa6:	d99d      	bls.n	8006ee4 <HAL_DSI_Init+0x98>
 8006fa8:	e7f5      	b.n	8006f96 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8006faa:	2001      	movs	r0, #1
 8006fac:	e7f4      	b.n	8006f98 <HAL_DSI_Init+0x14c>
 8006fae:	bf00      	nop
 8006fb0:	003d0900 	.word	0x003d0900

08006fb4 <HAL_DSI_ErrorCallback>:
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006fb6:	6803      	ldr	r3, [r0, #0]
 8006fb8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006fbc:	07d1      	lsls	r1, r2, #31
{
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006fc2:	d508      	bpl.n	8006fd6 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006fc4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006fc8:	07d2      	lsls	r2, r2, #31
 8006fca:	d504      	bpl.n	8006fd6 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8006fd2:	f7fa fe79 	bl	8001cc8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006fdc:	0791      	lsls	r1, r2, #30
 8006fde:	d509      	bpl.n	8006ff4 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006fe0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8006fe4:	0792      	lsls	r2, r2, #30
 8006fe6:	d505      	bpl.n	8006ff4 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006fe8:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006fea:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006fec:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006ff0:	f7fa fe9c 	bl	8001d2c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8006ff4:	69a3      	ldr	r3, [r4, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d04e      	beq.n	8007098 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006ffa:	6821      	ldr	r1, [r4, #0]
 8006ffc:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007000:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007004:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007008:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800700a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800700e:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007010:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007012:	b119      	cbz	r1, 800701c <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007014:	6961      	ldr	r1, [r4, #20]
 8007016:	f041 0101 	orr.w	r1, r1, #1
 800701a:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800701c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007020:	d003      	beq.n	800702a <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007022:	6962      	ldr	r2, [r4, #20]
 8007024:	f042 0202 	orr.w	r2, r2, #2
 8007028:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800702a:	07d8      	lsls	r0, r3, #31
 800702c:	d503      	bpl.n	8007036 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800702e:	6962      	ldr	r2, [r4, #20]
 8007030:	f042 0204 	orr.w	r2, r2, #4
 8007034:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007036:	0799      	lsls	r1, r3, #30
 8007038:	d503      	bpl.n	8007042 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800703a:	6962      	ldr	r2, [r4, #20]
 800703c:	f042 0208 	orr.w	r2, r2, #8
 8007040:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007042:	f013 0f0c 	tst.w	r3, #12
 8007046:	d003      	beq.n	8007050 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007048:	6962      	ldr	r2, [r4, #20]
 800704a:	f042 0210 	orr.w	r2, r2, #16
 800704e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007050:	06da      	lsls	r2, r3, #27
 8007052:	d503      	bpl.n	800705c <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007054:	6962      	ldr	r2, [r4, #20]
 8007056:	f042 0220 	orr.w	r2, r2, #32
 800705a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800705c:	0698      	lsls	r0, r3, #26
 800705e:	d503      	bpl.n	8007068 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8007060:	6962      	ldr	r2, [r4, #20]
 8007062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007066:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007068:	0659      	lsls	r1, r3, #25
 800706a:	d503      	bpl.n	8007074 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800706c:	6962      	ldr	r2, [r4, #20]
 800706e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007072:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007074:	061a      	lsls	r2, r3, #24
 8007076:	d503      	bpl.n	8007080 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007078:	6962      	ldr	r2, [r4, #20]
 800707a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8007080:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007084:	d003      	beq.n	800708e <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007086:	6963      	ldr	r3, [r4, #20]
 8007088:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800708c:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800708e:	6963      	ldr	r3, [r4, #20]
 8007090:	b113      	cbz	r3, 8007098 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8007092:	4620      	mov	r0, r4
 8007094:	f7ff ff8e 	bl	8006fb4 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007098:	bd10      	pop	{r4, pc}

0800709a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800709a:	7c03      	ldrb	r3, [r0, #16]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d00b      	beq.n	80070b8 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80070a0:	6803      	ldr	r3, [r0, #0]
 80070a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070a4:	f022 0203 	bic.w	r2, r2, #3
 80070a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80070aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ac:	4311      	orrs	r1, r2
 80070ae:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80070b0:	2300      	movs	r3, #0
 80070b2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80070b4:	4618      	mov	r0, r3
 80070b6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80070b8:	2002      	movs	r0, #2
}
 80070ba:	4770      	bx	lr

080070bc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80070bc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070be:	7c03      	ldrb	r3, [r0, #16]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d06a      	beq.n	800719a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80070c4:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80070c6:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80070c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80070d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80070dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80070e0:	f042 0201 	orr.w	r2, r2, #1
 80070e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	f022 0203 	bic.w	r2, r2, #3
 80070ee:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	4322      	orrs	r2, r4
 80070f4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80070f6:	695a      	ldr	r2, [r3, #20]
 80070f8:	f022 0207 	bic.w	r2, r2, #7
 80070fc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80070fe:	695c      	ldr	r4, [r3, #20]
 8007100:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007104:	432a      	orrs	r2, r5
 8007106:	694d      	ldr	r5, [r1, #20]
 8007108:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800710a:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800710c:	4322      	orrs	r2, r4
 800710e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	f022 020f 	bic.w	r2, r2, #15
 8007116:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007118:	691c      	ldr	r4, [r3, #16]
 800711a:	432c      	orrs	r4, r5
 800711c:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800711e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007122:	f024 040e 	bic.w	r4, r4, #14
 8007126:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800712a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800712e:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007130:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8007134:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800713a:	0c12      	lsrs	r2, r2, #16
 800713c:	0412      	lsls	r2, r2, #16
 800713e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007140:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007142:	4322      	orrs	r2, r4
 8007144:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007146:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800714a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800714e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007152:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007156:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800715a:	432a      	orrs	r2, r5
 800715c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800715e:	432a      	orrs	r2, r5
 8007160:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007162:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007164:	432a      	orrs	r2, r5
 8007166:	4322      	orrs	r2, r4
 8007168:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800716c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007174:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007176:	430a      	orrs	r2, r1
 8007178:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800717a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007186:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800718a:	f042 0202 	orr.w	r2, r2, #2
 800718e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007192:	2300      	movs	r3, #0
 8007194:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007196:	4618      	mov	r0, r3
}
 8007198:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800719a:	2002      	movs	r0, #2
 800719c:	e7fc      	b.n	8007198 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080071a0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80071a0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80071a2:	7c03      	ldrb	r3, [r0, #16]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d02a      	beq.n	80071fe <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80071a8:	6802      	ldr	r2, [r0, #0]
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <HAL_DSI_ConfigCommand+0x64>)
 80071ac:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80071ae:	4023      	ands	r3, r4
 80071b0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80071b2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80071b4:	e9d1 3500 	ldrd	r3, r5, [r1]
 80071b8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80071ba:	688d      	ldr	r5, [r1, #8]
 80071bc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80071be:	68cd      	ldr	r5, [r1, #12]
 80071c0:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80071c2:	690d      	ldr	r5, [r1, #16]
 80071c4:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80071c6:	694d      	ldr	r5, [r1, #20]
 80071c8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80071ca:	698d      	ldr	r5, [r1, #24]
 80071cc:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80071ce:	69cd      	ldr	r5, [r1, #28]
 80071d0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80071d2:	6a0d      	ldr	r5, [r1, #32]
 80071d4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80071d6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80071d8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80071da:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80071dc:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80071de:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80071e0:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 80071e2:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80071e4:	4323      	orrs	r3, r4
 80071e6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80071e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80071ea:	f023 0302 	bic.w	r3, r3, #2
 80071ee:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80071f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80071f2:	430b      	orrs	r3, r1
 80071f4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80071f6:	2300      	movs	r3, #0
 80071f8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80071fa:	4618      	mov	r0, r3
}
 80071fc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80071fe:	2002      	movs	r0, #2
 8007200:	e7fc      	b.n	80071fc <HAL_DSI_ConfigCommand+0x5c>
 8007202:	bf00      	nop
 8007204:	fef080ff 	.word	0xfef080ff

08007208 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007208:	7c03      	ldrb	r3, [r0, #16]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d00b      	beq.n	8007226 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800720e:	6803      	ldr	r3, [r0, #0]
 8007210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007212:	f022 021f 	bic.w	r2, r2, #31
 8007216:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4311      	orrs	r1, r2
 800721c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800721e:	2300      	movs	r3, #0
 8007220:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007222:	4618      	mov	r0, r3
 8007224:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007226:	2002      	movs	r0, #2
}
 8007228:	4770      	bx	lr

0800722a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800722a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800722c:	7c03      	ldrb	r3, [r0, #16]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d035      	beq.n	800729e <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007232:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007234:	e9d1 2400 	ldrd	r2, r4, [r1]
 8007238:	4294      	cmp	r4, r2
 800723a:	bf38      	it	cc
 800723c:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800723e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007242:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8007246:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800724a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800724e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007252:	4322      	orrs	r2, r4
 8007254:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007258:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800725c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8007260:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007264:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007268:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800726c:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800726e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8007272:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007274:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007276:	432a      	orrs	r2, r5
 8007278:	4322      	orrs	r2, r4
 800727a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800727e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007282:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007286:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800728a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800728e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007292:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007296:	2300      	movs	r3, #0
 8007298:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800729a:	4618      	mov	r0, r3
}
 800729c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800729e:	2002      	movs	r0, #2
 80072a0:	e7fc      	b.n	800729c <HAL_DSI_ConfigPhyTimer+0x72>
	...

080072a4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80072a4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072a6:	7c03      	ldrb	r3, [r0, #16]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d05c      	beq.n	8007366 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80072ac:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80072ae:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80072b0:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80072b2:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80072b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80072b8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80072c0:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80072c2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80072c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80072c6:	b292      	uxth	r2, r2
 80072c8:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80072ca:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80072cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072d0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80072d2:	4a26      	ldr	r2, [pc, #152]	; (800736c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80072d4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80072d6:	4014      	ands	r4, r2
 80072d8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80072da:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 80072dc:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80072de:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80072e0:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80072e2:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80072e4:	4014      	ands	r4, r2
 80072e6:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80072e8:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80072ea:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80072ec:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80072ee:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80072f0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80072f4:	4014      	ands	r4, r2
 80072f6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80072fa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80072fe:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007300:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007302:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007306:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800730a:	4014      	ands	r4, r2
 800730c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007310:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007314:	432c      	orrs	r4, r5
 8007316:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800731a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800731e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8007322:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007326:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800732a:	698d      	ldr	r5, [r1, #24]
 800732c:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800732e:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007330:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007332:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007336:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800733a:	4014      	ands	r4, r2
 800733c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007340:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8007344:	432c      	orrs	r4, r5
 8007346:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800734a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800734e:	4022      	ands	r2, r4
 8007350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007354:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007358:	430a      	orrs	r2, r1
 800735a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800735e:	2300      	movs	r3, #0
 8007360:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007362:	4618      	mov	r0, r3
}
 8007364:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007366:	2002      	movs	r0, #2
 8007368:	e7fc      	b.n	8007364 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800736a:	bf00      	nop
 800736c:	ffff0000 	.word	0xffff0000

08007370 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007370:	7c03      	ldrb	r3, [r0, #16]
{
 8007372:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007374:	2b01      	cmp	r3, #1
 8007376:	d01c      	beq.n	80073b2 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007378:	6802      	ldr	r2, [r0, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	6851      	ldr	r1, [r2, #4]
 8007380:	f041 0101 	orr.w	r1, r1, #1
 8007384:	6051      	str	r1, [r2, #4]
 8007386:	6851      	ldr	r1, [r2, #4]
 8007388:	f001 0101 	and.w	r1, r1, #1
 800738c:	9100      	str	r1, [sp, #0]
 800738e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8007396:	f041 0108 	orr.w	r1, r1, #8
 800739a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800739e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073a2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80073a4:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80073a6:	f002 0208 	and.w	r2, r2, #8
 80073aa:	9201      	str	r2, [sp, #4]
 80073ac:	9a01      	ldr	r2, [sp, #4]
}
 80073ae:	b002      	add	sp, #8
 80073b0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80073b2:	2002      	movs	r0, #2
 80073b4:	e7fb      	b.n	80073ae <HAL_DSI_Start+0x3e>

080073b6 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073b6:	7c03      	ldrb	r3, [r0, #16]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d00a      	beq.n	80073d2 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80073bc:	6802      	ldr	r2, [r0, #0]
 80073be:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 80073c2:	f043 0304 	orr.w	r3, r3, #4
 80073c6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073ca:	2300      	movs	r3, #0
 80073cc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80073ce:	4618      	mov	r0, r3
 80073d0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80073d2:	2002      	movs	r0, #2
}
 80073d4:	4770      	bx	lr

080073d6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80073d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80073d8:	7c05      	ldrb	r5, [r0, #16]
{
 80073da:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80073dc:	2d01      	cmp	r5, #1
 80073de:	d009      	beq.n	80073f4 <HAL_DSI_ShortWrite+0x1e>
 80073e0:	2501      	movs	r5, #1
 80073e2:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80073e4:	9d06      	ldr	r5, [sp, #24]
 80073e6:	9500      	str	r5, [sp, #0]
 80073e8:	f7ff fcad 	bl	8006d46 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073ec:	2300      	movs	r3, #0
 80073ee:	7423      	strb	r3, [r4, #16]

  return status;
}
 80073f0:	b003      	add	sp, #12
 80073f2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80073f4:	2002      	movs	r0, #2
 80073f6:	e7fb      	b.n	80073f0 <HAL_DSI_ShortWrite+0x1a>

080073f8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80073f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fc:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80073fe:	7c03      	ldrb	r3, [r0, #16]
{
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007404:	2b01      	cmp	r3, #1
{
 8007406:	4615      	mov	r5, r2
 8007408:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800740c:	d053      	beq.n	80074b6 <HAL_DSI_LongWrite+0xbe>
 800740e:	2301      	movs	r3, #1
 8007410:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007412:	f7ff faa1 	bl	8006958 <HAL_GetTick>
 8007416:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007418:	6831      	ldr	r1, [r6, #0]
 800741a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800741c:	f013 0a01 	ands.w	sl, r3, #1
 8007420:	d01a      	beq.n	8007458 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007422:	2c03      	cmp	r4, #3
 8007424:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007426:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800742a:	bf28      	it	cs
 800742c:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800742e:	4282      	cmp	r2, r0
 8007430:	d11e      	bne.n	8007470 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007432:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8007434:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8007436:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800743a:	bb1b      	cbnz	r3, 8007484 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800743c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800743e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007442:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007444:	0222      	lsls	r2, r4, #8
 8007446:	0224      	lsls	r4, r4, #8
 8007448:	b292      	uxth	r2, r2
 800744a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800744e:	4315      	orrs	r5, r2
 8007450:	432c      	orrs	r4, r5
 8007452:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8007454:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8007456:	e009      	b.n	800746c <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007458:	f7ff fa7e 	bl	8006958 <HAL_GetTick>
 800745c:	eba0 000b 	sub.w	r0, r0, fp
 8007460:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007464:	d9d8      	bls.n	8007418 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007466:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007468:	f886 a010 	strb.w	sl, [r6, #16]
}
 800746c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007470:	f818 3002 	ldrb.w	r3, [r8, r2]
 8007474:	3201      	adds	r2, #1
 8007476:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800747a:	fa03 f30c 	lsl.w	r3, r3, ip
 800747e:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8007482:	e7d4      	b.n	800742e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007484:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8007486:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800748a:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800748c:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800748e:	bf28      	it	cs
 8007490:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007494:	f812 8000 	ldrb.w	r8, [r2, r0]
 8007498:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800749c:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800749e:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80074a2:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80074a4:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80074a8:	d1f4      	bne.n	8007494 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 80074aa:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80074ae:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80074b0:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80074b4:	e7c1      	b.n	800743a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80074b6:	2002      	movs	r0, #2
 80074b8:	e7d8      	b.n	800746c <HAL_DSI_LongWrite+0x74>

080074ba <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80074ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074be:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80074c0:	7c03      	ldrb	r3, [r0, #16]
{
 80074c2:	4605      	mov	r5, r0
 80074c4:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 80074c6:	2b01      	cmp	r3, #1
{
 80074c8:	4617      	mov	r7, r2
 80074ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80074ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 80074d2:	d06f      	beq.n	80075b4 <HAL_DSI_Read+0xfa>
 80074d4:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80074d6:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80074d8:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80074da:	d90d      	bls.n	80074f8 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80074dc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80074e0:	2237      	movs	r2, #55	; 0x37
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	b2f3      	uxtb	r3, r6
 80074e6:	f7ff fc2e 	bl	8006d46 <DSI_ShortWrite>
 80074ea:	b128      	cbz	r0, 80074f8 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80074ec:	2300      	movs	r3, #0

      return HAL_ERROR;
 80074ee:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80074f0:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80074f2:	b003      	add	sp, #12
 80074f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80074f8:	f1b9 0f06 	cmp.w	r9, #6
 80074fc:	d10f      	bne.n	800751e <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80074fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007500:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 8007508:	f044 0406 	orr.w	r4, r4, #6
 800750c:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800750e:	f7ff fa23 	bl	8006958 <HAL_GetTick>
 8007512:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007514:	2e00      	cmp	r6, #0
 8007516:	dc27      	bgt.n	8007568 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007518:	2000      	movs	r0, #0
 800751a:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800751c:	e7e9      	b.n	80074f2 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800751e:	f1b9 0f04 	cmp.w	r9, #4
 8007522:	d105      	bne.n	8007530 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007524:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007526:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007528:	f044 0404 	orr.w	r4, r4, #4
 800752c:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800752e:	e7ee      	b.n	800750e <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007530:	f1b9 0f14 	cmp.w	r9, #20
 8007534:	d108      	bne.n	8007548 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007536:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800753a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800753c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800753e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007542:	f044 0414 	orr.w	r4, r4, #20
 8007546:	e7f1      	b.n	800752c <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007548:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800754c:	d1ce      	bne.n	80074ec <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800754e:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007552:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007554:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007558:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800755c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800755e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007562:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 8007566:	e7e1      	b.n	800752c <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007568:	682a      	ldr	r2, [r5, #0]
 800756a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800756c:	f013 0310 	ands.w	r3, r3, #16
 8007570:	d10d      	bne.n	800758e <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007572:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8007574:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007576:	4632      	mov	r2, r6
 8007578:	bf28      	it	cs
 800757a:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800757c:	00d9      	lsls	r1, r3, #3
 800757e:	fa20 f101 	lsr.w	r1, r0, r1
 8007582:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8007584:	3301      	adds	r3, #1
 8007586:	429a      	cmp	r2, r3
 8007588:	d1f8      	bne.n	800757c <HAL_DSI_Read+0xc2>
        pdata++;
 800758a:	4417      	add	r7, r2
        datasize--;
 800758c:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800758e:	f7ff f9e3 	bl	8006958 <HAL_GetTick>
 8007592:	1b00      	subs	r0, r0, r4
 8007594:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007598:	d903      	bls.n	80075a2 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800759a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800759c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800759e:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 80075a0:	e7a7      	b.n	80074f2 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80075a6:	0652      	lsls	r2, r2, #25
 80075a8:	d4b4      	bmi.n	8007514 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80075aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80075ae:	069b      	lsls	r3, r3, #26
 80075b0:	d49c      	bmi.n	80074ec <HAL_DSI_Read+0x32>
 80075b2:	e7af      	b.n	8007514 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 80075b4:	2002      	movs	r0, #2
 80075b6:	e79c      	b.n	80074f2 <HAL_DSI_Read+0x38>

080075b8 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075b8:	7c03      	ldrb	r3, [r0, #16]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d010      	beq.n	80075e0 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80075be:	6803      	ldr	r3, [r0, #0]
 80075c0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80075c4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80075c8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80075cc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80075d0:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 80075d4:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075d8:	2300      	movs	r3, #0
 80075da:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80075dc:	4618      	mov	r0, r3
 80075de:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80075e0:	2002      	movs	r0, #2
}
 80075e2:	4770      	bx	lr

080075e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80075e8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ea:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80077b8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075ee:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075f2:	680a      	ldr	r2, [r1, #0]
 80075f4:	fa32 f503 	lsrs.w	r5, r2, r3
 80075f8:	d102      	bne.n	8007600 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80075fa:	b003      	add	sp, #12
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007600:	f04f 0e01 	mov.w	lr, #1
 8007604:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8007608:	ea1e 0202 	ands.w	r2, lr, r2
 800760c:	f000 80bd 	beq.w	800778a <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007610:	684e      	ldr	r6, [r1, #4]
 8007612:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007616:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800761a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800761e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007622:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007624:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007628:	2f01      	cmp	r7, #1
 800762a:	d834      	bhi.n	8007696 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800762c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800762e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007632:	68cf      	ldr	r7, [r1, #12]
 8007634:	fa07 f708 	lsl.w	r7, r7, r8
 8007638:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800763c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800763e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007640:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007644:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007648:	409f      	lsls	r7, r3
 800764a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800764e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007650:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007652:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007654:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007658:	688f      	ldr	r7, [r1, #8]
 800765a:	fa07 f708 	lsl.w	r7, r7, r8
 800765e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8007662:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007664:	d119      	bne.n	800769a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8007666:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800766a:	f003 0b07 	and.w	fp, r3, #7
 800766e:	f04f 0e0f 	mov.w	lr, #15
 8007672:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007676:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800767a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800767e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8007682:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007686:	690f      	ldr	r7, [r1, #16]
 8007688:	fa07 f70b 	lsl.w	r7, r7, fp
 800768c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007690:	f8ca 7020 	str.w	r7, [sl, #32]
 8007694:	e001      	b.n	800769a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007696:	2d03      	cmp	r5, #3
 8007698:	d1da      	bne.n	8007650 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800769a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800769c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076a0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076a4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076a8:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80076ac:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80076ae:	d06c      	beq.n	800778a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80076b4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076b8:	f003 0c03 	and.w	ip, r3, #3
 80076bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076c0:	f045 0502 	orr.w	r5, r5, #2
 80076c4:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076cc:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 80076d0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80076d4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80076d8:	f005 0502 	and.w	r5, r5, #2
 80076dc:	9501      	str	r5, [sp, #4]
 80076de:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076e0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 80076e4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80076e8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80076ec:	4d31      	ldr	r5, [pc, #196]	; (80077b4 <HAL_GPIO_Init+0x1d0>)
 80076ee:	42a8      	cmp	r0, r5
 80076f0:	d04d      	beq.n	800778e <HAL_GPIO_Init+0x1aa>
 80076f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80076f6:	42a8      	cmp	r0, r5
 80076f8:	d04b      	beq.n	8007792 <HAL_GPIO_Init+0x1ae>
 80076fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80076fe:	42a8      	cmp	r0, r5
 8007700:	d049      	beq.n	8007796 <HAL_GPIO_Init+0x1b2>
 8007702:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007706:	42a8      	cmp	r0, r5
 8007708:	d047      	beq.n	800779a <HAL_GPIO_Init+0x1b6>
 800770a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800770e:	42a8      	cmp	r0, r5
 8007710:	d045      	beq.n	800779e <HAL_GPIO_Init+0x1ba>
 8007712:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007716:	42a8      	cmp	r0, r5
 8007718:	d043      	beq.n	80077a2 <HAL_GPIO_Init+0x1be>
 800771a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800771e:	42a8      	cmp	r0, r5
 8007720:	d041      	beq.n	80077a6 <HAL_GPIO_Init+0x1c2>
 8007722:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007726:	42a8      	cmp	r0, r5
 8007728:	d03f      	beq.n	80077aa <HAL_GPIO_Init+0x1c6>
 800772a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800772e:	42a8      	cmp	r0, r5
 8007730:	d03d      	beq.n	80077ae <HAL_GPIO_Init+0x1ca>
 8007732:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007736:	42a8      	cmp	r0, r5
 8007738:	bf0c      	ite	eq
 800773a:	2509      	moveq	r5, #9
 800773c:	250a      	movne	r5, #10
 800773e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007742:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007746:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800774a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800774c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007750:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007752:	bf0c      	ite	eq
 8007754:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007756:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007758:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800775c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800775e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007760:	bf0c      	ite	eq
 8007762:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007764:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007766:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800776a:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800776c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8007770:	bf0c      	ite	eq
 8007772:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007774:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007776:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007778:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800777c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8007780:	bf54      	ite	pl
 8007782:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007784:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007786:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800778a:	3301      	adds	r3, #1
 800778c:	e731      	b.n	80075f2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800778e:	2500      	movs	r5, #0
 8007790:	e7d5      	b.n	800773e <HAL_GPIO_Init+0x15a>
 8007792:	2501      	movs	r5, #1
 8007794:	e7d3      	b.n	800773e <HAL_GPIO_Init+0x15a>
 8007796:	2502      	movs	r5, #2
 8007798:	e7d1      	b.n	800773e <HAL_GPIO_Init+0x15a>
 800779a:	2503      	movs	r5, #3
 800779c:	e7cf      	b.n	800773e <HAL_GPIO_Init+0x15a>
 800779e:	2504      	movs	r5, #4
 80077a0:	e7cd      	b.n	800773e <HAL_GPIO_Init+0x15a>
 80077a2:	2505      	movs	r5, #5
 80077a4:	e7cb      	b.n	800773e <HAL_GPIO_Init+0x15a>
 80077a6:	2506      	movs	r5, #6
 80077a8:	e7c9      	b.n	800773e <HAL_GPIO_Init+0x15a>
 80077aa:	2507      	movs	r5, #7
 80077ac:	e7c7      	b.n	800773e <HAL_GPIO_Init+0x15a>
 80077ae:	2508      	movs	r5, #8
 80077b0:	e7c5      	b.n	800773e <HAL_GPIO_Init+0x15a>
 80077b2:	bf00      	nop
 80077b4:	58020000 	.word	0x58020000
 80077b8:	58024400 	.word	0x58024400

080077bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80077c0:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80077c2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80078f0 <HAL_GPIO_DeInit+0x134>
 80077c6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80078f4 <HAL_GPIO_DeInit+0x138>
 80077ca:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80078f8 <HAL_GPIO_DeInit+0x13c>
 80077ce:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80078fc <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 80077d2:	fa31 f302 	lsrs.w	r3, r1, r2
 80077d6:	d101      	bne.n	80077dc <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80077d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80077dc:	2301      	movs	r3, #1
 80077de:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 80077e2:	ea1c 0601 	ands.w	r6, ip, r1
 80077e6:	d06d      	beq.n	80078c4 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80077e8:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80077ec:	f002 0703 	and.w	r7, r2, #3
 80077f0:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80077f2:	4b3e      	ldr	r3, [pc, #248]	; (80078ec <HAL_GPIO_DeInit+0x130>)
 80077f4:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80077f8:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80077fa:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80077fc:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007800:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007804:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007808:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800780c:	d05c      	beq.n	80078c8 <HAL_GPIO_DeInit+0x10c>
 800780e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007812:	4298      	cmp	r0, r3
 8007814:	d05a      	beq.n	80078cc <HAL_GPIO_DeInit+0x110>
 8007816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781a:	4298      	cmp	r0, r3
 800781c:	d058      	beq.n	80078d0 <HAL_GPIO_DeInit+0x114>
 800781e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007822:	4298      	cmp	r0, r3
 8007824:	d056      	beq.n	80078d4 <HAL_GPIO_DeInit+0x118>
 8007826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800782a:	4298      	cmp	r0, r3
 800782c:	d054      	beq.n	80078d8 <HAL_GPIO_DeInit+0x11c>
 800782e:	4540      	cmp	r0, r8
 8007830:	d054      	beq.n	80078dc <HAL_GPIO_DeInit+0x120>
 8007832:	4548      	cmp	r0, r9
 8007834:	d054      	beq.n	80078e0 <HAL_GPIO_DeInit+0x124>
 8007836:	4550      	cmp	r0, sl
 8007838:	d054      	beq.n	80078e4 <HAL_GPIO_DeInit+0x128>
 800783a:	4558      	cmp	r0, fp
 800783c:	d054      	beq.n	80078e8 <HAL_GPIO_DeInit+0x12c>
 800783e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8007842:	4298      	cmp	r0, r3
 8007844:	bf0c      	ite	eq
 8007846:	2309      	moveq	r3, #9
 8007848:	230a      	movne	r3, #10
 800784a:	40bb      	lsls	r3, r7
 800784c:	4573      	cmp	r3, lr
 800784e:	d119      	bne.n	8007884 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007854:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8007858:	ea27 0706 	bic.w	r7, r7, r6
 800785c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007860:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8007864:	ea27 0706 	bic.w	r7, r7, r6
 8007868:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800786c:	685f      	ldr	r7, [r3, #4]
 800786e:	ea27 0706 	bic.w	r7, r7, r6
 8007872:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007874:	681f      	ldr	r7, [r3, #0]
 8007876:	ea27 0606 	bic.w	r6, r7, r6
 800787a:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800787c:	68a3      	ldr	r3, [r4, #8]
 800787e:	ea23 0305 	bic.w	r3, r3, r5
 8007882:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007884:	2503      	movs	r5, #3
 8007886:	0053      	lsls	r3, r2, #1
 8007888:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800788a:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800788e:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007892:	260f      	movs	r6, #15
 8007894:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007896:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007898:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800789a:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800789c:	fa22 f405 	lsr.w	r4, r2, r5
 80078a0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80078a4:	6a25      	ldr	r5, [r4, #32]
 80078a6:	ea25 0606 	bic.w	r6, r5, r6
 80078aa:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80078ac:	68c4      	ldr	r4, [r0, #12]
 80078ae:	ea24 0403 	bic.w	r4, r4, r3
 80078b2:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80078b4:	6844      	ldr	r4, [r0, #4]
 80078b6:	ea24 040c 	bic.w	r4, r4, ip
 80078ba:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80078bc:	6884      	ldr	r4, [r0, #8]
 80078be:	ea24 0303 	bic.w	r3, r4, r3
 80078c2:	6083      	str	r3, [r0, #8]
    position++;
 80078c4:	3201      	adds	r2, #1
 80078c6:	e784      	b.n	80077d2 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80078c8:	2300      	movs	r3, #0
 80078ca:	e7be      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e7bc      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e7ba      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078d4:	2303      	movs	r3, #3
 80078d6:	e7b8      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078d8:	2304      	movs	r3, #4
 80078da:	e7b6      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078dc:	2305      	movs	r3, #5
 80078de:	e7b4      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078e0:	2306      	movs	r3, #6
 80078e2:	e7b2      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078e4:	2307      	movs	r3, #7
 80078e6:	e7b0      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078e8:	2308      	movs	r3, #8
 80078ea:	e7ae      	b.n	800784a <HAL_GPIO_DeInit+0x8e>
 80078ec:	58020000 	.word	0x58020000
 80078f0:	58021400 	.word	0x58021400
 80078f4:	58021800 	.word	0x58021800
 80078f8:	58021c00 	.word	0x58021c00
 80078fc:	58022000 	.word	0x58022000

08007900 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007900:	6903      	ldr	r3, [r0, #16]
 8007902:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007904:	bf14      	ite	ne
 8007906:	2001      	movne	r0, #1
 8007908:	2000      	moveq	r0, #0
 800790a:	4770      	bx	lr

0800790c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800790c:	b10a      	cbz	r2, 8007912 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800790e:	6181      	str	r1, [r0, #24]
  }
}
 8007910:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007912:	0409      	lsls	r1, r1, #16
 8007914:	e7fb      	b.n	800790e <HAL_GPIO_WritePin+0x2>

08007916 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007916:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007918:	ea01 0203 	and.w	r2, r1, r3
 800791c:	ea21 0103 	bic.w	r1, r1, r3
 8007920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007924:	6181      	str	r1, [r0, #24]
}
 8007926:	4770      	bx	lr

08007928 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007928:	4b04      	ldr	r3, [pc, #16]	; (800793c <HAL_HSEM_FastTake+0x14>)
 800792a:	3020      	adds	r0, #32
 800792c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007930:	4b03      	ldr	r3, [pc, #12]	; (8007940 <HAL_HSEM_FastTake+0x18>)
 8007932:	1ac0      	subs	r0, r0, r3
 8007934:	bf18      	it	ne
 8007936:	2001      	movne	r0, #1
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	58026400 	.word	0x58026400
 8007940:	80000300 	.word	0x80000300

08007944 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007944:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <HAL_HSEM_Release+0xc>)
 800794a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800794e:	4770      	bx	lr
 8007950:	58026400 	.word	0x58026400

08007954 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007954:	6803      	ldr	r3, [r0, #0]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	0791      	lsls	r1, r2, #30
 800795a:	d501      	bpl.n	8007960 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800795c:	2200      	movs	r2, #0
 800795e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	07d2      	lsls	r2, r2, #31
 8007964:	d403      	bmi.n	800796e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	f042 0201 	orr.w	r2, r2, #1
 800796c:	619a      	str	r2, [r3, #24]
  }
}
 800796e:	4770      	bx	lr

08007970 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007970:	b530      	push	{r4, r5, lr}
 8007972:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007974:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007978:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800797a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800797c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800797e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007982:	4a05      	ldr	r2, [pc, #20]	; (8007998 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007984:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007986:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800798a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800798e:	ea20 0002 	bic.w	r0, r0, r2
 8007992:	4303      	orrs	r3, r0
 8007994:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007996:	bd30      	pop	{r4, r5, pc}
 8007998:	03ff63ff 	.word	0x03ff63ff

0800799c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800799c:	6803      	ldr	r3, [r0, #0]
{
 800799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80079a2:	699c      	ldr	r4, [r3, #24]
{
 80079a4:	4605      	mov	r5, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079aa:	f014 0410 	ands.w	r4, r4, #16
 80079ae:	d070      	beq.n	8007a92 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 80079b0:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079b2:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80079b4:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079b6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	0692      	lsls	r2, r2, #26
 80079be:	d462      	bmi.n	8007a86 <I2C_IsErrorOccurred+0xea>
 80079c0:	f1b8 0f00 	cmp.w	r8, #0
 80079c4:	d036      	beq.n	8007a34 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 80079c6:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80079ca:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80079d0:	05d6      	lsls	r6, r2, #23
 80079d2:	d505      	bpl.n	80079e0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079d4:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80079d8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80079dc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80079de:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80079e0:	0551      	lsls	r1, r2, #21
 80079e2:	d505      	bpl.n	80079f0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80079e8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80079ec:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079ee:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079f0:	0592      	lsls	r2, r2, #22
 80079f2:	d550      	bpl.n	8007a96 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80079f8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079fc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80079fe:	4628      	mov	r0, r5
 8007a00:	f7ff ffa8 	bl	8007954 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007a04:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8007a06:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007a08:	6853      	ldr	r3, [r2, #4]
 8007a0a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007a0e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007a12:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007a1c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007a1e:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8007a20:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8007a22:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a24:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007a2e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8007a32:	e032      	b.n	8007a9a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 8007a34:	1c7a      	adds	r2, r7, #1
 8007a36:	d0c0      	beq.n	80079ba <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a38:	f7fe ff8e 	bl	8006958 <HAL_GetTick>
 8007a3c:	1b80      	subs	r0, r0, r6
 8007a3e:	42b8      	cmp	r0, r7
 8007a40:	d801      	bhi.n	8007a46 <I2C_IsErrorOccurred+0xaa>
 8007a42:	2f00      	cmp	r7, #0
 8007a44:	d1b8      	bne.n	80079b8 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007a4a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a4e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007a50:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a52:	0400      	lsls	r0, r0, #16
 8007a54:	d50a      	bpl.n	8007a6c <I2C_IsErrorOccurred+0xd0>
 8007a56:	0448      	lsls	r0, r1, #17
 8007a58:	d408      	bmi.n	8007a6c <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 8007a5a:	2a20      	cmp	r2, #32
 8007a5c:	d006      	beq.n	8007a6c <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a64:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007a66:	f7fe ff77 	bl	8006958 <HAL_GetTick>
 8007a6a:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a6c:	682b      	ldr	r3, [r5, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	0699      	lsls	r1, r3, #26
 8007a72:	d4a1      	bmi.n	80079b8 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a74:	f7fe ff70 	bl	8006958 <HAL_GetTick>
 8007a78:	1b80      	subs	r0, r0, r6
 8007a7a:	2819      	cmp	r0, #25
 8007a7c:	d9f6      	bls.n	8007a6c <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007a7e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007a80:	f04f 0801 	mov.w	r8, #1
 8007a84:	e798      	b.n	80079b8 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	d19c      	bne.n	80079c6 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	61da      	str	r2, [r3, #28]
 8007a90:	e799      	b.n	80079c6 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007a92:	4620      	mov	r0, r4
 8007a94:	e79a      	b.n	80079cc <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d1b1      	bne.n	80079fe <I2C_IsErrorOccurred+0x62>
}
 8007a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a9e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007a9e:	b570      	push	{r4, r5, r6, lr}
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	079b      	lsls	r3, r3, #30
 8007aac:	d501      	bpl.n	8007ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007aae:	2000      	movs	r0, #0
}
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab2:	4632      	mov	r2, r6
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff ff70 	bl	800799c <I2C_IsErrorOccurred>
 8007abc:	b9c0      	cbnz	r0, 8007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	1c6a      	adds	r2, r5, #1
 8007ac0:	d0f1      	beq.n	8007aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac2:	f7fe ff49 	bl	8006958 <HAL_GetTick>
 8007ac6:	1b80      	subs	r0, r0, r6
 8007ac8:	42a8      	cmp	r0, r5
 8007aca:	d801      	bhi.n	8007ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007acc:	2d00      	cmp	r5, #0
 8007ace:	d1ea      	bne.n	8007aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f013 0302 	ands.w	r3, r3, #2
 8007ad8:	d1e5      	bne.n	8007aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ada:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8007adc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ae0:	f042 0220 	orr.w	r2, r2, #32
 8007ae4:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8007af0:	2001      	movs	r0, #1
 8007af2:	e7dd      	b.n	8007ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08007af4 <I2C_WaitOnFlagUntilTimeout>:
{
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	9f06      	ldr	r7, [sp, #24]
 8007afa:	4604      	mov	r4, r0
 8007afc:	4688      	mov	r8, r1
 8007afe:	4616      	mov	r6, r2
 8007b00:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b02:	6822      	ldr	r2, [r4, #0]
 8007b04:	6993      	ldr	r3, [r2, #24]
 8007b06:	ea38 0303 	bics.w	r3, r8, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	42b3      	cmp	r3, r6
 8007b12:	d001      	beq.n	8007b18 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8007b14:	2000      	movs	r0, #0
 8007b16:	e01e      	b.n	8007b56 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 8007b18:	1c6b      	adds	r3, r5, #1
 8007b1a:	d0f3      	beq.n	8007b04 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1c:	f7fe ff1c 	bl	8006958 <HAL_GetTick>
 8007b20:	1bc0      	subs	r0, r0, r7
 8007b22:	42a8      	cmp	r0, r5
 8007b24:	d801      	bhi.n	8007b2a <I2C_WaitOnFlagUntilTimeout+0x36>
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	d1eb      	bne.n	8007b02 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	ea38 0303 	bics.w	r3, r8, r3
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	42b3      	cmp	r3, r6
 8007b3a:	d1e2      	bne.n	8007b02 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8007b3e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b40:	f043 0320 	orr.w	r3, r3, #32
 8007b44:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b46:	2320      	movs	r3, #32
 8007b48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8007b52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007b5a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007b5a:	b570      	push	{r4, r5, r6, lr}
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	069b      	lsls	r3, r3, #26
 8007b68:	d501      	bpl.n	8007b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007b6a:	2000      	movs	r0, #0
}
 8007b6c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6e:	4632      	mov	r2, r6
 8007b70:	4629      	mov	r1, r5
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff ff12 	bl	800799c <I2C_IsErrorOccurred>
 8007b78:	b9b0      	cbnz	r0, 8007ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b7a:	f7fe feed 	bl	8006958 <HAL_GetTick>
 8007b7e:	1b80      	subs	r0, r0, r6
 8007b80:	42a8      	cmp	r0, r5
 8007b82:	d801      	bhi.n	8007b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	d1ec      	bne.n	8007b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	f013 0320 	ands.w	r3, r3, #32
 8007b90:	d1e7      	bne.n	8007b62 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b92:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007b94:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b98:	f042 0220 	orr.w	r2, r2, #32
 8007b9c:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8007ba8:	2001      	movs	r0, #1
 8007baa:	e7df      	b.n	8007b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08007bac <HAL_I2C_MspInit>:
}
 8007bac:	4770      	bx	lr

08007bae <HAL_I2C_Init>:
{
 8007bae:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d04a      	beq.n	8007c4c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bb6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007bba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bbe:	b91b      	cbnz	r3, 8007bc8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007bc0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007bc4:	f7ff fff2 	bl	8007bac <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bc8:	2324      	movs	r3, #36	; 0x24
 8007bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bd8:	6862      	ldr	r2, [r4, #4]
 8007bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bde:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007be6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007be8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bec:	2901      	cmp	r1, #1
 8007bee:	d124      	bne.n	8007c3a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bf4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bf6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bf8:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bfa:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c02:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c0c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007c10:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c12:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c18:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c1a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c2c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c32:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c34:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007c38:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c3e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c40:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c42:	d1d8      	bne.n	8007bf6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	e7d4      	b.n	8007bf6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	e7f3      	b.n	8007c38 <HAL_I2C_Init+0x8a>

08007c50 <HAL_I2C_MspDeInit>:
 8007c50:	4770      	bx	lr

08007c52 <HAL_I2C_DeInit>:
{
 8007c52:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007c54:	4604      	mov	r4, r0
 8007c56:	b198      	cbz	r0, 8007c80 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007c58:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c5a:	2324      	movs	r3, #36	; 0x24
 8007c5c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007c60:	6813      	ldr	r3, [r2, #0]
 8007c62:	f023 0301 	bic.w	r3, r3, #1
 8007c66:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007c68:	f7ff fff2 	bl	8007c50 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8007c70:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007c74:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c78:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c7a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8007c7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007c80:	2001      	movs	r0, #1
 8007c82:	e7fc      	b.n	8007c7e <HAL_I2C_DeInit+0x2c>

08007c84 <HAL_I2C_Mem_Write>:
{
 8007c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8007c8e:	4604      	mov	r4, r0
 8007c90:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c92:	2b20      	cmp	r3, #32
{
 8007c94:	4616      	mov	r6, r2
 8007c96:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007c9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c9e:	f040 80c6 	bne.w	8007e2e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ca4:	b113      	cbz	r3, 8007cac <HAL_I2C_Mem_Write+0x28>
 8007ca6:	f1ba 0f00 	cmp.w	sl, #0
 8007caa:	d106      	bne.n	8007cba <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cb0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007cb2:	2001      	movs	r0, #1
}
 8007cb4:	b003      	add	sp, #12
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007cba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	f000 80b5 	beq.w	8007e2e <HAL_I2C_Mem_Write+0x1aa>
 8007cc4:	f04f 0b01 	mov.w	fp, #1
 8007cc8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007ccc:	f7fe fe44 	bl	8006958 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cd0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007cd2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cd4:	9000      	str	r0, [sp, #0]
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f7ff ff09 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d1e5      	bne.n	8007cb2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ce6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ce8:	fa5f f289 	uxtb.w	r2, r9
 8007cec:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8007cee:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cf0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cf4:	2340      	movs	r3, #64	; 0x40
 8007cf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8007cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cfc:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007cfe:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007d00:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d02:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007d04:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d0e:	f7ff fe2f 	bl	8007970 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d12:	462a      	mov	r2, r5
 8007d14:	4641      	mov	r1, r8
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7ff fec1 	bl	8007a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d1c:	bb18      	cbnz	r0, 8007d66 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d1e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d22:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d24:	d115      	bne.n	8007d52 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d26:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d2e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007d30:	4643      	mov	r3, r8
 8007d32:	9500      	str	r5, [sp, #0]
 8007d34:	f7ff fede 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007d38:	b9a8      	cbnz	r0, 8007d66 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2bff      	cmp	r3, #255	; 0xff
 8007d40:	d815      	bhi.n	8007d6e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007d42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d48:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8007d4a:	b292      	uxth	r2, r2
 8007d4c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d4e:	b2d2      	uxtb	r2, r2
 8007d50:	e012      	b.n	8007d78 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d52:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d54:	4641      	mov	r1, r8
 8007d56:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d58:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	f7ff fe9f 	bl	8007a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d60:	b908      	cbnz	r0, 8007d66 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	e7df      	b.n	8007d26 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007d66:	2300      	movs	r3, #0
 8007d68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007d6c:	e7a1      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d6e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d74:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d76:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f7ff fdf8 	bl	8007970 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d80:	462a      	mov	r2, r5
 8007d82:	4641      	mov	r1, r8
 8007d84:	4620      	mov	r0, r4
 8007d86:	f7ff fe8a 	bl	8007a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d191      	bne.n	8007cb2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007d96:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007d98:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007d9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007d9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007d9e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007da0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007da2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007da4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007da6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007da8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007daa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	b1b3      	cbz	r3, 8007dde <HAL_I2C_Mem_Write+0x15a>
 8007db0:	b9aa      	cbnz	r2, 8007dde <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007db2:	4643      	mov	r3, r8
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	4620      	mov	r0, r4
 8007db8:	9500      	str	r5, [sp, #0]
 8007dba:	f7ff fe9b 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f47f af77 	bne.w	8007cb2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	2bff      	cmp	r3, #255	; 0xff
 8007dca:	d928      	bls.n	8007e1e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dcc:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dd4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f7ff fdc9 	bl	8007970 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007dde:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1cc      	bne.n	8007d80 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de6:	462a      	mov	r2, r5
 8007de8:	4641      	mov	r1, r8
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff feb5 	bl	8007b5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f47f af5e 	bne.w	8007cb2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	2120      	movs	r1, #32
 8007dfa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007e02:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007e06:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007e0a:	f022 0201 	bic.w	r2, r2, #1
 8007e0e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e10:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007e14:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e18:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007e1c:	e74a      	b.n	8007cb4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007e1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e24:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007e26:	b292      	uxth	r2, r2
 8007e28:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	e7d3      	b.n	8007dd6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8007e2e:	2002      	movs	r0, #2
 8007e30:	e740      	b.n	8007cb4 <HAL_I2C_Mem_Write+0x30>
 8007e32:	bf00      	nop
 8007e34:	80002000 	.word	0x80002000

08007e38 <HAL_I2C_Mem_Read>:
{
 8007e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8007e42:	4604      	mov	r4, r0
 8007e44:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e46:	2b20      	cmp	r3, #32
{
 8007e48:	4616      	mov	r6, r2
 8007e4a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8007e4e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e52:	f040 80c9 	bne.w	8007fe8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e58:	b113      	cbz	r3, 8007e60 <HAL_I2C_Mem_Read+0x28>
 8007e5a:	f1ba 0f00 	cmp.w	sl, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e64:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8007e66:	2001      	movs	r0, #1
}
 8007e68:	b003      	add	sp, #12
 8007e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007e6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	f000 80b8 	beq.w	8007fe8 <HAL_I2C_Mem_Read+0x1b0>
 8007e78:	f04f 0b01 	mov.w	fp, #1
 8007e7c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8007e80:	f7fe fd6a 	bl	8006958 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e84:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007e86:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e88:	9000      	str	r0, [sp, #0]
 8007e8a:	465a      	mov	r2, fp
 8007e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e90:	4620      	mov	r0, r4
 8007e92:	f7ff fe2f 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d1e5      	bne.n	8007e66 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e9a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e9c:	fa5f f289 	uxtb.w	r2, r9
 8007ea0:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 8007ea2:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ea4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8007eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8007eb2:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007eb4:	4b4d      	ldr	r3, [pc, #308]	; (8007fec <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8007eb6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f7ff fd56 	bl	8007970 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec4:	462a      	mov	r2, r5
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f7ff fde8 	bl	8007a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8007ece:	bb20      	cbnz	r0, 8007f1a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ed0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ed6:	d116      	bne.n	8007f06 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ed8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007eda:	2200      	movs	r2, #0
 8007edc:	2140      	movs	r1, #64	; 0x40
 8007ede:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ee2:	4643      	mov	r3, r8
 8007ee4:	9500      	str	r5, [sp, #0]
 8007ee6:	f7ff fe05 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007eea:	b9b0      	cbnz	r0, 8007f1a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2bff      	cmp	r3, #255	; 0xff
 8007ef2:	4b3f      	ldr	r3, [pc, #252]	; (8007ff0 <HAL_I2C_Mem_Read+0x1b8>)
 8007ef4:	d815      	bhi.n	8007f22 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007ef6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007efe:	b292      	uxth	r2, r2
 8007f00:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	e012      	b.n	8007f2c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f06:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f08:	4641      	mov	r1, r8
 8007f0a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0e:	462a      	mov	r2, r5
 8007f10:	f7ff fdc5 	bl	8007a9e <I2C_WaitOnTXISFlagUntilTimeout>
 8007f14:	b908      	cbnz	r0, 8007f1a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	e7de      	b.n	8007ed8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007f20:	e7a1      	b.n	8007e66 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f22:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f2a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff fd1e 	bl	8007970 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007f34:	4643      	mov	r3, r8
 8007f36:	2200      	movs	r2, #0
 8007f38:	2104      	movs	r1, #4
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	9500      	str	r5, [sp, #0]
 8007f3e:	f7ff fdd9 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d18f      	bne.n	8007e66 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f4c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8007f50:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8007f52:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007f54:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007f56:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8007f58:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007f5a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007f5c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007f5e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	b1b3      	cbz	r3, 8007f98 <HAL_I2C_Mem_Read+0x160>
 8007f6a:	b9aa      	cbnz	r2, 8007f98 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f6c:	4643      	mov	r3, r8
 8007f6e:	2180      	movs	r1, #128	; 0x80
 8007f70:	4620      	mov	r0, r4
 8007f72:	9500      	str	r5, [sp, #0]
 8007f74:	f7ff fdbe 	bl	8007af4 <I2C_WaitOnFlagUntilTimeout>
 8007f78:	2800      	cmp	r0, #0
 8007f7a:	f47f af74 	bne.w	8007e66 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2bff      	cmp	r3, #255	; 0xff
 8007f84:	d928      	bls.n	8007fd8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f86:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f8c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f8e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f90:	4639      	mov	r1, r7
 8007f92:	4620      	mov	r0, r4
 8007f94:	f7ff fcec 	bl	8007970 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007f98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1c9      	bne.n	8007f34 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f7ff fdd8 	bl	8007b5a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	f47f af5b 	bne.w	8007e66 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	2120      	movs	r1, #32
 8007fb4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8007fbc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8007fc0:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007fca:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007fce:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fd2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8007fd6:	e747      	b.n	8007e68 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007fd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fde:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8007fe0:	b292      	uxth	r2, r2
 8007fe2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fe4:	b2d2      	uxtb	r2, r2
 8007fe6:	e7d3      	b.n	8007f90 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8007fe8:	2002      	movs	r0, #2
 8007fea:	e73d      	b.n	8007e68 <HAL_I2C_Mem_Read+0x30>
 8007fec:	80002000 	.word	0x80002000
 8007ff0:	80002400 	.word	0x80002400

08007ff4 <HAL_I2C_GetState>:
  return hi2c->State;
 8007ff4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8007ff8:	4770      	bx	lr

08007ffa <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007ffa:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ffe:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008000:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008004:	2b20      	cmp	r3, #32
 8008006:	b2dc      	uxtb	r4, r3
 8008008:	d11d      	bne.n	8008046 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800800a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800800e:	2b01      	cmp	r3, #1
 8008010:	d019      	beq.n	8008046 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008012:	2324      	movs	r3, #36	; 0x24
 8008014:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008018:	6803      	ldr	r3, [r0, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008028:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	4311      	orrs	r1, r2
 800802e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008038:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800803a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800803e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8008042:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008044:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008046:	2002      	movs	r0, #2
 8008048:	e7fc      	b.n	8008044 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800804a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800804a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800804c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008050:	2b20      	cmp	r3, #32
 8008052:	b2dc      	uxtb	r4, r3
 8008054:	d11c      	bne.n	8008090 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008056:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800805a:	2b01      	cmp	r3, #1
 800805c:	d018      	beq.n	8008090 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800805e:	2324      	movs	r3, #36	; 0x24
 8008060:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008064:	6803      	ldr	r3, [r0, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	f022 0201 	bic.w	r2, r2, #1
 800806c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800806e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008070:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008074:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008078:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008082:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008084:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008088:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800808c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800808e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008090:	2002      	movs	r0, #2
 8008092:	e7fc      	b.n	800808e <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008094 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008094:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008096:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008098:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800809c:	3284      	adds	r2, #132	; 0x84
 800809e:	1883      	adds	r3, r0, r2
{
 80080a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80080a4:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080a6:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80080aa:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80080ac:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80080b0:	684c      	ldr	r4, [r1, #4]
 80080b2:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80080b6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80080ba:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80080be:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80080c0:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80080c2:	68c5      	ldr	r5, [r0, #12]
 80080c4:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80080c8:	443d      	add	r5, r7
 80080ca:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80080ce:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80080d0:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80080d2:	68c5      	ldr	r5, [r0, #12]
 80080d4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80080d8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80080da:	689d      	ldr	r5, [r3, #8]
 80080dc:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80080e0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80080e2:	688d      	ldr	r5, [r1, #8]
 80080e4:	68c7      	ldr	r7, [r0, #12]
 80080e6:	3501      	adds	r5, #1
 80080e8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 80080ec:	443d      	add	r5, r7
 80080ee:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80080f2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80080f4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80080f6:	691d      	ldr	r5, [r3, #16]
 80080f8:	f025 0507 	bic.w	r5, r5, #7
 80080fc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80080fe:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008100:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008102:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008106:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800810a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800810e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8008112:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008116:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800811a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800811e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008120:	695d      	ldr	r5, [r3, #20]
 8008122:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008126:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008128:	694d      	ldr	r5, [r1, #20]
 800812a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800812c:	69dd      	ldr	r5, [r3, #28]
 800812e:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8008132:	f025 0507 	bic.w	r5, r5, #7
 8008136:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008138:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800813c:	433d      	orrs	r5, r7
 800813e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008140:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008142:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008144:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008148:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800814a:	b31e      	cbz	r6, 8008194 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800814c:	2e01      	cmp	r6, #1
 800814e:	d023      	beq.n	8008198 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008150:	1eb5      	subs	r5, r6, #2
 8008152:	2d02      	cmp	r5, #2
 8008154:	d922      	bls.n	800819c <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8008156:	2e07      	cmp	r6, #7
 8008158:	bf0c      	ite	eq
 800815a:	2502      	moveq	r5, #2
 800815c:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800815e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008160:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008164:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008168:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800816a:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800816c:	3407      	adds	r4, #7
 800816e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008170:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008172:	436e      	muls	r6, r5
 8008174:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008178:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800817a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800817c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8008180:	f024 0407 	bic.w	r4, r4, #7
 8008184:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008186:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008188:	5883      	ldr	r3, [r0, r2]
 800818a:	f043 0301 	orr.w	r3, r3, #1
 800818e:	5083      	str	r3, [r0, r2]
}
 8008190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8008194:	2504      	movs	r5, #4
 8008196:	e7e2      	b.n	800815e <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008198:	2503      	movs	r5, #3
 800819a:	e7e0      	b.n	800815e <LTDC_SetConfig+0xca>
    tmp = 2U;
 800819c:	2502      	movs	r5, #2
 800819e:	e7de      	b.n	800815e <LTDC_SetConfig+0xca>

080081a0 <HAL_LTDC_Init>:
{
 80081a0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80081a2:	4604      	mov	r4, r0
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d063      	beq.n	8008270 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80081a8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80081ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80081b0:	b91b      	cbnz	r3, 80081ba <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80081b2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80081b6:	f7f8 ff57 	bl	8001068 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081ba:	2302      	movs	r3, #2
 80081bc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80081c8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081ca:	6999      	ldr	r1, [r3, #24]
 80081cc:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80081d0:	4302      	orrs	r2, r0
 80081d2:	68e0      	ldr	r0, [r4, #12]
 80081d4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081d6:	6920      	ldr	r0, [r4, #16]
 80081d8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80081da:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081dc:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80081de:	4925      	ldr	r1, [pc, #148]	; (8008274 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081e0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	400a      	ands	r2, r1
 80081e6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80081e8:	689a      	ldr	r2, [r3, #8]
 80081ea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80081ee:	69a0      	ldr	r0, [r4, #24]
 80081f0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80081f2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80081f4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	400a      	ands	r2, r1
 80081fa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008202:	6a20      	ldr	r0, [r4, #32]
 8008204:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008206:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008208:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	400a      	ands	r2, r1
 800820e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008216:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008218:	4302      	orrs	r2, r0
 800821a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800821c:	695a      	ldr	r2, [r3, #20]
 800821e:	4011      	ands	r1, r2
 8008220:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008222:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008224:	695a      	ldr	r2, [r3, #20]
 8008226:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800822a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800822c:	430a      	orrs	r2, r1
 800822e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008232:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008236:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800823a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800823e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008242:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8008246:	430a      	orrs	r2, r1
 8008248:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800824c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008250:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008252:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008256:	f042 0206 	orr.w	r2, r2, #6
 800825a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008264:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008266:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800826a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800826e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008270:	2001      	movs	r0, #1
 8008272:	e7fc      	b.n	800826e <HAL_LTDC_Init+0xce>
 8008274:	f000f800 	.word	0xf000f800

08008278 <HAL_LTDC_ErrorCallback>:
 8008278:	4770      	bx	lr

0800827a <HAL_LTDC_LineEventCallback>:
 800827a:	4770      	bx	lr

0800827c <HAL_LTDC_ReloadEventCallback>:
 800827c:	4770      	bx	lr

0800827e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800827e:	6803      	ldr	r3, [r0, #0]
{
 8008280:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008282:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8008284:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008286:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008288:	0772      	lsls	r2, r6, #29
 800828a:	d514      	bpl.n	80082b6 <HAL_LTDC_IRQHandler+0x38>
 800828c:	0769      	lsls	r1, r5, #29
 800828e:	d512      	bpl.n	80082b6 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008292:	f022 0204 	bic.w	r2, r2, #4
 8008296:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008298:	2204      	movs	r2, #4
 800829a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800829c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 80082a0:	f043 0301 	orr.w	r3, r3, #1
 80082a4:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 80082a8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082aa:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80082ae:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80082b2:	f7ff ffe1 	bl	8008278 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80082b6:	07b2      	lsls	r2, r6, #30
 80082b8:	d516      	bpl.n	80082e8 <HAL_LTDC_IRQHandler+0x6a>
 80082ba:	07ab      	lsls	r3, r5, #30
 80082bc:	d514      	bpl.n	80082e8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80082be:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80082c0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80082c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c4:	f022 0202 	bic.w	r2, r2, #2
 80082c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80082ca:	2202      	movs	r2, #2
 80082cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80082ce:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80082d2:	4313      	orrs	r3, r2
 80082d4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082d8:	2304      	movs	r3, #4
 80082da:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80082de:	2300      	movs	r3, #0
 80082e0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80082e4:	f7ff ffc8 	bl	8008278 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80082e8:	07f0      	lsls	r0, r6, #31
 80082ea:	d510      	bpl.n	800830e <HAL_LTDC_IRQHandler+0x90>
 80082ec:	07e9      	lsls	r1, r5, #31
 80082ee:	d50e      	bpl.n	800830e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082f0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 80082f2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80082f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f6:	f022 0201 	bic.w	r2, r2, #1
 80082fa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80082fc:	2201      	movs	r2, #1
 80082fe:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8008300:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008302:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008306:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800830a:	f7ff ffb6 	bl	800827a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800830e:	0732      	lsls	r2, r6, #28
 8008310:	d511      	bpl.n	8008336 <HAL_LTDC_IRQHandler+0xb8>
 8008312:	072b      	lsls	r3, r5, #28
 8008314:	d50f      	bpl.n	8008336 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008316:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008318:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800831a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800831c:	f022 0208 	bic.w	r2, r2, #8
 8008320:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008322:	2208      	movs	r2, #8
 8008324:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008326:	2301      	movs	r3, #1
 8008328:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800832c:	2300      	movs	r3, #0
 800832e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008332:	f7ff ffa3 	bl	800827c <HAL_LTDC_ReloadEventCallback>
}
 8008336:	bd70      	pop	{r4, r5, r6, pc}

08008338 <HAL_LTDC_ConfigLayer>:
{
 8008338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800833c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8008340:	4606      	mov	r6, r0
 8008342:	460f      	mov	r7, r1
 8008344:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008346:	2b01      	cmp	r3, #1
 8008348:	f04f 0002 	mov.w	r0, #2
 800834c:	d01f      	beq.n	800838e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800834e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8008350:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008354:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008356:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800835a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800835e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008362:	3438      	adds	r4, #56	; 0x38
 8008364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800836a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800836c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800836e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008370:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008372:	4630      	mov	r0, r6
 8008374:	4662      	mov	r2, ip
 8008376:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008378:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800837a:	f7ff fe8b 	bl	8008094 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800837e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008380:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008382:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008386:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800838a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008394 <HAL_LTDC_SetPitch>:
{
 8008394:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008396:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800839a:	2b01      	cmp	r3, #1
 800839c:	f04f 0302 	mov.w	r3, #2
 80083a0:	d02c      	beq.n	80083fc <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80083a2:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083a4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80083a8:	fb04 0402 	mla	r4, r4, r2, r0
 80083ac:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80083ae:	b33c      	cbz	r4, 8008400 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80083b0:	2c01      	cmp	r4, #1
 80083b2:	d027      	beq.n	8008404 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083b4:	1ea5      	subs	r5, r4, #2
 80083b6:	429d      	cmp	r5, r3
 80083b8:	d902      	bls.n	80083c0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 80083ba:	2c07      	cmp	r4, #7
 80083bc:	bf18      	it	ne
 80083be:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80083c0:	01d2      	lsls	r2, r2, #7
 80083c2:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80083c4:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80083c6:	3284      	adds	r2, #132	; 0x84
 80083c8:	4422      	add	r2, r4
 80083ca:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 80083cc:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 80083d0:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 80083d4:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80083d6:	4c0c      	ldr	r4, [pc, #48]	; (8008408 <HAL_LTDC_SetPitch+0x74>)
 80083d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80083da:	f045 0501 	orr.w	r5, r5, #1
 80083de:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80083e0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80083e2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80083e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80083f0:	2301      	movs	r3, #1
 80083f2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80083f6:	2300      	movs	r3, #0
 80083f8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008400:	2304      	movs	r3, #4
 8008402:	e7dd      	b.n	80083c0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008404:	2303      	movs	r3, #3
 8008406:	e7db      	b.n	80083c0 <HAL_LTDC_SetPitch+0x2c>
 8008408:	50001000 	.word	0x50001000

0800840c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008410:	f7fe faa2 	bl	8006958 <HAL_GetTick>
 8008414:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008416:	2c00      	cmp	r4, #0
 8008418:	d061      	beq.n	80084de <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800841a:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800841c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800841e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008422:	2302      	movs	r3, #2
 8008424:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008428:	68d3      	ldr	r3, [r2, #12]
 800842a:	f023 0301 	bic.w	r3, r3, #1
 800842e:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	07d2      	lsls	r2, r2, #31
 8008436:	d448      	bmi.n	80084ca <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008438:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800843c:	430a      	orrs	r2, r1
 800843e:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008440:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008444:	430a      	orrs	r2, r1
 8008446:	69e1      	ldr	r1, [r4, #28]
 8008448:	430a      	orrs	r2, r1
 800844a:	6a21      	ldr	r1, [r4, #32]
 800844c:	430a      	orrs	r2, r1
 800844e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008450:	430a      	orrs	r2, r1
 8008452:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008454:	430a      	orrs	r2, r1
 8008456:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008458:	430a      	orrs	r2, r1
 800845a:	68a1      	ldr	r1, [r4, #8]
 800845c:	430a      	orrs	r2, r1
 800845e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008460:	3901      	subs	r1, #1
 8008462:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008466:	6861      	ldr	r1, [r4, #4]
 8008468:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800846c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800846e:	d103      	bne.n	8008478 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008470:	691a      	ldr	r2, [r3, #16]
 8008472:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008476:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008478:	2200      	movs	r2, #0
 800847a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800847c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800847e:	2a00      	cmp	r2, #0
 8008480:	da04      	bge.n	800848c <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008482:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008484:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008486:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800848a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800848c:	b292      	uxth	r2, r2
 800848e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008490:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008492:	2a00      	cmp	r2, #0
 8008494:	da25      	bge.n	80084e2 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008496:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008498:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800849a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800849e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80084a0:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80084a2:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80084a6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80084aa:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	d019      	beq.n	80084e6 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80084b2:	b2c9      	uxtb	r1, r1
 80084b4:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80084b6:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 80084b8:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 80084ba:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80084bc:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80084be:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80084c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80084c4:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80084ca:	f7fe fa45 	bl	8006958 <HAL_GetTick>
 80084ce:	1b40      	subs	r0, r0, r5
 80084d0:	2805      	cmp	r0, #5
 80084d2:	d9ad      	bls.n	8008430 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80084d8:	2303      	movs	r3, #3
 80084da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 80084de:	2001      	movs	r0, #1
 80084e0:	e7f2      	b.n	80084c8 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80084e2:	6a18      	ldr	r0, [r3, #32]
 80084e4:	e7dd      	b.n	80084a2 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80084e6:	629a      	str	r2, [r3, #40]	; 0x28
 80084e8:	e7e5      	b.n	80084b6 <HAL_MDMA_Init+0xaa>

080084ea <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80084ea:	b1d8      	cbz	r0, 8008524 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 80084ec:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80084ee:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80084f0:	68d3      	ldr	r3, [r2, #12]
 80084f2:	f023 0301 	bic.w	r3, r3, #1
 80084f6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80084fc:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80084fe:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008500:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008502:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008504:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008506:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8008508:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800850a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800850c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800850e:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008510:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008512:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008514:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8008518:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800851c:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8008520:	4618      	mov	r0, r3
 8008522:	4770      	bx	lr
    return HAL_ERROR;
 8008524:	2001      	movs	r0, #1
}
 8008526:	4770      	bx	lr

08008528 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008528:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800852a:	4d1c      	ldr	r5, [pc, #112]	; (800859c <HAL_PWREx_ConfigSupply+0x74>)
{
 800852c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800852e:	68eb      	ldr	r3, [r5, #12]
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	2b06      	cmp	r3, #6
 8008536:	d006      	beq.n	8008546 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008538:	68e8      	ldr	r0, [r5, #12]
 800853a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800853e:	1b00      	subs	r0, r0, r4
 8008540:	bf18      	it	ne
 8008542:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008544:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008546:	68eb      	ldr	r3, [r5, #12]
 8008548:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800854c:	4303      	orrs	r3, r0
 800854e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008550:	f7fe fa02 	bl	8006958 <HAL_GetTick>
 8008554:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008556:	686b      	ldr	r3, [r5, #4]
 8008558:	049a      	lsls	r2, r3, #18
 800855a:	d508      	bpl.n	800856e <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800855c:	f1a4 031d 	sub.w	r3, r4, #29
 8008560:	2b01      	cmp	r3, #1
 8008562:	d90c      	bls.n	800857e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008564:	3c2d      	subs	r4, #45	; 0x2d
 8008566:	2c01      	cmp	r4, #1
 8008568:	d909      	bls.n	800857e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800856a:	2000      	movs	r0, #0
 800856c:	e7ea      	b.n	8008544 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800856e:	f7fe f9f3 	bl	8006958 <HAL_GetTick>
 8008572:	1b80      	subs	r0, r0, r6
 8008574:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008578:	d9ed      	bls.n	8008556 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800857a:	2001      	movs	r0, #1
 800857c:	e7e2      	b.n	8008544 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800857e:	f7fe f9eb 	bl	8006958 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008582:	4d06      	ldr	r5, [pc, #24]	; (800859c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008584:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008586:	68eb      	ldr	r3, [r5, #12]
 8008588:	03db      	lsls	r3, r3, #15
 800858a:	d4ee      	bmi.n	800856a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800858c:	f7fe f9e4 	bl	8006958 <HAL_GetTick>
 8008590:	1b00      	subs	r0, r0, r4
 8008592:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008596:	d9f6      	bls.n	8008586 <HAL_PWREx_ConfigSupply+0x5e>
 8008598:	e7ef      	b.n	800857a <HAL_PWREx_ConfigSupply+0x52>
 800859a:	bf00      	nop
 800859c:	58024800 	.word	0x58024800

080085a0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80085a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80085a4:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80085a6:	b136      	cbz	r6, 80085b6 <QSPI_Config+0x16>
 80085a8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80085ac:	d003      	beq.n	80085b6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80085ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80085b0:	6804      	ldr	r4, [r0, #0]
 80085b2:	3b01      	subs	r3, #1
 80085b4:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80085b6:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80085ba:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80085be:	f1b9 0f00 	cmp.w	r9, #0
 80085c2:	d04f      	beq.n	8008664 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085c4:	694b      	ldr	r3, [r1, #20]
 80085c6:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80085ca:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085cc:	f8d1 a000 	ldr.w	sl, [r1]
 80085d0:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 80085d4:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80085d8:	ea49 0902 	orr.w	r9, r9, r2
 80085dc:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80085e0:	b335      	cbz	r5, 8008630 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80085e2:	688b      	ldr	r3, [r1, #8]
 80085e4:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085e8:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80085ea:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80085ec:	b19f      	cbz	r7, 8008616 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80085ee:	ea4a 0307 	orr.w	r3, sl, r7
 80085f2:	4323      	orrs	r3, r4
 80085f4:	68cc      	ldr	r4, [r1, #12]
 80085f6:	ea43 0308 	orr.w	r3, r3, r8
 80085fa:	ea43 030e 	orr.w	r3, r3, lr
 80085fe:	4333      	orrs	r3, r6
 8008600:	4323      	orrs	r3, r4
 8008602:	ea43 030c 	orr.w	r3, r3, ip
 8008606:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008608:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800860c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800860e:	d00d      	beq.n	800862c <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008610:	684b      	ldr	r3, [r1, #4]
 8008612:	6183      	str	r3, [r0, #24]
 8008614:	e00a      	b.n	800862c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008616:	ea4a 0304 	orr.w	r3, sl, r4
 800861a:	ea43 0308 	orr.w	r3, r3, r8
 800861e:	ea43 030e 	orr.w	r3, r3, lr
 8008622:	4333      	orrs	r3, r6
 8008624:	ea43 030c 	orr.w	r3, r3, ip
 8008628:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800862a:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008630:	b16f      	cbz	r7, 800864e <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008632:	ea4a 0307 	orr.w	r3, sl, r7
 8008636:	4323      	orrs	r3, r4
 8008638:	68cc      	ldr	r4, [r1, #12]
 800863a:	ea43 0308 	orr.w	r3, r3, r8
 800863e:	ea43 030e 	orr.w	r3, r3, lr
 8008642:	4323      	orrs	r3, r4
 8008644:	ea43 030c 	orr.w	r3, r3, ip
 8008648:	ea43 0309 	orr.w	r3, r3, r9
 800864c:	e7dc      	b.n	8008608 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800864e:	ea4a 0304 	orr.w	r3, sl, r4
 8008652:	ea43 0308 	orr.w	r3, r3, r8
 8008656:	ea43 030e 	orr.w	r3, r3, lr
 800865a:	ea43 030c 	orr.w	r3, r3, ip
 800865e:	ea43 0309 	orr.w	r3, r3, r9
 8008662:	e7e2      	b.n	800862a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008664:	b365      	cbz	r5, 80086c0 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008666:	6804      	ldr	r4, [r0, #0]
 8008668:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800866a:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800866c:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800866e:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008672:	694e      	ldr	r6, [r1, #20]
 8008674:	ea43 0502 	orr.w	r5, r3, r2
 8008678:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800867c:	04b6      	lsls	r6, r6, #18
 800867e:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008682:	b1a7      	cbz	r7, 80086ae <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008684:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008686:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800868a:	ea40 0008 	orr.w	r0, r0, r8
 800868e:	ea43 0300 	orr.w	r3, r3, r0
 8008692:	68c8      	ldr	r0, [r1, #12]
 8008694:	ea43 030c 	orr.w	r3, r3, ip
 8008698:	ea43 0300 	orr.w	r3, r3, r0
 800869c:	ea43 0306 	orr.w	r3, r3, r6
 80086a0:	ea43 0305 	orr.w	r3, r3, r5
 80086a4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80086a6:	d0c1      	beq.n	800862c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80086a8:	684b      	ldr	r3, [r1, #4]
 80086aa:	61a3      	str	r3, [r4, #24]
 80086ac:	e7be      	b.n	800862c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80086ae:	ea40 0008 	orr.w	r0, r0, r8
 80086b2:	4303      	orrs	r3, r0
 80086b4:	ea43 030c 	orr.w	r3, r3, ip
 80086b8:	4333      	orrs	r3, r6
 80086ba:	432b      	orrs	r3, r5
 80086bc:	6163      	str	r3, [r4, #20]
 80086be:	e7b5      	b.n	800862c <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80086c0:	b17f      	cbz	r7, 80086e2 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80086c2:	ea46 0307 	orr.w	r3, r6, r7
 80086c6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80086c8:	6800      	ldr	r0, [r0, #0]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	4323      	orrs	r3, r4
 80086ce:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80086d0:	4323      	orrs	r3, r4
 80086d2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80086d4:	4323      	orrs	r3, r4
 80086d6:	68cc      	ldr	r4, [r1, #12]
 80086d8:	4323      	orrs	r3, r4
 80086da:	694c      	ldr	r4, [r1, #20]
 80086dc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80086e0:	e792      	b.n	8008608 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	d0a2      	beq.n	800862c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80086e6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80086e8:	6800      	ldr	r0, [r0, #0]
 80086ea:	4333      	orrs	r3, r6
 80086ec:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80086ee:	431a      	orrs	r2, r3
 80086f0:	694b      	ldr	r3, [r1, #20]
 80086f2:	4332      	orrs	r2, r6
 80086f4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80086f6:	4332      	orrs	r2, r6
 80086f8:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80086fc:	6142      	str	r2, [r0, #20]
}
 80086fe:	e795      	b.n	800862c <QSPI_Config+0x8c>

08008700 <QSPI_WaitFlagStateUntilTimeout>:
{
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008708:	4604      	mov	r4, r0
 800870a:	460e      	mov	r6, r1
 800870c:	4615      	mov	r5, r2
 800870e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	6893      	ldr	r3, [r2, #8]
 8008714:	4233      	tst	r3, r6
 8008716:	bf14      	ite	ne
 8008718:	2301      	movne	r3, #1
 800871a:	2300      	moveq	r3, #0
 800871c:	42ab      	cmp	r3, r5
 800871e:	d101      	bne.n	8008724 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008720:	2000      	movs	r0, #0
 8008722:	e012      	b.n	800874a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008724:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008728:	d0f3      	beq.n	8008712 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872a:	f7fe f915 	bl	8006958 <HAL_GetTick>
 800872e:	1bc0      	subs	r0, r0, r7
 8008730:	4540      	cmp	r0, r8
 8008732:	d802      	bhi.n	800873a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008734:	f1b8 0f00 	cmp.w	r8, #0
 8008738:	d1ea      	bne.n	8008710 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800873a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800873c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800873e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008742:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008744:	f043 0301 	orr.w	r3, r3, #1
 8008748:	6463      	str	r3, [r4, #68]	; 0x44
}
 800874a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008750 <HAL_QSPI_Init>:
{
 8008750:	b530      	push	{r4, r5, lr}
 8008752:	4604      	mov	r4, r0
 8008754:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8008756:	f7fe f8ff 	bl	8006958 <HAL_GetTick>
 800875a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800875c:	2c00      	cmp	r4, #0
 800875e:	d040      	beq.n	80087e2 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008760:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008764:	b93a      	cbnz	r2, 8008776 <HAL_QSPI_Init+0x26>
 8008766:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8008768:	4620      	mov	r0, r4
 800876a:	f7f8 fcbb 	bl	80010e4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800876e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008772:	9b03      	ldr	r3, [sp, #12]
 8008774:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	68a1      	ldr	r1, [r4, #8]
 800877a:	6802      	ldr	r2, [r0, #0]
 800877c:	3901      	subs	r1, #1
 800877e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8008782:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008786:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008788:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800878a:	4620      	mov	r0, r4
 800878c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800878e:	9200      	str	r2, [sp, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	f7ff ffb5 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008796:	bb10      	cbnz	r0, 80087de <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008798:	6822      	ldr	r2, [r4, #0]
 800879a:	69e5      	ldr	r5, [r4, #28]
 800879c:	68e3      	ldr	r3, [r4, #12]
 800879e:	6811      	ldr	r1, [r2, #0]
 80087a0:	432b      	orrs	r3, r5
 80087a2:	6a25      	ldr	r5, [r4, #32]
 80087a4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80087a8:	432b      	orrs	r3, r5
 80087aa:	6865      	ldr	r5, [r4, #4]
 80087ac:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 80087b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80087b4:	430b      	orrs	r3, r1
 80087b6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80087b8:	6855      	ldr	r5, [r2, #4]
 80087ba:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80087be:	430b      	orrs	r3, r1
 80087c0:	6921      	ldr	r1, [r4, #16]
 80087c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80087c6:	4908      	ldr	r1, [pc, #32]	; (80087e8 <HAL_QSPI_Init+0x98>)
 80087c8:	4029      	ands	r1, r5
 80087ca:	430b      	orrs	r3, r1
 80087cc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80087ce:	6813      	ldr	r3, [r2, #0]
 80087d0:	f043 0301 	orr.w	r3, r3, #1
 80087d4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80087d6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80087d8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80087da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80087de:	b005      	add	sp, #20
 80087e0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80087e2:	2001      	movs	r0, #1
 80087e4:	e7fb      	b.n	80087de <HAL_QSPI_Init+0x8e>
 80087e6:	bf00      	nop
 80087e8:	ffe0f8fe 	.word	0xffe0f8fe

080087ec <HAL_QSPI_Command>:
{
 80087ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087f0:	4604      	mov	r4, r0
 80087f2:	b085      	sub	sp, #20
 80087f4:	4617      	mov	r7, r2
 80087f6:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 80087f8:	f7fe f8ae 	bl	8006958 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80087fc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008800:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008802:	2a01      	cmp	r2, #1
 8008804:	d033      	beq.n	800886e <HAL_QSPI_Command+0x82>
 8008806:	2201      	movs	r2, #1
 8008808:	2602      	movs	r6, #2
 800880a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800880e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008812:	2a01      	cmp	r2, #1
 8008814:	fa5f f882 	uxtb.w	r8, r2
 8008818:	d127      	bne.n	800886a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800881a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800881c:	9003      	str	r0, [sp, #12]
 800881e:	2120      	movs	r1, #32
 8008820:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008822:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008824:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008826:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800882a:	f7ff ff69 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800882e:	4605      	mov	r5, r0
 8008830:	b9a0      	cbnz	r0, 800885c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008832:	4602      	mov	r2, r0
 8008834:	4649      	mov	r1, r9
 8008836:	4620      	mov	r0, r4
 8008838:	f7ff feb2 	bl	80085a0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800883c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	b94a      	cbnz	r2, 8008858 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008844:	4642      	mov	r2, r8
 8008846:	4631      	mov	r1, r6
 8008848:	4620      	mov	r0, r4
 800884a:	9700      	str	r7, [sp, #0]
 800884c:	f7ff ff58 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008850:	4605      	mov	r5, r0
 8008852:	b918      	cbnz	r0, 800885c <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008858:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800885c:	2300      	movs	r3, #0
 800885e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008862:	4628      	mov	r0, r5
 8008864:	b005      	add	sp, #20
 8008866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800886a:	4635      	mov	r5, r6
 800886c:	e7f6      	b.n	800885c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800886e:	2502      	movs	r5, #2
 8008870:	e7f7      	b.n	8008862 <HAL_QSPI_Command+0x76>

08008872 <HAL_QSPI_Transmit>:
{
 8008872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008874:	4604      	mov	r4, r0
 8008876:	b085      	sub	sp, #20
 8008878:	4616      	mov	r6, r2
 800887a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800887c:	f7fe f86c 	bl	8006958 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008880:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008884:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008886:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8008888:	2a01      	cmp	r2, #1
 800888a:	d049      	beq.n	8008920 <HAL_QSPI_Transmit+0xae>
 800888c:	2201      	movs	r2, #1
 800888e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008892:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008896:	2a01      	cmp	r2, #1
 8008898:	b2d0      	uxtb	r0, r2
 800889a:	d13f      	bne.n	800891c <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800889c:	2200      	movs	r2, #0
 800889e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	d036      	beq.n	8008912 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80088a4:	2212      	movs	r2, #18
 80088a6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80088aa:	692a      	ldr	r2, [r5, #16]
 80088ac:	3201      	adds	r2, #1
 80088ae:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80088b0:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80088b2:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80088b4:	3201      	adds	r2, #1
 80088b6:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80088b8:	696a      	ldr	r2, [r5, #20]
 80088ba:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80088be:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80088c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80088c2:	b98a      	cbnz	r2, 80088e8 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80088c4:	2201      	movs	r2, #1
 80088c6:	2102      	movs	r1, #2
 80088c8:	4620      	mov	r0, r4
 80088ca:	9600      	str	r6, [sp, #0]
 80088cc:	f7ff ff18 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80088d0:	b910      	cbnz	r0, 80088d8 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	2202      	movs	r2, #2
 80088d6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80088d8:	2301      	movs	r3, #1
 80088da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80088de:	2300      	movs	r3, #0
 80088e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80088e4:	b005      	add	sp, #20
 80088e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80088e8:	2201      	movs	r2, #1
 80088ea:	2104      	movs	r1, #4
 80088ec:	4620      	mov	r0, r4
 80088ee:	9600      	str	r6, [sp, #0]
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	f7ff ff05 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1ee      	bne.n	80088d8 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80088fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80088fc:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8008904:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008906:	3201      	adds	r2, #1
 8008908:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800890a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800890c:	3a01      	subs	r2, #1
 800890e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008910:	e7d6      	b.n	80088c0 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008912:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008914:	f043 0308 	orr.w	r3, r3, #8
 8008918:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800891a:	e7e0      	b.n	80088de <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800891c:	2002      	movs	r0, #2
 800891e:	e7de      	b.n	80088de <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8008920:	2002      	movs	r0, #2
 8008922:	e7df      	b.n	80088e4 <HAL_QSPI_Transmit+0x72>

08008924 <HAL_QSPI_Receive>:
{
 8008924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008926:	4604      	mov	r4, r0
 8008928:	b085      	sub	sp, #20
 800892a:	4616      	mov	r6, r2
 800892c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800892e:	f7fe f813 	bl	8006958 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008932:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8008934:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008936:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800893a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800893e:	2a01      	cmp	r2, #1
 8008940:	d04d      	beq.n	80089de <HAL_QSPI_Receive+0xba>
 8008942:	2201      	movs	r2, #1
 8008944:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008948:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800894c:	2a01      	cmp	r2, #1
 800894e:	b2d0      	uxtb	r0, r2
 8008950:	d143      	bne.n	80089da <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008952:	2200      	movs	r2, #0
 8008954:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008956:	2f00      	cmp	r7, #0
 8008958:	d03a      	beq.n	80089d0 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800895a:	2222      	movs	r2, #34	; 0x22
 800895c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008960:	692a      	ldr	r2, [r5, #16]
 8008962:	3201      	adds	r2, #1
 8008964:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008966:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8008968:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800896a:	3201      	adds	r2, #1
 800896c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800896e:	6969      	ldr	r1, [r5, #20]
 8008970:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8008974:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008978:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800897a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800897e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008980:	b98a      	cbnz	r2, 80089a6 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008982:	2201      	movs	r2, #1
 8008984:	2102      	movs	r1, #2
 8008986:	4620      	mov	r0, r4
 8008988:	9600      	str	r6, [sp, #0]
 800898a:	f7ff feb9 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800898e:	b910      	cbnz	r0, 8008996 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	2202      	movs	r2, #2
 8008994:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008996:	2301      	movs	r3, #1
 8008998:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800899c:	2300      	movs	r3, #0
 800899e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80089a2:	b005      	add	sp, #20
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80089a6:	2201      	movs	r2, #1
 80089a8:	2106      	movs	r1, #6
 80089aa:	4620      	mov	r0, r4
 80089ac:	9600      	str	r6, [sp, #0]
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	f7ff fea6 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d1ee      	bne.n	8008996 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80089b8:	f895 1020 	ldrb.w	r1, [r5, #32]
 80089bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80089be:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80089c0:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80089c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80089c4:	3201      	adds	r2, #1
 80089c6:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80089c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80089ca:	3a01      	subs	r2, #1
 80089cc:	63a2      	str	r2, [r4, #56]	; 0x38
 80089ce:	e7d6      	b.n	800897e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80089d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80089d2:	f043 0308 	orr.w	r3, r3, #8
 80089d6:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80089d8:	e7e0      	b.n	800899c <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 80089da:	2002      	movs	r0, #2
 80089dc:	e7de      	b.n	800899c <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 80089de:	2002      	movs	r0, #2
 80089e0:	e7df      	b.n	80089a2 <HAL_QSPI_Receive+0x7e>

080089e2 <HAL_QSPI_AutoPolling>:
{
 80089e2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80089e6:	4604      	mov	r4, r0
 80089e8:	4615      	mov	r5, r2
 80089ea:	461e      	mov	r6, r3
 80089ec:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80089ee:	f7fd ffb3 	bl	8006958 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80089f2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80089f6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80089f8:	2a01      	cmp	r2, #1
 80089fa:	d040      	beq.n	8008a7e <HAL_QSPI_AutoPolling+0x9c>
 80089fc:	2201      	movs	r2, #1
 80089fe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008a02:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008a06:	2a01      	cmp	r2, #1
 8008a08:	b2d7      	uxtb	r7, r2
 8008a0a:	d136      	bne.n	8008a7a <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008a0c:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a0e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008a10:	9003      	str	r0, [sp, #12]
 8008a12:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008a14:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008a16:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008a18:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008a1c:	2120      	movs	r1, #32
 8008a1e:	f7ff fe6f 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008a22:	bb20      	cbnz	r0, 8008a6e <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008a24:	6821      	ldr	r1, [r4, #0]
 8008a26:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008a28:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008a2a:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008a2c:	686a      	ldr	r2, [r5, #4]
 8008a2e:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008a30:	68aa      	ldr	r2, [r5, #8]
 8008a32:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008a34:	680a      	ldr	r2, [r1, #0]
 8008a36:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008a3a:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008a3c:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008a3e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008a42:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008a44:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8008a46:	68ea      	ldr	r2, [r5, #12]
 8008a48:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008a50:	f7ff fda6 	bl	80085a0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	463a      	mov	r2, r7
 8008a58:	2108      	movs	r1, #8
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	9600      	str	r6, [sp, #0]
 8008a5e:	f7ff fe4f 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008a62:	b920      	cbnz	r0, 8008a6e <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	2208      	movs	r2, #8
 8008a68:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008a6a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008a74:	b004      	add	sp, #16
 8008a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8008a7a:	2002      	movs	r0, #2
 8008a7c:	e7f7      	b.n	8008a6e <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8008a7e:	2002      	movs	r0, #2
 8008a80:	e7f8      	b.n	8008a74 <HAL_QSPI_AutoPolling+0x92>

08008a82 <HAL_QSPI_MemoryMapped>:
{
 8008a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	4616      	mov	r6, r2
 8008a88:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008a8a:	f7fd ff65 	bl	8006958 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008a8e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008a92:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008a94:	2a01      	cmp	r2, #1
 8008a96:	d033      	beq.n	8008b00 <HAL_QSPI_MemoryMapped+0x7e>
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008a9e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	d12a      	bne.n	8008afc <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008aa6:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008aa8:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008aaa:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008aac:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008aae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ab2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ab4:	9100      	str	r1, [sp, #0]
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	f7ff fe22 	bl	8008700 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008abc:	4605      	mov	r5, r0
 8008abe:	b9b8      	cbnz	r0, 8008af0 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	6872      	ldr	r2, [r6, #4]
 8008ac4:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008ac6:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008ac8:	f020 0008 	bic.w	r0, r0, #8
 8008acc:	ea40 0002 	orr.w	r0, r0, r2
 8008ad0:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008ad2:	d107      	bne.n	8008ae4 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008ad4:	6832      	ldr	r2, [r6, #0]
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008ad8:	2210      	movs	r2, #16
 8008ada:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ae2:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008ae4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4620      	mov	r0, r4
 8008aec:	f7ff fd58 	bl	80085a0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8008af0:	2300      	movs	r3, #0
 8008af2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008af6:	4628      	mov	r0, r5
 8008af8:	b003      	add	sp, #12
 8008afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8008afc:	2502      	movs	r5, #2
 8008afe:	e7f7      	b.n	8008af0 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8008b00:	2502      	movs	r5, #2
 8008b02:	e7f8      	b.n	8008af6 <HAL_QSPI_MemoryMapped+0x74>

08008b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b06:	4604      	mov	r4, r0
 8008b08:	b908      	cbnz	r0, 8008b0e <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008b0a:	2001      	movs	r0, #1
 8008b0c:	e08b      	b.n	8008c26 <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b0e:	6803      	ldr	r3, [r0, #0]
 8008b10:	07df      	lsls	r7, r3, #31
 8008b12:	d45e      	bmi.n	8008bd2 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	079e      	lsls	r6, r3, #30
 8008b18:	f100 80af 	bmi.w	8008c7a <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	06da      	lsls	r2, r3, #27
 8008b20:	d527      	bpl.n	8008b72 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b22:	4b9e      	ldr	r3, [pc, #632]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008b24:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b26:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b28:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b2c:	2a08      	cmp	r2, #8
 8008b2e:	d007      	beq.n	8008b40 <HAL_RCC_OscConfig+0x3c>
 8008b30:	2a18      	cmp	r2, #24
 8008b32:	f040 8107 	bne.w	8008d44 <HAL_RCC_OscConfig+0x240>
 8008b36:	f001 0203 	and.w	r2, r1, #3
 8008b3a:	2a01      	cmp	r2, #1
 8008b3c:	f040 8102 	bne.w	8008d44 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	05db      	lsls	r3, r3, #23
 8008b44:	d502      	bpl.n	8008b4c <HAL_RCC_OscConfig+0x48>
 8008b46:	69e3      	ldr	r3, [r4, #28]
 8008b48:	2b80      	cmp	r3, #128	; 0x80
 8008b4a:	d1de      	bne.n	8008b0a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b4c:	f7fd ff1c 	bl	8006988 <HAL_GetREVID>
 8008b50:	f241 0303 	movw	r3, #4099	; 0x1003
 8008b54:	6a21      	ldr	r1, [r4, #32]
 8008b56:	4298      	cmp	r0, r3
 8008b58:	4b90      	ldr	r3, [pc, #576]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008b5a:	f200 80ec 	bhi.w	8008d36 <HAL_RCC_OscConfig+0x232>
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	2920      	cmp	r1, #32
 8008b62:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8008b66:	bf0c      	ite	eq
 8008b68:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008b6c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008b70:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	0719      	lsls	r1, r3, #28
 8008b76:	f100 8127 	bmi.w	8008dc8 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	069a      	lsls	r2, r3, #26
 8008b7e:	f100 8148 	bmi.w	8008e12 <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	075d      	lsls	r5, r3, #29
 8008b86:	d51e      	bpl.n	8008bc6 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008b88:	4d85      	ldr	r5, [pc, #532]	; (8008da0 <HAL_RCC_OscConfig+0x29c>)
 8008b8a:	682b      	ldr	r3, [r5, #0]
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008b92:	f7fd fee1 	bl	8006958 <HAL_GetTick>
 8008b96:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	05da      	lsls	r2, r3, #23
 8008b9c:	f140 815e 	bpl.w	8008e5c <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	4d7e      	ldr	r5, [pc, #504]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	f040 8160 	bne.w	8008e6a <HAL_RCC_OscConfig+0x366>
 8008baa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bb2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008bb6:	f7fd fecf 	bl	8006958 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bba:	4e78      	ldr	r6, [pc, #480]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8008bbc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bbe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008bc0:	079b      	lsls	r3, r3, #30
 8008bc2:	f140 8178 	bpl.w	8008eb6 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f040 817b 	bne.w	8008ec4 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e029      	b.n	8008c26 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd2:	4b72      	ldr	r3, [pc, #456]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008bd4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008bd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bd8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008bdc:	2a10      	cmp	r2, #16
 8008bde:	d005      	beq.n	8008bec <HAL_RCC_OscConfig+0xe8>
 8008be0:	2a18      	cmp	r2, #24
 8008be2:	d10a      	bne.n	8008bfa <HAL_RCC_OscConfig+0xf6>
 8008be4:	f001 0203 	and.w	r2, r1, #3
 8008be8:	2a02      	cmp	r2, #2
 8008bea:	d106      	bne.n	8008bfa <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	039d      	lsls	r5, r3, #14
 8008bf0:	d590      	bpl.n	8008b14 <HAL_RCC_OscConfig+0x10>
 8008bf2:	6863      	ldr	r3, [r4, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d18d      	bne.n	8008b14 <HAL_RCC_OscConfig+0x10>
 8008bf8:	e787      	b.n	8008b0a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008c00:	d112      	bne.n	8008c28 <HAL_RCC_OscConfig+0x124>
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008c08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008c0a:	f7fd fea5 	bl	8006958 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c0e:	4e63      	ldr	r6, [pc, #396]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8008c10:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c12:	6833      	ldr	r3, [r6, #0]
 8008c14:	0398      	lsls	r0, r3, #14
 8008c16:	f53f af7d 	bmi.w	8008b14 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c1a:	f7fd fe9d 	bl	8006958 <HAL_GetTick>
 8008c1e:	1b40      	subs	r0, r0, r5
 8008c20:	2864      	cmp	r0, #100	; 0x64
 8008c22:	d9f6      	bls.n	8008c12 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8008c24:	2003      	movs	r0, #3
}
 8008c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c28:	4d5c      	ldr	r5, [pc, #368]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b99a      	cbnz	r2, 8008c56 <HAL_RCC_OscConfig+0x152>
 8008c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008c3c:	f7fd fe8c 	bl	8006958 <HAL_GetTick>
 8008c40:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	0399      	lsls	r1, r3, #14
 8008c46:	f57f af65 	bpl.w	8008b14 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c4a:	f7fd fe85 	bl	8006958 <HAL_GetTick>
 8008c4e:	1b80      	subs	r0, r0, r6
 8008c50:	2864      	cmp	r0, #100	; 0x64
 8008c52:	d9f6      	bls.n	8008c42 <HAL_RCC_OscConfig+0x13e>
 8008c54:	e7e6      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c56:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008c5a:	d107      	bne.n	8008c6c <HAL_RCC_OscConfig+0x168>
 8008c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	e7ce      	b.n	8008c0a <HAL_RCC_OscConfig+0x106>
 8008c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c78:	e7f6      	b.n	8008c68 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c7a:	4b48      	ldr	r3, [pc, #288]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008c7c:	68e1      	ldr	r1, [r4, #12]
 8008c7e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c80:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008c82:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008c86:	d003      	beq.n	8008c90 <HAL_RCC_OscConfig+0x18c>
 8008c88:	2a18      	cmp	r2, #24
 8008c8a:	d12b      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x1e0>
 8008c8c:	0782      	lsls	r2, r0, #30
 8008c8e:	d129      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	075b      	lsls	r3, r3, #29
 8008c94:	d502      	bpl.n	8008c9c <HAL_RCC_OscConfig+0x198>
 8008c96:	2900      	cmp	r1, #0
 8008c98:	f43f af37 	beq.w	8008b0a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008c9c:	4d3f      	ldr	r5, [pc, #252]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
 8008c9e:	682a      	ldr	r2, [r5, #0]
 8008ca0:	f022 0219 	bic.w	r2, r2, #25
 8008ca4:	430a      	orrs	r2, r1
 8008ca6:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8008ca8:	f7fd fe56 	bl	8006958 <HAL_GetTick>
 8008cac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	075f      	lsls	r7, r3, #29
 8008cb2:	d511      	bpl.n	8008cd8 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb4:	f7fd fe68 	bl	8006988 <HAL_GetREVID>
 8008cb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	4298      	cmp	r0, r3
 8008cc0:	686b      	ldr	r3, [r5, #4]
 8008cc2:	d822      	bhi.n	8008d0a <HAL_RCC_OscConfig+0x206>
 8008cc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008cc8:	2a40      	cmp	r2, #64	; 0x40
 8008cca:	bf0c      	ite	eq
 8008ccc:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8008cd0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8008cd4:	606b      	str	r3, [r5, #4]
 8008cd6:	e721      	b.n	8008b1c <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cd8:	f7fd fe3e 	bl	8006958 <HAL_GetTick>
 8008cdc:	1b80      	subs	r0, r0, r6
 8008cde:	2802      	cmp	r0, #2
 8008ce0:	d9e5      	bls.n	8008cae <HAL_RCC_OscConfig+0x1aa>
 8008ce2:	e79f      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ce4:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ce6:	b1a9      	cbz	r1, 8008d14 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ce8:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cec:	4d2b      	ldr	r5, [pc, #172]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008cf2:	f7fd fe31 	bl	8006958 <HAL_GetTick>
 8008cf6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	0758      	lsls	r0, r3, #29
 8008cfc:	d4da      	bmi.n	8008cb4 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008cfe:	f7fd fe2b 	bl	8006958 <HAL_GetTick>
 8008d02:	1b80      	subs	r0, r0, r6
 8008d04:	2802      	cmp	r0, #2
 8008d06:	d9f7      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x1f4>
 8008d08:	e78c      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d0a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d12:	e7df      	b.n	8008cd4 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8008d14:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d18:	4e20      	ldr	r6, [pc, #128]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 8008d1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d1c:	f7fd fe1c 	bl	8006958 <HAL_GetTick>
 8008d20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008d22:	6833      	ldr	r3, [r6, #0]
 8008d24:	0759      	lsls	r1, r3, #29
 8008d26:	f57f aef9 	bpl.w	8008b1c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d2a:	f7fd fe15 	bl	8006958 <HAL_GetTick>
 8008d2e:	1b40      	subs	r0, r0, r5
 8008d30:	2802      	cmp	r0, #2
 8008d32:	d9f6      	bls.n	8008d22 <HAL_RCC_OscConfig+0x21e>
 8008d34:	e776      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8008d3c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d40:	60da      	str	r2, [r3, #12]
 8008d42:	e716      	b.n	8008b72 <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008d44:	69e2      	ldr	r2, [r4, #28]
 8008d46:	b36a      	cbz	r2, 8008da4 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 8008d48:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d4a:	4d14      	ldr	r5, [pc, #80]	; (8008d9c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 8008d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d50:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d52:	f7fd fe01 	bl	8006958 <HAL_GetTick>
 8008d56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	05df      	lsls	r7, r3, #23
 8008d5c:	d511      	bpl.n	8008d82 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d5e:	f7fd fe13 	bl	8006988 <HAL_GetREVID>
 8008d62:	f241 0303 	movw	r3, #4099	; 0x1003
 8008d66:	6a22      	ldr	r2, [r4, #32]
 8008d68:	4298      	cmp	r0, r3
 8008d6a:	d810      	bhi.n	8008d8e <HAL_RCC_OscConfig+0x28a>
 8008d6c:	686b      	ldr	r3, [r5, #4]
 8008d6e:	2a20      	cmp	r2, #32
 8008d70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008d74:	bf0c      	ite	eq
 8008d76:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8008d7a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8008d7e:	606b      	str	r3, [r5, #4]
 8008d80:	e6f7      	b.n	8008b72 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008d82:	f7fd fde9 	bl	8006958 <HAL_GetTick>
 8008d86:	1b80      	subs	r0, r0, r6
 8008d88:	2802      	cmp	r0, #2
 8008d8a:	d9e5      	bls.n	8008d58 <HAL_RCC_OscConfig+0x254>
 8008d8c:	e74a      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d8e:	68eb      	ldr	r3, [r5, #12]
 8008d90:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8008d94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008d98:	60eb      	str	r3, [r5, #12]
 8008d9a:	e6ea      	b.n	8008b72 <HAL_RCC_OscConfig+0x6e>
 8008d9c:	58024400 	.word	0x58024400
 8008da0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8008da4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008da6:	4e88      	ldr	r6, [pc, #544]	; (8008fc8 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 8008da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008dae:	f7fd fdd3 	bl	8006958 <HAL_GetTick>
 8008db2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008db4:	6833      	ldr	r3, [r6, #0]
 8008db6:	05d8      	lsls	r0, r3, #23
 8008db8:	f57f aedb 	bpl.w	8008b72 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008dbc:	f7fd fdcc 	bl	8006958 <HAL_GetTick>
 8008dc0:	1b40      	subs	r0, r0, r5
 8008dc2:	2802      	cmp	r0, #2
 8008dc4:	d9f6      	bls.n	8008db4 <HAL_RCC_OscConfig+0x2b0>
 8008dc6:	e72d      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008dc8:	6963      	ldr	r3, [r4, #20]
 8008dca:	4d7f      	ldr	r5, [pc, #508]	; (8008fc8 <HAL_RCC_OscConfig+0x4c4>)
 8008dcc:	b183      	cbz	r3, 8008df0 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 8008dce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008dd6:	f7fd fdbf 	bl	8006958 <HAL_GetTick>
 8008dda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ddc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008dde:	079b      	lsls	r3, r3, #30
 8008de0:	f53f aecb 	bmi.w	8008b7a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008de4:	f7fd fdb8 	bl	8006958 <HAL_GetTick>
 8008de8:	1b80      	subs	r0, r0, r6
 8008dea:	2802      	cmp	r0, #2
 8008dec:	d9f6      	bls.n	8008ddc <HAL_RCC_OscConfig+0x2d8>
 8008dee:	e719      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8008df0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8008df8:	f7fd fdae 	bl	8006958 <HAL_GetTick>
 8008dfc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008dfe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008e00:	079f      	lsls	r7, r3, #30
 8008e02:	f57f aeba 	bpl.w	8008b7a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e06:	f7fd fda7 	bl	8006958 <HAL_GetTick>
 8008e0a:	1b80      	subs	r0, r0, r6
 8008e0c:	2802      	cmp	r0, #2
 8008e0e:	d9f6      	bls.n	8008dfe <HAL_RCC_OscConfig+0x2fa>
 8008e10:	e708      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008e12:	69a3      	ldr	r3, [r4, #24]
 8008e14:	4d6c      	ldr	r5, [pc, #432]	; (8008fc8 <HAL_RCC_OscConfig+0x4c4>)
 8008e16:	b183      	cbz	r3, 8008e3a <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008e20:	f7fd fd9a 	bl	8006958 <HAL_GetTick>
 8008e24:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e26:	682b      	ldr	r3, [r5, #0]
 8008e28:	0498      	lsls	r0, r3, #18
 8008e2a:	f53f aeaa 	bmi.w	8008b82 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e2e:	f7fd fd93 	bl	8006958 <HAL_GetTick>
 8008e32:	1b80      	subs	r0, r0, r6
 8008e34:	2802      	cmp	r0, #2
 8008e36:	d9f6      	bls.n	8008e26 <HAL_RCC_OscConfig+0x322>
 8008e38:	e6f4      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e40:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008e42:	f7fd fd89 	bl	8006958 <HAL_GetTick>
 8008e46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	0499      	lsls	r1, r3, #18
 8008e4c:	f57f ae99 	bpl.w	8008b82 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e50:	f7fd fd82 	bl	8006958 <HAL_GetTick>
 8008e54:	1b80      	subs	r0, r0, r6
 8008e56:	2802      	cmp	r0, #2
 8008e58:	d9f6      	bls.n	8008e48 <HAL_RCC_OscConfig+0x344>
 8008e5a:	e6e3      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e5c:	f7fd fd7c 	bl	8006958 <HAL_GetTick>
 8008e60:	1b80      	subs	r0, r0, r6
 8008e62:	2864      	cmp	r0, #100	; 0x64
 8008e64:	f67f ae98 	bls.w	8008b98 <HAL_RCC_OscConfig+0x94>
 8008e68:	e6dc      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e6a:	b9b3      	cbnz	r3, 8008e9a <HAL_RCC_OscConfig+0x396>
 8008e6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e72:	f023 0301 	bic.w	r3, r3, #1
 8008e76:	672b      	str	r3, [r5, #112]	; 0x70
 8008e78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e7a:	f023 0304 	bic.w	r3, r3, #4
 8008e7e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008e80:	f7fd fd6a 	bl	8006958 <HAL_GetTick>
 8008e84:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e88:	0798      	lsls	r0, r3, #30
 8008e8a:	f57f ae9c 	bpl.w	8008bc6 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e8e:	f7fd fd63 	bl	8006958 <HAL_GetTick>
 8008e92:	1b80      	subs	r0, r0, r6
 8008e94:	42b8      	cmp	r0, r7
 8008e96:	d9f6      	bls.n	8008e86 <HAL_RCC_OscConfig+0x382>
 8008e98:	e6c4      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e9e:	d103      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x3a4>
 8008ea0:	f043 0304 	orr.w	r3, r3, #4
 8008ea4:	672b      	str	r3, [r5, #112]	; 0x70
 8008ea6:	e680      	b.n	8008baa <HAL_RCC_OscConfig+0xa6>
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	672b      	str	r3, [r5, #112]	; 0x70
 8008eae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008eb0:	f023 0304 	bic.w	r3, r3, #4
 8008eb4:	e67c      	b.n	8008bb0 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eb6:	f7fd fd4f 	bl	8006958 <HAL_GetTick>
 8008eba:	1b40      	subs	r0, r0, r5
 8008ebc:	42b8      	cmp	r0, r7
 8008ebe:	f67f ae7e 	bls.w	8008bbe <HAL_RCC_OscConfig+0xba>
 8008ec2:	e6af      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ec4:	4d40      	ldr	r5, [pc, #256]	; (8008fc8 <HAL_RCC_OscConfig+0x4c4>)
 8008ec6:	692b      	ldr	r3, [r5, #16]
 8008ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ecc:	2b18      	cmp	r3, #24
 8008ece:	d07d      	beq.n	8008fcc <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8008ed0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eda:	d167      	bne.n	8008fac <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 8008edc:	f7fd fd3c 	bl	8006958 <HAL_GetTick>
 8008ee0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	0199      	lsls	r1, r3, #6
 8008ee6:	d45b      	bmi.n	8008fa0 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ee8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008eea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8008eec:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8008ef0:	f023 0303 	bic.w	r3, r3, #3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ef8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008efc:	62ab      	str	r3, [r5, #40]	; 0x28
 8008efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008f02:	3b01      	subs	r3, #1
 8008f04:	3a01      	subs	r2, #1
 8008f06:	025b      	lsls	r3, r3, #9
 8008f08:	0412      	lsls	r2, r2, #16
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008f10:	4313      	orrs	r3, r2
 8008f12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008f14:	3a01      	subs	r2, #1
 8008f16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008f1e:	3a01      	subs	r2, #1
 8008f20:	0612      	lsls	r2, r2, #24
 8008f22:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008f26:	4313      	orrs	r3, r2
 8008f28:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f2a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f2c:	f023 0301 	bic.w	r3, r3, #1
 8008f30:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008f34:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008f3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008f42:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f46:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008f48:	f023 030c 	bic.w	r3, r3, #12
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008f54:	f023 0302 	bic.w	r3, r3, #2
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f5c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f62:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f6a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f72:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f76:	f043 0301 	orr.w	r3, r3, #1
 8008f7a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008f84:	f7fd fce8 	bl	8006958 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f88:	4d0f      	ldr	r5, [pc, #60]	; (8008fc8 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 8008f8a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	019a      	lsls	r2, r3, #6
 8008f90:	f53f ae1d 	bmi.w	8008bce <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f94:	f7fd fce0 	bl	8006958 <HAL_GetTick>
 8008f98:	1b00      	subs	r0, r0, r4
 8008f9a:	2802      	cmp	r0, #2
 8008f9c:	d9f6      	bls.n	8008f8c <HAL_RCC_OscConfig+0x488>
 8008f9e:	e641      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa0:	f7fd fcda 	bl	8006958 <HAL_GetTick>
 8008fa4:	1b80      	subs	r0, r0, r6
 8008fa6:	2802      	cmp	r0, #2
 8008fa8:	d99b      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x3de>
 8008faa:	e63b      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8008fac:	f7fd fcd4 	bl	8006958 <HAL_GetTick>
 8008fb0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	019b      	lsls	r3, r3, #6
 8008fb6:	f57f ae0a 	bpl.w	8008bce <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fba:	f7fd fccd 	bl	8006958 <HAL_GetTick>
 8008fbe:	1b00      	subs	r0, r0, r4
 8008fc0:	2802      	cmp	r0, #2
 8008fc2:	d9f6      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x4ae>
 8008fc4:	e62e      	b.n	8008c24 <HAL_RCC_OscConfig+0x120>
 8008fc6:	bf00      	nop
 8008fc8:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fcc:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd2:	f43f ae28 	beq.w	8008c26 <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fd6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008fdc:	4281      	cmp	r1, r0
 8008fde:	f47f ad94 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fe2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008fe8:	428a      	cmp	r2, r1
 8008fea:	f47f ad8e 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008ff0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8008ff4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ff6:	4291      	cmp	r1, r2
 8008ff8:	f47f ad87 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ffc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ffe:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009002:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009004:	4291      	cmp	r1, r2
 8009006:	f47f ad80 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800900a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800900c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009010:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009012:	4291      	cmp	r1, r2
 8009014:	f47f ad79 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009018:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800901a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800901e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009020:	4293      	cmp	r3, r2
 8009022:	f47f ad72 	bne.w	8008b0a <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009026:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009028:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800902a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800902e:	429a      	cmp	r2, r3
 8009030:	f43f adcd 	beq.w	8008bce <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009034:	4d0c      	ldr	r5, [pc, #48]	; (8009068 <HAL_RCC_OscConfig+0x564>)
 8009036:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800903e:	f7fd fc8b 	bl	8006958 <HAL_GetTick>
 8009042:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009044:	f7fd fc88 	bl	8006958 <HAL_GetTick>
 8009048:	42b0      	cmp	r0, r6
 800904a:	d0fb      	beq.n	8009044 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800904c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800904e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009054:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009058:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800905c:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800905e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009066:	e5b2      	b.n	8008bce <HAL_RCC_OscConfig+0xca>
 8009068:	58024400 	.word	0x58024400

0800906c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	4c23      	ldr	r4, [pc, #140]	; (80090fc <HAL_RCC_MCOConfig+0x90>)
 8009070:	b088      	sub	sp, #32
 8009072:	460e      	mov	r6, r1
 8009074:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009076:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800907a:	b9f8      	cbnz	r0, 80090bc <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800907c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009080:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009084:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009086:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800908a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800908e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009098:	2302      	movs	r3, #2
 800909a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800909e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090a0:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80090a4:	4816      	ldr	r0, [pc, #88]	; (8009100 <HAL_RCC_MCOConfig+0x94>)
 80090a6:	f7fe fa9d 	bl	80075e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80090b0:	ea43 0106 	orr.w	r1, r3, r6
 80090b4:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80090b6:	6121      	str	r1, [r4, #16]
  }
}
 80090b8:	b008      	add	sp, #32
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80090bc:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090c0:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090c4:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80090c6:	480f      	ldr	r0, [pc, #60]	; (8009104 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80090c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80090cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	9302      	str	r3, [sp, #8]
 80090d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d8:	2302      	movs	r3, #2
 80090da:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80090e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80090e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80090e8:	f7fe fa7c 	bl	80075e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80090f2:	ea43 0106 	orr.w	r1, r3, r6
 80090f6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 80090fa:	e7dc      	b.n	80090b6 <HAL_RCC_MCOConfig+0x4a>
 80090fc:	58024400 	.word	0x58024400
 8009100:	58020000 	.word	0x58020000
 8009104:	58020800 	.word	0x58020800

08009108 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009108:	4b48      	ldr	r3, [pc, #288]	; (800922c <HAL_RCC_GetSysClockFreq+0x124>)
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8009110:	2a10      	cmp	r2, #16
{
 8009112:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009114:	f000 8086 	beq.w	8009224 <HAL_RCC_GetSysClockFreq+0x11c>
 8009118:	2a18      	cmp	r2, #24
 800911a:	d00c      	beq.n	8009136 <HAL_RCC_GetSysClockFreq+0x2e>
 800911c:	2a00      	cmp	r2, #0
 800911e:	f040 8083 	bne.w	8009228 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	4842      	ldr	r0, [pc, #264]	; (8009230 <HAL_RCC_GetSysClockFreq+0x128>)
 8009126:	f012 0f20 	tst.w	r2, #32
 800912a:	d003      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009132:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009134:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009136:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009138:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800913a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800913c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009140:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 8009146:	d0f5      	beq.n	8009134 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009148:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800914c:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009150:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009154:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009158:	4362      	muls	r2, r4
 800915a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800915e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009162:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009164:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009168:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800916c:	d04c      	beq.n	8009208 <HAL_RCC_GetSysClockFreq+0x100>
 800916e:	2902      	cmp	r1, #2
 8009170:	d03c      	beq.n	80091ec <HAL_RCC_GetSysClockFreq+0xe4>
 8009172:	2900      	cmp	r1, #0
 8009174:	d148      	bne.n	8009208 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	0692      	lsls	r2, r2, #26
 800917a:	d527      	bpl.n	80091cc <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	4a2c      	ldr	r2, [pc, #176]	; (8009230 <HAL_RCC_GetSysClockFreq+0x128>)
 8009180:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009186:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918c:	ee07 2a10 	vmov	s14, r2
 8009190:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009194:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009198:	ee06 3a90 	vmov	s13, r3
 800919c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80091a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a4:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091a8:	4b20      	ldr	r3, [pc, #128]	; (800922c <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80091b4:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80091b6:	ee07 3a10 	vmov	s14, r3
 80091ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80091be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80091c2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80091c6:	ee17 0a90 	vmov	r0, s15
 80091ca:	e7b3      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d2:	ee07 3a10 	vmov	s14, r3
 80091d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80091e2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009234 <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091e6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80091ea:	e7dd      	b.n	80091a8 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f2:	ee07 3a10 	vmov	s14, r3
 80091f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009202:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8009238 <HAL_RCC_GetSysClockFreq+0x130>
 8009206:	e7ee      	b.n	80091e6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a10 	vmov	s14, r3
 8009212:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800921a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800921e:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800923c <HAL_RCC_GetSysClockFreq+0x134>
 8009222:	e7e0      	b.n	80091e6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009224:	4806      	ldr	r0, [pc, #24]	; (8009240 <HAL_RCC_GetSysClockFreq+0x138>)
 8009226:	e785      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009228:	4806      	ldr	r0, [pc, #24]	; (8009244 <HAL_RCC_GetSysClockFreq+0x13c>)
 800922a:	e783      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x2c>
 800922c:	58024400 	.word	0x58024400
 8009230:	03d09000 	.word	0x03d09000
 8009234:	4c742400 	.word	0x4c742400
 8009238:	4bbebc20 	.word	0x4bbebc20
 800923c:	4a742400 	.word	0x4a742400
 8009240:	017d7840 	.word	0x017d7840
 8009244:	003d0900 	.word	0x003d0900

08009248 <HAL_RCC_ClockConfig>:
{
 8009248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800924e:	4604      	mov	r4, r0
 8009250:	b910      	cbnz	r0, 8009258 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009252:	2001      	movs	r0, #1
}
 8009254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009258:	4a88      	ldr	r2, [pc, #544]	; (800947c <HAL_RCC_ClockConfig+0x234>)
 800925a:	6813      	ldr	r3, [r2, #0]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	428b      	cmp	r3, r1
 8009262:	f0c0 8093 	bcc.w	800938c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	075f      	lsls	r7, r3, #29
 800926a:	f100 809b 	bmi.w	80093a4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800926e:	071e      	lsls	r6, r3, #28
 8009270:	d50b      	bpl.n	800928a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009272:	4983      	ldr	r1, [pc, #524]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009274:	6966      	ldr	r6, [r4, #20]
 8009276:	69c8      	ldr	r0, [r1, #28]
 8009278:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800927c:	4286      	cmp	r6, r0
 800927e:	d904      	bls.n	800928a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009280:	69ca      	ldr	r2, [r1, #28]
 8009282:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009286:	4332      	orrs	r2, r6
 8009288:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800928a:	06d8      	lsls	r0, r3, #27
 800928c:	d50b      	bpl.n	80092a6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800928e:	497c      	ldr	r1, [pc, #496]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009290:	69a6      	ldr	r6, [r4, #24]
 8009292:	69c8      	ldr	r0, [r1, #28]
 8009294:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009298:	4286      	cmp	r6, r0
 800929a:	d904      	bls.n	80092a6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800929c:	69ca      	ldr	r2, [r1, #28]
 800929e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092a2:	4332      	orrs	r2, r6
 80092a4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80092a6:	0699      	lsls	r1, r3, #26
 80092a8:	d50b      	bpl.n	80092c2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092aa:	4975      	ldr	r1, [pc, #468]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 80092ac:	69e6      	ldr	r6, [r4, #28]
 80092ae:	6a08      	ldr	r0, [r1, #32]
 80092b0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80092b4:	4286      	cmp	r6, r0
 80092b6:	d904      	bls.n	80092c2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092b8:	6a0a      	ldr	r2, [r1, #32]
 80092ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80092be:	4332      	orrs	r2, r6
 80092c0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092c2:	079a      	lsls	r2, r3, #30
 80092c4:	d50b      	bpl.n	80092de <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092c6:	496e      	ldr	r1, [pc, #440]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 80092c8:	68e6      	ldr	r6, [r4, #12]
 80092ca:	6988      	ldr	r0, [r1, #24]
 80092cc:	f000 000f 	and.w	r0, r0, #15
 80092d0:	4286      	cmp	r6, r0
 80092d2:	d904      	bls.n	80092de <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092d4:	698a      	ldr	r2, [r1, #24]
 80092d6:	f022 020f 	bic.w	r2, r2, #15
 80092da:	4332      	orrs	r2, r6
 80092dc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092de:	07df      	lsls	r7, r3, #31
 80092e0:	d46e      	bmi.n	80093c0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	079e      	lsls	r6, r3, #30
 80092e6:	f100 80a1 	bmi.w	800942c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092ea:	4964      	ldr	r1, [pc, #400]	; (800947c <HAL_RCC_ClockConfig+0x234>)
 80092ec:	680a      	ldr	r2, [r1, #0]
 80092ee:	f002 020f 	and.w	r2, r2, #15
 80092f2:	42aa      	cmp	r2, r5
 80092f4:	f200 80a8 	bhi.w	8009448 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092f8:	0758      	lsls	r0, r3, #29
 80092fa:	f100 80b1 	bmi.w	8009460 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092fe:	0719      	lsls	r1, r3, #28
 8009300:	d50b      	bpl.n	800931a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009302:	495f      	ldr	r1, [pc, #380]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009304:	6965      	ldr	r5, [r4, #20]
 8009306:	69c8      	ldr	r0, [r1, #28]
 8009308:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800930c:	4285      	cmp	r5, r0
 800930e:	d204      	bcs.n	800931a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009310:	69ca      	ldr	r2, [r1, #28]
 8009312:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009316:	432a      	orrs	r2, r5
 8009318:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800931a:	06da      	lsls	r2, r3, #27
 800931c:	d50b      	bpl.n	8009336 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800931e:	4958      	ldr	r1, [pc, #352]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009320:	69a5      	ldr	r5, [r4, #24]
 8009322:	69c8      	ldr	r0, [r1, #28]
 8009324:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009328:	4285      	cmp	r5, r0
 800932a:	d204      	bcs.n	8009336 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800932c:	69ca      	ldr	r2, [r1, #28]
 800932e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009332:	432a      	orrs	r2, r5
 8009334:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009336:	069b      	lsls	r3, r3, #26
 8009338:	d50b      	bpl.n	8009352 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800933a:	4a51      	ldr	r2, [pc, #324]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 800933c:	69e0      	ldr	r0, [r4, #28]
 800933e:	6a11      	ldr	r1, [r2, #32]
 8009340:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8009344:	4288      	cmp	r0, r1
 8009346:	d204      	bcs.n	8009352 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009348:	6a13      	ldr	r3, [r2, #32]
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	4303      	orrs	r3, r0
 8009350:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009352:	f7ff fed9 	bl	8009108 <HAL_RCC_GetSysClockFreq>
 8009356:	494a      	ldr	r1, [pc, #296]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009358:	4a4a      	ldr	r2, [pc, #296]	; (8009484 <HAL_RCC_ClockConfig+0x23c>)
 800935a:	698b      	ldr	r3, [r1, #24]
 800935c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009360:	5cd3      	ldrb	r3, [r2, r3]
 8009362:	f003 031f 	and.w	r3, r3, #31
 8009366:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009368:	698b      	ldr	r3, [r1, #24]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	5cd3      	ldrb	r3, [r2, r3]
 8009370:	4a45      	ldr	r2, [pc, #276]	; (8009488 <HAL_RCC_ClockConfig+0x240>)
 8009372:	f003 031f 	and.w	r3, r3, #31
 8009376:	fa20 f303 	lsr.w	r3, r0, r3
 800937a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800937c:	4b43      	ldr	r3, [pc, #268]	; (800948c <HAL_RCC_ClockConfig+0x244>)
 800937e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009380:	4b43      	ldr	r3, [pc, #268]	; (8009490 <HAL_RCC_ClockConfig+0x248>)
}
 8009382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	f7f8 b842 	b.w	8001410 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	f023 030f 	bic.w	r3, r3, #15
 8009392:	430b      	orrs	r3, r1
 8009394:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	428b      	cmp	r3, r1
 800939e:	f47f af58 	bne.w	8009252 <HAL_RCC_ClockConfig+0xa>
 80093a2:	e760      	b.n	8009266 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093a4:	4936      	ldr	r1, [pc, #216]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 80093a6:	6926      	ldr	r6, [r4, #16]
 80093a8:	6988      	ldr	r0, [r1, #24]
 80093aa:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80093ae:	4286      	cmp	r6, r0
 80093b0:	f67f af5d 	bls.w	800926e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093b4:	698a      	ldr	r2, [r1, #24]
 80093b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80093ba:	4332      	orrs	r2, r6
 80093bc:	618a      	str	r2, [r1, #24]
 80093be:	e756      	b.n	800926e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80093c0:	4b2f      	ldr	r3, [pc, #188]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 80093c2:	68a1      	ldr	r1, [r4, #8]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80093ca:	430a      	orrs	r2, r1
 80093cc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ce:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093d0:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093d2:	2a02      	cmp	r2, #2
 80093d4:	d11d      	bne.n	8009412 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093da:	f43f af3a 	beq.w	8009252 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093de:	4e28      	ldr	r6, [pc, #160]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093e0:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093e4:	6933      	ldr	r3, [r6, #16]
 80093e6:	f023 0307 	bic.w	r3, r3, #7
 80093ea:	4313      	orrs	r3, r2
 80093ec:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 80093ee:	f7fd fab3 	bl	8006958 <HAL_GetTick>
 80093f2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f4:	6933      	ldr	r3, [r6, #16]
 80093f6:	6862      	ldr	r2, [r4, #4]
 80093f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093fc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009400:	f43f af6f 	beq.w	80092e2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009404:	f7fd faa8 	bl	8006958 <HAL_GetTick>
 8009408:	1bc0      	subs	r0, r0, r7
 800940a:	4540      	cmp	r0, r8
 800940c:	d9f2      	bls.n	80093f4 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800940e:	2003      	movs	r0, #3
 8009410:	e720      	b.n	8009254 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009412:	2a03      	cmp	r2, #3
 8009414:	d102      	bne.n	800941c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009416:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800941a:	e7de      	b.n	80093da <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800941c:	2a01      	cmp	r2, #1
 800941e:	d102      	bne.n	8009426 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009420:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009424:	e7d9      	b.n	80093da <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009426:	f013 0f04 	tst.w	r3, #4
 800942a:	e7d6      	b.n	80093da <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800942c:	4914      	ldr	r1, [pc, #80]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 800942e:	68e6      	ldr	r6, [r4, #12]
 8009430:	6988      	ldr	r0, [r1, #24]
 8009432:	f000 000f 	and.w	r0, r0, #15
 8009436:	4286      	cmp	r6, r0
 8009438:	f4bf af57 	bcs.w	80092ea <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800943c:	698a      	ldr	r2, [r1, #24]
 800943e:	f022 020f 	bic.w	r2, r2, #15
 8009442:	4332      	orrs	r2, r6
 8009444:	618a      	str	r2, [r1, #24]
 8009446:	e750      	b.n	80092ea <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009448:	680a      	ldr	r2, [r1, #0]
 800944a:	f022 020f 	bic.w	r2, r2, #15
 800944e:	432a      	orrs	r2, r5
 8009450:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009452:	680a      	ldr	r2, [r1, #0]
 8009454:	f002 020f 	and.w	r2, r2, #15
 8009458:	42aa      	cmp	r2, r5
 800945a:	f47f aefa 	bne.w	8009252 <HAL_RCC_ClockConfig+0xa>
 800945e:	e74b      	b.n	80092f8 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009460:	4907      	ldr	r1, [pc, #28]	; (8009480 <HAL_RCC_ClockConfig+0x238>)
 8009462:	6925      	ldr	r5, [r4, #16]
 8009464:	6988      	ldr	r0, [r1, #24]
 8009466:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800946a:	4285      	cmp	r5, r0
 800946c:	f4bf af47 	bcs.w	80092fe <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009470:	698a      	ldr	r2, [r1, #24]
 8009472:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009476:	432a      	orrs	r2, r5
 8009478:	618a      	str	r2, [r1, #24]
 800947a:	e740      	b.n	80092fe <HAL_RCC_ClockConfig+0xb6>
 800947c:	52002000 	.word	0x52002000
 8009480:	58024400 	.word	0x58024400
 8009484:	08021b78 	.word	0x08021b78
 8009488:	24000050 	.word	0x24000050
 800948c:	2400004c 	.word	0x2400004c
 8009490:	24000058 	.word	0x24000058

08009494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009494:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009496:	4c0c      	ldr	r4, [pc, #48]	; (80094c8 <HAL_RCC_GetHCLKFreq+0x34>)
 8009498:	f7ff fe36 	bl	8009108 <HAL_RCC_GetSysClockFreq>
 800949c:	490b      	ldr	r1, [pc, #44]	; (80094cc <HAL_RCC_GetHCLKFreq+0x38>)
 800949e:	69a3      	ldr	r3, [r4, #24]
 80094a0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80094a4:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094a6:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094a8:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094ac:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80094b0:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094b4:	5ccb      	ldrb	r3, [r1, r3]
 80094b6:	f003 031f 	and.w	r3, r3, #31
 80094ba:	fa22 f003 	lsr.w	r0, r2, r3
 80094be:	4b04      	ldr	r3, [pc, #16]	; (80094d0 <HAL_RCC_GetHCLKFreq+0x3c>)
 80094c0:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094c2:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <HAL_RCC_GetHCLKFreq+0x40>)
 80094c4:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80094c6:	bd10      	pop	{r4, pc}
 80094c8:	58024400 	.word	0x58024400
 80094cc:	08021b78 	.word	0x08021b78
 80094d0:	24000050 	.word	0x24000050
 80094d4:	2400004c 	.word	0x2400004c

080094d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094d8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80094da:	f7ff ffdb 	bl	8009494 <HAL_RCC_GetHCLKFreq>
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80094e0:	4a05      	ldr	r2, [pc, #20]	; (80094f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80094e8:	5cd3      	ldrb	r3, [r2, r3]
 80094ea:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80094ee:	40d8      	lsrs	r0, r3
 80094f0:	bd08      	pop	{r3, pc}
 80094f2:	bf00      	nop
 80094f4:	58024400 	.word	0x58024400
 80094f8:	08021b78 	.word	0x08021b78

080094fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80094fe:	f7ff ffc9 	bl	8009494 <HAL_RCC_GetHCLKFreq>
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009504:	4a05      	ldr	r2, [pc, #20]	; (800951c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800950c:	5cd3      	ldrb	r3, [r2, r3]
 800950e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009512:	40d8      	lsrs	r0, r3
 8009514:	bd08      	pop	{r3, pc}
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	08021b78 	.word	0x08021b78

08009520 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009520:	233f      	movs	r3, #63	; 0x3f
 8009522:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <HAL_RCC_GetClockConfig+0x4c>)
 8009526:	691a      	ldr	r2, [r3, #16]
 8009528:	f002 0207 	and.w	r2, r2, #7
 800952c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800952e:	699a      	ldr	r2, [r3, #24]
 8009530:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009534:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	f002 020f 	and.w	r2, r2, #15
 800953c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800953e:	699a      	ldr	r2, [r3, #24]
 8009540:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009544:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800954c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800954e:	69da      	ldr	r2, [r3, #28]
 8009550:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009554:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800955c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <HAL_RCC_GetClockConfig+0x50>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 030f 	and.w	r3, r3, #15
 8009566:	600b      	str	r3, [r1, #0]
}
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
 8009570:	52002000 	.word	0x52002000

08009574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009576:	4c3a      	ldr	r4, [pc, #232]	; (8009660 <RCCEx_PLL2_Config+0xec>)
{
 8009578:	4606      	mov	r6, r0
 800957a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800957c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800957e:	f003 0303 	and.w	r3, r3, #3
 8009582:	2b03      	cmp	r3, #3
 8009584:	d069      	beq.n	800965a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800958c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800958e:	f7fd f9e3 	bl	8006958 <HAL_GetTick>
 8009592:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	011a      	lsls	r2, r3, #4
 8009598:	d44b      	bmi.n	8009632 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800959a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800959c:	6832      	ldr	r2, [r6, #0]
 800959e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80095a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80095a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80095a8:	68b3      	ldr	r3, [r6, #8]
 80095aa:	68f2      	ldr	r2, [r6, #12]
 80095ac:	3b01      	subs	r3, #1
 80095ae:	3a01      	subs	r2, #1
 80095b0:	025b      	lsls	r3, r3, #9
 80095b2:	0412      	lsls	r2, r2, #16
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80095ba:	4313      	orrs	r3, r2
 80095bc:	6872      	ldr	r2, [r6, #4]
 80095be:	3a01      	subs	r2, #1
 80095c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095c4:	4313      	orrs	r3, r2
 80095c6:	6932      	ldr	r2, [r6, #16]
 80095c8:	3a01      	subs	r2, #1
 80095ca:	0612      	lsls	r2, r2, #24
 80095cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80095d0:	4313      	orrs	r3, r2
 80095d2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095d6:	6972      	ldr	r2, [r6, #20]
 80095d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095dc:	4313      	orrs	r3, r2
 80095de:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095e2:	69b2      	ldr	r2, [r6, #24]
 80095e4:	f023 0320 	bic.w	r3, r3, #32
 80095e8:	4313      	orrs	r3, r2
 80095ea:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095ee:	f023 0310 	bic.w	r3, r3, #16
 80095f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80095f6:	69f2      	ldr	r2, [r6, #28]
 80095f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095fc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009600:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009604:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009608:	f043 0310 	orr.w	r3, r3, #16
 800960c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800960e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009610:	b9b5      	cbnz	r5, 8009640 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009616:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009618:	4c11      	ldr	r4, [pc, #68]	; (8009660 <RCCEx_PLL2_Config+0xec>)
 800961a:	6823      	ldr	r3, [r4, #0]
 800961c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009620:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009622:	f7fd f999 	bl	8006958 <HAL_GetTick>
 8009626:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	011b      	lsls	r3, r3, #4
 800962c:	d50f      	bpl.n	800964e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800962e:	2000      	movs	r0, #0
 8009630:	e005      	b.n	800963e <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009632:	f7fd f991 	bl	8006958 <HAL_GetTick>
 8009636:	1bc0      	subs	r0, r0, r7
 8009638:	2802      	cmp	r0, #2
 800963a:	d9ab      	bls.n	8009594 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800963c:	2003      	movs	r0, #3
}
 800963e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009640:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009642:	bf0c      	ite	eq
 8009644:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009648:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800964c:	e7e3      	b.n	8009616 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800964e:	f7fd f983 	bl	8006958 <HAL_GetTick>
 8009652:	1b40      	subs	r0, r0, r5
 8009654:	2802      	cmp	r0, #2
 8009656:	d9e7      	bls.n	8009628 <RCCEx_PLL2_Config+0xb4>
 8009658:	e7f0      	b.n	800963c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800965a:	2001      	movs	r0, #1
 800965c:	e7ef      	b.n	800963e <RCCEx_PLL2_Config+0xca>
 800965e:	bf00      	nop
 8009660:	58024400 	.word	0x58024400

08009664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009666:	4c3a      	ldr	r4, [pc, #232]	; (8009750 <RCCEx_PLL3_Config+0xec>)
{
 8009668:	4606      	mov	r6, r0
 800966a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800966c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800966e:	f003 0303 	and.w	r3, r3, #3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d069      	beq.n	800974a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800967c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800967e:	f7fd f96b 	bl	8006958 <HAL_GetTick>
 8009682:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	009a      	lsls	r2, r3, #2
 8009688:	d44b      	bmi.n	8009722 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800968a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800968c:	6832      	ldr	r2, [r6, #0]
 800968e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8009692:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009696:	62a3      	str	r3, [r4, #40]	; 0x28
 8009698:	68b3      	ldr	r3, [r6, #8]
 800969a:	68f2      	ldr	r2, [r6, #12]
 800969c:	3b01      	subs	r3, #1
 800969e:	3a01      	subs	r2, #1
 80096a0:	025b      	lsls	r3, r3, #9
 80096a2:	0412      	lsls	r2, r2, #16
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80096aa:	4313      	orrs	r3, r2
 80096ac:	6872      	ldr	r2, [r6, #4]
 80096ae:	3a01      	subs	r2, #1
 80096b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096b4:	4313      	orrs	r3, r2
 80096b6:	6932      	ldr	r2, [r6, #16]
 80096b8:	3a01      	subs	r2, #1
 80096ba:	0612      	lsls	r2, r2, #24
 80096bc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80096c0:	4313      	orrs	r3, r2
 80096c2:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096c6:	6972      	ldr	r2, [r6, #20]
 80096c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80096cc:	4313      	orrs	r3, r2
 80096ce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80096d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096d2:	69b2      	ldr	r2, [r6, #24]
 80096d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d8:	4313      	orrs	r3, r2
 80096da:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80096dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80096e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096e6:	69f2      	ldr	r2, [r6, #28]
 80096e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80096f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80096f4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80096f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80096f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096fc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80096fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009700:	b9b5      	cbnz	r5, 8009730 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009706:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009708:	4c11      	ldr	r4, [pc, #68]	; (8009750 <RCCEx_PLL3_Config+0xec>)
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009710:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009712:	f7fd f921 	bl	8006958 <HAL_GetTick>
 8009716:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	d50f      	bpl.n	800973e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800971e:	2000      	movs	r0, #0
 8009720:	e005      	b.n	800972e <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009722:	f7fd f919 	bl	8006958 <HAL_GetTick>
 8009726:	1bc0      	subs	r0, r0, r7
 8009728:	2802      	cmp	r0, #2
 800972a:	d9ab      	bls.n	8009684 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800972c:	2003      	movs	r0, #3
}
 800972e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009730:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009732:	bf0c      	ite	eq
 8009734:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009738:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800973c:	e7e3      	b.n	8009706 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800973e:	f7fd f90b 	bl	8006958 <HAL_GetTick>
 8009742:	1b40      	subs	r0, r0, r5
 8009744:	2802      	cmp	r0, #2
 8009746:	d9e7      	bls.n	8009718 <RCCEx_PLL3_Config+0xb4>
 8009748:	e7f0      	b.n	800972c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800974a:	2001      	movs	r0, #1
 800974c:	e7ef      	b.n	800972e <RCCEx_PLL3_Config+0xca>
 800974e:	bf00      	nop
 8009750:	58024400 	.word	0x58024400

08009754 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009758:	6803      	ldr	r3, [r0, #0]
{
 800975a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800975c:	011c      	lsls	r4, r3, #4
 800975e:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8009762:	d509      	bpl.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009764:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976a:	d02e      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800976c:	d813      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800976e:	b1f3      	cbz	r3, 80097ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8009770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009774:	d021      	beq.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x66>
 8009776:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009778:	682b      	ldr	r3, [r5, #0]
 800977a:	05d8      	lsls	r0, r3, #23
 800977c:	f140 8104 	bpl.w	8009988 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009780:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009782:	2b04      	cmp	r3, #4
 8009784:	f200 80ff 	bhi.w	8009986 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8009788:	e8df f013 	tbh	[pc, r3, lsl #1]
 800978c:	002b0024 	.word	0x002b0024
 8009790:	002900f7 	.word	0x002900f7
 8009794:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800979a:	d1ec      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800979c:	4aaa      	ldr	r2, [pc, #680]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800979e:	2600      	movs	r6, #0
 80097a0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80097a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80097a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80097a8:	430b      	orrs	r3, r1
 80097aa:	6513      	str	r3, [r2, #80]	; 0x50
 80097ac:	e7e4      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ae:	4aa6      	ldr	r2, [pc, #664]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80097b8:	e7f0      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097ba:	2102      	movs	r1, #2
 80097bc:	3008      	adds	r0, #8
 80097be:	f7ff fed9 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097c2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d1d7      	bne.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80097c8:	e7e8      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ca:	2102      	movs	r1, #2
 80097cc:	3028      	adds	r0, #40	; 0x28
 80097ce:	f7ff ff49 	bl	8009664 <RCCEx_PLL3_Config>
 80097d2:	e7f6      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097d4:	4a9c      	ldr	r2, [pc, #624]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80097d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 80097de:	4634      	mov	r4, r6
 80097e0:	e005      	b.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097e2:	2100      	movs	r1, #0
 80097e4:	f105 0008 	add.w	r0, r5, #8
 80097e8:	f7ff fec4 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097ec:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 80097ee:	2c00      	cmp	r4, #0
 80097f0:	f040 80cc 	bne.w	800998c <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097f4:	4a94      	ldr	r2, [pc, #592]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80097f6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80097f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80097fa:	f023 0307 	bic.w	r3, r3, #7
 80097fe:	430b      	orrs	r3, r1
 8009800:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	0599      	lsls	r1, r3, #22
 8009806:	d50d      	bpl.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009808:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800980a:	2b80      	cmp	r3, #128	; 0x80
 800980c:	f000 80dc 	beq.w	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009810:	f200 80be 	bhi.w	8009990 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 80ca 	beq.w	80099ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800981a:	2b40      	cmp	r3, #64	; 0x40
 800981c:	f000 80cd 	beq.w	80099ba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009820:	2601      	movs	r6, #1
 8009822:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	055a      	lsls	r2, r3, #21
 8009828:	d510      	bpl.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800982a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800982e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009832:	f000 80ef 	beq.w	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8009836:	f200 80cf 	bhi.w	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 80dd 	beq.w	80099fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009844:	f000 80df 	beq.w	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8009848:	2601      	movs	r6, #1
 800984a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	051b      	lsls	r3, r3, #20
 8009850:	d510      	bpl.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009852:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8009856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800985a:	f000 8104 	beq.w	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800985e:	f200 80e1 	bhi.w	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80f2 	beq.w	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800986c:	f000 80f4 	beq.w	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009870:	2601      	movs	r6, #1
 8009872:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	019f      	lsls	r7, r3, #6
 8009878:	d50d      	bpl.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800987a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800987c:	2b20      	cmp	r3, #32
 800987e:	f000 810c 	beq.w	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x346>
 8009882:	f200 80f8 	bhi.w	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 80f8 	beq.w	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x328>
 800988c:	2b10      	cmp	r3, #16
 800988e:	f000 80fe 	beq.w	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009892:	2601      	movs	r6, #1
 8009894:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009896:	682b      	ldr	r3, [r5, #0]
 8009898:	04d8      	lsls	r0, r3, #19
 800989a:	d50f      	bpl.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800989c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a2:	f000 8120 	beq.w	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80098a6:	f200 8101 	bhi.w	8009aac <HAL_RCCEx_PeriphCLKConfig+0x358>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 810e 	beq.w	8009acc <HAL_RCCEx_PeriphCLKConfig+0x378>
 80098b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b4:	f000 8110 	beq.w	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80098b8:	2601      	movs	r6, #1
 80098ba:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	0499      	lsls	r1, r3, #18
 80098c0:	d50f      	bpl.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 80098c2:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80098c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098c8:	f000 812e 	beq.w	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80098cc:	f200 8113 	bhi.w	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8119 	beq.w	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80098d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098da:	f000 811e 	beq.w	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80098de:	2601      	movs	r6, #1
 80098e0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098e2:	682b      	ldr	r3, [r5, #0]
 80098e4:	045a      	lsls	r2, r3, #17
 80098e6:	d510      	bpl.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 80098e8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 80098ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098f0:	f000 813c 	beq.w	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80098f4:	f200 8120 	bhi.w	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8126 	beq.w	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80098fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009902:	f000 812c 	beq.w	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009906:	2601      	movs	r6, #1
 8009908:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	015b      	lsls	r3, r3, #5
 800990e:	d515      	bpl.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 8009910:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009912:	b14b      	cbz	r3, 8009928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009918:	f040 8130 	bne.w	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800991c:	2101      	movs	r1, #1
 800991e:	f105 0008 	add.w	r0, r5, #8
 8009922:	f7ff fe27 	bl	8009574 <RCCEx_PLL2_Config>
 8009926:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009928:	2c00      	cmp	r4, #0
 800992a:	f040 812a 	bne.w	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800992e:	4a46      	ldr	r2, [pc, #280]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009930:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009932:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009938:	430b      	orrs	r3, r1
 800993a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800993c:	682b      	ldr	r3, [r5, #0]
 800993e:	041f      	lsls	r7, r3, #16
 8009940:	d50d      	bpl.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 8009942:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009948:	f000 811d 	beq.w	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800994c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009950:	f000 8127 	beq.w	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 811b 	beq.w	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800995a:	2601      	movs	r6, #1
 800995c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	01d8      	lsls	r0, r3, #7
 8009962:	f140 8135 	bpl.w	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 8009966:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009968:	2b03      	cmp	r3, #3
 800996a:	f200 8176 	bhi.w	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800996e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009972:	0126      	.short	0x0126
 8009974:	016d0121 	.word	0x016d0121
 8009978:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800997a:	2100      	movs	r1, #0
 800997c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009980:	f7ff fe70 	bl	8009664 <RCCEx_PLL3_Config>
 8009984:	e732      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009986:	2601      	movs	r6, #1
 8009988:	4634      	mov	r4, r6
 800998a:	e73a      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xae>
 800998c:	4626      	mov	r6, r4
 800998e:	e738      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009990:	2bc0      	cmp	r3, #192	; 0xc0
 8009992:	d003      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x248>
 8009994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009998:	f47f af42 	bne.w	8009820 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800999c:	b9d4      	cbnz	r4, 80099d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800999e:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099a0:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80099a2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80099a4:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80099a8:	430b      	orrs	r3, r1
 80099aa:	6513      	str	r3, [r2, #80]	; 0x50
 80099ac:	e73a      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ae:	4a26      	ldr	r2, [pc, #152]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099b0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80099b8:	e7f0      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ba:	2100      	movs	r1, #0
 80099bc:	f105 0008 	add.w	r0, r5, #8
 80099c0:	f7ff fdd8 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c4:	4604      	mov	r4, r0
        break;
 80099c6:	e7e9      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099c8:	2100      	movs	r1, #0
 80099ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80099ce:	f7ff fe49 	bl	8009664 <RCCEx_PLL3_Config>
 80099d2:	e7f7      	b.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80099d4:	4626      	mov	r6, r4
 80099d6:	e725      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 80099d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099dc:	d003      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80099de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099e2:	f47f af31 	bne.w	8009848 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 80099e6:	b9dc      	cbnz	r4, 8009a20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099e8:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099ea:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80099ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80099f0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80099f4:	430b      	orrs	r3, r1
 80099f6:	6593      	str	r3, [r2, #88]	; 0x58
 80099f8:	e728      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099fa:	4a13      	ldr	r2, [pc, #76]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80099fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80099fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a02:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009a04:	e7ef      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a06:	2100      	movs	r1, #0
 8009a08:	f105 0008 	add.w	r0, r5, #8
 8009a0c:	f7ff fdb2 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a10:	4604      	mov	r4, r0
        break;
 8009a12:	e7e8      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a14:	2100      	movs	r1, #0
 8009a16:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009a1a:	f7ff fe23 	bl	8009664 <RCCEx_PLL3_Config>
 8009a1e:	e7f7      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009a20:	4626      	mov	r6, r4
 8009a22:	e713      	b.n	800984c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a28:	d003      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a2e:	f47f af1f 	bne.w	8009870 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 8009a32:	b9f4      	cbnz	r4, 8009a72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a34:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009a36:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8009a3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009a3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009a40:	430b      	orrs	r3, r1
 8009a42:	6593      	str	r3, [r2, #88]	; 0x58
 8009a44:	e716      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8009a46:	bf00      	nop
 8009a48:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4c:	4aa1      	ldr	r2, [pc, #644]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009a4e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a54:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009a56:	e7ec      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a58:	2100      	movs	r1, #0
 8009a5a:	f105 0008 	add.w	r0, r5, #8
 8009a5e:	f7ff fd89 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a62:	4604      	mov	r4, r0
        break;
 8009a64:	e7e5      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a66:	2100      	movs	r1, #0
 8009a68:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009a6c:	f7ff fdfa 	bl	8009664 <RCCEx_PLL3_Config>
 8009a70:	e7f7      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8009a72:	4626      	mov	r6, r4
 8009a74:	e6fe      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 8009a76:	2b30      	cmp	r3, #48	; 0x30
 8009a78:	f47f af0b 	bne.w	8009892 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 8009a7c:	b9a4      	cbnz	r4, 8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009a7e:	4a95      	ldr	r2, [pc, #596]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009a80:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8009a82:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009a84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a8c:	e703      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a8e:	4a91      	ldr	r2, [pc, #580]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009a90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a96:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009a98:	e7f0      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a9a:	2102      	movs	r1, #2
 8009a9c:	f105 0008 	add.w	r0, r5, #8
 8009aa0:	f7ff fd68 	bl	8009574 <RCCEx_PLL2_Config>
 8009aa4:	4604      	mov	r4, r0
        break;
 8009aa6:	e7e9      	b.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8009aa8:	4626      	mov	r6, r4
 8009aaa:	e6f4      	b.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009aac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ab0:	d003      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x366>
 8009ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ab6:	f47f aeff 	bne.w	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 8009aba:	b9d4      	cbnz	r4, 8009af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009abc:	4a85      	ldr	r2, [pc, #532]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009abe:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8009ac0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6513      	str	r3, [r2, #80]	; 0x50
 8009aca:	e6f7      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009acc:	4a81      	ldr	r2, [pc, #516]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009ace:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8009ad6:	e7f0      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ad8:	2100      	movs	r1, #0
 8009ada:	f105 0008 	add.w	r0, r5, #8
 8009ade:	f7ff fd49 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ae2:	4604      	mov	r4, r0
        break;
 8009ae4:	e7e9      	b.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009aec:	f7ff fdba 	bl	8009664 <RCCEx_PLL3_Config>
 8009af0:	e7f7      	b.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8009af2:	4626      	mov	r6, r4
 8009af4:	e6e2      	b.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009afa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009afe:	d003      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009b04:	f47f aeeb 	bne.w	80098de <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 8009b08:	b9a4      	cbnz	r4, 8009b34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009b0a:	4a72      	ldr	r2, [pc, #456]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009b0c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8009b0e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b10:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009b14:	430b      	orrs	r3, r1
 8009b16:	6513      	str	r3, [r2, #80]	; 0x50
 8009b18:	e6e3      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	f105 0008 	add.w	r0, r5, #8
 8009b20:	f7ff fd28 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b24:	4604      	mov	r4, r0
        break;
 8009b26:	e7ef      	b.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b28:	2101      	movs	r1, #1
 8009b2a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009b2e:	f7ff fd99 	bl	8009664 <RCCEx_PLL3_Config>
 8009b32:	e7f7      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009b34:	4626      	mov	r6, r4
 8009b36:	e6d4      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009b38:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b3c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009b40:	d003      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8009b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b46:	f47f aede 	bne.w	8009906 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 8009b4a:	b9ac      	cbnz	r4, 8009b78 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009b4c:	4a61      	ldr	r2, [pc, #388]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009b4e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 8009b52:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009b54:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8009b5c:	e6d5      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b5e:	2101      	movs	r1, #1
 8009b60:	f105 0008 	add.w	r0, r5, #8
 8009b64:	f7ff fd06 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b68:	4604      	mov	r4, r0
        break;
 8009b6a:	e7ee      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009b72:	f7ff fd77 	bl	8009664 <RCCEx_PLL3_Config>
 8009b76:	e7f7      	b.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009b78:	4626      	mov	r6, r4
 8009b7a:	e6c6      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 8009b7c:	2601      	movs	r6, #1
 8009b7e:	4634      	mov	r4, r6
 8009b80:	e6dc      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009b82:	4626      	mov	r6, r4
 8009b84:	e6da      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b86:	4a53      	ldr	r2, [pc, #332]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009b88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009b90:	b974      	cbnz	r4, 8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b92:	4a50      	ldr	r2, [pc, #320]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009b94:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8009b96:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b98:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8009ba0:	e6dd      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	f105 0008 	add.w	r0, r5, #8
 8009ba8:	f7ff fce4 	bl	8009574 <RCCEx_PLL2_Config>
 8009bac:	4604      	mov	r4, r0
        break;
 8009bae:	e7ef      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009bb0:	4626      	mov	r6, r4
 8009bb2:	e6d4      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bb4:	4a47      	ldr	r2, [pc, #284]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009bb6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009bbe:	2c00      	cmp	r4, #0
 8009bc0:	d14e      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bc2:	4a44      	ldr	r2, [pc, #272]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009bc4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8009bc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bd0:	682b      	ldr	r3, [r5, #0]
 8009bd2:	0259      	lsls	r1, r3, #9
 8009bd4:	d54e      	bpl.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bd6:	4f40      	ldr	r7, [pc, #256]	; (8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bde:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009be0:	f7fc feba 	bl	8006958 <HAL_GetTick>
 8009be4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	05da      	lsls	r2, r3, #23
 8009bea:	d53b      	bpl.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d16f      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009bf0:	4b38      	ldr	r3, [pc, #224]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009bf2:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8009bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009bf8:	4042      	eors	r2, r0
 8009bfa:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009bfe:	d00b      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c02:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c08:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009c0c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c0e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009c10:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009c14:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009c16:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009c18:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009c1c:	d043      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c1e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8009c22:	492c      	ldr	r1, [pc, #176]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009c24:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009c28:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009c2c:	d14c      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8009c2e:	6908      	ldr	r0, [r1, #16]
 8009c30:	4a2a      	ldr	r2, [pc, #168]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8009c32:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009c36:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009c3a:	4302      	orrs	r2, r0
 8009c3c:	610a      	str	r2, [r1, #16]
 8009c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c42:	4a24      	ldr	r2, [pc, #144]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8009c44:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009c46:	430b      	orrs	r3, r1
 8009c48:	6713      	str	r3, [r2, #112]	; 0x70
 8009c4a:	e013      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c4c:	2102      	movs	r1, #2
 8009c4e:	f105 0008 	add.w	r0, r5, #8
 8009c52:	f7ff fc8f 	bl	8009574 <RCCEx_PLL2_Config>
 8009c56:	4604      	mov	r4, r0
        break;
 8009c58:	e7b1      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 8009c5a:	2601      	movs	r6, #1
 8009c5c:	4634      	mov	r4, r6
 8009c5e:	e7b7      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009c60:	4626      	mov	r6, r4
 8009c62:	e7b5      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c64:	f7fc fe78 	bl	8006958 <HAL_GetTick>
 8009c68:	eba0 0008 	sub.w	r0, r0, r8
 8009c6c:	2864      	cmp	r0, #100	; 0x64
 8009c6e:	d9ba      	bls.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 8009c70:	2603      	movs	r6, #3
 8009c72:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	07d8      	lsls	r0, r3, #31
 8009c78:	d50a      	bpl.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c7a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d045      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8009c82:	d82d      	bhi.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d031      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009c88:	2b08      	cmp	r3, #8
 8009c8a:	d039      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8009c8c:	2601      	movs	r6, #1
 8009c8e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	0799      	lsls	r1, r3, #30
 8009c94:	d551      	bpl.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c96:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009c98:	2b05      	cmp	r3, #5
 8009c9a:	d864      	bhi.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009c9c:	e8df f003 	tbb	[pc, r3]
 8009ca0:	455d3f45 	.word	0x455d3f45
 8009ca4:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 8009ca6:	f7fc fe57 	bl	8006958 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009caa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 8009cae:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb0:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009cb8:	079b      	lsls	r3, r3, #30
 8009cba:	d4b0      	bmi.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cbc:	f7fc fe4c 	bl	8006958 <HAL_GetTick>
 8009cc0:	1bc0      	subs	r0, r0, r7
 8009cc2:	4548      	cmp	r0, r9
 8009cc4:	d9f6      	bls.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8009cc6:	e7d3      	b.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cc8:	690a      	ldr	r2, [r1, #16]
 8009cca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009cce:	e7b5      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 8009cd0:	4626      	mov	r6, r4
 8009cd2:	e7cf      	b.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	58024800 	.word	0x58024800
 8009cdc:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 8009ce0:	f023 0208 	bic.w	r2, r3, #8
 8009ce4:	2a20      	cmp	r2, #32
 8009ce6:	d001      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009ce8:	2b18      	cmp	r3, #24
 8009cea:	d1cf      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 8009cec:	b9ac      	cbnz	r4, 8009d1a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009cee:	4a20      	ldr	r2, [pc, #128]	; (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 8009cf0:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8009cf4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009cf6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	6553      	str	r3, [r2, #84]	; 0x54
 8009cfe:	e7c7      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d00:	2101      	movs	r1, #1
 8009d02:	f105 0008 	add.w	r0, r5, #8
 8009d06:	f7ff fc35 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d0a:	4604      	mov	r4, r0
        break;
 8009d0c:	e7ee      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d0e:	2101      	movs	r1, #1
 8009d10:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009d14:	f7ff fca6 	bl	8009664 <RCCEx_PLL3_Config>
 8009d18:	e7f7      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 8009d1a:	4626      	mov	r6, r4
 8009d1c:	e7b8      	b.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d1e:	2101      	movs	r1, #1
 8009d20:	f105 0008 	add.w	r0, r5, #8
 8009d24:	f7ff fc26 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d28:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009d2a:	b9fc      	cbnz	r4, 8009d6c <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d2c:	4a10      	ldr	r2, [pc, #64]	; (8009d70 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 8009d2e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8009d30:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009d32:	f023 0307 	bic.w	r3, r3, #7
 8009d36:	430b      	orrs	r3, r1
 8009d38:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d3a:	682b      	ldr	r3, [r5, #0]
 8009d3c:	075a      	lsls	r2, r3, #29
 8009d3e:	d52a      	bpl.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d40:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	f200 817b 	bhi.w	800a040 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8009d4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009d4e:	0019      	.short	0x0019
 8009d50:	01730013 	.word	0x01730013
 8009d54:	00190019 	.word	0x00190019
 8009d58:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009d60:	f7ff fc80 	bl	8009664 <RCCEx_PLL3_Config>
 8009d64:	e7e0      	b.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d66:	2601      	movs	r6, #1
 8009d68:	4634      	mov	r4, r6
 8009d6a:	e7e6      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8009d6c:	4626      	mov	r6, r4
 8009d6e:	e7e4      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8009d70:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d74:	2101      	movs	r1, #1
 8009d76:	f105 0008 	add.w	r0, r5, #8
 8009d7a:	f7ff fbfb 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d7e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	f040 8160 	bne.w	800a046 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d86:	4aaa      	ldr	r2, [pc, #680]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009d88:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8009d8c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d8e:	f023 0307 	bic.w	r3, r3, #7
 8009d92:	430b      	orrs	r3, r1
 8009d94:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	069b      	lsls	r3, r3, #26
 8009d9a:	d510      	bpl.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009d9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8009da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009da4:	f000 816b 	beq.w	800a07e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8009da8:	f200 814f 	bhi.w	800a04a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 8155 	beq.w	800a05c <HAL_RCCEx_PeriphCLKConfig+0x908>
 8009db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db6:	f000 815b 	beq.w	800a070 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 8009dba:	2601      	movs	r6, #1
 8009dbc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	065f      	lsls	r7, r3, #25
 8009dc2:	d510      	bpl.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009dc4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 8009dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dcc:	f000 8179 	beq.w	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009dd0:	f200 815d 	bhi.w	800a08e <HAL_RCCEx_PeriphCLKConfig+0x93a>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f000 8163 	beq.w	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 8009dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dde:	f000 8169 	beq.w	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009de2:	2601      	movs	r6, #1
 8009de4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009de6:	682b      	ldr	r3, [r5, #0]
 8009de8:	0618      	lsls	r0, r3, #24
 8009dea:	d510      	bpl.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009dec:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8009df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df4:	f000 8187 	beq.w	800a106 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8009df8:	f200 816b 	bhi.w	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 8171 	beq.w	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
 8009e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e06:	f000 8177 	beq.w	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8009e0a:	2601      	movs	r6, #1
 8009e0c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	0719      	lsls	r1, r3, #28
 8009e12:	d514      	bpl.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009e14:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1c:	d107      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e1e:	2102      	movs	r1, #2
 8009e20:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009e24:	f7ff fc1e 	bl	8009664 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	bf18      	it	ne
 8009e2c:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009e2e:	4a80      	ldr	r2, [pc, #512]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009e30:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8009e34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009e36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e3e:	682b      	ldr	r3, [r5, #0]
 8009e40:	06da      	lsls	r2, r3, #27
 8009e42:	d514      	bpl.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e44:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d107      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e4e:	2102      	movs	r1, #2
 8009e50:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009e54:	f7ff fc06 	bl	8009664 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	bf18      	it	ne
 8009e5c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e5e:	4a74      	ldr	r2, [pc, #464]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009e60:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8009e64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e6e:	682b      	ldr	r3, [r5, #0]
 8009e70:	031b      	lsls	r3, r3, #12
 8009e72:	d51b      	bpl.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 8009e74:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009e78:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8009e7c:	f000 814b 	beq.w	800a116 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8009e80:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8009e84:	d007      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8009e86:	2900      	cmp	r1, #0
 8009e88:	f040 814b 	bne.w	800a122 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e8c:	f105 0008 	add.w	r0, r5, #8
 8009e90:	f7ff fb70 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e94:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	f040 8146 	bne.w	800a128 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e9c:	4a64      	ldr	r2, [pc, #400]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009e9e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009ea2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009ea4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009ea8:	430b      	orrs	r3, r1
 8009eaa:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	035f      	lsls	r7, r3, #13
 8009eb0:	d51c      	bpl.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 8009eb2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8009eb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eba:	f000 8137 	beq.w	800a12c <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8009ebe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ec2:	d008      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x782>
 8009ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ec8:	f040 8137 	bne.w	800a13a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ecc:	4a58      	ldr	r2, [pc, #352]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009ece:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009ed6:	2c00      	cmp	r4, #0
 8009ed8:	f040 8132 	bne.w	800a140 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009edc:	4a54      	ldr	r2, [pc, #336]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009ede:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8009ee2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009ee4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	03d8      	lsls	r0, r3, #15
 8009ef0:	d509      	bpl.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 8009ef2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 8125 	beq.w	800a144 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 8009efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009efe:	f000 812f 	beq.w	800a160 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009f02:	2601      	movs	r6, #1
 8009f04:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	0099      	lsls	r1, r3, #2
 8009f0a:	d507      	bpl.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009f12:	f7ff fba7 	bl	8009664 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 8009f16:	2800      	cmp	r0, #0
 8009f18:	bf18      	it	ne
 8009f1a:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f1c:	e9d5 3100 	ldrd	r3, r1, [r5]
 8009f20:	039a      	lsls	r2, r3, #14
 8009f22:	d50b      	bpl.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 8009f24:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 8009f28:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009f2c:	f000 812f 	beq.w	800a18e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8009f30:	f200 811f 	bhi.w	800a172 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f000 8122 	beq.w	800a17e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8009f3a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f3c:	02df      	lsls	r7, r3, #11
 8009f3e:	d506      	bpl.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f40:	483b      	ldr	r0, [pc, #236]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009f42:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8009f44:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009f46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009f4a:	4322      	orrs	r2, r4
 8009f4c:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f4e:	00dc      	lsls	r4, r3, #3
 8009f50:	d507      	bpl.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f52:	4837      	ldr	r0, [pc, #220]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009f54:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 8009f58:	6902      	ldr	r2, [r0, #16]
 8009f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f5e:	4322      	orrs	r2, r4
 8009f60:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f62:	0298      	lsls	r0, r3, #10
 8009f64:	d506      	bpl.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f66:	4832      	ldr	r0, [pc, #200]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009f68:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8009f6a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009f6c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009f70:	4322      	orrs	r2, r4
 8009f72:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f74:	005a      	lsls	r2, r3, #1
 8009f76:	d509      	bpl.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f78:	4a2d      	ldr	r2, [pc, #180]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009f7a:	6910      	ldr	r0, [r2, #16]
 8009f7c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8009f80:	6110      	str	r0, [r2, #16]
 8009f82:	6910      	ldr	r0, [r2, #16]
 8009f84:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 8009f88:	4320      	orrs	r0, r4
 8009f8a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	da06      	bge.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f90:	4827      	ldr	r0, [pc, #156]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009f92:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009f94:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009f96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f9a:	4322      	orrs	r2, r4
 8009f9c:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f9e:	021b      	lsls	r3, r3, #8
 8009fa0:	d507      	bpl.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fa2:	4a23      	ldr	r2, [pc, #140]	; (800a030 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8009fa4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8009fa8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8009faa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8009fae:	4303      	orrs	r3, r0
 8009fb0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009fb2:	07cf      	lsls	r7, r1, #31
 8009fb4:	d507      	bpl.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	f105 0008 	add.w	r0, r5, #8
 8009fbc:	f7ff fada 	bl	8009574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	bf18      	it	ne
 8009fc4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fc6:	686b      	ldr	r3, [r5, #4]
 8009fc8:	079c      	lsls	r4, r3, #30
 8009fca:	d507      	bpl.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fcc:	2101      	movs	r1, #1
 8009fce:	f105 0008 	add.w	r0, r5, #8
 8009fd2:	f7ff facf 	bl	8009574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	bf18      	it	ne
 8009fda:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009fdc:	686b      	ldr	r3, [r5, #4]
 8009fde:	0758      	lsls	r0, r3, #29
 8009fe0:	d507      	bpl.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fe2:	2102      	movs	r1, #2
 8009fe4:	f105 0008 	add.w	r0, r5, #8
 8009fe8:	f7ff fac4 	bl	8009574 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8009fec:	2800      	cmp	r0, #0
 8009fee:	bf18      	it	ne
 8009ff0:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009ff2:	686b      	ldr	r3, [r5, #4]
 8009ff4:	0719      	lsls	r1, r3, #28
 8009ff6:	d507      	bpl.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8009ffe:	f7ff fb31 	bl	8009664 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a002:	2800      	cmp	r0, #0
 800a004:	bf18      	it	ne
 800a006:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a008:	686b      	ldr	r3, [r5, #4]
 800a00a:	06da      	lsls	r2, r3, #27
 800a00c:	d507      	bpl.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a00e:	2101      	movs	r1, #1
 800a010:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a014:	f7ff fb26 	bl	8009664 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a018:	2800      	cmp	r0, #0
 800a01a:	bf18      	it	ne
 800a01c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a01e:	686b      	ldr	r3, [r5, #4]
 800a020:	069b      	lsls	r3, r3, #26
 800a022:	f100 80bc 	bmi.w	800a19e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800a026:	1e30      	subs	r0, r6, #0
 800a028:	bf18      	it	ne
 800a02a:	2001      	movne	r0, #1
}
 800a02c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a030:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a034:	2101      	movs	r1, #1
 800a036:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a03a:	f7ff fb13 	bl	8009664 <RCCEx_PLL3_Config>
 800a03e:	e69e      	b.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a040:	2601      	movs	r6, #1
 800a042:	4634      	mov	r4, r6
 800a044:	e6a7      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a046:	4626      	mov	r6, r4
 800a048:	e6a5      	b.n	8009d96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a04a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a04e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a052:	d003      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a058:	f47f aeaf 	bne.w	8009dba <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800a05c:	b9ac      	cbnz	r4, 800a08a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a05e:	4a55      	ldr	r2, [pc, #340]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a060:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800a064:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a066:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a06a:	430b      	orrs	r3, r1
 800a06c:	6553      	str	r3, [r2, #84]	; 0x54
 800a06e:	e6a6      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a070:	2100      	movs	r1, #0
 800a072:	f105 0008 	add.w	r0, r5, #8
 800a076:	f7ff fa7d 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a07a:	4604      	mov	r4, r0
        break;
 800a07c:	e7ee      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a07e:	2102      	movs	r1, #2
 800a080:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a084:	f7ff faee 	bl	8009664 <RCCEx_PLL3_Config>
 800a088:	e7f7      	b.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800a08a:	4626      	mov	r6, r4
 800a08c:	e697      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a08e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a092:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a096:	d003      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a09c:	f47f aea1 	bne.w	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800a0a0:	b9ac      	cbnz	r4, 800a0ce <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a0a2:	4a44      	ldr	r2, [pc, #272]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a0a4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800a0a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0aa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a0ae:	430b      	orrs	r3, r1
 800a0b0:	6593      	str	r3, [r2, #88]	; 0x58
 800a0b2:	e698      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f105 0008 	add.w	r0, r5, #8
 800a0ba:	f7ff fa5b 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0be:	4604      	mov	r4, r0
        break;
 800a0c0:	e7ee      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0c2:	2102      	movs	r1, #2
 800a0c4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a0c8:	f7ff facc 	bl	8009664 <RCCEx_PLL3_Config>
 800a0cc:	e7f7      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a0ce:	4626      	mov	r6, r4
 800a0d0:	e689      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a0d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a0d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a0da:	d003      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800a0dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a0e0:	f47f ae93 	bne.w	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800a0e4:	b9ac      	cbnz	r4, 800a112 <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a0e6:	4a33      	ldr	r2, [pc, #204]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a0e8:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800a0ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0ee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a0f2:	430b      	orrs	r3, r1
 800a0f4:	6593      	str	r3, [r2, #88]	; 0x58
 800a0f6:	e68a      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	f105 0008 	add.w	r0, r5, #8
 800a0fe:	f7ff fa39 	bl	8009574 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a102:	4604      	mov	r4, r0
        break;
 800a104:	e7ee      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a106:	2102      	movs	r1, #2
 800a108:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a10c:	f7ff faaa 	bl	8009664 <RCCEx_PLL3_Config>
 800a110:	e7f7      	b.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800a112:	4626      	mov	r6, r4
 800a114:	e67b      	b.n	8009e0e <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a116:	2102      	movs	r1, #2
 800a118:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a11c:	f7ff faa2 	bl	8009664 <RCCEx_PLL3_Config>
 800a120:	e6b8      	b.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800a122:	2601      	movs	r6, #1
 800a124:	4634      	mov	r4, r6
 800a126:	e6c1      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x758>
 800a128:	4626      	mov	r6, r4
 800a12a:	e6bf      	b.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a12c:	2101      	movs	r1, #1
 800a12e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a132:	f7ff fa97 	bl	8009664 <RCCEx_PLL3_Config>
 800a136:	4604      	mov	r4, r0
        break;
 800a138:	e6cd      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800a13a:	2601      	movs	r6, #1
 800a13c:	4634      	mov	r4, r6
 800a13e:	e6d5      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x798>
 800a140:	4626      	mov	r6, r4
 800a142:	e6d3      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a144:	4a1b      	ldr	r2, [pc, #108]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a146:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a14c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a14e:	b974      	cbnz	r4, 800a16e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a150:	4a18      	ldr	r2, [pc, #96]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a152:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800a154:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15a:	430b      	orrs	r3, r1
 800a15c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a15e:	e6d2      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a160:	2102      	movs	r1, #2
 800a162:	f105 0008 	add.w	r0, r5, #8
 800a166:	f7ff fa05 	bl	8009574 <RCCEx_PLL2_Config>
 800a16a:	4604      	mov	r4, r0
        break;
 800a16c:	e7ef      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a16e:	4626      	mov	r6, r4
 800a170:	e6c9      	b.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800a172:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800a176:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a17a:	f47f aede 	bne.w	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800a17e:	b964      	cbnz	r4, 800a19a <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a180:	4c0c      	ldr	r4, [pc, #48]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a182:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a188:	4302      	orrs	r2, r0
 800a18a:	6562      	str	r2, [r4, #84]	; 0x54
 800a18c:	e6d6      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a18e:	4f09      	ldr	r7, [pc, #36]	; (800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a192:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a196:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800a198:	e7f1      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800a19a:	4626      	mov	r6, r4
 800a19c:	e6ce      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a19e:	2102      	movs	r1, #2
 800a1a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a1a4:	f7ff fa5e 	bl	8009664 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f43f af3c 	beq.w	800a026 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e73c      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a1b2:	bf00      	nop
 800a1b4:	58024400 	.word	0x58024400

0800a1b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a1bc:	4604      	mov	r4, r0
 800a1be:	b1f0      	cbz	r0, 800a1fe <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a1c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a1c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a1c8:	b91b      	cbnz	r3, 800a1d2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a1ca:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a1ce:	f7f7 f84d 	bl	800126c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1d2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a1d4:	1d21      	adds	r1, r4, #4
 800a1d6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a1dc:	f000 fa1f 	bl	800a61e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a1e0:	6862      	ldr	r2, [r4, #4]
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	6820      	ldr	r0, [r4, #0]
 800a1e6:	f000 fa55 	bl	800a694 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a1ea:	4a06      	ldr	r2, [pc, #24]	; (800a204 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800a1ec:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1f4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a1fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a1fe:	2001      	movs	r0, #1
 800a200:	e7fc      	b.n	800a1fc <HAL_SDRAM_Init+0x44>
 800a202:	bf00      	nop
 800a204:	52004000 	.word	0x52004000

0800a208 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800a208:	b510      	push	{r4, lr}
 800a20a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800a20c:	f7f7 f8bc 	bl	8001388 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800a210:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a214:	f000 fa74 	bl	800a700 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800a218:	2000      	movs	r0, #0
 800a21a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800a21e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800a222:	bd10      	pop	{r4, pc}

0800a224 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a224:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a226:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a22a:	4605      	mov	r5, r0
 800a22c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a22e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a230:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a232:	d010      	beq.n	800a256 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a234:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a238:	2c01      	cmp	r4, #1
 800a23a:	d110      	bne.n	800a25e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a23c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a23e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a240:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a244:	f000 fa6b 	bl	800a71e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a248:	6833      	ldr	r3, [r6, #0]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d104      	bne.n	800a258 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a24e:	2305      	movs	r3, #5
 800a250:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a254:	2000      	movs	r0, #0
}
 800a256:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a258:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800a25c:	e7fa      	b.n	800a254 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a25e:	2001      	movs	r0, #1
 800a260:	e7f9      	b.n	800a256 <HAL_SDRAM_SendCommand+0x32>

0800a262 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a262:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a264:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a268:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	b2d8      	uxtb	r0, r3
 800a26e:	d00d      	beq.n	800a28c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a270:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a274:	2b01      	cmp	r3, #1
 800a276:	b2dd      	uxtb	r5, r3
 800a278:	d109      	bne.n	800a28e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a27a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a27c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a27e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a282:	f000 fa5e 	bl	800a742 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a286:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a288:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a28c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a28e:	2001      	movs	r0, #1
 800a290:	e7fc      	b.n	800a28c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800a292 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a292:	4770      	bx	lr

0800a294 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a294:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d12f      	bne.n	800a2fc <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a29c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a29e:	4a18      	ldr	r2, [pc, #96]	; (800a300 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a4:	6803      	ldr	r3, [r0, #0]
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d01a      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ae:	d017      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2b0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d013      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d00f      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d00b      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2c8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d007      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2d0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <HAL_TIM_Base_Start+0x4c>
 800a2d8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d107      	bne.n	800a2f0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e0:	6899      	ldr	r1, [r3, #8]
 800a2e2:	4a08      	ldr	r2, [pc, #32]	; (800a304 <HAL_TIM_Base_Start+0x70>)
 800a2e4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e6:	2a06      	cmp	r2, #6
 800a2e8:	d006      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x64>
 800a2ea:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a2ee:	d003      	beq.n	800a2f8 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	f042 0201 	orr.w	r2, r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2f8:	2000      	movs	r0, #0
}
 800a2fa:	4770      	bx	lr
    return HAL_ERROR;
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	4770      	bx	lr
 800a300:	40010000 	.word	0x40010000
 800a304:	00010007 	.word	0x00010007

0800a308 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a308:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d133      	bne.n	800a378 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	2302      	movs	r3, #2
 800a312:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a316:	6803      	ldr	r3, [r0, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	f042 0201 	orr.w	r2, r2, #1
 800a31e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a320:	4a16      	ldr	r2, [pc, #88]	; (800a37c <HAL_TIM_Base_Start_IT+0x74>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d01a      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32a:	d017      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a32c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a330:	4293      	cmp	r3, r2
 800a332:	d013      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a334:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a33c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a340:	4293      	cmp	r3, r2
 800a342:	d00b      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a344:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a34c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <HAL_TIM_Base_Start_IT+0x54>
 800a354:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a358:	4293      	cmp	r3, r2
 800a35a:	d107      	bne.n	800a36c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a35c:	6899      	ldr	r1, [r3, #8]
 800a35e:	4a08      	ldr	r2, [pc, #32]	; (800a380 <HAL_TIM_Base_Start_IT+0x78>)
 800a360:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a362:	2a06      	cmp	r2, #6
 800a364:	d006      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
 800a366:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a36a:	d003      	beq.n	800a374 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	f042 0201 	orr.w	r2, r2, #1
 800a372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a374:	2000      	movs	r0, #0
}
 800a376:	4770      	bx	lr
    return HAL_ERROR;
 800a378:	2001      	movs	r0, #1
 800a37a:	4770      	bx	lr
 800a37c:	40010000 	.word	0x40010000
 800a380:	00010007 	.word	0x00010007

0800a384 <HAL_TIM_OC_DelayElapsedCallback>:
 800a384:	4770      	bx	lr

0800a386 <HAL_TIM_IC_CaptureCallback>:
 800a386:	4770      	bx	lr

0800a388 <HAL_TIM_PWM_PulseFinishedCallback>:
 800a388:	4770      	bx	lr

0800a38a <HAL_TIM_TriggerCallback>:
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a38c:	6803      	ldr	r3, [r0, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	0791      	lsls	r1, r2, #30
{
 800a392:	b510      	push	{r4, lr}
 800a394:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a396:	d50f      	bpl.n	800a3b8 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	0792      	lsls	r2, r2, #30
 800a39c:	d50c      	bpl.n	800a3b8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a39e:	f06f 0202 	mvn.w	r2, #2
 800a3a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	0799      	lsls	r1, r3, #30
 800a3ac:	f000 8085 	beq.w	800a4ba <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3b0:	f7ff ffe9 	bl	800a386 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	691a      	ldr	r2, [r3, #16]
 800a3bc:	0752      	lsls	r2, r2, #29
 800a3be:	d510      	bpl.n	800a3e2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	0750      	lsls	r0, r2, #29
 800a3c4:	d50d      	bpl.n	800a3e2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3c6:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a3d8:	d075      	beq.n	800a4c6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a3da:	f7ff ffd4 	bl	800a386 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	691a      	ldr	r2, [r3, #16]
 800a3e6:	0711      	lsls	r1, r2, #28
 800a3e8:	d50f      	bpl.n	800a40a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ea:	68da      	ldr	r2, [r3, #12]
 800a3ec:	0712      	lsls	r2, r2, #28
 800a3ee:	d50c      	bpl.n	800a40a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3f0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3f8:	2204      	movs	r2, #4
 800a3fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3fc:	69db      	ldr	r3, [r3, #28]
 800a3fe:	079b      	lsls	r3, r3, #30
 800a400:	d067      	beq.n	800a4d2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a402:	f7ff ffc0 	bl	800a386 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a406:	2300      	movs	r3, #0
 800a408:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a40a:	6823      	ldr	r3, [r4, #0]
 800a40c:	691a      	ldr	r2, [r3, #16]
 800a40e:	06d0      	lsls	r0, r2, #27
 800a410:	d510      	bpl.n	800a434 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a412:	68da      	ldr	r2, [r3, #12]
 800a414:	06d1      	lsls	r1, r2, #27
 800a416:	d50d      	bpl.n	800a434 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a418:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a41e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a420:	2208      	movs	r2, #8
 800a422:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a42a:	d058      	beq.n	800a4de <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800a42c:	f7ff ffab 	bl	800a386 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a430:	2300      	movs	r3, #0
 800a432:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a434:	6823      	ldr	r3, [r4, #0]
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	07d2      	lsls	r2, r2, #31
 800a43a:	d508      	bpl.n	800a44e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	07d0      	lsls	r0, r2, #31
 800a440:	d505      	bpl.n	800a44e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a442:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a446:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a448:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a44a:	f7f6 fd5d 	bl	8000f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	691a      	ldr	r2, [r3, #16]
 800a452:	0611      	lsls	r1, r2, #24
 800a454:	d508      	bpl.n	800a468 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a456:	68da      	ldr	r2, [r3, #12]
 800a458:	0612      	lsls	r2, r2, #24
 800a45a:	d505      	bpl.n	800a468 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a45c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a460:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a462:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a464:	f000 f8d9 	bl	800a61a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	05d0      	lsls	r0, r2, #23
 800a46e:	d508      	bpl.n	800a482 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	0611      	lsls	r1, r2, #24
 800a474:	d505      	bpl.n	800a482 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a476:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a47a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a47c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a47e:	f000 f8cd 	bl	800a61c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	0652      	lsls	r2, r2, #25
 800a488:	d508      	bpl.n	800a49c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a48a:	68da      	ldr	r2, [r3, #12]
 800a48c:	0650      	lsls	r0, r2, #25
 800a48e:	d505      	bpl.n	800a49c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a490:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a494:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a496:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a498:	f7ff ff77 	bl	800a38a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	0691      	lsls	r1, r2, #26
 800a4a2:	d522      	bpl.n	800a4ea <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4a4:	68da      	ldr	r2, [r3, #12]
 800a4a6:	0692      	lsls	r2, r2, #26
 800a4a8:	d51f      	bpl.n	800a4ea <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4aa:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4b0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a4b6:	f000 b8af 	b.w	800a618 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ba:	f7ff ff63 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f7ff ff62 	bl	800a388 <HAL_TIM_PWM_PulseFinishedCallback>
 800a4c4:	e776      	b.n	800a3b4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c6:	f7ff ff5d 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff ff5c 	bl	800a388 <HAL_TIM_PWM_PulseFinishedCallback>
 800a4d0:	e785      	b.n	800a3de <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d2:	f7ff ff57 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	f7ff ff56 	bl	800a388 <HAL_TIM_PWM_PulseFinishedCallback>
 800a4dc:	e793      	b.n	800a406 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4de:	f7ff ff51 	bl	800a384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f7ff ff50 	bl	800a388 <HAL_TIM_PWM_PulseFinishedCallback>
 800a4e8:	e7a2      	b.n	800a430 <HAL_TIM_IRQHandler+0xa4>
}
 800a4ea:	bd10      	pop	{r4, pc}

0800a4ec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4ec:	4a30      	ldr	r2, [pc, #192]	; (800a5b0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800a4ee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4f0:	4290      	cmp	r0, r2
 800a4f2:	d012      	beq.n	800a51a <TIM_Base_SetConfig+0x2e>
 800a4f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a4f8:	d00f      	beq.n	800a51a <TIM_Base_SetConfig+0x2e>
 800a4fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a4fe:	4290      	cmp	r0, r2
 800a500:	d00b      	beq.n	800a51a <TIM_Base_SetConfig+0x2e>
 800a502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a506:	4290      	cmp	r0, r2
 800a508:	d007      	beq.n	800a51a <TIM_Base_SetConfig+0x2e>
 800a50a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a50e:	4290      	cmp	r0, r2
 800a510:	d003      	beq.n	800a51a <TIM_Base_SetConfig+0x2e>
 800a512:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a516:	4290      	cmp	r0, r2
 800a518:	d119      	bne.n	800a54e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800a51a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a51c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a520:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a522:	4a23      	ldr	r2, [pc, #140]	; (800a5b0 <TIM_Base_SetConfig+0xc4>)
 800a524:	4290      	cmp	r0, r2
 800a526:	d01d      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a528:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a52c:	d01a      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a52e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a532:	4290      	cmp	r0, r2
 800a534:	d016      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a53a:	4290      	cmp	r0, r2
 800a53c:	d012      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a53e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a542:	4290      	cmp	r0, r2
 800a544:	d00e      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a546:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a54a:	4290      	cmp	r0, r2
 800a54c:	d00a      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a54e:	4a19      	ldr	r2, [pc, #100]	; (800a5b4 <TIM_Base_SetConfig+0xc8>)
 800a550:	4290      	cmp	r0, r2
 800a552:	d007      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a558:	4290      	cmp	r0, r2
 800a55a:	d003      	beq.n	800a564 <TIM_Base_SetConfig+0x78>
 800a55c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a560:	4290      	cmp	r0, r2
 800a562:	d103      	bne.n	800a56c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a568:	68ca      	ldr	r2, [r1, #12]
 800a56a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a56c:	694a      	ldr	r2, [r1, #20]
 800a56e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a572:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a574:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a576:	688b      	ldr	r3, [r1, #8]
 800a578:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a57a:	680b      	ldr	r3, [r1, #0]
 800a57c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a57e:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <TIM_Base_SetConfig+0xc4>)
 800a580:	4298      	cmp	r0, r3
 800a582:	d00f      	beq.n	800a5a4 <TIM_Base_SetConfig+0xb8>
 800a584:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a588:	4298      	cmp	r0, r3
 800a58a:	d00b      	beq.n	800a5a4 <TIM_Base_SetConfig+0xb8>
 800a58c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800a590:	4298      	cmp	r0, r3
 800a592:	d007      	beq.n	800a5a4 <TIM_Base_SetConfig+0xb8>
 800a594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a598:	4298      	cmp	r0, r3
 800a59a:	d003      	beq.n	800a5a4 <TIM_Base_SetConfig+0xb8>
 800a59c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5a0:	4298      	cmp	r0, r3
 800a5a2:	d101      	bne.n	800a5a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5a4:	690b      	ldr	r3, [r1, #16]
 800a5a6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	6143      	str	r3, [r0, #20]
}
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	40010000 	.word	0x40010000
 800a5b4:	40014000 	.word	0x40014000

0800a5b8 <HAL_TIM_Base_Init>:
{
 800a5b8:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	b350      	cbz	r0, 800a614 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a5be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a5c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5c6:	b91b      	cbnz	r3, 800a5d0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a5c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a5cc:	f7ff fe61 	bl	800a292 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d2:	6820      	ldr	r0, [r4, #0]
 800a5d4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5da:	f7ff ff87 	bl	800a4ec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5de:	2301      	movs	r3, #1
  return HAL_OK;
 800a5e0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5e2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a5ea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a5ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a5f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a5f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a606:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a60a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a60e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a612:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a614:	2001      	movs	r0, #1
 800a616:	e7fc      	b.n	800a612 <HAL_TIM_Base_Init+0x5a>

0800a618 <HAL_TIMEx_CommutCallback>:
 800a618:	4770      	bx	lr

0800a61a <HAL_TIMEx_BreakCallback>:
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIMEx_Break2Callback>:
 800a61c:	4770      	bx	lr

0800a61e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a61e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a622:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a624:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800a628:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800a62c:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800a630:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800a634:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800a638:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a63a:	b9a2      	cbnz	r2, 800a666 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a63c:	ea43 0209 	orr.w	r2, r3, r9
 800a640:	6801      	ldr	r1, [r0, #0]
 800a642:	432a      	orrs	r2, r5
 800a644:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800a648:	ea42 0308 	orr.w	r3, r2, r8
 800a64c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800a650:	ea43 030e 	orr.w	r3, r3, lr
 800a654:	ea43 030c 	orr.w	r3, r3, ip
 800a658:	433b      	orrs	r3, r7
 800a65a:	4333      	orrs	r3, r6
 800a65c:	430b      	orrs	r3, r1
 800a65e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a660:	2000      	movs	r0, #0
 800a662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a666:	6802      	ldr	r2, [r0, #0]
 800a668:	ea43 0309 	orr.w	r3, r3, r9
 800a66c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a670:	4313      	orrs	r3, r2
 800a672:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a674:	ea45 0308 	orr.w	r3, r5, r8
 800a678:	6842      	ldr	r2, [r0, #4]
 800a67a:	ea43 030e 	orr.w	r3, r3, lr
 800a67e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800a682:	ea43 030c 	orr.w	r3, r3, ip
 800a686:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800a68a:	433b      	orrs	r3, r7
 800a68c:	4333      	orrs	r3, r6
 800a68e:	4313      	orrs	r3, r2
 800a690:	6043      	str	r3, [r0, #4]
 800a692:	e7e5      	b.n	800a660 <FMC_SDRAM_Init+0x42>

0800a694 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a694:	68cb      	ldr	r3, [r1, #12]
 800a696:	f103 3cff 	add.w	ip, r3, #4294967295
 800a69a:	694b      	ldr	r3, [r1, #20]
{
 800a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	680f      	ldr	r7, [r1, #0]
 800a6a2:	684c      	ldr	r4, [r1, #4]
 800a6a4:	688e      	ldr	r6, [r1, #8]
 800a6a6:	051b      	lsls	r3, r3, #20
 800a6a8:	690d      	ldr	r5, [r1, #16]
 800a6aa:	3c01      	subs	r4, #1
 800a6ac:	6989      	ldr	r1, [r1, #24]
 800a6ae:	3e01      	subs	r6, #1
 800a6b0:	3d01      	subs	r5, #1
 800a6b2:	3f01      	subs	r7, #1
 800a6b4:	3901      	subs	r1, #1
 800a6b6:	0124      	lsls	r4, r4, #4
 800a6b8:	0236      	lsls	r6, r6, #8
 800a6ba:	042d      	lsls	r5, r5, #16
 800a6bc:	0609      	lsls	r1, r1, #24
 800a6be:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800a6c2:	b95a      	cbnz	r2, 800a6dc <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a6c4:	433b      	orrs	r3, r7
 800a6c6:	6882      	ldr	r2, [r0, #8]
 800a6c8:	4323      	orrs	r3, r4
 800a6ca:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a6ce:	4333      	orrs	r3, r6
 800a6d0:	432b      	orrs	r3, r5
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a6d8:	2000      	movs	r0, #0
 800a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a6dc:	6882      	ldr	r2, [r0, #8]
 800a6de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a6e2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800a6e6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a6e8:	ea44 0306 	orr.w	r3, r4, r6
 800a6ec:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a6ee:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a6f0:	68c2      	ldr	r2, [r0, #12]
 800a6f2:	432b      	orrs	r3, r5
 800a6f4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	60c3      	str	r3, [r0, #12]
 800a6fe:	e7eb      	b.n	800a6d8 <FMC_SDRAM_Timing_Init+0x44>

0800a700 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800a700:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800a704:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a708:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800a70c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a710:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800a712:	2300      	movs	r3, #0
 800a714:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800a716:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800a718:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	4770      	bx	lr

0800a71e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a71e:	6902      	ldr	r2, [r0, #16]
{
 800a720:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a722:	e9d1 3400 	ldrd	r3, r4, [r1]
 800a726:	0d92      	lsrs	r2, r2, #22
 800a728:	4323      	orrs	r3, r4
 800a72a:	68cc      	ldr	r4, [r1, #12]
 800a72c:	0592      	lsls	r2, r2, #22
 800a72e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800a732:	4313      	orrs	r3, r2
 800a734:	688a      	ldr	r2, [r1, #8]
 800a736:	3a01      	subs	r2, #1
 800a738:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a73c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a73e:	2000      	movs	r0, #0
 800a740:	bd10      	pop	{r4, pc}

0800a742 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a742:	6943      	ldr	r3, [r0, #20]
 800a744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a748:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a74c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a750:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800a752:	2000      	movs	r0, #0
 800a754:	4770      	bx	lr

0800a756 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a756:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a758:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a75c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a75e:	f001 fe03 	bl	800c368 <xTaskGetSchedulerState>
 800a762:	2801      	cmp	r0, #1
 800a764:	d003      	beq.n	800a76e <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a766:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a76a:	f000 bbcb 	b.w	800af04 <xPortSysTickHandler>
}
 800a76e:	bd08      	pop	{r3, pc}

0800a770 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a770:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a774:	b92b      	cbnz	r3, 800a782 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a776:	4b06      	ldr	r3, [pc, #24]	; (800a790 <osKernelInitialize+0x20>)
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	b928      	cbnz	r0, 800a788 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a77c:	2201      	movs	r2, #1
 800a77e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a780:	4770      	bx	lr
    stat = osErrorISR;
 800a782:	f06f 0005 	mvn.w	r0, #5
 800a786:	4770      	bx	lr
    } else {
      stat = osError;
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	240069a4 	.word	0x240069a4

0800a794 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a794:	b510      	push	{r4, lr}
 800a796:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a79a:	b95c      	cbnz	r4, 800a7b4 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a79c:	4b08      	ldr	r3, [pc, #32]	; (800a7c0 <osKernelStart+0x2c>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	2a01      	cmp	r2, #1
 800a7a2:	d10a      	bne.n	800a7ba <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7a4:	4a07      	ldr	r2, [pc, #28]	; (800a7c4 <osKernelStart+0x30>)
 800a7a6:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a7a8:	2202      	movs	r2, #2
 800a7aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7ac:	f001 fc80 	bl	800c0b0 <vTaskStartScheduler>
      stat = osOK;
 800a7b0:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800a7b2:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a7b4:	f06f 0005 	mvn.w	r0, #5
 800a7b8:	e7fb      	b.n	800a7b2 <osKernelStart+0x1e>
      stat = osError;
 800a7ba:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800a7be:	e7f8      	b.n	800a7b2 <osKernelStart+0x1e>
 800a7c0:	240069a4 	.word	0x240069a4
 800a7c4:	e000ed00 	.word	0xe000ed00

0800a7c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ca:	4614      	mov	r4, r2
 800a7cc:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7ce:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7d0:	460b      	mov	r3, r1
  hTask = NULL;
 800a7d2:	9205      	str	r2, [sp, #20]
 800a7d4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a7d8:	b9d2      	cbnz	r2, 800a810 <osThreadNew+0x48>
 800a7da:	b1c8      	cbz	r0, 800a810 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a7dc:	2c00      	cmp	r4, #0
 800a7de:	d02f      	beq.n	800a840 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a7e0:	69a5      	ldr	r5, [r4, #24]
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	bf08      	it	eq
 800a7e6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7e8:	1e69      	subs	r1, r5, #1
 800a7ea:	46ac      	mov	ip, r5
 800a7ec:	2937      	cmp	r1, #55	; 0x37
 800a7ee:	d82b      	bhi.n	800a848 <osThreadNew+0x80>
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	07c9      	lsls	r1, r1, #31
 800a7f4:	d428      	bmi.n	800a848 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800a7f6:	6966      	ldr	r6, [r4, #20]
 800a7f8:	b16e      	cbz	r6, 800a816 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7fa:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800a7fc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a7fe:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800a802:	b157      	cbz	r7, 800a81a <osThreadNew+0x52>
 800a804:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800a808:	d902      	bls.n	800a810 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a80a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a80c:	b104      	cbz	r4, 800a810 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a80e:	b9ee      	cbnz	r6, 800a84c <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a810:	9805      	ldr	r0, [sp, #20]
}
 800a812:	b007      	add	sp, #28
 800a814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800a816:	2280      	movs	r2, #128	; 0x80
 800a818:	e7f0      	b.n	800a7fc <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a81a:	f1be 0f00 	cmp.w	lr, #0
 800a81e:	d1f7      	bne.n	800a810 <osThreadNew+0x48>
      if (mem == 0) {
 800a820:	6924      	ldr	r4, [r4, #16]
 800a822:	2c00      	cmp	r4, #0
 800a824:	d1f4      	bne.n	800a810 <osThreadNew+0x48>
 800a826:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a828:	a905      	add	r1, sp, #20
 800a82a:	b292      	uxth	r2, r2
 800a82c:	e9cd c100 	strd	ip, r1, [sp]
 800a830:	4621      	mov	r1, r4
 800a832:	f001 fadc 	bl	800bdee <xTaskCreate>
 800a836:	2801      	cmp	r0, #1
            hTask = NULL;
 800a838:	bf1c      	itt	ne
 800a83a:	2300      	movne	r3, #0
 800a83c:	9305      	strne	r3, [sp, #20]
 800a83e:	e7e7      	b.n	800a810 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800a840:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800a844:	2280      	movs	r2, #128	; 0x80
 800a846:	e7ef      	b.n	800a828 <osThreadNew+0x60>
        return (NULL);
 800a848:	4610      	mov	r0, r2
 800a84a:	e7e2      	b.n	800a812 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a84c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800a850:	9500      	str	r5, [sp, #0]
 800a852:	f001 fa94 	bl	800bd7e <xTaskCreateStatic>
 800a856:	9005      	str	r0, [sp, #20]
 800a858:	e7da      	b.n	800a810 <osThreadNew+0x48>

0800a85a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a85c:	4604      	mov	r4, r0
 800a85e:	460e      	mov	r6, r1
 800a860:	4615      	mov	r5, r2
 800a862:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a866:	b11a      	cbz	r2, 800a870 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800a868:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a86a:	4620      	mov	r0, r4
 800a86c:	b003      	add	sp, #12
 800a86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a870:	2800      	cmp	r0, #0
 800a872:	d0f9      	beq.n	800a868 <osSemaphoreNew+0xe>
 800a874:	4288      	cmp	r0, r1
 800a876:	d3f7      	bcc.n	800a868 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800a878:	b1e5      	cbz	r5, 800a8b4 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a87a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800a87e:	b1bb      	cbz	r3, 800a8b0 <osSemaphoreNew+0x56>
 800a880:	2f4f      	cmp	r7, #79	; 0x4f
 800a882:	d9f1      	bls.n	800a868 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a884:	2801      	cmp	r0, #1
 800a886:	d12a      	bne.n	800a8de <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a888:	2103      	movs	r1, #3
 800a88a:	9100      	str	r1, [sp, #0]
 800a88c:	4611      	mov	r1, r2
 800a88e:	f000 fce1 	bl	800b254 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800a892:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a894:	2800      	cmp	r0, #0
 800a896:	d0e7      	beq.n	800a868 <osSemaphoreNew+0xe>
 800a898:	b1de      	cbz	r6, 800a8d2 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a89a:	2300      	movs	r3, #0
 800a89c:	461a      	mov	r2, r3
 800a89e:	4619      	mov	r1, r3
 800a8a0:	f000 fd8d 	bl	800b3be <xQueueGenericSend>
 800a8a4:	2801      	cmp	r0, #1
 800a8a6:	d014      	beq.n	800a8d2 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f001 f8c9 	bl	800ba40 <vQueueDelete>
 800a8ae:	e7db      	b.n	800a868 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a8b0:	2f00      	cmp	r7, #0
 800a8b2:	d1d9      	bne.n	800a868 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800a8b4:	2c01      	cmp	r4, #1
 800a8b6:	d105      	bne.n	800a8c4 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fd17 	bl	800b2f0 <xQueueGenericCreate>
 800a8c2:	e7e6      	b.n	800a892 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	f000 fd5b 	bl	800b382 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d0ca      	beq.n	800a868 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800a8d2:	b955      	cbnz	r5, 800a8ea <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f001 f88c 	bl	800b9f4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800a8dc:	e7c5      	b.n	800a86a <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a8de:	461a      	mov	r2, r3
 800a8e0:	f000 fd2d 	bl	800b33e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d0be      	beq.n	800a868 <osSemaphoreNew+0xe>
          name = attr->name;
 800a8ea:	682d      	ldr	r5, [r5, #0]
 800a8ec:	e7f2      	b.n	800a8d4 <osSemaphoreNew+0x7a>

0800a8ee <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a8ee:	b513      	push	{r0, r1, r4, lr}
 800a8f0:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a8f2:	b308      	cbz	r0, 800a938 <osSemaphoreAcquire+0x4a>
 800a8f4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a8f8:	b1b3      	cbz	r3, 800a928 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800a8fa:	b9e9      	cbnz	r1, 800a938 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a8fc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800a8fe:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a900:	f001 f828 	bl	800b954 <xQueueReceiveFromISR>
 800a904:	2801      	cmp	r0, #1
 800a906:	d114      	bne.n	800a932 <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	b913      	cbnz	r3, 800a912 <osSemaphoreAcquire+0x24>
  stat = osOK;
 800a90c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a90e:	b002      	add	sp, #8
 800a910:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800a912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a91a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	f3bf 8f6f 	isb	sy
 800a926:	e7f1      	b.n	800a90c <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a928:	f000 ff51 	bl	800b7ce <xQueueSemaphoreTake>
 800a92c:	2801      	cmp	r0, #1
 800a92e:	d0ed      	beq.n	800a90c <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800a930:	b92c      	cbnz	r4, 800a93e <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800a932:	f06f 0002 	mvn.w	r0, #2
 800a936:	e7ea      	b.n	800a90e <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a938:	f06f 0003 	mvn.w	r0, #3
 800a93c:	e7e7      	b.n	800a90e <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800a93e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800a942:	e7e4      	b.n	800a90e <osSemaphoreAcquire+0x20>

0800a944 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a944:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a946:	b310      	cbz	r0, 800a98e <osSemaphoreRelease+0x4a>
 800a948:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a94c:	b1b3      	cbz	r3, 800a97c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800a94e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a950:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800a952:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a954:	f000 fe48 	bl	800b5e8 <xQueueGiveFromISR>
 800a958:	2801      	cmp	r0, #1
 800a95a:	d115      	bne.n	800a988 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	b913      	cbnz	r3, 800a966 <osSemaphoreRelease+0x22>
  stat = osOK;
 800a960:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a962:	b002      	add	sp, #8
 800a964:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800a966:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a96e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	e7f1      	b.n	800a960 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a97c:	461a      	mov	r2, r3
 800a97e:	4619      	mov	r1, r3
 800a980:	f000 fd1d 	bl	800b3be <xQueueGenericSend>
 800a984:	2801      	cmp	r0, #1
 800a986:	d0eb      	beq.n	800a960 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800a988:	f06f 0002 	mvn.w	r0, #2
 800a98c:	e7e9      	b.n	800a962 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a98e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800a992:	e7e6      	b.n	800a962 <osSemaphoreRelease+0x1e>

0800a994 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a996:	4605      	mov	r5, r0
 800a998:	460e      	mov	r6, r1
 800a99a:	4614      	mov	r4, r2
 800a99c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a9a0:	b11f      	cbz	r7, 800a9aa <osMessageQueueNew+0x16>
  hQueue = NULL;
 800a9a2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	b003      	add	sp, #12
 800a9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d0f9      	beq.n	800a9a2 <osMessageQueueNew+0xe>
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	d0f7      	beq.n	800a9a2 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800a9b2:	b1da      	cbz	r2, 800a9ec <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9b4:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800a9b8:	b183      	cbz	r3, 800a9dc <osMessageQueueNew+0x48>
 800a9ba:	2a4f      	cmp	r2, #79	; 0x4f
 800a9bc:	d9f1      	bls.n	800a9a2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9be:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9c0:	2a00      	cmp	r2, #0
 800a9c2:	d0ee      	beq.n	800a9a2 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9c4:	434d      	muls	r5, r1
 800a9c6:	6966      	ldr	r6, [r4, #20]
 800a9c8:	42ae      	cmp	r6, r5
 800a9ca:	d3ea      	bcc.n	800a9a2 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a9cc:	9700      	str	r7, [sp, #0]
 800a9ce:	f000 fc41 	bl	800b254 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800a9d2:	4605      	mov	r5, r0
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d0e4      	beq.n	800a9a2 <osMessageQueueNew+0xe>
        name = attr->name;
 800a9d8:	6824      	ldr	r4, [r4, #0]
 800a9da:	e011      	b.n	800aa00 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d1e0      	bne.n	800a9a2 <osMessageQueueNew+0xe>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1dd      	bne.n	800a9a2 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a9e6:	6963      	ldr	r3, [r4, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1da      	bne.n	800a9a2 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	f000 fc7d 	bl	800b2f0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800a9f6:	4605      	mov	r5, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0d2      	beq.n	800a9a2 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	d1eb      	bne.n	800a9d8 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800aa00:	4621      	mov	r1, r4
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 fff6 	bl	800b9f4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800aa08:	e7cc      	b.n	800a9a4 <osMessageQueueNew+0x10>

0800aa0a <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800aa0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa0c:	461c      	mov	r4, r3
 800aa0e:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800aa12:	b1c6      	cbz	r6, 800aa46 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa14:	b318      	cbz	r0, 800aa5e <osMessageQueuePut+0x54>
 800aa16:	b311      	cbz	r1, 800aa5e <osMessageQueuePut+0x54>
 800aa18:	bb0b      	cbnz	r3, 800aa5e <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aa1a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800aa1c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aa1e:	f000 fd81 	bl	800b524 <xQueueGenericSendFromISR>
 800aa22:	2801      	cmp	r0, #1
 800aa24:	d118      	bne.n	800aa58 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	b913      	cbnz	r3, 800aa30 <osMessageQueuePut+0x26>
  stat = osOK;
 800aa2a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800aa2c:	b002      	add	sp, #8
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800aa30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa38:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	e7f1      	b.n	800aa2a <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa46:	b150      	cbz	r0, 800aa5e <osMessageQueuePut+0x54>
 800aa48:	b149      	cbz	r1, 800aa5e <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa4a:	4633      	mov	r3, r6
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	f000 fcb6 	bl	800b3be <xQueueGenericSend>
 800aa52:	2801      	cmp	r0, #1
 800aa54:	d0e9      	beq.n	800aa2a <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800aa56:	b92c      	cbnz	r4, 800aa64 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800aa58:	f06f 0002 	mvn.w	r0, #2
 800aa5c:	e7e6      	b.n	800aa2c <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800aa5e:	f06f 0003 	mvn.w	r0, #3
 800aa62:	e7e3      	b.n	800aa2c <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800aa64:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800aa68:	e7e0      	b.n	800aa2c <osMessageQueuePut+0x22>

0800aa6a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa6c:	461c      	mov	r4, r3
 800aa6e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800aa72:	b1c3      	cbz	r3, 800aaa6 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa74:	b310      	cbz	r0, 800aabc <osMessageQueueGet+0x52>
 800aa76:	b309      	cbz	r1, 800aabc <osMessageQueueGet+0x52>
 800aa78:	bb04      	cbnz	r4, 800aabc <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa7a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800aa7c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa7e:	f000 ff69 	bl	800b954 <xQueueReceiveFromISR>
 800aa82:	2801      	cmp	r0, #1
 800aa84:	d117      	bne.n	800aab6 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	b913      	cbnz	r3, 800aa90 <osMessageQueueGet+0x26>
  stat = osOK;
 800aa8a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800aa8c:	b003      	add	sp, #12
 800aa8e:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800aa90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	e7f1      	b.n	800aa8a <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aaa6:	b148      	cbz	r0, 800aabc <osMessageQueueGet+0x52>
 800aaa8:	b141      	cbz	r1, 800aabc <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aaaa:	4622      	mov	r2, r4
 800aaac:	f000 fdf0 	bl	800b690 <xQueueReceive>
 800aab0:	2801      	cmp	r0, #1
 800aab2:	d0ea      	beq.n	800aa8a <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800aab4:	b92c      	cbnz	r4, 800aac2 <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800aab6:	f06f 0002 	mvn.w	r0, #2
 800aaba:	e7e7      	b.n	800aa8c <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800aabc:	f06f 0003 	mvn.w	r0, #3
 800aac0:	e7e4      	b.n	800aa8c <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800aac2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800aac6:	e7e1      	b.n	800aa8c <osMessageQueueGet+0x22>

0800aac8 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aac8:	4b03      	ldr	r3, [pc, #12]	; (800aad8 <vApplicationGetIdleTaskMemory+0x10>)
 800aaca:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aacc:	4b03      	ldr	r3, [pc, #12]	; (800aadc <vApplicationGetIdleTaskMemory+0x14>)
 800aace:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aad0:	2380      	movs	r3, #128	; 0x80
 800aad2:	6013      	str	r3, [r2, #0]
}
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	24006944 	.word	0x24006944
 800aadc:	24006744 	.word	0x24006744

0800aae0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aae0:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <vApplicationGetTimerTaskMemory+0x10>)
 800aae2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aae4:	4b03      	ldr	r3, [pc, #12]	; (800aaf4 <vApplicationGetTimerTaskMemory+0x14>)
 800aae6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaec:	6013      	str	r3, [r2, #0]
}
 800aaee:	4770      	bx	lr
 800aaf0:	24006da8 	.word	0x24006da8
 800aaf4:	240069a8 	.word	0x240069a8

0800aaf8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <prvInsertBlockIntoFreeList+0x40>)
{
 800aafa:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aafc:	461a      	mov	r2, r3
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4283      	cmp	r3, r0
 800ab02:	d3fb      	bcc.n	800aafc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab04:	6854      	ldr	r4, [r2, #4]
 800ab06:	1911      	adds	r1, r2, r4
 800ab08:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab0a:	bf01      	itttt	eq
 800ab0c:	6841      	ldreq	r1, [r0, #4]
 800ab0e:	4610      	moveq	r0, r2
 800ab10:	1909      	addeq	r1, r1, r4
 800ab12:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab14:	6844      	ldr	r4, [r0, #4]
 800ab16:	1901      	adds	r1, r0, r4
 800ab18:	428b      	cmp	r3, r1
 800ab1a:	d107      	bne.n	800ab2c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab1c:	4907      	ldr	r1, [pc, #28]	; (800ab3c <prvInsertBlockIntoFreeList+0x44>)
 800ab1e:	6809      	ldr	r1, [r1, #0]
 800ab20:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab22:	bf1f      	itttt	ne
 800ab24:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab26:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab28:	1909      	addne	r1, r1, r4
 800ab2a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab2c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab2e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab30:	bf18      	it	ne
 800ab32:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	bf00      	nop
 800ab38:	2400ee20 	.word	0x2400ee20
 800ab3c:	24006e08 	.word	0x24006e08

0800ab40 <pvPortMalloc>:
{
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800ab46:	f001 f97f 	bl	800be48 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ab4a:	4842      	ldr	r0, [pc, #264]	; (800ac54 <pvPortMalloc+0x114>)
 800ab4c:	4d42      	ldr	r5, [pc, #264]	; (800ac58 <pvPortMalloc+0x118>)
 800ab4e:	6803      	ldr	r3, [r0, #0]
 800ab50:	bb0b      	cbnz	r3, 800ab96 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800ab52:	4942      	ldr	r1, [pc, #264]	; (800ac5c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab54:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab56:	4e42      	ldr	r6, [pc, #264]	; (800ac60 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab58:	bf1b      	ittet	ne
 800ab5a:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab5c:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab60:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab64:	f023 0307 	bicne.w	r3, r3, #7
 800ab68:	bf1c      	itt	ne
 800ab6a:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab6c:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800ab6e:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab70:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab72:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab74:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800ab76:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab78:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800ab7c:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab80:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800ab82:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab84:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab88:	4a36      	ldr	r2, [pc, #216]	; (800ac64 <pvPortMalloc+0x124>)
 800ab8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab8c:	4a36      	ldr	r2, [pc, #216]	; (800ac68 <pvPortMalloc+0x128>)
 800ab8e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab94:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab96:	682f      	ldr	r7, [r5, #0]
 800ab98:	4227      	tst	r7, r4
 800ab9a:	d155      	bne.n	800ac48 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800ab9c:	2c00      	cmp	r4, #0
 800ab9e:	d046      	beq.n	800ac2e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800aba0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aba4:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aba6:	bf1c      	itt	ne
 800aba8:	f023 0307 	bicne.w	r3, r3, #7
 800abac:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d04a      	beq.n	800ac48 <pvPortMalloc+0x108>
 800abb2:	4c2d      	ldr	r4, [pc, #180]	; (800ac68 <pvPortMalloc+0x128>)
 800abb4:	6826      	ldr	r6, [r4, #0]
 800abb6:	429e      	cmp	r6, r3
 800abb8:	d346      	bcc.n	800ac48 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800abba:	4a29      	ldr	r2, [pc, #164]	; (800ac60 <pvPortMalloc+0x120>)
 800abbc:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abbe:	6869      	ldr	r1, [r5, #4]
 800abc0:	4299      	cmp	r1, r3
 800abc2:	d204      	bcs.n	800abce <pvPortMalloc+0x8e>
 800abc4:	f8d5 c000 	ldr.w	ip, [r5]
 800abc8:	f1bc 0f00 	cmp.w	ip, #0
 800abcc:	d115      	bne.n	800abfa <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	42a8      	cmp	r0, r5
 800abd2:	d039      	beq.n	800ac48 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abd4:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abd6:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abd8:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abdc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abde:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abe0:	d912      	bls.n	800ac08 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abe2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe4:	0742      	lsls	r2, r0, #29
 800abe6:	d00b      	beq.n	800ac00 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	e7fe      	b.n	800abf8 <pvPortMalloc+0xb8>
 800abfa:	462a      	mov	r2, r5
 800abfc:	4665      	mov	r5, ip
 800abfe:	e7de      	b.n	800abbe <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac00:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac02:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac04:	f7ff ff78 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac08:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac0a:	4916      	ldr	r1, [pc, #88]	; (800ac64 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac0c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac0e:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800ac10:	4a16      	ldr	r2, [pc, #88]	; (800ac6c <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800ac12:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac14:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800ac16:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800ac18:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac1a:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac1c:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac1e:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800ac22:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac26:	bf38      	it	cc
 800ac28:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac2a:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800ac2c:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800ac2e:	f001 f9af 	bl	800bf90 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac32:	0763      	lsls	r3, r4, #29
 800ac34:	d00a      	beq.n	800ac4c <pvPortMalloc+0x10c>
 800ac36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
 800ac46:	e7fe      	b.n	800ac46 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800ac48:	2400      	movs	r4, #0
 800ac4a:	e7f0      	b.n	800ac2e <pvPortMalloc+0xee>
}
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac52:	bf00      	nop
 800ac54:	24006e08 	.word	0x24006e08
 800ac58:	2400ee0c 	.word	0x2400ee0c
 800ac5c:	24006e0c 	.word	0x24006e0c
 800ac60:	2400ee20 	.word	0x2400ee20
 800ac64:	2400ee14 	.word	0x2400ee14
 800ac68:	2400ee10 	.word	0x2400ee10
 800ac6c:	2400ee18 	.word	0x2400ee18

0800ac70 <vPortFree>:
{
 800ac70:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ac72:	4604      	mov	r4, r0
 800ac74:	b390      	cbz	r0, 800acdc <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ac76:	4a1a      	ldr	r2, [pc, #104]	; (800ace0 <vPortFree+0x70>)
 800ac78:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ac7c:	6812      	ldr	r2, [r2, #0]
 800ac7e:	4213      	tst	r3, r2
 800ac80:	d108      	bne.n	800ac94 <vPortFree+0x24>
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	e7fe      	b.n	800ac92 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ac94:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ac98:	b141      	cbz	r1, 800acac <vPortFree+0x3c>
 800ac9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9e:	f383 8811 	msr	BASEPRI, r3
 800aca2:	f3bf 8f6f 	isb	sy
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	e7fe      	b.n	800acaa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acac:	ea23 0302 	bic.w	r3, r3, r2
 800acb0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800acb4:	f001 f8c8 	bl	800be48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acb8:	4a0a      	ldr	r2, [pc, #40]	; (800ace4 <vPortFree+0x74>)
 800acba:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acbe:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800acc2:	6811      	ldr	r1, [r2, #0]
 800acc4:	440b      	add	r3, r1
 800acc6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acc8:	f7ff ff16 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800accc:	4a06      	ldr	r2, [pc, #24]	; (800ace8 <vPortFree+0x78>)
 800acce:	6813      	ldr	r3, [r2, #0]
 800acd0:	3301      	adds	r3, #1
}
 800acd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800acd6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800acd8:	f001 b95a 	b.w	800bf90 <xTaskResumeAll>
}
 800acdc:	bd10      	pop	{r4, pc}
 800acde:	bf00      	nop
 800ace0:	2400ee0c 	.word	0x2400ee0c
 800ace4:	2400ee10 	.word	0x2400ee10
 800ace8:	2400ee1c 	.word	0x2400ee1c

0800acec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800acf0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acf4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acf6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acf8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad00:	4770      	bx	lr

0800ad02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad06:	4770      	bx	lr

0800ad08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad08:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad0a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ad0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad0e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad10:	689a      	ldr	r2, [r3, #8]
 800ad12:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad14:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ad16:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ad18:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	6003      	str	r3, [r0, #0]
}
 800ad1e:	4770      	bx	lr

0800ad20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad20:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad22:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad24:	1c63      	adds	r3, r4, #1
 800ad26:	d10a      	bne.n	800ad3e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad28:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad2e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad30:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad32:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ad34:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ad36:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ad38:	3301      	adds	r3, #1
 800ad3a:	6003      	str	r3, [r0, #0]
}
 800ad3c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad3e:	f100 0208 	add.w	r2, r0, #8
 800ad42:	4613      	mov	r3, r2
 800ad44:	6852      	ldr	r2, [r2, #4]
 800ad46:	6815      	ldr	r5, [r2, #0]
 800ad48:	42a5      	cmp	r5, r4
 800ad4a:	d9fa      	bls.n	800ad42 <vListInsert+0x22>
 800ad4c:	e7ed      	b.n	800ad2a <vListInsert+0xa>

0800ad4e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad4e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad50:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800ad54:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad56:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad5c:	bf08      	it	eq
 800ad5e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad60:	2200      	movs	r2, #0
 800ad62:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	3a01      	subs	r2, #1
 800ad68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad6a:	6818      	ldr	r0, [r3, #0]
}
 800ad6c:	4770      	bx	lr
	...

0800ad70 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad70:	4808      	ldr	r0, [pc, #32]	; (800ad94 <prvPortStartFirstTask+0x24>)
 800ad72:	6800      	ldr	r0, [r0, #0]
 800ad74:	6800      	ldr	r0, [r0, #0]
 800ad76:	f380 8808 	msr	MSP, r0
 800ad7a:	f04f 0000 	mov.w	r0, #0
 800ad7e:	f380 8814 	msr	CONTROL, r0
 800ad82:	b662      	cpsie	i
 800ad84:	b661      	cpsie	f
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	df00      	svc	0
 800ad90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad92:	0000      	.short	0x0000
 800ad94:	e000ed08 	.word	0xe000ed08

0800ad98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ada8 <vPortEnableVFP+0x10>
 800ad9c:	6801      	ldr	r1, [r0, #0]
 800ad9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ada2:	6001      	str	r1, [r0, #0]
 800ada4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ada6:	0000      	.short	0x0000
 800ada8:	e000ed88 	.word	0xe000ed88

0800adac <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800adac:	2300      	movs	r3, #0
{
 800adae:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800adb0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800adb2:	4b0d      	ldr	r3, [pc, #52]	; (800ade8 <prvTaskExitError+0x3c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3301      	adds	r3, #1
 800adb8:	d008      	beq.n	800adcc <prvTaskExitError+0x20>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	e7fe      	b.n	800adca <prvTaskExitError+0x1e>
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0fc      	beq.n	800addc <prvTaskExitError+0x30>
}
 800ade2:	b002      	add	sp, #8
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	2400005c 	.word	0x2400005c

0800adec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adf0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800adf4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800adf8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800adfa:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800adfc:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800adfe:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae00:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae02:	f06f 0302 	mvn.w	r3, #2
 800ae06:	6203      	str	r3, [r0, #32]
}
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	0800adad 	.word	0x0800adad

0800ae10 <SVC_Handler>:
	__asm volatile (
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <pxCurrentTCBConst2>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	6808      	ldr	r0, [r1, #0]
 800ae16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1a:	f380 8809 	msr	PSP, r0
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f04f 0000 	mov.w	r0, #0
 800ae26:	f380 8811 	msr	BASEPRI, r0
 800ae2a:	4770      	bx	lr
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst2>:
 800ae30:	2400ee70 	.word	0x2400ee70

0800ae34 <vPortEnterCritical>:
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800ae44:	4a0a      	ldr	r2, [pc, #40]	; (800ae70 <vPortEnterCritical+0x3c>)
 800ae46:	6813      	ldr	r3, [r2, #0]
 800ae48:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800ae4a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ae4c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ae4e:	d10e      	bne.n	800ae6e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ae54:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	b143      	cbz	r3, 800ae6e <vPortEnterCritical+0x3a>
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	e7fe      	b.n	800ae6c <vPortEnterCritical+0x38>
}
 800ae6e:	4770      	bx	lr
 800ae70:	2400005c 	.word	0x2400005c

0800ae74 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800ae74:	4a08      	ldr	r2, [pc, #32]	; (800ae98 <vPortExitCritical+0x24>)
 800ae76:	6813      	ldr	r3, [r2, #0]
 800ae78:	b943      	cbnz	r3, 800ae8c <vPortExitCritical+0x18>
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	e7fe      	b.n	800ae8a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae90:	b90b      	cbnz	r3, 800ae96 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae92:	f383 8811 	msr	BASEPRI, r3
}
 800ae96:	4770      	bx	lr
 800ae98:	2400005c 	.word	0x2400005c
 800ae9c:	00000000 	.word	0x00000000

0800aea0 <PendSV_Handler>:
	__asm volatile
 800aea0:	f3ef 8009 	mrs	r0, PSP
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <pxCurrentTCBConst>)
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	f01e 0f10 	tst.w	lr, #16
 800aeb0:	bf08      	it	eq
 800aeb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aeb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aec4:	f380 8811 	msr	BASEPRI, r0
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	f3bf 8f6f 	isb	sy
 800aed0:	f001 f93c 	bl	800c14c <vTaskSwitchContext>
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	f380 8811 	msr	BASEPRI, r0
 800aedc:	bc09      	pop	{r0, r3}
 800aede:	6819      	ldr	r1, [r3, #0]
 800aee0:	6808      	ldr	r0, [r1, #0]
 800aee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	f01e 0f10 	tst.w	lr, #16
 800aeea:	bf08      	it	eq
 800aeec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aef0:	f380 8809 	msr	PSP, r0
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst>:
 800af00:	2400ee70 	.word	0x2400ee70

0800af04 <xPortSysTickHandler>:
{
 800af04:	b508      	push	{r3, lr}
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800af16:	f000 ffa5 	bl	800be64 <xTaskIncrementTick>
 800af1a:	b128      	cbz	r0, 800af28 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800af28:	2300      	movs	r3, #0
 800af2a:	f383 8811 	msr	BASEPRI, r3
}
 800af2e:	bd08      	pop	{r3, pc}

0800af30 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af30:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800af34:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af3a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af3c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af3e:	4b04      	ldr	r3, [pc, #16]	; (800af50 <vPortSetupTimerInterrupt+0x20>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	fbb3 f3f1 	udiv	r3, r3, r1
 800af46:	3b01      	subs	r3, #1
 800af48:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af4a:	2307      	movs	r3, #7
 800af4c:	6113      	str	r3, [r2, #16]
}
 800af4e:	4770      	bx	lr
 800af50:	2400004c 	.word	0x2400004c

0800af54 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800af58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af5a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800af5e:	4a3a      	ldr	r2, [pc, #232]	; (800b048 <xPortStartScheduler+0xf4>)
 800af60:	4291      	cmp	r1, r2
 800af62:	d108      	bne.n	800af76 <xPortStartScheduler+0x22>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	e7fe      	b.n	800af74 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800af7a:	4b34      	ldr	r3, [pc, #208]	; (800b04c <xPortStartScheduler+0xf8>)
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d108      	bne.n	800af92 <xPortStartScheduler+0x3e>
 800af80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af84:	f383 8811 	msr	BASEPRI, r3
 800af88:	f3bf 8f6f 	isb	sy
 800af8c:	f3bf 8f4f 	dsb	sy
 800af90:	e7fe      	b.n	800af90 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af92:	4b2f      	ldr	r3, [pc, #188]	; (800b050 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af94:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800af96:	781a      	ldrb	r2, [r3, #0]
 800af98:	b2d2      	uxtb	r2, r2
 800af9a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800af9c:	22ff      	movs	r2, #255	; 0xff
 800af9e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afa0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afa2:	4a2c      	ldr	r2, [pc, #176]	; (800b054 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afaa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800afae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afb2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afb4:	2307      	movs	r3, #7
 800afb6:	4a28      	ldr	r2, [pc, #160]	; (800b058 <xPortStartScheduler+0x104>)
 800afb8:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afba:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800afbe:	1e5c      	subs	r4, r3, #1
 800afc0:	0600      	lsls	r0, r0, #24
 800afc2:	d40c      	bmi.n	800afde <xPortStartScheduler+0x8a>
 800afc4:	b111      	cbz	r1, 800afcc <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	6013      	str	r3, [r2, #0]
 800afca:	d011      	beq.n	800aff0 <xPortStartScheduler+0x9c>
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	e7fe      	b.n	800afdc <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afde:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800afe2:	2101      	movs	r1, #1
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	f88d 3003 	strb.w	r3, [sp, #3]
 800afec:	4623      	mov	r3, r4
 800afee:	e7e4      	b.n	800afba <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aff0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aff4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800aff8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800affa:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800affc:	9b01      	ldr	r3, [sp, #4]
 800affe:	4a14      	ldr	r2, [pc, #80]	; (800b050 <xPortStartScheduler+0xfc>)
 800b000:	b2db      	uxtb	r3, r3
 800b002:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b004:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b00c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b010:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b014:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b018:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800b01c:	f7ff ff88 	bl	800af30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b020:	4b0e      	ldr	r3, [pc, #56]	; (800b05c <xPortStartScheduler+0x108>)
 800b022:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b024:	f7ff feb8 	bl	800ad98 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b028:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800b02c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b030:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800b034:	f7ff fe9c 	bl	800ad70 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b038:	f001 f888 	bl	800c14c <vTaskSwitchContext>
}
 800b03c:	4628      	mov	r0, r5
	prvTaskExitError();
 800b03e:	f7ff feb5 	bl	800adac <prvTaskExitError>
}
 800b042:	b003      	add	sp, #12
 800b044:	bd30      	pop	{r4, r5, pc}
 800b046:	bf00      	nop
 800b048:	410fc271 	.word	0x410fc271
 800b04c:	410fc270 	.word	0x410fc270
 800b050:	e000e400 	.word	0xe000e400
 800b054:	2400ee28 	.word	0x2400ee28
 800b058:	2400ee2c 	.word	0x2400ee2c
 800b05c:	2400005c 	.word	0x2400005c

0800b060 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b060:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b064:	2b0f      	cmp	r3, #15
 800b066:	d90e      	bls.n	800b086 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b068:	4a11      	ldr	r2, [pc, #68]	; (800b0b0 <vPortValidateInterruptPriority+0x50>)
 800b06a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b06c:	4a11      	ldr	r2, [pc, #68]	; (800b0b4 <vPortValidateInterruptPriority+0x54>)
 800b06e:	7812      	ldrb	r2, [r2, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d908      	bls.n	800b086 <vPortValidateInterruptPriority+0x26>
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	e7fe      	b.n	800b084 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b086:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b08a:	4a0b      	ldr	r2, [pc, #44]	; (800b0b8 <vPortValidateInterruptPriority+0x58>)
 800b08c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b090:	6812      	ldr	r2, [r2, #0]
 800b092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b096:	4293      	cmp	r3, r2
 800b098:	d908      	bls.n	800b0ac <vPortValidateInterruptPriority+0x4c>
 800b09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b09e:	f383 8811 	msr	BASEPRI, r3
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	e7fe      	b.n	800b0aa <vPortValidateInterruptPriority+0x4a>
	}
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	e000e3f0 	.word	0xe000e3f0
 800b0b4:	2400ee28 	.word	0x2400ee28
 800b0b8:	2400ee2c 	.word	0x2400ee2c

0800b0bc <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0c0:	f7ff feb8 	bl	800ae34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f7ff fed5 	bl	800ae74 <vPortExitCritical>

	return xReturn;
}
 800b0ca:	fab4 f084 	clz	r0, r4
 800b0ce:	0940      	lsrs	r0, r0, #5
 800b0d0:	bd10      	pop	{r4, pc}

0800b0d2 <prvCopyDataToQueue>:
{
 800b0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b0d8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0da:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0dc:	b952      	cbnz	r2, 800b0f4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0de:	6807      	ldr	r7, [r0, #0]
 800b0e0:	bb47      	cbnz	r7, 800b134 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0e2:	6880      	ldr	r0, [r0, #8]
 800b0e4:	f001 f990 	bl	800c408 <xTaskPriorityDisinherit>
 800b0e8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0ea:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0ec:	3601      	adds	r6, #1
}
 800b0ee:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0f0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800b0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b0f4:	b965      	cbnz	r5, 800b110 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0f6:	6840      	ldr	r0, [r0, #4]
 800b0f8:	f013 f8c2 	bl	801e280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b100:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b102:	68a2      	ldr	r2, [r4, #8]
 800b104:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b106:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b108:	d3f0      	bcc.n	800b0ec <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	6063      	str	r3, [r4, #4]
 800b10e:	e7ed      	b.n	800b0ec <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b110:	68c0      	ldr	r0, [r0, #12]
 800b112:	f013 f8b5 	bl	801e280 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b116:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b118:	68e3      	ldr	r3, [r4, #12]
 800b11a:	4251      	negs	r1, r2
 800b11c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b11e:	6822      	ldr	r2, [r4, #0]
 800b120:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b122:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b124:	bf3e      	ittt	cc
 800b126:	68a3      	ldrcc	r3, [r4, #8]
 800b128:	185b      	addcc	r3, r3, r1
 800b12a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b12c:	2d02      	cmp	r5, #2
 800b12e:	d101      	bne.n	800b134 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b130:	b116      	cbz	r6, 800b138 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800b132:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b134:	2500      	movs	r5, #0
 800b136:	e7d9      	b.n	800b0ec <prvCopyDataToQueue+0x1a>
 800b138:	4635      	mov	r5, r6
 800b13a:	e7d7      	b.n	800b0ec <prvCopyDataToQueue+0x1a>

0800b13c <prvCopyDataFromQueue>:
{
 800b13c:	4603      	mov	r3, r0
 800b13e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800b142:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b144:	b162      	cbz	r2, 800b160 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b146:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b148:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b14a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b14c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b14e:	60dc      	str	r4, [r3, #12]
}
 800b150:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b154:	bf24      	itt	cs
 800b156:	6819      	ldrcs	r1, [r3, #0]
 800b158:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b15a:	68d9      	ldr	r1, [r3, #12]
 800b15c:	f013 b890 	b.w	801e280 <memcpy>
}
 800b160:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <prvUnlockQueue>:
{
 800b166:	b570      	push	{r4, r5, r6, lr}
 800b168:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b16a:	f7ff fe63 	bl	800ae34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b16e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b172:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b176:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b178:	2d00      	cmp	r5, #0
 800b17a:	dc14      	bgt.n	800b1a6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b17c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b17e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b186:	f7ff fe75 	bl	800ae74 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b18a:	f7ff fe53 	bl	800ae34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b18e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800b192:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b194:	2d00      	cmp	r5, #0
 800b196:	dc12      	bgt.n	800b1be <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b198:	23ff      	movs	r3, #255	; 0xff
 800b19a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b19e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b1a2:	f7ff be67 	b.w	800ae74 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0e7      	beq.n	800b17c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f001 f849 	bl	800c244 <xTaskRemoveFromEventList>
 800b1b2:	b108      	cbz	r0, 800b1b8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b1b4:	f001 f8d2 	bl	800c35c <vTaskMissedYield>
			--cTxLock;
 800b1b8:	3d01      	subs	r5, #1
 800b1ba:	b26d      	sxtb	r5, r5
 800b1bc:	e7dc      	b.n	800b178 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1be:	6923      	ldr	r3, [r4, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0e9      	beq.n	800b198 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f001 f83d 	bl	800c244 <xTaskRemoveFromEventList>
 800b1ca:	b108      	cbz	r0, 800b1d0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b1cc:	f001 f8c6 	bl	800c35c <vTaskMissedYield>
				--cRxLock;
 800b1d0:	3d01      	subs	r5, #1
 800b1d2:	b26d      	sxtb	r5, r5
 800b1d4:	e7de      	b.n	800b194 <prvUnlockQueue+0x2e>

0800b1d6 <xQueueGenericReset>:
{
 800b1d6:	b538      	push	{r3, r4, r5, lr}
 800b1d8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b1da:	4604      	mov	r4, r0
 800b1dc:	b940      	cbnz	r0, 800b1f0 <xQueueGenericReset+0x1a>
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	e7fe      	b.n	800b1ee <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800b1f0:	f7ff fe20 	bl	800ae34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1fa:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1fc:	434b      	muls	r3, r1
 800b1fe:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b200:	1a5b      	subs	r3, r3, r1
 800b202:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b204:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b206:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b208:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b20a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b20c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b20e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b216:	b9a5      	cbnz	r5, 800b242 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b218:	6923      	ldr	r3, [r4, #16]
 800b21a:	b173      	cbz	r3, 800b23a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b21c:	f104 0010 	add.w	r0, r4, #16
 800b220:	f001 f810 	bl	800c244 <xTaskRemoveFromEventList>
 800b224:	b148      	cbz	r0, 800b23a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800b226:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b232:	f3bf 8f4f 	dsb	sy
 800b236:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800b23a:	f7ff fe1b 	bl	800ae74 <vPortExitCritical>
}
 800b23e:	2001      	movs	r0, #1
 800b240:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b242:	f104 0010 	add.w	r0, r4, #16
 800b246:	f7ff fd51 	bl	800acec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b24a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b24e:	f7ff fd4d 	bl	800acec <vListInitialise>
 800b252:	e7f2      	b.n	800b23a <xQueueGenericReset+0x64>

0800b254 <xQueueGenericCreateStatic>:
	{
 800b254:	b513      	push	{r0, r1, r4, lr}
 800b256:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b258:	b940      	cbnz	r0, 800b26c <xQueueGenericCreateStatic+0x18>
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	e7fe      	b.n	800b26a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800b26c:	b943      	cbnz	r3, 800b280 <xQueueGenericCreateStatic+0x2c>
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	e7fe      	b.n	800b27e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b280:	b14a      	cbz	r2, 800b296 <xQueueGenericCreateStatic+0x42>
 800b282:	b991      	cbnz	r1, 800b2aa <xQueueGenericCreateStatic+0x56>
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	e7fe      	b.n	800b294 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b296:	b141      	cbz	r1, 800b2aa <xQueueGenericCreateStatic+0x56>
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	e7fe      	b.n	800b2a8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b2aa:	2350      	movs	r3, #80	; 0x50
 800b2ac:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b2ae:	9b01      	ldr	r3, [sp, #4]
 800b2b0:	2b50      	cmp	r3, #80	; 0x50
 800b2b2:	d008      	beq.n	800b2c6 <xQueueGenericCreateStatic+0x72>
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	bf08      	it	eq
 800b2ca:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b2cc:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	6022      	str	r2, [r4, #0]
 800b2d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800b2d6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f7ff ff7a 	bl	800b1d6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b2e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800b2e6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800b2e8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd10      	pop	{r4, pc}

0800b2f0 <xQueueGenericCreate>:
	{
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	b940      	cbnz	r0, 800b30c <xQueueGenericCreate+0x1c>
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	e7fe      	b.n	800b30a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b30c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b30e:	3050      	adds	r0, #80	; 0x50
 800b310:	f7ff fc16 	bl	800ab40 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b314:	4604      	mov	r4, r0
 800b316:	b170      	cbz	r0, 800b336 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b318:	2300      	movs	r3, #0
 800b31a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b31e:	b165      	cbz	r5, 800b33a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b320:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b324:	2101      	movs	r1, #1
 800b326:	4620      	mov	r0, r4
 800b328:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800b32a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b32e:	f7ff ff52 	bl	800b1d6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b332:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800b336:	4620      	mov	r0, r4
 800b338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b33a:	4603      	mov	r3, r0
 800b33c:	e7f2      	b.n	800b324 <xQueueGenericCreate+0x34>

0800b33e <xQueueCreateCountingSemaphoreStatic>:
	{
 800b33e:	b513      	push	{r0, r1, r4, lr}
 800b340:	4613      	mov	r3, r2
 800b342:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b344:	b940      	cbnz	r0, 800b358 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	e7fe      	b.n	800b356 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b358:	4288      	cmp	r0, r1
 800b35a:	d208      	bcs.n	800b36e <xQueueCreateCountingSemaphoreStatic+0x30>
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	e7fe      	b.n	800b36c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b36e:	2202      	movs	r2, #2
 800b370:	9200      	str	r2, [sp, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	4611      	mov	r1, r2
 800b376:	f7ff ff6d 	bl	800b254 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800b37a:	b100      	cbz	r0, 800b37e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b37c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b37e:	b002      	add	sp, #8
 800b380:	bd10      	pop	{r4, pc}

0800b382 <xQueueCreateCountingSemaphore>:
	{
 800b382:	b510      	push	{r4, lr}
 800b384:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b386:	b940      	cbnz	r0, 800b39a <xQueueCreateCountingSemaphore+0x18>
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	e7fe      	b.n	800b398 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b39a:	4288      	cmp	r0, r1
 800b39c:	d208      	bcs.n	800b3b0 <xQueueCreateCountingSemaphore+0x2e>
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	e7fe      	b.n	800b3ae <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b3b0:	2202      	movs	r2, #2
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	f7ff ff9c 	bl	800b2f0 <xQueueGenericCreate>
		if( xHandle != NULL )
 800b3b8:	b100      	cbz	r0, 800b3bc <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b3ba:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b3bc:	bd10      	pop	{r4, pc}

0800b3be <xQueueGenericSend>:
{
 800b3be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	4688      	mov	r8, r1
 800b3c6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b3c8:	4604      	mov	r4, r0
{
 800b3ca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b3cc:	b940      	cbnz	r0, 800b3e0 <xQueueGenericSend+0x22>
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	e7fe      	b.n	800b3de <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3e0:	b951      	cbnz	r1, 800b3f8 <xQueueGenericSend+0x3a>
 800b3e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b3e4:	b143      	cbz	r3, 800b3f8 <xQueueGenericSend+0x3a>
 800b3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ea:	f383 8811 	msr	BASEPRI, r3
 800b3ee:	f3bf 8f6f 	isb	sy
 800b3f2:	f3bf 8f4f 	dsb	sy
 800b3f6:	e7fe      	b.n	800b3f6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3f8:	2f02      	cmp	r7, #2
 800b3fa:	d10b      	bne.n	800b414 <xQueueGenericSend+0x56>
 800b3fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d008      	beq.n	800b414 <xQueueGenericSend+0x56>
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	e7fe      	b.n	800b412 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b414:	f000 ffa8 	bl	800c368 <xTaskGetSchedulerState>
 800b418:	4606      	mov	r6, r0
 800b41a:	b950      	cbnz	r0, 800b432 <xQueueGenericSend+0x74>
 800b41c:	9b01      	ldr	r3, [sp, #4]
 800b41e:	b14b      	cbz	r3, 800b434 <xQueueGenericSend+0x76>
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	e7fe      	b.n	800b430 <xQueueGenericSend+0x72>
 800b432:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b434:	f04f 0900 	mov.w	r9, #0
 800b438:	e037      	b.n	800b4aa <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b43a:	9d01      	ldr	r5, [sp, #4]
 800b43c:	b91d      	cbnz	r5, 800b446 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800b43e:	f7ff fd19 	bl	800ae74 <vPortExitCritical>
			return errQUEUE_FULL;
 800b442:	2000      	movs	r0, #0
 800b444:	e052      	b.n	800b4ec <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800b446:	b916      	cbnz	r6, 800b44e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b448:	a802      	add	r0, sp, #8
 800b44a:	f000 ff3f 	bl	800c2cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b44e:	f7ff fd11 	bl	800ae74 <vPortExitCritical>
		vTaskSuspendAll();
 800b452:	f000 fcf9 	bl	800be48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b456:	f7ff fced 	bl	800ae34 <vPortEnterCritical>
 800b45a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b45e:	2bff      	cmp	r3, #255	; 0xff
 800b460:	d101      	bne.n	800b466 <xQueueGenericSend+0xa8>
 800b462:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800b466:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b46a:	2bff      	cmp	r3, #255	; 0xff
 800b46c:	d101      	bne.n	800b472 <xQueueGenericSend+0xb4>
 800b46e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800b472:	f7ff fcff 	bl	800ae74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b476:	a901      	add	r1, sp, #4
 800b478:	a802      	add	r0, sp, #8
 800b47a:	f000 ff33 	bl	800c2e4 <xTaskCheckForTimeOut>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d14a      	bne.n	800b518 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b482:	f7ff fcd7 	bl	800ae34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b486:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d131      	bne.n	800b4f2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b48e:	f7ff fcf1 	bl	800ae74 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b492:	9901      	ldr	r1, [sp, #4]
 800b494:	f104 0010 	add.w	r0, r4, #16
 800b498:	f000 fe9c 	bl	800c1d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b49c:	4620      	mov	r0, r4
 800b49e:	f7ff fe62 	bl	800b166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4a2:	f000 fd75 	bl	800bf90 <xTaskResumeAll>
 800b4a6:	b360      	cbz	r0, 800b502 <xQueueGenericSend+0x144>
 800b4a8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b4aa:	f7ff fcc3 	bl	800ae34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b4b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d301      	bcc.n	800b4ba <xQueueGenericSend+0xfc>
 800b4b6:	2f02      	cmp	r7, #2
 800b4b8:	d1bf      	bne.n	800b43a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4641      	mov	r1, r8
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f7ff fe07 	bl	800b0d2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c6:	b11b      	cbz	r3, 800b4d0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b4cc:	f000 feba 	bl	800c244 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800b4d0:	b148      	cbz	r0, 800b4e6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800b4d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b4e6:	f7ff fcc5 	bl	800ae74 <vPortExitCritical>
				return pdPASS;
 800b4ea:	2001      	movs	r0, #1
}
 800b4ec:	b005      	add	sp, #20
 800b4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800b4f2:	f7ff fcbf 	bl	800ae74 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7ff fe35 	bl	800b166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4fc:	f000 fd48 	bl	800bf90 <xTaskResumeAll>
 800b500:	e7d2      	b.n	800b4a8 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800b502:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b50a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	f3bf 8f6f 	isb	sy
 800b516:	e7c7      	b.n	800b4a8 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800b518:	4620      	mov	r0, r4
 800b51a:	f7ff fe24 	bl	800b166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b51e:	f000 fd37 	bl	800bf90 <xTaskResumeAll>
 800b522:	e78e      	b.n	800b442 <xQueueGenericSend+0x84>

0800b524 <xQueueGenericSendFromISR>:
{
 800b524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b528:	4689      	mov	r9, r1
 800b52a:	4690      	mov	r8, r2
 800b52c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b52e:	4604      	mov	r4, r0
 800b530:	b940      	cbnz	r0, 800b544 <xQueueGenericSendFromISR+0x20>
 800b532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b536:	f383 8811 	msr	BASEPRI, r3
 800b53a:	f3bf 8f6f 	isb	sy
 800b53e:	f3bf 8f4f 	dsb	sy
 800b542:	e7fe      	b.n	800b542 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b544:	b951      	cbnz	r1, 800b55c <xQueueGenericSendFromISR+0x38>
 800b546:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b548:	b143      	cbz	r3, 800b55c <xQueueGenericSendFromISR+0x38>
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	e7fe      	b.n	800b55a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b55c:	2f02      	cmp	r7, #2
 800b55e:	d10b      	bne.n	800b578 <xQueueGenericSendFromISR+0x54>
 800b560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d008      	beq.n	800b578 <xQueueGenericSendFromISR+0x54>
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	e7fe      	b.n	800b576 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b578:	f7ff fd72 	bl	800b060 <vPortValidateInterruptPriority>
	__asm volatile
 800b57c:	f3ef 8611 	mrs	r6, BASEPRI
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b590:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b592:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b594:	429a      	cmp	r2, r3
 800b596:	d301      	bcc.n	800b59c <xQueueGenericSendFromISR+0x78>
 800b598:	2f02      	cmp	r7, #2
 800b59a:	d123      	bne.n	800b5e4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b59c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5a0:	463a      	mov	r2, r7
 800b5a2:	4649      	mov	r1, r9
 800b5a4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5a6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b5aa:	f7ff fd92 	bl	800b0d2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b5ae:	1c6b      	adds	r3, r5, #1
 800b5b0:	d113      	bne.n	800b5da <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b4:	b90b      	cbnz	r3, 800b5ba <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	e00b      	b.n	800b5d2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b5be:	f000 fe41 	bl	800c244 <xTaskRemoveFromEventList>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0f7      	beq.n	800b5b6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800b5c6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ca:	d0f4      	beq.n	800b5b6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b5d2:	f386 8811 	msr	BASEPRI, r6
}
 800b5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b5da:	3501      	adds	r5, #1
 800b5dc:	b26d      	sxtb	r5, r5
 800b5de:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b5e2:	e7e8      	b.n	800b5b6 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800b5e4:	2000      	movs	r0, #0
 800b5e6:	e7f4      	b.n	800b5d2 <xQueueGenericSendFromISR+0xae>

0800b5e8 <xQueueGiveFromISR>:
{
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	b940      	cbnz	r0, 800b602 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800b5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f4:	f383 8811 	msr	BASEPRI, r3
 800b5f8:	f3bf 8f6f 	isb	sy
 800b5fc:	f3bf 8f4f 	dsb	sy
 800b600:	e7fe      	b.n	800b600 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b602:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b604:	b143      	cbz	r3, 800b618 <xQueueGiveFromISR+0x30>
 800b606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	e7fe      	b.n	800b616 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b618:	6803      	ldr	r3, [r0, #0]
 800b61a:	b953      	cbnz	r3, 800b632 <xQueueGiveFromISR+0x4a>
 800b61c:	6883      	ldr	r3, [r0, #8]
 800b61e:	b143      	cbz	r3, 800b632 <xQueueGiveFromISR+0x4a>
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	e7fe      	b.n	800b630 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b632:	f7ff fd15 	bl	800b060 <vPortValidateInterruptPriority>
	__asm volatile
 800b636:	f3ef 8611 	mrs	r6, BASEPRI
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b64a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b64c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b64e:	4293      	cmp	r3, r2
 800b650:	d91c      	bls.n	800b68c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b656:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b658:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b65a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b65c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b65e:	d110      	bne.n	800b682 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b662:	b90b      	cbnz	r3, 800b668 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800b664:	2001      	movs	r0, #1
 800b666:	e009      	b.n	800b67c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b668:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b66c:	f000 fdea 	bl	800c244 <xTaskRemoveFromEventList>
 800b670:	2800      	cmp	r0, #0
 800b672:	d0f7      	beq.n	800b664 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b674:	2d00      	cmp	r5, #0
 800b676:	d0f5      	beq.n	800b664 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b678:	2001      	movs	r0, #1
 800b67a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b67c:	f386 8811 	msr	BASEPRI, r6
}
 800b680:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b682:	3301      	adds	r3, #1
 800b684:	b25b      	sxtb	r3, r3
 800b686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b68a:	e7eb      	b.n	800b664 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b68c:	2000      	movs	r0, #0
 800b68e:	e7f5      	b.n	800b67c <xQueueGiveFromISR+0x94>

0800b690 <xQueueReceive>:
{
 800b690:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b694:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b696:	4604      	mov	r4, r0
{
 800b698:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b69a:	b940      	cbnz	r0, 800b6ae <xQueueReceive+0x1e>
	__asm volatile
 800b69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a0:	f383 8811 	msr	BASEPRI, r3
 800b6a4:	f3bf 8f6f 	isb	sy
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	e7fe      	b.n	800b6ac <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6ae:	b951      	cbnz	r1, 800b6c6 <xQueueReceive+0x36>
 800b6b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b6b2:	b143      	cbz	r3, 800b6c6 <xQueueReceive+0x36>
 800b6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	e7fe      	b.n	800b6c4 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b6c6:	f000 fe4f 	bl	800c368 <xTaskGetSchedulerState>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	b950      	cbnz	r0, 800b6e4 <xQueueReceive+0x54>
 800b6ce:	9b01      	ldr	r3, [sp, #4]
 800b6d0:	b14b      	cbz	r3, 800b6e6 <xQueueReceive+0x56>
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	e7fe      	b.n	800b6e2 <xQueueReceive+0x52>
 800b6e4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b6e6:	f04f 0800 	mov.w	r8, #0
 800b6ea:	e03d      	b.n	800b768 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6ec:	9d01      	ldr	r5, [sp, #4]
 800b6ee:	b91d      	cbnz	r5, 800b6f8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800b6f0:	f7ff fbc0 	bl	800ae74 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	e056      	b.n	800b7a6 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800b6f8:	b916      	cbnz	r6, 800b700 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6fa:	a802      	add	r0, sp, #8
 800b6fc:	f000 fde6 	bl	800c2cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b700:	f7ff fbb8 	bl	800ae74 <vPortExitCritical>
		vTaskSuspendAll();
 800b704:	f000 fba0 	bl	800be48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b708:	f7ff fb94 	bl	800ae34 <vPortEnterCritical>
 800b70c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b710:	2bff      	cmp	r3, #255	; 0xff
 800b712:	d101      	bne.n	800b718 <xQueueReceive+0x88>
 800b714:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b718:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b71c:	2bff      	cmp	r3, #255	; 0xff
 800b71e:	d101      	bne.n	800b724 <xQueueReceive+0x94>
 800b720:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b724:	f7ff fba6 	bl	800ae74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b728:	a901      	add	r1, sp, #4
 800b72a:	a802      	add	r0, sp, #8
 800b72c:	f000 fdda 	bl	800c2e4 <xTaskCheckForTimeOut>
 800b730:	2800      	cmp	r0, #0
 800b732:	d141      	bne.n	800b7b8 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b734:	4620      	mov	r0, r4
 800b736:	f7ff fcc1 	bl	800b0bc <prvIsQueueEmpty>
 800b73a:	b3b8      	cbz	r0, 800b7ac <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b73c:	9901      	ldr	r1, [sp, #4]
 800b73e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b742:	f000 fd47 	bl	800c1d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff fd0d 	bl	800b166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b74c:	f000 fc20 	bl	800bf90 <xTaskResumeAll>
 800b750:	b948      	cbnz	r0, 800b766 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800b752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b768:	f7ff fb64 	bl	800ae34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b76c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b76e:	2d00      	cmp	r5, #0
 800b770:	d0bc      	beq.n	800b6ec <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b772:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b774:	4639      	mov	r1, r7
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff fce0 	bl	800b13c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b77c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b77e:	6923      	ldr	r3, [r4, #16]
 800b780:	b173      	cbz	r3, 800b7a0 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b782:	f104 0010 	add.w	r0, r4, #16
 800b786:	f000 fd5d 	bl	800c244 <xTaskRemoveFromEventList>
 800b78a:	b148      	cbz	r0, 800b7a0 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800b78c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b794:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b7a0:	f7ff fb68 	bl	800ae74 <vPortExitCritical>
				return pdPASS;
 800b7a4:	2001      	movs	r0, #1
}
 800b7a6:	b004      	add	sp, #16
 800b7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7ff fcda 	bl	800b166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7b2:	f000 fbed 	bl	800bf90 <xTaskResumeAll>
 800b7b6:	e7d6      	b.n	800b766 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f7ff fcd4 	bl	800b166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7be:	f000 fbe7 	bl	800bf90 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7ff fc7a 	bl	800b0bc <prvIsQueueEmpty>
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	d0cc      	beq.n	800b766 <xQueueReceive+0xd6>
 800b7cc:	e792      	b.n	800b6f4 <xQueueReceive+0x64>

0800b7ce <xQueueSemaphoreTake>:
{
 800b7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800b7d2:	4604      	mov	r4, r0
{
 800b7d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b7d6:	b940      	cbnz	r0, 800b7ea <xQueueSemaphoreTake+0x1c>
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b7ec:	b145      	cbz	r5, 800b800 <xQueueSemaphoreTake+0x32>
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	e7fe      	b.n	800b7fe <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b800:	f000 fdb2 	bl	800c368 <xTaskGetSchedulerState>
 800b804:	4606      	mov	r6, r0
 800b806:	b950      	cbnz	r0, 800b81e <xQueueSemaphoreTake+0x50>
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	b15b      	cbz	r3, 800b824 <xQueueSemaphoreTake+0x56>
 800b80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	e7fe      	b.n	800b81c <xQueueSemaphoreTake+0x4e>
 800b81e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800b820:	2700      	movs	r7, #0
 800b822:	e053      	b.n	800b8cc <xQueueSemaphoreTake+0xfe>
 800b824:	4605      	mov	r5, r0
 800b826:	e7fb      	b.n	800b820 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	b963      	cbnz	r3, 800b846 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b82c:	b145      	cbz	r5, 800b840 <xQueueSemaphoreTake+0x72>
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	e7fe      	b.n	800b83e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800b840:	f7ff fb18 	bl	800ae74 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b844:	e062      	b.n	800b90c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800b846:	b916      	cbnz	r6, 800b84e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b848:	a802      	add	r0, sp, #8
 800b84a:	f000 fd3f 	bl	800c2cc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b84e:	f7ff fb11 	bl	800ae74 <vPortExitCritical>
		vTaskSuspendAll();
 800b852:	f000 faf9 	bl	800be48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b856:	f7ff faed 	bl	800ae34 <vPortEnterCritical>
 800b85a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b85e:	2bff      	cmp	r3, #255	; 0xff
 800b860:	d101      	bne.n	800b866 <xQueueSemaphoreTake+0x98>
 800b862:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800b866:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b86a:	2bff      	cmp	r3, #255	; 0xff
 800b86c:	d101      	bne.n	800b872 <xQueueSemaphoreTake+0xa4>
 800b86e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b872:	f7ff faff 	bl	800ae74 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b876:	a901      	add	r1, sp, #4
 800b878:	a802      	add	r0, sp, #8
 800b87a:	f000 fd33 	bl	800c2e4 <xTaskCheckForTimeOut>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d14d      	bne.n	800b91e <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b882:	4620      	mov	r0, r4
 800b884:	f7ff fc1a 	bl	800b0bc <prvIsQueueEmpty>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d042      	beq.n	800b912 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	b93b      	cbnz	r3, 800b8a0 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800b890:	f7ff fad0 	bl	800ae34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b894:	68a0      	ldr	r0, [r4, #8]
 800b896:	f000 fd77 	bl	800c388 <xTaskPriorityInherit>
 800b89a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800b89c:	f7ff faea 	bl	800ae74 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8a0:	9901      	ldr	r1, [sp, #4]
 800b8a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8a6:	f000 fc95 	bl	800c1d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7ff fc5b 	bl	800b166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8b0:	f000 fb6e 	bl	800bf90 <xTaskResumeAll>
 800b8b4:	b948      	cbnz	r0, 800b8ca <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800b8b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b8cc:	f7ff fab2 	bl	800ae34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b8d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0a8      	beq.n	800b828 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	b913      	cbnz	r3, 800b8e4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b8de:	f000 fe29 	bl	800c534 <pvTaskIncrementMutexHeldCount>
 800b8e2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	b173      	cbz	r3, 800b906 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8e8:	f104 0010 	add.w	r0, r4, #16
 800b8ec:	f000 fcaa 	bl	800c244 <xTaskRemoveFromEventList>
 800b8f0:	b148      	cbz	r0, 800b906 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800b8f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800b906:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800b908:	f7ff fab4 	bl	800ae74 <vPortExitCritical>
}
 800b90c:	4628      	mov	r0, r5
 800b90e:	b005      	add	sp, #20
 800b910:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff fc27 	bl	800b166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b918:	f000 fb3a 	bl	800bf90 <xTaskResumeAll>
 800b91c:	e7d5      	b.n	800b8ca <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800b91e:	4620      	mov	r0, r4
 800b920:	f7ff fc21 	bl	800b166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b924:	f000 fb34 	bl	800bf90 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff fbc7 	bl	800b0bc <prvIsQueueEmpty>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d0cb      	beq.n	800b8ca <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800b932:	2d00      	cmp	r5, #0
 800b934:	d0ea      	beq.n	800b90c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800b936:	f7ff fa7d 	bl	800ae34 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b93a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b93c:	b119      	cbz	r1, 800b946 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b93e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b940:	6819      	ldr	r1, [r3, #0]
 800b942:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b946:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800b948:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b94a:	f000 fda1 	bl	800c490 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b94e:	f7ff fa91 	bl	800ae74 <vPortExitCritical>
 800b952:	e7db      	b.n	800b90c <xQueueSemaphoreTake+0x13e>

0800b954 <xQueueReceiveFromISR>:
{
 800b954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b958:	4689      	mov	r9, r1
 800b95a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800b95c:	4605      	mov	r5, r0
 800b95e:	b940      	cbnz	r0, 800b972 <xQueueReceiveFromISR+0x1e>
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	e7fe      	b.n	800b970 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b972:	b951      	cbnz	r1, 800b98a <xQueueReceiveFromISR+0x36>
 800b974:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b976:	b143      	cbz	r3, 800b98a <xQueueReceiveFromISR+0x36>
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	e7fe      	b.n	800b988 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b98a:	f7ff fb69 	bl	800b060 <vPortValidateInterruptPriority>
	__asm volatile
 800b98e:	f3ef 8711 	mrs	r7, BASEPRI
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9a2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9a4:	b31c      	cbz	r4, 800b9ee <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9a6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9ae:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800b9b0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9b2:	f7ff fbc3 	bl	800b13c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9b6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800b9b8:	1c73      	adds	r3, r6, #1
 800b9ba:	d113      	bne.n	800b9e4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9bc:	692b      	ldr	r3, [r5, #16]
 800b9be:	b90b      	cbnz	r3, 800b9c4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800b9c0:	2001      	movs	r0, #1
 800b9c2:	e00b      	b.n	800b9dc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9c4:	f105 0010 	add.w	r0, r5, #16
 800b9c8:	f000 fc3c 	bl	800c244 <xTaskRemoveFromEventList>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0f7      	beq.n	800b9c0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	d0f4      	beq.n	800b9c0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b9dc:	f387 8811 	msr	BASEPRI, r7
}
 800b9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b9e4:	3601      	adds	r6, #1
 800b9e6:	b276      	sxtb	r6, r6
 800b9e8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800b9ec:	e7e8      	b.n	800b9c0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	e7f4      	b.n	800b9dc <xQueueReceiveFromISR+0x88>
	...

0800b9f4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b9f4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9f6:	4a07      	ldr	r2, [pc, #28]	; (800ba14 <vQueueAddToRegistry+0x20>)
	{
 800b9f8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b9fa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800b9fe:	b92c      	cbnz	r4, 800ba0c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ba00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ba04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba08:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ba0a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	2b08      	cmp	r3, #8
 800ba10:	d1f3      	bne.n	800b9fa <vQueueAddToRegistry+0x6>
 800ba12:	e7fa      	b.n	800ba0a <vQueueAddToRegistry+0x16>
 800ba14:	2400ee30 	.word	0x2400ee30

0800ba18 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba18:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba1a:	4a08      	ldr	r2, [pc, #32]	; (800ba3c <vQueueUnregisterQueue+0x24>)
	{
 800ba1c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ba1e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ba22:	684c      	ldr	r4, [r1, #4]
 800ba24:	4284      	cmp	r4, r0
 800ba26:	d104      	bne.n	800ba32 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ba28:	2000      	movs	r0, #0
 800ba2a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ba2e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ba30:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba32:	3301      	adds	r3, #1
 800ba34:	2b08      	cmp	r3, #8
 800ba36:	d1f2      	bne.n	800ba1e <vQueueUnregisterQueue+0x6>
 800ba38:	e7fa      	b.n	800ba30 <vQueueUnregisterQueue+0x18>
 800ba3a:	bf00      	nop
 800ba3c:	2400ee30 	.word	0x2400ee30

0800ba40 <vQueueDelete>:
{
 800ba40:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800ba42:	4604      	mov	r4, r0
 800ba44:	b940      	cbnz	r0, 800ba58 <vQueueDelete+0x18>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	e7fe      	b.n	800ba56 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800ba58:	f7ff ffde 	bl	800ba18 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba5c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ba60:	b923      	cbnz	r3, 800ba6c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800ba62:	4620      	mov	r0, r4
}
 800ba64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800ba68:	f7ff b902 	b.w	800ac70 <vPortFree>
}
 800ba6c:	bd10      	pop	{r4, pc}

0800ba6e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba6e:	b570      	push	{r4, r5, r6, lr}
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ba76:	f7ff f9dd 	bl	800ae34 <vPortEnterCritical>
 800ba7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ba7e:	2bff      	cmp	r3, #255	; 0xff
 800ba80:	d102      	bne.n	800ba88 <vQueueWaitForMessageRestricted+0x1a>
 800ba82:	2300      	movs	r3, #0
 800ba84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ba88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ba8c:	2bff      	cmp	r3, #255	; 0xff
 800ba8e:	d102      	bne.n	800ba96 <vQueueWaitForMessageRestricted+0x28>
 800ba90:	2300      	movs	r3, #0
 800ba92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba96:	f7ff f9ed 	bl	800ae74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ba9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba9c:	b92b      	cbnz	r3, 800baaa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ba9e:	4632      	mov	r2, r6
 800baa0:	4629      	mov	r1, r5
 800baa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800baa6:	f000 fbaf 	bl	800c208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800baaa:	4620      	mov	r0, r4
	}
 800baac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800bab0:	f7ff bb59 	b.w	800b166 <prvUnlockQueue>

0800bab4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baba:	f7ff f9bb 	bl	800ae34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800babe:	4b2f      	ldr	r3, [pc, #188]	; (800bb7c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800bac0:	4e2f      	ldr	r6, [pc, #188]	; (800bb80 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	4f2f      	ldr	r7, [pc, #188]	; (800bb84 <prvAddNewTaskToReadyList+0xd0>)
 800bac6:	3201      	adds	r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800baca:	6835      	ldr	r5, [r6, #0]
 800bacc:	2d00      	cmp	r5, #0
 800bace:	d14a      	bne.n	800bb66 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bad0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d11f      	bne.n	800bb18 <prvAddNewTaskToReadyList+0x64>
 800bad8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bada:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800badc:	4640      	mov	r0, r8
 800bade:	f7ff f905 	bl	800acec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bae2:	f108 0814 	add.w	r8, r8, #20
 800bae6:	2d38      	cmp	r5, #56	; 0x38
 800bae8:	d1f7      	bne.n	800bada <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800baea:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800bbac <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800baee:	4d26      	ldr	r5, [pc, #152]	; (800bb88 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800baf0:	4640      	mov	r0, r8
 800baf2:	f7ff f8fb 	bl	800acec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800baf6:	4628      	mov	r0, r5
 800baf8:	f7ff f8f8 	bl	800acec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bafc:	4823      	ldr	r0, [pc, #140]	; (800bb8c <prvAddNewTaskToReadyList+0xd8>)
 800bafe:	f7ff f8f5 	bl	800acec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb02:	4823      	ldr	r0, [pc, #140]	; (800bb90 <prvAddNewTaskToReadyList+0xdc>)
 800bb04:	f7ff f8f2 	bl	800acec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb08:	4822      	ldr	r0, [pc, #136]	; (800bb94 <prvAddNewTaskToReadyList+0xe0>)
 800bb0a:	f7ff f8ef 	bl	800acec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb0e:	4b22      	ldr	r3, [pc, #136]	; (800bb98 <prvAddNewTaskToReadyList+0xe4>)
 800bb10:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb14:	4b21      	ldr	r3, [pc, #132]	; (800bb9c <prvAddNewTaskToReadyList+0xe8>)
 800bb16:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800bb18:	4a21      	ldr	r2, [pc, #132]	; (800bba0 <prvAddNewTaskToReadyList+0xec>)
 800bb1a:	6813      	ldr	r3, [r2, #0]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800bb20:	4a20      	ldr	r2, [pc, #128]	; (800bba4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bb22:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	d900      	bls.n	800bb2e <prvAddNewTaskToReadyList+0x7a>
 800bb2c:	6013      	str	r3, [r2, #0]
 800bb2e:	2014      	movs	r0, #20
 800bb30:	1d21      	adds	r1, r4, #4
 800bb32:	fb00 7003 	mla	r0, r0, r3, r7
 800bb36:	f7ff f8e7 	bl	800ad08 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800bb3a:	f7ff f99b 	bl	800ae74 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800bb3e:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <prvAddNewTaskToReadyList+0xf4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	b173      	cbz	r3, 800bb62 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb44:	6833      	ldr	r3, [r6, #0]
 800bb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d209      	bcs.n	800bb62 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800bb4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb56:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	f3bf 8f6f 	isb	sy
}
 800bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800bb66:	4b10      	ldr	r3, [pc, #64]	; (800bba8 <prvAddNewTaskToReadyList+0xf4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d1d4      	bne.n	800bb18 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb6e:	6833      	ldr	r3, [r6, #0]
 800bb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d8cf      	bhi.n	800bb18 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800bb78:	6034      	str	r4, [r6, #0]
 800bb7a:	e7cd      	b.n	800bb18 <prvAddNewTaskToReadyList+0x64>
 800bb7c:	2400f2dc 	.word	0x2400f2dc
 800bb80:	2400ee70 	.word	0x2400ee70
 800bb84:	2400ee7c 	.word	0x2400ee7c
 800bb88:	2400f304 	.word	0x2400f304
 800bb8c:	2400f324 	.word	0x2400f324
 800bb90:	2400f350 	.word	0x2400f350
 800bb94:	2400f33c 	.word	0x2400f33c
 800bb98:	2400ee74 	.word	0x2400ee74
 800bb9c:	2400ee78 	.word	0x2400ee78
 800bba0:	2400f2e8 	.word	0x2400f2e8
 800bba4:	2400f2ec 	.word	0x2400f2ec
 800bba8:	2400f338 	.word	0x2400f338
 800bbac:	2400f2f0 	.word	0x2400f2f0

0800bbb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bbb2:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800bbb4:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbb6:	4e15      	ldr	r6, [pc, #84]	; (800bc0c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800bbb8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800bbba:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbbc:	6830      	ldr	r0, [r6, #0]
 800bbbe:	3004      	adds	r0, #4
 800bbc0:	f7ff f8c5 	bl	800ad4e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbc4:	1c63      	adds	r3, r4, #1
 800bbc6:	d107      	bne.n	800bbd8 <prvAddCurrentTaskToDelayedList+0x28>
 800bbc8:	b137      	cbz	r7, 800bbd8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbca:	6831      	ldr	r1, [r6, #0]
 800bbcc:	4810      	ldr	r0, [pc, #64]	; (800bc10 <prvAddCurrentTaskToDelayedList+0x60>)
 800bbce:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbd4:	f7ff b898 	b.w	800ad08 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbd8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbda:	6833      	ldr	r3, [r6, #0]
 800bbdc:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbde:	d307      	bcc.n	800bbf0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbe0:	4b0c      	ldr	r3, [pc, #48]	; (800bc14 <prvAddCurrentTaskToDelayedList+0x64>)
 800bbe2:	6818      	ldr	r0, [r3, #0]
 800bbe4:	6831      	ldr	r1, [r6, #0]
}
 800bbe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbea:	3104      	adds	r1, #4
 800bbec:	f7ff b898 	b.w	800ad20 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf0:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <prvAddCurrentTaskToDelayedList+0x68>)
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	6831      	ldr	r1, [r6, #0]
 800bbf6:	3104      	adds	r1, #4
 800bbf8:	f7ff f892 	bl	800ad20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbfc:	4b07      	ldr	r3, [pc, #28]	; (800bc1c <prvAddCurrentTaskToDelayedList+0x6c>)
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	42a2      	cmp	r2, r4
 800bc02:	d900      	bls.n	800bc06 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800bc04:	601c      	str	r4, [r3, #0]
}
 800bc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc08:	2400f364 	.word	0x2400f364
 800bc0c:	2400ee70 	.word	0x2400ee70
 800bc10:	2400f33c 	.word	0x2400f33c
 800bc14:	2400ee78 	.word	0x2400ee78
 800bc18:	2400ee74 	.word	0x2400ee74
 800bc1c:	2400f318 	.word	0x2400f318

0800bc20 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc20:	4a06      	ldr	r2, [pc, #24]	; (800bc3c <prvResetNextTaskUnblockTime+0x1c>)
 800bc22:	6813      	ldr	r3, [r2, #0]
 800bc24:	6819      	ldr	r1, [r3, #0]
 800bc26:	4b06      	ldr	r3, [pc, #24]	; (800bc40 <prvResetNextTaskUnblockTime+0x20>)
 800bc28:	b919      	cbnz	r1, 800bc32 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc2e:	601a      	str	r2, [r3, #0]
}
 800bc30:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc32:	6812      	ldr	r2, [r2, #0]
 800bc34:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc36:	68d2      	ldr	r2, [r2, #12]
 800bc38:	6852      	ldr	r2, [r2, #4]
 800bc3a:	e7f8      	b.n	800bc2e <prvResetNextTaskUnblockTime+0xe>
 800bc3c:	2400ee74 	.word	0x2400ee74
 800bc40:	2400f318 	.word	0x2400f318

0800bc44 <prvDeleteTCB>:
	{
 800bc44:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc46:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800bc4a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc4c:	b93b      	cbnz	r3, 800bc5e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800bc4e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bc50:	f7ff f80e 	bl	800ac70 <vPortFree>
				vPortFree( pxTCB );
 800bc54:	4620      	mov	r0, r4
	}
 800bc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800bc5a:	f7ff b809 	b.w	800ac70 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d0f9      	beq.n	800bc56 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d008      	beq.n	800bc78 <prvDeleteTCB+0x34>
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	e7fe      	b.n	800bc76 <prvDeleteTCB+0x32>
	}
 800bc78:	bd10      	pop	{r4, pc}
	...

0800bc7c <prvIdleTask>:
{
 800bc7c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc7e:	4c14      	ldr	r4, [pc, #80]	; (800bcd0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc80:	4f14      	ldr	r7, [pc, #80]	; (800bcd4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800bc82:	4d15      	ldr	r5, [pc, #84]	; (800bcd8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	b983      	cbnz	r3, 800bcaa <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc88:	4b14      	ldr	r3, [pc, #80]	; (800bcdc <prvIdleTask+0x60>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d909      	bls.n	800bca4 <prvIdleTask+0x28>
				taskYIELD();
 800bc90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800bca4:	f7f4 fd38 	bl	8000718 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bca8:	e7eb      	b.n	800bc82 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800bcaa:	f7ff f8c3 	bl	800ae34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcb2:	1d30      	adds	r0, r6, #4
 800bcb4:	f7ff f84b 	bl	800ad4e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800bcc4:	f7ff f8d6 	bl	800ae74 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff ffbb 	bl	800bc44 <prvDeleteTCB>
 800bcce:	e7d9      	b.n	800bc84 <prvIdleTask+0x8>
 800bcd0:	2400f2e0 	.word	0x2400f2e0
 800bcd4:	2400f350 	.word	0x2400f350
 800bcd8:	2400f2dc 	.word	0x2400f2dc
 800bcdc:	2400ee7c 	.word	0x2400ee7c

0800bce0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bce4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bce8:	4606      	mov	r6, r0
 800bcea:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcec:	21a5      	movs	r1, #165	; 0xa5
 800bcee:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bcf0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcf2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bcf6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bcfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bcfc:	f012 face 	bl	801e29c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd00:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bd02:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd04:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800bd08:	b3b5      	cbz	r5, 800bd78 <prvInitialiseNewTask.constprop.0+0x98>
 800bd0a:	1e6b      	subs	r3, r5, #1
 800bd0c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bd10:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800bd16:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800bd1a:	b108      	cbz	r0, 800bd20 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd1c:	42ab      	cmp	r3, r5
 800bd1e:	d1f8      	bne.n	800bd12 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd20:	2300      	movs	r3, #0
 800bd22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd26:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800bd28:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd2c:	1d20      	adds	r0, r4, #4
 800bd2e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bd30:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800bd34:	bf28      	it	cs
 800bd36:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800bd38:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bd3a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd40:	f7fe ffdf 	bl	800ad02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd44:	f104 0018 	add.w	r0, r4, #24
 800bd48:	f7fe ffdb 	bl	800ad02 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800bd4c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd50:	463a      	mov	r2, r7
 800bd52:	4631      	mov	r1, r6
 800bd54:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd56:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd58:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd5a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800bd5c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd60:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bd64:	f7ff f842 	bl	800adec <pxPortInitialiseStack>
 800bd68:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800bd6a:	f1b8 0f00 	cmp.w	r8, #0
 800bd6e:	d001      	beq.n	800bd74 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bd70:	f8c8 4000 	str.w	r4, [r8]
}
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd78:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800bd7c:	e7d3      	b.n	800bd26 <prvInitialiseNewTask.constprop.0+0x46>

0800bd7e <xTaskCreateStatic>:
	{
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	b086      	sub	sp, #24
 800bd82:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800bd86:	b945      	cbnz	r5, 800bd9a <xTaskCreateStatic+0x1c>
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	e7fe      	b.n	800bd98 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800bd9a:	b944      	cbnz	r4, 800bdae <xTaskCreateStatic+0x30>
 800bd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	e7fe      	b.n	800bdac <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800bdae:	2660      	movs	r6, #96	; 0x60
 800bdb0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bdb2:	9e05      	ldr	r6, [sp, #20]
 800bdb4:	2e60      	cmp	r6, #96	; 0x60
 800bdb6:	d008      	beq.n	800bdca <xTaskCreateStatic+0x4c>
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	e7fe      	b.n	800bdc8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bdca:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdcc:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bdce:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bdd0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bdd4:	ad04      	add	r5, sp, #16
 800bdd6:	9402      	str	r4, [sp, #8]
 800bdd8:	9501      	str	r5, [sp, #4]
 800bdda:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bddc:	9500      	str	r5, [sp, #0]
 800bdde:	f7ff ff7f 	bl	800bce0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bde2:	4620      	mov	r0, r4
 800bde4:	f7ff fe66 	bl	800bab4 <prvAddNewTaskToReadyList>
	}
 800bde8:	9804      	ldr	r0, [sp, #16]
 800bdea:	b006      	add	sp, #24
 800bdec:	bd70      	pop	{r4, r5, r6, pc}

0800bdee <xTaskCreate>:
	{
 800bdee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdf2:	4607      	mov	r7, r0
 800bdf4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdf6:	0090      	lsls	r0, r2, #2
	{
 800bdf8:	4688      	mov	r8, r1
 800bdfa:	4616      	mov	r6, r2
 800bdfc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdfe:	f7fe fe9f 	bl	800ab40 <pvPortMalloc>
			if( pxStack != NULL )
 800be02:	4605      	mov	r5, r0
 800be04:	b1e8      	cbz	r0, 800be42 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be06:	2060      	movs	r0, #96	; 0x60
 800be08:	f7fe fe9a 	bl	800ab40 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800be0c:	4604      	mov	r4, r0
 800be0e:	b1a8      	cbz	r0, 800be3c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be10:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800be12:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be14:	4632      	mov	r2, r6
 800be16:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be18:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1e:	9002      	str	r0, [sp, #8]
 800be20:	4638      	mov	r0, r7
 800be22:	9301      	str	r3, [sp, #4]
 800be24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	464b      	mov	r3, r9
 800be2a:	f7ff ff59 	bl	800bce0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be2e:	4620      	mov	r0, r4
 800be30:	f7ff fe40 	bl	800bab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be34:	2001      	movs	r0, #1
	}
 800be36:	b005      	add	sp, #20
 800be38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800be3c:	4628      	mov	r0, r5
 800be3e:	f7fe ff17 	bl	800ac70 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be42:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800be46:	e7f6      	b.n	800be36 <xTaskCreate+0x48>

0800be48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800be48:	4a02      	ldr	r2, [pc, #8]	; (800be54 <vTaskSuspendAll+0xc>)
 800be4a:	6813      	ldr	r3, [r2, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	6013      	str	r3, [r2, #0]
}
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	2400f2e4 	.word	0x2400f2e4

0800be58 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800be58:	4b01      	ldr	r3, [pc, #4]	; (800be60 <xTaskGetTickCount+0x8>)
 800be5a:	6818      	ldr	r0, [r3, #0]
}
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	2400f364 	.word	0x2400f364

0800be64 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be64:	4b3f      	ldr	r3, [pc, #252]	; (800bf64 <xTaskIncrementTick+0x100>)
 800be66:	681b      	ldr	r3, [r3, #0]
{
 800be68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d172      	bne.n	800bf56 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be70:	4b3d      	ldr	r3, [pc, #244]	; (800bf68 <xTaskIncrementTick+0x104>)
 800be72:	681d      	ldr	r5, [r3, #0]
 800be74:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800be76:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be78:	b9bd      	cbnz	r5, 800beaa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800be7a:	4b3c      	ldr	r3, [pc, #240]	; (800bf6c <xTaskIncrementTick+0x108>)
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	6812      	ldr	r2, [r2, #0]
 800be80:	b142      	cbz	r2, 800be94 <xTaskIncrementTick+0x30>
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	e7fe      	b.n	800be92 <xTaskIncrementTick+0x2e>
 800be94:	4a36      	ldr	r2, [pc, #216]	; (800bf70 <xTaskIncrementTick+0x10c>)
 800be96:	6819      	ldr	r1, [r3, #0]
 800be98:	6810      	ldr	r0, [r2, #0]
 800be9a:	6018      	str	r0, [r3, #0]
 800be9c:	6011      	str	r1, [r2, #0]
 800be9e:	4a35      	ldr	r2, [pc, #212]	; (800bf74 <xTaskIncrementTick+0x110>)
 800bea0:	6813      	ldr	r3, [r2, #0]
 800bea2:	3301      	adds	r3, #1
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	f7ff febb 	bl	800bc20 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beaa:	4e33      	ldr	r6, [pc, #204]	; (800bf78 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800beac:	2400      	movs	r4, #0
 800beae:	4f33      	ldr	r7, [pc, #204]	; (800bf7c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beb0:	6833      	ldr	r3, [r6, #0]
 800beb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800bf88 <xTaskIncrementTick+0x124>
 800beb6:	429d      	cmp	r5, r3
 800beb8:	d211      	bcs.n	800bede <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800beba:	f8d8 3000 	ldr.w	r3, [r8]
 800bebe:	2214      	movs	r2, #20
 800bec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec2:	4353      	muls	r3, r2
 800bec4:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800bec6:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800bec8:	4b2d      	ldr	r3, [pc, #180]	; (800bf80 <xTaskIncrementTick+0x11c>)
 800beca:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800becc:	bf28      	it	cs
 800bece:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	bf18      	it	ne
 800bed4:	2401      	movne	r4, #1
}
 800bed6:	4620      	mov	r0, r4
 800bed8:	b003      	add	sp, #12
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bede:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bf6c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800bee2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800bf8c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bee6:	f8d9 3000 	ldr.w	r3, [r9]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	b91b      	cbnz	r3, 800bef6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beee:	f04f 33ff 	mov.w	r3, #4294967295
 800bef2:	6033      	str	r3, [r6, #0]
					break;
 800bef4:	e7e1      	b.n	800beba <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef6:	f8d9 3000 	ldr.w	r3, [r9]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf00:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800bf04:	4295      	cmp	r5, r2
 800bf06:	d201      	bcs.n	800bf0c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800bf08:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf0a:	e7d6      	b.n	800beba <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf0c:	f10b 0104 	add.w	r1, fp, #4
 800bf10:	4608      	mov	r0, r1
 800bf12:	9101      	str	r1, [sp, #4]
 800bf14:	f7fe ff1b 	bl	800ad4e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf18:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800bf1c:	9901      	ldr	r1, [sp, #4]
 800bf1e:	b122      	cbz	r2, 800bf2a <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf20:	f10b 0018 	add.w	r0, fp, #24
 800bf24:	f7fe ff13 	bl	800ad4e <uxListRemove>
 800bf28:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800bf2a:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800bf2e:	f8da 2000 	ldr.w	r2, [sl]
 800bf32:	4290      	cmp	r0, r2
 800bf34:	d901      	bls.n	800bf3a <xTaskIncrementTick+0xd6>
 800bf36:	f8ca 0000 	str.w	r0, [sl]
 800bf3a:	2314      	movs	r3, #20
 800bf3c:	fb03 7000 	mla	r0, r3, r0, r7
 800bf40:	f7fe fee2 	bl	800ad08 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf44:	f8d8 1000 	ldr.w	r1, [r8]
 800bf48:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800bf4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	bf28      	it	cs
 800bf52:	2401      	movcs	r4, #1
 800bf54:	e7c7      	b.n	800bee6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800bf56:	4a0b      	ldr	r2, [pc, #44]	; (800bf84 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800bf58:	2400      	movs	r4, #0
		++xPendedTicks;
 800bf5a:	6813      	ldr	r3, [r2, #0]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800bf60:	e7b9      	b.n	800bed6 <xTaskIncrementTick+0x72>
 800bf62:	bf00      	nop
 800bf64:	2400f2e4 	.word	0x2400f2e4
 800bf68:	2400f364 	.word	0x2400f364
 800bf6c:	2400ee74 	.word	0x2400ee74
 800bf70:	2400ee78 	.word	0x2400ee78
 800bf74:	2400f31c 	.word	0x2400f31c
 800bf78:	2400f318 	.word	0x2400f318
 800bf7c:	2400ee7c 	.word	0x2400ee7c
 800bf80:	2400f368 	.word	0x2400f368
 800bf84:	2400f320 	.word	0x2400f320
 800bf88:	2400ee70 	.word	0x2400ee70
 800bf8c:	2400f2ec 	.word	0x2400f2ec

0800bf90 <xTaskResumeAll>:
{
 800bf90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800bf92:	4c31      	ldr	r4, [pc, #196]	; (800c058 <xTaskResumeAll+0xc8>)
 800bf94:	6823      	ldr	r3, [r4, #0]
 800bf96:	b943      	cbnz	r3, 800bfaa <xTaskResumeAll+0x1a>
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	f383 8811 	msr	BASEPRI, r3
 800bfa0:	f3bf 8f6f 	isb	sy
 800bfa4:	f3bf 8f4f 	dsb	sy
 800bfa8:	e7fe      	b.n	800bfa8 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800bfaa:	f7fe ff43 	bl	800ae34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfb4:	6824      	ldr	r4, [r4, #0]
 800bfb6:	b12c      	cbz	r4, 800bfc4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800bfb8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bfba:	f7fe ff5b 	bl	800ae74 <vPortExitCritical>
}
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	b003      	add	sp, #12
 800bfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bfc4:	4b25      	ldr	r3, [pc, #148]	; (800c05c <xTaskResumeAll+0xcc>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d0f5      	beq.n	800bfb8 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bfcc:	4d24      	ldr	r5, [pc, #144]	; (800c060 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800bfce:	4e25      	ldr	r6, [pc, #148]	; (800c064 <xTaskResumeAll+0xd4>)
 800bfd0:	4f25      	ldr	r7, [pc, #148]	; (800c068 <xTaskResumeAll+0xd8>)
 800bfd2:	e01e      	b.n	800c012 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfd4:	68eb      	ldr	r3, [r5, #12]
 800bfd6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfd8:	f104 0018 	add.w	r0, r4, #24
 800bfdc:	f7fe feb7 	bl	800ad4e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfe0:	1d21      	adds	r1, r4, #4
 800bfe2:	4608      	mov	r0, r1
 800bfe4:	9101      	str	r1, [sp, #4]
 800bfe6:	f7fe feb2 	bl	800ad4e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bfec:	6832      	ldr	r2, [r6, #0]
 800bfee:	9901      	ldr	r1, [sp, #4]
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d900      	bls.n	800bff6 <xTaskResumeAll+0x66>
 800bff4:	6033      	str	r3, [r6, #0]
 800bff6:	2014      	movs	r0, #20
 800bff8:	fb00 7003 	mla	r0, r0, r3, r7
 800bffc:	f7fe fe84 	bl	800ad08 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c000:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <xTaskResumeAll+0xdc>)
 800c002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c008:	429a      	cmp	r2, r3
 800c00a:	d302      	bcc.n	800c012 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800c00c:	4b18      	ldr	r3, [pc, #96]	; (800c070 <xTaskResumeAll+0xe0>)
 800c00e:	2201      	movs	r2, #1
 800c010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c012:	682b      	ldr	r3, [r5, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1dd      	bne.n	800bfd4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800c018:	b10c      	cbz	r4, 800c01e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800c01a:	f7ff fe01 	bl	800bc20 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c01e:	4d15      	ldr	r5, [pc, #84]	; (800c074 <xTaskResumeAll+0xe4>)
 800c020:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c022:	b144      	cbz	r4, 800c036 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800c024:	4e12      	ldr	r6, [pc, #72]	; (800c070 <xTaskResumeAll+0xe0>)
 800c026:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c028:	f7ff ff1c 	bl	800be64 <xTaskIncrementTick>
 800c02c:	b100      	cbz	r0, 800c030 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800c02e:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c030:	3c01      	subs	r4, #1
 800c032:	d1f9      	bne.n	800c028 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800c034:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c036:	4b0e      	ldr	r3, [pc, #56]	; (800c070 <xTaskResumeAll+0xe0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0bc      	beq.n	800bfb8 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800c03e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c046:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c052:	2401      	movs	r4, #1
 800c054:	e7b1      	b.n	800bfba <xTaskResumeAll+0x2a>
 800c056:	bf00      	nop
 800c058:	2400f2e4 	.word	0x2400f2e4
 800c05c:	2400f2dc 	.word	0x2400f2dc
 800c060:	2400f324 	.word	0x2400f324
 800c064:	2400f2ec 	.word	0x2400f2ec
 800c068:	2400ee7c 	.word	0x2400ee7c
 800c06c:	2400ee70 	.word	0x2400ee70
 800c070:	2400f368 	.word	0x2400f368
 800c074:	2400f320 	.word	0x2400f320

0800c078 <vTaskSetApplicationTaskTag>:
	{
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c07c:	4604      	mov	r4, r0
 800c07e:	b908      	cbnz	r0, 800c084 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c080:	4b04      	ldr	r3, [pc, #16]	; (800c094 <vTaskSetApplicationTaskTag+0x1c>)
 800c082:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c084:	f7fe fed6 	bl	800ae34 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c088:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800c08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c08e:	f7fe bef1 	b.w	800ae74 <vPortExitCritical>
 800c092:	bf00      	nop
 800c094:	2400ee70 	.word	0x2400ee70

0800c098 <xTaskCallApplicationTaskHook>:
	{
 800c098:	4603      	mov	r3, r0
 800c09a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c09c:	b90b      	cbnz	r3, 800c0a2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c09e:	4b03      	ldr	r3, [pc, #12]	; (800c0ac <xTaskCallApplicationTaskHook+0x14>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a4:	b103      	cbz	r3, 800c0a8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c0a6:	4718      	bx	r3
	}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	4770      	bx	lr
 800c0ac:	2400ee70 	.word	0x2400ee70

0800c0b0 <vTaskStartScheduler>:
{
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0b4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0b6:	aa07      	add	r2, sp, #28
 800c0b8:	a906      	add	r1, sp, #24
 800c0ba:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0bc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0c0:	f7fe fd02 	bl	800aac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c0c4:	9b05      	ldr	r3, [sp, #20]
 800c0c6:	9a07      	ldr	r2, [sp, #28]
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	4919      	ldr	r1, [pc, #100]	; (800c134 <vTaskStartScheduler+0x84>)
 800c0ce:	481a      	ldr	r0, [pc, #104]	; (800c138 <vTaskStartScheduler+0x88>)
 800c0d0:	e9cd 4300 	strd	r4, r3, [sp]
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	f7ff fe52 	bl	800bd7e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c0da:	b340      	cbz	r0, 800c12e <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800c0dc:	f000 fa88 	bl	800c5f0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c0e0:	2801      	cmp	r0, #1
 800c0e2:	d119      	bne.n	800c118 <vTaskStartScheduler+0x68>
 800c0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f8:	4b10      	ldr	r3, [pc, #64]	; (800c13c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800c0fa:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0fe:	4b10      	ldr	r3, [pc, #64]	; (800c140 <vTaskStartScheduler+0x90>)
 800c100:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c102:	4b10      	ldr	r3, [pc, #64]	; (800c144 <vTaskStartScheduler+0x94>)
 800c104:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c106:	4b10      	ldr	r3, [pc, #64]	; (800c148 <vTaskStartScheduler+0x98>)
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f7ff ffc5 	bl	800c098 <xTaskCallApplicationTaskHook>
}
 800c10e:	b008      	add	sp, #32
 800c110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c114:	f7fe bf1e 	b.w	800af54 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c118:	3001      	adds	r0, #1
 800c11a:	d108      	bne.n	800c12e <vTaskStartScheduler+0x7e>
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	e7fe      	b.n	800c12c <vTaskStartScheduler+0x7c>
}
 800c12e:	b008      	add	sp, #32
 800c130:	bd10      	pop	{r4, pc}
 800c132:	bf00      	nop
 800c134:	08021b88 	.word	0x08021b88
 800c138:	0800bc7d 	.word	0x0800bc7d
 800c13c:	2400f318 	.word	0x2400f318
 800c140:	2400f338 	.word	0x2400f338
 800c144:	2400f364 	.word	0x2400f364
 800c148:	2400ee70 	.word	0x2400ee70

0800c14c <vTaskSwitchContext>:
{
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c14e:	4b1c      	ldr	r3, [pc, #112]	; (800c1c0 <vTaskSwitchContext+0x74>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <vTaskSwitchContext+0x78>)
 800c154:	b112      	cbz	r2, 800c15c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c156:	2201      	movs	r2, #1
 800c158:	601a      	str	r2, [r3, #0]
}
 800c15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c15c:	4c1a      	ldr	r4, [pc, #104]	; (800c1c8 <vTaskSwitchContext+0x7c>)
 800c15e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c160:	4e1a      	ldr	r6, [pc, #104]	; (800c1cc <vTaskSwitchContext+0x80>)
 800c162:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800c164:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c166:	6820      	ldr	r0, [r4, #0]
 800c168:	f7ff ff96 	bl	800c098 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c16c:	6832      	ldr	r2, [r6, #0]
 800c16e:	4918      	ldr	r1, [pc, #96]	; (800c1d0 <vTaskSwitchContext+0x84>)
 800c170:	fb07 f302 	mul.w	r3, r7, r2
 800c174:	58cd      	ldr	r5, [r1, r3]
 800c176:	18c8      	adds	r0, r1, r3
 800c178:	b1ad      	cbz	r5, 800c1a6 <vTaskSwitchContext+0x5a>
 800c17a:	6845      	ldr	r5, [r0, #4]
 800c17c:	3308      	adds	r3, #8
 800c17e:	686d      	ldr	r5, [r5, #4]
 800c180:	440b      	add	r3, r1
 800c182:	429d      	cmp	r5, r3
 800c184:	6045      	str	r5, [r0, #4]
 800c186:	bf04      	itt	eq
 800c188:	686b      	ldreq	r3, [r5, #4]
 800c18a:	6043      	streq	r3, [r0, #4]
 800c18c:	2314      	movs	r3, #20
 800c18e:	fb03 1102 	mla	r1, r3, r2, r1
 800c192:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800c194:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800c19c:	6820      	ldr	r0, [r4, #0]
}
 800c19e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800c1a2:	f7ff bf79 	b.w	800c098 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a6:	b942      	cbnz	r2, 800c1ba <vTaskSwitchContext+0x6e>
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	e7fe      	b.n	800c1b8 <vTaskSwitchContext+0x6c>
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	e7d8      	b.n	800c170 <vTaskSwitchContext+0x24>
 800c1be:	bf00      	nop
 800c1c0:	2400f2e4 	.word	0x2400f2e4
 800c1c4:	2400f368 	.word	0x2400f368
 800c1c8:	2400ee70 	.word	0x2400ee70
 800c1cc:	2400f2ec 	.word	0x2400f2ec
 800c1d0:	2400ee7c 	.word	0x2400ee7c

0800c1d4 <vTaskPlaceOnEventList>:
{
 800c1d4:	b510      	push	{r4, lr}
 800c1d6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800c1d8:	b940      	cbnz	r0, 800c1ec <vTaskPlaceOnEventList+0x18>
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	e7fe      	b.n	800c1ea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c1ec:	4b05      	ldr	r3, [pc, #20]	; (800c204 <vTaskPlaceOnEventList+0x30>)
 800c1ee:	6819      	ldr	r1, [r3, #0]
 800c1f0:	3118      	adds	r1, #24
 800c1f2:	f7fe fd95 	bl	800ad20 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	2101      	movs	r1, #1
}
 800c1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1fe:	f7ff bcd7 	b.w	800bbb0 <prvAddCurrentTaskToDelayedList>
 800c202:	bf00      	nop
 800c204:	2400ee70 	.word	0x2400ee70

0800c208 <vTaskPlaceOnEventListRestricted>:
	{
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	460d      	mov	r5, r1
 800c20c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800c20e:	b940      	cbnz	r0, 800c222 <vTaskPlaceOnEventListRestricted+0x1a>
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	e7fe      	b.n	800c220 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c222:	4b07      	ldr	r3, [pc, #28]	; (800c240 <vTaskPlaceOnEventListRestricted+0x38>)
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	3118      	adds	r1, #24
 800c228:	f7fe fd6e 	bl	800ad08 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800c22c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c22e:	4621      	mov	r1, r4
 800c230:	bf0c      	ite	eq
 800c232:	4628      	moveq	r0, r5
 800c234:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800c238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c23c:	f7ff bcb8 	b.w	800bbb0 <prvAddCurrentTaskToDelayedList>
 800c240:	2400ee70 	.word	0x2400ee70

0800c244 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c244:	68c3      	ldr	r3, [r0, #12]
{
 800c246:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c248:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c24a:	b944      	cbnz	r4, 800c25e <xTaskRemoveFromEventList+0x1a>
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	e7fe      	b.n	800c25c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c25e:	f104 0118 	add.w	r1, r4, #24
 800c262:	4608      	mov	r0, r1
 800c264:	9101      	str	r1, [sp, #4]
 800c266:	f7fe fd72 	bl	800ad4e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c26a:	4b12      	ldr	r3, [pc, #72]	; (800c2b4 <xTaskRemoveFromEventList+0x70>)
 800c26c:	9901      	ldr	r1, [sp, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	b9e3      	cbnz	r3, 800c2ac <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c272:	1d21      	adds	r1, r4, #4
 800c274:	4608      	mov	r0, r1
 800c276:	9101      	str	r1, [sp, #4]
 800c278:	f7fe fd69 	bl	800ad4e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c27c:	4a0e      	ldr	r2, [pc, #56]	; (800c2b8 <xTaskRemoveFromEventList+0x74>)
 800c27e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c280:	6810      	ldr	r0, [r2, #0]
 800c282:	9901      	ldr	r1, [sp, #4]
 800c284:	4283      	cmp	r3, r0
 800c286:	d900      	bls.n	800c28a <xTaskRemoveFromEventList+0x46>
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	4a0c      	ldr	r2, [pc, #48]	; (800c2bc <xTaskRemoveFromEventList+0x78>)
 800c28c:	2014      	movs	r0, #20
 800c28e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c292:	f7fe fd39 	bl	800ad08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c296:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <xTaskRemoveFromEventList+0x7c>)
 800c298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d906      	bls.n	800c2b0 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800c2a2:	2001      	movs	r0, #1
 800c2a4:	4b07      	ldr	r3, [pc, #28]	; (800c2c4 <xTaskRemoveFromEventList+0x80>)
 800c2a6:	6018      	str	r0, [r3, #0]
}
 800c2a8:	b002      	add	sp, #8
 800c2aa:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c2ac:	4806      	ldr	r0, [pc, #24]	; (800c2c8 <xTaskRemoveFromEventList+0x84>)
 800c2ae:	e7f0      	b.n	800c292 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800c2b0:	2000      	movs	r0, #0
	return xReturn;
 800c2b2:	e7f9      	b.n	800c2a8 <xTaskRemoveFromEventList+0x64>
 800c2b4:	2400f2e4 	.word	0x2400f2e4
 800c2b8:	2400f2ec 	.word	0x2400f2ec
 800c2bc:	2400ee7c 	.word	0x2400ee7c
 800c2c0:	2400ee70 	.word	0x2400ee70
 800c2c4:	2400f368 	.word	0x2400f368
 800c2c8:	2400f324 	.word	0x2400f324

0800c2cc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c2cc:	4b03      	ldr	r3, [pc, #12]	; (800c2dc <vTaskInternalSetTimeOutState+0x10>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c2d2:	4b03      	ldr	r3, [pc, #12]	; (800c2e0 <vTaskInternalSetTimeOutState+0x14>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6043      	str	r3, [r0, #4]
}
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	2400f31c 	.word	0x2400f31c
 800c2e0:	2400f364 	.word	0x2400f364

0800c2e4 <xTaskCheckForTimeOut>:
{
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	b940      	cbnz	r0, 800c2fe <xTaskCheckForTimeOut+0x1a>
 800c2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f0:	f383 8811 	msr	BASEPRI, r3
 800c2f4:	f3bf 8f6f 	isb	sy
 800c2f8:	f3bf 8f4f 	dsb	sy
 800c2fc:	e7fe      	b.n	800c2fc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800c2fe:	b941      	cbnz	r1, 800c312 <xTaskCheckForTimeOut+0x2e>
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	e7fe      	b.n	800c310 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800c312:	f7fe fd8f 	bl	800ae34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c316:	4b0f      	ldr	r3, [pc, #60]	; (800c354 <xTaskCheckForTimeOut+0x70>)
 800c318:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	d010      	beq.n	800c342 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c320:	480d      	ldr	r0, [pc, #52]	; (800c358 <xTaskCheckForTimeOut+0x74>)
 800c322:	682e      	ldr	r6, [r5, #0]
 800c324:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c326:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c328:	4286      	cmp	r6, r0
 800c32a:	d001      	beq.n	800c330 <xTaskCheckForTimeOut+0x4c>
 800c32c:	428a      	cmp	r2, r1
 800c32e:	d90f      	bls.n	800c350 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c330:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c332:	4283      	cmp	r3, r0
 800c334:	d90a      	bls.n	800c34c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800c336:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c338:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800c33a:	4413      	add	r3, r2
 800c33c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c33e:	f7ff ffc5 	bl	800c2cc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800c342:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c344:	f7fe fd96 	bl	800ae74 <vPortExitCritical>
}
 800c348:	4620      	mov	r0, r4
 800c34a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800c350:	2401      	movs	r4, #1
 800c352:	e7f7      	b.n	800c344 <xTaskCheckForTimeOut+0x60>
 800c354:	2400f364 	.word	0x2400f364
 800c358:	2400f31c 	.word	0x2400f31c

0800c35c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c35c:	4b01      	ldr	r3, [pc, #4]	; (800c364 <vTaskMissedYield+0x8>)
 800c35e:	2201      	movs	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
}
 800c362:	4770      	bx	lr
 800c364:	2400f368 	.word	0x2400f368

0800c368 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c368:	4b05      	ldr	r3, [pc, #20]	; (800c380 <xTaskGetSchedulerState+0x18>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	b133      	cbz	r3, 800c37c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c36e:	4b05      	ldr	r3, [pc, #20]	; (800c384 <xTaskGetSchedulerState+0x1c>)
 800c370:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800c372:	2b00      	cmp	r3, #0
 800c374:	bf0c      	ite	eq
 800c376:	2002      	moveq	r0, #2
 800c378:	2000      	movne	r0, #0
 800c37a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c37c:	2001      	movs	r0, #1
	}
 800c37e:	4770      	bx	lr
 800c380:	2400f338 	.word	0x2400f338
 800c384:	2400f2e4 	.word	0x2400f2e4

0800c388 <xTaskPriorityInherit>:
	{
 800c388:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c38a:	4604      	mov	r4, r0
 800c38c:	b340      	cbz	r0, 800c3e0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c38e:	4d1b      	ldr	r5, [pc, #108]	; (800c3fc <xTaskPriorityInherit+0x74>)
 800c390:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c392:	682a      	ldr	r2, [r5, #0]
 800c394:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c396:	4293      	cmp	r3, r2
 800c398:	d228      	bcs.n	800c3ec <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c39a:	6982      	ldr	r2, [r0, #24]
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	db04      	blt.n	800c3aa <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3a0:	682a      	ldr	r2, [r5, #0]
 800c3a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c3a4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c3a8:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c3aa:	2214      	movs	r2, #20
 800c3ac:	4e14      	ldr	r6, [pc, #80]	; (800c400 <xTaskPriorityInherit+0x78>)
 800c3ae:	fb02 6303 	mla	r3, r2, r3, r6
 800c3b2:	6962      	ldr	r2, [r4, #20]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d115      	bne.n	800c3e4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3b8:	1d21      	adds	r1, r4, #4
 800c3ba:	4608      	mov	r0, r1
 800c3bc:	9101      	str	r1, [sp, #4]
 800c3be:	f7fe fcc6 	bl	800ad4e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3c2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3c4:	4a0f      	ldr	r2, [pc, #60]	; (800c404 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3c8:	6810      	ldr	r0, [r2, #0]
 800c3ca:	9901      	ldr	r1, [sp, #4]
 800c3cc:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3ce:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c3d0:	d900      	bls.n	800c3d4 <xTaskPriorityInherit+0x4c>
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	2014      	movs	r0, #20
 800c3d6:	fb00 6003 	mla	r0, r0, r3, r6
 800c3da:	f7fe fc95 	bl	800ad08 <vListInsertEnd>
				xReturn = pdTRUE;
 800c3de:	2001      	movs	r0, #1
	}
 800c3e0:	b002      	add	sp, #8
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c3e4:	682b      	ldr	r3, [r5, #0]
 800c3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3ea:	e7f8      	b.n	800c3de <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c3ec:	682b      	ldr	r3, [r5, #0]
 800c3ee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c3f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c3f2:	42a0      	cmp	r0, r4
 800c3f4:	bf2c      	ite	cs
 800c3f6:	2000      	movcs	r0, #0
 800c3f8:	2001      	movcc	r0, #1
 800c3fa:	e7f1      	b.n	800c3e0 <xTaskPriorityInherit+0x58>
 800c3fc:	2400ee70 	.word	0x2400ee70
 800c400:	2400ee7c 	.word	0x2400ee7c
 800c404:	2400f2ec 	.word	0x2400f2ec

0800c408 <xTaskPriorityDisinherit>:
	{
 800c408:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800c40a:	b910      	cbnz	r0, 800c412 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800c40c:	2000      	movs	r0, #0
	}
 800c40e:	b002      	add	sp, #8
 800c410:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800c412:	4b1c      	ldr	r3, [pc, #112]	; (800c484 <xTaskPriorityDisinherit+0x7c>)
 800c414:	681c      	ldr	r4, [r3, #0]
 800c416:	4284      	cmp	r4, r0
 800c418:	d008      	beq.n	800c42c <xTaskPriorityDisinherit+0x24>
 800c41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	e7fe      	b.n	800c42a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800c42c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c42e:	b943      	cbnz	r3, 800c442 <xTaskPriorityDisinherit+0x3a>
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	e7fe      	b.n	800c440 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c442:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800c444:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c446:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c448:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c44a:	4291      	cmp	r1, r2
 800c44c:	d0de      	beq.n	800c40c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1dc      	bne.n	800c40c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c452:	1d21      	adds	r1, r4, #4
 800c454:	4608      	mov	r0, r1
 800c456:	9101      	str	r1, [sp, #4]
 800c458:	f7fe fc79 	bl	800ad4e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c45c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800c45e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c464:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c466:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c468:	4a07      	ldr	r2, [pc, #28]	; (800c488 <xTaskPriorityDisinherit+0x80>)
 800c46a:	6810      	ldr	r0, [r2, #0]
 800c46c:	4283      	cmp	r3, r0
 800c46e:	d900      	bls.n	800c472 <xTaskPriorityDisinherit+0x6a>
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	4a06      	ldr	r2, [pc, #24]	; (800c48c <xTaskPriorityDisinherit+0x84>)
 800c474:	2014      	movs	r0, #20
 800c476:	fb00 2003 	mla	r0, r0, r3, r2
 800c47a:	f7fe fc45 	bl	800ad08 <vListInsertEnd>
					xReturn = pdTRUE;
 800c47e:	2001      	movs	r0, #1
		return xReturn;
 800c480:	e7c5      	b.n	800c40e <xTaskPriorityDisinherit+0x6>
 800c482:	bf00      	nop
 800c484:	2400ee70 	.word	0x2400ee70
 800c488:	2400f2ec 	.word	0x2400f2ec
 800c48c:	2400ee7c 	.word	0x2400ee7c

0800c490 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c490:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800c492:	4604      	mov	r4, r0
 800c494:	2800      	cmp	r0, #0
 800c496:	d044      	beq.n	800c522 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800c498:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c49a:	b942      	cbnz	r2, 800c4ae <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	e7fe      	b.n	800c4ac <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c4ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	bf38      	it	cc
 800c4b4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c4b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c4b8:	428b      	cmp	r3, r1
 800c4ba:	d032      	beq.n	800c522 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c4bc:	2a01      	cmp	r2, #1
 800c4be:	d130      	bne.n	800c522 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800c4c0:	4a19      	ldr	r2, [pc, #100]	; (800c528 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	4282      	cmp	r2, r0
 800c4c6:	d108      	bne.n	800c4da <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	e7fe      	b.n	800c4d8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4da:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4dc:	4d13      	ldr	r5, [pc, #76]	; (800c52c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4de:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4e0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c4e4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4e6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4ea:	bfa8      	it	ge
 800c4ec:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4f0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4f2:	bfa8      	it	ge
 800c4f4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d113      	bne.n	800c522 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4fa:	1d01      	adds	r1, r0, #4
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	9101      	str	r1, [sp, #4]
 800c500:	f7fe fc25 	bl	800ad4e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c504:	4a0a      	ldr	r2, [pc, #40]	; (800c530 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c506:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c508:	6810      	ldr	r0, [r2, #0]
 800c50a:	9901      	ldr	r1, [sp, #4]
 800c50c:	4283      	cmp	r3, r0
 800c50e:	d900      	bls.n	800c512 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	2014      	movs	r0, #20
 800c514:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c518:	b003      	add	sp, #12
 800c51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c51e:	f7fe bbf3 	b.w	800ad08 <vListInsertEnd>
	}
 800c522:	b003      	add	sp, #12
 800c524:	bd30      	pop	{r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	2400ee70 	.word	0x2400ee70
 800c52c:	2400ee7c 	.word	0x2400ee7c
 800c530:	2400f2ec 	.word	0x2400f2ec

0800c534 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c534:	4b04      	ldr	r3, [pc, #16]	; (800c548 <pvTaskIncrementMutexHeldCount+0x14>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	b11a      	cbz	r2, 800c542 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c53a:	6819      	ldr	r1, [r3, #0]
 800c53c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c53e:	3201      	adds	r2, #1
 800c540:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c542:	6818      	ldr	r0, [r3, #0]
	}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2400ee70 	.word	0x2400ee70

0800c54c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c54e:	4c11      	ldr	r4, [pc, #68]	; (800c594 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c550:	f7fe fc70 	bl	800ae34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c554:	6825      	ldr	r5, [r4, #0]
 800c556:	b9bd      	cbnz	r5, 800c588 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c558:	4f0f      	ldr	r7, [pc, #60]	; (800c598 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c55a:	4e10      	ldr	r6, [pc, #64]	; (800c59c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c55c:	4638      	mov	r0, r7
 800c55e:	f7fe fbc5 	bl	800acec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c562:	4630      	mov	r0, r6
 800c564:	f7fe fbc2 	bl	800acec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c568:	4b0d      	ldr	r3, [pc, #52]	; (800c5a0 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c56a:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <prvCheckForValidListAndQueue+0x58>)
 800c56c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c56e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c570:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c572:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <prvCheckForValidListAndQueue+0x5c>)
 800c574:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <prvCheckForValidListAndQueue+0x60>)
 800c578:	9500      	str	r5, [sp, #0]
 800c57a:	f7fe fe6b 	bl	800b254 <xQueueGenericCreateStatic>
 800c57e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c580:	b110      	cbz	r0, 800c588 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c582:	490b      	ldr	r1, [pc, #44]	; (800c5b0 <prvCheckForValidListAndQueue+0x64>)
 800c584:	f7ff fa36 	bl	800b9f4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c588:	b003      	add	sp, #12
 800c58a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c58e:	f7fe bc71 	b.w	800ae74 <vPortExitCritical>
 800c592:	bf00      	nop
 800c594:	2400f490 	.word	0x2400f490
 800c598:	2400f414 	.word	0x2400f414
 800c59c:	2400f428 	.word	0x2400f428
 800c5a0:	2400f36c 	.word	0x2400f36c
 800c5a4:	2400f374 	.word	0x2400f374
 800c5a8:	2400f370 	.word	0x2400f370
 800c5ac:	2400f440 	.word	0x2400f440
 800c5b0:	08021b8d 	.word	0x08021b8d

0800c5b4 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c5b4:	4291      	cmp	r1, r2
{
 800c5b6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5b8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5ba:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c5bc:	d80a      	bhi.n	800c5d4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5be:	1ad2      	subs	r2, r2, r3
 800c5c0:	6983      	ldr	r3, [r0, #24]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d20d      	bcs.n	800c5e2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5c6:	1d01      	adds	r1, r0, #4
 800c5c8:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5ca:	6818      	ldr	r0, [r3, #0]
 800c5cc:	f7fe fba8 	bl	800ad20 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c5d0:	2000      	movs	r0, #0
}
 800c5d2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	d201      	bcs.n	800c5dc <prvInsertTimerInActiveList+0x28>
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	d202      	bcs.n	800c5e2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5dc:	1d01      	adds	r1, r0, #4
 800c5de:	4b03      	ldr	r3, [pc, #12]	; (800c5ec <prvInsertTimerInActiveList+0x38>)
 800c5e0:	e7f3      	b.n	800c5ca <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c5e2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c5e4:	e7f5      	b.n	800c5d2 <prvInsertTimerInActiveList+0x1e>
 800c5e6:	bf00      	nop
 800c5e8:	2400f370 	.word	0x2400f370
 800c5ec:	2400f36c 	.word	0x2400f36c

0800c5f0 <xTimerCreateTimerTask>:
{
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c5f4:	f7ff ffaa 	bl	800c54c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c5f8:	4b12      	ldr	r3, [pc, #72]	; (800c644 <xTimerCreateTimerTask+0x54>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	b1b3      	cbz	r3, 800c62c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c5fe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c600:	aa07      	add	r2, sp, #28
 800c602:	a906      	add	r1, sp, #24
 800c604:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c606:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c60a:	f7fe fa69 	bl	800aae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c60e:	9b05      	ldr	r3, [sp, #20]
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	9302      	str	r3, [sp, #8]
 800c614:	9b06      	ldr	r3, [sp, #24]
 800c616:	490c      	ldr	r1, [pc, #48]	; (800c648 <xTimerCreateTimerTask+0x58>)
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	2302      	movs	r3, #2
 800c61c:	480b      	ldr	r0, [pc, #44]	; (800c64c <xTimerCreateTimerTask+0x5c>)
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	4623      	mov	r3, r4
 800c622:	f7ff fbac 	bl	800bd7e <xTaskCreateStatic>
 800c626:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <xTimerCreateTimerTask+0x60>)
 800c628:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c62a:	b940      	cbnz	r0, 800c63e <xTimerCreateTimerTask+0x4e>
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c63c:	e7fe      	b.n	800c63c <xTimerCreateTimerTask+0x4c>
}
 800c63e:	2001      	movs	r0, #1
 800c640:	b008      	add	sp, #32
 800c642:	bd10      	pop	{r4, pc}
 800c644:	2400f490 	.word	0x2400f490
 800c648:	08021b92 	.word	0x08021b92
 800c64c:	0800c755 	.word	0x0800c755
 800c650:	2400f494 	.word	0x2400f494

0800c654 <xTimerGenericCommand>:
{
 800c654:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c656:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c658:	4604      	mov	r4, r0
{
 800c65a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c65c:	b940      	cbnz	r0, 800c670 <xTimerGenericCommand+0x1c>
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	e7fe      	b.n	800c66e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800c670:	4d0c      	ldr	r5, [pc, #48]	; (800c6a4 <xTimerGenericCommand+0x50>)
 800c672:	6828      	ldr	r0, [r5, #0]
 800c674:	b178      	cbz	r0, 800c696 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c676:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c678:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c67a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c67e:	dc0c      	bgt.n	800c69a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c680:	f7ff fe72 	bl	800c368 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c684:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c686:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c688:	4669      	mov	r1, sp
 800c68a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c68c:	bf0c      	ite	eq
 800c68e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c690:	461a      	movne	r2, r3
 800c692:	f7fe fe94 	bl	800b3be <xQueueGenericSend>
}
 800c696:	b004      	add	sp, #16
 800c698:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c69a:	2300      	movs	r3, #0
 800c69c:	4669      	mov	r1, sp
 800c69e:	f7fe ff41 	bl	800b524 <xQueueGenericSendFromISR>
 800c6a2:	e7f8      	b.n	800c696 <xTimerGenericCommand+0x42>
 800c6a4:	2400f490 	.word	0x2400f490

0800c6a8 <prvSampleTimeNow>:
{
 800c6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800c6ac:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c750 <prvSampleTimeNow+0xa8>
{
 800c6b0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800c6b2:	f7ff fbd1 	bl	800be58 <xTaskGetTickCount>
 800c6b6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c6b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6bc:	4283      	cmp	r3, r0
 800c6be:	d940      	bls.n	800c742 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6c0:	4f21      	ldr	r7, [pc, #132]	; (800c748 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6c2:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	b95a      	cbnz	r2, 800c6e4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800c6cc:	4a1f      	ldr	r2, [pc, #124]	; (800c74c <prvSampleTimeNow+0xa4>)
 800c6ce:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c6d0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800c6d2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800c6d4:	6039      	str	r1, [r7, #0]
}
 800c6d6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800c6d8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800c6da:	f8c8 5000 	str.w	r5, [r8]
}
 800c6de:	b004      	add	sp, #16
 800c6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6e4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6e8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6ec:	1d21      	adds	r1, r4, #4
 800c6ee:	4608      	mov	r0, r1
 800c6f0:	9103      	str	r1, [sp, #12]
 800c6f2:	f7fe fb2c 	bl	800ad4e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6f6:	6a23      	ldr	r3, [r4, #32]
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c700:	9903      	ldr	r1, [sp, #12]
 800c702:	f013 0f04 	tst.w	r3, #4
 800c706:	d0de      	beq.n	800c6c6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c708:	69a3      	ldr	r3, [r4, #24]
 800c70a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800c70c:	459a      	cmp	sl, r3
 800c70e:	d205      	bcs.n	800c71c <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c710:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c712:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c714:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c716:	f7fe fb03 	bl	800ad20 <vListInsert>
 800c71a:	e7d4      	b.n	800c6c6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c71c:	2300      	movs	r3, #0
 800c71e:	4652      	mov	r2, sl
 800c720:	4620      	mov	r0, r4
 800c722:	f8cd 9000 	str.w	r9, [sp]
 800c726:	4619      	mov	r1, r3
 800c728:	f7ff ff94 	bl	800c654 <xTimerGenericCommand>
				configASSERT( xResult );
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d1ca      	bne.n	800c6c6 <prvSampleTimeNow+0x1e>
 800c730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c734:	f383 8811 	msr	BASEPRI, r3
 800c738:	f3bf 8f6f 	isb	sy
 800c73c:	f3bf 8f4f 	dsb	sy
 800c740:	e7fe      	b.n	800c740 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	e7c7      	b.n	800c6d6 <prvSampleTimeNow+0x2e>
 800c746:	bf00      	nop
 800c748:	2400f36c 	.word	0x2400f36c
 800c74c:	2400f370 	.word	0x2400f370
 800c750:	2400f43c 	.word	0x2400f43c

0800c754 <prvTimerTask>:
{
 800c754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c758:	4d6e      	ldr	r5, [pc, #440]	; (800c914 <prvTimerTask+0x1c0>)
{
 800c75a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c75c:	4e6e      	ldr	r6, [pc, #440]	; (800c918 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	f8d3 8000 	ldr.w	r8, [r3]
 800c764:	f1b8 0f00 	cmp.w	r8, #0
 800c768:	d035      	beq.n	800c7d6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c76a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c76c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c76e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800c772:	f7ff fb69 	bl	800be48 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c776:	a804      	add	r0, sp, #16
 800c778:	f7ff ff96 	bl	800c6a8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800c77c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c77e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800c780:	2b00      	cmp	r3, #0
 800c782:	d169      	bne.n	800c858 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c784:	2c00      	cmp	r4, #0
 800c786:	d14c      	bne.n	800c822 <prvTimerTask+0xce>
 800c788:	4540      	cmp	r0, r8
 800c78a:	d350      	bcc.n	800c82e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800c78c:	f7ff fc00 	bl	800bf90 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c796:	1d38      	adds	r0, r7, #4
 800c798:	f7fe fad9 	bl	800ad4e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c79c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7a0:	0758      	lsls	r0, r3, #29
 800c7a2:	d51a      	bpl.n	800c7da <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7a4:	69b9      	ldr	r1, [r7, #24]
 800c7a6:	4643      	mov	r3, r8
 800c7a8:	464a      	mov	r2, r9
 800c7aa:	4638      	mov	r0, r7
 800c7ac:	4441      	add	r1, r8
 800c7ae:	f7ff ff01 	bl	800c5b4 <prvInsertTimerInActiveList>
 800c7b2:	b1b0      	cbz	r0, 800c7e2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	4642      	mov	r2, r8
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	9400      	str	r4, [sp, #0]
 800c7be:	f7ff ff49 	bl	800c654 <xTimerGenericCommand>
			configASSERT( xResult );
 800c7c2:	b970      	cbnz	r0, 800c7e2 <prvTimerTask+0x8e>
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	e7fe      	b.n	800c7d4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7d6:	2401      	movs	r4, #1
 800c7d8:	e7cb      	b.n	800c772 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7da:	f023 0301 	bic.w	r3, r3, #1
 800c7de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	a904      	add	r1, sp, #16
 800c7ec:	6830      	ldr	r0, [r6, #0]
 800c7ee:	f7fe ff4f 	bl	800b690 <xQueueReceive>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d0b3      	beq.n	800c75e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7f6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7f8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	db2f      	blt.n	800c85e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7fe:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c800:	6963      	ldr	r3, [r4, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d132      	bne.n	800c86c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c806:	a803      	add	r0, sp, #12
 800c808:	f7ff ff4e 	bl	800c6a8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800c80c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c80e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800c810:	2b09      	cmp	r3, #9
 800c812:	d8e9      	bhi.n	800c7e8 <prvTimerTask+0x94>
 800c814:	e8df f003 	tbb	[pc, r3]
 800c818:	572e2e2e 	.word	0x572e2e2e
 800c81c:	2e2e765e 	.word	0x2e2e765e
 800c820:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c822:	4b3e      	ldr	r3, [pc, #248]	; (800c91c <prvTimerTask+0x1c8>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681c      	ldr	r4, [r3, #0]
 800c828:	fab4 f484 	clz	r4, r4
 800c82c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c82e:	4622      	mov	r2, r4
 800c830:	eba8 0109 	sub.w	r1, r8, r9
 800c834:	6830      	ldr	r0, [r6, #0]
 800c836:	f7ff f91a 	bl	800ba6e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c83a:	f7ff fba9 	bl	800bf90 <xTaskResumeAll>
 800c83e:	2800      	cmp	r0, #0
 800c840:	d1d2      	bne.n	800c7e8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800c842:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c84a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	e7c7      	b.n	800c7e8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800c858:	f7ff fb9a 	bl	800bf90 <xTaskResumeAll>
}
 800c85c:	e7c4      	b.n	800c7e8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c85e:	9b05      	ldr	r3, [sp, #20]
 800c860:	9907      	ldr	r1, [sp, #28]
 800c862:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c864:	9b04      	ldr	r3, [sp, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	dbbe      	blt.n	800c7e8 <prvTimerTask+0x94>
 800c86a:	e7c8      	b.n	800c7fe <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c86c:	1d20      	adds	r0, r4, #4
 800c86e:	f7fe fa6e 	bl	800ad4e <uxListRemove>
 800c872:	e7c8      	b.n	800c806 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c874:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c878:	4620      	mov	r0, r4
 800c87a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c87c:	f043 0301 	orr.w	r3, r3, #1
 800c880:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c884:	9b05      	ldr	r3, [sp, #20]
 800c886:	4419      	add	r1, r3
 800c888:	f7ff fe94 	bl	800c5b4 <prvInsertTimerInActiveList>
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d0ab      	beq.n	800c7e8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c890:	6a23      	ldr	r3, [r4, #32]
 800c892:	4620      	mov	r0, r4
 800c894:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c896:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c89a:	0759      	lsls	r1, r3, #29
 800c89c:	d5a4      	bpl.n	800c7e8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c89e:	69a2      	ldr	r2, [r4, #24]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9905      	ldr	r1, [sp, #20]
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	440a      	add	r2, r1
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	f7ff fed2 	bl	800c654 <xTimerGenericCommand>
							configASSERT( xResult );
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d199      	bne.n	800c7e8 <prvTimerTask+0x94>
 800c8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	e7fe      	b.n	800c8c4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8ca:	f023 0301 	bic.w	r3, r3, #1
 800c8ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800c8d2:	e789      	b.n	800c7e8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c8d8:	f043 0301 	orr.w	r3, r3, #1
 800c8dc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8e0:	9905      	ldr	r1, [sp, #20]
 800c8e2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8e4:	b941      	cbnz	r1, 800c8f8 <prvTimerTask+0x1a4>
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	e7fe      	b.n	800c8f6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	4401      	add	r1, r0
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7ff fe59 	bl	800c5b4 <prvInsertTimerInActiveList>
					break;
 800c902:	e771      	b.n	800c7e8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c904:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c908:	079a      	lsls	r2, r3, #30
 800c90a:	d4de      	bmi.n	800c8ca <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7fe f9af 	bl	800ac70 <vPortFree>
 800c912:	e769      	b.n	800c7e8 <prvTimerTask+0x94>
 800c914:	2400f36c 	.word	0x2400f36c
 800c918:	2400f490 	.word	0x2400f490
 800c91c:	2400f370 	.word	0x2400f370

0800c920 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800c920:	8880      	ldrh	r0, [r0, #4]
 800c922:	4770      	bx	lr

0800c924 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800c924:	b570      	push	{r4, r5, r6, lr}
 800c926:	6803      	ldr	r3, [r0, #0]
 800c928:	460c      	mov	r4, r1
 800c92a:	2100      	movs	r1, #0
 800c92c:	4605      	mov	r5, r0
 800c92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c930:	4798      	blx	r3
 800c932:	4606      	mov	r6, r0
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	4628      	mov	r0, r5
 800c938:	1ba4      	subs	r4, r4, r6
 800c93a:	6a1b      	ldr	r3, [r3, #32]
 800c93c:	b2a4      	uxth	r4, r4
 800c93e:	4798      	blx	r3
 800c940:	fbb4 f0f0 	udiv	r0, r4, r0
 800c944:	bd70      	pop	{r4, r5, r6, pc}

0800c946 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800c946:	2300      	movs	r3, #0
 800c948:	8083      	strh	r3, [r0, #4]
 800c94a:	4770      	bx	lr

0800c94c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	6803      	ldr	r3, [r0, #0]
 800c950:	4604      	mov	r4, r0
 800c952:	8881      	ldrh	r1, [r0, #4]
 800c954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c956:	4798      	blx	r3
 800c958:	88a3      	ldrh	r3, [r4, #4]
 800c95a:	3301      	adds	r3, #1
 800c95c:	80a3      	strh	r3, [r4, #4]
 800c95e:	bd10      	pop	{r4, pc}

0800c960 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800c960:	6803      	ldr	r3, [r0, #0]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	4718      	bx	r3

0800c966 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800c966:	4770      	bx	lr

0800c968 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800c968:	4a02      	ldr	r2, [pc, #8]	; (800c974 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800c96a:	6002      	str	r2, [r0, #0]
 800c96c:	2200      	movs	r2, #0
 800c96e:	8082      	strh	r2, [r0, #4]
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	08021ba4 	.word	0x08021ba4

0800c978 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800c978:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c97a:	2000      	movs	r0, #0
 800c97c:	b12b      	cbz	r3, 800c98a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c97e:	b920      	cbnz	r0, 800c98a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800c980:	1a5a      	subs	r2, r3, r1
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	4250      	negs	r0, r2
 800c986:	4150      	adcs	r0, r2
 800c988:	e7f8      	b.n	800c97c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800c98a:	4770      	bx	lr

0800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800c98c:	2300      	movs	r3, #0
 800c98e:	6148      	str	r0, [r1, #20]
 800c990:	618b      	str	r3, [r1, #24]
 800c992:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c994:	b913      	cbnz	r3, 800c99c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800c996:	6281      	str	r1, [r0, #40]	; 0x28
 800c998:	4770      	bx	lr
 800c99a:	4613      	mov	r3, r2
 800c99c:	699a      	ldr	r2, [r3, #24]
 800c99e:	2a00      	cmp	r2, #0
 800c9a0:	d1fb      	bne.n	800c99a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800c9a2:	6199      	str	r1, [r3, #24]
 800c9a4:	4770      	bx	lr

0800c9a6 <_ZN8touchgfx9Container9removeAllEv>:
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c9aa:	b123      	cbz	r3, 800c9b6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800c9ac:	6999      	ldr	r1, [r3, #24]
 800c9ae:	6281      	str	r1, [r0, #40]	; 0x28
 800c9b0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800c9b4:	e7f8      	b.n	800c9a8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800c9b6:	4770      	bx	lr

0800c9b8 <_ZN8touchgfx9Container6unlinkEv>:
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	6283      	str	r3, [r0, #40]	; 0x28
 800c9bc:	4770      	bx	lr

0800c9be <_ZNK8touchgfx9Container12getSolidRectEv>:
 800c9be:	2200      	movs	r2, #0
 800c9c0:	8002      	strh	r2, [r0, #0]
 800c9c2:	8042      	strh	r2, [r0, #2]
 800c9c4:	8082      	strh	r2, [r0, #4]
 800c9c6:	80c2      	strh	r2, [r0, #6]
 800c9c8:	4770      	bx	lr

0800c9ca <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800c9ca:	b570      	push	{r4, r5, r6, lr}
 800c9cc:	460d      	mov	r5, r1
 800c9ce:	4616      	mov	r6, r2
 800c9d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c9d2:	b13c      	cbz	r4, 800c9e4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4632      	mov	r2, r6
 800c9da:	4629      	mov	r1, r5
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	4798      	blx	r3
 800c9e0:	69a4      	ldr	r4, [r4, #24]
 800c9e2:	e7f6      	b.n	800c9d2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800c9e4:	bd70      	pop	{r4, r5, r6, pc}

0800c9e6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800c9e6:	b538      	push	{r3, r4, r5, lr}
 800c9e8:	460d      	mov	r5, r1
 800c9ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c9ec:	b134      	cbz	r4, 800c9fc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800c9ee:	682b      	ldr	r3, [r5, #0]
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4798      	blx	r3
 800c9f8:	69a4      	ldr	r4, [r4, #24]
 800c9fa:	e7f7      	b.n	800c9ec <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800c9fc:	bd38      	pop	{r3, r4, r5, pc}

0800c9fe <_ZN8touchgfx9ContainerD1Ev>:
 800c9fe:	4770      	bx	lr

0800ca00 <_ZN8touchgfx9ContainerD0Ev>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	4604      	mov	r4, r0
 800ca04:	212c      	movs	r1, #44	; 0x2c
 800ca06:	f011 fa9a 	bl	801df3e <_ZdlPvj>
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	bd10      	pop	{r4, pc}

0800ca0e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ca0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ca10:	b19b      	cbz	r3, 800ca3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ca12:	428b      	cmp	r3, r1
 800ca14:	d109      	bne.n	800ca2a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ca16:	699a      	ldr	r2, [r3, #24]
 800ca18:	2100      	movs	r1, #0
 800ca1a:	6159      	str	r1, [r3, #20]
 800ca1c:	6282      	str	r2, [r0, #40]	; 0x28
 800ca1e:	b902      	cbnz	r2, 800ca22 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ca20:	4770      	bx	lr
 800ca22:	6199      	str	r1, [r3, #24]
 800ca24:	4770      	bx	lr
 800ca26:	4613      	mov	r3, r2
 800ca28:	b13a      	cbz	r2, 800ca3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ca2a:	699a      	ldr	r2, [r3, #24]
 800ca2c:	428a      	cmp	r2, r1
 800ca2e:	d1fa      	bne.n	800ca26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ca30:	698a      	ldr	r2, [r1, #24]
 800ca32:	619a      	str	r2, [r3, #24]
 800ca34:	2300      	movs	r3, #0
 800ca36:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ca3a:	4770      	bx	lr

0800ca3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ca3c:	b410      	push	{r4}
 800ca3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ca40:	4604      	mov	r4, r0
 800ca42:	b92b      	cbnz	r3, 800ca50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ca44:	6803      	ldr	r3, [r0, #0]
 800ca46:	4611      	mov	r1, r2
 800ca48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca4e:	4718      	bx	r3
 800ca50:	b941      	cbnz	r1, 800ca64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ca52:	6193      	str	r3, [r2, #24]
 800ca54:	6282      	str	r2, [r0, #40]	; 0x28
 800ca56:	6154      	str	r4, [r2, #20]
 800ca58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d0f9      	beq.n	800ca58 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ca64:	4299      	cmp	r1, r3
 800ca66:	6998      	ldr	r0, [r3, #24]
 800ca68:	d1f9      	bne.n	800ca5e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ca6a:	6190      	str	r0, [r2, #24]
 800ca6c:	618a      	str	r2, [r1, #24]
 800ca6e:	e7f2      	b.n	800ca56 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800ca70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca74:	461f      	mov	r7, r3
 800ca76:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ca7a:	460d      	mov	r5, r1
 800ca7c:	4616      	mov	r6, r2
 800ca7e:	b103      	cbz	r3, 800ca82 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ca80:	6038      	str	r0, [r7, #0]
 800ca82:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ca84:	b314      	cbz	r4, 800cacc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ca86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ca8a:	b1eb      	cbz	r3, 800cac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca8c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ca90:	428d      	cmp	r5, r1
 800ca92:	db19      	blt.n	800cac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ca94:	b289      	uxth	r1, r1
 800ca96:	8923      	ldrh	r3, [r4, #8]
 800ca98:	440b      	add	r3, r1
 800ca9a:	b21b      	sxth	r3, r3
 800ca9c:	429d      	cmp	r5, r3
 800ca9e:	da13      	bge.n	800cac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800caa0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800caa4:	4296      	cmp	r6, r2
 800caa6:	db0f      	blt.n	800cac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800caa8:	b292      	uxth	r2, r2
 800caaa:	8963      	ldrh	r3, [r4, #10]
 800caac:	4413      	add	r3, r2
 800caae:	b21b      	sxth	r3, r3
 800cab0:	429e      	cmp	r6, r3
 800cab2:	da09      	bge.n	800cac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	1ab2      	subs	r2, r6, r2
 800cab8:	1a69      	subs	r1, r5, r1
 800caba:	4620      	mov	r0, r4
 800cabc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800cac0:	b212      	sxth	r2, r2
 800cac2:	463b      	mov	r3, r7
 800cac4:	b209      	sxth	r1, r1
 800cac6:	47c0      	blx	r8
 800cac8:	69a4      	ldr	r4, [r4, #24]
 800caca:	e7db      	b.n	800ca84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800cacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cad0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	4c6d      	ldr	r4, [pc, #436]	; (800cc8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800cad6:	b0a1      	sub	sp, #132	; 0x84
 800cad8:	4606      	mov	r6, r0
 800cada:	6824      	ldr	r4, [r4, #0]
 800cadc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800cade:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800cae2:	2400      	movs	r4, #0
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	802c      	strh	r4, [r5, #0]
 800cae8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800caea:	802c      	strh	r4, [r5, #0]
 800caec:	601c      	str	r4, [r3, #0]
 800caee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800caf2:	f7ff ffbd 	bl	800ca70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800caf6:	f1b9 0f03 	cmp.w	r9, #3
 800cafa:	f340 80c1 	ble.w	800cc80 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800cafe:	4631      	mov	r1, r6
 800cb00:	a80c      	add	r0, sp, #48	; 0x30
 800cb02:	f006 fd6d 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb06:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800cb0a:	9306      	str	r3, [sp, #24]
 800cb0c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800cb10:	9307      	str	r3, [sp, #28]
 800cb12:	9b03      	ldr	r3, [sp, #12]
 800cb14:	f8d3 a000 	ldr.w	sl, [r3]
 800cb18:	f1ba 0f00 	cmp.w	sl, #0
 800cb1c:	f000 80b3 	beq.w	800cc86 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800cb20:	4651      	mov	r1, sl
 800cb22:	a810      	add	r0, sp, #64	; 0x40
 800cb24:	f006 fd5c 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cb28:	2002      	movs	r0, #2
 800cb2a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	9a06      	ldr	r2, [sp, #24]
 800cb32:	fb91 f1f0 	sdiv	r1, r1, r0
 800cb36:	189d      	adds	r5, r3, r2
 800cb38:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800cb3c:	9a07      	ldr	r2, [sp, #28]
 800cb3e:	4419      	add	r1, r3
 800cb40:	9b02      	ldr	r3, [sp, #8]
 800cb42:	4413      	add	r3, r2
 800cb44:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800cb48:	1a6d      	subs	r5, r5, r1
 800cb4a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800cb4e:	fb92 f2f0 	sdiv	r2, r2, r0
 800cb52:	440a      	add	r2, r1
 800cb54:	1a9b      	subs	r3, r3, r2
 800cb56:	435b      	muls	r3, r3
 800cb58:	fb05 3505 	mla	r5, r5, r5, r3
 800cb5c:	4f4c      	ldr	r7, [pc, #304]	; (800cc90 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800cb5e:	ac10      	add	r4, sp, #64	; 0x40
 800cb60:	f1b9 0f0c 	cmp.w	r9, #12
 800cb64:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb6c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cb6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb70:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800cb74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cb78:	f04f 0303 	mov.w	r3, #3
 800cb7c:	bfd8      	it	le
 800cb7e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800cb82:	f04f 0400 	mov.w	r4, #0
 800cb86:	f8cd 9000 	str.w	r9, [sp]
 800cb8a:	bfcc      	ite	gt
 800cb8c:	4698      	movgt	r8, r3
 800cb8e:	fb92 f8f3 	sdivle	r8, r2, r3
 800cb92:	1c63      	adds	r3, r4, #1
 800cb94:	aa10      	add	r2, sp, #64	; 0x40
 800cb96:	f004 0401 	and.w	r4, r4, #1
 800cb9a:	f04f 0b00 	mov.w	fp, #0
 800cb9e:	9308      	str	r3, [sp, #32]
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800cba6:	fb93 f3f8 	sdiv	r3, r3, r8
 800cbaa:	3404      	adds	r4, #4
 800cbac:	b29b      	uxth	r3, r3
 800cbae:	9304      	str	r3, [sp, #16]
 800cbb0:	9a04      	ldr	r2, [sp, #16]
 800cbb2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cbb6:	fb13 f302 	smulbb	r3, r3, r2
 800cbba:	9a01      	ldr	r2, [sp, #4]
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	1899      	adds	r1, r3, r2
 800cbc0:	9305      	str	r3, [sp, #20]
 800cbc2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cbc6:	b209      	sxth	r1, r1
 800cbc8:	4299      	cmp	r1, r3
 800cbca:	db4d      	blt.n	800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbcc:	8932      	ldrh	r2, [r6, #8]
 800cbce:	4413      	add	r3, r2
 800cbd0:	b21b      	sxth	r3, r3
 800cbd2:	4299      	cmp	r1, r3
 800cbd4:	da48      	bge.n	800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbd6:	9b04      	ldr	r3, [sp, #16]
 800cbd8:	6827      	ldr	r7, [r4, #0]
 800cbda:	fb17 f703 	smulbb	r7, r7, r3
 800cbde:	9b02      	ldr	r3, [sp, #8]
 800cbe0:	b2bf      	uxth	r7, r7
 800cbe2:	18fa      	adds	r2, r7, r3
 800cbe4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cbe8:	b212      	sxth	r2, r2
 800cbea:	429a      	cmp	r2, r3
 800cbec:	db3c      	blt.n	800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbee:	8970      	ldrh	r0, [r6, #10]
 800cbf0:	4403      	add	r3, r0
 800cbf2:	b21b      	sxth	r3, r3
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	da37      	bge.n	800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbfe:	ab0b      	add	r3, sp, #44	; 0x2c
 800cc00:	f7ff ff36 	bl	800ca70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800cc04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc06:	b37a      	cbz	r2, 800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cc08:	4552      	cmp	r2, sl
 800cc0a:	d02d      	beq.n	800cc68 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	a80e      	add	r0, sp, #56	; 0x38
 800cc10:	9209      	str	r2, [sp, #36]	; 0x24
 800cc12:	f006 fce5 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cc16:	f04f 0e02 	mov.w	lr, #2
 800cc1a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800cc1e:	9a06      	ldr	r2, [sp, #24]
 800cc20:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800cc24:	9b01      	ldr	r3, [sp, #4]
 800cc26:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800cc2a:	4413      	add	r3, r2
 800cc2c:	9a07      	ldr	r2, [sp, #28]
 800cc2e:	fb91 f1fe 	sdiv	r1, r1, lr
 800cc32:	fb9c fcfe 	sdiv	ip, ip, lr
 800cc36:	4401      	add	r1, r0
 800cc38:	1a58      	subs	r0, r3, r1
 800cc3a:	9b02      	ldr	r3, [sp, #8]
 800cc3c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800cc40:	4413      	add	r3, r2
 800cc42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc44:	448c      	add	ip, r1
 800cc46:	eba3 030c 	sub.w	r3, r3, ip
 800cc4a:	435b      	muls	r3, r3
 800cc4c:	fb00 3300 	mla	r3, r0, r0, r3
 800cc50:	42ab      	cmp	r3, r5
 800cc52:	d208      	bcs.n	800cc66 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800cc54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc56:	461d      	mov	r5, r3
 800cc58:	9803      	ldr	r0, [sp, #12]
 800cc5a:	6001      	str	r1, [r0, #0]
 800cc5c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800cc5e:	9805      	ldr	r0, [sp, #20]
 800cc60:	8008      	strh	r0, [r1, #0]
 800cc62:	992b      	ldr	r1, [sp, #172]	; 0xac
 800cc64:	800f      	strh	r7, [r1, #0]
 800cc66:	4692      	mov	sl, r2
 800cc68:	f10b 0b01 	add.w	fp, fp, #1
 800cc6c:	3408      	adds	r4, #8
 800cc6e:	f1bb 0f04 	cmp.w	fp, #4
 800cc72:	d19d      	bne.n	800cbb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	9c08      	ldr	r4, [sp, #32]
 800cc78:	444b      	add	r3, r9
 800cc7a:	4544      	cmp	r4, r8
 800cc7c:	9300      	str	r3, [sp, #0]
 800cc7e:	d188      	bne.n	800cb92 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800cc80:	b021      	add	sp, #132	; 0x84
 800cc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc86:	f04f 35ff 	mov.w	r5, #4294967295
 800cc8a:	e767      	b.n	800cb5c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800cc8c:	2400f4a4 	.word	0x2400f4a4
 800cc90:	080203ac 	.word	0x080203ac

0800cc94 <_ZN8touchgfx4RectaNERKS0_>:
 800cc94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc98:	f9b1 7000 	ldrsh.w	r7, [r1]
 800cc9c:	888c      	ldrh	r4, [r1, #4]
 800cc9e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800cca2:	443c      	add	r4, r7
 800cca4:	b2a4      	uxth	r4, r4
 800cca6:	fa0f f884 	sxth.w	r8, r4
 800ccaa:	45c1      	cmp	r9, r8
 800ccac:	da2f      	bge.n	800cd0e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ccae:	8882      	ldrh	r2, [r0, #4]
 800ccb0:	444a      	add	r2, r9
 800ccb2:	b292      	uxth	r2, r2
 800ccb4:	fa0f fe82 	sxth.w	lr, r2
 800ccb8:	4577      	cmp	r7, lr
 800ccba:	da28      	bge.n	800cd0e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ccbc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ccc0:	88cb      	ldrh	r3, [r1, #6]
 800ccc2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ccc6:	442b      	add	r3, r5
 800ccc8:	b21b      	sxth	r3, r3
 800ccca:	429e      	cmp	r6, r3
 800cccc:	da1f      	bge.n	800cd0e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ccce:	88c3      	ldrh	r3, [r0, #6]
 800ccd0:	4433      	add	r3, r6
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	fa0f fc83 	sxth.w	ip, r3
 800ccd8:	4565      	cmp	r5, ip
 800ccda:	da18      	bge.n	800cd0e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ccdc:	454f      	cmp	r7, r9
 800ccde:	bfb8      	it	lt
 800cce0:	464f      	movlt	r7, r9
 800cce2:	42b5      	cmp	r5, r6
 800cce4:	bfb8      	it	lt
 800cce6:	4635      	movlt	r5, r6
 800cce8:	45f0      	cmp	r8, lr
 800ccea:	bfd8      	it	le
 800ccec:	4622      	movle	r2, r4
 800ccee:	1bd2      	subs	r2, r2, r7
 800ccf0:	8082      	strh	r2, [r0, #4]
 800ccf2:	884a      	ldrh	r2, [r1, #2]
 800ccf4:	88c9      	ldrh	r1, [r1, #6]
 800ccf6:	8007      	strh	r7, [r0, #0]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	8045      	strh	r5, [r0, #2]
 800ccfc:	b292      	uxth	r2, r2
 800ccfe:	b211      	sxth	r1, r2
 800cd00:	458c      	cmp	ip, r1
 800cd02:	bfa8      	it	ge
 800cd04:	4613      	movge	r3, r2
 800cd06:	1b5b      	subs	r3, r3, r5
 800cd08:	80c3      	strh	r3, [r0, #6]
 800cd0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd0e:	2300      	movs	r3, #0
 800cd10:	8003      	strh	r3, [r0, #0]
 800cd12:	8043      	strh	r3, [r0, #2]
 800cd14:	8083      	strh	r3, [r0, #4]
 800cd16:	80c3      	strh	r3, [r0, #6]
 800cd18:	e7f7      	b.n	800cd0a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800cd1a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dd06      	ble.n	800cd30 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800cd22:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800cd26:	2800      	cmp	r0, #0
 800cd28:	bfcc      	ite	gt
 800cd2a:	2000      	movgt	r0, #0
 800cd2c:	2001      	movle	r0, #1
 800cd2e:	4770      	bx	lr
 800cd30:	2001      	movs	r0, #1
 800cd32:	4770      	bx	lr

0800cd34 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800cd3e:	8003      	strh	r3, [r0, #0]
 800cd40:	8043      	strh	r3, [r0, #2]
 800cd42:	8083      	strh	r3, [r0, #4]
 800cd44:	80c3      	strh	r3, [r0, #6]
 800cd46:	2d00      	cmp	r5, #0
 800cd48:	d040      	beq.n	800cdcc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800cd4a:	1d28      	adds	r0, r5, #4
 800cd4c:	f7ff ffe5 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd50:	b988      	cbnz	r0, 800cd76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800cd52:	4620      	mov	r0, r4
 800cd54:	f7ff ffe1 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800cd58:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800cd5c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cd60:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800cd64:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800cd68:	b138      	cbz	r0, 800cd7a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800cd6a:	8022      	strh	r2, [r4, #0]
 800cd6c:	8063      	strh	r3, [r4, #2]
 800cd6e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800cd72:	f8a4 c006 	strh.w	ip, [r4, #6]
 800cd76:	69ad      	ldr	r5, [r5, #24]
 800cd78:	e7e5      	b.n	800cd46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800cd7a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800cd7e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800cd82:	4290      	cmp	r0, r2
 800cd84:	4607      	mov	r7, r0
 800cd86:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800cd8a:	460e      	mov	r6, r1
 800cd8c:	bfa8      	it	ge
 800cd8e:	4617      	movge	r7, r2
 800cd90:	4299      	cmp	r1, r3
 800cd92:	4472      	add	r2, lr
 800cd94:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800cd98:	bfa8      	it	ge
 800cd9a:	461e      	movge	r6, r3
 800cd9c:	4440      	add	r0, r8
 800cd9e:	4471      	add	r1, lr
 800cda0:	4463      	add	r3, ip
 800cda2:	b200      	sxth	r0, r0
 800cda4:	8027      	strh	r7, [r4, #0]
 800cda6:	b212      	sxth	r2, r2
 800cda8:	8066      	strh	r6, [r4, #2]
 800cdaa:	b209      	sxth	r1, r1
 800cdac:	b21b      	sxth	r3, r3
 800cdae:	4290      	cmp	r0, r2
 800cdb0:	bfac      	ite	ge
 800cdb2:	ebc7 0200 	rsbge	r2, r7, r0
 800cdb6:	ebc7 0202 	rsblt	r2, r7, r2
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	bfac      	ite	ge
 800cdbe:	ebc6 0301 	rsbge	r3, r6, r1
 800cdc2:	ebc6 0303 	rsblt	r3, r6, r3
 800cdc6:	80a2      	strh	r2, [r4, #4]
 800cdc8:	80e3      	strh	r3, [r4, #6]
 800cdca:	e7d4      	b.n	800cd76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800cdcc:	4620      	mov	r0, r4
 800cdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cdd2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800cdd2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cdd6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800cdda:	b383      	cbz	r3, 800ce3e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cddc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cdde:	b374      	cbz	r4, 800ce3e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800cde0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800cde4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800cde8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800cdec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800cdf0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800cdf4:	b303      	cbz	r3, 800ce38 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800cdf6:	4668      	mov	r0, sp
 800cdf8:	1d21      	adds	r1, r4, #4
 800cdfa:	f8ad 5000 	strh.w	r5, [sp]
 800cdfe:	f8ad 6002 	strh.w	r6, [sp, #2]
 800ce02:	f8ad 7004 	strh.w	r7, [sp, #4]
 800ce06:	f8ad 8006 	strh.w	r8, [sp, #6]
 800ce0a:	f7ff ff43 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800ce0e:	4668      	mov	r0, sp
 800ce10:	f7ff ff83 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce14:	b980      	cbnz	r0, 800ce38 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800ce16:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce1a:	4669      	mov	r1, sp
 800ce1c:	88a2      	ldrh	r2, [r4, #4]
 800ce1e:	4620      	mov	r0, r4
 800ce20:	1a9b      	subs	r3, r3, r2
 800ce22:	88e2      	ldrh	r2, [r4, #6]
 800ce24:	f8ad 3000 	strh.w	r3, [sp]
 800ce28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ce2c:	1a9b      	subs	r3, r3, r2
 800ce2e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ce32:	6823      	ldr	r3, [r4, #0]
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	4798      	blx	r3
 800ce38:	69a4      	ldr	r4, [r4, #24]
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	d1d8      	bne.n	800cdf0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800ce3e:	b002      	add	sp, #8
 800ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce44 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800ce44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce46:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ce4a:	460d      	mov	r5, r1
 800ce4c:	4616      	mov	r6, r2
 800ce4e:	b323      	cbz	r3, 800ce9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ce50:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ce52:	b314      	cbz	r4, 800ce9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800ce54:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ce58:	b1eb      	cbz	r3, 800ce96 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ce5a:	6828      	ldr	r0, [r5, #0]
 800ce5c:	466b      	mov	r3, sp
 800ce5e:	6869      	ldr	r1, [r5, #4]
 800ce60:	c303      	stmia	r3!, {r0, r1}
 800ce62:	4668      	mov	r0, sp
 800ce64:	1d21      	adds	r1, r4, #4
 800ce66:	f7ff ff15 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800ce6a:	4668      	mov	r0, sp
 800ce6c:	f7ff ff55 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ce70:	b988      	cbnz	r0, 800ce96 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800ce72:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce76:	4669      	mov	r1, sp
 800ce78:	88a2      	ldrh	r2, [r4, #4]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	1a9b      	subs	r3, r3, r2
 800ce7e:	88e2      	ldrh	r2, [r4, #6]
 800ce80:	f8ad 3000 	strh.w	r3, [sp]
 800ce84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	4632      	mov	r2, r6
 800ce8c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ce90:	6823      	ldr	r3, [r4, #0]
 800ce92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce94:	4798      	blx	r3
 800ce96:	69a4      	ldr	r4, [r4, #24]
 800ce98:	e7db      	b.n	800ce52 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800ce9a:	b002      	add	sp, #8
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}

0800ce9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800ce9e:	6803      	ldr	r3, [r0, #0]
 800cea0:	b513      	push	{r0, r1, r4, lr}
 800cea2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800cea6:	2300      	movs	r3, #0
 800cea8:	e9cd 3300 	strd	r3, r3, [sp]
 800ceac:	466b      	mov	r3, sp
 800ceae:	47a0      	blx	r4
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd10      	pop	{r4, pc}

0800ceb4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ceba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800cebe:	4770      	bx	lr

0800cec0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800cec0:	2301      	movs	r3, #1
 800cec2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800cec6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ceca:	4770      	bx	lr

0800cecc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800cecc:	6843      	ldr	r3, [r0, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	725a      	strb	r2, [r3, #9]
 800ced2:	6840      	ldr	r0, [r0, #4]
 800ced4:	6803      	ldr	r3, [r0, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	4718      	bx	r3

0800ceda <_ZN8touchgfx3HAL8flushDMAEv>:
 800ceda:	6840      	ldr	r0, [r0, #4]
 800cedc:	6803      	ldr	r3, [r0, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4718      	bx	r3

0800cee2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800cee2:	b530      	push	{r4, r5, lr}
 800cee4:	b08b      	sub	sp, #44	; 0x2c
 800cee6:	6804      	ldr	r4, [r0, #0]
 800cee8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800ceec:	9509      	str	r5, [sp, #36]	; 0x24
 800ceee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800cef2:	9508      	str	r5, [sp, #32]
 800cef4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800cef8:	9507      	str	r5, [sp, #28]
 800cefa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800cefe:	9506      	str	r5, [sp, #24]
 800cf00:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800cf04:	9505      	str	r5, [sp, #20]
 800cf06:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800cf0a:	9504      	str	r5, [sp, #16]
 800cf0c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800cf10:	9503      	str	r5, [sp, #12]
 800cf12:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800cf16:	9502      	str	r5, [sp, #8]
 800cf18:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800cf1c:	e9cd 3500 	strd	r3, r5, [sp]
 800cf20:	4613      	mov	r3, r2
 800cf22:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800cf24:	2200      	movs	r2, #0
 800cf26:	47a0      	blx	r4
 800cf28:	b00b      	add	sp, #44	; 0x2c
 800cf2a:	bd30      	pop	{r4, r5, pc}

0800cf2c <_ZN8touchgfx3HAL10beginFrameEv>:
 800cf2c:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	b123      	cbz	r3, 800cf3c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800cf32:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800cf36:	f080 0001 	eor.w	r0, r0, #1
 800cf3a:	4770      	bx	lr
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	4770      	bx	lr
 800cf40:	2400f4a2 	.word	0x2400f4a2

0800cf44 <_ZN8touchgfx3HAL8endFrameEv>:
 800cf44:	b510      	push	{r4, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	6840      	ldr	r0, [r0, #4]
 800cf4a:	6803      	ldr	r3, [r0, #0]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	4798      	blx	r3
 800cf50:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800cf54:	b113      	cbz	r3, 800cf5c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800cf56:	2301      	movs	r3, #1
 800cf58:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800cf5c:	bd10      	pop	{r4, pc}

0800cf5e <_ZN8touchgfx3HAL10initializeEv>:
 800cf5e:	b510      	push	{r4, lr}
 800cf60:	4604      	mov	r4, r0
 800cf62:	f7f4 ff89 	bl	8001e78 <_ZN8touchgfx10OSWrappers10initializeEv>
 800cf66:	f7f4 fc9b 	bl	80018a0 <_ZN8touchgfx4GPIO4initEv>
 800cf6a:	6860      	ldr	r0, [r4, #4]
 800cf6c:	6803      	ldr	r3, [r0, #0]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	4798      	blx	r3
 800cf72:	68e0      	ldr	r0, [r4, #12]
 800cf74:	6803      	ldr	r3, [r0, #0]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	4798      	blx	r3
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf84:	4718      	bx	r3
	...

0800cf88 <_ZN8touchgfx3HAL4tickEv>:
 800cf88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cf8a:	6803      	ldr	r3, [r0, #0]
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	4d5b      	ldr	r5, [pc, #364]	; (800d0fc <_ZN8touchgfx3HAL4tickEv+0x174>)
 800cf90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cf94:	4798      	blx	r3
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f000 8095 	beq.w	800d0c6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	2600      	movs	r6, #0
 800cfa0:	f7f4 fbe4 	bl	800176c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800cfa4:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800cfa8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800cfac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800cfb0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cfb4:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800cfb8:	b133      	cbz	r3, 800cfc8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cfc2:	4798      	blx	r3
 800cfc4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800cfc8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800cfcc:	2601      	movs	r6, #1
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	f083 0301 	eor.w	r3, r3, #1
 800cfd4:	702e      	strb	r6, [r5, #0]
 800cfd6:	7253      	strb	r3, [r2, #9]
 800cfd8:	f005 fa22 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
 800cfdc:	6803      	ldr	r3, [r0, #0]
 800cfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe0:	4798      	blx	r3
 800cfe2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800cfe6:	b90b      	cbnz	r3, 800cfec <_ZN8touchgfx3HAL4tickEv+0x64>
 800cfe8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800cfec:	f005 fa18 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
 800cff0:	6803      	ldr	r3, [r0, #0]
 800cff2:	695b      	ldr	r3, [r3, #20]
 800cff4:	4798      	blx	r3
 800cff6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cff8:	6803      	ldr	r3, [r0, #0]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	4798      	blx	r3
 800cffe:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d002:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800d006:	3b01      	subs	r3, #1
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d00e:	b10a      	cbz	r2, 800d014 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1eb      	bne.n	800cfec <_ZN8touchgfx3HAL4tickEv+0x64>
 800d014:	4a3a      	ldr	r2, [pc, #232]	; (800d100 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800d016:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800d01a:	7813      	ldrb	r3, [r2, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	b25b      	sxtb	r3, r3
 800d020:	4299      	cmp	r1, r3
 800d022:	7013      	strb	r3, [r2, #0]
 800d024:	dc10      	bgt.n	800d048 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d026:	2300      	movs	r3, #0
 800d028:	68e0      	ldr	r0, [r4, #12]
 800d02a:	a902      	add	r1, sp, #8
 800d02c:	7013      	strb	r3, [r2, #0]
 800d02e:	aa03      	add	r2, sp, #12
 800d030:	6803      	ldr	r3, [r0, #0]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	4798      	blx	r3
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	2800      	cmp	r0, #0
 800d03a:	d050      	beq.n	800d0de <_ZN8touchgfx3HAL4tickEv+0x156>
 800d03c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d040:	4620      	mov	r0, r4
 800d042:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d046:	4798      	blx	r3
 800d048:	2300      	movs	r3, #0
 800d04a:	6960      	ldr	r0, [r4, #20]
 800d04c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d050:	b158      	cbz	r0, 800d06a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d052:	6803      	ldr	r3, [r0, #0]
 800d054:	f10d 0107 	add.w	r1, sp, #7
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	4798      	blx	r3
 800d05c:	b128      	cbz	r0, 800d06a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d05e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d060:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d064:	6803      	ldr	r3, [r0, #0]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	4798      	blx	r3
 800d06a:	f104 001c 	add.w	r0, r4, #28
 800d06e:	f010 fb8f 	bl	801d790 <_ZN8touchgfx8Gestures4tickEv>
 800d072:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d076:	b30b      	cbz	r3, 800d0bc <_ZN8touchgfx3HAL4tickEv+0x134>
 800d078:	6920      	ldr	r0, [r4, #16]
 800d07a:	6803      	ldr	r3, [r0, #0]
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	4798      	blx	r3
 800d080:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d082:	4606      	mov	r6, r0
 800d084:	b903      	cbnz	r3, 800d088 <_ZN8touchgfx3HAL4tickEv+0x100>
 800d086:	6720      	str	r0, [r4, #112]	; 0x70
 800d088:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d08a:	4a1e      	ldr	r2, [pc, #120]	; (800d104 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800d08c:	1af3      	subs	r3, r6, r3
 800d08e:	4293      	cmp	r3, r2
 800d090:	d914      	bls.n	800d0bc <_ZN8touchgfx3HAL4tickEv+0x134>
 800d092:	6920      	ldr	r0, [r4, #16]
 800d094:	6803      	ldr	r3, [r0, #0]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	4798      	blx	r3
 800d09a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d09c:	2264      	movs	r2, #100	; 0x64
 800d09e:	1af3      	subs	r3, r6, r3
 800d0a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a4:	fbb0 f0f3 	udiv	r0, r0, r3
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	dc1d      	bgt.n	800d0e8 <_ZN8touchgfx3HAL4tickEv+0x160>
 800d0ac:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800d0b0:	6920      	ldr	r0, [r4, #16]
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	6803      	ldr	r3, [r0, #0]
 800d0b6:	69db      	ldr	r3, [r3, #28]
 800d0b8:	4798      	blx	r3
 800d0ba:	6726      	str	r6, [r4, #112]	; 0x70
 800d0bc:	f005 f9b0 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
 800d0c0:	6803      	ldr	r3, [r0, #0]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	4798      	blx	r3
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d0ce:	4798      	blx	r3
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	f7f4 fb7b 	bl	80017cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	702b      	strb	r3, [r5, #0]
 800d0da:	b004      	add	sp, #16
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4798      	blx	r3
 800d0e6:	e7af      	b.n	800d048 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d0e8:	2863      	cmp	r0, #99	; 0x63
 800d0ea:	bfcb      	itete	gt
 800d0ec:	2300      	movgt	r3, #0
 800d0ee:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800d0f2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800d0f6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800d0fa:	e7d9      	b.n	800d0b0 <_ZN8touchgfx3HAL4tickEv+0x128>
 800d0fc:	2400f4a8 	.word	0x2400f4a8
 800d100:	2400f4a9 	.word	0x2400f4a9
 800d104:	05f5e100 	.word	0x05f5e100

0800d108 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d108:	f7f4 bee6 	b.w	8001ed8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d10c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d10c:	6581      	str	r1, [r0, #88]	; 0x58
 800d10e:	301c      	adds	r0, #28
 800d110:	f010 bb3c 	b.w	801d78c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d114 <_ZN8touchgfx3HAL5touchEll>:
 800d114:	b530      	push	{r4, r5, lr}
 800d116:	b087      	sub	sp, #28
 800d118:	4604      	mov	r4, r0
 800d11a:	a804      	add	r0, sp, #16
 800d11c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d120:	f004 ffc4 	bl	80120ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d124:	9b04      	ldr	r3, [sp, #16]
 800d126:	a906      	add	r1, sp, #24
 800d128:	a803      	add	r0, sp, #12
 800d12a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d12e:	9b05      	ldr	r3, [sp, #20]
 800d130:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d134:	f005 f80c 	bl	8012150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d138:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800d13c:	f104 001c 	add.w	r0, r4, #28
 800d140:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d144:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d148:	b189      	cbz	r1, 800d16e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d14a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	4613      	mov	r3, r2
 800d152:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d156:	462a      	mov	r2, r5
 800d158:	f010 fb28 	bl	801d7ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d15c:	b128      	cbz	r0, 800d16a <_ZN8touchgfx3HAL5touchEll+0x56>
 800d15e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d162:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d164:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d168:	6623      	str	r3, [r4, #96]	; 0x60
 800d16a:	b007      	add	sp, #28
 800d16c:	bd30      	pop	{r4, r5, pc}
 800d16e:	f010 fb5d 	bl	801d82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d172:	2301      	movs	r3, #1
 800d174:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d178:	e7f1      	b.n	800d15e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d17a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d17a:	b510      	push	{r4, lr}
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d046      	beq.n	800d20e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d180:	ea81 0002 	eor.w	r0, r1, r2
 800d184:	07c4      	lsls	r4, r0, #31
 800d186:	d508      	bpl.n	800d19a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d188:	440b      	add	r3, r1
 800d18a:	3a01      	subs	r2, #1
 800d18c:	428b      	cmp	r3, r1
 800d18e:	d93e      	bls.n	800d20e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d190:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d194:	f801 0b01 	strb.w	r0, [r1], #1
 800d198:	e7f8      	b.n	800d18c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d19a:	07d0      	lsls	r0, r2, #31
 800d19c:	bf42      	ittt	mi
 800d19e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d1a2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d1a6:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d911      	bls.n	800d1d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d1ae:	ea81 0402 	eor.w	r4, r1, r2
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	07a4      	lsls	r4, r4, #30
 800d1b6:	d022      	beq.n	800d1fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d1b8:	f023 0401 	bic.w	r4, r3, #1
 800d1bc:	440c      	add	r4, r1
 800d1be:	428c      	cmp	r4, r1
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	d904      	bls.n	800d1ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d1c4:	8812      	ldrh	r2, [r2, #0]
 800d1c6:	3002      	adds	r0, #2
 800d1c8:	f821 2b02 	strh.w	r2, [r1], #2
 800d1cc:	e7f7      	b.n	800d1be <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	f023 0003 	bic.w	r0, r3, #3
 800d1d6:	4408      	add	r0, r1
 800d1d8:	4288      	cmp	r0, r1
 800d1da:	4614      	mov	r4, r2
 800d1dc:	d904      	bls.n	800d1e8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d1de:	6824      	ldr	r4, [r4, #0]
 800d1e0:	3204      	adds	r2, #4
 800d1e2:	f841 4b04 	str.w	r4, [r1], #4
 800d1e6:	e7f7      	b.n	800d1d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d1e8:	f003 0303 	and.w	r3, r3, #3
 800d1ec:	3a01      	subs	r2, #1
 800d1ee:	440b      	add	r3, r1
 800d1f0:	428b      	cmp	r3, r1
 800d1f2:	d90c      	bls.n	800d20e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d1f4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d1f8:	f801 0b01 	strb.w	r0, [r1], #1
 800d1fc:	e7f8      	b.n	800d1f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d1fe:	0790      	lsls	r0, r2, #30
 800d200:	d0e7      	beq.n	800d1d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d202:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d206:	3b02      	subs	r3, #2
 800d208:	f821 0b02 	strh.w	r0, [r1], #2
 800d20c:	e7e1      	b.n	800d1d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d20e:	2001      	movs	r0, #1
 800d210:	bd10      	pop	{r4, pc}

0800d212 <_ZN8touchgfx3HAL7noTouchEv>:
 800d212:	b510      	push	{r4, lr}
 800d214:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d218:	4604      	mov	r4, r0
 800d21a:	b153      	cbz	r3, 800d232 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d21c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d220:	2101      	movs	r1, #1
 800d222:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800d226:	301c      	adds	r0, #28
 800d228:	f010 fb00 	bl	801d82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d22c:	2300      	movs	r3, #0
 800d22e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d232:	bd10      	pop	{r4, pc}

0800d234 <_ZN8touchgfx3HAL3lcdEv>:
 800d234:	4b04      	ldr	r3, [pc, #16]	; (800d248 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d23c:	b10a      	cbz	r2, 800d242 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800d23e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d240:	b900      	cbnz	r0, 800d244 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800d242:	6898      	ldr	r0, [r3, #8]
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	2400f4a4 	.word	0x2400f4a4

0800d24c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d250:	b085      	sub	sp, #20
 800d252:	4604      	mov	r4, r0
 800d254:	2000      	movs	r0, #0
 800d256:	4699      	mov	r9, r3
 800d258:	ad04      	add	r5, sp, #16
 800d25a:	460f      	mov	r7, r1
 800d25c:	4690      	mov	r8, r2
 800d25e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d262:	69a0      	ldr	r0, [r4, #24]
 800d264:	6806      	ldr	r6, [r0, #0]
 800d266:	9501      	str	r5, [sp, #4]
 800d268:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d26c:	9500      	str	r5, [sp, #0]
 800d26e:	6835      	ldr	r5, [r6, #0]
 800d270:	47a8      	blx	r5
 800d272:	4d10      	ldr	r5, [pc, #64]	; (800d2b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800d274:	4606      	mov	r6, r0
 800d276:	f8a5 9000 	strh.w	r9, [r5]
 800d27a:	f7ff ffdb 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d27e:	6803      	ldr	r3, [r0, #0]
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	4798      	blx	r3
 800d284:	b128      	cbz	r0, 800d292 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800d286:	2801      	cmp	r0, #1
 800d288:	d00b      	beq.n	800d2a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800d28a:	4630      	mov	r0, r6
 800d28c:	b005      	add	sp, #20
 800d28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d292:	882b      	ldrh	r3, [r5, #0]
 800d294:	fb08 7203 	mla	r2, r8, r3, r7
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d29e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d2a0:	e7f3      	b.n	800d28a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d2a2:	882a      	ldrh	r2, [r5, #0]
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	fb08 7202 	mla	r2, r8, r2, r7
 800d2aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d2ae:	1a9a      	subs	r2, r3, r2
 800d2b0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d2b2:	e7ea      	b.n	800d28a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d2b4:	2400f49e 	.word	0x2400f49e

0800d2b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ba:	b08b      	sub	sp, #44	; 0x2c
 800d2bc:	4617      	mov	r7, r2
 800d2be:	4604      	mov	r4, r0
 800d2c0:	460e      	mov	r6, r1
 800d2c2:	461d      	mov	r5, r3
 800d2c4:	f7ff ffb6 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d2c8:	6803      	ldr	r3, [r0, #0]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	4798      	blx	r3
 800d2ce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d2d2:	9007      	str	r0, [sp, #28]
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	6822      	ldr	r2, [r4, #0]
 800d2d8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d2dc:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d2de:	4620      	mov	r0, r4
 800d2e0:	881b      	ldrh	r3, [r3, #0]
 800d2e2:	9306      	str	r3, [sp, #24]
 800d2e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d2e8:	9305      	str	r3, [sp, #20]
 800d2ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d2f4:	9303      	str	r3, [sp, #12]
 800d2f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d2fa:	9302      	str	r3, [sp, #8]
 800d2fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d300:	e9cd 5300 	strd	r5, r3, [sp]
 800d304:	463b      	mov	r3, r7
 800d306:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d308:	2200      	movs	r2, #0
 800d30a:	47a8      	blx	r5
 800d30c:	b00b      	add	sp, #44	; 0x2c
 800d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d310:	2400f49e 	.word	0x2400f49e

0800d314 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d318:	4698      	mov	r8, r3
 800d31a:	6803      	ldr	r3, [r0, #0]
 800d31c:	b08b      	sub	sp, #44	; 0x2c
 800d31e:	4617      	mov	r7, r2
 800d320:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d322:	460e      	mov	r6, r1
 800d324:	4b13      	ldr	r3, [pc, #76]	; (800d374 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d326:	4604      	mov	r4, r0
 800d328:	f8b3 9000 	ldrh.w	r9, [r3]
 800d32c:	f7ff ff82 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d330:	6803      	ldr	r3, [r0, #0]
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	4798      	blx	r3
 800d336:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d33a:	2200      	movs	r2, #0
 800d33c:	4631      	mov	r1, r6
 800d33e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d342:	2302      	movs	r3, #2
 800d344:	4620      	mov	r0, r4
 800d346:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d34a:	2301      	movs	r3, #1
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d35e:	9302      	str	r3, [sp, #8]
 800d360:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d364:	e9cd 8300 	strd	r8, r3, [sp]
 800d368:	463b      	mov	r3, r7
 800d36a:	47a8      	blx	r5
 800d36c:	b00b      	add	sp, #44	; 0x2c
 800d36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d372:	bf00      	nop
 800d374:	2400f49e 	.word	0x2400f49e

0800d378 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d37c:	4698      	mov	r8, r3
 800d37e:	6803      	ldr	r3, [r0, #0]
 800d380:	b087      	sub	sp, #28
 800d382:	460e      	mov	r6, r1
 800d384:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d386:	4617      	mov	r7, r2
 800d388:	4b0f      	ldr	r3, [pc, #60]	; (800d3c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d38a:	4604      	mov	r4, r0
 800d38c:	f8b3 9000 	ldrh.w	r9, [r3]
 800d390:	f7ff ff50 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d394:	6803      	ldr	r3, [r0, #0]
 800d396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d398:	4798      	blx	r3
 800d39a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d39e:	463a      	mov	r2, r7
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800d3a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d3aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	9302      	str	r3, [sp, #8]
 800d3b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	4643      	mov	r3, r8
 800d3c0:	47a8      	blx	r5
 800d3c2:	b007      	add	sp, #28
 800d3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3c8:	2400f49e 	.word	0x2400f49e

0800d3cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	b08f      	sub	sp, #60	; 0x3c
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	4691      	mov	r9, r2
 800d3da:	461e      	mov	r6, r3
 800d3dc:	f008 f86e 	bl	80154bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	f000 809d 	beq.w	800d520 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800d3e6:	6823      	ldr	r3, [r4, #0]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f8df b198 	ldr.w	fp, [pc, #408]	; 800d584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d3ee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f4:	4798      	blx	r3
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800d588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800d3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d400:	4798      	blx	r3
 800d402:	f8bb 3000 	ldrh.w	r3, [fp]
 800d406:	4f5c      	ldr	r7, [pc, #368]	; (800d578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	f8ba 3000 	ldrh.w	r3, [sl]
 800d40e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d412:	4640      	mov	r0, r8
 800d414:	9302      	str	r3, [sp, #8]
 800d416:	883b      	ldrh	r3, [r7, #0]
 800d418:	9303      	str	r3, [sp, #12]
 800d41a:	4b58      	ldr	r3, [pc, #352]	; (800d57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d41c:	881a      	ldrh	r2, [r3, #0]
 800d41e:	9305      	str	r3, [sp, #20]
 800d420:	9204      	str	r2, [sp, #16]
 800d422:	f008 f98f 	bl	8015744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d426:	8038      	strh	r0, [r7, #0]
 800d428:	4640      	mov	r0, r8
 800d42a:	f008 f9bf 	bl	80157ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d42e:	9b05      	ldr	r3, [sp, #20]
 800d430:	b280      	uxth	r0, r0
 800d432:	8018      	strh	r0, [r3, #0]
 800d434:	4b52      	ldr	r3, [pc, #328]	; (800d580 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d174      	bne.n	800d526 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800d43c:	883b      	ldrh	r3, [r7, #0]
 800d43e:	f8aa 0000 	strh.w	r0, [sl]
 800d442:	f8ab 3000 	strh.w	r3, [fp]
 800d446:	4648      	mov	r0, r9
 800d448:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d44c:	f008 f836 	bl	80154bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d450:	2200      	movs	r2, #0
 800d452:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d456:	4611      	mov	r1, r2
 800d458:	4628      	mov	r0, r5
 800d45a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d45e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d462:	f7f5 fb76 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
 800d466:	2301      	movs	r3, #1
 800d468:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d46c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d470:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	dd5c      	ble.n	800d532 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800d478:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dd58      	ble.n	800d532 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800d480:	462a      	mov	r2, r5
 800d482:	ab0a      	add	r3, sp, #40	; 0x28
 800d484:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d488:	6851      	ldr	r1, [r2, #4]
 800d48a:	c303      	stmia	r3!, {r0, r1}
 800d48c:	4631      	mov	r1, r6
 800d48e:	a80a      	add	r0, sp, #40	; 0x28
 800d490:	f7ff fc00 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800d494:	4b38      	ldr	r3, [pc, #224]	; (800d578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d496:	2100      	movs	r1, #0
 800d498:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d49c:	4b37      	ldr	r3, [pc, #220]	; (800d57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d49e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d4a2:	aa0a      	add	r2, sp, #40	; 0x28
 800d4a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d4a8:	910c      	str	r1, [sp, #48]	; 0x30
 800d4aa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d4ae:	ab08      	add	r3, sp, #32
 800d4b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	a90c      	add	r1, sp, #48	; 0x30
 800d4bc:	f7ff fbea 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800d4c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d13c      	bne.n	800d540 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800d4c6:	2000      	movs	r0, #0
 800d4c8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d4cc:	2600      	movs	r6, #0
 800d4ce:	696b      	ldr	r3, [r5, #20]
 800d4d0:	a908      	add	r1, sp, #32
 800d4d2:	682a      	ldr	r2, [r5, #0]
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	9305      	str	r3, [sp, #20]
 800d4d8:	616e      	str	r6, [r5, #20]
 800d4da:	6892      	ldr	r2, [r2, #8]
 800d4dc:	4790      	blx	r2
 800d4de:	9b05      	ldr	r3, [sp, #20]
 800d4e0:	4652      	mov	r2, sl
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	616b      	str	r3, [r5, #20]
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d4ec:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d4f0:	f7f5 fb2f 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
 800d4f4:	9a01      	ldr	r2, [sp, #4]
 800d4f6:	4b23      	ldr	r3, [pc, #140]	; (800d584 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	801a      	strh	r2, [r3, #0]
 800d4fc:	9a02      	ldr	r2, [sp, #8]
 800d4fe:	4b22      	ldr	r3, [pc, #136]	; (800d588 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800d500:	801a      	strh	r2, [r3, #0]
 800d502:	9a03      	ldr	r2, [sp, #12]
 800d504:	4b1c      	ldr	r3, [pc, #112]	; (800d578 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d506:	801a      	strh	r2, [r3, #0]
 800d508:	4b1c      	ldr	r3, [pc, #112]	; (800d57c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d50a:	9a04      	ldr	r2, [sp, #16]
 800d50c:	801a      	strh	r2, [r3, #0]
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d516:	4798      	blx	r3
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	4620      	mov	r0, r4
 800d51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d51e:	4798      	blx	r3
 800d520:	b00f      	add	sp, #60	; 0x3c
 800d522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d526:	883b      	ldrh	r3, [r7, #0]
 800d528:	f8ab 0000 	strh.w	r0, [fp]
 800d52c:	f8aa 3000 	strh.w	r3, [sl]
 800d530:	e789      	b.n	800d446 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800d532:	462a      	mov	r2, r5
 800d534:	ab0a      	add	r3, sp, #40	; 0x28
 800d536:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d53a:	6851      	ldr	r1, [r2, #4]
 800d53c:	c303      	stmia	r3!, {r0, r1}
 800d53e:	e7a9      	b.n	800d494 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800d540:	a807      	add	r0, sp, #28
 800d542:	f008 fa37 	bl	80159b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d546:	4606      	mov	r6, r0
 800d548:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d54a:	6803      	ldr	r3, [r0, #0]
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	4798      	blx	r3
 800d550:	4286      	cmp	r6, r0
 800d552:	d1b8      	bne.n	800d4c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d554:	f7ff fe6e 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d558:	6803      	ldr	r3, [r0, #0]
 800d55a:	4606      	mov	r6, r0
 800d55c:	a807      	add	r0, sp, #28
 800d55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f008 fa27 	bl	80159b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d566:	9b05      	ldr	r3, [sp, #20]
 800d568:	4601      	mov	r1, r0
 800d56a:	4630      	mov	r0, r6
 800d56c:	4798      	blx	r3
 800d56e:	f080 0001 	eor.w	r0, r0, #1
 800d572:	b2c0      	uxtb	r0, r0
 800d574:	e7a8      	b.n	800d4c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800d576:	bf00      	nop
 800d578:	2400f498 	.word	0x2400f498
 800d57c:	2400f49a 	.word	0x2400f49a
 800d580:	2400f49c 	.word	0x2400f49c
 800d584:	2400f49e 	.word	0x2400f49e
 800d588:	2400f4a0 	.word	0x2400f4a0

0800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d58c:	4b07      	ldr	r3, [pc, #28]	; (800d5ac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d58e:	b510      	push	{r4, lr}
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	4604      	mov	r4, r0
 800d594:	b13b      	cbz	r3, 800d5a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d596:	6803      	ldr	r3, [r0, #0]
 800d598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d59a:	4798      	blx	r3
 800d59c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d59e:	4283      	cmp	r3, r0
 800d5a0:	d101      	bne.n	800d5a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d5a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d5a8:	e7fc      	b.n	800d5a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d5aa:	bf00      	nop
 800d5ac:	2400f4a2 	.word	0x2400f4a2

0800d5b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	461d      	mov	r5, r3
 800d5b6:	b08a      	sub	sp, #40	; 0x28
 800d5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5bc:	4690      	mov	r8, r2
 800d5be:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800d5c2:	2400      	movs	r4, #0
 800d5c4:	4607      	mov	r7, r0
 800d5c6:	fb06 8505 	mla	r5, r6, r5, r8
 800d5ca:	9404      	str	r4, [sp, #16]
 800d5cc:	f88d 4020 	strb.w	r4, [sp, #32]
 800d5d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d5d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d5d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d5dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d5e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d5e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d5e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d5ec:	f7ff ffce 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d5f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d5fa:	a901      	add	r1, sp, #4
 800d5fc:	9505      	str	r5, [sp, #20]
 800d5fe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800d602:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800d606:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800d60a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800d60e:	6803      	ldr	r3, [r0, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	4798      	blx	r3
 800d614:	b00a      	add	sp, #40	; 0x28
 800d616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d61a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800d61a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d61e:	b08b      	sub	sp, #44	; 0x2c
 800d620:	2400      	movs	r4, #0
 800d622:	4691      	mov	r9, r2
 800d624:	461d      	mov	r5, r3
 800d626:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800d62a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d62e:	4688      	mov	r8, r1
 800d630:	4607      	mov	r7, r0
 800d632:	9404      	str	r4, [sp, #16]
 800d634:	fb06 9505 	mla	r5, r6, r5, r9
 800d638:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d63c:	f7ff ffa6 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d640:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d644:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d64e:	a901      	add	r1, sp, #4
 800d650:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d654:	9505      	str	r5, [sp, #20]
 800d656:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d65a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800d65e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800d662:	f8cd 8010 	str.w	r8, [sp, #16]
 800d666:	f8ad 4020 	strh.w	r4, [sp, #32]
 800d66a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800d66e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800d672:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800d676:	6803      	ldr	r3, [r0, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	4798      	blx	r3
 800d67c:	b00b      	add	sp, #44	; 0x2c
 800d67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d684 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d688:	b08a      	sub	sp, #40	; 0x28
 800d68a:	4698      	mov	r8, r3
 800d68c:	2300      	movs	r3, #0
 800d68e:	4606      	mov	r6, r0
 800d690:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800d694:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800d698:	2d0b      	cmp	r5, #11
 800d69a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800d69e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800d6a2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800d6a6:	9304      	str	r3, [sp, #16]
 800d6a8:	d137      	bne.n	800d71a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800d6aa:	2380      	movs	r3, #128	; 0x80
 800d6ac:	f88d 0020 	strb.w	r0, [sp, #32]
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	9203      	str	r2, [sp, #12]
 800d6b4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d6b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d6bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d6c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d6c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d6c8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d6cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d6d0:	f7ff ff5c 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d6d4:	2c0b      	cmp	r4, #11
 800d6d6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d6da:	f8ad 701e 	strh.w	r7, [sp, #30]
 800d6de:	bf94      	ite	ls
 800d6e0:	4b19      	ldrls	r3, [pc, #100]	; (800d748 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800d6e2:	2100      	movhi	r1, #0
 800d6e4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800d6e8:	bf98      	it	ls
 800d6ea:	5d19      	ldrbls	r1, [r3, r4]
 800d6ec:	fb02 8307 	mla	r3, r2, r7, r8
 800d6f0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800d6f4:	10c9      	asrs	r1, r1, #3
 800d6f6:	fb01 0003 	mla	r0, r1, r3, r0
 800d6fa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800d6fe:	a901      	add	r1, sp, #4
 800d700:	9005      	str	r0, [sp, #20]
 800d702:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800d706:	2300      	movs	r3, #0
 800d708:	6870      	ldr	r0, [r6, #4]
 800d70a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d70e:	6803      	ldr	r3, [r0, #0]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	4798      	blx	r3
 800d714:	b00a      	add	sp, #40	; 0x28
 800d716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d71a:	2d02      	cmp	r5, #2
 800d71c:	d109      	bne.n	800d732 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800d71e:	28ff      	cmp	r0, #255	; 0xff
 800d720:	d105      	bne.n	800d72e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800d722:	f1bc 0f00 	cmp.w	ip, #0
 800d726:	bf14      	ite	ne
 800d728:	2340      	movne	r3, #64	; 0x40
 800d72a:	2320      	moveq	r3, #32
 800d72c:	e7be      	b.n	800d6ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d72e:	2340      	movs	r3, #64	; 0x40
 800d730:	e7bc      	b.n	800d6ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d732:	28ff      	cmp	r0, #255	; 0xff
 800d734:	d105      	bne.n	800d742 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800d736:	f1bc 0f00 	cmp.w	ip, #0
 800d73a:	bf14      	ite	ne
 800d73c:	2304      	movne	r3, #4
 800d73e:	2301      	moveq	r3, #1
 800d740:	e7b4      	b.n	800d6ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d742:	2304      	movs	r3, #4
 800d744:	e7b2      	b.n	800d6ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800d746:	bf00      	nop
 800d748:	08021c60 	.word	0x08021c60

0800d74c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d750:	b08b      	sub	sp, #44	; 0x2c
 800d752:	461d      	mov	r5, r3
 800d754:	2400      	movs	r4, #0
 800d756:	4688      	mov	r8, r1
 800d758:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800d75c:	4693      	mov	fp, r2
 800d75e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800d762:	4607      	mov	r7, r0
 800d764:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800d768:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800d76c:	9404      	str	r4, [sp, #16]
 800d76e:	bf14      	ite	ne
 800d770:	2308      	movne	r3, #8
 800d772:	2302      	moveq	r3, #2
 800d774:	fb05 b50a 	mla	r5, r5, sl, fp
 800d778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d77c:	f7ff ff06 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d780:	2e0b      	cmp	r6, #11
 800d782:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800d786:	a901      	add	r1, sp, #4
 800d788:	bf98      	it	ls
 800d78a:	4b13      	ldrls	r3, [pc, #76]	; (800d7d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800d78c:	f8ad a01e 	strh.w	sl, [sp, #30]
 800d790:	bf98      	it	ls
 800d792:	5d9c      	ldrbls	r4, [r3, r6]
 800d794:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d798:	10e4      	asrs	r4, r4, #3
 800d79a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d79e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d7a2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d7a6:	fb04 0405 	mla	r4, r4, r5, r0
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9405      	str	r4, [sp, #20]
 800d7b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d7b8:	f88d 9020 	strb.w	r9, [sp, #32]
 800d7bc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800d7c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800d7c4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800d7c8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800d7cc:	6803      	ldr	r3, [r0, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	4798      	blx	r3
 800d7d2:	b00b      	add	sp, #44	; 0x2c
 800d7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d8:	08021c60 	.word	0x08021c60

0800d7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800d7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e0:	461e      	mov	r6, r3
 800d7e2:	4b0a      	ldr	r3, [pc, #40]	; (800d80c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	4690      	mov	r8, r2
 800d7e8:	881d      	ldrh	r5, [r3, #0]
 800d7ea:	f7ff fd23 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d7ee:	6803      	ldr	r3, [r0, #0]
 800d7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f2:	4798      	blx	r3
 800d7f4:	280b      	cmp	r0, #11
 800d7f6:	bf96      	itet	ls
 800d7f8:	4b05      	ldrls	r3, [pc, #20]	; (800d810 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800d7fa:	2400      	movhi	r4, #0
 800d7fc:	5c1c      	ldrbls	r4, [r3, r0]
 800d7fe:	fb08 7005 	mla	r0, r8, r5, r7
 800d802:	10e4      	asrs	r4, r4, #3
 800d804:	fb04 6000 	mla	r0, r4, r0, r6
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	2400f49e 	.word	0x2400f49e
 800d810:	08021c60 	.word	0x08021c60

0800d814 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800d814:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d816:	b08b      	sub	sp, #44	; 0x2c
 800d818:	461f      	mov	r7, r3
 800d81a:	4604      	mov	r4, r0
 800d81c:	4616      	mov	r6, r2
 800d81e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800d822:	2500      	movs	r5, #0
 800d824:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d828:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d82c:	9504      	str	r5, [sp, #16]
 800d82e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d832:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d836:	f8ad 301a 	strh.w	r3, [sp, #26]
 800d83a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d83e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d842:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d846:	f88d 3020 	strb.w	r3, [sp, #32]
 800d84a:	f7ff fe9f 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d84e:	463a      	mov	r2, r7
 800d850:	4631      	mov	r1, r6
 800d852:	4603      	mov	r3, r0
 800d854:	4620      	mov	r0, r4
 800d856:	f7ff ffc1 	bl	800d7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d85a:	4b0e      	ldr	r3, [pc, #56]	; (800d894 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800d85c:	9005      	str	r0, [sp, #20]
 800d85e:	881b      	ldrh	r3, [r3, #0]
 800d860:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d864:	f7ff fce6 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d868:	6803      	ldr	r3, [r0, #0]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	4798      	blx	r3
 800d86e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d870:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800d874:	a901      	add	r1, sp, #4
 800d876:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800d87a:	9304      	str	r3, [sp, #16]
 800d87c:	6860      	ldr	r0, [r4, #4]
 800d87e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d882:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800d886:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800d88a:	6803      	ldr	r3, [r0, #0]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	4798      	blx	r3
 800d890:	b00b      	add	sp, #44	; 0x2c
 800d892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d894:	2400f49e 	.word	0x2400f49e

0800d898 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800d898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d89a:	b08d      	sub	sp, #52	; 0x34
 800d89c:	2501      	movs	r5, #1
 800d89e:	4604      	mov	r4, r0
 800d8a0:	466b      	mov	r3, sp
 800d8a2:	9503      	str	r5, [sp, #12]
 800d8a4:	e883 0006 	stmia.w	r3, {r1, r2}
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f8bd 6000 	ldrh.w	r6, [sp]
 800d8ae:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800d8b2:	9306      	str	r3, [sp, #24]
 800d8b4:	6803      	ldr	r3, [r0, #0]
 800d8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b8:	4798      	blx	r3
 800d8ba:	463a      	mov	r2, r7
 800d8bc:	4631      	mov	r1, r6
 800d8be:	4603      	mov	r3, r0
 800d8c0:	4620      	mov	r0, r4
 800d8c2:	f7ff ff8b 	bl	800d7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d8c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d8c8:	9004      	str	r0, [sp, #16]
 800d8ca:	9307      	str	r3, [sp, #28]
 800d8cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d8d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d8d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d8d8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d8e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d8e8:	f7ff fca4 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d8ec:	6803      	ldr	r3, [r0, #0]
 800d8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f0:	4798      	blx	r3
 800d8f2:	23ff      	movs	r3, #255	; 0xff
 800d8f4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800d8f8:	a903      	add	r1, sp, #12
 800d8fa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800d8fe:	6860      	ldr	r0, [r4, #4]
 800d900:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800d904:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d908:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d90c:	6803      	ldr	r3, [r0, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4798      	blx	r3
 800d912:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d914:	b00d      	add	sp, #52	; 0x34
 800d916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d918:	2400f49e 	.word	0x2400f49e

0800d91c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d920:	b08c      	sub	sp, #48	; 0x30
 800d922:	461e      	mov	r6, r3
 800d924:	2300      	movs	r3, #0
 800d926:	4604      	mov	r4, r0
 800d928:	466d      	mov	r5, sp
 800d92a:	9306      	str	r3, [sp, #24]
 800d92c:	6803      	ldr	r3, [r0, #0]
 800d92e:	e885 0006 	stmia.w	r5, {r1, r2}
 800d932:	2501      	movs	r5, #1
 800d934:	f8bd 7000 	ldrh.w	r7, [sp]
 800d938:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800d93c:	9503      	str	r5, [sp, #12]
 800d93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d940:	4798      	blx	r3
 800d942:	4642      	mov	r2, r8
 800d944:	4639      	mov	r1, r7
 800d946:	4603      	mov	r3, r0
 800d948:	4620      	mov	r0, r4
 800d94a:	f7ff ff47 	bl	800d7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d94e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800d952:	9004      	str	r0, [sp, #16]
 800d954:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d958:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800d95c:	9607      	str	r6, [sp, #28]
 800d95e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800d962:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d96a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d96c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800d970:	f7ff fc60 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800d974:	6803      	ldr	r3, [r0, #0]
 800d976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d978:	4798      	blx	r3
 800d97a:	23ff      	movs	r3, #255	; 0xff
 800d97c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800d980:	a903      	add	r1, sp, #12
 800d982:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800d986:	6860      	ldr	r0, [r4, #4]
 800d988:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800d98c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800d990:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800d994:	6803      	ldr	r3, [r0, #0]
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	4798      	blx	r3
 800d99a:	4630      	mov	r0, r6
 800d99c:	b00c      	add	sp, #48	; 0x30
 800d99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a2:	bf00      	nop
 800d9a4:	2400f49e 	.word	0x2400f49e

0800d9a8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	4605      	mov	r5, r0
 800d9ae:	ac02      	add	r4, sp, #8
 800d9b0:	e884 0006 	stmia.w	r4, {r1, r2}
 800d9b4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800d9b8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800d9bc:	f7ff fde6 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	463a      	mov	r2, r7
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f7ff ff08 	bl	800d7dc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800d9cc:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800d9ce:	682b      	ldr	r3, [r5, #0]
 800d9d0:	8812      	ldrh	r2, [r2, #0]
 800d9d2:	9200      	str	r2, [sp, #0]
 800d9d4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4628      	mov	r0, r5
 800d9da:	e894 0006 	ldmia.w	r4, {r1, r2}
 800d9de:	47b0      	blx	r6
 800d9e0:	b005      	add	sp, #20
 800d9e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e4:	2400f49e 	.word	0x2400f49e

0800d9e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800d9e8:	b570      	push	{r4, r5, r6, lr}
 800d9ea:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	b19b      	cbz	r3, 800da1a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800d9f2:	2002      	movs	r0, #2
 800d9f4:	f7f3 ff1a 	bl	800182c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800da00:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800da0a:	f7ff fdbf 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800da0e:	4601      	mov	r1, r0
 800da10:	4620      	mov	r0, r4
 800da12:	462b      	mov	r3, r5
 800da14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da18:	4718      	bx	r3
 800da1a:	bd70      	pop	{r4, r5, r6, pc}

0800da1c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	4605      	mov	r5, r0
 800da20:	460c      	mov	r4, r1
 800da22:	2003      	movs	r0, #3
 800da24:	b149      	cbz	r1, 800da3a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800da26:	f7f3 fea1 	bl	800176c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800da2a:	6928      	ldr	r0, [r5, #16]
 800da2c:	b168      	cbz	r0, 800da4a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800da2e:	6803      	ldr	r3, [r0, #0]
 800da30:	2101      	movs	r1, #1
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da38:	4718      	bx	r3
 800da3a:	f7f3 fec7 	bl	80017cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800da3e:	6928      	ldr	r0, [r5, #16]
 800da40:	b118      	cbz	r0, 800da4a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800da42:	6803      	ldr	r3, [r0, #0]
 800da44:	4621      	mov	r1, r4
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	e7f4      	b.n	800da34 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800da4a:	bd70      	pop	{r4, r5, r6, pc}

0800da4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800da52:	4604      	mov	r4, r0
 800da54:	460d      	mov	r5, r1
 800da56:	428b      	cmp	r3, r1
 800da58:	d006      	beq.n	800da68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800da5a:	6803      	ldr	r3, [r0, #0]
 800da5c:	b929      	cbnz	r1, 800da6a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800da5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da62:	4798      	blx	r3
 800da64:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800da6e:	e7f8      	b.n	800da62 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800da70 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800da70:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800da72:	b510      	push	{r4, lr}
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	4604      	mov	r4, r0
 800da78:	b95b      	cbnz	r3, 800da92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800da7a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d007      	beq.n	800da92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800da82:	6840      	ldr	r0, [r0, #4]
 800da84:	f000 f92a 	bl	800dcdc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800da88:	b118      	cbz	r0, 800da92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800da8a:	6862      	ldr	r2, [r4, #4]
 800da8c:	7a53      	ldrb	r3, [r2, #9]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d0fc      	beq.n	800da8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800da92:	f7f4 fa19 	bl	8001ec8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800da96:	4620      	mov	r0, r4
 800da98:	2100      	movs	r1, #0
 800da9a:	f7ff ffd7 	bl	800da4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7ff fd74 	bl	800d58c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	bf00      	nop
 800daa8:	2400f4a2 	.word	0x2400f4a2

0800daac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800daac:	b570      	push	{r4, r5, r6, lr}
 800daae:	4604      	mov	r4, r0
 800dab0:	6803      	ldr	r3, [r0, #0]
 800dab2:	b919      	cbnz	r1, 800dabc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800daba:	4718      	bx	r3
 800dabc:	2200      	movs	r2, #0
 800dabe:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 800dac2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800dac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac8:	4798      	blx	r3
 800daca:	4605      	mov	r5, r0
 800dacc:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 800dad0:	4620      	mov	r0, r4
 800dad2:	2101      	movs	r1, #1
 800dad4:	f7ff ffba 	bl	800da4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800dad8:	4628      	mov	r0, r5
 800dada:	bd70      	pop	{r4, r5, r6, pc}

0800dadc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800dadc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800dae0:	1a13      	subs	r3, r2, r0
 800dae2:	4258      	negs	r0, r3
 800dae4:	4158      	adcs	r0, r3
 800dae6:	4770      	bx	lr

0800dae8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800dae8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	bfdc      	itt	le
 800daf2:	6882      	ldrle	r2, [r0, #8]
 800daf4:	189b      	addle	r3, r3, r2
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	bfcc      	ite	gt
 800dafa:	2000      	movgt	r0, #0
 800dafc:	2001      	movle	r0, #1
 800dafe:	4770      	bx	lr

0800db00 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800db00:	6902      	ldr	r2, [r0, #16]
 800db02:	6843      	ldr	r3, [r0, #4]
 800db04:	2024      	movs	r0, #36	; 0x24
 800db06:	fb00 3002 	mla	r0, r0, r2, r3
 800db0a:	4770      	bx	lr

0800db0c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800db0c:	6803      	ldr	r3, [r0, #0]
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	4718      	bx	r3

0800db12 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800db12:	2301      	movs	r3, #1
 800db14:	b570      	push	{r4, r5, r6, lr}
 800db16:	7203      	strb	r3, [r0, #8]
 800db18:	4604      	mov	r4, r0
 800db1a:	6840      	ldr	r0, [r0, #4]
 800db1c:	6803      	ldr	r3, [r0, #0]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	4798      	blx	r3
 800db22:	6803      	ldr	r3, [r0, #0]
 800db24:	4605      	mov	r5, r0
 800db26:	2b40      	cmp	r3, #64	; 0x40
 800db28:	d00c      	beq.n	800db44 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800db2a:	d810      	bhi.n	800db4e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800db2c:	2b04      	cmp	r3, #4
 800db2e:	d01d      	beq.n	800db6c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800db30:	d804      	bhi.n	800db3c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800db32:	2b01      	cmp	r3, #1
 800db34:	d006      	beq.n	800db44 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800db36:	2b02      	cmp	r3, #2
 800db38:	d02c      	beq.n	800db94 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800db3a:	bd70      	pop	{r4, r5, r6, pc}
 800db3c:	2b08      	cmp	r3, #8
 800db3e:	d01d      	beq.n	800db7c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800db40:	2b20      	cmp	r3, #32
 800db42:	d1fa      	bne.n	800db3a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	4620      	mov	r0, r4
 800db48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db4a:	4798      	blx	r3
 800db4c:	e013      	b.n	800db76 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800db4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db52:	d0f7      	beq.n	800db44 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800db54:	d804      	bhi.n	800db60 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800db56:	2b80      	cmp	r3, #128	; 0x80
 800db58:	d0f4      	beq.n	800db44 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800db5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db5e:	e7f0      	b.n	800db42 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800db60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db64:	d0ee      	beq.n	800db44 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800db66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db6a:	e7e5      	b.n	800db38 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800db6c:	6823      	ldr	r3, [r4, #0]
 800db6e:	7f01      	ldrb	r1, [r0, #28]
 800db70:	4620      	mov	r0, r4
 800db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db74:	4798      	blx	r3
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db7a:	e006      	b.n	800db8a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800db7c:	6823      	ldr	r3, [r4, #0]
 800db7e:	7f01      	ldrb	r1, [r0, #28]
 800db80:	4620      	mov	r0, r4
 800db82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db84:	4798      	blx	r3
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db8a:	4629      	mov	r1, r5
 800db8c:	4620      	mov	r0, r4
 800db8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db92:	4718      	bx	r3
 800db94:	6823      	ldr	r3, [r4, #0]
 800db96:	4620      	mov	r0, r4
 800db98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9a:	4798      	blx	r3
 800db9c:	e7f3      	b.n	800db86 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800db9e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800db9e:	4770      	bx	lr

0800dba0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800dba0:	4770      	bx	lr

0800dba2 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800dba2:	4770      	bx	lr

0800dba4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800dba4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	1ad2      	subs	r2, r2, r3
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	bfdc      	itt	le
 800dbb0:	6884      	ldrle	r4, [r0, #8]
 800dbb2:	1912      	addle	r2, r2, r4
 800dbb4:	2a01      	cmp	r2, #1
 800dbb6:	dd16      	ble.n	800dbe6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800dbb8:	6842      	ldr	r2, [r0, #4]
 800dbba:	2424      	movs	r4, #36	; 0x24
 800dbbc:	fb04 2303 	mla	r3, r4, r3, r2
 800dbc0:	f101 0220 	add.w	r2, r1, #32
 800dbc4:	f851 4b04 	ldr.w	r4, [r1], #4
 800dbc8:	4291      	cmp	r1, r2
 800dbca:	f843 4b04 	str.w	r4, [r3], #4
 800dbce:	d1f9      	bne.n	800dbc4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800dbd0:	780a      	ldrb	r2, [r1, #0]
 800dbd2:	701a      	strb	r2, [r3, #0]
 800dbd4:	68c3      	ldr	r3, [r0, #12]
 800dbd6:	6882      	ldr	r2, [r0, #8]
 800dbd8:	f3bf 8f5b 	dmb	ish
 800dbdc:	3301      	adds	r3, #1
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	bfd8      	it	le
 800dbe2:	1a9b      	suble	r3, r3, r2
 800dbe4:	60c3      	str	r3, [r0, #12]
 800dbe6:	bd10      	pop	{r4, pc}

0800dbe8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800dbe8:	6903      	ldr	r3, [r0, #16]
 800dbea:	6882      	ldr	r2, [r0, #8]
 800dbec:	f3bf 8f5b 	dmb	ish
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	bfd8      	it	le
 800dbf6:	1a9b      	suble	r3, r3, r2
 800dbf8:	6103      	str	r3, [r0, #16]
 800dbfa:	4770      	bx	lr

0800dbfc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800dbfc:	b570      	push	{r4, r5, r6, lr}
 800dbfe:	4604      	mov	r4, r0
 800dc00:	460e      	mov	r6, r1
 800dc02:	6860      	ldr	r0, [r4, #4]
 800dc04:	6803      	ldr	r3, [r0, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4798      	blx	r3
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	d1f9      	bne.n	800dc02 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800dc0e:	4d0d      	ldr	r5, [pc, #52]	; (800dc44 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800dc10:	6828      	ldr	r0, [r5, #0]
 800dc12:	6803      	ldr	r3, [r0, #0]
 800dc14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc16:	4798      	blx	r3
 800dc18:	f7f4 f964 	bl	8001ee4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800dc1c:	6828      	ldr	r0, [r5, #0]
 800dc1e:	2101      	movs	r1, #1
 800dc20:	f7ff ff14 	bl	800da4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800dc24:	6860      	ldr	r0, [r4, #4]
 800dc26:	4631      	mov	r1, r6
 800dc28:	6803      	ldr	r3, [r0, #0]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	4798      	blx	r3
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	4620      	mov	r0, r4
 800dc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc34:	4798      	blx	r3
 800dc36:	6828      	ldr	r0, [r5, #0]
 800dc38:	6803      	ldr	r3, [r0, #0]
 800dc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc40:	4718      	bx	r3
 800dc42:	bf00      	nop
 800dc44:	2400f4a4 	.word	0x2400f4a4

0800dc48 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800dc48:	b508      	push	{r3, lr}
 800dc4a:	f7f4 f93d 	bl	8001ec8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800dc4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dc52:	f7f4 b941 	b.w	8001ed8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800dc56 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800dc56:	b510      	push	{r4, lr}
 800dc58:	4604      	mov	r4, r0
 800dc5a:	2114      	movs	r1, #20
 800dc5c:	f010 f96f 	bl	801df3e <_ZdlPvj>
 800dc60:	4620      	mov	r0, r4
 800dc62:	bd10      	pop	{r4, pc}

0800dc64 <_ZN8touchgfx13DMA_Interface5startEv>:
 800dc64:	b510      	push	{r4, lr}
 800dc66:	4604      	mov	r4, r0
 800dc68:	6840      	ldr	r0, [r0, #4]
 800dc6a:	6803      	ldr	r3, [r0, #0]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4798      	blx	r3
 800dc70:	b948      	cbnz	r0, 800dc86 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dc72:	7a63      	ldrb	r3, [r4, #9]
 800dc74:	b13b      	cbz	r3, 800dc86 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dc76:	7a23      	ldrb	r3, [r4, #8]
 800dc78:	b92b      	cbnz	r3, 800dc86 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc84:	4718      	bx	r3
 800dc86:	bd10      	pop	{r4, pc}

0800dc88 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800dc88:	b570      	push	{r4, r5, r6, lr}
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	6840      	ldr	r0, [r0, #4]
 800dc8e:	6803      	ldr	r3, [r0, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4798      	blx	r3
 800dc94:	4605      	mov	r5, r0
 800dc96:	b930      	cbnz	r0, 800dca6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800dc98:	7a23      	ldrb	r3, [r4, #8]
 800dc9a:	b123      	cbz	r3, 800dca6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800dc9c:	6860      	ldr	r0, [r4, #4]
 800dc9e:	6803      	ldr	r3, [r0, #0]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	4798      	blx	r3
 800dca4:	7225      	strb	r5, [r4, #8]
 800dca6:	6860      	ldr	r0, [r4, #4]
 800dca8:	6803      	ldr	r3, [r0, #0]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4798      	blx	r3
 800dcae:	b928      	cbnz	r0, 800dcbc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcba:	4718      	bx	r3
 800dcbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcc0:	f7f4 b918 	b.w	8001ef4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800dcc4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800dcc4:	b510      	push	{r4, lr}
 800dcc6:	6082      	str	r2, [r0, #8]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	4c03      	ldr	r4, [pc, #12]	; (800dcd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800dccc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800dcd0:	e9c0 4100 	strd	r4, r1, [r0]
 800dcd4:	bd10      	pop	{r4, pc}
 800dcd6:	bf00      	nop
 800dcd8:	08021c74 	.word	0x08021c74

0800dcdc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800dcdc:	6840      	ldr	r0, [r0, #4]
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4718      	bx	r3

0800dce4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800dce4:	0c0b      	lsrs	r3, r1, #16
 800dce6:	60c1      	str	r1, [r0, #12]
 800dce8:	7481      	strb	r1, [r0, #18]
 800dcea:	7403      	strb	r3, [r0, #16]
 800dcec:	0a0b      	lsrs	r3, r1, #8
 800dcee:	7443      	strb	r3, [r0, #17]
 800dcf0:	4770      	bx	lr

0800dcf2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800dcf2:	f1a0 0008 	sub.w	r0, r0, #8
 800dcf6:	e7f5      	b.n	800dce4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0800dcf8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800dcf8:	b508      	push	{r3, lr}
 800dcfa:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800dcfc:	6818      	ldr	r0, [r3, #0]
 800dcfe:	6803      	ldr	r3, [r0, #0]
 800dd00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dd04:	4798      	blx	r3
 800dd06:	1e43      	subs	r3, r0, #1
 800dd08:	4258      	negs	r0, r3
 800dd0a:	4158      	adcs	r0, r3
 800dd0c:	bd08      	pop	{r3, pc}
 800dd0e:	bf00      	nop
 800dd10:	2400f4a4 	.word	0x2400f4a4

0800dd14 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800dd14:	4770      	bx	lr

0800dd16 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800dd16:	3808      	subs	r0, #8
 800dd18:	4770      	bx	lr

0800dd1a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800dd1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dd1e:	b410      	push	{r4}
 800dd20:	188c      	adds	r4, r1, r2
 800dd22:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800dd26:	68c2      	ldr	r2, [r0, #12]
 800dd28:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd32:	f7f4 ba95 	b.w	8002260 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800dd36 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800dd36:	f7f4 ba89 	b.w	800224c <_ZN8touchgfx5paint8tearDownEv>

0800dd3a <_ZN8touchgfx13PainterRGB888D0Ev>:
 800dd3a:	b510      	push	{r4, lr}
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	2114      	movs	r1, #20
 800dd40:	f010 f8fd 	bl	801df3e <_ZdlPvj>
 800dd44:	4620      	mov	r0, r4
 800dd46:	bd10      	pop	{r4, pc}

0800dd48 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800dd48:	f1a0 0008 	sub.w	r0, r0, #8
 800dd4c:	e7f5      	b.n	800dd3a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800dd50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800dd50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd52:	6803      	ldr	r3, [r0, #0]
 800dd54:	460d      	mov	r5, r1
 800dd56:	4604      	mov	r4, r0
 800dd58:	4601      	mov	r1, r0
 800dd5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd5c:	a802      	add	r0, sp, #8
 800dd5e:	4798      	blx	r3
 800dd60:	6828      	ldr	r0, [r5, #0]
 800dd62:	6869      	ldr	r1, [r5, #4]
 800dd64:	466b      	mov	r3, sp
 800dd66:	c303      	stmia	r3!, {r0, r1}
 800dd68:	4668      	mov	r0, sp
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	f7fe ff92 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800dd70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dd72:	b1a8      	cbz	r0, 800dda0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800dd74:	6803      	ldr	r3, [r0, #0]
 800dd76:	1d21      	adds	r1, r4, #4
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	4798      	blx	r3
 800dd7c:	b180      	cbz	r0, 800dda0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800dd7e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	dd0c      	ble.n	800dda0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800dd86:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800dd8a:	2d00      	cmp	r5, #0
 800dd8c:	dd08      	ble.n	800dda0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800dd8e:	4a2d      	ldr	r2, [pc, #180]	; (800de44 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 800dd90:	7812      	ldrb	r2, [r2, #0]
 800dd92:	b13a      	cbz	r2, 800dda4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 800dd94:	2a01      	cmp	r2, #1
 800dd96:	d02d      	beq.n	800ddf4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 800dd98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	4798      	blx	r3
 800dda0:	b004      	add	sp, #16
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dda8:	441d      	add	r5, r3
 800ddaa:	b2ad      	uxth	r5, r5
 800ddac:	b22e      	sxth	r6, r5
 800ddae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800ddb2:	42b3      	cmp	r3, r6
 800ddb4:	daf0      	bge.n	800dd98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	4669      	mov	r1, sp
 800ddba:	4620      	mov	r0, r4
 800ddbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbe:	4798      	blx	r3
 800ddc0:	b940      	cbnz	r0, 800ddd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800ddc2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d004      	beq.n	800ddd4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800ddca:	3301      	adds	r3, #1
 800ddcc:	105b      	asrs	r3, r3, #1
 800ddce:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ddd2:	e7f0      	b.n	800ddb6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 800ddd4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ddd8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dddc:	4413      	add	r3, r2
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	441a      	add	r2, r3
 800dde2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dde6:	b212      	sxth	r2, r2
 800dde8:	4296      	cmp	r6, r2
 800ddea:	dae0      	bge.n	800ddae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800ddec:	1aeb      	subs	r3, r5, r3
 800ddee:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ddf2:	e7dc      	b.n	800ddae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800ddf4:	f8bd 5000 	ldrh.w	r5, [sp]
 800ddf8:	441d      	add	r5, r3
 800ddfa:	b2ad      	uxth	r5, r5
 800ddfc:	b22e      	sxth	r6, r5
 800ddfe:	f9bd 3000 	ldrsh.w	r3, [sp]
 800de02:	42b3      	cmp	r3, r6
 800de04:	dac8      	bge.n	800dd98 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	4669      	mov	r1, sp
 800de0a:	4620      	mov	r0, r4
 800de0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de0e:	4798      	blx	r3
 800de10:	b940      	cbnz	r0, 800de24 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800de12:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d004      	beq.n	800de24 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800de1a:	3301      	adds	r3, #1
 800de1c:	105b      	asrs	r3, r3, #1
 800de1e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800de22:	e7f0      	b.n	800de06 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 800de24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800de28:	f8bd 3000 	ldrh.w	r3, [sp]
 800de2c:	4413      	add	r3, r2
 800de2e:	b29b      	uxth	r3, r3
 800de30:	441a      	add	r2, r3
 800de32:	f8ad 3000 	strh.w	r3, [sp]
 800de36:	b212      	sxth	r2, r2
 800de38:	4296      	cmp	r6, r2
 800de3a:	dae0      	bge.n	800ddfe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800de3c:	1aeb      	subs	r3, r5, r3
 800de3e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800de42:	e7dc      	b.n	800ddfe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800de44:	2400f49c 	.word	0x2400f49c

0800de48 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800de48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	4604      	mov	r4, r0
 800de4e:	4601      	mov	r1, r0
 800de50:	4668      	mov	r0, sp
 800de52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de54:	4798      	blx	r3
 800de56:	2100      	movs	r1, #0
 800de58:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800de5c:	4668      	mov	r0, sp
 800de5e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800de62:	9102      	str	r1, [sp, #8]
 800de64:	a902      	add	r1, sp, #8
 800de66:	f8ad 200c 	strh.w	r2, [sp, #12]
 800de6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800de6e:	f7fe ff11 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4669      	mov	r1, sp
 800de76:	4620      	mov	r0, r4
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	4798      	blx	r3
 800de7c:	b004      	add	sp, #16
 800de7e:	bd10      	pop	{r4, pc}

0800de80 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800de80:	2101      	movs	r1, #1
 800de82:	2200      	movs	r2, #0
 800de84:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800de88:	490a      	ldr	r1, [pc, #40]	; (800deb4 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800de8a:	8082      	strh	r2, [r0, #4]
 800de8c:	6001      	str	r1, [r0, #0]
 800de8e:	21ff      	movs	r1, #255	; 0xff
 800de90:	80c2      	strh	r2, [r0, #6]
 800de92:	8102      	strh	r2, [r0, #8]
 800de94:	8142      	strh	r2, [r0, #10]
 800de96:	8182      	strh	r2, [r0, #12]
 800de98:	81c2      	strh	r2, [r0, #14]
 800de9a:	8202      	strh	r2, [r0, #16]
 800de9c:	8242      	strh	r2, [r0, #18]
 800de9e:	61c2      	str	r2, [r0, #28]
 800dea0:	8402      	strh	r2, [r0, #32]
 800dea2:	8442      	strh	r2, [r0, #34]	; 0x22
 800dea4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800dea8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800deac:	6282      	str	r2, [r0, #40]	; 0x28
 800deae:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800deb2:	4770      	bx	lr
 800deb4:	08021cd0 	.word	0x08021cd0

0800deb8 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 800deb8:	6301      	str	r1, [r0, #48]	; 0x30
 800deba:	4770      	bx	lr

0800debc <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 800debc:	6341      	str	r1, [r0, #52]	; 0x34
 800debe:	4770      	bx	lr

0800dec0 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800dec0:	b530      	push	{r4, r5, lr}
 800dec2:	460d      	mov	r5, r1
 800dec4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800dec6:	8949      	ldrh	r1, [r1, #10]
 800dec8:	b085      	sub	sp, #20
 800deca:	4604      	mov	r4, r0
 800decc:	1ac9      	subs	r1, r1, r3
 800dece:	6803      	ldr	r3, [r0, #0]
 800ded0:	f10d 0206 	add.w	r2, sp, #6
 800ded4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ded8:	b209      	sxth	r1, r1
 800deda:	4798      	blx	r3
 800dedc:	b1a0      	cbz	r0, 800df08 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800dede:	792b      	ldrb	r3, [r5, #4]
 800dee0:	b993      	cbnz	r3, 800df08 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800dee2:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800dee6:	b178      	cbz	r0, 800df08 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800dee8:	6803      	ldr	r3, [r0, #0]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	4798      	blx	r3
 800deee:	b158      	cbz	r0, 800df08 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800def0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800def4:	aa02      	add	r2, sp, #8
 800def6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800defa:	4621      	mov	r1, r4
 800defc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800df00:	9503      	str	r5, [sp, #12]
 800df02:	6803      	ldr	r3, [r0, #0]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	4798      	blx	r3
 800df08:	b005      	add	sp, #20
 800df0a:	bd30      	pop	{r4, r5, pc}

0800df0c <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 800df0c:	b430      	push	{r4, r5}
 800df0e:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 800df12:	b1cd      	cbz	r5, 800df48 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800df14:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800df18:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800df1c:	3d01      	subs	r5, #1
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800df24:	b139      	cbz	r1, 800df36 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 800df26:	4293      	cmp	r3, r2
 800df28:	f1c2 0100 	rsb	r1, r2, #0
 800df2c:	bfa8      	it	ge
 800df2e:	4613      	movge	r3, r2
 800df30:	428c      	cmp	r4, r1
 800df32:	bfb8      	it	lt
 800df34:	460c      	movlt	r4, r1
 800df36:	1a99      	subs	r1, r3, r2
 800df38:	4422      	add	r2, r4
 800df3a:	4291      	cmp	r1, r2
 800df3c:	d004      	beq.n	800df48 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800df3e:	6803      	ldr	r3, [r0, #0]
 800df40:	bc30      	pop	{r4, r5}
 800df42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800df46:	4718      	bx	r3
 800df48:	bc30      	pop	{r4, r5}
 800df4a:	4770      	bx	lr

0800df4c <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 800df4c:	b410      	push	{r4}
 800df4e:	2300      	movs	r3, #0
 800df50:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800df54:	429a      	cmp	r2, r3
 800df56:	dd0e      	ble.n	800df76 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 800df58:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800df5c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800df60:	428c      	cmp	r4, r1
 800df62:	d106      	bne.n	800df72 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 800df64:	6802      	ldr	r2, [r0, #0]
 800df66:	4619      	mov	r1, r3
 800df68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df6c:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800df70:	4710      	bx	r2
 800df72:	3301      	adds	r3, #1
 800df74:	e7ee      	b.n	800df54 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 800df76:	f04f 30ff 	mov.w	r0, #4294967295
 800df7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 800df80:	428a      	cmp	r2, r1
 800df82:	bfbc      	itt	lt
 800df84:	460b      	movlt	r3, r1
 800df86:	4611      	movlt	r1, r2
 800df88:	b510      	push	{r4, lr}
 800df8a:	bfb8      	it	lt
 800df8c:	461a      	movlt	r2, r3
 800df8e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800df92:	4604      	mov	r4, r0
 800df94:	428b      	cmp	r3, r1
 800df96:	d103      	bne.n	800dfa0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 800df98:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d011      	beq.n	800dfc4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 800dfa0:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800dfa4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800dfa8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800dfac:	f005 fa7d 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800dfb0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800dfb4:	f005 fa79 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800dfb8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800dfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc0:	f005 ba73 	b.w	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800dfc4:	bd10      	pop	{r4, pc}

0800dfc6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 800dfc6:	428a      	cmp	r2, r1
 800dfc8:	bfbc      	itt	lt
 800dfca:	460b      	movlt	r3, r1
 800dfcc:	4611      	movlt	r1, r2
 800dfce:	b510      	push	{r4, lr}
 800dfd0:	bfb8      	it	lt
 800dfd2:	461a      	movlt	r2, r3
 800dfd4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800dfd8:	4604      	mov	r4, r0
 800dfda:	428b      	cmp	r3, r1
 800dfdc:	d103      	bne.n	800dfe6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 800dfde:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d011      	beq.n	800e00a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 800dfe6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 800dfea:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800dfee:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800dff2:	f005 fa5a 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800dff6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800dffa:	f005 fa56 	bl	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800dffe:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800e002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e006:	f005 ba50 	b.w	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>
 800e00a:	bd10      	pop	{r4, pc}

0800e00c <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800e00c:	2300      	movs	r3, #0
 800e00e:	3038      	adds	r0, #56	; 0x38
 800e010:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 800e014:	f005 ba49 	b.w	80134aa <_ZNK8touchgfx8Drawable10invalidateEv>

0800e018 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 800e018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e01c:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e020:	4604      	mov	r4, r0
 800e022:	4688      	mov	r8, r1
 800e024:	4616      	mov	r6, r2
 800e026:	2b00      	cmp	r3, #0
 800e028:	d04c      	beq.n	800e0c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e02a:	6803      	ldr	r3, [r0, #0]
 800e02c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e030:	4798      	blx	r3
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	4605      	mov	r5, r0
 800e036:	4620      	mov	r0, r4
 800e038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e03c:	4798      	blx	r3
 800e03e:	4285      	cmp	r5, r0
 800e040:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800e044:	bfc2      	ittt	gt
 800e046:	b22b      	sxthgt	r3, r5
 800e048:	4605      	movgt	r5, r0
 800e04a:	4618      	movgt	r0, r3
 800e04c:	2300      	movs	r3, #0
 800e04e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800e052:	0099      	lsls	r1, r3, #2
 800e054:	42aa      	cmp	r2, r5
 800e056:	da05      	bge.n	800e064 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e058:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 800e05c:	42bb      	cmp	r3, r7
 800e05e:	da01      	bge.n	800e064 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e060:	3301      	adds	r3, #1
 800e062:	e7f4      	b.n	800e04e <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 800e064:	4282      	cmp	r2, r0
 800e066:	dc2d      	bgt.n	800e0c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e068:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 800e06c:	3301      	adds	r3, #1
 800e06e:	f85c 5001 	ldr.w	r5, [ip, r1]
 800e072:	462a      	mov	r2, r5
 800e074:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800e078:	4288      	cmp	r0, r1
 800e07a:	dd0d      	ble.n	800e098 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e07c:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 800e080:	428b      	cmp	r3, r1
 800e082:	da09      	bge.n	800e098 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e084:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800e088:	3301      	adds	r3, #1
 800e08a:	42bd      	cmp	r5, r7
 800e08c:	bfa8      	it	ge
 800e08e:	463d      	movge	r5, r7
 800e090:	42ba      	cmp	r2, r7
 800e092:	bfb8      	it	lt
 800e094:	463a      	movlt	r2, r7
 800e096:	e7ed      	b.n	800e074 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 800e098:	f1b8 0f00 	cmp.w	r8, #0
 800e09c:	d007      	beq.n	800e0ae <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 800e09e:	42b5      	cmp	r5, r6
 800e0a0:	f1c6 0300 	rsb	r3, r6, #0
 800e0a4:	bfa8      	it	ge
 800e0a6:	4635      	movge	r5, r6
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	bfb8      	it	lt
 800e0ac:	461a      	movlt	r2, r3
 800e0ae:	1ba9      	subs	r1, r5, r6
 800e0b0:	4432      	add	r2, r6
 800e0b2:	4291      	cmp	r1, r2
 800e0b4:	d006      	beq.n	800e0c4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e0b6:	6823      	ldr	r3, [r4, #0]
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c2:	4718      	bx	r3
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0c8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800e0c8:	b530      	push	{r4, r5, lr}
 800e0ca:	790b      	ldrb	r3, [r1, #4]
 800e0cc:	b085      	sub	sp, #20
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	460d      	mov	r5, r1
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d020      	beq.n	800e118 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e0d6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e0d8:	f10d 0206 	add.w	r2, sp, #6
 800e0dc:	88c9      	ldrh	r1, [r1, #6]
 800e0de:	1ac9      	subs	r1, r1, r3
 800e0e0:	6803      	ldr	r3, [r0, #0]
 800e0e2:	b209      	sxth	r1, r1
 800e0e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e0e8:	4798      	blx	r3
 800e0ea:	b1a8      	cbz	r0, 800e118 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e0ec:	792b      	ldrb	r3, [r5, #4]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d812      	bhi.n	800e118 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e0f2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e0f6:	b178      	cbz	r0, 800e118 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e0f8:	6803      	ldr	r3, [r0, #0]
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	4798      	blx	r3
 800e0fe:	b158      	cbz	r0, 800e118 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e100:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e104:	aa02      	add	r2, sp, #8
 800e106:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e10a:	4621      	mov	r1, r4
 800e10c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e110:	9503      	str	r5, [sp, #12]
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	4798      	blx	r3
 800e118:	b005      	add	sp, #20
 800e11a:	bd30      	pop	{r4, r5, pc}

0800e11c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	4604      	mov	r4, r0
 800e122:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e126:	4690      	mov	r8, r2
 800e128:	461e      	mov	r6, r3
 800e12a:	9f06      	ldr	r7, [sp, #24]
 800e12c:	b928      	cbnz	r0, 800e13a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800e12e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e132:	803b      	strh	r3, [r7, #0]
 800e134:	8033      	strh	r3, [r6, #0]
 800e136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e13a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800e13e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800e142:	1883      	adds	r3, r0, r2
 800e144:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800e148:	1ad2      	subs	r2, r2, r3
 800e14a:	b212      	sxth	r2, r2
 800e14c:	2a01      	cmp	r2, #1
 800e14e:	dc07      	bgt.n	800e160 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 800e150:	2300      	movs	r3, #0
 800e152:	8033      	strh	r3, [r6, #0]
 800e154:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800e158:	3b01      	subs	r3, #1
 800e15a:	803b      	strh	r3, [r7, #0]
 800e15c:	2001      	movs	r0, #1
 800e15e:	e7ea      	b.n	800e136 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800e160:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800e164:	1a08      	subs	r0, r1, r0
 800e166:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e16a:	3a01      	subs	r2, #1
 800e16c:	0140      	lsls	r0, r0, #5
 800e16e:	1ae9      	subs	r1, r5, r3
 800e170:	f005 fb62 	bl	8013838 <_ZN8touchgfx6muldivElll>
 800e174:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800e178:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800e17c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800e180:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800e184:	1883      	adds	r3, r0, r2
 800e186:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800e18a:	eba8 0000 	sub.w	r0, r8, r0
 800e18e:	1ad2      	subs	r2, r2, r3
 800e190:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e194:	0140      	lsls	r0, r0, #5
 800e196:	b212      	sxth	r2, r2
 800e198:	1a59      	subs	r1, r3, r1
 800e19a:	3a01      	subs	r2, #1
 800e19c:	f005 fb4c 	bl	8013838 <_ZN8touchgfx6muldivElll>
 800e1a0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e1a4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e1a8:	4285      	cmp	r5, r0
 800e1aa:	bfde      	ittt	le
 800e1ac:	4603      	movle	r3, r0
 800e1ae:	4628      	movle	r0, r5
 800e1b0:	461d      	movle	r5, r3
 800e1b2:	2320      	movs	r3, #32
 800e1b4:	2d00      	cmp	r5, #0
 800e1b6:	bfa8      	it	ge
 800e1b8:	351f      	addge	r5, #31
 800e1ba:	fb90 f0f3 	sdiv	r0, r0, r3
 800e1be:	bfb4      	ite	lt
 800e1c0:	fb95 f5f3 	sdivlt	r5, r5, r3
 800e1c4:	116d      	asrge	r5, r5, #5
 800e1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1ca:	8033      	strh	r3, [r6, #0]
 800e1cc:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 800e1d0:	f9b6 3000 	ldrsh.w	r3, [r6]
 800e1d4:	1e51      	subs	r1, r2, #1
 800e1d6:	428b      	cmp	r3, r1
 800e1d8:	da06      	bge.n	800e1e8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 800e1da:	3301      	adds	r3, #1
 800e1dc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800e1e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e1e4:	4288      	cmp	r0, r1
 800e1e6:	daf0      	bge.n	800e1ca <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 800e1e8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800e1ec:	803a      	strh	r2, [r7, #0]
 800e1ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dd23      	ble.n	800e23e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 800e1f6:	181a      	adds	r2, r3, r0
 800e1f8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800e1fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e200:	42aa      	cmp	r2, r5
 800e202:	db10      	blt.n	800e226 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 800e204:	3b01      	subs	r3, #1
 800e206:	803b      	strh	r3, [r7, #0]
 800e208:	e7f1      	b.n	800e1ee <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 800e20a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e20e:	8032      	strh	r2, [r6, #0]
 800e210:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e214:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e218:	4293      	cmp	r3, r2
 800e21a:	bfdc      	itt	le
 800e21c:	f103 33ff 	addle.w	r3, r3, #4294967295
 800e220:	b21a      	sxthle	r2, r3
 800e222:	803a      	strh	r2, [r7, #0]
 800e224:	e79a      	b.n	800e15c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 800e226:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e22a:	f9b6 2000 	ldrsh.w	r2, [r6]
 800e22e:	3b01      	subs	r3, #1
 800e230:	429a      	cmp	r2, r3
 800e232:	dbea      	blt.n	800e20a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 800e234:	b21b      	sxth	r3, r3
 800e236:	2000      	movs	r0, #0
 800e238:	803b      	strh	r3, [r7, #0]
 800e23a:	8033      	strh	r3, [r6, #0]
 800e23c:	e77b      	b.n	800e136 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800e23e:	2000      	movs	r0, #0
 800e240:	8038      	strh	r0, [r7, #0]
 800e242:	8030      	strh	r0, [r6, #0]
 800e244:	e777      	b.n	800e136 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
	...

0800e248 <_ZN8touchgfx9ContainerC1Ev>:
 800e248:	2101      	movs	r1, #1
 800e24a:	2200      	movs	r2, #0
 800e24c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800e250:	4909      	ldr	r1, [pc, #36]	; (800e278 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 800e252:	8082      	strh	r2, [r0, #4]
 800e254:	80c2      	strh	r2, [r0, #6]
 800e256:	8102      	strh	r2, [r0, #8]
 800e258:	8142      	strh	r2, [r0, #10]
 800e25a:	8182      	strh	r2, [r0, #12]
 800e25c:	81c2      	strh	r2, [r0, #14]
 800e25e:	8202      	strh	r2, [r0, #16]
 800e260:	8242      	strh	r2, [r0, #18]
 800e262:	61c2      	str	r2, [r0, #28]
 800e264:	8402      	strh	r2, [r0, #32]
 800e266:	8442      	strh	r2, [r0, #34]	; 0x22
 800e268:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800e26c:	6001      	str	r1, [r0, #0]
 800e26e:	6282      	str	r2, [r0, #40]	; 0x28
 800e270:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	08021bd8 	.word	0x08021bd8

0800e27c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800e27c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	4605      	mov	r5, r0
 800e282:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e286:	4688      	mov	r8, r1
 800e288:	4691      	mov	r9, r2
 800e28a:	469a      	mov	sl, r3
 800e28c:	b360      	cbz	r0, 800e2e8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 800e28e:	2700      	movs	r7, #0
 800e290:	f04f 3bff 	mov.w	fp, #4294967295
 800e294:	b23e      	sxth	r6, r7
 800e296:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 800e29a:	42b3      	cmp	r3, r6
 800e29c:	dd23      	ble.n	800e2e6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 800e29e:	682b      	ldr	r3, [r5, #0]
 800e2a0:	4631      	mov	r1, r6
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	3701      	adds	r7, #1
 800e2a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e2aa:	4798      	blx	r3
 800e2ac:	9001      	str	r0, [sp, #4]
 800e2ae:	a801      	add	r0, sp, #4
 800e2b0:	f7f5 ff09 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e2b4:	682b      	ldr	r3, [r5, #0]
 800e2b6:	eba0 0008 	sub.w	r0, r0, r8
 800e2ba:	4631      	mov	r1, r6
 800e2bc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e2c0:	b204      	sxth	r4, r0
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	4798      	blx	r3
 800e2c6:	9001      	str	r0, [sp, #4]
 800e2c8:	a801      	add	r0, sp, #4
 800e2ca:	f7f5 fefc 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e2ce:	eba0 0009 	sub.w	r0, r0, r9
 800e2d2:	fb10 f000 	smulbb	r0, r0, r0
 800e2d6:	fb04 0404 	mla	r4, r4, r4, r0
 800e2da:	455c      	cmp	r4, fp
 800e2dc:	bf3c      	itt	cc
 800e2de:	f8aa 6000 	strhcc.w	r6, [sl]
 800e2e2:	46a3      	movcc	fp, r4
 800e2e4:	e7d6      	b.n	800e294 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	b003      	add	sp, #12
 800e2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2ee <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800e2ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e2f8:	4688      	mov	r8, r1
 800e2fa:	4691      	mov	r9, r2
 800e2fc:	b1f8      	cbz	r0, 800e33e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 800e2fe:	2500      	movs	r5, #0
 800e300:	f04f 37ff 	mov.w	r7, #4294967295
 800e304:	b22e      	sxth	r6, r5
 800e306:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e30a:	42b3      	cmp	r3, r6
 800e30c:	dd16      	ble.n	800e33c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	4631      	mov	r1, r6
 800e312:	4620      	mov	r0, r4
 800e314:	3501      	adds	r5, #1
 800e316:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e31a:	4798      	blx	r3
 800e31c:	9001      	str	r0, [sp, #4]
 800e31e:	a801      	add	r0, sp, #4
 800e320:	f7f5 fed1 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e324:	b200      	sxth	r0, r0
 800e326:	eba0 0008 	sub.w	r0, r0, r8
 800e32a:	2800      	cmp	r0, #0
 800e32c:	bfb8      	it	lt
 800e32e:	4240      	neglt	r0, r0
 800e330:	42b8      	cmp	r0, r7
 800e332:	bf3c      	itt	cc
 800e334:	f8a9 6000 	strhcc.w	r6, [r9]
 800e338:	4607      	movcc	r7, r0
 800e33a:	e7e3      	b.n	800e304 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 800e33c:	2001      	movs	r0, #1
 800e33e:	b003      	add	sp, #12
 800e340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800e344 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800e344:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 800e348:	f9bd 3000 	ldrsh.w	r3, [sp]
 800e34c:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 800e350:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 800e354:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800e358:	4770      	bx	lr

0800e35a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800e35a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35c:	4604      	mov	r4, r0
 800e35e:	3038      	adds	r0, #56	; 0x38
 800e360:	460d      	mov	r5, r1
 800e362:	f7fe fb13 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e366:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e36a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800e36e:	4628      	mov	r0, r5
 800e370:	9200      	str	r2, [sp, #0]
 800e372:	2200      	movs	r2, #0
 800e374:	4611      	mov	r1, r2
 800e376:	f7f5 fa33 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e37a:	b003      	add	sp, #12
 800e37c:	bd30      	pop	{r4, r5, pc}

0800e37e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 800e37e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e380:	4604      	mov	r4, r0
 800e382:	3064      	adds	r0, #100	; 0x64
 800e384:	460d      	mov	r5, r1
 800e386:	f7fe fb01 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e38a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800e38e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800e392:	4628      	mov	r0, r5
 800e394:	9200      	str	r2, [sp, #0]
 800e396:	2200      	movs	r2, #0
 800e398:	4611      	mov	r1, r2
 800e39a:	f7f5 fa21 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e39e:	b003      	add	sp, #12
 800e3a0:	bd30      	pop	{r4, r5, pc}

0800e3a2 <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 800e3a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	30e8      	adds	r0, #232	; 0xe8
 800e3a8:	460d      	mov	r5, r1
 800e3aa:	f7fe faef 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e3ae:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800e3b2:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	9200      	str	r2, [sp, #0]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	4611      	mov	r1, r2
 800e3be:	f7f5 fa0f 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e3c2:	b003      	add	sp, #12
 800e3c4:	bd30      	pop	{r4, r5, pc}

0800e3c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800e3c6:	b538      	push	{r3, r4, r5, lr}
 800e3c8:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e3cc:	460d      	mov	r5, r1
 800e3ce:	428b      	cmp	r3, r1
 800e3d0:	dd08      	ble.n	800e3e4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800e3d2:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800e3d4:	b134      	cbz	r4, 800e3e4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800e3d6:	6823      	ldr	r3, [r4, #0]
 800e3d8:	4620      	mov	r0, r4
 800e3da:	4629      	mov	r1, r5
 800e3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3de:	4798      	blx	r3
 800e3e0:	69a4      	ldr	r4, [r4, #24]
 800e3e2:	e7f7      	b.n	800e3d4 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800e3e4:	bd38      	pop	{r3, r4, r5, pc}

0800e3e6 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 800e3e6:	b570      	push	{r4, r5, r6, lr}
 800e3e8:	b20e      	sxth	r6, r1
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	460c      	mov	r4, r1
 800e3ee:	4631      	mov	r1, r6
 800e3f0:	f7ff ffe9 	bl	800e3c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800e3f4:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800e3fe:	00a3      	lsls	r3, r4, #2
 800e400:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 800e404:	1d1a      	adds	r2, r3, #4
 800e406:	42a1      	cmp	r1, r4
 800e408:	dd0a      	ble.n	800e420 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 800e40a:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 800e40e:	3401      	adds	r4, #1
 800e410:	5888      	ldr	r0, [r1, r2]
 800e412:	50c8      	str	r0, [r1, r3]
 800e414:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 800e418:	5888      	ldr	r0, [r1, r2]
 800e41a:	50c8      	str	r0, [r1, r3]
 800e41c:	4613      	mov	r3, r2
 800e41e:	e7ef      	b.n	800e400 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 800e420:	4630      	mov	r0, r6
 800e422:	bd70      	pop	{r4, r5, r6, pc}

0800e424 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800e424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e426:	4604      	mov	r4, r0
 800e428:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800e42a:	b15d      	cbz	r5, 800e444 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800e42c:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800e430:	4628      	mov	r0, r5
 800e432:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800e436:	9200      	str	r2, [sp, #0]
 800e438:	2200      	movs	r2, #0
 800e43a:	4611      	mov	r1, r2
 800e43c:	f7f5 f9d0 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e440:	69ad      	ldr	r5, [r5, #24]
 800e442:	e7f2      	b.n	800e42a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800e444:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 800e448:	b15d      	cbz	r5, 800e462 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800e44a:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 800e44e:	4628      	mov	r0, r5
 800e450:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 800e454:	9200      	str	r2, [sp, #0]
 800e456:	2200      	movs	r2, #0
 800e458:	4611      	mov	r1, r2
 800e45a:	f7f5 f9c1 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e45e:	69ad      	ldr	r5, [r5, #24]
 800e460:	e7f2      	b.n	800e448 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800e462:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800e466:	b15d      	cbz	r5, 800e480 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800e468:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800e46c:	4628      	mov	r0, r5
 800e46e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800e472:	9200      	str	r2, [sp, #0]
 800e474:	2200      	movs	r2, #0
 800e476:	4611      	mov	r1, r2
 800e478:	f7f5 f9b2 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e47c:	69ad      	ldr	r5, [r5, #24]
 800e47e:	e7f2      	b.n	800e466 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800e480:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800e484:	b15d      	cbz	r5, 800e49e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800e486:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 800e48a:	4628      	mov	r0, r5
 800e48c:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 800e490:	9200      	str	r2, [sp, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	4611      	mov	r1, r2
 800e496:	f7f5 f9a3 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e49a:	69ad      	ldr	r5, [r5, #24]
 800e49c:	e7f2      	b.n	800e484 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800e49e:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800e4a2:	b15d      	cbz	r5, 800e4bc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800e4a4:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800e4ae:	9200      	str	r2, [sp, #0]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	f7f5 f994 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e4b8:	69ad      	ldr	r5, [r5, #24]
 800e4ba:	e7f2      	b.n	800e4a2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	4620      	mov	r0, r4
 800e4c0:	695b      	ldr	r3, [r3, #20]
 800e4c2:	b003      	add	sp, #12
 800e4c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c8:	4718      	bx	r3

0800e4ca <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800e4ca:	b430      	push	{r4, r5}
 800e4cc:	b28a      	uxth	r2, r1
 800e4ce:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 800e4d2:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 800e4d6:	1b15      	subs	r5, r2, r4
 800e4d8:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 800e4dc:	8101      	strh	r1, [r0, #8]
 800e4de:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 800e4e2:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 800e4e6:	442c      	add	r4, r5
 800e4e8:	1b12      	subs	r2, r2, r4
 800e4ea:	bc30      	pop	{r4, r5}
 800e4ec:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800e4f0:	f7ff bf98 	b.w	800e424 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800e4f4 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800e4f4:	b430      	push	{r4, r5}
 800e4f6:	b28a      	uxth	r2, r1
 800e4f8:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 800e4fc:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 800e500:	1b15      	subs	r5, r2, r4
 800e502:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 800e506:	8141      	strh	r1, [r0, #10]
 800e508:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 800e50c:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 800e510:	442c      	add	r4, r5
 800e512:	1b12      	subs	r2, r2, r4
 800e514:	bc30      	pop	{r4, r5}
 800e516:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800e51a:	f7ff bf83 	b.w	800e424 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800e51e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800e51e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800e522:	fa1f fa83 	uxth.w	sl, r3
 800e526:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800e52a:	4615      	mov	r5, r2
 800e52c:	4699      	mov	r9, r3
 800e52e:	fa1f f887 	uxth.w	r8, r7
 800e532:	8903      	ldrh	r3, [r0, #8]
 800e534:	4452      	add	r2, sl
 800e536:	4604      	mov	r4, r0
 800e538:	8940      	ldrh	r0, [r0, #10]
 800e53a:	460e      	mov	r6, r1
 800e53c:	1a9b      	subs	r3, r3, r2
 800e53e:	eb08 0201 	add.w	r2, r8, r1
 800e542:	1a80      	subs	r0, r0, r2
 800e544:	b21b      	sxth	r3, r3
 800e546:	460a      	mov	r2, r1
 800e548:	4629      	mov	r1, r5
 800e54a:	b200      	sxth	r0, r0
 800e54c:	9000      	str	r0, [sp, #0]
 800e54e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e552:	f7f5 f945 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e556:	2200      	movs	r2, #0
 800e558:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800e55c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800e560:	4611      	mov	r1, r2
 800e562:	9600      	str	r6, [sp, #0]
 800e564:	f7f5 f93c 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e568:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	462b      	mov	r3, r5
 800e576:	4611      	mov	r1, r2
 800e578:	f7f5 f932 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e57c:	8921      	ldrh	r1, [r4, #8]
 800e57e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e582:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800e586:	eba1 010a 	sub.w	r1, r1, sl
 800e58a:	2200      	movs	r2, #0
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	464b      	mov	r3, r9
 800e590:	b209      	sxth	r1, r1
 800e592:	f7f5 f925 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e596:	8962      	ldrh	r2, [r4, #10]
 800e598:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e59c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800e5a0:	eba2 0208 	sub.w	r2, r2, r8
 800e5a4:	9700      	str	r7, [sp, #0]
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	b212      	sxth	r2, r2
 800e5aa:	f7f5 f919 	bl	80037e0 <_ZN8touchgfx8Drawable11setPositionEssss>
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	b002      	add	sp, #8
 800e5b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b6:	f7ff bf35 	b.w	800e424 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

0800e5bc <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800e5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	4604      	mov	r4, r0
 800e5c4:	2601      	movs	r6, #1
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	9103      	str	r1, [sp, #12]
 800e5ca:	f7ff fe3d 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e5ce:	4b2c      	ldr	r3, [pc, #176]	; (800e680 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 800e5d0:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800e5d4:	f104 0964 	add.w	r9, r4, #100	; 0x64
 800e5d8:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	23ff      	movs	r3, #255	; 0xff
 800e5e0:	4658      	mov	r0, fp
 800e5e2:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 800e5e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e5ea:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 800e5ee:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800e5f2:	f7ff fe29 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e5f6:	4648      	mov	r0, r9
 800e5f8:	f7ff fe26 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	f7ff fe23 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e602:	4650      	mov	r0, sl
 800e604:	f7ff fe20 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e608:	4638      	mov	r0, r7
 800e60a:	f7ff fe1d 	bl	800e248 <_ZN8touchgfx9ContainerC1Ev>
 800e60e:	9903      	ldr	r1, [sp, #12]
 800e610:	4620      	mov	r0, r4
 800e612:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800e616:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 800e61a:	4659      	mov	r1, fp
 800e61c:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800e620:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 800e624:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800e628:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800e62c:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800e630:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800e634:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800e638:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800e63c:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800e640:	f7fe f9a4 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e644:	4651      	mov	r1, sl
 800e646:	4620      	mov	r0, r4
 800e648:	f7fe f9a0 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e64c:	4649      	mov	r1, r9
 800e64e:	4620      	mov	r0, r4
 800e650:	f7fe f99c 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e654:	4641      	mov	r1, r8
 800e656:	4620      	mov	r0, r4
 800e658:	f7fe f998 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e65c:	4639      	mov	r1, r7
 800e65e:	4620      	mov	r0, r4
 800e660:	f7fe f994 	bl	800c98c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800e664:	4620      	mov	r0, r4
 800e666:	9500      	str	r5, [sp, #0]
 800e668:	462b      	mov	r3, r5
 800e66a:	462a      	mov	r2, r5
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7ff ff56 	bl	800e51e <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800e672:	4620      	mov	r0, r4
 800e674:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800e678:	b005      	add	sp, #20
 800e67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e67e:	bf00      	nop
 800e680:	08021e84 	.word	0x08021e84

0800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 800e684:	4291      	cmp	r1, r2
 800e686:	4613      	mov	r3, r2
 800e688:	d003      	beq.n	800e692 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 800e68a:	460a      	mov	r2, r1
 800e68c:	4619      	mov	r1, r3
 800e68e:	f005 b8d3 	b.w	8013838 <_ZN8touchgfx6muldivElll>
 800e692:	4770      	bx	lr

0800e694 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 800e694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e698:	4604      	mov	r4, r0
 800e69a:	460f      	mov	r7, r1
 800e69c:	b1b2      	cbz	r2, 800e6cc <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800e69e:	6803      	ldr	r3, [r0, #0]
 800e6a0:	2600      	movs	r6, #0
 800e6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6a6:	4798      	blx	r3
 800e6a8:	4681      	mov	r9, r0
 800e6aa:	b235      	sxth	r5, r6
 800e6ac:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e6b0:	3601      	adds	r6, #1
 800e6b2:	42ab      	cmp	r3, r5
 800e6b4:	dd0a      	ble.n	800e6cc <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800e6b6:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 800e6ba:	463a      	mov	r2, r7
 800e6bc:	4649      	mov	r1, r9
 800e6be:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800e6c2:	f7ff ffdf 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800e6c6:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800e6ca:	e7ee      	b.n	800e6aa <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 800e6cc:	6327      	str	r7, [r4, #48]	; 0x30
 800e6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e6d2 <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 800e6d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	460f      	mov	r7, r1
 800e6da:	b1b2      	cbz	r2, 800e70a <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	2600      	movs	r6, #0
 800e6e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6e4:	4798      	blx	r3
 800e6e6:	4681      	mov	r9, r0
 800e6e8:	b235      	sxth	r5, r6
 800e6ea:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e6ee:	3601      	adds	r6, #1
 800e6f0:	42ab      	cmp	r3, r5
 800e6f2:	dd0a      	ble.n	800e70a <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800e6f4:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800e6f8:	463a      	mov	r2, r7
 800e6fa:	4649      	mov	r1, r9
 800e6fc:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800e700:	f7ff ffc0 	bl	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800e704:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800e708:	e7ee      	b.n	800e6e8 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 800e70a:	6367      	str	r7, [r4, #52]	; 0x34
 800e70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e710 <_ZN8touchgfx9GraphData8addValueEii>:
 800e710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e714:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e718:	4605      	mov	r5, r0
 800e71a:	4617      	mov	r7, r2
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d03e      	beq.n	800e79e <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800e720:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800e724:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800e728:	3801      	subs	r0, #1
 800e72a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800e72e:	4288      	cmp	r0, r1
 800e730:	db35      	blt.n	800e79e <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800e732:	2000      	movs	r0, #0
 800e734:	b204      	sxth	r4, r0
 800e736:	42a3      	cmp	r3, r4
 800e738:	dd16      	ble.n	800e768 <_ZN8touchgfx9GraphData8addValueEii+0x58>
 800e73a:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800e73e:	3001      	adds	r0, #1
 800e740:	f852 6008 	ldr.w	r6, [r2, r8]
 800e744:	428e      	cmp	r6, r1
 800e746:	dbf5      	blt.n	800e734 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 800e748:	d10f      	bne.n	800e76a <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 800e74a:	4621      	mov	r1, r4
 800e74c:	4628      	mov	r0, r5
 800e74e:	f7ff fe3a 	bl	800e3c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800e752:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800e756:	f843 7008 	str.w	r7, [r3, r8]
 800e75a:	4621      	mov	r1, r4
 800e75c:	4628      	mov	r0, r5
 800e75e:	f7ff fe32 	bl	800e3c6 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800e762:	4620      	mov	r0, r4
 800e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e768:	d01a      	beq.n	800e7a0 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800e76a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800e76e:	428a      	cmp	r2, r1
 800e770:	dc16      	bgt.n	800e7a0 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800e772:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800e776:	3801      	subs	r0, #1
 800e778:	0080      	lsls	r0, r0, #2
 800e77a:	42a3      	cmp	r3, r4
 800e77c:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 800e780:	dd15      	ble.n	800e7ae <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 800e782:	5832      	ldr	r2, [r6, r0]
 800e784:	f100 0c04 	add.w	ip, r0, #4
 800e788:	3b01      	subs	r3, #1
 800e78a:	f846 200c 	str.w	r2, [r6, ip]
 800e78e:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 800e792:	b21b      	sxth	r3, r3
 800e794:	5832      	ldr	r2, [r6, r0]
 800e796:	3804      	subs	r0, #4
 800e798:	f846 200c 	str.w	r2, [r6, ip]
 800e79c:	e7ed      	b.n	800e77a <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 800e79e:	461c      	mov	r4, r3
 800e7a0:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d1e4      	bne.n	800e772 <_ZN8touchgfx9GraphData8addValueEii+0x62>
 800e7a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e7ac:	e7d9      	b.n	800e762 <_ZN8touchgfx9GraphData8addValueEii+0x52>
 800e7ae:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800e7b8:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 800e7bc:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800e7c0:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800e7c4:	e7c9      	b.n	800e75a <_ZN8touchgfx9GraphData8addValueEii+0x4a>

0800e7c6 <_ZN8touchgfx16GraphElementLineD1Ev>:
 800e7c6:	4770      	bx	lr

0800e7c8 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	2130      	movs	r1, #48	; 0x30
 800e7ce:	f00f fbb6 	bl	801df3e <_ZdlPvj>
 800e7d2:	4620      	mov	r0, r4
 800e7d4:	bd10      	pop	{r4, pc}

0800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800e7d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d8:	4604      	mov	r4, r0
 800e7da:	4608      	mov	r0, r1
 800e7dc:	460d      	mov	r5, r1
 800e7de:	f7fe fa9c 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e7e2:	b978      	cbnz	r0, 800e804 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f7fe fa98 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800e7ea:	f9b5 6000 	ldrsh.w	r6, [r5]
 800e7ee:	b150      	cbz	r0, 800e806 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800e7f0:	8026      	strh	r6, [r4, #0]
 800e7f2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800e7f6:	8063      	strh	r3, [r4, #2]
 800e7f8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e7fc:	80a3      	strh	r3, [r4, #4]
 800e7fe:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e802:	80e3      	strh	r3, [r4, #6]
 800e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e806:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e80a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800e80e:	42b1      	cmp	r1, r6
 800e810:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800e814:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800e818:	460f      	mov	r7, r1
 800e81a:	88ed      	ldrh	r5, [r5, #6]
 800e81c:	bfa8      	it	ge
 800e81e:	4637      	movge	r7, r6
 800e820:	4293      	cmp	r3, r2
 800e822:	4618      	mov	r0, r3
 800e824:	4466      	add	r6, ip
 800e826:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800e82a:	bfa8      	it	ge
 800e82c:	4610      	movge	r0, r2
 800e82e:	442a      	add	r2, r5
 800e830:	88e5      	ldrh	r5, [r4, #6]
 800e832:	4461      	add	r1, ip
 800e834:	b236      	sxth	r6, r6
 800e836:	8027      	strh	r7, [r4, #0]
 800e838:	442b      	add	r3, r5
 800e83a:	b209      	sxth	r1, r1
 800e83c:	b212      	sxth	r2, r2
 800e83e:	8060      	strh	r0, [r4, #2]
 800e840:	b21b      	sxth	r3, r3
 800e842:	428e      	cmp	r6, r1
 800e844:	bfac      	ite	ge
 800e846:	ebc7 0106 	rsbge	r1, r7, r6
 800e84a:	ebc7 0101 	rsblt	r1, r7, r1
 800e84e:	429a      	cmp	r2, r3
 800e850:	bfac      	ite	ge
 800e852:	ebc0 0202 	rsbge	r2, r0, r2
 800e856:	ebc0 0203 	rsblt	r2, r0, r3
 800e85a:	80a1      	strh	r1, [r4, #4]
 800e85c:	80e2      	strh	r2, [r4, #6]
 800e85e:	e7d1      	b.n	800e804 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800e860 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800e860:	6800      	ldr	r0, [r0, #0]
 800e862:	2800      	cmp	r0, #0
 800e864:	bfb9      	ittee	lt
 800e866:	2320      	movlt	r3, #32
 800e868:	fb90 f0f3 	sdivlt	r0, r0, r3
 800e86c:	301f      	addge	r0, #31
 800e86e:	1140      	asrge	r0, r0, #5
 800e870:	4770      	bx	lr

0800e872 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 800e872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e876:	6803      	ldr	r3, [r0, #0]
 800e878:	b093      	sub	sp, #76	; 0x4c
 800e87a:	6945      	ldr	r5, [r0, #20]
 800e87c:	4604      	mov	r4, r0
 800e87e:	460f      	mov	r7, r1
 800e880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e882:	2d00      	cmp	r5, #0
 800e884:	f000 81ad 	beq.w	800ebe2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 800e888:	696d      	ldr	r5, [r5, #20]
 800e88a:	4798      	blx	r3
 800e88c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e890:	2b00      	cmp	r3, #0
 800e892:	d077      	beq.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e894:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e898:	fb13 f000 	smulbb	r0, r3, r0
 800e89c:	b283      	uxth	r3, r0
 800e89e:	1c58      	adds	r0, r3, #1
 800e8a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800e8a4:	1200      	asrs	r0, r0, #8
 800e8a6:	d06d      	beq.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e8a8:	b2c3      	uxtb	r3, r0
 800e8aa:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800e8ae:	462a      	mov	r2, r5
 800e8b0:	4621      	mov	r1, r4
 800e8b2:	9308      	str	r3, [sp, #32]
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	ae0e      	add	r6, sp, #56	; 0x38
 800e8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8be:	4798      	blx	r3
 800e8c0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e8c4:	e886 0003 	stmia.w	r6, {r0, r1}
 800e8c8:	4639      	mov	r1, r7
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7fe f9e2 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8da:	4798      	blx	r3
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	4607      	mov	r7, r0
 800e8e0:	4629      	mov	r1, r5
 800e8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4798      	blx	r3
 800e8ea:	4681      	mov	r9, r0
 800e8ec:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	0103      	lsls	r3, r0, #4
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e8fe:	4798      	blx	r3
 800e900:	4629      	mov	r1, r5
 800e902:	b203      	sxth	r3, r0
 800e904:	4620      	mov	r0, r4
 800e906:	9306      	str	r3, [sp, #24]
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e90e:	4798      	blx	r3
 800e910:	2f00      	cmp	r7, #0
 800e912:	b203      	sxth	r3, r0
 800e914:	9307      	str	r3, [sp, #28]
 800e916:	d138      	bne.n	800e98a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 800e918:	f1b9 0f00 	cmp.w	r9, #0
 800e91c:	d132      	bne.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e91e:	6823      	ldr	r3, [r4, #0]
 800e920:	464a      	mov	r2, r9
 800e922:	4629      	mov	r1, r5
 800e924:	4620      	mov	r0, r4
 800e926:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e92a:	4798      	blx	r3
 800e92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e92e:	1ac0      	subs	r0, r0, r3
 800e930:	9010      	str	r0, [sp, #64]	; 0x40
 800e932:	4640      	mov	r0, r8
 800e934:	f7f5 fbc7 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	4607      	mov	r7, r0
 800e93c:	4629      	mov	r1, r5
 800e93e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e942:	4620      	mov	r0, r4
 800e944:	4798      	blx	r3
 800e946:	1a38      	subs	r0, r7, r0
 800e948:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e94c:	fa0f f880 	sxth.w	r8, r0
 800e950:	eb13 0f08 	cmn.w	r3, r8
 800e954:	d416      	bmi.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	4629      	mov	r1, r5
 800e95a:	4620      	mov	r0, r4
 800e95c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e960:	4798      	blx	r3
 800e962:	4580      	cmp	r8, r0
 800e964:	da0e      	bge.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e966:	9a08      	ldr	r2, [sp, #32]
 800e968:	b23f      	sxth	r7, r7
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	4631      	mov	r1, r6
 800e96e:	9202      	str	r2, [sp, #8]
 800e970:	4620      	mov	r0, r4
 800e972:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800e976:	9700      	str	r7, [sp, #0]
 800e978:	9201      	str	r2, [sp, #4]
 800e97a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800e97e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e982:	47a8      	blx	r5
 800e984:	b013      	add	sp, #76	; 0x4c
 800e986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98a:	ddfb      	ble.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	4629      	mov	r1, r5
 800e990:	4620      	mov	r0, r4
 800e992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e996:	4798      	blx	r3
 800e998:	6823      	ldr	r3, [r4, #0]
 800e99a:	4683      	mov	fp, r0
 800e99c:	4629      	mov	r1, r5
 800e99e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	4798      	blx	r3
 800e9a6:	eba0 030b 	sub.w	r3, r0, fp
 800e9aa:	4680      	mov	r8, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	bfb8      	it	lt
 800e9b0:	425b      	neglt	r3, r3
 800e9b2:	fb93 f3f7 	sdiv	r3, r3, r7
 800e9b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e9ba:	dce3      	bgt.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	465a      	mov	r2, fp
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e9c8:	4798      	blx	r3
 800e9ca:	6823      	ldr	r3, [r4, #0]
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	4642      	mov	r2, r8
 800e9d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	4798      	blx	r3
 800e9da:	42b0      	cmp	r0, r6
 800e9dc:	bfa2      	ittt	ge
 800e9de:	4643      	movge	r3, r8
 800e9e0:	46d8      	movge	r8, fp
 800e9e2:	469b      	movge	fp, r3
 800e9e4:	fb98 f6f7 	sdiv	r6, r8, r7
 800e9e8:	fb9b f2f7 	sdiv	r2, fp, r7
 800e9ec:	45d8      	cmp	r8, fp
 800e9ee:	bfac      	ite	ge
 800e9f0:	f04f 33ff 	movge.w	r3, #4294967295
 800e9f4:	2301      	movlt	r3, #1
 800e9f6:	1af6      	subs	r6, r6, r3
 800e9f8:	441a      	add	r2, r3
 800e9fa:	4296      	cmp	r6, r2
 800e9fc:	bfac      	ite	ge
 800e9fe:	f04f 3aff 	movge.w	sl, #4294967295
 800ea02:	f04f 0a01 	movlt.w	sl, #1
 800ea06:	f1b9 0f00 	cmp.w	r9, #0
 800ea0a:	d13e      	bne.n	800ea8a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 800ea0c:	fb07 fb0a 	mul.w	fp, r7, sl
 800ea10:	eb0a 0802 	add.w	r8, sl, r2
 800ea14:	4377      	muls	r7, r6
 800ea16:	45b0      	cmp	r8, r6
 800ea18:	d0b4      	beq.n	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	463a      	mov	r2, r7
 800ea1e:	4629      	mov	r1, r5
 800ea20:	4620      	mov	r0, r4
 800ea22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ea26:	4798      	blx	r3
 800ea28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea2a:	1ac0      	subs	r0, r0, r3
 800ea2c:	9010      	str	r0, [sp, #64]	; 0x40
 800ea2e:	a810      	add	r0, sp, #64	; 0x40
 800ea30:	f7f5 fb49 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	4681      	mov	r9, r0
 800ea38:	4629      	mov	r1, r5
 800ea3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea3e:	4620      	mov	r0, r4
 800ea40:	4798      	blx	r3
 800ea42:	eba9 0000 	sub.w	r0, r9, r0
 800ea46:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800ea4a:	b203      	sxth	r3, r0
 800ea4c:	42da      	cmn	r2, r3
 800ea4e:	9304      	str	r3, [sp, #16]
 800ea50:	d418      	bmi.n	800ea84 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	4629      	mov	r1, r5
 800ea56:	4620      	mov	r0, r4
 800ea58:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800ea5c:	4790      	blx	r2
 800ea5e:	9b04      	ldr	r3, [sp, #16]
 800ea60:	4283      	cmp	r3, r0
 800ea62:	da0f      	bge.n	800ea84 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800ea64:	9b08      	ldr	r3, [sp, #32]
 800ea66:	a90e      	add	r1, sp, #56	; 0x38
 800ea68:	6822      	ldr	r2, [r4, #0]
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	9302      	str	r3, [sp, #8]
 800ea6e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	fa0f f389 	sxth.w	r3, r9
 800ea78:	9300      	str	r3, [sp, #0]
 800ea7a:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 800ea7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea82:	47c8      	blx	r9
 800ea84:	4456      	add	r6, sl
 800ea86:	445f      	add	r7, fp
 800ea88:	e7c5      	b.n	800ea16 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 800ea8a:	fb98 f8f9 	sdiv	r8, r8, r9
 800ea8e:	eba8 0203 	sub.w	r2, r8, r3
 800ea92:	4629      	mov	r1, r5
 800ea94:	4620      	mov	r0, r4
 800ea96:	9204      	str	r2, [sp, #16]
 800ea98:	fb9b f8f9 	sdiv	r8, fp, r9
 800ea9c:	4498      	add	r8, r3
 800ea9e:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800eaa2:	4542      	cmp	r2, r8
 800eaa4:	bfac      	ite	ge
 800eaa6:	f04f 33ff 	movge.w	r3, #4294967295
 800eaaa:	2301      	movlt	r3, #1
 800eaac:	fb02 f209 	mul.w	r2, r2, r9
 800eab0:	930a      	str	r3, [sp, #40]	; 0x28
 800eab2:	6823      	ldr	r3, [r4, #0]
 800eab4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eab8:	4798      	blx	r3
 800eaba:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800eabe:	4658      	mov	r0, fp
 800eac0:	f7f5 fb01 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eac4:	fb06 f207 	mul.w	r2, r6, r7
 800eac8:	b203      	sxth	r3, r0
 800eaca:	4629      	mov	r1, r5
 800eacc:	4620      	mov	r0, r4
 800eace:	9305      	str	r3, [sp, #20]
 800ead0:	6823      	ldr	r3, [r4, #0]
 800ead2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ead6:	4798      	blx	r3
 800ead8:	9010      	str	r0, [sp, #64]	; 0x40
 800eada:	4658      	mov	r0, fp
 800eadc:	f7f5 faf3 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eae0:	fb07 f20a 	mul.w	r2, r7, sl
 800eae4:	b203      	sxth	r3, r0
 800eae6:	920b      	str	r2, [sp, #44]	; 0x2c
 800eae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaea:	4442      	add	r2, r8
 800eaec:	920c      	str	r2, [sp, #48]	; 0x30
 800eaee:	9a05      	ldr	r2, [sp, #20]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	dc16      	bgt.n	800eb22 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 800eaf4:	eb06 080a 	add.w	r8, r6, sl
 800eaf8:	fb07 f808 	mul.w	r8, r7, r8
 800eafc:	9a05      	ldr	r2, [sp, #20]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	db54      	blt.n	800ebac <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	4642      	mov	r2, r8
 800eb06:	4629      	mov	r1, r5
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb0e:	4456      	add	r6, sl
 800eb10:	4798      	blx	r3
 800eb12:	9010      	str	r0, [sp, #64]	; 0x40
 800eb14:	4658      	mov	r0, fp
 800eb16:	f7f5 fad6 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eb1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb1c:	b203      	sxth	r3, r0
 800eb1e:	4490      	add	r8, r2
 800eb20:	e7ec      	b.n	800eafc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 800eb22:	6823      	ldr	r3, [r4, #0]
 800eb24:	fb07 f206 	mul.w	r2, r7, r6
 800eb28:	4629      	mov	r1, r5
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb30:	4798      	blx	r3
 800eb32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	9010      	str	r0, [sp, #64]	; 0x40
 800eb38:	4658      	mov	r0, fp
 800eb3a:	f7f5 fac4 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eb3e:	6823      	ldr	r3, [r4, #0]
 800eb40:	4680      	mov	r8, r0
 800eb42:	4629      	mov	r1, r5
 800eb44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eb48:	4620      	mov	r0, r4
 800eb4a:	4798      	blx	r3
 800eb4c:	eba8 0000 	sub.w	r0, r8, r0
 800eb50:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800eb54:	b203      	sxth	r3, r0
 800eb56:	42da      	cmn	r2, r3
 800eb58:	930d      	str	r3, [sp, #52]	; 0x34
 800eb5a:	d418      	bmi.n	800eb8e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800eb5c:	6822      	ldr	r2, [r4, #0]
 800eb5e:	4629      	mov	r1, r5
 800eb60:	4620      	mov	r0, r4
 800eb62:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800eb66:	4790      	blx	r2
 800eb68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb6a:	4283      	cmp	r3, r0
 800eb6c:	da0f      	bge.n	800eb8e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800eb6e:	9b08      	ldr	r3, [sp, #32]
 800eb70:	a90e      	add	r1, sp, #56	; 0x38
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	4620      	mov	r0, r4
 800eb76:	9302      	str	r3, [sp, #8]
 800eb78:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800eb7c:	9301      	str	r3, [sp, #4]
 800eb7e:	fa0f f388 	sxth.w	r3, r8
 800eb82:	9300      	str	r3, [sp, #0]
 800eb84:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 800eb88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb8c:	47c0      	blx	r8
 800eb8e:	6823      	ldr	r3, [r4, #0]
 800eb90:	4456      	add	r6, sl
 800eb92:	4629      	mov	r1, r5
 800eb94:	4620      	mov	r0, r4
 800eb96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb9a:	fb06 f207 	mul.w	r2, r6, r7
 800eb9e:	4798      	blx	r3
 800eba0:	9010      	str	r0, [sp, #64]	; 0x40
 800eba2:	4658      	mov	r0, fp
 800eba4:	f7f5 fa8f 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eba8:	b203      	sxth	r3, r0
 800ebaa:	e7a0      	b.n	800eaee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800ebac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebae:	930d      	str	r3, [sp, #52]	; 0x34
 800ebb0:	9b04      	ldr	r3, [sp, #16]
 800ebb2:	4413      	add	r3, r2
 800ebb4:	9304      	str	r3, [sp, #16]
 800ebb6:	9a04      	ldr	r2, [sp, #16]
 800ebb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	f43f aee2 	beq.w	800e984 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800ebc0:	9b04      	ldr	r3, [sp, #16]
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	6822      	ldr	r2, [r4, #0]
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 800ebcc:	fb03 f209 	mul.w	r2, r3, r9
 800ebd0:	47c0      	blx	r8
 800ebd2:	9010      	str	r0, [sp, #64]	; 0x40
 800ebd4:	4658      	mov	r0, fp
 800ebd6:	f7f5 fa76 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ebda:	b203      	sxth	r3, r0
 800ebdc:	9305      	str	r3, [sp, #20]
 800ebde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebe0:	e785      	b.n	800eaee <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800ebe2:	4798      	blx	r3
 800ebe4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ebe8:	deff      	udf	#255	; 0xff

0800ebea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800ebea:	b510      	push	{r4, lr}
 800ebec:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800ebf0:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800ebf4:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800ebf8:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800ebfc:	139b      	asrs	r3, r3, #14
 800ebfe:	13a4      	asrs	r4, r4, #14
 800ec00:	429c      	cmp	r4, r3
 800ec02:	bfb8      	it	lt
 800ec04:	461c      	movlt	r4, r3
 800ec06:	2c01      	cmp	r4, #1
 800ec08:	dd07      	ble.n	800ec1a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800ec0a:	fb91 f1f4 	sdiv	r1, r1, r4
 800ec0e:	fb90 f0f4 	sdiv	r0, r0, r4
 800ec12:	f7ff ffea 	bl	800ebea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800ec16:	4360      	muls	r0, r4
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	4340      	muls	r0, r0
 800ec1c:	fb01 0101 	mla	r1, r1, r1, r0
 800ec20:	2000      	movs	r0, #0
 800ec22:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ec26:	bfb4      	ite	lt
 800ec28:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 800ec2c:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800ec30:	18c2      	adds	r2, r0, r3
 800ec32:	428a      	cmp	r2, r1
 800ec34:	bf9c      	itt	ls
 800ec36:	1898      	addls	r0, r3, r2
 800ec38:	1a89      	subls	r1, r1, r2
 800ec3a:	089b      	lsrs	r3, r3, #2
 800ec3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ec40:	d1f6      	bne.n	800ec30 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 800ec42:	e7e9      	b.n	800ec18 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800ec44 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 800ec44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec46:	9906      	ldr	r1, [sp, #24]
 800ec48:	4606      	mov	r6, r0
 800ec4a:	461c      	mov	r4, r3
 800ec4c:	2020      	movs	r0, #32
 800ec4e:	4291      	cmp	r1, r2
 800ec50:	bfbc      	itt	lt
 800ec52:	9206      	strlt	r2, [sp, #24]
 800ec54:	460a      	movlt	r2, r1
 800ec56:	9907      	ldr	r1, [sp, #28]
 800ec58:	428b      	cmp	r3, r1
 800ec5a:	bfc4      	itt	gt
 800ec5c:	460c      	movgt	r4, r1
 800ec5e:	9307      	strgt	r3, [sp, #28]
 800ec60:	fb92 f5f0 	sdiv	r5, r2, r0
 800ec64:	fb94 f4f0 	sdiv	r4, r4, r0
 800ec68:	a806      	add	r0, sp, #24
 800ec6a:	f7ff fdf9 	bl	800e860 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800ec6e:	4607      	mov	r7, r0
 800ec70:	a807      	add	r0, sp, #28
 800ec72:	f7ff fdf5 	bl	800e860 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800ec76:	1b7a      	subs	r2, r7, r5
 800ec78:	1b00      	subs	r0, r0, r4
 800ec7a:	8035      	strh	r5, [r6, #0]
 800ec7c:	8074      	strh	r4, [r6, #2]
 800ec7e:	80f0      	strh	r0, [r6, #6]
 800ec80:	4630      	mov	r0, r6
 800ec82:	80b2      	strh	r2, [r6, #4]
 800ec84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec86 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 800ec86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec88:	9c08      	ldr	r4, [sp, #32]
 800ec8a:	2602      	movs	r6, #2
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	3401      	adds	r4, #1
 800ec90:	fb94 f4f6 	sdiv	r4, r4, r6
 800ec94:	18a6      	adds	r6, r4, r2
 800ec96:	191f      	adds	r7, r3, r4
 800ec98:	1b12      	subs	r2, r2, r4
 800ec9a:	1b1b      	subs	r3, r3, r4
 800ec9c:	e9cd 6700 	strd	r6, r7, [sp]
 800eca0:	f7ff ffd0 	bl	800ec44 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 800eca4:	4628      	mov	r0, r5
 800eca6:	b003      	add	sp, #12
 800eca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecaa <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 800ecaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecae:	6943      	ldr	r3, [r0, #20]
 800ecb0:	b087      	sub	sp, #28
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d072      	beq.n	800eda0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 800ecba:	695c      	ldr	r4, [r3, #20]
 800ecbc:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 800ecc0:	6823      	ldr	r3, [r4, #0]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	017f      	lsls	r7, r7, #5
 800ecc6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ecca:	4798      	blx	r3
 800eccc:	6823      	ldr	r3, [r4, #0]
 800ecce:	4680      	mov	r8, r0
 800ecd0:	4629      	mov	r1, r5
 800ecd2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4798      	blx	r3
 800ecda:	9700      	str	r7, [sp, #0]
 800ecdc:	4603      	mov	r3, r0
 800ecde:	4642      	mov	r2, r8
 800ece0:	4631      	mov	r1, r6
 800ece2:	a802      	add	r0, sp, #8
 800ece4:	f7ff ffcf 	bl	800ec86 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800ece8:	2d00      	cmp	r5, #0
 800ecea:	dd1b      	ble.n	800ed24 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 800ecec:	f105 38ff 	add.w	r8, r5, #4294967295
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	fa0f f888 	sxth.w	r8, r8
 800ecf8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ecfc:	4641      	mov	r1, r8
 800ecfe:	4798      	blx	r3
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	4681      	mov	r9, r0
 800ed04:	4641      	mov	r1, r8
 800ed06:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	4798      	blx	r3
 800ed0e:	4631      	mov	r1, r6
 800ed10:	4603      	mov	r3, r0
 800ed12:	9700      	str	r7, [sp, #0]
 800ed14:	a804      	add	r0, sp, #16
 800ed16:	464a      	mov	r2, r9
 800ed18:	f7ff ffb5 	bl	800ec86 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800ed1c:	a904      	add	r1, sp, #16
 800ed1e:	a802      	add	r0, sp, #8
 800ed20:	f7ff fd59 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ed24:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	429d      	cmp	r5, r3
 800ed2c:	da19      	bge.n	800ed62 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 800ed2e:	3501      	adds	r5, #1
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	4620      	mov	r0, r4
 800ed34:	b22d      	sxth	r5, r5
 800ed36:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	4798      	blx	r3
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	4680      	mov	r8, r0
 800ed42:	4629      	mov	r1, r5
 800ed44:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ed48:	4620      	mov	r0, r4
 800ed4a:	4798      	blx	r3
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	4603      	mov	r3, r0
 800ed50:	9700      	str	r7, [sp, #0]
 800ed52:	a804      	add	r0, sp, #16
 800ed54:	4642      	mov	r2, r8
 800ed56:	f7ff ff96 	bl	800ec86 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800ed5a:	a904      	add	r1, sp, #16
 800ed5c:	a802      	add	r0, sp, #8
 800ed5e:	f7ff fd3a 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800ed62:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800ed66:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800ed6a:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800ed6e:	18ca      	adds	r2, r1, r3
 800ed70:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ed74:	f8ad 1012 	strh.w	r1, [sp, #18]
 800ed78:	a904      	add	r1, sp, #16
 800ed7a:	1a9b      	subs	r3, r3, r2
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800ed82:	a802      	add	r0, sp, #8
 800ed84:	f8ad 2010 	strh.w	r2, [sp, #16]
 800ed88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ed8c:	f7fd ff82 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800ed90:	6833      	ldr	r3, [r6, #0]
 800ed92:	a902      	add	r1, sp, #8
 800ed94:	4630      	mov	r0, r6
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	4798      	blx	r3
 800ed9a:	b007      	add	sp, #28
 800ed9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	deff      	udf	#255	; 0xff

0800eda4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 800eda4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da05      	bge.n	800edb8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 800edac:	b29b      	uxth	r3, r3
 800edae:	880a      	ldrh	r2, [r1, #0]
 800edb0:	441a      	add	r2, r3
 800edb2:	425b      	negs	r3, r3
 800edb4:	800a      	strh	r2, [r1, #0]
 800edb6:	808b      	strh	r3, [r1, #4]
 800edb8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	da05      	bge.n	800edcc <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 800edc0:	b29b      	uxth	r3, r3
 800edc2:	884a      	ldrh	r2, [r1, #2]
 800edc4:	441a      	add	r2, r3
 800edc6:	425b      	negs	r3, r3
 800edc8:	804a      	strh	r2, [r1, #2]
 800edca:	80cb      	strh	r3, [r1, #6]
 800edcc:	4770      	bx	lr

0800edce <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 800edce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	6801      	ldr	r1, [r0, #0]
 800edd6:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800edda:	9001      	str	r0, [sp, #4]
 800eddc:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800ede0:	9000      	str	r0, [sp, #0]
 800ede2:	a802      	add	r0, sp, #8
 800ede4:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 800ede8:	4621      	mov	r1, r4
 800edea:	47b0      	blx	r6
 800edec:	a902      	add	r1, sp, #8
 800edee:	4620      	mov	r0, r4
 800edf0:	f7ff ffd8 	bl	800eda4 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 800edf4:	a802      	add	r0, sp, #8
 800edf6:	4629      	mov	r1, r5
 800edf8:	f7fd ff4c 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800edfc:	a802      	add	r0, sp, #8
 800edfe:	f7fd ff8c 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee02:	b968      	cbnz	r0, 800ee20 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	a902      	add	r1, sp, #8
 800ee08:	4620      	mov	r0, r4
 800ee0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0c:	4798      	blx	r3
 800ee0e:	f7fe fa11 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800ee12:	6803      	ldr	r3, [r0, #0]
 800ee14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee16:	a902      	add	r1, sp, #8
 800ee18:	6a1d      	ldr	r5, [r3, #32]
 800ee1a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800ee1e:	47a8      	blx	r5
 800ee20:	b004      	add	sp, #16
 800ee22:	bd70      	pop	{r4, r5, r6, pc}

0800ee24 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 800ee24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee28:	b08b      	sub	sp, #44	; 0x2c
 800ee2a:	461e      	mov	r6, r3
 800ee2c:	460f      	mov	r7, r1
 800ee2e:	4615      	mov	r5, r2
 800ee30:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800ee34:	429e      	cmp	r6, r3
 800ee36:	9304      	str	r3, [sp, #16]
 800ee38:	d074      	beq.n	800ef24 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 800ee3a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ee3e:	4631      	mov	r1, r6
 800ee40:	4610      	mov	r0, r2
 800ee42:	4634      	mov	r4, r6
 800ee44:	015b      	lsls	r3, r3, #5
 800ee46:	9303      	str	r3, [sp, #12]
 800ee48:	6813      	ldr	r3, [r2, #0]
 800ee4a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ee4e:	4798      	blx	r3
 800ee50:	ab0a      	add	r3, sp, #40	; 0x28
 800ee52:	f843 0d10 	str.w	r0, [r3, #-16]!
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f5 f935 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	4631      	mov	r1, r6
 800ee60:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ee64:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ee68:	4628      	mov	r0, r5
 800ee6a:	4798      	blx	r3
 800ee6c:	ab0a      	add	r3, sp, #40	; 0x28
 800ee6e:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f5 f927 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ee78:	4641      	mov	r1, r8
 800ee7a:	ea4f 1940 	mov.w	r9, r0, lsl #5
 800ee7e:	4638      	mov	r0, r7
 800ee80:	464a      	mov	r2, r9
 800ee82:	f00e ff9b 	bl	801ddbc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800ee86:	2301      	movs	r3, #1
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	9b00      	ldr	r3, [sp, #0]
 800ee8e:	441c      	add	r4, r3
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	b224      	sxth	r4, r4
 800ee94:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ee98:	4621      	mov	r1, r4
 800ee9a:	4798      	blx	r3
 800ee9c:	9008      	str	r0, [sp, #32]
 800ee9e:	a808      	add	r0, sp, #32
 800eea0:	f7f5 f911 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eea4:	4621      	mov	r1, r4
 800eea6:	0143      	lsls	r3, r0, #5
 800eea8:	4628      	mov	r0, r5
 800eeaa:	9301      	str	r3, [sp, #4]
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800eeb2:	4798      	blx	r3
 800eeb4:	9009      	str	r0, [sp, #36]	; 0x24
 800eeb6:	a809      	add	r0, sp, #36	; 0x24
 800eeb8:	f7f5 f905 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eebc:	0143      	lsls	r3, r0, #5
 800eebe:	9302      	str	r3, [sp, #8]
 800eec0:	9b01      	ldr	r3, [sp, #4]
 800eec2:	eba3 0b08 	sub.w	fp, r3, r8
 800eec6:	9b02      	ldr	r3, [sp, #8]
 800eec8:	eba3 0a09 	sub.w	sl, r3, r9
 800eecc:	4658      	mov	r0, fp
 800eece:	4651      	mov	r1, sl
 800eed0:	f7ff fe8b 	bl	800ebea <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800eed4:	b320      	cbz	r0, 800ef20 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 800eed6:	4602      	mov	r2, r0
 800eed8:	4651      	mov	r1, sl
 800eeda:	9005      	str	r0, [sp, #20]
 800eedc:	9803      	ldr	r0, [sp, #12]
 800eede:	f004 fcab 	bl	8013838 <_ZN8touchgfx6muldivElll>
 800eee2:	2302      	movs	r3, #2
 800eee4:	4659      	mov	r1, fp
 800eee6:	fb90 faf3 	sdiv	sl, r0, r3
 800eeea:	9b05      	ldr	r3, [sp, #20]
 800eeec:	9803      	ldr	r0, [sp, #12]
 800eeee:	461a      	mov	r2, r3
 800eef0:	f004 fca2 	bl	8013838 <_ZN8touchgfx6muldivElll>
 800eef4:	2302      	movs	r3, #2
 800eef6:	eba8 010a 	sub.w	r1, r8, sl
 800eefa:	fb90 fbf3 	sdiv	fp, r0, r3
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	eb0b 0209 	add.w	r2, fp, r9
 800ef04:	4638      	mov	r0, r7
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	4798      	blx	r3
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	9a02      	ldr	r2, [sp, #8]
 800ef0e:	4638      	mov	r0, r7
 800ef10:	9901      	ldr	r1, [sp, #4]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	445a      	add	r2, fp
 800ef16:	eba1 010a 	sub.w	r1, r1, sl
 800ef1a:	4798      	blx	r3
 800ef1c:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 800ef20:	42a6      	cmp	r6, r4
 800ef22:	db02      	blt.n	800ef2a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 800ef24:	b00b      	add	sp, #44	; 0x2c
 800ef26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef2a:	9b00      	ldr	r3, [sp, #0]
 800ef2c:	9a04      	ldr	r2, [sp, #16]
 800ef2e:	42a2      	cmp	r2, r4
 800ef30:	bf08      	it	eq
 800ef32:	f04f 33ff 	moveq.w	r3, #4294967295
 800ef36:	e7a7      	b.n	800ee88 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0800ef38 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 800ef38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef3c:	6943      	ldr	r3, [r0, #20]
 800ef3e:	b0a2      	sub	sp, #136	; 0x88
 800ef40:	4606      	mov	r6, r0
 800ef42:	460f      	mov	r7, r1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d06c      	beq.n	800f022 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 800ef48:	695c      	ldr	r4, [r3, #20]
 800ef4a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	dc04      	bgt.n	800ef5c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 800ef52:	2401      	movs	r4, #1
 800ef54:	4620      	mov	r0, r4
 800ef56:	b022      	add	sp, #136	; 0x88
 800ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef5c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ef60:	ad22      	add	r5, sp, #136	; 0x88
 800ef62:	011b      	lsls	r3, r3, #4
 800ef64:	f845 3d70 	str.w	r3, [r5, #-112]!
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f7ff fc79 	bl	800e860 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800ef6e:	8839      	ldrh	r1, [r7, #0]
 800ef70:	88ba      	ldrh	r2, [r7, #4]
 800ef72:	b280      	uxth	r0, r0
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	440a      	add	r2, r1
 800ef78:	1a09      	subs	r1, r1, r0
 800ef7a:	4402      	add	r2, r0
 800ef7c:	f10d 000e 	add.w	r0, sp, #14
 800ef80:	b209      	sxth	r1, r1
 800ef82:	9000      	str	r0, [sp, #0]
 800ef84:	b212      	sxth	r2, r2
 800ef86:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	ab03      	add	r3, sp, #12
 800ef8e:	47c0      	blx	r8
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d0de      	beq.n	800ef52 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 800ef94:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800ef98:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800ef9c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800efa0:	18ca      	adds	r2, r1, r3
 800efa2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800efa6:	f8ad 1012 	strh.w	r1, [sp, #18]
 800efaa:	4639      	mov	r1, r7
 800efac:	1a9b      	subs	r3, r3, r2
 800efae:	2200      	movs	r2, #0
 800efb0:	f8ad 0014 	strh.w	r0, [sp, #20]
 800efb4:	a804      	add	r0, sp, #16
 800efb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efba:	f8ad 2010 	strh.w	r2, [sp, #16]
 800efbe:	f7fd fe69 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800efc2:	aa04      	add	r2, sp, #16
 800efc4:	4631      	mov	r1, r6
 800efc6:	4628      	mov	r0, r5
 800efc8:	f00e fd7e 	bl	801dac8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800efcc:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 800efd0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800efd4:	2f00      	cmp	r7, #0
 800efd6:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800efda:	dd03      	ble.n	800efe4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800efdc:	42bb      	cmp	r3, r7
 800efde:	da01      	bge.n	800efe4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800efe0:	42ba      	cmp	r2, r7
 800efe2:	da11      	bge.n	800f008 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 800efe4:	9200      	str	r2, [sp, #0]
 800efe6:	4622      	mov	r2, r4
 800efe8:	4629      	mov	r1, r5
 800efea:	4630      	mov	r0, r6
 800efec:	f7ff ff1a 	bl	800ee24 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800eff0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800eff4:	4628      	mov	r0, r5
 800eff6:	f00e fe23 	bl	801dc40 <_ZN8touchgfx6Canvas6renderEh>
 800effa:	4b0b      	ldr	r3, [pc, #44]	; (800f028 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 800effc:	4604      	mov	r4, r0
 800effe:	a80e      	add	r0, sp, #56	; 0x38
 800f000:	9306      	str	r3, [sp, #24]
 800f002:	f000 ff07 	bl	800fe14 <_ZN8touchgfx7OutlineD1Ev>
 800f006:	e7a5      	b.n	800ef54 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 800f008:	1e7a      	subs	r2, r7, #1
 800f00a:	4629      	mov	r1, r5
 800f00c:	4630      	mov	r0, r6
 800f00e:	b212      	sxth	r2, r2
 800f010:	9200      	str	r2, [sp, #0]
 800f012:	4622      	mov	r2, r4
 800f014:	f7ff ff06 	bl	800ee24 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800f018:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	463b      	mov	r3, r7
 800f020:	e7e1      	b.n	800efe6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 800f022:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 800f026:	deff      	udf	#255	; 0xff
 800f028:	08022660 	.word	0x08022660

0800f02c <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 800f02c:	4770      	bx	lr

0800f02e <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 800f02e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f030:	b118      	cbz	r0, 800f03a <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800f032:	6803      	ldr	r3, [r0, #0]
 800f034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f038:	4718      	bx	r3
 800f03a:	4770      	bx	lr

0800f03c <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800f03c:	680b      	ldr	r3, [r1, #0]
 800f03e:	4608      	mov	r0, r1
 800f040:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f044:	4718      	bx	r3

0800f046 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800f046:	680b      	ldr	r3, [r1, #0]
 800f048:	4608      	mov	r0, r1
 800f04a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f04e:	4718      	bx	r3

0800f050 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800f050:	680b      	ldr	r3, [r1, #0]
 800f052:	4608      	mov	r0, r1
 800f054:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f058:	4718      	bx	r3

0800f05a <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800f05a:	680b      	ldr	r3, [r1, #0]
 800f05c:	4608      	mov	r0, r1
 800f05e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f062:	4718      	bx	r3

0800f064 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 800f064:	4a38      	ldr	r2, [pc, #224]	; (800f148 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 800f066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800f06c:	b087      	sub	sp, #28
 800f06e:	8812      	ldrh	r2, [r2, #0]
 800f070:	4604      	mov	r4, r0
 800f072:	4689      	mov	r9, r1
 800f074:	429a      	cmp	r2, r3
 800f076:	d937      	bls.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f078:	4a34      	ldr	r2, [pc, #208]	; (800f14c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 800f07a:	6812      	ldr	r2, [r2, #0]
 800f07c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f080:	4b33      	ldr	r3, [pc, #204]	; (800f150 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800f088:	f1b8 0f00 	cmp.w	r8, #0
 800f08c:	d02c      	beq.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f08e:	6803      	ldr	r3, [r0, #0]
 800f090:	6945      	ldr	r5, [r0, #20]
 800f092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f094:	2d00      	cmp	r5, #0
 800f096:	d052      	beq.n	800f13e <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 800f098:	696f      	ldr	r7, [r5, #20]
 800f09a:	4798      	blx	r3
 800f09c:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 800f0a0:	fb15 f000 	smulbb	r0, r5, r0
 800f0a4:	b280      	uxth	r0, r0
 800f0a6:	1c45      	adds	r5, r0, #1
 800f0a8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800f0ac:	122d      	asrs	r5, r5, #8
 800f0ae:	d01b      	beq.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f0b0:	6823      	ldr	r3, [r4, #0]
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	b2ed      	uxtb	r5, r5
 800f0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0bc:	4798      	blx	r3
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	4798      	blx	r3
 800f0cc:	4683      	mov	fp, r0
 800f0ce:	b970      	cbnz	r0, 800f0ee <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800f0d0:	b96e      	cbnz	r6, 800f0ee <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800f0d2:	6823      	ldr	r3, [r4, #0]
 800f0d4:	4642      	mov	r2, r8
 800f0d6:	9600      	str	r6, [sp, #0]
 800f0d8:	4649      	mov	r1, r9
 800f0da:	4620      	mov	r0, r4
 800f0dc:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800f0e0:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	47a8      	blx	r5
 800f0e8:	b007      	add	sp, #28
 800f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ee:	2e00      	cmp	r6, #0
 800f0f0:	ddfa      	ble.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f0f2:	6823      	ldr	r3, [r4, #0]
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f0fc:	4798      	blx	r3
 800f0fe:	6823      	ldr	r3, [r4, #0]
 800f100:	4682      	mov	sl, r0
 800f102:	4639      	mov	r1, r7
 800f104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f108:	4620      	mov	r0, r4
 800f10a:	4798      	blx	r3
 800f10c:	4582      	cmp	sl, r0
 800f10e:	bfde      	ittt	le
 800f110:	4603      	movle	r3, r0
 800f112:	4650      	movle	r0, sl
 800f114:	469a      	movle	sl, r3
 800f116:	ebaa 0300 	sub.w	r3, sl, r0
 800f11a:	fb93 f3f6 	sdiv	r3, r3, r6
 800f11e:	2b64      	cmp	r3, #100	; 0x64
 800f120:	dce2      	bgt.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	4642      	mov	r2, r8
 800f126:	9000      	str	r0, [sp, #0]
 800f128:	4649      	mov	r1, r9
 800f12a:	4620      	mov	r0, r4
 800f12c:	e9cd b503 	strd	fp, r5, [sp, #12]
 800f130:	e9cd a601 	strd	sl, r6, [sp, #4]
 800f134:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800f138:	463b      	mov	r3, r7
 800f13a:	47a8      	blx	r5
 800f13c:	e7d4      	b.n	800f0e8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f13e:	4798      	blx	r3
 800f140:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f144:	deff      	udf	#255	; 0xff
 800f146:	bf00      	nop
 800f148:	2400f500 	.word	0x2400f500
 800f14c:	2400f4fc 	.word	0x2400f4fc
 800f150:	2400f504 	.word	0x2400f504

0800f154 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800f154:	4770      	bx	lr

0800f156 <_ZN8touchgfx12GraphLabelsXD1Ev>:
 800f156:	4770      	bx	lr

0800f158 <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	680a      	ldr	r2, [r1, #0]
 800f15c:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800f160:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800f164:	4608      	mov	r0, r1
 800f166:	4790      	blx	r2
 800f168:	4629      	mov	r1, r5
 800f16a:	4602      	mov	r2, r0
 800f16c:	4620      	mov	r0, r4
 800f16e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f172:	f7ff ba87 	b.w	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800f176 <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800f176:	b538      	push	{r3, r4, r5, lr}
 800f178:	680a      	ldr	r2, [r1, #0]
 800f17a:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800f17e:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800f182:	4608      	mov	r0, r1
 800f184:	4790      	blx	r2
 800f186:	4629      	mov	r1, r5
 800f188:	4602      	mov	r2, r0
 800f18a:	4620      	mov	r0, r4
 800f18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f190:	f7ff ba78 	b.w	800e684 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800f194 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800f194:	b510      	push	{r4, lr}
 800f196:	4604      	mov	r4, r0
 800f198:	214c      	movs	r1, #76	; 0x4c
 800f19a:	f00e fed0 	bl	801df3e <_ZdlPvj>
 800f19e:	4620      	mov	r0, r4
 800f1a0:	bd10      	pop	{r4, pc}

0800f1a2 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 800f1a2:	b510      	push	{r4, lr}
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	214c      	movs	r1, #76	; 0x4c
 800f1a8:	f00e fec9 	bl	801df3e <_ZdlPvj>
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	bd10      	pop	{r4, pc}

0800f1b0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	b08d      	sub	sp, #52	; 0x34
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ba:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800f1be:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 800f1c2:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800f1c6:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 800f1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f1cc:	f1b9 0f00 	cmp.w	r9, #0
 800f1d0:	d117      	bne.n	800f202 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 800f1d2:	2f00      	cmp	r7, #0
 800f1d4:	dc7c      	bgt.n	800f2d0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 800f1d6:	f1b8 0f00 	cmp.w	r8, #0
 800f1da:	da01      	bge.n	800f1e0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800f1dc:	2f00      	cmp	r7, #0
 800f1de:	d17a      	bne.n	800f2d6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f1e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	6832      	ldr	r2, [r6, #0]
 800f1e6:	9318      	str	r3, [sp, #96]	; 0x60
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9907      	ldr	r1, [sp, #28]
 800f1ec:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800f1f0:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800f1f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1f8:	46a4      	mov	ip, r4
 800f1fa:	b00d      	add	sp, #52	; 0x34
 800f1fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f200:	4760      	bx	ip
 800f202:	fb97 f4f9 	sdiv	r4, r7, r9
 800f206:	1e63      	subs	r3, r4, #1
 800f208:	9305      	str	r3, [sp, #20]
 800f20a:	f1ba 0f00 	cmp.w	sl, #0
 800f20e:	d122      	bne.n	800f256 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 800f210:	fb03 f509 	mul.w	r5, r3, r9
 800f214:	fb98 faf9 	sdiv	sl, r8, r9
 800f218:	f10a 0a02 	add.w	sl, sl, #2
 800f21c:	9b05      	ldr	r3, [sp, #20]
 800f21e:	459a      	cmp	sl, r3
 800f220:	d059      	beq.n	800f2d6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f222:	42af      	cmp	r7, r5
 800f224:	dc5a      	bgt.n	800f2dc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 800f226:	45a8      	cmp	r8, r5
 800f228:	da01      	bge.n	800f22e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 800f22a:	42af      	cmp	r7, r5
 800f22c:	db0e      	blt.n	800f24c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800f22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f230:	4630      	mov	r0, r6
 800f232:	9905      	ldr	r1, [sp, #20]
 800f234:	9302      	str	r3, [sp, #8]
 800f236:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800f238:	6832      	ldr	r2, [r6, #0]
 800f23a:	434b      	muls	r3, r1
 800f23c:	9907      	ldr	r1, [sp, #28]
 800f23e:	e9cd 5300 	strd	r5, r3, [sp]
 800f242:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 800f246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f24a:	47d8      	blx	fp
 800f24c:	9b05      	ldr	r3, [sp, #20]
 800f24e:	444d      	add	r5, r9
 800f250:	3301      	adds	r3, #1
 800f252:	9305      	str	r3, [sp, #20]
 800f254:	e7e2      	b.n	800f21c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 800f256:	fb97 f3fa 	sdiv	r3, r7, sl
 800f25a:	3b01      	subs	r3, #1
 800f25c:	9306      	str	r3, [sp, #24]
 800f25e:	9a06      	ldr	r2, [sp, #24]
 800f260:	fb98 f3fa 	sdiv	r3, r8, sl
 800f264:	fb02 fb0a 	mul.w	fp, r2, sl
 800f268:	9a05      	ldr	r2, [sp, #20]
 800f26a:	3302      	adds	r3, #2
 800f26c:	fb02 f509 	mul.w	r5, r2, r9
 800f270:	930b      	str	r3, [sp, #44]	; 0x2c
 800f272:	45ab      	cmp	fp, r5
 800f274:	dd1d      	ble.n	800f2b2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800f276:	42af      	cmp	r7, r5
 800f278:	dc08      	bgt.n	800f28c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 800f27a:	45a8      	cmp	r8, r5
 800f27c:	da08      	bge.n	800f290 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800f27e:	42af      	cmp	r7, r5
 800f280:	da06      	bge.n	800f290 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800f282:	9b05      	ldr	r3, [sp, #20]
 800f284:	444d      	add	r5, r9
 800f286:	3301      	adds	r3, #1
 800f288:	9305      	str	r3, [sp, #20]
 800f28a:	e7f2      	b.n	800f272 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800f28c:	45a8      	cmp	r8, r5
 800f28e:	dcf8      	bgt.n	800f282 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800f290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f292:	4630      	mov	r0, r6
 800f294:	9905      	ldr	r1, [sp, #20]
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800f29a:	6832      	ldr	r2, [r6, #0]
 800f29c:	434b      	muls	r3, r1
 800f29e:	9907      	ldr	r1, [sp, #28]
 800f2a0:	e9cd 5300 	strd	r5, r3, [sp]
 800f2a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f2a8:	461c      	mov	r4, r3
 800f2aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f2ae:	47a0      	blx	r4
 800f2b0:	e7e7      	b.n	800f282 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800f2b2:	45ab      	cmp	fp, r5
 800f2b4:	db04      	blt.n	800f2c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 800f2b6:	9b05      	ldr	r3, [sp, #20]
 800f2b8:	444d      	add	r5, r9
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	9305      	str	r3, [sp, #20]
 800f2be:	e7f8      	b.n	800f2b2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800f2c0:	9b06      	ldr	r3, [sp, #24]
 800f2c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	9306      	str	r3, [sp, #24]
 800f2ca:	d004      	beq.n	800f2d6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f2cc:	44d3      	add	fp, sl
 800f2ce:	e7d0      	b.n	800f272 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800f2d0:	f1b8 0f00 	cmp.w	r8, #0
 800f2d4:	dd84      	ble.n	800f1e0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800f2d6:	b00d      	add	sp, #52	; 0x34
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	45a8      	cmp	r8, r5
 800f2de:	dcb5      	bgt.n	800f24c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800f2e0:	e7a5      	b.n	800f22e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0800f2e2 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800f2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e6:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 800f2ea:	b089      	sub	sp, #36	; 0x24
 800f2ec:	468a      	mov	sl, r1
 800f2ee:	4693      	mov	fp, r2
 800f2f0:	2c00      	cmp	r4, #0
 800f2f2:	9007      	str	r0, [sp, #28]
 800f2f4:	461d      	mov	r5, r3
 800f2f6:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800f2fa:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 800f2fe:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 800f302:	dd03      	ble.n	800f30c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 800f304:	4564      	cmp	r4, ip
 800f306:	dd01      	ble.n	800f30c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 800f308:	42b4      	cmp	r4, r6
 800f30a:	dd0e      	ble.n	800f32a <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 800f30c:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800f310:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 800f314:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 800f318:	462b      	mov	r3, r5
 800f31a:	465a      	mov	r2, fp
 800f31c:	4651      	mov	r1, sl
 800f31e:	9807      	ldr	r0, [sp, #28]
 800f320:	b009      	add	sp, #36	; 0x24
 800f322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f326:	f7ff bf43 	b.w	800f1b0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 800f32a:	f104 3eff 	add.w	lr, r4, #4294967295
 800f32e:	9702      	str	r7, [sp, #8]
 800f330:	e9cd 8903 	strd	r8, r9, [sp, #12]
 800f334:	e9cd ce00 	strd	ip, lr, [sp]
 800f338:	f7ff ff3a 	bl	800f1b0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 800f33c:	9412      	str	r4, [sp, #72]	; 0x48
 800f33e:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 800f342:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 800f346:	e7e7      	b.n	800f318 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

0800f348 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	f1b3 0900 	subs.w	r9, r3, #0
 800f350:	460d      	mov	r5, r1
 800f352:	4690      	mov	r8, r2
 800f354:	9f08      	ldr	r7, [sp, #32]
 800f356:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800f35a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f35c:	da18      	bge.n	800f390 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800f35e:	2a01      	cmp	r2, #1
 800f360:	dd16      	ble.n	800f390 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800f362:	232d      	movs	r3, #45	; 0x2d
 800f364:	f1c9 0900 	rsb	r9, r9, #0
 800f368:	2001      	movs	r0, #1
 800f36a:	800b      	strh	r3, [r1, #0]
 800f36c:	2f00      	cmp	r7, #0
 800f36e:	d111      	bne.n	800f394 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 800f370:	2302      	movs	r3, #2
 800f372:	eba8 0100 	sub.w	r1, r8, r0
 800f376:	4a26      	ldr	r2, [pc, #152]	; (800f410 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800f378:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800f37c:	b289      	uxth	r1, r1
 800f37e:	fb96 f3f3 	sdiv	r3, r6, r3
 800f382:	444b      	add	r3, r9
 800f384:	fb93 f3f6 	sdiv	r3, r3, r6
 800f388:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f38c:	f006 b870 	b.w	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f390:	2000      	movs	r0, #0
 800f392:	e7eb      	b.n	800f36c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 800f394:	dd39      	ble.n	800f40a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800f396:	eba8 0100 	sub.w	r1, r8, r0
 800f39a:	4a1d      	ldr	r2, [pc, #116]	; (800f410 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800f39c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800f3a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3a4:	b289      	uxth	r1, r1
 800f3a6:	fb99 f4f6 	sdiv	r4, r9, r6
 800f3aa:	4623      	mov	r3, r4
 800f3ac:	f006 f860 	bl	8015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f005 fceb 	bl	8014d8c <_ZN8touchgfx7Unicode6strlenEPKt>
 800f3b6:	4580      	cmp	r8, r0
 800f3b8:	dd27      	ble.n	800f40a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800f3ba:	f04f 0e02 	mov.w	lr, #2
 800f3be:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 800f3c2:	fb06 9314 	mls	r3, r6, r4, r9
 800f3c6:	3001      	adds	r0, #1
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f04f 090a 	mov.w	r9, #10
 800f3ce:	f107 3aff 	add.w	sl, r7, #4294967295
 800f3d2:	fb96 fefe 	sdiv	lr, r6, lr
 800f3d6:	4580      	cmp	r8, r0
 800f3d8:	4684      	mov	ip, r0
 800f3da:	dd13      	ble.n	800f404 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 800f3dc:	fb09 f303 	mul.w	r3, r9, r3
 800f3e0:	4592      	cmp	sl, r2
 800f3e2:	f102 0201 	add.w	r2, r2, #1
 800f3e6:	f100 0c01 	add.w	ip, r0, #1
 800f3ea:	bf08      	it	eq
 800f3ec:	4473      	addeq	r3, lr
 800f3ee:	4297      	cmp	r7, r2
 800f3f0:	fb93 f4f6 	sdiv	r4, r3, r6
 800f3f4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f3f8:	fb06 3314 	mls	r3, r6, r4, r3
 800f3fc:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 800f400:	4660      	mov	r0, ip
 800f402:	d1e8      	bne.n	800f3d6 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 800f404:	2300      	movs	r3, #0
 800f406:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 800f40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f40e:	bf00      	nop
 800f410:	08021970 	.word	0x08021970

0800f414 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 800f414:	4a69      	ldr	r2, [pc, #420]	; (800f5bc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 800f416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f41a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800f41c:	b093      	sub	sp, #76	; 0x4c
 800f41e:	8812      	ldrh	r2, [r2, #0]
 800f420:	4604      	mov	r4, r0
 800f422:	460e      	mov	r6, r1
 800f424:	429a      	cmp	r2, r3
 800f426:	d93a      	bls.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f428:	4a65      	ldr	r2, [pc, #404]	; (800f5c0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 800f42a:	6812      	ldr	r2, [r2, #0]
 800f42c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f430:	4b64      	ldr	r3, [pc, #400]	; (800f5c4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800f438:	f1b8 0f00 	cmp.w	r8, #0
 800f43c:	d02f      	beq.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f43e:	6803      	ldr	r3, [r0, #0]
 800f440:	6945      	ldr	r5, [r0, #20]
 800f442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f444:	2d00      	cmp	r5, #0
 800f446:	f000 80b5 	beq.w	800f5b4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 800f44a:	696f      	ldr	r7, [r5, #20]
 800f44c:	4798      	blx	r3
 800f44e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f452:	fb13 f000 	smulbb	r0, r3, r0
 800f456:	b280      	uxth	r0, r0
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 800f45e:	0a03      	lsrs	r3, r0, #8
 800f460:	d01d      	beq.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f464:	4620      	mov	r0, r4
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	434e      	muls	r6, r1
 800f46a:	4639      	mov	r1, r7
 800f46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f470:	4798      	blx	r3
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	4605      	mov	r5, r0
 800f476:	4639      	mov	r1, r7
 800f478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f47c:	4620      	mov	r0, r4
 800f47e:	4798      	blx	r3
 800f480:	2d00      	cmp	r5, #0
 800f482:	dd0f      	ble.n	800f4a4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 800f484:	fb96 f3f5 	sdiv	r3, r6, r5
 800f488:	436b      	muls	r3, r5
 800f48a:	1b9a      	subs	r2, r3, r6
 800f48c:	4253      	negs	r3, r2
 800f48e:	4153      	adcs	r3, r2
 800f490:	2800      	cmp	r0, #0
 800f492:	dd09      	ble.n	800f4a8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 800f494:	fb96 f2f0 	sdiv	r2, r6, r0
 800f498:	4350      	muls	r0, r2
 800f49a:	42b0      	cmp	r0, r6
 800f49c:	d10d      	bne.n	800f4ba <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 800f49e:	b013      	add	sp, #76	; 0x4c
 800f4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	e7f3      	b.n	800f490 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 800f4a8:	d107      	bne.n	800f4ba <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 800f4aa:	2d00      	cmp	r5, #0
 800f4ac:	d17f      	bne.n	800f5ae <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 800f4ae:	2e00      	cmp	r6, #0
 800f4b0:	d063      	beq.n	800f57a <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d0f3      	beq.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f4b6:	462a      	mov	r2, r5
 800f4b8:	e007      	b.n	800f4ca <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0ef      	beq.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f4be:	2d00      	cmp	r5, #0
 800f4c0:	d0f9      	beq.n	800f4b6 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 800f4c2:	fb96 f2f5 	sdiv	r2, r6, r5
 800f4c6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800f4c8:	436a      	muls	r2, r5
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f4d4:	4798      	blx	r3
 800f4d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f4d8:	2214      	movs	r2, #20
 800f4da:	a908      	add	r1, sp, #32
 800f4dc:	9302      	str	r3, [sp, #8]
 800f4de:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800f4e2:	9301      	str	r3, [sp, #4]
 800f4e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f7ff ff2b 	bl	800f348 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800f4f2:	4b35      	ldr	r3, [pc, #212]	; (800f5c8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 800f4f4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f4f6:	6818      	ldr	r0, [r3, #0]
 800f4f8:	f7f3 fd5a 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800f4fc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f500:	4681      	mov	r9, r0
 800f502:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f506:	f8d8 3000 	ldr.w	r3, [r8]
 800f50a:	d138      	bne.n	800f57e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 800f50c:	4601      	mov	r1, r0
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	aa08      	add	r2, sp, #32
 800f512:	4640      	mov	r0, r8
 800f514:	4798      	blx	r3
 800f516:	b205      	sxth	r5, r0
 800f518:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f51c:	2002      	movs	r0, #2
 800f51e:	4631      	mov	r1, r6
 800f520:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
 800f524:	2b01      	cmp	r3, #1
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	bf88      	it	hi
 800f52a:	f105 0801 	addhi.w	r8, r5, #1
 800f52e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f532:	bf8c      	ite	hi
 800f534:	fb98 f8f0 	sdivhi	r8, r8, r0
 800f538:	fb95 f8f0 	sdivls	r8, r5, r0
 800f53c:	4638      	mov	r0, r7
 800f53e:	bf88      	it	hi
 800f540:	fa0f f888 	sxthhi.w	r8, r8
 800f544:	4798      	blx	r3
 800f546:	ab12      	add	r3, sp, #72	; 0x48
 800f548:	f843 0d34 	str.w	r0, [r3, #-52]!
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7f4 fdba 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f552:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f556:	4448      	add	r0, r9
 800f558:	2200      	movs	r2, #0
 800f55a:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f55e:	a906      	add	r1, sp, #24
 800f560:	eba0 0808 	sub.w	r8, r0, r8
 800f564:	6823      	ldr	r3, [r4, #0]
 800f566:	f8ad 201a 	strh.w	r2, [sp, #26]
 800f56a:	4620      	mov	r0, r4
 800f56c:	f8ad 8018 	strh.w	r8, [sp, #24]
 800f570:	f8ad 501c 	strh.w	r5, [sp, #28]
 800f574:	691b      	ldr	r3, [r3, #16]
 800f576:	4798      	blx	r3
 800f578:	e791      	b.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f57a:	4632      	mov	r2, r6
 800f57c:	e7a5      	b.n	800f4ca <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 800f57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f580:	4640      	mov	r0, r8
 800f582:	4798      	blx	r3
 800f584:	f8d8 3000 	ldr.w	r3, [r8]
 800f588:	4605      	mov	r5, r0
 800f58a:	aa08      	add	r2, sp, #32
 800f58c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f58e:	4649      	mov	r1, r9
 800f590:	4640      	mov	r0, r8
 800f592:	4798      	blx	r3
 800f594:	fb15 f500 	smulbb	r5, r5, r0
 800f598:	f8d8 3000 	ldr.w	r3, [r8]
 800f59c:	aa08      	add	r2, sp, #32
 800f59e:	b2ad      	uxth	r5, r5
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	4798      	blx	r3
 800f5a8:	4405      	add	r5, r0
 800f5aa:	b22d      	sxth	r5, r5
 800f5ac:	e7b4      	b.n	800f518 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d187      	bne.n	800f4c2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 800f5b2:	e774      	b.n	800f49e <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 800f5b4:	4798      	blx	r3
 800f5b6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f5ba:	deff      	udf	#255	; 0xff
 800f5bc:	2400f500 	.word	0x2400f500
 800f5c0:	2400f4fc 	.word	0x2400f4fc
 800f5c4:	2400f504 	.word	0x2400f504
 800f5c8:	2400f508 	.word	0x2400f508

0800f5cc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800f5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d0:	b09b      	sub	sp, #108	; 0x6c
 800f5d2:	461e      	mov	r6, r3
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	af1a      	add	r7, sp, #104	; 0x68
 800f5da:	9104      	str	r1, [sp, #16]
 800f5dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f5e4:	4690      	mov	r8, r2
 800f5e6:	4798      	blx	r3
 800f5e8:	f847 0d28 	str.w	r0, [r7, #-40]!
 800f5ec:	4638      	mov	r0, r7
 800f5ee:	f7f4 fd6a 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f5f2:	f8b6 3116 	ldrh.w	r3, [r6, #278]	; 0x116
 800f5f6:	1ac0      	subs	r0, r0, r3
 800f5f8:	b200      	sxth	r0, r0
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	f2c0 80b8 	blt.w	800f770 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800f600:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 800f604:	441a      	add	r2, r3
 800f606:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 800f60a:	1a9b      	subs	r3, r3, r2
 800f60c:	b21b      	sxth	r3, r3
 800f60e:	4298      	cmp	r0, r3
 800f610:	f280 80ae 	bge.w	800f770 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800f614:	6833      	ldr	r3, [r6, #0]
 800f616:	4630      	mov	r0, r6
 800f618:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 800f61c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800f620:	4798      	blx	r3
 800f622:	6833      	ldr	r3, [r6, #0]
 800f624:	f8b4 9042 	ldrh.w	r9, [r4, #66]	; 0x42
 800f628:	4605      	mov	r5, r0
 800f62a:	f8b4 b044 	ldrh.w	fp, [r4, #68]	; 0x44
 800f62e:	4630      	mov	r0, r6
 800f630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f634:	4798      	blx	r3
 800f636:	f8cd 9000 	str.w	r9, [sp]
 800f63a:	462b      	mov	r3, r5
 800f63c:	2214      	movs	r2, #20
 800f63e:	4639      	mov	r1, r7
 800f640:	e9cd b001 	strd	fp, r0, [sp, #4]
 800f644:	4620      	mov	r0, r4
 800f646:	f7ff fe7f 	bl	800f348 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800f64a:	4b57      	ldr	r3, [pc, #348]	; (800f7a8 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 800f64c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f64e:	6818      	ldr	r0, [r3, #0]
 800f650:	f7f3 fcae 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800f654:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f658:	4681      	mov	r9, r0
 800f65a:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f65e:	f8d8 3000 	ldr.w	r3, [r8]
 800f662:	f040 8088 	bne.w	800f776 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 800f666:	4601      	mov	r1, r0
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	463a      	mov	r2, r7
 800f66c:	4640      	mov	r0, r8
 800f66e:	4798      	blx	r3
 800f670:	b205      	sxth	r5, r0
 800f672:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f676:	2002      	movs	r0, #2
 800f678:	6832      	ldr	r2, [r6, #0]
 800f67a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800f67e:	2b01      	cmp	r3, #1
 800f680:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
 800f684:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 800f688:	bf88      	it	hi
 800f68a:	f105 0b01 	addhi.w	fp, r5, #1
 800f68e:	9305      	str	r3, [sp, #20]
 800f690:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f692:	bf8c      	ite	hi
 800f694:	fb9b fbf0 	sdivhi	fp, fp, r0
 800f698:	fb95 fbf0 	sdivls	fp, r5, r0
 800f69c:	4630      	mov	r0, r6
 800f69e:	bf88      	it	hi
 800f6a0:	fa0f fb8b 	sxthhi.w	fp, fp
 800f6a4:	4790      	blx	r2
 800f6a6:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 800f6aa:	4650      	mov	r0, sl
 800f6ac:	2600      	movs	r6, #0
 800f6ae:	f7f4 fd0a 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f6b2:	9b05      	ldr	r3, [sp, #20]
 800f6b4:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 800f6b8:	4418      	add	r0, r3
 800f6ba:	f8ad 5020 	strh.w	r5, [sp, #32]
 800f6be:	ad07      	add	r5, sp, #28
 800f6c0:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f6c4:	eba0 0b0b 	sub.w	fp, r0, fp
 800f6c8:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800f6cc:	f8ad b01c 	strh.w	fp, [sp, #28]
 800f6d0:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800f6d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f6d8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f6dc:	9904      	ldr	r1, [sp, #16]
 800f6de:	4658      	mov	r0, fp
 800f6e0:	f7fd fad8 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800f6e4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800f6e8:	42b3      	cmp	r3, r6
 800f6ea:	dd41      	ble.n	800f770 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800f6ec:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800f6f0:	42b3      	cmp	r3, r6
 800f6f2:	dd3d      	ble.n	800f770 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 800f6f4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f6fe:	1a5b      	subs	r3, r3, r1
 800f700:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800f704:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f708:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f70c:	1a5b      	subs	r3, r3, r1
 800f70e:	4629      	mov	r1, r5
 800f710:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f718:	4798      	blx	r3
 800f71a:	4b24      	ldr	r3, [pc, #144]	; (800f7ac <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 800f71c:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f724:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f728:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f72a:	785b      	ldrb	r3, [r3, #1]
 800f72c:	910d      	str	r1, [sp, #52]	; 0x34
 800f72e:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 800f732:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f736:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800f73a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800f73e:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800f742:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 800f746:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f74a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800f74e:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 800f752:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 800f756:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800f75a:	f7fd fd6b 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800f75e:	465b      	mov	r3, fp
 800f760:	e9cd 7602 	strd	r7, r6, [sp, #8]
 800f764:	e9cd a900 	strd	sl, r9, [sp]
 800f768:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f76c:	f7f3 fbd2 	bl	8002f14 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f770:	b01b      	add	sp, #108	; 0x6c
 800f772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f778:	4640      	mov	r0, r8
 800f77a:	4798      	blx	r3
 800f77c:	f8d8 3000 	ldr.w	r3, [r8]
 800f780:	4605      	mov	r5, r0
 800f782:	463a      	mov	r2, r7
 800f784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	4798      	blx	r3
 800f78c:	fb15 f500 	smulbb	r5, r5, r0
 800f790:	f8d8 3000 	ldr.w	r3, [r8]
 800f794:	463a      	mov	r2, r7
 800f796:	b2ad      	uxth	r5, r5
 800f798:	4649      	mov	r1, r9
 800f79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79c:	4640      	mov	r0, r8
 800f79e:	4798      	blx	r3
 800f7a0:	4405      	add	r5, r0
 800f7a2:	b22d      	sxth	r5, r5
 800f7a4:	e765      	b.n	800f672 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 800f7a6:	bf00      	nop
 800f7a8:	2400f508 	.word	0x2400f508
 800f7ac:	2400f4fc 	.word	0x2400f4fc

0800f7b0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	b09b      	sub	sp, #108	; 0x6c
 800f7b6:	4698      	mov	r8, r3
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	ae1a      	add	r6, sp, #104	; 0x68
 800f7be:	9104      	str	r1, [sp, #16]
 800f7c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f7c4:	4640      	mov	r0, r8
 800f7c6:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f7c8:	4617      	mov	r7, r2
 800f7ca:	4798      	blx	r3
 800f7cc:	f846 0d28 	str.w	r0, [r6, #-40]!
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f7f4 fc78 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f7d6:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 800f7da:	1ac0      	subs	r0, r0, r3
 800f7dc:	b200      	sxth	r0, r0
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	f2c0 80ba 	blt.w	800f958 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f7e4:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 800f7e8:	441a      	add	r2, r3
 800f7ea:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 800f7ee:	1a9b      	subs	r3, r3, r2
 800f7f0:	b21b      	sxth	r3, r3
 800f7f2:	4298      	cmp	r0, r3
 800f7f4:	f280 80b0 	bge.w	800f958 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f7f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f7fa:	2214      	movs	r2, #20
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4620      	mov	r0, r4
 800f800:	9302      	str	r3, [sp, #8]
 800f802:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f80c:	9300      	str	r3, [sp, #0]
 800f80e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800f810:	f7ff fd9a 	bl	800f348 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800f814:	4b55      	ldr	r3, [pc, #340]	; (800f96c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 800f816:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f818:	6818      	ldr	r0, [r3, #0]
 800f81a:	f7f3 fbc9 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800f81e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f822:	4681      	mov	r9, r0
 800f824:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	f040 8098 	bne.w	800f95e <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 800f82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f830:	4638      	mov	r0, r7
 800f832:	4798      	blx	r3
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	4605      	mov	r5, r0
 800f838:	4632      	mov	r2, r6
 800f83a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f83c:	4649      	mov	r1, r9
 800f83e:	4638      	mov	r0, r7
 800f840:	4798      	blx	r3
 800f842:	fb15 f500 	smulbb	r5, r5, r0
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	4632      	mov	r2, r6
 800f84a:	b2ad      	uxth	r5, r5
 800f84c:	4649      	mov	r1, r9
 800f84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f850:	4638      	mov	r0, r7
 800f852:	4798      	blx	r3
 800f854:	4405      	add	r5, r0
 800f856:	b22d      	sxth	r5, r5
 800f858:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f85c:	2002      	movs	r0, #2
 800f85e:	f8d8 2000 	ldr.w	r2, [r8]
 800f862:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800f866:	2b01      	cmp	r3, #1
 800f868:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 800f86c:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 800f870:	bf88      	it	hi
 800f872:	f105 0b01 	addhi.w	fp, r5, #1
 800f876:	9305      	str	r3, [sp, #20]
 800f878:	9924      	ldr	r1, [sp, #144]	; 0x90
 800f87a:	bf8c      	ite	hi
 800f87c:	fb9b fbf0 	sdivhi	fp, fp, r0
 800f880:	fb95 fbf0 	sdivls	fp, r5, r0
 800f884:	4640      	mov	r0, r8
 800f886:	bf88      	it	hi
 800f888:	fa0f fb8b 	sxthhi.w	fp, fp
 800f88c:	4790      	blx	r2
 800f88e:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 800f892:	4650      	mov	r0, sl
 800f894:	f04f 0800 	mov.w	r8, #0
 800f898:	f7f4 fc15 	bl	80040c6 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f89c:	9b05      	ldr	r3, [sp, #20]
 800f89e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f8a2:	4418      	add	r0, r3
 800f8a4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800f8a8:	ad07      	add	r5, sp, #28
 800f8aa:	f8ad 801c 	strh.w	r8, [sp, #28]
 800f8ae:	eba0 0b0b 	sub.w	fp, r0, fp
 800f8b2:	f8ad 1020 	strh.w	r1, [sp, #32]
 800f8b6:	f8ad b01e 	strh.w	fp, [sp, #30]
 800f8ba:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800f8be:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f8c2:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f8c6:	9904      	ldr	r1, [sp, #16]
 800f8c8:	4658      	mov	r0, fp
 800f8ca:	f7fd f9e3 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800f8ce:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800f8d2:	4543      	cmp	r3, r8
 800f8d4:	dd40      	ble.n	800f958 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f8d6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800f8da:	4543      	cmp	r3, r8
 800f8dc:	dd3c      	ble.n	800f958 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800f8de:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800f8e8:	1a5b      	subs	r3, r3, r1
 800f8ea:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800f8ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800f8f2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800f8f6:	1a5b      	subs	r3, r3, r1
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800f8fe:	6823      	ldr	r3, [r4, #0]
 800f900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f902:	4798      	blx	r3
 800f904:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 800f906:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f90e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f912:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f914:	785b      	ldrb	r3, [r3, #1]
 800f916:	910d      	str	r1, [sp, #52]	; 0x34
 800f918:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 800f91c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f920:	970b      	str	r7, [sp, #44]	; 0x2c
 800f922:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800f926:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800f92a:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 800f92e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f932:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800f936:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 800f93a:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 800f93e:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 800f942:	f7fd fc77 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 800f946:	465b      	mov	r3, fp
 800f948:	e9cd 6802 	strd	r6, r8, [sp, #8]
 800f94c:	e9cd a900 	strd	sl, r9, [sp]
 800f950:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f954:	f7f3 fade 	bl	8002f14 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f958:	b01b      	add	sp, #108	; 0x6c
 800f95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f95e:	4601      	mov	r1, r0
 800f960:	699b      	ldr	r3, [r3, #24]
 800f962:	4632      	mov	r2, r6
 800f964:	4638      	mov	r0, r7
 800f966:	4798      	blx	r3
 800f968:	b205      	sxth	r5, r0
 800f96a:	e775      	b.n	800f858 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 800f96c:	2400f508 	.word	0x2400f508
 800f970:	2400f4fc 	.word	0x2400f4fc

0800f974 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800f974:	4b07      	ldr	r3, [pc, #28]	; (800f994 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800f976:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	4293      	cmp	r3, r2
 800f97c:	bf81      	itttt	hi
 800f97e:	4b06      	ldrhi	r3, [pc, #24]	; (800f998 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800f980:	681b      	ldrhi	r3, [r3, #0]
 800f982:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800f986:	7858      	ldrbhi	r0, [r3, #1]
 800f988:	bf8c      	ite	hi
 800f98a:	f000 0003 	andhi.w	r0, r0, #3
 800f98e:	2000      	movls	r0, #0
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	2400f500 	.word	0x2400f500
 800f998:	2400f4fc 	.word	0x2400f4fc

0800f99c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800f99c:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800f99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	428b      	cmp	r3, r1
 800f9aa:	d918      	bls.n	800f9de <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800f9ac:	6803      	ldr	r3, [r0, #0]
 800f9ae:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800f9b0:	4b0d      	ldr	r3, [pc, #52]	; (800f9e8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800f9b2:	6818      	ldr	r0, [r3, #0]
 800f9b4:	f7f3 fafc 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	4606      	mov	r6, r0
 800f9bc:	4620      	mov	r0, r4
 800f9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9c0:	4798      	blx	r3
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9cc:	4798      	blx	r3
 800f9ce:	463a      	mov	r2, r7
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4631      	mov	r1, r6
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	46ac      	mov	ip, r5
 800f9d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	4760      	bx	ip
 800f9de:	2000      	movs	r0, #0
 800f9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e4:	2400f500 	.word	0x2400f500
 800f9e8:	2400f508 	.word	0x2400f508

0800f9ec <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f9ec:	4b18      	ldr	r3, [pc, #96]	; (800fa50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800f9ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9f2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	428b      	cmp	r3, r1
 800f9fa:	d926      	bls.n	800fa4a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800f9fc:	4b15      	ldr	r3, [pc, #84]	; (800fa54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800fa04:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800fa08:	4b13      	ldr	r3, [pc, #76]	; (800fa58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800fa0a:	7855      	ldrb	r5, [r2, #1]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800fa12:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800fa16:	6833      	ldr	r3, [r6, #0]
 800fa18:	69df      	ldr	r7, [r3, #28]
 800fa1a:	4b10      	ldr	r3, [pc, #64]	; (800fa5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	f7f3 fac7 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	4680      	mov	r8, r0
 800fa26:	4620      	mov	r0, r4
 800fa28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa2a:	4798      	blx	r3
 800fa2c:	6823      	ldr	r3, [r4, #0]
 800fa2e:	4681      	mov	r9, r0
 800fa30:	4620      	mov	r0, r4
 800fa32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa36:	4798      	blx	r3
 800fa38:	464b      	mov	r3, r9
 800fa3a:	9000      	str	r0, [sp, #0]
 800fa3c:	4642      	mov	r2, r8
 800fa3e:	4629      	mov	r1, r5
 800fa40:	4630      	mov	r0, r6
 800fa42:	47b8      	blx	r7
 800fa44:	b003      	add	sp, #12
 800fa46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	e7fa      	b.n	800fa44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800fa4e:	bf00      	nop
 800fa50:	2400f500 	.word	0x2400f500
 800fa54:	2400f4fc 	.word	0x2400f4fc
 800fa58:	2400f504 	.word	0x2400f504
 800fa5c:	2400f508 	.word	0x2400f508

0800fa60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800fa60:	b40e      	push	{r1, r2, r3}
 800fa62:	4b30      	ldr	r3, [pc, #192]	; (800fb24 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800fa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa68:	881a      	ldrh	r2, [r3, #0]
 800fa6a:	b09d      	sub	sp, #116	; 0x74
 800fa6c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800fa6e:	4604      	mov	r4, r0
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d954      	bls.n	800fb1e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800fa74:	aa26      	add	r2, sp, #152	; 0x98
 800fa76:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800fb28 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800fa7a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fb2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800fa7e:	9202      	str	r2, [sp, #8]
 800fa80:	f8d9 2000 	ldr.w	r2, [r9]
 800fa84:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800fa88:	f8d8 3000 	ldr.w	r3, [r8]
 800fa8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	4628      	mov	r0, r5
 800fa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa96:	4798      	blx	r3
 800fa98:	4606      	mov	r6, r0
 800fa9a:	b207      	sxth	r7, r0
 800fa9c:	a803      	add	r0, sp, #12
 800fa9e:	f004 fa27 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 800faa2:	682b      	ldr	r3, [r5, #0]
 800faa4:	4628      	mov	r0, r5
 800faa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faa8:	4798      	blx	r3
 800faaa:	682b      	ldr	r3, [r5, #0]
 800faac:	4682      	mov	sl, r0
 800faae:	4628      	mov	r0, r5
 800fab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fab2:	4798      	blx	r3
 800fab4:	4653      	mov	r3, sl
 800fab6:	9000      	str	r0, [sp, #0]
 800fab8:	a803      	add	r0, sp, #12
 800faba:	9a02      	ldr	r2, [sp, #8]
 800fabc:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fabe:	f004 fa6a 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fac2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800fac4:	f8d9 3000 	ldr.w	r3, [r9]
 800fac8:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800facc:	8925      	ldrh	r5, [r4, #8]
 800face:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800fad2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800fad6:	eba5 050c 	sub.w	r5, r5, ip
 800fada:	784a      	ldrb	r2, [r1, #1]
 800fadc:	f8d8 3000 	ldr.w	r3, [r8]
 800fae0:	b22d      	sxth	r5, r5
 800fae2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800fae6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800faea:	9500      	str	r5, [sp, #0]
 800faec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800faf0:	a803      	add	r0, sp, #12
 800faf2:	f002 f869 	bl	8011bc8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800faf6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800fafa:	b203      	sxth	r3, r0
 800fafc:	18b9      	adds	r1, r7, r2
 800fafe:	2900      	cmp	r1, #0
 800fb00:	dd0b      	ble.n	800fb1a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800fb02:	3b01      	subs	r3, #1
 800fb04:	fb13 f302 	smulbb	r3, r3, r2
 800fb08:	fb16 3300 	smlabb	r3, r6, r0, r3
 800fb0c:	b21f      	sxth	r7, r3
 800fb0e:	4638      	mov	r0, r7
 800fb10:	b01d      	add	sp, #116	; 0x74
 800fb12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb16:	b003      	add	sp, #12
 800fb18:	4770      	bx	lr
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	dcf7      	bgt.n	800fb0e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800fb1e:	2700      	movs	r7, #0
 800fb20:	e7f5      	b.n	800fb0e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800fb22:	bf00      	nop
 800fb24:	2400f500 	.word	0x2400f500
 800fb28:	2400f4fc 	.word	0x2400f4fc
 800fb2c:	2400f504 	.word	0x2400f504

0800fb30 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	6803      	ldr	r3, [r0, #0]
 800fb34:	4604      	mov	r4, r0
 800fb36:	4615      	mov	r5, r2
 800fb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3a:	4798      	blx	r3
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	4629      	mov	r1, r5
 800fb40:	4620      	mov	r0, r4
 800fb42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb48:	4718      	bx	r3
	...

0800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800fb50:	4604      	mov	r4, r0
 800fb52:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d214      	bcs.n	800fb84 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800fb5a:	6803      	ldr	r3, [r0, #0]
 800fb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb5e:	4798      	blx	r3
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	4605      	mov	r5, r0
 800fb64:	4620      	mov	r0, r4
 800fb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb68:	4798      	blx	r3
 800fb6a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800fb6e:	b22d      	sxth	r5, r5
 800fb70:	4601      	mov	r1, r0
 800fb72:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800fb76:	bf06      	itte	eq
 800fb78:	4602      	moveq	r2, r0
 800fb7a:	4629      	moveq	r1, r5
 800fb7c:	462a      	movne	r2, r5
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7ff ffd6 	bl	800fb30 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fb84:	bd38      	pop	{r3, r4, r5, pc}
 800fb86:	bf00      	nop
 800fb88:	2400f500 	.word	0x2400f500

0800fb8c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800fb8c:	b530      	push	{r4, r5, lr}
 800fb8e:	888b      	ldrh	r3, [r1, #4]
 800fb90:	b085      	sub	sp, #20
 800fb92:	4604      	mov	r4, r0
 800fb94:	8583      	strh	r3, [r0, #44]	; 0x2c
 800fb96:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800fb9a:	b923      	cbnz	r3, 800fba6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fb9c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fba0:	b90b      	cbnz	r3, 800fba6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fba2:	f7ff ffd3 	bl	800fb4c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	466d      	mov	r5, sp
 800fbaa:	4621      	mov	r1, r4
 800fbac:	343c      	adds	r4, #60	; 0x3c
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbb4:	4798      	blx	r3
 800fbb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fbba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fbbe:	b005      	add	sp, #20
 800fbc0:	bd30      	pop	{r4, r5, pc}

0800fbc2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	8083      	strh	r3, [r0, #4]
 800fbc6:	80c3      	strh	r3, [r0, #6]
 800fbc8:	8003      	strh	r3, [r0, #0]
 800fbca:	8043      	strh	r3, [r0, #2]
 800fbcc:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800fbd0:	2bff      	cmp	r3, #255	; 0xff
 800fbd2:	bf01      	itttt	eq
 800fbd4:	890b      	ldrheq	r3, [r1, #8]
 800fbd6:	8083      	strheq	r3, [r0, #4]
 800fbd8:	894b      	ldrheq	r3, [r1, #10]
 800fbda:	80c3      	strheq	r3, [r0, #6]
 800fbdc:	4770      	bx	lr
	...

0800fbe0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800fbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	466b      	mov	r3, sp
 800fbe6:	6808      	ldr	r0, [r1, #0]
 800fbe8:	6849      	ldr	r1, [r1, #4]
 800fbea:	c303      	stmia	r3!, {r0, r1}
 800fbec:	6823      	ldr	r3, [r4, #0]
 800fbee:	4669      	mov	r1, sp
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	4798      	blx	r3
 800fbf6:	4b08      	ldr	r3, [pc, #32]	; (800fc18 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fbfe:	b10a      	cbz	r2, 800fc04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800fc00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fc02:	b900      	cbnz	r0, 800fc06 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800fc04:	6898      	ldr	r0, [r3, #8]
 800fc06:	6803      	ldr	r3, [r0, #0]
 800fc08:	4669      	mov	r1, sp
 800fc0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fc0c:	6a1d      	ldr	r5, [r3, #32]
 800fc0e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fc12:	47a8      	blx	r5
 800fc14:	b003      	add	sp, #12
 800fc16:	bd30      	pop	{r4, r5, pc}
 800fc18:	2400f4a4 	.word	0x2400f4a4

0800fc1c <_ZN8touchgfx3BoxD1Ev>:
 800fc1c:	4770      	bx	lr

0800fc1e <_ZN8touchgfx3BoxD0Ev>:
 800fc1e:	b510      	push	{r4, lr}
 800fc20:	4604      	mov	r4, r0
 800fc22:	212c      	movs	r1, #44	; 0x2c
 800fc24:	f00e f98b 	bl	801df3e <_ZdlPvj>
 800fc28:	4620      	mov	r0, r4
 800fc2a:	bd10      	pop	{r4, pc}

0800fc2c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800fc2c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800fc30:	b12a      	cbz	r2, 800fc3e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fc32:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fc36:	b112      	cbz	r2, 800fc3e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fc38:	6803      	ldr	r3, [r0, #0]
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	4718      	bx	r3
 800fc3e:	4770      	bx	lr

0800fc40 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800fc40:	4b30      	ldr	r3, [pc, #192]	; (800fd04 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800fc42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc46:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800fc48:	b08d      	sub	sp, #52	; 0x34
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	460f      	mov	r7, r1
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d954      	bls.n	800fcfe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800fc54:	4b2c      	ldr	r3, [pc, #176]	; (800fd08 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800fc56:	6819      	ldr	r1, [r3, #0]
 800fc58:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800fc5c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800fc60:	4a2a      	ldr	r2, [pc, #168]	; (800fd0c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800fc62:	6812      	ldr	r2, [r2, #0]
 800fc64:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fc68:	2900      	cmp	r1, #0
 800fc6a:	d048      	beq.n	800fcfe <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800fc6c:	785a      	ldrb	r2, [r3, #1]
 800fc6e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800fc72:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800fc76:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800fc7a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800fc7e:	4b24      	ldr	r3, [pc, #144]	; (800fd10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800fc80:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800fc84:	681a      	ldr	r2, [r3, #0]
 800fc86:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 800fc8a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 800fc8e:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 800fc92:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800fc94:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800fc98:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 800fc9c:	9107      	str	r1, [sp, #28]
 800fc9e:	f88d 8020 	strb.w	r8, [sp, #32]
 800fca2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 800fca6:	9609      	str	r6, [sp, #36]	; 0x24
 800fca8:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 800fcac:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800fcb0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 800fcb4:	b10b      	cbz	r3, 800fcba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800fcb6:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800fcb8:	b905      	cbnz	r5, 800fcbc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800fcba:	6895      	ldr	r5, [r2, #8]
 800fcbc:	ae05      	add	r6, sp, #20
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f003 fc8d 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fcc6:	4b13      	ldr	r3, [pc, #76]	; (800fd14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800fcc8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800fcca:	6818      	ldr	r0, [r3, #0]
 800fccc:	f7f3 f970 	bl	8002fb0 <_ZNK8touchgfx5Texts7getTextEt>
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	4680      	mov	r8, r0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcd8:	4798      	blx	r3
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	4681      	mov	r9, r0
 800fcde:	4620      	mov	r0, r4
 800fce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fce4:	4798      	blx	r3
 800fce6:	ab07      	add	r3, sp, #28
 800fce8:	f8cd 8004 	str.w	r8, [sp, #4]
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	463b      	mov	r3, r7
 800fcf0:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	e896 0006 	ldmia.w	r6, {r1, r2}
 800fcfa:	f7f3 f90b 	bl	8002f14 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fcfe:	b00d      	add	sp, #52	; 0x34
 800fd00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd04:	2400f500 	.word	0x2400f500
 800fd08:	2400f4fc 	.word	0x2400f4fc
 800fd0c:	2400f504 	.word	0x2400f504
 800fd10:	2400f4a4 	.word	0x2400f4a4
 800fd14:	2400f508 	.word	0x2400f508

0800fd18 <_ZN8touchgfx5ImageD1Ev>:
 800fd18:	4770      	bx	lr

0800fd1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800fd1a:	b570      	push	{r4, r5, r6, lr}
 800fd1c:	880b      	ldrh	r3, [r1, #0]
 800fd1e:	460d      	mov	r5, r1
 800fd20:	4604      	mov	r4, r0
 800fd22:	84c3      	strh	r3, [r0, #38]	; 0x26
 800fd24:	4608      	mov	r0, r1
 800fd26:	f005 fd0d 	bl	8015744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	4628      	mov	r0, r5
 800fd2e:	f005 fd3d 	bl	80157ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	4605      	mov	r5, r0
 800fd36:	4631      	mov	r1, r6
 800fd38:	4620      	mov	r0, r4
 800fd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd3c:	4798      	blx	r3
 800fd3e:	6823      	ldr	r3, [r4, #0]
 800fd40:	4629      	mov	r1, r5
 800fd42:	4620      	mov	r0, r4
 800fd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd4a:	4718      	bx	r3

0800fd4c <_ZN8touchgfx5ImageD0Ev>:
 800fd4c:	b510      	push	{r4, lr}
 800fd4e:	4604      	mov	r4, r0
 800fd50:	212c      	movs	r1, #44	; 0x2c
 800fd52:	f00e f8f4 	bl	801df3e <_ZdlPvj>
 800fd56:	4620      	mov	r0, r4
 800fd58:	bd10      	pop	{r4, pc}

0800fd5a <_ZNK8touchgfx5Image12getSolidRectEv>:
 800fd5a:	b510      	push	{r4, lr}
 800fd5c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800fd60:	4604      	mov	r4, r0
 800fd62:	2bff      	cmp	r3, #255	; 0xff
 800fd64:	d006      	beq.n	800fd74 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800fd66:	2300      	movs	r3, #0
 800fd68:	8003      	strh	r3, [r0, #0]
 800fd6a:	8043      	strh	r3, [r0, #2]
 800fd6c:	8083      	strh	r3, [r0, #4]
 800fd6e:	80c3      	strh	r3, [r0, #6]
 800fd70:	4620      	mov	r0, r4
 800fd72:	bd10      	pop	{r4, pc}
 800fd74:	3126      	adds	r1, #38	; 0x26
 800fd76:	f005 fd4d 	bl	8015814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fd7a:	e7f9      	b.n	800fd70 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800fd7c <_ZNK8touchgfx5Image17invalidateContentEv>:
 800fd7c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800fd80:	b12a      	cbz	r2, 800fd8e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800fd82:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fd86:	b112      	cbz	r2, 800fd8e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800fd88:	6803      	ldr	r3, [r0, #0]
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	4718      	bx	r3
 800fd8e:	4770      	bx	lr

0800fd90 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800fd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd94:	4604      	mov	r4, r0
 800fd96:	b088      	sub	sp, #32
 800fd98:	2500      	movs	r5, #0
 800fd9a:	460f      	mov	r7, r1
 800fd9c:	f854 3b26 	ldr.w	r3, [r4], #38
 800fda0:	a904      	add	r1, sp, #16
 800fda2:	4606      	mov	r6, r0
 800fda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fdaa:	4798      	blx	r3
 800fdac:	4620      	mov	r0, r4
 800fdae:	f005 fcc9 	bl	8015744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fdb2:	4680      	mov	r8, r0
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f005 fcf9 	bl	80157ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fdba:	9506      	str	r5, [sp, #24]
 800fdbc:	ad06      	add	r5, sp, #24
 800fdbe:	f8ad 001e 	strh.w	r0, [sp, #30]
 800fdc2:	4639      	mov	r1, r7
 800fdc4:	f8ad 801c 	strh.w	r8, [sp, #28]
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f7fc ff63 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 800fdce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	dd19      	ble.n	800fe0a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fdd6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	dd15      	ble.n	800fe0a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fdde:	4b0c      	ldr	r3, [pc, #48]	; (800fe10 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fde6:	b10a      	cbz	r2, 800fdec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800fde8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fdea:	b900      	cbnz	r0, 800fdee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800fdec:	6898      	ldr	r0, [r3, #8]
 800fdee:	2701      	movs	r7, #1
 800fdf0:	6801      	ldr	r1, [r0, #0]
 800fdf2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800fdf6:	9702      	str	r7, [sp, #8]
 800fdf8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800fdfc:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800fe00:	e9cd 5600 	strd	r5, r6, [sp]
 800fe04:	688d      	ldr	r5, [r1, #8]
 800fe06:	4621      	mov	r1, r4
 800fe08:	47a8      	blx	r5
 800fe0a:	b008      	add	sp, #32
 800fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe10:	2400f4a4 	.word	0x2400f4a4

0800fe14 <_ZN8touchgfx7OutlineD1Ev>:
 800fe14:	4770      	bx	lr

0800fe16 <_ZN8touchgfx7OutlineD0Ev>:
 800fe16:	b510      	push	{r4, lr}
 800fe18:	4604      	mov	r4, r0
 800fe1a:	2130      	movs	r1, #48	; 0x30
 800fe1c:	f00e f88f 	bl	801df3e <_ZdlPvj>
 800fe20:	4620      	mov	r0, r4
 800fe22:	bd10      	pop	{r4, pc}

0800fe24 <_ZN8touchgfx7Outline5resetEv>:
 800fe24:	b510      	push	{r4, lr}
 800fe26:	4604      	mov	r4, r0
 800fe28:	f000 fe86 	bl	8010b38 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 800fe2c:	60e0      	str	r0, [r4, #12]
 800fe2e:	f000 fe89 	bl	8010b44 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 800fe32:	68e3      	ldr	r3, [r4, #12]
 800fe34:	08c0      	lsrs	r0, r0, #3
 800fe36:	2200      	movs	r2, #0
 800fe38:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	3801      	subs	r0, #1
 800fe40:	60a2      	str	r2, [r4, #8]
 800fe42:	6060      	str	r0, [r4, #4]
 800fe44:	8019      	strh	r1, [r3, #0]
 800fe46:	8059      	strh	r1, [r3, #2]
 800fe48:	809a      	strh	r2, [r3, #4]
 800fe4a:	80da      	strh	r2, [r3, #6]
 800fe4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe4e:	f023 0301 	bic.w	r3, r3, #1
 800fe52:	f043 0302 	orr.w	r3, r3, #2
 800fe56:	6263      	str	r3, [r4, #36]	; 0x24
 800fe58:	bd10      	pop	{r4, pc}
	...

0800fe5c <_ZN8touchgfx7OutlineC1Ev>:
 800fe5c:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 800fe5e:	b510      	push	{r4, lr}
 800fe60:	6003      	str	r3, [r0, #0]
 800fe62:	2300      	movs	r3, #0
 800fe64:	4604      	mov	r4, r0
 800fe66:	6243      	str	r3, [r0, #36]	; 0x24
 800fe68:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800fe6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe70:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800fe74:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800fe78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fe7c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800fe80:	f7ff ffd0 	bl	800fe24 <_ZN8touchgfx7Outline5resetEv>
 800fe84:	4620      	mov	r0, r4
 800fe86:	bd10      	pop	{r4, pc}
 800fe88:	080222e4 	.word	0x080222e4

0800fe8c <_ZN8touchgfx7Outline10renderLineEiiii>:
 800fe8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe90:	b093      	sub	sp, #76	; 0x4c
 800fe92:	1156      	asrs	r6, r2, #5
 800fe94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fe96:	9305      	str	r3, [sp, #20]
 800fe98:	1153      	asrs	r3, r2, #5
 800fe9a:	f004 051f 	and.w	r5, r4, #31
 800fe9e:	9303      	str	r3, [sp, #12]
 800fea0:	1163      	asrs	r3, r4, #5
 800fea2:	9504      	str	r5, [sp, #16]
 800fea4:	1165      	asrs	r5, r4, #5
 800fea6:	9306      	str	r3, [sp, #24]
 800fea8:	f002 031f 	and.w	r3, r2, #31
 800feac:	42ae      	cmp	r6, r5
 800feae:	f040 80f4 	bne.w	801009a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 800feb2:	9c04      	ldr	r4, [sp, #16]
 800feb4:	9a05      	ldr	r2, [sp, #20]
 800feb6:	42a3      	cmp	r3, r4
 800feb8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 800febc:	6902      	ldr	r2, [r0, #16]
 800febe:	d125      	bne.n	800ff0c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 800fec0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800fec4:	459e      	cmp	lr, r3
 800fec6:	d103      	bne.n	800fed0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 800fec8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800fecc:	429e      	cmp	r6, r3
 800fece:	d035      	beq.n	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800fed0:	88d1      	ldrh	r1, [r2, #6]
 800fed2:	8893      	ldrh	r3, [r2, #4]
 800fed4:	430b      	orrs	r3, r1
 800fed6:	d010      	beq.n	800fefa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800fed8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	db0c      	blt.n	800fefa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800fee0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800fee2:	428b      	cmp	r3, r1
 800fee4:	da09      	bge.n	800fefa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 800fee6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 800feea:	428b      	cmp	r3, r1
 800feec:	f103 0301 	add.w	r3, r3, #1
 800fef0:	bf38      	it	cc
 800fef2:	3208      	addcc	r2, #8
 800fef4:	6083      	str	r3, [r0, #8]
 800fef6:	bf38      	it	cc
 800fef8:	6102      	strcc	r2, [r0, #16]
 800fefa:	6903      	ldr	r3, [r0, #16]
 800fefc:	9a03      	ldr	r2, [sp, #12]
 800fefe:	f8a3 e000 	strh.w	lr, [r3]
 800ff02:	805a      	strh	r2, [r3, #2]
 800ff04:	2200      	movs	r2, #0
 800ff06:	809a      	strh	r2, [r3, #4]
 800ff08:	80da      	strh	r2, [r3, #6]
 800ff0a:	e017      	b.n	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 800ff0c:	9c05      	ldr	r4, [sp, #20]
 800ff0e:	114e      	asrs	r6, r1, #5
 800ff10:	f001 0c1f 	and.w	ip, r1, #31
 800ff14:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800ff18:	f004 041f 	and.w	r4, r4, #31
 800ff1c:	4576      	cmp	r6, lr
 800ff1e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 800ff22:	9402      	str	r4, [sp, #8]
 800ff24:	9c04      	ldr	r4, [sp, #16]
 800ff26:	eba4 0403 	sub.w	r4, r4, r3
 800ff2a:	d10a      	bne.n	800ff42 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 800ff2c:	9b02      	ldr	r3, [sp, #8]
 800ff2e:	44a0      	add	r8, r4
 800ff30:	449c      	add	ip, r3
 800ff32:	f8a2 8004 	strh.w	r8, [r2, #4]
 800ff36:	fb04 a40c 	mla	r4, r4, ip, sl
 800ff3a:	80d4      	strh	r4, [r2, #6]
 800ff3c:	b013      	add	sp, #76	; 0x4c
 800ff3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff42:	9d05      	ldr	r5, [sp, #20]
 800ff44:	1a69      	subs	r1, r5, r1
 800ff46:	bf51      	iteee	pl
 800ff48:	f1cc 0520 	rsbpl	r5, ip, #32
 800ff4c:	fb04 f40c 	mulmi.w	r4, r4, ip
 800ff50:	4249      	negmi	r1, r1
 800ff52:	2500      	movmi	r5, #0
 800ff54:	bf5d      	ittte	pl
 800ff56:	436c      	mulpl	r4, r5
 800ff58:	2520      	movpl	r5, #32
 800ff5a:	f04f 0901 	movpl.w	r9, #1
 800ff5e:	f04f 39ff 	movmi.w	r9, #4294967295
 800ff62:	9501      	str	r5, [sp, #4]
 800ff64:	9f01      	ldr	r7, [sp, #4]
 800ff66:	444e      	add	r6, r9
 800ff68:	fb94 f5f1 	sdiv	r5, r4, r1
 800ff6c:	fb01 4415 	mls	r4, r1, r5, r4
 800ff70:	44bc      	add	ip, r7
 800ff72:	2c00      	cmp	r4, #0
 800ff74:	bfbc      	itt	lt
 800ff76:	f105 35ff 	addlt.w	r5, r5, #4294967295
 800ff7a:	1864      	addlt	r4, r4, r1
 800ff7c:	44a8      	add	r8, r5
 800ff7e:	fb05 ac0c 	mla	ip, r5, ip, sl
 800ff82:	f8a2 8004 	strh.w	r8, [r2, #4]
 800ff86:	f8a2 c006 	strh.w	ip, [r2, #6]
 800ff8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800ff8e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 800ff92:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800ff96:	ea58 0202 	orrs.w	r2, r8, r2
 800ff9a:	d011      	beq.n	800ffc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800ff9c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 800ffa0:	f1b8 0f00 	cmp.w	r8, #0
 800ffa4:	db0c      	blt.n	800ffc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800ffa6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ffa8:	4590      	cmp	r8, r2
 800ffaa:	da09      	bge.n	800ffc0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 800ffac:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 800ffb0:	4590      	cmp	r8, r2
 800ffb2:	bf3c      	itt	cc
 800ffb4:	f10c 0208 	addcc.w	r2, ip, #8
 800ffb8:	6102      	strcc	r2, [r0, #16]
 800ffba:	f108 0201 	add.w	r2, r8, #1
 800ffbe:	6082      	str	r2, [r0, #8]
 800ffc0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 800ffc4:	2700      	movs	r7, #0
 800ffc6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800ffca:	45b6      	cmp	lr, r6
 800ffcc:	f8ac 6000 	strh.w	r6, [ip]
 800ffd0:	442b      	add	r3, r5
 800ffd2:	f8ac 2002 	strh.w	r2, [ip, #2]
 800ffd6:	f8ac 7004 	strh.w	r7, [ip, #4]
 800ffda:	f8ac 7006 	strh.w	r7, [ip, #6]
 800ffde:	d04b      	beq.n	8010078 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 800ffe0:	9f04      	ldr	r7, [sp, #16]
 800ffe2:	1a64      	subs	r4, r4, r1
 800ffe4:	f04f 0a00 	mov.w	sl, #0
 800ffe8:	1aff      	subs	r7, r7, r3
 800ffea:	443d      	add	r5, r7
 800ffec:	016d      	lsls	r5, r5, #5
 800ffee:	fb95 f8f1 	sdiv	r8, r5, r1
 800fff2:	fb01 5518 	mls	r5, r1, r8, r5
 800fff6:	2d00      	cmp	r5, #0
 800fff8:	bfbc      	itt	lt
 800fffa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 800fffe:	186d      	addlt	r5, r5, r1
 8010000:	f108 0701 	add.w	r7, r8, #1
 8010004:	9703      	str	r7, [sp, #12]
 8010006:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801000a:	1964      	adds	r4, r4, r5
 801000c:	444e      	add	r6, r9
 801000e:	bf54      	ite	pl
 8010010:	9f03      	ldrpl	r7, [sp, #12]
 8010012:	4647      	movmi	r7, r8
 8010014:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010018:	bf58      	it	pl
 801001a:	1a64      	subpl	r4, r4, r1
 801001c:	443b      	add	r3, r7
 801001e:	44bb      	add	fp, r7
 8010020:	f8ac b004 	strh.w	fp, [ip, #4]
 8010024:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010028:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801002c:	f8ac b006 	strh.w	fp, [ip, #6]
 8010030:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010034:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010038:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801003c:	ea5b 0707 	orrs.w	r7, fp, r7
 8010040:	d011      	beq.n	8010066 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010042:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010046:	f1bb 0f00 	cmp.w	fp, #0
 801004a:	db0c      	blt.n	8010066 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801004c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801004e:	45bb      	cmp	fp, r7
 8010050:	da09      	bge.n	8010066 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010052:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010056:	45bb      	cmp	fp, r7
 8010058:	bf3c      	itt	cc
 801005a:	f10c 0708 	addcc.w	r7, ip, #8
 801005e:	6107      	strcc	r7, [r0, #16]
 8010060:	f10b 0701 	add.w	r7, fp, #1
 8010064:	6087      	str	r7, [r0, #8]
 8010066:	6907      	ldr	r7, [r0, #16]
 8010068:	45b6      	cmp	lr, r6
 801006a:	803e      	strh	r6, [r7, #0]
 801006c:	807a      	strh	r2, [r7, #2]
 801006e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010072:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010076:	d1c6      	bne.n	8010006 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8010078:	9a04      	ldr	r2, [sp, #16]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	6902      	ldr	r2, [r0, #16]
 801007e:	8891      	ldrh	r1, [r2, #4]
 8010080:	88d6      	ldrh	r6, [r2, #6]
 8010082:	4419      	add	r1, r3
 8010084:	8091      	strh	r1, [r2, #4]
 8010086:	9902      	ldr	r1, [sp, #8]
 8010088:	f101 0c20 	add.w	ip, r1, #32
 801008c:	9901      	ldr	r1, [sp, #4]
 801008e:	ebac 0c01 	sub.w	ip, ip, r1
 8010092:	fb03 630c 	mla	r3, r3, ip, r6
 8010096:	80d3      	strh	r3, [r2, #6]
 8010098:	e750      	b.n	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801009a:	9d05      	ldr	r5, [sp, #20]
 801009c:	1aa2      	subs	r2, r4, r2
 801009e:	eba5 0501 	sub.w	r5, r5, r1
 80100a2:	9202      	str	r2, [sp, #8]
 80100a4:	9508      	str	r5, [sp, #32]
 80100a6:	f140 8128 	bpl.w	80102fa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80100aa:	9a03      	ldr	r2, [sp, #12]
 80100ac:	2a00      	cmp	r2, #0
 80100ae:	f6ff af45 	blt.w	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80100b2:	9a02      	ldr	r2, [sp, #8]
 80100b4:	f04f 34ff 	mov.w	r4, #4294967295
 80100b8:	4252      	negs	r2, r2
 80100ba:	940b      	str	r4, [sp, #44]	; 0x2c
 80100bc:	2400      	movs	r4, #0
 80100be:	9202      	str	r2, [sp, #8]
 80100c0:	9a06      	ldr	r2, [sp, #24]
 80100c2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80100c6:	9206      	str	r2, [sp, #24]
 80100c8:	462a      	mov	r2, r5
 80100ca:	435a      	muls	r2, r3
 80100cc:	9401      	str	r4, [sp, #4]
 80100ce:	9c02      	ldr	r4, [sp, #8]
 80100d0:	9d02      	ldr	r5, [sp, #8]
 80100d2:	fb92 f4f4 	sdiv	r4, r2, r4
 80100d6:	fb05 2214 	mls	r2, r5, r4, r2
 80100da:	2a00      	cmp	r2, #0
 80100dc:	9207      	str	r2, [sp, #28]
 80100de:	bfbc      	itt	lt
 80100e0:	1952      	addlt	r2, r2, r5
 80100e2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80100e6:	6905      	ldr	r5, [r0, #16]
 80100e8:	bfb8      	it	lt
 80100ea:	9207      	strlt	r2, [sp, #28]
 80100ec:	eb04 0901 	add.w	r9, r4, r1
 80100f0:	9a01      	ldr	r2, [sp, #4]
 80100f2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80100f6:	429a      	cmp	r2, r3
 80100f8:	f040 8111 	bne.w	801031e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80100fc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010100:	429e      	cmp	r6, r3
 8010102:	d104      	bne.n	801010e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8010104:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010108:	9a03      	ldr	r2, [sp, #12]
 801010a:	429a      	cmp	r2, r3
 801010c:	d01b      	beq.n	8010146 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801010e:	88ea      	ldrh	r2, [r5, #6]
 8010110:	88ab      	ldrh	r3, [r5, #4]
 8010112:	4313      	orrs	r3, r2
 8010114:	d010      	beq.n	8010138 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010116:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801011a:	2a00      	cmp	r2, #0
 801011c:	db0c      	blt.n	8010138 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801011e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010120:	429a      	cmp	r2, r3
 8010122:	da09      	bge.n	8010138 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010124:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010128:	429a      	cmp	r2, r3
 801012a:	f102 0201 	add.w	r2, r2, #1
 801012e:	bf38      	it	cc
 8010130:	3508      	addcc	r5, #8
 8010132:	6082      	str	r2, [r0, #8]
 8010134:	bf38      	it	cc
 8010136:	6105      	strcc	r5, [r0, #16]
 8010138:	6903      	ldr	r3, [r0, #16]
 801013a:	9a03      	ldr	r2, [sp, #12]
 801013c:	801e      	strh	r6, [r3, #0]
 801013e:	805a      	strh	r2, [r3, #2]
 8010140:	2200      	movs	r2, #0
 8010142:	809a      	strh	r2, [r3, #4]
 8010144:	80da      	strh	r2, [r3, #6]
 8010146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010148:	9a03      	ldr	r2, [sp, #12]
 801014a:	6901      	ldr	r1, [r0, #16]
 801014c:	441a      	add	r2, r3
 801014e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010152:	42b3      	cmp	r3, r6
 8010154:	d103      	bne.n	801015e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8010156:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801015a:	429a      	cmp	r2, r3
 801015c:	d01a      	beq.n	8010194 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801015e:	88cc      	ldrh	r4, [r1, #6]
 8010160:	888b      	ldrh	r3, [r1, #4]
 8010162:	4323      	orrs	r3, r4
 8010164:	d010      	beq.n	8010188 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010166:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801016a:	2c00      	cmp	r4, #0
 801016c:	db0c      	blt.n	8010188 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801016e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010170:	429c      	cmp	r4, r3
 8010172:	da09      	bge.n	8010188 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010174:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010178:	429c      	cmp	r4, r3
 801017a:	f104 0401 	add.w	r4, r4, #1
 801017e:	bf38      	it	cc
 8010180:	3108      	addcc	r1, #8
 8010182:	6084      	str	r4, [r0, #8]
 8010184:	bf38      	it	cc
 8010186:	6101      	strcc	r1, [r0, #16]
 8010188:	6903      	ldr	r3, [r0, #16]
 801018a:	2100      	movs	r1, #0
 801018c:	801e      	strh	r6, [r3, #0]
 801018e:	805a      	strh	r2, [r3, #2]
 8010190:	8099      	strh	r1, [r3, #4]
 8010192:	80d9      	strh	r1, [r3, #6]
 8010194:	9b06      	ldr	r3, [sp, #24]
 8010196:	4293      	cmp	r3, r2
 8010198:	f000 8082 	beq.w	80102a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801019c:	9b08      	ldr	r3, [sp, #32]
 801019e:	9902      	ldr	r1, [sp, #8]
 80101a0:	015b      	lsls	r3, r3, #5
 80101a2:	9c02      	ldr	r4, [sp, #8]
 80101a4:	fb93 f1f1 	sdiv	r1, r3, r1
 80101a8:	fb04 3311 	mls	r3, r4, r1, r3
 80101ac:	9103      	str	r1, [sp, #12]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	9308      	str	r3, [sp, #32]
 80101b2:	da04      	bge.n	80101be <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80101b4:	1e4b      	subs	r3, r1, #1
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	9b08      	ldr	r3, [sp, #32]
 80101ba:	4423      	add	r3, r4
 80101bc:	9308      	str	r3, [sp, #32]
 80101be:	9b07      	ldr	r3, [sp, #28]
 80101c0:	464f      	mov	r7, r9
 80101c2:	9902      	ldr	r1, [sp, #8]
 80101c4:	2600      	movs	r6, #0
 80101c6:	1a5b      	subs	r3, r3, r1
 80101c8:	9307      	str	r3, [sp, #28]
 80101ca:	9b01      	ldr	r3, [sp, #4]
 80101cc:	f1c3 0320 	rsb	r3, r3, #32
 80101d0:	930e      	str	r3, [sp, #56]	; 0x38
 80101d2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80101d4:	9b01      	ldr	r3, [sp, #4]
 80101d6:	1a5b      	subs	r3, r3, r1
 80101d8:	930a      	str	r3, [sp, #40]	; 0x28
 80101da:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80101de:	185b      	adds	r3, r3, r1
 80101e0:	bf58      	it	pl
 80101e2:	9902      	ldrpl	r1, [sp, #8]
 80101e4:	9307      	str	r3, [sp, #28]
 80101e6:	bf57      	itett	pl
 80101e8:	1a5b      	subpl	r3, r3, r1
 80101ea:	9903      	ldrmi	r1, [sp, #12]
 80101ec:	9307      	strpl	r3, [sp, #28]
 80101ee:	9b03      	ldrpl	r3, [sp, #12]
 80101f0:	bf58      	it	pl
 80101f2:	1c59      	addpl	r1, r3, #1
 80101f4:	2a00      	cmp	r2, #0
 80101f6:	4489      	add	r9, r1
 80101f8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80101fc:	db2e      	blt.n	801025c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80101fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010200:	4293      	cmp	r3, r2
 8010202:	dd2b      	ble.n	801025c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010204:	9c01      	ldr	r4, [sp, #4]
 8010206:	6905      	ldr	r5, [r0, #16]
 8010208:	46a0      	mov	r8, r4
 801020a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801020c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8010210:	45a0      	cmp	r8, r4
 8010212:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8010216:	f040 814c 	bne.w	80104b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801021a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801021e:	4551      	cmp	r1, sl
 8010220:	d103      	bne.n	801022a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8010222:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010226:	4291      	cmp	r1, r2
 8010228:	d018      	beq.n	801025c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801022a:	ea5c 010e 	orrs.w	r1, ip, lr
 801022e:	d00f      	beq.n	8010250 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010230:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010234:	2900      	cmp	r1, #0
 8010236:	db0b      	blt.n	8010250 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010238:	428b      	cmp	r3, r1
 801023a:	dd09      	ble.n	8010250 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801023c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8010240:	4299      	cmp	r1, r3
 8010242:	f101 0101 	add.w	r1, r1, #1
 8010246:	bf38      	it	cc
 8010248:	3508      	addcc	r5, #8
 801024a:	6081      	str	r1, [r0, #8]
 801024c:	bf38      	it	cc
 801024e:	6105      	strcc	r5, [r0, #16]
 8010250:	6903      	ldr	r3, [r0, #16]
 8010252:	f8a3 a000 	strh.w	sl, [r3]
 8010256:	805a      	strh	r2, [r3, #2]
 8010258:	809e      	strh	r6, [r3, #4]
 801025a:	80de      	strh	r6, [r3, #6]
 801025c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801025e:	6901      	ldr	r1, [r0, #16]
 8010260:	441a      	add	r2, r3
 8010262:	88cc      	ldrh	r4, [r1, #6]
 8010264:	888b      	ldrh	r3, [r1, #4]
 8010266:	4323      	orrs	r3, r4
 8010268:	d010      	beq.n	801028c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801026a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801026e:	2c00      	cmp	r4, #0
 8010270:	db0c      	blt.n	801028c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010272:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010274:	429c      	cmp	r4, r3
 8010276:	da09      	bge.n	801028c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010278:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801027c:	429c      	cmp	r4, r3
 801027e:	f104 0401 	add.w	r4, r4, #1
 8010282:	bf38      	it	cc
 8010284:	3108      	addcc	r1, #8
 8010286:	6084      	str	r4, [r0, #8]
 8010288:	bf38      	it	cc
 801028a:	6101      	strcc	r1, [r0, #16]
 801028c:	6903      	ldr	r3, [r0, #16]
 801028e:	464f      	mov	r7, r9
 8010290:	f8a3 a000 	strh.w	sl, [r3]
 8010294:	805a      	strh	r2, [r3, #2]
 8010296:	809e      	strh	r6, [r3, #4]
 8010298:	80de      	strh	r6, [r3, #6]
 801029a:	9b06      	ldr	r3, [sp, #24]
 801029c:	4293      	cmp	r3, r2
 801029e:	d19c      	bne.n	80101da <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80102a0:	9b01      	ldr	r3, [sp, #4]
 80102a2:	6907      	ldr	r7, [r0, #16]
 80102a4:	f1c3 0620 	rsb	r6, r3, #32
 80102a8:	9b05      	ldr	r3, [sp, #20]
 80102aa:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80102ae:	9b04      	ldr	r3, [sp, #16]
 80102b0:	429e      	cmp	r6, r3
 80102b2:	f040 81c7 	bne.w	8010644 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80102b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80102ba:	459e      	cmp	lr, r3
 80102bc:	d104      	bne.n	80102c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80102be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	f43f ae3a 	beq.w	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80102c8:	88f9      	ldrh	r1, [r7, #6]
 80102ca:	88bb      	ldrh	r3, [r7, #4]
 80102cc:	430b      	orrs	r3, r1
 80102ce:	d010      	beq.n	80102f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80102d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	db0c      	blt.n	80102f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80102d8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80102da:	428b      	cmp	r3, r1
 80102dc:	da09      	bge.n	80102f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80102de:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80102e2:	428b      	cmp	r3, r1
 80102e4:	f103 0301 	add.w	r3, r3, #1
 80102e8:	bf38      	it	cc
 80102ea:	3708      	addcc	r7, #8
 80102ec:	6083      	str	r3, [r0, #8]
 80102ee:	bf38      	it	cc
 80102f0:	6107      	strcc	r7, [r0, #16]
 80102f2:	6903      	ldr	r3, [r0, #16]
 80102f4:	f8a3 e000 	strh.w	lr, [r3]
 80102f8:	e603      	b.n	800ff02 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80102fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80102fc:	9c03      	ldr	r4, [sp, #12]
 80102fe:	42a2      	cmp	r2, r4
 8010300:	f6ff ae1c 	blt.w	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010304:	9c06      	ldr	r4, [sp, #24]
 8010306:	42a2      	cmp	r2, r4
 8010308:	9c08      	ldr	r4, [sp, #32]
 801030a:	bfbc      	itt	lt
 801030c:	3201      	addlt	r2, #1
 801030e:	9206      	strlt	r2, [sp, #24]
 8010310:	f1c3 0220 	rsb	r2, r3, #32
 8010314:	4362      	muls	r2, r4
 8010316:	2401      	movs	r4, #1
 8010318:	940b      	str	r4, [sp, #44]	; 0x2c
 801031a:	2420      	movs	r4, #32
 801031c:	e6d6      	b.n	80100cc <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801031e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8010322:	f009 021f 	and.w	r2, r9, #31
 8010326:	f001 011f 	and.w	r1, r1, #31
 801032a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801032e:	920c      	str	r2, [sp, #48]	; 0x30
 8010330:	45b0      	cmp	r8, r6
 8010332:	9a01      	ldr	r2, [sp, #4]
 8010334:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8010338:	eba2 0203 	sub.w	r2, r2, r3
 801033c:	d108      	bne.n	8010350 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801033e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010340:	4496      	add	lr, r2
 8010342:	4419      	add	r1, r3
 8010344:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010348:	fb02 a101 	mla	r1, r2, r1, sl
 801034c:	80e9      	strh	r1, [r5, #6]
 801034e:	e6fa      	b.n	8010146 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010350:	2c00      	cmp	r4, #0
 8010352:	f2c0 80a7 	blt.w	80104a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8010356:	2701      	movs	r7, #1
 8010358:	f1c1 0c20 	rsb	ip, r1, #32
 801035c:	970a      	str	r7, [sp, #40]	; 0x28
 801035e:	2720      	movs	r7, #32
 8010360:	fb02 f20c 	mul.w	r2, r2, ip
 8010364:	9709      	str	r7, [sp, #36]	; 0x24
 8010366:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010368:	fb92 fcf4 	sdiv	ip, r2, r4
 801036c:	fb04 221c 	mls	r2, r4, ip, r2
 8010370:	4439      	add	r1, r7
 8010372:	2a00      	cmp	r2, #0
 8010374:	bfbc      	itt	lt
 8010376:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801037a:	1912      	addlt	r2, r2, r4
 801037c:	fb0c a101 	mla	r1, ip, r1, sl
 8010380:	44e6      	add	lr, ip
 8010382:	80e9      	strh	r1, [r5, #6]
 8010384:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010386:	f8a5 e004 	strh.w	lr, [r5, #4]
 801038a:	eb08 0501 	add.w	r5, r8, r1
 801038e:	6901      	ldr	r1, [r0, #16]
 8010390:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8010394:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8010398:	ea58 070e 	orrs.w	r7, r8, lr
 801039c:	d010      	beq.n	80103c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801039e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80103a2:	f1be 0f00 	cmp.w	lr, #0
 80103a6:	db0b      	blt.n	80103c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80103a8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80103aa:	45be      	cmp	lr, r7
 80103ac:	da08      	bge.n	80103c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80103ae:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80103b2:	45be      	cmp	lr, r7
 80103b4:	bf3c      	itt	cc
 80103b6:	3108      	addcc	r1, #8
 80103b8:	6101      	strcc	r1, [r0, #16]
 80103ba:	f10e 0101 	add.w	r1, lr, #1
 80103be:	6081      	str	r1, [r0, #8]
 80103c0:	6901      	ldr	r1, [r0, #16]
 80103c2:	f04f 0e00 	mov.w	lr, #0
 80103c6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80103ca:	42ae      	cmp	r6, r5
 80103cc:	800d      	strh	r5, [r1, #0]
 80103ce:	4463      	add	r3, ip
 80103d0:	f8a1 8002 	strh.w	r8, [r1, #2]
 80103d4:	f8a1 e004 	strh.w	lr, [r1, #4]
 80103d8:	f8a1 e006 	strh.w	lr, [r1, #6]
 80103dc:	d053      	beq.n	8010486 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 80103de:	9901      	ldr	r1, [sp, #4]
 80103e0:	1b12      	subs	r2, r2, r4
 80103e2:	1ac9      	subs	r1, r1, r3
 80103e4:	4461      	add	r1, ip
 80103e6:	0149      	lsls	r1, r1, #5
 80103e8:	fb91 fef4 	sdiv	lr, r1, r4
 80103ec:	fb04 111e 	mls	r1, r4, lr, r1
 80103f0:	2900      	cmp	r1, #0
 80103f2:	bfbc      	itt	lt
 80103f4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80103f8:	1909      	addlt	r1, r1, r4
 80103fa:	f10e 0701 	add.w	r7, lr, #1
 80103fe:	970d      	str	r7, [sp, #52]	; 0x34
 8010400:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8010404:	1852      	adds	r2, r2, r1
 8010406:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010408:	bf54      	ite	pl
 801040a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801040e:	46f4      	movmi	ip, lr
 8010410:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8010414:	bf58      	it	pl
 8010416:	1b12      	subpl	r2, r2, r4
 8010418:	4463      	add	r3, ip
 801041a:	443d      	add	r5, r7
 801041c:	44e3      	add	fp, ip
 801041e:	f8aa b004 	strh.w	fp, [sl, #4]
 8010422:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8010426:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801042a:	f8aa b006 	strh.w	fp, [sl, #6]
 801042e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010432:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010436:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801043a:	ea5b 070a 	orrs.w	r7, fp, sl
 801043e:	d014      	beq.n	801046a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010440:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8010444:	f1ba 0f00 	cmp.w	sl, #0
 8010448:	db0f      	blt.n	801046a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801044a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801044c:	45ba      	cmp	sl, r7
 801044e:	da0c      	bge.n	801046a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010450:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8010454:	45ba      	cmp	sl, r7
 8010456:	f10a 0a01 	add.w	sl, sl, #1
 801045a:	bf38      	it	cc
 801045c:	f10c 0c08 	addcc.w	ip, ip, #8
 8010460:	f8c0 a008 	str.w	sl, [r0, #8]
 8010464:	bf38      	it	cc
 8010466:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801046a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801046e:	f04f 0700 	mov.w	r7, #0
 8010472:	42ae      	cmp	r6, r5
 8010474:	f8ac 5000 	strh.w	r5, [ip]
 8010478:	f8ac 8002 	strh.w	r8, [ip, #2]
 801047c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010480:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010484:	d1bc      	bne.n	8010400 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8010486:	6904      	ldr	r4, [r0, #16]
 8010488:	9a01      	ldr	r2, [sp, #4]
 801048a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801048c:	1ad3      	subs	r3, r2, r3
 801048e:	88a2      	ldrh	r2, [r4, #4]
 8010490:	3120      	adds	r1, #32
 8010492:	441a      	add	r2, r3
 8010494:	80a2      	strh	r2, [r4, #4]
 8010496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010498:	1a89      	subs	r1, r1, r2
 801049a:	88e2      	ldrh	r2, [r4, #6]
 801049c:	fb03 2301 	mla	r3, r3, r1, r2
 80104a0:	80e3      	strh	r3, [r4, #6]
 80104a2:	e650      	b.n	8010146 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80104a4:	f04f 37ff 	mov.w	r7, #4294967295
 80104a8:	434a      	muls	r2, r1
 80104aa:	4264      	negs	r4, r4
 80104ac:	970a      	str	r7, [sp, #40]	; 0x28
 80104ae:	2700      	movs	r7, #0
 80104b0:	e758      	b.n	8010364 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80104b2:	ea4f 1867 	mov.w	r8, r7, asr #5
 80104b6:	f009 031f 	and.w	r3, r9, #31
 80104ba:	f007 071f 	and.w	r7, r7, #31
 80104be:	fa1f fc8c 	uxth.w	ip, ip
 80104c2:	45d0      	cmp	r8, sl
 80104c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80104c6:	fa1f fe8e 	uxth.w	lr, lr
 80104ca:	d10a      	bne.n	80104e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 80104cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104ce:	449c      	add	ip, r3
 80104d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104d2:	441f      	add	r7, r3
 80104d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104d6:	f8a5 c004 	strh.w	ip, [r5, #4]
 80104da:	fb03 e707 	mla	r7, r3, r7, lr
 80104de:	80ef      	strh	r7, [r5, #6]
 80104e0:	e6bc      	b.n	801025c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80104e2:	2900      	cmp	r1, #0
 80104e4:	f2c0 80a6 	blt.w	8010634 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 80104e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80104ea:	f1c7 0320 	rsb	r3, r7, #32
 80104ee:	4363      	muls	r3, r4
 80104f0:	2401      	movs	r4, #1
 80104f2:	940d      	str	r4, [sp, #52]	; 0x34
 80104f4:	2420      	movs	r4, #32
 80104f6:	940c      	str	r4, [sp, #48]	; 0x30
 80104f8:	fb93 f4f1 	sdiv	r4, r3, r1
 80104fc:	fb01 3b14 	mls	fp, r1, r4, r3
 8010500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010502:	f1bb 0f00 	cmp.w	fp, #0
 8010506:	441f      	add	r7, r3
 8010508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801050a:	bfbc      	itt	lt
 801050c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010510:	448b      	addlt	fp, r1
 8010512:	fb04 e707 	mla	r7, r4, r7, lr
 8010516:	44a4      	add	ip, r4
 8010518:	80ef      	strh	r7, [r5, #6]
 801051a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801051e:	eb08 0503 	add.w	r5, r8, r3
 8010522:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010526:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801052a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801052e:	ea5e 0307 	orrs.w	r3, lr, r7
 8010532:	d011      	beq.n	8010558 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010534:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8010538:	f1be 0f00 	cmp.w	lr, #0
 801053c:	db0c      	blt.n	8010558 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801053e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8010540:	45be      	cmp	lr, r7
 8010542:	da09      	bge.n	8010558 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010544:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010548:	45be      	cmp	lr, r7
 801054a:	bf3c      	itt	cc
 801054c:	f10c 0708 	addcc.w	r7, ip, #8
 8010550:	6107      	strcc	r7, [r0, #16]
 8010552:	f10e 0701 	add.w	r7, lr, #1
 8010556:	6087      	str	r7, [r0, #8]
 8010558:	6907      	ldr	r7, [r0, #16]
 801055a:	b213      	sxth	r3, r2
 801055c:	4555      	cmp	r5, sl
 801055e:	9310      	str	r3, [sp, #64]	; 0x40
 8010560:	807b      	strh	r3, [r7, #2]
 8010562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010564:	803d      	strh	r5, [r7, #0]
 8010566:	80be      	strh	r6, [r7, #4]
 8010568:	eb04 0c03 	add.w	ip, r4, r3
 801056c:	80fe      	strh	r6, [r7, #6]
 801056e:	d050      	beq.n	8010612 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8010570:	9b01      	ldr	r3, [sp, #4]
 8010572:	eba3 070c 	sub.w	r7, r3, ip
 8010576:	ebab 0301 	sub.w	r3, fp, r1
 801057a:	443c      	add	r4, r7
 801057c:	9309      	str	r3, [sp, #36]	; 0x24
 801057e:	0164      	lsls	r4, r4, #5
 8010580:	fb94 f8f1 	sdiv	r8, r4, r1
 8010584:	fb01 4418 	mls	r4, r1, r8, r4
 8010588:	2c00      	cmp	r4, #0
 801058a:	bfbc      	itt	lt
 801058c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010590:	1864      	addlt	r4, r4, r1
 8010592:	f108 0701 	add.w	r7, r8, #1
 8010596:	9711      	str	r7, [sp, #68]	; 0x44
 8010598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801059a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801059e:	191b      	adds	r3, r3, r4
 80105a0:	f8be b004 	ldrh.w	fp, [lr, #4]
 80105a4:	bf54      	ite	pl
 80105a6:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 80105a8:	4647      	movmi	r7, r8
 80105aa:	9309      	str	r3, [sp, #36]	; 0x24
 80105ac:	bf58      	it	pl
 80105ae:	1a5b      	subpl	r3, r3, r1
 80105b0:	44bb      	add	fp, r7
 80105b2:	44bc      	add	ip, r7
 80105b4:	bf58      	it	pl
 80105b6:	9309      	strpl	r3, [sp, #36]	; 0x24
 80105b8:	f8ae b004 	strh.w	fp, [lr, #4]
 80105bc:	f8be b006 	ldrh.w	fp, [lr, #6]
 80105c0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80105c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105c6:	f8ae b006 	strh.w	fp, [lr, #6]
 80105ca:	443d      	add	r5, r7
 80105cc:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80105d0:	f8be b006 	ldrh.w	fp, [lr, #6]
 80105d4:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80105d8:	ea5b 0307 	orrs.w	r3, fp, r7
 80105dc:	d011      	beq.n	8010602 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80105de:	f9be b002 	ldrsh.w	fp, [lr, #2]
 80105e2:	f1bb 0f00 	cmp.w	fp, #0
 80105e6:	db0c      	blt.n	8010602 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80105e8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80105ea:	45bb      	cmp	fp, r7
 80105ec:	da09      	bge.n	8010602 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80105ee:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80105f2:	45bb      	cmp	fp, r7
 80105f4:	bf3c      	itt	cc
 80105f6:	f10e 0708 	addcc.w	r7, lr, #8
 80105fa:	6107      	strcc	r7, [r0, #16]
 80105fc:	f10b 0701 	add.w	r7, fp, #1
 8010600:	6087      	str	r7, [r0, #8]
 8010602:	6907      	ldr	r7, [r0, #16]
 8010604:	4555      	cmp	r5, sl
 8010606:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010608:	803d      	strh	r5, [r7, #0]
 801060a:	807b      	strh	r3, [r7, #2]
 801060c:	80be      	strh	r6, [r7, #4]
 801060e:	80fe      	strh	r6, [r7, #6]
 8010610:	d1c2      	bne.n	8010598 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010612:	9b01      	ldr	r3, [sp, #4]
 8010614:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8010616:	eba3 0c0c 	sub.w	ip, r3, ip
 801061a:	6903      	ldr	r3, [r0, #16]
 801061c:	3720      	adds	r7, #32
 801061e:	8899      	ldrh	r1, [r3, #4]
 8010620:	4461      	add	r1, ip
 8010622:	8099      	strh	r1, [r3, #4]
 8010624:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010626:	1a7f      	subs	r7, r7, r1
 8010628:	88d9      	ldrh	r1, [r3, #6]
 801062a:	fb0c 1c07 	mla	ip, ip, r7, r1
 801062e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010632:	e613      	b.n	801025c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010634:	f04f 34ff 	mov.w	r4, #4294967295
 8010638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801063a:	4249      	negs	r1, r1
 801063c:	940d      	str	r4, [sp, #52]	; 0x34
 801063e:	2400      	movs	r4, #0
 8010640:	437b      	muls	r3, r7
 8010642:	e758      	b.n	80104f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010644:	9905      	ldr	r1, [sp, #20]
 8010646:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801064a:	f009 0c1f 	and.w	ip, r9, #31
 801064e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010652:	f001 011f 	and.w	r1, r1, #31
 8010656:	45f3      	cmp	fp, lr
 8010658:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801065c:	9102      	str	r1, [sp, #8]
 801065e:	9904      	ldr	r1, [sp, #16]
 8010660:	eba1 0406 	sub.w	r4, r1, r6
 8010664:	d108      	bne.n	8010678 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010666:	9b02      	ldr	r3, [sp, #8]
 8010668:	44a0      	add	r8, r4
 801066a:	449c      	add	ip, r3
 801066c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010670:	fb04 a40c 	mla	r4, r4, ip, sl
 8010674:	80fc      	strh	r4, [r7, #6]
 8010676:	e461      	b.n	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010678:	9905      	ldr	r1, [sp, #20]
 801067a:	ebb1 0109 	subs.w	r1, r1, r9
 801067e:	bf51      	iteee	pl
 8010680:	f1cc 0520 	rsbpl	r5, ip, #32
 8010684:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010688:	4249      	negmi	r1, r1
 801068a:	2500      	movmi	r5, #0
 801068c:	bf5d      	ittte	pl
 801068e:	436c      	mulpl	r4, r5
 8010690:	2520      	movpl	r5, #32
 8010692:	f04f 0901 	movpl.w	r9, #1
 8010696:	f04f 39ff 	movmi.w	r9, #4294967295
 801069a:	9501      	str	r5, [sp, #4]
 801069c:	9b01      	ldr	r3, [sp, #4]
 801069e:	fb94 f5f1 	sdiv	r5, r4, r1
 80106a2:	fb01 4415 	mls	r4, r1, r5, r4
 80106a6:	449c      	add	ip, r3
 80106a8:	eb0b 0309 	add.w	r3, fp, r9
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	bfbc      	itt	lt
 80106b0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80106b4:	1864      	addlt	r4, r4, r1
 80106b6:	44a8      	add	r8, r5
 80106b8:	fb05 ac0c 	mla	ip, r5, ip, sl
 80106bc:	f8a7 8004 	strh.w	r8, [r7, #4]
 80106c0:	f8a7 c006 	strh.w	ip, [r7, #6]
 80106c4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80106c8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80106cc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80106d0:	ea58 0707 	orrs.w	r7, r8, r7
 80106d4:	d011      	beq.n	80106fa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80106d6:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80106da:	f1b8 0f00 	cmp.w	r8, #0
 80106de:	db0c      	blt.n	80106fa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80106e0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80106e2:	45b8      	cmp	r8, r7
 80106e4:	da09      	bge.n	80106fa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 80106e6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80106ea:	45b8      	cmp	r8, r7
 80106ec:	bf3c      	itt	cc
 80106ee:	f10c 0708 	addcc.w	r7, ip, #8
 80106f2:	6107      	strcc	r7, [r0, #16]
 80106f4:	f108 0701 	add.w	r7, r8, #1
 80106f8:	6087      	str	r7, [r0, #8]
 80106fa:	6907      	ldr	r7, [r0, #16]
 80106fc:	f04f 0c00 	mov.w	ip, #0
 8010700:	b212      	sxth	r2, r2
 8010702:	459e      	cmp	lr, r3
 8010704:	803b      	strh	r3, [r7, #0]
 8010706:	442e      	add	r6, r5
 8010708:	807a      	strh	r2, [r7, #2]
 801070a:	f8a7 c004 	strh.w	ip, [r7, #4]
 801070e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010712:	d04b      	beq.n	80107ac <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010714:	9f04      	ldr	r7, [sp, #16]
 8010716:	1a64      	subs	r4, r4, r1
 8010718:	f04f 0a00 	mov.w	sl, #0
 801071c:	1bbf      	subs	r7, r7, r6
 801071e:	443d      	add	r5, r7
 8010720:	016d      	lsls	r5, r5, #5
 8010722:	fb95 f8f1 	sdiv	r8, r5, r1
 8010726:	fb01 5518 	mls	r5, r1, r8, r5
 801072a:	4565      	cmp	r5, ip
 801072c:	bfbc      	itt	lt
 801072e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010732:	186d      	addlt	r5, r5, r1
 8010734:	f108 0701 	add.w	r7, r8, #1
 8010738:	9703      	str	r7, [sp, #12]
 801073a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801073e:	1964      	adds	r4, r4, r5
 8010740:	444b      	add	r3, r9
 8010742:	bf54      	ite	pl
 8010744:	9f03      	ldrpl	r7, [sp, #12]
 8010746:	4647      	movmi	r7, r8
 8010748:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801074c:	bf58      	it	pl
 801074e:	1a64      	subpl	r4, r4, r1
 8010750:	443e      	add	r6, r7
 8010752:	44bb      	add	fp, r7
 8010754:	f8ac b004 	strh.w	fp, [ip, #4]
 8010758:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801075c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010760:	f8ac b006 	strh.w	fp, [ip, #6]
 8010764:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010768:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801076c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010770:	ea5b 0707 	orrs.w	r7, fp, r7
 8010774:	d011      	beq.n	801079a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010776:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801077a:	f1bb 0f00 	cmp.w	fp, #0
 801077e:	db0c      	blt.n	801079a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010780:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8010782:	45bb      	cmp	fp, r7
 8010784:	da09      	bge.n	801079a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010786:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801078a:	45bb      	cmp	fp, r7
 801078c:	bf3c      	itt	cc
 801078e:	f10c 0708 	addcc.w	r7, ip, #8
 8010792:	6107      	strcc	r7, [r0, #16]
 8010794:	f10b 0701 	add.w	r7, fp, #1
 8010798:	6087      	str	r7, [r0, #8]
 801079a:	6907      	ldr	r7, [r0, #16]
 801079c:	459e      	cmp	lr, r3
 801079e:	803b      	strh	r3, [r7, #0]
 80107a0:	807a      	strh	r2, [r7, #2]
 80107a2:	f8a7 a004 	strh.w	sl, [r7, #4]
 80107a6:	f8a7 a006 	strh.w	sl, [r7, #6]
 80107aa:	d1c6      	bne.n	801073a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 80107ac:	9b04      	ldr	r3, [sp, #16]
 80107ae:	1b9e      	subs	r6, r3, r6
 80107b0:	6903      	ldr	r3, [r0, #16]
 80107b2:	889a      	ldrh	r2, [r3, #4]
 80107b4:	4432      	add	r2, r6
 80107b6:	809a      	strh	r2, [r3, #4]
 80107b8:	9a02      	ldr	r2, [sp, #8]
 80107ba:	f102 0c20 	add.w	ip, r2, #32
 80107be:	9a01      	ldr	r2, [sp, #4]
 80107c0:	ebac 0c02 	sub.w	ip, ip, r2
 80107c4:	88da      	ldrh	r2, [r3, #6]
 80107c6:	fb06 260c 	mla	r6, r6, ip, r2
 80107ca:	80de      	strh	r6, [r3, #6]
 80107cc:	f7ff bbb6 	b.w	800ff3c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080107d0 <_ZN8touchgfx7Outline6lineToEii>:
 80107d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80107d2:	079b      	lsls	r3, r3, #30
 80107d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107d6:	460e      	mov	r6, r1
 80107d8:	4615      	mov	r5, r2
 80107da:	d511      	bpl.n	8010800 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80107dc:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80107e0:	ea86 0701 	eor.w	r7, r6, r1
 80107e4:	ea85 0302 	eor.w	r3, r5, r2
 80107e8:	433b      	orrs	r3, r7
 80107ea:	d009      	beq.n	8010800 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80107ec:	4633      	mov	r3, r6
 80107ee:	9500      	str	r5, [sp, #0]
 80107f0:	f7ff fb4c 	bl	800fe8c <_ZN8touchgfx7Outline10renderLineEiiii>
 80107f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80107f6:	f043 0301 	orr.w	r3, r3, #1
 80107fa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80107fe:	6243      	str	r3, [r0, #36]	; 0x24
 8010800:	b003      	add	sp, #12
 8010802:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010804 <_ZN8touchgfx7Outline6moveToEii>:
 8010804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010806:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010808:	4615      	mov	r5, r2
 801080a:	4604      	mov	r4, r0
 801080c:	460e      	mov	r6, r1
 801080e:	079a      	lsls	r2, r3, #30
 8010810:	d401      	bmi.n	8010816 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010812:	f7ff fb07 	bl	800fe24 <_ZN8touchgfx7Outline5resetEv>
 8010816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010818:	07db      	lsls	r3, r3, #31
 801081a:	d504      	bpl.n	8010826 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801081c:	4620      	mov	r0, r4
 801081e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010822:	f7ff ffd5 	bl	80107d0 <_ZN8touchgfx7Outline6lineToEii>
 8010826:	6923      	ldr	r3, [r4, #16]
 8010828:	1170      	asrs	r0, r6, #5
 801082a:	1169      	asrs	r1, r5, #5
 801082c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010830:	4290      	cmp	r0, r2
 8010832:	d103      	bne.n	801083c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010834:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010838:	4291      	cmp	r1, r2
 801083a:	d01a      	beq.n	8010872 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 801083c:	88df      	ldrh	r7, [r3, #6]
 801083e:	889a      	ldrh	r2, [r3, #4]
 8010840:	433a      	orrs	r2, r7
 8010842:	d010      	beq.n	8010866 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010844:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010848:	2a00      	cmp	r2, #0
 801084a:	db0c      	blt.n	8010866 <_ZN8touchgfx7Outline6moveToEii+0x62>
 801084c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801084e:	42ba      	cmp	r2, r7
 8010850:	da09      	bge.n	8010866 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010852:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010856:	42ba      	cmp	r2, r7
 8010858:	f102 0201 	add.w	r2, r2, #1
 801085c:	bf38      	it	cc
 801085e:	3308      	addcc	r3, #8
 8010860:	60a2      	str	r2, [r4, #8]
 8010862:	bf38      	it	cc
 8010864:	6123      	strcc	r3, [r4, #16]
 8010866:	6923      	ldr	r3, [r4, #16]
 8010868:	2200      	movs	r2, #0
 801086a:	8018      	strh	r0, [r3, #0]
 801086c:	8059      	strh	r1, [r3, #2]
 801086e:	809a      	strh	r2, [r3, #4]
 8010870:	80da      	strh	r2, [r3, #6]
 8010872:	6166      	str	r6, [r4, #20]
 8010874:	6225      	str	r5, [r4, #32]
 8010876:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801087a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801087c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801087c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010880:	b0d0      	sub	sp, #320	; 0x140
 8010882:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010886:	466c      	mov	r4, sp
 8010888:	4627      	mov	r7, r4
 801088a:	1a0d      	subs	r5, r1, r0
 801088c:	f100 0308 	add.w	r3, r0, #8
 8010890:	2d48      	cmp	r5, #72	; 0x48
 8010892:	f340 80d5 	ble.w	8010a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010896:	112d      	asrs	r5, r5, #4
 8010898:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801089c:	f9b0 9000 	ldrsh.w	r9, [r0]
 80108a0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 80108a4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 80108a8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80108ac:	6816      	ldr	r6, [r2, #0]
 80108ae:	6006      	str	r6, [r0, #0]
 80108b0:	6856      	ldr	r6, [r2, #4]
 80108b2:	6046      	str	r6, [r0, #4]
 80108b4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80108b8:	f8a2 8002 	strh.w	r8, [r2, #2]
 80108bc:	f8a2 e004 	strh.w	lr, [r2, #4]
 80108c0:	f8a2 c006 	strh.w	ip, [r2, #6]
 80108c4:	f1a1 0208 	sub.w	r2, r1, #8
 80108c8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80108cc:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80108d0:	4565      	cmp	r5, ip
 80108d2:	db06      	blt.n	80108e2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80108d4:	d119      	bne.n	801090a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80108d6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80108da:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80108de:	42ae      	cmp	r6, r5
 80108e0:	dd13      	ble.n	801090a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80108e2:	460e      	mov	r6, r1
 80108e4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80108e8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80108ec:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80108f0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80108f4:	601d      	str	r5, [r3, #0]
 80108f6:	6875      	ldr	r5, [r6, #4]
 80108f8:	605d      	str	r5, [r3, #4]
 80108fa:	f821 9c08 	strh.w	r9, [r1, #-8]
 80108fe:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010902:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010906:	f821 ec02 	strh.w	lr, [r1, #-2]
 801090a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801090e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010912:	42ae      	cmp	r6, r5
 8010914:	db06      	blt.n	8010924 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010916:	d116      	bne.n	8010946 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010918:	f9b0 c000 	ldrsh.w	ip, [r0]
 801091c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010920:	45ac      	cmp	ip, r5
 8010922:	da10      	bge.n	8010946 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010924:	681d      	ldr	r5, [r3, #0]
 8010926:	f9b0 8000 	ldrsh.w	r8, [r0]
 801092a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801092e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010932:	6005      	str	r5, [r0, #0]
 8010934:	685d      	ldr	r5, [r3, #4]
 8010936:	f8a0 8008 	strh.w	r8, [r0, #8]
 801093a:	6045      	str	r5, [r0, #4]
 801093c:	8146      	strh	r6, [r0, #10]
 801093e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010942:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010946:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801094a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801094e:	4565      	cmp	r5, ip
 8010950:	db06      	blt.n	8010960 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010952:	d119      	bne.n	8010988 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010954:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010958:	f9b0 5000 	ldrsh.w	r5, [r0]
 801095c:	42ae      	cmp	r6, r5
 801095e:	da13      	bge.n	8010988 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010960:	460e      	mov	r6, r1
 8010962:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010966:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801096a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801096e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010972:	6005      	str	r5, [r0, #0]
 8010974:	6875      	ldr	r5, [r6, #4]
 8010976:	6045      	str	r5, [r0, #4]
 8010978:	f821 9c08 	strh.w	r9, [r1, #-8]
 801097c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010980:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010984:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010988:	3308      	adds	r3, #8
 801098a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801098e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010992:	45e6      	cmp	lr, ip
 8010994:	dbf8      	blt.n	8010988 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010996:	d105      	bne.n	80109a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010998:	f9b3 6000 	ldrsh.w	r6, [r3]
 801099c:	f9b0 5000 	ldrsh.w	r5, [r0]
 80109a0:	42ae      	cmp	r6, r5
 80109a2:	dbf1      	blt.n	8010988 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80109a4:	4615      	mov	r5, r2
 80109a6:	3a08      	subs	r2, #8
 80109a8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80109ac:	45b4      	cmp	ip, r6
 80109ae:	dbf9      	blt.n	80109a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80109b0:	d105      	bne.n	80109be <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80109b2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80109b6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80109ba:	45b0      	cmp	r8, r6
 80109bc:	dbf2      	blt.n	80109a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80109be:	4293      	cmp	r3, r2
 80109c0:	f1a5 0608 	sub.w	r6, r5, #8
 80109c4:	d816      	bhi.n	80109f4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80109c6:	f8d6 c000 	ldr.w	ip, [r6]
 80109ca:	f9b3 a000 	ldrsh.w	sl, [r3]
 80109ce:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80109d2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80109d6:	f8c3 c000 	str.w	ip, [r3]
 80109da:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80109de:	f8c3 c004 	str.w	ip, [r3, #4]
 80109e2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80109e6:	f825 ec06 	strh.w	lr, [r5, #-6]
 80109ea:	f825 9c04 	strh.w	r9, [r5, #-4]
 80109ee:	f825 8c02 	strh.w	r8, [r5, #-2]
 80109f2:	e7c9      	b.n	8010988 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80109f4:	f8d6 e000 	ldr.w	lr, [r6]
 80109f8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80109fc:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010a00:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010a04:	f8c0 e000 	str.w	lr, [r0]
 8010a08:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010a0c:	1a16      	subs	r6, r2, r0
 8010a0e:	f8c0 e004 	str.w	lr, [r0, #4]
 8010a12:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010a16:	f825 cc06 	strh.w	ip, [r5, #-6]
 8010a1a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010a1e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010a22:	1acd      	subs	r5, r1, r3
 8010a24:	10ed      	asrs	r5, r5, #3
 8010a26:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8010a2a:	bfb5      	itete	lt
 8010a2c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010a30:	e9c4 3100 	strdge	r3, r1, [r4]
 8010a34:	460a      	movlt	r2, r1
 8010a36:	4603      	movge	r3, r0
 8010a38:	3408      	adds	r4, #8
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	e724      	b.n	801088a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010a40:	4299      	cmp	r1, r3
 8010a42:	d927      	bls.n	8010a94 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010a44:	f1a3 0210 	sub.w	r2, r3, #16
 8010a48:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010a4c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010a50:	45ac      	cmp	ip, r5
 8010a52:	db06      	blt.n	8010a62 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010a54:	d11c      	bne.n	8010a90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010a56:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8010a5a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8010a5e:	42ae      	cmp	r6, r5
 8010a60:	da16      	bge.n	8010a90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010a62:	4615      	mov	r5, r2
 8010a64:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010a68:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8010a6c:	3a08      	subs	r2, #8
 8010a6e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010a72:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010a76:	6196      	str	r6, [r2, #24]
 8010a78:	42a8      	cmp	r0, r5
 8010a7a:	686e      	ldr	r6, [r5, #4]
 8010a7c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010a80:	61d6      	str	r6, [r2, #28]
 8010a82:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010a86:	f8a2 8014 	strh.w	r8, [r2, #20]
 8010a8a:	f8a2 e016 	strh.w	lr, [r2, #22]
 8010a8e:	d1db      	bne.n	8010a48 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010a90:	3308      	adds	r3, #8
 8010a92:	e7d5      	b.n	8010a40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010a94:	42bc      	cmp	r4, r7
 8010a96:	d903      	bls.n	8010aa0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010a98:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8010a9c:	3c08      	subs	r4, #8
 8010a9e:	e6f4      	b.n	801088a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010aa0:	b050      	add	sp, #320	; 0x140
 8010aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010aa6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8010aa6:	b510      	push	{r4, lr}
 8010aa8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010aaa:	4604      	mov	r4, r0
 8010aac:	07da      	lsls	r2, r3, #31
 8010aae:	d507      	bpl.n	8010ac0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8010ab0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8010ab4:	f7ff fe8c 	bl	80107d0 <_ZN8touchgfx7Outline6lineToEii>
 8010ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010aba:	f023 0301 	bic.w	r3, r3, #1
 8010abe:	6243      	str	r3, [r0, #36]	; 0x24
 8010ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010ac2:	079b      	lsls	r3, r3, #30
 8010ac4:	d521      	bpl.n	8010b0a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8010ac6:	6923      	ldr	r3, [r4, #16]
 8010ac8:	88d9      	ldrh	r1, [r3, #6]
 8010aca:	889a      	ldrh	r2, [r3, #4]
 8010acc:	430a      	orrs	r2, r1
 8010ace:	d010      	beq.n	8010af2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010ad0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010ad4:	2a00      	cmp	r2, #0
 8010ad6:	db0c      	blt.n	8010af2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010ad8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010ada:	428a      	cmp	r2, r1
 8010adc:	da09      	bge.n	8010af2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010ade:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8010ae2:	4291      	cmp	r1, r2
 8010ae4:	f102 0201 	add.w	r2, r2, #1
 8010ae8:	bf88      	it	hi
 8010aea:	3308      	addhi	r3, #8
 8010aec:	60a2      	str	r2, [r4, #8]
 8010aee:	bf88      	it	hi
 8010af0:	6123      	strhi	r3, [r4, #16]
 8010af2:	68a1      	ldr	r1, [r4, #8]
 8010af4:	b129      	cbz	r1, 8010b02 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010af6:	6863      	ldr	r3, [r4, #4]
 8010af8:	4299      	cmp	r1, r3
 8010afa:	d802      	bhi.n	8010b02 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010afc:	68e0      	ldr	r0, [r4, #12]
 8010afe:	f7ff febd 	bl	801087c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8010b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b04:	f023 0302 	bic.w	r3, r3, #2
 8010b08:	6263      	str	r3, [r4, #36]	; 0x24
 8010b0a:	68e0      	ldr	r0, [r4, #12]
 8010b0c:	bd10      	pop	{r4, pc}
	...

08010b10 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8010b10:	4b02      	ldr	r3, [pc, #8]	; (8010b1c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8010b12:	6018      	str	r0, [r3, #0]
 8010b14:	4b02      	ldr	r3, [pc, #8]	; (8010b20 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8010b16:	6019      	str	r1, [r3, #0]
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	2400f4ac 	.word	0x2400f4ac
 8010b20:	2400f4b0 	.word	0x2400f4b0

08010b24 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8010b24:	2300      	movs	r3, #0
 8010b26:	4a02      	ldr	r2, [pc, #8]	; (8010b30 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8010b28:	6013      	str	r3, [r2, #0]
 8010b2a:	4a02      	ldr	r2, [pc, #8]	; (8010b34 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8010b2c:	6013      	str	r3, [r2, #0]
 8010b2e:	4770      	bx	lr
 8010b30:	2400f4ac 	.word	0x2400f4ac
 8010b34:	2400f4b0 	.word	0x2400f4b0

08010b38 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010b38:	4b01      	ldr	r3, [pc, #4]	; (8010b40 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8010b3a:	6818      	ldr	r0, [r3, #0]
 8010b3c:	4770      	bx	lr
 8010b3e:	bf00      	nop
 8010b40:	2400f4ac 	.word	0x2400f4ac

08010b44 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010b44:	4b01      	ldr	r3, [pc, #4]	; (8010b4c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010b46:	6818      	ldr	r0, [r3, #0]
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop
 8010b4c:	2400f4b0 	.word	0x2400f4b0

08010b50 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010b50:	b510      	push	{r4, lr}
 8010b52:	6803      	ldr	r3, [r0, #0]
 8010b54:	460c      	mov	r4, r1
 8010b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b58:	4798      	blx	r3
 8010b5a:	1b03      	subs	r3, r0, r4
 8010b5c:	4258      	negs	r0, r3
 8010b5e:	4158      	adcs	r0, r3
 8010b60:	bd10      	pop	{r4, pc}
	...

08010b64 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010b64:	4b01      	ldr	r3, [pc, #4]	; (8010b6c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010b66:	6019      	str	r1, [r3, #0]
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop
 8010b6c:	2400f4b4 	.word	0x2400f4b4

08010b70 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	4696      	mov	lr, r2
 8010b76:	b097      	sub	sp, #92	; 0x5c
 8010b78:	4605      	mov	r5, r0
 8010b7a:	4614      	mov	r4, r2
 8010b7c:	460e      	mov	r6, r1
 8010b7e:	461f      	mov	r7, r3
 8010b80:	f10d 0c1c 	add.w	ip, sp, #28
 8010b84:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010b88:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8010b8c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010b90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b98:	f8de 3000 	ldr.w	r3, [lr]
 8010b9c:	f104 0e14 	add.w	lr, r4, #20
 8010ba0:	f8cc 3000 	str.w	r3, [ip]
 8010ba4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010ba8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bb0:	f8de 3000 	ldr.w	r3, [lr]
 8010bb4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010bb8:	f8cc 3000 	str.w	r3, [ip]
 8010bbc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010bc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bc8:	f8de 3000 	ldr.w	r3, [lr]
 8010bcc:	4631      	mov	r1, r6
 8010bce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	f8cc 3000 	str.w	r3, [ip]
 8010bd6:	682b      	ldr	r3, [r5, #0]
 8010bd8:	9201      	str	r2, [sp, #4]
 8010bda:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010bdc:	f8cd 8008 	str.w	r8, [sp, #8]
 8010be0:	9200      	str	r2, [sp, #0]
 8010be2:	aa07      	add	r2, sp, #28
 8010be4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010be8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8010bec:	463b      	mov	r3, r7
 8010bee:	47d8      	blx	fp
 8010bf0:	46a6      	mov	lr, r4
 8010bf2:	f10d 0c1c 	add.w	ip, sp, #28
 8010bf6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bfe:	f8de 3000 	ldr.w	r3, [lr]
 8010c02:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010c06:	343c      	adds	r4, #60	; 0x3c
 8010c08:	f8cc 3000 	str.w	r3, [ip]
 8010c0c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010c10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c18:	f8de 3000 	ldr.w	r3, [lr]
 8010c1c:	f8cc 3000 	str.w	r3, [ip]
 8010c20:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c2a:	6823      	ldr	r3, [r4, #0]
 8010c2c:	4631      	mov	r1, r6
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f8cc 3000 	str.w	r3, [ip]
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010c3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c3c:	f8cd 8008 	str.w	r8, [sp, #8]
 8010c40:	9201      	str	r2, [sp, #4]
 8010c42:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010c44:	9200      	str	r2, [sp, #0]
 8010c46:	aa07      	add	r2, sp, #28
 8010c48:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8010c4a:	463b      	mov	r3, r7
 8010c4c:	47a0      	blx	r4
 8010c4e:	b017      	add	sp, #92	; 0x5c
 8010c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c54 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c58:	b08d      	sub	sp, #52	; 0x34
 8010c5a:	4688      	mov	r8, r1
 8010c5c:	f8d3 c000 	ldr.w	ip, [r3]
 8010c60:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010c62:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010c66:	680f      	ldr	r7, [r1, #0]
 8010c68:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010c6c:	eba7 070c 	sub.w	r7, r7, ip
 8010c70:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010c74:	edd3 6a07 	vldr	s13, [r3, #28]
 8010c78:	42bc      	cmp	r4, r7
 8010c7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010c7c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8010c80:	bfa8      	it	ge
 8010c82:	463c      	movge	r4, r7
 8010c84:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010c88:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010c8c:	ee07 4a90 	vmov	s15, r4
 8010c90:	eb09 0e0c 	add.w	lr, r9, ip
 8010c94:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010c98:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010c9c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8010ca0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8010ca4:	4571      	cmp	r1, lr
 8010ca6:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010caa:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010cae:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010cb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010cb6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8010cba:	ee32 1a05 	vadd.f32	s2, s4, s10
 8010cbe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010cc2:	ee36 0a84 	vadd.f32	s0, s13, s8
 8010cc6:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010cca:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010cce:	f340 808c 	ble.w	8010dea <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8010cd2:	eba1 060e 	sub.w	r6, r1, lr
 8010cd6:	fb96 f5f4 	sdiv	r5, r6, r4
 8010cda:	ee07 5a10 	vmov	s14, r5
 8010cde:	2d00      	cmp	r5, #0
 8010ce0:	fb04 6615 	mls	r6, r4, r5, r6
 8010ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010ce8:	eea7 0a04 	vfma.f32	s0, s14, s8
 8010cec:	eee7 0a24 	vfma.f32	s1, s14, s9
 8010cf0:	eea7 1a05 	vfma.f32	s2, s14, s10
 8010cf4:	dd12      	ble.n	8010d1c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8010cf6:	ee70 6a44 	vsub.f32	s13, s0, s8
 8010cfa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8010cfe:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010d02:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0a:	bf14      	ite	ne
 8010d0c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010d10:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010d14:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010d18:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010d1c:	fb05 f204 	mul.w	r2, r5, r4
 8010d20:	1abf      	subs	r7, r7, r2
 8010d22:	4494      	add	ip, r2
 8010d24:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010d28:	4411      	add	r1, r2
 8010d2a:	eb09 020c 	add.w	r2, r9, ip
 8010d2e:	b209      	sxth	r1, r1
 8010d30:	443a      	add	r2, r7
 8010d32:	428a      	cmp	r2, r1
 8010d34:	bfc4      	itt	gt
 8010d36:	eba1 0209 	subgt.w	r2, r1, r9
 8010d3a:	eba2 070c 	subgt.w	r7, r2, ip
 8010d3e:	2f00      	cmp	r7, #0
 8010d40:	dd50      	ble.n	8010de4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8010d42:	fb97 f1f4 	sdiv	r1, r7, r4
 8010d46:	fb04 7211 	mls	r2, r4, r1, r7
 8010d4a:	b90a      	cbnz	r2, 8010d50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010d4c:	3901      	subs	r1, #1
 8010d4e:	4622      	mov	r2, r4
 8010d50:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010d54:	6840      	ldr	r0, [r0, #4]
 8010d56:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8010d5a:	44b6      	add	lr, r6
 8010d5c:	f8d0 a000 	ldr.w	sl, [r0]
 8010d60:	2900      	cmp	r1, #0
 8010d62:	bfcc      	ite	gt
 8010d64:	46a1      	movgt	r9, r4
 8010d66:	4691      	movle	r9, r2
 8010d68:	900b      	str	r0, [sp, #44]	; 0x2c
 8010d6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010d6c:	fb04 e505 	mla	r5, r4, r5, lr
 8010d70:	eef0 6a42 	vmov.f32	s13, s4
 8010d74:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010d78:	9008      	str	r0, [sp, #32]
 8010d7a:	eeb0 7a61 	vmov.f32	s14, s3
 8010d7e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010d80:	695b      	ldr	r3, [r3, #20]
 8010d82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010d86:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8010d8a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8010d8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010d90:	445b      	add	r3, fp
 8010d92:	9307      	str	r3, [sp, #28]
 8010d94:	ee16 3a90 	vmov	r3, s13
 8010d98:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8010d9c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8010da0:	ee21 3a23 	vmul.f32	s6, s2, s7
 8010da4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8010da8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010dac:	ee17 7a90 	vmov	r7, s15
 8010db0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8010db4:	fb97 f7f4 	sdiv	r7, r7, r4
 8010db8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010dbc:	ee17 ca90 	vmov	ip, s15
 8010dc0:	fb9c fcf4 	sdiv	ip, ip, r4
 8010dc4:	fb0c 3306 	mla	r3, ip, r6, r3
 8010dc8:	9302      	str	r3, [sp, #8]
 8010dca:	ee17 3a10 	vmov	r3, s14
 8010dce:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8010dd2:	fb07 3706 	mla	r7, r7, r6, r3
 8010dd6:	eba9 0306 	sub.w	r3, r9, r6
 8010dda:	e9cd 4700 	strd	r4, r7, [sp]
 8010dde:	f8da 4008 	ldr.w	r4, [sl, #8]
 8010de2:	47a0      	blx	r4
 8010de4:	b00d      	add	sp, #52	; 0x34
 8010de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dea:	2500      	movs	r5, #0
 8010dec:	462e      	mov	r6, r5
 8010dee:	e799      	b.n	8010d24 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08010df0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	b0db      	sub	sp, #364	; 0x16c
 8010df6:	461d      	mov	r5, r3
 8010df8:	4614      	mov	r4, r2
 8010dfa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8010dfe:	910f      	str	r1, [sp, #60]	; 0x3c
 8010e00:	4629      	mov	r1, r5
 8010e02:	930a      	str	r3, [sp, #40]	; 0x28
 8010e04:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8010e08:	9009      	str	r0, [sp, #36]	; 0x24
 8010e0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e0c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8010e10:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8010e14:	9310      	str	r3, [sp, #64]	; 0x40
 8010e16:	6803      	ldr	r3, [r0, #0]
 8010e18:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8010e1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e1e:	47b8      	blx	r7
 8010e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e22:	6058      	str	r0, [r3, #4]
 8010e24:	2800      	cmp	r0, #0
 8010e26:	f000 83a1 	beq.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e2a:	682b      	ldr	r3, [r5, #0]
 8010e2c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010e30:	ed94 7a02 	vldr	s14, [r4, #8]
 8010e34:	9314      	str	r3, [sp, #80]	; 0x50
 8010e36:	686b      	ldr	r3, [r5, #4]
 8010e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e3c:	9315      	str	r3, [sp, #84]	; 0x54
 8010e3e:	4bc1      	ldr	r3, [pc, #772]	; (8011144 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010e40:	7819      	ldrb	r1, [r3, #0]
 8010e42:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010e46:	2900      	cmp	r1, #0
 8010e48:	bf16      	itet	ne
 8010e4a:	4619      	movne	r1, r3
 8010e4c:	4611      	moveq	r1, r2
 8010e4e:	4613      	movne	r3, r2
 8010e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e54:	9116      	str	r1, [sp, #88]	; 0x58
 8010e56:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8010e5a:	f240 8387 	bls.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e5e:	ed94 7a07 	vldr	s14, [r4, #28]
 8010e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6a:	f240 837f 	bls.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e6e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e7a:	f240 8377 	bls.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e7e:	6822      	ldr	r2, [r4, #0]
 8010e80:	4bb1      	ldr	r3, [pc, #708]	; (8011148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010e82:	429a      	cmp	r2, r3
 8010e84:	f2c0 8372 	blt.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e88:	49b0      	ldr	r1, [pc, #704]	; (801114c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8010e8a:	6963      	ldr	r3, [r4, #20]
 8010e8c:	428a      	cmp	r2, r1
 8010e8e:	f300 836d 	bgt.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010e92:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010e96:	48ae      	ldr	r0, [pc, #696]	; (8011150 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8010e98:	33ff      	adds	r3, #255	; 0xff
 8010e9a:	4283      	cmp	r3, r0
 8010e9c:	f200 8366 	bhi.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010ea2:	4dac      	ldr	r5, [pc, #688]	; (8011154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8010ea4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010ea8:	33ff      	adds	r3, #255	; 0xff
 8010eaa:	42ab      	cmp	r3, r5
 8010eac:	f200 835e 	bhi.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010eb0:	6862      	ldr	r2, [r4, #4]
 8010eb2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8010eb6:	33ff      	adds	r3, #255	; 0xff
 8010eb8:	4283      	cmp	r3, r0
 8010eba:	f200 8357 	bhi.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010ebe:	69a1      	ldr	r1, [r4, #24]
 8010ec0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8010ec4:	33ff      	adds	r3, #255	; 0xff
 8010ec6:	4283      	cmp	r3, r0
 8010ec8:	f200 8350 	bhi.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010ece:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8010ed2:	30ff      	adds	r0, #255	; 0xff
 8010ed4:	42a8      	cmp	r0, r5
 8010ed6:	f200 8349 	bhi.w	801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010eda:	428a      	cmp	r2, r1
 8010edc:	f280 8110 	bge.w	8011100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	f300 8119 	bgt.w	8011118 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8010ee6:	4299      	cmp	r1, r3
 8010ee8:	f280 811d 	bge.w	8011126 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8010eec:	2502      	movs	r5, #2
 8010eee:	2701      	movs	r7, #1
 8010ef0:	46a9      	mov	r9, r5
 8010ef2:	46b8      	mov	r8, r7
 8010ef4:	f04f 0a00 	mov.w	sl, #0
 8010ef8:	4621      	mov	r1, r4
 8010efa:	a849      	add	r0, sp, #292	; 0x124
 8010efc:	f003 fd2a 	bl	8014954 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010f00:	4622      	mov	r2, r4
 8010f02:	4653      	mov	r3, sl
 8010f04:	a949      	add	r1, sp, #292	; 0x124
 8010f06:	f8cd 9000 	str.w	r9, [sp]
 8010f0a:	a819      	add	r0, sp, #100	; 0x64
 8010f0c:	f003 fe52 	bl	8014bb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010f10:	4622      	mov	r2, r4
 8010f12:	4653      	mov	r3, sl
 8010f14:	a949      	add	r1, sp, #292	; 0x124
 8010f16:	f8cd 8000 	str.w	r8, [sp]
 8010f1a:	a829      	add	r0, sp, #164	; 0xa4
 8010f1c:	f003 fe4a 	bl	8014bb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010f20:	4643      	mov	r3, r8
 8010f22:	4622      	mov	r2, r4
 8010f24:	a949      	add	r1, sp, #292	; 0x124
 8010f26:	f8cd 9000 	str.w	r9, [sp]
 8010f2a:	a839      	add	r0, sp, #228	; 0xe4
 8010f2c:	f003 fe42 	bl	8014bb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010f30:	42af      	cmp	r7, r5
 8010f32:	af12      	add	r7, sp, #72	; 0x48
 8010f34:	bfb7      	itett	lt
 8010f36:	2300      	movlt	r3, #0
 8010f38:	2301      	movge	r3, #1
 8010f3a:	ad29      	addlt	r5, sp, #164	; 0xa4
 8010f3c:	ac19      	addlt	r4, sp, #100	; 0x64
 8010f3e:	bfb1      	iteee	lt
 8010f40:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010f42:	ad19      	addge	r5, sp, #100	; 0x64
 8010f44:	930e      	strge	r3, [sp, #56]	; 0x38
 8010f46:	ac29      	addge	r4, sp, #164	; 0xa4
 8010f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010f4e:	e887 0003 	stmia.w	r7, {r0, r1}
 8010f52:	b928      	cbnz	r0, 8010f60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010f54:	4b80      	ldr	r3, [pc, #512]	; (8011158 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8010f56:	6818      	ldr	r0, [r3, #0]
 8010f58:	6803      	ldr	r3, [r0, #0]
 8010f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f5c:	4798      	blx	r3
 8010f5e:	6038      	str	r0, [r7, #0]
 8010f60:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010f62:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010f6a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010f6c:	930c      	str	r3, [sp, #48]	; 0x30
 8010f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f70:	6963      	ldr	r3, [r4, #20]
 8010f72:	440b      	add	r3, r1
 8010f74:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010f78:	4408      	add	r0, r1
 8010f7a:	b200      	sxth	r0, r0
 8010f7c:	4283      	cmp	r3, r0
 8010f7e:	900d      	str	r0, [sp, #52]	; 0x34
 8010f80:	f280 80dd 	bge.w	801113e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010f84:	428b      	cmp	r3, r1
 8010f86:	da08      	bge.n	8010f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010f88:	2a00      	cmp	r2, #0
 8010f8a:	dd06      	ble.n	8010f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010f8c:	1acb      	subs	r3, r1, r3
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	f2c0 80e4 	blt.w	801115c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f300 80e2 	bgt.w	801115e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8010f9a:	6967      	ldr	r7, [r4, #20]
 8010f9c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010fa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010fa2:	443b      	add	r3, r7
 8010fa4:	461f      	mov	r7, r3
 8010fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fa8:	1bdf      	subs	r7, r3, r7
 8010faa:	4297      	cmp	r7, r2
 8010fac:	bfa8      	it	ge
 8010fae:	4617      	movge	r7, r2
 8010fb0:	2f00      	cmp	r7, #0
 8010fb2:	f340 8166 	ble.w	8011282 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8010fb6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010fb8:	6829      	ldr	r1, [r5, #0]
 8010fba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010fbe:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010fc2:	4411      	add	r1, r2
 8010fc4:	6820      	ldr	r0, [r4, #0]
 8010fc6:	4299      	cmp	r1, r3
 8010fc8:	dd1a      	ble.n	8011000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010fca:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010fce:	4402      	add	r2, r0
 8010fd0:	440b      	add	r3, r1
 8010fd2:	b21b      	sxth	r3, r3
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	dc13      	bgt.n	8011000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010fd8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010fda:	a912      	add	r1, sp, #72	; 0x48
 8010fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	9206      	str	r2, [sp, #24]
 8010fe4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fe6:	9500      	str	r5, [sp, #0]
 8010fe8:	9205      	str	r2, [sp, #20]
 8010fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fec:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010ff0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010ff2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010ff6:	aa49      	add	r2, sp, #292	; 0x124
 8010ff8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010ffc:	4623      	mov	r3, r4
 8010ffe:	47c8      	blx	r9
 8011000:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011004:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011008:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801100c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011010:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011014:	68a1      	ldr	r1, [r4, #8]
 8011016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801101a:	ed94 6a08 	vldr	s12, [r4, #32]
 801101e:	edd4 6a07 	vldr	s13, [r4, #28]
 8011022:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011026:	ee76 6a86 	vadd.f32	s13, s13, s12
 801102a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801102e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011032:	edc4 6a07 	vstr	s13, [r4, #28]
 8011036:	441a      	add	r2, r3
 8011038:	6963      	ldr	r3, [r4, #20]
 801103a:	3301      	adds	r3, #1
 801103c:	6022      	str	r2, [r4, #0]
 801103e:	6163      	str	r3, [r4, #20]
 8011040:	69a3      	ldr	r3, [r4, #24]
 8011042:	3b01      	subs	r3, #1
 8011044:	61a3      	str	r3, [r4, #24]
 8011046:	6923      	ldr	r3, [r4, #16]
 8011048:	440b      	add	r3, r1
 801104a:	68e1      	ldr	r1, [r4, #12]
 801104c:	428b      	cmp	r3, r1
 801104e:	6123      	str	r3, [r4, #16]
 8011050:	db15      	blt.n	801107e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8011052:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011056:	3201      	adds	r2, #1
 8011058:	1a5b      	subs	r3, r3, r1
 801105a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801105e:	6022      	str	r2, [r4, #0]
 8011060:	6123      	str	r3, [r4, #16]
 8011062:	edc4 6a07 	vstr	s13, [r4, #28]
 8011066:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801106a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801106e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011072:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011076:	ee77 7a27 	vadd.f32	s15, s14, s15
 801107a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801107e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011082:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011086:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801108a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801108e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011092:	68a9      	ldr	r1, [r5, #8]
 8011094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011098:	ed95 6a08 	vldr	s12, [r5, #32]
 801109c:	edd5 6a07 	vldr	s13, [r5, #28]
 80110a0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80110a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80110a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80110ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80110b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80110b4:	441a      	add	r2, r3
 80110b6:	696b      	ldr	r3, [r5, #20]
 80110b8:	3301      	adds	r3, #1
 80110ba:	602a      	str	r2, [r5, #0]
 80110bc:	616b      	str	r3, [r5, #20]
 80110be:	69ab      	ldr	r3, [r5, #24]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	61ab      	str	r3, [r5, #24]
 80110c4:	692b      	ldr	r3, [r5, #16]
 80110c6:	440b      	add	r3, r1
 80110c8:	68e9      	ldr	r1, [r5, #12]
 80110ca:	428b      	cmp	r3, r1
 80110cc:	612b      	str	r3, [r5, #16]
 80110ce:	db15      	blt.n	80110fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80110d0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80110d4:	3201      	adds	r2, #1
 80110d6:	1a5b      	subs	r3, r3, r1
 80110d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80110dc:	602a      	str	r2, [r5, #0]
 80110de:	612b      	str	r3, [r5, #16]
 80110e0:	edc5 6a07 	vstr	s13, [r5, #28]
 80110e4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80110e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80110ec:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80110f0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80110f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110f8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80110fc:	3f01      	subs	r7, #1
 80110fe:	e757      	b.n	8010fb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011100:	4299      	cmp	r1, r3
 8011102:	dc13      	bgt.n	801112c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011104:	429a      	cmp	r2, r3
 8011106:	da14      	bge.n	8011132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011108:	2502      	movs	r5, #2
 801110a:	2703      	movs	r7, #3
 801110c:	f04f 0800 	mov.w	r8, #0
 8011110:	46a9      	mov	r9, r5
 8011112:	f04f 0a01 	mov.w	sl, #1
 8011116:	e6ef      	b.n	8010ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011118:	2501      	movs	r5, #1
 801111a:	2700      	movs	r7, #0
 801111c:	46a9      	mov	r9, r5
 801111e:	46b8      	mov	r8, r7
 8011120:	f04f 0a02 	mov.w	sl, #2
 8011124:	e6e8      	b.n	8010ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011126:	2501      	movs	r5, #1
 8011128:	2702      	movs	r7, #2
 801112a:	e6e1      	b.n	8010ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801112c:	2500      	movs	r5, #0
 801112e:	2701      	movs	r7, #1
 8011130:	e7f4      	b.n	801111c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011132:	2702      	movs	r7, #2
 8011134:	2503      	movs	r5, #3
 8011136:	f04f 0900 	mov.w	r9, #0
 801113a:	46b8      	mov	r8, r7
 801113c:	e7e9      	b.n	8011112 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801113e:	4613      	mov	r3, r2
 8011140:	e728      	b.n	8010f94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011142:	bf00      	nop
 8011144:	2400f49c 	.word	0x2400f49c
 8011148:	fffd8f01 	.word	0xfffd8f01
 801114c:	00027100 	.word	0x00027100
 8011150:	0004e1ff 	.word	0x0004e1ff
 8011154:	0004e1fe 	.word	0x0004e1fe
 8011158:	2400f4a4 	.word	0x2400f4a4
 801115c:	4613      	mov	r3, r2
 801115e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011160:	469e      	mov	lr, r3
 8011162:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011164:	469c      	mov	ip, r3
 8011166:	9111      	str	r1, [sp, #68]	; 0x44
 8011168:	f04f 0900 	mov.w	r9, #0
 801116c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8011170:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8011174:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8011178:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801117c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8011180:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8011184:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8011188:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801118c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8011190:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8011194:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8011198:	f1bc 0f00 	cmp.w	ip, #0
 801119c:	d147      	bne.n	801122e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801119e:	eb03 0c07 	add.w	ip, r3, r7
 80111a2:	1ad7      	subs	r7, r2, r3
 80111a4:	f1b9 0f00 	cmp.w	r9, #0
 80111a8:	d009      	beq.n	80111be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80111aa:	9029      	str	r0, [sp, #164]	; 0xa4
 80111ac:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80111b0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80111b4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80111b8:	912d      	str	r1, [sp, #180]	; 0xb4
 80111ba:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80111be:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80111c0:	f04f 0800 	mov.w	r8, #0
 80111c4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80111c8:	9111      	str	r1, [sp, #68]	; 0x44
 80111ca:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80111ce:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80111d2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80111d6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80111da:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80111de:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80111e2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80111e6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80111ea:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80111ee:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80111f2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80111f6:	f1be 0f00 	cmp.w	lr, #0
 80111fa:	d031      	beq.n	8011260 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80111fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80111fe:	4450      	add	r0, sl
 8011200:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011204:	4431      	add	r1, r6
 8011206:	ee37 7a04 	vadd.f32	s14, s14, s8
 801120a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801120e:	4549      	cmp	r1, r9
 8011210:	db08      	blt.n	8011224 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011212:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011216:	3001      	adds	r0, #1
 8011218:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801121c:	eba1 0109 	sub.w	r1, r1, r9
 8011220:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011224:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011228:	f04f 0801 	mov.w	r8, #1
 801122c:	e7e3      	b.n	80111f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801122e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011230:	4450      	add	r0, sl
 8011232:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011236:	4431      	add	r1, r6
 8011238:	ee77 7a84 	vadd.f32	s15, s15, s8
 801123c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011240:	4541      	cmp	r1, r8
 8011242:	db08      	blt.n	8011256 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011244:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011248:	3001      	adds	r0, #1
 801124a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801124e:	eba1 0108 	sub.w	r1, r1, r8
 8011252:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011256:	f10c 3cff 	add.w	ip, ip, #4294967295
 801125a:	f04f 0901 	mov.w	r9, #1
 801125e:	e79b      	b.n	8011198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011260:	449c      	add	ip, r3
 8011262:	1aff      	subs	r7, r7, r3
 8011264:	f1b8 0f00 	cmp.w	r8, #0
 8011268:	d009      	beq.n	801127e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801126a:	9019      	str	r0, [sp, #100]	; 0x64
 801126c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011270:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011274:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011278:	911d      	str	r1, [sp, #116]	; 0x74
 801127a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	e68b      	b.n	8010f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011284:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8011286:	2b00      	cmp	r3, #0
 8011288:	f000 80d1 	beq.w	801142e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801128c:	ad19      	add	r5, sp, #100	; 0x64
 801128e:	ac39      	add	r4, sp, #228	; 0xe4
 8011290:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011292:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011296:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801129a:	930c      	str	r3, [sp, #48]	; 0x30
 801129c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801129e:	6963      	ldr	r3, [r4, #20]
 80112a0:	440b      	add	r3, r1
 80112a2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80112a6:	4408      	add	r0, r1
 80112a8:	b200      	sxth	r0, r0
 80112aa:	4283      	cmp	r3, r0
 80112ac:	900d      	str	r0, [sp, #52]	; 0x34
 80112ae:	f280 80c1 	bge.w	8011434 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80112b2:	428b      	cmp	r3, r1
 80112b4:	da08      	bge.n	80112c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80112b6:	2a00      	cmp	r2, #0
 80112b8:	dd06      	ble.n	80112c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80112ba:	1acb      	subs	r3, r1, r3
 80112bc:	429a      	cmp	r2, r3
 80112be:	f2c0 80bb 	blt.w	8011438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f300 80b9 	bgt.w	801143a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80112c8:	6967      	ldr	r7, [r4, #20]
 80112ca:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80112ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80112d0:	443b      	add	r3, r7
 80112d2:	461f      	mov	r7, r3
 80112d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112d6:	1bdf      	subs	r7, r3, r7
 80112d8:	4297      	cmp	r7, r2
 80112da:	bfa8      	it	ge
 80112dc:	4617      	movge	r7, r2
 80112de:	2f00      	cmp	r7, #0
 80112e0:	f340 813c 	ble.w	801155c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80112e4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80112e6:	6829      	ldr	r1, [r5, #0]
 80112e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80112ec:	f9bb 3000 	ldrsh.w	r3, [fp]
 80112f0:	4411      	add	r1, r2
 80112f2:	6820      	ldr	r0, [r4, #0]
 80112f4:	4299      	cmp	r1, r3
 80112f6:	dd1a      	ble.n	801132e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80112f8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80112fc:	4402      	add	r2, r0
 80112fe:	440b      	add	r3, r1
 8011300:	b21b      	sxth	r3, r3
 8011302:	429a      	cmp	r2, r3
 8011304:	dc13      	bgt.n	801132e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011308:	a912      	add	r1, sp, #72	; 0x48
 801130a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801130c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	9206      	str	r2, [sp, #24]
 8011312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011314:	9500      	str	r5, [sp, #0]
 8011316:	9205      	str	r2, [sp, #20]
 8011318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801131a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801131e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011320:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011324:	aa49      	add	r2, sp, #292	; 0x124
 8011326:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801132a:	4623      	mov	r3, r4
 801132c:	47c8      	blx	r9
 801132e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011332:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011336:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801133e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011342:	68a1      	ldr	r1, [r4, #8]
 8011344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011348:	ed94 6a08 	vldr	s12, [r4, #32]
 801134c:	edd4 6a07 	vldr	s13, [r4, #28]
 8011350:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011354:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011358:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801135c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011360:	edc4 6a07 	vstr	s13, [r4, #28]
 8011364:	441a      	add	r2, r3
 8011366:	6963      	ldr	r3, [r4, #20]
 8011368:	3301      	adds	r3, #1
 801136a:	6022      	str	r2, [r4, #0]
 801136c:	6163      	str	r3, [r4, #20]
 801136e:	69a3      	ldr	r3, [r4, #24]
 8011370:	3b01      	subs	r3, #1
 8011372:	61a3      	str	r3, [r4, #24]
 8011374:	6923      	ldr	r3, [r4, #16]
 8011376:	440b      	add	r3, r1
 8011378:	68e1      	ldr	r1, [r4, #12]
 801137a:	428b      	cmp	r3, r1
 801137c:	6123      	str	r3, [r4, #16]
 801137e:	db15      	blt.n	80113ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011380:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011384:	3201      	adds	r2, #1
 8011386:	1a5b      	subs	r3, r3, r1
 8011388:	ee76 6a26 	vadd.f32	s13, s12, s13
 801138c:	6022      	str	r2, [r4, #0]
 801138e:	6123      	str	r3, [r4, #16]
 8011390:	edc4 6a07 	vstr	s13, [r4, #28]
 8011394:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011398:	ee36 7a87 	vadd.f32	s14, s13, s14
 801139c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80113a0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80113a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80113a8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80113ac:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80113b0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80113b4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80113b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80113bc:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80113c0:	68a9      	ldr	r1, [r5, #8]
 80113c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80113c6:	ed95 6a08 	vldr	s12, [r5, #32]
 80113ca:	edd5 6a07 	vldr	s13, [r5, #28]
 80113ce:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80113d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80113d6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80113da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80113de:	edc5 6a07 	vstr	s13, [r5, #28]
 80113e2:	441a      	add	r2, r3
 80113e4:	696b      	ldr	r3, [r5, #20]
 80113e6:	3301      	adds	r3, #1
 80113e8:	602a      	str	r2, [r5, #0]
 80113ea:	616b      	str	r3, [r5, #20]
 80113ec:	69ab      	ldr	r3, [r5, #24]
 80113ee:	3b01      	subs	r3, #1
 80113f0:	61ab      	str	r3, [r5, #24]
 80113f2:	692b      	ldr	r3, [r5, #16]
 80113f4:	440b      	add	r3, r1
 80113f6:	68e9      	ldr	r1, [r5, #12]
 80113f8:	428b      	cmp	r3, r1
 80113fa:	612b      	str	r3, [r5, #16]
 80113fc:	db15      	blt.n	801142a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80113fe:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011402:	3201      	adds	r2, #1
 8011404:	1a5b      	subs	r3, r3, r1
 8011406:	ee76 6a26 	vadd.f32	s13, s12, s13
 801140a:	602a      	str	r2, [r5, #0]
 801140c:	612b      	str	r3, [r5, #16]
 801140e:	edc5 6a07 	vstr	s13, [r5, #28]
 8011412:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011416:	ee36 7a87 	vadd.f32	s14, s13, s14
 801141a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801141e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011426:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801142a:	3f01      	subs	r7, #1
 801142c:	e757      	b.n	80112de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801142e:	ad39      	add	r5, sp, #228	; 0xe4
 8011430:	ac19      	add	r4, sp, #100	; 0x64
 8011432:	e72d      	b.n	8011290 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011434:	4613      	mov	r3, r2
 8011436:	e744      	b.n	80112c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011438:	4613      	mov	r3, r2
 801143a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801143c:	469e      	mov	lr, r3
 801143e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8011442:	461f      	mov	r7, r3
 8011444:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011448:	f04f 0900 	mov.w	r9, #0
 801144c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8011450:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011454:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8011458:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801145c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8011460:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8011462:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8011466:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801146a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801146e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8011472:	960e      	str	r6, [sp, #56]	; 0x38
 8011474:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8011478:	2f00      	cmp	r7, #0
 801147a:	d146      	bne.n	801150a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801147c:	449c      	add	ip, r3
 801147e:	1ad7      	subs	r7, r2, r3
 8011480:	f1b9 0f00 	cmp.w	r9, #0
 8011484:	d009      	beq.n	801149a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011486:	9039      	str	r0, [sp, #228]	; 0xe4
 8011488:	913d      	str	r1, [sp, #244]	; 0xf4
 801148a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801148e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011492:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8011496:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801149a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801149c:	f04f 0800 	mov.w	r8, #0
 80114a0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80114a4:	910e      	str	r1, [sp, #56]	; 0x38
 80114a6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80114aa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80114ae:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80114b2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80114b6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80114ba:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80114be:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80114c2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80114c6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80114ca:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80114ce:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80114d2:	f1be 0f00 	cmp.w	lr, #0
 80114d6:	d030      	beq.n	801153a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80114d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80114da:	4450      	add	r0, sl
 80114dc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80114e0:	4431      	add	r1, r6
 80114e2:	ee37 7a04 	vadd.f32	s14, s14, s8
 80114e6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80114ea:	4549      	cmp	r1, r9
 80114ec:	db08      	blt.n	8011500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80114ee:	ee77 7a85 	vadd.f32	s15, s15, s10
 80114f2:	3001      	adds	r0, #1
 80114f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80114f8:	eba1 0109 	sub.w	r1, r1, r9
 80114fc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011500:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011504:	f04f 0801 	mov.w	r8, #1
 8011508:	e7e3      	b.n	80114d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801150a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801150c:	4450      	add	r0, sl
 801150e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011512:	4431      	add	r1, r6
 8011514:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011518:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801151c:	4541      	cmp	r1, r8
 801151e:	db08      	blt.n	8011532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011520:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011524:	3001      	adds	r0, #1
 8011526:	ee37 7a25 	vadd.f32	s14, s14, s11
 801152a:	eba1 0108 	sub.w	r1, r1, r8
 801152e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011532:	3f01      	subs	r7, #1
 8011534:	f04f 0901 	mov.w	r9, #1
 8011538:	e79e      	b.n	8011478 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801153a:	449c      	add	ip, r3
 801153c:	1aff      	subs	r7, r7, r3
 801153e:	f1b8 0f00 	cmp.w	r8, #0
 8011542:	d009      	beq.n	8011558 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011544:	9019      	str	r0, [sp, #100]	; 0x64
 8011546:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801154a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801154e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011552:	911d      	str	r1, [sp, #116]	; 0x74
 8011554:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011558:	1ad2      	subs	r2, r2, r3
 801155a:	e6b5      	b.n	80112c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801155c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	b923      	cbnz	r3, 801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011562:	4b04      	ldr	r3, [pc, #16]	; (8011574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	6803      	ldr	r3, [r0, #0]
 8011568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156a:	4798      	blx	r3
 801156c:	b05b      	add	sp, #364	; 0x16c
 801156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011572:	bf00      	nop
 8011574:	2400f4a4 	.word	0x2400f4a4

08011578 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	2500      	movs	r5, #0
 801157e:	9805      	ldr	r0, [sp, #20]
 8011580:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8011584:	6061      	str	r1, [r4, #4]
 8011586:	8263      	strh	r3, [r4, #18]
 8011588:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801158c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011590:	8025      	strh	r5, [r4, #0]
 8011592:	7221      	strb	r1, [r4, #8]
 8011594:	7266      	strb	r6, [r4, #9]
 8011596:	60e0      	str	r0, [r4, #12]
 8011598:	8222      	strh	r2, [r4, #16]
 801159a:	82a3      	strh	r3, [r4, #20]
 801159c:	82e5      	strh	r5, [r4, #22]
 801159e:	8325      	strh	r5, [r4, #24]
 80115a0:	8365      	strh	r5, [r4, #26]
 80115a2:	83a5      	strh	r5, [r4, #28]
 80115a4:	83e5      	strh	r5, [r4, #30]
 80115a6:	8425      	strh	r5, [r4, #32]
 80115a8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80115ac:	b32e      	cbz	r6, 80115fa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80115ae:	6803      	ldr	r3, [r0, #0]
 80115b0:	695b      	ldr	r3, [r3, #20]
 80115b2:	4798      	blx	r3
 80115b4:	4606      	mov	r6, r0
 80115b6:	b300      	cbz	r0, 80115fa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80115b8:	68e0      	ldr	r0, [r4, #12]
 80115ba:	4631      	mov	r1, r6
 80115bc:	6803      	ldr	r3, [r0, #0]
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	4798      	blx	r3
 80115c2:	4605      	mov	r5, r0
 80115c4:	b1c8      	cbz	r0, 80115fa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80115c6:	7b43      	ldrb	r3, [r0, #13]
 80115c8:	7a82      	ldrb	r2, [r0, #10]
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115d0:	4313      	orrs	r3, r2
 80115d2:	8423      	strh	r3, [r4, #32]
 80115d4:	7a63      	ldrb	r3, [r4, #9]
 80115d6:	2b06      	cmp	r3, #6
 80115d8:	d10f      	bne.n	80115fa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80115da:	68e0      	ldr	r0, [r4, #12]
 80115dc:	462a      	mov	r2, r5
 80115de:	4631      	mov	r1, r6
 80115e0:	6803      	ldr	r3, [r0, #0]
 80115e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e4:	4798      	blx	r3
 80115e6:	7b6b      	ldrb	r3, [r5, #13]
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80115ee:	7aab      	ldrb	r3, [r5, #10]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	4418      	add	r0, r3
 80115f4:	8c23      	ldrh	r3, [r4, #32]
 80115f6:	4418      	add	r0, r3
 80115f8:	8420      	strh	r0, [r4, #32]
 80115fa:	4620      	mov	r0, r4
 80115fc:	bd70      	pop	{r4, r5, r6, pc}

080115fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80115fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011602:	2400      	movs	r4, #0
 8011604:	b085      	sub	sp, #20
 8011606:	4681      	mov	r9, r0
 8011608:	4688      	mov	r8, r1
 801160a:	4692      	mov	sl, r2
 801160c:	469b      	mov	fp, r3
 801160e:	4627      	mov	r7, r4
 8011610:	4625      	mov	r5, r4
 8011612:	4626      	mov	r6, r4
 8011614:	4554      	cmp	r4, sl
 8011616:	da2a      	bge.n	801166e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011618:	2300      	movs	r3, #0
 801161a:	9303      	str	r3, [sp, #12]
 801161c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011620:	429d      	cmp	r5, r3
 8011622:	d004      	beq.n	801162e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8011624:	f242 030b 	movw	r3, #8203	; 0x200b
 8011628:	429d      	cmp	r5, r3
 801162a:	bf18      	it	ne
 801162c:	462f      	movne	r7, r5
 801162e:	ab03      	add	r3, sp, #12
 8011630:	4642      	mov	r2, r8
 8011632:	4659      	mov	r1, fp
 8011634:	4648      	mov	r0, r9
 8011636:	f002 ffa3 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801163a:	4605      	mov	r5, r0
 801163c:	b1b8      	cbz	r0, 801166e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801163e:	280a      	cmp	r0, #10
 8011640:	d015      	beq.n	801166e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011642:	9a03      	ldr	r2, [sp, #12]
 8011644:	b18a      	cbz	r2, 801166a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8011646:	7b50      	ldrb	r0, [r2, #13]
 8011648:	4639      	mov	r1, r7
 801164a:	7a93      	ldrb	r3, [r2, #10]
 801164c:	0040      	lsls	r0, r0, #1
 801164e:	8895      	ldrh	r5, [r2, #4]
 8011650:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011654:	4303      	orrs	r3, r0
 8011656:	4640      	mov	r0, r8
 8011658:	9301      	str	r3, [sp, #4]
 801165a:	f8d8 3000 	ldr.w	r3, [r8]
 801165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011660:	4798      	blx	r3
 8011662:	9b01      	ldr	r3, [sp, #4]
 8011664:	4418      	add	r0, r3
 8011666:	4406      	add	r6, r0
 8011668:	b2b6      	uxth	r6, r6
 801166a:	3401      	adds	r4, #1
 801166c:	e7d2      	b.n	8011614 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801166e:	4630      	mov	r0, r6
 8011670:	b005      	add	sp, #20
 8011672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011676 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8011676:	2a02      	cmp	r2, #2
 8011678:	b530      	push	{r4, r5, lr}
 801167a:	d011      	beq.n	80116a0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801167c:	2a03      	cmp	r2, #3
 801167e:	d01c      	beq.n	80116ba <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8011680:	2a01      	cmp	r2, #1
 8011682:	d10c      	bne.n	801169e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011684:	888b      	ldrh	r3, [r1, #4]
 8011686:	8801      	ldrh	r1, [r0, #0]
 8011688:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801168c:	1a5b      	subs	r3, r3, r1
 801168e:	8844      	ldrh	r4, [r0, #2]
 8011690:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011694:	1a9b      	subs	r3, r3, r2
 8011696:	8004      	strh	r4, [r0, #0]
 8011698:	8081      	strh	r1, [r0, #4]
 801169a:	8043      	strh	r3, [r0, #2]
 801169c:	80c2      	strh	r2, [r0, #6]
 801169e:	bd30      	pop	{r4, r5, pc}
 80116a0:	88cb      	ldrh	r3, [r1, #6]
 80116a2:	8842      	ldrh	r2, [r0, #2]
 80116a4:	1a9b      	subs	r3, r3, r2
 80116a6:	88c2      	ldrh	r2, [r0, #6]
 80116a8:	1a9b      	subs	r3, r3, r2
 80116aa:	888a      	ldrh	r2, [r1, #4]
 80116ac:	8801      	ldrh	r1, [r0, #0]
 80116ae:	8043      	strh	r3, [r0, #2]
 80116b0:	1a52      	subs	r2, r2, r1
 80116b2:	8881      	ldrh	r1, [r0, #4]
 80116b4:	1a52      	subs	r2, r2, r1
 80116b6:	8002      	strh	r2, [r0, #0]
 80116b8:	e7f1      	b.n	801169e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80116ba:	88cb      	ldrh	r3, [r1, #6]
 80116bc:	8841      	ldrh	r1, [r0, #2]
 80116be:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80116c2:	1a5b      	subs	r3, r3, r1
 80116c4:	f9b0 5000 	ldrsh.w	r5, [r0]
 80116c8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80116cc:	1a9b      	subs	r3, r3, r2
 80116ce:	8045      	strh	r5, [r0, #2]
 80116d0:	8082      	strh	r2, [r0, #4]
 80116d2:	8003      	strh	r3, [r0, #0]
 80116d4:	80c4      	strh	r4, [r0, #6]
 80116d6:	e7e2      	b.n	801169e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080116d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	b09f      	sub	sp, #124	; 0x7c
 80116de:	9116      	str	r1, [sp, #88]	; 0x58
 80116e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80116e2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80116e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80116e6:	8809      	ldrh	r1, [r1, #0]
 80116e8:	889b      	ldrh	r3, [r3, #4]
 80116ea:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80116ee:	440b      	add	r3, r1
 80116f0:	9212      	str	r2, [sp, #72]	; 0x48
 80116f2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80116f6:	b21b      	sxth	r3, r3
 80116f8:	9011      	str	r0, [sp, #68]	; 0x44
 80116fa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80116fe:	9310      	str	r3, [sp, #64]	; 0x40
 8011700:	f8d8 3000 	ldr.w	r3, [r8]
 8011704:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8011708:	7b19      	ldrb	r1, [r3, #12]
 801170a:	7adb      	ldrb	r3, [r3, #11]
 801170c:	9114      	str	r1, [sp, #80]	; 0x50
 801170e:	9315      	str	r3, [sp, #84]	; 0x54
 8011710:	2a00      	cmp	r2, #0
 8011712:	d06a      	beq.n	80117ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011714:	f898 3010 	ldrb.w	r3, [r8, #16]
 8011718:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801171a:	2b06      	cmp	r3, #6
 801171c:	bf14      	ite	ne
 801171e:	2301      	movne	r3, #1
 8011720:	2302      	moveq	r3, #2
 8011722:	4413      	add	r3, r2
 8011724:	f04f 0900 	mov.w	r9, #0
 8011728:	930f      	str	r3, [sp, #60]	; 0x3c
 801172a:	464c      	mov	r4, r9
 801172c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011730:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8011734:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8011738:	4293      	cmp	r3, r2
 801173a:	f280 808f 	bge.w	801185c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801173e:	2300      	movs	r3, #0
 8011740:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8011744:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8011748:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801174c:	429c      	cmp	r4, r3
 801174e:	d006      	beq.n	801175e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8011750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011752:	f242 020b 	movw	r2, #8203	; 0x200b
 8011756:	4294      	cmp	r4, r2
 8011758:	bf18      	it	ne
 801175a:	4623      	movne	r3, r4
 801175c:	930d      	str	r3, [sp, #52]	; 0x34
 801175e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011760:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011762:	f8d8 2000 	ldr.w	r2, [r8]
 8011766:	428b      	cmp	r3, r1
 8011768:	db41      	blt.n	80117ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801176a:	6813      	ldr	r3, [r2, #0]
 801176c:	4610      	mov	r0, r2
 801176e:	695b      	ldr	r3, [r3, #20]
 8011770:	4798      	blx	r3
 8011772:	4604      	mov	r4, r0
 8011774:	f8d8 0000 	ldr.w	r0, [r8]
 8011778:	aa1d      	add	r2, sp, #116	; 0x74
 801177a:	4621      	mov	r1, r4
 801177c:	6803      	ldr	r3, [r0, #0]
 801177e:	689d      	ldr	r5, [r3, #8]
 8011780:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011784:	47a8      	blx	r5
 8011786:	901c      	str	r0, [sp, #112]	; 0x70
 8011788:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801178c:	429c      	cmp	r4, r3
 801178e:	f000 80ec 	beq.w	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011792:	f242 030b 	movw	r3, #8203	; 0x200b
 8011796:	429c      	cmp	r4, r3
 8011798:	f000 80e7 	beq.w	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801179c:	2c00      	cmp	r4, #0
 801179e:	f000 80f9 	beq.w	8011994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80117a2:	2c0a      	cmp	r4, #10
 80117a4:	d060      	beq.n	8011868 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80117a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80117a8:	b36a      	cbz	r2, 8011806 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80117aa:	8894      	ldrh	r4, [r2, #4]
 80117ac:	f1bb 0f00 	cmp.w	fp, #0
 80117b0:	d03b      	beq.n	801182a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80117b2:	f892 900d 	ldrb.w	r9, [r2, #13]
 80117b6:	f1bb 0f01 	cmp.w	fp, #1
 80117ba:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80117be:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80117c2:	f892 900a 	ldrb.w	r9, [r2, #10]
 80117c6:	ea49 0903 	orr.w	r9, r9, r3
 80117ca:	d134      	bne.n	8011836 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80117cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117ce:	eba6 0609 	sub.w	r6, r6, r9
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d14f      	bne.n	8011876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80117d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80117d8:	eb09 0306 	add.w	r3, r9, r6
 80117dc:	4413      	add	r3, r2
 80117de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80117e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80117e4:	4293      	cmp	r3, r2
 80117e6:	da51      	bge.n	801188c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80117e8:	e038      	b.n	801185c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80117ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80117ec:	e79a      	b.n	8011724 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80117ee:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80117f2:	4659      	mov	r1, fp
 80117f4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80117f6:	9301      	str	r3, [sp, #4]
 80117f8:	ab1d      	add	r3, sp, #116	; 0x74
 80117fa:	9300      	str	r3, [sp, #0]
 80117fc:	ab1c      	add	r3, sp, #112	; 0x70
 80117fe:	f002 ff08 	bl	8014612 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011802:	4604      	mov	r4, r0
 8011804:	e7c0      	b.n	8011788 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8011806:	f8d8 0000 	ldr.w	r0, [r8]
 801180a:	6803      	ldr	r3, [r0, #0]
 801180c:	691b      	ldr	r3, [r3, #16]
 801180e:	4798      	blx	r3
 8011810:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011814:	4298      	cmp	r0, r3
 8011816:	f000 80a8 	beq.w	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801181a:	f242 030b 	movw	r3, #8203	; 0x200b
 801181e:	4298      	cmp	r0, r3
 8011820:	f000 80a3 	beq.w	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011824:	f1bb 0f00 	cmp.w	fp, #0
 8011828:	d100      	bne.n	801182c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801182a:	444e      	add	r6, r9
 801182c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801182e:	2a00      	cmp	r2, #0
 8011830:	d1bf      	bne.n	80117b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011832:	4691      	mov	r9, r2
 8011834:	e099      	b.n	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 80ad 	beq.w	8011998 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801183e:	f1bb 0f00 	cmp.w	fp, #0
 8011842:	d118      	bne.n	8011876 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8011844:	f8d8 0000 	ldr.w	r0, [r8]
 8011848:	990d      	ldr	r1, [sp, #52]	; 0x34
 801184a:	6803      	ldr	r3, [r0, #0]
 801184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801184e:	4798      	blx	r3
 8011850:	4406      	add	r6, r0
 8011852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011856:	1af3      	subs	r3, r6, r3
 8011858:	4293      	cmp	r3, r2
 801185a:	dd17      	ble.n	801188c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801185c:	2c00      	cmp	r4, #0
 801185e:	f000 8099 	beq.w	8011994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8011862:	2c0a      	cmp	r4, #10
 8011864:	f040 8087 	bne.w	8011976 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8011868:	240a      	movs	r4, #10
 801186a:	fab4 f084 	clz	r0, r4
 801186e:	0940      	lsrs	r0, r0, #5
 8011870:	b01f      	add	sp, #124	; 0x7c
 8011872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011876:	f8d8 0000 	ldr.w	r0, [r8]
 801187a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801187c:	6803      	ldr	r3, [r0, #0]
 801187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011880:	4798      	blx	r3
 8011882:	f1bb 0f01 	cmp.w	fp, #1
 8011886:	eba6 0600 	sub.w	r6, r6, r0
 801188a:	d0a4      	beq.n	80117d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801188c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801188e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011890:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011894:	f9b3 7000 	ldrsh.w	r7, [r3]
 8011898:	7b43      	ldrb	r3, [r0, #13]
 801189a:	4431      	add	r1, r6
 801189c:	015b      	lsls	r3, r3, #5
 801189e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80118a2:	7983      	ldrb	r3, [r0, #6]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	440b      	add	r3, r1
 80118a8:	42bb      	cmp	r3, r7
 80118aa:	db5e      	blt.n	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80118ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80118ae:	4299      	cmp	r1, r3
 80118b0:	da5b      	bge.n	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80118b2:	f8d8 0000 	ldr.w	r0, [r8]
 80118b6:	42b7      	cmp	r7, r6
 80118b8:	6803      	ldr	r3, [r0, #0]
 80118ba:	bfcc      	ite	gt
 80118bc:	1bbf      	subgt	r7, r7, r6
 80118be:	2700      	movle	r7, #0
 80118c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c2:	bfc8      	it	gt
 80118c4:	b2bf      	uxthgt	r7, r7
 80118c6:	4798      	blx	r3
 80118c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80118ca:	7b5a      	ldrb	r2, [r3, #13]
 80118cc:	00d1      	lsls	r1, r2, #3
 80118ce:	f401 7580 	and.w	r5, r1, #256	; 0x100
 80118d2:	7a19      	ldrb	r1, [r3, #8]
 80118d4:	4329      	orrs	r1, r5
 80118d6:	0655      	lsls	r5, r2, #25
 80118d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80118da:	bf48      	it	mi
 80118dc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80118e0:	4405      	add	r5, r0
 80118e2:	bf48      	it	mi
 80118e4:	b209      	sxthmi	r1, r1
 80118e6:	1a6d      	subs	r5, r5, r1
 80118e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80118ea:	b2ad      	uxth	r5, r5
 80118ec:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80118f0:	fa0f fa85 	sxth.w	sl, r5
 80118f4:	4551      	cmp	r1, sl
 80118f6:	dd3c      	ble.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80118f8:	0112      	lsls	r2, r2, #4
 80118fa:	79d8      	ldrb	r0, [r3, #7]
 80118fc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011900:	4302      	orrs	r2, r0
 8011902:	4492      	add	sl, r2
 8011904:	4551      	cmp	r1, sl
 8011906:	dc30      	bgt.n	801196a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011908:	1b4d      	subs	r5, r1, r5
 801190a:	468a      	mov	sl, r1
 801190c:	b22d      	sxth	r5, r5
 801190e:	9319      	str	r3, [sp, #100]	; 0x64
 8011910:	b2ad      	uxth	r5, r5
 8011912:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011914:	f8d8 0000 	ldr.w	r0, [r8]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	6801      	ldr	r1, [r0, #0]
 801191c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801191e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011920:	9313      	str	r3, [sp, #76]	; 0x4c
 8011922:	9218      	str	r2, [sp, #96]	; 0x60
 8011924:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011926:	4788      	blx	r1
 8011928:	f898 1006 	ldrb.w	r1, [r8, #6]
 801192c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801192e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011930:	f898 100e 	ldrb.w	r1, [r8, #14]
 8011934:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011936:	910a      	str	r1, [sp, #40]	; 0x28
 8011938:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801193c:	9109      	str	r1, [sp, #36]	; 0x24
 801193e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011942:	9305      	str	r3, [sp, #20]
 8011944:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011946:	9206      	str	r2, [sp, #24]
 8011948:	9304      	str	r3, [sp, #16]
 801194a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801194c:	f8cd a004 	str.w	sl, [sp, #4]
 8011950:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8011954:	4437      	add	r7, r6
 8011956:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011958:	b23f      	sxth	r7, r7
 801195a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801195e:	9700      	str	r7, [sp, #0]
 8011960:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	47a8      	blx	r5
 801196a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801196c:	3301      	adds	r3, #1
 801196e:	930e      	str	r3, [sp, #56]	; 0x38
 8011970:	e6e0      	b.n	8011734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8011972:	2500      	movs	r5, #0
 8011974:	e7cb      	b.n	801190e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8011976:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011978:	3501      	adds	r5, #1
 801197a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801197c:	429d      	cmp	r5, r3
 801197e:	f6bf af74 	bge.w	801186a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011982:	4659      	mov	r1, fp
 8011984:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011986:	f7f1 fa81 	bl	8002e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801198a:	4604      	mov	r4, r0
 801198c:	b110      	cbz	r0, 8011994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801198e:	280a      	cmp	r0, #10
 8011990:	d1f2      	bne.n	8011978 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8011992:	e769      	b.n	8011868 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8011994:	2400      	movs	r4, #0
 8011996:	e768      	b.n	801186a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011998:	f1bb 0f00 	cmp.w	fp, #0
 801199c:	f43f af59 	beq.w	8011852 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80119a0:	e774      	b.n	801188c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080119a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80119a2:	b530      	push	{r4, r5, lr}
 80119a4:	8ac4      	ldrh	r4, [r0, #22]
 80119a6:	8b45      	ldrh	r5, [r0, #26]
 80119a8:	8343      	strh	r3, [r0, #26]
 80119aa:	442c      	add	r4, r5
 80119ac:	1ae4      	subs	r4, r4, r3
 80119ae:	8b83      	ldrh	r3, [r0, #28]
 80119b0:	82c4      	strh	r4, [r0, #22]
 80119b2:	8b04      	ldrh	r4, [r0, #24]
 80119b4:	4422      	add	r2, r4
 80119b6:	440c      	add	r4, r1
 80119b8:	1a59      	subs	r1, r3, r1
 80119ba:	83c2      	strh	r2, [r0, #30]
 80119bc:	8304      	strh	r4, [r0, #24]
 80119be:	8381      	strh	r1, [r0, #28]
 80119c0:	bd30      	pop	{r4, r5, pc}

080119c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80119c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c6:	4604      	mov	r4, r0
 80119c8:	8a47      	ldrh	r7, [r0, #18]
 80119ca:	68c0      	ldr	r0, [r0, #12]
 80119cc:	b085      	sub	sp, #20
 80119ce:	6803      	ldr	r3, [r0, #0]
 80119d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d2:	4798      	blx	r3
 80119d4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80119d8:	7a63      	ldrb	r3, [r4, #9]
 80119da:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80119de:	3b01      	subs	r3, #1
 80119e0:	42b7      	cmp	r7, r6
 80119e2:	bfac      	ite	ge
 80119e4:	f04f 0900 	movge.w	r9, #0
 80119e8:	f04f 0901 	movlt.w	r9, #1
 80119ec:	2b05      	cmp	r3, #5
 80119ee:	d804      	bhi.n	80119fa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80119f0:	e8df f003 	tbb	[pc, r3]
 80119f4:	470f0854 	.word	0x470f0854
 80119f8:	4c4c      	.short	0x4c4c
 80119fa:	2500      	movs	r5, #0
 80119fc:	46a9      	mov	r9, r5
 80119fe:	462e      	mov	r6, r5
 8011a00:	462f      	mov	r7, r5
 8011a02:	e00e      	b.n	8011a22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011a04:	42b7      	cmp	r7, r6
 8011a06:	f04f 0500 	mov.w	r5, #0
 8011a0a:	bfb4      	ite	lt
 8011a0c:	2600      	movlt	r6, #0
 8011a0e:	2601      	movge	r6, #1
 8011a10:	e7f6      	b.n	8011a00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011a12:	42b7      	cmp	r7, r6
 8011a14:	464d      	mov	r5, r9
 8011a16:	f04f 0900 	mov.w	r9, #0
 8011a1a:	bfb4      	ite	lt
 8011a1c:	2600      	movlt	r6, #0
 8011a1e:	2601      	movge	r6, #1
 8011a20:	464f      	mov	r7, r9
 8011a22:	f04f 0800 	mov.w	r8, #0
 8011a26:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011a2a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8011a2e:	f8cd 8004 	str.w	r8, [sp, #4]
 8011a32:	2300      	movs	r3, #0
 8011a34:	9303      	str	r3, [sp, #12]
 8011a36:	8823      	ldrh	r3, [r4, #0]
 8011a38:	2b20      	cmp	r3, #32
 8011a3a:	d033      	beq.n	8011aa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8011a3c:	f242 010b 	movw	r1, #8203	; 0x200b
 8011a40:	1a5a      	subs	r2, r3, r1
 8011a42:	f1d2 0a00 	rsbs	sl, r2, #0
 8011a46:	eb4a 0a02 	adc.w	sl, sl, r2
 8011a4a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d008      	beq.n	8011a64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011a52:	428b      	cmp	r3, r1
 8011a54:	9a01      	ldr	r2, [sp, #4]
 8011a56:	bf0e      	itee	eq
 8011a58:	f04f 0a01 	moveq.w	sl, #1
 8011a5c:	461a      	movne	r2, r3
 8011a5e:	f04f 0a00 	movne.w	sl, #0
 8011a62:	9201      	str	r2, [sp, #4]
 8011a64:	ab03      	add	r3, sp, #12
 8011a66:	68e2      	ldr	r2, [r4, #12]
 8011a68:	7a21      	ldrb	r1, [r4, #8]
 8011a6a:	6860      	ldr	r0, [r4, #4]
 8011a6c:	f002 fd88 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011a70:	8020      	strh	r0, [r4, #0]
 8011a72:	b9d8      	cbnz	r0, 8011aac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8011a74:	8ba2      	ldrh	r2, [r4, #28]
 8011a76:	2300      	movs	r3, #0
 8011a78:	4611      	mov	r1, r2
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	f7ff ff91 	bl	80119a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011a80:	e06e      	b.n	8011b60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011a82:	2500      	movs	r5, #0
 8011a84:	2701      	movs	r7, #1
 8011a86:	46a9      	mov	r9, r5
 8011a88:	462e      	mov	r6, r5
 8011a8a:	e7ca      	b.n	8011a22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011a8c:	42b7      	cmp	r7, r6
 8011a8e:	f04f 0500 	mov.w	r5, #0
 8011a92:	bfb4      	ite	lt
 8011a94:	2700      	movlt	r7, #0
 8011a96:	2701      	movge	r7, #1
 8011a98:	462e      	mov	r6, r5
 8011a9a:	e7c2      	b.n	8011a22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	2601      	movs	r6, #1
 8011aa0:	46a9      	mov	r9, r5
 8011aa2:	e7ad      	b.n	8011a00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	f04f 0a01 	mov.w	sl, #1
 8011aaa:	e7db      	b.n	8011a64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011aac:	8b63      	ldrh	r3, [r4, #26]
 8011aae:	280a      	cmp	r0, #10
 8011ab0:	f103 0301 	add.w	r3, r3, #1
 8011ab4:	8363      	strh	r3, [r4, #26]
 8011ab6:	d0dd      	beq.n	8011a74 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8011ab8:	9a03      	ldr	r2, [sp, #12]
 8011aba:	bb62      	cbnz	r2, 8011b16 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8011abc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011ac0:	4298      	cmp	r0, r3
 8011ac2:	d003      	beq.n	8011acc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011ac4:	f242 030b 	movw	r3, #8203	; 0x200b
 8011ac8:	4298      	cmp	r0, r3
 8011aca:	d1b2      	bne.n	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011acc:	8823      	ldrh	r3, [r4, #0]
 8011ace:	8ba1      	ldrh	r1, [r4, #28]
 8011ad0:	2b20      	cmp	r3, #32
 8011ad2:	d003      	beq.n	8011adc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8011ad4:	f242 000b 	movw	r0, #8203	; 0x200b
 8011ad8:	4283      	cmp	r3, r0
 8011ada:	d131      	bne.n	8011b40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8011adc:	f1ba 0f00 	cmp.w	sl, #0
 8011ae0:	bf0a      	itet	eq
 8011ae2:	4688      	moveq	r8, r1
 8011ae4:	4650      	movne	r0, sl
 8011ae6:	2001      	moveq	r0, #1
 8011ae8:	440a      	add	r2, r1
 8011aea:	8b23      	ldrh	r3, [r4, #24]
 8011aec:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8011af0:	b292      	uxth	r2, r2
 8011af2:	83a2      	strh	r2, [r4, #28]
 8011af4:	4413      	add	r3, r2
 8011af6:	f1b9 0f00 	cmp.w	r9, #0
 8011afa:	d102      	bne.n	8011b02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8011afc:	2d00      	cmp	r5, #0
 8011afe:	d042      	beq.n	8011b86 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8011b00:	b300      	cbz	r0, 8011b44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8011b02:	8c21      	ldrh	r1, [r4, #32]
 8011b04:	4419      	add	r1, r3
 8011b06:	458c      	cmp	ip, r1
 8011b08:	da37      	bge.n	8011b7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011b0a:	8ae1      	ldrh	r1, [r4, #22]
 8011b0c:	2900      	cmp	r1, #0
 8011b0e:	d034      	beq.n	8011b7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011b10:	4563      	cmp	r3, ip
 8011b12:	dd8e      	ble.n	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b14:	e01d      	b.n	8011b52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8011b16:	8893      	ldrh	r3, [r2, #4]
 8011b18:	9901      	ldr	r1, [sp, #4]
 8011b1a:	8023      	strh	r3, [r4, #0]
 8011b1c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8011b20:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011b24:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8011b28:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8011b2c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011b30:	68e0      	ldr	r0, [r4, #12]
 8011b32:	6803      	ldr	r3, [r0, #0]
 8011b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b36:	4798      	blx	r3
 8011b38:	eb0b 0200 	add.w	r2, fp, r0
 8011b3c:	b292      	uxth	r2, r2
 8011b3e:	e7c5      	b.n	8011acc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011b40:	2000      	movs	r0, #0
 8011b42:	e7d1      	b.n	8011ae8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8011b44:	4563      	cmp	r3, ip
 8011b46:	f77f af74 	ble.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b4a:	8ae3      	ldrh	r3, [r4, #22]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	f43f af70 	beq.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b52:	2301      	movs	r3, #1
 8011b54:	8c22      	ldrh	r2, [r4, #32]
 8011b56:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8011b5a:	8be3      	ldrh	r3, [r4, #30]
 8011b5c:	4413      	add	r3, r2
 8011b5e:	83e3      	strh	r3, [r4, #30]
 8011b60:	68e0      	ldr	r0, [r4, #12]
 8011b62:	6803      	ldr	r3, [r0, #0]
 8011b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b66:	4798      	blx	r3
 8011b68:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8011b6c:	4418      	add	r0, r3
 8011b6e:	8a63      	ldrh	r3, [r4, #18]
 8011b70:	1a18      	subs	r0, r3, r0
 8011b72:	8260      	strh	r0, [r4, #18]
 8011b74:	b005      	add	sp, #20
 8011b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7ff ff0f 	bl	80119a2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011b84:	e755      	b.n	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b86:	4563      	cmp	r3, ip
 8011b88:	dd14      	ble.n	8011bb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8011b8a:	b117      	cbz	r7, 8011b92 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	460a      	mov	r2, r1
 8011b90:	e772      	b.n	8011a78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8011b92:	2e00      	cmp	r6, #0
 8011b94:	f43f af4d 	beq.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	f47f af4a 	bne.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011b9e:	f1ba 0f00 	cmp.w	sl, #0
 8011ba2:	d002      	beq.n	8011baa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	4642      	mov	r2, r8
 8011ba8:	e767      	b.n	8011a7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8011baa:	8ae3      	ldrh	r3, [r4, #22]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f43f af40 	beq.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011bb2:	e7d5      	b.n	8011b60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	f47f af3c 	bne.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011bba:	f1ba 0f00 	cmp.w	sl, #0
 8011bbe:	f43f af38 	beq.w	8011a32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	4642      	mov	r2, r8
 8011bc6:	e7da      	b.n	8011b7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08011bc8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8011bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bca:	4605      	mov	r5, r0
 8011bcc:	b08f      	sub	sp, #60	; 0x3c
 8011bce:	4617      	mov	r7, r2
 8011bd0:	461c      	mov	r4, r3
 8011bd2:	460e      	mov	r6, r1
 8011bd4:	b1d1      	cbz	r1, 8011c0c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4620      	mov	r0, r4
 8011bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bdc:	4798      	blx	r3
 8011bde:	4240      	negs	r0, r0
 8011be0:	9603      	str	r6, [sp, #12]
 8011be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011be6:	b200      	sxth	r0, r0
 8011be8:	9700      	str	r7, [sp, #0]
 8011bea:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8011bee:	4629      	mov	r1, r5
 8011bf0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8011bf4:	2401      	movs	r4, #1
 8011bf6:	a805      	add	r0, sp, #20
 8011bf8:	f7ff fcbe 	bl	8011578 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011bfc:	a805      	add	r0, sp, #20
 8011bfe:	f7ff fee0 	bl	80119c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011c02:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011c06:	b163      	cbz	r3, 8011c22 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8011c08:	3401      	adds	r4, #1
 8011c0a:	e7f7      	b.n	8011bfc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8011c0c:	2401      	movs	r4, #1
 8011c0e:	f002 fd83 	bl	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011c12:	280a      	cmp	r0, #10
 8011c14:	4628      	mov	r0, r5
 8011c16:	bf08      	it	eq
 8011c18:	3401      	addeq	r4, #1
 8011c1a:	f002 fd7d 	bl	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d1f7      	bne.n	8011c12 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8011c22:	b2a0      	uxth	r0, r4
 8011c24:	b00f      	add	sp, #60	; 0x3c
 8011c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c2c:	b0e3      	sub	sp, #396	; 0x18c
 8011c2e:	461c      	mov	r4, r3
 8011c30:	4683      	mov	fp, r0
 8011c32:	4688      	mov	r8, r1
 8011c34:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f000 810f 	beq.w	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f000 810b 	beq.w	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011c44:	7ba3      	ldrb	r3, [r4, #14]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f000 8107 	beq.w	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011c4c:	ad0a      	add	r5, sp, #40	; 0x28
 8011c4e:	6810      	ldr	r0, [r2, #0]
 8011c50:	6851      	ldr	r1, [r2, #4]
 8011c52:	462b      	mov	r3, r5
 8011c54:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8011c58:	c303      	stmia	r3!, {r0, r1}
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011c60:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011c64:	4628      	mov	r0, r5
 8011c66:	910c      	str	r1, [sp, #48]	; 0x30
 8011c68:	a90c      	add	r1, sp, #48	; 0x30
 8011c6a:	79a2      	ldrb	r2, [r4, #6]
 8011c6c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011c70:	f7ff fd01 	bl	8011676 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011c74:	a90c      	add	r1, sp, #48	; 0x30
 8011c76:	79a2      	ldrb	r2, [r4, #6]
 8011c78:	4608      	mov	r0, r1
 8011c7a:	f7ff fcfc 	bl	8011676 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011c7e:	a817      	add	r0, sp, #92	; 0x5c
 8011c80:	f002 f936 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 8011c84:	6820      	ldr	r0, [r4, #0]
 8011c86:	6803      	ldr	r3, [r0, #0]
 8011c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c8a:	4798      	blx	r3
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	6803      	ldr	r3, [r0, #0]
 8011c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c94:	4798      	blx	r3
 8011c96:	4633      	mov	r3, r6
 8011c98:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8011c9a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8011c9c:	9000      	str	r0, [sp, #0]
 8011c9e:	a817      	add	r0, sp, #92	; 0x5c
 8011ca0:	f002 f979 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011ca4:	6820      	ldr	r0, [r4, #0]
 8011ca6:	f894 a004 	ldrb.w	sl, [r4, #4]
 8011caa:	6803      	ldr	r3, [r0, #0]
 8011cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cae:	4798      	blx	r3
 8011cb0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	4607      	mov	r7, r0
 8011cb8:	4406      	add	r6, r0
 8011cba:	a830      	add	r0, sp, #192	; 0xc0
 8011cbc:	f893 9009 	ldrb.w	r9, [r3, #9]
 8011cc0:	f002 f916 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 8011cc4:	7c23      	ldrb	r3, [r4, #16]
 8011cc6:	b17b      	cbz	r3, 8011ce8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8011cc8:	6820      	ldr	r0, [r4, #0]
 8011cca:	6803      	ldr	r3, [r0, #0]
 8011ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cce:	4798      	blx	r3
 8011cd0:	9009      	str	r0, [sp, #36]	; 0x24
 8011cd2:	6820      	ldr	r0, [r4, #0]
 8011cd4:	6802      	ldr	r2, [r0, #0]
 8011cd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8011cd8:	4790      	blx	r2
 8011cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cdc:	9000      	str	r0, [sp, #0]
 8011cde:	a830      	add	r0, sp, #192	; 0xc0
 8011ce0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8011ce2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8011ce4:	f002 f957 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011ce8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011cec:	a80e      	add	r0, sp, #56	; 0x38
 8011cee:	7be2      	ldrb	r2, [r4, #15]
 8011cf0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011cf4:	1a8a      	subs	r2, r1, r2
 8011cf6:	7c21      	ldrb	r1, [r4, #16]
 8011cf8:	9103      	str	r1, [sp, #12]
 8011cfa:	b292      	uxth	r2, r2
 8011cfc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8011d00:	9102      	str	r1, [sp, #8]
 8011d02:	6821      	ldr	r1, [r4, #0]
 8011d04:	9101      	str	r1, [sp, #4]
 8011d06:	7961      	ldrb	r1, [r4, #5]
 8011d08:	9100      	str	r1, [sp, #0]
 8011d0a:	a930      	add	r1, sp, #192	; 0xc0
 8011d0c:	f7ff fc34 	bl	8011578 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011d10:	2e00      	cmp	r6, #0
 8011d12:	dc5b      	bgt.n	8011dcc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8011d14:	af17      	add	r7, sp, #92	; 0x5c
 8011d16:	f04f 0900 	mov.w	r9, #0
 8011d1a:	7c23      	ldrb	r3, [r4, #16]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 80ae 	beq.w	8011e7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011d22:	a80e      	add	r0, sp, #56	; 0x38
 8011d24:	f7ff fe4d 	bl	80119c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011d28:	f1ba 0f00 	cmp.w	sl, #0
 8011d2c:	f000 80a2 	beq.w	8011e74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8011d30:	7c23      	ldrb	r3, [r4, #16]
 8011d32:	2264      	movs	r2, #100	; 0x64
 8011d34:	4639      	mov	r1, r7
 8011d36:	a849      	add	r0, sp, #292	; 0x124
 8011d38:	9309      	str	r3, [sp, #36]	; 0x24
 8011d3a:	f00c faa1 	bl	801e280 <memcpy>
 8011d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f000 80a4 	beq.w	8011e8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8011d46:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8011d4a:	7922      	ldrb	r2, [r4, #4]
 8011d4c:	2a01      	cmp	r2, #1
 8011d4e:	f040 8087 	bne.w	8011e60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011d52:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8011d56:	1ac0      	subs	r0, r0, r3
 8011d58:	2302      	movs	r3, #2
 8011d5a:	fb90 f0f3 	sdiv	r0, r0, r3
 8011d5e:	b200      	sxth	r0, r0
 8011d60:	7c23      	ldrb	r3, [r4, #16]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	f000 8088 	beq.w	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8011d68:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8011d6c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8011d70:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011d74:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8011d78:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	4410      	add	r0, r2
 8011d80:	4642      	mov	r2, r8
 8011d82:	b200      	sxth	r0, r0
 8011d84:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8011d88:	9000      	str	r0, [sp, #0]
 8011d8a:	4658      	mov	r0, fp
 8011d8c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8011d90:	f7ff fca2 	bl	80116d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d160      	bne.n	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011d98:	b2b2      	uxth	r2, r6
 8011d9a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8011d9e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8011da2:	4413      	add	r3, r2
 8011da4:	1a8a      	subs	r2, r1, r2
 8011da6:	b21b      	sxth	r3, r3
 8011da8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8011dac:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8011db0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011db4:	2a00      	cmp	r2, #0
 8011db6:	d150      	bne.n	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011db8:	6822      	ldr	r2, [r4, #0]
 8011dba:	8869      	ldrh	r1, [r5, #2]
 8011dbc:	7a12      	ldrb	r2, [r2, #8]
 8011dbe:	1a9b      	subs	r3, r3, r2
 8011dc0:	88ea      	ldrh	r2, [r5, #6]
 8011dc2:	440a      	add	r2, r1
 8011dc4:	b212      	sxth	r2, r2
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	dda7      	ble.n	8011d1a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8011dca:	e046      	b.n	8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011dcc:	7c23      	ldrb	r3, [r4, #16]
 8011dce:	444f      	add	r7, r9
 8011dd0:	b1c3      	cbz	r3, 8011e04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8011dd2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8011dd6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011dda:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011dde:	443b      	add	r3, r7
 8011de0:	4293      	cmp	r3, r2
 8011de2:	da97      	bge.n	8011d14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011de4:	a80e      	add	r0, sp, #56	; 0x38
 8011de6:	f7ff fdec 	bl	80119c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011dea:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8011dee:	3b01      	subs	r3, #1
 8011df0:	b29b      	uxth	r3, r3
 8011df2:	454b      	cmp	r3, r9
 8011df4:	9309      	str	r3, [sp, #36]	; 0x24
 8011df6:	d021      	beq.n	8011e3c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8011df8:	7961      	ldrb	r1, [r4, #5]
 8011dfa:	a817      	add	r0, sp, #92	; 0x5c
 8011dfc:	f7f1 f846 	bl	8002e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e02:	e7f4      	b.n	8011dee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8011e04:	fa1f f986 	uxth.w	r9, r6
 8011e08:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011e0c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011e10:	443b      	add	r3, r7
 8011e12:	4293      	cmp	r3, r2
 8011e14:	f6bf af7e 	bge.w	8011d14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011e18:	a817      	add	r0, sp, #92	; 0x5c
 8011e1a:	f002 fc7d 	bl	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e1e:	b1e0      	cbz	r0, 8011e5a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011e20:	280a      	cmp	r0, #10
 8011e22:	d1f1      	bne.n	8011e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011e24:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8011e28:	444b      	add	r3, r9
 8011e2a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011e2e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011e32:	eba3 0309 	sub.w	r3, r3, r9
 8011e36:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011e3a:	e7e5      	b.n	8011e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011e3c:	b2b3      	uxth	r3, r6
 8011e3e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011e42:	441a      	add	r2, r3
 8011e44:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011e48:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8011e4c:	1ad3      	subs	r3, r2, r3
 8011e4e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011e52:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1bd      	bne.n	8011dd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8011e5a:	b063      	add	sp, #396	; 0x18c
 8011e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e60:	2a02      	cmp	r2, #2
 8011e62:	d105      	bne.n	8011e70 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8011e64:	7be2      	ldrb	r2, [r4, #15]
 8011e66:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8011e6a:	1a80      	subs	r0, r0, r2
 8011e6c:	1ac0      	subs	r0, r0, r3
 8011e6e:	e776      	b.n	8011d5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8011e70:	2000      	movs	r0, #0
 8011e72:	e775      	b.n	8011d60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8011e74:	7be0      	ldrb	r0, [r4, #15]
 8011e76:	e773      	b.n	8011d60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8011e78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e7c:	e776      	b.n	8011d6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8011e7e:	f1ba 0f00 	cmp.w	sl, #0
 8011e82:	d0f7      	beq.n	8011e74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8011e84:	2264      	movs	r2, #100	; 0x64
 8011e86:	4639      	mov	r1, r7
 8011e88:	a849      	add	r0, sp, #292	; 0x124
 8011e8a:	f00c f9f9 	bl	801e280 <memcpy>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011e94:	6821      	ldr	r1, [r4, #0]
 8011e96:	a849      	add	r0, sp, #292	; 0x124
 8011e98:	f7ff fbb1 	bl	80115fe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8011e9c:	b203      	sxth	r3, r0
 8011e9e:	e754      	b.n	8011d4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08011ea0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011ea0:	2b03      	cmp	r3, #3
 8011ea2:	d818      	bhi.n	8011ed6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011ea4:	e8df f003 	tbb	[pc, r3]
 8011ea8:	130d0602 	.word	0x130d0602
 8011eac:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011eb0:	1850      	adds	r0, r2, r1
 8011eb2:	4770      	bx	lr
 8011eb4:	8803      	ldrh	r3, [r0, #0]
 8011eb6:	8880      	ldrh	r0, [r0, #4]
 8011eb8:	4418      	add	r0, r3
 8011eba:	b200      	sxth	r0, r0
 8011ebc:	1a80      	subs	r0, r0, r2
 8011ebe:	3801      	subs	r0, #1
 8011ec0:	4770      	bx	lr
 8011ec2:	8803      	ldrh	r3, [r0, #0]
 8011ec4:	8880      	ldrh	r0, [r0, #4]
 8011ec6:	4418      	add	r0, r3
 8011ec8:	b200      	sxth	r0, r0
 8011eca:	1a40      	subs	r0, r0, r1
 8011ecc:	e7f7      	b.n	8011ebe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011ece:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011ed2:	4410      	add	r0, r2
 8011ed4:	4770      	bx	lr
 8011ed6:	2000      	movs	r0, #0
 8011ed8:	4770      	bx	lr

08011eda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011eda:	2b03      	cmp	r3, #3
 8011edc:	d817      	bhi.n	8011f0e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011ede:	e8df f003 	tbb	[pc, r3]
 8011ee2:	0602      	.short	0x0602
 8011ee4:	1009      	.short	0x1009
 8011ee6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011eea:	1850      	adds	r0, r2, r1
 8011eec:	4770      	bx	lr
 8011eee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011ef2:	e7fa      	b.n	8011eea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011ef4:	8843      	ldrh	r3, [r0, #2]
 8011ef6:	88c0      	ldrh	r0, [r0, #6]
 8011ef8:	4418      	add	r0, r3
 8011efa:	b200      	sxth	r0, r0
 8011efc:	1a80      	subs	r0, r0, r2
 8011efe:	3801      	subs	r0, #1
 8011f00:	4770      	bx	lr
 8011f02:	8843      	ldrh	r3, [r0, #2]
 8011f04:	88c0      	ldrh	r0, [r0, #6]
 8011f06:	4418      	add	r0, r3
 8011f08:	b200      	sxth	r0, r0
 8011f0a:	1a40      	subs	r0, r0, r1
 8011f0c:	e7f7      	b.n	8011efe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	4770      	bx	lr
	...

08011f14 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011f14:	4b01      	ldr	r3, [pc, #4]	; (8011f1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	4770      	bx	lr
 8011f1c:	2400f4b4 	.word	0x2400f4b4

08011f20 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011f20:	4603      	mov	r3, r0
 8011f22:	b1c8      	cbz	r0, 8011f58 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011f24:	0c02      	lsrs	r2, r0, #16
 8011f26:	0412      	lsls	r2, r2, #16
 8011f28:	b9a2      	cbnz	r2, 8011f54 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8011f2a:	0403      	lsls	r3, r0, #16
 8011f2c:	2010      	movs	r0, #16
 8011f2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011f32:	bf04      	itt	eq
 8011f34:	021b      	lsleq	r3, r3, #8
 8011f36:	3008      	addeq	r0, #8
 8011f38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011f3c:	bf04      	itt	eq
 8011f3e:	011b      	lsleq	r3, r3, #4
 8011f40:	3004      	addeq	r0, #4
 8011f42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011f46:	bf04      	itt	eq
 8011f48:	009b      	lsleq	r3, r3, #2
 8011f4a:	3002      	addeq	r0, #2
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	db04      	blt.n	8011f5a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011f50:	3001      	adds	r0, #1
 8011f52:	4770      	bx	lr
 8011f54:	2000      	movs	r0, #0
 8011f56:	e7ea      	b.n	8011f2e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011f58:	2020      	movs	r0, #32
 8011f5a:	4770      	bx	lr

08011f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f60:	b087      	sub	sp, #28
 8011f62:	4681      	mov	r9, r0
 8011f64:	4698      	mov	r8, r3
 8011f66:	4610      	mov	r0, r2
 8011f68:	460d      	mov	r5, r1
 8011f6a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8011f6e:	b981      	cbnz	r1, 8011f92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8011f70:	b14b      	cbz	r3, 8011f86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8011f72:	460b      	mov	r3, r1
 8011f74:	464a      	mov	r2, r9
 8011f76:	4641      	mov	r1, r8
 8011f78:	e9cd 4700 	strd	r4, r7, [sp]
 8011f7c:	f7ff ffee 	bl	8011f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011f80:	b007      	add	sp, #28
 8011f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f86:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011f8e:	603b      	str	r3, [r7, #0]
 8011f90:	e7f6      	b.n	8011f80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011f92:	fa32 fa01 	lsrs.w	sl, r2, r1
 8011f96:	d107      	bne.n	8011fa8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8011f98:	fb09 f602 	mul.w	r6, r9, r2
 8011f9c:	fbb6 f0f4 	udiv	r0, r6, r4
 8011fa0:	fb04 6610 	mls	r6, r4, r0, r6
 8011fa4:	603e      	str	r6, [r7, #0]
 8011fa6:	e7eb      	b.n	8011f80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011fa8:	2601      	movs	r6, #1
 8011faa:	fa09 fb01 	lsl.w	fp, r9, r1
 8011fae:	408e      	lsls	r6, r1
 8011fb0:	fbbb f3f4 	udiv	r3, fp, r4
 8011fb4:	3e01      	subs	r6, #1
 8011fb6:	9302      	str	r3, [sp, #8]
 8011fb8:	fb0a f303 	mul.w	r3, sl, r3
 8011fbc:	4016      	ands	r6, r2
 8011fbe:	9303      	str	r3, [sp, #12]
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	f7ff ffad 	bl	8011f20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011fc6:	464a      	mov	r2, r9
 8011fc8:	460b      	mov	r3, r1
 8011fca:	4601      	mov	r1, r0
 8011fcc:	4630      	mov	r0, r6
 8011fce:	e9cd 4700 	strd	r4, r7, [sp]
 8011fd2:	f7ff ffc3 	bl	8011f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011fd6:	9b02      	ldr	r3, [sp, #8]
 8011fd8:	4606      	mov	r6, r0
 8011fda:	eb05 0108 	add.w	r1, r5, r8
 8011fde:	fb04 bb13 	mls	fp, r4, r3, fp
 8011fe2:	4658      	mov	r0, fp
 8011fe4:	f7ff ff9c 	bl	8011f20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011fe8:	ab05      	add	r3, sp, #20
 8011fea:	465a      	mov	r2, fp
 8011fec:	e9cd 4300 	strd	r4, r3, [sp]
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	4650      	mov	r0, sl
 8011ff4:	f7ff ffb2 	bl	8011f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011ff8:	6839      	ldr	r1, [r7, #0]
 8011ffa:	9a05      	ldr	r2, [sp, #20]
 8011ffc:	9b03      	ldr	r3, [sp, #12]
 8011ffe:	4411      	add	r1, r2
 8012000:	fbb1 f2f4 	udiv	r2, r1, r4
 8012004:	18d3      	adds	r3, r2, r3
 8012006:	fb04 1412 	mls	r4, r4, r2, r1
 801200a:	441e      	add	r6, r3
 801200c:	603c      	str	r4, [r7, #0]
 801200e:	4430      	add	r0, r6
 8012010:	e7b6      	b.n	8011f80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08012012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012012:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012016:	b085      	sub	sp, #20
 8012018:	f1b0 0900 	subs.w	r9, r0, #0
 801201c:	461d      	mov	r5, r3
 801201e:	4617      	mov	r7, r2
 8012020:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012022:	bfbb      	ittet	lt
 8012024:	f1c9 0900 	rsblt	r9, r9, #0
 8012028:	f04f 36ff 	movlt.w	r6, #4294967295
 801202c:	2601      	movge	r6, #1
 801202e:	6823      	ldrlt	r3, [r4, #0]
 8012030:	bfbc      	itt	lt
 8012032:	425b      	neglt	r3, r3
 8012034:	6023      	strlt	r3, [r4, #0]
 8012036:	2a00      	cmp	r2, #0
 8012038:	da04      	bge.n	8012044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801203a:	6823      	ldr	r3, [r4, #0]
 801203c:	4257      	negs	r7, r2
 801203e:	4276      	negs	r6, r6
 8012040:	425b      	negs	r3, r3
 8012042:	6023      	str	r3, [r4, #0]
 8012044:	2d00      	cmp	r5, #0
 8012046:	4638      	mov	r0, r7
 8012048:	bfba      	itte	lt
 801204a:	426d      	neglt	r5, r5
 801204c:	f04f 38ff 	movlt.w	r8, #4294967295
 8012050:	f04f 0801 	movge.w	r8, #1
 8012054:	f7ff ff64 	bl	8011f20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012058:	ab03      	add	r3, sp, #12
 801205a:	463a      	mov	r2, r7
 801205c:	e9cd 5300 	strd	r5, r3, [sp]
 8012060:	4603      	mov	r3, r0
 8012062:	4648      	mov	r0, r9
 8012064:	f7ff ff7a 	bl	8011f5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012068:	6823      	ldr	r3, [r4, #0]
 801206a:	9a03      	ldr	r2, [sp, #12]
 801206c:	4546      	cmp	r6, r8
 801206e:	441a      	add	r2, r3
 8012070:	fb92 f3f5 	sdiv	r3, r2, r5
 8012074:	4418      	add	r0, r3
 8012076:	fb05 2313 	mls	r3, r5, r3, r2
 801207a:	bf18      	it	ne
 801207c:	4240      	negne	r0, r0
 801207e:	1c72      	adds	r2, r6, #1
 8012080:	6023      	str	r3, [r4, #0]
 8012082:	d105      	bne.n	8012090 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012084:	2b00      	cmp	r3, #0
 8012086:	f1c3 0200 	rsb	r2, r3, #0
 801208a:	db0b      	blt.n	80120a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801208c:	6022      	str	r2, [r4, #0]
 801208e:	e006      	b.n	801209e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012090:	2e01      	cmp	r6, #1
 8012092:	d104      	bne.n	801209e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012094:	2b00      	cmp	r3, #0
 8012096:	da02      	bge.n	801209e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012098:	442b      	add	r3, r5
 801209a:	3801      	subs	r0, #1
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	b005      	add	sp, #20
 80120a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a4:	3801      	subs	r0, #1
 80120a6:	1b52      	subs	r2, r2, r5
 80120a8:	e7f0      	b.n	801208c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080120ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80120ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80120b0:	4c1c      	ldr	r4, [pc, #112]	; (8012124 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80120b2:	4605      	mov	r5, r0
 80120b4:	6807      	ldr	r7, [r0, #0]
 80120b6:	69a3      	ldr	r3, [r4, #24]
 80120b8:	b92b      	cbnz	r3, 80120c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80120ba:	6840      	ldr	r0, [r0, #4]
 80120bc:	e9c5 7000 	strd	r7, r0, [r5]
 80120c0:	b004      	add	sp, #16
 80120c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c6:	f04f 0802 	mov.w	r8, #2
 80120ca:	68a2      	ldr	r2, [r4, #8]
 80120cc:	ae04      	add	r6, sp, #16
 80120ce:	6820      	ldr	r0, [r4, #0]
 80120d0:	fb93 f1f8 	sdiv	r1, r3, r8
 80120d4:	440a      	add	r2, r1
 80120d6:	69e1      	ldr	r1, [r4, #28]
 80120d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80120dc:	463a      	mov	r2, r7
 80120de:	9600      	str	r6, [sp, #0]
 80120e0:	f7ff ff97 	bl	8012012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80120e4:	69a3      	ldr	r3, [r4, #24]
 80120e6:	4607      	mov	r7, r0
 80120e8:	686a      	ldr	r2, [r5, #4]
 80120ea:	6a21      	ldr	r1, [r4, #32]
 80120ec:	9600      	str	r6, [sp, #0]
 80120ee:	6860      	ldr	r0, [r4, #4]
 80120f0:	f7ff ff8f 	bl	8012012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80120f4:	69a3      	ldr	r3, [r4, #24]
 80120f6:	6962      	ldr	r2, [r4, #20]
 80120f8:	4407      	add	r7, r0
 80120fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120fc:	9600      	str	r6, [sp, #0]
 80120fe:	68e0      	ldr	r0, [r4, #12]
 8012100:	fb93 f8f8 	sdiv	r8, r3, r8
 8012104:	4442      	add	r2, r8
 8012106:	9203      	str	r2, [sp, #12]
 8012108:	682a      	ldr	r2, [r5, #0]
 801210a:	f7ff ff82 	bl	8012012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801210e:	4680      	mov	r8, r0
 8012110:	9600      	str	r6, [sp, #0]
 8012112:	69a3      	ldr	r3, [r4, #24]
 8012114:	686a      	ldr	r2, [r5, #4]
 8012116:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012118:	6920      	ldr	r0, [r4, #16]
 801211a:	f7ff ff7a 	bl	8012012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801211e:	4440      	add	r0, r8
 8012120:	e7cc      	b.n	80120bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012122:	bf00      	nop
 8012124:	2400f4b8 	.word	0x2400f4b8

08012128 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012128:	4b07      	ldr	r3, [pc, #28]	; (8012148 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d109      	bne.n	8012144 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012130:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012134:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012138:	8003      	strh	r3, [r0, #0]
 801213a:	4b04      	ldr	r3, [pc, #16]	; (801214c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801213c:	881b      	ldrh	r3, [r3, #0]
 801213e:	3b01      	subs	r3, #1
 8012140:	1a9b      	subs	r3, r3, r2
 8012142:	800b      	strh	r3, [r1, #0]
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	2400f49c 	.word	0x2400f49c
 801214c:	2400f498 	.word	0x2400f498

08012150 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012150:	4b07      	ldr	r3, [pc, #28]	; (8012170 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012152:	b510      	push	{r4, lr}
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	2b01      	cmp	r3, #1
 8012158:	d108      	bne.n	801216c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801215a:	4b06      	ldr	r3, [pc, #24]	; (8012174 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801215c:	880c      	ldrh	r4, [r1, #0]
 801215e:	881b      	ldrh	r3, [r3, #0]
 8012160:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012164:	3b01      	subs	r3, #1
 8012166:	1b1b      	subs	r3, r3, r4
 8012168:	8003      	strh	r3, [r0, #0]
 801216a:	800a      	strh	r2, [r1, #0]
 801216c:	bd10      	pop	{r4, pc}
 801216e:	bf00      	nop
 8012170:	2400f49c 	.word	0x2400f49c
 8012174:	2400f498 	.word	0x2400f498

08012178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012178:	4b0a      	ldr	r3, [pc, #40]	; (80121a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801217a:	b510      	push	{r4, lr}
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d10e      	bne.n	80121a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012182:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012186:	8843      	ldrh	r3, [r0, #2]
 8012188:	f9b0 4000 	ldrsh.w	r4, [r0]
 801218c:	18ca      	adds	r2, r1, r3
 801218e:	4b06      	ldr	r3, [pc, #24]	; (80121a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012190:	8044      	strh	r4, [r0, #2]
 8012192:	881b      	ldrh	r3, [r3, #0]
 8012194:	1a9b      	subs	r3, r3, r2
 8012196:	8003      	strh	r3, [r0, #0]
 8012198:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801219c:	8081      	strh	r1, [r0, #4]
 801219e:	80c3      	strh	r3, [r0, #6]
 80121a0:	bd10      	pop	{r4, pc}
 80121a2:	bf00      	nop
 80121a4:	2400f49c 	.word	0x2400f49c
 80121a8:	2400f498 	.word	0x2400f498

080121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80121ac:	4b08      	ldr	r3, [pc, #32]	; (80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d10c      	bne.n	80121ce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80121b4:	8803      	ldrh	r3, [r0, #0]
 80121b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80121ba:	8842      	ldrh	r2, [r0, #2]
 80121bc:	8002      	strh	r2, [r0, #0]
 80121be:	185a      	adds	r2, r3, r1
 80121c0:	4b04      	ldr	r3, [pc, #16]	; (80121d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80121c2:	881b      	ldrh	r3, [r3, #0]
 80121c4:	1a9b      	subs	r3, r3, r2
 80121c6:	8043      	strh	r3, [r0, #2]
 80121c8:	88c3      	ldrh	r3, [r0, #6]
 80121ca:	80c1      	strh	r1, [r0, #6]
 80121cc:	8083      	strh	r3, [r0, #4]
 80121ce:	4770      	bx	lr
 80121d0:	2400f49c 	.word	0x2400f49c
 80121d4:	2400f498 	.word	0x2400f498

080121d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80121d8:	4b07      	ldr	r3, [pc, #28]	; (80121f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80121da:	b510      	push	{r4, lr}
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d108      	bne.n	80121f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80121e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80121e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80121ea:	8003      	strh	r3, [r0, #0]
 80121ec:	8893      	ldrh	r3, [r2, #4]
 80121ee:	3b01      	subs	r3, #1
 80121f0:	1b1b      	subs	r3, r3, r4
 80121f2:	800b      	strh	r3, [r1, #0]
 80121f4:	bd10      	pop	{r4, pc}
 80121f6:	bf00      	nop
 80121f8:	2400f49c 	.word	0x2400f49c

080121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80121fc:	4b0a      	ldr	r3, [pc, #40]	; (8012228 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80121fe:	460a      	mov	r2, r1
 8012200:	b510      	push	{r4, lr}
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d10d      	bne.n	8012224 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012208:	8881      	ldrh	r1, [r0, #4]
 801220a:	8803      	ldrh	r3, [r0, #0]
 801220c:	440b      	add	r3, r1
 801220e:	4601      	mov	r1, r0
 8012210:	3b01      	subs	r3, #1
 8012212:	f821 3b02 	strh.w	r3, [r1], #2
 8012216:	f7ff ffdf 	bl	80121d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801221a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801221e:	88c2      	ldrh	r2, [r0, #6]
 8012220:	80c3      	strh	r3, [r0, #6]
 8012222:	8082      	strh	r2, [r0, #4]
 8012224:	bd10      	pop	{r4, pc}
 8012226:	bf00      	nop
 8012228:	2400f49c 	.word	0x2400f49c

0801222c <_ZN8touchgfx11Application13requestRedrawEv>:
 801222c:	4b06      	ldr	r3, [pc, #24]	; (8012248 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801222e:	2100      	movs	r1, #0
 8012230:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012234:	4b05      	ldr	r3, [pc, #20]	; (801224c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012236:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801223a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801223e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8012242:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8012246:	4770      	bx	lr
 8012248:	2400f498 	.word	0x2400f498
 801224c:	2400f49a 	.word	0x2400f49a

08012250 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012250:	4b03      	ldr	r3, [pc, #12]	; (8012260 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012252:	6818      	ldr	r0, [r3, #0]
 8012254:	b110      	cbz	r0, 801225c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012256:	6803      	ldr	r3, [r0, #0]
 8012258:	699b      	ldr	r3, [r3, #24]
 801225a:	4718      	bx	r3
 801225c:	4770      	bx	lr
 801225e:	bf00      	nop
 8012260:	2400f4e8 	.word	0x2400f4e8

08012264 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012264:	4770      	bx	lr
	...

08012268 <_ZN8touchgfx11Application4drawEv>:
 8012268:	4b09      	ldr	r3, [pc, #36]	; (8012290 <_ZN8touchgfx11Application4drawEv+0x28>)
 801226a:	b507      	push	{r0, r1, r2, lr}
 801226c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012270:	2100      	movs	r1, #0
 8012272:	4b08      	ldr	r3, [pc, #32]	; (8012294 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012274:	9100      	str	r1, [sp, #0]
 8012276:	4669      	mov	r1, sp
 8012278:	f9b3 3000 	ldrsh.w	r3, [r3]
 801227c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012280:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012284:	6803      	ldr	r3, [r0, #0]
 8012286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012288:	4798      	blx	r3
 801228a:	b003      	add	sp, #12
 801228c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012290:	2400f498 	.word	0x2400f498
 8012294:	2400f49a 	.word	0x2400f49a

08012298 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012298:	4b03      	ldr	r3, [pc, #12]	; (80122a8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801229a:	6818      	ldr	r0, [r3, #0]
 801229c:	b110      	cbz	r0, 80122a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801229e:	6803      	ldr	r3, [r0, #0]
 80122a0:	69db      	ldr	r3, [r3, #28]
 80122a2:	4718      	bx	r3
 80122a4:	4770      	bx	lr
 80122a6:	bf00      	nop
 80122a8:	2400f4e8 	.word	0x2400f4e8

080122ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80122ac:	4b03      	ldr	r3, [pc, #12]	; (80122bc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80122ae:	6818      	ldr	r0, [r3, #0]
 80122b0:	b110      	cbz	r0, 80122b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80122b2:	6803      	ldr	r3, [r0, #0]
 80122b4:	6a1b      	ldr	r3, [r3, #32]
 80122b6:	4718      	bx	r3
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop
 80122bc:	2400f4e8 	.word	0x2400f4e8

080122c0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80122c0:	2300      	movs	r3, #0
 80122c2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80122c6:	4770      	bx	lr

080122c8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80122c8:	4b03      	ldr	r3, [pc, #12]	; (80122d8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80122ca:	6818      	ldr	r0, [r3, #0]
 80122cc:	b110      	cbz	r0, 80122d4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80122ce:	6803      	ldr	r3, [r0, #0]
 80122d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d2:	4718      	bx	r3
 80122d4:	4770      	bx	lr
 80122d6:	bf00      	nop
 80122d8:	2400f4e8 	.word	0x2400f4e8

080122dc <_ZN8touchgfx11ApplicationD1Ev>:
 80122dc:	4770      	bx	lr

080122de <_ZN8touchgfx11ApplicationD0Ev>:
 80122de:	b510      	push	{r4, lr}
 80122e0:	4604      	mov	r4, r0
 80122e2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80122e6:	f00b fe2a 	bl	801df3e <_ZdlPvj>
 80122ea:	4620      	mov	r0, r4
 80122ec:	bd10      	pop	{r4, pc}

080122ee <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80122ee:	b510      	push	{r4, lr}
 80122f0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80122f4:	888a      	ldrh	r2, [r1, #4]
 80122f6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80122fa:	4422      	add	r2, r4
 80122fc:	b212      	sxth	r2, r2
 80122fe:	4293      	cmp	r3, r2
 8012300:	da15      	bge.n	801232e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012302:	8882      	ldrh	r2, [r0, #4]
 8012304:	4413      	add	r3, r2
 8012306:	b21b      	sxth	r3, r3
 8012308:	429c      	cmp	r4, r3
 801230a:	da10      	bge.n	801232e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801230c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012310:	88c9      	ldrh	r1, [r1, #6]
 8012312:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012316:	4419      	add	r1, r3
 8012318:	b209      	sxth	r1, r1
 801231a:	428a      	cmp	r2, r1
 801231c:	da07      	bge.n	801232e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801231e:	88c0      	ldrh	r0, [r0, #6]
 8012320:	4410      	add	r0, r2
 8012322:	b200      	sxth	r0, r0
 8012324:	4283      	cmp	r3, r0
 8012326:	bfac      	ite	ge
 8012328:	2000      	movge	r0, #0
 801232a:	2001      	movlt	r0, #1
 801232c:	bd10      	pop	{r4, pc}
 801232e:	2000      	movs	r0, #0
 8012330:	e7fc      	b.n	801232c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012332 <_ZN8touchgfx4Rect10restrictToEss>:
 8012332:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	b510      	push	{r4, lr}
 801233a:	da04      	bge.n	8012346 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801233c:	8884      	ldrh	r4, [r0, #4]
 801233e:	4423      	add	r3, r4
 8012340:	8083      	strh	r3, [r0, #4]
 8012342:	2300      	movs	r3, #0
 8012344:	8003      	strh	r3, [r0, #0]
 8012346:	f9b0 4000 	ldrsh.w	r4, [r0]
 801234a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801234e:	1b09      	subs	r1, r1, r4
 8012350:	428b      	cmp	r3, r1
 8012352:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012356:	bfc8      	it	gt
 8012358:	8081      	strhgt	r1, [r0, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	da04      	bge.n	8012368 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801235e:	88c1      	ldrh	r1, [r0, #6]
 8012360:	440b      	add	r3, r1
 8012362:	80c3      	strh	r3, [r0, #6]
 8012364:	2300      	movs	r3, #0
 8012366:	8043      	strh	r3, [r0, #2]
 8012368:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801236c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012370:	1a52      	subs	r2, r2, r1
 8012372:	4293      	cmp	r3, r2
 8012374:	bfc8      	it	gt
 8012376:	80c2      	strhgt	r2, [r0, #6]
 8012378:	bd10      	pop	{r4, pc}
	...

0801237c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801237c:	4b10      	ldr	r3, [pc, #64]	; (80123c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801237e:	b510      	push	{r4, lr}
 8012380:	460c      	mov	r4, r1
 8012382:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012386:	4b0f      	ldr	r3, [pc, #60]	; (80123c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012388:	4620      	mov	r0, r4
 801238a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801238e:	f7ff ffd0 	bl	8012332 <_ZN8touchgfx4Rect10restrictToEss>
 8012392:	4b0d      	ldr	r3, [pc, #52]	; (80123c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8012394:	6818      	ldr	r0, [r3, #0]
 8012396:	b190      	cbz	r0, 80123be <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012398:	6803      	ldr	r3, [r0, #0]
 801239a:	4621      	mov	r1, r4
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	4798      	blx	r3
 80123a0:	4b0a      	ldr	r3, [pc, #40]	; (80123cc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80123a2:	6818      	ldr	r0, [r3, #0]
 80123a4:	b118      	cbz	r0, 80123ae <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80123a6:	6803      	ldr	r3, [r0, #0]
 80123a8:	4621      	mov	r1, r4
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	4798      	blx	r3
 80123ae:	4b08      	ldr	r3, [pc, #32]	; (80123d0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80123b0:	4621      	mov	r1, r4
 80123b2:	6818      	ldr	r0, [r3, #0]
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123ba:	69db      	ldr	r3, [r3, #28]
 80123bc:	4718      	bx	r3
 80123be:	bd10      	pop	{r4, pc}
 80123c0:	2400f49a 	.word	0x2400f49a
 80123c4:	2400f498 	.word	0x2400f498
 80123c8:	2400f4e8 	.word	0x2400f4e8
 80123cc:	2400f4e4 	.word	0x2400f4e4
 80123d0:	2400f4a4 	.word	0x2400f4a4

080123d4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d6:	4606      	mov	r6, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	460f      	mov	r7, r1
 80123dc:	f7fa fc9d 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 80123e0:	b9e8      	cbnz	r0, 801241e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80123e2:	f9b7 5000 	ldrsh.w	r5, [r7]
 80123e6:	f9b6 4000 	ldrsh.w	r4, [r6]
 80123ea:	42a5      	cmp	r5, r4
 80123ec:	db17      	blt.n	801241e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80123ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80123f2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	db11      	blt.n	801241e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80123fa:	88b9      	ldrh	r1, [r7, #4]
 80123fc:	440d      	add	r5, r1
 80123fe:	88b1      	ldrh	r1, [r6, #4]
 8012400:	440c      	add	r4, r1
 8012402:	b22d      	sxth	r5, r5
 8012404:	b224      	sxth	r4, r4
 8012406:	42a5      	cmp	r5, r4
 8012408:	dc09      	bgt.n	801241e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801240a:	88f8      	ldrh	r0, [r7, #6]
 801240c:	4410      	add	r0, r2
 801240e:	88f2      	ldrh	r2, [r6, #6]
 8012410:	4413      	add	r3, r2
 8012412:	b200      	sxth	r0, r0
 8012414:	b21b      	sxth	r3, r3
 8012416:	4298      	cmp	r0, r3
 8012418:	bfcc      	ite	gt
 801241a:	2000      	movgt	r0, #0
 801241c:	2001      	movle	r0, #1
 801241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012420 <_ZN8touchgfx11Application11getInstanceEv>:
 8012420:	4b01      	ldr	r3, [pc, #4]	; (8012428 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012422:	6818      	ldr	r0, [r3, #0]
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	2400f4f8 	.word	0x2400f4f8

0801242c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801242c:	2300      	movs	r3, #0
 801242e:	b510      	push	{r4, lr}
 8012430:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8012434:	4604      	mov	r4, r0
 8012436:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801243a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801243e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8012442:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8012446:	429a      	cmp	r2, r3
 8012448:	d90e      	bls.n	8012468 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801244a:	18e2      	adds	r2, r4, r3
 801244c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8012450:	b122      	cbz	r2, 801245c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8012452:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012456:	6803      	ldr	r3, [r0, #0]
 8012458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801245a:	4798      	blx	r3
 801245c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8012460:	3301      	adds	r3, #1
 8012462:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8012466:	e7ea      	b.n	801243e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012468:	bd10      	pop	{r4, pc}

0801246a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801246a:	2300      	movs	r3, #0
 801246c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8012470:	30a4      	adds	r0, #164	; 0xa4
 8012472:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012476:	f802 3b01 	strb.w	r3, [r2], #1
 801247a:	4282      	cmp	r2, r0
 801247c:	d1fb      	bne.n	8012476 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801247e:	4770      	bx	lr

08012480 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	4c0b      	ldr	r4, [pc, #44]	; (80124b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012484:	4605      	mov	r5, r0
 8012486:	460e      	mov	r6, r1
 8012488:	6820      	ldr	r0, [r4, #0]
 801248a:	b110      	cbz	r0, 8012492 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801248c:	6803      	ldr	r3, [r0, #0]
 801248e:	695b      	ldr	r3, [r3, #20]
 8012490:	4798      	blx	r3
 8012492:	1d28      	adds	r0, r5, #4
 8012494:	f7ff ffe9 	bl	801246a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012498:	6026      	str	r6, [r4, #0]
 801249a:	6833      	ldr	r3, [r6, #0]
 801249c:	4630      	mov	r0, r6
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	4798      	blx	r3
 80124a2:	682b      	ldr	r3, [r5, #0]
 80124a4:	4628      	mov	r0, r5
 80124a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124ac:	4718      	bx	r3
 80124ae:	bf00      	nop
 80124b0:	2400f4e8 	.word	0x2400f4e8

080124b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80124b4:	2300      	movs	r3, #0
 80124b6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80124ba:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80124be:	461a      	mov	r2, r3
 80124c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124c2:	461c      	mov	r4, r3
 80124c4:	461d      	mov	r5, r3
 80124c6:	459c      	cmp	ip, r3
 80124c8:	dd1a      	ble.n	8012500 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80124ca:	18c6      	adds	r6, r0, r3
 80124cc:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80124d0:	b16e      	cbz	r6, 80124ee <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d008      	beq.n	80124e8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80124d6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80124da:	fa1f fe82 	uxth.w	lr, r2
 80124de:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80124e2:	1887      	adds	r7, r0, r2
 80124e4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80124e8:	3201      	adds	r2, #1
 80124ea:	3301      	adds	r3, #1
 80124ec:	e7eb      	b.n	80124c6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80124ee:	4299      	cmp	r1, r3
 80124f0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80124f4:	bfa8      	it	ge
 80124f6:	3501      	addge	r5, #1
 80124f8:	429e      	cmp	r6, r3
 80124fa:	bfc8      	it	gt
 80124fc:	3401      	addgt	r4, #1
 80124fe:	e7f4      	b.n	80124ea <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8012500:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8012504:	1b49      	subs	r1, r1, r5
 8012506:	1b1b      	subs	r3, r3, r4
 8012508:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801250c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8012510:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8012514:	4293      	cmp	r3, r2
 8012516:	dd03      	ble.n	8012520 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012518:	3b01      	subs	r3, #1
 801251a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801251e:	e7f7      	b.n	8012510 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012520:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012524 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	4d16      	ldr	r5, [pc, #88]	; (8012580 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012528:	4604      	mov	r4, r0
 801252a:	6828      	ldr	r0, [r5, #0]
 801252c:	b140      	cbz	r0, 8012540 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801252e:	7a03      	ldrb	r3, [r0, #8]
 8012530:	b933      	cbnz	r3, 8012540 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012532:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8012536:	6803      	ldr	r3, [r0, #0]
 8012538:	689b      	ldr	r3, [r3, #8]
 801253a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801253e:	4718      	bx	r3
 8012540:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8012544:	4e0f      	ldr	r6, [pc, #60]	; (8012584 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012546:	b973      	cbnz	r3, 8012566 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012548:	b168      	cbz	r0, 8012566 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801254a:	7a03      	ldrb	r3, [r0, #8]
 801254c:	b15b      	cbz	r3, 8012566 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801254e:	6830      	ldr	r0, [r6, #0]
 8012550:	b110      	cbz	r0, 8012558 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012552:	6803      	ldr	r3, [r0, #0]
 8012554:	691b      	ldr	r3, [r3, #16]
 8012556:	4798      	blx	r3
 8012558:	6828      	ldr	r0, [r5, #0]
 801255a:	6803      	ldr	r3, [r0, #0]
 801255c:	68db      	ldr	r3, [r3, #12]
 801255e:	4798      	blx	r3
 8012560:	2301      	movs	r3, #1
 8012562:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8012566:	3404      	adds	r4, #4
 8012568:	4620      	mov	r0, r4
 801256a:	f7ff ff5f 	bl	801242c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801256e:	4620      	mov	r0, r4
 8012570:	f7ff ffa0 	bl	80124b4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012574:	6830      	ldr	r0, [r6, #0]
 8012576:	b110      	cbz	r0, 801257e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012578:	6803      	ldr	r3, [r0, #0]
 801257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257c:	e7dd      	b.n	801253a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801257e:	bd70      	pop	{r4, r5, r6, pc}
 8012580:	2400f4ec 	.word	0x2400f4ec
 8012584:	2400f4e8 	.word	0x2400f4e8

08012588 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012588:	4603      	mov	r3, r0
 801258a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801258e:	2200      	movs	r2, #0
 8012590:	801a      	strh	r2, [r3, #0]
 8012592:	3308      	adds	r3, #8
 8012594:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012598:	f823 2c04 	strh.w	r2, [r3, #-4]
 801259c:	f823 2c02 	strh.w	r2, [r3, #-2]
 80125a0:	428b      	cmp	r3, r1
 80125a2:	d1f5      	bne.n	8012590 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80125a4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80125a8:	4770      	bx	lr
	...

080125ac <_ZN8touchgfx11ApplicationC1Ev>:
 80125ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ae:	4b1d      	ldr	r3, [pc, #116]	; (8012624 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80125b0:	4606      	mov	r6, r0
 80125b2:	4604      	mov	r4, r0
 80125b4:	2500      	movs	r5, #0
 80125b6:	f846 3b04 	str.w	r3, [r6], #4
 80125ba:	22a8      	movs	r2, #168	; 0xa8
 80125bc:	2100      	movs	r1, #0
 80125be:	4630      	mov	r0, r6
 80125c0:	f00b fe6c 	bl	801e29c <memset>
 80125c4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80125c8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80125cc:	4f16      	ldr	r7, [pc, #88]	; (8012628 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80125ce:	f7ff ffdb 	bl	8012588 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80125d2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80125d6:	f7ff ffd7 	bl	8012588 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80125da:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80125de:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80125e2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 80125e6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80125ea:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80125ee:	490f      	ldr	r1, [pc, #60]	; (801262c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80125f0:	480f      	ldr	r0, [pc, #60]	; (8012630 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80125f2:	f00b f879 	bl	801d6e8 <CRC_Lock>
 80125f6:	4b0f      	ldr	r3, [pc, #60]	; (8012634 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80125f8:	b158      	cbz	r0, 8012612 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80125fa:	801d      	strh	r5, [r3, #0]
 80125fc:	2300      	movs	r3, #0
 80125fe:	4a0e      	ldr	r2, [pc, #56]	; (8012638 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012600:	4630      	mov	r0, r6
 8012602:	6013      	str	r3, [r2, #0]
 8012604:	4a0d      	ldr	r2, [pc, #52]	; (801263c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012606:	603b      	str	r3, [r7, #0]
 8012608:	6013      	str	r3, [r2, #0]
 801260a:	f7ff ff2e 	bl	801246a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801260e:	4620      	mov	r0, r4
 8012610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012616:	2002      	movs	r0, #2
 8012618:	801a      	strh	r2, [r3, #0]
 801261a:	6038      	str	r0, [r7, #0]
 801261c:	f001 faee 	bl	8013bfc <_ZN8touchgfx6Screen4drawEv>
 8012620:	e7ec      	b.n	80125fc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012622:	bf00      	nop
 8012624:	080222f4 	.word	0x080222f4
 8012628:	2400f4e8 	.word	0x2400f4e8
 801262c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012630:	f407a5c2 	.word	0xf407a5c2
 8012634:	24000060 	.word	0x24000060
 8012638:	2400f4f8 	.word	0x2400f4f8
 801263c:	2400f4ec 	.word	0x2400f4ec

08012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012640:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012644:	3b01      	subs	r3, #1
 8012646:	b29b      	uxth	r3, r3
 8012648:	428b      	cmp	r3, r1
 801264a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801264e:	b510      	push	{r4, lr}
 8012650:	d908      	bls.n	8012664 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012652:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012656:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012660:	685a      	ldr	r2, [r3, #4]
 8012662:	6062      	str	r2, [r4, #4]
 8012664:	bd10      	pop	{r4, pc}
	...

08012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801266c:	b08f      	sub	sp, #60	; 0x3c
 801266e:	4b8f      	ldr	r3, [pc, #572]	; (80128ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012670:	4683      	mov	fp, r0
 8012672:	ac0a      	add	r4, sp, #40	; 0x28
 8012674:	e884 0006 	stmia.w	r4, {r1, r2}
 8012678:	f9b3 2000 	ldrsh.w	r2, [r3]
 801267c:	4620      	mov	r0, r4
 801267e:	4b8c      	ldr	r3, [pc, #560]	; (80128b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012680:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012684:	f7ff fe55 	bl	8012332 <_ZN8touchgfx4Rect10restrictToEss>
 8012688:	4620      	mov	r0, r4
 801268a:	f7fa fb46 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 801268e:	2800      	cmp	r0, #0
 8012690:	d16a      	bne.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012692:	9403      	str	r4, [sp, #12]
 8012694:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8012698:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801269c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80126a0:	9301      	str	r3, [sp, #4]
 80126a2:	35a4      	adds	r5, #164	; 0xa4
 80126a4:	b15c      	cbz	r4, 80126be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80126a6:	4629      	mov	r1, r5
 80126a8:	9803      	ldr	r0, [sp, #12]
 80126aa:	f7ff fe93 	bl	80123d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80126ae:	3c01      	subs	r4, #1
 80126b0:	b118      	cbz	r0, 80126ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80126b2:	b2a1      	uxth	r1, r4
 80126b4:	9801      	ldr	r0, [sp, #4]
 80126b6:	f7ff ffc3 	bl	8012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80126ba:	3d08      	subs	r5, #8
 80126bc:	e7f2      	b.n	80126a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80126be:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 80126c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80126c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80126ca:	9302      	str	r3, [sp, #8]
 80126cc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80126d0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 80126d4:	9306      	str	r3, [sp, #24]
 80126d6:	445c      	add	r4, fp
 80126d8:	2500      	movs	r5, #0
 80126da:	4626      	mov	r6, r4
 80126dc:	f8cd 8014 	str.w	r8, [sp, #20]
 80126e0:	462f      	mov	r7, r5
 80126e2:	9b05      	ldr	r3, [sp, #20]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d073      	beq.n	80127d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80126e8:	9903      	ldr	r1, [sp, #12]
 80126ea:	4630      	mov	r0, r6
 80126ec:	f7ff fdff 	bl	80122ee <_ZNK8touchgfx4Rect9intersectERKS0_>
 80126f0:	b350      	cbz	r0, 8012748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80126f2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80126f6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80126fa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80126fe:	45e6      	cmp	lr, ip
 8012700:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012704:	db33      	blt.n	801276e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012706:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801270a:	88b3      	ldrh	r3, [r6, #4]
 801270c:	4472      	add	r2, lr
 801270e:	4463      	add	r3, ip
 8012710:	b212      	sxth	r2, r2
 8012712:	b21b      	sxth	r3, r3
 8012714:	429a      	cmp	r2, r3
 8012716:	dc2a      	bgt.n	801276e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012718:	fa1f f289 	uxth.w	r2, r9
 801271c:	88f3      	ldrh	r3, [r6, #6]
 801271e:	45ca      	cmp	sl, r9
 8012720:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012724:	4413      	add	r3, r2
 8012726:	fa1f fc8a 	uxth.w	ip, sl
 801272a:	b29b      	uxth	r3, r3
 801272c:	fa0f fe83 	sxth.w	lr, r3
 8012730:	db0f      	blt.n	8012752 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012732:	eba3 030c 	sub.w	r3, r3, ip
 8012736:	1ac9      	subs	r1, r1, r3
 8012738:	b209      	sxth	r1, r1
 801273a:	2900      	cmp	r1, #0
 801273c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012740:	dd12      	ble.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012742:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8012746:	4605      	mov	r5, r0
 8012748:	9b05      	ldr	r3, [sp, #20]
 801274a:	3e08      	subs	r6, #8
 801274c:	3b01      	subs	r3, #1
 801274e:	9305      	str	r3, [sp, #20]
 8012750:	e7c7      	b.n	80126e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012752:	4461      	add	r1, ip
 8012754:	b209      	sxth	r1, r1
 8012756:	4571      	cmp	r1, lr
 8012758:	dc38      	bgt.n	80127cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801275a:	eba2 020c 	sub.w	r2, r2, ip
 801275e:	b212      	sxth	r2, r2
 8012760:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8012764:	2a00      	cmp	r2, #0
 8012766:	dcee      	bgt.n	8012746 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012768:	b00f      	add	sp, #60	; 0x3c
 801276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801276e:	45ca      	cmp	sl, r9
 8012770:	db2c      	blt.n	80127cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012772:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8012776:	449a      	add	sl, r3
 8012778:	88f3      	ldrh	r3, [r6, #6]
 801277a:	4499      	add	r9, r3
 801277c:	fa0f fa8a 	sxth.w	sl, sl
 8012780:	fa0f f989 	sxth.w	r9, r9
 8012784:	45ca      	cmp	sl, r9
 8012786:	dc21      	bgt.n	80127cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012788:	fa1f f28c 	uxth.w	r2, ip
 801278c:	88b3      	ldrh	r3, [r6, #4]
 801278e:	45e6      	cmp	lr, ip
 8012790:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012794:	4413      	add	r3, r2
 8012796:	fa1f f98e 	uxth.w	r9, lr
 801279a:	b29b      	uxth	r3, r3
 801279c:	fa0f fa83 	sxth.w	sl, r3
 80127a0:	db0a      	blt.n	80127b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80127a2:	eba3 0309 	sub.w	r3, r3, r9
 80127a6:	1ac9      	subs	r1, r1, r3
 80127a8:	b209      	sxth	r1, r1
 80127aa:	2900      	cmp	r1, #0
 80127ac:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80127b0:	ddda      	ble.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80127b2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80127b6:	e7c6      	b.n	8012746 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80127b8:	4449      	add	r1, r9
 80127ba:	b209      	sxth	r1, r1
 80127bc:	4551      	cmp	r1, sl
 80127be:	dc05      	bgt.n	80127cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80127c0:	eba2 0209 	sub.w	r2, r2, r9
 80127c4:	b212      	sxth	r2, r2
 80127c6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80127ca:	e7cb      	b.n	8012764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80127cc:	4607      	mov	r7, r0
 80127ce:	e7bb      	b.n	8012748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80127d0:	2d00      	cmp	r5, #0
 80127d2:	d181      	bne.n	80126d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80127d4:	2f00      	cmp	r7, #0
 80127d6:	f000 81dd 	beq.w	8012b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80127da:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80127de:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80127e2:	b2b3      	uxth	r3, r6
 80127e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80127e8:	b2b9      	uxth	r1, r7
 80127ea:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 80127ee:	441a      	add	r2, r3
 80127f0:	448a      	add	sl, r1
 80127f2:	9105      	str	r1, [sp, #20]
 80127f4:	b292      	uxth	r2, r2
 80127f6:	fa1f fa8a 	uxth.w	sl, sl
 80127fa:	fa0f f882 	sxth.w	r8, r2
 80127fe:	fa0f f98a 	sxth.w	r9, sl
 8012802:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012806:	9b04      	ldr	r3, [sp, #16]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d053      	beq.n	80128b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801280c:	9903      	ldr	r1, [sp, #12]
 801280e:	4620      	mov	r0, r4
 8012810:	f7ff fd6d 	bl	80122ee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012814:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012818:	b1c0      	cbz	r0, 801284c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801281a:	f9b4 e000 	ldrsh.w	lr, [r4]
 801281e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012822:	4576      	cmp	r6, lr
 8012824:	dc23      	bgt.n	801286e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012826:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801282a:	44f4      	add	ip, lr
 801282c:	fa0f fc8c 	sxth.w	ip, ip
 8012830:	45e0      	cmp	r8, ip
 8012832:	db1c      	blt.n	801286e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012834:	428f      	cmp	r7, r1
 8012836:	fa1f fc81 	uxth.w	ip, r1
 801283a:	88e1      	ldrh	r1, [r4, #6]
 801283c:	dc0d      	bgt.n	801285a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801283e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012842:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012846:	eba1 010c 	sub.w	r1, r1, ip
 801284a:	80e1      	strh	r1, [r4, #6]
 801284c:	4628      	mov	r0, r5
 801284e:	9904      	ldr	r1, [sp, #16]
 8012850:	3c08      	subs	r4, #8
 8012852:	4605      	mov	r5, r0
 8012854:	3901      	subs	r1, #1
 8012856:	9104      	str	r1, [sp, #16]
 8012858:	e7d3      	b.n	8012802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 801285a:	4461      	add	r1, ip
 801285c:	b209      	sxth	r1, r1
 801285e:	4549      	cmp	r1, r9
 8012860:	dcf5      	bgt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012862:	9905      	ldr	r1, [sp, #20]
 8012864:	eba1 0c0c 	sub.w	ip, r1, ip
 8012868:	f8a4 c006 	strh.w	ip, [r4, #6]
 801286c:	e7ee      	b.n	801284c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801286e:	428f      	cmp	r7, r1
 8012870:	dced      	bgt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012872:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012876:	4461      	add	r1, ip
 8012878:	b209      	sxth	r1, r1
 801287a:	4589      	cmp	r9, r1
 801287c:	dbe7      	blt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801287e:	4576      	cmp	r6, lr
 8012880:	fa1f fc8e 	uxth.w	ip, lr
 8012884:	88a1      	ldrh	r1, [r4, #4]
 8012886:	dc07      	bgt.n	8012898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012888:	eba2 0c0c 	sub.w	ip, r2, ip
 801288c:	f8a4 8000 	strh.w	r8, [r4]
 8012890:	eba1 010c 	sub.w	r1, r1, ip
 8012894:	80a1      	strh	r1, [r4, #4]
 8012896:	e7d9      	b.n	801284c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012898:	4461      	add	r1, ip
 801289a:	b209      	sxth	r1, r1
 801289c:	4588      	cmp	r8, r1
 801289e:	dbd6      	blt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80128a0:	eba3 0c0c 	sub.w	ip, r3, ip
 80128a4:	f8a4 c004 	strh.w	ip, [r4, #4]
 80128a8:	e7d0      	b.n	801284c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 80128aa:	bf00      	nop
 80128ac:	2400f49a 	.word	0x2400f49a
 80128b0:	2400f498 	.word	0x2400f498
 80128b4:	2d00      	cmp	r5, #0
 80128b6:	f000 816d 	beq.w	8012b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80128ba:	9b06      	ldr	r3, [sp, #24]
 80128bc:	445b      	add	r3, fp
 80128be:	461c      	mov	r4, r3
 80128c0:	9b02      	ldr	r3, [sp, #8]
 80128c2:	3301      	adds	r3, #1
 80128c4:	f000 8166 	beq.w	8012b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80128c8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80128cc:	9803      	ldr	r0, [sp, #12]
 80128ce:	4629      	mov	r1, r5
 80128d0:	f7ff fd80 	bl	80123d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 80128d4:	b120      	cbz	r0, 80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80128d6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80128da:	9801      	ldr	r0, [sp, #4]
 80128dc:	f7ff feb0 	bl	8012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80128e0:	9903      	ldr	r1, [sp, #12]
 80128e2:	4628      	mov	r0, r5
 80128e4:	f7ff fd03 	bl	80122ee <_ZNK8touchgfx4Rect9intersectERKS0_>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	f000 809c 	beq.w	8012a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80128ee:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 80128f2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80128f6:	fa1f f189 	uxth.w	r1, r9
 80128fa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80128fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012900:	eb01 0c03 	add.w	ip, r1, r3
 8012904:	b283      	uxth	r3, r0
 8012906:	4548      	cmp	r0, r9
 8012908:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801290c:	fa1f fa8c 	uxth.w	sl, ip
 8012910:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8012914:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8012918:	eb03 050c 	add.w	r5, r3, ip
 801291c:	b2ad      	uxth	r5, r5
 801291e:	9505      	str	r5, [sp, #20]
 8012920:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012924:	9504      	str	r5, [sp, #16]
 8012926:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801292a:	f340 8099 	ble.w	8012a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801292e:	1a5b      	subs	r3, r3, r1
 8012930:	4596      	cmp	lr, r2
 8012932:	fa0f f08a 	sxth.w	r0, sl
 8012936:	b29b      	uxth	r3, r3
 8012938:	b21e      	sxth	r6, r3
 801293a:	dd2e      	ble.n	801299a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801293c:	9f02      	ldr	r7, [sp, #8]
 801293e:	fa1f fe8e 	uxth.w	lr, lr
 8012942:	b292      	uxth	r2, r2
 8012944:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8012948:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801294c:	9f04      	ldr	r7, [sp, #16]
 801294e:	ebae 0102 	sub.w	r1, lr, r2
 8012952:	44a6      	add	lr, r4
 8012954:	1a3f      	subs	r7, r7, r0
 8012956:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801295a:	b289      	uxth	r1, r1
 801295c:	4402      	add	r2, r0
 801295e:	fa0f fe8e 	sxth.w	lr, lr
 8012962:	b20d      	sxth	r5, r1
 8012964:	b212      	sxth	r2, r2
 8012966:	436f      	muls	r7, r5
 8012968:	ebae 0202 	sub.w	r2, lr, r2
 801296c:	4372      	muls	r2, r6
 801296e:	4297      	cmp	r7, r2
 8012970:	db09      	blt.n	8012986 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012972:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8012976:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801297a:	449c      	add	ip, r3
 801297c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012980:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8012984:	e686      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012986:	4421      	add	r1, r4
 8012988:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801298c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8012990:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012994:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012998:	e67c      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801299a:	9f04      	ldr	r7, [sp, #16]
 801299c:	42b8      	cmp	r0, r7
 801299e:	da27      	bge.n	80129f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80129a0:	9902      	ldr	r1, [sp, #8]
 80129a2:	1a3f      	subs	r7, r7, r0
 80129a4:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80129a8:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80129ac:	eb05 010e 	add.w	r1, r5, lr
 80129b0:	fa1f f881 	uxth.w	r8, r1
 80129b4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80129b8:	4411      	add	r1, r2
 80129ba:	fa0f f988 	sxth.w	r9, r8
 80129be:	eba2 020e 	sub.w	r2, r2, lr
 80129c2:	eba1 0108 	sub.w	r1, r1, r8
 80129c6:	4372      	muls	r2, r6
 80129c8:	b289      	uxth	r1, r1
 80129ca:	fa0f f881 	sxth.w	r8, r1
 80129ce:	fb08 f707 	mul.w	r7, r8, r7
 80129d2:	42ba      	cmp	r2, r7
 80129d4:	dc06      	bgt.n	80129e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80129d6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80129da:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80129de:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80129e2:	e7ca      	b.n	801297a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80129e4:	4429      	add	r1, r5
 80129e6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80129ea:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80129ee:	e651      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80129f0:	9805      	ldr	r0, [sp, #20]
 80129f2:	2d06      	cmp	r5, #6
 80129f4:	ebaa 0000 	sub.w	r0, sl, r0
 80129f8:	b280      	uxth	r0, r0
 80129fa:	fa0f fe80 	sxth.w	lr, r0
 80129fe:	d817      	bhi.n	8012a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012a00:	9b04      	ldr	r3, [sp, #16]
 8012a02:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8012a06:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8012a0a:	1c6b      	adds	r3, r5, #1
 8012a0c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8012a10:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012a14:	9b01      	ldr	r3, [sp, #4]
 8012a16:	9801      	ldr	r0, [sp, #4]
 8012a18:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012a1c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012a20:	805a      	strh	r2, [r3, #2]
 8012a22:	809e      	strh	r6, [r3, #4]
 8012a24:	80d9      	strh	r1, [r3, #6]
 8012a26:	9b02      	ldr	r3, [sp, #8]
 8012a28:	3c08      	subs	r4, #8
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	9302      	str	r3, [sp, #8]
 8012a2e:	e747      	b.n	80128c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012a30:	9a02      	ldr	r2, [sp, #8]
 8012a32:	45b6      	cmp	lr, r6
 8012a34:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012a38:	db0d      	blt.n	8012a56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012a3a:	449c      	add	ip, r3
 8012a3c:	445a      	add	r2, fp
 8012a3e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8012a42:	fa1f fc8c 	uxth.w	ip, ip
 8012a46:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8012a4a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8012a4e:	448c      	add	ip, r1
 8012a50:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8012a54:	e61e      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012a56:	445a      	add	r2, fp
 8012a58:	4484      	add	ip, r0
 8012a5a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8012a5e:	e78f      	b.n	8012980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012a60:	fa1f f18e 	uxth.w	r1, lr
 8012a64:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8012a68:	b293      	uxth	r3, r2
 8012a6a:	4596      	cmp	lr, r2
 8012a6c:	eb01 0806 	add.w	r8, r1, r6
 8012a70:	9306      	str	r3, [sp, #24]
 8012a72:	fa1f f888 	uxth.w	r8, r8
 8012a76:	9f06      	ldr	r7, [sp, #24]
 8012a78:	fa0f f388 	sxth.w	r3, r8
 8012a7c:	9307      	str	r3, [sp, #28]
 8012a7e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8012a82:	443b      	add	r3, r7
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	9308      	str	r3, [sp, #32]
 8012a88:	da24      	bge.n	8012ad4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012a8a:	9905      	ldr	r1, [sp, #20]
 8012a8c:	eba3 0308 	sub.w	r3, r3, r8
 8012a90:	eba2 020e 	sub.w	r2, r2, lr
 8012a94:	eba9 0000 	sub.w	r0, r9, r0
 8012a98:	ebaa 0401 	sub.w	r4, sl, r1
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	b2a4      	uxth	r4, r4
 8012aa0:	b219      	sxth	r1, r3
 8012aa2:	b225      	sxth	r5, r4
 8012aa4:	4348      	muls	r0, r1
 8012aa6:	436a      	muls	r2, r5
 8012aa8:	4282      	cmp	r2, r0
 8012aaa:	9a02      	ldr	r2, [sp, #8]
 8012aac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012ab0:	445a      	add	r2, fp
 8012ab2:	dc06      	bgt.n	8012ac2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8012ab4:	9b07      	ldr	r3, [sp, #28]
 8012ab6:	44a4      	add	ip, r4
 8012ab8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8012abc:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8012ac0:	e75e      	b.n	8012980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012ac2:	9904      	ldr	r1, [sp, #16]
 8012ac4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8012ac8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8012acc:	4433      	add	r3, r6
 8012ace:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012ad2:	e5df      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012ad4:	9f06      	ldr	r7, [sp, #24]
 8012ad6:	9b04      	ldr	r3, [sp, #16]
 8012ad8:	1bc9      	subs	r1, r1, r7
 8012ada:	fa0f f78a 	sxth.w	r7, sl
 8012ade:	b289      	uxth	r1, r1
 8012ae0:	429f      	cmp	r7, r3
 8012ae2:	fa0f fe81 	sxth.w	lr, r1
 8012ae6:	dd23      	ble.n	8012b30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012ae8:	9a05      	ldr	r2, [sp, #20]
 8012aea:	eba9 0000 	sub.w	r0, r9, r0
 8012aee:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012af2:	ebaa 0202 	sub.w	r2, sl, r2
 8012af6:	9d07      	ldr	r5, [sp, #28]
 8012af8:	fb0e f000 	mul.w	r0, lr, r0
 8012afc:	b292      	uxth	r2, r2
 8012afe:	eba5 0a03 	sub.w	sl, r5, r3
 8012b02:	9b02      	ldr	r3, [sp, #8]
 8012b04:	b214      	sxth	r4, r2
 8012b06:	00db      	lsls	r3, r3, #3
 8012b08:	fb04 fa0a 	mul.w	sl, r4, sl
 8012b0c:	445b      	add	r3, fp
 8012b0e:	4550      	cmp	r0, sl
 8012b10:	db03      	blt.n	8012b1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012b12:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8012b16:	4494      	add	ip, r2
 8012b18:	e732      	b.n	8012980 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012b1a:	9a04      	ldr	r2, [sp, #16]
 8012b1c:	4431      	add	r1, r6
 8012b1e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8012b22:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8012b26:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8012b2a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012b2e:	e75c      	b.n	80129ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012b30:	9b08      	ldr	r3, [sp, #32]
 8012b32:	2d06      	cmp	r5, #6
 8012b34:	eba3 0308 	sub.w	r3, r3, r8
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	b218      	sxth	r0, r3
 8012b3c:	d813      	bhi.n	8012b66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012b3e:	9b07      	ldr	r3, [sp, #28]
 8012b40:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8012b44:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8012b48:	1c6b      	adds	r3, r5, #1
 8012b4a:	9901      	ldr	r1, [sp, #4]
 8012b4c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012b50:	9b01      	ldr	r3, [sp, #4]
 8012b52:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012b56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b5a:	805a      	strh	r2, [r3, #2]
 8012b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b5e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012b62:	809a      	strh	r2, [r3, #4]
 8012b64:	e75f      	b.n	8012a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012b66:	9c02      	ldr	r4, [sp, #8]
 8012b68:	4570      	cmp	r0, lr
 8012b6a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012b6e:	db0d      	blt.n	8012b8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012b70:	4431      	add	r1, r6
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	445c      	add	r4, fp
 8012b76:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8012b7a:	b289      	uxth	r1, r1
 8012b7c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8012b80:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012b84:	4419      	add	r1, r3
 8012b86:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8012b8a:	e583      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012b8c:	445c      	add	r4, fp
 8012b8e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8012b92:	e79b      	b.n	8012acc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012b94:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8012b98:	2e07      	cmp	r6, #7
 8012b9a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012b9e:	d812      	bhi.n	8012bc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8012ba0:	1c75      	adds	r5, r6, #1
 8012ba2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012ba6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8012baa:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8012bae:	9d01      	ldr	r5, [sp, #4]
 8012bb0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8012bb4:	442c      	add	r4, r5
 8012bb6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8012bba:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012bbe:	8061      	strh	r1, [r4, #2]
 8012bc0:	80a2      	strh	r2, [r4, #4]
 8012bc2:	80e3      	strh	r3, [r4, #6]
 8012bc4:	e5d0      	b.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012bc6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8012bca:	3e01      	subs	r6, #1
 8012bcc:	445c      	add	r4, fp
 8012bce:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012bd2:	f04f 37ff 	mov.w	r7, #4294967295
 8012bd6:	2500      	movs	r5, #0
 8012bd8:	9305      	str	r3, [sp, #20]
 8012bda:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8012bde:	1e72      	subs	r2, r6, #1
 8012be0:	9302      	str	r3, [sp, #8]
 8012be2:	4691      	mov	r9, r2
 8012be4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8012be8:	9304      	str	r3, [sp, #16]
 8012bea:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8012bee:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012bf2:	6818      	ldr	r0, [r3, #0]
 8012bf4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012bf8:	9207      	str	r2, [sp, #28]
 8012bfa:	bf16      	itet	ne
 8012bfc:	9905      	ldrne	r1, [sp, #20]
 8012bfe:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8012c02:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012c06:	9306      	str	r3, [sp, #24]
 8012c08:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012c0c:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8012c10:	fb18 f801 	smulbb	r8, r8, r1
 8012c14:	6859      	ldr	r1, [r3, #4]
 8012c16:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012c1a:	4671      	mov	r1, lr
 8012c1c:	a80c      	add	r0, sp, #48	; 0x30
 8012c1e:	f7fb fdda 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c22:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012c26:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8012c2a:	f04f 0c08 	mov.w	ip, #8
 8012c2e:	9b04      	ldr	r3, [sp, #16]
 8012c30:	9a02      	ldr	r2, [sp, #8]
 8012c32:	fb10 f001 	smulbb	r0, r0, r1
 8012c36:	fb02 8803 	mla	r8, r2, r3, r8
 8012c3a:	eba0 0108 	sub.w	r1, r0, r8
 8012c3e:	fb90 f0fc 	sdiv	r0, r0, ip
 8012c42:	4288      	cmp	r0, r1
 8012c44:	dc20      	bgt.n	8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012c46:	4551      	cmp	r1, sl
 8012c48:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012c4c:	da03      	bge.n	8012c56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8012c4e:	b1d9      	cbz	r1, 8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012c50:	468a      	mov	sl, r1
 8012c52:	464f      	mov	r7, r9
 8012c54:	4635      	mov	r5, r6
 8012c56:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c5a:	f119 0f02 	cmn.w	r9, #2
 8012c5e:	d1c6      	bne.n	8012bee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8012c60:	4616      	mov	r6, r2
 8012c62:	3201      	adds	r2, #1
 8012c64:	f1a4 0408 	sub.w	r4, r4, #8
 8012c68:	d1b7      	bne.n	8012bda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8012c6a:	9b01      	ldr	r3, [sp, #4]
 8012c6c:	b2ac      	uxth	r4, r5
 8012c6e:	00ed      	lsls	r5, r5, #3
 8012c70:	1958      	adds	r0, r3, r5
 8012c72:	1c7b      	adds	r3, r7, #1
 8012c74:	d10b      	bne.n	8012c8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8012c76:	4601      	mov	r1, r0
 8012c78:	9803      	ldr	r0, [sp, #12]
 8012c7a:	f7fb fdac 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c7e:	4621      	mov	r1, r4
 8012c80:	9801      	ldr	r0, [sp, #4]
 8012c82:	f7ff fcdd 	bl	8012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012c86:	e505      	b.n	8012694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012c88:	464f      	mov	r7, r9
 8012c8a:	4635      	mov	r5, r6
 8012c8c:	e7ed      	b.n	8012c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8012c8e:	9b01      	ldr	r3, [sp, #4]
 8012c90:	00ff      	lsls	r7, r7, #3
 8012c92:	445d      	add	r5, fp
 8012c94:	19d9      	adds	r1, r3, r7
 8012c96:	445f      	add	r7, fp
 8012c98:	f7fb fd9d 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c9c:	9b03      	ldr	r3, [sp, #12]
 8012c9e:	cb03      	ldmia	r3!, {r0, r1}
 8012ca0:	9b03      	ldr	r3, [sp, #12]
 8012ca2:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8012ca6:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8012caa:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012cae:	6869      	ldr	r1, [r5, #4]
 8012cb0:	c303      	stmia	r3!, {r0, r1}
 8012cb2:	e7e4      	b.n	8012c7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08012cb4 <_ZN8touchgfx11Application10invalidateEv>:
 8012cb4:	4b09      	ldr	r3, [pc, #36]	; (8012cdc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	2100      	movs	r1, #0
 8012cba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012cbe:	4b08      	ldr	r3, [pc, #32]	; (8012ce0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012cc0:	9100      	str	r1, [sp, #0]
 8012cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012cc6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012cca:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012cce:	ab02      	add	r3, sp, #8
 8012cd0:	e913 0006 	ldmdb	r3, {r1, r2}
 8012cd4:	b002      	add	sp, #8
 8012cd6:	f7ff bcc7 	b.w	8012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012cda:	bf00      	nop
 8012cdc:	2400f498 	.word	0x2400f498
 8012ce0:	2400f49a 	.word	0x2400f49a

08012ce4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8012cec:	b09b      	sub	sp, #108	; 0x6c
 8012cee:	4604      	mov	r4, r0
 8012cf0:	4630      	mov	r0, r6
 8012cf2:	f7fa f812 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	b940      	cbnz	r0, 8012d0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012d00:	f7ff fcb2 	bl	8012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012d04:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012d08:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8012d0c:	4bc8      	ldr	r3, [pc, #800]	; (8013030 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d03e      	beq.n	8012d92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012d14:	4dc7      	ldr	r5, [pc, #796]	; (8013034 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012d16:	4628      	mov	r0, r5
 8012d18:	f7f9 ffff 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d1c:	4606      	mov	r6, r0
 8012d1e:	2800      	cmp	r0, #0
 8012d20:	d137      	bne.n	8012d92 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012d22:	4628      	mov	r0, r5
 8012d24:	f7ff fa28 	bl	8012178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012d28:	6829      	ldr	r1, [r5, #0]
 8012d2a:	686a      	ldr	r2, [r5, #4]
 8012d2c:	4620      	mov	r0, r4
 8012d2e:	f7ff fc9b 	bl	8012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012d32:	802e      	strh	r6, [r5, #0]
 8012d34:	806e      	strh	r6, [r5, #2]
 8012d36:	80ae      	strh	r6, [r5, #4]
 8012d38:	80ee      	strh	r6, [r5, #6]
 8012d3a:	ae09      	add	r6, sp, #36	; 0x24
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f7ff fc23 	bl	8012588 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012d42:	4abd      	ldr	r2, [pc, #756]	; (8013038 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012d44:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8012d48:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8012d4c:	8815      	ldrh	r5, [r2, #0]
 8012d4e:	9202      	str	r2, [sp, #8]
 8012d50:	462b      	mov	r3, r5
 8012d52:	429f      	cmp	r7, r3
 8012d54:	d924      	bls.n	8012da0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8012d56:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8012d5a:	2907      	cmp	r1, #7
 8012d5c:	d816      	bhi.n	8012d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8012d5e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012d62:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8012d66:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8012d6a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8012d6e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012d72:	1c4a      	adds	r2, r1, #1
 8012d74:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8012d78:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8012d7c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8012d80:	f8a2 9002 	strh.w	r9, [r2, #2]
 8012d84:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012d88:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	b29b      	uxth	r3, r3
 8012d90:	e7df      	b.n	8012d52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8012d92:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d1cf      	bne.n	8012d3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8012d9a:	b01b      	add	sp, #108	; 0x6c
 8012d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012da0:	462f      	mov	r7, r5
 8012da2:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8012da6:	42bb      	cmp	r3, r7
 8012da8:	d90b      	bls.n	8012dc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8012daa:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8012dae:	3701      	adds	r7, #1
 8012db0:	4620      	mov	r0, r4
 8012db2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8012db6:	b2bf      	uxth	r7, r7
 8012db8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8012dbc:	f7ff fc54 	bl	8012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012dc0:	e7ef      	b.n	8012da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8012dc2:	4a9e      	ldr	r2, [pc, #632]	; (801303c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8012dc4:	6813      	ldr	r3, [r2, #0]
 8012dc6:	4690      	mov	r8, r2
 8012dc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012dcc:	2b01      	cmp	r3, #1
 8012dce:	f040 80e4 	bne.w	8012f9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8012dd2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8012ddc:	2500      	movs	r5, #0
 8012dde:	33ae      	adds	r3, #174	; 0xae
 8012de0:	428f      	cmp	r7, r1
 8012de2:	f103 0308 	add.w	r3, r3, #8
 8012de6:	dd0a      	ble.n	8012dfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8012de8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8012dec:	3101      	adds	r1, #1
 8012dee:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8012df2:	4402      	add	r2, r0
 8012df4:	b212      	sxth	r2, r2
 8012df6:	4295      	cmp	r5, r2
 8012df8:	bfb8      	it	lt
 8012dfa:	4615      	movlt	r5, r2
 8012dfc:	e7f0      	b.n	8012de0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8012dfe:	4b90      	ldr	r3, [pc, #576]	; (8013040 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8012e00:	f8df b238 	ldr.w	fp, [pc, #568]	; 801303c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	46d8      	mov	r8, fp
 8012e08:	2b0f      	cmp	r3, #15
 8012e0a:	bf8c      	ite	hi
 8012e0c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8012e10:	f04f 0a01 	movls.w	sl, #1
 8012e14:	2300      	movs	r3, #0
 8012e16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012e1a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8012e1e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012e22:	4438      	add	r0, r7
 8012e24:	b207      	sxth	r7, r0
 8012e26:	f8db 0000 	ldr.w	r0, [fp]
 8012e2a:	42bd      	cmp	r5, r7
 8012e2c:	6803      	ldr	r3, [r0, #0]
 8012e2e:	f340 8084 	ble.w	8012f3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012e36:	4798      	blx	r3
 8012e38:	eb07 030a 	add.w	r3, r7, sl
 8012e3c:	4298      	cmp	r0, r3
 8012e3e:	da07      	bge.n	8012e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012e40:	4285      	cmp	r5, r0
 8012e42:	dd05      	ble.n	8012e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8012e44:	4287      	cmp	r7, r0
 8012e46:	dd6d      	ble.n	8012f24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012e48:	2f00      	cmp	r7, #0
 8012e4a:	dd6b      	ble.n	8012f24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	e004      	b.n	8012e5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8012e50:	4287      	cmp	r7, r0
 8012e52:	dcfb      	bgt.n	8012e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8012e54:	42a8      	cmp	r0, r5
 8012e56:	bfa8      	it	ge
 8012e58:	4628      	movge	r0, r5
 8012e5a:	4b7a      	ldr	r3, [pc, #488]	; (8013044 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8012e5c:	1bc0      	subs	r0, r0, r7
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e68:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012e6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e70:	9b02      	ldr	r3, [sp, #8]
 8012e72:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012e76:	881f      	ldrh	r7, [r3, #0]
 8012e78:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012e7c:	42bb      	cmp	r3, r7
 8012e7e:	d9cc      	bls.n	8012e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012e80:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012e84:	ab07      	add	r3, sp, #28
 8012e86:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012e8a:	6851      	ldr	r1, [r2, #4]
 8012e8c:	c303      	stmia	r3!, {r0, r1}
 8012e8e:	a905      	add	r1, sp, #20
 8012e90:	a807      	add	r0, sp, #28
 8012e92:	f7ff fa2c 	bl	80122ee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012e96:	2800      	cmp	r0, #0
 8012e98:	d04c      	beq.n	8012f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8012e9a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012e9e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012ea2:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8012ea6:	4686      	mov	lr, r0
 8012ea8:	4290      	cmp	r0, r2
 8012eaa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8012eae:	4448      	add	r0, r9
 8012eb0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8012eb4:	bfb8      	it	lt
 8012eb6:	4696      	movlt	lr, r2
 8012eb8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012ebc:	444a      	add	r2, r9
 8012ebe:	b280      	uxth	r0, r0
 8012ec0:	4299      	cmp	r1, r3
 8012ec2:	468c      	mov	ip, r1
 8012ec4:	b292      	uxth	r2, r2
 8012ec6:	9303      	str	r3, [sp, #12]
 8012ec8:	bfb8      	it	lt
 8012eca:	469c      	movlt	ip, r3
 8012ecc:	b203      	sxth	r3, r0
 8012ece:	fa0f f982 	sxth.w	r9, r2
 8012ed2:	f8ad e01c 	strh.w	lr, [sp, #28]
 8012ed6:	f8ad c01e 	strh.w	ip, [sp, #30]
 8012eda:	454b      	cmp	r3, r9
 8012edc:	bfb8      	it	lt
 8012ede:	4602      	movlt	r2, r0
 8012ee0:	9b03      	ldr	r3, [sp, #12]
 8012ee2:	eba2 020e 	sub.w	r2, r2, lr
 8012ee6:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012eea:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8012eee:	4411      	add	r1, r2
 8012ef0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012ef4:	4413      	add	r3, r2
 8012ef6:	b289      	uxth	r1, r1
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	b208      	sxth	r0, r1
 8012efc:	b21a      	sxth	r2, r3
 8012efe:	4290      	cmp	r0, r2
 8012f00:	bfb8      	it	lt
 8012f02:	460b      	movlt	r3, r1
 8012f04:	eba3 030c 	sub.w	r3, r3, ip
 8012f08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012f0c:	a807      	add	r0, sp, #28
 8012f0e:	f7f9 ff04 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f12:	b920      	cbnz	r0, 8012f1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012f14:	6823      	ldr	r3, [r4, #0]
 8012f16:	a907      	add	r1, sp, #28
 8012f18:	4620      	mov	r0, r4
 8012f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f1c:	4798      	blx	r3
 8012f1e:	3701      	adds	r7, #1
 8012f20:	b2bf      	uxth	r7, r7
 8012f22:	e7a9      	b.n	8012e78 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012f24:	f8d8 0000 	ldr.w	r0, [r8]
 8012f28:	2101      	movs	r1, #1
 8012f2a:	6803      	ldr	r3, [r0, #0]
 8012f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012f30:	4798      	blx	r3
 8012f32:	e772      	b.n	8012e1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012f34:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012f38:	e7e8      	b.n	8012f0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8012f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f3c:	4798      	blx	r3
 8012f3e:	4b42      	ldr	r3, [pc, #264]	; (8013048 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	f43f af29 	beq.w	8012d9a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012f48:	2300      	movs	r3, #0
 8012f4a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8012f4e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8012f52:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8012f56:	9b02      	ldr	r3, [sp, #8]
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	429d      	cmp	r5, r3
 8012f5c:	f67f af1d 	bls.w	8012d9a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8012f60:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8012f64:	2907      	cmp	r1, #7
 8012f66:	d815      	bhi.n	8012f94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8012f68:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8012f6c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8012f70:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012f74:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012f78:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8012f7c:	1c4a      	adds	r2, r1, #1
 8012f7e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8012f82:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012f86:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8012f8a:	f8a2 e002 	strh.w	lr, [r2, #2]
 8012f8e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8012f92:	80d7      	strh	r7, [r2, #6]
 8012f94:	3301      	adds	r3, #1
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	e7df      	b.n	8012f5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	f040 8135 	bne.w	801320a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8012fa0:	4b2a      	ldr	r3, [pc, #168]	; (801304c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8012fa2:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	f000 809c 	beq.w	80130e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8012fae:	9b02      	ldr	r3, [sp, #8]
 8012fb0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8012fb4:	f8b3 b000 	ldrh.w	fp, [r3]
 8012fb8:	f10b 0b01 	add.w	fp, fp, #1
 8012fbc:	fa1f fb8b 	uxth.w	fp, fp
 8012fc0:	2a00      	cmp	r2, #0
 8012fc2:	d0bc      	beq.n	8012f3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012fc4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8012fc8:	4659      	mov	r1, fp
 8012fca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8012fce:	f04f 0800 	mov.w	r8, #0
 8012fd2:	441d      	add	r5, r3
 8012fd4:	b22d      	sxth	r5, r5
 8012fd6:	b28b      	uxth	r3, r1
 8012fd8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	f240 80c0 	bls.w	8013162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8012fe2:	4427      	add	r7, r4
 8012fe4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8012fe8:	4608      	mov	r0, r1
 8012fea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8012fee:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 8012ff2:	4563      	cmp	r3, ip
 8012ff4:	f340 80a2 	ble.w	801313c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8012ff8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8012ffc:	4465      	add	r5, ip
 8012ffe:	b22d      	sxth	r5, r5
 8013000:	429d      	cmp	r5, r3
 8013002:	bfa8      	it	ge
 8013004:	461d      	movge	r5, r3
 8013006:	3101      	adds	r1, #1
 8013008:	4680      	mov	r8, r0
 801300a:	e7e4      	b.n	8012fd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801300c:	d10b      	bne.n	8013026 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801300e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8013012:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8013016:	458c      	cmp	ip, r1
 8013018:	bfb4      	ite	lt
 801301a:	469c      	movlt	ip, r3
 801301c:	46bc      	movge	ip, r7
 801301e:	4572      	cmp	r2, lr
 8013020:	bfb8      	it	lt
 8013022:	4672      	movlt	r2, lr
 8013024:	e087      	b.n	8013136 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8013026:	428a      	cmp	r2, r1
 8013028:	46bc      	mov	ip, r7
 801302a:	bfb8      	it	lt
 801302c:	460a      	movlt	r2, r1
 801302e:	e082      	b.n	8013136 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8013030:	2400f4e4 	.word	0x2400f4e4
 8013034:	2400f4f0 	.word	0x2400f4f0
 8013038:	24000060 	.word	0x24000060
 801303c:	2400f4a4 	.word	0x2400f4a4
 8013040:	2400f49a 	.word	0x2400f49a
 8013044:	2400f498 	.word	0x2400f498
 8013048:	2400f4a2 	.word	0x2400f4a2
 801304c:	2400f49c 	.word	0x2400f49c
 8013050:	1961      	adds	r1, r4, r5
 8013052:	ab07      	add	r3, sp, #28
 8013054:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8013058:	6849      	ldr	r1, [r1, #4]
 801305a:	c303      	stmia	r3!, {r0, r1}
 801305c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013060:	a807      	add	r0, sp, #28
 8013062:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013066:	2b13      	cmp	r3, #19
 8013068:	440b      	add	r3, r1
 801306a:	bfd8      	it	le
 801306c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013070:	1a9b      	subs	r3, r3, r2
 8013072:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013076:	f8ad 3020 	strh.w	r3, [sp, #32]
 801307a:	f7ff f897 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801307e:	a807      	add	r0, sp, #28
 8013080:	f7f9 fe4b 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013084:	bb78      	cbnz	r0, 80130e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013086:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801308a:	4425      	add	r5, r4
 801308c:	f8d8 0000 	ldr.w	r0, [r8]
 8013090:	f1bc 0f14 	cmp.w	ip, #20
 8013094:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013098:	f8d0 e000 	ldr.w	lr, [r0]
 801309c:	bfa8      	it	ge
 801309e:	f04f 0c14 	movge.w	ip, #20
 80130a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80130a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80130aa:	fa1f fc8c 	uxth.w	ip, ip
 80130ae:	f8cd c000 	str.w	ip, [sp]
 80130b2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80130b6:	47d0      	blx	sl
 80130b8:	4682      	mov	sl, r0
 80130ba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80130be:	a807      	add	r0, sp, #28
 80130c0:	f7ff f85a 	bl	8012178 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80130c4:	6823      	ldr	r3, [r4, #0]
 80130c6:	4620      	mov	r0, r4
 80130c8:	a907      	add	r1, sp, #28
 80130ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130cc:	4798      	blx	r3
 80130ce:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80130d2:	eba0 000a 	sub.w	r0, r0, sl
 80130d6:	b200      	sxth	r0, r0
 80130d8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80130dc:	b918      	cbnz	r0, 80130e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80130de:	b2b9      	uxth	r1, r7
 80130e0:	4648      	mov	r0, r9
 80130e2:	f7ff faad 	bl	8012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80130e6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80130ea:	f1bb 0f00 	cmp.w	fp, #0
 80130ee:	f43f af26 	beq.w	8012f3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80130f2:	9b02      	ldr	r3, [sp, #8]
 80130f4:	2700      	movs	r7, #0
 80130f6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	3301      	adds	r3, #1
 80130fe:	b29b      	uxth	r3, r3
 8013100:	b299      	uxth	r1, r3
 8013102:	00fd      	lsls	r5, r7, #3
 8013104:	458b      	cmp	fp, r1
 8013106:	d9a3      	bls.n	8013050 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8013108:	4425      	add	r5, r4
 801310a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801310e:	469c      	mov	ip, r3
 8013110:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8013114:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8013118:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801311c:	4408      	add	r0, r1
 801311e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8013122:	4471      	add	r1, lr
 8013124:	b200      	sxth	r0, r0
 8013126:	b209      	sxth	r1, r1
 8013128:	4288      	cmp	r0, r1
 801312a:	f6bf af6f 	bge.w	801300c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801312e:	4586      	cmp	lr, r0
 8013130:	4672      	mov	r2, lr
 8013132:	bfb8      	it	lt
 8013134:	4602      	movlt	r2, r0
 8013136:	3301      	adds	r3, #1
 8013138:	4667      	mov	r7, ip
 801313a:	e7e1      	b.n	8013100 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801313c:	d10c      	bne.n	8013158 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801313e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8013142:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8013146:	4287      	cmp	r7, r0
 8013148:	bfb4      	ite	lt
 801314a:	4608      	movlt	r0, r1
 801314c:	4640      	movge	r0, r8
 801314e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8013152:	443b      	add	r3, r7
 8013154:	b21b      	sxth	r3, r3
 8013156:	e753      	b.n	8013000 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8013158:	4565      	cmp	r5, ip
 801315a:	4640      	mov	r0, r8
 801315c:	bfa8      	it	ge
 801315e:	4665      	movge	r5, ip
 8013160:	e751      	b.n	8013006 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8013162:	eb09 0007 	add.w	r0, r9, r7
 8013166:	4427      	add	r7, r4
 8013168:	9203      	str	r2, [sp, #12]
 801316a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801316e:	f1ba 0f13 	cmp.w	sl, #19
 8013172:	bfde      	ittt	le
 8013174:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8013178:	4455      	addle	r5, sl
 801317a:	b22d      	sxthle	r5, r5
 801317c:	f7f9 fdcd 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013180:	9a03      	ldr	r2, [sp, #12]
 8013182:	2800      	cmp	r0, #0
 8013184:	f47f af1c 	bne.w	8012fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8013188:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801318c:	fa1f fa8a 	uxth.w	sl, sl
 8013190:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013194:	1aad      	subs	r5, r5, r2
 8013196:	4829      	ldr	r0, [pc, #164]	; (801323c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8013198:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801319c:	2d14      	cmp	r5, #20
 801319e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80131a2:	6800      	ldr	r0, [r0, #0]
 80131a4:	bfa8      	it	ge
 80131a6:	2514      	movge	r5, #20
 80131a8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80131ac:	f8ad 201e 	strh.w	r2, [sp, #30]
 80131b0:	b289      	uxth	r1, r1
 80131b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80131b6:	b2ad      	uxth	r5, r5
 80131b8:	f8d0 c000 	ldr.w	ip, [r0]
 80131bc:	b292      	uxth	r2, r2
 80131be:	4555      	cmp	r5, sl
 80131c0:	bf94      	ite	ls
 80131c2:	9500      	strls	r5, [sp, #0]
 80131c4:	f8cd a000 	strhi.w	sl, [sp]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80131ce:	47a8      	blx	r5
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80131d6:	a907      	add	r1, sp, #28
 80131d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131da:	4620      	mov	r0, r4
 80131dc:	4798      	blx	r3
 80131de:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80131e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80131e6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80131ea:	1a5b      	subs	r3, r3, r1
 80131ec:	440a      	add	r2, r1
 80131ee:	b21b      	sxth	r3, r3
 80131f0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80131f4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	f47f aed8 	bne.w	8012fae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80131fe:	fa1f f188 	uxth.w	r1, r8
 8013202:	4648      	mov	r0, r9
 8013204:	f7ff fa1c 	bl	8012640 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013208:	e6d1      	b.n	8012fae <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801320a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801320e:	42ab      	cmp	r3, r5
 8013210:	f67f ae95 	bls.w	8012f3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013214:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8013218:	ab07      	add	r3, sp, #28
 801321a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801321e:	6851      	ldr	r1, [r2, #4]
 8013220:	c303      	stmia	r3!, {r0, r1}
 8013222:	a807      	add	r0, sp, #28
 8013224:	f7f9 fd79 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013228:	b920      	cbnz	r0, 8013234 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	a907      	add	r1, sp, #28
 801322e:	4620      	mov	r0, r4
 8013230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013232:	4798      	blx	r3
 8013234:	3501      	adds	r5, #1
 8013236:	b2ad      	uxth	r5, r5
 8013238:	e7e7      	b.n	801320a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801323a:	bf00      	nop
 801323c:	2400f4a4 	.word	0x2400f4a4

08013240 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013240:	4b03      	ldr	r3, [pc, #12]	; (8013250 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013242:	2200      	movs	r2, #0
 8013244:	801a      	strh	r2, [r3, #0]
 8013246:	805a      	strh	r2, [r3, #2]
 8013248:	809a      	strh	r2, [r3, #4]
 801324a:	80da      	strh	r2, [r3, #6]
 801324c:	4770      	bx	lr
 801324e:	bf00      	nop
 8013250:	2400f4f0 	.word	0x2400f4f0

08013254 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	b09d      	sub	sp, #116	; 0x74
 801325a:	4606      	mov	r6, r0
 801325c:	4614      	mov	r4, r2
 801325e:	468a      	mov	sl, r1
 8013260:	a803      	add	r0, sp, #12
 8013262:	461d      	mov	r5, r3
 8013264:	f000 fe44 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 8013268:	6833      	ldr	r3, [r6, #0]
 801326a:	4630      	mov	r0, r6
 801326c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013272:	4798      	blx	r3
 8013274:	6833      	ldr	r3, [r6, #0]
 8013276:	4607      	mov	r7, r0
 8013278:	4630      	mov	r0, r6
 801327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801327c:	4798      	blx	r3
 801327e:	462a      	mov	r2, r5
 8013280:	2500      	movs	r5, #0
 8013282:	4621      	mov	r1, r4
 8013284:	9000      	str	r0, [sp, #0]
 8013286:	463b      	mov	r3, r7
 8013288:	462c      	mov	r4, r5
 801328a:	46a9      	mov	r9, r5
 801328c:	46a8      	mov	r8, r5
 801328e:	a803      	add	r0, sp, #12
 8013290:	f000 fe81 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013294:	2300      	movs	r3, #0
 8013296:	9302      	str	r3, [sp, #8]
 8013298:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801329c:	429c      	cmp	r4, r3
 801329e:	d002      	beq.n	80132a6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80132a0:	455c      	cmp	r4, fp
 80132a2:	bf18      	it	ne
 80132a4:	4625      	movne	r5, r4
 80132a6:	ab02      	add	r3, sp, #8
 80132a8:	4632      	mov	r2, r6
 80132aa:	4651      	mov	r1, sl
 80132ac:	a803      	add	r0, sp, #12
 80132ae:	f001 f967 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80132b2:	4604      	mov	r4, r0
 80132b4:	b108      	cbz	r0, 80132ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80132b6:	280a      	cmp	r0, #10
 80132b8:	d10a      	bne.n	80132d0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80132ba:	45c1      	cmp	r9, r8
 80132bc:	bf38      	it	cc
 80132be:	46c1      	movcc	r9, r8
 80132c0:	f04f 0800 	mov.w	r8, #0
 80132c4:	2c00      	cmp	r4, #0
 80132c6:	d1e5      	bne.n	8013294 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80132c8:	4648      	mov	r0, r9
 80132ca:	b01d      	add	sp, #116	; 0x74
 80132cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d0:	9a02      	ldr	r2, [sp, #8]
 80132d2:	2a00      	cmp	r2, #0
 80132d4:	d0de      	beq.n	8013294 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80132d6:	7b57      	ldrb	r7, [r2, #13]
 80132d8:	4629      	mov	r1, r5
 80132da:	6833      	ldr	r3, [r6, #0]
 80132dc:	007f      	lsls	r7, r7, #1
 80132de:	8894      	ldrh	r4, [r2, #4]
 80132e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132e2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80132e6:	7a97      	ldrb	r7, [r2, #10]
 80132e8:	4307      	orrs	r7, r0
 80132ea:	4630      	mov	r0, r6
 80132ec:	4798      	blx	r3
 80132ee:	4438      	add	r0, r7
 80132f0:	4480      	add	r8, r0
 80132f2:	fa1f f888 	uxth.w	r8, r8
 80132f6:	e7e5      	b.n	80132c4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080132f8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80132f8:	b508      	push	{r3, lr}
 80132fa:	6803      	ldr	r3, [r0, #0]
 80132fc:	68db      	ldr	r3, [r3, #12]
 80132fe:	4798      	blx	r3
 8013300:	b128      	cbz	r0, 801330e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013302:	7b43      	ldrb	r3, [r0, #13]
 8013304:	7a80      	ldrb	r0, [r0, #10]
 8013306:	005b      	lsls	r3, r3, #1
 8013308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801330c:	4318      	orrs	r0, r3
 801330e:	bd08      	pop	{r3, pc}

08013310 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013310:	b40e      	push	{r1, r2, r3}
 8013312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013314:	b09e      	sub	sp, #120	; 0x78
 8013316:	4605      	mov	r5, r0
 8013318:	ab23      	add	r3, sp, #140	; 0x8c
 801331a:	a805      	add	r0, sp, #20
 801331c:	f853 4b04 	ldr.w	r4, [r3], #4
 8013320:	9303      	str	r3, [sp, #12]
 8013322:	f000 fde5 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 8013326:	682b      	ldr	r3, [r5, #0]
 8013328:	4628      	mov	r0, r5
 801332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801332c:	4798      	blx	r3
 801332e:	682b      	ldr	r3, [r5, #0]
 8013330:	4606      	mov	r6, r0
 8013332:	4628      	mov	r0, r5
 8013334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013336:	4798      	blx	r3
 8013338:	4633      	mov	r3, r6
 801333a:	4621      	mov	r1, r4
 801333c:	ae1e      	add	r6, sp, #120	; 0x78
 801333e:	2400      	movs	r4, #0
 8013340:	9000      	str	r0, [sp, #0]
 8013342:	9a03      	ldr	r2, [sp, #12]
 8013344:	a805      	add	r0, sp, #20
 8013346:	f000 fe26 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801334a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801334e:	462a      	mov	r2, r5
 8013350:	4633      	mov	r3, r6
 8013352:	4621      	mov	r1, r4
 8013354:	a805      	add	r0, sp, #20
 8013356:	f001 f913 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801335a:	b300      	cbz	r0, 801339e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801335c:	280a      	cmp	r0, #10
 801335e:	d01a      	beq.n	8013396 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013360:	9f04      	ldr	r7, [sp, #16]
 8013362:	b1c7      	cbz	r7, 8013396 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013364:	7b78      	ldrb	r0, [r7, #13]
 8013366:	7a3b      	ldrb	r3, [r7, #8]
 8013368:	00c1      	lsls	r1, r0, #3
 801336a:	88ea      	ldrh	r2, [r5, #6]
 801336c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013370:	4319      	orrs	r1, r3
 8013372:	0643      	lsls	r3, r0, #25
 8013374:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013378:	bf48      	it	mi
 801337a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801337e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013382:	bf48      	it	mi
 8013384:	b219      	sxthmi	r1, r3
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	4303      	orrs	r3, r0
 801338a:	4413      	add	r3, r2
 801338c:	1a5b      	subs	r3, r3, r1
 801338e:	b21b      	sxth	r3, r3
 8013390:	429c      	cmp	r4, r3
 8013392:	bfb8      	it	lt
 8013394:	461c      	movlt	r4, r3
 8013396:	4633      	mov	r3, r6
 8013398:	462a      	mov	r2, r5
 801339a:	2100      	movs	r1, #0
 801339c:	e7da      	b.n	8013354 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801339e:	b2a0      	uxth	r0, r4
 80133a0:	b01e      	add	sp, #120	; 0x78
 80133a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80133a6:	b003      	add	sp, #12
 80133a8:	4770      	bx	lr

080133aa <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80133aa:	7a43      	ldrb	r3, [r0, #9]
 80133ac:	8880      	ldrh	r0, [r0, #4]
 80133ae:	4418      	add	r0, r3
 80133b0:	b280      	uxth	r0, r0
 80133b2:	4770      	bx	lr

080133b4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80133b4:	6803      	ldr	r3, [r0, #0]
 80133b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133b8:	4718      	bx	r3

080133ba <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80133ba:	b40e      	push	{r1, r2, r3}
 80133bc:	b570      	push	{r4, r5, r6, lr}
 80133be:	b09d      	sub	sp, #116	; 0x74
 80133c0:	4604      	mov	r4, r0
 80133c2:	ab21      	add	r3, sp, #132	; 0x84
 80133c4:	a803      	add	r0, sp, #12
 80133c6:	f853 5b04 	ldr.w	r5, [r3], #4
 80133ca:	9302      	str	r3, [sp, #8]
 80133cc:	f000 fd90 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 80133d0:	6823      	ldr	r3, [r4, #0]
 80133d2:	4620      	mov	r0, r4
 80133d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133d6:	4798      	blx	r3
 80133d8:	6823      	ldr	r3, [r4, #0]
 80133da:	4606      	mov	r6, r0
 80133dc:	4620      	mov	r0, r4
 80133de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80133e0:	2401      	movs	r4, #1
 80133e2:	4798      	blx	r3
 80133e4:	4633      	mov	r3, r6
 80133e6:	9000      	str	r0, [sp, #0]
 80133e8:	4629      	mov	r1, r5
 80133ea:	9a02      	ldr	r2, [sp, #8]
 80133ec:	a803      	add	r0, sp, #12
 80133ee:	f000 fdd2 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80133f2:	a803      	add	r0, sp, #12
 80133f4:	f001 f990 	bl	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80133f8:	b2a3      	uxth	r3, r4
 80133fa:	b138      	cbz	r0, 801340c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80133fc:	280a      	cmp	r0, #10
 80133fe:	a803      	add	r0, sp, #12
 8013400:	bf04      	itt	eq
 8013402:	3301      	addeq	r3, #1
 8013404:	b21c      	sxtheq	r4, r3
 8013406:	f001 f987 	bl	8014718 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801340a:	e7f5      	b.n	80133f8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801340c:	4618      	mov	r0, r3
 801340e:	b01d      	add	sp, #116	; 0x74
 8013410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013414:	b003      	add	sp, #12
 8013416:	4770      	bx	lr

08013418 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013418:	b40e      	push	{r1, r2, r3}
 801341a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801341c:	b09e      	sub	sp, #120	; 0x78
 801341e:	4604      	mov	r4, r0
 8013420:	ab23      	add	r3, sp, #140	; 0x8c
 8013422:	a805      	add	r0, sp, #20
 8013424:	f853 5b04 	ldr.w	r5, [r3], #4
 8013428:	9303      	str	r3, [sp, #12]
 801342a:	f000 fd61 	bl	8013ef0 <_ZN8touchgfx12TextProviderC1Ev>
 801342e:	6823      	ldr	r3, [r4, #0]
 8013430:	4620      	mov	r0, r4
 8013432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013434:	4798      	blx	r3
 8013436:	6823      	ldr	r3, [r4, #0]
 8013438:	4606      	mov	r6, r0
 801343a:	4620      	mov	r0, r4
 801343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801343e:	4798      	blx	r3
 8013440:	4633      	mov	r3, r6
 8013442:	4629      	mov	r1, r5
 8013444:	9000      	str	r0, [sp, #0]
 8013446:	9a03      	ldr	r2, [sp, #12]
 8013448:	a805      	add	r0, sp, #20
 801344a:	f000 fda4 	bl	8013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801344e:	ad1e      	add	r5, sp, #120	; 0x78
 8013450:	2100      	movs	r1, #0
 8013452:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8013456:	4622      	mov	r2, r4
 8013458:	a805      	add	r0, sp, #20
 801345a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801345e:	462b      	mov	r3, r5
 8013460:	f001 f88e 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013464:	b1d8      	cbz	r0, 801349e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8013466:	280a      	cmp	r0, #10
 8013468:	d012      	beq.n	8013490 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801346a:	9804      	ldr	r0, [sp, #16]
 801346c:	b180      	cbz	r0, 8013490 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801346e:	7b47      	ldrb	r7, [r0, #13]
 8013470:	88e2      	ldrh	r2, [r4, #6]
 8013472:	00fb      	lsls	r3, r7, #3
 8013474:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013478:	7a03      	ldrb	r3, [r0, #8]
 801347a:	430b      	orrs	r3, r1
 801347c:	0679      	lsls	r1, r7, #25
 801347e:	bf44      	itt	mi
 8013480:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013484:	b21b      	sxthmi	r3, r3
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	b21b      	sxth	r3, r3
 801348a:	429e      	cmp	r6, r3
 801348c:	bfa8      	it	ge
 801348e:	461e      	movge	r6, r3
 8013490:	462b      	mov	r3, r5
 8013492:	4622      	mov	r2, r4
 8013494:	2100      	movs	r1, #0
 8013496:	a805      	add	r0, sp, #20
 8013498:	f001 f872 	bl	8014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801349c:	e7e2      	b.n	8013464 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801349e:	4630      	mov	r0, r6
 80134a0:	b01e      	add	sp, #120	; 0x78
 80134a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80134a6:	b003      	add	sp, #12
 80134a8:	4770      	bx	lr

080134aa <_ZNK8touchgfx8Drawable10invalidateEv>:
 80134aa:	b513      	push	{r0, r1, r4, lr}
 80134ac:	6803      	ldr	r3, [r0, #0]
 80134ae:	2400      	movs	r4, #0
 80134b0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80134b4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80134b8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80134bc:	4669      	mov	r1, sp
 80134be:	691b      	ldr	r3, [r3, #16]
 80134c0:	9400      	str	r4, [sp, #0]
 80134c2:	f8ad 2006 	strh.w	r2, [sp, #6]
 80134c6:	4798      	blx	r3
 80134c8:	b002      	add	sp, #8
 80134ca:	bd10      	pop	{r4, pc}

080134cc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80134cc:	b538      	push	{r3, r4, r5, lr}
 80134ce:	680b      	ldr	r3, [r1, #0]
 80134d0:	460c      	mov	r4, r1
 80134d2:	4605      	mov	r5, r0
 80134d4:	68db      	ldr	r3, [r3, #12]
 80134d6:	4798      	blx	r3
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	4620      	mov	r0, r4
 80134dc:	4629      	mov	r1, r5
 80134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e0:	4798      	blx	r3
 80134e2:	4628      	mov	r0, r5
 80134e4:	bd38      	pop	{r3, r4, r5, pc}

080134e6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80134e6:	b410      	push	{r4}
 80134e8:	880a      	ldrh	r2, [r1, #0]
 80134ea:	8884      	ldrh	r4, [r0, #4]
 80134ec:	4422      	add	r2, r4
 80134ee:	800a      	strh	r2, [r1, #0]
 80134f0:	884a      	ldrh	r2, [r1, #2]
 80134f2:	88c4      	ldrh	r4, [r0, #6]
 80134f4:	4422      	add	r2, r4
 80134f6:	804a      	strh	r2, [r1, #2]
 80134f8:	6940      	ldr	r0, [r0, #20]
 80134fa:	b120      	cbz	r0, 8013506 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80134fc:	6803      	ldr	r3, [r0, #0]
 80134fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013504:	4718      	bx	r3
 8013506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801350a:	4770      	bx	lr

0801350c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801350c:	b570      	push	{r4, r5, r6, lr}
 801350e:	8882      	ldrh	r2, [r0, #4]
 8013510:	460c      	mov	r4, r1
 8013512:	880b      	ldrh	r3, [r1, #0]
 8013514:	4605      	mov	r5, r0
 8013516:	4413      	add	r3, r2
 8013518:	800b      	strh	r3, [r1, #0]
 801351a:	884b      	ldrh	r3, [r1, #2]
 801351c:	88c2      	ldrh	r2, [r0, #6]
 801351e:	4413      	add	r3, r2
 8013520:	804b      	strh	r3, [r1, #2]
 8013522:	1d01      	adds	r1, r0, #4
 8013524:	4620      	mov	r0, r4
 8013526:	f7f9 fbb5 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 801352a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801352e:	2b00      	cmp	r3, #0
 8013530:	dd0b      	ble.n	801354a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013532:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013536:	2b00      	cmp	r3, #0
 8013538:	dd07      	ble.n	801354a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801353a:	6968      	ldr	r0, [r5, #20]
 801353c:	b128      	cbz	r0, 801354a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801353e:	6803      	ldr	r3, [r0, #0]
 8013540:	4621      	mov	r1, r4
 8013542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013548:	4718      	bx	r3
 801354a:	bd70      	pop	{r4, r5, r6, pc}

0801354c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801354c:	b570      	push	{r4, r5, r6, lr}
 801354e:	8882      	ldrh	r2, [r0, #4]
 8013550:	460c      	mov	r4, r1
 8013552:	880b      	ldrh	r3, [r1, #0]
 8013554:	4605      	mov	r5, r0
 8013556:	4413      	add	r3, r2
 8013558:	800b      	strh	r3, [r1, #0]
 801355a:	884b      	ldrh	r3, [r1, #2]
 801355c:	88c2      	ldrh	r2, [r0, #6]
 801355e:	4413      	add	r3, r2
 8013560:	804b      	strh	r3, [r1, #2]
 8013562:	1d01      	adds	r1, r0, #4
 8013564:	4620      	mov	r0, r4
 8013566:	f7f9 fb95 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 801356a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	dd18      	ble.n	80135a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013572:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013576:	2b00      	cmp	r3, #0
 8013578:	dd14      	ble.n	80135a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801357a:	6968      	ldr	r0, [r5, #20]
 801357c:	b128      	cbz	r0, 801358a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801357e:	6803      	ldr	r3, [r0, #0]
 8013580:	4621      	mov	r1, r4
 8013582:	691b      	ldr	r3, [r3, #16]
 8013584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013588:	4718      	bx	r3
 801358a:	4b07      	ldr	r3, [pc, #28]	; (80135a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	3304      	adds	r3, #4
 8013590:	429d      	cmp	r5, r3
 8013592:	d107      	bne.n	80135a4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013594:	f7fe ff44 	bl	8012420 <_ZN8touchgfx11Application11getInstanceEv>
 8013598:	6821      	ldr	r1, [r4, #0]
 801359a:	6862      	ldr	r2, [r4, #4]
 801359c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135a0:	f7ff b862 	b.w	8012668 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80135a4:	bd70      	pop	{r4, r5, r6, pc}
 80135a6:	bf00      	nop
 80135a8:	2400f4e8 	.word	0x2400f4e8

080135ac <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	4604      	mov	r4, r0
 80135b0:	4616      	mov	r6, r2
 80135b2:	460d      	mov	r5, r1
 80135b4:	b901      	cbnz	r1, 80135b8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80135b6:	b192      	cbz	r2, 80135de <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80135b8:	6823      	ldr	r3, [r4, #0]
 80135ba:	4620      	mov	r0, r4
 80135bc:	699b      	ldr	r3, [r3, #24]
 80135be:	4798      	blx	r3
 80135c0:	88e2      	ldrh	r2, [r4, #6]
 80135c2:	88a1      	ldrh	r1, [r4, #4]
 80135c4:	4620      	mov	r0, r4
 80135c6:	4432      	add	r2, r6
 80135c8:	4429      	add	r1, r5
 80135ca:	b212      	sxth	r2, r2
 80135cc:	b209      	sxth	r1, r1
 80135ce:	f7ef fac0 	bl	8002b52 <_ZN8touchgfx8Drawable5setXYEss>
 80135d2:	6823      	ldr	r3, [r4, #0]
 80135d4:	4620      	mov	r0, r4
 80135d6:	699b      	ldr	r3, [r3, #24]
 80135d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135dc:	4718      	bx	r3
 80135de:	bd70      	pop	{r4, r5, r6, pc}

080135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80135e0:	b510      	push	{r4, lr}
 80135e2:	2300      	movs	r3, #0
 80135e4:	4604      	mov	r4, r0
 80135e6:	4608      	mov	r0, r1
 80135e8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80135ec:	8023      	strh	r3, [r4, #0]
 80135ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80135f2:	8063      	strh	r3, [r4, #2]
 80135f4:	6803      	ldr	r3, [r0, #0]
 80135f6:	80a1      	strh	r1, [r4, #4]
 80135f8:	4621      	mov	r1, r4
 80135fa:	80e2      	strh	r2, [r4, #6]
 80135fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135fe:	4798      	blx	r3
 8013600:	4620      	mov	r0, r4
 8013602:	bd10      	pop	{r4, pc}

08013604 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013604:	b530      	push	{r4, r5, lr}
 8013606:	8083      	strh	r3, [r0, #4]
 8013608:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801360c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013610:	80c3      	strh	r3, [r0, #6]
 8013612:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013616:	6141      	str	r1, [r0, #20]
 8013618:	7203      	strb	r3, [r0, #8]
 801361a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801361e:	8302      	strh	r2, [r0, #24]
 8013620:	7243      	strb	r3, [r0, #9]
 8013622:	7a83      	ldrb	r3, [r0, #10]
 8013624:	f365 0306 	bfi	r3, r5, #0, #7
 8013628:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801362c:	f365 13c7 	bfi	r3, r5, #7, #1
 8013630:	7283      	strb	r3, [r0, #10]
 8013632:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013636:	72c3      	strb	r3, [r0, #11]
 8013638:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801363c:	7303      	strb	r3, [r0, #12]
 801363e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8013642:	81c3      	strh	r3, [r0, #14]
 8013644:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8013648:	8203      	strh	r3, [r0, #16]
 801364a:	4b01      	ldr	r3, [pc, #4]	; (8013650 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801364c:	6003      	str	r3, [r0, #0]
 801364e:	bd30      	pop	{r4, r5, pc}
 8013650:	080223a8 	.word	0x080223a8

08013654 <_ZNK8touchgfx9ConstFont4findEt>:
 8013654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013656:	6944      	ldr	r4, [r0, #20]
 8013658:	b3bc      	cbz	r4, 80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801365a:	88a3      	ldrh	r3, [r4, #4]
 801365c:	8b02      	ldrh	r2, [r0, #24]
 801365e:	1acb      	subs	r3, r1, r3
 8013660:	f102 32ff 	add.w	r2, r2, #4294967295
 8013664:	d431      	bmi.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013666:	4293      	cmp	r3, r2
 8013668:	dd0c      	ble.n	8013684 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801366a:	230e      	movs	r3, #14
 801366c:	fb03 4302 	mla	r3, r3, r2, r4
 8013670:	889b      	ldrh	r3, [r3, #4]
 8013672:	1a5b      	subs	r3, r3, r1
 8013674:	1ad3      	subs	r3, r2, r3
 8013676:	429a      	cmp	r2, r3
 8013678:	db27      	blt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801367a:	2b00      	cmp	r3, #0
 801367c:	bfbc      	itt	lt
 801367e:	2302      	movlt	r3, #2
 8013680:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013684:	2500      	movs	r5, #0
 8013686:	260e      	movs	r6, #14
 8013688:	4295      	cmp	r5, r2
 801368a:	dc1e      	bgt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801368c:	fb06 4003 	mla	r0, r6, r3, r4
 8013690:	8887      	ldrh	r7, [r0, #4]
 8013692:	42b9      	cmp	r1, r7
 8013694:	d01a      	beq.n	80136cc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013696:	d20d      	bcs.n	80136b4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013698:	1e5a      	subs	r2, r3, #1
 801369a:	4295      	cmp	r5, r2
 801369c:	dc15      	bgt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801369e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80136a2:	1a5b      	subs	r3, r3, r1
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	429a      	cmp	r2, r3
 80136a8:	db0f      	blt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80136aa:	429d      	cmp	r5, r3
 80136ac:	ddec      	ble.n	8013688 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80136ae:	1953      	adds	r3, r2, r5
 80136b0:	105b      	asrs	r3, r3, #1
 80136b2:	e7e9      	b.n	8013688 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80136b4:	1c5d      	adds	r5, r3, #1
 80136b6:	42aa      	cmp	r2, r5
 80136b8:	db07      	blt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80136ba:	8a43      	ldrh	r3, [r0, #18]
 80136bc:	1acb      	subs	r3, r1, r3
 80136be:	442b      	add	r3, r5
 80136c0:	429d      	cmp	r5, r3
 80136c2:	dc02      	bgt.n	80136ca <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80136c4:	429a      	cmp	r2, r3
 80136c6:	dadf      	bge.n	8013688 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80136c8:	e7f1      	b.n	80136ae <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80136ca:	2000      	movs	r0, #0
 80136cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080136ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80136ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136d0:	4604      	mov	r4, r0
 80136d2:	4617      	mov	r7, r2
 80136d4:	461e      	mov	r6, r3
 80136d6:	b911      	cbnz	r1, 80136de <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80136d8:	2500      	movs	r5, #0
 80136da:	4628      	mov	r0, r5
 80136dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136de:	290a      	cmp	r1, #10
 80136e0:	d0fa      	beq.n	80136d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80136e2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80136e6:	4291      	cmp	r1, r2
 80136e8:	d0f6      	beq.n	80136d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80136ea:	f242 020b 	movw	r2, #8203	; 0x200b
 80136ee:	4291      	cmp	r1, r2
 80136f0:	d0f2      	beq.n	80136d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80136f2:	f7ff ffaf 	bl	8013654 <_ZNK8touchgfx9ConstFont4findEt>
 80136f6:	4605      	mov	r5, r0
 80136f8:	b950      	cbnz	r0, 8013710 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80136fa:	6823      	ldr	r3, [r4, #0]
 80136fc:	4620      	mov	r0, r4
 80136fe:	691b      	ldr	r3, [r3, #16]
 8013700:	4798      	blx	r3
 8013702:	4601      	mov	r1, r0
 8013704:	4620      	mov	r0, r4
 8013706:	f7ff ffa5 	bl	8013654 <_ZNK8touchgfx9ConstFont4findEt>
 801370a:	4605      	mov	r5, r0
 801370c:	2800      	cmp	r0, #0
 801370e:	d0e3      	beq.n	80136d8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013710:	6823      	ldr	r3, [r4, #0]
 8013712:	4629      	mov	r1, r5
 8013714:	4620      	mov	r0, r4
 8013716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013718:	4798      	blx	r3
 801371a:	6038      	str	r0, [r7, #0]
 801371c:	6823      	ldr	r3, [r4, #0]
 801371e:	4620      	mov	r0, r4
 8013720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013722:	4798      	blx	r3
 8013724:	7030      	strb	r0, [r6, #0]
 8013726:	e7d8      	b.n	80136da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013728 <_ZN8touchgfx4clzuEm>:
 8013728:	4603      	mov	r3, r0
 801372a:	b1c8      	cbz	r0, 8013760 <_ZN8touchgfx4clzuEm+0x38>
 801372c:	0c02      	lsrs	r2, r0, #16
 801372e:	0412      	lsls	r2, r2, #16
 8013730:	b9a2      	cbnz	r2, 801375c <_ZN8touchgfx4clzuEm+0x34>
 8013732:	0403      	lsls	r3, r0, #16
 8013734:	2010      	movs	r0, #16
 8013736:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801373a:	bf04      	itt	eq
 801373c:	021b      	lsleq	r3, r3, #8
 801373e:	3008      	addeq	r0, #8
 8013740:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013744:	bf04      	itt	eq
 8013746:	011b      	lsleq	r3, r3, #4
 8013748:	3004      	addeq	r0, #4
 801374a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801374e:	bf04      	itt	eq
 8013750:	009b      	lsleq	r3, r3, #2
 8013752:	3002      	addeq	r0, #2
 8013754:	2b00      	cmp	r3, #0
 8013756:	db04      	blt.n	8013762 <_ZN8touchgfx4clzuEm+0x3a>
 8013758:	3001      	adds	r0, #1
 801375a:	4770      	bx	lr
 801375c:	2000      	movs	r0, #0
 801375e:	e7ea      	b.n	8013736 <_ZN8touchgfx4clzuEm+0xe>
 8013760:	2020      	movs	r0, #32
 8013762:	4770      	bx	lr

08013764 <_ZN8touchgfx7muldivuEmmmRm>:
 8013764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013768:	4680      	mov	r8, r0
 801376a:	460f      	mov	r7, r1
 801376c:	4615      	mov	r5, r2
 801376e:	461e      	mov	r6, r3
 8013770:	f7ff ffda 	bl	8013728 <_ZN8touchgfx4clzuEm>
 8013774:	b998      	cbnz	r0, 801379e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8013776:	4608      	mov	r0, r1
 8013778:	f7ff ffd6 	bl	8013728 <_ZN8touchgfx4clzuEm>
 801377c:	2800      	cmp	r0, #0
 801377e:	dd08      	ble.n	8013792 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8013780:	4633      	mov	r3, r6
 8013782:	462a      	mov	r2, r5
 8013784:	4641      	mov	r1, r8
 8013786:	4638      	mov	r0, r7
 8013788:	f7ff ffec 	bl	8013764 <_ZN8touchgfx7muldivuEmmmRm>
 801378c:	b003      	add	sp, #12
 801378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013792:	f04f 33ff 	mov.w	r3, #4294967295
 8013796:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801379a:	6033      	str	r3, [r6, #0]
 801379c:	e7f6      	b.n	801378c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801379e:	fa31 f900 	lsrs.w	r9, r1, r0
 80137a2:	fb01 f308 	mul.w	r3, r1, r8
 80137a6:	d105      	bne.n	80137b4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 80137a8:	fbb3 f0f5 	udiv	r0, r3, r5
 80137ac:	fb05 3510 	mls	r5, r5, r0, r3
 80137b0:	6035      	str	r5, [r6, #0]
 80137b2:	e7eb      	b.n	801378c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 80137b4:	2301      	movs	r3, #1
 80137b6:	fa08 fb00 	lsl.w	fp, r8, r0
 80137ba:	462a      	mov	r2, r5
 80137bc:	4641      	mov	r1, r8
 80137be:	fa03 f000 	lsl.w	r0, r3, r0
 80137c2:	4633      	mov	r3, r6
 80137c4:	fbbb faf5 	udiv	sl, fp, r5
 80137c8:	3801      	subs	r0, #1
 80137ca:	fb09 f40a 	mul.w	r4, r9, sl
 80137ce:	4038      	ands	r0, r7
 80137d0:	f7ff ffc8 	bl	8013764 <_ZN8touchgfx7muldivuEmmmRm>
 80137d4:	462a      	mov	r2, r5
 80137d6:	4607      	mov	r7, r0
 80137d8:	ab01      	add	r3, sp, #4
 80137da:	fb05 b11a 	mls	r1, r5, sl, fp
 80137de:	4648      	mov	r0, r9
 80137e0:	f7ff ffc0 	bl	8013764 <_ZN8touchgfx7muldivuEmmmRm>
 80137e4:	9b01      	ldr	r3, [sp, #4]
 80137e6:	6832      	ldr	r2, [r6, #0]
 80137e8:	441a      	add	r2, r3
 80137ea:	fbb2 f3f5 	udiv	r3, r2, r5
 80137ee:	441c      	add	r4, r3
 80137f0:	fb05 2513 	mls	r5, r5, r3, r2
 80137f4:	443c      	add	r4, r7
 80137f6:	4420      	add	r0, r4
 80137f8:	e7da      	b.n	80137b0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080137fa <_ZN8touchgfx6muldivElllRl>:
 80137fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137fc:	2800      	cmp	r0, #0
 80137fe:	461e      	mov	r6, r3
 8013800:	bfba      	itte	lt
 8013802:	4240      	neglt	r0, r0
 8013804:	f04f 34ff 	movlt.w	r4, #4294967295
 8013808:	2401      	movge	r4, #1
 801380a:	2900      	cmp	r1, #0
 801380c:	bfbc      	itt	lt
 801380e:	4249      	neglt	r1, r1
 8013810:	4264      	neglt	r4, r4
 8013812:	2a00      	cmp	r2, #0
 8013814:	bfb6      	itet	lt
 8013816:	4265      	neglt	r5, r4
 8013818:	4625      	movge	r5, r4
 801381a:	4252      	neglt	r2, r2
 801381c:	4288      	cmp	r0, r1
 801381e:	bfc2      	ittt	gt
 8013820:	4603      	movgt	r3, r0
 8013822:	4608      	movgt	r0, r1
 8013824:	4619      	movgt	r1, r3
 8013826:	ab01      	add	r3, sp, #4
 8013828:	f7ff ff9c 	bl	8013764 <_ZN8touchgfx7muldivuEmmmRm>
 801382c:	9b01      	ldr	r3, [sp, #4]
 801382e:	4368      	muls	r0, r5
 8013830:	435c      	muls	r4, r3
 8013832:	6034      	str	r4, [r6, #0]
 8013834:	b002      	add	sp, #8
 8013836:	bd70      	pop	{r4, r5, r6, pc}

08013838 <_ZN8touchgfx6muldivElll>:
 8013838:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801383a:	4606      	mov	r6, r0
 801383c:	ab01      	add	r3, sp, #4
 801383e:	460d      	mov	r5, r1
 8013840:	4614      	mov	r4, r2
 8013842:	f7ff ffda 	bl	80137fa <_ZN8touchgfx6muldivElllRl>
 8013846:	2e00      	cmp	r6, #0
 8013848:	db20      	blt.n	801388c <_ZN8touchgfx6muldivElll+0x54>
 801384a:	bf14      	ite	ne
 801384c:	2301      	movne	r3, #1
 801384e:	2300      	moveq	r3, #0
 8013850:	2d00      	cmp	r5, #0
 8013852:	db1e      	blt.n	8013892 <_ZN8touchgfx6muldivElll+0x5a>
 8013854:	bf14      	ite	ne
 8013856:	2201      	movne	r2, #1
 8013858:	2200      	moveq	r2, #0
 801385a:	2c00      	cmp	r4, #0
 801385c:	fb03 f202 	mul.w	r2, r3, r2
 8013860:	db1a      	blt.n	8013898 <_ZN8touchgfx6muldivElll+0x60>
 8013862:	bf14      	ite	ne
 8013864:	2301      	movne	r3, #1
 8013866:	2300      	moveq	r3, #0
 8013868:	4353      	muls	r3, r2
 801386a:	2b01      	cmp	r3, #1
 801386c:	d117      	bne.n	801389e <_ZN8touchgfx6muldivElll+0x66>
 801386e:	2c00      	cmp	r4, #0
 8013870:	9b01      	ldr	r3, [sp, #4]
 8013872:	bfb8      	it	lt
 8013874:	4264      	neglt	r4, r4
 8013876:	2b00      	cmp	r3, #0
 8013878:	f104 0401 	add.w	r4, r4, #1
 801387c:	bfb8      	it	lt
 801387e:	425b      	neglt	r3, r3
 8013880:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8013884:	db00      	blt.n	8013888 <_ZN8touchgfx6muldivElll+0x50>
 8013886:	3001      	adds	r0, #1
 8013888:	b002      	add	sp, #8
 801388a:	bd70      	pop	{r4, r5, r6, pc}
 801388c:	f04f 33ff 	mov.w	r3, #4294967295
 8013890:	e7de      	b.n	8013850 <_ZN8touchgfx6muldivElll+0x18>
 8013892:	f04f 32ff 	mov.w	r2, #4294967295
 8013896:	e7e0      	b.n	801385a <_ZN8touchgfx6muldivElll+0x22>
 8013898:	f04f 33ff 	mov.w	r3, #4294967295
 801389c:	e7e4      	b.n	8013868 <_ZN8touchgfx6muldivElll+0x30>
 801389e:	3301      	adds	r3, #1
 80138a0:	d1f2      	bne.n	8013888 <_ZN8touchgfx6muldivElll+0x50>
 80138a2:	9b01      	ldr	r3, [sp, #4]
 80138a4:	2c00      	cmp	r4, #0
 80138a6:	bfb8      	it	lt
 80138a8:	4264      	neglt	r4, r4
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	bfb8      	it	lt
 80138ae:	425b      	neglt	r3, r3
 80138b0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 80138b4:	bfc8      	it	gt
 80138b6:	f100 30ff 	addgt.w	r0, r0, #4294967295
 80138ba:	e7e5      	b.n	8013888 <_ZN8touchgfx6muldivElll+0x50>

080138bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80138bc:	2000      	movs	r0, #0
 80138be:	4770      	bx	lr

080138c0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80138c0:	2001      	movs	r0, #1
 80138c2:	4770      	bx	lr

080138c4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80138c4:	2002      	movs	r0, #2
 80138c6:	4770      	bx	lr

080138c8 <_ZN8touchgfx6ScreenD1Ev>:
 80138c8:	4770      	bx	lr

080138ca <_ZN8touchgfx12GestureEventD1Ev>:
 80138ca:	4770      	bx	lr

080138cc <_ZN8touchgfx9DragEventD1Ev>:
 80138cc:	4770      	bx	lr

080138ce <_ZN8touchgfx10ClickEventD1Ev>:
 80138ce:	4770      	bx	lr

080138d0 <_ZN8touchgfx10ClickEventD0Ev>:
 80138d0:	b510      	push	{r4, lr}
 80138d2:	4604      	mov	r4, r0
 80138d4:	210c      	movs	r1, #12
 80138d6:	f00a fb32 	bl	801df3e <_ZdlPvj>
 80138da:	4620      	mov	r0, r4
 80138dc:	bd10      	pop	{r4, pc}

080138de <_ZN8touchgfx9DragEventD0Ev>:
 80138de:	b510      	push	{r4, lr}
 80138e0:	4604      	mov	r4, r0
 80138e2:	2110      	movs	r1, #16
 80138e4:	f00a fb2b 	bl	801df3e <_ZdlPvj>
 80138e8:	4620      	mov	r0, r4
 80138ea:	bd10      	pop	{r4, pc}

080138ec <_ZN8touchgfx12GestureEventD0Ev>:
 80138ec:	b510      	push	{r4, lr}
 80138ee:	4604      	mov	r4, r0
 80138f0:	210c      	movs	r1, #12
 80138f2:	f00a fb24 	bl	801df3e <_ZdlPvj>
 80138f6:	4620      	mov	r0, r4
 80138f8:	bd10      	pop	{r4, pc}

080138fa <_ZN8touchgfx6ScreenD0Ev>:
 80138fa:	b510      	push	{r4, lr}
 80138fc:	4604      	mov	r4, r0
 80138fe:	213c      	movs	r1, #60	; 0x3c
 8013900:	f00a fb1d 	bl	801df3e <_ZdlPvj>
 8013904:	4620      	mov	r0, r4
 8013906:	bd10      	pop	{r4, pc}

08013908 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013908:	b530      	push	{r4, r5, lr}
 801390a:	460d      	mov	r5, r1
 801390c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801390e:	b087      	sub	sp, #28
 8013910:	4604      	mov	r4, r0
 8013912:	b301      	cbz	r1, 8013956 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013914:	a801      	add	r0, sp, #4
 8013916:	f7ff fe63 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801391a:	892a      	ldrh	r2, [r5, #8]
 801391c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013920:	7928      	ldrb	r0, [r5, #4]
 8013922:	1ad2      	subs	r2, r2, r3
 8013924:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013926:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801392a:	441a      	add	r2, r3
 801392c:	896b      	ldrh	r3, [r5, #10]
 801392e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013932:	f88d 0010 	strb.w	r0, [sp, #16]
 8013936:	1b5b      	subs	r3, r3, r5
 8013938:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801393a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801393c:	442b      	add	r3, r5
 801393e:	4d07      	ldr	r5, [pc, #28]	; (801395c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013940:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013944:	a903      	add	r1, sp, #12
 8013946:	9503      	str	r5, [sp, #12]
 8013948:	f8ad 2014 	strh.w	r2, [sp, #20]
 801394c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013950:	6803      	ldr	r3, [r0, #0]
 8013952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013954:	4798      	blx	r3
 8013956:	b007      	add	sp, #28
 8013958:	bd30      	pop	{r4, r5, pc}
 801395a:	bf00      	nop
 801395c:	08022430 	.word	0x08022430

08013960 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013964:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013966:	b08a      	sub	sp, #40	; 0x28
 8013968:	4604      	mov	r4, r0
 801396a:	460d      	mov	r5, r1
 801396c:	b113      	cbz	r3, 8013974 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801396e:	790b      	ldrb	r3, [r1, #4]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d044      	beq.n	80139fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013974:	f104 0804 	add.w	r8, r4, #4
 8013978:	a803      	add	r0, sp, #12
 801397a:	4641      	mov	r1, r8
 801397c:	f7ff fe30 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013980:	792b      	ldrb	r3, [r5, #4]
 8013982:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013986:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801398a:	b983      	cbnz	r3, 80139ae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801398c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8013990:	892a      	ldrh	r2, [r5, #8]
 8013992:	88e9      	ldrh	r1, [r5, #6]
 8013994:	4640      	mov	r0, r8
 8013996:	1b92      	subs	r2, r2, r6
 8013998:	9301      	str	r3, [sp, #4]
 801399a:	1bc9      	subs	r1, r1, r7
 801399c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80139a0:	b212      	sxth	r2, r2
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	b209      	sxth	r1, r1
 80139a6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80139aa:	f7f9 f891 	bl	800cad0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80139ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80139b0:	b329      	cbz	r1, 80139fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80139b2:	a805      	add	r0, sp, #20
 80139b4:	f7ff fe14 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80139b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80139bc:	792b      	ldrb	r3, [r5, #4]
 80139be:	a907      	add	r1, sp, #28
 80139c0:	1abf      	subs	r7, r7, r2
 80139c2:	88ea      	ldrh	r2, [r5, #6]
 80139c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80139c6:	4417      	add	r7, r2
 80139c8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80139ca:	f88d 3020 	strb.w	r3, [sp, #32]
 80139ce:	4417      	add	r7, r2
 80139d0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80139d4:	1ab6      	subs	r6, r6, r2
 80139d6:	892a      	ldrh	r2, [r5, #8]
 80139d8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80139dc:	4416      	add	r6, r2
 80139de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80139e0:	4416      	add	r6, r2
 80139e2:	4a08      	ldr	r2, [pc, #32]	; (8013a04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80139e4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80139e8:	2600      	movs	r6, #0
 80139ea:	9207      	str	r2, [sp, #28]
 80139ec:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80139f0:	6803      	ldr	r3, [r0, #0]
 80139f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139f4:	4798      	blx	r3
 80139f6:	792b      	ldrb	r3, [r5, #4]
 80139f8:	b10b      	cbz	r3, 80139fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80139fa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80139fe:	b00a      	add	sp, #40	; 0x28
 8013a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a04:	08022408 	.word	0x08022408

08013a08 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a0c:	460c      	mov	r4, r1
 8013a0e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013a10:	b088      	sub	sp, #32
 8013a12:	4605      	mov	r5, r0
 8013a14:	2900      	cmp	r1, #0
 8013a16:	d06d      	beq.n	8013af4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013a18:	4668      	mov	r0, sp
 8013a1a:	f7ff fde1 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a1e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8013a20:	88e3      	ldrh	r3, [r4, #6]
 8013a22:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013a26:	440b      	add	r3, r1
 8013a28:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013a2c:	b21b      	sxth	r3, r3
 8013a2e:	4543      	cmp	r3, r8
 8013a30:	db31      	blt.n	8013a96 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013a32:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013a36:	44c4      	add	ip, r8
 8013a38:	fa0f fc8c 	sxth.w	ip, ip
 8013a3c:	4563      	cmp	r3, ip
 8013a3e:	da2a      	bge.n	8013a96 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013a40:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8013a42:	8926      	ldrh	r6, [r4, #8]
 8013a44:	4416      	add	r6, r2
 8013a46:	b236      	sxth	r6, r6
 8013a48:	42be      	cmp	r6, r7
 8013a4a:	db24      	blt.n	8013a96 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013a4c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013a50:	4438      	add	r0, r7
 8013a52:	b200      	sxth	r0, r0
 8013a54:	4286      	cmp	r6, r0
 8013a56:	da1e      	bge.n	8013a96 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013a58:	8963      	ldrh	r3, [r4, #10]
 8013a5a:	4419      	add	r1, r3
 8013a5c:	b209      	sxth	r1, r1
 8013a5e:	4541      	cmp	r1, r8
 8013a60:	db08      	blt.n	8013a74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013a62:	4561      	cmp	r1, ip
 8013a64:	da06      	bge.n	8013a74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013a66:	89a3      	ldrh	r3, [r4, #12]
 8013a68:	441a      	add	r2, r3
 8013a6a:	b212      	sxth	r2, r2
 8013a6c:	42ba      	cmp	r2, r7
 8013a6e:	db01      	blt.n	8013a74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013a70:	4282      	cmp	r2, r0
 8013a72:	db10      	blt.n	8013a96 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013a74:	4b21      	ldr	r3, [pc, #132]	; (8013afc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013a76:	a904      	add	r1, sp, #16
 8013a78:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013a7a:	9304      	str	r3, [sp, #16]
 8013a7c:	2302      	movs	r3, #2
 8013a7e:	f88d 3014 	strb.w	r3, [sp, #20]
 8013a82:	2300      	movs	r3, #0
 8013a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a88:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013a8c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013a90:	6803      	ldr	r3, [r0, #0]
 8013a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a94:	4798      	blx	r3
 8013a96:	1d29      	adds	r1, r5, #4
 8013a98:	a802      	add	r0, sp, #8
 8013a9a:	f7ff fda1 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013a9e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013aa2:	88e0      	ldrh	r0, [r4, #6]
 8013aa4:	eba3 0808 	sub.w	r8, r3, r8
 8013aa8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013aac:	7921      	ldrb	r1, [r4, #4]
 8013aae:	fa1f f888 	uxth.w	r8, r8
 8013ab2:	1bdf      	subs	r7, r3, r7
 8013ab4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8013ab8:	b2bb      	uxth	r3, r7
 8013aba:	4440      	add	r0, r8
 8013abc:	8922      	ldrh	r2, [r4, #8]
 8013abe:	8967      	ldrh	r7, [r4, #10]
 8013ac0:	4460      	add	r0, ip
 8013ac2:	89a4      	ldrh	r4, [r4, #12]
 8013ac4:	441a      	add	r2, r3
 8013ac6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013ac8:	44b8      	add	r8, r7
 8013aca:	4423      	add	r3, r4
 8013acc:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013ad0:	4432      	add	r2, r6
 8013ad2:	44e0      	add	r8, ip
 8013ad4:	4433      	add	r3, r6
 8013ad6:	4c0a      	ldr	r4, [pc, #40]	; (8013b00 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013ad8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013ada:	f88d 1014 	strb.w	r1, [sp, #20]
 8013ade:	a904      	add	r1, sp, #16
 8013ae0:	9404      	str	r4, [sp, #16]
 8013ae2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013ae6:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013aea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013aee:	6803      	ldr	r3, [r0, #0]
 8013af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013af2:	4798      	blx	r3
 8013af4:	b008      	add	sp, #32
 8013af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013afa:	bf00      	nop
 8013afc:	08022408 	.word	0x08022408
 8013b00:	0802241c 	.word	0x0802241c

08013b04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b06:	4604      	mov	r4, r0
 8013b08:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8013b0c:	3201      	adds	r2, #1
 8013b0e:	d112      	bne.n	8013b36 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013b10:	2500      	movs	r5, #0
 8013b12:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013b16:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013b1a:	6803      	ldr	r3, [r0, #0]
 8013b1c:	9500      	str	r5, [sp, #0]
 8013b1e:	466d      	mov	r5, sp
 8013b20:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013b24:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013b28:	4629      	mov	r1, r5
 8013b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b2c:	4798      	blx	r3
 8013b2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013b32:	e884 0003 	stmia.w	r4, {r0, r1}
 8013b36:	4620      	mov	r0, r4
 8013b38:	b003      	add	sp, #12
 8013b3a:	bd30      	pop	{r4, r5, pc}

08013b3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8013b3c:	b513      	push	{r0, r1, r4, lr}
 8013b3e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013b42:	4604      	mov	r4, r0
 8013b44:	3301      	adds	r3, #1
 8013b46:	d109      	bne.n	8013b5c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013b48:	4601      	mov	r1, r0
 8013b4a:	4668      	mov	r0, sp
 8013b4c:	f7ff fd48 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b50:	f8bd 3000 	ldrh.w	r3, [sp]
 8013b54:	8423      	strh	r3, [r4, #32]
 8013b56:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013b5a:	8463      	strh	r3, [r4, #34]	; 0x22
 8013b5c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013b60:	b002      	add	sp, #8
 8013b62:	bd10      	pop	{r4, pc}

08013b64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013b64:	b513      	push	{r0, r1, r4, lr}
 8013b66:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8013b6a:	4604      	mov	r4, r0
 8013b6c:	3301      	adds	r3, #1
 8013b6e:	d109      	bne.n	8013b84 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013b70:	4601      	mov	r1, r0
 8013b72:	4668      	mov	r0, sp
 8013b74:	f7ff fd34 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b78:	f8bd 3000 	ldrh.w	r3, [sp]
 8013b7c:	8423      	strh	r3, [r4, #32]
 8013b7e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013b82:	8463      	strh	r3, [r4, #34]	; 0x22
 8013b84:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013b88:	b002      	add	sp, #8
 8013b8a:	bd10      	pop	{r4, pc}

08013b8c <_ZN8touchgfx6ScreenC1Ev>:
 8013b8c:	b570      	push	{r4, r5, r6, lr}
 8013b8e:	4b17      	ldr	r3, [pc, #92]	; (8013bec <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013b90:	4605      	mov	r5, r0
 8013b92:	4a17      	ldr	r2, [pc, #92]	; (8013bf0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013b94:	2101      	movs	r1, #1
 8013b96:	f845 3b04 	str.w	r3, [r5], #4
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	6042      	str	r2, [r0, #4]
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	8103      	strh	r3, [r0, #8]
 8013ba2:	8143      	strh	r3, [r0, #10]
 8013ba4:	8183      	strh	r3, [r0, #12]
 8013ba6:	81c3      	strh	r3, [r0, #14]
 8013ba8:	8203      	strh	r3, [r0, #16]
 8013baa:	8243      	strh	r3, [r0, #18]
 8013bac:	8283      	strh	r3, [r0, #20]
 8013bae:	82c3      	strh	r3, [r0, #22]
 8013bb0:	6203      	str	r3, [r0, #32]
 8013bb2:	8483      	strh	r3, [r0, #36]	; 0x24
 8013bb4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013bb6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8013bba:	6343      	str	r3, [r0, #52]	; 0x34
 8013bbc:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8013bc0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013bc4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8013bc8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8013bcc:	4b09      	ldr	r3, [pc, #36]	; (8013bf4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013bd4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013bd6:	4a08      	ldr	r2, [pc, #32]	; (8013bf8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013bd8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013bdc:	4798      	blx	r3
 8013bde:	6863      	ldr	r3, [r4, #4]
 8013be0:	4628      	mov	r0, r5
 8013be2:	4631      	mov	r1, r6
 8013be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013be6:	4798      	blx	r3
 8013be8:	4620      	mov	r0, r4
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	08022444 	.word	0x08022444
 8013bf0:	08021bd8 	.word	0x08021bd8
 8013bf4:	2400f49a 	.word	0x2400f49a
 8013bf8:	2400f498 	.word	0x2400f498

08013bfc <_ZN8touchgfx6Screen4drawEv>:
 8013bfc:	4b09      	ldr	r3, [pc, #36]	; (8013c24 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8013bfe:	b507      	push	{r0, r1, r2, lr}
 8013c00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c04:	2100      	movs	r1, #0
 8013c06:	4b08      	ldr	r3, [pc, #32]	; (8013c28 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8013c08:	9100      	str	r1, [sp, #0]
 8013c0a:	4669      	mov	r1, sp
 8013c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013c10:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013c14:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013c18:	6803      	ldr	r3, [r0, #0]
 8013c1a:	689b      	ldr	r3, [r3, #8]
 8013c1c:	4798      	blx	r3
 8013c1e:	b003      	add	sp, #12
 8013c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8013c24:	2400f498 	.word	0x2400f498
 8013c28:	2400f49a 	.word	0x2400f49a

08013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8013c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c30:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013c34:	b089      	sub	sp, #36	; 0x24
 8013c36:	4680      	mov	r8, r0
 8013c38:	460c      	mov	r4, r1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	4615      	mov	r5, r2
 8013c3e:	dd0e      	ble.n	8013c5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013c40:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	dd0a      	ble.n	8013c5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013c48:	4628      	mov	r0, r5
 8013c4a:	f7ff ff5b 	bl	8013b04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013c4e:	4621      	mov	r1, r4
 8013c50:	f7fe fb4d 	bl	80122ee <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013c54:	69eb      	ldr	r3, [r5, #28]
 8013c56:	b928      	cbnz	r0, 8013c64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013c58:	461d      	mov	r5, r3
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d1f4      	bne.n	8013c48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013c5e:	b009      	add	sp, #36	; 0x24
 8013c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c64:	ae04      	add	r6, sp, #16
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	f000 80b5 	beq.w	8013dd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013c6c:	682b      	ldr	r3, [r5, #0]
 8013c6e:	4629      	mov	r1, r5
 8013c70:	a802      	add	r0, sp, #8
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	4798      	blx	r3
 8013c76:	4628      	mov	r0, r5
 8013c78:	f7ff ff60 	bl	8013b3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013c7c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013c80:	4407      	add	r7, r0
 8013c82:	4628      	mov	r0, r5
 8013c84:	f7ff ff6e 	bl	8013b64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013c88:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013c8c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013c90:	b23f      	sxth	r7, r7
 8013c92:	4418      	add	r0, r3
 8013c94:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013c98:	4621      	mov	r1, r4
 8013c9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013c9e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ca8:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013cac:	f7f8 fff2 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 8013cb0:	4628      	mov	r0, r5
 8013cb2:	f7ff ff27 	bl	8013b04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013cb6:	ab06      	add	r3, sp, #24
 8013cb8:	4602      	mov	r2, r0
 8013cba:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013cbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8013cc2:	4611      	mov	r1, r2
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7f8 ffe5 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 8013cca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013cce:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013cd2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8013cd6:	4299      	cmp	r1, r3
 8013cd8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8013cdc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8013ce0:	d10b      	bne.n	8013cfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013ce2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013ce6:	4552      	cmp	r2, sl
 8013ce8:	d107      	bne.n	8013cfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013cea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013cee:	455a      	cmp	r2, fp
 8013cf0:	d103      	bne.n	8013cfa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013cf2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013cf6:	454a      	cmp	r2, r9
 8013cf8:	d06d      	beq.n	8013dd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013cfa:	f1bb 0f00 	cmp.w	fp, #0
 8013cfe:	dd65      	ble.n	8013dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013d00:	f1b9 0f00 	cmp.w	r9, #0
 8013d04:	dd62      	ble.n	8013dcc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013d06:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013d0a:	fa1f f08a 	uxth.w	r0, sl
 8013d0e:	4552      	cmp	r2, sl
 8013d10:	9000      	str	r0, [sp, #0]
 8013d12:	da12      	bge.n	8013d3a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8013d14:	9301      	str	r3, [sp, #4]
 8013d16:	9b00      	ldr	r3, [sp, #0]
 8013d18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013d1c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013d20:	1a9a      	subs	r2, r3, r2
 8013d22:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013d26:	4631      	mov	r1, r6
 8013d28:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013d2c:	4640      	mov	r0, r8
 8013d2e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013d32:	69ea      	ldr	r2, [r5, #28]
 8013d34:	f7ff ff7a 	bl	8013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013d38:	9b01      	ldr	r3, [sp, #4]
 8013d3a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013d3e:	b29f      	uxth	r7, r3
 8013d40:	429a      	cmp	r2, r3
 8013d42:	da0d      	bge.n	8013d60 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013d44:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013d48:	1aba      	subs	r2, r7, r2
 8013d4a:	f8ad a012 	strh.w	sl, [sp, #18]
 8013d4e:	4631      	mov	r1, r6
 8013d50:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013d54:	4640      	mov	r0, r8
 8013d56:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013d5a:	69ea      	ldr	r2, [r5, #28]
 8013d5c:	f7ff ff66 	bl	8013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013d60:	8822      	ldrh	r2, [r4, #0]
 8013d62:	445f      	add	r7, fp
 8013d64:	88a3      	ldrh	r3, [r4, #4]
 8013d66:	b2bf      	uxth	r7, r7
 8013d68:	4413      	add	r3, r2
 8013d6a:	b23a      	sxth	r2, r7
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	b219      	sxth	r1, r3
 8013d70:	4291      	cmp	r1, r2
 8013d72:	dd0d      	ble.n	8013d90 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013d74:	1bdb      	subs	r3, r3, r7
 8013d76:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013d7a:	f8ad a012 	strh.w	sl, [sp, #18]
 8013d7e:	4631      	mov	r1, r6
 8013d80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013d84:	4640      	mov	r0, r8
 8013d86:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013d8a:	69ea      	ldr	r2, [r5, #28]
 8013d8c:	f7ff ff4e 	bl	8013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013d90:	88e2      	ldrh	r2, [r4, #6]
 8013d92:	8863      	ldrh	r3, [r4, #2]
 8013d94:	4413      	add	r3, r2
 8013d96:	9a00      	ldr	r2, [sp, #0]
 8013d98:	444a      	add	r2, r9
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	fa1f f982 	uxth.w	r9, r2
 8013da0:	b219      	sxth	r1, r3
 8013da2:	fa0f f289 	sxth.w	r2, r9
 8013da6:	428a      	cmp	r2, r1
 8013da8:	da15      	bge.n	8013dd6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013daa:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013dae:	eba3 0309 	sub.w	r3, r3, r9
 8013db2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013db6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013dba:	4631      	mov	r1, r6
 8013dbc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013dc0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013dc8:	69ea      	ldr	r2, [r5, #28]
 8013dca:	e001      	b.n	8013dd0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8013dcc:	69ea      	ldr	r2, [r5, #28]
 8013dce:	4621      	mov	r1, r4
 8013dd0:	4640      	mov	r0, r8
 8013dd2:	f7ff ff2b 	bl	8013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f7ff fe94 	bl	8013b04 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013ddc:	6861      	ldr	r1, [r4, #4]
 8013dde:	4602      	mov	r2, r0
 8013de0:	4633      	mov	r3, r6
 8013de2:	6820      	ldr	r0, [r4, #0]
 8013de4:	c303      	stmia	r3!, {r0, r1}
 8013de6:	4611      	mov	r1, r2
 8013de8:	4630      	mov	r0, r6
 8013dea:	f7f8 ff53 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 8013dee:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	f77f af33 	ble.w	8013c5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013df8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	f77f af2e 	ble.w	8013c5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013e02:	4628      	mov	r0, r5
 8013e04:	f7ff fe9a 	bl	8013b3c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013e08:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013e0c:	1a18      	subs	r0, r3, r0
 8013e0e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013e12:	4628      	mov	r0, r5
 8013e14:	f7ff fea6 	bl	8013b64 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013e18:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013e1c:	4631      	mov	r1, r6
 8013e1e:	1a18      	subs	r0, r3, r0
 8013e20:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013e24:	4628      	mov	r0, r5
 8013e26:	682b      	ldr	r3, [r5, #0]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	4798      	blx	r3
 8013e2c:	e717      	b.n	8013c5e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08013e2e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8013e2e:	b570      	push	{r4, r5, r6, lr}
 8013e30:	1d06      	adds	r6, r0, #4
 8013e32:	b086      	sub	sp, #24
 8013e34:	460c      	mov	r4, r1
 8013e36:	2300      	movs	r3, #0
 8013e38:	4631      	mov	r1, r6
 8013e3a:	4605      	mov	r5, r0
 8013e3c:	a802      	add	r0, sp, #8
 8013e3e:	9301      	str	r3, [sp, #4]
 8013e40:	f7ff fbce 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013e44:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013e48:	8822      	ldrh	r2, [r4, #0]
 8013e4a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8013e4e:	1ad2      	subs	r2, r2, r3
 8013e50:	8863      	ldrh	r3, [r4, #2]
 8013e52:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013e56:	1a5b      	subs	r3, r3, r1
 8013e58:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013e5c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013e60:	aa01      	add	r2, sp, #4
 8013e62:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013e66:	4630      	mov	r0, r6
 8013e68:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013e6c:	a904      	add	r1, sp, #16
 8013e6e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013e72:	f7f8 ffe7 	bl	800ce44 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8013e76:	9a01      	ldr	r2, [sp, #4]
 8013e78:	b11a      	cbz	r2, 8013e82 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8013e7a:	4621      	mov	r1, r4
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	f7ff fed5 	bl	8013c2c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013e82:	b006      	add	sp, #24
 8013e84:	bd70      	pop	{r4, r5, r6, pc}

08013e86 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8013e86:	4602      	mov	r2, r0
 8013e88:	b530      	push	{r4, r5, lr}
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	b085      	sub	sp, #20
 8013e8e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8013e92:	460d      	mov	r5, r1
 8013e94:	466b      	mov	r3, sp
 8013e96:	6851      	ldr	r1, [r2, #4]
 8013e98:	c303      	stmia	r3!, {r0, r1}
 8013e9a:	4629      	mov	r1, r5
 8013e9c:	4668      	mov	r0, sp
 8013e9e:	f7f8 fef9 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 8013ea2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013ea6:	b12b      	cbz	r3, 8013eb4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8013ea8:	4669      	mov	r1, sp
 8013eaa:	4620      	mov	r0, r4
 8013eac:	f7ff ffbf 	bl	8013e2e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013eb0:	b005      	add	sp, #20
 8013eb2:	bd30      	pop	{r4, r5, pc}
 8013eb4:	3404      	adds	r4, #4
 8013eb6:	a802      	add	r0, sp, #8
 8013eb8:	4621      	mov	r1, r4
 8013eba:	f7ff fb91 	bl	80135e0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013ebe:	f8bd 3000 	ldrh.w	r3, [sp]
 8013ec2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013ec6:	4669      	mov	r1, sp
 8013ec8:	4620      	mov	r0, r4
 8013eca:	1a9b      	subs	r3, r3, r2
 8013ecc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013ed0:	f8ad 3000 	strh.w	r3, [sp]
 8013ed4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013ed8:	1a9b      	subs	r3, r3, r2
 8013eda:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013ede:	f7f8 ff78 	bl	800cdd2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8013ee2:	e7e5      	b.n	8013eb0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08013ee4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	680a      	ldr	r2, [r1, #0]
 8013ee8:	1d01      	adds	r1, r0, #4
 8013eea:	6992      	ldr	r2, [r2, #24]
 8013eec:	4618      	mov	r0, r3
 8013eee:	4710      	bx	r2

08013ef0 <_ZN8touchgfx12TextProviderC1Ev>:
 8013ef0:	b538      	push	{r3, r4, r5, lr}
 8013ef2:	2500      	movs	r5, #0
 8013ef4:	2302      	movs	r3, #2
 8013ef6:	4604      	mov	r4, r0
 8013ef8:	220e      	movs	r2, #14
 8013efa:	7403      	strb	r3, [r0, #16]
 8013efc:	4629      	mov	r1, r5
 8013efe:	6145      	str	r5, [r0, #20]
 8013f00:	7605      	strb	r5, [r0, #24]
 8013f02:	83c5      	strh	r5, [r0, #30]
 8013f04:	8405      	strh	r5, [r0, #32]
 8013f06:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013f08:	8705      	strh	r5, [r0, #56]	; 0x38
 8013f0a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8013f0c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8013f10:	e9c0 5500 	strd	r5, r5, [r0]
 8013f14:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8013f18:	304c      	adds	r0, #76	; 0x4c
 8013f1a:	f00a f9bf 	bl	801e29c <memset>
 8013f1e:	2301      	movs	r3, #1
 8013f20:	4620      	mov	r0, r4
 8013f22:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8013f26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013f2a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8013f2e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8013f32:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8013f36:	f7ee ffeb 	bl	8002f10 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	bd38      	pop	{r3, r4, r5, pc}

08013f3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8013f3e:	b530      	push	{r4, r5, lr}
 8013f40:	2500      	movs	r5, #0
 8013f42:	2401      	movs	r4, #1
 8013f44:	6843      	ldr	r3, [r0, #4]
 8013f46:	b913      	cbnz	r3, 8013f4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013f48:	6803      	ldr	r3, [r0, #0]
 8013f4a:	b313      	cbz	r3, 8013f92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8013f4c:	6043      	str	r3, [r0, #4]
 8013f4e:	7e03      	ldrb	r3, [r0, #24]
 8013f50:	b143      	cbz	r3, 8013f64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8013f52:	6943      	ldr	r3, [r0, #20]
 8013f54:	b12b      	cbz	r3, 8013f62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013f56:	881a      	ldrh	r2, [r3, #0]
 8013f58:	b11a      	cbz	r2, 8013f62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013f5a:	1c9a      	adds	r2, r3, #2
 8013f5c:	6142      	str	r2, [r0, #20]
 8013f5e:	8818      	ldrh	r0, [r3, #0]
 8013f60:	bd30      	pop	{r4, r5, pc}
 8013f62:	7605      	strb	r5, [r0, #24]
 8013f64:	6843      	ldr	r3, [r0, #4]
 8013f66:	8819      	ldrh	r1, [r3, #0]
 8013f68:	b199      	cbz	r1, 8013f92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8013f6a:	1c9a      	adds	r2, r3, #2
 8013f6c:	2902      	cmp	r1, #2
 8013f6e:	6042      	str	r2, [r0, #4]
 8013f70:	d1f5      	bne.n	8013f5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8013f72:	7c03      	ldrb	r3, [r0, #16]
 8013f74:	2b01      	cmp	r3, #1
 8013f76:	d8e5      	bhi.n	8013f44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013f78:	1c5a      	adds	r2, r3, #1
 8013f7a:	3302      	adds	r3, #2
 8013f7c:	7402      	strb	r2, [r0, #16]
 8013f7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013f82:	6143      	str	r3, [r0, #20]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d0dd      	beq.n	8013f44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d0da      	beq.n	8013f44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013f8e:	7604      	strb	r4, [r0, #24]
 8013f90:	e7d8      	b.n	8013f44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7e4      	b.n	8013f60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08013f96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8013f96:	6001      	str	r1, [r0, #0]
 8013f98:	2100      	movs	r1, #0
 8013f9a:	b430      	push	{r4, r5}
 8013f9c:	6041      	str	r1, [r0, #4]
 8013f9e:	6815      	ldr	r5, [r2, #0]
 8013fa0:	6085      	str	r5, [r0, #8]
 8013fa2:	6852      	ldr	r2, [r2, #4]
 8013fa4:	6443      	str	r3, [r0, #68]	; 0x44
 8013fa6:	9b02      	ldr	r3, [sp, #8]
 8013fa8:	60c2      	str	r2, [r0, #12]
 8013faa:	7401      	strb	r1, [r0, #16]
 8013fac:	6141      	str	r1, [r0, #20]
 8013fae:	7601      	strb	r1, [r0, #24]
 8013fb0:	8701      	strh	r1, [r0, #56]	; 0x38
 8013fb2:	8401      	strh	r1, [r0, #32]
 8013fb4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8013fb8:	6483      	str	r3, [r0, #72]	; 0x48
 8013fba:	bc30      	pop	{r4, r5}
 8013fbc:	f7ee bfa8 	b.w	8002f10 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08013fc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8013fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fc2:	4605      	mov	r5, r0
 8013fc4:	4608      	mov	r0, r1
 8013fc6:	b1f1      	cbz	r1, 8014006 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8013fc8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8013fcc:	460b      	mov	r3, r1
 8013fce:	f101 0708 	add.w	r7, r1, #8
 8013fd2:	4622      	mov	r2, r4
 8013fd4:	6818      	ldr	r0, [r3, #0]
 8013fd6:	3308      	adds	r3, #8
 8013fd8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013fdc:	4626      	mov	r6, r4
 8013fde:	42bb      	cmp	r3, r7
 8013fe0:	c603      	stmia	r6!, {r0, r1}
 8013fe2:	4634      	mov	r4, r6
 8013fe4:	d1f6      	bne.n	8013fd4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8013fe6:	6818      	ldr	r0, [r3, #0]
 8013fe8:	6030      	str	r0, [r6, #0]
 8013fea:	4610      	mov	r0, r2
 8013fec:	889b      	ldrh	r3, [r3, #4]
 8013fee:	80b3      	strh	r3, [r6, #4]
 8013ff0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8013ff4:	015b      	lsls	r3, r3, #5
 8013ff6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013ffa:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8013ffe:	430b      	orrs	r3, r1
 8014000:	425b      	negs	r3, r3
 8014002:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8014006:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014008 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	460c      	mov	r4, r1
 801400c:	6811      	ldr	r1, [r2, #0]
 801400e:	4610      	mov	r0, r2
 8014010:	68cd      	ldr	r5, [r1, #12]
 8014012:	4619      	mov	r1, r3
 8014014:	47a8      	blx	r5
 8014016:	2800      	cmp	r0, #0
 8014018:	bf08      	it	eq
 801401a:	4620      	moveq	r0, r4
 801401c:	bd38      	pop	{r3, r4, r5, pc}
	...

08014020 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014022:	4604      	mov	r4, r0
 8014024:	4615      	mov	r5, r2
 8014026:	4608      	mov	r0, r1
 8014028:	b93a      	cbnz	r2, 801403a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801402a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801402e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8014032:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8014036:	4628      	mov	r0, r5
 8014038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801403a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801403e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8014042:	8893      	ldrh	r3, [r2, #4]
 8014044:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014048:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801404c:	79ee      	ldrb	r6, [r5, #7]
 801404e:	4316      	orrs	r6, r2
 8014050:	19da      	adds	r2, r3, r7
 8014052:	b291      	uxth	r1, r2
 8014054:	b2b7      	uxth	r7, r6
 8014056:	291d      	cmp	r1, #29
 8014058:	d87b      	bhi.n	8014152 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801405a:	2201      	movs	r2, #1
 801405c:	10f6      	asrs	r6, r6, #3
 801405e:	408a      	lsls	r2, r1
 8014060:	4974      	ldr	r1, [pc, #464]	; (8014234 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8014062:	420a      	tst	r2, r1
 8014064:	d12e      	bne.n	80140c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8014066:	f412 7f60 	tst.w	r2, #896	; 0x380
 801406a:	d072      	beq.n	8014152 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801406c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8014070:	462b      	mov	r3, r5
 8014072:	f105 0e08 	add.w	lr, r5, #8
 8014076:	4615      	mov	r5, r2
 8014078:	6818      	ldr	r0, [r3, #0]
 801407a:	3308      	adds	r3, #8
 801407c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014080:	4694      	mov	ip, r2
 8014082:	4573      	cmp	r3, lr
 8014084:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014088:	4662      	mov	r2, ip
 801408a:	d1f5      	bne.n	8014078 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801408c:	6818      	ldr	r0, [r3, #0]
 801408e:	f8cc 0000 	str.w	r0, [ip]
 8014092:	889b      	ldrh	r3, [r3, #4]
 8014094:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014098:	b2b3      	uxth	r3, r6
 801409a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801409e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80140a2:	1aca      	subs	r2, r1, r3
 80140a4:	1bcf      	subs	r7, r1, r7
 80140a6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80140aa:	b292      	uxth	r2, r2
 80140ac:	1afb      	subs	r3, r7, r3
 80140ae:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80140b2:	10d2      	asrs	r2, r2, #3
 80140b4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80140b8:	4302      	orrs	r2, r0
 80140ba:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80140be:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80140c2:	e7b8      	b.n	8014036 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80140c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80140c6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80140ca:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80140cc:	f640 6333 	movw	r3, #3635	; 0xe33
 80140d0:	4299      	cmp	r1, r3
 80140d2:	d110      	bne.n	80140f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80140d4:	6803      	ldr	r3, [r0, #0]
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	4798      	blx	r3
 80140da:	7b41      	ldrb	r1, [r0, #13]
 80140dc:	00cb      	lsls	r3, r1, #3
 80140de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80140e2:	7a03      	ldrb	r3, [r0, #8]
 80140e4:	0648      	lsls	r0, r1, #25
 80140e6:	ea43 0302 	orr.w	r3, r3, r2
 80140ea:	bf44      	itt	mi
 80140ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80140f0:	b21b      	sxthmi	r3, r3
 80140f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80140f6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80140fa:	462a      	mov	r2, r5
 80140fc:	f105 0c08 	add.w	ip, r5, #8
 8014100:	443b      	add	r3, r7
 8014102:	4433      	add	r3, r6
 8014104:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8014108:	b29b      	uxth	r3, r3
 801410a:	4635      	mov	r5, r6
 801410c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014110:	6810      	ldr	r0, [r2, #0]
 8014112:	3208      	adds	r2, #8
 8014114:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014118:	4637      	mov	r7, r6
 801411a:	4562      	cmp	r2, ip
 801411c:	c703      	stmia	r7!, {r0, r1}
 801411e:	463e      	mov	r6, r7
 8014120:	d1f6      	bne.n	8014110 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8014122:	6810      	ldr	r0, [r2, #0]
 8014124:	6038      	str	r0, [r7, #0]
 8014126:	8892      	ldrh	r2, [r2, #4]
 8014128:	80ba      	strh	r2, [r7, #4]
 801412a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801412e:	10db      	asrs	r3, r3, #3
 8014130:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014134:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014138:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801413c:	4313      	orrs	r3, r2
 801413e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8014142:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014146:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801414a:	1a9b      	subs	r3, r3, r2
 801414c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8014150:	e771      	b.n	8014036 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014152:	f023 0204 	bic.w	r2, r3, #4
 8014156:	f640 611b 	movw	r1, #3611	; 0xe1b
 801415a:	428a      	cmp	r2, r1
 801415c:	d003      	beq.n	8014166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801415e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8014162:	4293      	cmp	r3, r2
 8014164:	d120      	bne.n	80141a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8014166:	3b01      	subs	r3, #1
 8014168:	4602      	mov	r2, r0
 801416a:	4629      	mov	r1, r5
 801416c:	4620      	mov	r0, r4
 801416e:	b29b      	uxth	r3, r3
 8014170:	f7ff ff4a 	bl	8014008 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014174:	7b41      	ldrb	r1, [r0, #13]
 8014176:	00cb      	lsls	r3, r1, #3
 8014178:	0649      	lsls	r1, r1, #25
 801417a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801417e:	7a03      	ldrb	r3, [r0, #8]
 8014180:	ea43 0302 	orr.w	r3, r3, r2
 8014184:	bf44      	itt	mi
 8014186:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801418a:	b21b      	sxthmi	r3, r3
 801418c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014190:	7b6b      	ldrb	r3, [r5, #13]
 8014192:	7aaa      	ldrb	r2, [r5, #10]
 8014194:	005b      	lsls	r3, r3, #1
 8014196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801419a:	4313      	orrs	r3, r2
 801419c:	115a      	asrs	r2, r3, #5
 801419e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80141a2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80141a6:	e035      	b.n	8014214 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80141a8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80141ac:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80141b0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80141b4:	7a2a      	ldrb	r2, [r5, #8]
 80141b6:	ea42 0201 	orr.w	r2, r2, r1
 80141ba:	f640 6109 	movw	r1, #3593	; 0xe09
 80141be:	bf1c      	itt	ne
 80141c0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80141c4:	b212      	sxthne	r2, r2
 80141c6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80141ca:	f023 0210 	bic.w	r2, r3, #16
 80141ce:	428a      	cmp	r2, r1
 80141d0:	d003      	beq.n	80141da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80141d2:	f640 6213 	movw	r2, #3603	; 0xe13
 80141d6:	4293      	cmp	r3, r2
 80141d8:	d129      	bne.n	801422e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80141da:	7b6e      	ldrb	r6, [r5, #13]
 80141dc:	4629      	mov	r1, r5
 80141de:	0076      	lsls	r6, r6, #1
 80141e0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80141e4:	7aae      	ldrb	r6, [r5, #10]
 80141e6:	4316      	orrs	r6, r2
 80141e8:	f640 6213 	movw	r2, #3603	; 0xe13
 80141ec:	4293      	cmp	r3, r2
 80141ee:	4602      	mov	r2, r0
 80141f0:	4620      	mov	r0, r4
 80141f2:	bf16      	itet	ne
 80141f4:	f103 33ff 	addne.w	r3, r3, #4294967295
 80141f8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80141fc:	b29b      	uxthne	r3, r3
 80141fe:	f7ff ff03 	bl	8014008 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014202:	7b43      	ldrb	r3, [r0, #13]
 8014204:	7a82      	ldrb	r2, [r0, #10]
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801420c:	4313      	orrs	r3, r2
 801420e:	1af6      	subs	r6, r6, r3
 8014210:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8014214:	7b69      	ldrb	r1, [r5, #13]
 8014216:	00cb      	lsls	r3, r1, #3
 8014218:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801421c:	7a2b      	ldrb	r3, [r5, #8]
 801421e:	4313      	orrs	r3, r2
 8014220:	064a      	lsls	r2, r1, #25
 8014222:	bf44      	itt	mi
 8014224:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014228:	b21b      	sxthmi	r3, r3
 801422a:	1bdb      	subs	r3, r3, r7
 801422c:	e747      	b.n	80140be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801422e:	2300      	movs	r3, #0
 8014230:	e7b7      	b.n	80141a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8014232:	bf00      	nop
 8014234:	3fc00079 	.word	0x3fc00079

08014238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801423c:	4604      	mov	r4, r0
 801423e:	b942      	cbnz	r2, 8014252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014244:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8014248:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801424c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8014250:	e047      	b.n	80142e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014252:	7b51      	ldrb	r1, [r2, #13]
 8014254:	8893      	ldrh	r3, [r2, #4]
 8014256:	010d      	lsls	r5, r1, #4
 8014258:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801425c:	79d5      	ldrb	r5, [r2, #7]
 801425e:	4305      	orrs	r5, r0
 8014260:	2d04      	cmp	r5, #4
 8014262:	bfcc      	ite	gt
 8014264:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014268:	f04f 0e01 	movle.w	lr, #1
 801426c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8014270:	f200 80ab 	bhi.w	80143ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014274:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014278:	4283      	cmp	r3, r0
 801427a:	d216      	bcs.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801427c:	f240 605b 	movw	r0, #1627	; 0x65b
 8014280:	4283      	cmp	r3, r0
 8014282:	d859      	bhi.n	8014338 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8014284:	f240 6057 	movw	r0, #1623	; 0x657
 8014288:	4283      	cmp	r3, r0
 801428a:	d20e      	bcs.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801428c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014290:	d24a      	bcs.n	8014328 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8014292:	f240 604e 	movw	r0, #1614	; 0x64e
 8014296:	4283      	cmp	r3, r0
 8014298:	d207      	bcs.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801429a:	f240 601a 	movw	r0, #1562	; 0x61a
 801429e:	4283      	cmp	r3, r0
 80142a0:	d02a      	beq.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80142a2:	d821      	bhi.n	80142e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80142a4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80142a8:	d35b      	bcc.n	8014362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80142aa:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80142ae:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80142b2:	f040 80d0 	bne.w	8014456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80142b6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80142ba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80142be:	f040 80ca 	bne.w	8014456 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80142c2:	00cb      	lsls	r3, r1, #3
 80142c4:	0649      	lsls	r1, r1, #25
 80142c6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80142ca:	7a13      	ldrb	r3, [r2, #8]
 80142cc:	ea43 0300 	orr.w	r3, r3, r0
 80142d0:	bf44      	itt	mi
 80142d2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80142d6:	b21b      	sxthmi	r3, r3
 80142d8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80142dc:	1b5d      	subs	r5, r3, r5
 80142de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80142e2:	4610      	mov	r0, r2
 80142e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80142e8:	f240 604b 	movw	r0, #1611	; 0x64b
 80142ec:	4283      	cmp	r3, r0
 80142ee:	d338      	bcc.n	8014362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80142f0:	f240 604c 	movw	r0, #1612	; 0x64c
 80142f4:	4283      	cmp	r3, r0
 80142f6:	d9d8      	bls.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80142f8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80142fc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8014300:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014304:	f040 80f3 	bne.w	80144ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014308:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801430c:	f040 80ef 	bne.w	80144ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014310:	00cb      	lsls	r3, r1, #3
 8014312:	064e      	lsls	r6, r1, #25
 8014314:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014318:	7a13      	ldrb	r3, [r2, #8]
 801431a:	ea43 0300 	orr.w	r3, r3, r0
 801431e:	bf44      	itt	mi
 8014320:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014324:	b21b      	sxthmi	r3, r3
 8014326:	e7d9      	b.n	80142dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014328:	f240 6054 	movw	r0, #1620	; 0x654
 801432c:	4283      	cmp	r3, r0
 801432e:	d8e3      	bhi.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014330:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014334:	d9e0      	bls.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014336:	e7b8      	b.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014338:	f240 6074 	movw	r0, #1652	; 0x674
 801433c:	4283      	cmp	r3, r0
 801433e:	d0b4      	beq.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014340:	d82d      	bhi.n	801439e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014342:	f240 605e 	movw	r0, #1630	; 0x65e
 8014346:	4283      	cmp	r3, r0
 8014348:	d804      	bhi.n	8014354 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801434a:	f240 605d 	movw	r0, #1629	; 0x65d
 801434e:	4283      	cmp	r3, r0
 8014350:	d3d2      	bcc.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014352:	e7aa      	b.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014354:	f240 605f 	movw	r0, #1631	; 0x65f
 8014358:	4283      	cmp	r3, r0
 801435a:	d0cd      	beq.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801435c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8014360:	d0a3      	beq.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014362:	00cb      	lsls	r3, r1, #3
 8014364:	0649      	lsls	r1, r1, #25
 8014366:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801436a:	7a13      	ldrb	r3, [r2, #8]
 801436c:	ea43 0300 	orr.w	r3, r3, r0
 8014370:	bf44      	itt	mi
 8014372:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014376:	b21b      	sxthmi	r3, r3
 8014378:	1b5d      	subs	r5, r3, r5
 801437a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801437e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014382:	7b53      	ldrb	r3, [r2, #13]
 8014384:	015b      	lsls	r3, r3, #5
 8014386:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801438a:	7993      	ldrb	r3, [r2, #6]
 801438c:	430b      	orrs	r3, r1
 801438e:	2105      	movs	r1, #5
 8014390:	005b      	lsls	r3, r3, #1
 8014392:	fb93 f3f1 	sdiv	r3, r3, r1
 8014396:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801439a:	440b      	add	r3, r1
 801439c:	e756      	b.n	801424c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801439e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80143a2:	4283      	cmp	r3, r0
 80143a4:	d809      	bhi.n	80143ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80143a6:	f240 60df 	movw	r0, #1759	; 0x6df
 80143aa:	4283      	cmp	r3, r0
 80143ac:	f4bf af7d 	bcs.w	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80143b0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80143b4:	2b05      	cmp	r3, #5
 80143b6:	d8d4      	bhi.n	8014362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80143b8:	e777      	b.n	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80143ba:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80143be:	4283      	cmp	r3, r0
 80143c0:	d09a      	beq.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80143c2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80143c6:	4283      	cmp	r3, r0
 80143c8:	e7ca      	b.n	8014360 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80143ca:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80143ce:	d22b      	bcs.n	8014428 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80143d0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80143d4:	4283      	cmp	r3, r0
 80143d6:	d28f      	bcs.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80143d8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80143dc:	4283      	cmp	r3, r0
 80143de:	d816      	bhi.n	801440e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80143e0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80143e4:	4283      	cmp	r3, r0
 80143e6:	f4bf af60 	bcs.w	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80143ea:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80143ee:	4283      	cmp	r3, r0
 80143f0:	d80a      	bhi.n	8014408 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80143f2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80143f6:	4283      	cmp	r3, r0
 80143f8:	f4bf af57 	bcs.w	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80143fc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014400:	4283      	cmp	r3, r0
 8014402:	f43f af79 	beq.w	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014406:	e7ac      	b.n	8014362 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014408:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801440c:	e7f8      	b.n	8014400 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801440e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8014412:	4283      	cmp	r3, r0
 8014414:	d802      	bhi.n	801441c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014416:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801441a:	e798      	b.n	801434e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801441c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014420:	4283      	cmp	r3, r0
 8014422:	f47f af42 	bne.w	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014426:	e767      	b.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014428:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801442c:	4283      	cmp	r3, r0
 801442e:	f43f af63 	beq.w	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014432:	d802      	bhi.n	801443a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014434:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014438:	e7f2      	b.n	8014420 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801443a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801443e:	4283      	cmp	r3, r0
 8014440:	d805      	bhi.n	801444e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014442:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014446:	4283      	cmp	r3, r0
 8014448:	f4ff af2f 	bcc.w	80142aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801444c:	e754      	b.n	80142f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801444e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8014452:	4283      	cmp	r3, r0
 8014454:	e7af      	b.n	80143b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014456:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801445a:	4617      	mov	r7, r2
 801445c:	f102 0808 	add.w	r8, r2, #8
 8014460:	4666      	mov	r6, ip
 8014462:	6838      	ldr	r0, [r7, #0]
 8014464:	3708      	adds	r7, #8
 8014466:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801446a:	46e6      	mov	lr, ip
 801446c:	4547      	cmp	r7, r8
 801446e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014472:	46f4      	mov	ip, lr
 8014474:	d1f5      	bne.n	8014462 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014476:	6838      	ldr	r0, [r7, #0]
 8014478:	f8ce 0000 	str.w	r0, [lr]
 801447c:	88b9      	ldrh	r1, [r7, #4]
 801447e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014482:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014486:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801448a:	d009      	beq.n	80144a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801448c:	7b51      	ldrb	r1, [r2, #13]
 801448e:	7992      	ldrb	r2, [r2, #6]
 8014490:	0149      	lsls	r1, r1, #5
 8014492:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014496:	4311      	orrs	r1, r2
 8014498:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801449c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80144a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80144a4:	b2ad      	uxth	r5, r5
 80144a6:	d00d      	beq.n	80144c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80144a8:	442b      	add	r3, r5
 80144aa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80144b4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80144b8:	10db      	asrs	r3, r3, #3
 80144ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144be:	4313      	orrs	r3, r2
 80144c0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80144c4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80144c8:	00cb      	lsls	r3, r1, #3
 80144ca:	064f      	lsls	r7, r1, #25
 80144cc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80144d0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80144d4:	ea43 0302 	orr.w	r3, r3, r2
 80144d8:	bf44      	itt	mi
 80144da:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80144de:	b21b      	sxthmi	r3, r3
 80144e0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80144e4:	1b5b      	subs	r3, r3, r5
 80144e6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80144ea:	4632      	mov	r2, r6
 80144ec:	e6f9      	b.n	80142e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80144ee:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80144f2:	4617      	mov	r7, r2
 80144f4:	f102 0908 	add.w	r9, r2, #8
 80144f8:	4666      	mov	r6, ip
 80144fa:	6838      	ldr	r0, [r7, #0]
 80144fc:	3708      	adds	r7, #8
 80144fe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014502:	46e0      	mov	r8, ip
 8014504:	454f      	cmp	r7, r9
 8014506:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801450a:	46c4      	mov	ip, r8
 801450c:	d1f5      	bne.n	80144fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801450e:	6838      	ldr	r0, [r7, #0]
 8014510:	f8c8 0000 	str.w	r0, [r8]
 8014514:	88b9      	ldrh	r1, [r7, #4]
 8014516:	f8a8 1004 	strh.w	r1, [r8, #4]
 801451a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801451e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014522:	d009      	beq.n	8014538 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014524:	7b51      	ldrb	r1, [r2, #13]
 8014526:	7992      	ldrb	r2, [r2, #6]
 8014528:	0149      	lsls	r1, r1, #5
 801452a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801452e:	4311      	orrs	r1, r2
 8014530:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014534:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014538:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801453c:	d00e      	beq.n	801455c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801453e:	eba3 030e 	sub.w	r3, r3, lr
 8014542:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014546:	b29b      	uxth	r3, r3
 8014548:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801454c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014550:	10db      	asrs	r3, r3, #3
 8014552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014556:	4313      	orrs	r3, r2
 8014558:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801455c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014560:	00cb      	lsls	r3, r1, #3
 8014562:	0648      	lsls	r0, r1, #25
 8014564:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014568:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801456c:	ea43 0302 	orr.w	r3, r3, r2
 8014570:	bf44      	itt	mi
 8014572:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014576:	b21b      	sxthmi	r3, r3
 8014578:	1b5d      	subs	r5, r3, r5
 801457a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801457e:	e7b4      	b.n	80144ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014584:	461e      	mov	r6, r3
 8014586:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014588:	4604      	mov	r4, r0
 801458a:	4617      	mov	r7, r2
 801458c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014590:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014594:	f7ee fc7a 	bl	8002e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014598:	4605      	mov	r5, r0
 801459a:	b918      	cbnz	r0, 80145a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801459c:	6030      	str	r0, [r6, #0]
 801459e:	4628      	mov	r0, r5
 80145a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	4601      	mov	r1, r0
 80145a8:	4638      	mov	r0, r7
 80145aa:	68db      	ldr	r3, [r3, #12]
 80145ac:	4798      	blx	r3
 80145ae:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80145b2:	4602      	mov	r2, r0
 80145b4:	6030      	str	r0, [r6, #0]
 80145b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80145ba:	d213      	bcs.n	80145e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80145bc:	4643      	mov	r3, r8
 80145be:	4639      	mov	r1, r7
 80145c0:	4620      	mov	r0, r4
 80145c2:	f7ff fe39 	bl	8014238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80145c6:	6030      	str	r0, [r6, #0]
 80145c8:	6833      	ldr	r3, [r6, #0]
 80145ca:	b143      	cbz	r3, 80145de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80145cc:	7b5a      	ldrb	r2, [r3, #13]
 80145ce:	7a9b      	ldrb	r3, [r3, #10]
 80145d0:	0052      	lsls	r2, r2, #1
 80145d2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80145d6:	4313      	orrs	r3, r2
 80145d8:	bf0c      	ite	eq
 80145da:	2301      	moveq	r3, #1
 80145dc:	2300      	movne	r3, #0
 80145de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80145e2:	e7dc      	b.n	801459e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80145e4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	2b7f      	cmp	r3, #127	; 0x7f
 80145ec:	d804      	bhi.n	80145f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80145ee:	4639      	mov	r1, r7
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7ff fd15 	bl	8014020 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80145f6:	e7e6      	b.n	80145c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80145f8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d0e3      	beq.n	80145c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014600:	f640 1302 	movw	r3, #2306	; 0x902
 8014604:	429d      	cmp	r5, r3
 8014606:	d1df      	bne.n	80145c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014608:	4601      	mov	r1, r0
 801460a:	4620      	mov	r0, r4
 801460c:	f7ff fcd8 	bl	8013fc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014610:	e7d9      	b.n	80145c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014612 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014616:	461e      	mov	r6, r3
 8014618:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801461a:	4604      	mov	r4, r0
 801461c:	4617      	mov	r7, r2
 801461e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014622:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014626:	f7ee fc31 	bl	8002e8c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801462a:	4605      	mov	r5, r0
 801462c:	b918      	cbnz	r0, 8014636 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801462e:	6030      	str	r0, [r6, #0]
 8014630:	4628      	mov	r0, r5
 8014632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014636:	683b      	ldr	r3, [r7, #0]
 8014638:	4601      	mov	r1, r0
 801463a:	4638      	mov	r0, r7
 801463c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014644:	47c8      	blx	r9
 8014646:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801464a:	4602      	mov	r2, r0
 801464c:	6030      	str	r0, [r6, #0]
 801464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014652:	d213      	bcs.n	801467c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8014654:	4643      	mov	r3, r8
 8014656:	4639      	mov	r1, r7
 8014658:	4620      	mov	r0, r4
 801465a:	f7ff fded 	bl	8014238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801465e:	6030      	str	r0, [r6, #0]
 8014660:	6833      	ldr	r3, [r6, #0]
 8014662:	b143      	cbz	r3, 8014676 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8014664:	7b5a      	ldrb	r2, [r3, #13]
 8014666:	7a9b      	ldrb	r3, [r3, #10]
 8014668:	0052      	lsls	r2, r2, #1
 801466a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801466e:	4313      	orrs	r3, r2
 8014670:	bf0c      	ite	eq
 8014672:	2301      	moveq	r3, #1
 8014674:	2300      	movne	r3, #0
 8014676:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801467a:	e7d9      	b.n	8014630 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801467c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014680:	b29b      	uxth	r3, r3
 8014682:	2b7f      	cmp	r3, #127	; 0x7f
 8014684:	d804      	bhi.n	8014690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8014686:	4639      	mov	r1, r7
 8014688:	4620      	mov	r0, r4
 801468a:	f7ff fcc9 	bl	8014020 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801468e:	e7e6      	b.n	801465e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8014690:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014694:	2b00      	cmp	r3, #0
 8014696:	d0e3      	beq.n	8014660 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8014698:	f640 1302 	movw	r3, #2306	; 0x902
 801469c:	429d      	cmp	r5, r3
 801469e:	d1df      	bne.n	8014660 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80146a0:	4601      	mov	r1, r0
 80146a2:	4620      	mov	r0, r4
 80146a4:	f7ff fc8c 	bl	8013fc0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80146a8:	e7d9      	b.n	801465e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080146aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80146aa:	b510      	push	{r4, lr}
 80146ac:	4604      	mov	r4, r0
 80146ae:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80146b2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80146b4:	b1e1      	cbz	r1, 80146f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80146b6:	2b0a      	cmp	r3, #10
 80146b8:	d02d      	beq.n	8014716 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80146ba:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80146bc:	3901      	subs	r1, #1
 80146be:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80146c2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80146c4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80146c8:	1c51      	adds	r1, r2, #1
 80146ca:	b289      	uxth	r1, r1
 80146cc:	2901      	cmp	r1, #1
 80146ce:	bf8a      	itet	hi
 80146d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80146d4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80146d6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80146d8:	1c5a      	adds	r2, r3, #1
 80146da:	8722      	strh	r2, [r4, #56]	; 0x38
 80146dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80146de:	4413      	add	r3, r2
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	2b09      	cmp	r3, #9
 80146e4:	bf88      	it	hi
 80146e6:	3b0a      	subhi	r3, #10
 80146e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80146ec:	8458      	strh	r0, [r3, #34]	; 0x22
 80146ee:	e7de      	b.n	80146ae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80146f0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80146f2:	2b0a      	cmp	r3, #10
 80146f4:	d00f      	beq.n	8014716 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80146f6:	4620      	mov	r0, r4
 80146f8:	f7ff fc21 	bl	8013f3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80146fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80146fe:	1c5a      	adds	r2, r3, #1
 8014700:	8722      	strh	r2, [r4, #56]	; 0x38
 8014702:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014704:	4413      	add	r3, r2
 8014706:	b29b      	uxth	r3, r3
 8014708:	2b09      	cmp	r3, #9
 801470a:	bf88      	it	hi
 801470c:	3b0a      	subhi	r3, #10
 801470e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014712:	8458      	strh	r0, [r3, #34]	; 0x22
 8014714:	e7ec      	b.n	80146f0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014716:	bd10      	pop	{r4, pc}

08014718 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014718:	b538      	push	{r3, r4, r5, lr}
 801471a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801471c:	4604      	mov	r4, r0
 801471e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014722:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8014724:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8014726:	3a01      	subs	r2, #1
 8014728:	8702      	strh	r2, [r0, #56]	; 0x38
 801472a:	1c5a      	adds	r2, r3, #1
 801472c:	b292      	uxth	r2, r2
 801472e:	2a09      	cmp	r2, #9
 8014730:	bf8a      	itet	hi
 8014732:	3b09      	subhi	r3, #9
 8014734:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8014736:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8014738:	f7ff ffb7 	bl	80146aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801473c:	8c23      	ldrh	r3, [r4, #32]
 801473e:	2b01      	cmp	r3, #1
 8014740:	bf9c      	itt	ls
 8014742:	3301      	addls	r3, #1
 8014744:	8423      	strhls	r3, [r4, #32]
 8014746:	8be3      	ldrh	r3, [r4, #30]
 8014748:	b90b      	cbnz	r3, 801474e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801474a:	2302      	movs	r3, #2
 801474c:	83e3      	strh	r3, [r4, #30]
 801474e:	8be3      	ldrh	r3, [r4, #30]
 8014750:	4628      	mov	r0, r5
 8014752:	3b01      	subs	r3, #1
 8014754:	b29b      	uxth	r3, r3
 8014756:	83e3      	strh	r3, [r4, #30]
 8014758:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801475c:	8365      	strh	r5, [r4, #26]
 801475e:	bd38      	pop	{r3, r4, r5, pc}

08014760 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014760:	428a      	cmp	r2, r1
 8014762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014766:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8014768:	d932      	bls.n	80147d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801476a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801476c:	1a54      	subs	r4, r2, r1
 801476e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8014772:	19ee      	adds	r6, r5, r7
 8014774:	fa1f fe84 	uxth.w	lr, r4
 8014778:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801477c:	3e01      	subs	r6, #1
 801477e:	b2b4      	uxth	r4, r6
 8014780:	eba4 090e 	sub.w	r9, r4, lr
 8014784:	fa1f f989 	uxth.w	r9, r9
 8014788:	2c09      	cmp	r4, #9
 801478a:	4626      	mov	r6, r4
 801478c:	bf88      	it	hi
 801478e:	f1a4 060a 	subhi.w	r6, r4, #10
 8014792:	f1bc 0f00 	cmp.w	ip, #0
 8014796:	f104 34ff 	add.w	r4, r4, #4294967295
 801479a:	bf08      	it	eq
 801479c:	f04f 0c02 	moveq.w	ip, #2
 80147a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80147a4:	b2a4      	uxth	r4, r4
 80147a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80147aa:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80147ae:	454c      	cmp	r4, r9
 80147b0:	fa1f fc8c 	uxth.w	ip, ip
 80147b4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80147b8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80147bc:	d1e4      	bne.n	8014788 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80147be:	eba5 050e 	sub.w	r5, r5, lr
 80147c2:	eb0e 0408 	add.w	r4, lr, r8
 80147c6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80147ca:	8705      	strh	r5, [r0, #56]	; 0x38
 80147cc:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80147d0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80147d2:	250a      	movs	r5, #10
 80147d4:	1a64      	subs	r4, r4, r1
 80147d6:	4439      	add	r1, r7
 80147d8:	b289      	uxth	r1, r1
 80147da:	8704      	strh	r4, [r0, #56]	; 0x38
 80147dc:	2909      	cmp	r1, #9
 80147de:	bf88      	it	hi
 80147e0:	390a      	subhi	r1, #10
 80147e2:	86c1      	strh	r1, [r0, #54]	; 0x36
 80147e4:	b18a      	cbz	r2, 801480a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80147e6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 80147e8:	3a01      	subs	r2, #1
 80147ea:	3101      	adds	r1, #1
 80147ec:	b292      	uxth	r2, r2
 80147ee:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80147f2:	8701      	strh	r1, [r0, #56]	; 0x38
 80147f4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80147f6:	b901      	cbnz	r1, 80147fa <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80147f8:	86c5      	strh	r5, [r0, #54]	; 0x36
 80147fa:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 80147fc:	3901      	subs	r1, #1
 80147fe:	b289      	uxth	r1, r1
 8014800:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014802:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014806:	844c      	strh	r4, [r1, #34]	; 0x22
 8014808:	e7ec      	b.n	80147e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801480a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801480e:	f7ff bf4c 	b.w	80146aa <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014812 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014812:	b570      	push	{r4, r5, r6, lr}
 8014814:	2500      	movs	r5, #0
 8014816:	4295      	cmp	r5, r2
 8014818:	d011      	beq.n	801483e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801481a:	8bc4      	ldrh	r4, [r0, #30]
 801481c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014820:	4414      	add	r4, r2
 8014822:	3c01      	subs	r4, #1
 8014824:	1b64      	subs	r4, r4, r5
 8014826:	b2a4      	uxth	r4, r4
 8014828:	2c01      	cmp	r4, #1
 801482a:	bf88      	it	hi
 801482c:	3c02      	subhi	r4, #2
 801482e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014832:	8b64      	ldrh	r4, [r4, #26]
 8014834:	42b4      	cmp	r4, r6
 8014836:	d117      	bne.n	8014868 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014838:	3501      	adds	r5, #1
 801483a:	b2ad      	uxth	r5, r5
 801483c:	e7eb      	b.n	8014816 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801483e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014842:	2400      	movs	r4, #0
 8014844:	4413      	add	r3, r2
 8014846:	b2a2      	uxth	r2, r4
 8014848:	429a      	cmp	r2, r3
 801484a:	da0f      	bge.n	801486c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801484c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801484e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014852:	3401      	adds	r4, #1
 8014854:	4432      	add	r2, r6
 8014856:	b292      	uxth	r2, r2
 8014858:	2a09      	cmp	r2, #9
 801485a:	bf88      	it	hi
 801485c:	3a0a      	subhi	r2, #10
 801485e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014862:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014864:	42aa      	cmp	r2, r5
 8014866:	d0ee      	beq.n	8014846 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014868:	2000      	movs	r0, #0
 801486a:	bd70      	pop	{r4, r5, r6, pc}
 801486c:	2001      	movs	r0, #1
 801486e:	e7fc      	b.n	801486a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014870 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	4605      	mov	r5, r0
 8014876:	4616      	mov	r6, r2
 8014878:	1c8c      	adds	r4, r1, #2
 801487a:	8809      	ldrh	r1, [r1, #0]
 801487c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014880:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014884:	42b3      	cmp	r3, r6
 8014886:	d124      	bne.n	80148d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014888:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801488c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014890:	f001 070f 	and.w	r7, r1, #15
 8014894:	4652      	mov	r2, sl
 8014896:	f8cd 8000 	str.w	r8, [sp]
 801489a:	464b      	mov	r3, r9
 801489c:	4621      	mov	r1, r4
 801489e:	4628      	mov	r0, r5
 80148a0:	f7ff ffb7 	bl	8014812 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80148a4:	4683      	mov	fp, r0
 80148a6:	b168      	cbz	r0, 80148c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80148a8:	eb0a 0109 	add.w	r1, sl, r9
 80148ac:	463a      	mov	r2, r7
 80148ae:	4628      	mov	r0, r5
 80148b0:	4441      	add	r1, r8
 80148b2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80148b6:	4649      	mov	r1, r9
 80148b8:	f7ff ff52 	bl	8014760 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80148bc:	4658      	mov	r0, fp
 80148be:	b003      	add	sp, #12
 80148c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c4:	eb07 010a 	add.w	r1, r7, sl
 80148c8:	4449      	add	r1, r9
 80148ca:	4441      	add	r1, r8
 80148cc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80148d0:	e7d2      	b.n	8014878 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80148d2:	f04f 0b00 	mov.w	fp, #0
 80148d6:	e7f1      	b.n	80148bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080148d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80148d8:	b570      	push	{r4, r5, r6, lr}
 80148da:	8810      	ldrh	r0, [r2, #0]
 80148dc:	4298      	cmp	r0, r3
 80148de:	d817      	bhi.n	8014910 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80148e0:	1e48      	subs	r0, r1, #1
 80148e2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80148e6:	4298      	cmp	r0, r3
 80148e8:	d312      	bcc.n	8014910 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80148ea:	2400      	movs	r4, #0
 80148ec:	428c      	cmp	r4, r1
 80148ee:	d20f      	bcs.n	8014910 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80148f0:	1860      	adds	r0, r4, r1
 80148f2:	1040      	asrs	r0, r0, #1
 80148f4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80148f8:	0085      	lsls	r5, r0, #2
 80148fa:	42b3      	cmp	r3, r6
 80148fc:	d902      	bls.n	8014904 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80148fe:	3001      	adds	r0, #1
 8014900:	b284      	uxth	r4, r0
 8014902:	e7f3      	b.n	80148ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014904:	d201      	bcs.n	801490a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014906:	b281      	uxth	r1, r0
 8014908:	e7f0      	b.n	80148ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801490a:	442a      	add	r2, r5
 801490c:	8850      	ldrh	r0, [r2, #2]
 801490e:	bd70      	pop	{r4, r5, r6, pc}
 8014910:	2000      	movs	r0, #0
 8014912:	e7fc      	b.n	801490e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014914 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014918:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801491a:	4604      	mov	r4, r0
 801491c:	260b      	movs	r6, #11
 801491e:	886f      	ldrh	r7, [r5, #2]
 8014920:	087f      	lsrs	r7, r7, #1
 8014922:	3e01      	subs	r6, #1
 8014924:	d013      	beq.n	801494e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014926:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014928:	462a      	mov	r2, r5
 801492a:	4639      	mov	r1, r7
 801492c:	4620      	mov	r0, r4
 801492e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014932:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014936:	4643      	mov	r3, r8
 8014938:	f7ff ffce 	bl	80148d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801493c:	b138      	cbz	r0, 801494e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801493e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014942:	4642      	mov	r2, r8
 8014944:	4620      	mov	r0, r4
 8014946:	f7ff ff93 	bl	8014870 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801494a:	2800      	cmp	r0, #0
 801494c:	d1e9      	bne.n	8014922 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801494e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014954 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014954:	b570      	push	{r4, r5, r6, lr}
 8014956:	694a      	ldr	r2, [r1, #20]
 8014958:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801495a:	684b      	ldr	r3, [r1, #4]
 801495c:	1b54      	subs	r4, r2, r5
 801495e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8014960:	f000 8106 	beq.w	8014b70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014964:	1b9b      	subs	r3, r3, r6
 8014966:	d003      	beq.n	8014970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014968:	4363      	muls	r3, r4
 801496a:	2210      	movs	r2, #16
 801496c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014970:	680c      	ldr	r4, [r1, #0]
 8014972:	698a      	ldr	r2, [r1, #24]
 8014974:	1b65      	subs	r5, r4, r5
 8014976:	f000 80fd 	beq.w	8014b74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801497a:	1b92      	subs	r2, r2, r6
 801497c:	d003      	beq.n	8014986 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801497e:	436a      	muls	r2, r5
 8014980:	2410      	movs	r4, #16
 8014982:	fb92 f2f4 	sdiv	r2, r2, r4
 8014986:	1a9b      	subs	r3, r3, r2
 8014988:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8014bb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801498c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014990:	460a      	mov	r2, r1
 8014992:	ee07 3a90 	vmov	s15, r3
 8014996:	f100 040c 	add.w	r4, r0, #12
 801499a:	4603      	mov	r3, r0
 801499c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149a0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80149a4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80149a8:	eeb1 6a43 	vneg.f32	s12, s6
 80149ac:	edd2 7a02 	vldr	s15, [r2, #8]
 80149b0:	3214      	adds	r2, #20
 80149b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80149b6:	ece3 6a01 	vstmia	r3!, {s13}
 80149ba:	429c      	cmp	r4, r3
 80149bc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80149c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80149c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80149c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80149cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80149d0:	edc3 7a05 	vstr	s15, [r3, #20]
 80149d4:	d1ea      	bne.n	80149ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80149d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80149d8:	698b      	ldr	r3, [r1, #24]
 80149da:	edd0 4a02 	vldr	s9, [r0, #8]
 80149de:	1a9b      	subs	r3, r3, r2
 80149e0:	edd0 3a00 	vldr	s7, [r0]
 80149e4:	edd0 6a01 	vldr	s13, [r0, #4]
 80149e8:	ee07 3a90 	vmov	s15, r3
 80149ec:	684b      	ldr	r3, [r1, #4]
 80149ee:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80149f2:	ed90 5a05 	vldr	s10, [r0, #20]
 80149f6:	1a9b      	subs	r3, r3, r2
 80149f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80149fc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014a00:	ed90 2a03 	vldr	s4, [r0, #12]
 8014a04:	ee07 3a10 	vmov	s14, r3
 8014a08:	edd0 5a04 	vldr	s11, [r0, #16]
 8014a0c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014a10:	ed90 1a07 	vldr	s2, [r0, #28]
 8014a14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a18:	edd0 2a06 	vldr	s5, [r0, #24]
 8014a1c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014a20:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014a24:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014a28:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014a2c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014a30:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014a34:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014a38:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014a3a:	694a      	ldr	r2, [r1, #20]
 8014a3c:	1b13      	subs	r3, r2, r4
 8014a3e:	ee07 3a10 	vmov	s14, r3
 8014a42:	680b      	ldr	r3, [r1, #0]
 8014a44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a48:	1b1b      	subs	r3, r3, r4
 8014a4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014a4e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014a52:	ee07 3a10 	vmov	s14, r3
 8014a56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a5a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014a5e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014a62:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014a66:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8014a6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014a6c:	698b      	ldr	r3, [r1, #24]
 8014a6e:	1a9b      	subs	r3, r3, r2
 8014a70:	ee06 3a90 	vmov	s13, r3
 8014a74:	684b      	ldr	r3, [r1, #4]
 8014a76:	1a9b      	subs	r3, r3, r2
 8014a78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014a7c:	ee07 3a10 	vmov	s14, r3
 8014a80:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a88:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014a8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014a90:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014a94:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014a98:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8014a9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014a9e:	694a      	ldr	r2, [r1, #20]
 8014aa0:	1b13      	subs	r3, r2, r4
 8014aa2:	ee07 3a10 	vmov	s14, r3
 8014aa6:	680b      	ldr	r3, [r1, #0]
 8014aa8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014aac:	1b1b      	subs	r3, r3, r4
 8014aae:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ab2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014ab6:	ee07 3a10 	vmov	s14, r3
 8014aba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014abe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ac2:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014ac6:	edd0 5a08 	vldr	s11, [r0, #32]
 8014aca:	ee31 1a65 	vsub.f32	s2, s2, s11
 8014ace:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014ad2:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014ad6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8014ada:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014adc:	698b      	ldr	r3, [r1, #24]
 8014ade:	1a9b      	subs	r3, r3, r2
 8014ae0:	ee07 3a10 	vmov	s14, r3
 8014ae4:	684b      	ldr	r3, [r1, #4]
 8014ae6:	1a9b      	subs	r3, r3, r2
 8014ae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014aec:	ee01 3a90 	vmov	s3, r3
 8014af0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014af4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014af8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8014afc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014b00:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014b04:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014b08:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014b0c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014b0e:	694a      	ldr	r2, [r1, #20]
 8014b10:	1b13      	subs	r3, r2, r4
 8014b12:	ee03 3a10 	vmov	s6, r3
 8014b16:	680b      	ldr	r3, [r1, #0]
 8014b18:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014b1c:	1b1b      	subs	r3, r3, r4
 8014b1e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014b22:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014b26:	ee03 3a10 	vmov	s6, r3
 8014b2a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014b2e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014b32:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014b36:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014b3a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014b3e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8014b42:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014b46:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b4e:	dd13      	ble.n	8014b78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014b50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b54:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014b58:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014b5a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b66:	dd15      	ble.n	8014b94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014b68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b6c:	6403      	str	r3, [r0, #64]	; 0x40
 8014b6e:	bd70      	pop	{r4, r5, r6, pc}
 8014b70:	4623      	mov	r3, r4
 8014b72:	e6fd      	b.n	8014970 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014b74:	462a      	mov	r2, r5
 8014b76:	e706      	b.n	8014986 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014b78:	d502      	bpl.n	8014b80 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8014b7a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014b7e:	e7e9      	b.n	8014b54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014b80:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014b84:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014b88:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8014b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b90:	dade      	bge.n	8014b50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014b92:	e7f2      	b.n	8014b7a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014b94:	d502      	bpl.n	8014b9c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014b96:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014b9a:	e7e7      	b.n	8014b6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8014b9c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014ba0:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014ba4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bac:	dadc      	bge.n	8014b68 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8014bae:	e7f2      	b.n	8014b96 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014bb0:	3d800000 	.word	0x3d800000

08014bb4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb8:	2714      	movs	r7, #20
 8014bba:	435f      	muls	r7, r3
 8014bbc:	eb02 0c07 	add.w	ip, r2, r7
 8014bc0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014bc4:	f115 0e0f 	adds.w	lr, r5, #15
 8014bc8:	f100 80a2 	bmi.w	8014d10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8014bcc:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8014bd0:	9c08      	ldr	r4, [sp, #32]
 8014bd2:	2614      	movs	r6, #20
 8014bd4:	f8c0 e014 	str.w	lr, [r0, #20]
 8014bd8:	4366      	muls	r6, r4
 8014bda:	eb02 0806 	add.w	r8, r2, r6
 8014bde:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014be2:	f115 040f 	adds.w	r4, r5, #15
 8014be6:	f100 809f 	bmi.w	8014d28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8014bea:	1124      	asrs	r4, r4, #4
 8014bec:	eba4 040e 	sub.w	r4, r4, lr
 8014bf0:	6184      	str	r4, [r0, #24]
 8014bf2:	2c00      	cmp	r4, #0
 8014bf4:	f000 808a 	beq.w	8014d0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8014bf8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8014bfc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014c00:	5995      	ldr	r5, [r2, r6]
 8014c02:	eba4 0809 	sub.w	r8, r4, r9
 8014c06:	59d4      	ldr	r4, [r2, r7]
 8014c08:	eba5 0a04 	sub.w	sl, r5, r4
 8014c0c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014c10:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014c14:	fb0e fe05 	mul.w	lr, lr, r5
 8014c18:	fb0a ee19 	mls	lr, sl, r9, lr
 8014c1c:	fb08 e404 	mla	r4, r8, r4, lr
 8014c20:	3c01      	subs	r4, #1
 8014c22:	19a4      	adds	r4, r4, r6
 8014c24:	f100 808c 	bmi.w	8014d40 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8014c28:	fb94 fef6 	sdiv	lr, r4, r6
 8014c2c:	fb06 441e 	mls	r4, r6, lr, r4
 8014c30:	f8c0 e000 	str.w	lr, [r0]
 8014c34:	6104      	str	r4, [r0, #16]
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	f2c0 8095 	blt.w	8014d66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8014c3c:	fb95 f4f6 	sdiv	r4, r5, r6
 8014c40:	fb06 5514 	mls	r5, r6, r4, r5
 8014c44:	6044      	str	r4, [r0, #4]
 8014c46:	6085      	str	r5, [r0, #8]
 8014c48:	60c6      	str	r6, [r0, #12]
 8014c4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014c4e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014c52:	6945      	ldr	r5, [r0, #20]
 8014c54:	59d2      	ldr	r2, [r2, r7]
 8014c56:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8014c5a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8014d88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8014c5e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014c62:	ee07 4a10 	vmov	s14, r4
 8014c66:	6804      	ldr	r4, [r0, #0]
 8014c68:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8014c6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014c70:	ee07 2a90 	vmov	s15, r2
 8014c74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c80:	edd3 6a00 	vldr	s13, [r3]
 8014c84:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014c88:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8014c8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014c90:	edc0 6a07 	vstr	s13, [r0, #28]
 8014c94:	edd0 6a01 	vldr	s13, [r0, #4]
 8014c98:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8014c9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014ca0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014ca4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014ca8:	ed80 6a08 	vstr	s12, [r0, #32]
 8014cac:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8014cae:	6242      	str	r2, [r0, #36]	; 0x24
 8014cb0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8014cb4:	ed93 6a03 	vldr	s12, [r3, #12]
 8014cb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014cbc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014cc0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014cc4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8014cc8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014ccc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8014cd0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014cd4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8014cd8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014cda:	6302      	str	r2, [r0, #48]	; 0x30
 8014cdc:	ed93 6a06 	vldr	s12, [r3, #24]
 8014ce0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8014ce4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014ce8:	eeb0 7a46 	vmov.f32	s14, s12
 8014cec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8014cf0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014cf4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014cf8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8014cfc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8014d00:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014d04:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8014d08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014d0a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d10:	2410      	movs	r4, #16
 8014d12:	f1c5 0501 	rsb	r5, r5, #1
 8014d16:	fb9e fef4 	sdiv	lr, lr, r4
 8014d1a:	f015 050f 	ands.w	r5, r5, #15
 8014d1e:	bf18      	it	ne
 8014d20:	2501      	movne	r5, #1
 8014d22:	ebae 0e05 	sub.w	lr, lr, r5
 8014d26:	e753      	b.n	8014bd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8014d28:	f04f 0910 	mov.w	r9, #16
 8014d2c:	f1c5 0501 	rsb	r5, r5, #1
 8014d30:	fb94 f4f9 	sdiv	r4, r4, r9
 8014d34:	f015 050f 	ands.w	r5, r5, #15
 8014d38:	bf18      	it	ne
 8014d3a:	2501      	movne	r5, #1
 8014d3c:	1b64      	subs	r4, r4, r5
 8014d3e:	e755      	b.n	8014bec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8014d40:	4264      	negs	r4, r4
 8014d42:	fb94 fef6 	sdiv	lr, r4, r6
 8014d46:	f1ce 0800 	rsb	r8, lr, #0
 8014d4a:	fb06 441e 	mls	r4, r6, lr, r4
 8014d4e:	f8c0 8000 	str.w	r8, [r0]
 8014d52:	6104      	str	r4, [r0, #16]
 8014d54:	2c00      	cmp	r4, #0
 8014d56:	f43f af6e 	beq.w	8014c36 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8014d5a:	ea6f 0e0e 	mvn.w	lr, lr
 8014d5e:	1b34      	subs	r4, r6, r4
 8014d60:	f8c0 e000 	str.w	lr, [r0]
 8014d64:	e766      	b.n	8014c34 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8014d66:	426d      	negs	r5, r5
 8014d68:	fb95 f4f6 	sdiv	r4, r5, r6
 8014d6c:	f1c4 0e00 	rsb	lr, r4, #0
 8014d70:	fb06 5514 	mls	r5, r6, r4, r5
 8014d74:	f8c0 e004 	str.w	lr, [r0, #4]
 8014d78:	6085      	str	r5, [r0, #8]
 8014d7a:	2d00      	cmp	r5, #0
 8014d7c:	f43f af64 	beq.w	8014c48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8014d80:	43e4      	mvns	r4, r4
 8014d82:	1b75      	subs	r5, r6, r5
 8014d84:	6044      	str	r4, [r0, #4]
 8014d86:	e75e      	b.n	8014c46 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8014d88:	3d800000 	.word	0x3d800000

08014d8c <_ZN8touchgfx7Unicode6strlenEPKt>:
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	b148      	cbz	r0, 8014da4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8014d90:	2300      	movs	r3, #0
 8014d92:	b298      	uxth	r0, r3
 8014d94:	3301      	adds	r3, #1
 8014d96:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8014d9a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8014d9e:	2900      	cmp	r1, #0
 8014da0:	d1f7      	bne.n	8014d92 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8014da2:	4770      	bx	lr
 8014da4:	4770      	bx	lr

08014da6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8014da6:	b530      	push	{r4, r5, lr}
 8014da8:	4604      	mov	r4, r0
 8014daa:	b159      	cbz	r1, 8014dc4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8014dac:	b148      	cbz	r0, 8014dc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8014dae:	2300      	movs	r3, #0
 8014db0:	b298      	uxth	r0, r3
 8014db2:	4282      	cmp	r2, r0
 8014db4:	d905      	bls.n	8014dc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8014db6:	5ccd      	ldrb	r5, [r1, r3]
 8014db8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8014dbc:	3301      	adds	r3, #1
 8014dbe:	2d00      	cmp	r5, #0
 8014dc0:	d1f6      	bne.n	8014db0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8014dc2:	bd30      	pop	{r4, r5, pc}
 8014dc4:	4608      	mov	r0, r1
 8014dc6:	e7fc      	b.n	8014dc2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08014dc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8014dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dca:	468c      	mov	ip, r1
 8014dcc:	b08b      	sub	sp, #44	; 0x2c
 8014dce:	2100      	movs	r1, #0
 8014dd0:	ae01      	add	r6, sp, #4
 8014dd2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014dd6:	211f      	movs	r1, #31
 8014dd8:	fbb0 f7f3 	udiv	r7, r0, r3
 8014ddc:	fb03 0517 	mls	r5, r3, r7, r0
 8014de0:	4638      	mov	r0, r7
 8014de2:	b2ec      	uxtb	r4, r5
 8014de4:	2d09      	cmp	r5, #9
 8014de6:	bfd4      	ite	le
 8014de8:	3430      	addle	r4, #48	; 0x30
 8014dea:	3457      	addgt	r4, #87	; 0x57
 8014dec:	b2e4      	uxtb	r4, r4
 8014dee:	558c      	strb	r4, [r1, r6]
 8014df0:	1e4c      	subs	r4, r1, #1
 8014df2:	b92f      	cbnz	r7, 8014e00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8014df4:	4431      	add	r1, r6
 8014df6:	4660      	mov	r0, ip
 8014df8:	f7ff ffd5 	bl	8014da6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8014dfc:	b00b      	add	sp, #44	; 0x2c
 8014dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e00:	4621      	mov	r1, r4
 8014e02:	e7e9      	b.n	8014dd8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08014e04 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8014e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e06:	4607      	mov	r7, r0
 8014e08:	b08b      	sub	sp, #44	; 0x2c
 8014e0a:	4608      	mov	r0, r1
 8014e0c:	b341      	cbz	r1, 8014e60 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8014e0e:	1e99      	subs	r1, r3, #2
 8014e10:	2922      	cmp	r1, #34	; 0x22
 8014e12:	d825      	bhi.n	8014e60 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8014e14:	2100      	movs	r1, #0
 8014e16:	463c      	mov	r4, r7
 8014e18:	261f      	movs	r6, #31
 8014e1a:	f10d 0c04 	add.w	ip, sp, #4
 8014e1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014e22:	1e71      	subs	r1, r6, #1
 8014e24:	fb94 fef3 	sdiv	lr, r4, r3
 8014e28:	fb03 441e 	mls	r4, r3, lr, r4
 8014e2c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8014e30:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8014e34:	b2ec      	uxtb	r4, r5
 8014e36:	2d09      	cmp	r5, #9
 8014e38:	bfd4      	ite	le
 8014e3a:	3430      	addle	r4, #48	; 0x30
 8014e3c:	3457      	addgt	r4, #87	; 0x57
 8014e3e:	b2e4      	uxtb	r4, r4
 8014e40:	f80c 4006 	strb.w	r4, [ip, r6]
 8014e44:	4674      	mov	r4, lr
 8014e46:	b96c      	cbnz	r4, 8014e64 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8014e48:	2f00      	cmp	r7, #0
 8014e4a:	da05      	bge.n	8014e58 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8014e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8014e4e:	4419      	add	r1, r3
 8014e50:	232d      	movs	r3, #45	; 0x2d
 8014e52:	f801 3c24 	strb.w	r3, [r1, #-36]
 8014e56:	1eb1      	subs	r1, r6, #2
 8014e58:	3101      	adds	r1, #1
 8014e5a:	4461      	add	r1, ip
 8014e5c:	f7ff ffa3 	bl	8014da6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8014e60:	b00b      	add	sp, #44	; 0x2c
 8014e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e64:	460e      	mov	r6, r1
 8014e66:	e7dc      	b.n	8014e22 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08014e68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8014e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e6c:	b085      	sub	sp, #20
 8014e6e:	4691      	mov	r9, r2
 8014e70:	6802      	ldr	r2, [r0, #0]
 8014e72:	4688      	mov	r8, r1
 8014e74:	461c      	mov	r4, r3
 8014e76:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8014e7a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014e7e:	4683      	mov	fp, r0
 8014e80:	4610      	mov	r0, r2
 8014e82:	9103      	str	r1, [sp, #12]
 8014e84:	9302      	str	r3, [sp, #8]
 8014e86:	9201      	str	r2, [sp, #4]
 8014e88:	f7ff ff80 	bl	8014d8c <_ZN8touchgfx7Unicode6strlenEPKt>
 8014e8c:	f1b8 0f00 	cmp.w	r8, #0
 8014e90:	bf0c      	ite	eq
 8014e92:	4684      	moveq	ip, r0
 8014e94:	f100 0c01 	addne.w	ip, r0, #1
 8014e98:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8014e9c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8014ea0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014ea2:	fa1f fc8c 	uxth.w	ip, ip
 8014ea6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014ea8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8014eac:	9903      	ldr	r1, [sp, #12]
 8014eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014eb2:	d041      	beq.n	8014f38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8014eb4:	d834      	bhi.n	8014f20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8014eb6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8014eba:	d059      	beq.n	8014f70 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8014ebc:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8014ec0:	d03a      	beq.n	8014f38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8014ec2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8014ec6:	d034      	beq.n	8014f32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8014ec8:	2400      	movs	r4, #0
 8014eca:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8014ece:	3a01      	subs	r2, #1
 8014ed0:	b169      	cbz	r1, 8014eee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014ed2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014ed4:	458c      	cmp	ip, r1
 8014ed6:	da09      	bge.n	8014eec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8014ed8:	eba1 010c 	sub.w	r1, r1, ip
 8014edc:	b289      	uxth	r1, r1
 8014ede:	b933      	cbnz	r3, 8014eee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014ee0:	2e00      	cmp	r6, #0
 8014ee2:	d051      	beq.n	8014f88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d04f      	beq.n	8014f88 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8014ee8:	440c      	add	r4, r1
 8014eea:	b2a4      	uxth	r4, r4
 8014eec:	2100      	movs	r1, #0
 8014eee:	682b      	ldr	r3, [r5, #0]
 8014ef0:	4293      	cmp	r3, r2
 8014ef2:	da07      	bge.n	8014f04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8014ef4:	f1b8 0f00 	cmp.w	r8, #0
 8014ef8:	d004      	beq.n	8014f04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8014efa:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8014efe:	682b      	ldr	r3, [r5, #0]
 8014f00:	3301      	adds	r3, #1
 8014f02:	602b      	str	r3, [r5, #0]
 8014f04:	2730      	movs	r7, #48	; 0x30
 8014f06:	2c00      	cmp	r4, #0
 8014f08:	d04e      	beq.n	8014fa8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014f0a:	682e      	ldr	r6, [r5, #0]
 8014f0c:	3c01      	subs	r4, #1
 8014f0e:	42b2      	cmp	r2, r6
 8014f10:	b2a4      	uxth	r4, r4
 8014f12:	dd49      	ble.n	8014fa8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014f14:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8014f18:	682b      	ldr	r3, [r5, #0]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	602b      	str	r3, [r5, #0]
 8014f1e:	e7f2      	b.n	8014f06 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8014f20:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8014f24:	d01d      	beq.n	8014f62 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8014f26:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8014f2a:	d002      	beq.n	8014f32 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8014f2c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8014f30:	e7c9      	b.n	8014ec6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8014f32:	4684      	mov	ip, r0
 8014f34:	f04f 0800 	mov.w	r8, #0
 8014f38:	2c00      	cmp	r4, #0
 8014f3a:	d0c6      	beq.n	8014eca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014f3c:	b947      	cbnz	r7, 8014f50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8014f3e:	2801      	cmp	r0, #1
 8014f40:	d106      	bne.n	8014f50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8014f42:	8814      	ldrh	r4, [r2, #0]
 8014f44:	2c30      	cmp	r4, #48	; 0x30
 8014f46:	bf02      	ittt	eq
 8014f48:	3202      	addeq	r2, #2
 8014f4a:	4638      	moveq	r0, r7
 8014f4c:	f8cb 2000 	streq.w	r2, [fp]
 8014f50:	45bc      	cmp	ip, r7
 8014f52:	da14      	bge.n	8014f7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8014f54:	b2bf      	uxth	r7, r7
 8014f56:	eba7 040c 	sub.w	r4, r7, ip
 8014f5a:	46bc      	mov	ip, r7
 8014f5c:	b2a4      	uxth	r4, r4
 8014f5e:	2600      	movs	r6, #0
 8014f60:	e7b3      	b.n	8014eca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014f62:	4684      	mov	ip, r0
 8014f64:	b16c      	cbz	r4, 8014f82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8014f66:	42b8      	cmp	r0, r7
 8014f68:	dd00      	ble.n	8014f6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8014f6a:	b2b8      	uxth	r0, r7
 8014f6c:	2400      	movs	r4, #0
 8014f6e:	e003      	b.n	8014f78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8014f70:	f04f 0c01 	mov.w	ip, #1
 8014f74:	2400      	movs	r4, #0
 8014f76:	4660      	mov	r0, ip
 8014f78:	4626      	mov	r6, r4
 8014f7a:	46a0      	mov	r8, r4
 8014f7c:	e7a5      	b.n	8014eca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014f7e:	2400      	movs	r4, #0
 8014f80:	e7ed      	b.n	8014f5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8014f82:	4626      	mov	r6, r4
 8014f84:	46a0      	mov	r8, r4
 8014f86:	e7a0      	b.n	8014eca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014f88:	2900      	cmp	r1, #0
 8014f8a:	d0b0      	beq.n	8014eee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014f8c:	2720      	movs	r7, #32
 8014f8e:	682e      	ldr	r6, [r5, #0]
 8014f90:	2900      	cmp	r1, #0
 8014f92:	d0ac      	beq.n	8014eee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014f94:	3901      	subs	r1, #1
 8014f96:	4296      	cmp	r6, r2
 8014f98:	b289      	uxth	r1, r1
 8014f9a:	daa7      	bge.n	8014eec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8014f9c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8014fa0:	682b      	ldr	r3, [r5, #0]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	602b      	str	r3, [r5, #0]
 8014fa6:	e7f2      	b.n	8014f8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8014fa8:	b188      	cbz	r0, 8014fce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8014faa:	682b      	ldr	r3, [r5, #0]
 8014fac:	3801      	subs	r0, #1
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	b280      	uxth	r0, r0
 8014fb2:	dd0c      	ble.n	8014fce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8014fb4:	f8db 3000 	ldr.w	r3, [fp]
 8014fb8:	1c9c      	adds	r4, r3, #2
 8014fba:	f8cb 4000 	str.w	r4, [fp]
 8014fbe:	881c      	ldrh	r4, [r3, #0]
 8014fc0:	682b      	ldr	r3, [r5, #0]
 8014fc2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8014fc6:	682b      	ldr	r3, [r5, #0]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	602b      	str	r3, [r5, #0]
 8014fcc:	e7ec      	b.n	8014fa8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014fce:	2620      	movs	r6, #32
 8014fd0:	b151      	cbz	r1, 8014fe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8014fd2:	6828      	ldr	r0, [r5, #0]
 8014fd4:	3901      	subs	r1, #1
 8014fd6:	4282      	cmp	r2, r0
 8014fd8:	b289      	uxth	r1, r1
 8014fda:	dd05      	ble.n	8014fe8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8014fdc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8014fe0:	682b      	ldr	r3, [r5, #0]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	602b      	str	r3, [r5, #0]
 8014fe6:	e7f3      	b.n	8014fd0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8014fe8:	b005      	add	sp, #20
 8014fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8014fee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff2:	2400      	movs	r4, #0
 8014ff4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8014ff8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8014ffc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8015000:	8014      	strh	r4, [r2, #0]
 8015002:	701c      	strb	r4, [r3, #0]
 8015004:	f888 4000 	strb.w	r4, [r8]
 8015008:	f88c 4000 	strb.w	r4, [ip]
 801500c:	f88e 4000 	strb.w	r4, [lr]
 8015010:	703c      	strb	r4, [r7, #0]
 8015012:	6804      	ldr	r4, [r0, #0]
 8015014:	b1a4      	cbz	r4, 8015040 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8015016:	8824      	ldrh	r4, [r4, #0]
 8015018:	f04f 0901 	mov.w	r9, #1
 801501c:	b314      	cbz	r4, 8015064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801501e:	2c2b      	cmp	r4, #43	; 0x2b
 8015020:	d001      	beq.n	8015026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8015022:	2c20      	cmp	r4, #32
 8015024:	d110      	bne.n	8015048 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8015026:	8014      	strh	r4, [r2, #0]
 8015028:	6804      	ldr	r4, [r0, #0]
 801502a:	b10c      	cbz	r4, 8015030 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801502c:	3402      	adds	r4, #2
 801502e:	6004      	str	r4, [r0, #0]
 8015030:	680c      	ldr	r4, [r1, #0]
 8015032:	b10c      	cbz	r4, 8015038 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8015034:	3401      	adds	r4, #1
 8015036:	600c      	str	r4, [r1, #0]
 8015038:	6804      	ldr	r4, [r0, #0]
 801503a:	b17c      	cbz	r4, 801505c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801503c:	8824      	ldrh	r4, [r4, #0]
 801503e:	e7ed      	b.n	801501c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8015040:	680c      	ldr	r4, [r1, #0]
 8015042:	b17c      	cbz	r4, 8015064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8015044:	7824      	ldrb	r4, [r4, #0]
 8015046:	e7e7      	b.n	8015018 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8015048:	2c2d      	cmp	r4, #45	; 0x2d
 801504a:	d102      	bne.n	8015052 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801504c:	f883 9000 	strb.w	r9, [r3]
 8015050:	e7ea      	b.n	8015028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8015052:	2c23      	cmp	r4, #35	; 0x23
 8015054:	d107      	bne.n	8015066 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8015056:	f888 9000 	strb.w	r9, [r8]
 801505a:	e7e5      	b.n	8015028 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801505c:	680c      	ldr	r4, [r1, #0]
 801505e:	b10c      	cbz	r4, 8015064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8015060:	7824      	ldrb	r4, [r4, #0]
 8015062:	e7db      	b.n	801501c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8015064:	2400      	movs	r4, #0
 8015066:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801506a:	2b09      	cmp	r3, #9
 801506c:	d901      	bls.n	8015072 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801506e:	2c2a      	cmp	r4, #42	; 0x2a
 8015070:	d122      	bne.n	80150b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8015072:	2301      	movs	r3, #1
 8015074:	2c30      	cmp	r4, #48	; 0x30
 8015076:	f88e 3000 	strb.w	r3, [lr]
 801507a:	d10d      	bne.n	8015098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801507c:	f88c 3000 	strb.w	r3, [ip]
 8015080:	6803      	ldr	r3, [r0, #0]
 8015082:	b10b      	cbz	r3, 8015088 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8015084:	3302      	adds	r3, #2
 8015086:	6003      	str	r3, [r0, #0]
 8015088:	680b      	ldr	r3, [r1, #0]
 801508a:	b10b      	cbz	r3, 8015090 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801508c:	3301      	adds	r3, #1
 801508e:	600b      	str	r3, [r1, #0]
 8015090:	6803      	ldr	r3, [r0, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d02f      	beq.n	80150f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8015096:	881c      	ldrh	r4, [r3, #0]
 8015098:	2c2a      	cmp	r4, #42	; 0x2a
 801509a:	d135      	bne.n	8015108 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801509c:	f04f 33ff 	mov.w	r3, #4294967295
 80150a0:	6033      	str	r3, [r6, #0]
 80150a2:	6803      	ldr	r3, [r0, #0]
 80150a4:	b10b      	cbz	r3, 80150aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80150a6:	3302      	adds	r3, #2
 80150a8:	6003      	str	r3, [r0, #0]
 80150aa:	680b      	ldr	r3, [r1, #0]
 80150ac:	b10b      	cbz	r3, 80150b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80150ae:	3301      	adds	r3, #1
 80150b0:	600b      	str	r3, [r1, #0]
 80150b2:	6803      	ldr	r3, [r0, #0]
 80150b4:	b31b      	cbz	r3, 80150fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80150b6:	881c      	ldrh	r4, [r3, #0]
 80150b8:	2c2e      	cmp	r4, #46	; 0x2e
 80150ba:	d11a      	bne.n	80150f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80150bc:	2301      	movs	r3, #1
 80150be:	703b      	strb	r3, [r7, #0]
 80150c0:	6803      	ldr	r3, [r0, #0]
 80150c2:	b10b      	cbz	r3, 80150c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80150c4:	3302      	adds	r3, #2
 80150c6:	6003      	str	r3, [r0, #0]
 80150c8:	680b      	ldr	r3, [r1, #0]
 80150ca:	b10b      	cbz	r3, 80150d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 80150cc:	3301      	adds	r3, #1
 80150ce:	600b      	str	r3, [r1, #0]
 80150d0:	6803      	ldr	r3, [r0, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d036      	beq.n	8015144 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 80150d6:	881b      	ldrh	r3, [r3, #0]
 80150d8:	2b2a      	cmp	r3, #42	; 0x2a
 80150da:	d137      	bne.n	801514c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80150dc:	f04f 33ff 	mov.w	r3, #4294967295
 80150e0:	602b      	str	r3, [r5, #0]
 80150e2:	6803      	ldr	r3, [r0, #0]
 80150e4:	b10b      	cbz	r3, 80150ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 80150e6:	3302      	adds	r3, #2
 80150e8:	6003      	str	r3, [r0, #0]
 80150ea:	680b      	ldr	r3, [r1, #0]
 80150ec:	b10b      	cbz	r3, 80150f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80150ee:	3301      	adds	r3, #1
 80150f0:	600b      	str	r3, [r1, #0]
 80150f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150f6:	680c      	ldr	r4, [r1, #0]
 80150f8:	b134      	cbz	r4, 8015108 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80150fa:	7824      	ldrb	r4, [r4, #0]
 80150fc:	e7cc      	b.n	8015098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80150fe:	680b      	ldr	r3, [r1, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d0f6      	beq.n	80150f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015104:	781c      	ldrb	r4, [r3, #0]
 8015106:	e7d7      	b.n	80150b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8015108:	2300      	movs	r3, #0
 801510a:	220a      	movs	r2, #10
 801510c:	6033      	str	r3, [r6, #0]
 801510e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015112:	fa1f f38c 	uxth.w	r3, ip
 8015116:	2b09      	cmp	r3, #9
 8015118:	d8ce      	bhi.n	80150b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801511a:	6833      	ldr	r3, [r6, #0]
 801511c:	fb02 c303 	mla	r3, r2, r3, ip
 8015120:	6033      	str	r3, [r6, #0]
 8015122:	6803      	ldr	r3, [r0, #0]
 8015124:	b10b      	cbz	r3, 801512a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8015126:	3302      	adds	r3, #2
 8015128:	6003      	str	r3, [r0, #0]
 801512a:	680b      	ldr	r3, [r1, #0]
 801512c:	b10b      	cbz	r3, 8015132 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801512e:	3301      	adds	r3, #1
 8015130:	600b      	str	r3, [r1, #0]
 8015132:	6803      	ldr	r3, [r0, #0]
 8015134:	b10b      	cbz	r3, 801513a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8015136:	881c      	ldrh	r4, [r3, #0]
 8015138:	e7e9      	b.n	801510e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801513a:	680c      	ldr	r4, [r1, #0]
 801513c:	2c00      	cmp	r4, #0
 801513e:	d0e6      	beq.n	801510e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8015140:	7824      	ldrb	r4, [r4, #0]
 8015142:	e7e4      	b.n	801510e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8015144:	680b      	ldr	r3, [r1, #0]
 8015146:	b10b      	cbz	r3, 801514c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	e7c5      	b.n	80150d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801514c:	2200      	movs	r2, #0
 801514e:	240a      	movs	r4, #10
 8015150:	602a      	str	r2, [r5, #0]
 8015152:	3b30      	subs	r3, #48	; 0x30
 8015154:	682a      	ldr	r2, [r5, #0]
 8015156:	b29e      	uxth	r6, r3
 8015158:	2e09      	cmp	r6, #9
 801515a:	d813      	bhi.n	8015184 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801515c:	fb04 3302 	mla	r3, r4, r2, r3
 8015160:	602b      	str	r3, [r5, #0]
 8015162:	6803      	ldr	r3, [r0, #0]
 8015164:	b10b      	cbz	r3, 801516a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8015166:	3302      	adds	r3, #2
 8015168:	6003      	str	r3, [r0, #0]
 801516a:	680b      	ldr	r3, [r1, #0]
 801516c:	b10b      	cbz	r3, 8015172 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801516e:	3301      	adds	r3, #1
 8015170:	600b      	str	r3, [r1, #0]
 8015172:	6803      	ldr	r3, [r0, #0]
 8015174:	b10b      	cbz	r3, 801517a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8015176:	881b      	ldrh	r3, [r3, #0]
 8015178:	e7eb      	b.n	8015152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801517a:	680b      	ldr	r3, [r1, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d0e8      	beq.n	8015152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	e7e6      	b.n	8015152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015184:	2a06      	cmp	r2, #6
 8015186:	bfa8      	it	ge
 8015188:	2206      	movge	r2, #6
 801518a:	602a      	str	r2, [r5, #0]
 801518c:	e7b1      	b.n	80150f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801518e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801518e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015192:	b0a3      	sub	sp, #140	; 0x8c
 8015194:	2600      	movs	r6, #0
 8015196:	4607      	mov	r7, r0
 8015198:	4688      	mov	r8, r1
 801519a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801519e:	4631      	mov	r1, r6
 80151a0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80151a2:	4648      	mov	r0, r9
 80151a4:	960d      	str	r6, [sp, #52]	; 0x34
 80151a6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80151aa:	2242      	movs	r2, #66	; 0x42
 80151ac:	f009 f876 	bl	801e29c <memset>
 80151b0:	b15f      	cbz	r7, 80151ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80151b2:	f108 3aff 	add.w	sl, r8, #4294967295
 80151b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80151b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151ba:	b152      	cbz	r2, 80151d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80151bc:	8812      	ldrh	r2, [r2, #0]
 80151be:	b10a      	cbz	r2, 80151c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80151c0:	459a      	cmp	sl, r3
 80151c2:	dc2e      	bgt.n	8015222 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80151c4:	2200      	movs	r2, #0
 80151c6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80151ca:	4638      	mov	r0, r7
 80151cc:	b023      	add	sp, #140	; 0x8c
 80151ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151d2:	9a08      	ldr	r2, [sp, #32]
 80151d4:	2a00      	cmp	r2, #0
 80151d6:	d0f5      	beq.n	80151c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80151d8:	7812      	ldrb	r2, [r2, #0]
 80151da:	e7f0      	b.n	80151be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80151dc:	2d00      	cmp	r5, #0
 80151de:	d0ea      	beq.n	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80151e0:	782a      	ldrb	r2, [r5, #0]
 80151e2:	b142      	cbz	r2, 80151f6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80151e4:	2a25      	cmp	r2, #37	; 0x25
 80151e6:	d001      	beq.n	80151ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80151e8:	459a      	cmp	sl, r3
 80151ea:	dc08      	bgt.n	80151fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80151ec:	f1bb 0f00 	cmp.w	fp, #0
 80151f0:	d121      	bne.n	8015236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80151f2:	2d00      	cmp	r5, #0
 80151f4:	d0df      	beq.n	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80151f6:	782a      	ldrb	r2, [r5, #0]
 80151f8:	f04f 0b00 	mov.w	fp, #0
 80151fc:	e01d      	b.n	801523a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80151fe:	f1bb 0f00 	cmp.w	fp, #0
 8015202:	d077      	beq.n	80152f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8015204:	f8bb 2000 	ldrh.w	r2, [fp]
 8015208:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801520c:	f1bb 0f00 	cmp.w	fp, #0
 8015210:	d002      	beq.n	8015218 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8015212:	f10b 0202 	add.w	r2, fp, #2
 8015216:	9209      	str	r2, [sp, #36]	; 0x24
 8015218:	b10d      	cbz	r5, 801521e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801521a:	3501      	adds	r5, #1
 801521c:	9508      	str	r5, [sp, #32]
 801521e:	3301      	adds	r3, #1
 8015220:	930d      	str	r3, [sp, #52]	; 0x34
 8015222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015224:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8015228:	f1bb 0f00 	cmp.w	fp, #0
 801522c:	d0d6      	beq.n	80151dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801522e:	f8bb 2000 	ldrh.w	r2, [fp]
 8015232:	2a00      	cmp	r2, #0
 8015234:	d1d6      	bne.n	80151e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8015236:	f8bb 2000 	ldrh.w	r2, [fp]
 801523a:	2a00      	cmp	r2, #0
 801523c:	d0bb      	beq.n	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801523e:	459a      	cmp	sl, r3
 8015240:	ddb9      	ble.n	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015242:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8015246:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801524a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801524e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8015252:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8015256:	960e      	str	r6, [sp, #56]	; 0x38
 8015258:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801525c:	960f      	str	r6, [sp, #60]	; 0x3c
 801525e:	f1bb 0f00 	cmp.w	fp, #0
 8015262:	d002      	beq.n	801526a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8015264:	f10b 0302 	add.w	r3, fp, #2
 8015268:	9309      	str	r3, [sp, #36]	; 0x24
 801526a:	b10d      	cbz	r5, 8015270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801526c:	1c6b      	adds	r3, r5, #1
 801526e:	9308      	str	r3, [sp, #32]
 8015270:	ab0f      	add	r3, sp, #60	; 0x3c
 8015272:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8015276:	a908      	add	r1, sp, #32
 8015278:	a809      	add	r0, sp, #36	; 0x24
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8015280:	9304      	str	r3, [sp, #16]
 8015282:	ab0e      	add	r3, sp, #56	; 0x38
 8015284:	9303      	str	r3, [sp, #12]
 8015286:	ab0c      	add	r3, sp, #48	; 0x30
 8015288:	9302      	str	r3, [sp, #8]
 801528a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801528e:	9301      	str	r3, [sp, #4]
 8015290:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801529a:	f7ff fea8 	bl	8014fee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801529e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	bfbf      	itttt	lt
 80152a4:	6823      	ldrlt	r3, [r4, #0]
 80152a6:	3404      	addlt	r4, #4
 80152a8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80152ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80152ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	bfbe      	ittt	lt
 80152b4:	6823      	ldrlt	r3, [r4, #0]
 80152b6:	3404      	addlt	r4, #4
 80152b8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80152bc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80152c0:	bfb8      	it	lt
 80152c2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80152c4:	b1d9      	cbz	r1, 80152fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80152c6:	880b      	ldrh	r3, [r1, #0]
 80152c8:	2b69      	cmp	r3, #105	; 0x69
 80152ca:	d01f      	beq.n	801530c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80152cc:	d82f      	bhi.n	801532e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80152ce:	2b58      	cmp	r3, #88	; 0x58
 80152d0:	d01c      	beq.n	801530c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80152d2:	d818      	bhi.n	8015306 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80152d4:	2b25      	cmp	r3, #37	; 0x25
 80152d6:	d034      	beq.n	8015342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80152d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152da:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80152de:	f1bb 0f00 	cmp.w	fp, #0
 80152e2:	f000 80b7 	beq.w	8015454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80152e6:	f8bb 5000 	ldrh.w	r5, [fp]
 80152ea:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80152ee:	3301      	adds	r3, #1
 80152f0:	930d      	str	r3, [sp, #52]	; 0x34
 80152f2:	e029      	b.n	8015348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80152f4:	b10d      	cbz	r5, 80152fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80152f6:	782a      	ldrb	r2, [r5, #0]
 80152f8:	e786      	b.n	8015208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80152fa:	462a      	mov	r2, r5
 80152fc:	e784      	b.n	8015208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80152fe:	2a00      	cmp	r2, #0
 8015300:	d0ea      	beq.n	80152d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015302:	7813      	ldrb	r3, [r2, #0]
 8015304:	e7e0      	b.n	80152c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 8015306:	3b63      	subs	r3, #99	; 0x63
 8015308:	2b01      	cmp	r3, #1
 801530a:	d8e5      	bhi.n	80152d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801530c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8015310:	b329      	cbz	r1, 801535e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8015312:	880b      	ldrh	r3, [r1, #0]
 8015314:	2b69      	cmp	r3, #105	; 0x69
 8015316:	d063      	beq.n	80153e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8015318:	d825      	bhi.n	8015366 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801531a:	2b63      	cmp	r3, #99	; 0x63
 801531c:	d038      	beq.n	8015390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801531e:	2b64      	cmp	r3, #100	; 0x64
 8015320:	d05e      	beq.n	80153e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8015322:	2b58      	cmp	r3, #88	; 0x58
 8015324:	d07a      	beq.n	801541c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 8015326:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801532a:	4625      	mov	r5, r4
 801532c:	e036      	b.n	801539c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801532e:	2b73      	cmp	r3, #115	; 0x73
 8015330:	d0ec      	beq.n	801530c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015332:	d802      	bhi.n	801533a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8015334:	2b6f      	cmp	r3, #111	; 0x6f
 8015336:	d1cf      	bne.n	80152d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015338:	e7e8      	b.n	801530c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801533a:	2b75      	cmp	r3, #117	; 0x75
 801533c:	d0e6      	beq.n	801530c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801533e:	2b78      	cmp	r3, #120	; 0x78
 8015340:	e7f9      	b.n	8015336 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8015342:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015344:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 8015348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801534a:	b10b      	cbz	r3, 8015350 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801534c:	3302      	adds	r3, #2
 801534e:	9309      	str	r3, [sp, #36]	; 0x24
 8015350:	9b08      	ldr	r3, [sp, #32]
 8015352:	2b00      	cmp	r3, #0
 8015354:	f43f af2f 	beq.w	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015358:	3301      	adds	r3, #1
 801535a:	9308      	str	r3, [sp, #32]
 801535c:	e72b      	b.n	80151b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801535e:	2a00      	cmp	r2, #0
 8015360:	d0e1      	beq.n	8015326 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015362:	7813      	ldrb	r3, [r2, #0]
 8015364:	e7d6      	b.n	8015314 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 8015366:	2b73      	cmp	r3, #115	; 0x73
 8015368:	d036      	beq.n	80153d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801536a:	d807      	bhi.n	801537c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801536c:	2b6f      	cmp	r3, #111	; 0x6f
 801536e:	d1da      	bne.n	8015326 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015372:	1d25      	adds	r5, r4, #4
 8015374:	2308      	movs	r3, #8
 8015376:	eba8 0202 	sub.w	r2, r8, r2
 801537a:	e049      	b.n	8015410 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801537c:	2b75      	cmp	r3, #117	; 0x75
 801537e:	d042      	beq.n	8015406 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8015380:	2b78      	cmp	r3, #120	; 0x78
 8015382:	d1d0      	bne.n	8015326 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015384:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015386:	1d25      	adds	r5, r4, #4
 8015388:	2310      	movs	r3, #16
 801538a:	eba8 0202 	sub.w	r2, r8, r2
 801538e:	e03f      	b.n	8015410 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	1d25      	adds	r5, r4, #4
 8015394:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8015398:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801539c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801539e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d051      	beq.n	801544a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 80153a6:	881a      	ldrh	r2, [r3, #0]
 80153a8:	a80d      	add	r0, sp, #52	; 0x34
 80153aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80153ae:	462c      	mov	r4, r5
 80153b0:	9005      	str	r0, [sp, #20]
 80153b2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80153b6:	9004      	str	r0, [sp, #16]
 80153b8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80153ba:	9003      	str	r0, [sp, #12]
 80153bc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80153c0:	9002      	str	r0, [sp, #8]
 80153c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80153c4:	9001      	str	r0, [sp, #4]
 80153c6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80153ca:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80153ce:	9000      	str	r0, [sp, #0]
 80153d0:	a810      	add	r0, sp, #64	; 0x40
 80153d2:	f7ff fd49 	bl	8014e68 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80153d6:	e7b7      	b.n	8015348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80153d8:	1d25      	adds	r5, r4, #4
 80153da:	6823      	ldr	r3, [r4, #0]
 80153dc:	9310      	str	r3, [sp, #64]	; 0x40
 80153de:	e7dd      	b.n	801539c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80153e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153e2:	230a      	movs	r3, #10
 80153e4:	4649      	mov	r1, r9
 80153e6:	6820      	ldr	r0, [r4, #0]
 80153e8:	eba8 0202 	sub.w	r2, r8, r2
 80153ec:	1d25      	adds	r5, r4, #4
 80153ee:	b292      	uxth	r2, r2
 80153f0:	f7ff fd08 	bl	8014e04 <_ZN8touchgfx7Unicode4itoaElPtti>
 80153f4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80153f8:	2b2d      	cmp	r3, #45	; 0x2d
 80153fa:	d1cf      	bne.n	801539c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80153fc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015402:	3302      	adds	r3, #2
 8015404:	e7ea      	b.n	80153dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 8015406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015408:	1d25      	adds	r5, r4, #4
 801540a:	230a      	movs	r3, #10
 801540c:	eba8 0202 	sub.w	r2, r8, r2
 8015410:	b292      	uxth	r2, r2
 8015412:	4649      	mov	r1, r9
 8015414:	6820      	ldr	r0, [r4, #0]
 8015416:	f7ff fcd7 	bl	8014dc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801541a:	e7bf      	b.n	801539c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801541c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801541e:	2310      	movs	r3, #16
 8015420:	4649      	mov	r1, r9
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	eba8 0202 	sub.w	r2, r8, r2
 8015428:	1d25      	adds	r5, r4, #4
 801542a:	b292      	uxth	r2, r2
 801542c:	f7ff fccc 	bl	8014dc8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8015430:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8015434:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8015438:	2b00      	cmp	r3, #0
 801543a:	d0af      	beq.n	801539c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801543c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8015440:	2919      	cmp	r1, #25
 8015442:	d8f7      	bhi.n	8015434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8015444:	3b20      	subs	r3, #32
 8015446:	8013      	strh	r3, [r2, #0]
 8015448:	e7f4      	b.n	8015434 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801544a:	9a08      	ldr	r2, [sp, #32]
 801544c:	2a00      	cmp	r2, #0
 801544e:	d0ab      	beq.n	80153a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8015450:	7812      	ldrb	r2, [r2, #0]
 8015452:	e7a9      	b.n	80153a8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8015454:	2d00      	cmp	r5, #0
 8015456:	f43f af48 	beq.w	80152ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801545a:	782d      	ldrb	r5, [r5, #0]
 801545c:	e745      	b.n	80152ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801545e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801545e:	b507      	push	{r0, r1, r2, lr}
 8015460:	9300      	str	r3, [sp, #0]
 8015462:	4613      	mov	r3, r2
 8015464:	2200      	movs	r2, #0
 8015466:	f7ff fe92 	bl	801518e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801546a:	b003      	add	sp, #12
 801546c:	f85d fb04 	ldr.w	pc, [sp], #4

08015470 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8015470:	b40c      	push	{r2, r3}
 8015472:	b507      	push	{r0, r1, r2, lr}
 8015474:	ab04      	add	r3, sp, #16
 8015476:	f853 2b04 	ldr.w	r2, [r3], #4
 801547a:	9301      	str	r3, [sp, #4]
 801547c:	f7ff ffef 	bl	801545e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8015480:	b003      	add	sp, #12
 8015482:	f85d eb04 	ldr.w	lr, [sp], #4
 8015486:	b002      	add	sp, #8
 8015488:	4770      	bx	lr
	...

0801548c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801548c:	4b01      	ldr	r3, [pc, #4]	; (8015494 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801548e:	6018      	str	r0, [r3, #0]
 8015490:	4770      	bx	lr
 8015492:	bf00      	nop
 8015494:	2400f50c 	.word	0x2400f50c

08015498 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015498:	4b06      	ldr	r3, [pc, #24]	; (80154b4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801549a:	881a      	ldrh	r2, [r3, #0]
 801549c:	4282      	cmp	r2, r0
 801549e:	d807      	bhi.n	80154b0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80154a0:	4b05      	ldr	r3, [pc, #20]	; (80154b8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80154a2:	881b      	ldrh	r3, [r3, #0]
 80154a4:	4413      	add	r3, r2
 80154a6:	4298      	cmp	r0, r3
 80154a8:	bfac      	ite	ge
 80154aa:	2000      	movge	r0, #0
 80154ac:	2001      	movlt	r0, #1
 80154ae:	4770      	bx	lr
 80154b0:	2000      	movs	r0, #0
 80154b2:	4770      	bx	lr
 80154b4:	2400f52c 	.word	0x2400f52c
 80154b8:	2400f530 	.word	0x2400f530

080154bc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80154bc:	b508      	push	{r3, lr}
 80154be:	4601      	mov	r1, r0
 80154c0:	f7ff ffea 	bl	8015498 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80154c4:	b118      	cbz	r0, 80154ce <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80154c6:	4b02      	ldr	r3, [pc, #8]	; (80154d0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80154ce:	bd08      	pop	{r3, pc}
 80154d0:	2400f510 	.word	0x2400f510

080154d4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80154d4:	b538      	push	{r3, r4, r5, lr}
 80154d6:	4604      	mov	r4, r0
 80154d8:	f7ff ffde 	bl	8015498 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80154dc:	b188      	cbz	r0, 8015502 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80154de:	4b09      	ldr	r3, [pc, #36]	; (8015504 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80154e0:	881a      	ldrh	r2, [r3, #0]
 80154e2:	4b09      	ldr	r3, [pc, #36]	; (8015508 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80154e4:	1aa4      	subs	r4, r4, r2
 80154e6:	220e      	movs	r2, #14
 80154e8:	681d      	ldr	r5, [r3, #0]
 80154ea:	4362      	muls	r2, r4
 80154ec:	18ac      	adds	r4, r5, r2
 80154ee:	7b23      	ldrb	r3, [r4, #12]
 80154f0:	f013 0320 	ands.w	r3, r3, #32
 80154f4:	bf17      	itett	ne
 80154f6:	680b      	ldrne	r3, [r1, #0]
 80154f8:	4618      	moveq	r0, r3
 80154fa:	50ab      	strne	r3, [r5, r2]
 80154fc:	684b      	ldrne	r3, [r1, #4]
 80154fe:	bf18      	it	ne
 8015500:	6063      	strne	r3, [r4, #4]
 8015502:	bd38      	pop	{r3, r4, r5, pc}
 8015504:	2400f52c 	.word	0x2400f52c
 8015508:	2400f514 	.word	0x2400f514

0801550c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801550c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015510:	4606      	mov	r6, r0
 8015512:	460c      	mov	r4, r1
 8015514:	f7ff ffc0 	bl	8015498 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015518:	b918      	cbnz	r0, 8015522 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801551a:	2000      	movs	r0, #0
 801551c:	b002      	add	sp, #8
 801551e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015522:	4608      	mov	r0, r1
 8015524:	f7f7 fbf9 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015528:	2800      	cmp	r0, #0
 801552a:	d1f6      	bne.n	801551a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801552c:	4b3f      	ldr	r3, [pc, #252]	; (801562c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801552e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8015630 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8015532:	881d      	ldrh	r5, [r3, #0]
 8015534:	f8d9 a000 	ldr.w	sl, [r9]
 8015538:	46c8      	mov	r8, r9
 801553a:	1b73      	subs	r3, r6, r5
 801553c:	250e      	movs	r5, #14
 801553e:	435d      	muls	r5, r3
 8015540:	eb0a 0705 	add.w	r7, sl, r5
 8015544:	7b3b      	ldrb	r3, [r7, #12]
 8015546:	f013 0f20 	tst.w	r3, #32
 801554a:	d0e6      	beq.n	801551a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801554c:	4621      	mov	r1, r4
 801554e:	4638      	mov	r0, r7
 8015550:	f7fc ff40 	bl	80123d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015554:	2800      	cmp	r0, #0
 8015556:	d1e1      	bne.n	801551c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015558:	4639      	mov	r1, r7
 801555a:	4620      	mov	r0, r4
 801555c:	f7fc ff3a 	bl	80123d4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015560:	b108      	cbz	r0, 8015566 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015562:	4621      	mov	r1, r4
 8015564:	e020      	b.n	80155a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8015566:	f9b4 2000 	ldrsh.w	r2, [r4]
 801556a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801556e:	429a      	cmp	r2, r3
 8015570:	d11e      	bne.n	80155b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015572:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801557a:	429a      	cmp	r2, r3
 801557c:	d118      	bne.n	80155b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801557e:	6820      	ldr	r0, [r4, #0]
 8015580:	466b      	mov	r3, sp
 8015582:	6861      	ldr	r1, [r4, #4]
 8015584:	c303      	stmia	r3!, {r0, r1}
 8015586:	4639      	mov	r1, r7
 8015588:	4668      	mov	r0, sp
 801558a:	f7f9 f924 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801558e:	f8d9 3000 	ldr.w	r3, [r9]
 8015592:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015596:	442b      	add	r3, r5
 8015598:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801559c:	4413      	add	r3, r2
 801559e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80155a2:	4293      	cmp	r3, r2
 80155a4:	dc04      	bgt.n	80155b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80155a6:	4669      	mov	r1, sp
 80155a8:	4630      	mov	r0, r6
 80155aa:	f7ff ff93 	bl	80154d4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80155ae:	e7b5      	b.n	801551c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80155b0:	f8d8 3000 	ldr.w	r3, [r8]
 80155b4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80155b8:	442b      	add	r3, r5
 80155ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80155be:	4291      	cmp	r1, r2
 80155c0:	d119      	bne.n	80155f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80155c2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80155c6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80155ca:	4291      	cmp	r1, r2
 80155cc:	d113      	bne.n	80155f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80155ce:	6820      	ldr	r0, [r4, #0]
 80155d0:	466a      	mov	r2, sp
 80155d2:	6861      	ldr	r1, [r4, #4]
 80155d4:	c203      	stmia	r2!, {r0, r1}
 80155d6:	4619      	mov	r1, r3
 80155d8:	4668      	mov	r0, sp
 80155da:	f7f9 f8fc 	bl	800e7d6 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80155de:	f8d8 3000 	ldr.w	r3, [r8]
 80155e2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80155e6:	442b      	add	r3, r5
 80155e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80155ec:	4413      	add	r3, r2
 80155ee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80155f2:	4293      	cmp	r3, r2
 80155f4:	ddd7      	ble.n	80155a6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80155f6:	4620      	mov	r0, r4
 80155f8:	f7f7 fb8f 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 80155fc:	b990      	cbnz	r0, 8015624 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80155fe:	88a7      	ldrh	r7, [r4, #4]
 8015600:	88e3      	ldrh	r3, [r4, #6]
 8015602:	fb17 f703 	smulbb	r7, r7, r3
 8015606:	f8d8 3000 	ldr.w	r3, [r8]
 801560a:	441d      	add	r5, r3
 801560c:	4628      	mov	r0, r5
 801560e:	f7f7 fb84 	bl	800cd1a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015612:	b948      	cbnz	r0, 8015628 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8015614:	88ab      	ldrh	r3, [r5, #4]
 8015616:	88ea      	ldrh	r2, [r5, #6]
 8015618:	fb13 f302 	smulbb	r3, r3, r2
 801561c:	42bb      	cmp	r3, r7
 801561e:	f6bf af7c 	bge.w	801551a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015622:	e79e      	b.n	8015562 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8015624:	2700      	movs	r7, #0
 8015626:	e7ee      	b.n	8015606 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8015628:	2300      	movs	r3, #0
 801562a:	e7f7      	b.n	801561c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801562c:	2400f52c 	.word	0x2400f52c
 8015630:	2400f514 	.word	0x2400f514

08015634 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015636:	4c24      	ldr	r4, [pc, #144]	; (80156c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015638:	6823      	ldr	r3, [r4, #0]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d042      	beq.n	80156c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801563e:	4a23      	ldr	r2, [pc, #140]	; (80156cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015640:	4d23      	ldr	r5, [pc, #140]	; (80156d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015642:	8811      	ldrh	r1, [r2, #0]
 8015644:	f8b5 c000 	ldrh.w	ip, [r5]
 8015648:	4822      	ldr	r0, [pc, #136]	; (80156d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801564a:	4461      	add	r1, ip
 801564c:	1c4a      	adds	r2, r1, #1
 801564e:	008f      	lsls	r7, r1, #2
 8015650:	f022 0201 	bic.w	r2, r2, #1
 8015654:	19de      	adds	r6, r3, r7
 8015656:	0412      	lsls	r2, r2, #16
 8015658:	6006      	str	r6, [r0, #0]
 801565a:	4e1f      	ldr	r6, [pc, #124]	; (80156d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801565c:	0c12      	lsrs	r2, r2, #16
 801565e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015662:	19da      	adds	r2, r3, r7
 8015664:	6032      	str	r2, [r6, #0]
 8015666:	220e      	movs	r2, #14
 8015668:	fb02 f20c 	mul.w	r2, r2, ip
 801566c:	3203      	adds	r2, #3
 801566e:	f022 0203 	bic.w	r2, r2, #3
 8015672:	443a      	add	r2, r7
 8015674:	4f19      	ldr	r7, [pc, #100]	; (80156dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015676:	4413      	add	r3, r2
 8015678:	603b      	str	r3, [r7, #0]
 801567a:	2300      	movs	r3, #0
 801567c:	4f18      	ldr	r7, [pc, #96]	; (80156e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801567e:	469c      	mov	ip, r3
 8015680:	803b      	strh	r3, [r7, #0]
 8015682:	4f18      	ldr	r7, [pc, #96]	; (80156e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015684:	683f      	ldr	r7, [r7, #0]
 8015686:	1aba      	subs	r2, r7, r2
 8015688:	4f17      	ldr	r7, [pc, #92]	; (80156e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801568a:	603a      	str	r2, [r7, #0]
 801568c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015690:	4a16      	ldr	r2, [pc, #88]	; (80156ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015692:	8013      	strh	r3, [r2, #0]
 8015694:	428b      	cmp	r3, r1
 8015696:	d10d      	bne.n	80156b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015698:	882d      	ldrh	r5, [r5, #0]
 801569a:	2300      	movs	r3, #0
 801569c:	6830      	ldr	r0, [r6, #0]
 801569e:	240e      	movs	r4, #14
 80156a0:	429d      	cmp	r5, r3
 80156a2:	d90f      	bls.n	80156c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80156a4:	fb04 0203 	mla	r2, r4, r3, r0
 80156a8:	3301      	adds	r3, #1
 80156aa:	7b11      	ldrb	r1, [r2, #12]
 80156ac:	f36f 1145 	bfc	r1, #5, #1
 80156b0:	7311      	strb	r1, [r2, #12]
 80156b2:	e7f5      	b.n	80156a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80156b4:	6822      	ldr	r2, [r4, #0]
 80156b6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80156ba:	6802      	ldr	r2, [r0, #0]
 80156bc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80156c0:	3301      	adds	r3, #1
 80156c2:	e7e7      	b.n	8015694 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80156c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156c6:	bf00      	nop
 80156c8:	2400f510 	.word	0x2400f510
 80156cc:	2400f52c 	.word	0x2400f52c
 80156d0:	2400f530 	.word	0x2400f530
 80156d4:	2400f524 	.word	0x2400f524
 80156d8:	2400f514 	.word	0x2400f514
 80156dc:	2400f51c 	.word	0x2400f51c
 80156e0:	2400f52e 	.word	0x2400f52e
 80156e4:	2400f518 	.word	0x2400f518
 80156e8:	2400f528 	.word	0x2400f528
 80156ec:	2400f520 	.word	0x2400f520

080156f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80156f0:	4b06      	ldr	r3, [pc, #24]	; (801570c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	b943      	cbnz	r3, 8015708 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80156f6:	b139      	cbz	r1, 8015708 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80156f8:	4b05      	ldr	r3, [pc, #20]	; (8015710 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80156fa:	801a      	strh	r2, [r3, #0]
 80156fc:	4b05      	ldr	r3, [pc, #20]	; (8015714 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80156fe:	6019      	str	r1, [r3, #0]
 8015700:	4b05      	ldr	r3, [pc, #20]	; (8015718 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015702:	6018      	str	r0, [r3, #0]
 8015704:	f7ff bf96 	b.w	8015634 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015708:	4770      	bx	lr
 801570a:	bf00      	nop
 801570c:	2400f51c 	.word	0x2400f51c
 8015710:	2400f530 	.word	0x2400f530
 8015714:	2400f518 	.word	0x2400f518
 8015718:	2400f510 	.word	0x2400f510

0801571c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801571c:	b470      	push	{r4, r5, r6}
 801571e:	4c07      	ldr	r4, [pc, #28]	; (801573c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015720:	4605      	mov	r5, r0
 8015722:	4610      	mov	r0, r2
 8015724:	9a03      	ldr	r2, [sp, #12]
 8015726:	6826      	ldr	r6, [r4, #0]
 8015728:	b936      	cbnz	r6, 8015738 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801572a:	6025      	str	r5, [r4, #0]
 801572c:	4c04      	ldr	r4, [pc, #16]	; (8015740 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801572e:	8021      	strh	r1, [r4, #0]
 8015730:	4619      	mov	r1, r3
 8015732:	bc70      	pop	{r4, r5, r6}
 8015734:	f7ff bfdc 	b.w	80156f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015738:	bc70      	pop	{r4, r5, r6}
 801573a:	4770      	bx	lr
 801573c:	2400f534 	.word	0x2400f534
 8015740:	2400f52c 	.word	0x2400f52c

08015744 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015744:	4a12      	ldr	r2, [pc, #72]	; (8015790 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015746:	8803      	ldrh	r3, [r0, #0]
 8015748:	8812      	ldrh	r2, [r2, #0]
 801574a:	4293      	cmp	r3, r2
 801574c:	d207      	bcs.n	801575e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801574e:	4a11      	ldr	r2, [pc, #68]	; (8015794 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015750:	2114      	movs	r1, #20
 8015752:	6812      	ldr	r2, [r2, #0]
 8015754:	fb01 2303 	mla	r3, r1, r3, r2
 8015758:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801575c:	4770      	bx	lr
 801575e:	490e      	ldr	r1, [pc, #56]	; (8015798 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015760:	8809      	ldrh	r1, [r1, #0]
 8015762:	4411      	add	r1, r2
 8015764:	428b      	cmp	r3, r1
 8015766:	da04      	bge.n	8015772 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015768:	1a9b      	subs	r3, r3, r2
 801576a:	4a0c      	ldr	r2, [pc, #48]	; (801579c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801576c:	210e      	movs	r1, #14
 801576e:	6812      	ldr	r2, [r2, #0]
 8015770:	e7f0      	b.n	8015754 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015772:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015776:	4293      	cmp	r3, r2
 8015778:	d108      	bne.n	801578c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801577a:	4b09      	ldr	r3, [pc, #36]	; (80157a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	b91b      	cbnz	r3, 8015788 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015780:	4b08      	ldr	r3, [pc, #32]	; (80157a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015782:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015786:	4770      	bx	lr
 8015788:	4b07      	ldr	r3, [pc, #28]	; (80157a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801578a:	e7fa      	b.n	8015782 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801578c:	2000      	movs	r0, #0
 801578e:	4770      	bx	lr
 8015790:	2400f52c 	.word	0x2400f52c
 8015794:	2400f534 	.word	0x2400f534
 8015798:	2400f530 	.word	0x2400f530
 801579c:	2400f514 	.word	0x2400f514
 80157a0:	2400f49c 	.word	0x2400f49c
 80157a4:	2400f49e 	.word	0x2400f49e
 80157a8:	2400f4a0 	.word	0x2400f4a0

080157ac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80157ac:	4a12      	ldr	r2, [pc, #72]	; (80157f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80157ae:	8803      	ldrh	r3, [r0, #0]
 80157b0:	8812      	ldrh	r2, [r2, #0]
 80157b2:	4293      	cmp	r3, r2
 80157b4:	d207      	bcs.n	80157c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80157b6:	4a11      	ldr	r2, [pc, #68]	; (80157fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80157b8:	2114      	movs	r1, #20
 80157ba:	6812      	ldr	r2, [r2, #0]
 80157bc:	fb01 2303 	mla	r3, r1, r3, r2
 80157c0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80157c4:	4770      	bx	lr
 80157c6:	490e      	ldr	r1, [pc, #56]	; (8015800 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80157c8:	8809      	ldrh	r1, [r1, #0]
 80157ca:	4411      	add	r1, r2
 80157cc:	428b      	cmp	r3, r1
 80157ce:	da04      	bge.n	80157da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80157d0:	1a9b      	subs	r3, r3, r2
 80157d2:	4a0c      	ldr	r2, [pc, #48]	; (8015804 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80157d4:	210e      	movs	r1, #14
 80157d6:	6812      	ldr	r2, [r2, #0]
 80157d8:	e7f0      	b.n	80157bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80157da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80157de:	4293      	cmp	r3, r2
 80157e0:	d108      	bne.n	80157f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80157e2:	4b09      	ldr	r3, [pc, #36]	; (8015808 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	b91b      	cbnz	r3, 80157f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80157e8:	4b08      	ldr	r3, [pc, #32]	; (801580c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80157ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80157ee:	4770      	bx	lr
 80157f0:	4b07      	ldr	r3, [pc, #28]	; (8015810 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80157f2:	e7fa      	b.n	80157ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80157f4:	2000      	movs	r0, #0
 80157f6:	4770      	bx	lr
 80157f8:	2400f52c 	.word	0x2400f52c
 80157fc:	2400f534 	.word	0x2400f534
 8015800:	2400f530 	.word	0x2400f530
 8015804:	2400f514 	.word	0x2400f514
 8015808:	2400f49c 	.word	0x2400f49c
 801580c:	2400f4a0 	.word	0x2400f4a0
 8015810:	2400f49e 	.word	0x2400f49e

08015814 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015814:	4a1f      	ldr	r2, [pc, #124]	; (8015894 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8015816:	b510      	push	{r4, lr}
 8015818:	880b      	ldrh	r3, [r1, #0]
 801581a:	8812      	ldrh	r2, [r2, #0]
 801581c:	4293      	cmp	r3, r2
 801581e:	d213      	bcs.n	8015848 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015820:	4a1d      	ldr	r2, [pc, #116]	; (8015898 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8015822:	2114      	movs	r1, #20
 8015824:	6812      	ldr	r2, [r2, #0]
 8015826:	fb01 2303 	mla	r3, r1, r3, r2
 801582a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801582e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015832:	8a1a      	ldrh	r2, [r3, #16]
 8015834:	8a5b      	ldrh	r3, [r3, #18]
 8015836:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801583a:	8004      	strh	r4, [r0, #0]
 801583c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015840:	8041      	strh	r1, [r0, #2]
 8015842:	8082      	strh	r2, [r0, #4]
 8015844:	80c3      	strh	r3, [r0, #6]
 8015846:	e00e      	b.n	8015866 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015848:	4914      	ldr	r1, [pc, #80]	; (801589c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801584a:	8809      	ldrh	r1, [r1, #0]
 801584c:	4411      	add	r1, r2
 801584e:	428b      	cmp	r3, r1
 8015850:	da0a      	bge.n	8015868 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8015852:	1a9b      	subs	r3, r3, r2
 8015854:	4a12      	ldr	r2, [pc, #72]	; (80158a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8015856:	210e      	movs	r1, #14
 8015858:	6812      	ldr	r2, [r2, #0]
 801585a:	fb01 2303 	mla	r3, r1, r3, r2
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	6002      	str	r2, [r0, #0]
 8015862:	685a      	ldr	r2, [r3, #4]
 8015864:	6042      	str	r2, [r0, #4]
 8015866:	bd10      	pop	{r4, pc}
 8015868:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801586c:	4293      	cmp	r3, r2
 801586e:	d10b      	bne.n	8015888 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8015870:	4b0c      	ldr	r3, [pc, #48]	; (80158a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015872:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015876:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015878:	8081      	strh	r1, [r0, #4]
 801587a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801587e:	2300      	movs	r3, #0
 8015880:	80c2      	strh	r2, [r0, #6]
 8015882:	8003      	strh	r3, [r0, #0]
 8015884:	8043      	strh	r3, [r0, #2]
 8015886:	e7ee      	b.n	8015866 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015888:	2300      	movs	r3, #0
 801588a:	8003      	strh	r3, [r0, #0]
 801588c:	8043      	strh	r3, [r0, #2]
 801588e:	8083      	strh	r3, [r0, #4]
 8015890:	e7d8      	b.n	8015844 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015892:	bf00      	nop
 8015894:	2400f52c 	.word	0x2400f52c
 8015898:	2400f534 	.word	0x2400f534
 801589c:	2400f530 	.word	0x2400f530
 80158a0:	2400f514 	.word	0x2400f514
 80158a4:	2400f498 	.word	0x2400f498
 80158a8:	2400f49a 	.word	0x2400f49a

080158ac <_ZNK8touchgfx6Bitmap7getDataEv>:
 80158ac:	4a12      	ldr	r2, [pc, #72]	; (80158f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80158ae:	8803      	ldrh	r3, [r0, #0]
 80158b0:	8811      	ldrh	r1, [r2, #0]
 80158b2:	428b      	cmp	r3, r1
 80158b4:	d20b      	bcs.n	80158ce <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80158b6:	4a11      	ldr	r2, [pc, #68]	; (80158fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80158b8:	6812      	ldr	r2, [r2, #0]
 80158ba:	b112      	cbz	r2, 80158c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80158bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80158c0:	b9c0      	cbnz	r0, 80158f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80158c2:	4a0f      	ldr	r2, [pc, #60]	; (8015900 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80158c4:	6811      	ldr	r1, [r2, #0]
 80158c6:	2214      	movs	r2, #20
 80158c8:	4353      	muls	r3, r2
 80158ca:	58c8      	ldr	r0, [r1, r3]
 80158cc:	4770      	bx	lr
 80158ce:	4a0d      	ldr	r2, [pc, #52]	; (8015904 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80158d0:	8812      	ldrh	r2, [r2, #0]
 80158d2:	440a      	add	r2, r1
 80158d4:	4293      	cmp	r3, r2
 80158d6:	da04      	bge.n	80158e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80158d8:	4a08      	ldr	r2, [pc, #32]	; (80158fc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80158da:	6812      	ldr	r2, [r2, #0]
 80158dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80158e0:	4770      	bx	lr
 80158e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158e6:	4293      	cmp	r3, r2
 80158e8:	d103      	bne.n	80158f2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80158ea:	4b07      	ldr	r3, [pc, #28]	; (8015908 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80158f0:	4770      	bx	lr
 80158f2:	2000      	movs	r0, #0
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	2400f52c 	.word	0x2400f52c
 80158fc:	2400f510 	.word	0x2400f510
 8015900:	2400f534 	.word	0x2400f534
 8015904:	2400f530 	.word	0x2400f530
 8015908:	2400f4a4 	.word	0x2400f4a4

0801590c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801590c:	4b24      	ldr	r3, [pc, #144]	; (80159a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801590e:	8802      	ldrh	r2, [r0, #0]
 8015910:	8818      	ldrh	r0, [r3, #0]
 8015912:	4282      	cmp	r2, r0
 8015914:	d221      	bcs.n	801595a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015916:	4b23      	ldr	r3, [pc, #140]	; (80159a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015918:	6819      	ldr	r1, [r3, #0]
 801591a:	2314      	movs	r3, #20
 801591c:	fb03 1302 	mla	r3, r3, r2, r1
 8015920:	6858      	ldr	r0, [r3, #4]
 8015922:	2800      	cmp	r0, #0
 8015924:	d03a      	beq.n	801599c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015926:	4920      	ldr	r1, [pc, #128]	; (80159a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015928:	6809      	ldr	r1, [r1, #0]
 801592a:	2900      	cmp	r1, #0
 801592c:	d036      	beq.n	801599c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801592e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015932:	2900      	cmp	r1, #0
 8015934:	d032      	beq.n	801599c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015936:	891a      	ldrh	r2, [r3, #8]
 8015938:	8958      	ldrh	r0, [r3, #10]
 801593a:	4350      	muls	r0, r2
 801593c:	7c5a      	ldrb	r2, [r3, #17]
 801593e:	7cdb      	ldrb	r3, [r3, #19]
 8015940:	0952      	lsrs	r2, r2, #5
 8015942:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015946:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801594a:	2b0b      	cmp	r3, #11
 801594c:	bf18      	it	ne
 801594e:	0040      	lslne	r0, r0, #1
 8015950:	3003      	adds	r0, #3
 8015952:	f020 0003 	bic.w	r0, r0, #3
 8015956:	4408      	add	r0, r1
 8015958:	4770      	bx	lr
 801595a:	4b14      	ldr	r3, [pc, #80]	; (80159ac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801595c:	881b      	ldrh	r3, [r3, #0]
 801595e:	4403      	add	r3, r0
 8015960:	429a      	cmp	r2, r3
 8015962:	da1a      	bge.n	801599a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015964:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015966:	1a10      	subs	r0, r2, r0
 8015968:	210e      	movs	r1, #14
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	fb01 3000 	mla	r0, r1, r0, r3
 8015970:	7b03      	ldrb	r3, [r0, #12]
 8015972:	f003 031f 	and.w	r3, r3, #31
 8015976:	2b0b      	cmp	r3, #11
 8015978:	d10b      	bne.n	8015992 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801597a:	8903      	ldrh	r3, [r0, #8]
 801597c:	8940      	ldrh	r0, [r0, #10]
 801597e:	4358      	muls	r0, r3
 8015980:	4b09      	ldr	r3, [pc, #36]	; (80159a8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015982:	3003      	adds	r0, #3
 8015984:	6819      	ldr	r1, [r3, #0]
 8015986:	f020 0303 	bic.w	r3, r0, #3
 801598a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801598e:	4418      	add	r0, r3
 8015990:	4770      	bx	lr
 8015992:	2b0d      	cmp	r3, #13
 8015994:	d101      	bne.n	801599a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015996:	300d      	adds	r0, #13
 8015998:	4770      	bx	lr
 801599a:	2000      	movs	r0, #0
 801599c:	4770      	bx	lr
 801599e:	bf00      	nop
 80159a0:	2400f52c 	.word	0x2400f52c
 80159a4:	2400f534 	.word	0x2400f534
 80159a8:	2400f510 	.word	0x2400f510
 80159ac:	2400f530 	.word	0x2400f530
 80159b0:	2400f514 	.word	0x2400f514

080159b4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80159b4:	4a17      	ldr	r2, [pc, #92]	; (8015a14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80159b6:	b510      	push	{r4, lr}
 80159b8:	8803      	ldrh	r3, [r0, #0]
 80159ba:	8812      	ldrh	r2, [r2, #0]
 80159bc:	4293      	cmp	r3, r2
 80159be:	d20c      	bcs.n	80159da <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80159c0:	4a15      	ldr	r2, [pc, #84]	; (8015a18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80159c2:	2114      	movs	r1, #20
 80159c4:	6812      	ldr	r2, [r2, #0]
 80159c6:	fb01 2303 	mla	r3, r1, r3, r2
 80159ca:	7c58      	ldrb	r0, [r3, #17]
 80159cc:	0942      	lsrs	r2, r0, #5
 80159ce:	7cd8      	ldrb	r0, [r3, #19]
 80159d0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80159d4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80159d8:	bd10      	pop	{r4, pc}
 80159da:	4910      	ldr	r1, [pc, #64]	; (8015a1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80159dc:	8809      	ldrh	r1, [r1, #0]
 80159de:	4411      	add	r1, r2
 80159e0:	428b      	cmp	r3, r1
 80159e2:	da09      	bge.n	80159f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80159e4:	1a9b      	subs	r3, r3, r2
 80159e6:	4a0e      	ldr	r2, [pc, #56]	; (8015a20 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80159e8:	210e      	movs	r1, #14
 80159ea:	6812      	ldr	r2, [r2, #0]
 80159ec:	fb01 2303 	mla	r3, r1, r3, r2
 80159f0:	7b18      	ldrb	r0, [r3, #12]
 80159f2:	f000 001f 	and.w	r0, r0, #31
 80159f6:	e7ef      	b.n	80159d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80159f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80159fc:	4293      	cmp	r3, r2
 80159fe:	d106      	bne.n	8015a0e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015a00:	f7f7 fc18 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 8015a04:	6803      	ldr	r3, [r0, #0]
 8015a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a0c:	4718      	bx	r3
 8015a0e:	2000      	movs	r0, #0
 8015a10:	e7e2      	b.n	80159d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015a12:	bf00      	nop
 8015a14:	2400f52c 	.word	0x2400f52c
 8015a18:	2400f534 	.word	0x2400f534
 8015a1c:	2400f530 	.word	0x2400f530
 8015a20:	2400f514 	.word	0x2400f514

08015a24 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015a24:	2018      	movs	r0, #24
 8015a26:	4770      	bx	lr

08015a28 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015a28:	2001      	movs	r0, #1
 8015a2a:	4770      	bx	lr

08015a2c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015a2c:	4b02      	ldr	r3, [pc, #8]	; (8015a38 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015a2e:	8818      	ldrh	r0, [r3, #0]
 8015a30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015a34:	b280      	uxth	r0, r0
 8015a36:	4770      	bx	lr
 8015a38:	2400f49e 	.word	0x2400f49e

08015a3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015a3c:	2bff      	cmp	r3, #255	; 0xff
 8015a3e:	d040      	beq.n	8015ac2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015a40:	2a2c      	cmp	r2, #44	; 0x2c
 8015a42:	d02a      	beq.n	8015a9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015a44:	d80f      	bhi.n	8015a66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015a46:	2a08      	cmp	r2, #8
 8015a48:	d037      	beq.n	8015aba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015a4a:	d805      	bhi.n	8015a58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8015a4c:	2a04      	cmp	r2, #4
 8015a4e:	d032      	beq.n	8015ab6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015a50:	2a05      	cmp	r2, #5
 8015a52:	d02e      	beq.n	8015ab2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015a54:	2000      	movs	r0, #0
 8015a56:	4770      	bx	lr
 8015a58:	2a0a      	cmp	r2, #10
 8015a5a:	d02e      	beq.n	8015aba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015a5c:	d301      	bcc.n	8015a62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8015a5e:	2a0b      	cmp	r2, #11
 8015a60:	d1f8      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a62:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015a64:	4770      	bx	lr
 8015a66:	2a30      	cmp	r2, #48	; 0x30
 8015a68:	d029      	beq.n	8015abe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015a6a:	d808      	bhi.n	8015a7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015a6c:	2a2e      	cmp	r2, #46	; 0x2e
 8015a6e:	684b      	ldr	r3, [r1, #4]
 8015a70:	d01a      	beq.n	8015aa8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015a72:	d90b      	bls.n	8015a8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d1ec      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a7a:	6a00      	ldr	r0, [r0, #32]
 8015a7c:	4770      	bx	lr
 8015a7e:	2a32      	cmp	r2, #50	; 0x32
 8015a80:	d01d      	beq.n	8015abe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015a82:	d301      	bcc.n	8015a88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015a84:	2a33      	cmp	r2, #51	; 0x33
 8015a86:	d1e5      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a88:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015a8a:	4770      	bx	lr
 8015a8c:	781b      	ldrb	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d0f3      	beq.n	8015a7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015a92:	2b01      	cmp	r3, #1
 8015a94:	d1de      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a96:	6900      	ldr	r0, [r0, #16]
 8015a98:	4770      	bx	lr
 8015a9a:	684b      	ldr	r3, [r1, #4]
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	b133      	cbz	r3, 8015aae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015aa0:	2b01      	cmp	r3, #1
 8015aa2:	d1d7      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015aa4:	6880      	ldr	r0, [r0, #8]
 8015aa6:	4770      	bx	lr
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d1d2      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015aae:	6980      	ldr	r0, [r0, #24]
 8015ab0:	4770      	bx	lr
 8015ab2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015ab4:	4770      	bx	lr
 8015ab6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015ab8:	4770      	bx	lr
 8015aba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015abc:	4770      	bx	lr
 8015abe:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015ac0:	4770      	bx	lr
 8015ac2:	2a2c      	cmp	r2, #44	; 0x2c
 8015ac4:	d02a      	beq.n	8015b1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015ac6:	d80f      	bhi.n	8015ae8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8015ac8:	2a08      	cmp	r2, #8
 8015aca:	d035      	beq.n	8015b38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015acc:	d805      	bhi.n	8015ada <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015ace:	2a04      	cmp	r2, #4
 8015ad0:	d030      	beq.n	8015b34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8015ad2:	2a05      	cmp	r2, #5
 8015ad4:	d1be      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ad6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015ad8:	4770      	bx	lr
 8015ada:	2a0a      	cmp	r2, #10
 8015adc:	d02c      	beq.n	8015b38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015ade:	d301      	bcc.n	8015ae4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8015ae0:	2a0b      	cmp	r2, #11
 8015ae2:	d1b7      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ae4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015ae6:	4770      	bx	lr
 8015ae8:	2a30      	cmp	r2, #48	; 0x30
 8015aea:	d027      	beq.n	8015b3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015aec:	d808      	bhi.n	8015b00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015aee:	2a2e      	cmp	r2, #46	; 0x2e
 8015af0:	684b      	ldr	r3, [r1, #4]
 8015af2:	d01a      	beq.n	8015b2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015af4:	d90b      	bls.n	8015b0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d1ab      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015afc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015afe:	4770      	bx	lr
 8015b00:	2a32      	cmp	r2, #50	; 0x32
 8015b02:	d01b      	beq.n	8015b3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015b04:	d301      	bcc.n	8015b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015b06:	2a33      	cmp	r2, #51	; 0x33
 8015b08:	d1a4      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b0a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015b0c:	4770      	bx	lr
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d0f3      	beq.n	8015afc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015b14:	2b01      	cmp	r3, #1
 8015b16:	d19d      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b18:	6940      	ldr	r0, [r0, #20]
 8015b1a:	4770      	bx	lr
 8015b1c:	684b      	ldr	r3, [r1, #4]
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	b133      	cbz	r3, 8015b30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d196      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b26:	68c0      	ldr	r0, [r0, #12]
 8015b28:	4770      	bx	lr
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d191      	bne.n	8015a54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b30:	69c0      	ldr	r0, [r0, #28]
 8015b32:	4770      	bx	lr
 8015b34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015b36:	4770      	bx	lr
 8015b38:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8015b3a:	4770      	bx	lr
 8015b3c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015b3e:	4770      	bx	lr

08015b40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b44:	b085      	sub	sp, #20
 8015b46:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015b48:	9203      	str	r2, [sp, #12]
 8015b4a:	6870      	ldr	r0, [r6, #4]
 8015b4c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015b50:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015b54:	9101      	str	r1, [sp, #4]
 8015b56:	fa1f f885 	uxth.w	r8, r5
 8015b5a:	43ed      	mvns	r5, r5
 8015b5c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015b60:	b2ed      	uxtb	r5, r5
 8015b62:	fb00 2404 	mla	r4, r0, r4, r2
 8015b66:	6832      	ldr	r2, [r6, #0]
 8015b68:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015b6c:	4414      	add	r4, r2
 8015b6e:	f8dc 2000 	ldr.w	r2, [ip]
 8015b72:	9202      	str	r2, [sp, #8]
 8015b74:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015b78:	f102 0e04 	add.w	lr, r2, #4
 8015b7c:	9a01      	ldr	r2, [sp, #4]
 8015b7e:	2a00      	cmp	r2, #0
 8015b80:	dc03      	bgt.n	8015b8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015b82:	9a03      	ldr	r2, [sp, #12]
 8015b84:	2a00      	cmp	r2, #0
 8015b86:	f340 8116 	ble.w	8015db6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015b8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015b8c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015b90:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015b94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b96:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015b9a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	dd0e      	ble.n	8015bc0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015ba2:	1406      	asrs	r6, r0, #16
 8015ba4:	d405      	bmi.n	8015bb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015ba6:	4556      	cmp	r6, sl
 8015ba8:	da03      	bge.n	8015bb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015baa:	1416      	asrs	r6, r2, #16
 8015bac:	d401      	bmi.n	8015bb2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015bae:	454e      	cmp	r6, r9
 8015bb0:	db07      	blt.n	8015bc2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015bb2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015bb4:	3b01      	subs	r3, #1
 8015bb6:	3403      	adds	r4, #3
 8015bb8:	4430      	add	r0, r6
 8015bba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015bbc:	4432      	add	r2, r6
 8015bbe:	e7ee      	b.n	8015b9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015bc0:	d063      	beq.n	8015c8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015bc2:	1e5e      	subs	r6, r3, #1
 8015bc4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015bc6:	fb07 0706 	mla	r7, r7, r6, r0
 8015bca:	143f      	asrs	r7, r7, #16
 8015bcc:	d454      	bmi.n	8015c78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015bce:	4557      	cmp	r7, sl
 8015bd0:	da52      	bge.n	8015c78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015bd2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015bd4:	fb07 2606 	mla	r6, r7, r6, r2
 8015bd8:	1436      	asrs	r6, r6, #16
 8015bda:	d44d      	bmi.n	8015c78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015bdc:	454e      	cmp	r6, r9
 8015bde:	da4b      	bge.n	8015c78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015be0:	1ce6      	adds	r6, r4, #3
 8015be2:	4699      	mov	r9, r3
 8015be4:	f1b9 0f00 	cmp.w	r9, #0
 8015be8:	f106 0603 	add.w	r6, r6, #3
 8015bec:	dd48      	ble.n	8015c80 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015bee:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015bf2:	1417      	asrs	r7, r2, #16
 8015bf4:	9902      	ldr	r1, [sp, #8]
 8015bf6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015bfa:	f109 39ff 	add.w	r9, r9, #4294967295
 8015bfe:	fb0b 1707 	mla	r7, fp, r7, r1
 8015c02:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015c06:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c08:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015c0c:	fb1b fb05 	smulbb	fp, fp, r5
 8015c10:	4408      	add	r0, r1
 8015c12:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015c14:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015c18:	440a      	add	r2, r1
 8015c1a:	eb0e 0a07 	add.w	sl, lr, r7
 8015c1e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015c22:	fb07 b708 	mla	r7, r7, r8, fp
 8015c26:	b2bf      	uxth	r7, r7
 8015c28:	f107 0b01 	add.w	fp, r7, #1
 8015c2c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015c30:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015c34:	fb1b fb05 	smulbb	fp, fp, r5
 8015c38:	123f      	asrs	r7, r7, #8
 8015c3a:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015c3e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015c42:	fb07 b708 	mla	r7, r7, r8, fp
 8015c46:	b2bf      	uxth	r7, r7
 8015c48:	f107 0b01 	add.w	fp, r7, #1
 8015c4c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015c50:	123f      	asrs	r7, r7, #8
 8015c52:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015c56:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015c5a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015c5e:	fb1a fa05 	smulbb	sl, sl, r5
 8015c62:	fb07 a708 	mla	r7, r7, r8, sl
 8015c66:	b2bf      	uxth	r7, r7
 8015c68:	f107 0a01 	add.w	sl, r7, #1
 8015c6c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015c70:	123f      	asrs	r7, r7, #8
 8015c72:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015c76:	e7b5      	b.n	8015be4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015c78:	2700      	movs	r7, #0
 8015c7a:	1bde      	subs	r6, r3, r7
 8015c7c:	2e00      	cmp	r6, #0
 8015c7e:	dc42      	bgt.n	8015d06 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c88:	441c      	add	r4, r3
 8015c8a:	9b01      	ldr	r3, [sp, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f340 8092 	ble.w	8015db6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c98:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ca0:	eef0 6a62 	vmov.f32	s13, s5
 8015ca4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015ca8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015cac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015cb0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015cb4:	eef0 6a43 	vmov.f32	s13, s6
 8015cb8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015cbc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015cc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015cc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015cc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ccc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015cd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015cd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015cd8:	ee12 2a90 	vmov	r2, s5
 8015cdc:	eef0 2a47 	vmov.f32	s5, s14
 8015ce0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ce4:	ee13 2a10 	vmov	r2, s6
 8015ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8015cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cec:	eeb0 3a67 	vmov.f32	s6, s15
 8015cf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015cf4:	9312      	str	r3, [sp, #72]	; 0x48
 8015cf6:	9b01      	ldr	r3, [sp, #4]
 8015cf8:	9a03      	ldr	r2, [sp, #12]
 8015cfa:	3b01      	subs	r3, #1
 8015cfc:	9301      	str	r3, [sp, #4]
 8015cfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d00:	bf08      	it	eq
 8015d02:	4613      	moveq	r3, r2
 8015d04:	e73a      	b.n	8015b7c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015d06:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015d0a:	d44e      	bmi.n	8015daa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015d0c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015d10:	4556      	cmp	r6, sl
 8015d12:	dd4a      	ble.n	8015daa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015d14:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015d18:	d447      	bmi.n	8015daa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015d1a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015d1e:	4559      	cmp	r1, fp
 8015d20:	dd43      	ble.n	8015daa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015d22:	fa0f f986 	sxth.w	r9, r6
 8015d26:	9902      	ldr	r1, [sp, #8]
 8015d28:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015d2c:	fb0b 1909 	mla	r9, fp, r9, r1
 8015d30:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015d34:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015d38:	fb1b fb05 	smulbb	fp, fp, r5
 8015d3c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015d40:	eb0e 0a09 	add.w	sl, lr, r9
 8015d44:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015d48:	fb09 b908 	mla	r9, r9, r8, fp
 8015d4c:	fa1f f989 	uxth.w	r9, r9
 8015d50:	f109 0b01 	add.w	fp, r9, #1
 8015d54:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015d58:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d5c:	f804 9006 	strb.w	r9, [r4, r6]
 8015d60:	4426      	add	r6, r4
 8015d62:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015d66:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015d6a:	fb1b fb05 	smulbb	fp, fp, r5
 8015d6e:	fb09 b908 	mla	r9, r9, r8, fp
 8015d72:	fa1f f989 	uxth.w	r9, r9
 8015d76:	f109 0b01 	add.w	fp, r9, #1
 8015d7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015d7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d82:	f886 9001 	strb.w	r9, [r6, #1]
 8015d86:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015d8a:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015d8e:	fb1a fa05 	smulbb	sl, sl, r5
 8015d92:	fb09 a908 	mla	r9, r9, r8, sl
 8015d96:	fa1f f989 	uxth.w	r9, r9
 8015d9a:	f109 0a01 	add.w	sl, r9, #1
 8015d9e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015da2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015da6:	f886 9002 	strb.w	r9, [r6, #2]
 8015daa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015dac:	3701      	adds	r7, #1
 8015dae:	4408      	add	r0, r1
 8015db0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015db2:	440a      	add	r2, r1
 8015db4:	e761      	b.n	8015c7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015db6:	b005      	add	sp, #20
 8015db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015dbc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015dc2:	4693      	mov	fp, r2
 8015dc4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015dca:	6868      	ldr	r0, [r5, #4]
 8015dcc:	6877      	ldr	r7, [r6, #4]
 8015dce:	9100      	str	r1, [sp, #0]
 8015dd0:	3704      	adds	r7, #4
 8015dd2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015dd6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8015dda:	fb00 2404 	mla	r4, r0, r4, r2
 8015dde:	682a      	ldr	r2, [r5, #0]
 8015de0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015de4:	4414      	add	r4, r2
 8015de6:	6832      	ldr	r2, [r6, #0]
 8015de8:	9201      	str	r2, [sp, #4]
 8015dea:	9a00      	ldr	r2, [sp, #0]
 8015dec:	2a00      	cmp	r2, #0
 8015dee:	dc03      	bgt.n	8015df8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015df0:	f1bb 0f00 	cmp.w	fp, #0
 8015df4:	f340 80bc 	ble.w	8015f70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015dfa:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015dfe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015e04:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015e08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	dd0c      	ble.n	8015e2a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015e10:	1405      	asrs	r5, r0, #16
 8015e12:	d405      	bmi.n	8015e20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e14:	4555      	cmp	r5, sl
 8015e16:	da03      	bge.n	8015e20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e18:	1415      	asrs	r5, r2, #16
 8015e1a:	d401      	bmi.n	8015e20 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015e1c:	454d      	cmp	r5, r9
 8015e1e:	db05      	blt.n	8015e2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e20:	4440      	add	r0, r8
 8015e22:	4472      	add	r2, lr
 8015e24:	3b01      	subs	r3, #1
 8015e26:	3403      	adds	r4, #3
 8015e28:	e7f0      	b.n	8015e0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015e2a:	d03f      	beq.n	8015eac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015e2c:	1e5d      	subs	r5, r3, #1
 8015e2e:	fb08 0c05 	mla	ip, r8, r5, r0
 8015e32:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015e36:	d42e      	bmi.n	8015e96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015e38:	45d4      	cmp	ip, sl
 8015e3a:	da2c      	bge.n	8015e96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015e3c:	fb0e 2505 	mla	r5, lr, r5, r2
 8015e40:	142d      	asrs	r5, r5, #16
 8015e42:	d428      	bmi.n	8015e96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015e44:	454d      	cmp	r5, r9
 8015e46:	da26      	bge.n	8015e96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015e48:	1ce5      	adds	r5, r4, #3
 8015e4a:	469c      	mov	ip, r3
 8015e4c:	f1bc 0f00 	cmp.w	ip, #0
 8015e50:	f105 0503 	add.w	r5, r5, #3
 8015e54:	dd25      	ble.n	8015ea2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015e56:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015e5a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015e5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015e62:	4472      	add	r2, lr
 8015e64:	468a      	mov	sl, r1
 8015e66:	9901      	ldr	r1, [sp, #4]
 8015e68:	fb0a 1909 	mla	r9, sl, r9, r1
 8015e6c:	1401      	asrs	r1, r0, #16
 8015e6e:	4440      	add	r0, r8
 8015e70:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015e74:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015e78:	eb07 0a09 	add.w	sl, r7, r9
 8015e7c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015e80:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015e84:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015e88:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015e8c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015e90:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015e94:	e7da      	b.n	8015e4c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015e96:	2500      	movs	r5, #0
 8015e98:	eba3 0c05 	sub.w	ip, r3, r5
 8015e9c:	f1bc 0f00 	cmp.w	ip, #0
 8015ea0:	dc3b      	bgt.n	8015f1a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015ea2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eaa:	441c      	add	r4, r3
 8015eac:	9b00      	ldr	r3, [sp, #0]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	dd5e      	ble.n	8015f70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015eb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ebc:	eeb0 6a62 	vmov.f32	s12, s5
 8015ec0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015ec4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015ec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015ecc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015ed0:	eeb0 6a43 	vmov.f32	s12, s6
 8015ed4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015ed8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015edc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015ee0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ee4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015ee8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015eec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015ef0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015ef4:	ee12 2a90 	vmov	r2, s5
 8015ef8:	eef0 2a47 	vmov.f32	s5, s14
 8015efc:	fb92 f8f3 	sdiv	r8, r2, r3
 8015f00:	ee13 2a10 	vmov	r2, s6
 8015f04:	eeb0 3a67 	vmov.f32	s6, s15
 8015f08:	fb92 fef3 	sdiv	lr, r2, r3
 8015f0c:	9b00      	ldr	r3, [sp, #0]
 8015f0e:	3b01      	subs	r3, #1
 8015f10:	9300      	str	r3, [sp, #0]
 8015f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f14:	bf08      	it	eq
 8015f16:	465b      	moveq	r3, fp
 8015f18:	e767      	b.n	8015dea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015f1a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015f1e:	d423      	bmi.n	8015f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015f20:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015f24:	45cc      	cmp	ip, r9
 8015f26:	dd1f      	ble.n	8015f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015f28:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015f2c:	d41c      	bmi.n	8015f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015f2e:	68f1      	ldr	r1, [r6, #12]
 8015f30:	4551      	cmp	r1, sl
 8015f32:	dd19      	ble.n	8015f68 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015f34:	fa0f fc8c 	sxth.w	ip, ip
 8015f38:	9901      	ldr	r1, [sp, #4]
 8015f3a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015f3e:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015f42:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015f46:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015f4a:	eb07 090c 	add.w	r9, r7, ip
 8015f4e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015f52:	f804 a00c 	strb.w	sl, [r4, ip]
 8015f56:	44a4      	add	ip, r4
 8015f58:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015f5c:	f88c a001 	strb.w	sl, [ip, #1]
 8015f60:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015f64:	f88c 9002 	strb.w	r9, [ip, #2]
 8015f68:	4440      	add	r0, r8
 8015f6a:	4472      	add	r2, lr
 8015f6c:	3501      	adds	r5, #1
 8015f6e:	e793      	b.n	8015e98 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015f70:	b003      	add	sp, #12
 8015f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015f76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f7a:	b085      	sub	sp, #20
 8015f7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015f80:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015f82:	9202      	str	r2, [sp, #8]
 8015f84:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015f88:	6860      	ldr	r0, [r4, #4]
 8015f8a:	9203      	str	r2, [sp, #12]
 8015f8c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015f90:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015f94:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8015f98:	fb00 2505 	mla	r5, r0, r5, r2
 8015f9c:	6822      	ldr	r2, [r4, #0]
 8015f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fa2:	4415      	add	r5, r2
 8015fa4:	f8dc 2000 	ldr.w	r2, [ip]
 8015fa8:	9200      	str	r2, [sp, #0]
 8015faa:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015fae:	3204      	adds	r2, #4
 8015fb0:	9201      	str	r2, [sp, #4]
 8015fb2:	2900      	cmp	r1, #0
 8015fb4:	dc03      	bgt.n	8015fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015fb6:	9a02      	ldr	r2, [sp, #8]
 8015fb8:	2a00      	cmp	r2, #0
 8015fba:	f340 8127 	ble.w	801620c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015fc0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015fc4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015fc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015fca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015fce:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	dd0d      	ble.n	8015ff2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015fd6:	1422      	asrs	r2, r4, #16
 8015fd8:	d405      	bmi.n	8015fe6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015fda:	4542      	cmp	r2, r8
 8015fdc:	da03      	bge.n	8015fe6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015fde:	1402      	asrs	r2, r0, #16
 8015fe0:	d401      	bmi.n	8015fe6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015fe2:	42ba      	cmp	r2, r7
 8015fe4:	db06      	blt.n	8015ff4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015fe8:	4474      	add	r4, lr
 8015fea:	3b01      	subs	r3, #1
 8015fec:	3503      	adds	r5, #3
 8015fee:	4410      	add	r0, r2
 8015ff0:	e7ef      	b.n	8015fd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015ff2:	d075      	beq.n	80160e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015ff4:	1e5a      	subs	r2, r3, #1
 8015ff6:	fb0e 4602 	mla	r6, lr, r2, r4
 8015ffa:	1436      	asrs	r6, r6, #16
 8015ffc:	d465      	bmi.n	80160ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ffe:	4546      	cmp	r6, r8
 8016000:	da63      	bge.n	80160ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016002:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016004:	fb06 0202 	mla	r2, r6, r2, r0
 8016008:	1412      	asrs	r2, r2, #16
 801600a:	d45e      	bmi.n	80160ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801600c:	42ba      	cmp	r2, r7
 801600e:	da5c      	bge.n	80160ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016010:	1cef      	adds	r7, r5, #3
 8016012:	4699      	mov	r9, r3
 8016014:	f1b9 0f00 	cmp.w	r9, #0
 8016018:	dd5d      	ble.n	80160d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801601a:	1402      	asrs	r2, r0, #16
 801601c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016020:	1426      	asrs	r6, r4, #16
 8016022:	4692      	mov	sl, r2
 8016024:	9a00      	ldr	r2, [sp, #0]
 8016026:	fb08 220a 	mla	r2, r8, sl, r2
 801602a:	5d92      	ldrb	r2, [r2, r6]
 801602c:	9e01      	ldr	r6, [sp, #4]
 801602e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016032:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016036:	d041      	beq.n	80160bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016038:	9a03      	ldr	r2, [sp, #12]
 801603a:	fa5f fb86 	uxtb.w	fp, r6
 801603e:	fb02 f808 	mul.w	r8, r2, r8
 8016042:	f108 0201 	add.w	r2, r8, #1
 8016046:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801604a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801604e:	1212      	asrs	r2, r2, #8
 8016050:	fa1f fa82 	uxth.w	sl, r2
 8016054:	43d2      	mvns	r2, r2
 8016056:	fb1b fb0a 	smulbb	fp, fp, sl
 801605a:	b2d2      	uxtb	r2, r2
 801605c:	fb08 b802 	mla	r8, r8, r2, fp
 8016060:	fa1f f888 	uxth.w	r8, r8
 8016064:	f108 0b01 	add.w	fp, r8, #1
 8016068:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801606c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016070:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016074:	fb1b fb0a 	smulbb	fp, fp, sl
 8016078:	ea4f 2828 	mov.w	r8, r8, asr #8
 801607c:	fb16 fa0a 	smulbb	sl, r6, sl
 8016080:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016084:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016088:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801608c:	fb06 aa02 	mla	sl, r6, r2, sl
 8016090:	fb08 b802 	mla	r8, r8, r2, fp
 8016094:	fa1f fa8a 	uxth.w	sl, sl
 8016098:	fa1f f888 	uxth.w	r8, r8
 801609c:	f10a 0601 	add.w	r6, sl, #1
 80160a0:	f108 0b01 	add.w	fp, r8, #1
 80160a4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80160a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80160ac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80160b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80160b4:	f807 ac01 	strb.w	sl, [r7, #-1]
 80160b8:	f807 8c02 	strb.w	r8, [r7, #-2]
 80160bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80160be:	4474      	add	r4, lr
 80160c0:	3703      	adds	r7, #3
 80160c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80160c6:	4410      	add	r0, r2
 80160c8:	e7a4      	b.n	8016014 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80160ca:	f04f 0800 	mov.w	r8, #0
 80160ce:	eba3 0208 	sub.w	r2, r3, r8
 80160d2:	2a00      	cmp	r2, #0
 80160d4:	dc3b      	bgt.n	801614e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80160d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80160da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160de:	441d      	add	r5, r3
 80160e0:	2900      	cmp	r1, #0
 80160e2:	f340 8093 	ble.w	801620c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80160e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80160ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80160f0:	3901      	subs	r1, #1
 80160f2:	eeb0 6a62 	vmov.f32	s12, s5
 80160f6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80160fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80160fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016102:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016106:	eeb0 6a43 	vmov.f32	s12, s6
 801610a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801610e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016112:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016116:	ee61 7a27 	vmul.f32	s15, s2, s15
 801611a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801611e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016122:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016126:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801612a:	ee12 2a90 	vmov	r2, s5
 801612e:	eef0 2a47 	vmov.f32	s5, s14
 8016132:	fb92 fef3 	sdiv	lr, r2, r3
 8016136:	ee13 2a10 	vmov	r2, s6
 801613a:	eeb0 3a67 	vmov.f32	s6, s15
 801613e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016142:	9a02      	ldr	r2, [sp, #8]
 8016144:	9312      	str	r3, [sp, #72]	; 0x48
 8016146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016148:	bf08      	it	eq
 801614a:	4613      	moveq	r3, r2
 801614c:	e731      	b.n	8015fb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801614e:	1427      	asrs	r7, r4, #16
 8016150:	d456      	bmi.n	8016200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016152:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016156:	42be      	cmp	r6, r7
 8016158:	dd52      	ble.n	8016200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801615a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801615e:	d44f      	bmi.n	8016200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016160:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016164:	454a      	cmp	r2, r9
 8016166:	dd4b      	ble.n	8016200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016168:	9a00      	ldr	r2, [sp, #0]
 801616a:	b236      	sxth	r6, r6
 801616c:	fb09 2606 	mla	r6, r9, r6, r2
 8016170:	5df2      	ldrb	r2, [r6, r7]
 8016172:	9e01      	ldr	r6, [sp, #4]
 8016174:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016178:	0e3a      	lsrs	r2, r7, #24
 801617a:	d041      	beq.n	8016200 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801617c:	9e03      	ldr	r6, [sp, #12]
 801617e:	fa5f fb87 	uxtb.w	fp, r7
 8016182:	4372      	muls	r2, r6
 8016184:	1c56      	adds	r6, r2, #1
 8016186:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801618a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801618e:	1212      	asrs	r2, r2, #8
 8016190:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016194:	fa1f fa82 	uxth.w	sl, r2
 8016198:	43d2      	mvns	r2, r2
 801619a:	fb1b fb0a 	smulbb	fp, fp, sl
 801619e:	b2d2      	uxtb	r2, r2
 80161a0:	fb09 b902 	mla	r9, r9, r2, fp
 80161a4:	fa1f f989 	uxth.w	r9, r9
 80161a8:	f109 0b01 	add.w	fp, r9, #1
 80161ac:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161b0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80161b4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80161b8:	fb1b fb0a 	smulbb	fp, fp, sl
 80161bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161c0:	fb17 fa0a 	smulbb	sl, r7, sl
 80161c4:	f805 9006 	strb.w	r9, [r5, r6]
 80161c8:	442e      	add	r6, r5
 80161ca:	78b7      	ldrb	r7, [r6, #2]
 80161cc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80161d0:	fb07 aa02 	mla	sl, r7, r2, sl
 80161d4:	fb09 b902 	mla	r9, r9, r2, fp
 80161d8:	fa1f fa8a 	uxth.w	sl, sl
 80161dc:	fa1f f989 	uxth.w	r9, r9
 80161e0:	f10a 0701 	add.w	r7, sl, #1
 80161e4:	f109 0b01 	add.w	fp, r9, #1
 80161e8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80161ec:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80161f4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161f8:	f886 a002 	strb.w	sl, [r6, #2]
 80161fc:	f886 9001 	strb.w	r9, [r6, #1]
 8016200:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016202:	4474      	add	r4, lr
 8016204:	f108 0801 	add.w	r8, r8, #1
 8016208:	4410      	add	r0, r2
 801620a:	e760      	b.n	80160ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801620c:	b005      	add	sp, #20
 801620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016212 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016216:	b085      	sub	sp, #20
 8016218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801621c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801621e:	9203      	str	r2, [sp, #12]
 8016220:	6868      	ldr	r0, [r5, #4]
 8016222:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016226:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801622a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801622e:	fb00 2404 	mla	r4, r0, r4, r2
 8016232:	682a      	ldr	r2, [r5, #0]
 8016234:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016238:	4414      	add	r4, r2
 801623a:	f8dc 2000 	ldr.w	r2, [ip]
 801623e:	9201      	str	r2, [sp, #4]
 8016240:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016244:	3204      	adds	r2, #4
 8016246:	9202      	str	r2, [sp, #8]
 8016248:	2900      	cmp	r1, #0
 801624a:	dc03      	bgt.n	8016254 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801624c:	9a03      	ldr	r2, [sp, #12]
 801624e:	2a00      	cmp	r2, #0
 8016250:	f340 8137 	ble.w	80164c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016256:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801625a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801625e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016260:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016264:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016268:	2b00      	cmp	r3, #0
 801626a:	dd0d      	ble.n	8016288 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801626c:	1405      	asrs	r5, r0, #16
 801626e:	d405      	bmi.n	801627c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016270:	4545      	cmp	r5, r8
 8016272:	da03      	bge.n	801627c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016274:	1415      	asrs	r5, r2, #16
 8016276:	d401      	bmi.n	801627c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016278:	42bd      	cmp	r5, r7
 801627a:	db06      	blt.n	801628a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801627c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801627e:	4470      	add	r0, lr
 8016280:	3b01      	subs	r3, #1
 8016282:	3403      	adds	r4, #3
 8016284:	442a      	add	r2, r5
 8016286:	e7ef      	b.n	8016268 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016288:	d070      	beq.n	801636c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801628a:	1e5d      	subs	r5, r3, #1
 801628c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016290:	1436      	asrs	r6, r6, #16
 8016292:	d462      	bmi.n	801635a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016294:	4546      	cmp	r6, r8
 8016296:	da60      	bge.n	801635a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016298:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801629a:	fb06 2505 	mla	r5, r6, r5, r2
 801629e:	142d      	asrs	r5, r5, #16
 80162a0:	d45b      	bmi.n	801635a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80162a2:	42bd      	cmp	r5, r7
 80162a4:	da59      	bge.n	801635a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80162a6:	1ce5      	adds	r5, r4, #3
 80162a8:	469a      	mov	sl, r3
 80162aa:	f1ba 0f00 	cmp.w	sl, #0
 80162ae:	dd58      	ble.n	8016362 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80162b0:	1416      	asrs	r6, r2, #16
 80162b2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80162b6:	1407      	asrs	r7, r0, #16
 80162b8:	46b1      	mov	r9, r6
 80162ba:	9e01      	ldr	r6, [sp, #4]
 80162bc:	fb08 6609 	mla	r6, r8, r9, r6
 80162c0:	5df6      	ldrb	r6, [r6, r7]
 80162c2:	9f02      	ldr	r7, [sp, #8]
 80162c4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80162c8:	0e37      	lsrs	r7, r6, #24
 80162ca:	2fff      	cmp	r7, #255	; 0xff
 80162cc:	f000 80f0 	beq.w	80164b0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80162d0:	fa5f f887 	uxtb.w	r8, r7
 80162d4:	b3d7      	cbz	r7, 801634c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80162d6:	fa1f f788 	uxth.w	r7, r8
 80162da:	ea6f 0808 	mvn.w	r8, r8
 80162de:	fa5f fb86 	uxtb.w	fp, r6
 80162e2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80162e6:	fa5f f888 	uxtb.w	r8, r8
 80162ea:	fb1b fb07 	smulbb	fp, fp, r7
 80162ee:	fb09 b908 	mla	r9, r9, r8, fp
 80162f2:	fa1f f989 	uxth.w	r9, r9
 80162f6:	f109 0b01 	add.w	fp, r9, #1
 80162fa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80162fe:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8016302:	fb1b fb08 	smulbb	fp, fp, r8
 8016306:	ea4f 2929 	mov.w	r9, r9, asr #8
 801630a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801630e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8016312:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016316:	fb09 b907 	mla	r9, r9, r7, fp
 801631a:	fa1f f989 	uxth.w	r9, r9
 801631e:	f109 0b01 	add.w	fp, r9, #1
 8016322:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016326:	ea4f 2929 	mov.w	r9, r9, asr #8
 801632a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801632e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8016332:	fb19 f808 	smulbb	r8, r9, r8
 8016336:	fb06 8607 	mla	r6, r6, r7, r8
 801633a:	b2b6      	uxth	r6, r6
 801633c:	f106 0801 	add.w	r8, r6, #1
 8016340:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8016344:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016348:	f805 8c01 	strb.w	r8, [r5, #-1]
 801634c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801634e:	4470      	add	r0, lr
 8016350:	3503      	adds	r5, #3
 8016352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016356:	4432      	add	r2, r6
 8016358:	e7a7      	b.n	80162aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801635a:	2600      	movs	r6, #0
 801635c:	1b9d      	subs	r5, r3, r6
 801635e:	2d00      	cmp	r5, #0
 8016360:	dc3b      	bgt.n	80163da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016362:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801636a:	441c      	add	r4, r3
 801636c:	2900      	cmp	r1, #0
 801636e:	f340 80a8 	ble.w	80164c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016372:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016378:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801637c:	3901      	subs	r1, #1
 801637e:	eeb0 6a62 	vmov.f32	s12, s5
 8016382:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016386:	ee31 1a05 	vadd.f32	s2, s2, s10
 801638a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801638e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016392:	eeb0 6a43 	vmov.f32	s12, s6
 8016396:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801639a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801639e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80163a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80163a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80163aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80163ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80163b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80163b6:	ee12 2a90 	vmov	r2, s5
 80163ba:	eef0 2a47 	vmov.f32	s5, s14
 80163be:	fb92 fef3 	sdiv	lr, r2, r3
 80163c2:	ee13 2a10 	vmov	r2, s6
 80163c6:	eeb0 3a67 	vmov.f32	s6, s15
 80163ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80163ce:	9a03      	ldr	r2, [sp, #12]
 80163d0:	9312      	str	r3, [sp, #72]	; 0x48
 80163d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163d4:	bf08      	it	eq
 80163d6:	4613      	moveq	r3, r2
 80163d8:	e736      	b.n	8016248 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80163da:	ea5f 4820 	movs.w	r8, r0, asr #16
 80163de:	d457      	bmi.n	8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80163e0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80163e4:	4547      	cmp	r7, r8
 80163e6:	dd53      	ble.n	8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80163e8:	ea5f 4922 	movs.w	r9, r2, asr #16
 80163ec:	d450      	bmi.n	8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80163ee:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80163f2:	454d      	cmp	r5, r9
 80163f4:	dd4c      	ble.n	8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80163f6:	9d01      	ldr	r5, [sp, #4]
 80163f8:	b23f      	sxth	r7, r7
 80163fa:	fb09 5707 	mla	r7, r9, r7, r5
 80163fe:	f817 5008 	ldrb.w	r5, [r7, r8]
 8016402:	9f02      	ldr	r7, [sp, #8]
 8016404:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8016408:	0e2f      	lsrs	r7, r5, #24
 801640a:	2fff      	cmp	r7, #255	; 0xff
 801640c:	d045      	beq.n	801649a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801640e:	fa5f f987 	uxtb.w	r9, r7
 8016412:	b3ef      	cbz	r7, 8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016414:	fa1f f889 	uxth.w	r8, r9
 8016418:	ea6f 0909 	mvn.w	r9, r9
 801641c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016420:	fa5f fb85 	uxtb.w	fp, r5
 8016424:	f814 a007 	ldrb.w	sl, [r4, r7]
 8016428:	fa5f f989 	uxtb.w	r9, r9
 801642c:	fb1b fb08 	smulbb	fp, fp, r8
 8016430:	fb0a ba09 	mla	sl, sl, r9, fp
 8016434:	fa1f fa8a 	uxth.w	sl, sl
 8016438:	f10a 0b01 	add.w	fp, sl, #1
 801643c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016440:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016444:	f804 a007 	strb.w	sl, [r4, r7]
 8016448:	4427      	add	r7, r4
 801644a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801644e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8016452:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016456:	fb1b fb09 	smulbb	fp, fp, r9
 801645a:	fb0a ba08 	mla	sl, sl, r8, fp
 801645e:	fa1f fa8a 	uxth.w	sl, sl
 8016462:	f10a 0b01 	add.w	fp, sl, #1
 8016466:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801646a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801646e:	f887 a001 	strb.w	sl, [r7, #1]
 8016472:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016476:	fb1a f909 	smulbb	r9, sl, r9
 801647a:	fb05 9508 	mla	r5, r5, r8, r9
 801647e:	b2ad      	uxth	r5, r5
 8016480:	f105 0901 	add.w	r9, r5, #1
 8016484:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016488:	ea4f 2929 	mov.w	r9, r9, asr #8
 801648c:	f887 9002 	strb.w	r9, [r7, #2]
 8016490:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016492:	4470      	add	r0, lr
 8016494:	3601      	adds	r6, #1
 8016496:	442a      	add	r2, r5
 8016498:	e760      	b.n	801635c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801649a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801649e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80164a2:	55e5      	strb	r5, [r4, r7]
 80164a4:	4427      	add	r7, r4
 80164a6:	0c2d      	lsrs	r5, r5, #16
 80164a8:	f887 8001 	strb.w	r8, [r7, #1]
 80164ac:	70bd      	strb	r5, [r7, #2]
 80164ae:	e7ef      	b.n	8016490 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80164b0:	0a37      	lsrs	r7, r6, #8
 80164b2:	f805 6c03 	strb.w	r6, [r5, #-3]
 80164b6:	0c36      	lsrs	r6, r6, #16
 80164b8:	f805 7c02 	strb.w	r7, [r5, #-2]
 80164bc:	f805 6c01 	strb.w	r6, [r5, #-1]
 80164c0:	e744      	b.n	801634c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80164c2:	b005      	add	sp, #20
 80164c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080164c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80164c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164cc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80164ce:	9201      	str	r2, [sp, #4]
 80164d0:	6870      	ldr	r0, [r6, #4]
 80164d2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80164d6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80164da:	fa1f fe85 	uxth.w	lr, r5
 80164de:	43ed      	mvns	r5, r5
 80164e0:	f8dc 8000 	ldr.w	r8, [ip]
 80164e4:	b2ed      	uxtb	r5, r5
 80164e6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80164ea:	fb00 2404 	mla	r4, r0, r4, r2
 80164ee:	6832      	ldr	r2, [r6, #0]
 80164f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80164f4:	4414      	add	r4, r2
 80164f6:	2900      	cmp	r1, #0
 80164f8:	dc03      	bgt.n	8016502 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80164fa:	9a01      	ldr	r2, [sp, #4]
 80164fc:	2a00      	cmp	r2, #0
 80164fe:	f340 810d 	ble.w	801671c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016502:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016504:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016508:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801650c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801650e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016512:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016516:	2b00      	cmp	r3, #0
 8016518:	dd0e      	ble.n	8016538 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801651a:	1406      	asrs	r6, r0, #16
 801651c:	d405      	bmi.n	801652a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801651e:	4556      	cmp	r6, sl
 8016520:	da03      	bge.n	801652a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016522:	1416      	asrs	r6, r2, #16
 8016524:	d401      	bmi.n	801652a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016526:	454e      	cmp	r6, r9
 8016528:	db07      	blt.n	801653a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801652a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801652c:	3b01      	subs	r3, #1
 801652e:	3403      	adds	r4, #3
 8016530:	4430      	add	r0, r6
 8016532:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016534:	4432      	add	r2, r6
 8016536:	e7ee      	b.n	8016516 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8016538:	d060      	beq.n	80165fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801653a:	1e5e      	subs	r6, r3, #1
 801653c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801653e:	fb07 0706 	mla	r7, r7, r6, r0
 8016542:	143f      	asrs	r7, r7, #16
 8016544:	d451      	bmi.n	80165ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016546:	4557      	cmp	r7, sl
 8016548:	da4f      	bge.n	80165ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801654a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801654c:	fb07 2606 	mla	r6, r7, r6, r2
 8016550:	1436      	asrs	r6, r6, #16
 8016552:	d44a      	bmi.n	80165ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016554:	454e      	cmp	r6, r9
 8016556:	da48      	bge.n	80165ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016558:	1ce6      	adds	r6, r4, #3
 801655a:	4699      	mov	r9, r3
 801655c:	f1b9 0f00 	cmp.w	r9, #0
 8016560:	f106 0603 	add.w	r6, r6, #3
 8016564:	dd45      	ble.n	80165f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016566:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801656a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801656e:	1417      	asrs	r7, r2, #16
 8016570:	f109 39ff 	add.w	r9, r9, #4294967295
 8016574:	fb0b a707 	mla	r7, fp, r7, sl
 8016578:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801657c:	fb1b fb05 	smulbb	fp, fp, r5
 8016580:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016584:	eb08 0a07 	add.w	sl, r8, r7
 8016588:	f818 7007 	ldrb.w	r7, [r8, r7]
 801658c:	fb07 b70e 	mla	r7, r7, lr, fp
 8016590:	b2bf      	uxth	r7, r7
 8016592:	f107 0b01 	add.w	fp, r7, #1
 8016596:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801659a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801659e:	fb1b fb05 	smulbb	fp, fp, r5
 80165a2:	123f      	asrs	r7, r7, #8
 80165a4:	f806 7c06 	strb.w	r7, [r6, #-6]
 80165a8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80165ac:	fb07 b70e 	mla	r7, r7, lr, fp
 80165b0:	b2bf      	uxth	r7, r7
 80165b2:	f107 0b01 	add.w	fp, r7, #1
 80165b6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80165ba:	123f      	asrs	r7, r7, #8
 80165bc:	f806 7c05 	strb.w	r7, [r6, #-5]
 80165c0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80165c4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80165c8:	fb1a fa05 	smulbb	sl, sl, r5
 80165cc:	fb07 a70e 	mla	r7, r7, lr, sl
 80165d0:	b2bf      	uxth	r7, r7
 80165d2:	f107 0a01 	add.w	sl, r7, #1
 80165d6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80165da:	123f      	asrs	r7, r7, #8
 80165dc:	f806 7c04 	strb.w	r7, [r6, #-4]
 80165e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80165e2:	4438      	add	r0, r7
 80165e4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80165e6:	443a      	add	r2, r7
 80165e8:	e7b8      	b.n	801655c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80165ea:	2700      	movs	r7, #0
 80165ec:	1bde      	subs	r6, r3, r7
 80165ee:	2e00      	cmp	r6, #0
 80165f0:	dc3f      	bgt.n	8016672 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80165f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165fa:	441c      	add	r4, r3
 80165fc:	2900      	cmp	r1, #0
 80165fe:	f340 808d 	ble.w	801671c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801660c:	3901      	subs	r1, #1
 801660e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016612:	eef0 6a62 	vmov.f32	s13, s5
 8016616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801661a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801661e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016622:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8016626:	eef0 6a43 	vmov.f32	s13, s6
 801662a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801662e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8016632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016636:	ee61 7a27 	vmul.f32	s15, s2, s15
 801663a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801663e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016642:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801664a:	ee12 2a90 	vmov	r2, s5
 801664e:	eef0 2a47 	vmov.f32	s5, s14
 8016652:	fb92 f3f3 	sdiv	r3, r2, r3
 8016656:	ee13 2a10 	vmov	r2, s6
 801665a:	930f      	str	r3, [sp, #60]	; 0x3c
 801665c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801665e:	eeb0 3a67 	vmov.f32	s6, s15
 8016662:	fb92 f3f3 	sdiv	r3, r2, r3
 8016666:	9a01      	ldr	r2, [sp, #4]
 8016668:	9310      	str	r3, [sp, #64]	; 0x40
 801666a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801666c:	bf08      	it	eq
 801666e:	4613      	moveq	r3, r2
 8016670:	e741      	b.n	80164f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016672:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016676:	d44b      	bmi.n	8016710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016678:	f8dc b008 	ldr.w	fp, [ip, #8]
 801667c:	45cb      	cmp	fp, r9
 801667e:	dd47      	ble.n	8016710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016680:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016684:	d444      	bmi.n	8016710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016686:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801668a:	4556      	cmp	r6, sl
 801668c:	dd40      	ble.n	8016710 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801668e:	fa0f f68b 	sxth.w	r6, fp
 8016692:	fb0a 9906 	mla	r9, sl, r6, r9
 8016696:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801669a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801669e:	f814 b006 	ldrb.w	fp, [r4, r6]
 80166a2:	fb1b fb05 	smulbb	fp, fp, r5
 80166a6:	eb08 0a09 	add.w	sl, r8, r9
 80166aa:	f818 9009 	ldrb.w	r9, [r8, r9]
 80166ae:	fb09 b90e 	mla	r9, r9, lr, fp
 80166b2:	fa1f f989 	uxth.w	r9, r9
 80166b6:	f109 0b01 	add.w	fp, r9, #1
 80166ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80166be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166c2:	f804 9006 	strb.w	r9, [r4, r6]
 80166c6:	4426      	add	r6, r4
 80166c8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80166cc:	f896 b001 	ldrb.w	fp, [r6, #1]
 80166d0:	fb1b fb05 	smulbb	fp, fp, r5
 80166d4:	fb09 b90e 	mla	r9, r9, lr, fp
 80166d8:	fa1f f989 	uxth.w	r9, r9
 80166dc:	f109 0b01 	add.w	fp, r9, #1
 80166e0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80166e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166e8:	f886 9001 	strb.w	r9, [r6, #1]
 80166ec:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80166f0:	f896 a002 	ldrb.w	sl, [r6, #2]
 80166f4:	fb1a fa05 	smulbb	sl, sl, r5
 80166f8:	fb09 a90e 	mla	r9, r9, lr, sl
 80166fc:	fa1f f989 	uxth.w	r9, r9
 8016700:	f109 0a01 	add.w	sl, r9, #1
 8016704:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016708:	ea4f 2929 	mov.w	r9, r9, asr #8
 801670c:	f886 9002 	strb.w	r9, [r6, #2]
 8016710:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016712:	3701      	adds	r7, #1
 8016714:	4430      	add	r0, r6
 8016716:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016718:	4432      	add	r2, r6
 801671a:	e767      	b.n	80165ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801671c:	b003      	add	sp, #12
 801671e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016722 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016726:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801672c:	9201      	str	r2, [sp, #4]
 801672e:	6868      	ldr	r0, [r5, #4]
 8016730:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8016732:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016736:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801673a:	fb00 2404 	mla	r4, r0, r4, r2
 801673e:	682a      	ldr	r2, [r5, #0]
 8016740:	f8d7 8000 	ldr.w	r8, [r7]
 8016744:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016748:	4414      	add	r4, r2
 801674a:	2900      	cmp	r1, #0
 801674c:	dc03      	bgt.n	8016756 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801674e:	9a01      	ldr	r2, [sp, #4]
 8016750:	2a00      	cmp	r2, #0
 8016752:	f340 80af 	ble.w	80168b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016758:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801675c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016760:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016762:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016766:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801676a:	2b00      	cmp	r3, #0
 801676c:	dd0c      	ble.n	8016788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801676e:	1405      	asrs	r5, r0, #16
 8016770:	d405      	bmi.n	801677e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016772:	4555      	cmp	r5, sl
 8016774:	da03      	bge.n	801677e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016776:	1415      	asrs	r5, r2, #16
 8016778:	d401      	bmi.n	801677e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801677a:	454d      	cmp	r5, r9
 801677c:	db05      	blt.n	801678a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801677e:	4470      	add	r0, lr
 8016780:	4462      	add	r2, ip
 8016782:	3b01      	subs	r3, #1
 8016784:	3403      	adds	r4, #3
 8016786:	e7f0      	b.n	801676a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016788:	d038      	beq.n	80167fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801678a:	1e5d      	subs	r5, r3, #1
 801678c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016790:	1436      	asrs	r6, r6, #16
 8016792:	d42a      	bmi.n	80167ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016794:	4556      	cmp	r6, sl
 8016796:	da28      	bge.n	80167ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016798:	fb0c 2505 	mla	r5, ip, r5, r2
 801679c:	142d      	asrs	r5, r5, #16
 801679e:	d424      	bmi.n	80167ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80167a0:	454d      	cmp	r5, r9
 80167a2:	da22      	bge.n	80167ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 80167a4:	1ce6      	adds	r6, r4, #3
 80167a6:	4699      	mov	r9, r3
 80167a8:	f1b9 0f00 	cmp.w	r9, #0
 80167ac:	f106 0603 	add.w	r6, r6, #3
 80167b0:	dd1f      	ble.n	80167f2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 80167b2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 80167b6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80167ba:	1415      	asrs	r5, r2, #16
 80167bc:	4470      	add	r0, lr
 80167be:	4462      	add	r2, ip
 80167c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80167c4:	fb0b a505 	mla	r5, fp, r5, sl
 80167c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80167cc:	eb08 0a05 	add.w	sl, r8, r5
 80167d0:	f818 5005 	ldrb.w	r5, [r8, r5]
 80167d4:	f806 5c06 	strb.w	r5, [r6, #-6]
 80167d8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80167dc:	f806 5c05 	strb.w	r5, [r6, #-5]
 80167e0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80167e4:	f806 5c04 	strb.w	r5, [r6, #-4]
 80167e8:	e7de      	b.n	80167a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80167ea:	2600      	movs	r6, #0
 80167ec:	1b9d      	subs	r5, r3, r6
 80167ee:	2d00      	cmp	r5, #0
 80167f0:	dc38      	bgt.n	8016864 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80167f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80167f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80167fa:	441c      	add	r4, r3
 80167fc:	2900      	cmp	r1, #0
 80167fe:	dd59      	ble.n	80168b4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016800:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016806:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801680a:	3901      	subs	r1, #1
 801680c:	eeb0 6a62 	vmov.f32	s12, s5
 8016810:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016814:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016818:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801681c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016820:	eeb0 6a43 	vmov.f32	s12, s6
 8016824:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016828:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801682c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016830:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016834:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016838:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801683c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016840:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016844:	ee12 2a90 	vmov	r2, s5
 8016848:	eef0 2a47 	vmov.f32	s5, s14
 801684c:	fb92 fef3 	sdiv	lr, r2, r3
 8016850:	ee13 2a10 	vmov	r2, s6
 8016854:	eeb0 3a67 	vmov.f32	s6, s15
 8016858:	fb92 fcf3 	sdiv	ip, r2, r3
 801685c:	9a01      	ldr	r2, [sp, #4]
 801685e:	bf08      	it	eq
 8016860:	4613      	moveq	r3, r2
 8016862:	e772      	b.n	801674a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016864:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016868:	d420      	bmi.n	80168ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801686a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801686e:	45cb      	cmp	fp, r9
 8016870:	dd1c      	ble.n	80168ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016872:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016876:	d419      	bmi.n	80168ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016878:	68fd      	ldr	r5, [r7, #12]
 801687a:	4555      	cmp	r5, sl
 801687c:	dd16      	ble.n	80168ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801687e:	fa0f f58b 	sxth.w	r5, fp
 8016882:	fb0a 9505 	mla	r5, sl, r5, r9
 8016886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801688a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801688e:	eb08 0b05 	add.w	fp, r8, r5
 8016892:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016896:	f804 9005 	strb.w	r9, [r4, r5]
 801689a:	4425      	add	r5, r4
 801689c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80168a0:	f885 9001 	strb.w	r9, [r5, #1]
 80168a4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80168a8:	f885 9002 	strb.w	r9, [r5, #2]
 80168ac:	4470      	add	r0, lr
 80168ae:	4462      	add	r2, ip
 80168b0:	3601      	adds	r6, #1
 80168b2:	e79b      	b.n	80167ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80168b4:	b003      	add	sp, #12
 80168b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168ba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80168ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168be:	b085      	sub	sp, #20
 80168c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80168c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80168c6:	9202      	str	r2, [sp, #8]
 80168c8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80168cc:	6860      	ldr	r0, [r4, #4]
 80168ce:	9203      	str	r2, [sp, #12]
 80168d0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80168d4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80168d8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80168dc:	fb00 2505 	mla	r5, r0, r5, r2
 80168e0:	6822      	ldr	r2, [r4, #0]
 80168e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80168e6:	4415      	add	r5, r2
 80168e8:	f8dc 2000 	ldr.w	r2, [ip]
 80168ec:	9201      	str	r2, [sp, #4]
 80168ee:	2900      	cmp	r1, #0
 80168f0:	dc03      	bgt.n	80168fa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80168f2:	9a02      	ldr	r2, [sp, #8]
 80168f4:	2a00      	cmp	r2, #0
 80168f6:	f340 8122 	ble.w	8016b3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80168fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80168fc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016900:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016906:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801690a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801690e:	2b00      	cmp	r3, #0
 8016910:	dd0d      	ble.n	801692e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016912:	1422      	asrs	r2, r4, #16
 8016914:	d405      	bmi.n	8016922 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016916:	4542      	cmp	r2, r8
 8016918:	da03      	bge.n	8016922 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801691a:	1402      	asrs	r2, r0, #16
 801691c:	d401      	bmi.n	8016922 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801691e:	42ba      	cmp	r2, r7
 8016920:	db06      	blt.n	8016930 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016922:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016924:	4474      	add	r4, lr
 8016926:	3b01      	subs	r3, #1
 8016928:	3503      	adds	r5, #3
 801692a:	4410      	add	r0, r2
 801692c:	e7ef      	b.n	801690e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801692e:	d072      	beq.n	8016a16 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016930:	1e5a      	subs	r2, r3, #1
 8016932:	fb0e 4602 	mla	r6, lr, r2, r4
 8016936:	1436      	asrs	r6, r6, #16
 8016938:	d462      	bmi.n	8016a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801693a:	4546      	cmp	r6, r8
 801693c:	da60      	bge.n	8016a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801693e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016940:	fb06 0202 	mla	r2, r6, r2, r0
 8016944:	1412      	asrs	r2, r2, #16
 8016946:	d45b      	bmi.n	8016a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016948:	42ba      	cmp	r2, r7
 801694a:	da59      	bge.n	8016a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801694c:	1cef      	adds	r7, r5, #3
 801694e:	4699      	mov	r9, r3
 8016950:	f1b9 0f00 	cmp.w	r9, #0
 8016954:	dd5a      	ble.n	8016a0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016956:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801695a:	1426      	asrs	r6, r4, #16
 801695c:	1402      	asrs	r2, r0, #16
 801695e:	fb08 6202 	mla	r2, r8, r2, r6
 8016962:	9e01      	ldr	r6, [sp, #4]
 8016964:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016968:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801696c:	d041      	beq.n	80169f2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801696e:	9a03      	ldr	r2, [sp, #12]
 8016970:	fa5f fb86 	uxtb.w	fp, r6
 8016974:	fb02 f808 	mul.w	r8, r2, r8
 8016978:	f108 0201 	add.w	r2, r8, #1
 801697c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016980:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016984:	1212      	asrs	r2, r2, #8
 8016986:	fa1f fa82 	uxth.w	sl, r2
 801698a:	43d2      	mvns	r2, r2
 801698c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016990:	b2d2      	uxtb	r2, r2
 8016992:	fb08 b802 	mla	r8, r8, r2, fp
 8016996:	fa1f f888 	uxth.w	r8, r8
 801699a:	f108 0b01 	add.w	fp, r8, #1
 801699e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80169a2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80169a6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80169aa:	fb1b fb0a 	smulbb	fp, fp, sl
 80169ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 80169b2:	fb16 fa0a 	smulbb	sl, r6, sl
 80169b6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80169ba:	f807 8c03 	strb.w	r8, [r7, #-3]
 80169be:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80169c2:	fb06 aa02 	mla	sl, r6, r2, sl
 80169c6:	fb08 b802 	mla	r8, r8, r2, fp
 80169ca:	fa1f fa8a 	uxth.w	sl, sl
 80169ce:	fa1f f888 	uxth.w	r8, r8
 80169d2:	f10a 0601 	add.w	r6, sl, #1
 80169d6:	f108 0b01 	add.w	fp, r8, #1
 80169da:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80169de:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80169e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80169e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80169ea:	f807 ac01 	strb.w	sl, [r7, #-1]
 80169ee:	f807 8c02 	strb.w	r8, [r7, #-2]
 80169f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169f4:	4474      	add	r4, lr
 80169f6:	3703      	adds	r7, #3
 80169f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80169fc:	4410      	add	r0, r2
 80169fe:	e7a7      	b.n	8016950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016a00:	f04f 0800 	mov.w	r8, #0
 8016a04:	eba3 0208 	sub.w	r2, r3, r8
 8016a08:	2a00      	cmp	r2, #0
 8016a0a:	dc3b      	bgt.n	8016a84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016a0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a14:	441d      	add	r5, r3
 8016a16:	2900      	cmp	r1, #0
 8016a18:	f340 8091 	ble.w	8016b3e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016a1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016a20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016a26:	3901      	subs	r1, #1
 8016a28:	eeb0 6a62 	vmov.f32	s12, s5
 8016a2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016a30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016a34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016a38:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016a3c:	eeb0 6a43 	vmov.f32	s12, s6
 8016a40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016a44:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016a48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016a4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016a50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016a54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016a58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016a5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016a60:	ee12 2a90 	vmov	r2, s5
 8016a64:	eef0 2a47 	vmov.f32	s5, s14
 8016a68:	fb92 fef3 	sdiv	lr, r2, r3
 8016a6c:	ee13 2a10 	vmov	r2, s6
 8016a70:	eeb0 3a67 	vmov.f32	s6, s15
 8016a74:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a78:	9a02      	ldr	r2, [sp, #8]
 8016a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8016a7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a7e:	bf08      	it	eq
 8016a80:	4613      	moveq	r3, r2
 8016a82:	e734      	b.n	80168ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016a84:	1427      	asrs	r7, r4, #16
 8016a86:	d454      	bmi.n	8016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a88:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016a8c:	42be      	cmp	r6, r7
 8016a8e:	dd50      	ble.n	8016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a90:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016a94:	d44d      	bmi.n	8016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a96:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016a9a:	454a      	cmp	r2, r9
 8016a9c:	dd49      	ble.n	8016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a9e:	b236      	sxth	r6, r6
 8016aa0:	9a01      	ldr	r2, [sp, #4]
 8016aa2:	fb09 7606 	mla	r6, r9, r6, r7
 8016aa6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016aaa:	0e3a      	lsrs	r2, r7, #24
 8016aac:	d041      	beq.n	8016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016aae:	9e03      	ldr	r6, [sp, #12]
 8016ab0:	fa5f fb87 	uxtb.w	fp, r7
 8016ab4:	4372      	muls	r2, r6
 8016ab6:	1c56      	adds	r6, r2, #1
 8016ab8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016abc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016ac0:	1212      	asrs	r2, r2, #8
 8016ac2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016ac6:	fa1f fa82 	uxth.w	sl, r2
 8016aca:	43d2      	mvns	r2, r2
 8016acc:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ad0:	b2d2      	uxtb	r2, r2
 8016ad2:	fb09 b902 	mla	r9, r9, r2, fp
 8016ad6:	fa1f f989 	uxth.w	r9, r9
 8016ada:	f109 0b01 	add.w	fp, r9, #1
 8016ade:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016ae2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016ae6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016aea:	fb1b fb0a 	smulbb	fp, fp, sl
 8016aee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016af2:	fb17 fa0a 	smulbb	sl, r7, sl
 8016af6:	f805 9006 	strb.w	r9, [r5, r6]
 8016afa:	442e      	add	r6, r5
 8016afc:	78b7      	ldrb	r7, [r6, #2]
 8016afe:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016b02:	fb07 aa02 	mla	sl, r7, r2, sl
 8016b06:	fb09 b902 	mla	r9, r9, r2, fp
 8016b0a:	fa1f fa8a 	uxth.w	sl, sl
 8016b0e:	fa1f f989 	uxth.w	r9, r9
 8016b12:	f10a 0701 	add.w	r7, sl, #1
 8016b16:	f109 0b01 	add.w	fp, r9, #1
 8016b1a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016b1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016b22:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016b26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b2a:	f886 a002 	strb.w	sl, [r6, #2]
 8016b2e:	f886 9001 	strb.w	r9, [r6, #1]
 8016b32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b34:	4474      	add	r4, lr
 8016b36:	f108 0801 	add.w	r8, r8, #1
 8016b3a:	4410      	add	r0, r2
 8016b3c:	e762      	b.n	8016a04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016b3e:	b005      	add	sp, #20
 8016b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b48:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b4e:	9201      	str	r2, [sp, #4]
 8016b50:	6860      	ldr	r0, [r4, #4]
 8016b52:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016b56:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8016b5a:	fb00 2505 	mla	r5, r0, r5, r2
 8016b5e:	6822      	ldr	r2, [r4, #0]
 8016b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b64:	4415      	add	r5, r2
 8016b66:	f8dc 2000 	ldr.w	r2, [ip]
 8016b6a:	9200      	str	r2, [sp, #0]
 8016b6c:	2900      	cmp	r1, #0
 8016b6e:	dc03      	bgt.n	8016b78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016b70:	9a01      	ldr	r2, [sp, #4]
 8016b72:	2a00      	cmp	r2, #0
 8016b74:	f340 812b 	ble.w	8016dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b7a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016b7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b84:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016b88:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	dd0e      	ble.n	8016bae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016b90:	1422      	asrs	r2, r4, #16
 8016b92:	d405      	bmi.n	8016ba0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b94:	4572      	cmp	r2, lr
 8016b96:	da03      	bge.n	8016ba0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b98:	1402      	asrs	r2, r0, #16
 8016b9a:	d401      	bmi.n	8016ba0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b9c:	42ba      	cmp	r2, r7
 8016b9e:	db07      	blt.n	8016bb0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ba2:	3b01      	subs	r3, #1
 8016ba4:	3503      	adds	r5, #3
 8016ba6:	4414      	add	r4, r2
 8016ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016baa:	4410      	add	r0, r2
 8016bac:	e7ee      	b.n	8016b8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016bae:	d06f      	beq.n	8016c90 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016bb0:	1e5a      	subs	r2, r3, #1
 8016bb2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016bb4:	fb06 4602 	mla	r6, r6, r2, r4
 8016bb8:	1436      	asrs	r6, r6, #16
 8016bba:	d45e      	bmi.n	8016c7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016bbc:	4576      	cmp	r6, lr
 8016bbe:	da5c      	bge.n	8016c7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016bc0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016bc2:	fb06 0202 	mla	r2, r6, r2, r0
 8016bc6:	1412      	asrs	r2, r2, #16
 8016bc8:	d457      	bmi.n	8016c7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016bca:	42ba      	cmp	r2, r7
 8016bcc:	da55      	bge.n	8016c7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016bce:	1cee      	adds	r6, r5, #3
 8016bd0:	469a      	mov	sl, r3
 8016bd2:	f1ba 0f00 	cmp.w	sl, #0
 8016bd6:	dd56      	ble.n	8016c86 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016bd8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016bdc:	1427      	asrs	r7, r4, #16
 8016bde:	1402      	asrs	r2, r0, #16
 8016be0:	fb0e 7202 	mla	r2, lr, r2, r7
 8016be4:	9f00      	ldr	r7, [sp, #0]
 8016be6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016bea:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016bee:	d03c      	beq.n	8016c6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016bf0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016bf4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016bf8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016bfc:	fa5f f28e 	uxtb.w	r2, lr
 8016c00:	b2ff      	uxtb	r7, r7
 8016c02:	f000 80dd 	beq.w	8016dc0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016c06:	fa1f f882 	uxth.w	r8, r2
 8016c0a:	43d2      	mvns	r2, r2
 8016c0c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016c10:	fb17 f708 	smulbb	r7, r7, r8
 8016c14:	b2d2      	uxtb	r2, r2
 8016c16:	fb19 f908 	smulbb	r9, r9, r8
 8016c1a:	fb0e 7702 	mla	r7, lr, r2, r7
 8016c1e:	fb1b f808 	smulbb	r8, fp, r8
 8016c22:	b2bf      	uxth	r7, r7
 8016c24:	f107 0e01 	add.w	lr, r7, #1
 8016c28:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016c2c:	123f      	asrs	r7, r7, #8
 8016c2e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016c32:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016c36:	fb07 9902 	mla	r9, r7, r2, r9
 8016c3a:	fa1f f989 	uxth.w	r9, r9
 8016c3e:	f109 0701 	add.w	r7, r9, #1
 8016c42:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016c46:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016c4a:	fb07 8802 	mla	r8, r7, r2, r8
 8016c4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c52:	fa1f f888 	uxth.w	r8, r8
 8016c56:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016c5a:	f108 0201 	add.w	r2, r8, #1
 8016c5e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016c62:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c66:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016c6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c6c:	3603      	adds	r6, #3
 8016c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c72:	4414      	add	r4, r2
 8016c74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c76:	4410      	add	r0, r2
 8016c78:	e7ab      	b.n	8016bd2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016c7a:	f04f 0e00 	mov.w	lr, #0
 8016c7e:	eba3 020e 	sub.w	r2, r3, lr
 8016c82:	2a00      	cmp	r2, #0
 8016c84:	dc3d      	bgt.n	8016d02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016c86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c8e:	441d      	add	r5, r3
 8016c90:	2900      	cmp	r1, #0
 8016c92:	f340 809c 	ble.w	8016dce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016c96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ca0:	3901      	subs	r1, #1
 8016ca2:	eeb0 6a62 	vmov.f32	s12, s5
 8016ca6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016caa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016cae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016cb2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016cb6:	eeb0 6a43 	vmov.f32	s12, s6
 8016cba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016cbe:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016cc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016cc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016cca:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016cce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016cd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016cd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016cda:	ee12 2a90 	vmov	r2, s5
 8016cde:	eef0 2a47 	vmov.f32	s5, s14
 8016ce2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ce6:	ee13 2a10 	vmov	r2, s6
 8016cea:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cee:	eeb0 3a67 	vmov.f32	s6, s15
 8016cf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016cf6:	9a01      	ldr	r2, [sp, #4]
 8016cf8:	9310      	str	r3, [sp, #64]	; 0x40
 8016cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cfc:	bf08      	it	eq
 8016cfe:	4613      	moveq	r3, r2
 8016d00:	e734      	b.n	8016b6c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016d02:	1427      	asrs	r7, r4, #16
 8016d04:	d44d      	bmi.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d06:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016d0a:	42be      	cmp	r6, r7
 8016d0c:	dd49      	ble.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d0e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016d12:	d446      	bmi.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016d18:	4542      	cmp	r2, r8
 8016d1a:	dd42      	ble.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d1c:	b236      	sxth	r6, r6
 8016d1e:	9a00      	ldr	r2, [sp, #0]
 8016d20:	fb08 7606 	mla	r6, r8, r6, r7
 8016d24:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016d28:	0e3a      	lsrs	r2, r7, #24
 8016d2a:	d03a      	beq.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d2c:	2aff      	cmp	r2, #255	; 0xff
 8016d2e:	b2d6      	uxtb	r6, r2
 8016d30:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016d34:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016d38:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016d3c:	b2ff      	uxtb	r7, r7
 8016d3e:	d037      	beq.n	8016db0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016d40:	fa1f f986 	uxth.w	r9, r6
 8016d44:	4472      	add	r2, lr
 8016d46:	43f6      	mvns	r6, r6
 8016d48:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016d4c:	fb17 f709 	smulbb	r7, r7, r9
 8016d50:	fb1a fa09 	smulbb	sl, sl, r9
 8016d54:	b2f6      	uxtb	r6, r6
 8016d56:	fb1b f909 	smulbb	r9, fp, r9
 8016d5a:	fb08 7706 	mla	r7, r8, r6, r7
 8016d5e:	b2bf      	uxth	r7, r7
 8016d60:	f107 0801 	add.w	r8, r7, #1
 8016d64:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016d68:	123f      	asrs	r7, r7, #8
 8016d6a:	54af      	strb	r7, [r5, r2]
 8016d6c:	442a      	add	r2, r5
 8016d6e:	7857      	ldrb	r7, [r2, #1]
 8016d70:	fb07 aa06 	mla	sl, r7, r6, sl
 8016d74:	fa1f fa8a 	uxth.w	sl, sl
 8016d78:	f10a 0701 	add.w	r7, sl, #1
 8016d7c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016d80:	7897      	ldrb	r7, [r2, #2]
 8016d82:	fb07 9906 	mla	r9, r7, r6, r9
 8016d86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d8a:	fa1f f989 	uxth.w	r9, r9
 8016d8e:	f882 a001 	strb.w	sl, [r2, #1]
 8016d92:	f109 0601 	add.w	r6, r9, #1
 8016d96:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016d9a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d9e:	f882 9002 	strb.w	r9, [r2, #2]
 8016da2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016da4:	f10e 0e01 	add.w	lr, lr, #1
 8016da8:	4414      	add	r4, r2
 8016daa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016dac:	4410      	add	r0, r2
 8016dae:	e766      	b.n	8016c7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016db0:	4472      	add	r2, lr
 8016db2:	54af      	strb	r7, [r5, r2]
 8016db4:	442a      	add	r2, r5
 8016db6:	f882 a001 	strb.w	sl, [r2, #1]
 8016dba:	f882 b002 	strb.w	fp, [r2, #2]
 8016dbe:	e7f0      	b.n	8016da2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016dc0:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016dc4:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016dc8:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016dcc:	e74d      	b.n	8016c6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016dce:	b003      	add	sp, #12
 8016dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dd4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd8:	b087      	sub	sp, #28
 8016dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016dde:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016de0:	9204      	str	r2, [sp, #16]
 8016de2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016de6:	6860      	ldr	r0, [r4, #4]
 8016de8:	9205      	str	r2, [sp, #20]
 8016dea:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016dee:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8016df2:	9101      	str	r1, [sp, #4]
 8016df4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016df8:	fb00 2505 	mla	r5, r0, r5, r2
 8016dfc:	6822      	ldr	r2, [r4, #0]
 8016dfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e02:	4415      	add	r5, r2
 8016e04:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016e08:	3201      	adds	r2, #1
 8016e0a:	f022 0201 	bic.w	r2, r2, #1
 8016e0e:	9202      	str	r2, [sp, #8]
 8016e10:	f8dc 2000 	ldr.w	r2, [ip]
 8016e14:	9203      	str	r2, [sp, #12]
 8016e16:	9a01      	ldr	r2, [sp, #4]
 8016e18:	2a00      	cmp	r2, #0
 8016e1a:	dc03      	bgt.n	8016e24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016e1c:	9a04      	ldr	r2, [sp, #16]
 8016e1e:	2a00      	cmp	r2, #0
 8016e20:	f340 8135 	ble.w	801708e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016e26:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016e2a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016e2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016e30:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016e34:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	dd0d      	ble.n	8016e58 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016e3c:	1422      	asrs	r2, r4, #16
 8016e3e:	d405      	bmi.n	8016e4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016e40:	4542      	cmp	r2, r8
 8016e42:	da03      	bge.n	8016e4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016e44:	1402      	asrs	r2, r0, #16
 8016e46:	d401      	bmi.n	8016e4c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016e48:	42ba      	cmp	r2, r7
 8016e4a:	db06      	blt.n	8016e5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016e4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e4e:	4474      	add	r4, lr
 8016e50:	3b01      	subs	r3, #1
 8016e52:	3503      	adds	r5, #3
 8016e54:	4410      	add	r0, r2
 8016e56:	e7ef      	b.n	8016e38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016e58:	d077      	beq.n	8016f4a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016e5a:	1e5a      	subs	r2, r3, #1
 8016e5c:	fb0e 4602 	mla	r6, lr, r2, r4
 8016e60:	1436      	asrs	r6, r6, #16
 8016e62:	d469      	bmi.n	8016f38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e64:	4546      	cmp	r6, r8
 8016e66:	da67      	bge.n	8016f38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e68:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016e6a:	fb06 0202 	mla	r2, r6, r2, r0
 8016e6e:	1412      	asrs	r2, r2, #16
 8016e70:	d462      	bmi.n	8016f38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e72:	42ba      	cmp	r2, r7
 8016e74:	da60      	bge.n	8016f38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e76:	1cee      	adds	r6, r5, #3
 8016e78:	4699      	mov	r9, r3
 8016e7a:	f1b9 0f00 	cmp.w	r9, #0
 8016e7e:	dd5f      	ble.n	8016f40 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016e80:	1422      	asrs	r2, r4, #16
 8016e82:	9902      	ldr	r1, [sp, #8]
 8016e84:	1407      	asrs	r7, r0, #16
 8016e86:	fb01 2707 	mla	r7, r1, r7, r2
 8016e8a:	9903      	ldr	r1, [sp, #12]
 8016e8c:	087a      	lsrs	r2, r7, #1
 8016e8e:	5c8a      	ldrb	r2, [r1, r2]
 8016e90:	07f9      	lsls	r1, r7, #31
 8016e92:	bf54      	ite	pl
 8016e94:	f002 020f 	andpl.w	r2, r2, #15
 8016e98:	1112      	asrmi	r2, r2, #4
 8016e9a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016e9e:	b2d2      	uxtb	r2, r2
 8016ea0:	2a00      	cmp	r2, #0
 8016ea2:	d042      	beq.n	8016f2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016ea4:	497b      	ldr	r1, [pc, #492]	; (8017094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016ea6:	680f      	ldr	r7, [r1, #0]
 8016ea8:	9905      	ldr	r1, [sp, #20]
 8016eaa:	fa5f fb87 	uxtb.w	fp, r7
 8016eae:	434a      	muls	r2, r1
 8016eb0:	f102 0801 	add.w	r8, r2, #1
 8016eb4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016eb8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016ebc:	1212      	asrs	r2, r2, #8
 8016ebe:	fa1f fa82 	uxth.w	sl, r2
 8016ec2:	43d2      	mvns	r2, r2
 8016ec4:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ec8:	b2d2      	uxtb	r2, r2
 8016eca:	fb08 b802 	mla	r8, r8, r2, fp
 8016ece:	fa1f f888 	uxth.w	r8, r8
 8016ed2:	f108 0b01 	add.w	fp, r8, #1
 8016ed6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016eda:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016ede:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016ee2:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ee6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016eea:	fb17 fa0a 	smulbb	sl, r7, sl
 8016eee:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016ef2:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016ef6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016efa:	fb07 aa02 	mla	sl, r7, r2, sl
 8016efe:	fb08 b802 	mla	r8, r8, r2, fp
 8016f02:	fa1f fa8a 	uxth.w	sl, sl
 8016f06:	fa1f f888 	uxth.w	r8, r8
 8016f0a:	f10a 0701 	add.w	r7, sl, #1
 8016f0e:	f108 0b01 	add.w	fp, r8, #1
 8016f12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016f16:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016f1a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016f22:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016f26:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f2c:	4474      	add	r4, lr
 8016f2e:	3603      	adds	r6, #3
 8016f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f34:	4410      	add	r0, r2
 8016f36:	e7a0      	b.n	8016e7a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016f38:	2700      	movs	r7, #0
 8016f3a:	1bda      	subs	r2, r3, r7
 8016f3c:	2a00      	cmp	r2, #0
 8016f3e:	dc3e      	bgt.n	8016fbe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016f40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f48:	441d      	add	r5, r3
 8016f4a:	9b01      	ldr	r3, [sp, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	f340 809e 	ble.w	801708e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016f52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016f56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f5c:	eeb0 6a62 	vmov.f32	s12, s5
 8016f60:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016f64:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f68:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f6c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016f70:	eeb0 6a43 	vmov.f32	s12, s6
 8016f74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f78:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016f7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016f94:	ee12 2a90 	vmov	r2, s5
 8016f98:	eef0 2a47 	vmov.f32	s5, s14
 8016f9c:	fb92 fef3 	sdiv	lr, r2, r3
 8016fa0:	ee13 2a10 	vmov	r2, s6
 8016fa4:	eeb0 3a67 	vmov.f32	s6, s15
 8016fa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fac:	9314      	str	r3, [sp, #80]	; 0x50
 8016fae:	9b01      	ldr	r3, [sp, #4]
 8016fb0:	9a04      	ldr	r2, [sp, #16]
 8016fb2:	3b01      	subs	r3, #1
 8016fb4:	9301      	str	r3, [sp, #4]
 8016fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016fb8:	bf08      	it	eq
 8016fba:	4613      	moveq	r3, r2
 8016fbc:	e72b      	b.n	8016e16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016fbe:	1426      	asrs	r6, r4, #16
 8016fc0:	d460      	bmi.n	8017084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016fc2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016fc6:	42b2      	cmp	r2, r6
 8016fc8:	dd5c      	ble.n	8017084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016fca:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016fce:	d459      	bmi.n	8017084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016fd0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016fd4:	4542      	cmp	r2, r8
 8016fd6:	dd55      	ble.n	8017084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016fd8:	9a02      	ldr	r2, [sp, #8]
 8016fda:	9903      	ldr	r1, [sp, #12]
 8016fdc:	fb08 6602 	mla	r6, r8, r2, r6
 8016fe0:	0872      	lsrs	r2, r6, #1
 8016fe2:	07f6      	lsls	r6, r6, #31
 8016fe4:	5c8a      	ldrb	r2, [r1, r2]
 8016fe6:	bf54      	ite	pl
 8016fe8:	f002 020f 	andpl.w	r2, r2, #15
 8016fec:	1112      	asrmi	r2, r2, #4
 8016fee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ff2:	b2d2      	uxtb	r2, r2
 8016ff4:	2a00      	cmp	r2, #0
 8016ff6:	d045      	beq.n	8017084 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016ff8:	4926      	ldr	r1, [pc, #152]	; (8017094 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016ffa:	f8d1 8000 	ldr.w	r8, [r1]
 8016ffe:	9905      	ldr	r1, [sp, #20]
 8017000:	fa5f fb88 	uxtb.w	fp, r8
 8017004:	434a      	muls	r2, r1
 8017006:	1c56      	adds	r6, r2, #1
 8017008:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801700c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017010:	1212      	asrs	r2, r2, #8
 8017012:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017016:	fa1f fa82 	uxth.w	sl, r2
 801701a:	43d2      	mvns	r2, r2
 801701c:	fb1b fb0a 	smulbb	fp, fp, sl
 8017020:	b2d2      	uxtb	r2, r2
 8017022:	fb09 b902 	mla	r9, r9, r2, fp
 8017026:	fa1f f989 	uxth.w	r9, r9
 801702a:	f109 0b01 	add.w	fp, r9, #1
 801702e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017032:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8017036:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801703a:	fb1b fb0a 	smulbb	fp, fp, sl
 801703e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017042:	fb18 fa0a 	smulbb	sl, r8, sl
 8017046:	f805 9006 	strb.w	r9, [r5, r6]
 801704a:	442e      	add	r6, r5
 801704c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8017050:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017054:	fb08 aa02 	mla	sl, r8, r2, sl
 8017058:	fb09 b902 	mla	r9, r9, r2, fp
 801705c:	fa1f fa8a 	uxth.w	sl, sl
 8017060:	fa1f f989 	uxth.w	r9, r9
 8017064:	f10a 0801 	add.w	r8, sl, #1
 8017068:	f109 0b01 	add.w	fp, r9, #1
 801706c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8017070:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017074:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017078:	ea4f 2929 	mov.w	r9, r9, asr #8
 801707c:	f886 a002 	strb.w	sl, [r6, #2]
 8017080:	f886 9001 	strb.w	r9, [r6, #1]
 8017084:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017086:	4474      	add	r4, lr
 8017088:	3701      	adds	r7, #1
 801708a:	4410      	add	r0, r2
 801708c:	e755      	b.n	8016f3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801708e:	b007      	add	sp, #28
 8017090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017094:	2400f4b4 	.word	0x2400f4b4

08017098 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801709c:	b085      	sub	sp, #20
 801709e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80170a2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80170a4:	9203      	str	r2, [sp, #12]
 80170a6:	6860      	ldr	r0, [r4, #4]
 80170a8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80170ac:	9100      	str	r1, [sp, #0]
 80170ae:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80170b2:	fb00 2606 	mla	r6, r0, r6, r2
 80170b6:	6822      	ldr	r2, [r4, #0]
 80170b8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80170bc:	4416      	add	r6, r2
 80170be:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80170c2:	3201      	adds	r2, #1
 80170c4:	f022 0201 	bic.w	r2, r2, #1
 80170c8:	9201      	str	r2, [sp, #4]
 80170ca:	f8dc 2000 	ldr.w	r2, [ip]
 80170ce:	9202      	str	r2, [sp, #8]
 80170d0:	9a00      	ldr	r2, [sp, #0]
 80170d2:	2a00      	cmp	r2, #0
 80170d4:	dc03      	bgt.n	80170de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80170d6:	9a03      	ldr	r2, [sp, #12]
 80170d8:	2a00      	cmp	r2, #0
 80170da:	f340 8140 	ble.w	801735e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80170de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170e0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80170e4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 80170e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80170ea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80170ee:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	dd0e      	ble.n	8017114 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80170f6:	142a      	asrs	r2, r5, #16
 80170f8:	d405      	bmi.n	8017106 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80170fa:	4572      	cmp	r2, lr
 80170fc:	da03      	bge.n	8017106 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80170fe:	1422      	asrs	r2, r4, #16
 8017100:	d401      	bmi.n	8017106 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017102:	42ba      	cmp	r2, r7
 8017104:	db07      	blt.n	8017116 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017106:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017108:	3b01      	subs	r3, #1
 801710a:	3603      	adds	r6, #3
 801710c:	4415      	add	r5, r2
 801710e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017110:	4414      	add	r4, r2
 8017112:	e7ee      	b.n	80170f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017114:	d072      	beq.n	80171fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017116:	1e5a      	subs	r2, r3, #1
 8017118:	9811      	ldr	r0, [sp, #68]	; 0x44
 801711a:	fb00 5002 	mla	r0, r0, r2, r5
 801711e:	1400      	asrs	r0, r0, #16
 8017120:	d463      	bmi.n	80171ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017122:	4570      	cmp	r0, lr
 8017124:	da61      	bge.n	80171ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017126:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017128:	fb00 4202 	mla	r2, r0, r2, r4
 801712c:	1412      	asrs	r2, r2, #16
 801712e:	d45c      	bmi.n	80171ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017130:	42ba      	cmp	r2, r7
 8017132:	da5a      	bge.n	80171ea <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017134:	1cf0      	adds	r0, r6, #3
 8017136:	469a      	mov	sl, r3
 8017138:	f1ba 0f00 	cmp.w	sl, #0
 801713c:	dd59      	ble.n	80171f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801713e:	142a      	asrs	r2, r5, #16
 8017140:	9901      	ldr	r1, [sp, #4]
 8017142:	1427      	asrs	r7, r4, #16
 8017144:	fb01 2707 	mla	r7, r1, r7, r2
 8017148:	9902      	ldr	r1, [sp, #8]
 801714a:	087a      	lsrs	r2, r7, #1
 801714c:	5c8a      	ldrb	r2, [r1, r2]
 801714e:	07f9      	lsls	r1, r7, #31
 8017150:	bf54      	ite	pl
 8017152:	f002 020f 	andpl.w	r2, r2, #15
 8017156:	1112      	asrmi	r2, r2, #4
 8017158:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801715c:	b2d2      	uxtb	r2, r2
 801715e:	2a00      	cmp	r2, #0
 8017160:	d03b      	beq.n	80171da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017162:	4980      	ldr	r1, [pc, #512]	; (8017364 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017164:	2aff      	cmp	r2, #255	; 0xff
 8017166:	680f      	ldr	r7, [r1, #0]
 8017168:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801716c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017170:	b2ff      	uxtb	r7, r7
 8017172:	f000 80ed 	beq.w	8017350 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017176:	fa1f f882 	uxth.w	r8, r2
 801717a:	43d2      	mvns	r2, r2
 801717c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017180:	fb17 f708 	smulbb	r7, r7, r8
 8017184:	b2d2      	uxtb	r2, r2
 8017186:	fb19 f908 	smulbb	r9, r9, r8
 801718a:	fb0e 7702 	mla	r7, lr, r2, r7
 801718e:	fb1b f808 	smulbb	r8, fp, r8
 8017192:	b2bf      	uxth	r7, r7
 8017194:	f107 0e01 	add.w	lr, r7, #1
 8017198:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801719c:	123f      	asrs	r7, r7, #8
 801719e:	f800 7c03 	strb.w	r7, [r0, #-3]
 80171a2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80171a6:	fb07 9902 	mla	r9, r7, r2, r9
 80171aa:	fa1f f989 	uxth.w	r9, r9
 80171ae:	f109 0701 	add.w	r7, r9, #1
 80171b2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80171b6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80171ba:	fb07 8802 	mla	r8, r7, r2, r8
 80171be:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171c2:	fa1f f888 	uxth.w	r8, r8
 80171c6:	f800 9c02 	strb.w	r9, [r0, #-2]
 80171ca:	f108 0201 	add.w	r2, r8, #1
 80171ce:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80171d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80171d6:	f800 8c01 	strb.w	r8, [r0, #-1]
 80171da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171dc:	3003      	adds	r0, #3
 80171de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80171e2:	4415      	add	r5, r2
 80171e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171e6:	4414      	add	r4, r2
 80171e8:	e7a6      	b.n	8017138 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80171ea:	2700      	movs	r7, #0
 80171ec:	1bda      	subs	r2, r3, r7
 80171ee:	2a00      	cmp	r2, #0
 80171f0:	dc40      	bgt.n	8017274 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80171f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171fa:	441e      	add	r6, r3
 80171fc:	9b00      	ldr	r3, [sp, #0]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f340 80ad 	ble.w	801735e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017204:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801720a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801720e:	eeb0 6a62 	vmov.f32	s12, s5
 8017212:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017216:	ee31 1a05 	vadd.f32	s2, s2, s10
 801721a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801721e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017222:	eeb0 6a43 	vmov.f32	s12, s6
 8017226:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801722a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801722e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017232:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017236:	ee77 2a62 	vsub.f32	s5, s14, s5
 801723a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801723e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017242:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017246:	ee12 2a90 	vmov	r2, s5
 801724a:	eef0 2a47 	vmov.f32	s5, s14
 801724e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017252:	ee13 2a10 	vmov	r2, s6
 8017256:	9311      	str	r3, [sp, #68]	; 0x44
 8017258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801725a:	eeb0 3a67 	vmov.f32	s6, s15
 801725e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017262:	9312      	str	r3, [sp, #72]	; 0x48
 8017264:	9b00      	ldr	r3, [sp, #0]
 8017266:	9a03      	ldr	r2, [sp, #12]
 8017268:	3b01      	subs	r3, #1
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801726e:	bf08      	it	eq
 8017270:	4613      	moveq	r3, r2
 8017272:	e72d      	b.n	80170d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017274:	1428      	asrs	r0, r5, #16
 8017276:	d45c      	bmi.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017278:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801727c:	4282      	cmp	r2, r0
 801727e:	dd58      	ble.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017280:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017284:	d455      	bmi.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017286:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801728a:	4572      	cmp	r2, lr
 801728c:	dd51      	ble.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801728e:	9a01      	ldr	r2, [sp, #4]
 8017290:	9902      	ldr	r1, [sp, #8]
 8017292:	fb0e 0002 	mla	r0, lr, r2, r0
 8017296:	0842      	lsrs	r2, r0, #1
 8017298:	07c0      	lsls	r0, r0, #31
 801729a:	5c8a      	ldrb	r2, [r1, r2]
 801729c:	bf54      	ite	pl
 801729e:	f002 020f 	andpl.w	r2, r2, #15
 80172a2:	1112      	asrmi	r2, r2, #4
 80172a4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80172a8:	b2d2      	uxtb	r2, r2
 80172aa:	2a00      	cmp	r2, #0
 80172ac:	d041      	beq.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80172ae:	492d      	ldr	r1, [pc, #180]	; (8017364 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80172b0:	2aff      	cmp	r2, #255	; 0xff
 80172b2:	6808      	ldr	r0, [r1, #0]
 80172b4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80172b8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80172bc:	fa5f fe80 	uxtb.w	lr, r0
 80172c0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80172c4:	d03b      	beq.n	801733e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80172c6:	fa1f f982 	uxth.w	r9, r2
 80172ca:	4438      	add	r0, r7
 80172cc:	43d2      	mvns	r2, r2
 80172ce:	f816 8000 	ldrb.w	r8, [r6, r0]
 80172d2:	fb1e fe09 	smulbb	lr, lr, r9
 80172d6:	fb1a fa09 	smulbb	sl, sl, r9
 80172da:	b2d2      	uxtb	r2, r2
 80172dc:	fb1b f909 	smulbb	r9, fp, r9
 80172e0:	fb08 ee02 	mla	lr, r8, r2, lr
 80172e4:	fa1f fe8e 	uxth.w	lr, lr
 80172e8:	f10e 0801 	add.w	r8, lr, #1
 80172ec:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80172f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80172f4:	f806 e000 	strb.w	lr, [r6, r0]
 80172f8:	4430      	add	r0, r6
 80172fa:	f890 e001 	ldrb.w	lr, [r0, #1]
 80172fe:	fb0e aa02 	mla	sl, lr, r2, sl
 8017302:	fa1f fa8a 	uxth.w	sl, sl
 8017306:	f10a 0e01 	add.w	lr, sl, #1
 801730a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801730e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017312:	fb0e 9902 	mla	r9, lr, r2, r9
 8017316:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801731a:	fa1f f989 	uxth.w	r9, r9
 801731e:	f880 a001 	strb.w	sl, [r0, #1]
 8017322:	f109 0201 	add.w	r2, r9, #1
 8017326:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801732a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801732e:	f880 9002 	strb.w	r9, [r0, #2]
 8017332:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017334:	3701      	adds	r7, #1
 8017336:	4415      	add	r5, r2
 8017338:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801733a:	4414      	add	r4, r2
 801733c:	e756      	b.n	80171ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801733e:	4438      	add	r0, r7
 8017340:	f806 e000 	strb.w	lr, [r6, r0]
 8017344:	4430      	add	r0, r6
 8017346:	f880 a001 	strb.w	sl, [r0, #1]
 801734a:	f880 b002 	strb.w	fp, [r0, #2]
 801734e:	e7f0      	b.n	8017332 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017350:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017354:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017358:	f800 bc01 	strb.w	fp, [r0, #-1]
 801735c:	e73d      	b.n	80171da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801735e:	b005      	add	sp, #20
 8017360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017364:	2400f4b4 	.word	0x2400f4b4

08017368 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017368:	4770      	bx	lr

0801736a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801736a:	4770      	bx	lr

0801736c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801736c:	4770      	bx	lr

0801736e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801736e:	4770      	bx	lr

08017370 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017370:	4770      	bx	lr

08017372 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017372:	4770      	bx	lr

08017374 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017374:	4770      	bx	lr

08017376 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017376:	4770      	bx	lr

08017378 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017378:	4770      	bx	lr

0801737a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801737a:	4770      	bx	lr

0801737c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801737c:	4770      	bx	lr

0801737e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801737e:	4770      	bx	lr

08017380 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017380:	4770      	bx	lr

08017382 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017382:	4770      	bx	lr

08017384 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017384:	4770      	bx	lr

08017386 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017386:	4770      	bx	lr

08017388 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017388:	4770      	bx	lr

0801738a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801738a:	4770      	bx	lr

0801738c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801738c:	4770      	bx	lr

0801738e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801738e:	4770      	bx	lr

08017390 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017390:	4770      	bx	lr
	...

08017394 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017396:	4606      	mov	r6, r0
 8017398:	b087      	sub	sp, #28
 801739a:	4615      	mov	r5, r2
 801739c:	461f      	mov	r7, r3
 801739e:	b353      	cbz	r3, 80173f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	dd26      	ble.n	80173f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	dd22      	ble.n	80173f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173b0:	6808      	ldr	r0, [r1, #0]
 80173b2:	aa04      	add	r2, sp, #16
 80173b4:	6849      	ldr	r1, [r1, #4]
 80173b6:	4c1b      	ldr	r4, [pc, #108]	; (8017424 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80173b8:	c203      	stmia	r2!, {r0, r1}
 80173ba:	a804      	add	r0, sp, #16
 80173bc:	f7fa fef6 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80173c0:	6820      	ldr	r0, [r4, #0]
 80173c2:	6803      	ldr	r3, [r0, #0]
 80173c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c6:	4798      	blx	r3
 80173c8:	2fff      	cmp	r7, #255	; 0xff
 80173ca:	d016      	beq.n	80173fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80173cc:	f010 0f08 	tst.w	r0, #8
 80173d0:	6820      	ldr	r0, [r4, #0]
 80173d2:	d015      	beq.n	8017400 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80173d4:	2400      	movs	r4, #0
 80173d6:	6801      	ldr	r1, [r0, #0]
 80173d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80173dc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80173e0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80173e4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80173e8:	9401      	str	r4, [sp, #4]
 80173ea:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80173ee:	9400      	str	r4, [sp, #0]
 80173f0:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80173f2:	4629      	mov	r1, r5
 80173f4:	47a0      	blx	r4
 80173f6:	b007      	add	sp, #28
 80173f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173fa:	f010 0f02 	tst.w	r0, #2
 80173fe:	e7e7      	b.n	80173d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8017400:	6803      	ldr	r3, [r0, #0]
 8017402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017404:	4798      	blx	r3
 8017406:	4b08      	ldr	r3, [pc, #32]	; (8017428 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017408:	4601      	mov	r1, r0
 801740a:	4630      	mov	r0, r6
 801740c:	881a      	ldrh	r2, [r3, #0]
 801740e:	6833      	ldr	r3, [r6, #0]
 8017410:	e9cd 5700 	strd	r5, r7, [sp]
 8017414:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017416:	ab04      	add	r3, sp, #16
 8017418:	47a8      	blx	r5
 801741a:	6820      	ldr	r0, [r4, #0]
 801741c:	6803      	ldr	r3, [r0, #0]
 801741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017420:	4798      	blx	r3
 8017422:	e7e8      	b.n	80173f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017424:	2400f4a4 	.word	0x2400f4a4
 8017428:	2400f49e 	.word	0x2400f49e

0801742c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801742c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017430:	b08b      	sub	sp, #44	; 0x2c
 8017432:	460d      	mov	r5, r1
 8017434:	4616      	mov	r6, r2
 8017436:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801743a:	f1b8 0f00 	cmp.w	r8, #0
 801743e:	d047      	beq.n	80174d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8017440:	6810      	ldr	r0, [r2, #0]
 8017442:	ac06      	add	r4, sp, #24
 8017444:	6851      	ldr	r1, [r2, #4]
 8017446:	4f51      	ldr	r7, [pc, #324]	; (801758c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8017448:	c403      	stmia	r4!, {r0, r1}
 801744a:	6818      	ldr	r0, [r3, #0]
 801744c:	ac08      	add	r4, sp, #32
 801744e:	6859      	ldr	r1, [r3, #4]
 8017450:	c403      	stmia	r4!, {r0, r1}
 8017452:	a806      	add	r0, sp, #24
 8017454:	f7fa feaa 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017458:	4631      	mov	r1, r6
 801745a:	a808      	add	r0, sp, #32
 801745c:	f7fa fece 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017460:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017464:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017468:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801746c:	6838      	ldr	r0, [r7, #0]
 801746e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017472:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8017476:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801747a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801747e:	440d      	add	r5, r1
 8017480:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017484:	440a      	add	r2, r1
 8017486:	f8ad 2020 	strh.w	r2, [sp, #32]
 801748a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801748e:	4413      	add	r3, r2
 8017490:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017494:	6803      	ldr	r3, [r0, #0]
 8017496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017498:	4798      	blx	r3
 801749a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801749e:	d01a      	beq.n	80174d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80174a0:	f010 0f04 	tst.w	r0, #4
 80174a4:	6838      	ldr	r0, [r7, #0]
 80174a6:	d019      	beq.n	80174dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80174a8:	2100      	movs	r1, #0
 80174aa:	6807      	ldr	r7, [r0, #0]
 80174ac:	b2a4      	uxth	r4, r4
 80174ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80174b2:	b2b6      	uxth	r6, r6
 80174b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80174b8:	9401      	str	r4, [sp, #4]
 80174ba:	9600      	str	r6, [sp, #0]
 80174bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80174c0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80174c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80174c8:	9102      	str	r1, [sp, #8]
 80174ca:	4629      	mov	r1, r5
 80174cc:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80174ce:	47a0      	blx	r4
 80174d0:	b00b      	add	sp, #44	; 0x2c
 80174d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d6:	f010 0f01 	tst.w	r0, #1
 80174da:	e7e3      	b.n	80174a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80174dc:	6803      	ldr	r3, [r0, #0]
 80174de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174e0:	4798      	blx	r3
 80174e2:	4a2b      	ldr	r2, [pc, #172]	; (8017590 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80174e4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80174e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80174ec:	8813      	ldrh	r3, [r2, #0]
 80174ee:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80174f2:	fb03 f404 	mul.w	r4, r3, r4
 80174f6:	fb03 c101 	mla	r1, r3, r1, ip
 80174fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80174fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017502:	4408      	add	r0, r1
 8017504:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017508:	4404      	add	r4, r0
 801750a:	d02e      	beq.n	801756a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801750c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017510:	1b9b      	subs	r3, r3, r6
 8017512:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8017516:	1b96      	subs	r6, r2, r6
 8017518:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801751c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017520:	42a0      	cmp	r0, r4
 8017522:	d22d      	bcs.n	8017580 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8017524:	eb00 0e01 	add.w	lr, r0, r1
 8017528:	4570      	cmp	r0, lr
 801752a:	d210      	bcs.n	801754e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801752c:	f890 9000 	ldrb.w	r9, [r0]
 8017530:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017534:	fb19 f90c 	smulbb	r9, r9, ip
 8017538:	fb02 9208 	mla	r2, r2, r8, r9
 801753c:	b292      	uxth	r2, r2
 801753e:	f102 0901 	add.w	r9, r2, #1
 8017542:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8017546:	1212      	asrs	r2, r2, #8
 8017548:	f800 2b01 	strb.w	r2, [r0], #1
 801754c:	e7ec      	b.n	8017528 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801754e:	4418      	add	r0, r3
 8017550:	4435      	add	r5, r6
 8017552:	e7e5      	b.n	8017520 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017554:	8813      	ldrh	r3, [r2, #0]
 8017556:	1b9b      	subs	r3, r3, r6
 8017558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801755c:	4418      	add	r0, r3
 801755e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017562:	1b9b      	subs	r3, r3, r6
 8017564:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017568:	441d      	add	r5, r3
 801756a:	42a0      	cmp	r0, r4
 801756c:	d208      	bcs.n	8017580 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801756e:	eb00 0c01 	add.w	ip, r0, r1
 8017572:	4560      	cmp	r0, ip
 8017574:	d2ee      	bcs.n	8017554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017576:	f815 3b01 	ldrb.w	r3, [r5], #1
 801757a:	f800 3b01 	strb.w	r3, [r0], #1
 801757e:	e7f8      	b.n	8017572 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017580:	6838      	ldr	r0, [r7, #0]
 8017582:	6803      	ldr	r3, [r0, #0]
 8017584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017586:	4798      	blx	r3
 8017588:	e7a2      	b.n	80174d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801758a:	bf00      	nop
 801758c:	2400f4a4 	.word	0x2400f4a4
 8017590:	2400f49e 	.word	0x2400f49e

08017594 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017596:	2300      	movs	r3, #0
 8017598:	b085      	sub	sp, #20
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	4b41      	ldr	r3, [pc, #260]	; (80176a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801759e:	781b      	ldrb	r3, [r3, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d136      	bne.n	8017612 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80175a4:	4a40      	ldr	r2, [pc, #256]	; (80176a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80175a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80175aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d131      	bne.n	8017616 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80175b2:	4b3e      	ldr	r3, [pc, #248]	; (80176ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80175b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175b8:	ac02      	add	r4, sp, #8
 80175ba:	6808      	ldr	r0, [r1, #0]
 80175bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80175c0:	ab02      	add	r3, sp, #8
 80175c2:	6849      	ldr	r1, [r1, #4]
 80175c4:	4d3a      	ldr	r5, [pc, #232]	; (80176b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80175c6:	c303      	stmia	r3!, {r0, r1}
 80175c8:	4669      	mov	r1, sp
 80175ca:	4620      	mov	r0, r4
 80175cc:	f7fa fe16 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80175d0:	4668      	mov	r0, sp
 80175d2:	f7fa fdeb 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80175d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80175da:	f8bd 2000 	ldrh.w	r2, [sp]
 80175de:	462e      	mov	r6, r5
 80175e0:	6828      	ldr	r0, [r5, #0]
 80175e2:	4413      	add	r3, r2
 80175e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80175e8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80175ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80175f0:	4413      	add	r3, r2
 80175f2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80175f6:	6803      	ldr	r3, [r0, #0]
 80175f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175fa:	4798      	blx	r3
 80175fc:	f010 0f01 	tst.w	r0, #1
 8017600:	d00b      	beq.n	801761a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8017602:	6828      	ldr	r0, [r5, #0]
 8017604:	6803      	ldr	r3, [r0, #0]
 8017606:	e894 0006 	ldmia.w	r4, {r1, r2}
 801760a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801760c:	4798      	blx	r3
 801760e:	b005      	add	sp, #20
 8017610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017612:	4a26      	ldr	r2, [pc, #152]	; (80176ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017614:	e7c7      	b.n	80175a6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017616:	4b24      	ldr	r3, [pc, #144]	; (80176a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017618:	e7cc      	b.n	80175b4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801761a:	6830      	ldr	r0, [r6, #0]
 801761c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017620:	6803      	ldr	r3, [r0, #0]
 8017622:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8017626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017628:	4798      	blx	r3
 801762a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801762e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017632:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8017636:	fb14 3402 	smlabb	r4, r4, r2, r3
 801763a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801763e:	4404      	add	r4, r0
 8017640:	6830      	ldr	r0, [r6, #0]
 8017642:	6803      	ldr	r3, [r0, #0]
 8017644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017646:	4798      	blx	r3
 8017648:	4917      	ldr	r1, [pc, #92]	; (80176a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801764a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801764e:	880b      	ldrh	r3, [r1, #0]
 8017650:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017654:	fb03 c202 	mla	r2, r3, r2, ip
 8017658:	437b      	muls	r3, r7
 801765a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801765e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017662:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017666:	4410      	add	r0, r2
 8017668:	18c2      	adds	r2, r0, r3
 801766a:	4290      	cmp	r0, r2
 801766c:	d214      	bcs.n	8017698 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801766e:	eb00 0c07 	add.w	ip, r0, r7
 8017672:	4560      	cmp	r0, ip
 8017674:	d204      	bcs.n	8017680 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017676:	f814 3b01 	ldrb.w	r3, [r4], #1
 801767a:	f800 3b01 	strb.w	r3, [r0], #1
 801767e:	e7f8      	b.n	8017672 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017680:	880b      	ldrh	r3, [r1, #0]
 8017682:	1b5b      	subs	r3, r3, r5
 8017684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017688:	4418      	add	r0, r3
 801768a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801768e:	1b5b      	subs	r3, r3, r5
 8017690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017694:	441c      	add	r4, r3
 8017696:	e7e8      	b.n	801766a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017698:	6830      	ldr	r0, [r6, #0]
 801769a:	6803      	ldr	r3, [r0, #0]
 801769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801769e:	4798      	blx	r3
 80176a0:	e7b5      	b.n	801760e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80176a2:	bf00      	nop
 80176a4:	2400f49c 	.word	0x2400f49c
 80176a8:	2400f49e 	.word	0x2400f49e
 80176ac:	2400f4a0 	.word	0x2400f4a0
 80176b0:	2400f4a4 	.word	0x2400f4a4

080176b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80176b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b8:	b089      	sub	sp, #36	; 0x24
 80176ba:	4607      	mov	r7, r0
 80176bc:	4689      	mov	r9, r1
 80176be:	4692      	mov	sl, r2
 80176c0:	ac08      	add	r4, sp, #32
 80176c2:	461e      	mov	r6, r3
 80176c4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7fe f8ef 	bl	80158ac <_ZNK8touchgfx6Bitmap7getDataEv>
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	4605      	mov	r5, r0
 80176d2:	4620      	mov	r0, r4
 80176d4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80176d8:	f7fe f834 	bl	8015744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80176dc:	4683      	mov	fp, r0
 80176de:	4620      	mov	r0, r4
 80176e0:	f7fe f864 	bl	80157ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80176e4:	4653      	mov	r3, sl
 80176e6:	464a      	mov	r2, r9
 80176e8:	4639      	mov	r1, r7
 80176ea:	9500      	str	r5, [sp, #0]
 80176ec:	e9cd b001 	strd	fp, r0, [sp, #4]
 80176f0:	a806      	add	r0, sp, #24
 80176f2:	47c0      	blx	r8
 80176f4:	a906      	add	r1, sp, #24
 80176f6:	4630      	mov	r0, r6
 80176f8:	f7fd ff08 	bl	801550c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80176fc:	4628      	mov	r0, r5
 80176fe:	b009      	add	sp, #36	; 0x24
 8017700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017704 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017704:	b510      	push	{r4, lr}
 8017706:	4604      	mov	r4, r0
 8017708:	2158      	movs	r1, #88	; 0x58
 801770a:	f006 fc18 	bl	801df3e <_ZdlPvj>
 801770e:	4620      	mov	r0, r4
 8017710:	bd10      	pop	{r4, pc}

08017712 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017712:	b510      	push	{r4, lr}
 8017714:	4604      	mov	r4, r0
 8017716:	2104      	movs	r1, #4
 8017718:	f006 fc11 	bl	801df3e <_ZdlPvj>
 801771c:	4620      	mov	r0, r4
 801771e:	bd10      	pop	{r4, pc}

08017720 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017720:	b510      	push	{r4, lr}
 8017722:	4604      	mov	r4, r0
 8017724:	2104      	movs	r1, #4
 8017726:	f006 fc0a 	bl	801df3e <_ZdlPvj>
 801772a:	4620      	mov	r0, r4
 801772c:	bd10      	pop	{r4, pc}

0801772e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801772e:	b510      	push	{r4, lr}
 8017730:	4604      	mov	r4, r0
 8017732:	2104      	movs	r1, #4
 8017734:	f006 fc03 	bl	801df3e <_ZdlPvj>
 8017738:	4620      	mov	r0, r4
 801773a:	bd10      	pop	{r4, pc}

0801773c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801773c:	b510      	push	{r4, lr}
 801773e:	4604      	mov	r4, r0
 8017740:	2104      	movs	r1, #4
 8017742:	f006 fbfc 	bl	801df3e <_ZdlPvj>
 8017746:	4620      	mov	r0, r4
 8017748:	bd10      	pop	{r4, pc}

0801774a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801774a:	b510      	push	{r4, lr}
 801774c:	4604      	mov	r4, r0
 801774e:	2104      	movs	r1, #4
 8017750:	f006 fbf5 	bl	801df3e <_ZdlPvj>
 8017754:	4620      	mov	r0, r4
 8017756:	bd10      	pop	{r4, pc}

08017758 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017758:	b510      	push	{r4, lr}
 801775a:	4604      	mov	r4, r0
 801775c:	2104      	movs	r1, #4
 801775e:	f006 fbee 	bl	801df3e <_ZdlPvj>
 8017762:	4620      	mov	r0, r4
 8017764:	bd10      	pop	{r4, pc}

08017766 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017766:	b510      	push	{r4, lr}
 8017768:	4604      	mov	r4, r0
 801776a:	2104      	movs	r1, #4
 801776c:	f006 fbe7 	bl	801df3e <_ZdlPvj>
 8017770:	4620      	mov	r0, r4
 8017772:	bd10      	pop	{r4, pc}

08017774 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017774:	b510      	push	{r4, lr}
 8017776:	4604      	mov	r4, r0
 8017778:	2104      	movs	r1, #4
 801777a:	f006 fbe0 	bl	801df3e <_ZdlPvj>
 801777e:	4620      	mov	r0, r4
 8017780:	bd10      	pop	{r4, pc}

08017782 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017782:	b510      	push	{r4, lr}
 8017784:	4604      	mov	r4, r0
 8017786:	2104      	movs	r1, #4
 8017788:	f006 fbd9 	bl	801df3e <_ZdlPvj>
 801778c:	4620      	mov	r0, r4
 801778e:	bd10      	pop	{r4, pc}

08017790 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017790:	b510      	push	{r4, lr}
 8017792:	4604      	mov	r4, r0
 8017794:	2104      	movs	r1, #4
 8017796:	f006 fbd2 	bl	801df3e <_ZdlPvj>
 801779a:	4620      	mov	r0, r4
 801779c:	bd10      	pop	{r4, pc}

0801779e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801779e:	b510      	push	{r4, lr}
 80177a0:	4604      	mov	r4, r0
 80177a2:	2104      	movs	r1, #4
 80177a4:	f006 fbcb 	bl	801df3e <_ZdlPvj>
 80177a8:	4620      	mov	r0, r4
 80177aa:	bd10      	pop	{r4, pc}

080177ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80177ac:	b510      	push	{r4, lr}
 80177ae:	4604      	mov	r4, r0
 80177b0:	2104      	movs	r1, #4
 80177b2:	f006 fbc4 	bl	801df3e <_ZdlPvj>
 80177b6:	4620      	mov	r0, r4
 80177b8:	bd10      	pop	{r4, pc}

080177ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80177ba:	b510      	push	{r4, lr}
 80177bc:	4604      	mov	r4, r0
 80177be:	2104      	movs	r1, #4
 80177c0:	f006 fbbd 	bl	801df3e <_ZdlPvj>
 80177c4:	4620      	mov	r0, r4
 80177c6:	bd10      	pop	{r4, pc}

080177c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80177c8:	b510      	push	{r4, lr}
 80177ca:	4604      	mov	r4, r0
 80177cc:	2104      	movs	r1, #4
 80177ce:	f006 fbb6 	bl	801df3e <_ZdlPvj>
 80177d2:	4620      	mov	r0, r4
 80177d4:	bd10      	pop	{r4, pc}

080177d6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80177d6:	b510      	push	{r4, lr}
 80177d8:	4604      	mov	r4, r0
 80177da:	2104      	movs	r1, #4
 80177dc:	f006 fbaf 	bl	801df3e <_ZdlPvj>
 80177e0:	4620      	mov	r0, r4
 80177e2:	bd10      	pop	{r4, pc}

080177e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80177e4:	b510      	push	{r4, lr}
 80177e6:	4604      	mov	r4, r0
 80177e8:	2104      	movs	r1, #4
 80177ea:	f006 fba8 	bl	801df3e <_ZdlPvj>
 80177ee:	4620      	mov	r0, r4
 80177f0:	bd10      	pop	{r4, pc}

080177f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80177f2:	b510      	push	{r4, lr}
 80177f4:	4604      	mov	r4, r0
 80177f6:	2104      	movs	r1, #4
 80177f8:	f006 fba1 	bl	801df3e <_ZdlPvj>
 80177fc:	4620      	mov	r0, r4
 80177fe:	bd10      	pop	{r4, pc}

08017800 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017800:	b510      	push	{r4, lr}
 8017802:	4604      	mov	r4, r0
 8017804:	2104      	movs	r1, #4
 8017806:	f006 fb9a 	bl	801df3e <_ZdlPvj>
 801780a:	4620      	mov	r0, r4
 801780c:	bd10      	pop	{r4, pc}

0801780e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801780e:	b510      	push	{r4, lr}
 8017810:	4604      	mov	r4, r0
 8017812:	2104      	movs	r1, #4
 8017814:	f006 fb93 	bl	801df3e <_ZdlPvj>
 8017818:	4620      	mov	r0, r4
 801781a:	bd10      	pop	{r4, pc}

0801781c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801781c:	b510      	push	{r4, lr}
 801781e:	4604      	mov	r4, r0
 8017820:	2104      	movs	r1, #4
 8017822:	f006 fb8c 	bl	801df3e <_ZdlPvj>
 8017826:	4620      	mov	r0, r4
 8017828:	bd10      	pop	{r4, pc}

0801782a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801782a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801782e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017832:	9c06      	ldr	r4, [sp, #24]
 8017834:	2800      	cmp	r0, #0
 8017836:	d06e      	beq.n	8017916 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017838:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801783c:	2d00      	cmp	r5, #0
 801783e:	dd6a      	ble.n	8017916 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017840:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8017844:	f1bc 0f00 	cmp.w	ip, #0
 8017848:	dd65      	ble.n	8017916 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801784a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801784e:	28ff      	cmp	r0, #255	; 0xff
 8017850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017854:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017858:	fb02 3306 	mla	r3, r2, r6, r3
 801785c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8017860:	b2e4      	uxtb	r4, r4
 8017862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017866:	4419      	add	r1, r3
 8017868:	fb02 f30c 	mul.w	r3, r2, ip
 801786c:	eba2 0205 	sub.w	r2, r2, r5
 8017870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017878:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801787c:	440b      	add	r3, r1
 801787e:	d03e      	beq.n	80178fe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8017880:	fa1f fc80 	uxth.w	ip, r0
 8017884:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017888:	fb06 f60c 	mul.w	r6, r6, ip
 801788c:	b280      	uxth	r0, r0
 801788e:	fb07 f70c 	mul.w	r7, r7, ip
 8017892:	fb04 f40c 	mul.w	r4, r4, ip
 8017896:	4299      	cmp	r1, r3
 8017898:	d23d      	bcs.n	8017916 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801789a:	eb01 0c05 	add.w	ip, r1, r5
 801789e:	458c      	cmp	ip, r1
 80178a0:	f101 0e03 	add.w	lr, r1, #3
 80178a4:	d928      	bls.n	80178f8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80178a6:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80178aa:	fb11 f100 	smulbb	r1, r1, r0
 80178ae:	4421      	add	r1, r4
 80178b0:	b289      	uxth	r1, r1
 80178b2:	f101 0801 	add.w	r8, r1, #1
 80178b6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80178ba:	1209      	asrs	r1, r1, #8
 80178bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80178c0:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80178c4:	fb11 f100 	smulbb	r1, r1, r0
 80178c8:	4439      	add	r1, r7
 80178ca:	b289      	uxth	r1, r1
 80178cc:	f101 0801 	add.w	r8, r1, #1
 80178d0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80178d4:	1209      	asrs	r1, r1, #8
 80178d6:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80178da:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80178de:	fb11 f100 	smulbb	r1, r1, r0
 80178e2:	4431      	add	r1, r6
 80178e4:	b289      	uxth	r1, r1
 80178e6:	f101 0801 	add.w	r8, r1, #1
 80178ea:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80178ee:	1209      	asrs	r1, r1, #8
 80178f0:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80178f4:	4671      	mov	r1, lr
 80178f6:	e7d2      	b.n	801789e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80178f8:	4411      	add	r1, r2
 80178fa:	e7cc      	b.n	8017896 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80178fc:	4411      	add	r1, r2
 80178fe:	4299      	cmp	r1, r3
 8017900:	d209      	bcs.n	8017916 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017902:	1948      	adds	r0, r1, r5
 8017904:	4281      	cmp	r1, r0
 8017906:	d2f9      	bcs.n	80178fc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8017908:	700c      	strb	r4, [r1, #0]
 801790a:	3103      	adds	r1, #3
 801790c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8017910:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017914:	e7f6      	b.n	8017904 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8017916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801791c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801791c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017920:	b093      	sub	sp, #76	; 0x4c
 8017922:	4699      	mov	r9, r3
 8017924:	4617      	mov	r7, r2
 8017926:	f9b3 2000 	ldrsh.w	r2, [r3]
 801792a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801792e:	4604      	mov	r4, r0
 8017930:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017934:	a80c      	add	r0, sp, #48	; 0x30
 8017936:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801793a:	460d      	mov	r5, r1
 801793c:	4649      	mov	r1, r9
 801793e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017942:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017946:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801794a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801794e:	f7f5 f9a1 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 8017952:	4639      	mov	r1, r7
 8017954:	a80c      	add	r0, sp, #48	; 0x30
 8017956:	f7f5 f99d 	bl	800cc94 <_ZN8touchgfx4RectaNERKS0_>
 801795a:	4b78      	ldr	r3, [pc, #480]	; (8017b3c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801795c:	8818      	ldrh	r0, [r3, #0]
 801795e:	4b78      	ldr	r3, [pc, #480]	; (8017b40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8017960:	b202      	sxth	r2, r0
 8017962:	8819      	ldrh	r1, [r3, #0]
 8017964:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017968:	b20f      	sxth	r7, r1
 801796a:	2b00      	cmp	r3, #0
 801796c:	da07      	bge.n	801797e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801796e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8017972:	4463      	add	r3, ip
 8017974:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017978:	2300      	movs	r3, #0
 801797a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801797e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017982:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8017986:	1ad2      	subs	r2, r2, r3
 8017988:	4594      	cmp	ip, r2
 801798a:	bfc4      	itt	gt
 801798c:	1ac2      	subgt	r2, r0, r3
 801798e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8017992:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017996:	2a00      	cmp	r2, #0
 8017998:	da07      	bge.n	80179aa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801799a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801799e:	4462      	add	r2, ip
 80179a0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 80179a4:	2200      	movs	r2, #0
 80179a6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80179aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80179ae:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 80179b2:	1abf      	subs	r7, r7, r2
 80179b4:	45bc      	cmp	ip, r7
 80179b6:	f8df c190 	ldr.w	ip, [pc, #400]	; 8017b48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80179ba:	bfc8      	it	gt
 80179bc:	1a8f      	subgt	r7, r1, r2
 80179be:	f89c c000 	ldrb.w	ip, [ip]
 80179c2:	bfc8      	it	gt
 80179c4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 80179c8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80179cc:	f1bc 0f00 	cmp.w	ip, #0
 80179d0:	d176      	bne.n	8017ac0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80179d2:	4287      	cmp	r7, r0
 80179d4:	bf14      	ite	ne
 80179d6:	2100      	movne	r1, #0
 80179d8:	2101      	moveq	r1, #1
 80179da:	2f00      	cmp	r7, #0
 80179dc:	9107      	str	r1, [sp, #28]
 80179de:	dd73      	ble.n	8017ac8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80179e0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80179e4:	2900      	cmp	r1, #0
 80179e6:	9104      	str	r1, [sp, #16]
 80179e8:	dd6e      	ble.n	8017ac8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80179ea:	f8b9 1000 	ldrh.w	r1, [r9]
 80179ee:	a80e      	add	r0, sp, #56	; 0x38
 80179f0:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80179f4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80179f8:	1a5b      	subs	r3, r3, r1
 80179fa:	a910      	add	r1, sp, #64	; 0x40
 80179fc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8017a00:	b21b      	sxth	r3, r3
 8017a02:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8017a06:	f8df a144 	ldr.w	sl, [pc, #324]	; 8017b4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017a0a:	9305      	str	r3, [sp, #20]
 8017a0c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8017a10:	1ad2      	subs	r2, r2, r3
 8017a12:	b213      	sxth	r3, r2
 8017a14:	9306      	str	r3, [sp, #24]
 8017a16:	9b05      	ldr	r3, [sp, #20]
 8017a18:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017a1c:	9b06      	ldr	r3, [sp, #24]
 8017a1e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017a22:	9b04      	ldr	r3, [sp, #16]
 8017a24:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017a28:	2300      	movs	r3, #0
 8017a2a:	9310      	str	r3, [sp, #64]	; 0x40
 8017a2c:	f7fa fbe6 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017a30:	4640      	mov	r0, r8
 8017a32:	f7fa fbbb 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a36:	a810      	add	r0, sp, #64	; 0x40
 8017a38:	f7fa fbb8 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a3c:	4b41      	ldr	r3, [pc, #260]	; (8017b44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8017a3e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8017a42:	4628      	mov	r0, r5
 8017a44:	881b      	ldrh	r3, [r3, #0]
 8017a46:	9308      	str	r3, [sp, #32]
 8017a48:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017a4c:	b21b      	sxth	r3, r3
 8017a4e:	9303      	str	r3, [sp, #12]
 8017a50:	682b      	ldr	r3, [r5, #0]
 8017a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a54:	4798      	blx	r3
 8017a56:	9a03      	ldr	r2, [sp, #12]
 8017a58:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017a5c:	4681      	mov	r9, r0
 8017a5e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017a62:	fb13 f302 	smulbb	r3, r3, r2
 8017a66:	2203      	movs	r2, #3
 8017a68:	f8da 0000 	ldr.w	r0, [sl]
 8017a6c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8017a70:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017a72:	920b      	str	r2, [sp, #44]	; 0x2c
 8017a74:	441d      	add	r5, r3
 8017a76:	6803      	ldr	r3, [r0, #0]
 8017a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a7a:	4798      	blx	r3
 8017a7c:	9009      	str	r0, [sp, #36]	; 0x24
 8017a7e:	f8da 0000 	ldr.w	r0, [sl]
 8017a82:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017a86:	6803      	ldr	r3, [r0, #0]
 8017a88:	910a      	str	r1, [sp, #40]	; 0x28
 8017a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a8c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017a90:	4798      	blx	r3
 8017a92:	f010 0f01 	tst.w	r0, #1
 8017a96:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017a9a:	d01e      	beq.n	8017ada <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8017a9c:	f8da 0000 	ldr.w	r0, [sl]
 8017aa0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8017aa4:	6803      	ldr	r3, [r0, #0]
 8017aa6:	9200      	str	r2, [sp, #0]
 8017aa8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017aaa:	462b      	mov	r3, r5
 8017aac:	e898 0006 	ldmia.w	r8, {r1, r2}
 8017ab0:	47b0      	blx	r6
 8017ab2:	9b05      	ldr	r3, [sp, #20]
 8017ab4:	80a7      	strh	r7, [r4, #4]
 8017ab6:	8023      	strh	r3, [r4, #0]
 8017ab8:	9b06      	ldr	r3, [sp, #24]
 8017aba:	8063      	strh	r3, [r4, #2]
 8017abc:	9b04      	ldr	r3, [sp, #16]
 8017abe:	e007      	b.n	8017ad0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8017ac0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8017ac4:	4288      	cmp	r0, r1
 8017ac6:	e785      	b.n	80179d4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8017ac8:	2300      	movs	r3, #0
 8017aca:	8023      	strh	r3, [r4, #0]
 8017acc:	8063      	strh	r3, [r4, #2]
 8017ace:	80a3      	strh	r3, [r4, #4]
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	80e3      	strh	r3, [r4, #6]
 8017ad4:	b013      	add	sp, #76	; 0x4c
 8017ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ada:	fb09 f606 	mul.w	r6, r9, r6
 8017ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ae0:	fb11 6602 	smlabb	r6, r1, r2, r6
 8017ae4:	9a07      	ldr	r2, [sp, #28]
 8017ae6:	4433      	add	r3, r6
 8017ae8:	461e      	mov	r6, r3
 8017aea:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017aee:	b16a      	cbz	r2, 8017b0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017af0:	9a08      	ldr	r2, [sp, #32]
 8017af2:	4593      	cmp	fp, r2
 8017af4:	d10a      	bne.n	8017b0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017af6:	f8da 0000 	ldr.w	r0, [sl]
 8017afa:	fb09 f303 	mul.w	r3, r9, r3
 8017afe:	4629      	mov	r1, r5
 8017b00:	6802      	ldr	r2, [r0, #0]
 8017b02:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017b06:	4632      	mov	r2, r6
 8017b08:	47d0      	blx	sl
 8017b0a:	e7d2      	b.n	8017ab2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017b0c:	9a03      	ldr	r2, [sp, #12]
 8017b0e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8017b4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017b12:	fb02 5803 	mla	r8, r2, r3, r5
 8017b16:	4545      	cmp	r5, r8
 8017b18:	d2cb      	bcs.n	8017ab2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017b1a:	f8db 0000 	ldr.w	r0, [fp]
 8017b1e:	4629      	mov	r1, r5
 8017b20:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017b24:	6802      	ldr	r2, [r0, #0]
 8017b26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b2a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017b2e:	4632      	mov	r2, r6
 8017b30:	47d0      	blx	sl
 8017b32:	9b03      	ldr	r3, [sp, #12]
 8017b34:	444e      	add	r6, r9
 8017b36:	441d      	add	r5, r3
 8017b38:	e7ed      	b.n	8017b16 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8017b3a:	bf00      	nop
 8017b3c:	2400f498 	.word	0x2400f498
 8017b40:	2400f49a 	.word	0x2400f49a
 8017b44:	2400f49e 	.word	0x2400f49e
 8017b48:	2400f49c 	.word	0x2400f49c
 8017b4c:	2400f4a4 	.word	0x2400f4a4

08017b50 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017b50:	2200      	movs	r2, #0
 8017b52:	490c      	ldr	r1, [pc, #48]	; (8017b84 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017b54:	6042      	str	r2, [r0, #4]
 8017b56:	6001      	str	r1, [r0, #0]
 8017b58:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017b5c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017b60:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017b64:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017b68:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017b6c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017b70:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017b74:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017b78:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017b7c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017b80:	4770      	bx	lr
 8017b82:	bf00      	nop
 8017b84:	08022608 	.word	0x08022608

08017b88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b8c:	b091      	sub	sp, #68	; 0x44
 8017b8e:	4607      	mov	r7, r0
 8017b90:	4688      	mov	r8, r1
 8017b92:	6810      	ldr	r0, [r2, #0]
 8017b94:	6851      	ldr	r1, [r2, #4]
 8017b96:	ac0c      	add	r4, sp, #48	; 0x30
 8017b98:	4616      	mov	r6, r2
 8017b9a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017b9e:	4d64      	ldr	r5, [pc, #400]	; (8017d30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017ba0:	f8df a190 	ldr.w	sl, [pc, #400]	; 8017d34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8017ba4:	c403      	stmia	r4!, {r0, r1}
 8017ba6:	6818      	ldr	r0, [r3, #0]
 8017ba8:	ac0e      	add	r4, sp, #56	; 0x38
 8017baa:	6859      	ldr	r1, [r3, #4]
 8017bac:	c403      	stmia	r4!, {r0, r1}
 8017bae:	a80c      	add	r0, sp, #48	; 0x30
 8017bb0:	f7fa fafc 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	a80e      	add	r0, sp, #56	; 0x38
 8017bb8:	f7fa fb20 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017bbc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017bc0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017bc4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017bc8:	6828      	ldr	r0, [r5, #0]
 8017bca:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017bce:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017bd2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017bd6:	440f      	add	r7, r1
 8017bd8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017bdc:	440a      	add	r2, r1
 8017bde:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017be2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017be6:	4413      	add	r3, r2
 8017be8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017bec:	6803      	ldr	r3, [r0, #0]
 8017bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bf0:	4798      	blx	r3
 8017bf2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017bf6:	6828      	ldr	r0, [r5, #0]
 8017bf8:	d01f      	beq.n	8017c3a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8017bfa:	2201      	movs	r2, #1
 8017bfc:	2500      	movs	r5, #0
 8017bfe:	6801      	ldr	r1, [r0, #0]
 8017c00:	b2a4      	uxth	r4, r4
 8017c02:	b2b6      	uxth	r6, r6
 8017c04:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017c08:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8017c0c:	250b      	movs	r5, #11
 8017c0e:	9507      	str	r5, [sp, #28]
 8017c10:	f8ba 5000 	ldrh.w	r5, [sl]
 8017c14:	f8cd 9010 	str.w	r9, [sp, #16]
 8017c18:	9602      	str	r6, [sp, #8]
 8017c1a:	9401      	str	r4, [sp, #4]
 8017c1c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017c20:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017c24:	9203      	str	r2, [sp, #12]
 8017c26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017c2a:	9200      	str	r2, [sp, #0]
 8017c2c:	4642      	mov	r2, r8
 8017c2e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017c30:	4639      	mov	r1, r7
 8017c32:	47a0      	blx	r4
 8017c34:	b011      	add	sp, #68	; 0x44
 8017c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3a:	6803      	ldr	r3, [r0, #0]
 8017c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c3e:	4798      	blx	r3
 8017c40:	f8ba 5000 	ldrh.w	r5, [sl]
 8017c44:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017c48:	f04f 0e04 	mov.w	lr, #4
 8017c4c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017c50:	436e      	muls	r6, r5
 8017c52:	fb05 2303 	mla	r3, r5, r3, r2
 8017c56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017c5a:	1b2d      	subs	r5, r5, r4
 8017c5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c64:	4418      	add	r0, r3
 8017c66:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017c6a:	1982      	adds	r2, r0, r6
 8017c6c:	1b1b      	subs	r3, r3, r4
 8017c6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017c72:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c74:	4290      	cmp	r0, r2
 8017c76:	d254      	bcs.n	8017d22 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017c78:	eb00 0a04 	add.w	sl, r0, r4
 8017c7c:	4550      	cmp	r0, sl
 8017c7e:	d24c      	bcs.n	8017d1a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8017c80:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017c84:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017c88:	eb08 0c01 	add.w	ip, r8, r1
 8017c8c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017c90:	b173      	cbz	r3, 8017cb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017c92:	2bff      	cmp	r3, #255	; 0xff
 8017c94:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017c98:	d10c      	bne.n	8017cb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017c9a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017c9e:	d109      	bne.n	8017cb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017ca0:	f880 b000 	strb.w	fp, [r0]
 8017ca4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017ca8:	7043      	strb	r3, [r0, #1]
 8017caa:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017cae:	7083      	strb	r3, [r0, #2]
 8017cb0:	3003      	adds	r0, #3
 8017cb2:	e7e3      	b.n	8017c7c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8017cb4:	fb09 f103 	mul.w	r1, r9, r3
 8017cb8:	1c4b      	adds	r3, r1, #1
 8017cba:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017cbe:	7801      	ldrb	r1, [r0, #0]
 8017cc0:	121b      	asrs	r3, r3, #8
 8017cc2:	b29e      	uxth	r6, r3
 8017cc4:	43db      	mvns	r3, r3
 8017cc6:	fb1b fb06 	smulbb	fp, fp, r6
 8017cca:	b2db      	uxtb	r3, r3
 8017ccc:	fb01 b103 	mla	r1, r1, r3, fp
 8017cd0:	b289      	uxth	r1, r1
 8017cd2:	f101 0b01 	add.w	fp, r1, #1
 8017cd6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017cda:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017cde:	fb1b fb03 	smulbb	fp, fp, r3
 8017ce2:	1209      	asrs	r1, r1, #8
 8017ce4:	7001      	strb	r1, [r0, #0]
 8017ce6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017cea:	fb01 b106 	mla	r1, r1, r6, fp
 8017cee:	b289      	uxth	r1, r1
 8017cf0:	f101 0b01 	add.w	fp, r1, #1
 8017cf4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017cf8:	1209      	asrs	r1, r1, #8
 8017cfa:	7041      	strb	r1, [r0, #1]
 8017cfc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017d00:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017d04:	fb1c f303 	smulbb	r3, ip, r3
 8017d08:	fb01 3606 	mla	r6, r1, r6, r3
 8017d0c:	b2b6      	uxth	r6, r6
 8017d0e:	1c73      	adds	r3, r6, #1
 8017d10:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017d14:	1236      	asrs	r6, r6, #8
 8017d16:	7086      	strb	r6, [r0, #2]
 8017d18:	e7ca      	b.n	8017cb0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d1c:	4428      	add	r0, r5
 8017d1e:	441f      	add	r7, r3
 8017d20:	e7a8      	b.n	8017c74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8017d22:	4b03      	ldr	r3, [pc, #12]	; (8017d30 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017d24:	6818      	ldr	r0, [r3, #0]
 8017d26:	6803      	ldr	r3, [r0, #0]
 8017d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d2a:	4798      	blx	r3
 8017d2c:	e782      	b.n	8017c34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8017d2e:	bf00      	nop
 8017d30:	2400f4a4 	.word	0x2400f4a4
 8017d34:	2400f49e 	.word	0x2400f49e

08017d38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d3c:	b091      	sub	sp, #68	; 0x44
 8017d3e:	4680      	mov	r8, r0
 8017d40:	460e      	mov	r6, r1
 8017d42:	6810      	ldr	r0, [r2, #0]
 8017d44:	6851      	ldr	r1, [r2, #4]
 8017d46:	ad0c      	add	r5, sp, #48	; 0x30
 8017d48:	4614      	mov	r4, r2
 8017d4a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017d4e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8017ee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8017d52:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017eec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017d56:	c503      	stmia	r5!, {r0, r1}
 8017d58:	6818      	ldr	r0, [r3, #0]
 8017d5a:	ad0e      	add	r5, sp, #56	; 0x38
 8017d5c:	6859      	ldr	r1, [r3, #4]
 8017d5e:	c503      	stmia	r5!, {r0, r1}
 8017d60:	a80c      	add	r0, sp, #48	; 0x30
 8017d62:	f7fa fa23 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d66:	4621      	mov	r1, r4
 8017d68:	a80e      	add	r0, sp, #56	; 0x38
 8017d6a:	f7fa fa47 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017d6e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017d72:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017d76:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017d7a:	f8d9 0000 	ldr.w	r0, [r9]
 8017d7e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017d82:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017d86:	eb08 0401 	add.w	r4, r8, r1
 8017d8a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017d8e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017d92:	440a      	add	r2, r1
 8017d94:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017d98:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017d9c:	4413      	add	r3, r2
 8017d9e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017da2:	6803      	ldr	r3, [r0, #0]
 8017da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017da6:	4798      	blx	r3
 8017da8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017dac:	f8d9 0000 	ldr.w	r0, [r9]
 8017db0:	d022      	beq.n	8017df8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017db2:	2200      	movs	r2, #0
 8017db4:	f04f 0c01 	mov.w	ip, #1
 8017db8:	6801      	ldr	r1, [r0, #0]
 8017dba:	b2ad      	uxth	r5, r5
 8017dbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017dc0:	e9cd c208 	strd	ip, r2, [sp, #32]
 8017dc4:	f04f 0c0b 	mov.w	ip, #11
 8017dc8:	f8cd c01c 	str.w	ip, [sp, #28]
 8017dcc:	f8ba c000 	ldrh.w	ip, [sl]
 8017dd0:	9704      	str	r7, [sp, #16]
 8017dd2:	9502      	str	r5, [sp, #8]
 8017dd4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8017dd8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017ddc:	9203      	str	r2, [sp, #12]
 8017dde:	fa1f f288 	uxth.w	r2, r8
 8017de2:	9201      	str	r2, [sp, #4]
 8017de4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017de8:	9200      	str	r2, [sp, #0]
 8017dea:	4632      	mov	r2, r6
 8017dec:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8017dee:	4621      	mov	r1, r4
 8017df0:	47a8      	blx	r5
 8017df2:	b011      	add	sp, #68	; 0x44
 8017df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017df8:	6803      	ldr	r3, [r0, #0]
 8017dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dfc:	4798      	blx	r3
 8017dfe:	f8ba 2000 	ldrh.w	r2, [sl]
 8017e02:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e06:	f04f 0e03 	mov.w	lr, #3
 8017e0a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8017e0e:	4355      	muls	r5, r2
 8017e10:	fa1f fc87 	uxth.w	ip, r7
 8017e14:	fb02 1303 	mla	r3, r2, r3, r1
 8017e18:	eba2 0208 	sub.w	r2, r2, r8
 8017e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017e24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e28:	4418      	add	r0, r3
 8017e2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8017e2c:	1943      	adds	r3, r0, r5
 8017e2e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017e32:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017e36:	eba2 0208 	sub.w	r2, r2, r8
 8017e3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017e3e:	b2ad      	uxth	r5, r5
 8017e40:	4298      	cmp	r0, r3
 8017e42:	d24a      	bcs.n	8017eda <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8017e44:	eb00 0908 	add.w	r9, r0, r8
 8017e48:	4621      	mov	r1, r4
 8017e4a:	4548      	cmp	r0, r9
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	d240      	bcs.n	8017ed2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017e50:	f04f 0a04 	mov.w	sl, #4
 8017e54:	7824      	ldrb	r4, [r4, #0]
 8017e56:	2fff      	cmp	r7, #255	; 0xff
 8017e58:	f101 0101 	add.w	r1, r1, #1
 8017e5c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8017e60:	eb06 0a04 	add.w	sl, r6, r4
 8017e64:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017e68:	d02b      	beq.n	8017ec2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8017e6a:	7804      	ldrb	r4, [r0, #0]
 8017e6c:	fb14 f405 	smulbb	r4, r4, r5
 8017e70:	fb0b 440c 	mla	r4, fp, ip, r4
 8017e74:	b2a4      	uxth	r4, r4
 8017e76:	f104 0b01 	add.w	fp, r4, #1
 8017e7a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017e7e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017e82:	fb1b fb05 	smulbb	fp, fp, r5
 8017e86:	1224      	asrs	r4, r4, #8
 8017e88:	7004      	strb	r4, [r0, #0]
 8017e8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017e8e:	fb04 b40c 	mla	r4, r4, ip, fp
 8017e92:	b2a4      	uxth	r4, r4
 8017e94:	f104 0b01 	add.w	fp, r4, #1
 8017e98:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017e9c:	1224      	asrs	r4, r4, #8
 8017e9e:	7044      	strb	r4, [r0, #1]
 8017ea0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017ea4:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017ea8:	fb1a fa05 	smulbb	sl, sl, r5
 8017eac:	fb04 a40c 	mla	r4, r4, ip, sl
 8017eb0:	b2a4      	uxth	r4, r4
 8017eb2:	f104 0a01 	add.w	sl, r4, #1
 8017eb6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017eba:	1224      	asrs	r4, r4, #8
 8017ebc:	7084      	strb	r4, [r0, #2]
 8017ebe:	3003      	adds	r0, #3
 8017ec0:	e7c3      	b.n	8017e4a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8017ec2:	f880 b000 	strb.w	fp, [r0]
 8017ec6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017eca:	7044      	strb	r4, [r0, #1]
 8017ecc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017ed0:	e7f4      	b.n	8017ebc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8017ed2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017ed4:	4420      	add	r0, r4
 8017ed6:	188c      	adds	r4, r1, r2
 8017ed8:	e7b2      	b.n	8017e40 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8017eda:	4b03      	ldr	r3, [pc, #12]	; (8017ee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8017edc:	6818      	ldr	r0, [r3, #0]
 8017ede:	6803      	ldr	r3, [r0, #0]
 8017ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ee2:	4798      	blx	r3
 8017ee4:	e785      	b.n	8017df2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8017ee6:	bf00      	nop
 8017ee8:	2400f4a4 	.word	0x2400f4a4
 8017eec:	2400f49e 	.word	0x2400f49e

08017ef0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017ef0:	b430      	push	{r4, r5}
 8017ef2:	780d      	ldrb	r5, [r1, #0]
 8017ef4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8017ef8:	b11d      	cbz	r5, 8017f02 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8017efa:	2d01      	cmp	r5, #1
 8017efc:	d005      	beq.n	8017f0a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8017efe:	bc30      	pop	{r4, r5}
 8017f00:	4770      	bx	lr
 8017f02:	9402      	str	r4, [sp, #8]
 8017f04:	bc30      	pop	{r4, r5}
 8017f06:	f7ff be3f 	b.w	8017b88 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017f0a:	9402      	str	r4, [sp, #8]
 8017f0c:	bc30      	pop	{r4, r5}
 8017f0e:	f7ff bf13 	b.w	8017d38 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08017f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8017f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f18:	4605      	mov	r5, r0
 8017f1a:	b08f      	sub	sp, #60	; 0x3c
 8017f1c:	460c      	mov	r4, r1
 8017f1e:	461f      	mov	r7, r3
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d052      	beq.n	8017fca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017f24:	6808      	ldr	r0, [r1, #0]
 8017f26:	ab0a      	add	r3, sp, #40	; 0x28
 8017f28:	6849      	ldr	r1, [r1, #4]
 8017f2a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80180f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8017f2e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80180f8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8017f32:	c303      	stmia	r3!, {r0, r1}
 8017f34:	6810      	ldr	r0, [r2, #0]
 8017f36:	ab0c      	add	r3, sp, #48	; 0x30
 8017f38:	6851      	ldr	r1, [r2, #4]
 8017f3a:	c303      	stmia	r3!, {r0, r1}
 8017f3c:	a80a      	add	r0, sp, #40	; 0x28
 8017f3e:	f7fa f935 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f42:	4621      	mov	r1, r4
 8017f44:	a80c      	add	r0, sp, #48	; 0x30
 8017f46:	f7fa f959 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017f4a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017f4e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017f52:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017f56:	f8d8 0000 	ldr.w	r0, [r8]
 8017f5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017f5e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8017f62:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8017f66:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8017f6a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8017f6e:	440a      	add	r2, r1
 8017f70:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017f74:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017f78:	4413      	add	r3, r2
 8017f7a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017f7e:	6803      	ldr	r3, [r0, #0]
 8017f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f82:	4798      	blx	r3
 8017f84:	2fff      	cmp	r7, #255	; 0xff
 8017f86:	d023      	beq.n	8017fd0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8017f88:	f010 0f04 	tst.w	r0, #4
 8017f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8017f90:	d021      	beq.n	8017fd6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8017f92:	2100      	movs	r1, #0
 8017f94:	f04f 0e01 	mov.w	lr, #1
 8017f98:	f8d0 c000 	ldr.w	ip, [r0]
 8017f9c:	b2a4      	uxth	r4, r4
 8017f9e:	9106      	str	r1, [sp, #24]
 8017fa0:	b2b6      	uxth	r6, r6
 8017fa2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017fa6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017faa:	e9cd e107 	strd	lr, r1, [sp, #28]
 8017fae:	f8b9 e000 	ldrh.w	lr, [r9]
 8017fb2:	9703      	str	r7, [sp, #12]
 8017fb4:	9401      	str	r4, [sp, #4]
 8017fb6:	9600      	str	r6, [sp, #0]
 8017fb8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8017fbc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017fc0:	9102      	str	r1, [sp, #8]
 8017fc2:	4629      	mov	r1, r5
 8017fc4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8017fc8:	47a0      	blx	r4
 8017fca:	b00f      	add	sp, #60	; 0x3c
 8017fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fd0:	f010 0f01 	tst.w	r0, #1
 8017fd4:	e7da      	b.n	8017f8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8017fd6:	6803      	ldr	r3, [r0, #0]
 8017fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017fda:	4798      	blx	r3
 8017fdc:	f8b9 1000 	ldrh.w	r1, [r9]
 8017fe0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017fe4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8017fe8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017fec:	434c      	muls	r4, r1
 8017fee:	2fff      	cmp	r7, #255	; 0xff
 8017ff0:	fb01 2303 	mla	r3, r1, r3, r2
 8017ff4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017ff8:	eba1 0106 	sub.w	r1, r1, r6
 8017ffc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018000:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018004:	4418      	add	r0, r3
 8018006:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801800a:	eba3 0606 	sub.w	r6, r3, r6
 801800e:	4404      	add	r4, r0
 8018010:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8018014:	d04a      	beq.n	80180ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8018016:	43fa      	mvns	r2, r7
 8018018:	b2bb      	uxth	r3, r7
 801801a:	b2d7      	uxtb	r7, r2
 801801c:	42a0      	cmp	r0, r4
 801801e:	d263      	bcs.n	80180e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8018020:	eb00 0e0c 	add.w	lr, r0, ip
 8018024:	4586      	cmp	lr, r0
 8018026:	f100 0803 	add.w	r8, r0, #3
 801802a:	d93a      	bls.n	80180a2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801802c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8018030:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8018034:	00d0      	lsls	r0, r2, #3
 8018036:	fb19 f907 	smulbb	r9, r9, r7
 801803a:	b2c0      	uxtb	r0, r0
 801803c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8018040:	fb00 9003 	mla	r0, r0, r3, r9
 8018044:	b280      	uxth	r0, r0
 8018046:	f100 0901 	add.w	r9, r0, #1
 801804a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801804e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8018052:	fb19 f907 	smulbb	r9, r9, r7
 8018056:	1200      	asrs	r0, r0, #8
 8018058:	f808 0c03 	strb.w	r0, [r8, #-3]
 801805c:	10d0      	asrs	r0, r2, #3
 801805e:	1212      	asrs	r2, r2, #8
 8018060:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018064:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8018068:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801806c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018070:	fb00 9003 	mla	r0, r0, r3, r9
 8018074:	b280      	uxth	r0, r0
 8018076:	f100 0901 	add.w	r9, r0, #1
 801807a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801807e:	1200      	asrs	r0, r0, #8
 8018080:	f808 0c02 	strb.w	r0, [r8, #-2]
 8018084:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8018088:	fb10 f007 	smulbb	r0, r0, r7
 801808c:	fb02 0203 	mla	r2, r2, r3, r0
 8018090:	b292      	uxth	r2, r2
 8018092:	1c50      	adds	r0, r2, #1
 8018094:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018098:	4640      	mov	r0, r8
 801809a:	1212      	asrs	r2, r2, #8
 801809c:	f808 2c01 	strb.w	r2, [r8, #-1]
 80180a0:	e7c0      	b.n	8018024 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80180a2:	4408      	add	r0, r1
 80180a4:	4435      	add	r5, r6
 80180a6:	e7b9      	b.n	801801c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80180a8:	4408      	add	r0, r1
 80180aa:	4435      	add	r5, r6
 80180ac:	42a0      	cmp	r0, r4
 80180ae:	d21b      	bcs.n	80180e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80180b0:	eb00 070c 	add.w	r7, r0, ip
 80180b4:	42b8      	cmp	r0, r7
 80180b6:	d2f7      	bcs.n	80180a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80180b8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80180bc:	3003      	adds	r0, #3
 80180be:	00da      	lsls	r2, r3, #3
 80180c0:	b2d2      	uxtb	r2, r2
 80180c2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80180c6:	f800 2c03 	strb.w	r2, [r0, #-3]
 80180ca:	10da      	asrs	r2, r3, #3
 80180cc:	121b      	asrs	r3, r3, #8
 80180ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80180d2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80180d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80180da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80180de:	f800 2c02 	strb.w	r2, [r0, #-2]
 80180e2:	f800 3c01 	strb.w	r3, [r0, #-1]
 80180e6:	e7e5      	b.n	80180b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80180e8:	4b02      	ldr	r3, [pc, #8]	; (80180f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80180ea:	6818      	ldr	r0, [r3, #0]
 80180ec:	6803      	ldr	r3, [r0, #0]
 80180ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180f0:	4798      	blx	r3
 80180f2:	e76a      	b.n	8017fca <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80180f4:	2400f4a4 	.word	0x2400f4a4
 80180f8:	2400f49e 	.word	0x2400f49e

080180fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80180fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018100:	b08a      	sub	sp, #40	; 0x28
 8018102:	460d      	mov	r5, r1
 8018104:	4604      	mov	r4, r0
 8018106:	461e      	mov	r6, r3
 8018108:	6808      	ldr	r0, [r1, #0]
 801810a:	ab06      	add	r3, sp, #24
 801810c:	6849      	ldr	r1, [r1, #4]
 801810e:	4f5d      	ldr	r7, [pc, #372]	; (8018284 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8018110:	c303      	stmia	r3!, {r0, r1}
 8018112:	6810      	ldr	r0, [r2, #0]
 8018114:	ab08      	add	r3, sp, #32
 8018116:	6851      	ldr	r1, [r2, #4]
 8018118:	c303      	stmia	r3!, {r0, r1}
 801811a:	a806      	add	r0, sp, #24
 801811c:	f7fa f846 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018120:	4629      	mov	r1, r5
 8018122:	a808      	add	r0, sp, #32
 8018124:	f7fa f86a 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018128:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801812c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018130:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018134:	6838      	ldr	r0, [r7, #0]
 8018136:	fb11 2103 	smlabb	r1, r1, r3, r2
 801813a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801813e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8018142:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018146:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801814a:	440a      	add	r2, r1
 801814c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018150:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018154:	4413      	add	r3, r2
 8018156:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801815a:	6803      	ldr	r3, [r0, #0]
 801815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801815e:	4798      	blx	r3
 8018160:	2eff      	cmp	r6, #255	; 0xff
 8018162:	d119      	bne.n	8018198 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8018164:	f010 0f20 	tst.w	r0, #32
 8018168:	6838      	ldr	r0, [r7, #0]
 801816a:	d018      	beq.n	801819e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801816c:	b2ad      	uxth	r5, r5
 801816e:	2700      	movs	r7, #0
 8018170:	6801      	ldr	r1, [r0, #0]
 8018172:	9501      	str	r5, [sp, #4]
 8018174:	fa1f f588 	uxth.w	r5, r8
 8018178:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801817c:	9500      	str	r5, [sp, #0]
 801817e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018182:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8018186:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801818a:	9602      	str	r6, [sp, #8]
 801818c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801818e:	4621      	mov	r1, r4
 8018190:	47a8      	blx	r5
 8018192:	b00a      	add	sp, #40	; 0x28
 8018194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018198:	f010 0f40 	tst.w	r0, #64	; 0x40
 801819c:	e7e4      	b.n	8018168 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801819e:	6803      	ldr	r3, [r0, #0]
 80181a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181a2:	4798      	blx	r3
 80181a4:	4b38      	ldr	r3, [pc, #224]	; (8018288 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80181a6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80181aa:	f8b3 c000 	ldrh.w	ip, [r3]
 80181ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80181b2:	fb0c f505 	mul.w	r5, ip, r5
 80181b6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80181ba:	fb0c 2303 	mla	r3, ip, r3, r2
 80181be:	ebac 0c08 	sub.w	ip, ip, r8
 80181c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181c6:	ebae 0e08 	sub.w	lr, lr, r8
 80181ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80181ce:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80181d2:	4418      	add	r0, r3
 80181d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80181d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80181dc:	4405      	add	r5, r0
 80181de:	42a8      	cmp	r0, r5
 80181e0:	d24a      	bcs.n	8018278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80181e2:	eb00 0803 	add.w	r8, r0, r3
 80181e6:	4540      	cmp	r0, r8
 80181e8:	d243      	bcs.n	8018272 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80181ea:	78e2      	ldrb	r2, [r4, #3]
 80181ec:	b15a      	cbz	r2, 8018206 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80181ee:	2aff      	cmp	r2, #255	; 0xff
 80181f0:	f894 9000 	ldrb.w	r9, [r4]
 80181f4:	d10a      	bne.n	801820c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80181f6:	2eff      	cmp	r6, #255	; 0xff
 80181f8:	d108      	bne.n	801820c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80181fa:	f880 9000 	strb.w	r9, [r0]
 80181fe:	7862      	ldrb	r2, [r4, #1]
 8018200:	7042      	strb	r2, [r0, #1]
 8018202:	78a2      	ldrb	r2, [r4, #2]
 8018204:	7082      	strb	r2, [r0, #2]
 8018206:	3003      	adds	r0, #3
 8018208:	3404      	adds	r4, #4
 801820a:	e7ec      	b.n	80181e6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801820c:	4372      	muls	r2, r6
 801820e:	1c51      	adds	r1, r2, #1
 8018210:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8018214:	1209      	asrs	r1, r1, #8
 8018216:	fa1f fa81 	uxth.w	sl, r1
 801821a:	43c9      	mvns	r1, r1
 801821c:	fb19 f90a 	smulbb	r9, r9, sl
 8018220:	b2ca      	uxtb	r2, r1
 8018222:	7801      	ldrb	r1, [r0, #0]
 8018224:	fb01 9902 	mla	r9, r1, r2, r9
 8018228:	fa1f f989 	uxth.w	r9, r9
 801822c:	f109 0101 	add.w	r1, r9, #1
 8018230:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8018234:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018238:	f880 9000 	strb.w	r9, [r0]
 801823c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8018240:	7861      	ldrb	r1, [r4, #1]
 8018242:	fb19 f902 	smulbb	r9, r9, r2
 8018246:	fb01 910a 	mla	r1, r1, sl, r9
 801824a:	b289      	uxth	r1, r1
 801824c:	f101 0901 	add.w	r9, r1, #1
 8018250:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8018254:	1209      	asrs	r1, r1, #8
 8018256:	7041      	strb	r1, [r0, #1]
 8018258:	7881      	ldrb	r1, [r0, #2]
 801825a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801825e:	fb11 f202 	smulbb	r2, r1, r2
 8018262:	fb09 220a 	mla	r2, r9, sl, r2
 8018266:	b292      	uxth	r2, r2
 8018268:	1c51      	adds	r1, r2, #1
 801826a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801826e:	1212      	asrs	r2, r2, #8
 8018270:	e7c8      	b.n	8018204 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8018272:	4460      	add	r0, ip
 8018274:	4474      	add	r4, lr
 8018276:	e7b2      	b.n	80181de <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8018278:	6838      	ldr	r0, [r7, #0]
 801827a:	6803      	ldr	r3, [r0, #0]
 801827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801827e:	4798      	blx	r3
 8018280:	e787      	b.n	8018192 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8018282:	bf00      	nop
 8018284:	2400f4a4 	.word	0x2400f4a4
 8018288:	2400f49e 	.word	0x2400f49e

0801828c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801828c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018290:	b085      	sub	sp, #20
 8018292:	4606      	mov	r6, r0
 8018294:	460c      	mov	r4, r1
 8018296:	4691      	mov	r9, r2
 8018298:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801829c:	4698      	mov	r8, r3
 801829e:	b31d      	cbz	r5, 80182e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80182a0:	4608      	mov	r0, r1
 80182a2:	f7fd fa4f 	bl	8015744 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80182a6:	4607      	mov	r7, r0
 80182a8:	4620      	mov	r0, r4
 80182aa:	f7fd fa7f 	bl	80157ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 80182ae:	f8ad 000e 	strh.w	r0, [sp, #14]
 80182b2:	4620      	mov	r0, r4
 80182b4:	f8ad 9008 	strh.w	r9, [sp, #8]
 80182b8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80182bc:	f8ad 700c 	strh.w	r7, [sp, #12]
 80182c0:	f7fd fb78 	bl	80159b4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80182c4:	280b      	cmp	r0, #11
 80182c6:	d80f      	bhi.n	80182e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80182c8:	e8df f000 	tbb	[pc, r0]
 80182cc:	0e062920 	.word	0x0e062920
 80182d0:	0e0e0e0e 	.word	0x0e0e0e0e
 80182d4:	110e0e0e 	.word	0x110e0e0e
 80182d8:	4620      	mov	r0, r4
 80182da:	f7fd fae7 	bl	80158ac <_ZNK8touchgfx6Bitmap7getDataEv>
 80182de:	462b      	mov	r3, r5
 80182e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182e2:	a902      	add	r1, sp, #8
 80182e4:	f7ff ff0a 	bl	80180fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80182e8:	b005      	add	sp, #20
 80182ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ee:	4620      	mov	r0, r4
 80182f0:	f7fd fadc 	bl	80158ac <_ZNK8touchgfx6Bitmap7getDataEv>
 80182f4:	4606      	mov	r6, r0
 80182f6:	4620      	mov	r0, r4
 80182f8:	f7fd fb08 	bl	801590c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80182fc:	9500      	str	r5, [sp, #0]
 80182fe:	4601      	mov	r1, r0
 8018300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018302:	aa02      	add	r2, sp, #8
 8018304:	4630      	mov	r0, r6
 8018306:	f7ff fdf3 	bl	8017ef0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801830a:	e7ed      	b.n	80182e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801830c:	4620      	mov	r0, r4
 801830e:	f7fd facd 	bl	80158ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8018312:	462b      	mov	r3, r5
 8018314:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018316:	a902      	add	r1, sp, #8
 8018318:	f7ff fdfc 	bl	8017f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801831c:	e7e4      	b.n	80182e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801831e:	6833      	ldr	r3, [r6, #0]
 8018320:	4620      	mov	r0, r4
 8018322:	68df      	ldr	r7, [r3, #12]
 8018324:	f7fd fac2 	bl	80158ac <_ZNK8touchgfx6Bitmap7getDataEv>
 8018328:	2300      	movs	r3, #0
 801832a:	4601      	mov	r1, r0
 801832c:	aa02      	add	r2, sp, #8
 801832e:	4630      	mov	r0, r6
 8018330:	e9cd 5300 	strd	r5, r3, [sp]
 8018334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018336:	47b8      	blx	r7
 8018338:	e7d6      	b.n	80182e8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801833a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801833a:	b4f0      	push	{r4, r5, r6, r7}
 801833c:	4616      	mov	r6, r2
 801833e:	461c      	mov	r4, r3
 8018340:	460d      	mov	r5, r1
 8018342:	9a04      	ldr	r2, [sp, #16]
 8018344:	2e01      	cmp	r6, #1
 8018346:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801834a:	d00e      	beq.n	801836a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801834c:	d303      	bcc.n	8018356 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801834e:	2e02      	cmp	r6, #2
 8018350:	d006      	beq.n	8018360 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8018352:	bcf0      	pop	{r4, r5, r6, r7}
 8018354:	4770      	bx	lr
 8018356:	4621      	mov	r1, r4
 8018358:	4628      	mov	r0, r5
 801835a:	bcf0      	pop	{r4, r5, r6, r7}
 801835c:	f7ff bdda 	b.w	8017f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8018360:	4621      	mov	r1, r4
 8018362:	4628      	mov	r0, r5
 8018364:	bcf0      	pop	{r4, r5, r6, r7}
 8018366:	f7ff bec9 	b.w	80180fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801836a:	6805      	ldr	r5, [r0, #0]
 801836c:	2600      	movs	r6, #0
 801836e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8018372:	68ed      	ldr	r5, [r5, #12]
 8018374:	4613      	mov	r3, r2
 8018376:	4622      	mov	r2, r4
 8018378:	46ac      	mov	ip, r5
 801837a:	bcf0      	pop	{r4, r5, r6, r7}
 801837c:	4760      	bx	ip
	...

08018380 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8018380:	b160      	cbz	r0, 801839c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8018382:	2903      	cmp	r1, #3
 8018384:	d818      	bhi.n	80183b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8018386:	e8df f001 	tbb	[pc, r1]
 801838a:	1902      	.short	0x1902
 801838c:	1b06      	.short	0x1b06
 801838e:	4b0e      	ldr	r3, [pc, #56]	; (80183c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018390:	8818      	ldrh	r0, [r3, #0]
 8018392:	4240      	negs	r0, r0
 8018394:	4770      	bx	lr
 8018396:	4b0c      	ldr	r3, [pc, #48]	; (80183c8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018398:	8818      	ldrh	r0, [r3, #0]
 801839a:	4770      	bx	lr
 801839c:	2903      	cmp	r1, #3
 801839e:	d80b      	bhi.n	80183b8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80183a0:	a301      	add	r3, pc, #4	; (adr r3, 80183a8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80183a2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80183a6:	bf00      	nop
 80183a8:	080183bd 	.word	0x080183bd
 80183ac:	08018397 	.word	0x08018397
 80183b0:	080183c1 	.word	0x080183c1
 80183b4:	0801838f 	.word	0x0801838f
 80183b8:	2000      	movs	r0, #0
 80183ba:	4770      	bx	lr
 80183bc:	2001      	movs	r0, #1
 80183be:	4770      	bx	lr
 80183c0:	f04f 30ff 	mov.w	r0, #4294967295
 80183c4:	4770      	bx	lr
 80183c6:	bf00      	nop
 80183c8:	2400f49e 	.word	0x2400f49e

080183cc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80183cc:	b160      	cbz	r0, 80183e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80183ce:	2903      	cmp	r1, #3
 80183d0:	d818      	bhi.n	8018404 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80183d2:	e8df f001 	tbb	[pc, r1]
 80183d6:	0219      	.short	0x0219
 80183d8:	051b      	.short	0x051b
 80183da:	4b0e      	ldr	r3, [pc, #56]	; (8018414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80183dc:	8818      	ldrh	r0, [r3, #0]
 80183de:	4770      	bx	lr
 80183e0:	4b0c      	ldr	r3, [pc, #48]	; (8018414 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 80183e2:	8818      	ldrh	r0, [r3, #0]
 80183e4:	4240      	negs	r0, r0
 80183e6:	4770      	bx	lr
 80183e8:	2903      	cmp	r1, #3
 80183ea:	d80b      	bhi.n	8018404 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80183ec:	a301      	add	r3, pc, #4	; (adr r3, 80183f4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 80183ee:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80183f2:	bf00      	nop
 80183f4:	080183db 	.word	0x080183db
 80183f8:	0801840d 	.word	0x0801840d
 80183fc:	080183e1 	.word	0x080183e1
 8018400:	08018409 	.word	0x08018409
 8018404:	2000      	movs	r0, #0
 8018406:	4770      	bx	lr
 8018408:	2001      	movs	r0, #1
 801840a:	4770      	bx	lr
 801840c:	f04f 30ff 	mov.w	r0, #4294967295
 8018410:	4770      	bx	lr
 8018412:	bf00      	nop
 8018414:	2400f49e 	.word	0x2400f49e

08018418 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801841c:	b097      	sub	sp, #92	; 0x5c
 801841e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018420:	a912      	add	r1, sp, #72	; 0x48
 8018422:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8018426:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801842a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801842e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8018432:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8018436:	e881 000c 	stmia.w	r1, {r2, r3}
 801843a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801843e:	930a      	str	r3, [sp, #40]	; 0x28
 8018440:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8018444:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8018448:	9311      	str	r3, [sp, #68]	; 0x44
 801844a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801844e:	798d      	ldrb	r5, [r1, #6]
 8018450:	930c      	str	r3, [sp, #48]	; 0x30
 8018452:	7b4b      	ldrb	r3, [r1, #13]
 8018454:	0158      	lsls	r0, r3, #5
 8018456:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801845a:	4328      	orrs	r0, r5
 801845c:	9009      	str	r0, [sp, #36]	; 0x24
 801845e:	f000 817c 	beq.w	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018462:	011b      	lsls	r3, r3, #4
 8018464:	79c8      	ldrb	r0, [r1, #7]
 8018466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801846a:	4303      	orrs	r3, r0
 801846c:	930e      	str	r3, [sp, #56]	; 0x38
 801846e:	f000 8174 	beq.w	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018472:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8018476:	b29b      	uxth	r3, r3
 8018478:	2f00      	cmp	r7, #0
 801847a:	f000 8116 	beq.w	80186aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801847e:	1aff      	subs	r7, r7, r3
 8018480:	b2bf      	uxth	r7, r7
 8018482:	043b      	lsls	r3, r7, #16
 8018484:	d502      	bpl.n	801848c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018486:	1bf6      	subs	r6, r6, r7
 8018488:	2700      	movs	r7, #0
 801848a:	b236      	sxth	r6, r6
 801848c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018490:	a812      	add	r0, sp, #72	; 0x48
 8018492:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8018496:	428e      	cmp	r6, r1
 8018498:	b28b      	uxth	r3, r1
 801849a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801849e:	bfbf      	itttt	lt
 80184a0:	18ff      	addlt	r7, r7, r3
 80184a2:	1bbe      	sublt	r6, r7, r6
 80184a4:	b2b7      	uxthlt	r7, r6
 80184a6:	460e      	movlt	r6, r1
 80184a8:	8891      	ldrh	r1, [r2, #4]
 80184aa:	440b      	add	r3, r1
 80184ac:	4631      	mov	r1, r6
 80184ae:	b21b      	sxth	r3, r3
 80184b0:	9310      	str	r3, [sp, #64]	; 0x40
 80184b2:	88d3      	ldrh	r3, [r2, #6]
 80184b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80184b6:	449a      	add	sl, r3
 80184b8:	fa0f f38a 	sxth.w	r3, sl
 80184bc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80184c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80184c2:	4bb5      	ldr	r3, [pc, #724]	; (8018798 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80184c4:	f893 b000 	ldrb.w	fp, [r3]
 80184c8:	f10b 3cff 	add.w	ip, fp, #4294967295
 80184cc:	f1dc 0300 	rsbs	r3, ip, #0
 80184d0:	eb43 030c 	adc.w	r3, r3, ip
 80184d4:	930d      	str	r3, [sp, #52]	; 0x34
 80184d6:	464b      	mov	r3, r9
 80184d8:	f7f9 fce2 	bl	8011ea0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80184dc:	4631      	mov	r1, r6
 80184de:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80184e2:	464b      	mov	r3, r9
 80184e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80184e6:	a812      	add	r0, sp, #72	; 0x48
 80184e8:	f7f9 fcf7 	bl	8011eda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80184ec:	a916      	add	r1, sp, #88	; 0x58
 80184ee:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80184f2:	a815      	add	r0, sp, #84	; 0x54
 80184f4:	f7f9 fe18 	bl	8012128 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80184f8:	f1b9 0f00 	cmp.w	r9, #0
 80184fc:	f040 80d8 	bne.w	80186b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8018500:	f1bb 0f01 	cmp.w	fp, #1
 8018504:	f040 80dc 	bne.w	80186c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8018508:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801850a:	b153      	cbz	r3, 8018522 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801850c:	2508      	movs	r5, #8
 801850e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018510:	fb95 f3f8 	sdiv	r3, r5, r8
 8018514:	1e5d      	subs	r5, r3, #1
 8018516:	4415      	add	r5, r2
 8018518:	fb95 f5f3 	sdiv	r5, r5, r3
 801851c:	fb15 f503 	smulbb	r5, r5, r3
 8018520:	b2ad      	uxth	r5, r5
 8018522:	b907      	cbnz	r7, 8018526 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8018524:	b16c      	cbz	r4, 8018542 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8018526:	fb04 7305 	mla	r3, r4, r5, r7
 801852a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801852c:	ebaa 0a04 	sub.w	sl, sl, r4
 8018530:	fb08 f303 	mul.w	r3, r8, r3
 8018534:	fa1f fa8a 	uxth.w	sl, sl
 8018538:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801853c:	f003 0407 	and.w	r4, r3, #7
 8018540:	9226      	str	r2, [sp, #152]	; 0x98
 8018542:	4649      	mov	r1, r9
 8018544:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018546:	f7ff ff1b 	bl	8018380 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801854a:	4683      	mov	fp, r0
 801854c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801854e:	f7ff ff3d 	bl	80183cc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8018552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018556:	4681      	mov	r9, r0
 8018558:	1a9b      	subs	r3, r3, r2
 801855a:	459a      	cmp	sl, r3
 801855c:	bfa8      	it	ge
 801855e:	469a      	movge	sl, r3
 8018560:	f1ba 0f00 	cmp.w	sl, #0
 8018564:	f340 80f9 	ble.w	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018568:	1bf6      	subs	r6, r6, r7
 801856a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801856c:	1b9e      	subs	r6, r3, r6
 801856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018570:	429e      	cmp	r6, r3
 8018572:	bfd4      	ite	le
 8018574:	ebc7 0706 	rsble	r7, r7, r6
 8018578:	ebc7 0703 	rsbgt	r7, r7, r3
 801857c:	2f00      	cmp	r7, #0
 801857e:	f340 80ec 	ble.w	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018582:	1bed      	subs	r5, r5, r7
 8018584:	fb08 f305 	mul.w	r3, r8, r5
 8018588:	930d      	str	r3, [sp, #52]	; 0x34
 801858a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801858c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8018590:	930e      	str	r3, [sp, #56]	; 0x38
 8018592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018594:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018598:	930f      	str	r3, [sp, #60]	; 0x3c
 801859a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801859c:	b2db      	uxtb	r3, r3
 801859e:	9310      	str	r3, [sp, #64]	; 0x40
 80185a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	f040 80de 	bne.w	8018764 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80185a8:	4b7c      	ldr	r3, [pc, #496]	; (801879c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80185aa:	6818      	ldr	r0, [r3, #0]
 80185ac:	6803      	ldr	r3, [r0, #0]
 80185ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185b0:	4798      	blx	r3
 80185b2:	2301      	movs	r3, #1
 80185b4:	4a7a      	ldr	r2, [pc, #488]	; (80187a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80185b6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80185ba:	fb07 9b1b 	mls	fp, r7, fp, r9
 80185be:	fa03 f308 	lsl.w	r3, r3, r8
 80185c2:	8811      	ldrh	r1, [r2, #0]
 80185c4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80185c8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80185cc:	3b01      	subs	r3, #1
 80185ce:	fb06 bb07 	mla	fp, r6, r7, fp
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	930a      	str	r3, [sp, #40]	; 0x28
 80185d6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80185da:	fb01 2303 	mla	r3, r1, r3, r2
 80185de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185e2:	18c3      	adds	r3, r0, r3
 80185e4:	9309      	str	r3, [sp, #36]	; 0x24
 80185e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80185e8:	781a      	ldrb	r2, [r3, #0]
 80185ea:	4122      	asrs	r2, r4
 80185ec:	b2d2      	uxtb	r2, r2
 80185ee:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80185f2:	f0c0 80d7 	bcc.w	80187a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80185f6:	46be      	mov	lr, r7
 80185f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80185fa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80185fe:	f0c0 80ba 	bcc.w	8018776 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8018602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018604:	4013      	ands	r3, r2
 8018606:	d041      	beq.n	801868c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018608:	20ff      	movs	r0, #255	; 0xff
 801860a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801860c:	fb90 f5f5 	sdiv	r5, r0, r5
 8018610:	436b      	muls	r3, r5
 8018612:	2bfe      	cmp	r3, #254	; 0xfe
 8018614:	dd03      	ble.n	801861e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8018616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018618:	4285      	cmp	r5, r0
 801861a:	f000 80a5 	beq.w	8018768 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801861e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018620:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018622:	fb15 f303 	smulbb	r3, r5, r3
 8018626:	b29b      	uxth	r3, r3
 8018628:	1c5d      	adds	r5, r3, #1
 801862a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801862e:	780d      	ldrb	r5, [r1, #0]
 8018630:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018634:	fa1f fc83 	uxth.w	ip, r3
 8018638:	43db      	mvns	r3, r3
 801863a:	fb10 f90c 	smulbb	r9, r0, ip
 801863e:	b2db      	uxtb	r3, r3
 8018640:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018642:	fb05 9503 	mla	r5, r5, r3, r9
 8018646:	b2ad      	uxth	r5, r5
 8018648:	f105 0901 	add.w	r9, r5, #1
 801864c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8018650:	fb10 f90c 	smulbb	r9, r0, ip
 8018654:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018656:	122d      	asrs	r5, r5, #8
 8018658:	fb10 fc0c 	smulbb	ip, r0, ip
 801865c:	700d      	strb	r5, [r1, #0]
 801865e:	784d      	ldrb	r5, [r1, #1]
 8018660:	fb05 9503 	mla	r5, r5, r3, r9
 8018664:	b2ad      	uxth	r5, r5
 8018666:	f105 0901 	add.w	r9, r5, #1
 801866a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801866e:	122d      	asrs	r5, r5, #8
 8018670:	704d      	strb	r5, [r1, #1]
 8018672:	788d      	ldrb	r5, [r1, #2]
 8018674:	fb05 cc03 	mla	ip, r5, r3, ip
 8018678:	fa1f fc8c 	uxth.w	ip, ip
 801867c:	f10c 0301 	add.w	r3, ip, #1
 8018680:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8018684:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018688:	f881 c002 	strb.w	ip, [r1, #2]
 801868c:	4444      	add	r4, r8
 801868e:	4431      	add	r1, r6
 8018690:	b2a4      	uxth	r4, r4
 8018692:	2c07      	cmp	r4, #7
 8018694:	bf89      	itett	hi
 8018696:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8018698:	fa42 f208 	asrls.w	r2, r2, r8
 801869c:	2400      	movhi	r4, #0
 801869e:	785a      	ldrbhi	r2, [r3, #1]
 80186a0:	bf8a      	itet	hi
 80186a2:	3301      	addhi	r3, #1
 80186a4:	b2d2      	uxtbls	r2, r2
 80186a6:	9326      	strhi	r3, [sp, #152]	; 0x98
 80186a8:	e7a7      	b.n	80185fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80186aa:	441e      	add	r6, r3
 80186ac:	b236      	sxth	r6, r6
 80186ae:	e6ed      	b.n	801848c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80186b0:	f1b9 0f01 	cmp.w	r9, #1
 80186b4:	f47f af28 	bne.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80186b8:	f1bb 0f01 	cmp.w	fp, #1
 80186bc:	f47f af24 	bne.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80186c0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801879c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80186c4:	f8db 0000 	ldr.w	r0, [fp]
 80186c8:	6803      	ldr	r3, [r0, #0]
 80186ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80186cc:	4798      	blx	r3
 80186ce:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80186d2:	465a      	mov	r2, fp
 80186d4:	d006      	beq.n	80186e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80186d6:	f1b8 0f04 	cmp.w	r8, #4
 80186da:	d141      	bne.n	8018760 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 80186dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186de:	3300      	adds	r3, #0
 80186e0:	bf18      	it	ne
 80186e2:	2301      	movne	r3, #1
 80186e4:	0580      	lsls	r0, r0, #22
 80186e6:	d566      	bpl.n	80187b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80186e8:	f1b8 0f08 	cmp.w	r8, #8
 80186ec:	d163      	bne.n	80187b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	bf0c      	ite	eq
 80186f2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80186f6:	f44f 7180 	movne.w	r1, #256	; 0x100
 80186fa:	2f00      	cmp	r7, #0
 80186fc:	f47f af04 	bne.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018700:	2c00      	cmp	r4, #0
 8018702:	f47f af01 	bne.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018708:	9810      	ldr	r0, [sp, #64]	; 0x40
 801870a:	18f3      	adds	r3, r6, r3
 801870c:	4283      	cmp	r3, r0
 801870e:	f73f aefb 	bgt.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018712:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018716:	4403      	add	r3, r0
 8018718:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801871a:	4283      	cmp	r3, r0
 801871c:	f73f aef4 	bgt.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018720:	f1b8 0f08 	cmp.w	r8, #8
 8018724:	6810      	ldr	r0, [r2, #0]
 8018726:	f04f 0600 	mov.w	r6, #0
 801872a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801872e:	bf18      	it	ne
 8018730:	3501      	addne	r5, #1
 8018732:	6804      	ldr	r4, [r0, #0]
 8018734:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018738:	bf18      	it	ne
 801873a:	f025 0501 	bicne.w	r5, r5, #1
 801873e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8018742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018744:	bf18      	it	ne
 8018746:	b2ad      	uxthne	r5, r5
 8018748:	9104      	str	r1, [sp, #16]
 801874a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801874c:	e9cd 5a00 	strd	r5, sl, [sp]
 8018750:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018754:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018756:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018758:	47a0      	blx	r4
 801875a:	b017      	add	sp, #92	; 0x5c
 801875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018760:	2300      	movs	r3, #0
 8018762:	e7bf      	b.n	80186e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8018764:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018766:	e724      	b.n	80185b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8018768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801876a:	700b      	strb	r3, [r1, #0]
 801876c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801876e:	704b      	strb	r3, [r1, #1]
 8018770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018772:	708b      	strb	r3, [r1, #2]
 8018774:	e78a      	b.n	801868c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018778:	b153      	cbz	r3, 8018790 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801877a:	441c      	add	r4, r3
 801877c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801877e:	b2a4      	uxth	r4, r4
 8018780:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8018784:	f004 0407 	and.w	r4, r4, #7
 8018788:	781a      	ldrb	r2, [r3, #0]
 801878a:	9326      	str	r3, [sp, #152]	; 0x98
 801878c:	4122      	asrs	r2, r4
 801878e:	b2d2      	uxtb	r2, r2
 8018790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018792:	445b      	add	r3, fp
 8018794:	9309      	str	r3, [sp, #36]	; 0x24
 8018796:	e72a      	b.n	80185ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8018798:	2400f49c 	.word	0x2400f49c
 801879c:	2400f4a4 	.word	0x2400f4a4
 80187a0:	2400f49e 	.word	0x2400f49e
 80187a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d1d7      	bne.n	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80187aa:	4b06      	ldr	r3, [pc, #24]	; (80187c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80187ac:	6818      	ldr	r0, [r3, #0]
 80187ae:	6803      	ldr	r3, [r0, #0]
 80187b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187b2:	4798      	blx	r3
 80187b4:	e7d1      	b.n	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	f43f aea6 	beq.w	8018508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80187c0:	e79b      	b.n	80186fa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80187c2:	bf00      	nop
 80187c4:	2400f4a4 	.word	0x2400f4a4

080187c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80187c8:	b538      	push	{r3, r4, r5, lr}
 80187ca:	4c15      	ldr	r4, [pc, #84]	; (8018820 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80187cc:	4605      	mov	r5, r0
 80187ce:	7823      	ldrb	r3, [r4, #0]
 80187d0:	f3bf 8f5b 	dmb	ish
 80187d4:	07da      	lsls	r2, r3, #31
 80187d6:	d40b      	bmi.n	80187f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80187d8:	4620      	mov	r0, r4
 80187da:	f005 fbb2 	bl	801df42 <__cxa_guard_acquire>
 80187de:	b138      	cbz	r0, 80187f0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80187e0:	4620      	mov	r0, r4
 80187e2:	f005 fbba 	bl	801df5a <__cxa_guard_release>
 80187e6:	4a0f      	ldr	r2, [pc, #60]	; (8018824 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80187e8:	490f      	ldr	r1, [pc, #60]	; (8018828 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80187ea:	4810      	ldr	r0, [pc, #64]	; (801882c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80187ec:	f005 fba2 	bl	801df34 <__aeabi_atexit>
 80187f0:	4c0f      	ldr	r4, [pc, #60]	; (8018830 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80187f2:	7823      	ldrb	r3, [r4, #0]
 80187f4:	f3bf 8f5b 	dmb	ish
 80187f8:	07db      	lsls	r3, r3, #31
 80187fa:	d40b      	bmi.n	8018814 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80187fc:	4620      	mov	r0, r4
 80187fe:	f005 fba0 	bl	801df42 <__cxa_guard_acquire>
 8018802:	b138      	cbz	r0, 8018814 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018804:	4620      	mov	r0, r4
 8018806:	f005 fba8 	bl	801df5a <__cxa_guard_release>
 801880a:	4a06      	ldr	r2, [pc, #24]	; (8018824 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801880c:	4909      	ldr	r1, [pc, #36]	; (8018834 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801880e:	480a      	ldr	r0, [pc, #40]	; (8018838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018810:	f005 fb90 	bl	801df34 <__aeabi_atexit>
 8018814:	4b05      	ldr	r3, [pc, #20]	; (801882c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018816:	612b      	str	r3, [r5, #16]
 8018818:	4b07      	ldr	r3, [pc, #28]	; (8018838 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801881a:	616b      	str	r3, [r5, #20]
 801881c:	bd38      	pop	{r3, r4, r5, pc}
 801881e:	bf00      	nop
 8018820:	2400f578 	.word	0x2400f578
 8018824:	24000000 	.word	0x24000000
 8018828:	0801738d 	.word	0x0801738d
 801882c:	240000a4 	.word	0x240000a4
 8018830:	2400f57c 	.word	0x2400f57c
 8018834:	0801738b 	.word	0x0801738b
 8018838:	240000a8 	.word	0x240000a8

0801883c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801883c:	b538      	push	{r3, r4, r5, lr}
 801883e:	4c15      	ldr	r4, [pc, #84]	; (8018894 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018840:	4605      	mov	r5, r0
 8018842:	7823      	ldrb	r3, [r4, #0]
 8018844:	f3bf 8f5b 	dmb	ish
 8018848:	07da      	lsls	r2, r3, #31
 801884a:	d40b      	bmi.n	8018864 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801884c:	4620      	mov	r0, r4
 801884e:	f005 fb78 	bl	801df42 <__cxa_guard_acquire>
 8018852:	b138      	cbz	r0, 8018864 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018854:	4620      	mov	r0, r4
 8018856:	f005 fb80 	bl	801df5a <__cxa_guard_release>
 801885a:	4a0f      	ldr	r2, [pc, #60]	; (8018898 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801885c:	490f      	ldr	r1, [pc, #60]	; (801889c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801885e:	4810      	ldr	r0, [pc, #64]	; (80188a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018860:	f005 fb68 	bl	801df34 <__aeabi_atexit>
 8018864:	4c0f      	ldr	r4, [pc, #60]	; (80188a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018866:	7823      	ldrb	r3, [r4, #0]
 8018868:	f3bf 8f5b 	dmb	ish
 801886c:	07db      	lsls	r3, r3, #31
 801886e:	d40b      	bmi.n	8018888 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018870:	4620      	mov	r0, r4
 8018872:	f005 fb66 	bl	801df42 <__cxa_guard_acquire>
 8018876:	b138      	cbz	r0, 8018888 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018878:	4620      	mov	r0, r4
 801887a:	f005 fb6e 	bl	801df5a <__cxa_guard_release>
 801887e:	4a06      	ldr	r2, [pc, #24]	; (8018898 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018880:	4909      	ldr	r1, [pc, #36]	; (80188a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018882:	480a      	ldr	r0, [pc, #40]	; (80188ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018884:	f005 fb56 	bl	801df34 <__aeabi_atexit>
 8018888:	4b05      	ldr	r3, [pc, #20]	; (80188a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801888a:	60ab      	str	r3, [r5, #8]
 801888c:	4b07      	ldr	r3, [pc, #28]	; (80188ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801888e:	60eb      	str	r3, [r5, #12]
 8018890:	bd38      	pop	{r3, r4, r5, pc}
 8018892:	bf00      	nop
 8018894:	2400f558 	.word	0x2400f558
 8018898:	24000000 	.word	0x24000000
 801889c:	08017391 	.word	0x08017391
 80188a0:	24000084 	.word	0x24000084
 80188a4:	2400f55c 	.word	0x2400f55c
 80188a8:	0801738f 	.word	0x0801738f
 80188ac:	24000088 	.word	0x24000088

080188b0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80188b0:	b510      	push	{r4, lr}
 80188b2:	4604      	mov	r4, r0
 80188b4:	f7ff ff88 	bl	80187c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80188b8:	4620      	mov	r0, r4
 80188ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188be:	f7ff bfbd 	b.w	801883c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080188c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80188c4:	b538      	push	{r3, r4, r5, lr}
 80188c6:	4c15      	ldr	r4, [pc, #84]	; (801891c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80188c8:	4605      	mov	r5, r0
 80188ca:	7823      	ldrb	r3, [r4, #0]
 80188cc:	f3bf 8f5b 	dmb	ish
 80188d0:	07da      	lsls	r2, r3, #31
 80188d2:	d40b      	bmi.n	80188ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80188d4:	4620      	mov	r0, r4
 80188d6:	f005 fb34 	bl	801df42 <__cxa_guard_acquire>
 80188da:	b138      	cbz	r0, 80188ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80188dc:	4620      	mov	r0, r4
 80188de:	f005 fb3c 	bl	801df5a <__cxa_guard_release>
 80188e2:	4a0f      	ldr	r2, [pc, #60]	; (8018920 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80188e4:	490f      	ldr	r1, [pc, #60]	; (8018924 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80188e6:	4810      	ldr	r0, [pc, #64]	; (8018928 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80188e8:	f005 fb24 	bl	801df34 <__aeabi_atexit>
 80188ec:	4c0f      	ldr	r4, [pc, #60]	; (801892c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80188ee:	7823      	ldrb	r3, [r4, #0]
 80188f0:	f3bf 8f5b 	dmb	ish
 80188f4:	07db      	lsls	r3, r3, #31
 80188f6:	d40b      	bmi.n	8018910 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80188f8:	4620      	mov	r0, r4
 80188fa:	f005 fb22 	bl	801df42 <__cxa_guard_acquire>
 80188fe:	b138      	cbz	r0, 8018910 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018900:	4620      	mov	r0, r4
 8018902:	f005 fb2a 	bl	801df5a <__cxa_guard_release>
 8018906:	4a06      	ldr	r2, [pc, #24]	; (8018920 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018908:	4909      	ldr	r1, [pc, #36]	; (8018930 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801890a:	480a      	ldr	r0, [pc, #40]	; (8018934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801890c:	f005 fb12 	bl	801df34 <__aeabi_atexit>
 8018910:	4b05      	ldr	r3, [pc, #20]	; (8018928 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018912:	622b      	str	r3, [r5, #32]
 8018914:	4b07      	ldr	r3, [pc, #28]	; (8018934 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018916:	626b      	str	r3, [r5, #36]	; 0x24
 8018918:	bd38      	pop	{r3, r4, r5, pc}
 801891a:	bf00      	nop
 801891c:	2400f580 	.word	0x2400f580
 8018920:	24000000 	.word	0x24000000
 8018924:	08017385 	.word	0x08017385
 8018928:	240000ac 	.word	0x240000ac
 801892c:	2400f584 	.word	0x2400f584
 8018930:	08017383 	.word	0x08017383
 8018934:	240000b0 	.word	0x240000b0

08018938 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018938:	b538      	push	{r3, r4, r5, lr}
 801893a:	4c15      	ldr	r4, [pc, #84]	; (8018990 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801893c:	4605      	mov	r5, r0
 801893e:	7823      	ldrb	r3, [r4, #0]
 8018940:	f3bf 8f5b 	dmb	ish
 8018944:	07da      	lsls	r2, r3, #31
 8018946:	d40b      	bmi.n	8018960 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018948:	4620      	mov	r0, r4
 801894a:	f005 fafa 	bl	801df42 <__cxa_guard_acquire>
 801894e:	b138      	cbz	r0, 8018960 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018950:	4620      	mov	r0, r4
 8018952:	f005 fb02 	bl	801df5a <__cxa_guard_release>
 8018956:	4a0f      	ldr	r2, [pc, #60]	; (8018994 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018958:	490f      	ldr	r1, [pc, #60]	; (8018998 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801895a:	4810      	ldr	r0, [pc, #64]	; (801899c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801895c:	f005 faea 	bl	801df34 <__aeabi_atexit>
 8018960:	4c0f      	ldr	r4, [pc, #60]	; (80189a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018962:	7823      	ldrb	r3, [r4, #0]
 8018964:	f3bf 8f5b 	dmb	ish
 8018968:	07db      	lsls	r3, r3, #31
 801896a:	d40b      	bmi.n	8018984 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801896c:	4620      	mov	r0, r4
 801896e:	f005 fae8 	bl	801df42 <__cxa_guard_acquire>
 8018972:	b138      	cbz	r0, 8018984 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018974:	4620      	mov	r0, r4
 8018976:	f005 faf0 	bl	801df5a <__cxa_guard_release>
 801897a:	4a06      	ldr	r2, [pc, #24]	; (8018994 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801897c:	4909      	ldr	r1, [pc, #36]	; (80189a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801897e:	480a      	ldr	r0, [pc, #40]	; (80189a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018980:	f005 fad8 	bl	801df34 <__aeabi_atexit>
 8018984:	4b05      	ldr	r3, [pc, #20]	; (801899c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018986:	61ab      	str	r3, [r5, #24]
 8018988:	4b07      	ldr	r3, [pc, #28]	; (80189a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801898a:	61eb      	str	r3, [r5, #28]
 801898c:	bd38      	pop	{r3, r4, r5, pc}
 801898e:	bf00      	nop
 8018990:	2400f560 	.word	0x2400f560
 8018994:	24000000 	.word	0x24000000
 8018998:	08017389 	.word	0x08017389
 801899c:	2400008c 	.word	0x2400008c
 80189a0:	2400f564 	.word	0x2400f564
 80189a4:	08017387 	.word	0x08017387
 80189a8:	24000090 	.word	0x24000090

080189ac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80189ac:	b510      	push	{r4, lr}
 80189ae:	4604      	mov	r4, r0
 80189b0:	f7ff ff88 	bl	80188c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80189b4:	4620      	mov	r0, r4
 80189b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189ba:	f7ff bfbd 	b.w	8018938 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080189c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80189c0:	b538      	push	{r3, r4, r5, lr}
 80189c2:	4c15      	ldr	r4, [pc, #84]	; (8018a18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80189c4:	4605      	mov	r5, r0
 80189c6:	7823      	ldrb	r3, [r4, #0]
 80189c8:	f3bf 8f5b 	dmb	ish
 80189cc:	07da      	lsls	r2, r3, #31
 80189ce:	d40b      	bmi.n	80189e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80189d0:	4620      	mov	r0, r4
 80189d2:	f005 fab6 	bl	801df42 <__cxa_guard_acquire>
 80189d6:	b138      	cbz	r0, 80189e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80189d8:	4620      	mov	r0, r4
 80189da:	f005 fabe 	bl	801df5a <__cxa_guard_release>
 80189de:	4a0f      	ldr	r2, [pc, #60]	; (8018a1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80189e0:	490f      	ldr	r1, [pc, #60]	; (8018a20 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80189e2:	4810      	ldr	r0, [pc, #64]	; (8018a24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80189e4:	f005 faa6 	bl	801df34 <__aeabi_atexit>
 80189e8:	4c0f      	ldr	r4, [pc, #60]	; (8018a28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80189ea:	7823      	ldrb	r3, [r4, #0]
 80189ec:	f3bf 8f5b 	dmb	ish
 80189f0:	07db      	lsls	r3, r3, #31
 80189f2:	d40b      	bmi.n	8018a0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80189f4:	4620      	mov	r0, r4
 80189f6:	f005 faa4 	bl	801df42 <__cxa_guard_acquire>
 80189fa:	b138      	cbz	r0, 8018a0c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80189fc:	4620      	mov	r0, r4
 80189fe:	f005 faac 	bl	801df5a <__cxa_guard_release>
 8018a02:	4a06      	ldr	r2, [pc, #24]	; (8018a1c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018a04:	4909      	ldr	r1, [pc, #36]	; (8018a2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018a06:	480a      	ldr	r0, [pc, #40]	; (8018a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018a08:	f005 fa94 	bl	801df34 <__aeabi_atexit>
 8018a0c:	4b05      	ldr	r3, [pc, #20]	; (8018a24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018a0e:	632b      	str	r3, [r5, #48]	; 0x30
 8018a10:	4b07      	ldr	r3, [pc, #28]	; (8018a30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018a12:	636b      	str	r3, [r5, #52]	; 0x34
 8018a14:	bd38      	pop	{r3, r4, r5, pc}
 8018a16:	bf00      	nop
 8018a18:	2400f568 	.word	0x2400f568
 8018a1c:	24000000 	.word	0x24000000
 8018a20:	0801737d 	.word	0x0801737d
 8018a24:	24000094 	.word	0x24000094
 8018a28:	2400f56c 	.word	0x2400f56c
 8018a2c:	0801737b 	.word	0x0801737b
 8018a30:	24000098 	.word	0x24000098

08018a34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018a34:	b538      	push	{r3, r4, r5, lr}
 8018a36:	4c15      	ldr	r4, [pc, #84]	; (8018a8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018a38:	4605      	mov	r5, r0
 8018a3a:	7823      	ldrb	r3, [r4, #0]
 8018a3c:	f3bf 8f5b 	dmb	ish
 8018a40:	07da      	lsls	r2, r3, #31
 8018a42:	d40b      	bmi.n	8018a5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018a44:	4620      	mov	r0, r4
 8018a46:	f005 fa7c 	bl	801df42 <__cxa_guard_acquire>
 8018a4a:	b138      	cbz	r0, 8018a5c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018a4c:	4620      	mov	r0, r4
 8018a4e:	f005 fa84 	bl	801df5a <__cxa_guard_release>
 8018a52:	4a0f      	ldr	r2, [pc, #60]	; (8018a90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018a54:	490f      	ldr	r1, [pc, #60]	; (8018a94 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018a56:	4810      	ldr	r0, [pc, #64]	; (8018a98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018a58:	f005 fa6c 	bl	801df34 <__aeabi_atexit>
 8018a5c:	4c0f      	ldr	r4, [pc, #60]	; (8018a9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018a5e:	7823      	ldrb	r3, [r4, #0]
 8018a60:	f3bf 8f5b 	dmb	ish
 8018a64:	07db      	lsls	r3, r3, #31
 8018a66:	d40b      	bmi.n	8018a80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018a68:	4620      	mov	r0, r4
 8018a6a:	f005 fa6a 	bl	801df42 <__cxa_guard_acquire>
 8018a6e:	b138      	cbz	r0, 8018a80 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018a70:	4620      	mov	r0, r4
 8018a72:	f005 fa72 	bl	801df5a <__cxa_guard_release>
 8018a76:	4a06      	ldr	r2, [pc, #24]	; (8018a90 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018a78:	4909      	ldr	r1, [pc, #36]	; (8018aa0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018a7a:	480a      	ldr	r0, [pc, #40]	; (8018aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018a7c:	f005 fa5a 	bl	801df34 <__aeabi_atexit>
 8018a80:	4b05      	ldr	r3, [pc, #20]	; (8018a98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018a82:	62ab      	str	r3, [r5, #40]	; 0x28
 8018a84:	4b07      	ldr	r3, [pc, #28]	; (8018aa4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018a86:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018a88:	bd38      	pop	{r3, r4, r5, pc}
 8018a8a:	bf00      	nop
 8018a8c:	2400f540 	.word	0x2400f540
 8018a90:	24000000 	.word	0x24000000
 8018a94:	08017381 	.word	0x08017381
 8018a98:	2400006c 	.word	0x2400006c
 8018a9c:	2400f544 	.word	0x2400f544
 8018aa0:	0801737f 	.word	0x0801737f
 8018aa4:	24000070 	.word	0x24000070

08018aa8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018aa8:	b510      	push	{r4, lr}
 8018aaa:	4604      	mov	r4, r0
 8018aac:	f7ff ff88 	bl	80189c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ab6:	f7ff bfbd 	b.w	8018a34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018abc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018abc:	b538      	push	{r3, r4, r5, lr}
 8018abe:	4c15      	ldr	r4, [pc, #84]	; (8018b14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018ac0:	4605      	mov	r5, r0
 8018ac2:	7823      	ldrb	r3, [r4, #0]
 8018ac4:	f3bf 8f5b 	dmb	ish
 8018ac8:	07da      	lsls	r2, r3, #31
 8018aca:	d40b      	bmi.n	8018ae4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018acc:	4620      	mov	r0, r4
 8018ace:	f005 fa38 	bl	801df42 <__cxa_guard_acquire>
 8018ad2:	b138      	cbz	r0, 8018ae4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	f005 fa40 	bl	801df5a <__cxa_guard_release>
 8018ada:	4a0f      	ldr	r2, [pc, #60]	; (8018b18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018adc:	490f      	ldr	r1, [pc, #60]	; (8018b1c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018ade:	4810      	ldr	r0, [pc, #64]	; (8018b20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018ae0:	f005 fa28 	bl	801df34 <__aeabi_atexit>
 8018ae4:	4c0f      	ldr	r4, [pc, #60]	; (8018b24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018ae6:	7823      	ldrb	r3, [r4, #0]
 8018ae8:	f3bf 8f5b 	dmb	ish
 8018aec:	07db      	lsls	r3, r3, #31
 8018aee:	d40b      	bmi.n	8018b08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018af0:	4620      	mov	r0, r4
 8018af2:	f005 fa26 	bl	801df42 <__cxa_guard_acquire>
 8018af6:	b138      	cbz	r0, 8018b08 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018af8:	4620      	mov	r0, r4
 8018afa:	f005 fa2e 	bl	801df5a <__cxa_guard_release>
 8018afe:	4a06      	ldr	r2, [pc, #24]	; (8018b18 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018b00:	4909      	ldr	r1, [pc, #36]	; (8018b28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018b02:	480a      	ldr	r0, [pc, #40]	; (8018b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018b04:	f005 fa16 	bl	801df34 <__aeabi_atexit>
 8018b08:	4b05      	ldr	r3, [pc, #20]	; (8018b20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018b0a:	642b      	str	r3, [r5, #64]	; 0x40
 8018b0c:	4b07      	ldr	r3, [pc, #28]	; (8018b2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018b0e:	646b      	str	r3, [r5, #68]	; 0x44
 8018b10:	bd38      	pop	{r3, r4, r5, pc}
 8018b12:	bf00      	nop
 8018b14:	2400f570 	.word	0x2400f570
 8018b18:	24000000 	.word	0x24000000
 8018b1c:	08017375 	.word	0x08017375
 8018b20:	2400009c 	.word	0x2400009c
 8018b24:	2400f574 	.word	0x2400f574
 8018b28:	08017373 	.word	0x08017373
 8018b2c:	240000a0 	.word	0x240000a0

08018b30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018b30:	b538      	push	{r3, r4, r5, lr}
 8018b32:	4c15      	ldr	r4, [pc, #84]	; (8018b88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018b34:	4605      	mov	r5, r0
 8018b36:	7823      	ldrb	r3, [r4, #0]
 8018b38:	f3bf 8f5b 	dmb	ish
 8018b3c:	07da      	lsls	r2, r3, #31
 8018b3e:	d40b      	bmi.n	8018b58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018b40:	4620      	mov	r0, r4
 8018b42:	f005 f9fe 	bl	801df42 <__cxa_guard_acquire>
 8018b46:	b138      	cbz	r0, 8018b58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018b48:	4620      	mov	r0, r4
 8018b4a:	f005 fa06 	bl	801df5a <__cxa_guard_release>
 8018b4e:	4a0f      	ldr	r2, [pc, #60]	; (8018b8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018b50:	490f      	ldr	r1, [pc, #60]	; (8018b90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018b52:	4810      	ldr	r0, [pc, #64]	; (8018b94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018b54:	f005 f9ee 	bl	801df34 <__aeabi_atexit>
 8018b58:	4c0f      	ldr	r4, [pc, #60]	; (8018b98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018b5a:	7823      	ldrb	r3, [r4, #0]
 8018b5c:	f3bf 8f5b 	dmb	ish
 8018b60:	07db      	lsls	r3, r3, #31
 8018b62:	d40b      	bmi.n	8018b7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018b64:	4620      	mov	r0, r4
 8018b66:	f005 f9ec 	bl	801df42 <__cxa_guard_acquire>
 8018b6a:	b138      	cbz	r0, 8018b7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	f005 f9f4 	bl	801df5a <__cxa_guard_release>
 8018b72:	4a06      	ldr	r2, [pc, #24]	; (8018b8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018b74:	4909      	ldr	r1, [pc, #36]	; (8018b9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018b76:	480a      	ldr	r0, [pc, #40]	; (8018ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018b78:	f005 f9dc 	bl	801df34 <__aeabi_atexit>
 8018b7c:	4b05      	ldr	r3, [pc, #20]	; (8018b94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018b7e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018b80:	4b07      	ldr	r3, [pc, #28]	; (8018ba0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018b82:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018b84:	bd38      	pop	{r3, r4, r5, pc}
 8018b86:	bf00      	nop
 8018b88:	2400f550 	.word	0x2400f550
 8018b8c:	24000000 	.word	0x24000000
 8018b90:	08017379 	.word	0x08017379
 8018b94:	2400007c 	.word	0x2400007c
 8018b98:	2400f554 	.word	0x2400f554
 8018b9c:	08017377 	.word	0x08017377
 8018ba0:	24000080 	.word	0x24000080

08018ba4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018ba4:	b510      	push	{r4, lr}
 8018ba6:	4604      	mov	r4, r0
 8018ba8:	f7ff ff88 	bl	8018abc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018bac:	4620      	mov	r0, r4
 8018bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bb2:	f7ff bfbd 	b.w	8018b30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018bb8:	b538      	push	{r3, r4, r5, lr}
 8018bba:	4c15      	ldr	r4, [pc, #84]	; (8018c10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018bbc:	4605      	mov	r5, r0
 8018bbe:	7823      	ldrb	r3, [r4, #0]
 8018bc0:	f3bf 8f5b 	dmb	ish
 8018bc4:	07da      	lsls	r2, r3, #31
 8018bc6:	d40b      	bmi.n	8018be0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f005 f9ba 	bl	801df42 <__cxa_guard_acquire>
 8018bce:	b138      	cbz	r0, 8018be0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018bd0:	4620      	mov	r0, r4
 8018bd2:	f005 f9c2 	bl	801df5a <__cxa_guard_release>
 8018bd6:	4a0f      	ldr	r2, [pc, #60]	; (8018c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018bd8:	490f      	ldr	r1, [pc, #60]	; (8018c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018bda:	4810      	ldr	r0, [pc, #64]	; (8018c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018bdc:	f005 f9aa 	bl	801df34 <__aeabi_atexit>
 8018be0:	4c0f      	ldr	r4, [pc, #60]	; (8018c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018be2:	7823      	ldrb	r3, [r4, #0]
 8018be4:	f3bf 8f5b 	dmb	ish
 8018be8:	07db      	lsls	r3, r3, #31
 8018bea:	d40b      	bmi.n	8018c04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018bec:	4620      	mov	r0, r4
 8018bee:	f005 f9a8 	bl	801df42 <__cxa_guard_acquire>
 8018bf2:	b138      	cbz	r0, 8018c04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	f005 f9b0 	bl	801df5a <__cxa_guard_release>
 8018bfa:	4a06      	ldr	r2, [pc, #24]	; (8018c14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018bfc:	4909      	ldr	r1, [pc, #36]	; (8018c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018bfe:	480a      	ldr	r0, [pc, #40]	; (8018c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018c00:	f005 f998 	bl	801df34 <__aeabi_atexit>
 8018c04:	4b05      	ldr	r3, [pc, #20]	; (8018c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018c06:	652b      	str	r3, [r5, #80]	; 0x50
 8018c08:	4b07      	ldr	r3, [pc, #28]	; (8018c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018c0a:	656b      	str	r3, [r5, #84]	; 0x54
 8018c0c:	bd38      	pop	{r3, r4, r5, pc}
 8018c0e:	bf00      	nop
 8018c10:	2400f548 	.word	0x2400f548
 8018c14:	24000000 	.word	0x24000000
 8018c18:	0801736d 	.word	0x0801736d
 8018c1c:	24000074 	.word	0x24000074
 8018c20:	2400f54c 	.word	0x2400f54c
 8018c24:	0801736b 	.word	0x0801736b
 8018c28:	24000078 	.word	0x24000078

08018c2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018c2c:	b538      	push	{r3, r4, r5, lr}
 8018c2e:	4c15      	ldr	r4, [pc, #84]	; (8018c84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018c30:	4605      	mov	r5, r0
 8018c32:	7823      	ldrb	r3, [r4, #0]
 8018c34:	f3bf 8f5b 	dmb	ish
 8018c38:	07da      	lsls	r2, r3, #31
 8018c3a:	d40b      	bmi.n	8018c54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f005 f980 	bl	801df42 <__cxa_guard_acquire>
 8018c42:	b138      	cbz	r0, 8018c54 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018c44:	4620      	mov	r0, r4
 8018c46:	f005 f988 	bl	801df5a <__cxa_guard_release>
 8018c4a:	4a0f      	ldr	r2, [pc, #60]	; (8018c88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018c4c:	490f      	ldr	r1, [pc, #60]	; (8018c8c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018c4e:	4810      	ldr	r0, [pc, #64]	; (8018c90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018c50:	f005 f970 	bl	801df34 <__aeabi_atexit>
 8018c54:	4c0f      	ldr	r4, [pc, #60]	; (8018c94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018c56:	7823      	ldrb	r3, [r4, #0]
 8018c58:	f3bf 8f5b 	dmb	ish
 8018c5c:	07db      	lsls	r3, r3, #31
 8018c5e:	d40b      	bmi.n	8018c78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018c60:	4620      	mov	r0, r4
 8018c62:	f005 f96e 	bl	801df42 <__cxa_guard_acquire>
 8018c66:	b138      	cbz	r0, 8018c78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018c68:	4620      	mov	r0, r4
 8018c6a:	f005 f976 	bl	801df5a <__cxa_guard_release>
 8018c6e:	4a06      	ldr	r2, [pc, #24]	; (8018c88 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018c70:	4909      	ldr	r1, [pc, #36]	; (8018c98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018c72:	480a      	ldr	r0, [pc, #40]	; (8018c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018c74:	f005 f95e 	bl	801df34 <__aeabi_atexit>
 8018c78:	4b05      	ldr	r3, [pc, #20]	; (8018c90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018c7a:	64ab      	str	r3, [r5, #72]	; 0x48
 8018c7c:	4b07      	ldr	r3, [pc, #28]	; (8018c9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018c7e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018c80:	bd38      	pop	{r3, r4, r5, pc}
 8018c82:	bf00      	nop
 8018c84:	2400f538 	.word	0x2400f538
 8018c88:	24000000 	.word	0x24000000
 8018c8c:	08017371 	.word	0x08017371
 8018c90:	24000064 	.word	0x24000064
 8018c94:	2400f53c 	.word	0x2400f53c
 8018c98:	0801736f 	.word	0x0801736f
 8018c9c:	24000068 	.word	0x24000068

08018ca0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018ca0:	b510      	push	{r4, lr}
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	f7ff ff88 	bl	8018bb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018ca8:	4620      	mov	r0, r4
 8018caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cae:	f7ff bfbd 	b.w	8018c2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018cb2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018cb2:	b510      	push	{r4, lr}
 8018cb4:	4604      	mov	r4, r0
 8018cb6:	f7ff fff3 	bl	8018ca0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018cba:	4620      	mov	r0, r4
 8018cbc:	f7ff ff72 	bl	8018ba4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f7ff fe73 	bl	80189ac <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018cc6:	4620      	mov	r0, r4
 8018cc8:	f7ff fdf2 	bl	80188b0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018ccc:	4620      	mov	r0, r4
 8018cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cd2:	f7ff bee9 	b.w	8018aa8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08018cd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018cd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cda:	b087      	sub	sp, #28
 8018cdc:	788d      	ldrb	r5, [r1, #2]
 8018cde:	f891 9000 	ldrb.w	r9, [r1]
 8018ce2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8018ce6:	9501      	str	r5, [sp, #4]
 8018ce8:	784d      	ldrb	r5, [r1, #1]
 8018cea:	9203      	str	r2, [sp, #12]
 8018cec:	9502      	str	r5, [sp, #8]
 8018cee:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8018cf2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8018cf6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018cfa:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8018cfe:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8018d02:	fb06 0708 	mla	r7, r6, r8, r0
 8018d06:	2e00      	cmp	r6, #0
 8018d08:	eb02 0a07 	add.w	sl, r2, r7
 8018d0c:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018d10:	9d01      	ldr	r5, [sp, #4]
 8018d12:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018d16:	ea45 0509 	orr.w	r5, r5, r9
 8018d1a:	9505      	str	r5, [sp, #20]
 8018d1c:	f2c0 80b2 	blt.w	8018e84 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018d20:	45b3      	cmp	fp, r6
 8018d22:	f340 80af 	ble.w	8018e84 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018d26:	2800      	cmp	r0, #0
 8018d28:	f2c0 80aa 	blt.w	8018e80 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018d2c:	4580      	cmp	r8, r0
 8018d2e:	f340 80a7 	ble.w	8018e80 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018d32:	9a03      	ldr	r2, [sp, #12]
 8018d34:	5dd7      	ldrb	r7, [r2, r7]
 8018d36:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018d3a:	441f      	add	r7, r3
 8018d3c:	1c42      	adds	r2, r0, #1
 8018d3e:	f100 80a4 	bmi.w	8018e8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018d42:	4590      	cmp	r8, r2
 8018d44:	f340 80a1 	ble.w	8018e8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018d48:	2c00      	cmp	r4, #0
 8018d4a:	f000 809e 	beq.w	8018e8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018d4e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018d52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d56:	441d      	add	r5, r3
 8018d58:	3601      	adds	r6, #1
 8018d5a:	f100 809a 	bmi.w	8018e92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018d5e:	45b3      	cmp	fp, r6
 8018d60:	f340 8097 	ble.w	8018e92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018d64:	f1bc 0f00 	cmp.w	ip, #0
 8018d68:	f000 8093 	beq.w	8018e92 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	f2c0 808e 	blt.w	8018e8e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018d72:	4580      	cmp	r8, r0
 8018d74:	f340 808b 	ble.w	8018e8e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018d78:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8018d7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018d80:	441e      	add	r6, r3
 8018d82:	3001      	adds	r0, #1
 8018d84:	f100 8088 	bmi.w	8018e98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018d88:	4580      	cmp	r8, r0
 8018d8a:	f340 8085 	ble.w	8018e98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018d8e:	2c00      	cmp	r4, #0
 8018d90:	f000 8082 	beq.w	8018e98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018d94:	44d0      	add	r8, sl
 8018d96:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018d9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d9e:	4413      	add	r3, r2
 8018da0:	b2a4      	uxth	r4, r4
 8018da2:	f895 a000 	ldrb.w	sl, [r5]
 8018da6:	fa1f fc8c 	uxth.w	ip, ip
 8018daa:	fb04 fb0c 	mul.w	fp, r4, ip
 8018dae:	0124      	lsls	r4, r4, #4
 8018db0:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8018db4:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8018db8:	eba4 040b 	sub.w	r4, r4, fp
 8018dbc:	fa1f f08c 	uxth.w	r0, ip
 8018dc0:	b2a2      	uxth	r2, r4
 8018dc2:	783c      	ldrb	r4, [r7, #0]
 8018dc4:	eba8 0800 	sub.w	r8, r8, r0
 8018dc8:	fa1f fc8e 	uxth.w	ip, lr
 8018dcc:	fb02 fa0a 	mul.w	sl, r2, sl
 8018dd0:	ea6f 0e0e 	mvn.w	lr, lr
 8018dd4:	fa1f f888 	uxth.w	r8, r8
 8018dd8:	fa5f fe8e 	uxtb.w	lr, lr
 8018ddc:	fb08 aa04 	mla	sl, r8, r4, sl
 8018de0:	7834      	ldrb	r4, [r6, #0]
 8018de2:	fb19 f90e 	smulbb	r9, r9, lr
 8018de6:	fb00 aa04 	mla	sl, r0, r4, sl
 8018dea:	781c      	ldrb	r4, [r3, #0]
 8018dec:	fb0b a404 	mla	r4, fp, r4, sl
 8018df0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018df4:	fb04 990c 	mla	r9, r4, ip, r9
 8018df8:	fa1f f989 	uxth.w	r9, r9
 8018dfc:	f109 0401 	add.w	r4, r9, #1
 8018e00:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8018e04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018e08:	f881 9000 	strb.w	r9, [r1]
 8018e0c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018e10:	787c      	ldrb	r4, [r7, #1]
 8018e12:	fb02 f909 	mul.w	r9, r2, r9
 8018e16:	fb08 9904 	mla	r9, r8, r4, r9
 8018e1a:	7874      	ldrb	r4, [r6, #1]
 8018e1c:	fb00 9904 	mla	r9, r0, r4, r9
 8018e20:	785c      	ldrb	r4, [r3, #1]
 8018e22:	fb0b 9404 	mla	r4, fp, r4, r9
 8018e26:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8018e2a:	9c02      	ldr	r4, [sp, #8]
 8018e2c:	fb14 f90e 	smulbb	r9, r4, lr
 8018e30:	fb0a 940c 	mla	r4, sl, ip, r9
 8018e34:	b2a4      	uxth	r4, r4
 8018e36:	f104 0901 	add.w	r9, r4, #1
 8018e3a:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8018e3e:	1224      	asrs	r4, r4, #8
 8018e40:	704c      	strb	r4, [r1, #1]
 8018e42:	78ad      	ldrb	r5, [r5, #2]
 8018e44:	78bc      	ldrb	r4, [r7, #2]
 8018e46:	436a      	muls	r2, r5
 8018e48:	789b      	ldrb	r3, [r3, #2]
 8018e4a:	fb08 2204 	mla	r2, r8, r4, r2
 8018e4e:	78b4      	ldrb	r4, [r6, #2]
 8018e50:	fb00 2004 	mla	r0, r0, r4, r2
 8018e54:	fb0b 0b03 	mla	fp, fp, r3, r0
 8018e58:	9b01      	ldr	r3, [sp, #4]
 8018e5a:	fb13 fe0e 	smulbb	lr, r3, lr
 8018e5e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8018e62:	fb0b ec0c 	mla	ip, fp, ip, lr
 8018e66:	fa1f fc8c 	uxth.w	ip, ip
 8018e6a:	f10c 0e01 	add.w	lr, ip, #1
 8018e6e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8018e72:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018e76:	f881 c002 	strb.w	ip, [r1, #2]
 8018e7a:	b007      	add	sp, #28
 8018e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e80:	af05      	add	r7, sp, #20
 8018e82:	e75b      	b.n	8018d3c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8018e84:	ad05      	add	r5, sp, #20
 8018e86:	462f      	mov	r7, r5
 8018e88:	e766      	b.n	8018d58 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018e8a:	ad05      	add	r5, sp, #20
 8018e8c:	e764      	b.n	8018d58 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018e8e:	ae05      	add	r6, sp, #20
 8018e90:	e777      	b.n	8018d82 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8018e92:	ab05      	add	r3, sp, #20
 8018e94:	461e      	mov	r6, r3
 8018e96:	e783      	b.n	8018da0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8018e98:	ab05      	add	r3, sp, #20
 8018e9a:	e781      	b.n	8018da0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08018e9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ea0:	b093      	sub	sp, #76	; 0x4c
 8018ea2:	9210      	str	r2, [sp, #64]	; 0x40
 8018ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8018ea6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018ea8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8018eac:	9011      	str	r0, [sp, #68]	; 0x44
 8018eae:	930e      	str	r3, [sp, #56]	; 0x38
 8018eb0:	6850      	ldr	r0, [r2, #4]
 8018eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8018eb4:	6812      	ldr	r2, [r2, #0]
 8018eb6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8018eba:	fb00 1303 	mla	r3, r0, r3, r1
 8018ebe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018ec2:	18d3      	adds	r3, r2, r3
 8018ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8018ec6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	930c      	str	r3, [sp, #48]	; 0x30
 8018ecc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018ece:	685c      	ldr	r4, [r3, #4]
 8018ed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ed2:	3404      	adds	r4, #4
 8018ed4:	43db      	mvns	r3, r3
 8018ed6:	b2db      	uxtb	r3, r3
 8018ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	dc03      	bgt.n	8018ee8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	f340 8250 	ble.w	8019388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8018ee8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018eea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018eee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018ef2:	1e48      	subs	r0, r1, #1
 8018ef4:	1e55      	subs	r5, r2, #1
 8018ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f340 80ee 	ble.w	80190da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018efe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018f00:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018f02:	1436      	asrs	r6, r6, #16
 8018f04:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018f08:	d406      	bmi.n	8018f18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018f0a:	4286      	cmp	r6, r0
 8018f0c:	da04      	bge.n	8018f18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	db02      	blt.n	8018f18 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018f12:	42ab      	cmp	r3, r5
 8018f14:	f2c0 80e2 	blt.w	80190dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8018f18:	3601      	adds	r6, #1
 8018f1a:	f100 80cf 	bmi.w	80190bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018f1e:	42b1      	cmp	r1, r6
 8018f20:	f2c0 80cc 	blt.w	80190bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018f24:	3301      	adds	r3, #1
 8018f26:	f100 80c9 	bmi.w	80190bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018f2a:	429a      	cmp	r2, r3
 8018f2c:	f2c0 80c6 	blt.w	80190bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018f30:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8018f34:	f1bb 0f00 	cmp.w	fp, #0
 8018f38:	f340 80f1 	ble.w	801911e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8018f3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018f3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018f40:	9824      	ldr	r0, [sp, #144]	; 0x90
 8018f42:	141d      	asrs	r5, r3, #16
 8018f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018f46:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018f4a:	68c7      	ldr	r7, [r0, #12]
 8018f4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018f4e:	1418      	asrs	r0, r3, #16
 8018f50:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8018f54:	6892      	ldr	r2, [r2, #8]
 8018f56:	f100 8137 	bmi.w	80191c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018f5a:	f102 3cff 	add.w	ip, r2, #4294967295
 8018f5e:	4560      	cmp	r0, ip
 8018f60:	f280 8132 	bge.w	80191c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018f64:	2d00      	cmp	r5, #0
 8018f66:	f2c0 812f 	blt.w	80191c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018f6a:	f107 3cff 	add.w	ip, r7, #4294967295
 8018f6e:	4565      	cmp	r5, ip
 8018f70:	f280 812a 	bge.w	80191c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018f74:	b212      	sxth	r2, r2
 8018f76:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018f78:	fb05 0002 	mla	r0, r5, r2, r0
 8018f7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018f7e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018f82:	4405      	add	r5, r0
 8018f84:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018f88:	eb04 0e0c 	add.w	lr, r4, ip
 8018f8c:	f1b8 0f00 	cmp.w	r8, #0
 8018f90:	f000 810c 	beq.w	80191ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8018f94:	786f      	ldrb	r7, [r5, #1]
 8018f96:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018f9a:	4427      	add	r7, r4
 8018f9c:	2900      	cmp	r1, #0
 8018f9e:	f000 810d 	beq.w	80191bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8018fa2:	18a8      	adds	r0, r5, r2
 8018fa4:	5caa      	ldrb	r2, [r5, r2]
 8018fa6:	7840      	ldrb	r0, [r0, #1]
 8018fa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018fac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018fb0:	4422      	add	r2, r4
 8018fb2:	4420      	add	r0, r4
 8018fb4:	fa1f f388 	uxth.w	r3, r8
 8018fb8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8018fbc:	b289      	uxth	r1, r1
 8018fbe:	f897 c000 	ldrb.w	ip, [r7]
 8018fc2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018fc6:	fb03 f901 	mul.w	r9, r3, r1
 8018fca:	011b      	lsls	r3, r3, #4
 8018fcc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018fd0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8018fd4:	eba3 0309 	sub.w	r3, r3, r9
 8018fd8:	b289      	uxth	r1, r1
 8018fda:	b29b      	uxth	r3, r3
 8018fdc:	eba8 0801 	sub.w	r8, r8, r1
 8018fe0:	fb03 fc0c 	mul.w	ip, r3, ip
 8018fe4:	fa1f f888 	uxth.w	r8, r8
 8018fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8018fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fec:	fb08 cc0a 	mla	ip, r8, sl, ip
 8018ff0:	f892 a000 	ldrb.w	sl, [r2]
 8018ff4:	fb01 cc0a 	mla	ip, r1, sl, ip
 8018ff8:	f890 a000 	ldrb.w	sl, [r0]
 8018ffc:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019000:	f896 a000 	ldrb.w	sl, [r6]
 8019004:	fb1a fa03 	smulbb	sl, sl, r3
 8019008:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801900c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801900e:	fb0c ac05 	mla	ip, ip, r5, sl
 8019012:	fa1f fc8c 	uxth.w	ip, ip
 8019016:	f10c 0a01 	add.w	sl, ip, #1
 801901a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801901e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019022:	f886 a000 	strb.w	sl, [r6]
 8019026:	f897 c001 	ldrb.w	ip, [r7, #1]
 801902a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801902e:	fb03 fc0c 	mul.w	ip, r3, ip
 8019032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019034:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019038:	f892 a001 	ldrb.w	sl, [r2, #1]
 801903c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019040:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019044:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019048:	f896 a001 	ldrb.w	sl, [r6, #1]
 801904c:	fb1a fa03 	smulbb	sl, sl, r3
 8019050:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019056:	fb0c ac05 	mla	ip, ip, r5, sl
 801905a:	fa1f fc8c 	uxth.w	ip, ip
 801905e:	f10c 0a01 	add.w	sl, ip, #1
 8019062:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8019066:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801906a:	f886 c001 	strb.w	ip, [r6, #1]
 801906e:	78bf      	ldrb	r7, [r7, #2]
 8019070:	f89e c002 	ldrb.w	ip, [lr, #2]
 8019074:	437b      	muls	r3, r7
 8019076:	fb08 330c 	mla	r3, r8, ip, r3
 801907a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801907e:	7882      	ldrb	r2, [r0, #2]
 8019080:	fb01 310c 	mla	r1, r1, ip, r3
 8019084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019086:	fb09 1902 	mla	r9, r9, r2, r1
 801908a:	78b1      	ldrb	r1, [r6, #2]
 801908c:	fb11 f103 	smulbb	r1, r1, r3
 8019090:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8019094:	fb09 1505 	mla	r5, r9, r5, r1
 8019098:	b2ad      	uxth	r5, r5
 801909a:	1c6b      	adds	r3, r5, #1
 801909c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80190a0:	122d      	asrs	r5, r5, #8
 80190a2:	70b5      	strb	r5, [r6, #2]
 80190a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190a6:	3603      	adds	r6, #3
 80190a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80190aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80190ae:	4413      	add	r3, r2
 80190b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80190b2:	931d      	str	r3, [sp, #116]	; 0x74
 80190b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80190b6:	4413      	add	r3, r2
 80190b8:	931e      	str	r3, [sp, #120]	; 0x78
 80190ba:	e73b      	b.n	8018f34 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80190bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190be:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80190c0:	4433      	add	r3, r6
 80190c2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80190c4:	931d      	str	r3, [sp, #116]	; 0x74
 80190c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80190c8:	4433      	add	r3, r6
 80190ca:	931e      	str	r3, [sp, #120]	; 0x78
 80190cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190ce:	3b01      	subs	r3, #1
 80190d0:	9309      	str	r3, [sp, #36]	; 0x24
 80190d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190d4:	3303      	adds	r3, #3
 80190d6:	930a      	str	r3, [sp, #40]	; 0x28
 80190d8:	e70d      	b.n	8018ef6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80190da:	d028      	beq.n	801912e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80190dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190de:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80190e0:	3b01      	subs	r3, #1
 80190e2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80190e4:	fb00 5003 	mla	r0, r0, r3, r5
 80190e8:	1400      	asrs	r0, r0, #16
 80190ea:	f53f af21 	bmi.w	8018f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80190ee:	3901      	subs	r1, #1
 80190f0:	4288      	cmp	r0, r1
 80190f2:	f6bf af1d 	bge.w	8018f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80190f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80190f8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80190fa:	fb01 0303 	mla	r3, r1, r3, r0
 80190fe:	141b      	asrs	r3, r3, #16
 8019100:	f53f af16 	bmi.w	8018f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019104:	3a01      	subs	r2, #1
 8019106:	4293      	cmp	r3, r2
 8019108:	f6bf af12 	bge.w	8018f30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801910c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801910e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019112:	1cdf      	adds	r7, r3, #3
 8019114:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8019118:	f1b9 0f00 	cmp.w	r9, #0
 801911c:	dc73      	bgt.n	8019206 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801911e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019126:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801912a:	441a      	add	r2, r3
 801912c:	920a      	str	r2, [sp, #40]	; 0x28
 801912e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019130:	2b00      	cmp	r3, #0
 8019132:	f340 8129 	ble.w	8019388 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8019136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801913a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801913c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019140:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019144:	eef0 6a62 	vmov.f32	s13, s5
 8019148:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801914c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019150:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019154:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8019158:	eef0 6a43 	vmov.f32	s13, s6
 801915c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019160:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8019164:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019168:	ee61 7a27 	vmul.f32	s15, s2, s15
 801916c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019170:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019174:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019178:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801917c:	ee12 2a90 	vmov	r2, s5
 8019180:	eef0 2a47 	vmov.f32	s5, s14
 8019184:	fb92 f3f3 	sdiv	r3, r2, r3
 8019188:	ee13 2a10 	vmov	r2, s6
 801918c:	931f      	str	r3, [sp, #124]	; 0x7c
 801918e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019190:	eeb0 3a67 	vmov.f32	s6, s15
 8019194:	fb92 f3f3 	sdiv	r3, r2, r3
 8019198:	9320      	str	r3, [sp, #128]	; 0x80
 801919a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801919c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801919e:	3b01      	subs	r3, #1
 80191a0:	930d      	str	r3, [sp, #52]	; 0x34
 80191a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80191a4:	bf08      	it	eq
 80191a6:	4613      	moveq	r3, r2
 80191a8:	9309      	str	r3, [sp, #36]	; 0x24
 80191aa:	e696      	b.n	8018eda <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80191ac:	b149      	cbz	r1, 80191c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80191ae:	5caa      	ldrb	r2, [r5, r2]
 80191b0:	4670      	mov	r0, lr
 80191b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80191b6:	4422      	add	r2, r4
 80191b8:	4677      	mov	r7, lr
 80191ba:	e6fb      	b.n	8018fb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80191bc:	4670      	mov	r0, lr
 80191be:	4672      	mov	r2, lr
 80191c0:	e6f8      	b.n	8018fb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80191c2:	4670      	mov	r0, lr
 80191c4:	4672      	mov	r2, lr
 80191c6:	e7f7      	b.n	80191b8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80191c8:	f110 0c01 	adds.w	ip, r0, #1
 80191cc:	f53f af6a 	bmi.w	80190a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80191d0:	4562      	cmp	r2, ip
 80191d2:	f6ff af67 	blt.w	80190a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80191d6:	f115 0c01 	adds.w	ip, r5, #1
 80191da:	f53f af63 	bmi.w	80190a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80191de:	4567      	cmp	r7, ip
 80191e0:	f6ff af60 	blt.w	80190a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80191e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191e6:	b23f      	sxth	r7, r7
 80191e8:	b212      	sxth	r2, r2
 80191ea:	9002      	str	r0, [sp, #8]
 80191ec:	9701      	str	r7, [sp, #4]
 80191ee:	9200      	str	r2, [sp, #0]
 80191f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80191f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191f4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80191f8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80191fc:	4623      	mov	r3, r4
 80191fe:	4631      	mov	r1, r6
 8019200:	f7ff fd69 	bl	8018cd6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8019204:	e74e      	b.n	80190a4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019208:	981e      	ldr	r0, [sp, #120]	; 0x78
 801920a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801920e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019210:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019212:	1400      	asrs	r0, r0, #16
 8019214:	142d      	asrs	r5, r5, #16
 8019216:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019218:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801921c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019220:	fb02 5000 	mla	r0, r2, r0, r5
 8019224:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019226:	f815 e000 	ldrb.w	lr, [r5, r0]
 801922a:	eb05 0c00 	add.w	ip, r5, r0
 801922e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019232:	eb04 060e 	add.w	r6, r4, lr
 8019236:	2b00      	cmp	r3, #0
 8019238:	f000 8097 	beq.w	801936a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801923c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8019240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019244:	4425      	add	r5, r4
 8019246:	2900      	cmp	r1, #0
 8019248:	f000 8098 	beq.w	801937c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801924c:	eb0c 0002 	add.w	r0, ip, r2
 8019250:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019254:	7840      	ldrb	r0, [r0, #1]
 8019256:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801925a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801925e:	4422      	add	r2, r4
 8019260:	4420      	add	r0, r4
 8019262:	b29b      	uxth	r3, r3
 8019264:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8019268:	b289      	uxth	r1, r1
 801926a:	f895 e000 	ldrb.w	lr, [r5]
 801926e:	3703      	adds	r7, #3
 8019270:	f109 39ff 	add.w	r9, r9, #4294967295
 8019274:	fb03 f801 	mul.w	r8, r3, r1
 8019278:	011b      	lsls	r3, r3, #4
 801927a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801927e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019282:	eba3 0308 	sub.w	r3, r3, r8
 8019286:	b289      	uxth	r1, r1
 8019288:	b29b      	uxth	r3, r3
 801928a:	ebac 0c01 	sub.w	ip, ip, r1
 801928e:	fb03 fe0e 	mul.w	lr, r3, lr
 8019292:	fa1f fc8c 	uxth.w	ip, ip
 8019296:	930f      	str	r3, [sp, #60]	; 0x3c
 8019298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801929a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801929e:	f892 b000 	ldrb.w	fp, [r2]
 80192a2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80192a6:	f890 b000 	ldrb.w	fp, [r0]
 80192aa:	fb08 ee0b 	mla	lr, r8, fp, lr
 80192ae:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80192b2:	fb1b fb03 	smulbb	fp, fp, r3
 80192b6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80192ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192bc:	fb0e be0a 	mla	lr, lr, sl, fp
 80192c0:	fa1f fe8e 	uxth.w	lr, lr
 80192c4:	f10e 0b01 	add.w	fp, lr, #1
 80192c8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80192cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80192d0:	f807 ec06 	strb.w	lr, [r7, #-6]
 80192d4:	f895 e001 	ldrb.w	lr, [r5, #1]
 80192d8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80192dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80192e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80192e6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80192ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 80192ee:	f890 b001 	ldrb.w	fp, [r0, #1]
 80192f2:	fb08 ee0b 	mla	lr, r8, fp, lr
 80192f6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80192fa:	fb1b fb03 	smulbb	fp, fp, r3
 80192fe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019304:	fb0e be0a 	mla	lr, lr, sl, fp
 8019308:	fa1f fe8e 	uxth.w	lr, lr
 801930c:	f10e 0b01 	add.w	fp, lr, #1
 8019310:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019314:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019318:	f807 ec05 	strb.w	lr, [r7, #-5]
 801931c:	78ad      	ldrb	r5, [r5, #2]
 801931e:	78b6      	ldrb	r6, [r6, #2]
 8019320:	436b      	muls	r3, r5
 8019322:	7895      	ldrb	r5, [r2, #2]
 8019324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019326:	fb0c 3306 	mla	r3, ip, r6, r3
 801932a:	fb01 3305 	mla	r3, r1, r5, r3
 801932e:	7885      	ldrb	r5, [r0, #2]
 8019330:	fb08 3805 	mla	r8, r8, r5, r3
 8019334:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8019338:	fb13 f302 	smulbb	r3, r3, r2
 801933c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8019340:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019342:	fb08 380a 	mla	r8, r8, sl, r3
 8019346:	fa1f f888 	uxth.w	r8, r8
 801934a:	f108 0301 	add.w	r3, r8, #1
 801934e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8019352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019354:	4413      	add	r3, r2
 8019356:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019358:	ea4f 2828 	mov.w	r8, r8, asr #8
 801935c:	931d      	str	r3, [sp, #116]	; 0x74
 801935e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019360:	f807 8c04 	strb.w	r8, [r7, #-4]
 8019364:	4413      	add	r3, r2
 8019366:	931e      	str	r3, [sp, #120]	; 0x78
 8019368:	e6d6      	b.n	8019118 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801936a:	b151      	cbz	r1, 8019382 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801936c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019370:	4630      	mov	r0, r6
 8019372:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019376:	4422      	add	r2, r4
 8019378:	4635      	mov	r5, r6
 801937a:	e772      	b.n	8019262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801937c:	4630      	mov	r0, r6
 801937e:	4632      	mov	r2, r6
 8019380:	e76f      	b.n	8019262 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8019382:	4630      	mov	r0, r6
 8019384:	4632      	mov	r2, r6
 8019386:	e7f7      	b.n	8019378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019388:	b013      	add	sp, #76	; 0x4c
 801938a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801938e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801938e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019392:	784c      	ldrb	r4, [r1, #1]
 8019394:	f891 a002 	ldrb.w	sl, [r1, #2]
 8019398:	0224      	lsls	r4, r4, #8
 801939a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801939e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80193a2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80193a6:	f891 a000 	ldrb.w	sl, [r1]
 80193aa:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80193ae:	ea44 040a 	orr.w	r4, r4, sl
 80193b2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80193b6:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80193ba:	9401      	str	r4, [sp, #4]
 80193bc:	fb05 c70e 	mla	r7, r5, lr, ip
 80193c0:	2d00      	cmp	r5, #0
 80193c2:	eb02 0807 	add.w	r8, r2, r7
 80193c6:	db72      	blt.n	80194ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80193c8:	45a9      	cmp	r9, r5
 80193ca:	dd70      	ble.n	80194ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80193cc:	f1bc 0f00 	cmp.w	ip, #0
 80193d0:	db6b      	blt.n	80194aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80193d2:	45e6      	cmp	lr, ip
 80193d4:	dd69      	ble.n	80194aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80193d6:	5dd7      	ldrb	r7, [r2, r7]
 80193d8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80193dc:	441f      	add	r7, r3
 80193de:	f11c 0201 	adds.w	r2, ip, #1
 80193e2:	d467      	bmi.n	80194b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80193e4:	4596      	cmp	lr, r2
 80193e6:	dd65      	ble.n	80194b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80193e8:	2800      	cmp	r0, #0
 80193ea:	d063      	beq.n	80194b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80193ec:	f898 4001 	ldrb.w	r4, [r8, #1]
 80193f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80193f4:	441c      	add	r4, r3
 80193f6:	3501      	adds	r5, #1
 80193f8:	d460      	bmi.n	80194bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80193fa:	45a9      	cmp	r9, r5
 80193fc:	dd5e      	ble.n	80194bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80193fe:	2e00      	cmp	r6, #0
 8019400:	d05c      	beq.n	80194bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8019402:	f1bc 0f00 	cmp.w	ip, #0
 8019406:	db57      	blt.n	80194b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8019408:	45e6      	cmp	lr, ip
 801940a:	dd55      	ble.n	80194b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801940c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8019410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019414:	441d      	add	r5, r3
 8019416:	f11c 0201 	adds.w	r2, ip, #1
 801941a:	d452      	bmi.n	80194c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801941c:	4596      	cmp	lr, r2
 801941e:	dd50      	ble.n	80194c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8019420:	2800      	cmp	r0, #0
 8019422:	d04e      	beq.n	80194c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8019424:	44c6      	add	lr, r8
 8019426:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801942a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801942e:	4413      	add	r3, r2
 8019430:	b280      	uxth	r0, r0
 8019432:	f897 8000 	ldrb.w	r8, [r7]
 8019436:	b2b2      	uxth	r2, r6
 8019438:	fb00 f602 	mul.w	r6, r0, r2
 801943c:	0100      	lsls	r0, r0, #4
 801943e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8019442:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8019446:	1b80      	subs	r0, r0, r6
 8019448:	fa1f fc82 	uxth.w	ip, r2
 801944c:	b282      	uxth	r2, r0
 801944e:	7820      	ldrb	r0, [r4, #0]
 8019450:	ebae 0e0c 	sub.w	lr, lr, ip
 8019454:	4350      	muls	r0, r2
 8019456:	fa1f fe8e 	uxth.w	lr, lr
 801945a:	fb0e 0808 	mla	r8, lr, r8, r0
 801945e:	7828      	ldrb	r0, [r5, #0]
 8019460:	fb0c 8800 	mla	r8, ip, r0, r8
 8019464:	7818      	ldrb	r0, [r3, #0]
 8019466:	fb06 8000 	mla	r0, r6, r0, r8
 801946a:	1200      	asrs	r0, r0, #8
 801946c:	7008      	strb	r0, [r1, #0]
 801946e:	7860      	ldrb	r0, [r4, #1]
 8019470:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019474:	4350      	muls	r0, r2
 8019476:	fb0e 0808 	mla	r8, lr, r8, r0
 801947a:	7868      	ldrb	r0, [r5, #1]
 801947c:	fb0c 8800 	mla	r8, ip, r0, r8
 8019480:	7858      	ldrb	r0, [r3, #1]
 8019482:	fb06 8000 	mla	r0, r6, r0, r8
 8019486:	1200      	asrs	r0, r0, #8
 8019488:	7048      	strb	r0, [r1, #1]
 801948a:	78a0      	ldrb	r0, [r4, #2]
 801948c:	78bf      	ldrb	r7, [r7, #2]
 801948e:	4350      	muls	r0, r2
 8019490:	78aa      	ldrb	r2, [r5, #2]
 8019492:	fb0e 0007 	mla	r0, lr, r7, r0
 8019496:	fb0c 0c02 	mla	ip, ip, r2, r0
 801949a:	789a      	ldrb	r2, [r3, #2]
 801949c:	fb06 c202 	mla	r2, r6, r2, ip
 80194a0:	1212      	asrs	r2, r2, #8
 80194a2:	708a      	strb	r2, [r1, #2]
 80194a4:	b002      	add	sp, #8
 80194a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194aa:	af01      	add	r7, sp, #4
 80194ac:	e797      	b.n	80193de <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80194ae:	ac01      	add	r4, sp, #4
 80194b0:	4627      	mov	r7, r4
 80194b2:	e7a0      	b.n	80193f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80194b4:	ac01      	add	r4, sp, #4
 80194b6:	e79e      	b.n	80193f6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80194b8:	ad01      	add	r5, sp, #4
 80194ba:	e7ac      	b.n	8019416 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80194bc:	ab01      	add	r3, sp, #4
 80194be:	461d      	mov	r5, r3
 80194c0:	e7b6      	b.n	8019430 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80194c2:	ab01      	add	r3, sp, #4
 80194c4:	e7b4      	b.n	8019430 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080194c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80194c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ca:	b08d      	sub	sp, #52	; 0x34
 80194cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80194d0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80194d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80194d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80194d8:	9306      	str	r3, [sp, #24]
 80194da:	6850      	ldr	r0, [r2, #4]
 80194dc:	6812      	ldr	r2, [r2, #0]
 80194de:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80194e0:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 80194e4:	fb00 1303 	mla	r3, r0, r3, r1
 80194e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80194ec:	18d3      	adds	r3, r2, r3
 80194ee:	9307      	str	r3, [sp, #28]
 80194f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	9308      	str	r3, [sp, #32]
 80194f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80194f8:	685d      	ldr	r5, [r3, #4]
 80194fa:	3504      	adds	r5, #4
 80194fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194fe:	2b00      	cmp	r3, #0
 8019500:	dc03      	bgt.n	801950a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019504:	2b00      	cmp	r3, #0
 8019506:	f340 81e6 	ble.w	80198d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801950a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801950c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019510:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019514:	1e48      	subs	r0, r1, #1
 8019516:	1e56      	subs	r6, r2, #1
 8019518:	9b06      	ldr	r3, [sp, #24]
 801951a:	2b00      	cmp	r3, #0
 801951c:	f340 80bd 	ble.w	801969a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019520:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019522:	1427      	asrs	r7, r4, #16
 8019524:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019528:	d406      	bmi.n	8019538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801952a:	4287      	cmp	r7, r0
 801952c:	da04      	bge.n	8019538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801952e:	2b00      	cmp	r3, #0
 8019530:	db02      	blt.n	8019538 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019532:	42b3      	cmp	r3, r6
 8019534:	f2c0 80b2 	blt.w	801969c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8019538:	3701      	adds	r7, #1
 801953a:	f100 80a1 	bmi.w	8019680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801953e:	42b9      	cmp	r1, r7
 8019540:	f2c0 809e 	blt.w	8019680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8019544:	3301      	adds	r3, #1
 8019546:	f100 809b 	bmi.w	8019680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801954a:	429a      	cmp	r2, r3
 801954c:	f2c0 8098 	blt.w	8019680 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8019550:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8019554:	f1bb 0f00 	cmp.w	fp, #0
 8019558:	f340 80bf 	ble.w	80196da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801955c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801955e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8019560:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019562:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019566:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801956a:	1420      	asrs	r0, r4, #16
 801956c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801956e:	ea4f 4723 	mov.w	r7, r3, asr #16
 8019572:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019576:	6892      	ldr	r2, [r2, #8]
 8019578:	f100 8103 	bmi.w	8019782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801957c:	f102 3eff 	add.w	lr, r2, #4294967295
 8019580:	4570      	cmp	r0, lr
 8019582:	f280 80fe 	bge.w	8019782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019586:	2f00      	cmp	r7, #0
 8019588:	f2c0 80fb 	blt.w	8019782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801958c:	f10c 3eff 	add.w	lr, ip, #4294967295
 8019590:	4577      	cmp	r7, lr
 8019592:	f280 80f6 	bge.w	8019782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019596:	b212      	sxth	r2, r2
 8019598:	fb07 0002 	mla	r0, r7, r2, r0
 801959c:	9f08      	ldr	r7, [sp, #32]
 801959e:	f817 8000 	ldrb.w	r8, [r7, r0]
 80195a2:	eb07 0e00 	add.w	lr, r7, r0
 80195a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80195aa:	eb05 0c08 	add.w	ip, r5, r8
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	f000 80d8 	beq.w	8019764 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80195b4:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80195b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80195bc:	442f      	add	r7, r5
 80195be:	2900      	cmp	r1, #0
 80195c0:	f000 80d9 	beq.w	8019776 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80195c4:	eb0e 0002 	add.w	r0, lr, r2
 80195c8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80195cc:	7840      	ldrb	r0, [r0, #1]
 80195ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80195d6:	442a      	add	r2, r5
 80195d8:	4428      	add	r0, r5
 80195da:	b29b      	uxth	r3, r3
 80195dc:	f815 a008 	ldrb.w	sl, [r5, r8]
 80195e0:	b289      	uxth	r1, r1
 80195e2:	f897 8000 	ldrb.w	r8, [r7]
 80195e6:	fb03 f901 	mul.w	r9, r3, r1
 80195ea:	011b      	lsls	r3, r3, #4
 80195ec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80195f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80195f4:	eba3 0309 	sub.w	r3, r3, r9
 80195f8:	b289      	uxth	r1, r1
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	ebae 0e01 	sub.w	lr, lr, r1
 8019600:	fb03 f808 	mul.w	r8, r3, r8
 8019604:	fa1f fe8e 	uxth.w	lr, lr
 8019608:	fb0e 880a 	mla	r8, lr, sl, r8
 801960c:	f892 a000 	ldrb.w	sl, [r2]
 8019610:	fb01 880a 	mla	r8, r1, sl, r8
 8019614:	f890 a000 	ldrb.w	sl, [r0]
 8019618:	fb09 880a 	mla	r8, r9, sl, r8
 801961c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019620:	f886 8000 	strb.w	r8, [r6]
 8019624:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019628:	f89c a001 	ldrb.w	sl, [ip, #1]
 801962c:	fb03 f808 	mul.w	r8, r3, r8
 8019630:	fb0e 880a 	mla	r8, lr, sl, r8
 8019634:	f892 a001 	ldrb.w	sl, [r2, #1]
 8019638:	fb01 880a 	mla	r8, r1, sl, r8
 801963c:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019640:	fb09 880a 	mla	r8, r9, sl, r8
 8019644:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019648:	f886 8001 	strb.w	r8, [r6, #1]
 801964c:	78bf      	ldrb	r7, [r7, #2]
 801964e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019652:	437b      	muls	r3, r7
 8019654:	7892      	ldrb	r2, [r2, #2]
 8019656:	fb0e 330c 	mla	r3, lr, ip, r3
 801965a:	fb01 3102 	mla	r1, r1, r2, r3
 801965e:	7882      	ldrb	r2, [r0, #2]
 8019660:	fb09 1902 	mla	r9, r9, r2, r1
 8019664:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019668:	f886 9002 	strb.w	r9, [r6, #2]
 801966c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801966e:	3603      	adds	r6, #3
 8019670:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019676:	441c      	add	r4, r3
 8019678:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801967a:	4413      	add	r3, r2
 801967c:	9318      	str	r3, [sp, #96]	; 0x60
 801967e:	e769      	b.n	8019554 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019682:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019684:	441c      	add	r4, r3
 8019686:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019688:	443b      	add	r3, r7
 801968a:	9318      	str	r3, [sp, #96]	; 0x60
 801968c:	9b06      	ldr	r3, [sp, #24]
 801968e:	3b01      	subs	r3, #1
 8019690:	9306      	str	r3, [sp, #24]
 8019692:	9b07      	ldr	r3, [sp, #28]
 8019694:	3303      	adds	r3, #3
 8019696:	9307      	str	r3, [sp, #28]
 8019698:	e73e      	b.n	8019518 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801969a:	d026      	beq.n	80196ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801969c:	9b06      	ldr	r3, [sp, #24]
 801969e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80196a0:	3b01      	subs	r3, #1
 80196a2:	fb00 4003 	mla	r0, r0, r3, r4
 80196a6:	1400      	asrs	r0, r0, #16
 80196a8:	f53f af52 	bmi.w	8019550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80196ac:	3901      	subs	r1, #1
 80196ae:	4288      	cmp	r0, r1
 80196b0:	f6bf af4e 	bge.w	8019550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80196b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80196b6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80196b8:	fb01 0303 	mla	r3, r1, r3, r0
 80196bc:	141b      	asrs	r3, r3, #16
 80196be:	f53f af47 	bmi.w	8019550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80196c2:	3a01      	subs	r2, #1
 80196c4:	4293      	cmp	r3, r2
 80196c6:	f6bf af43 	bge.w	8019550 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80196ca:	9b07      	ldr	r3, [sp, #28]
 80196cc:	f8dd a018 	ldr.w	sl, [sp, #24]
 80196d0:	f103 0803 	add.w	r8, r3, #3
 80196d4:	f1ba 0f00 	cmp.w	sl, #0
 80196d8:	dc71      	bgt.n	80197be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80196da:	9b06      	ldr	r3, [sp, #24]
 80196dc:	9a07      	ldr	r2, [sp, #28]
 80196de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80196e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80196e6:	441a      	add	r2, r3
 80196e8:	9207      	str	r2, [sp, #28]
 80196ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	f340 80f2 	ble.w	80198d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80196f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80196f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80196f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80196fc:	eeb0 6a62 	vmov.f32	s12, s5
 8019700:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019704:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019708:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801970c:	ee16 4a10 	vmov	r4, s12
 8019710:	eeb0 6a43 	vmov.f32	s12, s6
 8019714:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019718:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801971c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019720:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019724:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019728:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801972c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019730:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019734:	ee12 2a90 	vmov	r2, s5
 8019738:	eef0 2a47 	vmov.f32	s5, s14
 801973c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019740:	ee13 2a10 	vmov	r2, s6
 8019744:	9319      	str	r3, [sp, #100]	; 0x64
 8019746:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019748:	eeb0 3a67 	vmov.f32	s6, s15
 801974c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019750:	931a      	str	r3, [sp, #104]	; 0x68
 8019752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019756:	3b01      	subs	r3, #1
 8019758:	9309      	str	r3, [sp, #36]	; 0x24
 801975a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801975c:	bf08      	it	eq
 801975e:	4613      	moveq	r3, r2
 8019760:	9306      	str	r3, [sp, #24]
 8019762:	e6cb      	b.n	80194fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019764:	b151      	cbz	r1, 801977c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019766:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801976a:	4660      	mov	r0, ip
 801976c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019770:	442a      	add	r2, r5
 8019772:	4667      	mov	r7, ip
 8019774:	e731      	b.n	80195da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019776:	4660      	mov	r0, ip
 8019778:	4662      	mov	r2, ip
 801977a:	e72e      	b.n	80195da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801977c:	4660      	mov	r0, ip
 801977e:	4662      	mov	r2, ip
 8019780:	e7f7      	b.n	8019772 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8019782:	f110 0e01 	adds.w	lr, r0, #1
 8019786:	f53f af71 	bmi.w	801966c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801978a:	4572      	cmp	r2, lr
 801978c:	f6ff af6e 	blt.w	801966c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019790:	f117 0e01 	adds.w	lr, r7, #1
 8019794:	f53f af6a 	bmi.w	801966c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019798:	45f4      	cmp	ip, lr
 801979a:	f6ff af67 	blt.w	801966c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801979e:	b212      	sxth	r2, r2
 80197a0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80197a4:	fa0f f38c 	sxth.w	r3, ip
 80197a8:	9200      	str	r2, [sp, #0]
 80197aa:	4631      	mov	r1, r6
 80197ac:	9a08      	ldr	r2, [sp, #32]
 80197ae:	9301      	str	r3, [sp, #4]
 80197b0:	462b      	mov	r3, r5
 80197b2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80197b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80197b8:	f7ff fde9 	bl	801938e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80197bc:	e756      	b.n	801966c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80197be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80197c0:	1426      	asrs	r6, r4, #16
 80197c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80197c4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80197c8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80197cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80197ce:	1400      	asrs	r0, r0, #16
 80197d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80197d4:	fb02 6000 	mla	r0, r2, r0, r6
 80197d8:	9e08      	ldr	r6, [sp, #32]
 80197da:	f816 e000 	ldrb.w	lr, [r6, r0]
 80197de:	eb06 0c00 	add.w	ip, r6, r0
 80197e2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80197e6:	eb05 070e 	add.w	r7, r5, lr
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d064      	beq.n	80198b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80197ee:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80197f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80197f6:	442e      	add	r6, r5
 80197f8:	2900      	cmp	r1, #0
 80197fa:	d066      	beq.n	80198ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80197fc:	eb0c 0002 	add.w	r0, ip, r2
 8019800:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019804:	7840      	ldrb	r0, [r0, #1]
 8019806:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801980a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801980e:	442a      	add	r2, r5
 8019810:	4428      	add	r0, r5
 8019812:	b29b      	uxth	r3, r3
 8019814:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8019818:	b289      	uxth	r1, r1
 801981a:	f896 e000 	ldrb.w	lr, [r6]
 801981e:	f108 0803 	add.w	r8, r8, #3
 8019822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019826:	fb03 f901 	mul.w	r9, r3, r1
 801982a:	011b      	lsls	r3, r3, #4
 801982c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019830:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019834:	eba3 0309 	sub.w	r3, r3, r9
 8019838:	b289      	uxth	r1, r1
 801983a:	b29b      	uxth	r3, r3
 801983c:	ebac 0c01 	sub.w	ip, ip, r1
 8019840:	fb03 fe0e 	mul.w	lr, r3, lr
 8019844:	fa1f fc8c 	uxth.w	ip, ip
 8019848:	fb0c ee0b 	mla	lr, ip, fp, lr
 801984c:	f892 b000 	ldrb.w	fp, [r2]
 8019850:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019854:	f890 b000 	ldrb.w	fp, [r0]
 8019858:	fb09 ee0b 	mla	lr, r9, fp, lr
 801985c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019860:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019864:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019868:	f897 b001 	ldrb.w	fp, [r7, #1]
 801986c:	fb03 fe0e 	mul.w	lr, r3, lr
 8019870:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019874:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019878:	fb01 ee0b 	mla	lr, r1, fp, lr
 801987c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019880:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019884:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019888:	f808 ec05 	strb.w	lr, [r8, #-5]
 801988c:	78b6      	ldrb	r6, [r6, #2]
 801988e:	78bf      	ldrb	r7, [r7, #2]
 8019890:	4373      	muls	r3, r6
 8019892:	7896      	ldrb	r6, [r2, #2]
 8019894:	7882      	ldrb	r2, [r0, #2]
 8019896:	fb0c 3307 	mla	r3, ip, r7, r3
 801989a:	fb01 3306 	mla	r3, r1, r6, r3
 801989e:	fb09 3902 	mla	r9, r9, r2, r3
 80198a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80198a4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80198a6:	441c      	add	r4, r3
 80198a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80198aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198ae:	4413      	add	r3, r2
 80198b0:	f808 9c04 	strb.w	r9, [r8, #-4]
 80198b4:	9318      	str	r3, [sp, #96]	; 0x60
 80198b6:	e70d      	b.n	80196d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80198b8:	b151      	cbz	r1, 80198d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80198ba:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80198be:	4638      	mov	r0, r7
 80198c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80198c4:	442a      	add	r2, r5
 80198c6:	463e      	mov	r6, r7
 80198c8:	e7a3      	b.n	8019812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80198ca:	4638      	mov	r0, r7
 80198cc:	463a      	mov	r2, r7
 80198ce:	e7a0      	b.n	8019812 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80198d0:	4638      	mov	r0, r7
 80198d2:	463a      	mov	r2, r7
 80198d4:	e7f7      	b.n	80198c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80198d6:	b00d      	add	sp, #52	; 0x34
 80198d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080198dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80198dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198e0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80198e4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80198e8:	2d00      	cmp	r5, #0
 80198ea:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80198ee:	fb05 700c 	mla	r0, r5, ip, r7
 80198f2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80198f6:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80198fa:	eb02 0800 	add.w	r8, r2, r0
 80198fe:	f2c0 8118 	blt.w	8019b32 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019902:	45a9      	cmp	r9, r5
 8019904:	f340 8115 	ble.w	8019b32 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019908:	2f00      	cmp	r7, #0
 801990a:	f2c0 8110 	blt.w	8019b2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801990e:	45bc      	cmp	ip, r7
 8019910:	f340 810d 	ble.w	8019b2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019914:	5c12      	ldrb	r2, [r2, r0]
 8019916:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801991a:	1c7a      	adds	r2, r7, #1
 801991c:	f100 810c 	bmi.w	8019b38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019920:	4594      	cmp	ip, r2
 8019922:	f340 8109 	ble.w	8019b38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019926:	2c00      	cmp	r4, #0
 8019928:	f000 8108 	beq.w	8019b3c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801992c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019934:	3501      	adds	r5, #1
 8019936:	f100 8105 	bmi.w	8019b44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801993a:	45a9      	cmp	r9, r5
 801993c:	f340 8102 	ble.w	8019b44 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8019940:	f1be 0f00 	cmp.w	lr, #0
 8019944:	f000 8101 	beq.w	8019b4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8019948:	2f00      	cmp	r7, #0
 801994a:	f2c0 80f9 	blt.w	8019b40 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801994e:	45bc      	cmp	ip, r7
 8019950:	f340 80f6 	ble.w	8019b40 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019954:	f818 200c 	ldrb.w	r2, [r8, ip]
 8019958:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801995c:	3701      	adds	r7, #1
 801995e:	f100 80f7 	bmi.w	8019b50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019962:	45bc      	cmp	ip, r7
 8019964:	f340 80f4 	ble.w	8019b50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019968:	2c00      	cmp	r4, #0
 801996a:	f000 80f3 	beq.w	8019b54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801996e:	44c4      	add	ip, r8
 8019970:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019974:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019978:	fa1f fc84 	uxth.w	ip, r4
 801997c:	fa1f f48e 	uxth.w	r4, lr
 8019980:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019984:	fb04 fe0c 	mul.w	lr, r4, ip
 8019988:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801998c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019990:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019994:	ebac 070e 	sub.w	r7, ip, lr
 8019998:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801999c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80199a0:	b2a4      	uxth	r4, r4
 80199a2:	b2bf      	uxth	r7, r7
 80199a4:	1b1b      	subs	r3, r3, r4
 80199a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80199aa:	fb07 fc0a 	mul.w	ip, r7, sl
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	fb03 cc0b 	mla	ip, r3, fp, ip
 80199b4:	9300      	str	r3, [sp, #0]
 80199b6:	fb04 cc09 	mla	ip, r4, r9, ip
 80199ba:	fb0e cc08 	mla	ip, lr, r8, ip
 80199be:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80199c2:	9301      	str	r3, [sp, #4]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f000 80af 	beq.w	8019b28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80199ca:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80199ce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80199d2:	fb0b fc0c 	mul.w	ip, fp, ip
 80199d6:	fb0b f606 	mul.w	r6, fp, r6
 80199da:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80199de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80199e2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80199e6:	44dc      	add	ip, fp
 80199e8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80199ec:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80199f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80199f4:	fb0a fb0b 	mul.w	fp, sl, fp
 80199f8:	fb0a fa00 	mul.w	sl, sl, r0
 80199fc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019a00:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019a04:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019a08:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019a0c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019a10:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a14:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019a18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a1c:	0a36      	lsrs	r6, r6, #8
 8019a1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a22:	44dc      	add	ip, fp
 8019a24:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019a28:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019a2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019a30:	fb09 fb0b 	mul.w	fp, r9, fp
 8019a34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a38:	fb09 f905 	mul.w	r9, r9, r5
 8019a3c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019a40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a44:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019a48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a4c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019a50:	fb0c fc07 	mul.w	ip, ip, r7
 8019a54:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019a58:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019a5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019a60:	4458      	add	r0, fp
 8019a62:	fb08 f505 	mul.w	r5, r8, r5
 8019a66:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019a6a:	fb08 f802 	mul.w	r8, r8, r2
 8019a6e:	0a00      	lsrs	r0, r0, #8
 8019a70:	0a2a      	lsrs	r2, r5, #8
 8019a72:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019a76:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019a7a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019a7e:	4415      	add	r5, r2
 8019a80:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019a84:	0a2d      	lsrs	r5, r5, #8
 8019a86:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019a8a:	9a00      	ldr	r2, [sp, #0]
 8019a8c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019a90:	fb03 cc02 	mla	ip, r3, r2, ip
 8019a94:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019a98:	9b01      	ldr	r3, [sp, #4]
 8019a9a:	fb05 c50e 	mla	r5, r5, lr, ip
 8019a9e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019aa2:	fb00 5004 	mla	r0, r0, r4, r5
 8019aa6:	0a00      	lsrs	r0, r0, #8
 8019aa8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019aac:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019ab0:	4378      	muls	r0, r7
 8019ab2:	fb02 0006 	mla	r0, r2, r6, r0
 8019ab6:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019aba:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019abe:	fb04 e000 	mla	r0, r4, r0, lr
 8019ac2:	0a00      	lsrs	r0, r0, #8
 8019ac4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019ac8:	4328      	orrs	r0, r5
 8019aca:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019ace:	b2ad      	uxth	r5, r5
 8019ad0:	b2c4      	uxtb	r4, r0
 8019ad2:	436b      	muls	r3, r5
 8019ad4:	fb14 f405 	smulbb	r4, r4, r5
 8019ad8:	1c5a      	adds	r2, r3, #1
 8019ada:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019ade:	780b      	ldrb	r3, [r1, #0]
 8019ae0:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019ae4:	b2d2      	uxtb	r2, r2
 8019ae6:	fb03 4302 	mla	r3, r3, r2, r4
 8019aea:	b29b      	uxth	r3, r3
 8019aec:	1c5c      	adds	r4, r3, #1
 8019aee:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019af2:	784c      	ldrb	r4, [r1, #1]
 8019af4:	fb14 f402 	smulbb	r4, r4, r2
 8019af8:	121b      	asrs	r3, r3, #8
 8019afa:	700b      	strb	r3, [r1, #0]
 8019afc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019b00:	fb03 4305 	mla	r3, r3, r5, r4
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	1c5c      	adds	r4, r3, #1
 8019b08:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019b0c:	0c04      	lsrs	r4, r0, #16
 8019b0e:	7888      	ldrb	r0, [r1, #2]
 8019b10:	121b      	asrs	r3, r3, #8
 8019b12:	fb10 f002 	smulbb	r0, r0, r2
 8019b16:	704b      	strb	r3, [r1, #1]
 8019b18:	fb04 0005 	mla	r0, r4, r5, r0
 8019b1c:	b280      	uxth	r0, r0
 8019b1e:	1c43      	adds	r3, r0, #1
 8019b20:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019b24:	1200      	asrs	r0, r0, #8
 8019b26:	7088      	strb	r0, [r1, #2]
 8019b28:	b003      	add	sp, #12
 8019b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2e:	2600      	movs	r6, #0
 8019b30:	e6f3      	b.n	801991a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8019b32:	2000      	movs	r0, #0
 8019b34:	4606      	mov	r6, r0
 8019b36:	e6fd      	b.n	8019934 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019b38:	2000      	movs	r0, #0
 8019b3a:	e6fb      	b.n	8019934 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	e6f9      	b.n	8019934 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019b40:	2500      	movs	r5, #0
 8019b42:	e70b      	b.n	801995c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8019b44:	2200      	movs	r2, #0
 8019b46:	4615      	mov	r5, r2
 8019b48:	e716      	b.n	8019978 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019b4a:	4672      	mov	r2, lr
 8019b4c:	4675      	mov	r5, lr
 8019b4e:	e713      	b.n	8019978 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019b50:	2200      	movs	r2, #0
 8019b52:	e711      	b.n	8019978 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019b54:	4622      	mov	r2, r4
 8019b56:	e70f      	b.n	8019978 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08019b58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b5c:	b09f      	sub	sp, #124	; 0x7c
 8019b5e:	921b      	str	r2, [sp, #108]	; 0x6c
 8019b60:	9309      	str	r3, [sp, #36]	; 0x24
 8019b62:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019b64:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019b68:	901d      	str	r0, [sp, #116]	; 0x74
 8019b6a:	931c      	str	r3, [sp, #112]	; 0x70
 8019b6c:	6850      	ldr	r0, [r2, #4]
 8019b6e:	9119      	str	r1, [sp, #100]	; 0x64
 8019b70:	6812      	ldr	r2, [r2, #0]
 8019b72:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019b74:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019b78:	fb00 1303 	mla	r3, r0, r3, r1
 8019b7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b80:	18d3      	adds	r3, r2, r3
 8019b82:	930c      	str	r3, [sp, #48]	; 0x30
 8019b84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	9312      	str	r3, [sp, #72]	; 0x48
 8019b8a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019b8c:	685e      	ldr	r6, [r3, #4]
 8019b8e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019b92:	3604      	adds	r6, #4
 8019b94:	930d      	str	r3, [sp, #52]	; 0x34
 8019b96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	dc03      	bgt.n	8019ba4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	f340 8378 	ble.w	801a294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019ba4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019ba6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019baa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019bae:	1e48      	subs	r0, r1, #1
 8019bb0:	1e57      	subs	r7, r2, #1
 8019bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	f340 818c 	ble.w	8019ed2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019bba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019bbc:	142b      	asrs	r3, r5, #16
 8019bbe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019bc2:	d406      	bmi.n	8019bd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019bc4:	4584      	cmp	ip, r0
 8019bc6:	da04      	bge.n	8019bd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	db02      	blt.n	8019bd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019bcc:	42bb      	cmp	r3, r7
 8019bce:	f2c0 8181 	blt.w	8019ed4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019bd2:	f11c 0c01 	adds.w	ip, ip, #1
 8019bd6:	f100 816f 	bmi.w	8019eb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019bda:	4561      	cmp	r1, ip
 8019bdc:	f2c0 816c 	blt.w	8019eb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019be0:	3301      	adds	r3, #1
 8019be2:	f100 8169 	bmi.w	8019eb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019be6:	429a      	cmp	r2, r3
 8019be8:	f2c0 8166 	blt.w	8019eb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8019bf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	f340 818c 	ble.w	8019f12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8019bfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019bfc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019c00:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019c04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019c08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019c0a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019c0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019c10:	141b      	asrs	r3, r3, #16
 8019c12:	f100 81d0 	bmi.w	8019fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019c16:	f100 38ff 	add.w	r8, r0, #4294967295
 8019c1a:	4543      	cmp	r3, r8
 8019c1c:	f280 81cb 	bge.w	8019fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019c20:	f1bc 0f00 	cmp.w	ip, #0
 8019c24:	f2c0 81c7 	blt.w	8019fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019c28:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019c2c:	45c4      	cmp	ip, r8
 8019c2e:	f280 81c2 	bge.w	8019fb6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019c32:	b200      	sxth	r0, r0
 8019c34:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019c36:	fb0c 3300 	mla	r3, ip, r0, r3
 8019c3a:	eb04 0803 	add.w	r8, r4, r3
 8019c3e:	5ce3      	ldrb	r3, [r4, r3]
 8019c40:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019c44:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019c48:	2a00      	cmp	r2, #0
 8019c4a:	f000 81a9 	beq.w	8019fa0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019c4e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019c52:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019c56:	940e      	str	r4, [sp, #56]	; 0x38
 8019c58:	0e24      	lsrs	r4, r4, #24
 8019c5a:	9415      	str	r4, [sp, #84]	; 0x54
 8019c5c:	b179      	cbz	r1, 8019c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019c5e:	eb08 0c00 	add.w	ip, r8, r0
 8019c62:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019c66:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019c6a:	900a      	str	r0, [sp, #40]	; 0x28
 8019c6c:	0e00      	lsrs	r0, r0, #24
 8019c6e:	9013      	str	r0, [sp, #76]	; 0x4c
 8019c70:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019c74:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019c78:	900f      	str	r0, [sp, #60]	; 0x3c
 8019c7a:	0e00      	lsrs	r0, r0, #24
 8019c7c:	9016      	str	r0, [sp, #88]	; 0x58
 8019c7e:	b292      	uxth	r2, r2
 8019c80:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019c82:	b289      	uxth	r1, r1
 8019c84:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019c86:	fb02 f901 	mul.w	r9, r2, r1
 8019c8a:	0112      	lsls	r2, r2, #4
 8019c8c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019c90:	eba2 0809 	sub.w	r8, r2, r9
 8019c94:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019c98:	b289      	uxth	r1, r1
 8019c9a:	fa1f f888 	uxth.w	r8, r8
 8019c9e:	1a52      	subs	r2, r2, r1
 8019ca0:	fb08 f000 	mul.w	r0, r8, r0
 8019ca4:	b292      	uxth	r2, r2
 8019ca6:	fb02 000e 	mla	r0, r2, lr, r0
 8019caa:	fb01 0004 	mla	r0, r1, r4, r0
 8019cae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019cb0:	fb09 0004 	mla	r0, r9, r4, r0
 8019cb4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019cb8:	2800      	cmp	r0, #0
 8019cba:	f000 80f2 	beq.w	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019cbe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019cc2:	d01b      	beq.n	8019cfc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8019cc4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019cc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ccc:	fb0e fa0a 	mul.w	sl, lr, sl
 8019cd0:	fb0e fe03 	mul.w	lr, lr, r3
 8019cd4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019cd8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019cdc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019ce0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019ce4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019ce8:	4453      	add	r3, sl
 8019cea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cee:	0a1b      	lsrs	r3, r3, #8
 8019cf0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019cf4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cf8:	ea43 030c 	orr.w	r3, r3, ip
 8019cfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019cfe:	2cff      	cmp	r4, #255	; 0xff
 8019d00:	d021      	beq.n	8019d46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019d02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019d04:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019d0a:	fb04 fb0b 	mul.w	fp, r4, fp
 8019d0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019d10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019d16:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019d1a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019d1e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d26:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d2a:	44de      	add	lr, fp
 8019d2c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d40:	ea4e 040a 	orr.w	r4, lr, sl
 8019d44:	940e      	str	r4, [sp, #56]	; 0x38
 8019d46:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d48:	2cff      	cmp	r4, #255	; 0xff
 8019d4a:	d021      	beq.n	8019d90 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8019d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019d4e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d54:	fb04 fb0b 	mul.w	fp, r4, fp
 8019d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019d5a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d60:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019d64:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019d68:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d70:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d74:	44de      	add	lr, fp
 8019d76:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d7a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d7e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d86:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d8a:	ea4e 040a 	orr.w	r4, lr, sl
 8019d8e:	940a      	str	r4, [sp, #40]	; 0x28
 8019d90:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019d92:	2cff      	cmp	r4, #255	; 0xff
 8019d94:	d021      	beq.n	8019dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019d96:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019d98:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d9c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019d9e:	fb04 fb0b 	mul.w	fp, r4, fp
 8019da2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019da4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019da8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019daa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019dae:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019db2:	fb04 fa0a 	mul.w	sl, r4, sl
 8019db6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019dba:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019dbe:	44de      	add	lr, fp
 8019dc0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019dc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019dc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019dcc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019dd0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019dd4:	ea4e 040a 	orr.w	r4, lr, sl
 8019dd8:	940f      	str	r4, [sp, #60]	; 0x3c
 8019dda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ddc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019de0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019de4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019de8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019dea:	fb08 fc0c 	mul.w	ip, r8, ip
 8019dee:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019df2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019df6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019df8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019dfc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019e00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019e02:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019e06:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019e0a:	fb08 f80e 	mul.w	r8, r8, lr
 8019e0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e12:	fb02 8303 	mla	r3, r2, r3, r8
 8019e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019e18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e1c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019e20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e22:	fb01 330a 	mla	r3, r1, sl, r3
 8019e26:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019e2a:	fb09 3901 	mla	r9, r9, r1, r3
 8019e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e30:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019e32:	4343      	muls	r3, r0
 8019e34:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019e38:	1c58      	adds	r0, r3, #1
 8019e3a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019e3e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019e42:	ea4c 0c09 	orr.w	ip, ip, r9
 8019e46:	783b      	ldrb	r3, [r7, #0]
 8019e48:	fa5f f28c 	uxtb.w	r2, ip
 8019e4c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019e50:	fb12 f201 	smulbb	r2, r2, r1
 8019e54:	b2c0      	uxtb	r0, r0
 8019e56:	fb03 2300 	mla	r3, r3, r0, r2
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	1c5a      	adds	r2, r3, #1
 8019e5e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019e62:	787a      	ldrb	r2, [r7, #1]
 8019e64:	fb12 f200 	smulbb	r2, r2, r0
 8019e68:	121b      	asrs	r3, r3, #8
 8019e6a:	703b      	strb	r3, [r7, #0]
 8019e6c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019e70:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019e74:	fb03 2301 	mla	r3, r3, r1, r2
 8019e78:	b29b      	uxth	r3, r3
 8019e7a:	1c5a      	adds	r2, r3, #1
 8019e7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019e80:	121b      	asrs	r3, r3, #8
 8019e82:	707b      	strb	r3, [r7, #1]
 8019e84:	78bb      	ldrb	r3, [r7, #2]
 8019e86:	fb13 f000 	smulbb	r0, r3, r0
 8019e8a:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019e8e:	fa1f fc8c 	uxth.w	ip, ip
 8019e92:	f10c 0301 	add.w	r3, ip, #1
 8019e96:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019e9a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019e9e:	f887 c002 	strb.w	ip, [r7, #2]
 8019ea2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019ea4:	3703      	adds	r7, #3
 8019ea6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019ea8:	441a      	add	r2, r3
 8019eaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019eac:	441d      	add	r5, r3
 8019eae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019eb0:	9229      	str	r2, [sp, #164]	; 0xa4
 8019eb2:	3b01      	subs	r3, #1
 8019eb4:	931a      	str	r3, [sp, #104]	; 0x68
 8019eb6:	e69c      	b.n	8019bf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019eb8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019eba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019ebc:	441c      	add	r4, r3
 8019ebe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019ec0:	441d      	add	r5, r3
 8019ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ec4:	9429      	str	r4, [sp, #164]	; 0xa4
 8019ec6:	3b01      	subs	r3, #1
 8019ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8019eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ecc:	3303      	adds	r3, #3
 8019ece:	930c      	str	r3, [sp, #48]	; 0x30
 8019ed0:	e66f      	b.n	8019bb2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019ed2:	d026      	beq.n	8019f22 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8019ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ed6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8019ed8:	3b01      	subs	r3, #1
 8019eda:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019edc:	fb00 4003 	mla	r0, r0, r3, r4
 8019ee0:	1400      	asrs	r0, r0, #16
 8019ee2:	f53f ae83 	bmi.w	8019bec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019ee6:	3901      	subs	r1, #1
 8019ee8:	4288      	cmp	r0, r1
 8019eea:	f6bf ae7f 	bge.w	8019bec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019eee:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8019ef0:	fb01 5303 	mla	r3, r1, r3, r5
 8019ef4:	141b      	asrs	r3, r3, #16
 8019ef6:	f53f ae79 	bmi.w	8019bec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019efa:	3a01      	subs	r2, #1
 8019efc:	4293      	cmp	r3, r2
 8019efe:	f6bf ae75 	bge.w	8019bec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f04:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8019f08:	f103 0e03 	add.w	lr, r3, #3
 8019f0c:	f1bb 0f00 	cmp.w	fp, #0
 8019f10:	dc71      	bgt.n	8019ff6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8019f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f14:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f1e:	4423      	add	r3, r4
 8019f20:	930c      	str	r3, [sp, #48]	; 0x30
 8019f22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	f340 81b5 	ble.w	801a294 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019f2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f38:	eef0 6a62 	vmov.f32	s13, s5
 8019f3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019f40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f44:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f48:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8019f4c:	eef0 6a43 	vmov.f32	s13, s6
 8019f50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f54:	ee16 5a90 	vmov	r5, s13
 8019f58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f70:	ee12 2a90 	vmov	r2, s5
 8019f74:	eef0 2a47 	vmov.f32	s5, s14
 8019f78:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f7c:	ee13 2a10 	vmov	r2, s6
 8019f80:	932b      	str	r3, [sp, #172]	; 0xac
 8019f82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f84:	eeb0 3a67 	vmov.f32	s6, s15
 8019f88:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f8c:	932c      	str	r3, [sp, #176]	; 0xb0
 8019f8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019f90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019f92:	3b01      	subs	r3, #1
 8019f94:	9319      	str	r3, [sp, #100]	; 0x64
 8019f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f98:	bf08      	it	eq
 8019f9a:	4613      	moveq	r3, r2
 8019f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8019f9e:	e5fa      	b.n	8019b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019fa0:	2900      	cmp	r1, #0
 8019fa2:	f43f ae6c 	beq.w	8019c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019fa6:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019faa:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019fae:	900a      	str	r0, [sp, #40]	; 0x28
 8019fb0:	0e00      	lsrs	r0, r0, #24
 8019fb2:	9013      	str	r0, [sp, #76]	; 0x4c
 8019fb4:	e663      	b.n	8019c7e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019fb6:	f113 0801 	adds.w	r8, r3, #1
 8019fba:	f53f af72 	bmi.w	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019fbe:	4540      	cmp	r0, r8
 8019fc0:	f6ff af6f 	blt.w	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019fc4:	f11c 0801 	adds.w	r8, ip, #1
 8019fc8:	f53f af6b 	bmi.w	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019fcc:	45c6      	cmp	lr, r8
 8019fce:	f6ff af68 	blt.w	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019fd2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019fd4:	b200      	sxth	r0, r0
 8019fd6:	9302      	str	r3, [sp, #8]
 8019fd8:	fa0f f38e 	sxth.w	r3, lr
 8019fdc:	9000      	str	r0, [sp, #0]
 8019fde:	9301      	str	r3, [sp, #4]
 8019fe0:	4633      	mov	r3, r6
 8019fe2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019fe4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8019fe8:	e9cd c203 	strd	ip, r2, [sp, #12]
 8019fec:	4639      	mov	r1, r7
 8019fee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019ff0:	f7ff fc74 	bl	80198dc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8019ff4:	e755      	b.n	8019ea2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019ff6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019ff8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019ffc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019ffe:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a002:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a004:	1427      	asrs	r7, r4, #16
 801a006:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a008:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a00c:	142b      	asrs	r3, r5, #16
 801a00e:	fb01 7303 	mla	r3, r1, r3, r7
 801a012:	18e7      	adds	r7, r4, r3
 801a014:	5ce3      	ldrb	r3, [r4, r3]
 801a016:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a01a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a01e:	2a00      	cmp	r2, #0
 801a020:	f000 812e 	beq.w	801a280 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801a024:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a028:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a02c:	9410      	str	r4, [sp, #64]	; 0x40
 801a02e:	0e24      	lsrs	r4, r4, #24
 801a030:	9417      	str	r4, [sp, #92]	; 0x5c
 801a032:	b170      	cbz	r0, 801a052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a034:	eb07 0801 	add.w	r8, r7, r1
 801a038:	5c79      	ldrb	r1, [r7, r1]
 801a03a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a03e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a040:	0e09      	lsrs	r1, r1, #24
 801a042:	9114      	str	r1, [sp, #80]	; 0x50
 801a044:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a048:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a04c:	9111      	str	r1, [sp, #68]	; 0x44
 801a04e:	0e09      	lsrs	r1, r1, #24
 801a050:	9118      	str	r1, [sp, #96]	; 0x60
 801a052:	b292      	uxth	r2, r2
 801a054:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a056:	b280      	uxth	r0, r0
 801a058:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a05a:	fb02 f900 	mul.w	r9, r2, r0
 801a05e:	0112      	lsls	r2, r2, #4
 801a060:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a064:	eba2 0809 	sub.w	r8, r2, r9
 801a068:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a06c:	b280      	uxth	r0, r0
 801a06e:	fa1f f888 	uxth.w	r8, r8
 801a072:	1a12      	subs	r2, r2, r0
 801a074:	fb08 f101 	mul.w	r1, r8, r1
 801a078:	b292      	uxth	r2, r2
 801a07a:	fb02 110c 	mla	r1, r2, ip, r1
 801a07e:	fb00 1104 	mla	r1, r0, r4, r1
 801a082:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a084:	fb09 1104 	mla	r1, r9, r4, r1
 801a088:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a08c:	2900      	cmp	r1, #0
 801a08e:	f000 80ec 	beq.w	801a26a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801a092:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a096:	d019      	beq.n	801a0cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801a098:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a09c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a0a0:	fb0c fa0a 	mul.w	sl, ip, sl
 801a0a4:	fb0c fc03 	mul.w	ip, ip, r3
 801a0a8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a0ac:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a0b0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a0b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a0b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a0bc:	4453      	add	r3, sl
 801a0be:	0a3f      	lsrs	r7, r7, #8
 801a0c0:	0a1b      	lsrs	r3, r3, #8
 801a0c2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a0c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a0ca:	433b      	orrs	r3, r7
 801a0cc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a0ce:	2cff      	cmp	r4, #255	; 0xff
 801a0d0:	d020      	beq.n	801a114 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801a0d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a0d4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a0d8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a0da:	4367      	muls	r7, r4
 801a0dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a0de:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a0e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a0e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a0e8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a0ec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a0f0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0f4:	44bc      	add	ip, r7
 801a0f6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a0fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a0fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a102:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a106:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a10a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a10e:	ea4c 040a 	orr.w	r4, ip, sl
 801a112:	9410      	str	r4, [sp, #64]	; 0x40
 801a114:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a116:	2cff      	cmp	r4, #255	; 0xff
 801a118:	d020      	beq.n	801a15c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801a11a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a11c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a120:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a122:	4367      	muls	r7, r4
 801a124:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a126:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a12a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a12e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a130:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a134:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a138:	fb04 fa0a 	mul.w	sl, r4, sl
 801a13c:	44bc      	add	ip, r7
 801a13e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a142:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a146:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a14a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a14e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a152:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a156:	ea4c 040a 	orr.w	r4, ip, sl
 801a15a:	940b      	str	r4, [sp, #44]	; 0x2c
 801a15c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a15e:	2cff      	cmp	r4, #255	; 0xff
 801a160:	d020      	beq.n	801a1a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801a162:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a164:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a168:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a16a:	4367      	muls	r7, r4
 801a16c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a16e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a172:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a176:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a178:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a17c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a180:	fb04 fa0a 	mul.w	sl, r4, sl
 801a184:	44bc      	add	ip, r7
 801a186:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a18a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a18e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a192:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a196:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a19a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a19e:	ea4c 040a 	orr.w	r4, ip, sl
 801a1a2:	9411      	str	r4, [sp, #68]	; 0x44
 801a1a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a1a6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a1aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a1ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a1b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a1b4:	fb08 f707 	mul.w	r7, r8, r7
 801a1b8:	fb02 770c 	mla	r7, r2, ip, r7
 801a1bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a1c0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a1c2:	fb00 770c 	mla	r7, r0, ip, r7
 801a1c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a1ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a1cc:	fb09 770c 	mla	r7, r9, ip, r7
 801a1d0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a1d4:	fb08 f80c 	mul.w	r8, r8, ip
 801a1d8:	0a3f      	lsrs	r7, r7, #8
 801a1da:	fb02 8303 	mla	r3, r2, r3, r8
 801a1de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a1e0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a1e4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a1e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a1ea:	fb00 330a 	mla	r3, r0, sl, r3
 801a1ee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a1f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a1f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1fe:	434b      	muls	r3, r1
 801a200:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a204:	1c59      	adds	r1, r3, #1
 801a206:	ea47 070c 	orr.w	r7, r7, ip
 801a20a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a20e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a212:	b2fa      	uxtb	r2, r7
 801a214:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a218:	fb12 f200 	smulbb	r2, r2, r0
 801a21c:	b2c9      	uxtb	r1, r1
 801a21e:	fb03 2301 	mla	r3, r3, r1, r2
 801a222:	b29b      	uxth	r3, r3
 801a224:	1c5a      	adds	r2, r3, #1
 801a226:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a22a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a22e:	fb12 f201 	smulbb	r2, r2, r1
 801a232:	121b      	asrs	r3, r3, #8
 801a234:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a238:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a23c:	0c3f      	lsrs	r7, r7, #16
 801a23e:	fb03 2300 	mla	r3, r3, r0, r2
 801a242:	b29b      	uxth	r3, r3
 801a244:	1c5a      	adds	r2, r3, #1
 801a246:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a24a:	121b      	asrs	r3, r3, #8
 801a24c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a250:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a254:	fb13 f101 	smulbb	r1, r3, r1
 801a258:	fb07 1700 	mla	r7, r7, r0, r1
 801a25c:	b2bf      	uxth	r7, r7
 801a25e:	1c7b      	adds	r3, r7, #1
 801a260:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a264:	123f      	asrs	r7, r7, #8
 801a266:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a26a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a26c:	f10e 0e03 	add.w	lr, lr, #3
 801a270:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a272:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a276:	441a      	add	r2, r3
 801a278:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a27a:	9229      	str	r2, [sp, #164]	; 0xa4
 801a27c:	441d      	add	r5, r3
 801a27e:	e645      	b.n	8019f0c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801a280:	2800      	cmp	r0, #0
 801a282:	f43f aee6 	beq.w	801a052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a286:	5c79      	ldrb	r1, [r7, r1]
 801a288:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a28c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a28e:	0e09      	lsrs	r1, r1, #24
 801a290:	9114      	str	r1, [sp, #80]	; 0x50
 801a292:	e6de      	b.n	801a052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a294:	b01f      	add	sp, #124	; 0x7c
 801a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a29a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a29a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a29e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801a2a2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a2a6:	2d00      	cmp	r5, #0
 801a2a8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801a2ac:	fb05 700e 	mla	r0, r5, lr, r7
 801a2b0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801a2b4:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801a2b8:	eb02 0800 	add.w	r8, r2, r0
 801a2bc:	f2c0 8105 	blt.w	801a4ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a2c0:	45a9      	cmp	r9, r5
 801a2c2:	f340 8102 	ble.w	801a4ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a2c6:	2f00      	cmp	r7, #0
 801a2c8:	f2c0 80fd 	blt.w	801a4c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a2cc:	45be      	cmp	lr, r7
 801a2ce:	f340 80fa 	ble.w	801a4c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a2d2:	5c12      	ldrb	r2, [r2, r0]
 801a2d4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a2d8:	1c7a      	adds	r2, r7, #1
 801a2da:	f100 80f9 	bmi.w	801a4d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a2de:	4596      	cmp	lr, r2
 801a2e0:	f340 80f6 	ble.w	801a4d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a2e4:	2c00      	cmp	r4, #0
 801a2e6:	f000 80f5 	beq.w	801a4d4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801a2ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a2ee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a2f2:	3501      	adds	r5, #1
 801a2f4:	f100 80f2 	bmi.w	801a4dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a2f8:	45a9      	cmp	r9, r5
 801a2fa:	f340 80ef 	ble.w	801a4dc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a2fe:	f1bc 0f00 	cmp.w	ip, #0
 801a302:	f000 80ee 	beq.w	801a4e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801a306:	2f00      	cmp	r7, #0
 801a308:	f2c0 80e6 	blt.w	801a4d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a30c:	45be      	cmp	lr, r7
 801a30e:	f340 80e3 	ble.w	801a4d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a312:	f818 200e 	ldrb.w	r2, [r8, lr]
 801a316:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a31a:	3701      	adds	r7, #1
 801a31c:	f100 80e4 	bmi.w	801a4e8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a320:	45be      	cmp	lr, r7
 801a322:	f340 80e1 	ble.w	801a4e8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a326:	2c00      	cmp	r4, #0
 801a328:	f000 80e0 	beq.w	801a4ec <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801a32c:	44c6      	add	lr, r8
 801a32e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a332:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a336:	b2a3      	uxth	r3, r4
 801a338:	fa1f fc8c 	uxth.w	ip, ip
 801a33c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801a340:	fb0c fe03 	mul.w	lr, ip, r3
 801a344:	011b      	lsls	r3, r3, #4
 801a346:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801a34a:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801a34e:	eba3 070e 	sub.w	r7, r3, lr
 801a352:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801a356:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801a35a:	fa1f f48c 	uxth.w	r4, ip
 801a35e:	b2bf      	uxth	r7, r7
 801a360:	1b1b      	subs	r3, r3, r4
 801a362:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a366:	fb07 fc0a 	mul.w	ip, r7, sl
 801a36a:	b29b      	uxth	r3, r3
 801a36c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801a370:	9300      	str	r3, [sp, #0]
 801a372:	fb04 cc09 	mla	ip, r4, r9, ip
 801a376:	fb0e cc08 	mla	ip, lr, r8, ip
 801a37a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a37e:	9301      	str	r3, [sp, #4]
 801a380:	2b00      	cmp	r3, #0
 801a382:	f000 809d 	beq.w	801a4c0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801a386:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801a38a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a38e:	fb0b fc0c 	mul.w	ip, fp, ip
 801a392:	fb0b f606 	mul.w	r6, fp, r6
 801a396:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801a39a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a39e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801a3a2:	44dc      	add	ip, fp
 801a3a4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801a3a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a3ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3b0:	fb0a fb0b 	mul.w	fp, sl, fp
 801a3b4:	fb0a fa00 	mul.w	sl, sl, r0
 801a3b8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801a3bc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a3c0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a3c4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a3c8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801a3cc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a3d0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a3d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3d8:	0a36      	lsrs	r6, r6, #8
 801a3da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3de:	44dc      	add	ip, fp
 801a3e0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a3e4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a3e8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a3ec:	fb09 fb0b 	mul.w	fp, r9, fp
 801a3f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3f4:	fb09 f905 	mul.w	r9, r9, r5
 801a3f8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801a3fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a400:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801a404:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a408:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a40c:	fb0c fc07 	mul.w	ip, ip, r7
 801a410:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801a414:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801a418:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a41c:	4458      	add	r0, fp
 801a41e:	fb08 f505 	mul.w	r5, r8, r5
 801a422:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a426:	fb08 f802 	mul.w	r8, r8, r2
 801a42a:	0a00      	lsrs	r0, r0, #8
 801a42c:	0a2a      	lsrs	r2, r5, #8
 801a42e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801a432:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a436:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a43a:	4415      	add	r5, r2
 801a43c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801a440:	0a2d      	lsrs	r5, r5, #8
 801a442:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a446:	9a00      	ldr	r2, [sp, #0]
 801a448:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a44c:	fb03 cc02 	mla	ip, r3, r2, ip
 801a450:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a454:	9b01      	ldr	r3, [sp, #4]
 801a456:	fb05 c50e 	mla	r5, r5, lr, ip
 801a45a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a45e:	43db      	mvns	r3, r3
 801a460:	fb00 5004 	mla	r0, r0, r4, r5
 801a464:	b2db      	uxtb	r3, r3
 801a466:	0a00      	lsrs	r0, r0, #8
 801a468:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801a46c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801a470:	4378      	muls	r0, r7
 801a472:	fb02 0006 	mla	r0, r2, r6, r0
 801a476:	780a      	ldrb	r2, [r1, #0]
 801a478:	fb0e 0e08 	mla	lr, lr, r8, r0
 801a47c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801a480:	fb04 e000 	mla	r0, r4, r0, lr
 801a484:	fb02 f403 	mul.w	r4, r2, r3
 801a488:	0a00      	lsrs	r0, r0, #8
 801a48a:	1c62      	adds	r2, r4, #1
 801a48c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a490:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a494:	4328      	orrs	r0, r5
 801a496:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a49a:	700a      	strb	r2, [r1, #0]
 801a49c:	784a      	ldrb	r2, [r1, #1]
 801a49e:	435a      	muls	r2, r3
 801a4a0:	1c54      	adds	r4, r2, #1
 801a4a2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801a4a6:	0a02      	lsrs	r2, r0, #8
 801a4a8:	0c00      	lsrs	r0, r0, #16
 801a4aa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a4ae:	704a      	strb	r2, [r1, #1]
 801a4b0:	788a      	ldrb	r2, [r1, #2]
 801a4b2:	4353      	muls	r3, r2
 801a4b4:	1c5a      	adds	r2, r3, #1
 801a4b6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a4ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a4be:	7088      	strb	r0, [r1, #2]
 801a4c0:	b003      	add	sp, #12
 801a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c6:	2600      	movs	r6, #0
 801a4c8:	e706      	b.n	801a2d8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801a4ca:	2000      	movs	r0, #0
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	e710      	b.n	801a2f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a4d0:	2000      	movs	r0, #0
 801a4d2:	e70e      	b.n	801a2f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	e70c      	b.n	801a2f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a4d8:	2500      	movs	r5, #0
 801a4da:	e71e      	b.n	801a31a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801a4dc:	2200      	movs	r2, #0
 801a4de:	4615      	mov	r5, r2
 801a4e0:	e729      	b.n	801a336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4e2:	4662      	mov	r2, ip
 801a4e4:	4665      	mov	r5, ip
 801a4e6:	e726      	b.n	801a336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4e8:	2200      	movs	r2, #0
 801a4ea:	e724      	b.n	801a336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4ec:	4622      	mov	r2, r4
 801a4ee:	e722      	b.n	801a336 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801a4f0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4f4:	b09b      	sub	sp, #108	; 0x6c
 801a4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4fa:	9218      	str	r2, [sp, #96]	; 0x60
 801a4fc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a4fe:	9019      	str	r0, [sp, #100]	; 0x64
 801a500:	9116      	str	r1, [sp, #88]	; 0x58
 801a502:	6850      	ldr	r0, [r2, #4]
 801a504:	9307      	str	r3, [sp, #28]
 801a506:	6812      	ldr	r2, [r2, #0]
 801a508:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801a50a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a50e:	fb00 1303 	mla	r3, r0, r3, r1
 801a512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a516:	18d3      	adds	r3, r2, r3
 801a518:	930a      	str	r3, [sp, #40]	; 0x28
 801a51a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a520:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a522:	685e      	ldr	r6, [r3, #4]
 801a524:	3604      	adds	r6, #4
 801a526:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a528:	2b00      	cmp	r3, #0
 801a52a:	dc03      	bgt.n	801a534 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a52c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a52e:	2b00      	cmp	r3, #0
 801a530:	f340 834f 	ble.w	801abd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a534:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a536:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a53a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a53e:	1e48      	subs	r0, r1, #1
 801a540:	1e57      	subs	r7, r2, #1
 801a542:	9b07      	ldr	r3, [sp, #28]
 801a544:	2b00      	cmp	r3, #0
 801a546:	f340 8178 	ble.w	801a83a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a54a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a54c:	142b      	asrs	r3, r5, #16
 801a54e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a552:	d406      	bmi.n	801a562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a554:	4584      	cmp	ip, r0
 801a556:	da04      	bge.n	801a562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a558:	2b00      	cmp	r3, #0
 801a55a:	db02      	blt.n	801a562 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a55c:	42bb      	cmp	r3, r7
 801a55e:	f2c0 816d 	blt.w	801a83c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801a562:	f11c 0c01 	adds.w	ip, ip, #1
 801a566:	f100 815b 	bmi.w	801a820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a56a:	4561      	cmp	r1, ip
 801a56c:	f2c0 8158 	blt.w	801a820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a570:	3301      	adds	r3, #1
 801a572:	f100 8155 	bmi.w	801a820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a576:	429a      	cmp	r2, r3
 801a578:	f2c0 8152 	blt.w	801a820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a57c:	9b07      	ldr	r3, [sp, #28]
 801a57e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a580:	9317      	str	r3, [sp, #92]	; 0x5c
 801a582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a584:	2b00      	cmp	r3, #0
 801a586:	f340 8178 	ble.w	801a87a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a58a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a58c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a590:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a594:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a598:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a59a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a59e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a5a0:	141b      	asrs	r3, r3, #16
 801a5a2:	f100 81ba 	bmi.w	801a91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a5a6:	f101 38ff 	add.w	r8, r1, #4294967295
 801a5aa:	4543      	cmp	r3, r8
 801a5ac:	f280 81b5 	bge.w	801a91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a5b0:	f1bc 0f00 	cmp.w	ip, #0
 801a5b4:	f2c0 81b1 	blt.w	801a91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a5b8:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a5bc:	45c4      	cmp	ip, r8
 801a5be:	f280 81ac 	bge.w	801a91a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a5c2:	b209      	sxth	r1, r1
 801a5c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a5c6:	fb0c 3301 	mla	r3, ip, r1, r3
 801a5ca:	eb04 0803 	add.w	r8, r4, r3
 801a5ce:	5ce3      	ldrb	r3, [r4, r3]
 801a5d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a5d4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a5d8:	2a00      	cmp	r2, #0
 801a5da:	f000 8193 	beq.w	801a904 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801a5de:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a5e2:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a5e6:	940b      	str	r4, [sp, #44]	; 0x2c
 801a5e8:	0e24      	lsrs	r4, r4, #24
 801a5ea:	9412      	str	r4, [sp, #72]	; 0x48
 801a5ec:	b178      	cbz	r0, 801a60e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a5ee:	eb08 0c01 	add.w	ip, r8, r1
 801a5f2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a5f6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a5fa:	9108      	str	r1, [sp, #32]
 801a5fc:	0e09      	lsrs	r1, r1, #24
 801a5fe:	9110      	str	r1, [sp, #64]	; 0x40
 801a600:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a604:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a608:	910c      	str	r1, [sp, #48]	; 0x30
 801a60a:	0e09      	lsrs	r1, r1, #24
 801a60c:	9113      	str	r1, [sp, #76]	; 0x4c
 801a60e:	b292      	uxth	r2, r2
 801a610:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a612:	b280      	uxth	r0, r0
 801a614:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a616:	fb02 f900 	mul.w	r9, r2, r0
 801a61a:	0112      	lsls	r2, r2, #4
 801a61c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a620:	eba2 0809 	sub.w	r8, r2, r9
 801a624:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a628:	b280      	uxth	r0, r0
 801a62a:	fa1f f888 	uxth.w	r8, r8
 801a62e:	1a12      	subs	r2, r2, r0
 801a630:	fb08 f101 	mul.w	r1, r8, r1
 801a634:	b292      	uxth	r2, r2
 801a636:	fb02 110e 	mla	r1, r2, lr, r1
 801a63a:	fb00 1104 	mla	r1, r0, r4, r1
 801a63e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a640:	fb09 1104 	mla	r1, r9, r4, r1
 801a644:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a648:	2900      	cmp	r1, #0
 801a64a:	f000 80de 	beq.w	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a64e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a652:	d01b      	beq.n	801a68c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801a654:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a658:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a65c:	fb0e fa0a 	mul.w	sl, lr, sl
 801a660:	fb0e fe03 	mul.w	lr, lr, r3
 801a664:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a668:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a66c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a670:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a674:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a678:	4453      	add	r3, sl
 801a67a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a67e:	0a1b      	lsrs	r3, r3, #8
 801a680:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a684:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a688:	ea43 030c 	orr.w	r3, r3, ip
 801a68c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a68e:	2cff      	cmp	r4, #255	; 0xff
 801a690:	d021      	beq.n	801a6d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a692:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a694:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a698:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a69a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a69e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a6a0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a6a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a6a6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a6aa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a6ae:	fb04 fa0a 	mul.w	sl, r4, sl
 801a6b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a6b6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a6ba:	44de      	add	lr, fp
 801a6bc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a6c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a6c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a6c8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a6cc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a6d0:	ea4e 040a 	orr.w	r4, lr, sl
 801a6d4:	940b      	str	r4, [sp, #44]	; 0x2c
 801a6d6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a6d8:	2cff      	cmp	r4, #255	; 0xff
 801a6da:	d021      	beq.n	801a720 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a6dc:	9c08      	ldr	r4, [sp, #32]
 801a6de:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a6e2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a6e4:	fb04 fb0b 	mul.w	fp, r4, fp
 801a6e8:	9c08      	ldr	r4, [sp, #32]
 801a6ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a6ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a6f0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a6f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a6f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a6fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a700:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a704:	44de      	add	lr, fp
 801a706:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a70a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a70e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a712:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a716:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a71a:	ea4e 040a 	orr.w	r4, lr, sl
 801a71e:	9408      	str	r4, [sp, #32]
 801a720:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a722:	2cff      	cmp	r4, #255	; 0xff
 801a724:	d021      	beq.n	801a76a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a726:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a728:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a72c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a72e:	fb04 fb0b 	mul.w	fp, r4, fp
 801a732:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a734:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a73a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a73e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a742:	fb04 fa0a 	mul.w	sl, r4, sl
 801a746:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a74a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a74e:	44de      	add	lr, fp
 801a750:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a754:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a758:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a75c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a760:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a764:	ea4e 040a 	orr.w	r4, lr, sl
 801a768:	940c      	str	r4, [sp, #48]	; 0x30
 801a76a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a76c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a774:	43c9      	mvns	r1, r1
 801a776:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a77a:	9c08      	ldr	r4, [sp, #32]
 801a77c:	b2c9      	uxtb	r1, r1
 801a77e:	fb08 fc0c 	mul.w	ip, r8, ip
 801a782:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a786:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a78a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a78c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a790:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a794:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a796:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a79a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a79e:	fb08 f80e 	mul.w	r8, r8, lr
 801a7a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a7a6:	fb02 8303 	mla	r3, r2, r3, r8
 801a7aa:	9a08      	ldr	r2, [sp, #32]
 801a7ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a7b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a7b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a7b6:	fb00 330a 	mla	r3, r0, sl, r3
 801a7ba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a7be:	fb09 3900 	mla	r9, r9, r0, r3
 801a7c2:	783b      	ldrb	r3, [r7, #0]
 801a7c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a7c8:	fb03 f201 	mul.w	r2, r3, r1
 801a7cc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a7d0:	1c53      	adds	r3, r2, #1
 801a7d2:	ea4c 0c09 	orr.w	ip, ip, r9
 801a7d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a7da:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801a7de:	703b      	strb	r3, [r7, #0]
 801a7e0:	787b      	ldrb	r3, [r7, #1]
 801a7e2:	434b      	muls	r3, r1
 801a7e4:	1c5a      	adds	r2, r3, #1
 801a7e6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a7ea:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a7ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a7f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a7f6:	707b      	strb	r3, [r7, #1]
 801a7f8:	78bb      	ldrb	r3, [r7, #2]
 801a7fa:	4359      	muls	r1, r3
 801a7fc:	1c4b      	adds	r3, r1, #1
 801a7fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a802:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a806:	f887 c002 	strb.w	ip, [r7, #2]
 801a80a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a80c:	3703      	adds	r7, #3
 801a80e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a810:	441a      	add	r2, r3
 801a812:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a814:	441d      	add	r5, r3
 801a816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a818:	9225      	str	r2, [sp, #148]	; 0x94
 801a81a:	3b01      	subs	r3, #1
 801a81c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a81e:	e6b0      	b.n	801a582 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a820:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a822:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a824:	441c      	add	r4, r3
 801a826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a828:	441d      	add	r5, r3
 801a82a:	9b07      	ldr	r3, [sp, #28]
 801a82c:	9425      	str	r4, [sp, #148]	; 0x94
 801a82e:	3b01      	subs	r3, #1
 801a830:	9307      	str	r3, [sp, #28]
 801a832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a834:	3303      	adds	r3, #3
 801a836:	930a      	str	r3, [sp, #40]	; 0x28
 801a838:	e683      	b.n	801a542 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a83a:	d026      	beq.n	801a88a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801a83c:	9b07      	ldr	r3, [sp, #28]
 801a83e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a840:	3b01      	subs	r3, #1
 801a842:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a844:	fb00 4003 	mla	r0, r0, r3, r4
 801a848:	1400      	asrs	r0, r0, #16
 801a84a:	f53f ae97 	bmi.w	801a57c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a84e:	3901      	subs	r1, #1
 801a850:	4288      	cmp	r0, r1
 801a852:	f6bf ae93 	bge.w	801a57c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a856:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a858:	fb01 5303 	mla	r3, r1, r3, r5
 801a85c:	141b      	asrs	r3, r3, #16
 801a85e:	f53f ae8d 	bmi.w	801a57c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a862:	3a01      	subs	r2, #1
 801a864:	4293      	cmp	r3, r2
 801a866:	f6bf ae89 	bge.w	801a57c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a86c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a870:	f103 0e03 	add.w	lr, r3, #3
 801a874:	f1bb 0f00 	cmp.w	fp, #0
 801a878:	dc6d      	bgt.n	801a956 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801a87a:	9b07      	ldr	r3, [sp, #28]
 801a87c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a882:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a886:	4423      	add	r3, r4
 801a888:	930a      	str	r3, [sp, #40]	; 0x28
 801a88a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	f340 81a0 	ble.w	801abd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a892:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a896:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a898:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a89c:	eeb0 6a62 	vmov.f32	s12, s5
 801a8a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a8a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a8a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8ac:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801a8b0:	eeb0 6a43 	vmov.f32	s12, s6
 801a8b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a8b8:	ee16 5a10 	vmov	r5, s12
 801a8bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8d4:	ee12 2a90 	vmov	r2, s5
 801a8d8:	eef0 2a47 	vmov.f32	s5, s14
 801a8dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8e0:	ee13 2a10 	vmov	r2, s6
 801a8e4:	9327      	str	r3, [sp, #156]	; 0x9c
 801a8e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a8e8:	eeb0 3a67 	vmov.f32	s6, s15
 801a8ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8f0:	9328      	str	r3, [sp, #160]	; 0xa0
 801a8f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a8f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a8f6:	3b01      	subs	r3, #1
 801a8f8:	9316      	str	r3, [sp, #88]	; 0x58
 801a8fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a8fc:	bf08      	it	eq
 801a8fe:	4613      	moveq	r3, r2
 801a900:	9307      	str	r3, [sp, #28]
 801a902:	e610      	b.n	801a526 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a904:	2800      	cmp	r0, #0
 801a906:	f43f ae82 	beq.w	801a60e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a90a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a90e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a912:	9108      	str	r1, [sp, #32]
 801a914:	0e09      	lsrs	r1, r1, #24
 801a916:	9110      	str	r1, [sp, #64]	; 0x40
 801a918:	e679      	b.n	801a60e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a91a:	f113 0801 	adds.w	r8, r3, #1
 801a91e:	f53f af74 	bmi.w	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a922:	4541      	cmp	r1, r8
 801a924:	f6ff af71 	blt.w	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a928:	f11c 0801 	adds.w	r8, ip, #1
 801a92c:	f53f af6d 	bmi.w	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a930:	45c6      	cmp	lr, r8
 801a932:	f6ff af6a 	blt.w	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a936:	b209      	sxth	r1, r1
 801a938:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a93c:	fa0f f38e 	sxth.w	r3, lr
 801a940:	9100      	str	r1, [sp, #0]
 801a942:	4639      	mov	r1, r7
 801a944:	9301      	str	r3, [sp, #4]
 801a946:	4633      	mov	r3, r6
 801a948:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801a94c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a94e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a950:	f7ff fca3 	bl	801a29a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801a954:	e759      	b.n	801a80a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a956:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a958:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a95c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a95e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a962:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a964:	1427      	asrs	r7, r4, #16
 801a966:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a968:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a96c:	142b      	asrs	r3, r5, #16
 801a96e:	fb01 7303 	mla	r3, r1, r3, r7
 801a972:	18e7      	adds	r7, r4, r3
 801a974:	5ce3      	ldrb	r3, [r4, r3]
 801a976:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a97a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a97e:	2a00      	cmp	r2, #0
 801a980:	f000 811d 	beq.w	801abbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801a984:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a988:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a98c:	940d      	str	r4, [sp, #52]	; 0x34
 801a98e:	0e24      	lsrs	r4, r4, #24
 801a990:	9414      	str	r4, [sp, #80]	; 0x50
 801a992:	b170      	cbz	r0, 801a9b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a994:	eb07 0801 	add.w	r8, r7, r1
 801a998:	5c79      	ldrb	r1, [r7, r1]
 801a99a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a99e:	9109      	str	r1, [sp, #36]	; 0x24
 801a9a0:	0e09      	lsrs	r1, r1, #24
 801a9a2:	9111      	str	r1, [sp, #68]	; 0x44
 801a9a4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a9a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a9ac:	910e      	str	r1, [sp, #56]	; 0x38
 801a9ae:	0e09      	lsrs	r1, r1, #24
 801a9b0:	9115      	str	r1, [sp, #84]	; 0x54
 801a9b2:	b292      	uxth	r2, r2
 801a9b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a9b6:	b280      	uxth	r0, r0
 801a9b8:	fb02 f900 	mul.w	r9, r2, r0
 801a9bc:	0112      	lsls	r2, r2, #4
 801a9be:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a9c2:	eba2 0809 	sub.w	r8, r2, r9
 801a9c6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a9cc:	b280      	uxth	r0, r0
 801a9ce:	fa1f f888 	uxth.w	r8, r8
 801a9d2:	1a09      	subs	r1, r1, r0
 801a9d4:	fb08 f202 	mul.w	r2, r8, r2
 801a9d8:	b289      	uxth	r1, r1
 801a9da:	fb01 220c 	mla	r2, r1, ip, r2
 801a9de:	fb00 2204 	mla	r2, r0, r4, r2
 801a9e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a9e4:	fb09 2204 	mla	r2, r9, r4, r2
 801a9e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a9ec:	2a00      	cmp	r2, #0
 801a9ee:	f000 80db 	beq.w	801aba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801a9f2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a9f6:	d019      	beq.n	801aa2c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801a9f8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a9fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aa00:	fb0c fa0a 	mul.w	sl, ip, sl
 801aa04:	fb0c fc03 	mul.w	ip, ip, r3
 801aa08:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aa0c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801aa10:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801aa14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aa18:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801aa1c:	4453      	add	r3, sl
 801aa1e:	0a3f      	lsrs	r7, r7, #8
 801aa20:	0a1b      	lsrs	r3, r3, #8
 801aa22:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801aa26:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aa2a:	433b      	orrs	r3, r7
 801aa2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aa2e:	2cff      	cmp	r4, #255	; 0xff
 801aa30:	d020      	beq.n	801aa74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801aa32:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aa34:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801aa38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aa3a:	4367      	muls	r7, r4
 801aa3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aa3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aa42:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aa46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aa48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aa4c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa50:	fb04 fa0a 	mul.w	sl, r4, sl
 801aa54:	44bc      	add	ip, r7
 801aa56:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801aa5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa5e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aa62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa66:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aa6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aa6e:	ea4c 040a 	orr.w	r4, ip, sl
 801aa72:	940d      	str	r4, [sp, #52]	; 0x34
 801aa74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aa76:	2cff      	cmp	r4, #255	; 0xff
 801aa78:	d020      	beq.n	801aabc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801aa7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801aa7c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801aa80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aa82:	4367      	muls	r7, r4
 801aa84:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801aa86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aa8a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aa8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aa90:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aa94:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa98:	fb04 fa0a 	mul.w	sl, r4, sl
 801aa9c:	44bc      	add	ip, r7
 801aa9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801aaa2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aaa6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aaaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aaae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aab2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aab6:	ea4c 040a 	orr.w	r4, ip, sl
 801aaba:	9409      	str	r4, [sp, #36]	; 0x24
 801aabc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aabe:	2cff      	cmp	r4, #255	; 0xff
 801aac0:	d020      	beq.n	801ab04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801aac2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aac4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801aac8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aaca:	4367      	muls	r7, r4
 801aacc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801aace:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aad2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aad6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aad8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aadc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aae0:	fb04 fa0a 	mul.w	sl, r4, sl
 801aae4:	44bc      	add	ip, r7
 801aae6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801aaea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aaee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aaf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aaf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aafa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801aafe:	ea4c 040a 	orr.w	r4, ip, sl
 801ab02:	940e      	str	r4, [sp, #56]	; 0x38
 801ab04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ab06:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ab0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ab0e:	43d2      	mvns	r2, r2
 801ab10:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ab14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ab16:	b2d2      	uxtb	r2, r2
 801ab18:	fb08 f707 	mul.w	r7, r8, r7
 801ab1c:	fb01 770c 	mla	r7, r1, ip, r7
 801ab20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ab26:	fb00 770c 	mla	r7, r0, ip, r7
 801ab2a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ab2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ab30:	fb09 770c 	mla	r7, r9, ip, r7
 801ab34:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ab38:	fb08 f80c 	mul.w	r8, r8, ip
 801ab3c:	0a3f      	lsrs	r7, r7, #8
 801ab3e:	fb01 8303 	mla	r3, r1, r3, r8
 801ab42:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ab44:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ab48:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ab4c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ab4e:	fb00 330a 	mla	r3, r0, sl, r3
 801ab52:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ab56:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ab5a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ab5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab62:	fb03 f102 	mul.w	r1, r3, r2
 801ab66:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ab6a:	1c4b      	adds	r3, r1, #1
 801ab6c:	ea47 070c 	orr.w	r7, r7, ip
 801ab70:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ab74:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ab78:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ab7c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801ab80:	4353      	muls	r3, r2
 801ab82:	1c59      	adds	r1, r3, #1
 801ab84:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ab88:	0a3b      	lsrs	r3, r7, #8
 801ab8a:	0c3f      	lsrs	r7, r7, #16
 801ab8c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ab90:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ab94:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ab98:	435a      	muls	r2, r3
 801ab9a:	1c53      	adds	r3, r2, #1
 801ab9c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801aba0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801aba4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801aba8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801abaa:	f10e 0e03 	add.w	lr, lr, #3
 801abae:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801abb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801abb4:	441a      	add	r2, r3
 801abb6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801abb8:	9225      	str	r2, [sp, #148]	; 0x94
 801abba:	441d      	add	r5, r3
 801abbc:	e65a      	b.n	801a874 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801abbe:	2800      	cmp	r0, #0
 801abc0:	f43f aef7 	beq.w	801a9b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801abc4:	5c79      	ldrb	r1, [r7, r1]
 801abc6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801abca:	9109      	str	r1, [sp, #36]	; 0x24
 801abcc:	0e09      	lsrs	r1, r1, #24
 801abce:	9111      	str	r1, [sp, #68]	; 0x44
 801abd0:	e6ef      	b.n	801a9b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801abd2:	b01b      	add	sp, #108	; 0x6c
 801abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abd8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abdc:	b08d      	sub	sp, #52	; 0x34
 801abde:	468b      	mov	fp, r1
 801abe0:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801abe4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801abe8:	fb0c 5703 	mla	r7, ip, r3, r5
 801abec:	f1bc 0f00 	cmp.w	ip, #0
 801abf0:	910b      	str	r1, [sp, #44]	; 0x2c
 801abf2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801abf6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801abfa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801abfe:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801ac02:	eb02 0607 	add.w	r6, r2, r7
 801ac06:	f89b 4000 	ldrb.w	r4, [fp]
 801ac0a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801ac0e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ac12:	f2c0 80c1 	blt.w	801ad98 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ac16:	45e6      	cmp	lr, ip
 801ac18:	f340 80be 	ble.w	801ad98 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ac1c:	2d00      	cmp	r5, #0
 801ac1e:	f2c0 80b7 	blt.w	801ad90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ac22:	42ab      	cmp	r3, r5
 801ac24:	f340 80b4 	ble.w	801ad90 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ac28:	5dd2      	ldrb	r2, [r2, r7]
 801ac2a:	9205      	str	r2, [sp, #20]
 801ac2c:	7872      	ldrb	r2, [r6, #1]
 801ac2e:	9206      	str	r2, [sp, #24]
 801ac30:	78b2      	ldrb	r2, [r6, #2]
 801ac32:	9207      	str	r2, [sp, #28]
 801ac34:	1c6a      	adds	r2, r5, #1
 801ac36:	f100 80b6 	bmi.w	801ada6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ac3a:	4293      	cmp	r3, r2
 801ac3c:	f340 80b3 	ble.w	801ada6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ac40:	f1b8 0f00 	cmp.w	r8, #0
 801ac44:	f000 80af 	beq.w	801ada6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801ac48:	78f2      	ldrb	r2, [r6, #3]
 801ac4a:	9201      	str	r2, [sp, #4]
 801ac4c:	7932      	ldrb	r2, [r6, #4]
 801ac4e:	9202      	str	r2, [sp, #8]
 801ac50:	7972      	ldrb	r2, [r6, #5]
 801ac52:	9203      	str	r2, [sp, #12]
 801ac54:	f11c 0c01 	adds.w	ip, ip, #1
 801ac58:	f100 80ad 	bmi.w	801adb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ac5c:	45e6      	cmp	lr, ip
 801ac5e:	f340 80aa 	ble.w	801adb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ac62:	f1ba 0f00 	cmp.w	sl, #0
 801ac66:	f000 80a6 	beq.w	801adb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ac6a:	2d00      	cmp	r5, #0
 801ac6c:	f2c0 809f 	blt.w	801adae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ac70:	42ab      	cmp	r3, r5
 801ac72:	f340 809c 	ble.w	801adae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ac76:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ac7a:	f816 9002 	ldrb.w	r9, [r6, r2]
 801ac7e:	2203      	movs	r2, #3
 801ac80:	fb03 6c02 	mla	ip, r3, r2, r6
 801ac84:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ac88:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ac8c:	9704      	str	r7, [sp, #16]
 801ac8e:	3501      	adds	r5, #1
 801ac90:	f100 8098 	bmi.w	801adc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ac94:	42ab      	cmp	r3, r5
 801ac96:	f340 8095 	ble.w	801adc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ac9a:	f1b8 0f00 	cmp.w	r8, #0
 801ac9e:	f000 8091 	beq.w	801adc4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801aca2:	f04f 0c03 	mov.w	ip, #3
 801aca6:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801acaa:	5cb5      	ldrb	r5, [r6, r2]
 801acac:	fb03 620c 	mla	r2, r3, ip, r6
 801acb0:	fb03 630c 	mla	r3, r3, ip, r6
 801acb4:	7912      	ldrb	r2, [r2, #4]
 801acb6:	795e      	ldrb	r6, [r3, #5]
 801acb8:	fa1f f388 	uxth.w	r3, r8
 801acbc:	fa1f fc8a 	uxth.w	ip, sl
 801acc0:	fb03 f70c 	mul.w	r7, r3, ip
 801acc4:	011b      	lsls	r3, r3, #4
 801acc6:	9708      	str	r7, [sp, #32]
 801acc8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801accc:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801acd0:	1bdb      	subs	r3, r3, r7
 801acd2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801acd6:	fa1f fc8c 	uxth.w	ip, ip
 801acda:	b29b      	uxth	r3, r3
 801acdc:	9709      	str	r7, [sp, #36]	; 0x24
 801acde:	ebaa 0a0c 	sub.w	sl, sl, ip
 801ace2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ace4:	930a      	str	r3, [sp, #40]	; 0x28
 801ace6:	fa1f fa8a 	uxth.w	sl, sl
 801acea:	ea6f 0807 	mvn.w	r8, r7
 801acee:	9f01      	ldr	r7, [sp, #4]
 801acf0:	435f      	muls	r7, r3
 801acf2:	9b05      	ldr	r3, [sp, #20]
 801acf4:	fa5f f888 	uxtb.w	r8, r8
 801acf8:	fb0a 7703 	mla	r7, sl, r3, r7
 801acfc:	9b08      	ldr	r3, [sp, #32]
 801acfe:	fb14 f408 	smulbb	r4, r4, r8
 801ad02:	fb0c 7709 	mla	r7, ip, r9, r7
 801ad06:	fb10 f008 	smulbb	r0, r0, r8
 801ad0a:	fb11 f108 	smulbb	r1, r1, r8
 801ad0e:	fb03 7705 	mla	r7, r3, r5, r7
 801ad12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad14:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801ad18:	fb07 4703 	mla	r7, r7, r3, r4
 801ad1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad1e:	b2bf      	uxth	r7, r7
 801ad20:	1c7c      	adds	r4, r7, #1
 801ad22:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801ad26:	1224      	asrs	r4, r4, #8
 801ad28:	f88b 4000 	strb.w	r4, [fp]
 801ad2c:	9c02      	ldr	r4, [sp, #8]
 801ad2e:	435c      	muls	r4, r3
 801ad30:	9b06      	ldr	r3, [sp, #24]
 801ad32:	fb0a 4403 	mla	r4, sl, r3, r4
 801ad36:	9b04      	ldr	r3, [sp, #16]
 801ad38:	fb0c 4403 	mla	r4, ip, r3, r4
 801ad3c:	9b08      	ldr	r3, [sp, #32]
 801ad3e:	fb03 4402 	mla	r4, r3, r2, r4
 801ad42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad46:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ad4a:	fb04 0403 	mla	r4, r4, r3, r0
 801ad4e:	9b03      	ldr	r3, [sp, #12]
 801ad50:	435a      	muls	r2, r3
 801ad52:	b2a4      	uxth	r4, r4
 801ad54:	4613      	mov	r3, r2
 801ad56:	9a07      	ldr	r2, [sp, #28]
 801ad58:	1c60      	adds	r0, r4, #1
 801ad5a:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ad5e:	9b08      	ldr	r3, [sp, #32]
 801ad60:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ad64:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ad68:	1224      	asrs	r4, r4, #8
 801ad6a:	fb03 c606 	mla	r6, r3, r6, ip
 801ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad70:	f88b 4001 	strb.w	r4, [fp, #1]
 801ad74:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ad78:	fb06 1103 	mla	r1, r6, r3, r1
 801ad7c:	b289      	uxth	r1, r1
 801ad7e:	1c4e      	adds	r6, r1, #1
 801ad80:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801ad84:	1209      	asrs	r1, r1, #8
 801ad86:	f88b 1002 	strb.w	r1, [fp, #2]
 801ad8a:	b00d      	add	sp, #52	; 0x34
 801ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ad94:	9405      	str	r4, [sp, #20]
 801ad96:	e74d      	b.n	801ac34 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801ad98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ad9c:	9401      	str	r4, [sp, #4]
 801ad9e:	9405      	str	r4, [sp, #20]
 801ada0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ada4:	e756      	b.n	801ac54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ada6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801adaa:	9401      	str	r4, [sp, #4]
 801adac:	e752      	b.n	801ac54 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801adae:	468e      	mov	lr, r1
 801adb0:	9004      	str	r0, [sp, #16]
 801adb2:	46a1      	mov	r9, r4
 801adb4:	e76b      	b.n	801ac8e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801adb6:	460e      	mov	r6, r1
 801adb8:	4602      	mov	r2, r0
 801adba:	4625      	mov	r5, r4
 801adbc:	468e      	mov	lr, r1
 801adbe:	9004      	str	r0, [sp, #16]
 801adc0:	46a1      	mov	r9, r4
 801adc2:	e779      	b.n	801acb8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801adc4:	460e      	mov	r6, r1
 801adc6:	4602      	mov	r2, r0
 801adc8:	4625      	mov	r5, r4
 801adca:	e775      	b.n	801acb8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801adcc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801add0:	b09f      	sub	sp, #124	; 0x7c
 801add2:	920e      	str	r2, [sp, #56]	; 0x38
 801add4:	9307      	str	r3, [sp, #28]
 801add6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801add8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801addc:	901d      	str	r0, [sp, #116]	; 0x74
 801adde:	930c      	str	r3, [sp, #48]	; 0x30
 801ade0:	6850      	ldr	r0, [r2, #4]
 801ade2:	910b      	str	r1, [sp, #44]	; 0x2c
 801ade4:	6812      	ldr	r2, [r2, #0]
 801ade6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801adea:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801adee:	fb00 1303 	mla	r3, r0, r3, r1
 801adf2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adf6:	18d3      	adds	r3, r2, r3
 801adf8:	9308      	str	r3, [sp, #32]
 801adfa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	930a      	str	r3, [sp, #40]	; 0x28
 801ae00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ae02:	43db      	mvns	r3, r3
 801ae04:	b2db      	uxtb	r3, r3
 801ae06:	9309      	str	r3, [sp, #36]	; 0x24
 801ae08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	dc03      	bgt.n	801ae16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	f340 81f5 	ble.w	801b200 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ae16:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ae18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ae1c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ae20:	1e48      	subs	r0, r1, #1
 801ae22:	1e54      	subs	r4, r2, #1
 801ae24:	9b07      	ldr	r3, [sp, #28]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	f340 80d5 	ble.w	801afd6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801ae2c:	ea5f 452a 	movs.w	r5, sl, asr #16
 801ae30:	ea4f 4328 	mov.w	r3, r8, asr #16
 801ae34:	d406      	bmi.n	801ae44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ae36:	4285      	cmp	r5, r0
 801ae38:	da04      	bge.n	801ae44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	db02      	blt.n	801ae44 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ae3e:	42a3      	cmp	r3, r4
 801ae40:	f2c0 80ca 	blt.w	801afd8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ae44:	3501      	adds	r5, #1
 801ae46:	f100 80bb 	bmi.w	801afc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ae4a:	42a9      	cmp	r1, r5
 801ae4c:	f2c0 80b8 	blt.w	801afc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ae50:	3301      	adds	r3, #1
 801ae52:	f100 80b5 	bmi.w	801afc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ae56:	429a      	cmp	r2, r3
 801ae58:	f2c0 80b2 	blt.w	801afc0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ae5c:	9b07      	ldr	r3, [sp, #28]
 801ae5e:	9d08      	ldr	r5, [sp, #32]
 801ae60:	930d      	str	r3, [sp, #52]	; 0x34
 801ae62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	f340 80d6 	ble.w	801b016 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801ae6a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801ae6c:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ae70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ae72:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ae76:	68c6      	ldr	r6, [r0, #12]
 801ae78:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ae7c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ae80:	689b      	ldr	r3, [r3, #8]
 801ae82:	f100 810f 	bmi.w	801b0a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ae86:	1e5f      	subs	r7, r3, #1
 801ae88:	42b8      	cmp	r0, r7
 801ae8a:	f280 810b 	bge.w	801b0a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ae8e:	2c00      	cmp	r4, #0
 801ae90:	f2c0 8108 	blt.w	801b0a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ae94:	1e77      	subs	r7, r6, #1
 801ae96:	42bc      	cmp	r4, r7
 801ae98:	f280 8104 	bge.w	801b0a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ae9c:	b21b      	sxth	r3, r3
 801ae9e:	fb04 0003 	mla	r0, r4, r3, r0
 801aea2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801aea4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aea8:	1826      	adds	r6, r4, r0
 801aeaa:	5c24      	ldrb	r4, [r4, r0]
 801aeac:	78b7      	ldrb	r7, [r6, #2]
 801aeae:	7870      	ldrb	r0, [r6, #1]
 801aeb0:	970f      	str	r7, [sp, #60]	; 0x3c
 801aeb2:	7977      	ldrb	r7, [r6, #5]
 801aeb4:	f896 e003 	ldrb.w	lr, [r6, #3]
 801aeb8:	f896 c004 	ldrb.w	ip, [r6, #4]
 801aebc:	9710      	str	r7, [sp, #64]	; 0x40
 801aebe:	b1c9      	cbz	r1, 801aef4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801aec0:	f04f 0b03 	mov.w	fp, #3
 801aec4:	f06f 0904 	mvn.w	r9, #4
 801aec8:	3605      	adds	r6, #5
 801aeca:	fb13 930b 	smlabb	r3, r3, fp, r9
 801aece:	eb06 0b03 	add.w	fp, r6, r3
 801aed2:	5cf3      	ldrb	r3, [r6, r3]
 801aed4:	9311      	str	r3, [sp, #68]	; 0x44
 801aed6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801aeda:	9313      	str	r3, [sp, #76]	; 0x4c
 801aedc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801aee0:	9315      	str	r3, [sp, #84]	; 0x54
 801aee2:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801aee6:	9312      	str	r3, [sp, #72]	; 0x48
 801aee8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801aeec:	9314      	str	r3, [sp, #80]	; 0x50
 801aeee:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801aef2:	9316      	str	r3, [sp, #88]	; 0x58
 801aef4:	b292      	uxth	r2, r2
 801aef6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801aef8:	b289      	uxth	r1, r1
 801aefa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801aefe:	fb02 f601 	mul.w	r6, r2, r1
 801af02:	0112      	lsls	r2, r2, #4
 801af04:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801af08:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801af0c:	1b92      	subs	r2, r2, r6
 801af0e:	b289      	uxth	r1, r1
 801af10:	b292      	uxth	r2, r2
 801af12:	eba9 0901 	sub.w	r9, r9, r1
 801af16:	fb02 fe0e 	mul.w	lr, r2, lr
 801af1a:	fa1f f989 	uxth.w	r9, r9
 801af1e:	fb02 fc0c 	mul.w	ip, r2, ip
 801af22:	fb09 e404 	mla	r4, r9, r4, lr
 801af26:	f895 e000 	ldrb.w	lr, [r5]
 801af2a:	fb09 c000 	mla	r0, r9, r0, ip
 801af2e:	fb01 4407 	mla	r4, r1, r7, r4
 801af32:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801af34:	fb06 4407 	mla	r4, r6, r7, r4
 801af38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801af3a:	fb1e fe07 	smulbb	lr, lr, r7
 801af3e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801af42:	fb04 e403 	mla	r4, r4, r3, lr
 801af46:	b2a4      	uxth	r4, r4
 801af48:	f104 0e01 	add.w	lr, r4, #1
 801af4c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801af50:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801af52:	fb01 0004 	mla	r0, r1, r4, r0
 801af56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801af58:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801af5c:	fb06 0004 	mla	r0, r6, r4, r0
 801af60:	786c      	ldrb	r4, [r5, #1]
 801af62:	f885 e000 	strb.w	lr, [r5]
 801af66:	fb14 f407 	smulbb	r4, r4, r7
 801af6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801af6e:	fb00 4003 	mla	r0, r0, r3, r4
 801af72:	b280      	uxth	r0, r0
 801af74:	1c44      	adds	r4, r0, #1
 801af76:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801af7a:	1200      	asrs	r0, r0, #8
 801af7c:	7068      	strb	r0, [r5, #1]
 801af7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801af80:	4342      	muls	r2, r0
 801af82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801af84:	fb09 2200 	mla	r2, r9, r0, r2
 801af88:	9815      	ldr	r0, [sp, #84]	; 0x54
 801af8a:	fb01 2100 	mla	r1, r1, r0, r2
 801af8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801af90:	fb06 1602 	mla	r6, r6, r2, r1
 801af94:	78a9      	ldrb	r1, [r5, #2]
 801af96:	fb11 f107 	smulbb	r1, r1, r7
 801af9a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801af9e:	fb06 1303 	mla	r3, r6, r3, r1
 801afa2:	b29b      	uxth	r3, r3
 801afa4:	1c5e      	adds	r6, r3, #1
 801afa6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801afaa:	121b      	asrs	r3, r3, #8
 801afac:	70ab      	strb	r3, [r5, #2]
 801afae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801afb0:	3503      	adds	r5, #3
 801afb2:	449a      	add	sl, r3
 801afb4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801afb6:	4498      	add	r8, r3
 801afb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afba:	3b01      	subs	r3, #1
 801afbc:	930d      	str	r3, [sp, #52]	; 0x34
 801afbe:	e750      	b.n	801ae62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801afc0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801afc2:	449a      	add	sl, r3
 801afc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801afc6:	4498      	add	r8, r3
 801afc8:	9b07      	ldr	r3, [sp, #28]
 801afca:	3b01      	subs	r3, #1
 801afcc:	9307      	str	r3, [sp, #28]
 801afce:	9b08      	ldr	r3, [sp, #32]
 801afd0:	3303      	adds	r3, #3
 801afd2:	9308      	str	r3, [sp, #32]
 801afd4:	e726      	b.n	801ae24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801afd6:	d026      	beq.n	801b026 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801afd8:	9b07      	ldr	r3, [sp, #28]
 801afda:	982b      	ldr	r0, [sp, #172]	; 0xac
 801afdc:	3b01      	subs	r3, #1
 801afde:	fb00 a003 	mla	r0, r0, r3, sl
 801afe2:	1400      	asrs	r0, r0, #16
 801afe4:	f53f af3a 	bmi.w	801ae5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801afe8:	3901      	subs	r1, #1
 801afea:	4288      	cmp	r0, r1
 801afec:	f6bf af36 	bge.w	801ae5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801aff0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801aff2:	fb01 8303 	mla	r3, r1, r3, r8
 801aff6:	141b      	asrs	r3, r3, #16
 801aff8:	f53f af30 	bmi.w	801ae5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801affc:	3a01      	subs	r2, #1
 801affe:	4293      	cmp	r3, r2
 801b000:	f6bf af2c 	bge.w	801ae5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b004:	9b08      	ldr	r3, [sp, #32]
 801b006:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b00a:	1cdd      	adds	r5, r3, #3
 801b00c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b010:	f1bc 0f00 	cmp.w	ip, #0
 801b014:	dc5f      	bgt.n	801b0d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801b016:	9b07      	ldr	r3, [sp, #28]
 801b018:	9a08      	ldr	r2, [sp, #32]
 801b01a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b01e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b022:	441a      	add	r2, r3
 801b024:	9208      	str	r2, [sp, #32]
 801b026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b028:	2b00      	cmp	r3, #0
 801b02a:	f340 80e9 	ble.w	801b200 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801b02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b034:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b038:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b03c:	eef0 6a62 	vmov.f32	s13, s5
 801b040:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b044:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b048:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b04c:	ee16 aa90 	vmov	sl, s13
 801b050:	eef0 6a43 	vmov.f32	s13, s6
 801b054:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b058:	ee16 8a90 	vmov	r8, s13
 801b05c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b060:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b064:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b068:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b06c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b070:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b074:	ee12 2a90 	vmov	r2, s5
 801b078:	eef0 2a47 	vmov.f32	s5, s14
 801b07c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b080:	ee13 2a10 	vmov	r2, s6
 801b084:	932b      	str	r3, [sp, #172]	; 0xac
 801b086:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b088:	eeb0 3a67 	vmov.f32	s6, s15
 801b08c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b090:	932c      	str	r3, [sp, #176]	; 0xb0
 801b092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b096:	3b01      	subs	r3, #1
 801b098:	930b      	str	r3, [sp, #44]	; 0x2c
 801b09a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b09c:	bf08      	it	eq
 801b09e:	4613      	moveq	r3, r2
 801b0a0:	9307      	str	r3, [sp, #28]
 801b0a2:	e6b1      	b.n	801ae08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b0a4:	1c47      	adds	r7, r0, #1
 801b0a6:	d482      	bmi.n	801afae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b0a8:	42bb      	cmp	r3, r7
 801b0aa:	db80      	blt.n	801afae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b0ac:	1c67      	adds	r7, r4, #1
 801b0ae:	f53f af7e 	bmi.w	801afae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b0b2:	42be      	cmp	r6, r7
 801b0b4:	f6ff af7b 	blt.w	801afae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b0b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b0ba:	b236      	sxth	r6, r6
 801b0bc:	9001      	str	r0, [sp, #4]
 801b0be:	b21b      	sxth	r3, r3
 801b0c0:	9600      	str	r6, [sp, #0]
 801b0c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b0c4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b0c8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b0cc:	4629      	mov	r1, r5
 801b0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b0d0:	f7ff fd82 	bl	801abd8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b0d4:	e76b      	b.n	801afae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b0d6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801b0d8:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b0dc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b0e0:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b0e4:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b0e8:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b0ec:	fb07 0101 	mla	r1, r7, r1, r0
 801b0f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b0f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b0f6:	1844      	adds	r4, r0, r1
 801b0f8:	5c40      	ldrb	r0, [r0, r1]
 801b0fa:	78a6      	ldrb	r6, [r4, #2]
 801b0fc:	7861      	ldrb	r1, [r4, #1]
 801b0fe:	960f      	str	r6, [sp, #60]	; 0x3c
 801b100:	78e6      	ldrb	r6, [r4, #3]
 801b102:	910d      	str	r1, [sp, #52]	; 0x34
 801b104:	9610      	str	r6, [sp, #64]	; 0x40
 801b106:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b10a:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b10e:	b192      	cbz	r2, 801b136 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801b110:	f06f 0604 	mvn.w	r6, #4
 801b114:	2103      	movs	r1, #3
 801b116:	3405      	adds	r4, #5
 801b118:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b11c:	19e6      	adds	r6, r4, r7
 801b11e:	5de4      	ldrb	r4, [r4, r7]
 801b120:	9417      	str	r4, [sp, #92]	; 0x5c
 801b122:	7874      	ldrb	r4, [r6, #1]
 801b124:	9419      	str	r4, [sp, #100]	; 0x64
 801b126:	78b4      	ldrb	r4, [r6, #2]
 801b128:	941b      	str	r4, [sp, #108]	; 0x6c
 801b12a:	78f4      	ldrb	r4, [r6, #3]
 801b12c:	9418      	str	r4, [sp, #96]	; 0x60
 801b12e:	7934      	ldrb	r4, [r6, #4]
 801b130:	941a      	str	r4, [sp, #104]	; 0x68
 801b132:	7974      	ldrb	r4, [r6, #5]
 801b134:	941c      	str	r4, [sp, #112]	; 0x70
 801b136:	b29b      	uxth	r3, r3
 801b138:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b13a:	b292      	uxth	r2, r2
 801b13c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b13e:	3503      	adds	r5, #3
 801b140:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b144:	fb03 f402 	mul.w	r4, r3, r2
 801b148:	011b      	lsls	r3, r3, #4
 801b14a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b14e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b152:	1b1b      	subs	r3, r3, r4
 801b154:	b292      	uxth	r2, r2
 801b156:	b29b      	uxth	r3, r3
 801b158:	1ab6      	subs	r6, r6, r2
 801b15a:	435f      	muls	r7, r3
 801b15c:	b2b6      	uxth	r6, r6
 801b15e:	fb03 f909 	mul.w	r9, r3, r9
 801b162:	fb03 fb0b 	mul.w	fp, r3, fp
 801b166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b168:	fb06 7000 	mla	r0, r6, r0, r7
 801b16c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b16e:	fb06 bb03 	mla	fp, r6, r3, fp
 801b172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b174:	fb02 0007 	mla	r0, r2, r7, r0
 801b178:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b17a:	fb02 bb03 	mla	fp, r2, r3, fp
 801b17e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b180:	fb04 0007 	mla	r0, r4, r7, r0
 801b184:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b188:	fb17 f701 	smulbb	r7, r7, r1
 801b18c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b190:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b192:	fb00 700e 	mla	r0, r0, lr, r7
 801b196:	fb06 9101 	mla	r1, r6, r1, r9
 801b19a:	b280      	uxth	r0, r0
 801b19c:	1c47      	adds	r7, r0, #1
 801b19e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b1a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b1a4:	1200      	asrs	r0, r0, #8
 801b1a6:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b1aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b1ac:	fb02 1100 	mla	r1, r2, r0, r1
 801b1b0:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b1b2:	fb04 1100 	mla	r1, r4, r0, r1
 801b1b6:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b1ba:	fb04 b403 	mla	r4, r4, r3, fp
 801b1be:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b1c2:	fb10 f007 	smulbb	r0, r0, r7
 801b1c6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b1ca:	fb13 f307 	smulbb	r3, r3, r7
 801b1ce:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b1d2:	fb01 010e 	mla	r1, r1, lr, r0
 801b1d6:	fb04 340e 	mla	r4, r4, lr, r3
 801b1da:	b289      	uxth	r1, r1
 801b1dc:	b2a4      	uxth	r4, r4
 801b1de:	1c48      	adds	r0, r1, #1
 801b1e0:	1c63      	adds	r3, r4, #1
 801b1e2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b1e6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b1ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b1ec:	1209      	asrs	r1, r1, #8
 801b1ee:	1224      	asrs	r4, r4, #8
 801b1f0:	449a      	add	sl, r3
 801b1f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b1f4:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b1f8:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b1fc:	4498      	add	r8, r3
 801b1fe:	e707      	b.n	801b010 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801b200:	b01f      	add	sp, #124	; 0x7c
 801b202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b206 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b20a:	b087      	sub	sp, #28
 801b20c:	780d      	ldrb	r5, [r1, #0]
 801b20e:	784c      	ldrb	r4, [r1, #1]
 801b210:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801b214:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801b218:	9004      	str	r0, [sp, #16]
 801b21a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801b21e:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801b222:	9005      	str	r0, [sp, #20]
 801b224:	fb06 bc03 	mla	ip, r6, r3, fp
 801b228:	2e00      	cmp	r6, #0
 801b22a:	7888      	ldrb	r0, [r1, #2]
 801b22c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b230:	eb02 090c 	add.w	r9, r2, ip
 801b234:	f2c0 8084 	blt.w	801b340 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b238:	42b7      	cmp	r7, r6
 801b23a:	f340 8081 	ble.w	801b340 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b23e:	f1bb 0f00 	cmp.w	fp, #0
 801b242:	db79      	blt.n	801b338 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b244:	455b      	cmp	r3, fp
 801b246:	dd77      	ble.n	801b338 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b248:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b24c:	9201      	str	r2, [sp, #4]
 801b24e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b252:	9202      	str	r2, [sp, #8]
 801b254:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b258:	9203      	str	r2, [sp, #12]
 801b25a:	f11b 0201 	adds.w	r2, fp, #1
 801b25e:	d476      	bmi.n	801b34e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b260:	4293      	cmp	r3, r2
 801b262:	dd74      	ble.n	801b34e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b264:	9a04      	ldr	r2, [sp, #16]
 801b266:	2a00      	cmp	r2, #0
 801b268:	d071      	beq.n	801b34e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b26a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801b26e:	f899 c004 	ldrb.w	ip, [r9, #4]
 801b272:	f899 a005 	ldrb.w	sl, [r9, #5]
 801b276:	3601      	adds	r6, #1
 801b278:	d471      	bmi.n	801b35e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b27a:	42b7      	cmp	r7, r6
 801b27c:	dd6f      	ble.n	801b35e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b27e:	9a05      	ldr	r2, [sp, #20]
 801b280:	2a00      	cmp	r2, #0
 801b282:	d06c      	beq.n	801b35e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b284:	f1bb 0f00 	cmp.w	fp, #0
 801b288:	db65      	blt.n	801b356 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b28a:	455b      	cmp	r3, fp
 801b28c:	dd63      	ble.n	801b356 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b28e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b292:	f819 e002 	ldrb.w	lr, [r9, r2]
 801b296:	2203      	movs	r2, #3
 801b298:	fb03 9602 	mla	r6, r3, r2, r9
 801b29c:	7877      	ldrb	r7, [r6, #1]
 801b29e:	78b6      	ldrb	r6, [r6, #2]
 801b2a0:	f11b 0b01 	adds.w	fp, fp, #1
 801b2a4:	d40c      	bmi.n	801b2c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b2a6:	455b      	cmp	r3, fp
 801b2a8:	dd0a      	ble.n	801b2c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b2aa:	9a04      	ldr	r2, [sp, #16]
 801b2ac:	b142      	cbz	r2, 801b2c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b2ae:	2203      	movs	r2, #3
 801b2b0:	fb13 2002 	smlabb	r0, r3, r2, r2
 801b2b4:	f819 5000 	ldrb.w	r5, [r9, r0]
 801b2b8:	fb03 9002 	mla	r0, r3, r2, r9
 801b2bc:	7904      	ldrb	r4, [r0, #4]
 801b2be:	7940      	ldrb	r0, [r0, #5]
 801b2c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b2c4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b2c8:	fb03 fb02 	mul.w	fp, r3, r2
 801b2cc:	011b      	lsls	r3, r3, #4
 801b2ce:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801b2d2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801b2d6:	eba3 030b 	sub.w	r3, r3, fp
 801b2da:	b292      	uxth	r2, r2
 801b2dc:	b29b      	uxth	r3, r3
 801b2de:	eba9 0902 	sub.w	r9, r9, r2
 801b2e2:	9304      	str	r3, [sp, #16]
 801b2e4:	fa1f f989 	uxth.w	r9, r9
 801b2e8:	fb03 f808 	mul.w	r8, r3, r8
 801b2ec:	9b01      	ldr	r3, [sp, #4]
 801b2ee:	fb09 8803 	mla	r8, r9, r3, r8
 801b2f2:	9b04      	ldr	r3, [sp, #16]
 801b2f4:	fb03 fc0c 	mul.w	ip, r3, ip
 801b2f8:	9b02      	ldr	r3, [sp, #8]
 801b2fa:	fb02 880e 	mla	r8, r2, lr, r8
 801b2fe:	fb09 cc03 	mla	ip, r9, r3, ip
 801b302:	9b04      	ldr	r3, [sp, #16]
 801b304:	fb0b 8805 	mla	r8, fp, r5, r8
 801b308:	fb02 c707 	mla	r7, r2, r7, ip
 801b30c:	fb03 f30a 	mul.w	r3, r3, sl
 801b310:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b314:	fb0b 7404 	mla	r4, fp, r4, r7
 801b318:	f881 8000 	strb.w	r8, [r1]
 801b31c:	1224      	asrs	r4, r4, #8
 801b31e:	704c      	strb	r4, [r1, #1]
 801b320:	9c03      	ldr	r4, [sp, #12]
 801b322:	fb09 3904 	mla	r9, r9, r4, r3
 801b326:	fb02 9206 	mla	r2, r2, r6, r9
 801b32a:	fb0b 2000 	mla	r0, fp, r0, r2
 801b32e:	1200      	asrs	r0, r0, #8
 801b330:	7088      	strb	r0, [r1, #2]
 801b332:	b007      	add	sp, #28
 801b334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b338:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b33c:	9501      	str	r5, [sp, #4]
 801b33e:	e78c      	b.n	801b25a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801b340:	4682      	mov	sl, r0
 801b342:	46a4      	mov	ip, r4
 801b344:	46a8      	mov	r8, r5
 801b346:	9501      	str	r5, [sp, #4]
 801b348:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b34c:	e793      	b.n	801b276 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b34e:	4682      	mov	sl, r0
 801b350:	46a4      	mov	ip, r4
 801b352:	46a8      	mov	r8, r5
 801b354:	e78f      	b.n	801b276 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b356:	4606      	mov	r6, r0
 801b358:	4627      	mov	r7, r4
 801b35a:	46ae      	mov	lr, r5
 801b35c:	e7a0      	b.n	801b2a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b35e:	4606      	mov	r6, r0
 801b360:	4627      	mov	r7, r4
 801b362:	46ae      	mov	lr, r5
 801b364:	e7ac      	b.n	801b2c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801b366 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b36a:	b09b      	sub	sp, #108	; 0x6c
 801b36c:	920b      	str	r2, [sp, #44]	; 0x2c
 801b36e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b370:	9019      	str	r0, [sp, #100]	; 0x64
 801b372:	9109      	str	r1, [sp, #36]	; 0x24
 801b374:	6850      	ldr	r0, [r2, #4]
 801b376:	9306      	str	r3, [sp, #24]
 801b378:	6812      	ldr	r2, [r2, #0]
 801b37a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b37e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801b382:	fb00 1303 	mla	r3, r0, r3, r1
 801b386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b38a:	18d3      	adds	r3, r2, r3
 801b38c:	9307      	str	r3, [sp, #28]
 801b38e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	9308      	str	r3, [sp, #32]
 801b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b396:	2b00      	cmp	r3, #0
 801b398:	dc03      	bgt.n	801b3a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	f340 81ab 	ble.w	801b6f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b3a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b3a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b3a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b3ac:	1e48      	subs	r0, r1, #1
 801b3ae:	1e55      	subs	r5, r2, #1
 801b3b0:	9b06      	ldr	r3, [sp, #24]
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	f340 80b1 	ble.w	801b51a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b3b8:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b3bc:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b3c0:	d406      	bmi.n	801b3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b3c2:	4286      	cmp	r6, r0
 801b3c4:	da04      	bge.n	801b3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	db02      	blt.n	801b3d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b3ca:	42ab      	cmp	r3, r5
 801b3cc:	f2c0 80a6 	blt.w	801b51c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801b3d0:	3601      	adds	r6, #1
 801b3d2:	f100 8097 	bmi.w	801b504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b3d6:	42b1      	cmp	r1, r6
 801b3d8:	f2c0 8094 	blt.w	801b504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b3dc:	3301      	adds	r3, #1
 801b3de:	f100 8091 	bmi.w	801b504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	f2c0 808e 	blt.w	801b504 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b3e8:	9b06      	ldr	r3, [sp, #24]
 801b3ea:	9e07      	ldr	r6, [sp, #28]
 801b3ec:	930a      	str	r3, [sp, #40]	; 0x28
 801b3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	f340 80b0 	ble.w	801b556 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b3f6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b3f8:	1425      	asrs	r5, r4, #16
 801b3fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b3fc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b400:	68c7      	ldr	r7, [r0, #12]
 801b402:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b406:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b40a:	689b      	ldr	r3, [r3, #8]
 801b40c:	f100 80ea 	bmi.w	801b5e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b410:	f103 3cff 	add.w	ip, r3, #4294967295
 801b414:	4560      	cmp	r0, ip
 801b416:	f280 80e5 	bge.w	801b5e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b41a:	2d00      	cmp	r5, #0
 801b41c:	f2c0 80e2 	blt.w	801b5e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b420:	f107 3cff 	add.w	ip, r7, #4294967295
 801b424:	4565      	cmp	r5, ip
 801b426:	f280 80dd 	bge.w	801b5e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b42a:	b21b      	sxth	r3, r3
 801b42c:	fb05 0003 	mla	r0, r5, r3, r0
 801b430:	9d08      	ldr	r5, [sp, #32]
 801b432:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b436:	182f      	adds	r7, r5, r0
 801b438:	5c2d      	ldrb	r5, [r5, r0]
 801b43a:	7878      	ldrb	r0, [r7, #1]
 801b43c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b440:	900c      	str	r0, [sp, #48]	; 0x30
 801b442:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b446:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b44a:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b44e:	b1c9      	cbz	r1, 801b484 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b450:	f04f 0c03 	mov.w	ip, #3
 801b454:	f06f 0004 	mvn.w	r0, #4
 801b458:	3705      	adds	r7, #5
 801b45a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b45e:	eb07 0c03 	add.w	ip, r7, r3
 801b462:	5cfb      	ldrb	r3, [r7, r3]
 801b464:	930d      	str	r3, [sp, #52]	; 0x34
 801b466:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b46a:	930f      	str	r3, [sp, #60]	; 0x3c
 801b46c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b470:	9311      	str	r3, [sp, #68]	; 0x44
 801b472:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b476:	930e      	str	r3, [sp, #56]	; 0x38
 801b478:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b47c:	9310      	str	r3, [sp, #64]	; 0x40
 801b47e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b482:	9312      	str	r3, [sp, #72]	; 0x48
 801b484:	b292      	uxth	r2, r2
 801b486:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b488:	b289      	uxth	r1, r1
 801b48a:	fb02 f301 	mul.w	r3, r2, r1
 801b48e:	0112      	lsls	r2, r2, #4
 801b490:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b494:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b498:	1ad2      	subs	r2, r2, r3
 801b49a:	b289      	uxth	r1, r1
 801b49c:	b292      	uxth	r2, r2
 801b49e:	1a7f      	subs	r7, r7, r1
 801b4a0:	fb02 f909 	mul.w	r9, r2, r9
 801b4a4:	b2bf      	uxth	r7, r7
 801b4a6:	fb02 f808 	mul.w	r8, r2, r8
 801b4aa:	fb02 fa0a 	mul.w	sl, r2, sl
 801b4ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b4b0:	fb07 9905 	mla	r9, r7, r5, r9
 801b4b4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b4b6:	fb07 8800 	mla	r8, r7, r0, r8
 801b4ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b4bc:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b4c0:	fb01 9905 	mla	r9, r1, r5, r9
 801b4c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b4c6:	fb01 8800 	mla	r8, r1, r0, r8
 801b4ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b4cc:	fb01 a102 	mla	r1, r1, r2, sl
 801b4d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b4d2:	fb03 9905 	mla	r9, r3, r5, r9
 801b4d6:	fb03 8800 	mla	r8, r3, r0, r8
 801b4da:	fb03 1302 	mla	r3, r3, r2, r1
 801b4de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b4e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b4e6:	121b      	asrs	r3, r3, #8
 801b4e8:	f886 9000 	strb.w	r9, [r6]
 801b4ec:	f886 8001 	strb.w	r8, [r6, #1]
 801b4f0:	70b3      	strb	r3, [r6, #2]
 801b4f2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b4f4:	3603      	adds	r6, #3
 801b4f6:	449b      	add	fp, r3
 801b4f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b4fa:	441c      	add	r4, r3
 801b4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4fe:	3b01      	subs	r3, #1
 801b500:	930a      	str	r3, [sp, #40]	; 0x28
 801b502:	e774      	b.n	801b3ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b504:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b506:	449b      	add	fp, r3
 801b508:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b50a:	441c      	add	r4, r3
 801b50c:	9b06      	ldr	r3, [sp, #24]
 801b50e:	3b01      	subs	r3, #1
 801b510:	9306      	str	r3, [sp, #24]
 801b512:	9b07      	ldr	r3, [sp, #28]
 801b514:	3303      	adds	r3, #3
 801b516:	9307      	str	r3, [sp, #28]
 801b518:	e74a      	b.n	801b3b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b51a:	d024      	beq.n	801b566 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b51c:	9b06      	ldr	r3, [sp, #24]
 801b51e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b520:	3b01      	subs	r3, #1
 801b522:	fb00 b003 	mla	r0, r0, r3, fp
 801b526:	1400      	asrs	r0, r0, #16
 801b528:	f53f af5e 	bmi.w	801b3e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b52c:	3901      	subs	r1, #1
 801b52e:	4288      	cmp	r0, r1
 801b530:	f6bf af5a 	bge.w	801b3e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b534:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b536:	fb01 4303 	mla	r3, r1, r3, r4
 801b53a:	141b      	asrs	r3, r3, #16
 801b53c:	f53f af54 	bmi.w	801b3e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b540:	3a01      	subs	r2, #1
 801b542:	4293      	cmp	r3, r2
 801b544:	f6bf af50 	bge.w	801b3e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b548:	9b07      	ldr	r3, [sp, #28]
 801b54a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b54e:	1cde      	adds	r6, r3, #3
 801b550:	f1be 0f00 	cmp.w	lr, #0
 801b554:	dc5f      	bgt.n	801b616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b556:	9b06      	ldr	r3, [sp, #24]
 801b558:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b55c:	9b07      	ldr	r3, [sp, #28]
 801b55e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b562:	4423      	add	r3, r4
 801b564:	9307      	str	r3, [sp, #28]
 801b566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b568:	2b00      	cmp	r3, #0
 801b56a:	f340 80c5 	ble.w	801b6f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b56e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b574:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b578:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b57c:	eef0 6a62 	vmov.f32	s13, s5
 801b580:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b584:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b588:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b58c:	ee16 ba90 	vmov	fp, s13
 801b590:	eef0 6a43 	vmov.f32	s13, s6
 801b594:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b598:	ee16 4a90 	vmov	r4, s13
 801b59c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b5a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b5a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b5a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b5ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b5b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b5b4:	ee12 2a90 	vmov	r2, s5
 801b5b8:	eef0 2a47 	vmov.f32	s5, s14
 801b5bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5c0:	ee13 2a10 	vmov	r2, s6
 801b5c4:	9327      	str	r3, [sp, #156]	; 0x9c
 801b5c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b5c8:	eeb0 3a67 	vmov.f32	s6, s15
 801b5cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801b5d0:	9328      	str	r3, [sp, #160]	; 0xa0
 801b5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5d6:	3b01      	subs	r3, #1
 801b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b5da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b5dc:	bf08      	it	eq
 801b5de:	4613      	moveq	r3, r2
 801b5e0:	9306      	str	r3, [sp, #24]
 801b5e2:	e6d7      	b.n	801b394 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b5e4:	f110 0c01 	adds.w	ip, r0, #1
 801b5e8:	d483      	bmi.n	801b4f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b5ea:	4563      	cmp	r3, ip
 801b5ec:	db81      	blt.n	801b4f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b5ee:	f115 0c01 	adds.w	ip, r5, #1
 801b5f2:	f53f af7e 	bmi.w	801b4f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b5f6:	4567      	cmp	r7, ip
 801b5f8:	f6ff af7b 	blt.w	801b4f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b5fc:	b23f      	sxth	r7, r7
 801b5fe:	b21b      	sxth	r3, r3
 801b600:	9700      	str	r7, [sp, #0]
 801b602:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801b606:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801b60a:	9a08      	ldr	r2, [sp, #32]
 801b60c:	4631      	mov	r1, r6
 801b60e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b610:	f7ff fdf9 	bl	801b206 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b614:	e76d      	b.n	801b4f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b616:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b618:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b61c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b620:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b624:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b628:	1421      	asrs	r1, r4, #16
 801b62a:	930a      	str	r3, [sp, #40]	; 0x28
 801b62c:	fb0c 0101 	mla	r1, ip, r1, r0
 801b630:	9808      	ldr	r0, [sp, #32]
 801b632:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b636:	1845      	adds	r5, r0, r1
 801b638:	5c40      	ldrb	r0, [r0, r1]
 801b63a:	796f      	ldrb	r7, [r5, #5]
 801b63c:	7869      	ldrb	r1, [r5, #1]
 801b63e:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b642:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b646:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b64a:	970c      	str	r7, [sp, #48]	; 0x30
 801b64c:	b1a2      	cbz	r2, 801b678 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801b64e:	2703      	movs	r7, #3
 801b650:	f06f 0304 	mvn.w	r3, #4
 801b654:	3505      	adds	r5, #5
 801b656:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b65a:	eb05 070c 	add.w	r7, r5, ip
 801b65e:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b662:	9513      	str	r5, [sp, #76]	; 0x4c
 801b664:	787d      	ldrb	r5, [r7, #1]
 801b666:	9515      	str	r5, [sp, #84]	; 0x54
 801b668:	78bd      	ldrb	r5, [r7, #2]
 801b66a:	9517      	str	r5, [sp, #92]	; 0x5c
 801b66c:	78fd      	ldrb	r5, [r7, #3]
 801b66e:	9514      	str	r5, [sp, #80]	; 0x50
 801b670:	793d      	ldrb	r5, [r7, #4]
 801b672:	9516      	str	r5, [sp, #88]	; 0x58
 801b674:	797d      	ldrb	r5, [r7, #5]
 801b676:	9518      	str	r5, [sp, #96]	; 0x60
 801b678:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b67c:	b292      	uxth	r2, r2
 801b67e:	3603      	adds	r6, #3
 801b680:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b684:	fb03 f502 	mul.w	r5, r3, r2
 801b688:	011b      	lsls	r3, r3, #4
 801b68a:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b68e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b692:	1b5b      	subs	r3, r3, r5
 801b694:	b292      	uxth	r2, r2
 801b696:	b29b      	uxth	r3, r3
 801b698:	1abf      	subs	r7, r7, r2
 801b69a:	fb03 f909 	mul.w	r9, r3, r9
 801b69e:	b2bf      	uxth	r7, r7
 801b6a0:	fb03 fa0a 	mul.w	sl, r3, sl
 801b6a4:	fb07 9901 	mla	r9, r7, r1, r9
 801b6a8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b6aa:	fb07 aa00 	mla	sl, r7, r0, sl
 801b6ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b6b0:	fb02 9901 	mla	r9, r2, r1, r9
 801b6b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b6b6:	fb02 aa00 	mla	sl, r2, r0, sl
 801b6ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b6bc:	fb05 9901 	mla	r9, r5, r1, r9
 801b6c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b6c2:	fb05 aa00 	mla	sl, r5, r0, sl
 801b6c6:	434b      	muls	r3, r1
 801b6c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b6ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b6ce:	fb07 3308 	mla	r3, r7, r8, r3
 801b6d2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b6d6:	f806 ac06 	strb.w	sl, [r6, #-6]
 801b6da:	fb02 3201 	mla	r2, r2, r1, r3
 801b6de:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b6e0:	f806 9c05 	strb.w	r9, [r6, #-5]
 801b6e4:	fb05 2503 	mla	r5, r5, r3, r2
 801b6e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b6ea:	122d      	asrs	r5, r5, #8
 801b6ec:	449b      	add	fp, r3
 801b6ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b6f0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b6f4:	441c      	add	r4, r3
 801b6f6:	e72b      	b.n	801b550 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b6f8:	b01b      	add	sp, #108	; 0x6c
 801b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b6fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b6fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b702:	b087      	sub	sp, #28
 801b704:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b708:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b70c:	fb05 7003 	mla	r0, r5, r3, r7
 801b710:	2d00      	cmp	r5, #0
 801b712:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b716:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b71a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b71e:	f2c0 811f 	blt.w	801b960 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b722:	45a8      	cmp	r8, r5
 801b724:	f340 811c 	ble.w	801b960 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b728:	2f00      	cmp	r7, #0
 801b72a:	f2c0 8117 	blt.w	801b95c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b72e:	42bb      	cmp	r3, r7
 801b730:	f340 8114 	ble.w	801b95c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b734:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b738:	1c7a      	adds	r2, r7, #1
 801b73a:	f100 8114 	bmi.w	801b966 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b73e:	4293      	cmp	r3, r2
 801b740:	f340 8111 	ble.w	801b966 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b744:	2c00      	cmp	r4, #0
 801b746:	f000 8110 	beq.w	801b96a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801b74a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b74e:	3501      	adds	r5, #1
 801b750:	f100 810f 	bmi.w	801b972 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b754:	45a8      	cmp	r8, r5
 801b756:	f340 810c 	ble.w	801b972 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b75a:	f1be 0f00 	cmp.w	lr, #0
 801b75e:	f000 810b 	beq.w	801b978 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801b762:	2f00      	cmp	r7, #0
 801b764:	f2c0 8103 	blt.w	801b96e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b768:	42bb      	cmp	r3, r7
 801b76a:	f340 8100 	ble.w	801b96e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b76e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b772:	3701      	adds	r7, #1
 801b774:	f100 8103 	bmi.w	801b97e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b778:	42bb      	cmp	r3, r7
 801b77a:	f340 8100 	ble.w	801b97e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b77e:	2c00      	cmp	r4, #0
 801b780:	f000 80ff 	beq.w	801b982 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801b784:	3301      	adds	r3, #1
 801b786:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b78a:	fa1f fc84 	uxth.w	ip, r4
 801b78e:	fa1f fe8e 	uxth.w	lr, lr
 801b792:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b796:	fb0c f90e 	mul.w	r9, ip, lr
 801b79a:	0e13      	lsrs	r3, r2, #24
 801b79c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b7a0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801b7a4:	9302      	str	r3, [sp, #8]
 801b7a6:	ebac 0709 	sub.w	r7, ip, r9
 801b7aa:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801b7ae:	fa1f f48e 	uxth.w	r4, lr
 801b7b2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801b7b6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b7ba:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801b7be:	fb0a fe0e 	mul.w	lr, sl, lr
 801b7c2:	1b1b      	subs	r3, r3, r4
 801b7c4:	fb0a f606 	mul.w	r6, sl, r6
 801b7c8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b7cc:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b7d0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b7d4:	b29b      	uxth	r3, r3
 801b7d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b7da:	b2bf      	uxth	r7, r7
 801b7dc:	9301      	str	r3, [sp, #4]
 801b7de:	44e6      	add	lr, ip
 801b7e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b7e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b7e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b7ec:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801b7f0:	9303      	str	r3, [sp, #12]
 801b7f2:	0a33      	lsrs	r3, r6, #8
 801b7f4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801b7f8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b7fc:	9304      	str	r3, [sp, #16]
 801b7fe:	fb0b f606 	mul.w	r6, fp, r6
 801b802:	fb0b f000 	mul.w	r0, fp, r0
 801b806:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801b80a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b80e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b812:	44b6      	add	lr, r6
 801b814:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801b818:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801b81c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801b820:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b824:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b828:	fb08 f606 	mul.w	r6, r8, r6
 801b82c:	0a03      	lsrs	r3, r0, #8
 801b82e:	fb08 f505 	mul.w	r5, r8, r5
 801b832:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b836:	0a30      	lsrs	r0, r6, #8
 801b838:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b83c:	9305      	str	r3, [sp, #20]
 801b83e:	0e13      	lsrs	r3, r2, #24
 801b840:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b844:	fb0e fe07 	mul.w	lr, lr, r7
 801b848:	4430      	add	r0, r6
 801b84a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b84e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b852:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b856:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b85a:	0a00      	lsrs	r0, r0, #8
 801b85c:	435e      	muls	r6, r3
 801b85e:	0a2d      	lsrs	r5, r5, #8
 801b860:	435a      	muls	r2, r3
 801b862:	9b03      	ldr	r3, [sp, #12]
 801b864:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b868:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b86c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b870:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b874:	44b4      	add	ip, r6
 801b876:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801b87a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b87e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b882:	9e01      	ldr	r6, [sp, #4]
 801b884:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b888:	fb03 ee06 	mla	lr, r3, r6, lr
 801b88c:	9b04      	ldr	r3, [sp, #16]
 801b88e:	0a12      	lsrs	r2, r2, #8
 801b890:	fb0c ee09 	mla	lr, ip, r9, lr
 801b894:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801b898:	9b05      	ldr	r3, [sp, #20]
 801b89a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b89e:	fb00 ee04 	mla	lr, r0, r4, lr
 801b8a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8a6:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801b8aa:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801b8ae:	9b01      	ldr	r3, [sp, #4]
 801b8b0:	fb07 fe0e 	mul.w	lr, r7, lr
 801b8b4:	fb07 f70b 	mul.w	r7, r7, fp
 801b8b8:	fb03 ee06 	mla	lr, r3, r6, lr
 801b8bc:	fb03 730a 	mla	r3, r3, sl, r7
 801b8c0:	fb09 e202 	mla	r2, r9, r2, lr
 801b8c4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b8c8:	fb04 2e0e 	mla	lr, r4, lr, r2
 801b8cc:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801b8d0:	fb04 3408 	mla	r4, r4, r8, r3
 801b8d4:	9b02      	ldr	r3, [sp, #8]
 801b8d6:	b292      	uxth	r2, r2
 801b8d8:	fb09 4903 	mla	r9, r9, r3, r4
 801b8dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8e0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b8e4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b8e8:	fb09 f902 	mul.w	r9, r9, r2
 801b8ec:	ea40 0e0e 	orr.w	lr, r0, lr
 801b8f0:	f109 0301 	add.w	r3, r9, #1
 801b8f4:	fa5f f08e 	uxtb.w	r0, lr
 801b8f8:	fb10 f002 	smulbb	r0, r0, r2
 801b8fc:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b900:	780b      	ldrb	r3, [r1, #0]
 801b902:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801b906:	fa5f f989 	uxtb.w	r9, r9
 801b90a:	fb03 0309 	mla	r3, r3, r9, r0
 801b90e:	b29b      	uxth	r3, r3
 801b910:	1c58      	adds	r0, r3, #1
 801b912:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b916:	7848      	ldrb	r0, [r1, #1]
 801b918:	fb10 f009 	smulbb	r0, r0, r9
 801b91c:	121b      	asrs	r3, r3, #8
 801b91e:	700b      	strb	r3, [r1, #0]
 801b920:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801b924:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b928:	fb03 0302 	mla	r3, r3, r2, r0
 801b92c:	b29b      	uxth	r3, r3
 801b92e:	1c58      	adds	r0, r3, #1
 801b930:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b934:	121b      	asrs	r3, r3, #8
 801b936:	704b      	strb	r3, [r1, #1]
 801b938:	788b      	ldrb	r3, [r1, #2]
 801b93a:	fb13 f909 	smulbb	r9, r3, r9
 801b93e:	fb0e 9e02 	mla	lr, lr, r2, r9
 801b942:	fa1f fe8e 	uxth.w	lr, lr
 801b946:	f10e 0301 	add.w	r3, lr, #1
 801b94a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801b94e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b952:	f881 e002 	strb.w	lr, [r1, #2]
 801b956:	b007      	add	sp, #28
 801b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95c:	2600      	movs	r6, #0
 801b95e:	e6eb      	b.n	801b738 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801b960:	2000      	movs	r0, #0
 801b962:	4606      	mov	r6, r0
 801b964:	e6f3      	b.n	801b74e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b966:	2000      	movs	r0, #0
 801b968:	e6f1      	b.n	801b74e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b96a:	4620      	mov	r0, r4
 801b96c:	e6ef      	b.n	801b74e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b96e:	2500      	movs	r5, #0
 801b970:	e6ff      	b.n	801b772 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801b972:	2200      	movs	r2, #0
 801b974:	4615      	mov	r5, r2
 801b976:	e708      	b.n	801b78a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b978:	4672      	mov	r2, lr
 801b97a:	4675      	mov	r5, lr
 801b97c:	e705      	b.n	801b78a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b97e:	2200      	movs	r2, #0
 801b980:	e703      	b.n	801b78a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b982:	4622      	mov	r2, r4
 801b984:	e701      	b.n	801b78a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801b986 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98a:	b09d      	sub	sp, #116	; 0x74
 801b98c:	9219      	str	r2, [sp, #100]	; 0x64
 801b98e:	9307      	str	r3, [sp, #28]
 801b990:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b992:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801b996:	901b      	str	r0, [sp, #108]	; 0x6c
 801b998:	931a      	str	r3, [sp, #104]	; 0x68
 801b99a:	6850      	ldr	r0, [r2, #4]
 801b99c:	9117      	str	r1, [sp, #92]	; 0x5c
 801b99e:	6812      	ldr	r2, [r2, #0]
 801b9a0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b9a4:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801b9a8:	fb00 1303 	mla	r3, r0, r3, r1
 801b9ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9b0:	18d3      	adds	r3, r2, r3
 801b9b2:	930a      	str	r3, [sp, #40]	; 0x28
 801b9b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	9310      	str	r3, [sp, #64]	; 0x40
 801b9ba:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801b9be:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	dc03      	bgt.n	801b9ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b9c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	f340 8368 	ble.w	801c09e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b9ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b9d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9d8:	1e48      	subs	r0, r1, #1
 801b9da:	1e57      	subs	r7, r2, #1
 801b9dc:	9b07      	ldr	r3, [sp, #28]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	f340 8187 	ble.w	801bcf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801b9e4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b9e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b9ec:	d406      	bmi.n	801b9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b9ee:	4584      	cmp	ip, r0
 801b9f0:	da04      	bge.n	801b9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	db02      	blt.n	801b9fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b9f6:	42bb      	cmp	r3, r7
 801b9f8:	f2c0 817c 	blt.w	801bcf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801b9fc:	f11c 0c01 	adds.w	ip, ip, #1
 801ba00:	f100 816c 	bmi.w	801bcdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ba04:	4561      	cmp	r1, ip
 801ba06:	f2c0 8169 	blt.w	801bcdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	f100 8166 	bmi.w	801bcdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ba10:	429a      	cmp	r2, r3
 801ba12:	f2c0 8163 	blt.w	801bcdc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ba16:	9b07      	ldr	r3, [sp, #28]
 801ba18:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ba1a:	9318      	str	r3, [sp, #96]	; 0x60
 801ba1c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	f340 8186 	ble.w	801bd30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801ba24:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba26:	142a      	asrs	r2, r5, #16
 801ba28:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ba2c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ba30:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ba34:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ba38:	f100 81cb 	bmi.w	801bdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ba3c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ba40:	4542      	cmp	r2, r8
 801ba42:	f280 81c6 	bge.w	801bdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ba46:	2800      	cmp	r0, #0
 801ba48:	f2c0 81c3 	blt.w	801bdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ba4c:	f103 38ff 	add.w	r8, r3, #4294967295
 801ba50:	4540      	cmp	r0, r8
 801ba52:	f280 81be 	bge.w	801bdd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ba56:	fa0f f38e 	sxth.w	r3, lr
 801ba5a:	fb00 2203 	mla	r2, r0, r3, r2
 801ba5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ba60:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801ba64:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801ba68:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ba6c:	2900      	cmp	r1, #0
 801ba6e:	f000 81a6 	beq.w	801bdbe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801ba72:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ba76:	900c      	str	r0, [sp, #48]	; 0x30
 801ba78:	0e00      	lsrs	r0, r0, #24
 801ba7a:	9013      	str	r0, [sp, #76]	; 0x4c
 801ba7c:	f1bc 0f00 	cmp.w	ip, #0
 801ba80:	d00f      	beq.n	801baa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ba82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ba86:	3b01      	subs	r3, #1
 801ba88:	009b      	lsls	r3, r3, #2
 801ba8a:	3304      	adds	r3, #4
 801ba8c:	eb08 0003 	add.w	r0, r8, r3
 801ba90:	f858 3003 	ldr.w	r3, [r8, r3]
 801ba94:	9308      	str	r3, [sp, #32]
 801ba96:	0e1b      	lsrs	r3, r3, #24
 801ba98:	9311      	str	r3, [sp, #68]	; 0x44
 801ba9a:	6843      	ldr	r3, [r0, #4]
 801ba9c:	930d      	str	r3, [sp, #52]	; 0x34
 801ba9e:	0e1b      	lsrs	r3, r3, #24
 801baa0:	9314      	str	r3, [sp, #80]	; 0x50
 801baa2:	b289      	uxth	r1, r1
 801baa4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801baa6:	fa1f fc8c 	uxth.w	ip, ip
 801baaa:	0108      	lsls	r0, r1, #4
 801baac:	fb01 f90c 	mul.w	r9, r1, ip
 801bab0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bab4:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801bab8:	eba0 0809 	sub.w	r8, r0, r9
 801babc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801babe:	fa1f f18c 	uxth.w	r1, ip
 801bac2:	fa1f f888 	uxth.w	r8, r8
 801bac6:	1a5b      	subs	r3, r3, r1
 801bac8:	fb08 f000 	mul.w	r0, r8, r0
 801bacc:	b29b      	uxth	r3, r3
 801bace:	fb03 000e 	mla	r0, r3, lr, r0
 801bad2:	fb01 0004 	mla	r0, r1, r4, r0
 801bad6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bad8:	fb09 0004 	mla	r0, r9, r4, r0
 801badc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bae0:	2800      	cmp	r0, #0
 801bae2:	f000 80f2 	beq.w	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bae6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801baea:	d01b      	beq.n	801bb24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801baec:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801baf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801baf4:	fb0e fa0a 	mul.w	sl, lr, sl
 801baf8:	fb0e fe02 	mul.w	lr, lr, r2
 801bafc:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801bb00:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bb04:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bb08:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb0c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bb10:	4452      	add	r2, sl
 801bb12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb16:	0a12      	lsrs	r2, r2, #8
 801bb18:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bb1c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb20:	ea42 020c 	orr.w	r2, r2, ip
 801bb24:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bb26:	2cff      	cmp	r4, #255	; 0xff
 801bb28:	d021      	beq.n	801bb6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bb2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bb2c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bb30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bb32:	fb04 fb0b 	mul.w	fp, r4, fp
 801bb36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bb38:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bb3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bb3e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bb42:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bb46:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb4e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bb52:	44de      	add	lr, fp
 801bb54:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bb58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb60:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bb68:	ea4e 040a 	orr.w	r4, lr, sl
 801bb6c:	940c      	str	r4, [sp, #48]	; 0x30
 801bb6e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb70:	2cff      	cmp	r4, #255	; 0xff
 801bb72:	d021      	beq.n	801bbb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bb74:	9c08      	ldr	r4, [sp, #32]
 801bb76:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bb7a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb7c:	fb04 fb0b 	mul.w	fp, r4, fp
 801bb80:	9c08      	ldr	r4, [sp, #32]
 801bb82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bb86:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bb8c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bb90:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb98:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bb9c:	44de      	add	lr, fp
 801bb9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bba2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bba6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bbaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bbb2:	ea4e 040a 	orr.w	r4, lr, sl
 801bbb6:	9408      	str	r4, [sp, #32]
 801bbb8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bbba:	2cff      	cmp	r4, #255	; 0xff
 801bbbc:	d021      	beq.n	801bc02 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bbbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bbc0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bbc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bbc6:	fb04 fb0b 	mul.w	fp, r4, fp
 801bbca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bbcc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bbd0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bbd2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bbd6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bbda:	fb04 fa0a 	mul.w	sl, r4, sl
 801bbde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbe2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bbe6:	44de      	add	lr, fp
 801bbe8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bbec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bbf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bbf4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbf8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bbfc:	ea4e 040a 	orr.w	r4, lr, sl
 801bc00:	940d      	str	r4, [sp, #52]	; 0x34
 801bc02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bc04:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bc08:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bc0c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bc10:	9c08      	ldr	r4, [sp, #32]
 801bc12:	fb08 fc0c 	mul.w	ip, r8, ip
 801bc16:	fb03 cc0e 	mla	ip, r3, lr, ip
 801bc1a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bc1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bc20:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bc24:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bc28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bc2a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bc2e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bc32:	fb08 f80e 	mul.w	r8, r8, lr
 801bc36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc3a:	fb03 8202 	mla	r2, r3, r2, r8
 801bc3e:	9b08      	ldr	r3, [sp, #32]
 801bc40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc44:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801bc48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc4a:	fb01 220a 	mla	r2, r1, sl, r2
 801bc4e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801bc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc54:	fb09 2901 	mla	r9, r9, r1, r2
 801bc58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bc5a:	4343      	muls	r3, r0
 801bc5c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bc60:	1c58      	adds	r0, r3, #1
 801bc62:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bc66:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bc6a:	783b      	ldrb	r3, [r7, #0]
 801bc6c:	ea4c 0c09 	orr.w	ip, ip, r9
 801bc70:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801bc74:	fa5f f28c 	uxtb.w	r2, ip
 801bc78:	b2c0      	uxtb	r0, r0
 801bc7a:	fb12 f201 	smulbb	r2, r2, r1
 801bc7e:	fb03 2300 	mla	r3, r3, r0, r2
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	1c5a      	adds	r2, r3, #1
 801bc86:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bc8a:	787a      	ldrb	r2, [r7, #1]
 801bc8c:	fb12 f200 	smulbb	r2, r2, r0
 801bc90:	121b      	asrs	r3, r3, #8
 801bc92:	703b      	strb	r3, [r7, #0]
 801bc94:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bc98:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bc9c:	fb03 2301 	mla	r3, r3, r1, r2
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	1c5a      	adds	r2, r3, #1
 801bca4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bca8:	121b      	asrs	r3, r3, #8
 801bcaa:	707b      	strb	r3, [r7, #1]
 801bcac:	78bb      	ldrb	r3, [r7, #2]
 801bcae:	fb13 f000 	smulbb	r0, r3, r0
 801bcb2:	fb0c 0c01 	mla	ip, ip, r1, r0
 801bcb6:	fa1f fc8c 	uxth.w	ip, ip
 801bcba:	f10c 0301 	add.w	r3, ip, #1
 801bcbe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bcc2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bcc6:	f887 c002 	strb.w	ip, [r7, #2]
 801bcca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bccc:	3703      	adds	r7, #3
 801bcce:	441d      	add	r5, r3
 801bcd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bcd2:	441e      	add	r6, r3
 801bcd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bcd6:	3b01      	subs	r3, #1
 801bcd8:	9318      	str	r3, [sp, #96]	; 0x60
 801bcda:	e69f      	b.n	801ba1c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bcdc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bcde:	441d      	add	r5, r3
 801bce0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bce2:	441e      	add	r6, r3
 801bce4:	9b07      	ldr	r3, [sp, #28]
 801bce6:	3b01      	subs	r3, #1
 801bce8:	9307      	str	r3, [sp, #28]
 801bcea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bcec:	3303      	adds	r3, #3
 801bcee:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf0:	e674      	b.n	801b9dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bcf2:	d025      	beq.n	801bd40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801bcf4:	9b07      	ldr	r3, [sp, #28]
 801bcf6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801bcf8:	3b01      	subs	r3, #1
 801bcfa:	fb00 5003 	mla	r0, r0, r3, r5
 801bcfe:	1400      	asrs	r0, r0, #16
 801bd00:	f53f ae89 	bmi.w	801ba16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bd04:	3901      	subs	r1, #1
 801bd06:	4288      	cmp	r0, r1
 801bd08:	f6bf ae85 	bge.w	801ba16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bd0c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bd0e:	fb01 6303 	mla	r3, r1, r3, r6
 801bd12:	141b      	asrs	r3, r3, #16
 801bd14:	f53f ae7f 	bmi.w	801ba16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bd18:	3a01      	subs	r2, #1
 801bd1a:	4293      	cmp	r3, r2
 801bd1c:	f6bf ae7b 	bge.w	801ba16 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd22:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bd26:	f103 0e03 	add.w	lr, r3, #3
 801bd2a:	f1bb 0f00 	cmp.w	fp, #0
 801bd2e:	dc6e      	bgt.n	801be0e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801bd30:	9b07      	ldr	r3, [sp, #28]
 801bd32:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd3c:	4423      	add	r3, r4
 801bd3e:	930a      	str	r3, [sp, #40]	; 0x28
 801bd40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	f340 81ab 	ble.w	801c09e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801bd48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bd4e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd56:	eef0 6a62 	vmov.f32	s13, s5
 801bd5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bd5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd66:	ee16 5a90 	vmov	r5, s13
 801bd6a:	eef0 6a43 	vmov.f32	s13, s6
 801bd6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd72:	ee16 6a90 	vmov	r6, s13
 801bd76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd8e:	ee12 2a90 	vmov	r2, s5
 801bd92:	eef0 2a47 	vmov.f32	s5, s14
 801bd96:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd9a:	ee13 2a10 	vmov	r2, s6
 801bd9e:	9329      	str	r3, [sp, #164]	; 0xa4
 801bda0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bda2:	eeb0 3a67 	vmov.f32	s6, s15
 801bda6:	fb92 f3f3 	sdiv	r3, r2, r3
 801bdaa:	932a      	str	r3, [sp, #168]	; 0xa8
 801bdac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bdae:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bdb0:	3b01      	subs	r3, #1
 801bdb2:	9317      	str	r3, [sp, #92]	; 0x5c
 801bdb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bdb6:	bf08      	it	eq
 801bdb8:	4613      	moveq	r3, r2
 801bdba:	9307      	str	r3, [sp, #28]
 801bdbc:	e600      	b.n	801b9c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801bdbe:	f1bc 0f00 	cmp.w	ip, #0
 801bdc2:	f43f ae6e 	beq.w	801baa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bdc6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801bdca:	9308      	str	r3, [sp, #32]
 801bdcc:	0e1b      	lsrs	r3, r3, #24
 801bdce:	9311      	str	r3, [sp, #68]	; 0x44
 801bdd0:	e667      	b.n	801baa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bdd2:	f112 0801 	adds.w	r8, r2, #1
 801bdd6:	f53f af78 	bmi.w	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bdda:	45c6      	cmp	lr, r8
 801bddc:	f6ff af75 	blt.w	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bde0:	f110 0801 	adds.w	r8, r0, #1
 801bde4:	f53f af71 	bmi.w	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bde8:	4543      	cmp	r3, r8
 801bdea:	f6ff af6e 	blt.w	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bdee:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801bdf0:	b21b      	sxth	r3, r3
 801bdf2:	9201      	str	r2, [sp, #4]
 801bdf4:	9300      	str	r3, [sp, #0]
 801bdf6:	fa0f f38e 	sxth.w	r3, lr
 801bdfa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801bdfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be00:	e9cd c404 	strd	ip, r4, [sp, #16]
 801be04:	4639      	mov	r1, r7
 801be06:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801be08:	f7ff fc79 	bl	801b6fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801be0c:	e75d      	b.n	801bcca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801be0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801be10:	142f      	asrs	r7, r5, #16
 801be12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801be14:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801be18:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801be1c:	1433      	asrs	r3, r6, #16
 801be1e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801be22:	fb02 7303 	mla	r3, r2, r3, r7
 801be26:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801be2a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801be2e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801be32:	2900      	cmp	r1, #0
 801be34:	f000 812a 	beq.w	801c08c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801be38:	687c      	ldr	r4, [r7, #4]
 801be3a:	940e      	str	r4, [sp, #56]	; 0x38
 801be3c:	0e24      	lsrs	r4, r4, #24
 801be3e:	9415      	str	r4, [sp, #84]	; 0x54
 801be40:	b178      	cbz	r0, 801be62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801be42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801be46:	3a01      	subs	r2, #1
 801be48:	0092      	lsls	r2, r2, #2
 801be4a:	3204      	adds	r2, #4
 801be4c:	eb07 0802 	add.w	r8, r7, r2
 801be50:	58ba      	ldr	r2, [r7, r2]
 801be52:	9209      	str	r2, [sp, #36]	; 0x24
 801be54:	0e12      	lsrs	r2, r2, #24
 801be56:	9212      	str	r2, [sp, #72]	; 0x48
 801be58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801be5c:	920f      	str	r2, [sp, #60]	; 0x3c
 801be5e:	0e12      	lsrs	r2, r2, #24
 801be60:	9216      	str	r2, [sp, #88]	; 0x58
 801be62:	b289      	uxth	r1, r1
 801be64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be66:	b280      	uxth	r0, r0
 801be68:	fb01 f900 	mul.w	r9, r1, r0
 801be6c:	0109      	lsls	r1, r1, #4
 801be6e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801be72:	eba1 0809 	sub.w	r8, r1, r9
 801be76:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801be7a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801be7c:	b280      	uxth	r0, r0
 801be7e:	fa1f f888 	uxth.w	r8, r8
 801be82:	1a12      	subs	r2, r2, r0
 801be84:	fb08 f101 	mul.w	r1, r8, r1
 801be88:	b292      	uxth	r2, r2
 801be8a:	fb02 110c 	mla	r1, r2, ip, r1
 801be8e:	fb00 1104 	mla	r1, r0, r4, r1
 801be92:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801be94:	fb09 1104 	mla	r1, r9, r4, r1
 801be98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801be9c:	2900      	cmp	r1, #0
 801be9e:	f000 80ec 	beq.w	801c07a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801bea2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bea6:	d019      	beq.n	801bedc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801bea8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801beac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801beb0:	fb0c fa0a 	mul.w	sl, ip, sl
 801beb4:	fb0c fc03 	mul.w	ip, ip, r3
 801beb8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bebc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bec0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801bec4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bec8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801becc:	4453      	add	r3, sl
 801bece:	0a3f      	lsrs	r7, r7, #8
 801bed0:	0a1b      	lsrs	r3, r3, #8
 801bed2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bed6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801beda:	433b      	orrs	r3, r7
 801bedc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bede:	2cff      	cmp	r4, #255	; 0xff
 801bee0:	d020      	beq.n	801bf24 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801bee2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bee4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bee8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801beea:	4367      	muls	r7, r4
 801beec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801beee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bef2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bef6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bef8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801befc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf00:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf04:	44bc      	add	ip, r7
 801bf06:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bf0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf0e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bf12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf1e:	ea4c 040a 	orr.w	r4, ip, sl
 801bf22:	940e      	str	r4, [sp, #56]	; 0x38
 801bf24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf26:	2cff      	cmp	r4, #255	; 0xff
 801bf28:	d020      	beq.n	801bf6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801bf2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bf2c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bf30:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf32:	4367      	muls	r7, r4
 801bf34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bf36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bf3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bf3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bf44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf48:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf4c:	44bc      	add	ip, r7
 801bf4e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bf52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bf5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf66:	ea4c 040a 	orr.w	r4, ip, sl
 801bf6a:	9409      	str	r4, [sp, #36]	; 0x24
 801bf6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bf6e:	2cff      	cmp	r4, #255	; 0xff
 801bf70:	d020      	beq.n	801bfb4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801bf72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bf74:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bf78:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bf7a:	4367      	muls	r7, r4
 801bf7c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bf7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bf82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bf86:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bf88:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bf8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf90:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf94:	44bc      	add	ip, r7
 801bf96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bf9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bfa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfa6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bfaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bfae:	ea4c 040a 	orr.w	r4, ip, sl
 801bfb2:	940f      	str	r4, [sp, #60]	; 0x3c
 801bfb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bfb6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801bfba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bfbe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bfc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bfc4:	fb08 f707 	mul.w	r7, r8, r7
 801bfc8:	fb02 770c 	mla	r7, r2, ip, r7
 801bfcc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bfd0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bfd2:	fb00 770c 	mla	r7, r0, ip, r7
 801bfd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bfda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bfdc:	fb09 770c 	mla	r7, r9, ip, r7
 801bfe0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801bfe4:	fb08 f80c 	mul.w	r8, r8, ip
 801bfe8:	0a3f      	lsrs	r7, r7, #8
 801bfea:	fb02 8303 	mla	r3, r2, r3, r8
 801bfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bff0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bff4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801bff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bffa:	fb00 330a 	mla	r3, r0, sl, r3
 801bffe:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c002:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c004:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c00a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c00e:	434b      	muls	r3, r1
 801c010:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c014:	1c59      	adds	r1, r3, #1
 801c016:	ea47 070c 	orr.w	r7, r7, ip
 801c01a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c01e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c022:	b2fa      	uxtb	r2, r7
 801c024:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c028:	fb12 f200 	smulbb	r2, r2, r0
 801c02c:	b2c9      	uxtb	r1, r1
 801c02e:	fb03 2301 	mla	r3, r3, r1, r2
 801c032:	b29b      	uxth	r3, r3
 801c034:	1c5a      	adds	r2, r3, #1
 801c036:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c03a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c03e:	fb12 f201 	smulbb	r2, r2, r1
 801c042:	121b      	asrs	r3, r3, #8
 801c044:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c048:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c04c:	0c3f      	lsrs	r7, r7, #16
 801c04e:	fb03 2300 	mla	r3, r3, r0, r2
 801c052:	b29b      	uxth	r3, r3
 801c054:	1c5a      	adds	r2, r3, #1
 801c056:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c05a:	121b      	asrs	r3, r3, #8
 801c05c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c060:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c064:	fb13 f101 	smulbb	r1, r3, r1
 801c068:	fb07 1700 	mla	r7, r7, r0, r1
 801c06c:	b2bf      	uxth	r7, r7
 801c06e:	1c79      	adds	r1, r7, #1
 801c070:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c074:	123f      	asrs	r7, r7, #8
 801c076:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c07a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c07c:	f10e 0e03 	add.w	lr, lr, #3
 801c080:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c084:	441d      	add	r5, r3
 801c086:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c088:	441e      	add	r6, r3
 801c08a:	e64e      	b.n	801bd2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801c08c:	2800      	cmp	r0, #0
 801c08e:	f43f aee8 	beq.w	801be62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c092:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c096:	9209      	str	r2, [sp, #36]	; 0x24
 801c098:	0e12      	lsrs	r2, r2, #24
 801c09a:	9212      	str	r2, [sp, #72]	; 0x48
 801c09c:	e6e1      	b.n	801be62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c09e:	b01d      	add	sp, #116	; 0x74
 801c0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a8:	b087      	sub	sp, #28
 801c0aa:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801c0ae:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c0b2:	fb05 7003 	mla	r0, r5, r3, r7
 801c0b6:	2d00      	cmp	r5, #0
 801c0b8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c0bc:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801c0c0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c0c4:	f2c0 810a 	blt.w	801c2dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c0c8:	45a8      	cmp	r8, r5
 801c0ca:	f340 8107 	ble.w	801c2dc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c0ce:	2f00      	cmp	r7, #0
 801c0d0:	f2c0 8102 	blt.w	801c2d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c0d4:	42bb      	cmp	r3, r7
 801c0d6:	f340 80ff 	ble.w	801c2d8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c0da:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c0de:	1c7a      	adds	r2, r7, #1
 801c0e0:	f100 80ff 	bmi.w	801c2e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c0e4:	4293      	cmp	r3, r2
 801c0e6:	f340 80fc 	ble.w	801c2e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c0ea:	2c00      	cmp	r4, #0
 801c0ec:	f000 80fb 	beq.w	801c2e6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801c0f0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c0f4:	3501      	adds	r5, #1
 801c0f6:	f100 80fa 	bmi.w	801c2ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c0fa:	45a8      	cmp	r8, r5
 801c0fc:	f340 80f7 	ble.w	801c2ee <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c100:	f1be 0f00 	cmp.w	lr, #0
 801c104:	f000 80f6 	beq.w	801c2f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801c108:	2f00      	cmp	r7, #0
 801c10a:	f2c0 80ee 	blt.w	801c2ea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c10e:	42bb      	cmp	r3, r7
 801c110:	f340 80eb 	ble.w	801c2ea <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c114:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c118:	3701      	adds	r7, #1
 801c11a:	f100 80ee 	bmi.w	801c2fa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c11e:	42bb      	cmp	r3, r7
 801c120:	f340 80eb 	ble.w	801c2fa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c124:	2c00      	cmp	r4, #0
 801c126:	f000 80ea 	beq.w	801c2fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801c12a:	3301      	adds	r3, #1
 801c12c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c130:	fa1f fc84 	uxth.w	ip, r4
 801c134:	fa1f fe8e 	uxth.w	lr, lr
 801c138:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c13c:	fb0c f90e 	mul.w	r9, ip, lr
 801c140:	0e13      	lsrs	r3, r2, #24
 801c142:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c146:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801c14a:	9302      	str	r3, [sp, #8]
 801c14c:	ebac 0709 	sub.w	r7, ip, r9
 801c150:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c154:	fa1f f48e 	uxth.w	r4, lr
 801c158:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801c15c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c160:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801c164:	fb0a fe0e 	mul.w	lr, sl, lr
 801c168:	1b1b      	subs	r3, r3, r4
 801c16a:	fb0a f606 	mul.w	r6, sl, r6
 801c16e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c172:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c176:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c17a:	b29b      	uxth	r3, r3
 801c17c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c180:	b2bf      	uxth	r7, r7
 801c182:	9301      	str	r3, [sp, #4]
 801c184:	44e6      	add	lr, ip
 801c186:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c18a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c18e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c192:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801c196:	9303      	str	r3, [sp, #12]
 801c198:	0a33      	lsrs	r3, r6, #8
 801c19a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801c19e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c1a2:	9304      	str	r3, [sp, #16]
 801c1a4:	fb0b f606 	mul.w	r6, fp, r6
 801c1a8:	fb0b f000 	mul.w	r0, fp, r0
 801c1ac:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801c1b0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c1b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c1b8:	44b6      	add	lr, r6
 801c1ba:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801c1be:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c1c2:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c1c6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c1ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c1ce:	fb08 f606 	mul.w	r6, r8, r6
 801c1d2:	0a03      	lsrs	r3, r0, #8
 801c1d4:	fb08 f505 	mul.w	r5, r8, r5
 801c1d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c1dc:	0a30      	lsrs	r0, r6, #8
 801c1de:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c1e2:	9305      	str	r3, [sp, #20]
 801c1e4:	0e13      	lsrs	r3, r2, #24
 801c1e6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c1ea:	fb0e fe07 	mul.w	lr, lr, r7
 801c1ee:	4430      	add	r0, r6
 801c1f0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c1f4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c1f8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801c1fc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c200:	0a00      	lsrs	r0, r0, #8
 801c202:	435e      	muls	r6, r3
 801c204:	0a2d      	lsrs	r5, r5, #8
 801c206:	435a      	muls	r2, r3
 801c208:	9b03      	ldr	r3, [sp, #12]
 801c20a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801c20e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c212:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c216:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c21a:	44b4      	add	ip, r6
 801c21c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801c220:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c224:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c228:	9e01      	ldr	r6, [sp, #4]
 801c22a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c22e:	fb03 ee06 	mla	lr, r3, r6, lr
 801c232:	9b04      	ldr	r3, [sp, #16]
 801c234:	0a12      	lsrs	r2, r2, #8
 801c236:	fb0c ee09 	mla	lr, ip, r9, lr
 801c23a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801c23e:	9b05      	ldr	r3, [sp, #20]
 801c240:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c244:	fb00 ee04 	mla	lr, r0, r4, lr
 801c248:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c24c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801c250:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801c254:	9b01      	ldr	r3, [sp, #4]
 801c256:	fb07 fe0e 	mul.w	lr, r7, lr
 801c25a:	fb07 f70b 	mul.w	r7, r7, fp
 801c25e:	fb03 ee06 	mla	lr, r3, r6, lr
 801c262:	fb03 730a 	mla	r3, r3, sl, r7
 801c266:	fb09 e202 	mla	r2, r9, r2, lr
 801c26a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c26e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801c272:	fb04 3408 	mla	r4, r4, r8, r3
 801c276:	9b02      	ldr	r3, [sp, #8]
 801c278:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c27c:	fb09 4903 	mla	r9, r9, r3, r4
 801c280:	780b      	ldrb	r3, [r1, #0]
 801c282:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c286:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801c28a:	ea40 0e0e 	orr.w	lr, r0, lr
 801c28e:	fa5f f989 	uxtb.w	r9, r9
 801c292:	fb03 f209 	mul.w	r2, r3, r9
 801c296:	1c53      	adds	r3, r2, #1
 801c298:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c29c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801c2a0:	700b      	strb	r3, [r1, #0]
 801c2a2:	784b      	ldrb	r3, [r1, #1]
 801c2a4:	fb03 f309 	mul.w	r3, r3, r9
 801c2a8:	1c5a      	adds	r2, r3, #1
 801c2aa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c2ae:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801c2b2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c2b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c2ba:	704b      	strb	r3, [r1, #1]
 801c2bc:	788b      	ldrb	r3, [r1, #2]
 801c2be:	fb03 f909 	mul.w	r9, r3, r9
 801c2c2:	f109 0301 	add.w	r3, r9, #1
 801c2c6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c2ca:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801c2ce:	f881 e002 	strb.w	lr, [r1, #2]
 801c2d2:	b007      	add	sp, #28
 801c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2d8:	2600      	movs	r6, #0
 801c2da:	e700      	b.n	801c0de <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801c2dc:	2000      	movs	r0, #0
 801c2de:	4606      	mov	r6, r0
 801c2e0:	e708      	b.n	801c0f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c2e2:	2000      	movs	r0, #0
 801c2e4:	e706      	b.n	801c0f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	e704      	b.n	801c0f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c2ea:	2500      	movs	r5, #0
 801c2ec:	e714      	b.n	801c118 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	4615      	mov	r5, r2
 801c2f2:	e71d      	b.n	801c130 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c2f4:	4672      	mov	r2, lr
 801c2f6:	4675      	mov	r5, lr
 801c2f8:	e71a      	b.n	801c130 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c2fa:	2200      	movs	r2, #0
 801c2fc:	e718      	b.n	801c130 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c2fe:	4622      	mov	r2, r4
 801c300:	e716      	b.n	801c130 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801c302 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c306:	b099      	sub	sp, #100	; 0x64
 801c308:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c30c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c30e:	9017      	str	r0, [sp, #92]	; 0x5c
 801c310:	9306      	str	r3, [sp, #24]
 801c312:	6850      	ldr	r0, [r2, #4]
 801c314:	6812      	ldr	r2, [r2, #0]
 801c316:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c31a:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801c31e:	fb00 1303 	mla	r3, r0, r3, r1
 801c322:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c326:	18d3      	adds	r3, r2, r3
 801c328:	9309      	str	r3, [sp, #36]	; 0x24
 801c32a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	930e      	str	r3, [sp, #56]	; 0x38
 801c330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c332:	2b00      	cmp	r3, #0
 801c334:	dc03      	bgt.n	801c33e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c336:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c338:	2b00      	cmp	r3, #0
 801c33a:	f340 8360 	ble.w	801c9fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c33e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c340:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c344:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c348:	1e48      	subs	r0, r1, #1
 801c34a:	1e57      	subs	r7, r2, #1
 801c34c:	9b06      	ldr	r3, [sp, #24]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	f340 817b 	ble.w	801c64a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801c354:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c358:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c35c:	d406      	bmi.n	801c36c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c35e:	4584      	cmp	ip, r0
 801c360:	da04      	bge.n	801c36c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c362:	2b00      	cmp	r3, #0
 801c364:	db02      	blt.n	801c36c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c366:	42bb      	cmp	r3, r7
 801c368:	f2c0 8170 	blt.w	801c64c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c36c:	f11c 0c01 	adds.w	ip, ip, #1
 801c370:	f100 8160 	bmi.w	801c634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c374:	4561      	cmp	r1, ip
 801c376:	f2c0 815d 	blt.w	801c634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c37a:	3301      	adds	r3, #1
 801c37c:	f100 815a 	bmi.w	801c634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c380:	429a      	cmp	r2, r3
 801c382:	f2c0 8157 	blt.w	801c634 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c386:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c38a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c38c:	f1b8 0f00 	cmp.w	r8, #0
 801c390:	f340 8179 	ble.w	801c686 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c394:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c396:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c39a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c39c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c3a0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c3a4:	142a      	asrs	r2, r5, #16
 801c3a6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c3aa:	689b      	ldr	r3, [r3, #8]
 801c3ac:	f100 81be 	bmi.w	801c72c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c3b0:	f103 39ff 	add.w	r9, r3, #4294967295
 801c3b4:	454a      	cmp	r2, r9
 801c3b6:	f280 81b9 	bge.w	801c72c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c3ba:	f1bc 0f00 	cmp.w	ip, #0
 801c3be:	f2c0 81b5 	blt.w	801c72c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c3c2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c3c6:	45cc      	cmp	ip, r9
 801c3c8:	f280 81b0 	bge.w	801c72c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c3cc:	b21b      	sxth	r3, r3
 801c3ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c3d0:	fb0c 2203 	mla	r2, ip, r3, r2
 801c3d4:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c3d8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c3dc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c3e0:	2900      	cmp	r1, #0
 801c3e2:	f000 8197 	beq.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801c3e6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c3ea:	940a      	str	r4, [sp, #40]	; 0x28
 801c3ec:	0e24      	lsrs	r4, r4, #24
 801c3ee:	9411      	str	r4, [sp, #68]	; 0x44
 801c3f0:	b180      	cbz	r0, 801c414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c3f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c3f6:	3b01      	subs	r3, #1
 801c3f8:	009b      	lsls	r3, r3, #2
 801c3fa:	3304      	adds	r3, #4
 801c3fc:	eb09 0c03 	add.w	ip, r9, r3
 801c400:	f859 3003 	ldr.w	r3, [r9, r3]
 801c404:	9307      	str	r3, [sp, #28]
 801c406:	0e1b      	lsrs	r3, r3, #24
 801c408:	930f      	str	r3, [sp, #60]	; 0x3c
 801c40a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c40e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c410:	0e1b      	lsrs	r3, r3, #24
 801c412:	9312      	str	r3, [sp, #72]	; 0x48
 801c414:	b289      	uxth	r1, r1
 801c416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c418:	b280      	uxth	r0, r0
 801c41a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c41c:	fb01 fa00 	mul.w	sl, r1, r0
 801c420:	0109      	lsls	r1, r1, #4
 801c422:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c426:	eba1 090a 	sub.w	r9, r1, sl
 801c42a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c42e:	b280      	uxth	r0, r0
 801c430:	fa1f f989 	uxth.w	r9, r9
 801c434:	1a09      	subs	r1, r1, r0
 801c436:	fb09 f303 	mul.w	r3, r9, r3
 801c43a:	b289      	uxth	r1, r1
 801c43c:	fb01 330e 	mla	r3, r1, lr, r3
 801c440:	fb00 3304 	mla	r3, r0, r4, r3
 801c444:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c446:	fb0a 3304 	mla	r3, sl, r4, r3
 801c44a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c44e:	2b00      	cmp	r3, #0
 801c450:	f000 80e8 	beq.w	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c454:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c458:	d01b      	beq.n	801c492 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801c45a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c45e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c462:	fb0e fb0b 	mul.w	fp, lr, fp
 801c466:	fb0e fe02 	mul.w	lr, lr, r2
 801c46a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c46e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c472:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c476:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c47a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c47e:	445a      	add	r2, fp
 801c480:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c484:	0a12      	lsrs	r2, r2, #8
 801c486:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c48a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c48e:	ea42 020c 	orr.w	r2, r2, ip
 801c492:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c494:	2cff      	cmp	r4, #255	; 0xff
 801c496:	d021      	beq.n	801c4dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c498:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c49a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c49e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c4a0:	fb04 fc0c 	mul.w	ip, r4, ip
 801c4a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c4a6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c4aa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c4ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c4b0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c4b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c4b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801c4bc:	44e6      	add	lr, ip
 801c4be:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c4c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4c6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c4ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c4ce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c4d2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c4d6:	ea4e 040b 	orr.w	r4, lr, fp
 801c4da:	940a      	str	r4, [sp, #40]	; 0x28
 801c4dc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c4de:	2cff      	cmp	r4, #255	; 0xff
 801c4e0:	d021      	beq.n	801c526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c4e2:	9c07      	ldr	r4, [sp, #28]
 801c4e4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c4e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c4ea:	fb04 fc0c 	mul.w	ip, r4, ip
 801c4ee:	9c07      	ldr	r4, [sp, #28]
 801c4f0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c4f4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c4f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c4fa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c4fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c502:	fb04 fb0b 	mul.w	fp, r4, fp
 801c506:	44e6      	add	lr, ip
 801c508:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c50c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c510:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c514:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c518:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c51c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c520:	ea4e 040b 	orr.w	r4, lr, fp
 801c524:	9407      	str	r4, [sp, #28]
 801c526:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c528:	2cff      	cmp	r4, #255	; 0xff
 801c52a:	d021      	beq.n	801c570 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c52c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c52e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c532:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c534:	fb04 fc0c 	mul.w	ip, r4, ip
 801c538:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c53a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c53e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c542:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c544:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c548:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c54c:	fb04 fb0b 	mul.w	fp, r4, fp
 801c550:	44e6      	add	lr, ip
 801c552:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c556:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c55a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c55e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c562:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c566:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c56a:	ea4e 040b 	orr.w	r4, lr, fp
 801c56e:	940b      	str	r4, [sp, #44]	; 0x2c
 801c570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c572:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c576:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c57a:	2bff      	cmp	r3, #255	; 0xff
 801c57c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c580:	9c07      	ldr	r4, [sp, #28]
 801c582:	fb09 fc0c 	mul.w	ip, r9, ip
 801c586:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c58a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c58e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c590:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c594:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c598:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c59a:	fb0a cc0e 	mla	ip, sl, lr, ip
 801c59e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c5a2:	fb09 f90e 	mul.w	r9, r9, lr
 801c5a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5aa:	fb01 9202 	mla	r2, r1, r2, r9
 801c5ae:	9907      	ldr	r1, [sp, #28]
 801c5b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c5b4:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801c5b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c5ba:	fb00 220b 	mla	r2, r0, fp, r2
 801c5be:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c5c2:	fb0a 2a00 	mla	sl, sl, r0, r2
 801c5c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c5ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c5ce:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c5d2:	fa5f f08c 	uxtb.w	r0, ip
 801c5d6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c5da:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c5de:	f000 80a2 	beq.w	801c726 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801c5e2:	43db      	mvns	r3, r3
 801c5e4:	783a      	ldrb	r2, [r7, #0]
 801c5e6:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	fb02 fe03 	mul.w	lr, r2, r3
 801c5f0:	fb0a fa03 	mul.w	sl, sl, r3
 801c5f4:	f10e 0201 	add.w	r2, lr, #1
 801c5f8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c5fc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c600:	703a      	strb	r2, [r7, #0]
 801c602:	787a      	ldrb	r2, [r7, #1]
 801c604:	fb02 f003 	mul.w	r0, r2, r3
 801c608:	f10a 0301 	add.w	r3, sl, #1
 801c60c:	1c42      	adds	r2, r0, #1
 801c60e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c612:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c616:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c61a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c61e:	707a      	strb	r2, [r7, #1]
 801c620:	f887 c002 	strb.w	ip, [r7, #2]
 801c624:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c626:	3703      	adds	r7, #3
 801c628:	f108 38ff 	add.w	r8, r8, #4294967295
 801c62c:	441d      	add	r5, r3
 801c62e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c630:	441e      	add	r6, r3
 801c632:	e6ab      	b.n	801c38c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c634:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c636:	441d      	add	r5, r3
 801c638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c63a:	441e      	add	r6, r3
 801c63c:	9b06      	ldr	r3, [sp, #24]
 801c63e:	3b01      	subs	r3, #1
 801c640:	9306      	str	r3, [sp, #24]
 801c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c644:	3303      	adds	r3, #3
 801c646:	9309      	str	r3, [sp, #36]	; 0x24
 801c648:	e680      	b.n	801c34c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c64a:	d024      	beq.n	801c696 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801c64c:	9b06      	ldr	r3, [sp, #24]
 801c64e:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c650:	3b01      	subs	r3, #1
 801c652:	fb00 5003 	mla	r0, r0, r3, r5
 801c656:	1400      	asrs	r0, r0, #16
 801c658:	f53f ae95 	bmi.w	801c386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c65c:	3901      	subs	r1, #1
 801c65e:	4288      	cmp	r0, r1
 801c660:	f6bf ae91 	bge.w	801c386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c664:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c666:	fb01 6303 	mla	r3, r1, r3, r6
 801c66a:	141b      	asrs	r3, r3, #16
 801c66c:	f53f ae8b 	bmi.w	801c386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c670:	3a01      	subs	r2, #1
 801c672:	4293      	cmp	r3, r2
 801c674:	f6bf ae87 	bge.w	801c386 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c67a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c67e:	1cdf      	adds	r7, r3, #3
 801c680:	f1bb 0f00 	cmp.w	fp, #0
 801c684:	dc6e      	bgt.n	801c764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801c686:	9b06      	ldr	r3, [sp, #24]
 801c688:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c68e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c692:	4423      	add	r3, r4
 801c694:	9309      	str	r3, [sp, #36]	; 0x24
 801c696:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f340 81b0 	ble.w	801c9fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c6a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c6a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6ac:	eef0 6a62 	vmov.f32	s13, s5
 801c6b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c6b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6bc:	ee16 5a90 	vmov	r5, s13
 801c6c0:	eef0 6a43 	vmov.f32	s13, s6
 801c6c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6c8:	ee16 6a90 	vmov	r6, s13
 801c6cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c6d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c6d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c6d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c6dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c6e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c6e4:	ee12 2a90 	vmov	r2, s5
 801c6e8:	eef0 2a47 	vmov.f32	s5, s14
 801c6ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801c6f0:	ee13 2a10 	vmov	r2, s6
 801c6f4:	9325      	str	r3, [sp, #148]	; 0x94
 801c6f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c6f8:	eeb0 3a67 	vmov.f32	s6, s15
 801c6fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801c700:	9326      	str	r3, [sp, #152]	; 0x98
 801c702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c704:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c706:	3b01      	subs	r3, #1
 801c708:	9315      	str	r3, [sp, #84]	; 0x54
 801c70a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c70c:	bf08      	it	eq
 801c70e:	4613      	moveq	r3, r2
 801c710:	9306      	str	r3, [sp, #24]
 801c712:	e60d      	b.n	801c330 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c714:	2800      	cmp	r0, #0
 801c716:	f43f ae7d 	beq.w	801c414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c71a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c71e:	9307      	str	r3, [sp, #28]
 801c720:	0e1b      	lsrs	r3, r3, #24
 801c722:	930f      	str	r3, [sp, #60]	; 0x3c
 801c724:	e676      	b.n	801c414 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c726:	7038      	strb	r0, [r7, #0]
 801c728:	7079      	strb	r1, [r7, #1]
 801c72a:	e779      	b.n	801c620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c72c:	f112 0901 	adds.w	r9, r2, #1
 801c730:	f53f af78 	bmi.w	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c734:	454b      	cmp	r3, r9
 801c736:	f6ff af75 	blt.w	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c73a:	f11c 0901 	adds.w	r9, ip, #1
 801c73e:	f53f af71 	bmi.w	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c742:	45ce      	cmp	lr, r9
 801c744:	f6ff af6e 	blt.w	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c748:	b21b      	sxth	r3, r3
 801c74a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c74e:	fa0f f28e 	sxth.w	r2, lr
 801c752:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c756:	9200      	str	r2, [sp, #0]
 801c758:	4639      	mov	r1, r7
 801c75a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c75c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c75e:	f7ff fca1 	bl	801c0a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c762:	e75f      	b.n	801c624 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c764:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c766:	1429      	asrs	r1, r5, #16
 801c768:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c76a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c76e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801c772:	1433      	asrs	r3, r6, #16
 801c774:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c778:	fb0c 1303 	mla	r3, ip, r3, r1
 801c77c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c77e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c782:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c786:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c78a:	2a00      	cmp	r2, #0
 801c78c:	f000 8129 	beq.w	801c9e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801c790:	684c      	ldr	r4, [r1, #4]
 801c792:	940c      	str	r4, [sp, #48]	; 0x30
 801c794:	0e24      	lsrs	r4, r4, #24
 801c796:	9413      	str	r4, [sp, #76]	; 0x4c
 801c798:	b198      	cbz	r0, 801c7c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c79a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801c79e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c7a2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801c7a6:	f10c 0c04 	add.w	ip, ip, #4
 801c7aa:	eb01 080c 	add.w	r8, r1, ip
 801c7ae:	f851 100c 	ldr.w	r1, [r1, ip]
 801c7b2:	9108      	str	r1, [sp, #32]
 801c7b4:	0e09      	lsrs	r1, r1, #24
 801c7b6:	9110      	str	r1, [sp, #64]	; 0x40
 801c7b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c7bc:	910d      	str	r1, [sp, #52]	; 0x34
 801c7be:	0e09      	lsrs	r1, r1, #24
 801c7c0:	9114      	str	r1, [sp, #80]	; 0x50
 801c7c2:	b292      	uxth	r2, r2
 801c7c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c7c6:	b280      	uxth	r0, r0
 801c7c8:	fb02 f900 	mul.w	r9, r2, r0
 801c7cc:	0112      	lsls	r2, r2, #4
 801c7ce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c7d2:	eba2 0809 	sub.w	r8, r2, r9
 801c7d6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c7da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c7dc:	b280      	uxth	r0, r0
 801c7de:	fa1f f888 	uxth.w	r8, r8
 801c7e2:	1a09      	subs	r1, r1, r0
 801c7e4:	fb08 f202 	mul.w	r2, r8, r2
 801c7e8:	b289      	uxth	r1, r1
 801c7ea:	fb01 220e 	mla	r2, r1, lr, r2
 801c7ee:	fb00 2204 	mla	r2, r0, r4, r2
 801c7f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c7f4:	fb09 2204 	mla	r2, r9, r4, r2
 801c7f8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c7fc:	2a00      	cmp	r2, #0
 801c7fe:	f000 80e8 	beq.w	801c9d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801c802:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c806:	d01b      	beq.n	801c840 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801c808:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c80c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c810:	fb0e fa0a 	mul.w	sl, lr, sl
 801c814:	fb0e fe03 	mul.w	lr, lr, r3
 801c818:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c81c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c820:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c824:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c828:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c82c:	4453      	add	r3, sl
 801c82e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c832:	0a1b      	lsrs	r3, r3, #8
 801c834:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c838:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c83c:	ea43 030c 	orr.w	r3, r3, ip
 801c840:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c842:	2cff      	cmp	r4, #255	; 0xff
 801c844:	d021      	beq.n	801c88a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801c846:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c848:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c84c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c84e:	fb04 fc0c 	mul.w	ip, r4, ip
 801c852:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c854:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c858:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c85c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c85e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c862:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c866:	fb04 fa0a 	mul.w	sl, r4, sl
 801c86a:	44e6      	add	lr, ip
 801c86c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c870:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c874:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c878:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c87c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c880:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c884:	ea4e 040a 	orr.w	r4, lr, sl
 801c888:	940c      	str	r4, [sp, #48]	; 0x30
 801c88a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c88c:	2cff      	cmp	r4, #255	; 0xff
 801c88e:	d021      	beq.n	801c8d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801c890:	9c08      	ldr	r4, [sp, #32]
 801c892:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c896:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c898:	fb04 fc0c 	mul.w	ip, r4, ip
 801c89c:	9c08      	ldr	r4, [sp, #32]
 801c89e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c8a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c8a4:	fb04 fa0e 	mul.w	sl, r4, lr
 801c8a8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c8ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c8b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8b4:	44e6      	add	lr, ip
 801c8b6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c8ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c8be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c8c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c8ce:	ea4e 040a 	orr.w	r4, lr, sl
 801c8d2:	9408      	str	r4, [sp, #32]
 801c8d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8d6:	2cff      	cmp	r4, #255	; 0xff
 801c8d8:	d021      	beq.n	801c91e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801c8da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c8dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8e2:	fb04 fc0c 	mul.w	ip, r4, ip
 801c8e6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c8e8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c8ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c8f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8f2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c8f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8fa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c8fe:	44e6      	add	lr, ip
 801c900:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c904:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c908:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c90c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c910:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c914:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c918:	ea4e 040a 	orr.w	r4, lr, sl
 801c91c:	940d      	str	r4, [sp, #52]	; 0x34
 801c91e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c920:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c924:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c928:	2aff      	cmp	r2, #255	; 0xff
 801c92a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c92e:	9c08      	ldr	r4, [sp, #32]
 801c930:	fb08 fc0c 	mul.w	ip, r8, ip
 801c934:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c938:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c93c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c93e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c942:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c946:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c948:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c94c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c950:	fb08 f80e 	mul.w	r8, r8, lr
 801c954:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c958:	fb01 8303 	mla	r3, r1, r3, r8
 801c95c:	9908      	ldr	r1, [sp, #32]
 801c95e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c962:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801c966:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c968:	fb00 330a 	mla	r3, r0, sl, r3
 801c96c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c970:	fb09 3e0e 	mla	lr, r9, lr, r3
 801c974:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c978:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c97c:	ea4c 0c0e 	orr.w	ip, ip, lr
 801c980:	fa5f f08c 	uxtb.w	r0, ip
 801c984:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c988:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c98c:	d032      	beq.n	801c9f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801c98e:	43d2      	mvns	r2, r2
 801c990:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801c994:	b2d2      	uxtb	r2, r2
 801c996:	fb0e fe02 	mul.w	lr, lr, r2
 801c99a:	f10e 0301 	add.w	r3, lr, #1
 801c99e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801c9a2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c9a6:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801c9aa:	4350      	muls	r0, r2
 801c9ac:	f807 3c03 	strb.w	r3, [r7, #-3]
 801c9b0:	1c43      	adds	r3, r0, #1
 801c9b2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c9b6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c9ba:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801c9be:	4353      	muls	r3, r2
 801c9c0:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c9c4:	1c5a      	adds	r2, r3, #1
 801c9c6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c9ca:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801c9ce:	f807 cc01 	strb.w	ip, [r7, #-1]
 801c9d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c9d4:	3703      	adds	r7, #3
 801c9d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c9da:	441d      	add	r5, r3
 801c9dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c9de:	441e      	add	r6, r3
 801c9e0:	e64e      	b.n	801c680 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801c9e2:	2800      	cmp	r0, #0
 801c9e4:	f43f aeed 	beq.w	801c7c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c9e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c9ec:	9108      	str	r1, [sp, #32]
 801c9ee:	0e09      	lsrs	r1, r1, #24
 801c9f0:	9110      	str	r1, [sp, #64]	; 0x40
 801c9f2:	e6e6      	b.n	801c7c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c9f4:	f807 0c03 	strb.w	r0, [r7, #-3]
 801c9f8:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c9fc:	e7e7      	b.n	801c9ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801c9fe:	b019      	add	sp, #100	; 0x64
 801ca00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801ca04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca08:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801ca0c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ca10:	2c00      	cmp	r4, #0
 801ca12:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ca16:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801ca1a:	fb00 4e03 	mla	lr, r0, r3, r4
 801ca1e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801ca22:	f2c0 80b8 	blt.w	801cb96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ca26:	45a1      	cmp	r9, r4
 801ca28:	f340 80b5 	ble.w	801cb96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ca2c:	2800      	cmp	r0, #0
 801ca2e:	f2c0 80b2 	blt.w	801cb96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ca32:	4580      	cmp	r8, r0
 801ca34:	f340 80af 	ble.w	801cb96 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ca38:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801ca3c:	f01e 0f01 	tst.w	lr, #1
 801ca40:	5d56      	ldrb	r6, [r2, r5]
 801ca42:	bf0c      	ite	eq
 801ca44:	f006 060f 	andeq.w	r6, r6, #15
 801ca48:	1136      	asrne	r6, r6, #4
 801ca4a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ca4e:	b2f6      	uxtb	r6, r6
 801ca50:	f114 0a01 	adds.w	sl, r4, #1
 801ca54:	f100 80a1 	bmi.w	801cb9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ca58:	45d1      	cmp	r9, sl
 801ca5a:	f340 809e 	ble.w	801cb9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ca5e:	2800      	cmp	r0, #0
 801ca60:	f2c0 809b 	blt.w	801cb9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ca64:	4580      	cmp	r8, r0
 801ca66:	f340 8098 	ble.w	801cb9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ca6a:	2f00      	cmp	r7, #0
 801ca6c:	f000 8097 	beq.w	801cb9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801ca70:	f10e 0b01 	add.w	fp, lr, #1
 801ca74:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801ca78:	f01b 0f01 	tst.w	fp, #1
 801ca7c:	5d55      	ldrb	r5, [r2, r5]
 801ca7e:	bf0c      	ite	eq
 801ca80:	f005 050f 	andeq.w	r5, r5, #15
 801ca84:	112d      	asrne	r5, r5, #4
 801ca86:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801ca8a:	b2ed      	uxtb	r5, r5
 801ca8c:	f1bc 0f00 	cmp.w	ip, #0
 801ca90:	f000 8089 	beq.w	801cba6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801ca94:	2c00      	cmp	r4, #0
 801ca96:	f100 0001 	add.w	r0, r0, #1
 801ca9a:	f2c0 8082 	blt.w	801cba2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801ca9e:	45a1      	cmp	r9, r4
 801caa0:	dd7f      	ble.n	801cba2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801caa2:	2800      	cmp	r0, #0
 801caa4:	db7d      	blt.n	801cba2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801caa6:	4580      	cmp	r8, r0
 801caa8:	dd7b      	ble.n	801cba2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801caaa:	eb03 0b0e 	add.w	fp, r3, lr
 801caae:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801cab2:	f01b 0f01 	tst.w	fp, #1
 801cab6:	5d14      	ldrb	r4, [r2, r4]
 801cab8:	bf0c      	ite	eq
 801caba:	f004 040f 	andeq.w	r4, r4, #15
 801cabe:	1124      	asrne	r4, r4, #4
 801cac0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cac4:	b2e4      	uxtb	r4, r4
 801cac6:	f1ba 0f00 	cmp.w	sl, #0
 801caca:	db6f      	blt.n	801cbac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cacc:	45d1      	cmp	r9, sl
 801cace:	dd6d      	ble.n	801cbac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cad0:	2800      	cmp	r0, #0
 801cad2:	db6b      	blt.n	801cbac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cad4:	4580      	cmp	r8, r0
 801cad6:	dd69      	ble.n	801cbac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cad8:	2f00      	cmp	r7, #0
 801cada:	d069      	beq.n	801cbb0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801cadc:	3301      	adds	r3, #1
 801cade:	449e      	add	lr, r3
 801cae0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cae4:	f01e 0f01 	tst.w	lr, #1
 801cae8:	5cd0      	ldrb	r0, [r2, r3]
 801caea:	bf0c      	ite	eq
 801caec:	f000 000f 	andeq.w	r0, r0, #15
 801caf0:	1100      	asrne	r0, r0, #4
 801caf2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801caf6:	b2c3      	uxtb	r3, r0
 801caf8:	b2ba      	uxth	r2, r7
 801cafa:	fa1f fc8c 	uxth.w	ip, ip
 801cafe:	fb02 f00c 	mul.w	r0, r2, ip
 801cb02:	0112      	lsls	r2, r2, #4
 801cb04:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801cb08:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801cb0c:	1a12      	subs	r2, r2, r0
 801cb0e:	fa1f fc8c 	uxth.w	ip, ip
 801cb12:	b292      	uxth	r2, r2
 801cb14:	eba7 070c 	sub.w	r7, r7, ip
 801cb18:	436a      	muls	r2, r5
 801cb1a:	b2bf      	uxth	r7, r7
 801cb1c:	fb06 2207 	mla	r2, r6, r7, r2
 801cb20:	fb0c 2404 	mla	r4, ip, r4, r2
 801cb24:	fb00 4303 	mla	r3, r0, r3, r4
 801cb28:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cb2c:	b38b      	cbz	r3, 801cb92 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801cb2e:	4a21      	ldr	r2, [pc, #132]	; (801cbb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801cb30:	6814      	ldr	r4, [r2, #0]
 801cb32:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801cb36:	b2e5      	uxtb	r5, r4
 801cb38:	4353      	muls	r3, r2
 801cb3a:	1c5a      	adds	r2, r3, #1
 801cb3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cb40:	1212      	asrs	r2, r2, #8
 801cb42:	b290      	uxth	r0, r2
 801cb44:	43d2      	mvns	r2, r2
 801cb46:	fb15 f500 	smulbb	r5, r5, r0
 801cb4a:	b2d3      	uxtb	r3, r2
 801cb4c:	780a      	ldrb	r2, [r1, #0]
 801cb4e:	fb02 5203 	mla	r2, r2, r3, r5
 801cb52:	b292      	uxth	r2, r2
 801cb54:	1c55      	adds	r5, r2, #1
 801cb56:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cb5a:	784d      	ldrb	r5, [r1, #1]
 801cb5c:	fb15 f503 	smulbb	r5, r5, r3
 801cb60:	1212      	asrs	r2, r2, #8
 801cb62:	700a      	strb	r2, [r1, #0]
 801cb64:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801cb68:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cb6c:	fb02 5200 	mla	r2, r2, r0, r5
 801cb70:	b292      	uxth	r2, r2
 801cb72:	1c55      	adds	r5, r2, #1
 801cb74:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cb78:	1212      	asrs	r2, r2, #8
 801cb7a:	704a      	strb	r2, [r1, #1]
 801cb7c:	788a      	ldrb	r2, [r1, #2]
 801cb7e:	fb12 f303 	smulbb	r3, r2, r3
 801cb82:	fb04 3300 	mla	r3, r4, r0, r3
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	1c5a      	adds	r2, r3, #1
 801cb8a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cb8e:	121b      	asrs	r3, r3, #8
 801cb90:	708b      	strb	r3, [r1, #2]
 801cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb96:	2600      	movs	r6, #0
 801cb98:	e75a      	b.n	801ca50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801cb9a:	2500      	movs	r5, #0
 801cb9c:	e776      	b.n	801ca8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801cb9e:	463d      	mov	r5, r7
 801cba0:	e774      	b.n	801ca8c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801cba2:	2400      	movs	r4, #0
 801cba4:	e78f      	b.n	801cac6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801cba6:	4663      	mov	r3, ip
 801cba8:	4664      	mov	r4, ip
 801cbaa:	e7a5      	b.n	801caf8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cbac:	2300      	movs	r3, #0
 801cbae:	e7a3      	b.n	801caf8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cbb0:	463b      	mov	r3, r7
 801cbb2:	e7a1      	b.n	801caf8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cbb4:	2400f4b4 	.word	0x2400f4b4

0801cbb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbbc:	b097      	sub	sp, #92	; 0x5c
 801cbbe:	9214      	str	r2, [sp, #80]	; 0x50
 801cbc0:	9309      	str	r3, [sp, #36]	; 0x24
 801cbc2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cbc4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801cbc8:	9015      	str	r0, [sp, #84]	; 0x54
 801cbca:	910c      	str	r1, [sp, #48]	; 0x30
 801cbcc:	6850      	ldr	r0, [r2, #4]
 801cbce:	930e      	str	r3, [sp, #56]	; 0x38
 801cbd0:	6812      	ldr	r2, [r2, #0]
 801cbd2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801cbd6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801cbda:	fb00 1303 	mla	r3, r0, r3, r1
 801cbde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cbe2:	eb02 0a03 	add.w	sl, r2, r3
 801cbe6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbe8:	689b      	ldr	r3, [r3, #8]
 801cbea:	3301      	adds	r3, #1
 801cbec:	f023 0301 	bic.w	r3, r3, #1
 801cbf0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbf2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cbf4:	681f      	ldr	r7, [r3, #0]
 801cbf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	dc03      	bgt.n	801cc04 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cbfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbfe:	2b00      	cmp	r3, #0
 801cc00:	f340 8247 	ble.w	801d092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801cc04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cc0e:	1e48      	subs	r0, r1, #1
 801cc10:	f102 3cff 	add.w	ip, r2, #4294967295
 801cc14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	f340 80e5 	ble.w	801cde6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801cc1c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801cc20:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cc24:	d406      	bmi.n	801cc34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cc26:	4586      	cmp	lr, r0
 801cc28:	da04      	bge.n	801cc34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	db02      	blt.n	801cc34 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cc2e:	4563      	cmp	r3, ip
 801cc30:	f2c0 80da 	blt.w	801cde8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801cc34:	f11e 0e01 	adds.w	lr, lr, #1
 801cc38:	f100 80cb 	bmi.w	801cdd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cc3c:	4571      	cmp	r1, lr
 801cc3e:	f2c0 80c8 	blt.w	801cdd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cc42:	3301      	adds	r3, #1
 801cc44:	f100 80c5 	bmi.w	801cdd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	f2c0 80c2 	blt.w	801cdd2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc50:	46d0      	mov	r8, sl
 801cc52:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801cc56:	930d      	str	r3, [sp, #52]	; 0x34
 801cc58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	f340 80e3 	ble.w	801ce26 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801cc60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc62:	1430      	asrs	r0, r6, #16
 801cc64:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cc68:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cc6c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801cc70:	142b      	asrs	r3, r5, #16
 801cc72:	f100 812e 	bmi.w	801ced2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cc76:	f10c 3bff 	add.w	fp, ip, #4294967295
 801cc7a:	455b      	cmp	r3, fp
 801cc7c:	f280 8129 	bge.w	801ced2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cc80:	2800      	cmp	r0, #0
 801cc82:	f2c0 8126 	blt.w	801ced2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cc86:	f10e 3bff 	add.w	fp, lr, #4294967295
 801cc8a:	4558      	cmp	r0, fp
 801cc8c:	f280 8121 	bge.w	801ced2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cc90:	fb00 3309 	mla	r3, r0, r9, r3
 801cc94:	0858      	lsrs	r0, r3, #1
 801cc96:	07dc      	lsls	r4, r3, #31
 801cc98:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cc9c:	bf54      	ite	pl
 801cc9e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cca2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cca6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ccaa:	fa5f fc8c 	uxtb.w	ip, ip
 801ccae:	2a00      	cmp	r2, #0
 801ccb0:	f000 80fe 	beq.w	801ceb0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ccb4:	1c58      	adds	r0, r3, #1
 801ccb6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801ccba:	07c0      	lsls	r0, r0, #31
 801ccbc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801ccc0:	bf54      	ite	pl
 801ccc2:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ccc6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ccca:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ccce:	fa5f f08e 	uxtb.w	r0, lr
 801ccd2:	9010      	str	r0, [sp, #64]	; 0x40
 801ccd4:	b1d9      	cbz	r1, 801cd0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ccd6:	444b      	add	r3, r9
 801ccd8:	0858      	lsrs	r0, r3, #1
 801ccda:	07dc      	lsls	r4, r3, #31
 801ccdc:	f103 0301 	add.w	r3, r3, #1
 801cce0:	5c38      	ldrb	r0, [r7, r0]
 801cce2:	bf54      	ite	pl
 801cce4:	f000 000f 	andpl.w	r0, r0, #15
 801cce8:	1100      	asrmi	r0, r0, #4
 801ccea:	07dc      	lsls	r4, r3, #31
 801ccec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ccf0:	b2c0      	uxtb	r0, r0
 801ccf2:	900a      	str	r0, [sp, #40]	; 0x28
 801ccf4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ccf8:	f817 e000 	ldrb.w	lr, [r7, r0]
 801ccfc:	bf54      	ite	pl
 801ccfe:	f00e 030f 	andpl.w	r3, lr, #15
 801cd02:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801cd06:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cd0a:	b2db      	uxtb	r3, r3
 801cd0c:	9311      	str	r3, [sp, #68]	; 0x44
 801cd0e:	b292      	uxth	r2, r2
 801cd10:	b289      	uxth	r1, r1
 801cd12:	0113      	lsls	r3, r2, #4
 801cd14:	fb02 f001 	mul.w	r0, r2, r1
 801cd18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd1a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cd1e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801cd22:	1a1b      	subs	r3, r3, r0
 801cd24:	b289      	uxth	r1, r1
 801cd26:	b29b      	uxth	r3, r3
 801cd28:	ebae 0e01 	sub.w	lr, lr, r1
 801cd2c:	4353      	muls	r3, r2
 801cd2e:	fa1f fe8e 	uxth.w	lr, lr
 801cd32:	fb0c 320e 	mla	r2, ip, lr, r3
 801cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd38:	fb01 2203 	mla	r2, r1, r3, r2
 801cd3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd3e:	fb00 2203 	mla	r2, r0, r3, r2
 801cd42:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	d039      	beq.n	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cd4a:	4bc7      	ldr	r3, [pc, #796]	; (801d068 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801cd4c:	6819      	ldr	r1, [r3, #0]
 801cd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd50:	fa5f fc81 	uxtb.w	ip, r1
 801cd54:	435a      	muls	r2, r3
 801cd56:	1c53      	adds	r3, r2, #1
 801cd58:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cd5c:	1212      	asrs	r2, r2, #8
 801cd5e:	b290      	uxth	r0, r2
 801cd60:	43d2      	mvns	r2, r2
 801cd62:	fb1c fc00 	smulbb	ip, ip, r0
 801cd66:	b2d3      	uxtb	r3, r2
 801cd68:	f898 2000 	ldrb.w	r2, [r8]
 801cd6c:	fb02 c203 	mla	r2, r2, r3, ip
 801cd70:	b292      	uxth	r2, r2
 801cd72:	f102 0c01 	add.w	ip, r2, #1
 801cd76:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cd7a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cd7e:	fb1c fc03 	smulbb	ip, ip, r3
 801cd82:	1212      	asrs	r2, r2, #8
 801cd84:	f888 2000 	strb.w	r2, [r8]
 801cd88:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801cd8c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801cd90:	fb02 c200 	mla	r2, r2, r0, ip
 801cd94:	b292      	uxth	r2, r2
 801cd96:	f102 0c01 	add.w	ip, r2, #1
 801cd9a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cd9e:	1212      	asrs	r2, r2, #8
 801cda0:	f888 2001 	strb.w	r2, [r8, #1]
 801cda4:	f898 2002 	ldrb.w	r2, [r8, #2]
 801cda8:	fb12 f303 	smulbb	r3, r2, r3
 801cdac:	fb01 3300 	mla	r3, r1, r0, r3
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	1c5a      	adds	r2, r3, #1
 801cdb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cdb8:	121b      	asrs	r3, r3, #8
 801cdba:	f888 3002 	strb.w	r3, [r8, #2]
 801cdbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cdc0:	f108 0803 	add.w	r8, r8, #3
 801cdc4:	441d      	add	r5, r3
 801cdc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cdc8:	441e      	add	r6, r3
 801cdca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cdcc:	3b01      	subs	r3, #1
 801cdce:	930d      	str	r3, [sp, #52]	; 0x34
 801cdd0:	e742      	b.n	801cc58 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cdd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cdd4:	f10a 0a03 	add.w	sl, sl, #3
 801cdd8:	441d      	add	r5, r3
 801cdda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cddc:	441e      	add	r6, r3
 801cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cde0:	3b01      	subs	r3, #1
 801cde2:	9309      	str	r3, [sp, #36]	; 0x24
 801cde4:	e716      	b.n	801cc14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801cde6:	d024      	beq.n	801ce32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801cde8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cdea:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801cdec:	3b01      	subs	r3, #1
 801cdee:	fb00 5003 	mla	r0, r0, r3, r5
 801cdf2:	1400      	asrs	r0, r0, #16
 801cdf4:	f53f af2b 	bmi.w	801cc4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cdf8:	3901      	subs	r1, #1
 801cdfa:	4288      	cmp	r0, r1
 801cdfc:	f6bf af27 	bge.w	801cc4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce00:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ce02:	fb01 6303 	mla	r3, r1, r3, r6
 801ce06:	141b      	asrs	r3, r3, #16
 801ce08:	f53f af21 	bmi.w	801cc4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce0c:	3a01      	subs	r2, #1
 801ce0e:	4293      	cmp	r3, r2
 801ce10:	f6bf af1d 	bge.w	801cc4e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce14:	f10a 0e03 	add.w	lr, sl, #3
 801ce18:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801ce1c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ce20:	f1b8 0f00 	cmp.w	r8, #0
 801ce24:	dc76      	bgt.n	801cf14 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801ce26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce28:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ce2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce30:	44a2      	add	sl, r4
 801ce32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	f340 812c 	ble.w	801d092 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ce3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce40:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce44:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce48:	eef0 6a62 	vmov.f32	s13, s5
 801ce4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ce50:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce58:	ee16 5a90 	vmov	r5, s13
 801ce5c:	eef0 6a43 	vmov.f32	s13, s6
 801ce60:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce64:	ee16 6a90 	vmov	r6, s13
 801ce68:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce6c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce70:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce74:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce78:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce7c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce80:	ee12 2a90 	vmov	r2, s5
 801ce84:	eef0 2a47 	vmov.f32	s5, s14
 801ce88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce8c:	ee13 2a10 	vmov	r2, s6
 801ce90:	9323      	str	r3, [sp, #140]	; 0x8c
 801ce92:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce94:	eeb0 3a67 	vmov.f32	s6, s15
 801ce98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce9c:	9324      	str	r3, [sp, #144]	; 0x90
 801ce9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cea2:	3b01      	subs	r3, #1
 801cea4:	930c      	str	r3, [sp, #48]	; 0x30
 801cea6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cea8:	bf08      	it	eq
 801ceaa:	4613      	moveq	r3, r2
 801ceac:	9309      	str	r3, [sp, #36]	; 0x24
 801ceae:	e6a2      	b.n	801cbf6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ceb0:	2900      	cmp	r1, #0
 801ceb2:	f43f af2c 	beq.w	801cd0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ceb6:	eb09 0003 	add.w	r0, r9, r3
 801ceba:	0843      	lsrs	r3, r0, #1
 801cebc:	07c0      	lsls	r0, r0, #31
 801cebe:	5cfb      	ldrb	r3, [r7, r3]
 801cec0:	bf54      	ite	pl
 801cec2:	f003 030f 	andpl.w	r3, r3, #15
 801cec6:	111b      	asrmi	r3, r3, #4
 801cec8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cecc:	b2db      	uxtb	r3, r3
 801cece:	930a      	str	r3, [sp, #40]	; 0x28
 801ced0:	e71d      	b.n	801cd0e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801ced2:	f113 0b01 	adds.w	fp, r3, #1
 801ced6:	f53f af72 	bmi.w	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ceda:	45dc      	cmp	ip, fp
 801cedc:	f6ff af6f 	blt.w	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cee0:	f110 0b01 	adds.w	fp, r0, #1
 801cee4:	f53f af6b 	bmi.w	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cee8:	45de      	cmp	lr, fp
 801ceea:	f6ff af68 	blt.w	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ceee:	9302      	str	r3, [sp, #8]
 801cef0:	fa0f f38e 	sxth.w	r3, lr
 801cef4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cef6:	9301      	str	r3, [sp, #4]
 801cef8:	fa0f f38c 	sxth.w	r3, ip
 801cefc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801cf00:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cf04:	9300      	str	r3, [sp, #0]
 801cf06:	463a      	mov	r2, r7
 801cf08:	464b      	mov	r3, r9
 801cf0a:	4641      	mov	r1, r8
 801cf0c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cf0e:	f7ff fd79 	bl	801ca04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801cf12:	e754      	b.n	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cf14:	142a      	asrs	r2, r5, #16
 801cf16:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cf1a:	1433      	asrs	r3, r6, #16
 801cf1c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cf20:	fb09 2303 	mla	r3, r9, r3, r2
 801cf24:	085a      	lsrs	r2, r3, #1
 801cf26:	07dc      	lsls	r4, r3, #31
 801cf28:	5cba      	ldrb	r2, [r7, r2]
 801cf2a:	bf54      	ite	pl
 801cf2c:	f002 020f 	andpl.w	r2, r2, #15
 801cf30:	1112      	asrmi	r2, r2, #4
 801cf32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cf36:	b2d2      	uxtb	r2, r2
 801cf38:	2900      	cmp	r1, #0
 801cf3a:	f000 8097 	beq.w	801d06c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801cf3e:	f103 0b01 	add.w	fp, r3, #1
 801cf42:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801cf46:	f01b 0f01 	tst.w	fp, #1
 801cf4a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cf4e:	bf0c      	ite	eq
 801cf50:	f00c 0c0f 	andeq.w	ip, ip, #15
 801cf54:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801cf58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cf5c:	fa5f f48c 	uxtb.w	r4, ip
 801cf60:	9412      	str	r4, [sp, #72]	; 0x48
 801cf62:	b300      	cbz	r0, 801cfa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801cf64:	444b      	add	r3, r9
 801cf66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cf6a:	07dc      	lsls	r4, r3, #31
 801cf6c:	f103 0301 	add.w	r3, r3, #1
 801cf70:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cf74:	bf54      	ite	pl
 801cf76:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cf7a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cf7e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cf82:	fa5f f48c 	uxtb.w	r4, ip
 801cf86:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cf8a:	940b      	str	r4, [sp, #44]	; 0x2c
 801cf8c:	07dc      	lsls	r4, r3, #31
 801cf8e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cf92:	bf54      	ite	pl
 801cf94:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cf98:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cf9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cfa0:	fa5f f38c 	uxtb.w	r3, ip
 801cfa4:	9313      	str	r3, [sp, #76]	; 0x4c
 801cfa6:	b289      	uxth	r1, r1
 801cfa8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cfaa:	b280      	uxth	r0, r0
 801cfac:	fb01 f300 	mul.w	r3, r1, r0
 801cfb0:	0109      	lsls	r1, r1, #4
 801cfb2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801cfb6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801cfba:	1ac9      	subs	r1, r1, r3
 801cfbc:	b280      	uxth	r0, r0
 801cfbe:	b289      	uxth	r1, r1
 801cfc0:	ebac 0c00 	sub.w	ip, ip, r0
 801cfc4:	4361      	muls	r1, r4
 801cfc6:	fa1f fc8c 	uxth.w	ip, ip
 801cfca:	fb02 120c 	mla	r2, r2, ip, r1
 801cfce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cfd0:	fb00 2001 	mla	r0, r0, r1, r2
 801cfd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cfd6:	fb03 0302 	mla	r3, r3, r2, r0
 801cfda:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d039      	beq.n	801d056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cfe2:	4a21      	ldr	r2, [pc, #132]	; (801d068 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801cfe4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801cfe8:	6810      	ldr	r0, [r2, #0]
 801cfea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cfec:	fa5f fc80 	uxtb.w	ip, r0
 801cff0:	4353      	muls	r3, r2
 801cff2:	1c5a      	adds	r2, r3, #1
 801cff4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cff8:	121b      	asrs	r3, r3, #8
 801cffa:	b29a      	uxth	r2, r3
 801cffc:	43db      	mvns	r3, r3
 801cffe:	fb1c fc02 	smulbb	ip, ip, r2
 801d002:	b2db      	uxtb	r3, r3
 801d004:	fb01 c103 	mla	r1, r1, r3, ip
 801d008:	b289      	uxth	r1, r1
 801d00a:	f101 0c01 	add.w	ip, r1, #1
 801d00e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d012:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d016:	fb1c fc03 	smulbb	ip, ip, r3
 801d01a:	1209      	asrs	r1, r1, #8
 801d01c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d020:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d024:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d028:	fb01 c102 	mla	r1, r1, r2, ip
 801d02c:	b289      	uxth	r1, r1
 801d02e:	f101 0c01 	add.w	ip, r1, #1
 801d032:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d036:	1209      	asrs	r1, r1, #8
 801d038:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d03c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d040:	fb11 f303 	smulbb	r3, r1, r3
 801d044:	fb00 3002 	mla	r0, r0, r2, r3
 801d048:	b280      	uxth	r0, r0
 801d04a:	1c42      	adds	r2, r0, #1
 801d04c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d050:	1200      	asrs	r0, r0, #8
 801d052:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d056:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d058:	f10e 0e03 	add.w	lr, lr, #3
 801d05c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d060:	441d      	add	r5, r3
 801d062:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d064:	441e      	add	r6, r3
 801d066:	e6db      	b.n	801ce20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801d068:	2400f4b4 	.word	0x2400f4b4
 801d06c:	2800      	cmp	r0, #0
 801d06e:	d09a      	beq.n	801cfa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d070:	444b      	add	r3, r9
 801d072:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d076:	07db      	lsls	r3, r3, #31
 801d078:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d07c:	bf54      	ite	pl
 801d07e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d082:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d086:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d08a:	fa5f f38c 	uxtb.w	r3, ip
 801d08e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d090:	e789      	b.n	801cfa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d092:	b017      	add	sp, #92	; 0x5c
 801d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d098 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d09c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801d0a0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d0a4:	2d00      	cmp	r5, #0
 801d0a6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d0aa:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801d0ae:	fb04 5e03 	mla	lr, r4, r3, r5
 801d0b2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801d0b6:	f2c0 80b1 	blt.w	801d21c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d0ba:	45a9      	cmp	r9, r5
 801d0bc:	f340 80ae 	ble.w	801d21c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d0c0:	2c00      	cmp	r4, #0
 801d0c2:	f2c0 80ab 	blt.w	801d21c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d0c6:	45a0      	cmp	r8, r4
 801d0c8:	f340 80a8 	ble.w	801d21c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d0cc:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801d0d0:	f01e 0f01 	tst.w	lr, #1
 801d0d4:	5d97      	ldrb	r7, [r2, r6]
 801d0d6:	bf0c      	ite	eq
 801d0d8:	f007 070f 	andeq.w	r7, r7, #15
 801d0dc:	113f      	asrne	r7, r7, #4
 801d0de:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801d0e2:	b2ff      	uxtb	r7, r7
 801d0e4:	f115 0a01 	adds.w	sl, r5, #1
 801d0e8:	f100 809a 	bmi.w	801d220 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d0ec:	45d1      	cmp	r9, sl
 801d0ee:	f340 8097 	ble.w	801d220 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d0f2:	2c00      	cmp	r4, #0
 801d0f4:	f2c0 8094 	blt.w	801d220 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d0f8:	45a0      	cmp	r8, r4
 801d0fa:	f340 8091 	ble.w	801d220 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d0fe:	2800      	cmp	r0, #0
 801d100:	f000 8090 	beq.w	801d224 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801d104:	f10e 0b01 	add.w	fp, lr, #1
 801d108:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801d10c:	f01b 0f01 	tst.w	fp, #1
 801d110:	5d96      	ldrb	r6, [r2, r6]
 801d112:	bf0c      	ite	eq
 801d114:	f006 060f 	andeq.w	r6, r6, #15
 801d118:	1136      	asrne	r6, r6, #4
 801d11a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d11e:	b2f6      	uxtb	r6, r6
 801d120:	f1bc 0f00 	cmp.w	ip, #0
 801d124:	f000 8082 	beq.w	801d22c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801d128:	2d00      	cmp	r5, #0
 801d12a:	f104 0401 	add.w	r4, r4, #1
 801d12e:	db7b      	blt.n	801d228 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d130:	45a9      	cmp	r9, r5
 801d132:	dd79      	ble.n	801d228 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d134:	2c00      	cmp	r4, #0
 801d136:	db77      	blt.n	801d228 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d138:	45a0      	cmp	r8, r4
 801d13a:	dd75      	ble.n	801d228 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d13c:	eb03 0b0e 	add.w	fp, r3, lr
 801d140:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801d144:	f01b 0f01 	tst.w	fp, #1
 801d148:	5d55      	ldrb	r5, [r2, r5]
 801d14a:	bf0c      	ite	eq
 801d14c:	f005 050f 	andeq.w	r5, r5, #15
 801d150:	112d      	asrne	r5, r5, #4
 801d152:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801d156:	b2ed      	uxtb	r5, r5
 801d158:	f1ba 0f00 	cmp.w	sl, #0
 801d15c:	db69      	blt.n	801d232 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d15e:	45d1      	cmp	r9, sl
 801d160:	dd67      	ble.n	801d232 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d162:	2c00      	cmp	r4, #0
 801d164:	db65      	blt.n	801d232 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d166:	45a0      	cmp	r8, r4
 801d168:	dd63      	ble.n	801d232 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d16a:	2800      	cmp	r0, #0
 801d16c:	d063      	beq.n	801d236 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801d16e:	3301      	adds	r3, #1
 801d170:	449e      	add	lr, r3
 801d172:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d176:	f01e 0f01 	tst.w	lr, #1
 801d17a:	5cd4      	ldrb	r4, [r2, r3]
 801d17c:	bf0c      	ite	eq
 801d17e:	f004 040f 	andeq.w	r4, r4, #15
 801d182:	1124      	asrne	r4, r4, #4
 801d184:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d188:	b2e3      	uxtb	r3, r4
 801d18a:	b282      	uxth	r2, r0
 801d18c:	fa1f fc8c 	uxth.w	ip, ip
 801d190:	fb02 f40c 	mul.w	r4, r2, ip
 801d194:	0112      	lsls	r2, r2, #4
 801d196:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801d19a:	fa1f f08c 	uxth.w	r0, ip
 801d19e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d1a2:	1b12      	subs	r2, r2, r4
 801d1a4:	ebac 0c00 	sub.w	ip, ip, r0
 801d1a8:	b292      	uxth	r2, r2
 801d1aa:	fa1f fc8c 	uxth.w	ip, ip
 801d1ae:	4372      	muls	r2, r6
 801d1b0:	fb07 220c 	mla	r2, r7, ip, r2
 801d1b4:	fb00 2005 	mla	r0, r0, r5, r2
 801d1b8:	fb04 0303 	mla	r3, r4, r3, r0
 801d1bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d1c0:	b353      	cbz	r3, 801d218 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801d1c2:	4a1e      	ldr	r2, [pc, #120]	; (801d23c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801d1c4:	7808      	ldrb	r0, [r1, #0]
 801d1c6:	6814      	ldr	r4, [r2, #0]
 801d1c8:	b29a      	uxth	r2, r3
 801d1ca:	43db      	mvns	r3, r3
 801d1cc:	b2e5      	uxtb	r5, r4
 801d1ce:	b2db      	uxtb	r3, r3
 801d1d0:	fb15 f502 	smulbb	r5, r5, r2
 801d1d4:	fb00 5003 	mla	r0, r0, r3, r5
 801d1d8:	b280      	uxth	r0, r0
 801d1da:	1c45      	adds	r5, r0, #1
 801d1dc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d1e0:	784d      	ldrb	r5, [r1, #1]
 801d1e2:	fb15 f503 	smulbb	r5, r5, r3
 801d1e6:	1200      	asrs	r0, r0, #8
 801d1e8:	7008      	strb	r0, [r1, #0]
 801d1ea:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d1ee:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d1f2:	fb00 5002 	mla	r0, r0, r2, r5
 801d1f6:	b280      	uxth	r0, r0
 801d1f8:	1c45      	adds	r5, r0, #1
 801d1fa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d1fe:	1200      	asrs	r0, r0, #8
 801d200:	7048      	strb	r0, [r1, #1]
 801d202:	7888      	ldrb	r0, [r1, #2]
 801d204:	fb10 f303 	smulbb	r3, r0, r3
 801d208:	fb04 3202 	mla	r2, r4, r2, r3
 801d20c:	b292      	uxth	r2, r2
 801d20e:	1c53      	adds	r3, r2, #1
 801d210:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d214:	1212      	asrs	r2, r2, #8
 801d216:	708a      	strb	r2, [r1, #2]
 801d218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d21c:	2700      	movs	r7, #0
 801d21e:	e761      	b.n	801d0e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801d220:	2600      	movs	r6, #0
 801d222:	e77d      	b.n	801d120 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d224:	4606      	mov	r6, r0
 801d226:	e77b      	b.n	801d120 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d228:	2500      	movs	r5, #0
 801d22a:	e795      	b.n	801d158 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801d22c:	4663      	mov	r3, ip
 801d22e:	4665      	mov	r5, ip
 801d230:	e7ab      	b.n	801d18a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d232:	2300      	movs	r3, #0
 801d234:	e7a9      	b.n	801d18a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d236:	4603      	mov	r3, r0
 801d238:	e7a7      	b.n	801d18a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d23a:	bf00      	nop
 801d23c:	2400f4b4 	.word	0x2400f4b4

0801d240 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d244:	b093      	sub	sp, #76	; 0x4c
 801d246:	461c      	mov	r4, r3
 801d248:	920c      	str	r2, [sp, #48]	; 0x30
 801d24a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d24c:	9011      	str	r0, [sp, #68]	; 0x44
 801d24e:	9107      	str	r1, [sp, #28]
 801d250:	6850      	ldr	r0, [r2, #4]
 801d252:	6812      	ldr	r2, [r2, #0]
 801d254:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801d258:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801d25c:	fb00 1303 	mla	r3, r0, r3, r1
 801d260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d264:	eb02 0b03 	add.w	fp, r2, r3
 801d268:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d26a:	689b      	ldr	r3, [r3, #8]
 801d26c:	3301      	adds	r3, #1
 801d26e:	f023 0301 	bic.w	r3, r3, #1
 801d272:	9309      	str	r3, [sp, #36]	; 0x24
 801d274:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d276:	f8d3 8000 	ldr.w	r8, [r3]
 801d27a:	9b07      	ldr	r3, [sp, #28]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	dc03      	bgt.n	801d288 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d282:	2b00      	cmp	r3, #0
 801d284:	f340 822b 	ble.w	801d6de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d288:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d28a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d28e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d292:	1e48      	subs	r0, r1, #1
 801d294:	1e57      	subs	r7, r2, #1
 801d296:	2c00      	cmp	r4, #0
 801d298:	f340 80d7 	ble.w	801d44a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d29c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d2a0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d2a4:	d406      	bmi.n	801d2b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d2a6:	4584      	cmp	ip, r0
 801d2a8:	da04      	bge.n	801d2b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	db02      	blt.n	801d2b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d2ae:	42bb      	cmp	r3, r7
 801d2b0:	f2c0 80cc 	blt.w	801d44c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d2b4:	f11c 0c01 	adds.w	ip, ip, #1
 801d2b8:	f100 80bf 	bmi.w	801d43a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d2bc:	4561      	cmp	r1, ip
 801d2be:	f2c0 80bc 	blt.w	801d43a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d2c2:	3301      	adds	r3, #1
 801d2c4:	f100 80b9 	bmi.w	801d43a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d2c8:	429a      	cmp	r2, r3
 801d2ca:	f2c0 80b6 	blt.w	801d43a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d2ce:	46a2      	mov	sl, r4
 801d2d0:	465f      	mov	r7, fp
 801d2d2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d2d6:	f1ba 0f00 	cmp.w	sl, #0
 801d2da:	f340 80d4 	ble.w	801d486 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801d2de:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d2e2:	1430      	asrs	r0, r6, #16
 801d2e4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d2e8:	9308      	str	r3, [sp, #32]
 801d2ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d2ec:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d2f0:	142b      	asrs	r3, r5, #16
 801d2f2:	f100 8124 	bmi.w	801d53e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d2f6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d2fa:	4293      	cmp	r3, r2
 801d2fc:	f280 811f 	bge.w	801d53e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d300:	2800      	cmp	r0, #0
 801d302:	f2c0 811c 	blt.w	801d53e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d306:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d30a:	4290      	cmp	r0, r2
 801d30c:	f280 8117 	bge.w	801d53e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d310:	fb00 3309 	mla	r3, r0, r9, r3
 801d314:	0858      	lsrs	r0, r3, #1
 801d316:	07da      	lsls	r2, r3, #31
 801d318:	9a08      	ldr	r2, [sp, #32]
 801d31a:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d31e:	bf54      	ite	pl
 801d320:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d324:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d328:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d32c:	fa5f fc8c 	uxtb.w	ip, ip
 801d330:	2a00      	cmp	r2, #0
 801d332:	f000 80ed 	beq.w	801d510 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801d336:	1c58      	adds	r0, r3, #1
 801d338:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d33c:	07c0      	lsls	r0, r0, #31
 801d33e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d342:	bf54      	ite	pl
 801d344:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d348:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d34c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d350:	fa5f fe8e 	uxtb.w	lr, lr
 801d354:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d358:	b1c9      	cbz	r1, 801d38e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d35a:	444b      	add	r3, r9
 801d35c:	0858      	lsrs	r0, r3, #1
 801d35e:	07da      	lsls	r2, r3, #31
 801d360:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d364:	bf54      	ite	pl
 801d366:	f000 000f 	andpl.w	r0, r0, #15
 801d36a:	1100      	asrmi	r0, r0, #4
 801d36c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d370:	b2c0      	uxtb	r0, r0
 801d372:	900a      	str	r0, [sp, #40]	; 0x28
 801d374:	1c58      	adds	r0, r3, #1
 801d376:	0843      	lsrs	r3, r0, #1
 801d378:	07c2      	lsls	r2, r0, #31
 801d37a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d37e:	bf54      	ite	pl
 801d380:	f003 030f 	andpl.w	r3, r3, #15
 801d384:	111b      	asrmi	r3, r3, #4
 801d386:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d38a:	b2db      	uxtb	r3, r3
 801d38c:	930e      	str	r3, [sp, #56]	; 0x38
 801d38e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d392:	b289      	uxth	r1, r1
 801d394:	fb02 f301 	mul.w	r3, r2, r1
 801d398:	0112      	lsls	r2, r2, #4
 801d39a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d39e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d3a2:	1ad2      	subs	r2, r2, r3
 801d3a4:	b289      	uxth	r1, r1
 801d3a6:	b292      	uxth	r2, r2
 801d3a8:	1a40      	subs	r0, r0, r1
 801d3aa:	fa1f fe80 	uxth.w	lr, r0
 801d3ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d3b0:	4342      	muls	r2, r0
 801d3b2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d3b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3b8:	fb01 c102 	mla	r1, r1, r2, ip
 801d3bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d3be:	fb03 1302 	mla	r3, r3, r2, r1
 801d3c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d3c6:	b383      	cbz	r3, 801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d3c8:	4ac6      	ldr	r2, [pc, #792]	; (801d6e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d3ca:	2bff      	cmp	r3, #255	; 0xff
 801d3cc:	6812      	ldr	r2, [r2, #0]
 801d3ce:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d3d2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d3d6:	b2d2      	uxtb	r2, r2
 801d3d8:	f000 80ac 	beq.w	801d534 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d3dc:	b299      	uxth	r1, r3
 801d3de:	43db      	mvns	r3, r3
 801d3e0:	f897 c000 	ldrb.w	ip, [r7]
 801d3e4:	fb12 f201 	smulbb	r2, r2, r1
 801d3e8:	b2db      	uxtb	r3, r3
 801d3ea:	fb10 f001 	smulbb	r0, r0, r1
 801d3ee:	fb0c 2203 	mla	r2, ip, r3, r2
 801d3f2:	fb1e f101 	smulbb	r1, lr, r1
 801d3f6:	b292      	uxth	r2, r2
 801d3f8:	f102 0c01 	add.w	ip, r2, #1
 801d3fc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d400:	1212      	asrs	r2, r2, #8
 801d402:	703a      	strb	r2, [r7, #0]
 801d404:	787a      	ldrb	r2, [r7, #1]
 801d406:	fb02 0003 	mla	r0, r2, r3, r0
 801d40a:	b280      	uxth	r0, r0
 801d40c:	1c42      	adds	r2, r0, #1
 801d40e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d412:	78ba      	ldrb	r2, [r7, #2]
 801d414:	fb02 1303 	mla	r3, r2, r3, r1
 801d418:	1200      	asrs	r0, r0, #8
 801d41a:	b29b      	uxth	r3, r3
 801d41c:	7078      	strb	r0, [r7, #1]
 801d41e:	f103 0e01 	add.w	lr, r3, #1
 801d422:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d426:	121b      	asrs	r3, r3, #8
 801d428:	70bb      	strb	r3, [r7, #2]
 801d42a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d42c:	3703      	adds	r7, #3
 801d42e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d432:	441d      	add	r5, r3
 801d434:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d436:	441e      	add	r6, r3
 801d438:	e74d      	b.n	801d2d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d43a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d43c:	3c01      	subs	r4, #1
 801d43e:	f10b 0b03 	add.w	fp, fp, #3
 801d442:	441d      	add	r5, r3
 801d444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d446:	441e      	add	r6, r3
 801d448:	e725      	b.n	801d296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d44a:	d021      	beq.n	801d490 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d44c:	1e63      	subs	r3, r4, #1
 801d44e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d450:	fb00 5003 	mla	r0, r0, r3, r5
 801d454:	1400      	asrs	r0, r0, #16
 801d456:	f53f af3a 	bmi.w	801d2ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d45a:	3901      	subs	r1, #1
 801d45c:	4288      	cmp	r0, r1
 801d45e:	f6bf af36 	bge.w	801d2ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d462:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d464:	fb01 6303 	mla	r3, r1, r3, r6
 801d468:	141b      	asrs	r3, r3, #16
 801d46a:	f53f af30 	bmi.w	801d2ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d46e:	3a01      	subs	r2, #1
 801d470:	4293      	cmp	r3, r2
 801d472:	f6bf af2c 	bge.w	801d2ce <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d476:	f10b 0c03 	add.w	ip, fp, #3
 801d47a:	46a6      	mov	lr, r4
 801d47c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d480:	f1be 0f00 	cmp.w	lr, #0
 801d484:	dc79      	bgt.n	801d57a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801d486:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d48a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d48e:	44a3      	add	fp, r4
 801d490:	9b07      	ldr	r3, [sp, #28]
 801d492:	2b00      	cmp	r3, #0
 801d494:	f340 8123 	ble.w	801d6de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d49c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d49e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4a6:	eef0 6a62 	vmov.f32	s13, s5
 801d4aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4b6:	ee16 5a90 	vmov	r5, s13
 801d4ba:	eef0 6a43 	vmov.f32	s13, s6
 801d4be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4c2:	ee16 6a90 	vmov	r6, s13
 801d4c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d4ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d4ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d4d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d4d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d4da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d4de:	ee12 2a90 	vmov	r2, s5
 801d4e2:	eef0 2a47 	vmov.f32	s5, s14
 801d4e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4ea:	ee13 2a10 	vmov	r2, s6
 801d4ee:	931f      	str	r3, [sp, #124]	; 0x7c
 801d4f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d4f2:	eeb0 3a67 	vmov.f32	s6, s15
 801d4f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d4fa:	9320      	str	r3, [sp, #128]	; 0x80
 801d4fc:	9b07      	ldr	r3, [sp, #28]
 801d4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d500:	3b01      	subs	r3, #1
 801d502:	9307      	str	r3, [sp, #28]
 801d504:	bf08      	it	eq
 801d506:	4614      	moveq	r4, r2
 801d508:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d50a:	bf18      	it	ne
 801d50c:	461c      	movne	r4, r3
 801d50e:	e6b4      	b.n	801d27a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d510:	2900      	cmp	r1, #0
 801d512:	f43f af3c 	beq.w	801d38e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d516:	eb09 0003 	add.w	r0, r9, r3
 801d51a:	0843      	lsrs	r3, r0, #1
 801d51c:	07c0      	lsls	r0, r0, #31
 801d51e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d522:	bf54      	ite	pl
 801d524:	f003 030f 	andpl.w	r3, r3, #15
 801d528:	111b      	asrmi	r3, r3, #4
 801d52a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d52e:	b2db      	uxtb	r3, r3
 801d530:	930a      	str	r3, [sp, #40]	; 0x28
 801d532:	e72c      	b.n	801d38e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d534:	703a      	strb	r2, [r7, #0]
 801d536:	7078      	strb	r0, [r7, #1]
 801d538:	f887 e002 	strb.w	lr, [r7, #2]
 801d53c:	e775      	b.n	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d53e:	1c5a      	adds	r2, r3, #1
 801d540:	f53f af73 	bmi.w	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d544:	4594      	cmp	ip, r2
 801d546:	f6ff af70 	blt.w	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d54a:	1c42      	adds	r2, r0, #1
 801d54c:	f53f af6d 	bmi.w	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d550:	4596      	cmp	lr, r2
 801d552:	f6ff af6a 	blt.w	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d556:	9302      	str	r3, [sp, #8]
 801d558:	fa0f f38e 	sxth.w	r3, lr
 801d55c:	9a08      	ldr	r2, [sp, #32]
 801d55e:	9301      	str	r3, [sp, #4]
 801d560:	fa0f f38c 	sxth.w	r3, ip
 801d564:	9105      	str	r1, [sp, #20]
 801d566:	4639      	mov	r1, r7
 801d568:	9300      	str	r3, [sp, #0]
 801d56a:	464b      	mov	r3, r9
 801d56c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d570:	4642      	mov	r2, r8
 801d572:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d574:	f7ff fd90 	bl	801d098 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d578:	e757      	b.n	801d42a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d57a:	142a      	asrs	r2, r5, #16
 801d57c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d580:	1433      	asrs	r3, r6, #16
 801d582:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801d586:	fb09 2303 	mla	r3, r9, r3, r2
 801d58a:	085a      	lsrs	r2, r3, #1
 801d58c:	07d9      	lsls	r1, r3, #31
 801d58e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d592:	bf54      	ite	pl
 801d594:	f002 020f 	andpl.w	r2, r2, #15
 801d598:	1112      	asrmi	r2, r2, #4
 801d59a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d59e:	b2d2      	uxtb	r2, r2
 801d5a0:	2800      	cmp	r0, #0
 801d5a2:	f000 8085 	beq.w	801d6b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801d5a6:	f103 0a01 	add.w	sl, r3, #1
 801d5aa:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801d5ae:	f01a 0f01 	tst.w	sl, #1
 801d5b2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d5b6:	bf0c      	ite	eq
 801d5b8:	f001 010f 	andeq.w	r1, r1, #15
 801d5bc:	1109      	asrne	r1, r1, #4
 801d5be:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d5c2:	b2c9      	uxtb	r1, r1
 801d5c4:	910f      	str	r1, [sp, #60]	; 0x3c
 801d5c6:	b1df      	cbz	r7, 801d600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d5c8:	444b      	add	r3, r9
 801d5ca:	0859      	lsrs	r1, r3, #1
 801d5cc:	f013 0f01 	tst.w	r3, #1
 801d5d0:	f103 0301 	add.w	r3, r3, #1
 801d5d4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d5d8:	bf0c      	ite	eq
 801d5da:	f001 010f 	andeq.w	r1, r1, #15
 801d5de:	1109      	asrne	r1, r1, #4
 801d5e0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d5e4:	b2c9      	uxtb	r1, r1
 801d5e6:	910b      	str	r1, [sp, #44]	; 0x2c
 801d5e8:	0859      	lsrs	r1, r3, #1
 801d5ea:	07db      	lsls	r3, r3, #31
 801d5ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d5f0:	bf54      	ite	pl
 801d5f2:	f001 010f 	andpl.w	r1, r1, #15
 801d5f6:	1109      	asrmi	r1, r1, #4
 801d5f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d5fc:	b2c9      	uxtb	r1, r1
 801d5fe:	9110      	str	r1, [sp, #64]	; 0x40
 801d600:	b280      	uxth	r0, r0
 801d602:	b2bf      	uxth	r7, r7
 801d604:	fb00 f307 	mul.w	r3, r0, r7
 801d608:	0100      	lsls	r0, r0, #4
 801d60a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801d60e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d612:	1ac0      	subs	r0, r0, r3
 801d614:	b2bf      	uxth	r7, r7
 801d616:	b280      	uxth	r0, r0
 801d618:	1bc9      	subs	r1, r1, r7
 801d61a:	fa1f fa81 	uxth.w	sl, r1
 801d61e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d620:	4348      	muls	r0, r1
 801d622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d624:	fb02 020a 	mla	r2, r2, sl, r0
 801d628:	fb07 2701 	mla	r7, r7, r1, r2
 801d62c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d62e:	fb03 7302 	mla	r3, r3, r2, r7
 801d632:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d636:	b393      	cbz	r3, 801d69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d638:	4a2a      	ldr	r2, [pc, #168]	; (801d6e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d63a:	2bff      	cmp	r3, #255	; 0xff
 801d63c:	6811      	ldr	r1, [r2, #0]
 801d63e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801d642:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801d646:	b2c9      	uxtb	r1, r1
 801d648:	d042      	beq.n	801d6d0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d64a:	b298      	uxth	r0, r3
 801d64c:	43db      	mvns	r3, r3
 801d64e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801d652:	fb11 f100 	smulbb	r1, r1, r0
 801d656:	b2db      	uxtb	r3, r3
 801d658:	fb17 f700 	smulbb	r7, r7, r0
 801d65c:	fb02 1103 	mla	r1, r2, r3, r1
 801d660:	fb1a f000 	smulbb	r0, sl, r0
 801d664:	b289      	uxth	r1, r1
 801d666:	1c4a      	adds	r2, r1, #1
 801d668:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d66c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801d670:	fb02 7703 	mla	r7, r2, r3, r7
 801d674:	1209      	asrs	r1, r1, #8
 801d676:	b2bf      	uxth	r7, r7
 801d678:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d67c:	1c7a      	adds	r2, r7, #1
 801d67e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d682:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801d686:	fb02 0303 	mla	r3, r2, r3, r0
 801d68a:	123f      	asrs	r7, r7, #8
 801d68c:	b29b      	uxth	r3, r3
 801d68e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d692:	1c5a      	adds	r2, r3, #1
 801d694:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d698:	121b      	asrs	r3, r3, #8
 801d69a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801d69e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d6a0:	f10c 0c03 	add.w	ip, ip, #3
 801d6a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d6a8:	441d      	add	r5, r3
 801d6aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d6ac:	441e      	add	r6, r3
 801d6ae:	e6e7      	b.n	801d480 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d6b0:	2f00      	cmp	r7, #0
 801d6b2:	d0a5      	beq.n	801d600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d6b4:	444b      	add	r3, r9
 801d6b6:	0859      	lsrs	r1, r3, #1
 801d6b8:	07db      	lsls	r3, r3, #31
 801d6ba:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d6be:	bf54      	ite	pl
 801d6c0:	f001 010f 	andpl.w	r1, r1, #15
 801d6c4:	1109      	asrmi	r1, r1, #4
 801d6c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d6ca:	b2c9      	uxtb	r1, r1
 801d6cc:	910b      	str	r1, [sp, #44]	; 0x2c
 801d6ce:	e797      	b.n	801d600 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d6d0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d6d4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d6d8:	f80c ac01 	strb.w	sl, [ip, #-1]
 801d6dc:	e7df      	b.n	801d69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d6de:	b013      	add	sp, #76	; 0x4c
 801d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6e4:	2400f4b4 	.word	0x2400f4b4

0801d6e8 <CRC_Lock>:
 801d6e8:	4a20      	ldr	r2, [pc, #128]	; (801d76c <CRC_Lock+0x84>)
 801d6ea:	b530      	push	{r4, r5, lr}
 801d6ec:	6813      	ldr	r3, [r2, #0]
 801d6ee:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d6f2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d6f6:	f023 0301 	bic.w	r3, r3, #1
 801d6fa:	6013      	str	r3, [r2, #0]
 801d6fc:	4b1c      	ldr	r3, [pc, #112]	; (801d770 <CRC_Lock+0x88>)
 801d6fe:	681a      	ldr	r2, [r3, #0]
 801d700:	4022      	ands	r2, r4
 801d702:	42aa      	cmp	r2, r5
 801d704:	d005      	beq.n	801d712 <CRC_Lock+0x2a>
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d70c:	4023      	ands	r3, r4
 801d70e:	4293      	cmp	r3, r2
 801d710:	d124      	bne.n	801d75c <CRC_Lock+0x74>
 801d712:	4b18      	ldr	r3, [pc, #96]	; (801d774 <CRC_Lock+0x8c>)
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	bb0b      	cbnz	r3, 801d75c <CRC_Lock+0x74>
 801d718:	4b17      	ldr	r3, [pc, #92]	; (801d778 <CRC_Lock+0x90>)
 801d71a:	681a      	ldr	r2, [r3, #0]
 801d71c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d720:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d724:	d00d      	beq.n	801d742 <CRC_Lock+0x5a>
 801d726:	681a      	ldr	r2, [r3, #0]
 801d728:	f240 4483 	movw	r4, #1155	; 0x483
 801d72c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d730:	42a2      	cmp	r2, r4
 801d732:	d006      	beq.n	801d742 <CRC_Lock+0x5a>
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	f240 4285 	movw	r2, #1157	; 0x485
 801d73a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d73e:	4293      	cmp	r3, r2
 801d740:	d10c      	bne.n	801d75c <CRC_Lock+0x74>
 801d742:	4b0e      	ldr	r3, [pc, #56]	; (801d77c <CRC_Lock+0x94>)
 801d744:	2201      	movs	r2, #1
 801d746:	601a      	str	r2, [r3, #0]
 801d748:	681a      	ldr	r2, [r3, #0]
 801d74a:	2a00      	cmp	r2, #0
 801d74c:	d1fc      	bne.n	801d748 <CRC_Lock+0x60>
 801d74e:	4b0c      	ldr	r3, [pc, #48]	; (801d780 <CRC_Lock+0x98>)
 801d750:	6018      	str	r0, [r3, #0]
 801d752:	6818      	ldr	r0, [r3, #0]
 801d754:	1a43      	subs	r3, r0, r1
 801d756:	4258      	negs	r0, r3
 801d758:	4158      	adcs	r0, r3
 801d75a:	bd30      	pop	{r4, r5, pc}
 801d75c:	4b09      	ldr	r3, [pc, #36]	; (801d784 <CRC_Lock+0x9c>)
 801d75e:	2201      	movs	r2, #1
 801d760:	601a      	str	r2, [r3, #0]
 801d762:	681a      	ldr	r2, [r3, #0]
 801d764:	2a00      	cmp	r2, #0
 801d766:	d1fc      	bne.n	801d762 <CRC_Lock+0x7a>
 801d768:	4b07      	ldr	r3, [pc, #28]	; (801d788 <CRC_Lock+0xa0>)
 801d76a:	e7f1      	b.n	801d750 <CRC_Lock+0x68>
 801d76c:	e0002000 	.word	0xe0002000
 801d770:	e000ed00 	.word	0xe000ed00
 801d774:	e0042000 	.word	0xe0042000
 801d778:	5c001000 	.word	0x5c001000
 801d77c:	58024c08 	.word	0x58024c08
 801d780:	58024c00 	.word	0x58024c00
 801d784:	40023008 	.word	0x40023008
 801d788:	40023000 	.word	0x40023000

0801d78c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d78c:	6101      	str	r1, [r0, #16]
 801d78e:	4770      	bx	lr

0801d790 <_ZN8touchgfx8Gestures4tickEv>:
 801d790:	7b83      	ldrb	r3, [r0, #14]
 801d792:	b14b      	cbz	r3, 801d7a8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d794:	8903      	ldrh	r3, [r0, #8]
 801d796:	3301      	adds	r3, #1
 801d798:	b29b      	uxth	r3, r3
 801d79a:	2b07      	cmp	r3, #7
 801d79c:	8103      	strh	r3, [r0, #8]
 801d79e:	bf81      	itttt	hi
 801d7a0:	2300      	movhi	r3, #0
 801d7a2:	8143      	strhhi	r3, [r0, #10]
 801d7a4:	8183      	strhhi	r3, [r0, #12]
 801d7a6:	7383      	strbhi	r3, [r0, #14]
 801d7a8:	4770      	bx	lr
	...

0801d7ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d7ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d7b0:	4698      	mov	r8, r3
 801d7b2:	8883      	ldrh	r3, [r0, #4]
 801d7b4:	4604      	mov	r4, r0
 801d7b6:	4617      	mov	r7, r2
 801d7b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d7bc:	eba8 0303 	sub.w	r3, r8, r3
 801d7c0:	4a19      	ldr	r2, [pc, #100]	; (801d828 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d7c2:	460e      	mov	r6, r1
 801d7c4:	b21b      	sxth	r3, r3
 801d7c6:	88c1      	ldrh	r1, [r0, #6]
 801d7c8:	9200      	str	r2, [sp, #0]
 801d7ca:	2000      	movs	r0, #0
 801d7cc:	2b00      	cmp	r3, #0
 801d7ce:	8aa2      	ldrh	r2, [r4, #20]
 801d7d0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d7d4:	bfb8      	it	lt
 801d7d6:	425b      	neglt	r3, r3
 801d7d8:	f88d 0004 	strb.w	r0, [sp, #4]
 801d7dc:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d7e0:	b21b      	sxth	r3, r3
 801d7e2:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d7e6:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d7ea:	4293      	cmp	r3, r2
 801d7ec:	dc07      	bgt.n	801d7fe <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d7ee:	1a69      	subs	r1, r5, r1
 801d7f0:	b209      	sxth	r1, r1
 801d7f2:	2900      	cmp	r1, #0
 801d7f4:	bfb8      	it	lt
 801d7f6:	4249      	neglt	r1, r1
 801d7f8:	b209      	sxth	r1, r1
 801d7fa:	428a      	cmp	r2, r1
 801d7fc:	da10      	bge.n	801d820 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d7fe:	6920      	ldr	r0, [r4, #16]
 801d800:	4669      	mov	r1, sp
 801d802:	eba8 0606 	sub.w	r6, r8, r6
 801d806:	1bef      	subs	r7, r5, r7
 801d808:	6803      	ldr	r3, [r0, #0]
 801d80a:	685b      	ldr	r3, [r3, #4]
 801d80c:	4798      	blx	r3
 801d80e:	2300      	movs	r3, #0
 801d810:	2001      	movs	r0, #1
 801d812:	8166      	strh	r6, [r4, #10]
 801d814:	8123      	strh	r3, [r4, #8]
 801d816:	81a7      	strh	r7, [r4, #12]
 801d818:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d81c:	80e5      	strh	r5, [r4, #6]
 801d81e:	73a0      	strb	r0, [r4, #14]
 801d820:	b004      	add	sp, #16
 801d822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d826:	bf00      	nop
 801d828:	0802241c 	.word	0x0802241c

0801d82c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d82e:	461e      	mov	r6, r3
 801d830:	1e4b      	subs	r3, r1, #1
 801d832:	b085      	sub	sp, #20
 801d834:	4604      	mov	r4, r0
 801d836:	2b01      	cmp	r3, #1
 801d838:	460d      	mov	r5, r1
 801d83a:	4617      	mov	r7, r2
 801d83c:	d84b      	bhi.n	801d8d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d83e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d842:	1cd3      	adds	r3, r2, #3
 801d844:	b29b      	uxth	r3, r3
 801d846:	2b06      	cmp	r3, #6
 801d848:	d916      	bls.n	801d878 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d84a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d8ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d84e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d852:	f8cd c004 	str.w	ip, [sp, #4]
 801d856:	f04f 0c00 	mov.w	ip, #0
 801d85a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d85e:	6900      	ldr	r0, [r0, #16]
 801d860:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d864:	a901      	add	r1, sp, #4
 801d866:	f88d c008 	strb.w	ip, [sp, #8]
 801d86a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d86e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d872:	6803      	ldr	r3, [r0, #0]
 801d874:	689b      	ldr	r3, [r3, #8]
 801d876:	4798      	blx	r3
 801d878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d87c:	1cd3      	adds	r3, r2, #3
 801d87e:	b29b      	uxth	r3, r3
 801d880:	2b06      	cmp	r3, #6
 801d882:	d916      	bls.n	801d8b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d884:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d8ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d888:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d88c:	f8cd c004 	str.w	ip, [sp, #4]
 801d890:	f04f 0c01 	mov.w	ip, #1
 801d894:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d898:	6920      	ldr	r0, [r4, #16]
 801d89a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d89e:	a901      	add	r1, sp, #4
 801d8a0:	f88d c008 	strb.w	ip, [sp, #8]
 801d8a4:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d8a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d8ac:	6803      	ldr	r3, [r0, #0]
 801d8ae:	689b      	ldr	r3, [r3, #8]
 801d8b0:	4798      	blx	r3
 801d8b2:	4b0d      	ldr	r3, [pc, #52]	; (801d8e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d8b4:	a901      	add	r1, sp, #4
 801d8b6:	6920      	ldr	r0, [r4, #16]
 801d8b8:	9301      	str	r3, [sp, #4]
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	f88d 5008 	strb.w	r5, [sp, #8]
 801d8c0:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d8c4:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d8c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d8cc:	6803      	ldr	r3, [r0, #0]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	4798      	blx	r3
 801d8d2:	b005      	add	sp, #20
 801d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8d6:	2900      	cmp	r1, #0
 801d8d8:	d1eb      	bne.n	801d8b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d8da:	80a2      	strh	r2, [r4, #4]
 801d8dc:	80c6      	strh	r6, [r0, #6]
 801d8de:	60a1      	str	r1, [r4, #8]
 801d8e0:	81a1      	strh	r1, [r4, #12]
 801d8e2:	73a1      	strb	r1, [r4, #14]
 801d8e4:	e7e5      	b.n	801d8b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d8e6:	bf00      	nop
 801d8e8:	08022408 	.word	0x08022408
 801d8ec:	08022430 	.word	0x08022430

0801d8f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 801d8f0:	10c9      	asrs	r1, r1, #3
 801d8f2:	2900      	cmp	r1, #0
 801d8f4:	bfb8      	it	lt
 801d8f6:	4249      	neglt	r1, r1
 801d8f8:	2801      	cmp	r0, #1
 801d8fa:	d108      	bne.n	801d90e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801d8fc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801d900:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801d904:	4601      	mov	r1, r0
 801d906:	dd02      	ble.n	801d90e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801d908:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801d90c:	4770      	bx	lr
 801d90e:	29ff      	cmp	r1, #255	; 0xff
 801d910:	bfa8      	it	ge
 801d912:	21ff      	movge	r1, #255	; 0xff
 801d914:	4608      	mov	r0, r1
 801d916:	4770      	bx	lr

0801d918 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801d918:	b410      	push	{r4}
 801d91a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801d91e:	429c      	cmp	r4, r3
 801d920:	d803      	bhi.n	801d92a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801d922:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d926:	f7f2 bf53 	b.w	80107d0 <_ZN8touchgfx7Outline6lineToEii>
 801d92a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d92e:	4770      	bx	lr

0801d930 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801d930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d934:	b08b      	sub	sp, #44	; 0x2c
 801d936:	4606      	mov	r6, r0
 801d938:	468a      	mov	sl, r1
 801d93a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d93e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801d942:	9308      	str	r3, [sp, #32]
 801d944:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801d948:	9309      	str	r3, [sp, #36]	; 0x24
 801d94a:	f7f3 f8ac 	bl	8010aa6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801d94e:	68b5      	ldr	r5, [r6, #8]
 801d950:	4604      	mov	r4, r0
 801d952:	2d00      	cmp	r5, #0
 801d954:	d044      	beq.n	801d9e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801d956:	6873      	ldr	r3, [r6, #4]
 801d958:	42ab      	cmp	r3, r5
 801d95a:	d33d      	bcc.n	801d9d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801d95c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801d960:	f04f 0800 	mov.w	r8, #0
 801d964:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801d968:	eb02 0b03 	add.w	fp, r2, r3
 801d96c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801d970:	fb02 1203 	mla	r2, r2, r3, r1
 801d974:	9205      	str	r2, [sp, #20]
 801d976:	1e6a      	subs	r2, r5, #1
 801d978:	9204      	str	r2, [sp, #16]
 801d97a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801d97e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801d982:	454b      	cmp	r3, r9
 801d984:	463a      	mov	r2, r7
 801d986:	d008      	beq.n	801d99a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801d988:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 801d98c:	eb03 0b09 	add.w	fp, r3, r9
 801d990:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801d994:	fb03 1309 	mla	r3, r3, r9, r1
 801d998:	9305      	str	r3, [sp, #20]
 801d99a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801d99e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d9a2:	4498      	add	r8, r3
 801d9a4:	9b04      	ldr	r3, [sp, #16]
 801d9a6:	3b01      	subs	r3, #1
 801d9a8:	9304      	str	r3, [sp, #16]
 801d9aa:	9b04      	ldr	r3, [sp, #16]
 801d9ac:	3301      	adds	r3, #1
 801d9ae:	d015      	beq.n	801d9dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801d9b0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801d9b4:	42bb      	cmp	r3, r7
 801d9b6:	d117      	bne.n	801d9e8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801d9b8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801d9bc:	9b04      	ldr	r3, [sp, #16]
 801d9be:	4548      	cmp	r0, r9
 801d9c0:	f103 33ff 	add.w	r3, r3, #4294967295
 801d9c4:	d17d      	bne.n	801dac2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801d9c6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801d9ca:	4401      	add	r1, r0
 801d9cc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d9d0:	4480      	add	r8, r0
 801d9d2:	e7e9      	b.n	801d9a8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801d9d4:	461f      	mov	r7, r3
 801d9d6:	e042      	b.n	801da5e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801d9d8:	2000      	movs	r0, #0
 801d9da:	e002      	b.n	801d9e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801d9dc:	2900      	cmp	r1, #0
 801d9de:	d16d      	bne.n	801dabc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801d9e0:	2001      	movs	r0, #1
 801d9e2:	b00b      	add	sp, #44	; 0x2c
 801d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9e8:	b379      	cbz	r1, 801da4a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801d9ea:	2f00      	cmp	r7, #0
 801d9ec:	db29      	blt.n	801da42 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d9ee:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801d9f2:	42bb      	cmp	r3, r7
 801d9f4:	dd25      	ble.n	801da42 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801d9f6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801d9fa:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801d9fe:	f7ff ff77 	bl	801d8f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801da02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da04:	fb10 f003 	smulbb	r0, r0, r3
 801da08:	b280      	uxth	r0, r0
 801da0a:	1c41      	adds	r1, r0, #1
 801da0c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801da10:	1209      	asrs	r1, r1, #8
 801da12:	f011 0fff 	tst.w	r1, #255	; 0xff
 801da16:	d014      	beq.n	801da42 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801da18:	b2c9      	uxtb	r1, r1
 801da1a:	9808      	ldr	r0, [sp, #32]
 801da1c:	b2ba      	uxth	r2, r7
 801da1e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801da20:	9102      	str	r1, [sp, #8]
 801da22:	2101      	movs	r1, #1
 801da24:	4413      	add	r3, r2
 801da26:	4402      	add	r2, r0
 801da28:	9101      	str	r1, [sp, #4]
 801da2a:	fa0f f18b 	sxth.w	r1, fp
 801da2e:	f8da 0000 	ldr.w	r0, [sl]
 801da32:	b21b      	sxth	r3, r3
 801da34:	9100      	str	r1, [sp, #0]
 801da36:	b212      	sxth	r2, r2
 801da38:	6941      	ldr	r1, [r0, #20]
 801da3a:	4650      	mov	r0, sl
 801da3c:	460d      	mov	r5, r1
 801da3e:	9905      	ldr	r1, [sp, #20]
 801da40:	47a8      	blx	r5
 801da42:	9b04      	ldr	r3, [sp, #16]
 801da44:	1c7a      	adds	r2, r7, #1
 801da46:	3301      	adds	r3, #1
 801da48:	d0ca      	beq.n	801d9e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801da4a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801da4e:	1abb      	subs	r3, r7, r2
 801da50:	2b00      	cmp	r3, #0
 801da52:	dd31      	ble.n	801dab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801da54:	2a00      	cmp	r2, #0
 801da56:	dabd      	bge.n	801d9d4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801da58:	2f00      	cmp	r7, #0
 801da5a:	dd2d      	ble.n	801dab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801da5c:	2200      	movs	r2, #0
 801da5e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801da62:	19d1      	adds	r1, r2, r7
 801da64:	4299      	cmp	r1, r3
 801da66:	db02      	blt.n	801da6e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801da68:	1a9f      	subs	r7, r3, r2
 801da6a:	2f00      	cmp	r7, #0
 801da6c:	dd24      	ble.n	801dab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801da6e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801da72:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801da76:	f7ff ff3b 	bl	801d8f0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801da7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da7c:	fb10 f003 	smulbb	r0, r0, r3
 801da80:	b280      	uxth	r0, r0
 801da82:	1c41      	adds	r1, r0, #1
 801da84:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801da88:	1209      	asrs	r1, r1, #8
 801da8a:	f011 0fff 	tst.w	r1, #255	; 0xff
 801da8e:	d013      	beq.n	801dab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801da90:	b292      	uxth	r2, r2
 801da92:	9808      	ldr	r0, [sp, #32]
 801da94:	b2c9      	uxtb	r1, r1
 801da96:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801da98:	b23f      	sxth	r7, r7
 801da9a:	4413      	add	r3, r2
 801da9c:	9102      	str	r1, [sp, #8]
 801da9e:	4402      	add	r2, r0
 801daa0:	fa0f f18b 	sxth.w	r1, fp
 801daa4:	f8da 0000 	ldr.w	r0, [sl]
 801daa8:	b21b      	sxth	r3, r3
 801daaa:	9100      	str	r1, [sp, #0]
 801daac:	b212      	sxth	r2, r2
 801daae:	9701      	str	r7, [sp, #4]
 801dab0:	9905      	ldr	r1, [sp, #20]
 801dab2:	6947      	ldr	r7, [r0, #20]
 801dab4:	4650      	mov	r0, sl
 801dab6:	47b8      	blx	r7
 801dab8:	464b      	mov	r3, r9
 801daba:	e75e      	b.n	801d97a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801dabc:	2f00      	cmp	r7, #0
 801dabe:	da96      	bge.n	801d9ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801dac0:	e78e      	b.n	801d9e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801dac2:	2900      	cmp	r1, #0
 801dac4:	d0f8      	beq.n	801dab8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dac6:	e790      	b.n	801d9ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801dac8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801dac8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801dacc:	4b4a      	ldr	r3, [pc, #296]	; (801dbf8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 801dace:	2500      	movs	r5, #0
 801dad0:	f100 0620 	add.w	r6, r0, #32
 801dad4:	4604      	mov	r4, r0
 801dad6:	4690      	mov	r8, r2
 801dad8:	f100 0718 	add.w	r7, r0, #24
 801dadc:	e9c0 3100 	strd	r3, r1, [r0]
 801dae0:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801dae4:	e9c0 5504 	strd	r5, r5, [r0, #16]
 801dae8:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801daec:	4630      	mov	r0, r6
 801daee:	f7f2 f9b5 	bl	800fe5c <_ZN8touchgfx7OutlineC1Ev>
 801daf2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801daf6:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801dafa:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801dafe:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801db02:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 801db06:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801db0a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 801db0e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801db12:	9500      	str	r5, [sp, #0]
 801db14:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 801db18:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 801db1c:	f9b8 2000 	ldrsh.w	r2, [r8]
 801db20:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801db24:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801db28:	4410      	add	r0, r2
 801db2a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801db2e:	b280      	uxth	r0, r0
 801db30:	fa0f fa80 	sxth.w	sl, r0
 801db34:	45aa      	cmp	sl, r5
 801db36:	dd5c      	ble.n	801dbf2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801db38:	4591      	cmp	r9, r2
 801db3a:	dd5a      	ble.n	801dbf2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801db3c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801db40:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801db44:	440b      	add	r3, r1
 801db46:	b29b      	uxth	r3, r3
 801db48:	b21d      	sxth	r5, r3
 801db4a:	2d00      	cmp	r5, #0
 801db4c:	dd51      	ble.n	801dbf2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801db4e:	458e      	cmp	lr, r1
 801db50:	dd4f      	ble.n	801dbf2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801db52:	45d1      	cmp	r9, sl
 801db54:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801db58:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801db5c:	bfb8      	it	lt
 801db5e:	fa1f f089 	uxthlt.w	r0, r9
 801db62:	45ae      	cmp	lr, r5
 801db64:	f8ad 2000 	strh.w	r2, [sp]
 801db68:	bfb8      	it	lt
 801db6a:	fa1f f38e 	uxthlt.w	r3, lr
 801db6e:	1a80      	subs	r0, r0, r2
 801db70:	f8ad 1002 	strh.w	r1, [sp, #2]
 801db74:	1a5b      	subs	r3, r3, r1
 801db76:	f8ad 0004 	strh.w	r0, [sp, #4]
 801db7a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801db7e:	466d      	mov	r5, sp
 801db80:	e895 0003 	ldmia.w	r5, {r0, r1}
 801db84:	e887 0003 	stmia.w	r7, {r0, r1}
 801db88:	f8dc 3000 	ldr.w	r3, [ip]
 801db8c:	4660      	mov	r0, ip
 801db8e:	4639      	mov	r1, r7
 801db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db92:	4798      	blx	r3
 801db94:	6861      	ldr	r1, [r4, #4]
 801db96:	4628      	mov	r0, r5
 801db98:	3104      	adds	r1, #4
 801db9a:	f7f4 fb2f 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db9e:	4638      	mov	r0, r7
 801dba0:	f7f4 fb04 	bl	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dba4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801dba8:	f8bd 2000 	ldrh.w	r2, [sp]
 801dbac:	4630      	mov	r0, r6
 801dbae:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801dbb2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801dbb6:	f7f2 f935 	bl	800fe24 <_ZN8touchgfx7Outline5resetEv>
 801dbba:	f9bd 3000 	ldrsh.w	r3, [sp]
 801dbbe:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 801dbc2:	4620      	mov	r0, r4
 801dbc4:	015b      	lsls	r3, r3, #5
 801dbc6:	60a3      	str	r3, [r4, #8]
 801dbc8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801dbcc:	015b      	lsls	r3, r3, #5
 801dbce:	60e3      	str	r3, [r4, #12]
 801dbd0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801dbd4:	015b      	lsls	r3, r3, #5
 801dbd6:	6123      	str	r3, [r4, #16]
 801dbd8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801dbdc:	015b      	lsls	r3, r3, #5
 801dbde:	6163      	str	r3, [r4, #20]
 801dbe0:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801dbe4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801dbe8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 801dbec:	b002      	add	sp, #8
 801dbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	9301      	str	r3, [sp, #4]
 801dbf6:	e7c2      	b.n	801db7e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 801dbf8:	08022660 	.word	0x08022660

0801dbfc <_ZN8touchgfx6Canvas5closeEv>:
 801dbfc:	b538      	push	{r3, r4, r5, lr}
 801dbfe:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801dc02:	4604      	mov	r4, r0
 801dc04:	b193      	cbz	r3, 801dc2c <_ZN8touchgfx6Canvas5closeEv+0x30>
 801dc06:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 801dc0a:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 801dc0e:	4213      	tst	r3, r2
 801dc10:	d10c      	bne.n	801dc2c <_ZN8touchgfx6Canvas5closeEv+0x30>
 801dc12:	f100 0520 	add.w	r5, r0, #32
 801dc16:	b123      	cbz	r3, 801dc22 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801dc18:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 801dc1c:	4628      	mov	r0, r5
 801dc1e:	f7ff fe7b 	bl	801d918 <_ZN8touchgfx10Rasterizer6lineToEii>
 801dc22:	4628      	mov	r0, r5
 801dc24:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 801dc28:	f7ff fe76 	bl	801d918 <_ZN8touchgfx10Rasterizer6lineToEii>
 801dc2c:	2300      	movs	r3, #0
 801dc2e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801dc32:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 801dc36:	4298      	cmp	r0, r3
 801dc38:	bf34      	ite	cc
 801dc3a:	2000      	movcc	r0, #0
 801dc3c:	2001      	movcs	r0, #1
 801dc3e:	bd38      	pop	{r3, r4, r5, pc}

0801dc40 <_ZN8touchgfx6Canvas6renderEh>:
 801dc40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801dc44:	4604      	mov	r4, r0
 801dc46:	6840      	ldr	r0, [r0, #4]
 801dc48:	460d      	mov	r5, r1
 801dc4a:	6803      	ldr	r3, [r0, #0]
 801dc4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dc4e:	4798      	blx	r3
 801dc50:	fb10 f105 	smulbb	r1, r0, r5
 801dc54:	b289      	uxth	r1, r1
 801dc56:	1c4d      	adds	r5, r1, #1
 801dc58:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801dc5c:	122d      	asrs	r5, r5, #8
 801dc5e:	f000 8097 	beq.w	801dd90 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801dc62:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	f000 8092 	beq.w	801dd90 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801dc6c:	4620      	mov	r0, r4
 801dc6e:	f7ff ffc5 	bl	801dbfc <_ZN8touchgfx6Canvas5closeEv>
 801dc72:	4607      	mov	r7, r0
 801dc74:	2800      	cmp	r0, #0
 801dc76:	d043      	beq.n	801dd00 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801dc78:	6863      	ldr	r3, [r4, #4]
 801dc7a:	4e46      	ldr	r6, [pc, #280]	; (801dd94 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 801dc7c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801dc7e:	6837      	ldr	r7, [r6, #0]
 801dc80:	6803      	ldr	r3, [r0, #0]
 801dc82:	689b      	ldr	r3, [r3, #8]
 801dc84:	4798      	blx	r3
 801dc86:	4601      	mov	r1, r0
 801dc88:	4638      	mov	r0, r7
 801dc8a:	f7ef ff0f 	bl	800daac <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801dc8e:	4607      	mov	r7, r0
 801dc90:	f7ef fad0 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 801dc94:	6803      	ldr	r3, [r0, #0]
 801dc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc98:	4798      	blx	r3
 801dc9a:	4680      	mov	r8, r0
 801dc9c:	f7ef faca 	bl	800d234 <_ZN8touchgfx3HAL3lcdEv>
 801dca0:	6803      	ldr	r3, [r0, #0]
 801dca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dca4:	4798      	blx	r3
 801dca6:	280b      	cmp	r0, #11
 801dca8:	d857      	bhi.n	801dd5a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 801dcaa:	e8df f000 	tbb	[pc, r0]
 801dcae:	584d      	.short	0x584d
 801dcb0:	2d560668 	.word	0x2d560668
 801dcb4:	6161613d 	.word	0x6161613d
 801dcb8:	6161      	.short	0x6161
 801dcba:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801dcbe:	2208      	movs	r2, #8
 801dcc0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dcc4:	fb91 f2f2 	sdiv	r2, r1, r2
 801dcc8:	fb08 2303 	mla	r3, r8, r3, r2
 801dccc:	441f      	add	r7, r3
 801dcce:	424b      	negs	r3, r1
 801dcd0:	f001 0107 	and.w	r1, r1, #7
 801dcd4:	f003 0307 	and.w	r3, r3, #7
 801dcd8:	bf58      	it	pl
 801dcda:	4259      	negpl	r1, r3
 801dcdc:	b2c9      	uxtb	r1, r1
 801dcde:	6860      	ldr	r0, [r4, #4]
 801dce0:	b2ed      	uxtb	r5, r5
 801dce2:	fa0f f388 	sxth.w	r3, r8
 801dce6:	463a      	mov	r2, r7
 801dce8:	e9cd 1500 	strd	r1, r5, [sp]
 801dcec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801dcee:	f104 0020 	add.w	r0, r4, #32
 801dcf2:	f7ff fe1d 	bl	801d930 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801dcf6:	4607      	mov	r7, r0
 801dcf8:	6830      	ldr	r0, [r6, #0]
 801dcfa:	6803      	ldr	r3, [r0, #0]
 801dcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dcfe:	4798      	blx	r3
 801dd00:	4638      	mov	r0, r7
 801dd02:	b002      	add	sp, #8
 801dd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd08:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801dd0c:	2204      	movs	r2, #4
 801dd0e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd12:	fb91 f2f2 	sdiv	r2, r1, r2
 801dd16:	fb08 2303 	mla	r3, r8, r3, r2
 801dd1a:	441f      	add	r7, r3
 801dd1c:	424b      	negs	r3, r1
 801dd1e:	f001 0103 	and.w	r1, r1, #3
 801dd22:	f003 0303 	and.w	r3, r3, #3
 801dd26:	e7d7      	b.n	801dcd8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 801dd28:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801dd2c:	2202      	movs	r2, #2
 801dd2e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd32:	2900      	cmp	r1, #0
 801dd34:	fb91 f2f2 	sdiv	r2, r1, r2
 801dd38:	f001 0101 	and.w	r1, r1, #1
 801dd3c:	fb08 2303 	mla	r3, r8, r3, r2
 801dd40:	bfb8      	it	lt
 801dd42:	4249      	neglt	r1, r1
 801dd44:	441f      	add	r7, r3
 801dd46:	e7c9      	b.n	801dcdc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 801dd48:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd4c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dd50:	fb08 f303 	mul.w	r3, r8, r3
 801dd54:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801dd58:	441f      	add	r7, r3
 801dd5a:	2100      	movs	r1, #0
 801dd5c:	e7bf      	b.n	801dcde <_ZN8touchgfx6Canvas6renderEh+0x9e>
 801dd5e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd62:	2103      	movs	r1, #3
 801dd64:	fb08 f203 	mul.w	r2, r8, r3
 801dd68:	8b23      	ldrh	r3, [r4, #24]
 801dd6a:	fb13 2301 	smlabb	r3, r3, r1, r2
 801dd6e:	e7f3      	b.n	801dd58 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801dd70:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd74:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dd78:	fb08 2303 	mla	r3, r8, r3, r2
 801dd7c:	e7ec      	b.n	801dd58 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801dd7e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dd82:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dd86:	fb08 f303 	mul.w	r3, r8, r3
 801dd8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dd8e:	e7e3      	b.n	801dd58 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801dd90:	2701      	movs	r7, #1
 801dd92:	e7b5      	b.n	801dd00 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801dd94:	2400f4a4 	.word	0x2400f4a4

0801dd98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801dd98:	4b07      	ldr	r3, [pc, #28]	; (801ddb8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801dd9a:	b510      	push	{r4, lr}
 801dd9c:	781b      	ldrb	r3, [r3, #0]
 801dd9e:	2b01      	cmp	r3, #1
 801dda0:	d108      	bne.n	801ddb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801dda2:	6843      	ldr	r3, [r0, #4]
 801dda4:	6814      	ldr	r4, [r2, #0]
 801dda6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ddaa:	680b      	ldr	r3, [r1, #0]
 801ddac:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801ddb0:	6013      	str	r3, [r2, #0]
 801ddb2:	600c      	str	r4, [r1, #0]
 801ddb4:	bd10      	pop	{r4, pc}
 801ddb6:	bf00      	nop
 801ddb8:	2400f49c 	.word	0x2400f49c

0801ddbc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801ddbc:	b513      	push	{r0, r1, r4, lr}
 801ddbe:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	e9cd 2100 	strd	r2, r1, [sp]
 801ddc8:	b9a3      	cbnz	r3, 801ddf4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801ddca:	466a      	mov	r2, sp
 801ddcc:	a901      	add	r1, sp, #4
 801ddce:	4620      	mov	r0, r4
 801ddd0:	f7ff ffe2 	bl	801dd98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801ddd4:	68a3      	ldr	r3, [r4, #8]
 801ddd6:	9901      	ldr	r1, [sp, #4]
 801ddd8:	9a00      	ldr	r2, [sp, #0]
 801ddda:	1ac9      	subs	r1, r1, r3
 801dddc:	68e3      	ldr	r3, [r4, #12]
 801ddde:	1ad2      	subs	r2, r2, r3
 801dde0:	9101      	str	r1, [sp, #4]
 801dde2:	2a00      	cmp	r2, #0
 801dde4:	9200      	str	r2, [sp, #0]
 801dde6:	da0b      	bge.n	801de00 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801dde8:	2301      	movs	r3, #1
 801ddea:	2900      	cmp	r1, #0
 801ddec:	da0e      	bge.n	801de0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801ddee:	f043 0304 	orr.w	r3, r3, #4
 801ddf2:	e013      	b.n	801de1c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801ddf4:	f7ff ff02 	bl	801dbfc <_ZN8touchgfx6Canvas5closeEv>
 801ddf8:	2800      	cmp	r0, #0
 801ddfa:	d1e6      	bne.n	801ddca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801ddfc:	b002      	add	sp, #8
 801ddfe:	bd10      	pop	{r4, pc}
 801de00:	6963      	ldr	r3, [r4, #20]
 801de02:	429a      	cmp	r2, r3
 801de04:	bfac      	ite	ge
 801de06:	2302      	movge	r3, #2
 801de08:	2300      	movlt	r3, #0
 801de0a:	e7ee      	b.n	801ddea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801de0c:	6920      	ldr	r0, [r4, #16]
 801de0e:	4281      	cmp	r1, r0
 801de10:	bfac      	ite	ge
 801de12:	2008      	movge	r0, #8
 801de14:	2000      	movlt	r0, #0
 801de16:	4318      	orrs	r0, r3
 801de18:	b2c3      	uxtb	r3, r0
 801de1a:	b158      	cbz	r0, 801de34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801de1c:	2200      	movs	r2, #0
 801de1e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 801de22:	9901      	ldr	r1, [sp, #4]
 801de24:	9a00      	ldr	r2, [sp, #0]
 801de26:	66a1      	str	r1, [r4, #104]	; 0x68
 801de28:	66e2      	str	r2, [r4, #108]	; 0x6c
 801de2a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 801de2e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 801de32:	e7e3      	b.n	801ddfc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801de34:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801de38:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801de3c:	4298      	cmp	r0, r3
 801de3e:	d803      	bhi.n	801de48 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801de40:	f104 0020 	add.w	r0, r4, #32
 801de44:	f7f2 fcde 	bl	8010804 <_ZN8touchgfx7Outline6moveToEii>
 801de48:	2301      	movs	r3, #1
 801de4a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801de4e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801de52:	2300      	movs	r3, #0
 801de54:	e7e5      	b.n	801de22 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801de56 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801de56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801de58:	ab02      	add	r3, sp, #8
 801de5a:	4604      	mov	r4, r0
 801de5c:	9101      	str	r1, [sp, #4]
 801de5e:	a901      	add	r1, sp, #4
 801de60:	f843 2d08 	str.w	r2, [r3, #-8]!
 801de64:	461a      	mov	r2, r3
 801de66:	f7ff ff97 	bl	801dd98 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801de6a:	68a3      	ldr	r3, [r4, #8]
 801de6c:	9901      	ldr	r1, [sp, #4]
 801de6e:	9a00      	ldr	r2, [sp, #0]
 801de70:	1ac9      	subs	r1, r1, r3
 801de72:	68e3      	ldr	r3, [r4, #12]
 801de74:	1ad2      	subs	r2, r2, r3
 801de76:	9101      	str	r1, [sp, #4]
 801de78:	2a00      	cmp	r2, #0
 801de7a:	9200      	str	r2, [sp, #0]
 801de7c:	db1c      	blt.n	801deb8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801de7e:	6963      	ldr	r3, [r4, #20]
 801de80:	429a      	cmp	r2, r3
 801de82:	bfac      	ite	ge
 801de84:	2002      	movge	r0, #2
 801de86:	2000      	movlt	r0, #0
 801de88:	2900      	cmp	r1, #0
 801de8a:	db17      	blt.n	801debc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801de8c:	6923      	ldr	r3, [r4, #16]
 801de8e:	4299      	cmp	r1, r3
 801de90:	bfac      	ite	ge
 801de92:	2308      	movge	r3, #8
 801de94:	2300      	movlt	r3, #0
 801de96:	4303      	orrs	r3, r0
 801de98:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 801de9c:	b2dd      	uxtb	r5, r3
 801de9e:	b978      	cbnz	r0, 801dec0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801dea0:	f104 0020 	add.w	r0, r4, #32
 801dea4:	f7ff fd38 	bl	801d918 <_ZN8touchgfx10Rasterizer6lineToEii>
 801dea8:	9b01      	ldr	r3, [sp, #4]
 801deaa:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 801deae:	65e3      	str	r3, [r4, #92]	; 0x5c
 801deb0:	9b00      	ldr	r3, [sp, #0]
 801deb2:	6623      	str	r3, [r4, #96]	; 0x60
 801deb4:	b002      	add	sp, #8
 801deb6:	bd70      	pop	{r4, r5, r6, pc}
 801deb8:	2001      	movs	r0, #1
 801deba:	e7e5      	b.n	801de88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801debc:	2304      	movs	r3, #4
 801debe:	e7ea      	b.n	801de96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801dec0:	b113      	cbz	r3, 801dec8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801dec2:	ea10 0305 	ands.w	r3, r0, r5
 801dec6:	d11c      	bne.n	801df02 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801dec8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801decc:	f104 0620 	add.w	r6, r4, #32
 801ded0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 801ded4:	b98b      	cbnz	r3, 801defa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801ded6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801deda:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801dede:	4298      	cmp	r0, r3
 801dee0:	d802      	bhi.n	801dee8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801dee2:	4630      	mov	r0, r6
 801dee4:	f7f2 fc8e 	bl	8010804 <_ZN8touchgfx7Outline6moveToEii>
 801dee8:	2301      	movs	r3, #1
 801deea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801deee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801def2:	4630      	mov	r0, r6
 801def4:	e9dd 2100 	ldrd	r2, r1, [sp]
 801def8:	e7d4      	b.n	801dea4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801defa:	4630      	mov	r0, r6
 801defc:	f7ff fd0c 	bl	801d918 <_ZN8touchgfx10Rasterizer6lineToEii>
 801df00:	e7f7      	b.n	801def2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801df02:	461d      	mov	r5, r3
 801df04:	e7d0      	b.n	801dea8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801df08 <_ZN8touchgfx6CanvasD1Ev>:
 801df08:	4b04      	ldr	r3, [pc, #16]	; (801df1c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801df0a:	b510      	push	{r4, lr}
 801df0c:	4604      	mov	r4, r0
 801df0e:	f840 3b20 	str.w	r3, [r0], #32
 801df12:	f7f1 ff7f 	bl	800fe14 <_ZN8touchgfx7OutlineD1Ev>
 801df16:	4620      	mov	r0, r4
 801df18:	bd10      	pop	{r4, pc}
 801df1a:	bf00      	nop
 801df1c:	08022660 	.word	0x08022660

0801df20 <_ZN8touchgfx6CanvasD0Ev>:
 801df20:	b510      	push	{r4, lr}
 801df22:	4604      	mov	r4, r0
 801df24:	f7ff fff0 	bl	801df08 <_ZN8touchgfx6CanvasD1Ev>
 801df28:	2170      	movs	r1, #112	; 0x70
 801df2a:	4620      	mov	r0, r4
 801df2c:	f000 f807 	bl	801df3e <_ZdlPvj>
 801df30:	4620      	mov	r0, r4
 801df32:	bd10      	pop	{r4, pc}

0801df34 <__aeabi_atexit>:
 801df34:	460b      	mov	r3, r1
 801df36:	4601      	mov	r1, r0
 801df38:	4618      	mov	r0, r3
 801df3a:	f000 b853 	b.w	801dfe4 <__cxa_atexit>

0801df3e <_ZdlPvj>:
 801df3e:	f000 b812 	b.w	801df66 <_ZdlPv>

0801df42 <__cxa_guard_acquire>:
 801df42:	6803      	ldr	r3, [r0, #0]
 801df44:	07db      	lsls	r3, r3, #31
 801df46:	d406      	bmi.n	801df56 <__cxa_guard_acquire+0x14>
 801df48:	7843      	ldrb	r3, [r0, #1]
 801df4a:	b103      	cbz	r3, 801df4e <__cxa_guard_acquire+0xc>
 801df4c:	deff      	udf	#255	; 0xff
 801df4e:	2301      	movs	r3, #1
 801df50:	7043      	strb	r3, [r0, #1]
 801df52:	4618      	mov	r0, r3
 801df54:	4770      	bx	lr
 801df56:	2000      	movs	r0, #0
 801df58:	4770      	bx	lr

0801df5a <__cxa_guard_release>:
 801df5a:	2301      	movs	r3, #1
 801df5c:	6003      	str	r3, [r0, #0]
 801df5e:	4770      	bx	lr

0801df60 <__cxa_pure_virtual>:
 801df60:	b508      	push	{r3, lr}
 801df62:	f000 f80f 	bl	801df84 <_ZSt9terminatev>

0801df66 <_ZdlPv>:
 801df66:	f000 b983 	b.w	801e270 <free>

0801df6a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801df6a:	b508      	push	{r3, lr}
 801df6c:	4780      	blx	r0
 801df6e:	f000 f80e 	bl	801df8e <abort>
	...

0801df74 <_ZSt13get_terminatev>:
 801df74:	4b02      	ldr	r3, [pc, #8]	; (801df80 <_ZSt13get_terminatev+0xc>)
 801df76:	6818      	ldr	r0, [r3, #0]
 801df78:	f3bf 8f5b 	dmb	ish
 801df7c:	4770      	bx	lr
 801df7e:	bf00      	nop
 801df80:	240000b4 	.word	0x240000b4

0801df84 <_ZSt9terminatev>:
 801df84:	b508      	push	{r3, lr}
 801df86:	f7ff fff5 	bl	801df74 <_ZSt13get_terminatev>
 801df8a:	f7ff ffee 	bl	801df6a <_ZN10__cxxabiv111__terminateEPFvvE>

0801df8e <abort>:
 801df8e:	b508      	push	{r3, lr}
 801df90:	2006      	movs	r0, #6
 801df92:	f000 fd91 	bl	801eab8 <raise>
 801df96:	2001      	movs	r0, #1
 801df98:	f7e3 faae 	bl	80014f8 <_exit>

0801df9c <__assert_func>:
 801df9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df9e:	4614      	mov	r4, r2
 801dfa0:	461a      	mov	r2, r3
 801dfa2:	4b09      	ldr	r3, [pc, #36]	; (801dfc8 <__assert_func+0x2c>)
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	4605      	mov	r5, r0
 801dfa8:	68d8      	ldr	r0, [r3, #12]
 801dfaa:	b14c      	cbz	r4, 801dfc0 <__assert_func+0x24>
 801dfac:	4b07      	ldr	r3, [pc, #28]	; (801dfcc <__assert_func+0x30>)
 801dfae:	9100      	str	r1, [sp, #0]
 801dfb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dfb4:	4906      	ldr	r1, [pc, #24]	; (801dfd0 <__assert_func+0x34>)
 801dfb6:	462b      	mov	r3, r5
 801dfb8:	f000 f828 	bl	801e00c <fiprintf>
 801dfbc:	f7ff ffe7 	bl	801df8e <abort>
 801dfc0:	4b04      	ldr	r3, [pc, #16]	; (801dfd4 <__assert_func+0x38>)
 801dfc2:	461c      	mov	r4, r3
 801dfc4:	e7f3      	b.n	801dfae <__assert_func+0x12>
 801dfc6:	bf00      	nop
 801dfc8:	240000b8 	.word	0x240000b8
 801dfcc:	0802266c 	.word	0x0802266c
 801dfd0:	08022679 	.word	0x08022679
 801dfd4:	080226a7 	.word	0x080226a7

0801dfd8 <atexit>:
 801dfd8:	2300      	movs	r3, #0
 801dfda:	4601      	mov	r1, r0
 801dfdc:	461a      	mov	r2, r3
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f001 b882 	b.w	801f0e8 <__register_exitproc>

0801dfe4 <__cxa_atexit>:
 801dfe4:	b510      	push	{r4, lr}
 801dfe6:	4c05      	ldr	r4, [pc, #20]	; (801dffc <__cxa_atexit+0x18>)
 801dfe8:	4613      	mov	r3, r2
 801dfea:	b12c      	cbz	r4, 801dff8 <__cxa_atexit+0x14>
 801dfec:	460a      	mov	r2, r1
 801dfee:	4601      	mov	r1, r0
 801dff0:	2002      	movs	r0, #2
 801dff2:	f001 f879 	bl	801f0e8 <__register_exitproc>
 801dff6:	bd10      	pop	{r4, pc}
 801dff8:	4620      	mov	r0, r4
 801dffa:	e7fc      	b.n	801dff6 <__cxa_atexit+0x12>
 801dffc:	0801f0e9 	.word	0x0801f0e9

0801e000 <__errno>:
 801e000:	4b01      	ldr	r3, [pc, #4]	; (801e008 <__errno+0x8>)
 801e002:	6818      	ldr	r0, [r3, #0]
 801e004:	4770      	bx	lr
 801e006:	bf00      	nop
 801e008:	240000b8 	.word	0x240000b8

0801e00c <fiprintf>:
 801e00c:	b40e      	push	{r1, r2, r3}
 801e00e:	b503      	push	{r0, r1, lr}
 801e010:	4601      	mov	r1, r0
 801e012:	ab03      	add	r3, sp, #12
 801e014:	4805      	ldr	r0, [pc, #20]	; (801e02c <fiprintf+0x20>)
 801e016:	f853 2b04 	ldr.w	r2, [r3], #4
 801e01a:	6800      	ldr	r0, [r0, #0]
 801e01c:	9301      	str	r3, [sp, #4]
 801e01e:	f000 fa4f 	bl	801e4c0 <_vfiprintf_r>
 801e022:	b002      	add	sp, #8
 801e024:	f85d eb04 	ldr.w	lr, [sp], #4
 801e028:	b003      	add	sp, #12
 801e02a:	4770      	bx	lr
 801e02c:	240000b8 	.word	0x240000b8

0801e030 <__libc_init_array>:
 801e030:	b570      	push	{r4, r5, r6, lr}
 801e032:	4d0d      	ldr	r5, [pc, #52]	; (801e068 <__libc_init_array+0x38>)
 801e034:	4c0d      	ldr	r4, [pc, #52]	; (801e06c <__libc_init_array+0x3c>)
 801e036:	1b64      	subs	r4, r4, r5
 801e038:	10a4      	asrs	r4, r4, #2
 801e03a:	2600      	movs	r6, #0
 801e03c:	42a6      	cmp	r6, r4
 801e03e:	d109      	bne.n	801e054 <__libc_init_array+0x24>
 801e040:	4d0b      	ldr	r5, [pc, #44]	; (801e070 <__libc_init_array+0x40>)
 801e042:	4c0c      	ldr	r4, [pc, #48]	; (801e074 <__libc_init_array+0x44>)
 801e044:	f002 f9a6 	bl	8020394 <_init>
 801e048:	1b64      	subs	r4, r4, r5
 801e04a:	10a4      	asrs	r4, r4, #2
 801e04c:	2600      	movs	r6, #0
 801e04e:	42a6      	cmp	r6, r4
 801e050:	d105      	bne.n	801e05e <__libc_init_array+0x2e>
 801e052:	bd70      	pop	{r4, r5, r6, pc}
 801e054:	f855 3b04 	ldr.w	r3, [r5], #4
 801e058:	4798      	blx	r3
 801e05a:	3601      	adds	r6, #1
 801e05c:	e7ee      	b.n	801e03c <__libc_init_array+0xc>
 801e05e:	f855 3b04 	ldr.w	r3, [r5], #4
 801e062:	4798      	blx	r3
 801e064:	3601      	adds	r6, #1
 801e066:	e7f2      	b.n	801e04e <__libc_init_array+0x1e>
 801e068:	08023798 	.word	0x08023798
 801e06c:	08023798 	.word	0x08023798
 801e070:	08023798 	.word	0x08023798
 801e074:	080237b0 	.word	0x080237b0

0801e078 <localtime_r>:
 801e078:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801e07c:	4680      	mov	r8, r0
 801e07e:	9101      	str	r1, [sp, #4]
 801e080:	f001 fa90 	bl	801f5a4 <__gettzinfo>
 801e084:	9901      	ldr	r1, [sp, #4]
 801e086:	4605      	mov	r5, r0
 801e088:	4640      	mov	r0, r8
 801e08a:	f001 fa8f 	bl	801f5ac <gmtime_r>
 801e08e:	6943      	ldr	r3, [r0, #20]
 801e090:	0799      	lsls	r1, r3, #30
 801e092:	4604      	mov	r4, r0
 801e094:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 801e098:	d105      	bne.n	801e0a6 <localtime_r+0x2e>
 801e09a:	2264      	movs	r2, #100	; 0x64
 801e09c:	fb97 f3f2 	sdiv	r3, r7, r2
 801e0a0:	fb02 7313 	mls	r3, r2, r3, r7
 801e0a4:	bb73      	cbnz	r3, 801e104 <localtime_r+0x8c>
 801e0a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e0aa:	fb97 f6f3 	sdiv	r6, r7, r3
 801e0ae:	fb03 7616 	mls	r6, r3, r6, r7
 801e0b2:	fab6 f386 	clz	r3, r6
 801e0b6:	095b      	lsrs	r3, r3, #5
 801e0b8:	4e67      	ldr	r6, [pc, #412]	; (801e258 <localtime_r+0x1e0>)
 801e0ba:	2230      	movs	r2, #48	; 0x30
 801e0bc:	fb02 6603 	mla	r6, r2, r3, r6
 801e0c0:	f000 fdc0 	bl	801ec44 <__tz_lock>
 801e0c4:	f000 fdca 	bl	801ec5c <_tzset_unlocked>
 801e0c8:	4b64      	ldr	r3, [pc, #400]	; (801e25c <localtime_r+0x1e4>)
 801e0ca:	681b      	ldr	r3, [r3, #0]
 801e0cc:	b34b      	cbz	r3, 801e122 <localtime_r+0xaa>
 801e0ce:	686b      	ldr	r3, [r5, #4]
 801e0d0:	42bb      	cmp	r3, r7
 801e0d2:	d119      	bne.n	801e108 <localtime_r+0x90>
 801e0d4:	682f      	ldr	r7, [r5, #0]
 801e0d6:	e9d8 2300 	ldrd	r2, r3, [r8]
 801e0da:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801e0de:	b9df      	cbnz	r7, 801e118 <localtime_r+0xa0>
 801e0e0:	4282      	cmp	r2, r0
 801e0e2:	eb73 0101 	sbcs.w	r1, r3, r1
 801e0e6:	da23      	bge.n	801e130 <localtime_r+0xb8>
 801e0e8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801e0ec:	4282      	cmp	r2, r0
 801e0ee:	eb73 0701 	sbcs.w	r7, r3, r1
 801e0f2:	bfb4      	ite	lt
 801e0f4:	2701      	movlt	r7, #1
 801e0f6:	2700      	movge	r7, #0
 801e0f8:	4282      	cmp	r2, r0
 801e0fa:	418b      	sbcs	r3, r1
 801e0fc:	6227      	str	r7, [r4, #32]
 801e0fe:	db19      	blt.n	801e134 <localtime_r+0xbc>
 801e100:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801e102:	e018      	b.n	801e136 <localtime_r+0xbe>
 801e104:	2301      	movs	r3, #1
 801e106:	e7d7      	b.n	801e0b8 <localtime_r+0x40>
 801e108:	4638      	mov	r0, r7
 801e10a:	f000 fcf1 	bl	801eaf0 <__tzcalc_limits>
 801e10e:	2800      	cmp	r0, #0
 801e110:	d1e0      	bne.n	801e0d4 <localtime_r+0x5c>
 801e112:	f04f 33ff 	mov.w	r3, #4294967295
 801e116:	e004      	b.n	801e122 <localtime_r+0xaa>
 801e118:	4282      	cmp	r2, r0
 801e11a:	eb73 0101 	sbcs.w	r1, r3, r1
 801e11e:	da02      	bge.n	801e126 <localtime_r+0xae>
 801e120:	2300      	movs	r3, #0
 801e122:	6223      	str	r3, [r4, #32]
 801e124:	e7ec      	b.n	801e100 <localtime_r+0x88>
 801e126:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801e12a:	4282      	cmp	r2, r0
 801e12c:	418b      	sbcs	r3, r1
 801e12e:	daf7      	bge.n	801e120 <localtime_r+0xa8>
 801e130:	2301      	movs	r3, #1
 801e132:	6223      	str	r3, [r4, #32]
 801e134:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e136:	6861      	ldr	r1, [r4, #4]
 801e138:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801e13c:	203c      	movs	r0, #60	; 0x3c
 801e13e:	fb93 f5f2 	sdiv	r5, r3, r2
 801e142:	fb02 3315 	mls	r3, r2, r5, r3
 801e146:	fb93 f2f0 	sdiv	r2, r3, r0
 801e14a:	fb00 3012 	mls	r0, r0, r2, r3
 801e14e:	6823      	ldr	r3, [r4, #0]
 801e150:	1a89      	subs	r1, r1, r2
 801e152:	68a2      	ldr	r2, [r4, #8]
 801e154:	6061      	str	r1, [r4, #4]
 801e156:	1a1b      	subs	r3, r3, r0
 801e158:	1b52      	subs	r2, r2, r5
 801e15a:	2b3b      	cmp	r3, #59	; 0x3b
 801e15c:	6023      	str	r3, [r4, #0]
 801e15e:	60a2      	str	r2, [r4, #8]
 801e160:	dd35      	ble.n	801e1ce <localtime_r+0x156>
 801e162:	3101      	adds	r1, #1
 801e164:	6061      	str	r1, [r4, #4]
 801e166:	3b3c      	subs	r3, #60	; 0x3c
 801e168:	6023      	str	r3, [r4, #0]
 801e16a:	6863      	ldr	r3, [r4, #4]
 801e16c:	2b3b      	cmp	r3, #59	; 0x3b
 801e16e:	dd34      	ble.n	801e1da <localtime_r+0x162>
 801e170:	3201      	adds	r2, #1
 801e172:	60a2      	str	r2, [r4, #8]
 801e174:	3b3c      	subs	r3, #60	; 0x3c
 801e176:	6063      	str	r3, [r4, #4]
 801e178:	68a3      	ldr	r3, [r4, #8]
 801e17a:	2b17      	cmp	r3, #23
 801e17c:	dd33      	ble.n	801e1e6 <localtime_r+0x16e>
 801e17e:	69e2      	ldr	r2, [r4, #28]
 801e180:	3201      	adds	r2, #1
 801e182:	61e2      	str	r2, [r4, #28]
 801e184:	69a2      	ldr	r2, [r4, #24]
 801e186:	3201      	adds	r2, #1
 801e188:	2a06      	cmp	r2, #6
 801e18a:	bfc8      	it	gt
 801e18c:	2200      	movgt	r2, #0
 801e18e:	61a2      	str	r2, [r4, #24]
 801e190:	68e2      	ldr	r2, [r4, #12]
 801e192:	3b18      	subs	r3, #24
 801e194:	3201      	adds	r2, #1
 801e196:	60a3      	str	r3, [r4, #8]
 801e198:	6923      	ldr	r3, [r4, #16]
 801e19a:	60e2      	str	r2, [r4, #12]
 801e19c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801e1a0:	428a      	cmp	r2, r1
 801e1a2:	dd0e      	ble.n	801e1c2 <localtime_r+0x14a>
 801e1a4:	2b0b      	cmp	r3, #11
 801e1a6:	eba2 0201 	sub.w	r2, r2, r1
 801e1aa:	60e2      	str	r2, [r4, #12]
 801e1ac:	f103 0201 	add.w	r2, r3, #1
 801e1b0:	bf09      	itett	eq
 801e1b2:	6963      	ldreq	r3, [r4, #20]
 801e1b4:	6122      	strne	r2, [r4, #16]
 801e1b6:	2200      	moveq	r2, #0
 801e1b8:	3301      	addeq	r3, #1
 801e1ba:	bf02      	ittt	eq
 801e1bc:	6122      	streq	r2, [r4, #16]
 801e1be:	6163      	streq	r3, [r4, #20]
 801e1c0:	61e2      	streq	r2, [r4, #28]
 801e1c2:	f000 fd45 	bl	801ec50 <__tz_unlock>
 801e1c6:	4620      	mov	r0, r4
 801e1c8:	b002      	add	sp, #8
 801e1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1ce:	2b00      	cmp	r3, #0
 801e1d0:	dacb      	bge.n	801e16a <localtime_r+0xf2>
 801e1d2:	3901      	subs	r1, #1
 801e1d4:	6061      	str	r1, [r4, #4]
 801e1d6:	333c      	adds	r3, #60	; 0x3c
 801e1d8:	e7c6      	b.n	801e168 <localtime_r+0xf0>
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	dacc      	bge.n	801e178 <localtime_r+0x100>
 801e1de:	3a01      	subs	r2, #1
 801e1e0:	60a2      	str	r2, [r4, #8]
 801e1e2:	333c      	adds	r3, #60	; 0x3c
 801e1e4:	e7c7      	b.n	801e176 <localtime_r+0xfe>
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	daeb      	bge.n	801e1c2 <localtime_r+0x14a>
 801e1ea:	69e2      	ldr	r2, [r4, #28]
 801e1ec:	3a01      	subs	r2, #1
 801e1ee:	61e2      	str	r2, [r4, #28]
 801e1f0:	69a2      	ldr	r2, [r4, #24]
 801e1f2:	3a01      	subs	r2, #1
 801e1f4:	bf48      	it	mi
 801e1f6:	2206      	movmi	r2, #6
 801e1f8:	61a2      	str	r2, [r4, #24]
 801e1fa:	68e2      	ldr	r2, [r4, #12]
 801e1fc:	3318      	adds	r3, #24
 801e1fe:	3a01      	subs	r2, #1
 801e200:	60e2      	str	r2, [r4, #12]
 801e202:	60a3      	str	r3, [r4, #8]
 801e204:	2a00      	cmp	r2, #0
 801e206:	d1dc      	bne.n	801e1c2 <localtime_r+0x14a>
 801e208:	6923      	ldr	r3, [r4, #16]
 801e20a:	3b01      	subs	r3, #1
 801e20c:	d405      	bmi.n	801e21a <localtime_r+0x1a2>
 801e20e:	6123      	str	r3, [r4, #16]
 801e210:	6923      	ldr	r3, [r4, #16]
 801e212:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e216:	60e3      	str	r3, [r4, #12]
 801e218:	e7d3      	b.n	801e1c2 <localtime_r+0x14a>
 801e21a:	230b      	movs	r3, #11
 801e21c:	6123      	str	r3, [r4, #16]
 801e21e:	6963      	ldr	r3, [r4, #20]
 801e220:	1e5a      	subs	r2, r3, #1
 801e222:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801e226:	6162      	str	r2, [r4, #20]
 801e228:	079a      	lsls	r2, r3, #30
 801e22a:	d105      	bne.n	801e238 <localtime_r+0x1c0>
 801e22c:	2164      	movs	r1, #100	; 0x64
 801e22e:	fb93 f2f1 	sdiv	r2, r3, r1
 801e232:	fb01 3212 	mls	r2, r1, r2, r3
 801e236:	b962      	cbnz	r2, 801e252 <localtime_r+0x1da>
 801e238:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801e23c:	fb93 f1f2 	sdiv	r1, r3, r2
 801e240:	fb02 3311 	mls	r3, r2, r1, r3
 801e244:	fab3 f383 	clz	r3, r3
 801e248:	095b      	lsrs	r3, r3, #5
 801e24a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801e24e:	61e3      	str	r3, [r4, #28]
 801e250:	e7de      	b.n	801e210 <localtime_r+0x198>
 801e252:	2301      	movs	r3, #1
 801e254:	e7f9      	b.n	801e24a <localtime_r+0x1d2>
 801e256:	bf00      	nop
 801e258:	080226ac 	.word	0x080226ac
 801e25c:	2400f6b4 	.word	0x2400f6b4

0801e260 <malloc>:
 801e260:	4b02      	ldr	r3, [pc, #8]	; (801e26c <malloc+0xc>)
 801e262:	4601      	mov	r1, r0
 801e264:	6818      	ldr	r0, [r3, #0]
 801e266:	f000 b88d 	b.w	801e384 <_malloc_r>
 801e26a:	bf00      	nop
 801e26c:	240000b8 	.word	0x240000b8

0801e270 <free>:
 801e270:	4b02      	ldr	r3, [pc, #8]	; (801e27c <free+0xc>)
 801e272:	4601      	mov	r1, r0
 801e274:	6818      	ldr	r0, [r3, #0]
 801e276:	f000 b819 	b.w	801e2ac <_free_r>
 801e27a:	bf00      	nop
 801e27c:	240000b8 	.word	0x240000b8

0801e280 <memcpy>:
 801e280:	440a      	add	r2, r1
 801e282:	4291      	cmp	r1, r2
 801e284:	f100 33ff 	add.w	r3, r0, #4294967295
 801e288:	d100      	bne.n	801e28c <memcpy+0xc>
 801e28a:	4770      	bx	lr
 801e28c:	b510      	push	{r4, lr}
 801e28e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e292:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e296:	4291      	cmp	r1, r2
 801e298:	d1f9      	bne.n	801e28e <memcpy+0xe>
 801e29a:	bd10      	pop	{r4, pc}

0801e29c <memset>:
 801e29c:	4402      	add	r2, r0
 801e29e:	4603      	mov	r3, r0
 801e2a0:	4293      	cmp	r3, r2
 801e2a2:	d100      	bne.n	801e2a6 <memset+0xa>
 801e2a4:	4770      	bx	lr
 801e2a6:	f803 1b01 	strb.w	r1, [r3], #1
 801e2aa:	e7f9      	b.n	801e2a0 <memset+0x4>

0801e2ac <_free_r>:
 801e2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e2ae:	2900      	cmp	r1, #0
 801e2b0:	d044      	beq.n	801e33c <_free_r+0x90>
 801e2b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e2b6:	9001      	str	r0, [sp, #4]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	f1a1 0404 	sub.w	r4, r1, #4
 801e2be:	bfb8      	it	lt
 801e2c0:	18e4      	addlt	r4, r4, r3
 801e2c2:	f001 fa89 	bl	801f7d8 <__malloc_lock>
 801e2c6:	4a1e      	ldr	r2, [pc, #120]	; (801e340 <_free_r+0x94>)
 801e2c8:	9801      	ldr	r0, [sp, #4]
 801e2ca:	6813      	ldr	r3, [r2, #0]
 801e2cc:	b933      	cbnz	r3, 801e2dc <_free_r+0x30>
 801e2ce:	6063      	str	r3, [r4, #4]
 801e2d0:	6014      	str	r4, [r2, #0]
 801e2d2:	b003      	add	sp, #12
 801e2d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e2d8:	f001 ba84 	b.w	801f7e4 <__malloc_unlock>
 801e2dc:	42a3      	cmp	r3, r4
 801e2de:	d908      	bls.n	801e2f2 <_free_r+0x46>
 801e2e0:	6825      	ldr	r5, [r4, #0]
 801e2e2:	1961      	adds	r1, r4, r5
 801e2e4:	428b      	cmp	r3, r1
 801e2e6:	bf01      	itttt	eq
 801e2e8:	6819      	ldreq	r1, [r3, #0]
 801e2ea:	685b      	ldreq	r3, [r3, #4]
 801e2ec:	1949      	addeq	r1, r1, r5
 801e2ee:	6021      	streq	r1, [r4, #0]
 801e2f0:	e7ed      	b.n	801e2ce <_free_r+0x22>
 801e2f2:	461a      	mov	r2, r3
 801e2f4:	685b      	ldr	r3, [r3, #4]
 801e2f6:	b10b      	cbz	r3, 801e2fc <_free_r+0x50>
 801e2f8:	42a3      	cmp	r3, r4
 801e2fa:	d9fa      	bls.n	801e2f2 <_free_r+0x46>
 801e2fc:	6811      	ldr	r1, [r2, #0]
 801e2fe:	1855      	adds	r5, r2, r1
 801e300:	42a5      	cmp	r5, r4
 801e302:	d10b      	bne.n	801e31c <_free_r+0x70>
 801e304:	6824      	ldr	r4, [r4, #0]
 801e306:	4421      	add	r1, r4
 801e308:	1854      	adds	r4, r2, r1
 801e30a:	42a3      	cmp	r3, r4
 801e30c:	6011      	str	r1, [r2, #0]
 801e30e:	d1e0      	bne.n	801e2d2 <_free_r+0x26>
 801e310:	681c      	ldr	r4, [r3, #0]
 801e312:	685b      	ldr	r3, [r3, #4]
 801e314:	6053      	str	r3, [r2, #4]
 801e316:	4421      	add	r1, r4
 801e318:	6011      	str	r1, [r2, #0]
 801e31a:	e7da      	b.n	801e2d2 <_free_r+0x26>
 801e31c:	d902      	bls.n	801e324 <_free_r+0x78>
 801e31e:	230c      	movs	r3, #12
 801e320:	6003      	str	r3, [r0, #0]
 801e322:	e7d6      	b.n	801e2d2 <_free_r+0x26>
 801e324:	6825      	ldr	r5, [r4, #0]
 801e326:	1961      	adds	r1, r4, r5
 801e328:	428b      	cmp	r3, r1
 801e32a:	bf04      	itt	eq
 801e32c:	6819      	ldreq	r1, [r3, #0]
 801e32e:	685b      	ldreq	r3, [r3, #4]
 801e330:	6063      	str	r3, [r4, #4]
 801e332:	bf04      	itt	eq
 801e334:	1949      	addeq	r1, r1, r5
 801e336:	6021      	streq	r1, [r4, #0]
 801e338:	6054      	str	r4, [r2, #4]
 801e33a:	e7ca      	b.n	801e2d2 <_free_r+0x26>
 801e33c:	b003      	add	sp, #12
 801e33e:	bd30      	pop	{r4, r5, pc}
 801e340:	2400f588 	.word	0x2400f588

0801e344 <sbrk_aligned>:
 801e344:	b570      	push	{r4, r5, r6, lr}
 801e346:	4e0e      	ldr	r6, [pc, #56]	; (801e380 <sbrk_aligned+0x3c>)
 801e348:	460c      	mov	r4, r1
 801e34a:	6831      	ldr	r1, [r6, #0]
 801e34c:	4605      	mov	r5, r0
 801e34e:	b911      	cbnz	r1, 801e356 <sbrk_aligned+0x12>
 801e350:	f000 fb7a 	bl	801ea48 <_sbrk_r>
 801e354:	6030      	str	r0, [r6, #0]
 801e356:	4621      	mov	r1, r4
 801e358:	4628      	mov	r0, r5
 801e35a:	f000 fb75 	bl	801ea48 <_sbrk_r>
 801e35e:	1c43      	adds	r3, r0, #1
 801e360:	d00a      	beq.n	801e378 <sbrk_aligned+0x34>
 801e362:	1cc4      	adds	r4, r0, #3
 801e364:	f024 0403 	bic.w	r4, r4, #3
 801e368:	42a0      	cmp	r0, r4
 801e36a:	d007      	beq.n	801e37c <sbrk_aligned+0x38>
 801e36c:	1a21      	subs	r1, r4, r0
 801e36e:	4628      	mov	r0, r5
 801e370:	f000 fb6a 	bl	801ea48 <_sbrk_r>
 801e374:	3001      	adds	r0, #1
 801e376:	d101      	bne.n	801e37c <sbrk_aligned+0x38>
 801e378:	f04f 34ff 	mov.w	r4, #4294967295
 801e37c:	4620      	mov	r0, r4
 801e37e:	bd70      	pop	{r4, r5, r6, pc}
 801e380:	2400f58c 	.word	0x2400f58c

0801e384 <_malloc_r>:
 801e384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e388:	1ccd      	adds	r5, r1, #3
 801e38a:	f025 0503 	bic.w	r5, r5, #3
 801e38e:	3508      	adds	r5, #8
 801e390:	2d0c      	cmp	r5, #12
 801e392:	bf38      	it	cc
 801e394:	250c      	movcc	r5, #12
 801e396:	2d00      	cmp	r5, #0
 801e398:	4607      	mov	r7, r0
 801e39a:	db01      	blt.n	801e3a0 <_malloc_r+0x1c>
 801e39c:	42a9      	cmp	r1, r5
 801e39e:	d905      	bls.n	801e3ac <_malloc_r+0x28>
 801e3a0:	230c      	movs	r3, #12
 801e3a2:	603b      	str	r3, [r7, #0]
 801e3a4:	2600      	movs	r6, #0
 801e3a6:	4630      	mov	r0, r6
 801e3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e3ac:	4e2e      	ldr	r6, [pc, #184]	; (801e468 <_malloc_r+0xe4>)
 801e3ae:	f001 fa13 	bl	801f7d8 <__malloc_lock>
 801e3b2:	6833      	ldr	r3, [r6, #0]
 801e3b4:	461c      	mov	r4, r3
 801e3b6:	bb34      	cbnz	r4, 801e406 <_malloc_r+0x82>
 801e3b8:	4629      	mov	r1, r5
 801e3ba:	4638      	mov	r0, r7
 801e3bc:	f7ff ffc2 	bl	801e344 <sbrk_aligned>
 801e3c0:	1c43      	adds	r3, r0, #1
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	d14d      	bne.n	801e462 <_malloc_r+0xde>
 801e3c6:	6834      	ldr	r4, [r6, #0]
 801e3c8:	4626      	mov	r6, r4
 801e3ca:	2e00      	cmp	r6, #0
 801e3cc:	d140      	bne.n	801e450 <_malloc_r+0xcc>
 801e3ce:	6823      	ldr	r3, [r4, #0]
 801e3d0:	4631      	mov	r1, r6
 801e3d2:	4638      	mov	r0, r7
 801e3d4:	eb04 0803 	add.w	r8, r4, r3
 801e3d8:	f000 fb36 	bl	801ea48 <_sbrk_r>
 801e3dc:	4580      	cmp	r8, r0
 801e3de:	d13a      	bne.n	801e456 <_malloc_r+0xd2>
 801e3e0:	6821      	ldr	r1, [r4, #0]
 801e3e2:	3503      	adds	r5, #3
 801e3e4:	1a6d      	subs	r5, r5, r1
 801e3e6:	f025 0503 	bic.w	r5, r5, #3
 801e3ea:	3508      	adds	r5, #8
 801e3ec:	2d0c      	cmp	r5, #12
 801e3ee:	bf38      	it	cc
 801e3f0:	250c      	movcc	r5, #12
 801e3f2:	4629      	mov	r1, r5
 801e3f4:	4638      	mov	r0, r7
 801e3f6:	f7ff ffa5 	bl	801e344 <sbrk_aligned>
 801e3fa:	3001      	adds	r0, #1
 801e3fc:	d02b      	beq.n	801e456 <_malloc_r+0xd2>
 801e3fe:	6823      	ldr	r3, [r4, #0]
 801e400:	442b      	add	r3, r5
 801e402:	6023      	str	r3, [r4, #0]
 801e404:	e00e      	b.n	801e424 <_malloc_r+0xa0>
 801e406:	6822      	ldr	r2, [r4, #0]
 801e408:	1b52      	subs	r2, r2, r5
 801e40a:	d41e      	bmi.n	801e44a <_malloc_r+0xc6>
 801e40c:	2a0b      	cmp	r2, #11
 801e40e:	d916      	bls.n	801e43e <_malloc_r+0xba>
 801e410:	1961      	adds	r1, r4, r5
 801e412:	42a3      	cmp	r3, r4
 801e414:	6025      	str	r5, [r4, #0]
 801e416:	bf18      	it	ne
 801e418:	6059      	strne	r1, [r3, #4]
 801e41a:	6863      	ldr	r3, [r4, #4]
 801e41c:	bf08      	it	eq
 801e41e:	6031      	streq	r1, [r6, #0]
 801e420:	5162      	str	r2, [r4, r5]
 801e422:	604b      	str	r3, [r1, #4]
 801e424:	4638      	mov	r0, r7
 801e426:	f104 060b 	add.w	r6, r4, #11
 801e42a:	f001 f9db 	bl	801f7e4 <__malloc_unlock>
 801e42e:	f026 0607 	bic.w	r6, r6, #7
 801e432:	1d23      	adds	r3, r4, #4
 801e434:	1af2      	subs	r2, r6, r3
 801e436:	d0b6      	beq.n	801e3a6 <_malloc_r+0x22>
 801e438:	1b9b      	subs	r3, r3, r6
 801e43a:	50a3      	str	r3, [r4, r2]
 801e43c:	e7b3      	b.n	801e3a6 <_malloc_r+0x22>
 801e43e:	6862      	ldr	r2, [r4, #4]
 801e440:	42a3      	cmp	r3, r4
 801e442:	bf0c      	ite	eq
 801e444:	6032      	streq	r2, [r6, #0]
 801e446:	605a      	strne	r2, [r3, #4]
 801e448:	e7ec      	b.n	801e424 <_malloc_r+0xa0>
 801e44a:	4623      	mov	r3, r4
 801e44c:	6864      	ldr	r4, [r4, #4]
 801e44e:	e7b2      	b.n	801e3b6 <_malloc_r+0x32>
 801e450:	4634      	mov	r4, r6
 801e452:	6876      	ldr	r6, [r6, #4]
 801e454:	e7b9      	b.n	801e3ca <_malloc_r+0x46>
 801e456:	230c      	movs	r3, #12
 801e458:	603b      	str	r3, [r7, #0]
 801e45a:	4638      	mov	r0, r7
 801e45c:	f001 f9c2 	bl	801f7e4 <__malloc_unlock>
 801e460:	e7a1      	b.n	801e3a6 <_malloc_r+0x22>
 801e462:	6025      	str	r5, [r4, #0]
 801e464:	e7de      	b.n	801e424 <_malloc_r+0xa0>
 801e466:	bf00      	nop
 801e468:	2400f588 	.word	0x2400f588

0801e46c <__sfputc_r>:
 801e46c:	6893      	ldr	r3, [r2, #8]
 801e46e:	3b01      	subs	r3, #1
 801e470:	2b00      	cmp	r3, #0
 801e472:	b410      	push	{r4}
 801e474:	6093      	str	r3, [r2, #8]
 801e476:	da08      	bge.n	801e48a <__sfputc_r+0x1e>
 801e478:	6994      	ldr	r4, [r2, #24]
 801e47a:	42a3      	cmp	r3, r4
 801e47c:	db01      	blt.n	801e482 <__sfputc_r+0x16>
 801e47e:	290a      	cmp	r1, #10
 801e480:	d103      	bne.n	801e48a <__sfputc_r+0x1e>
 801e482:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e486:	f000 bd6f 	b.w	801ef68 <__swbuf_r>
 801e48a:	6813      	ldr	r3, [r2, #0]
 801e48c:	1c58      	adds	r0, r3, #1
 801e48e:	6010      	str	r0, [r2, #0]
 801e490:	7019      	strb	r1, [r3, #0]
 801e492:	4608      	mov	r0, r1
 801e494:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e498:	4770      	bx	lr

0801e49a <__sfputs_r>:
 801e49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e49c:	4606      	mov	r6, r0
 801e49e:	460f      	mov	r7, r1
 801e4a0:	4614      	mov	r4, r2
 801e4a2:	18d5      	adds	r5, r2, r3
 801e4a4:	42ac      	cmp	r4, r5
 801e4a6:	d101      	bne.n	801e4ac <__sfputs_r+0x12>
 801e4a8:	2000      	movs	r0, #0
 801e4aa:	e007      	b.n	801e4bc <__sfputs_r+0x22>
 801e4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e4b0:	463a      	mov	r2, r7
 801e4b2:	4630      	mov	r0, r6
 801e4b4:	f7ff ffda 	bl	801e46c <__sfputc_r>
 801e4b8:	1c43      	adds	r3, r0, #1
 801e4ba:	d1f3      	bne.n	801e4a4 <__sfputs_r+0xa>
 801e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e4c0 <_vfiprintf_r>:
 801e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4c4:	460d      	mov	r5, r1
 801e4c6:	b09d      	sub	sp, #116	; 0x74
 801e4c8:	4614      	mov	r4, r2
 801e4ca:	4698      	mov	r8, r3
 801e4cc:	4606      	mov	r6, r0
 801e4ce:	b118      	cbz	r0, 801e4d8 <_vfiprintf_r+0x18>
 801e4d0:	6983      	ldr	r3, [r0, #24]
 801e4d2:	b90b      	cbnz	r3, 801e4d8 <_vfiprintf_r+0x18>
 801e4d4:	f000 ff84 	bl	801f3e0 <__sinit>
 801e4d8:	4b89      	ldr	r3, [pc, #548]	; (801e700 <_vfiprintf_r+0x240>)
 801e4da:	429d      	cmp	r5, r3
 801e4dc:	d11b      	bne.n	801e516 <_vfiprintf_r+0x56>
 801e4de:	6875      	ldr	r5, [r6, #4]
 801e4e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e4e2:	07d9      	lsls	r1, r3, #31
 801e4e4:	d405      	bmi.n	801e4f2 <_vfiprintf_r+0x32>
 801e4e6:	89ab      	ldrh	r3, [r5, #12]
 801e4e8:	059a      	lsls	r2, r3, #22
 801e4ea:	d402      	bmi.n	801e4f2 <_vfiprintf_r+0x32>
 801e4ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e4ee:	f001 f90b 	bl	801f708 <__retarget_lock_acquire_recursive>
 801e4f2:	89ab      	ldrh	r3, [r5, #12]
 801e4f4:	071b      	lsls	r3, r3, #28
 801e4f6:	d501      	bpl.n	801e4fc <_vfiprintf_r+0x3c>
 801e4f8:	692b      	ldr	r3, [r5, #16]
 801e4fa:	b9eb      	cbnz	r3, 801e538 <_vfiprintf_r+0x78>
 801e4fc:	4629      	mov	r1, r5
 801e4fe:	4630      	mov	r0, r6
 801e500:	f000 fd84 	bl	801f00c <__swsetup_r>
 801e504:	b1c0      	cbz	r0, 801e538 <_vfiprintf_r+0x78>
 801e506:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e508:	07dc      	lsls	r4, r3, #31
 801e50a:	d50e      	bpl.n	801e52a <_vfiprintf_r+0x6a>
 801e50c:	f04f 30ff 	mov.w	r0, #4294967295
 801e510:	b01d      	add	sp, #116	; 0x74
 801e512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e516:	4b7b      	ldr	r3, [pc, #492]	; (801e704 <_vfiprintf_r+0x244>)
 801e518:	429d      	cmp	r5, r3
 801e51a:	d101      	bne.n	801e520 <_vfiprintf_r+0x60>
 801e51c:	68b5      	ldr	r5, [r6, #8]
 801e51e:	e7df      	b.n	801e4e0 <_vfiprintf_r+0x20>
 801e520:	4b79      	ldr	r3, [pc, #484]	; (801e708 <_vfiprintf_r+0x248>)
 801e522:	429d      	cmp	r5, r3
 801e524:	bf08      	it	eq
 801e526:	68f5      	ldreq	r5, [r6, #12]
 801e528:	e7da      	b.n	801e4e0 <_vfiprintf_r+0x20>
 801e52a:	89ab      	ldrh	r3, [r5, #12]
 801e52c:	0598      	lsls	r0, r3, #22
 801e52e:	d4ed      	bmi.n	801e50c <_vfiprintf_r+0x4c>
 801e530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e532:	f001 f8eb 	bl	801f70c <__retarget_lock_release_recursive>
 801e536:	e7e9      	b.n	801e50c <_vfiprintf_r+0x4c>
 801e538:	2300      	movs	r3, #0
 801e53a:	9309      	str	r3, [sp, #36]	; 0x24
 801e53c:	2320      	movs	r3, #32
 801e53e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e542:	f8cd 800c 	str.w	r8, [sp, #12]
 801e546:	2330      	movs	r3, #48	; 0x30
 801e548:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e70c <_vfiprintf_r+0x24c>
 801e54c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e550:	f04f 0901 	mov.w	r9, #1
 801e554:	4623      	mov	r3, r4
 801e556:	469a      	mov	sl, r3
 801e558:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e55c:	b10a      	cbz	r2, 801e562 <_vfiprintf_r+0xa2>
 801e55e:	2a25      	cmp	r2, #37	; 0x25
 801e560:	d1f9      	bne.n	801e556 <_vfiprintf_r+0x96>
 801e562:	ebba 0b04 	subs.w	fp, sl, r4
 801e566:	d00b      	beq.n	801e580 <_vfiprintf_r+0xc0>
 801e568:	465b      	mov	r3, fp
 801e56a:	4622      	mov	r2, r4
 801e56c:	4629      	mov	r1, r5
 801e56e:	4630      	mov	r0, r6
 801e570:	f7ff ff93 	bl	801e49a <__sfputs_r>
 801e574:	3001      	adds	r0, #1
 801e576:	f000 80aa 	beq.w	801e6ce <_vfiprintf_r+0x20e>
 801e57a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e57c:	445a      	add	r2, fp
 801e57e:	9209      	str	r2, [sp, #36]	; 0x24
 801e580:	f89a 3000 	ldrb.w	r3, [sl]
 801e584:	2b00      	cmp	r3, #0
 801e586:	f000 80a2 	beq.w	801e6ce <_vfiprintf_r+0x20e>
 801e58a:	2300      	movs	r3, #0
 801e58c:	f04f 32ff 	mov.w	r2, #4294967295
 801e590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e594:	f10a 0a01 	add.w	sl, sl, #1
 801e598:	9304      	str	r3, [sp, #16]
 801e59a:	9307      	str	r3, [sp, #28]
 801e59c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e5a0:	931a      	str	r3, [sp, #104]	; 0x68
 801e5a2:	4654      	mov	r4, sl
 801e5a4:	2205      	movs	r2, #5
 801e5a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e5aa:	4858      	ldr	r0, [pc, #352]	; (801e70c <_vfiprintf_r+0x24c>)
 801e5ac:	f7e1 fe98 	bl	80002e0 <memchr>
 801e5b0:	9a04      	ldr	r2, [sp, #16]
 801e5b2:	b9d8      	cbnz	r0, 801e5ec <_vfiprintf_r+0x12c>
 801e5b4:	06d1      	lsls	r1, r2, #27
 801e5b6:	bf44      	itt	mi
 801e5b8:	2320      	movmi	r3, #32
 801e5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5be:	0713      	lsls	r3, r2, #28
 801e5c0:	bf44      	itt	mi
 801e5c2:	232b      	movmi	r3, #43	; 0x2b
 801e5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e5c8:	f89a 3000 	ldrb.w	r3, [sl]
 801e5cc:	2b2a      	cmp	r3, #42	; 0x2a
 801e5ce:	d015      	beq.n	801e5fc <_vfiprintf_r+0x13c>
 801e5d0:	9a07      	ldr	r2, [sp, #28]
 801e5d2:	4654      	mov	r4, sl
 801e5d4:	2000      	movs	r0, #0
 801e5d6:	f04f 0c0a 	mov.w	ip, #10
 801e5da:	4621      	mov	r1, r4
 801e5dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e5e0:	3b30      	subs	r3, #48	; 0x30
 801e5e2:	2b09      	cmp	r3, #9
 801e5e4:	d94e      	bls.n	801e684 <_vfiprintf_r+0x1c4>
 801e5e6:	b1b0      	cbz	r0, 801e616 <_vfiprintf_r+0x156>
 801e5e8:	9207      	str	r2, [sp, #28]
 801e5ea:	e014      	b.n	801e616 <_vfiprintf_r+0x156>
 801e5ec:	eba0 0308 	sub.w	r3, r0, r8
 801e5f0:	fa09 f303 	lsl.w	r3, r9, r3
 801e5f4:	4313      	orrs	r3, r2
 801e5f6:	9304      	str	r3, [sp, #16]
 801e5f8:	46a2      	mov	sl, r4
 801e5fa:	e7d2      	b.n	801e5a2 <_vfiprintf_r+0xe2>
 801e5fc:	9b03      	ldr	r3, [sp, #12]
 801e5fe:	1d19      	adds	r1, r3, #4
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	9103      	str	r1, [sp, #12]
 801e604:	2b00      	cmp	r3, #0
 801e606:	bfbb      	ittet	lt
 801e608:	425b      	neglt	r3, r3
 801e60a:	f042 0202 	orrlt.w	r2, r2, #2
 801e60e:	9307      	strge	r3, [sp, #28]
 801e610:	9307      	strlt	r3, [sp, #28]
 801e612:	bfb8      	it	lt
 801e614:	9204      	strlt	r2, [sp, #16]
 801e616:	7823      	ldrb	r3, [r4, #0]
 801e618:	2b2e      	cmp	r3, #46	; 0x2e
 801e61a:	d10c      	bne.n	801e636 <_vfiprintf_r+0x176>
 801e61c:	7863      	ldrb	r3, [r4, #1]
 801e61e:	2b2a      	cmp	r3, #42	; 0x2a
 801e620:	d135      	bne.n	801e68e <_vfiprintf_r+0x1ce>
 801e622:	9b03      	ldr	r3, [sp, #12]
 801e624:	1d1a      	adds	r2, r3, #4
 801e626:	681b      	ldr	r3, [r3, #0]
 801e628:	9203      	str	r2, [sp, #12]
 801e62a:	2b00      	cmp	r3, #0
 801e62c:	bfb8      	it	lt
 801e62e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e632:	3402      	adds	r4, #2
 801e634:	9305      	str	r3, [sp, #20]
 801e636:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e71c <_vfiprintf_r+0x25c>
 801e63a:	7821      	ldrb	r1, [r4, #0]
 801e63c:	2203      	movs	r2, #3
 801e63e:	4650      	mov	r0, sl
 801e640:	f7e1 fe4e 	bl	80002e0 <memchr>
 801e644:	b140      	cbz	r0, 801e658 <_vfiprintf_r+0x198>
 801e646:	2340      	movs	r3, #64	; 0x40
 801e648:	eba0 000a 	sub.w	r0, r0, sl
 801e64c:	fa03 f000 	lsl.w	r0, r3, r0
 801e650:	9b04      	ldr	r3, [sp, #16]
 801e652:	4303      	orrs	r3, r0
 801e654:	3401      	adds	r4, #1
 801e656:	9304      	str	r3, [sp, #16]
 801e658:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e65c:	482c      	ldr	r0, [pc, #176]	; (801e710 <_vfiprintf_r+0x250>)
 801e65e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e662:	2206      	movs	r2, #6
 801e664:	f7e1 fe3c 	bl	80002e0 <memchr>
 801e668:	2800      	cmp	r0, #0
 801e66a:	d03f      	beq.n	801e6ec <_vfiprintf_r+0x22c>
 801e66c:	4b29      	ldr	r3, [pc, #164]	; (801e714 <_vfiprintf_r+0x254>)
 801e66e:	bb1b      	cbnz	r3, 801e6b8 <_vfiprintf_r+0x1f8>
 801e670:	9b03      	ldr	r3, [sp, #12]
 801e672:	3307      	adds	r3, #7
 801e674:	f023 0307 	bic.w	r3, r3, #7
 801e678:	3308      	adds	r3, #8
 801e67a:	9303      	str	r3, [sp, #12]
 801e67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e67e:	443b      	add	r3, r7
 801e680:	9309      	str	r3, [sp, #36]	; 0x24
 801e682:	e767      	b.n	801e554 <_vfiprintf_r+0x94>
 801e684:	fb0c 3202 	mla	r2, ip, r2, r3
 801e688:	460c      	mov	r4, r1
 801e68a:	2001      	movs	r0, #1
 801e68c:	e7a5      	b.n	801e5da <_vfiprintf_r+0x11a>
 801e68e:	2300      	movs	r3, #0
 801e690:	3401      	adds	r4, #1
 801e692:	9305      	str	r3, [sp, #20]
 801e694:	4619      	mov	r1, r3
 801e696:	f04f 0c0a 	mov.w	ip, #10
 801e69a:	4620      	mov	r0, r4
 801e69c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e6a0:	3a30      	subs	r2, #48	; 0x30
 801e6a2:	2a09      	cmp	r2, #9
 801e6a4:	d903      	bls.n	801e6ae <_vfiprintf_r+0x1ee>
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d0c5      	beq.n	801e636 <_vfiprintf_r+0x176>
 801e6aa:	9105      	str	r1, [sp, #20]
 801e6ac:	e7c3      	b.n	801e636 <_vfiprintf_r+0x176>
 801e6ae:	fb0c 2101 	mla	r1, ip, r1, r2
 801e6b2:	4604      	mov	r4, r0
 801e6b4:	2301      	movs	r3, #1
 801e6b6:	e7f0      	b.n	801e69a <_vfiprintf_r+0x1da>
 801e6b8:	ab03      	add	r3, sp, #12
 801e6ba:	9300      	str	r3, [sp, #0]
 801e6bc:	462a      	mov	r2, r5
 801e6be:	4b16      	ldr	r3, [pc, #88]	; (801e718 <_vfiprintf_r+0x258>)
 801e6c0:	a904      	add	r1, sp, #16
 801e6c2:	4630      	mov	r0, r6
 801e6c4:	f3af 8000 	nop.w
 801e6c8:	4607      	mov	r7, r0
 801e6ca:	1c78      	adds	r0, r7, #1
 801e6cc:	d1d6      	bne.n	801e67c <_vfiprintf_r+0x1bc>
 801e6ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e6d0:	07d9      	lsls	r1, r3, #31
 801e6d2:	d405      	bmi.n	801e6e0 <_vfiprintf_r+0x220>
 801e6d4:	89ab      	ldrh	r3, [r5, #12]
 801e6d6:	059a      	lsls	r2, r3, #22
 801e6d8:	d402      	bmi.n	801e6e0 <_vfiprintf_r+0x220>
 801e6da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e6dc:	f001 f816 	bl	801f70c <__retarget_lock_release_recursive>
 801e6e0:	89ab      	ldrh	r3, [r5, #12]
 801e6e2:	065b      	lsls	r3, r3, #25
 801e6e4:	f53f af12 	bmi.w	801e50c <_vfiprintf_r+0x4c>
 801e6e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e6ea:	e711      	b.n	801e510 <_vfiprintf_r+0x50>
 801e6ec:	ab03      	add	r3, sp, #12
 801e6ee:	9300      	str	r3, [sp, #0]
 801e6f0:	462a      	mov	r2, r5
 801e6f2:	4b09      	ldr	r3, [pc, #36]	; (801e718 <_vfiprintf_r+0x258>)
 801e6f4:	a904      	add	r1, sp, #16
 801e6f6:	4630      	mov	r0, r6
 801e6f8:	f000 f880 	bl	801e7fc <_printf_i>
 801e6fc:	e7e4      	b.n	801e6c8 <_vfiprintf_r+0x208>
 801e6fe:	bf00      	nop
 801e700:	080227a0 	.word	0x080227a0
 801e704:	080227c0 	.word	0x080227c0
 801e708:	08022780 	.word	0x08022780
 801e70c:	0802270c 	.word	0x0802270c
 801e710:	08022716 	.word	0x08022716
 801e714:	00000000 	.word	0x00000000
 801e718:	0801e49b 	.word	0x0801e49b
 801e71c:	08022712 	.word	0x08022712

0801e720 <_printf_common>:
 801e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e724:	4616      	mov	r6, r2
 801e726:	4699      	mov	r9, r3
 801e728:	688a      	ldr	r2, [r1, #8]
 801e72a:	690b      	ldr	r3, [r1, #16]
 801e72c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e730:	4293      	cmp	r3, r2
 801e732:	bfb8      	it	lt
 801e734:	4613      	movlt	r3, r2
 801e736:	6033      	str	r3, [r6, #0]
 801e738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e73c:	4607      	mov	r7, r0
 801e73e:	460c      	mov	r4, r1
 801e740:	b10a      	cbz	r2, 801e746 <_printf_common+0x26>
 801e742:	3301      	adds	r3, #1
 801e744:	6033      	str	r3, [r6, #0]
 801e746:	6823      	ldr	r3, [r4, #0]
 801e748:	0699      	lsls	r1, r3, #26
 801e74a:	bf42      	ittt	mi
 801e74c:	6833      	ldrmi	r3, [r6, #0]
 801e74e:	3302      	addmi	r3, #2
 801e750:	6033      	strmi	r3, [r6, #0]
 801e752:	6825      	ldr	r5, [r4, #0]
 801e754:	f015 0506 	ands.w	r5, r5, #6
 801e758:	d106      	bne.n	801e768 <_printf_common+0x48>
 801e75a:	f104 0a19 	add.w	sl, r4, #25
 801e75e:	68e3      	ldr	r3, [r4, #12]
 801e760:	6832      	ldr	r2, [r6, #0]
 801e762:	1a9b      	subs	r3, r3, r2
 801e764:	42ab      	cmp	r3, r5
 801e766:	dc26      	bgt.n	801e7b6 <_printf_common+0x96>
 801e768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e76c:	1e13      	subs	r3, r2, #0
 801e76e:	6822      	ldr	r2, [r4, #0]
 801e770:	bf18      	it	ne
 801e772:	2301      	movne	r3, #1
 801e774:	0692      	lsls	r2, r2, #26
 801e776:	d42b      	bmi.n	801e7d0 <_printf_common+0xb0>
 801e778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e77c:	4649      	mov	r1, r9
 801e77e:	4638      	mov	r0, r7
 801e780:	47c0      	blx	r8
 801e782:	3001      	adds	r0, #1
 801e784:	d01e      	beq.n	801e7c4 <_printf_common+0xa4>
 801e786:	6823      	ldr	r3, [r4, #0]
 801e788:	68e5      	ldr	r5, [r4, #12]
 801e78a:	6832      	ldr	r2, [r6, #0]
 801e78c:	f003 0306 	and.w	r3, r3, #6
 801e790:	2b04      	cmp	r3, #4
 801e792:	bf08      	it	eq
 801e794:	1aad      	subeq	r5, r5, r2
 801e796:	68a3      	ldr	r3, [r4, #8]
 801e798:	6922      	ldr	r2, [r4, #16]
 801e79a:	bf0c      	ite	eq
 801e79c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e7a0:	2500      	movne	r5, #0
 801e7a2:	4293      	cmp	r3, r2
 801e7a4:	bfc4      	itt	gt
 801e7a6:	1a9b      	subgt	r3, r3, r2
 801e7a8:	18ed      	addgt	r5, r5, r3
 801e7aa:	2600      	movs	r6, #0
 801e7ac:	341a      	adds	r4, #26
 801e7ae:	42b5      	cmp	r5, r6
 801e7b0:	d11a      	bne.n	801e7e8 <_printf_common+0xc8>
 801e7b2:	2000      	movs	r0, #0
 801e7b4:	e008      	b.n	801e7c8 <_printf_common+0xa8>
 801e7b6:	2301      	movs	r3, #1
 801e7b8:	4652      	mov	r2, sl
 801e7ba:	4649      	mov	r1, r9
 801e7bc:	4638      	mov	r0, r7
 801e7be:	47c0      	blx	r8
 801e7c0:	3001      	adds	r0, #1
 801e7c2:	d103      	bne.n	801e7cc <_printf_common+0xac>
 801e7c4:	f04f 30ff 	mov.w	r0, #4294967295
 801e7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e7cc:	3501      	adds	r5, #1
 801e7ce:	e7c6      	b.n	801e75e <_printf_common+0x3e>
 801e7d0:	18e1      	adds	r1, r4, r3
 801e7d2:	1c5a      	adds	r2, r3, #1
 801e7d4:	2030      	movs	r0, #48	; 0x30
 801e7d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e7da:	4422      	add	r2, r4
 801e7dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e7e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e7e4:	3302      	adds	r3, #2
 801e7e6:	e7c7      	b.n	801e778 <_printf_common+0x58>
 801e7e8:	2301      	movs	r3, #1
 801e7ea:	4622      	mov	r2, r4
 801e7ec:	4649      	mov	r1, r9
 801e7ee:	4638      	mov	r0, r7
 801e7f0:	47c0      	blx	r8
 801e7f2:	3001      	adds	r0, #1
 801e7f4:	d0e6      	beq.n	801e7c4 <_printf_common+0xa4>
 801e7f6:	3601      	adds	r6, #1
 801e7f8:	e7d9      	b.n	801e7ae <_printf_common+0x8e>
	...

0801e7fc <_printf_i>:
 801e7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e800:	7e0f      	ldrb	r7, [r1, #24]
 801e802:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e804:	2f78      	cmp	r7, #120	; 0x78
 801e806:	4691      	mov	r9, r2
 801e808:	4680      	mov	r8, r0
 801e80a:	460c      	mov	r4, r1
 801e80c:	469a      	mov	sl, r3
 801e80e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e812:	d807      	bhi.n	801e824 <_printf_i+0x28>
 801e814:	2f62      	cmp	r7, #98	; 0x62
 801e816:	d80a      	bhi.n	801e82e <_printf_i+0x32>
 801e818:	2f00      	cmp	r7, #0
 801e81a:	f000 80d8 	beq.w	801e9ce <_printf_i+0x1d2>
 801e81e:	2f58      	cmp	r7, #88	; 0x58
 801e820:	f000 80a3 	beq.w	801e96a <_printf_i+0x16e>
 801e824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e82c:	e03a      	b.n	801e8a4 <_printf_i+0xa8>
 801e82e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e832:	2b15      	cmp	r3, #21
 801e834:	d8f6      	bhi.n	801e824 <_printf_i+0x28>
 801e836:	a101      	add	r1, pc, #4	; (adr r1, 801e83c <_printf_i+0x40>)
 801e838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e83c:	0801e895 	.word	0x0801e895
 801e840:	0801e8a9 	.word	0x0801e8a9
 801e844:	0801e825 	.word	0x0801e825
 801e848:	0801e825 	.word	0x0801e825
 801e84c:	0801e825 	.word	0x0801e825
 801e850:	0801e825 	.word	0x0801e825
 801e854:	0801e8a9 	.word	0x0801e8a9
 801e858:	0801e825 	.word	0x0801e825
 801e85c:	0801e825 	.word	0x0801e825
 801e860:	0801e825 	.word	0x0801e825
 801e864:	0801e825 	.word	0x0801e825
 801e868:	0801e9b5 	.word	0x0801e9b5
 801e86c:	0801e8d9 	.word	0x0801e8d9
 801e870:	0801e997 	.word	0x0801e997
 801e874:	0801e825 	.word	0x0801e825
 801e878:	0801e825 	.word	0x0801e825
 801e87c:	0801e9d7 	.word	0x0801e9d7
 801e880:	0801e825 	.word	0x0801e825
 801e884:	0801e8d9 	.word	0x0801e8d9
 801e888:	0801e825 	.word	0x0801e825
 801e88c:	0801e825 	.word	0x0801e825
 801e890:	0801e99f 	.word	0x0801e99f
 801e894:	682b      	ldr	r3, [r5, #0]
 801e896:	1d1a      	adds	r2, r3, #4
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	602a      	str	r2, [r5, #0]
 801e89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e8a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e8a4:	2301      	movs	r3, #1
 801e8a6:	e0a3      	b.n	801e9f0 <_printf_i+0x1f4>
 801e8a8:	6820      	ldr	r0, [r4, #0]
 801e8aa:	6829      	ldr	r1, [r5, #0]
 801e8ac:	0606      	lsls	r6, r0, #24
 801e8ae:	f101 0304 	add.w	r3, r1, #4
 801e8b2:	d50a      	bpl.n	801e8ca <_printf_i+0xce>
 801e8b4:	680e      	ldr	r6, [r1, #0]
 801e8b6:	602b      	str	r3, [r5, #0]
 801e8b8:	2e00      	cmp	r6, #0
 801e8ba:	da03      	bge.n	801e8c4 <_printf_i+0xc8>
 801e8bc:	232d      	movs	r3, #45	; 0x2d
 801e8be:	4276      	negs	r6, r6
 801e8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e8c4:	485e      	ldr	r0, [pc, #376]	; (801ea40 <_printf_i+0x244>)
 801e8c6:	230a      	movs	r3, #10
 801e8c8:	e019      	b.n	801e8fe <_printf_i+0x102>
 801e8ca:	680e      	ldr	r6, [r1, #0]
 801e8cc:	602b      	str	r3, [r5, #0]
 801e8ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e8d2:	bf18      	it	ne
 801e8d4:	b236      	sxthne	r6, r6
 801e8d6:	e7ef      	b.n	801e8b8 <_printf_i+0xbc>
 801e8d8:	682b      	ldr	r3, [r5, #0]
 801e8da:	6820      	ldr	r0, [r4, #0]
 801e8dc:	1d19      	adds	r1, r3, #4
 801e8de:	6029      	str	r1, [r5, #0]
 801e8e0:	0601      	lsls	r1, r0, #24
 801e8e2:	d501      	bpl.n	801e8e8 <_printf_i+0xec>
 801e8e4:	681e      	ldr	r6, [r3, #0]
 801e8e6:	e002      	b.n	801e8ee <_printf_i+0xf2>
 801e8e8:	0646      	lsls	r6, r0, #25
 801e8ea:	d5fb      	bpl.n	801e8e4 <_printf_i+0xe8>
 801e8ec:	881e      	ldrh	r6, [r3, #0]
 801e8ee:	4854      	ldr	r0, [pc, #336]	; (801ea40 <_printf_i+0x244>)
 801e8f0:	2f6f      	cmp	r7, #111	; 0x6f
 801e8f2:	bf0c      	ite	eq
 801e8f4:	2308      	moveq	r3, #8
 801e8f6:	230a      	movne	r3, #10
 801e8f8:	2100      	movs	r1, #0
 801e8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e8fe:	6865      	ldr	r5, [r4, #4]
 801e900:	60a5      	str	r5, [r4, #8]
 801e902:	2d00      	cmp	r5, #0
 801e904:	bfa2      	ittt	ge
 801e906:	6821      	ldrge	r1, [r4, #0]
 801e908:	f021 0104 	bicge.w	r1, r1, #4
 801e90c:	6021      	strge	r1, [r4, #0]
 801e90e:	b90e      	cbnz	r6, 801e914 <_printf_i+0x118>
 801e910:	2d00      	cmp	r5, #0
 801e912:	d04d      	beq.n	801e9b0 <_printf_i+0x1b4>
 801e914:	4615      	mov	r5, r2
 801e916:	fbb6 f1f3 	udiv	r1, r6, r3
 801e91a:	fb03 6711 	mls	r7, r3, r1, r6
 801e91e:	5dc7      	ldrb	r7, [r0, r7]
 801e920:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e924:	4637      	mov	r7, r6
 801e926:	42bb      	cmp	r3, r7
 801e928:	460e      	mov	r6, r1
 801e92a:	d9f4      	bls.n	801e916 <_printf_i+0x11a>
 801e92c:	2b08      	cmp	r3, #8
 801e92e:	d10b      	bne.n	801e948 <_printf_i+0x14c>
 801e930:	6823      	ldr	r3, [r4, #0]
 801e932:	07de      	lsls	r6, r3, #31
 801e934:	d508      	bpl.n	801e948 <_printf_i+0x14c>
 801e936:	6923      	ldr	r3, [r4, #16]
 801e938:	6861      	ldr	r1, [r4, #4]
 801e93a:	4299      	cmp	r1, r3
 801e93c:	bfde      	ittt	le
 801e93e:	2330      	movle	r3, #48	; 0x30
 801e940:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e944:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e948:	1b52      	subs	r2, r2, r5
 801e94a:	6122      	str	r2, [r4, #16]
 801e94c:	f8cd a000 	str.w	sl, [sp]
 801e950:	464b      	mov	r3, r9
 801e952:	aa03      	add	r2, sp, #12
 801e954:	4621      	mov	r1, r4
 801e956:	4640      	mov	r0, r8
 801e958:	f7ff fee2 	bl	801e720 <_printf_common>
 801e95c:	3001      	adds	r0, #1
 801e95e:	d14c      	bne.n	801e9fa <_printf_i+0x1fe>
 801e960:	f04f 30ff 	mov.w	r0, #4294967295
 801e964:	b004      	add	sp, #16
 801e966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e96a:	4835      	ldr	r0, [pc, #212]	; (801ea40 <_printf_i+0x244>)
 801e96c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e970:	6829      	ldr	r1, [r5, #0]
 801e972:	6823      	ldr	r3, [r4, #0]
 801e974:	f851 6b04 	ldr.w	r6, [r1], #4
 801e978:	6029      	str	r1, [r5, #0]
 801e97a:	061d      	lsls	r5, r3, #24
 801e97c:	d514      	bpl.n	801e9a8 <_printf_i+0x1ac>
 801e97e:	07df      	lsls	r7, r3, #31
 801e980:	bf44      	itt	mi
 801e982:	f043 0320 	orrmi.w	r3, r3, #32
 801e986:	6023      	strmi	r3, [r4, #0]
 801e988:	b91e      	cbnz	r6, 801e992 <_printf_i+0x196>
 801e98a:	6823      	ldr	r3, [r4, #0]
 801e98c:	f023 0320 	bic.w	r3, r3, #32
 801e990:	6023      	str	r3, [r4, #0]
 801e992:	2310      	movs	r3, #16
 801e994:	e7b0      	b.n	801e8f8 <_printf_i+0xfc>
 801e996:	6823      	ldr	r3, [r4, #0]
 801e998:	f043 0320 	orr.w	r3, r3, #32
 801e99c:	6023      	str	r3, [r4, #0]
 801e99e:	2378      	movs	r3, #120	; 0x78
 801e9a0:	4828      	ldr	r0, [pc, #160]	; (801ea44 <_printf_i+0x248>)
 801e9a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e9a6:	e7e3      	b.n	801e970 <_printf_i+0x174>
 801e9a8:	0659      	lsls	r1, r3, #25
 801e9aa:	bf48      	it	mi
 801e9ac:	b2b6      	uxthmi	r6, r6
 801e9ae:	e7e6      	b.n	801e97e <_printf_i+0x182>
 801e9b0:	4615      	mov	r5, r2
 801e9b2:	e7bb      	b.n	801e92c <_printf_i+0x130>
 801e9b4:	682b      	ldr	r3, [r5, #0]
 801e9b6:	6826      	ldr	r6, [r4, #0]
 801e9b8:	6961      	ldr	r1, [r4, #20]
 801e9ba:	1d18      	adds	r0, r3, #4
 801e9bc:	6028      	str	r0, [r5, #0]
 801e9be:	0635      	lsls	r5, r6, #24
 801e9c0:	681b      	ldr	r3, [r3, #0]
 801e9c2:	d501      	bpl.n	801e9c8 <_printf_i+0x1cc>
 801e9c4:	6019      	str	r1, [r3, #0]
 801e9c6:	e002      	b.n	801e9ce <_printf_i+0x1d2>
 801e9c8:	0670      	lsls	r0, r6, #25
 801e9ca:	d5fb      	bpl.n	801e9c4 <_printf_i+0x1c8>
 801e9cc:	8019      	strh	r1, [r3, #0]
 801e9ce:	2300      	movs	r3, #0
 801e9d0:	6123      	str	r3, [r4, #16]
 801e9d2:	4615      	mov	r5, r2
 801e9d4:	e7ba      	b.n	801e94c <_printf_i+0x150>
 801e9d6:	682b      	ldr	r3, [r5, #0]
 801e9d8:	1d1a      	adds	r2, r3, #4
 801e9da:	602a      	str	r2, [r5, #0]
 801e9dc:	681d      	ldr	r5, [r3, #0]
 801e9de:	6862      	ldr	r2, [r4, #4]
 801e9e0:	2100      	movs	r1, #0
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	f7e1 fc7c 	bl	80002e0 <memchr>
 801e9e8:	b108      	cbz	r0, 801e9ee <_printf_i+0x1f2>
 801e9ea:	1b40      	subs	r0, r0, r5
 801e9ec:	6060      	str	r0, [r4, #4]
 801e9ee:	6863      	ldr	r3, [r4, #4]
 801e9f0:	6123      	str	r3, [r4, #16]
 801e9f2:	2300      	movs	r3, #0
 801e9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e9f8:	e7a8      	b.n	801e94c <_printf_i+0x150>
 801e9fa:	6923      	ldr	r3, [r4, #16]
 801e9fc:	462a      	mov	r2, r5
 801e9fe:	4649      	mov	r1, r9
 801ea00:	4640      	mov	r0, r8
 801ea02:	47d0      	blx	sl
 801ea04:	3001      	adds	r0, #1
 801ea06:	d0ab      	beq.n	801e960 <_printf_i+0x164>
 801ea08:	6823      	ldr	r3, [r4, #0]
 801ea0a:	079b      	lsls	r3, r3, #30
 801ea0c:	d413      	bmi.n	801ea36 <_printf_i+0x23a>
 801ea0e:	68e0      	ldr	r0, [r4, #12]
 801ea10:	9b03      	ldr	r3, [sp, #12]
 801ea12:	4298      	cmp	r0, r3
 801ea14:	bfb8      	it	lt
 801ea16:	4618      	movlt	r0, r3
 801ea18:	e7a4      	b.n	801e964 <_printf_i+0x168>
 801ea1a:	2301      	movs	r3, #1
 801ea1c:	4632      	mov	r2, r6
 801ea1e:	4649      	mov	r1, r9
 801ea20:	4640      	mov	r0, r8
 801ea22:	47d0      	blx	sl
 801ea24:	3001      	adds	r0, #1
 801ea26:	d09b      	beq.n	801e960 <_printf_i+0x164>
 801ea28:	3501      	adds	r5, #1
 801ea2a:	68e3      	ldr	r3, [r4, #12]
 801ea2c:	9903      	ldr	r1, [sp, #12]
 801ea2e:	1a5b      	subs	r3, r3, r1
 801ea30:	42ab      	cmp	r3, r5
 801ea32:	dcf2      	bgt.n	801ea1a <_printf_i+0x21e>
 801ea34:	e7eb      	b.n	801ea0e <_printf_i+0x212>
 801ea36:	2500      	movs	r5, #0
 801ea38:	f104 0619 	add.w	r6, r4, #25
 801ea3c:	e7f5      	b.n	801ea2a <_printf_i+0x22e>
 801ea3e:	bf00      	nop
 801ea40:	0802271d 	.word	0x0802271d
 801ea44:	0802272e 	.word	0x0802272e

0801ea48 <_sbrk_r>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	4d06      	ldr	r5, [pc, #24]	; (801ea64 <_sbrk_r+0x1c>)
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	4604      	mov	r4, r0
 801ea50:	4608      	mov	r0, r1
 801ea52:	602b      	str	r3, [r5, #0]
 801ea54:	f7e2 fd7e 	bl	8001554 <_sbrk>
 801ea58:	1c43      	adds	r3, r0, #1
 801ea5a:	d102      	bne.n	801ea62 <_sbrk_r+0x1a>
 801ea5c:	682b      	ldr	r3, [r5, #0]
 801ea5e:	b103      	cbz	r3, 801ea62 <_sbrk_r+0x1a>
 801ea60:	6023      	str	r3, [r4, #0]
 801ea62:	bd38      	pop	{r3, r4, r5, pc}
 801ea64:	2400f754 	.word	0x2400f754

0801ea68 <_raise_r>:
 801ea68:	291f      	cmp	r1, #31
 801ea6a:	b538      	push	{r3, r4, r5, lr}
 801ea6c:	4604      	mov	r4, r0
 801ea6e:	460d      	mov	r5, r1
 801ea70:	d904      	bls.n	801ea7c <_raise_r+0x14>
 801ea72:	2316      	movs	r3, #22
 801ea74:	6003      	str	r3, [r0, #0]
 801ea76:	f04f 30ff 	mov.w	r0, #4294967295
 801ea7a:	bd38      	pop	{r3, r4, r5, pc}
 801ea7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ea7e:	b112      	cbz	r2, 801ea86 <_raise_r+0x1e>
 801ea80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ea84:	b94b      	cbnz	r3, 801ea9a <_raise_r+0x32>
 801ea86:	4620      	mov	r0, r4
 801ea88:	f000 f830 	bl	801eaec <_getpid_r>
 801ea8c:	462a      	mov	r2, r5
 801ea8e:	4601      	mov	r1, r0
 801ea90:	4620      	mov	r0, r4
 801ea92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea96:	f000 b817 	b.w	801eac8 <_kill_r>
 801ea9a:	2b01      	cmp	r3, #1
 801ea9c:	d00a      	beq.n	801eab4 <_raise_r+0x4c>
 801ea9e:	1c59      	adds	r1, r3, #1
 801eaa0:	d103      	bne.n	801eaaa <_raise_r+0x42>
 801eaa2:	2316      	movs	r3, #22
 801eaa4:	6003      	str	r3, [r0, #0]
 801eaa6:	2001      	movs	r0, #1
 801eaa8:	e7e7      	b.n	801ea7a <_raise_r+0x12>
 801eaaa:	2400      	movs	r4, #0
 801eaac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eab0:	4628      	mov	r0, r5
 801eab2:	4798      	blx	r3
 801eab4:	2000      	movs	r0, #0
 801eab6:	e7e0      	b.n	801ea7a <_raise_r+0x12>

0801eab8 <raise>:
 801eab8:	4b02      	ldr	r3, [pc, #8]	; (801eac4 <raise+0xc>)
 801eaba:	4601      	mov	r1, r0
 801eabc:	6818      	ldr	r0, [r3, #0]
 801eabe:	f7ff bfd3 	b.w	801ea68 <_raise_r>
 801eac2:	bf00      	nop
 801eac4:	240000b8 	.word	0x240000b8

0801eac8 <_kill_r>:
 801eac8:	b538      	push	{r3, r4, r5, lr}
 801eaca:	4d07      	ldr	r5, [pc, #28]	; (801eae8 <_kill_r+0x20>)
 801eacc:	2300      	movs	r3, #0
 801eace:	4604      	mov	r4, r0
 801ead0:	4608      	mov	r0, r1
 801ead2:	4611      	mov	r1, r2
 801ead4:	602b      	str	r3, [r5, #0]
 801ead6:	f7e2 fd07 	bl	80014e8 <_kill>
 801eada:	1c43      	adds	r3, r0, #1
 801eadc:	d102      	bne.n	801eae4 <_kill_r+0x1c>
 801eade:	682b      	ldr	r3, [r5, #0]
 801eae0:	b103      	cbz	r3, 801eae4 <_kill_r+0x1c>
 801eae2:	6023      	str	r3, [r4, #0]
 801eae4:	bd38      	pop	{r3, r4, r5, pc}
 801eae6:	bf00      	nop
 801eae8:	2400f754 	.word	0x2400f754

0801eaec <_getpid_r>:
 801eaec:	f7e2 bcfa 	b.w	80014e4 <_getpid>

0801eaf0 <__tzcalc_limits>:
 801eaf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eaf4:	4605      	mov	r5, r0
 801eaf6:	f000 fd55 	bl	801f5a4 <__gettzinfo>
 801eafa:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801eafe:	429d      	cmp	r5, r3
 801eb00:	f340 8099 	ble.w	801ec36 <__tzcalc_limits+0x146>
 801eb04:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 801eb08:	18ac      	adds	r4, r5, r2
 801eb0a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 801eb0e:	f240 126d 	movw	r2, #365	; 0x16d
 801eb12:	10a4      	asrs	r4, r4, #2
 801eb14:	fb02 4403 	mla	r4, r2, r3, r4
 801eb18:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801eb1c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 801eb20:	fb93 f3f2 	sdiv	r3, r3, r2
 801eb24:	441c      	add	r4, r3
 801eb26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801eb2a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 801eb2e:	fb95 fcf3 	sdiv	ip, r5, r3
 801eb32:	fb03 5c1c 	mls	ip, r3, ip, r5
 801eb36:	186a      	adds	r2, r5, r1
 801eb38:	fabc f68c 	clz	r6, ip
 801eb3c:	fbb2 f2f3 	udiv	r2, r2, r3
 801eb40:	f005 0303 	and.w	r3, r5, #3
 801eb44:	4414      	add	r4, r2
 801eb46:	2264      	movs	r2, #100	; 0x64
 801eb48:	6045      	str	r5, [r0, #4]
 801eb4a:	fb95 f7f2 	sdiv	r7, r5, r2
 801eb4e:	0976      	lsrs	r6, r6, #5
 801eb50:	fb02 5717 	mls	r7, r2, r7, r5
 801eb54:	4601      	mov	r1, r0
 801eb56:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801eb5a:	9300      	str	r3, [sp, #0]
 801eb5c:	f04f 0a07 	mov.w	sl, #7
 801eb60:	7a0d      	ldrb	r5, [r1, #8]
 801eb62:	694b      	ldr	r3, [r1, #20]
 801eb64:	2d4a      	cmp	r5, #74	; 0x4a
 801eb66:	d12d      	bne.n	801ebc4 <__tzcalc_limits+0xd4>
 801eb68:	9a00      	ldr	r2, [sp, #0]
 801eb6a:	eb04 0e03 	add.w	lr, r4, r3
 801eb6e:	b902      	cbnz	r2, 801eb72 <__tzcalc_limits+0x82>
 801eb70:	b917      	cbnz	r7, 801eb78 <__tzcalc_limits+0x88>
 801eb72:	f1bc 0f00 	cmp.w	ip, #0
 801eb76:	d123      	bne.n	801ebc0 <__tzcalc_limits+0xd0>
 801eb78:	2b3b      	cmp	r3, #59	; 0x3b
 801eb7a:	bfd4      	ite	le
 801eb7c:	2300      	movle	r3, #0
 801eb7e:	2301      	movgt	r3, #1
 801eb80:	4473      	add	r3, lr
 801eb82:	3b01      	subs	r3, #1
 801eb84:	698d      	ldr	r5, [r1, #24]
 801eb86:	4a2d      	ldr	r2, [pc, #180]	; (801ec3c <__tzcalc_limits+0x14c>)
 801eb88:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 801eb8c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 801eb90:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801eb92:	18ed      	adds	r5, r5, r3
 801eb94:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 801eb98:	e9c1 5308 	strd	r5, r3, [r1, #32]
 801eb9c:	3128      	adds	r1, #40	; 0x28
 801eb9e:	458b      	cmp	fp, r1
 801eba0:	d1de      	bne.n	801eb60 <__tzcalc_limits+0x70>
 801eba2:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801eba6:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801ebaa:	428c      	cmp	r4, r1
 801ebac:	eb72 0303 	sbcs.w	r3, r2, r3
 801ebb0:	bfb4      	ite	lt
 801ebb2:	2301      	movlt	r3, #1
 801ebb4:	2300      	movge	r3, #0
 801ebb6:	6003      	str	r3, [r0, #0]
 801ebb8:	2001      	movs	r0, #1
 801ebba:	b003      	add	sp, #12
 801ebbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebc0:	2300      	movs	r3, #0
 801ebc2:	e7dd      	b.n	801eb80 <__tzcalc_limits+0x90>
 801ebc4:	2d44      	cmp	r5, #68	; 0x44
 801ebc6:	d101      	bne.n	801ebcc <__tzcalc_limits+0xdc>
 801ebc8:	4423      	add	r3, r4
 801ebca:	e7db      	b.n	801eb84 <__tzcalc_limits+0x94>
 801ebcc:	9a00      	ldr	r2, [sp, #0]
 801ebce:	bb62      	cbnz	r2, 801ec2a <__tzcalc_limits+0x13a>
 801ebd0:	2f00      	cmp	r7, #0
 801ebd2:	bf0c      	ite	eq
 801ebd4:	4635      	moveq	r5, r6
 801ebd6:	2501      	movne	r5, #1
 801ebd8:	68ca      	ldr	r2, [r1, #12]
 801ebda:	9201      	str	r2, [sp, #4]
 801ebdc:	4a18      	ldr	r2, [pc, #96]	; (801ec40 <__tzcalc_limits+0x150>)
 801ebde:	f04f 0930 	mov.w	r9, #48	; 0x30
 801ebe2:	fb09 2505 	mla	r5, r9, r5, r2
 801ebe6:	46a6      	mov	lr, r4
 801ebe8:	f04f 0800 	mov.w	r8, #0
 801ebec:	3d04      	subs	r5, #4
 801ebee:	9a01      	ldr	r2, [sp, #4]
 801ebf0:	f108 0801 	add.w	r8, r8, #1
 801ebf4:	4542      	cmp	r2, r8
 801ebf6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801ebfa:	dc18      	bgt.n	801ec2e <__tzcalc_limits+0x13e>
 801ebfc:	f10e 0504 	add.w	r5, lr, #4
 801ec00:	fb95 f8fa 	sdiv	r8, r5, sl
 801ec04:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 801ec08:	eba5 0808 	sub.w	r8, r5, r8
 801ec0c:	ebb3 0808 	subs.w	r8, r3, r8
 801ec10:	690b      	ldr	r3, [r1, #16]
 801ec12:	f103 33ff 	add.w	r3, r3, #4294967295
 801ec16:	bf48      	it	mi
 801ec18:	f108 0807 	addmi.w	r8, r8, #7
 801ec1c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ec20:	4443      	add	r3, r8
 801ec22:	454b      	cmp	r3, r9
 801ec24:	da05      	bge.n	801ec32 <__tzcalc_limits+0x142>
 801ec26:	4473      	add	r3, lr
 801ec28:	e7ac      	b.n	801eb84 <__tzcalc_limits+0x94>
 801ec2a:	4635      	mov	r5, r6
 801ec2c:	e7d4      	b.n	801ebd8 <__tzcalc_limits+0xe8>
 801ec2e:	44ce      	add	lr, r9
 801ec30:	e7dd      	b.n	801ebee <__tzcalc_limits+0xfe>
 801ec32:	3b07      	subs	r3, #7
 801ec34:	e7f5      	b.n	801ec22 <__tzcalc_limits+0x132>
 801ec36:	2000      	movs	r0, #0
 801ec38:	e7bf      	b.n	801ebba <__tzcalc_limits+0xca>
 801ec3a:	bf00      	nop
 801ec3c:	00015180 	.word	0x00015180
 801ec40:	080226ac 	.word	0x080226ac

0801ec44 <__tz_lock>:
 801ec44:	4801      	ldr	r0, [pc, #4]	; (801ec4c <__tz_lock+0x8>)
 801ec46:	f000 bd5e 	b.w	801f706 <__retarget_lock_acquire>
 801ec4a:	bf00      	nop
 801ec4c:	2400f751 	.word	0x2400f751

0801ec50 <__tz_unlock>:
 801ec50:	4801      	ldr	r0, [pc, #4]	; (801ec58 <__tz_unlock+0x8>)
 801ec52:	f000 bd5a 	b.w	801f70a <__retarget_lock_release>
 801ec56:	bf00      	nop
 801ec58:	2400f751 	.word	0x2400f751

0801ec5c <_tzset_unlocked>:
 801ec5c:	4b01      	ldr	r3, [pc, #4]	; (801ec64 <_tzset_unlocked+0x8>)
 801ec5e:	6818      	ldr	r0, [r3, #0]
 801ec60:	f000 b802 	b.w	801ec68 <_tzset_unlocked_r>
 801ec64:	240000b8 	.word	0x240000b8

0801ec68 <_tzset_unlocked_r>:
 801ec68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec6c:	b08d      	sub	sp, #52	; 0x34
 801ec6e:	4607      	mov	r7, r0
 801ec70:	f000 fc98 	bl	801f5a4 <__gettzinfo>
 801ec74:	49b0      	ldr	r1, [pc, #704]	; (801ef38 <_tzset_unlocked_r+0x2d0>)
 801ec76:	4eb1      	ldr	r6, [pc, #708]	; (801ef3c <_tzset_unlocked_r+0x2d4>)
 801ec78:	4605      	mov	r5, r0
 801ec7a:	4638      	mov	r0, r7
 801ec7c:	f000 fc8a 	bl	801f594 <_getenv_r>
 801ec80:	4604      	mov	r4, r0
 801ec82:	b970      	cbnz	r0, 801eca2 <_tzset_unlocked_r+0x3a>
 801ec84:	4bae      	ldr	r3, [pc, #696]	; (801ef40 <_tzset_unlocked_r+0x2d8>)
 801ec86:	4aaf      	ldr	r2, [pc, #700]	; (801ef44 <_tzset_unlocked_r+0x2dc>)
 801ec88:	6018      	str	r0, [r3, #0]
 801ec8a:	4baf      	ldr	r3, [pc, #700]	; (801ef48 <_tzset_unlocked_r+0x2e0>)
 801ec8c:	6018      	str	r0, [r3, #0]
 801ec8e:	4baf      	ldr	r3, [pc, #700]	; (801ef4c <_tzset_unlocked_r+0x2e4>)
 801ec90:	6830      	ldr	r0, [r6, #0]
 801ec92:	e9c3 2200 	strd	r2, r2, [r3]
 801ec96:	f7ff faeb 	bl	801e270 <free>
 801ec9a:	6034      	str	r4, [r6, #0]
 801ec9c:	b00d      	add	sp, #52	; 0x34
 801ec9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eca2:	6831      	ldr	r1, [r6, #0]
 801eca4:	2900      	cmp	r1, #0
 801eca6:	d162      	bne.n	801ed6e <_tzset_unlocked_r+0x106>
 801eca8:	6830      	ldr	r0, [r6, #0]
 801ecaa:	f7ff fae1 	bl	801e270 <free>
 801ecae:	4620      	mov	r0, r4
 801ecb0:	f7e1 fb70 	bl	8000394 <strlen>
 801ecb4:	1c41      	adds	r1, r0, #1
 801ecb6:	4638      	mov	r0, r7
 801ecb8:	f7ff fb64 	bl	801e384 <_malloc_r>
 801ecbc:	6030      	str	r0, [r6, #0]
 801ecbe:	2800      	cmp	r0, #0
 801ecc0:	d15a      	bne.n	801ed78 <_tzset_unlocked_r+0x110>
 801ecc2:	7823      	ldrb	r3, [r4, #0]
 801ecc4:	4aa2      	ldr	r2, [pc, #648]	; (801ef50 <_tzset_unlocked_r+0x2e8>)
 801ecc6:	49a3      	ldr	r1, [pc, #652]	; (801ef54 <_tzset_unlocked_r+0x2ec>)
 801ecc8:	2b3a      	cmp	r3, #58	; 0x3a
 801ecca:	bf08      	it	eq
 801eccc:	3401      	addeq	r4, #1
 801ecce:	ae0a      	add	r6, sp, #40	; 0x28
 801ecd0:	4633      	mov	r3, r6
 801ecd2:	4620      	mov	r0, r4
 801ecd4:	f000 fdbc 	bl	801f850 <siscanf>
 801ecd8:	2800      	cmp	r0, #0
 801ecda:	dddf      	ble.n	801ec9c <_tzset_unlocked_r+0x34>
 801ecdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ecde:	18e7      	adds	r7, r4, r3
 801ece0:	5ce3      	ldrb	r3, [r4, r3]
 801ece2:	2b2d      	cmp	r3, #45	; 0x2d
 801ece4:	d14c      	bne.n	801ed80 <_tzset_unlocked_r+0x118>
 801ece6:	3701      	adds	r7, #1
 801ece8:	f04f 38ff 	mov.w	r8, #4294967295
 801ecec:	f10d 0a20 	add.w	sl, sp, #32
 801ecf0:	f10d 0b1e 	add.w	fp, sp, #30
 801ecf4:	2400      	movs	r4, #0
 801ecf6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801ecfa:	4997      	ldr	r1, [pc, #604]	; (801ef58 <_tzset_unlocked_r+0x2f0>)
 801ecfc:	9603      	str	r6, [sp, #12]
 801ecfe:	f8cd b000 	str.w	fp, [sp]
 801ed02:	4633      	mov	r3, r6
 801ed04:	aa07      	add	r2, sp, #28
 801ed06:	4638      	mov	r0, r7
 801ed08:	f8ad 401e 	strh.w	r4, [sp, #30]
 801ed0c:	f8ad 4020 	strh.w	r4, [sp, #32]
 801ed10:	f000 fd9e 	bl	801f850 <siscanf>
 801ed14:	42a0      	cmp	r0, r4
 801ed16:	ddc1      	ble.n	801ec9c <_tzset_unlocked_r+0x34>
 801ed18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ed1c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ed20:	f8df 9240 	ldr.w	r9, [pc, #576]	; 801ef64 <_tzset_unlocked_r+0x2fc>
 801ed24:	213c      	movs	r1, #60	; 0x3c
 801ed26:	fb01 3302 	mla	r3, r1, r2, r3
 801ed2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801ed2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ed32:	fb01 3302 	mla	r3, r1, r2, r3
 801ed36:	fb08 f303 	mul.w	r3, r8, r3
 801ed3a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 801ef4c <_tzset_unlocked_r+0x2e4>
 801ed3e:	62ab      	str	r3, [r5, #40]	; 0x28
 801ed40:	4b83      	ldr	r3, [pc, #524]	; (801ef50 <_tzset_unlocked_r+0x2e8>)
 801ed42:	f8c8 3000 	str.w	r3, [r8]
 801ed46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed48:	4982      	ldr	r1, [pc, #520]	; (801ef54 <_tzset_unlocked_r+0x2ec>)
 801ed4a:	441f      	add	r7, r3
 801ed4c:	464a      	mov	r2, r9
 801ed4e:	4633      	mov	r3, r6
 801ed50:	4638      	mov	r0, r7
 801ed52:	f000 fd7d 	bl	801f850 <siscanf>
 801ed56:	42a0      	cmp	r0, r4
 801ed58:	dc18      	bgt.n	801ed8c <_tzset_unlocked_r+0x124>
 801ed5a:	f8d8 3000 	ldr.w	r3, [r8]
 801ed5e:	f8c8 3004 	str.w	r3, [r8, #4]
 801ed62:	4b77      	ldr	r3, [pc, #476]	; (801ef40 <_tzset_unlocked_r+0x2d8>)
 801ed64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ed66:	601a      	str	r2, [r3, #0]
 801ed68:	4b77      	ldr	r3, [pc, #476]	; (801ef48 <_tzset_unlocked_r+0x2e0>)
 801ed6a:	601c      	str	r4, [r3, #0]
 801ed6c:	e796      	b.n	801ec9c <_tzset_unlocked_r+0x34>
 801ed6e:	f7e1 fb07 	bl	8000380 <strcmp>
 801ed72:	2800      	cmp	r0, #0
 801ed74:	d198      	bne.n	801eca8 <_tzset_unlocked_r+0x40>
 801ed76:	e791      	b.n	801ec9c <_tzset_unlocked_r+0x34>
 801ed78:	4621      	mov	r1, r4
 801ed7a:	f000 fdda 	bl	801f932 <strcpy>
 801ed7e:	e7a0      	b.n	801ecc2 <_tzset_unlocked_r+0x5a>
 801ed80:	2b2b      	cmp	r3, #43	; 0x2b
 801ed82:	bf08      	it	eq
 801ed84:	3701      	addeq	r7, #1
 801ed86:	f04f 0801 	mov.w	r8, #1
 801ed8a:	e7af      	b.n	801ecec <_tzset_unlocked_r+0x84>
 801ed8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed8e:	f8c8 9004 	str.w	r9, [r8, #4]
 801ed92:	18fc      	adds	r4, r7, r3
 801ed94:	5cfb      	ldrb	r3, [r7, r3]
 801ed96:	2b2d      	cmp	r3, #45	; 0x2d
 801ed98:	f040 808b 	bne.w	801eeb2 <_tzset_unlocked_r+0x24a>
 801ed9c:	3401      	adds	r4, #1
 801ed9e:	f04f 37ff 	mov.w	r7, #4294967295
 801eda2:	2300      	movs	r3, #0
 801eda4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eda8:	f8ad 301e 	strh.w	r3, [sp, #30]
 801edac:	f8ad 3020 	strh.w	r3, [sp, #32]
 801edb0:	930a      	str	r3, [sp, #40]	; 0x28
 801edb2:	e9cd a602 	strd	sl, r6, [sp, #8]
 801edb6:	e9cd b600 	strd	fp, r6, [sp]
 801edba:	4967      	ldr	r1, [pc, #412]	; (801ef58 <_tzset_unlocked_r+0x2f0>)
 801edbc:	4633      	mov	r3, r6
 801edbe:	aa07      	add	r2, sp, #28
 801edc0:	4620      	mov	r0, r4
 801edc2:	f000 fd45 	bl	801f850 <siscanf>
 801edc6:	2800      	cmp	r0, #0
 801edc8:	dc78      	bgt.n	801eebc <_tzset_unlocked_r+0x254>
 801edca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801edcc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801edd0:	652b      	str	r3, [r5, #80]	; 0x50
 801edd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edd4:	462f      	mov	r7, r5
 801edd6:	441c      	add	r4, r3
 801edd8:	f04f 0900 	mov.w	r9, #0
 801eddc:	7823      	ldrb	r3, [r4, #0]
 801edde:	2b2c      	cmp	r3, #44	; 0x2c
 801ede0:	bf08      	it	eq
 801ede2:	3401      	addeq	r4, #1
 801ede4:	f894 8000 	ldrb.w	r8, [r4]
 801ede8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801edec:	d178      	bne.n	801eee0 <_tzset_unlocked_r+0x278>
 801edee:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801edf2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801edf6:	ab09      	add	r3, sp, #36	; 0x24
 801edf8:	9300      	str	r3, [sp, #0]
 801edfa:	4958      	ldr	r1, [pc, #352]	; (801ef5c <_tzset_unlocked_r+0x2f4>)
 801edfc:	9603      	str	r6, [sp, #12]
 801edfe:	4633      	mov	r3, r6
 801ee00:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ee04:	4620      	mov	r0, r4
 801ee06:	f000 fd23 	bl	801f850 <siscanf>
 801ee0a:	2803      	cmp	r0, #3
 801ee0c:	f47f af46 	bne.w	801ec9c <_tzset_unlocked_r+0x34>
 801ee10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ee14:	1e4b      	subs	r3, r1, #1
 801ee16:	2b0b      	cmp	r3, #11
 801ee18:	f63f af40 	bhi.w	801ec9c <_tzset_unlocked_r+0x34>
 801ee1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ee20:	1e53      	subs	r3, r2, #1
 801ee22:	2b04      	cmp	r3, #4
 801ee24:	f63f af3a 	bhi.w	801ec9c <_tzset_unlocked_r+0x34>
 801ee28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ee2c:	2b06      	cmp	r3, #6
 801ee2e:	f63f af35 	bhi.w	801ec9c <_tzset_unlocked_r+0x34>
 801ee32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801ee36:	f887 8008 	strb.w	r8, [r7, #8]
 801ee3a:	617b      	str	r3, [r7, #20]
 801ee3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee3e:	eb04 0803 	add.w	r8, r4, r3
 801ee42:	2302      	movs	r3, #2
 801ee44:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ee48:	2300      	movs	r3, #0
 801ee4a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ee4e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ee52:	930a      	str	r3, [sp, #40]	; 0x28
 801ee54:	f898 3000 	ldrb.w	r3, [r8]
 801ee58:	2b2f      	cmp	r3, #47	; 0x2f
 801ee5a:	d109      	bne.n	801ee70 <_tzset_unlocked_r+0x208>
 801ee5c:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ee60:	e9cd b600 	strd	fp, r6, [sp]
 801ee64:	493e      	ldr	r1, [pc, #248]	; (801ef60 <_tzset_unlocked_r+0x2f8>)
 801ee66:	4633      	mov	r3, r6
 801ee68:	aa07      	add	r2, sp, #28
 801ee6a:	4640      	mov	r0, r8
 801ee6c:	f000 fcf0 	bl	801f850 <siscanf>
 801ee70:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801ee74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ee78:	213c      	movs	r1, #60	; 0x3c
 801ee7a:	fb01 3302 	mla	r3, r1, r2, r3
 801ee7e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801ee82:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ee86:	fb01 3302 	mla	r3, r1, r2, r3
 801ee8a:	61bb      	str	r3, [r7, #24]
 801ee8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ee8e:	3728      	adds	r7, #40	; 0x28
 801ee90:	4444      	add	r4, r8
 801ee92:	f1b9 0f00 	cmp.w	r9, #0
 801ee96:	d020      	beq.n	801eeda <_tzset_unlocked_r+0x272>
 801ee98:	6868      	ldr	r0, [r5, #4]
 801ee9a:	f7ff fe29 	bl	801eaf0 <__tzcalc_limits>
 801ee9e:	4b28      	ldr	r3, [pc, #160]	; (801ef40 <_tzset_unlocked_r+0x2d8>)
 801eea0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801eea2:	601a      	str	r2, [r3, #0]
 801eea4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801eea6:	1a9b      	subs	r3, r3, r2
 801eea8:	4a27      	ldr	r2, [pc, #156]	; (801ef48 <_tzset_unlocked_r+0x2e0>)
 801eeaa:	bf18      	it	ne
 801eeac:	2301      	movne	r3, #1
 801eeae:	6013      	str	r3, [r2, #0]
 801eeb0:	e6f4      	b.n	801ec9c <_tzset_unlocked_r+0x34>
 801eeb2:	2b2b      	cmp	r3, #43	; 0x2b
 801eeb4:	bf08      	it	eq
 801eeb6:	3401      	addeq	r4, #1
 801eeb8:	2701      	movs	r7, #1
 801eeba:	e772      	b.n	801eda2 <_tzset_unlocked_r+0x13a>
 801eebc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801eec0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801eec4:	213c      	movs	r1, #60	; 0x3c
 801eec6:	fb01 3302 	mla	r3, r1, r2, r3
 801eeca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801eece:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801eed2:	fb01 3302 	mla	r3, r1, r2, r3
 801eed6:	437b      	muls	r3, r7
 801eed8:	e77a      	b.n	801edd0 <_tzset_unlocked_r+0x168>
 801eeda:	f04f 0901 	mov.w	r9, #1
 801eede:	e77d      	b.n	801eddc <_tzset_unlocked_r+0x174>
 801eee0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801eee4:	bf06      	itte	eq
 801eee6:	3401      	addeq	r4, #1
 801eee8:	4643      	moveq	r3, r8
 801eeea:	2344      	movne	r3, #68	; 0x44
 801eeec:	220a      	movs	r2, #10
 801eeee:	a90b      	add	r1, sp, #44	; 0x2c
 801eef0:	4620      	mov	r0, r4
 801eef2:	9305      	str	r3, [sp, #20]
 801eef4:	f000 fdae 	bl	801fa54 <strtoul>
 801eef8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801eefc:	9b05      	ldr	r3, [sp, #20]
 801eefe:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ef02:	45a0      	cmp	r8, r4
 801ef04:	d114      	bne.n	801ef30 <_tzset_unlocked_r+0x2c8>
 801ef06:	234d      	movs	r3, #77	; 0x4d
 801ef08:	f1b9 0f00 	cmp.w	r9, #0
 801ef0c:	d107      	bne.n	801ef1e <_tzset_unlocked_r+0x2b6>
 801ef0e:	722b      	strb	r3, [r5, #8]
 801ef10:	2103      	movs	r1, #3
 801ef12:	2302      	movs	r3, #2
 801ef14:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ef18:	f8c5 9014 	str.w	r9, [r5, #20]
 801ef1c:	e791      	b.n	801ee42 <_tzset_unlocked_r+0x1da>
 801ef1e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801ef22:	220b      	movs	r2, #11
 801ef24:	2301      	movs	r3, #1
 801ef26:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801ef2e:	e788      	b.n	801ee42 <_tzset_unlocked_r+0x1da>
 801ef30:	b280      	uxth	r0, r0
 801ef32:	723b      	strb	r3, [r7, #8]
 801ef34:	6178      	str	r0, [r7, #20]
 801ef36:	e784      	b.n	801ee42 <_tzset_unlocked_r+0x1da>
 801ef38:	08022744 	.word	0x08022744
 801ef3c:	2400f6b0 	.word	0x2400f6b0
 801ef40:	2400f6b8 	.word	0x2400f6b8
 801ef44:	08022747 	.word	0x08022747
 801ef48:	2400f6b4 	.word	0x2400f6b4
 801ef4c:	2400011c 	.word	0x2400011c
 801ef50:	2400f6a3 	.word	0x2400f6a3
 801ef54:	0802274b 	.word	0x0802274b
 801ef58:	0802276e 	.word	0x0802276e
 801ef5c:	0802275a 	.word	0x0802275a
 801ef60:	0802276d 	.word	0x0802276d
 801ef64:	2400f698 	.word	0x2400f698

0801ef68 <__swbuf_r>:
 801ef68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef6a:	460e      	mov	r6, r1
 801ef6c:	4614      	mov	r4, r2
 801ef6e:	4605      	mov	r5, r0
 801ef70:	b118      	cbz	r0, 801ef7a <__swbuf_r+0x12>
 801ef72:	6983      	ldr	r3, [r0, #24]
 801ef74:	b90b      	cbnz	r3, 801ef7a <__swbuf_r+0x12>
 801ef76:	f000 fa33 	bl	801f3e0 <__sinit>
 801ef7a:	4b21      	ldr	r3, [pc, #132]	; (801f000 <__swbuf_r+0x98>)
 801ef7c:	429c      	cmp	r4, r3
 801ef7e:	d12b      	bne.n	801efd8 <__swbuf_r+0x70>
 801ef80:	686c      	ldr	r4, [r5, #4]
 801ef82:	69a3      	ldr	r3, [r4, #24]
 801ef84:	60a3      	str	r3, [r4, #8]
 801ef86:	89a3      	ldrh	r3, [r4, #12]
 801ef88:	071a      	lsls	r2, r3, #28
 801ef8a:	d52f      	bpl.n	801efec <__swbuf_r+0x84>
 801ef8c:	6923      	ldr	r3, [r4, #16]
 801ef8e:	b36b      	cbz	r3, 801efec <__swbuf_r+0x84>
 801ef90:	6923      	ldr	r3, [r4, #16]
 801ef92:	6820      	ldr	r0, [r4, #0]
 801ef94:	1ac0      	subs	r0, r0, r3
 801ef96:	6963      	ldr	r3, [r4, #20]
 801ef98:	b2f6      	uxtb	r6, r6
 801ef9a:	4283      	cmp	r3, r0
 801ef9c:	4637      	mov	r7, r6
 801ef9e:	dc04      	bgt.n	801efaa <__swbuf_r+0x42>
 801efa0:	4621      	mov	r1, r4
 801efa2:	4628      	mov	r0, r5
 801efa4:	f000 f988 	bl	801f2b8 <_fflush_r>
 801efa8:	bb30      	cbnz	r0, 801eff8 <__swbuf_r+0x90>
 801efaa:	68a3      	ldr	r3, [r4, #8]
 801efac:	3b01      	subs	r3, #1
 801efae:	60a3      	str	r3, [r4, #8]
 801efb0:	6823      	ldr	r3, [r4, #0]
 801efb2:	1c5a      	adds	r2, r3, #1
 801efb4:	6022      	str	r2, [r4, #0]
 801efb6:	701e      	strb	r6, [r3, #0]
 801efb8:	6963      	ldr	r3, [r4, #20]
 801efba:	3001      	adds	r0, #1
 801efbc:	4283      	cmp	r3, r0
 801efbe:	d004      	beq.n	801efca <__swbuf_r+0x62>
 801efc0:	89a3      	ldrh	r3, [r4, #12]
 801efc2:	07db      	lsls	r3, r3, #31
 801efc4:	d506      	bpl.n	801efd4 <__swbuf_r+0x6c>
 801efc6:	2e0a      	cmp	r6, #10
 801efc8:	d104      	bne.n	801efd4 <__swbuf_r+0x6c>
 801efca:	4621      	mov	r1, r4
 801efcc:	4628      	mov	r0, r5
 801efce:	f000 f973 	bl	801f2b8 <_fflush_r>
 801efd2:	b988      	cbnz	r0, 801eff8 <__swbuf_r+0x90>
 801efd4:	4638      	mov	r0, r7
 801efd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efd8:	4b0a      	ldr	r3, [pc, #40]	; (801f004 <__swbuf_r+0x9c>)
 801efda:	429c      	cmp	r4, r3
 801efdc:	d101      	bne.n	801efe2 <__swbuf_r+0x7a>
 801efde:	68ac      	ldr	r4, [r5, #8]
 801efe0:	e7cf      	b.n	801ef82 <__swbuf_r+0x1a>
 801efe2:	4b09      	ldr	r3, [pc, #36]	; (801f008 <__swbuf_r+0xa0>)
 801efe4:	429c      	cmp	r4, r3
 801efe6:	bf08      	it	eq
 801efe8:	68ec      	ldreq	r4, [r5, #12]
 801efea:	e7ca      	b.n	801ef82 <__swbuf_r+0x1a>
 801efec:	4621      	mov	r1, r4
 801efee:	4628      	mov	r0, r5
 801eff0:	f000 f80c 	bl	801f00c <__swsetup_r>
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d0cb      	beq.n	801ef90 <__swbuf_r+0x28>
 801eff8:	f04f 37ff 	mov.w	r7, #4294967295
 801effc:	e7ea      	b.n	801efd4 <__swbuf_r+0x6c>
 801effe:	bf00      	nop
 801f000:	080227a0 	.word	0x080227a0
 801f004:	080227c0 	.word	0x080227c0
 801f008:	08022780 	.word	0x08022780

0801f00c <__swsetup_r>:
 801f00c:	4b32      	ldr	r3, [pc, #200]	; (801f0d8 <__swsetup_r+0xcc>)
 801f00e:	b570      	push	{r4, r5, r6, lr}
 801f010:	681d      	ldr	r5, [r3, #0]
 801f012:	4606      	mov	r6, r0
 801f014:	460c      	mov	r4, r1
 801f016:	b125      	cbz	r5, 801f022 <__swsetup_r+0x16>
 801f018:	69ab      	ldr	r3, [r5, #24]
 801f01a:	b913      	cbnz	r3, 801f022 <__swsetup_r+0x16>
 801f01c:	4628      	mov	r0, r5
 801f01e:	f000 f9df 	bl	801f3e0 <__sinit>
 801f022:	4b2e      	ldr	r3, [pc, #184]	; (801f0dc <__swsetup_r+0xd0>)
 801f024:	429c      	cmp	r4, r3
 801f026:	d10f      	bne.n	801f048 <__swsetup_r+0x3c>
 801f028:	686c      	ldr	r4, [r5, #4]
 801f02a:	89a3      	ldrh	r3, [r4, #12]
 801f02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f030:	0719      	lsls	r1, r3, #28
 801f032:	d42c      	bmi.n	801f08e <__swsetup_r+0x82>
 801f034:	06dd      	lsls	r5, r3, #27
 801f036:	d411      	bmi.n	801f05c <__swsetup_r+0x50>
 801f038:	2309      	movs	r3, #9
 801f03a:	6033      	str	r3, [r6, #0]
 801f03c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f040:	81a3      	strh	r3, [r4, #12]
 801f042:	f04f 30ff 	mov.w	r0, #4294967295
 801f046:	e03e      	b.n	801f0c6 <__swsetup_r+0xba>
 801f048:	4b25      	ldr	r3, [pc, #148]	; (801f0e0 <__swsetup_r+0xd4>)
 801f04a:	429c      	cmp	r4, r3
 801f04c:	d101      	bne.n	801f052 <__swsetup_r+0x46>
 801f04e:	68ac      	ldr	r4, [r5, #8]
 801f050:	e7eb      	b.n	801f02a <__swsetup_r+0x1e>
 801f052:	4b24      	ldr	r3, [pc, #144]	; (801f0e4 <__swsetup_r+0xd8>)
 801f054:	429c      	cmp	r4, r3
 801f056:	bf08      	it	eq
 801f058:	68ec      	ldreq	r4, [r5, #12]
 801f05a:	e7e6      	b.n	801f02a <__swsetup_r+0x1e>
 801f05c:	0758      	lsls	r0, r3, #29
 801f05e:	d512      	bpl.n	801f086 <__swsetup_r+0x7a>
 801f060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f062:	b141      	cbz	r1, 801f076 <__swsetup_r+0x6a>
 801f064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f068:	4299      	cmp	r1, r3
 801f06a:	d002      	beq.n	801f072 <__swsetup_r+0x66>
 801f06c:	4630      	mov	r0, r6
 801f06e:	f7ff f91d 	bl	801e2ac <_free_r>
 801f072:	2300      	movs	r3, #0
 801f074:	6363      	str	r3, [r4, #52]	; 0x34
 801f076:	89a3      	ldrh	r3, [r4, #12]
 801f078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f07c:	81a3      	strh	r3, [r4, #12]
 801f07e:	2300      	movs	r3, #0
 801f080:	6063      	str	r3, [r4, #4]
 801f082:	6923      	ldr	r3, [r4, #16]
 801f084:	6023      	str	r3, [r4, #0]
 801f086:	89a3      	ldrh	r3, [r4, #12]
 801f088:	f043 0308 	orr.w	r3, r3, #8
 801f08c:	81a3      	strh	r3, [r4, #12]
 801f08e:	6923      	ldr	r3, [r4, #16]
 801f090:	b94b      	cbnz	r3, 801f0a6 <__swsetup_r+0x9a>
 801f092:	89a3      	ldrh	r3, [r4, #12]
 801f094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f09c:	d003      	beq.n	801f0a6 <__swsetup_r+0x9a>
 801f09e:	4621      	mov	r1, r4
 801f0a0:	4630      	mov	r0, r6
 801f0a2:	f000 fb59 	bl	801f758 <__smakebuf_r>
 801f0a6:	89a0      	ldrh	r0, [r4, #12]
 801f0a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f0ac:	f010 0301 	ands.w	r3, r0, #1
 801f0b0:	d00a      	beq.n	801f0c8 <__swsetup_r+0xbc>
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	60a3      	str	r3, [r4, #8]
 801f0b6:	6963      	ldr	r3, [r4, #20]
 801f0b8:	425b      	negs	r3, r3
 801f0ba:	61a3      	str	r3, [r4, #24]
 801f0bc:	6923      	ldr	r3, [r4, #16]
 801f0be:	b943      	cbnz	r3, 801f0d2 <__swsetup_r+0xc6>
 801f0c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f0c4:	d1ba      	bne.n	801f03c <__swsetup_r+0x30>
 801f0c6:	bd70      	pop	{r4, r5, r6, pc}
 801f0c8:	0781      	lsls	r1, r0, #30
 801f0ca:	bf58      	it	pl
 801f0cc:	6963      	ldrpl	r3, [r4, #20]
 801f0ce:	60a3      	str	r3, [r4, #8]
 801f0d0:	e7f4      	b.n	801f0bc <__swsetup_r+0xb0>
 801f0d2:	2000      	movs	r0, #0
 801f0d4:	e7f7      	b.n	801f0c6 <__swsetup_r+0xba>
 801f0d6:	bf00      	nop
 801f0d8:	240000b8 	.word	0x240000b8
 801f0dc:	080227a0 	.word	0x080227a0
 801f0e0:	080227c0 	.word	0x080227c0
 801f0e4:	08022780 	.word	0x08022780

0801f0e8 <__register_exitproc>:
 801f0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f0ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801f1a8 <__register_exitproc+0xc0>
 801f0f0:	4606      	mov	r6, r0
 801f0f2:	f8d8 0000 	ldr.w	r0, [r8]
 801f0f6:	461f      	mov	r7, r3
 801f0f8:	460d      	mov	r5, r1
 801f0fa:	4691      	mov	r9, r2
 801f0fc:	f000 fb04 	bl	801f708 <__retarget_lock_acquire_recursive>
 801f100:	4b25      	ldr	r3, [pc, #148]	; (801f198 <__register_exitproc+0xb0>)
 801f102:	681c      	ldr	r4, [r3, #0]
 801f104:	b934      	cbnz	r4, 801f114 <__register_exitproc+0x2c>
 801f106:	4c25      	ldr	r4, [pc, #148]	; (801f19c <__register_exitproc+0xb4>)
 801f108:	601c      	str	r4, [r3, #0]
 801f10a:	4b25      	ldr	r3, [pc, #148]	; (801f1a0 <__register_exitproc+0xb8>)
 801f10c:	b113      	cbz	r3, 801f114 <__register_exitproc+0x2c>
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f114:	6863      	ldr	r3, [r4, #4]
 801f116:	2b1f      	cmp	r3, #31
 801f118:	dd07      	ble.n	801f12a <__register_exitproc+0x42>
 801f11a:	f8d8 0000 	ldr.w	r0, [r8]
 801f11e:	f000 faf5 	bl	801f70c <__retarget_lock_release_recursive>
 801f122:	f04f 30ff 	mov.w	r0, #4294967295
 801f126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f12a:	b34e      	cbz	r6, 801f180 <__register_exitproc+0x98>
 801f12c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f130:	b988      	cbnz	r0, 801f156 <__register_exitproc+0x6e>
 801f132:	4b1c      	ldr	r3, [pc, #112]	; (801f1a4 <__register_exitproc+0xbc>)
 801f134:	b923      	cbnz	r3, 801f140 <__register_exitproc+0x58>
 801f136:	f8d8 0000 	ldr.w	r0, [r8]
 801f13a:	f000 fae6 	bl	801f70a <__retarget_lock_release>
 801f13e:	e7f0      	b.n	801f122 <__register_exitproc+0x3a>
 801f140:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f144:	f7ff f88c 	bl	801e260 <malloc>
 801f148:	2800      	cmp	r0, #0
 801f14a:	d0f4      	beq.n	801f136 <__register_exitproc+0x4e>
 801f14c:	2300      	movs	r3, #0
 801f14e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f152:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f156:	6863      	ldr	r3, [r4, #4]
 801f158:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f15c:	2201      	movs	r2, #1
 801f15e:	409a      	lsls	r2, r3
 801f160:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f164:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f168:	4313      	orrs	r3, r2
 801f16a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f16e:	2e02      	cmp	r6, #2
 801f170:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f174:	bf02      	ittt	eq
 801f176:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f17a:	4313      	orreq	r3, r2
 801f17c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801f180:	6863      	ldr	r3, [r4, #4]
 801f182:	f8d8 0000 	ldr.w	r0, [r8]
 801f186:	1c5a      	adds	r2, r3, #1
 801f188:	3302      	adds	r3, #2
 801f18a:	6062      	str	r2, [r4, #4]
 801f18c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f190:	f000 fabc 	bl	801f70c <__retarget_lock_release_recursive>
 801f194:	2000      	movs	r0, #0
 801f196:	e7c6      	b.n	801f126 <__register_exitproc+0x3e>
 801f198:	2400f748 	.word	0x2400f748
 801f19c:	2400f6bc 	.word	0x2400f6bc
 801f1a0:	08022740 	.word	0x08022740
 801f1a4:	0801e261 	.word	0x0801e261
 801f1a8:	24000124 	.word	0x24000124

0801f1ac <__sflush_r>:
 801f1ac:	898a      	ldrh	r2, [r1, #12]
 801f1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f1b2:	4605      	mov	r5, r0
 801f1b4:	0710      	lsls	r0, r2, #28
 801f1b6:	460c      	mov	r4, r1
 801f1b8:	d458      	bmi.n	801f26c <__sflush_r+0xc0>
 801f1ba:	684b      	ldr	r3, [r1, #4]
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	dc05      	bgt.n	801f1cc <__sflush_r+0x20>
 801f1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	dc02      	bgt.n	801f1cc <__sflush_r+0x20>
 801f1c6:	2000      	movs	r0, #0
 801f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1ce:	2e00      	cmp	r6, #0
 801f1d0:	d0f9      	beq.n	801f1c6 <__sflush_r+0x1a>
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f1d8:	682f      	ldr	r7, [r5, #0]
 801f1da:	602b      	str	r3, [r5, #0]
 801f1dc:	d032      	beq.n	801f244 <__sflush_r+0x98>
 801f1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f1e0:	89a3      	ldrh	r3, [r4, #12]
 801f1e2:	075a      	lsls	r2, r3, #29
 801f1e4:	d505      	bpl.n	801f1f2 <__sflush_r+0x46>
 801f1e6:	6863      	ldr	r3, [r4, #4]
 801f1e8:	1ac0      	subs	r0, r0, r3
 801f1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1ec:	b10b      	cbz	r3, 801f1f2 <__sflush_r+0x46>
 801f1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f1f0:	1ac0      	subs	r0, r0, r3
 801f1f2:	2300      	movs	r3, #0
 801f1f4:	4602      	mov	r2, r0
 801f1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f1f8:	6a21      	ldr	r1, [r4, #32]
 801f1fa:	4628      	mov	r0, r5
 801f1fc:	47b0      	blx	r6
 801f1fe:	1c43      	adds	r3, r0, #1
 801f200:	89a3      	ldrh	r3, [r4, #12]
 801f202:	d106      	bne.n	801f212 <__sflush_r+0x66>
 801f204:	6829      	ldr	r1, [r5, #0]
 801f206:	291d      	cmp	r1, #29
 801f208:	d82c      	bhi.n	801f264 <__sflush_r+0xb8>
 801f20a:	4a2a      	ldr	r2, [pc, #168]	; (801f2b4 <__sflush_r+0x108>)
 801f20c:	40ca      	lsrs	r2, r1
 801f20e:	07d6      	lsls	r6, r2, #31
 801f210:	d528      	bpl.n	801f264 <__sflush_r+0xb8>
 801f212:	2200      	movs	r2, #0
 801f214:	6062      	str	r2, [r4, #4]
 801f216:	04d9      	lsls	r1, r3, #19
 801f218:	6922      	ldr	r2, [r4, #16]
 801f21a:	6022      	str	r2, [r4, #0]
 801f21c:	d504      	bpl.n	801f228 <__sflush_r+0x7c>
 801f21e:	1c42      	adds	r2, r0, #1
 801f220:	d101      	bne.n	801f226 <__sflush_r+0x7a>
 801f222:	682b      	ldr	r3, [r5, #0]
 801f224:	b903      	cbnz	r3, 801f228 <__sflush_r+0x7c>
 801f226:	6560      	str	r0, [r4, #84]	; 0x54
 801f228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f22a:	602f      	str	r7, [r5, #0]
 801f22c:	2900      	cmp	r1, #0
 801f22e:	d0ca      	beq.n	801f1c6 <__sflush_r+0x1a>
 801f230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f234:	4299      	cmp	r1, r3
 801f236:	d002      	beq.n	801f23e <__sflush_r+0x92>
 801f238:	4628      	mov	r0, r5
 801f23a:	f7ff f837 	bl	801e2ac <_free_r>
 801f23e:	2000      	movs	r0, #0
 801f240:	6360      	str	r0, [r4, #52]	; 0x34
 801f242:	e7c1      	b.n	801f1c8 <__sflush_r+0x1c>
 801f244:	6a21      	ldr	r1, [r4, #32]
 801f246:	2301      	movs	r3, #1
 801f248:	4628      	mov	r0, r5
 801f24a:	47b0      	blx	r6
 801f24c:	1c41      	adds	r1, r0, #1
 801f24e:	d1c7      	bne.n	801f1e0 <__sflush_r+0x34>
 801f250:	682b      	ldr	r3, [r5, #0]
 801f252:	2b00      	cmp	r3, #0
 801f254:	d0c4      	beq.n	801f1e0 <__sflush_r+0x34>
 801f256:	2b1d      	cmp	r3, #29
 801f258:	d001      	beq.n	801f25e <__sflush_r+0xb2>
 801f25a:	2b16      	cmp	r3, #22
 801f25c:	d101      	bne.n	801f262 <__sflush_r+0xb6>
 801f25e:	602f      	str	r7, [r5, #0]
 801f260:	e7b1      	b.n	801f1c6 <__sflush_r+0x1a>
 801f262:	89a3      	ldrh	r3, [r4, #12]
 801f264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f268:	81a3      	strh	r3, [r4, #12]
 801f26a:	e7ad      	b.n	801f1c8 <__sflush_r+0x1c>
 801f26c:	690f      	ldr	r7, [r1, #16]
 801f26e:	2f00      	cmp	r7, #0
 801f270:	d0a9      	beq.n	801f1c6 <__sflush_r+0x1a>
 801f272:	0793      	lsls	r3, r2, #30
 801f274:	680e      	ldr	r6, [r1, #0]
 801f276:	bf08      	it	eq
 801f278:	694b      	ldreq	r3, [r1, #20]
 801f27a:	600f      	str	r7, [r1, #0]
 801f27c:	bf18      	it	ne
 801f27e:	2300      	movne	r3, #0
 801f280:	eba6 0807 	sub.w	r8, r6, r7
 801f284:	608b      	str	r3, [r1, #8]
 801f286:	f1b8 0f00 	cmp.w	r8, #0
 801f28a:	dd9c      	ble.n	801f1c6 <__sflush_r+0x1a>
 801f28c:	6a21      	ldr	r1, [r4, #32]
 801f28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f290:	4643      	mov	r3, r8
 801f292:	463a      	mov	r2, r7
 801f294:	4628      	mov	r0, r5
 801f296:	47b0      	blx	r6
 801f298:	2800      	cmp	r0, #0
 801f29a:	dc06      	bgt.n	801f2aa <__sflush_r+0xfe>
 801f29c:	89a3      	ldrh	r3, [r4, #12]
 801f29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f2a2:	81a3      	strh	r3, [r4, #12]
 801f2a4:	f04f 30ff 	mov.w	r0, #4294967295
 801f2a8:	e78e      	b.n	801f1c8 <__sflush_r+0x1c>
 801f2aa:	4407      	add	r7, r0
 801f2ac:	eba8 0800 	sub.w	r8, r8, r0
 801f2b0:	e7e9      	b.n	801f286 <__sflush_r+0xda>
 801f2b2:	bf00      	nop
 801f2b4:	20400001 	.word	0x20400001

0801f2b8 <_fflush_r>:
 801f2b8:	b538      	push	{r3, r4, r5, lr}
 801f2ba:	690b      	ldr	r3, [r1, #16]
 801f2bc:	4605      	mov	r5, r0
 801f2be:	460c      	mov	r4, r1
 801f2c0:	b913      	cbnz	r3, 801f2c8 <_fflush_r+0x10>
 801f2c2:	2500      	movs	r5, #0
 801f2c4:	4628      	mov	r0, r5
 801f2c6:	bd38      	pop	{r3, r4, r5, pc}
 801f2c8:	b118      	cbz	r0, 801f2d2 <_fflush_r+0x1a>
 801f2ca:	6983      	ldr	r3, [r0, #24]
 801f2cc:	b90b      	cbnz	r3, 801f2d2 <_fflush_r+0x1a>
 801f2ce:	f000 f887 	bl	801f3e0 <__sinit>
 801f2d2:	4b14      	ldr	r3, [pc, #80]	; (801f324 <_fflush_r+0x6c>)
 801f2d4:	429c      	cmp	r4, r3
 801f2d6:	d11b      	bne.n	801f310 <_fflush_r+0x58>
 801f2d8:	686c      	ldr	r4, [r5, #4]
 801f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f2de:	2b00      	cmp	r3, #0
 801f2e0:	d0ef      	beq.n	801f2c2 <_fflush_r+0xa>
 801f2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f2e4:	07d0      	lsls	r0, r2, #31
 801f2e6:	d404      	bmi.n	801f2f2 <_fflush_r+0x3a>
 801f2e8:	0599      	lsls	r1, r3, #22
 801f2ea:	d402      	bmi.n	801f2f2 <_fflush_r+0x3a>
 801f2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f2ee:	f000 fa0b 	bl	801f708 <__retarget_lock_acquire_recursive>
 801f2f2:	4628      	mov	r0, r5
 801f2f4:	4621      	mov	r1, r4
 801f2f6:	f7ff ff59 	bl	801f1ac <__sflush_r>
 801f2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f2fc:	07da      	lsls	r2, r3, #31
 801f2fe:	4605      	mov	r5, r0
 801f300:	d4e0      	bmi.n	801f2c4 <_fflush_r+0xc>
 801f302:	89a3      	ldrh	r3, [r4, #12]
 801f304:	059b      	lsls	r3, r3, #22
 801f306:	d4dd      	bmi.n	801f2c4 <_fflush_r+0xc>
 801f308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f30a:	f000 f9ff 	bl	801f70c <__retarget_lock_release_recursive>
 801f30e:	e7d9      	b.n	801f2c4 <_fflush_r+0xc>
 801f310:	4b05      	ldr	r3, [pc, #20]	; (801f328 <_fflush_r+0x70>)
 801f312:	429c      	cmp	r4, r3
 801f314:	d101      	bne.n	801f31a <_fflush_r+0x62>
 801f316:	68ac      	ldr	r4, [r5, #8]
 801f318:	e7df      	b.n	801f2da <_fflush_r+0x22>
 801f31a:	4b04      	ldr	r3, [pc, #16]	; (801f32c <_fflush_r+0x74>)
 801f31c:	429c      	cmp	r4, r3
 801f31e:	bf08      	it	eq
 801f320:	68ec      	ldreq	r4, [r5, #12]
 801f322:	e7da      	b.n	801f2da <_fflush_r+0x22>
 801f324:	080227a0 	.word	0x080227a0
 801f328:	080227c0 	.word	0x080227c0
 801f32c:	08022780 	.word	0x08022780

0801f330 <std>:
 801f330:	2300      	movs	r3, #0
 801f332:	b510      	push	{r4, lr}
 801f334:	4604      	mov	r4, r0
 801f336:	e9c0 3300 	strd	r3, r3, [r0]
 801f33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f33e:	6083      	str	r3, [r0, #8]
 801f340:	8181      	strh	r1, [r0, #12]
 801f342:	6643      	str	r3, [r0, #100]	; 0x64
 801f344:	81c2      	strh	r2, [r0, #14]
 801f346:	6183      	str	r3, [r0, #24]
 801f348:	4619      	mov	r1, r3
 801f34a:	2208      	movs	r2, #8
 801f34c:	305c      	adds	r0, #92	; 0x5c
 801f34e:	f7fe ffa5 	bl	801e29c <memset>
 801f352:	4b05      	ldr	r3, [pc, #20]	; (801f368 <std+0x38>)
 801f354:	6263      	str	r3, [r4, #36]	; 0x24
 801f356:	4b05      	ldr	r3, [pc, #20]	; (801f36c <std+0x3c>)
 801f358:	62a3      	str	r3, [r4, #40]	; 0x28
 801f35a:	4b05      	ldr	r3, [pc, #20]	; (801f370 <std+0x40>)
 801f35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f35e:	4b05      	ldr	r3, [pc, #20]	; (801f374 <std+0x44>)
 801f360:	6224      	str	r4, [r4, #32]
 801f362:	6323      	str	r3, [r4, #48]	; 0x30
 801f364:	bd10      	pop	{r4, pc}
 801f366:	bf00      	nop
 801f368:	0801f8a9 	.word	0x0801f8a9
 801f36c:	0801f8cf 	.word	0x0801f8cf
 801f370:	0801f907 	.word	0x0801f907
 801f374:	0801f92b 	.word	0x0801f92b

0801f378 <_cleanup_r>:
 801f378:	4901      	ldr	r1, [pc, #4]	; (801f380 <_cleanup_r+0x8>)
 801f37a:	f000 b8af 	b.w	801f4dc <_fwalk_reent>
 801f37e:	bf00      	nop
 801f380:	0801f2b9 	.word	0x0801f2b9

0801f384 <__sfmoreglue>:
 801f384:	b570      	push	{r4, r5, r6, lr}
 801f386:	2268      	movs	r2, #104	; 0x68
 801f388:	1e4d      	subs	r5, r1, #1
 801f38a:	4355      	muls	r5, r2
 801f38c:	460e      	mov	r6, r1
 801f38e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f392:	f7fe fff7 	bl	801e384 <_malloc_r>
 801f396:	4604      	mov	r4, r0
 801f398:	b140      	cbz	r0, 801f3ac <__sfmoreglue+0x28>
 801f39a:	2100      	movs	r1, #0
 801f39c:	e9c0 1600 	strd	r1, r6, [r0]
 801f3a0:	300c      	adds	r0, #12
 801f3a2:	60a0      	str	r0, [r4, #8]
 801f3a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f3a8:	f7fe ff78 	bl	801e29c <memset>
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	bd70      	pop	{r4, r5, r6, pc}

0801f3b0 <__sfp_lock_acquire>:
 801f3b0:	4801      	ldr	r0, [pc, #4]	; (801f3b8 <__sfp_lock_acquire+0x8>)
 801f3b2:	f000 b9a9 	b.w	801f708 <__retarget_lock_acquire_recursive>
 801f3b6:	bf00      	nop
 801f3b8:	2400f74f 	.word	0x2400f74f

0801f3bc <__sfp_lock_release>:
 801f3bc:	4801      	ldr	r0, [pc, #4]	; (801f3c4 <__sfp_lock_release+0x8>)
 801f3be:	f000 b9a5 	b.w	801f70c <__retarget_lock_release_recursive>
 801f3c2:	bf00      	nop
 801f3c4:	2400f74f 	.word	0x2400f74f

0801f3c8 <__sinit_lock_acquire>:
 801f3c8:	4801      	ldr	r0, [pc, #4]	; (801f3d0 <__sinit_lock_acquire+0x8>)
 801f3ca:	f000 b99d 	b.w	801f708 <__retarget_lock_acquire_recursive>
 801f3ce:	bf00      	nop
 801f3d0:	2400f750 	.word	0x2400f750

0801f3d4 <__sinit_lock_release>:
 801f3d4:	4801      	ldr	r0, [pc, #4]	; (801f3dc <__sinit_lock_release+0x8>)
 801f3d6:	f000 b999 	b.w	801f70c <__retarget_lock_release_recursive>
 801f3da:	bf00      	nop
 801f3dc:	2400f750 	.word	0x2400f750

0801f3e0 <__sinit>:
 801f3e0:	b510      	push	{r4, lr}
 801f3e2:	4604      	mov	r4, r0
 801f3e4:	f7ff fff0 	bl	801f3c8 <__sinit_lock_acquire>
 801f3e8:	69a3      	ldr	r3, [r4, #24]
 801f3ea:	b11b      	cbz	r3, 801f3f4 <__sinit+0x14>
 801f3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3f0:	f7ff bff0 	b.w	801f3d4 <__sinit_lock_release>
 801f3f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f3f8:	6523      	str	r3, [r4, #80]	; 0x50
 801f3fa:	4b13      	ldr	r3, [pc, #76]	; (801f448 <__sinit+0x68>)
 801f3fc:	4a13      	ldr	r2, [pc, #76]	; (801f44c <__sinit+0x6c>)
 801f3fe:	681b      	ldr	r3, [r3, #0]
 801f400:	62a2      	str	r2, [r4, #40]	; 0x28
 801f402:	42a3      	cmp	r3, r4
 801f404:	bf04      	itt	eq
 801f406:	2301      	moveq	r3, #1
 801f408:	61a3      	streq	r3, [r4, #24]
 801f40a:	4620      	mov	r0, r4
 801f40c:	f000 f820 	bl	801f450 <__sfp>
 801f410:	6060      	str	r0, [r4, #4]
 801f412:	4620      	mov	r0, r4
 801f414:	f000 f81c 	bl	801f450 <__sfp>
 801f418:	60a0      	str	r0, [r4, #8]
 801f41a:	4620      	mov	r0, r4
 801f41c:	f000 f818 	bl	801f450 <__sfp>
 801f420:	2200      	movs	r2, #0
 801f422:	60e0      	str	r0, [r4, #12]
 801f424:	2104      	movs	r1, #4
 801f426:	6860      	ldr	r0, [r4, #4]
 801f428:	f7ff ff82 	bl	801f330 <std>
 801f42c:	68a0      	ldr	r0, [r4, #8]
 801f42e:	2201      	movs	r2, #1
 801f430:	2109      	movs	r1, #9
 801f432:	f7ff ff7d 	bl	801f330 <std>
 801f436:	68e0      	ldr	r0, [r4, #12]
 801f438:	2202      	movs	r2, #2
 801f43a:	2112      	movs	r1, #18
 801f43c:	f7ff ff78 	bl	801f330 <std>
 801f440:	2301      	movs	r3, #1
 801f442:	61a3      	str	r3, [r4, #24]
 801f444:	e7d2      	b.n	801f3ec <__sinit+0xc>
 801f446:	bf00      	nop
 801f448:	080226a8 	.word	0x080226a8
 801f44c:	0801f379 	.word	0x0801f379

0801f450 <__sfp>:
 801f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f452:	4607      	mov	r7, r0
 801f454:	f7ff ffac 	bl	801f3b0 <__sfp_lock_acquire>
 801f458:	4b1e      	ldr	r3, [pc, #120]	; (801f4d4 <__sfp+0x84>)
 801f45a:	681e      	ldr	r6, [r3, #0]
 801f45c:	69b3      	ldr	r3, [r6, #24]
 801f45e:	b913      	cbnz	r3, 801f466 <__sfp+0x16>
 801f460:	4630      	mov	r0, r6
 801f462:	f7ff ffbd 	bl	801f3e0 <__sinit>
 801f466:	3648      	adds	r6, #72	; 0x48
 801f468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f46c:	3b01      	subs	r3, #1
 801f46e:	d503      	bpl.n	801f478 <__sfp+0x28>
 801f470:	6833      	ldr	r3, [r6, #0]
 801f472:	b30b      	cbz	r3, 801f4b8 <__sfp+0x68>
 801f474:	6836      	ldr	r6, [r6, #0]
 801f476:	e7f7      	b.n	801f468 <__sfp+0x18>
 801f478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f47c:	b9d5      	cbnz	r5, 801f4b4 <__sfp+0x64>
 801f47e:	4b16      	ldr	r3, [pc, #88]	; (801f4d8 <__sfp+0x88>)
 801f480:	60e3      	str	r3, [r4, #12]
 801f482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f486:	6665      	str	r5, [r4, #100]	; 0x64
 801f488:	f000 f93c 	bl	801f704 <__retarget_lock_init_recursive>
 801f48c:	f7ff ff96 	bl	801f3bc <__sfp_lock_release>
 801f490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f498:	6025      	str	r5, [r4, #0]
 801f49a:	61a5      	str	r5, [r4, #24]
 801f49c:	2208      	movs	r2, #8
 801f49e:	4629      	mov	r1, r5
 801f4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f4a4:	f7fe fefa 	bl	801e29c <memset>
 801f4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f4b0:	4620      	mov	r0, r4
 801f4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4b4:	3468      	adds	r4, #104	; 0x68
 801f4b6:	e7d9      	b.n	801f46c <__sfp+0x1c>
 801f4b8:	2104      	movs	r1, #4
 801f4ba:	4638      	mov	r0, r7
 801f4bc:	f7ff ff62 	bl	801f384 <__sfmoreglue>
 801f4c0:	4604      	mov	r4, r0
 801f4c2:	6030      	str	r0, [r6, #0]
 801f4c4:	2800      	cmp	r0, #0
 801f4c6:	d1d5      	bne.n	801f474 <__sfp+0x24>
 801f4c8:	f7ff ff78 	bl	801f3bc <__sfp_lock_release>
 801f4cc:	230c      	movs	r3, #12
 801f4ce:	603b      	str	r3, [r7, #0]
 801f4d0:	e7ee      	b.n	801f4b0 <__sfp+0x60>
 801f4d2:	bf00      	nop
 801f4d4:	080226a8 	.word	0x080226a8
 801f4d8:	ffff0001 	.word	0xffff0001

0801f4dc <_fwalk_reent>:
 801f4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f4e0:	4606      	mov	r6, r0
 801f4e2:	4688      	mov	r8, r1
 801f4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f4e8:	2700      	movs	r7, #0
 801f4ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f4ee:	f1b9 0901 	subs.w	r9, r9, #1
 801f4f2:	d505      	bpl.n	801f500 <_fwalk_reent+0x24>
 801f4f4:	6824      	ldr	r4, [r4, #0]
 801f4f6:	2c00      	cmp	r4, #0
 801f4f8:	d1f7      	bne.n	801f4ea <_fwalk_reent+0xe>
 801f4fa:	4638      	mov	r0, r7
 801f4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f500:	89ab      	ldrh	r3, [r5, #12]
 801f502:	2b01      	cmp	r3, #1
 801f504:	d907      	bls.n	801f516 <_fwalk_reent+0x3a>
 801f506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f50a:	3301      	adds	r3, #1
 801f50c:	d003      	beq.n	801f516 <_fwalk_reent+0x3a>
 801f50e:	4629      	mov	r1, r5
 801f510:	4630      	mov	r0, r6
 801f512:	47c0      	blx	r8
 801f514:	4307      	orrs	r7, r0
 801f516:	3568      	adds	r5, #104	; 0x68
 801f518:	e7e9      	b.n	801f4ee <_fwalk_reent+0x12>
	...

0801f51c <_findenv_r>:
 801f51c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f520:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801f590 <_findenv_r+0x74>
 801f524:	4607      	mov	r7, r0
 801f526:	4689      	mov	r9, r1
 801f528:	4616      	mov	r6, r2
 801f52a:	f000 fabf 	bl	801faac <__env_lock>
 801f52e:	f8da 4000 	ldr.w	r4, [sl]
 801f532:	b134      	cbz	r4, 801f542 <_findenv_r+0x26>
 801f534:	464b      	mov	r3, r9
 801f536:	4698      	mov	r8, r3
 801f538:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f53c:	b13a      	cbz	r2, 801f54e <_findenv_r+0x32>
 801f53e:	2a3d      	cmp	r2, #61	; 0x3d
 801f540:	d1f9      	bne.n	801f536 <_findenv_r+0x1a>
 801f542:	4638      	mov	r0, r7
 801f544:	f000 fab8 	bl	801fab8 <__env_unlock>
 801f548:	2000      	movs	r0, #0
 801f54a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f54e:	eba8 0809 	sub.w	r8, r8, r9
 801f552:	46a3      	mov	fp, r4
 801f554:	f854 0b04 	ldr.w	r0, [r4], #4
 801f558:	2800      	cmp	r0, #0
 801f55a:	d0f2      	beq.n	801f542 <_findenv_r+0x26>
 801f55c:	4642      	mov	r2, r8
 801f55e:	4649      	mov	r1, r9
 801f560:	f000 f9ef 	bl	801f942 <strncmp>
 801f564:	2800      	cmp	r0, #0
 801f566:	d1f4      	bne.n	801f552 <_findenv_r+0x36>
 801f568:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f56c:	eb03 0508 	add.w	r5, r3, r8
 801f570:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f574:	2b3d      	cmp	r3, #61	; 0x3d
 801f576:	d1ec      	bne.n	801f552 <_findenv_r+0x36>
 801f578:	f8da 3000 	ldr.w	r3, [sl]
 801f57c:	ebab 0303 	sub.w	r3, fp, r3
 801f580:	109b      	asrs	r3, r3, #2
 801f582:	4638      	mov	r0, r7
 801f584:	6033      	str	r3, [r6, #0]
 801f586:	f000 fa97 	bl	801fab8 <__env_unlock>
 801f58a:	1c68      	adds	r0, r5, #1
 801f58c:	e7dd      	b.n	801f54a <_findenv_r+0x2e>
 801f58e:	bf00      	nop
 801f590:	24000004 	.word	0x24000004

0801f594 <_getenv_r>:
 801f594:	b507      	push	{r0, r1, r2, lr}
 801f596:	aa01      	add	r2, sp, #4
 801f598:	f7ff ffc0 	bl	801f51c <_findenv_r>
 801f59c:	b003      	add	sp, #12
 801f59e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f5a4 <__gettzinfo>:
 801f5a4:	4800      	ldr	r0, [pc, #0]	; (801f5a8 <__gettzinfo+0x4>)
 801f5a6:	4770      	bx	lr
 801f5a8:	24000128 	.word	0x24000128

0801f5ac <gmtime_r>:
 801f5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f5b4:	460c      	mov	r4, r1
 801f5b6:	4a4f      	ldr	r2, [pc, #316]	; (801f6f4 <gmtime_r+0x148>)
 801f5b8:	2300      	movs	r3, #0
 801f5ba:	4630      	mov	r0, r6
 801f5bc:	4639      	mov	r1, r7
 801f5be:	f7e0 fef1 	bl	80003a4 <__aeabi_ldivmod>
 801f5c2:	4639      	mov	r1, r7
 801f5c4:	4605      	mov	r5, r0
 801f5c6:	4a4b      	ldr	r2, [pc, #300]	; (801f6f4 <gmtime_r+0x148>)
 801f5c8:	4630      	mov	r0, r6
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	f7e0 feea 	bl	80003a4 <__aeabi_ldivmod>
 801f5d0:	2a00      	cmp	r2, #0
 801f5d2:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f5d6:	bfb7      	itett	lt
 801f5d8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f5dc:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 801f5e0:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 801f5e4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f5e8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 801f5ec:	fbb2 f1f0 	udiv	r1, r2, r0
 801f5f0:	fb00 2211 	mls	r2, r0, r1, r2
 801f5f4:	203c      	movs	r0, #60	; 0x3c
 801f5f6:	60a1      	str	r1, [r4, #8]
 801f5f8:	fbb2 f1f0 	udiv	r1, r2, r0
 801f5fc:	fb00 2211 	mls	r2, r0, r1, r2
 801f600:	6061      	str	r1, [r4, #4]
 801f602:	6022      	str	r2, [r4, #0]
 801f604:	2107      	movs	r1, #7
 801f606:	1cda      	adds	r2, r3, #3
 801f608:	fb92 f1f1 	sdiv	r1, r2, r1
 801f60c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801f610:	1a52      	subs	r2, r2, r1
 801f612:	bf48      	it	mi
 801f614:	3207      	addmi	r2, #7
 801f616:	4d38      	ldr	r5, [pc, #224]	; (801f6f8 <gmtime_r+0x14c>)
 801f618:	4838      	ldr	r0, [pc, #224]	; (801f6fc <gmtime_r+0x150>)
 801f61a:	61a2      	str	r2, [r4, #24]
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	bfb7      	itett	lt
 801f620:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 801f624:	fb93 f5f5 	sdivge	r5, r3, r5
 801f628:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 801f62c:	fb92 f5f5 	sdivlt	r5, r2, r5
 801f630:	fb00 3005 	mla	r0, r0, r5, r3
 801f634:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f638:	fbb0 f2f2 	udiv	r2, r0, r2
 801f63c:	4402      	add	r2, r0
 801f63e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801f642:	fbb0 f1f3 	udiv	r1, r0, r3
 801f646:	1a52      	subs	r2, r2, r1
 801f648:	f240 1c6d 	movw	ip, #365	; 0x16d
 801f64c:	492c      	ldr	r1, [pc, #176]	; (801f700 <gmtime_r+0x154>)
 801f64e:	fbb0 f1f1 	udiv	r1, r0, r1
 801f652:	2764      	movs	r7, #100	; 0x64
 801f654:	1a52      	subs	r2, r2, r1
 801f656:	fbb2 f1fc 	udiv	r1, r2, ip
 801f65a:	fbb2 f3f3 	udiv	r3, r2, r3
 801f65e:	fbb1 f6f7 	udiv	r6, r1, r7
 801f662:	1af3      	subs	r3, r6, r3
 801f664:	4403      	add	r3, r0
 801f666:	fb0c 3311 	mls	r3, ip, r1, r3
 801f66a:	2299      	movs	r2, #153	; 0x99
 801f66c:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 801f670:	f10e 0e02 	add.w	lr, lr, #2
 801f674:	f103 0c01 	add.w	ip, r3, #1
 801f678:	fbbe f0f2 	udiv	r0, lr, r2
 801f67c:	4342      	muls	r2, r0
 801f67e:	3202      	adds	r2, #2
 801f680:	f04f 0805 	mov.w	r8, #5
 801f684:	fbb2 f2f8 	udiv	r2, r2, r8
 801f688:	ebac 0c02 	sub.w	ip, ip, r2
 801f68c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 801f690:	4596      	cmp	lr, r2
 801f692:	bf94      	ite	ls
 801f694:	2202      	movls	r2, #2
 801f696:	f06f 0209 	mvnhi.w	r2, #9
 801f69a:	4410      	add	r0, r2
 801f69c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f6a0:	fb02 1505 	mla	r5, r2, r5, r1
 801f6a4:	2801      	cmp	r0, #1
 801f6a6:	bf98      	it	ls
 801f6a8:	3501      	addls	r5, #1
 801f6aa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f6ae:	d30d      	bcc.n	801f6cc <gmtime_r+0x120>
 801f6b0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f6b4:	61e3      	str	r3, [r4, #28]
 801f6b6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	e9c4 0504 	strd	r0, r5, [r4, #16]
 801f6c0:	f8c4 c00c 	str.w	ip, [r4, #12]
 801f6c4:	6223      	str	r3, [r4, #32]
 801f6c6:	4620      	mov	r0, r4
 801f6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6cc:	078a      	lsls	r2, r1, #30
 801f6ce:	d102      	bne.n	801f6d6 <gmtime_r+0x12a>
 801f6d0:	fb07 1616 	mls	r6, r7, r6, r1
 801f6d4:	b95e      	cbnz	r6, 801f6ee <gmtime_r+0x142>
 801f6d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f6da:	fbb1 f6f2 	udiv	r6, r1, r2
 801f6de:	fb02 1216 	mls	r2, r2, r6, r1
 801f6e2:	fab2 f282 	clz	r2, r2
 801f6e6:	0952      	lsrs	r2, r2, #5
 801f6e8:	333b      	adds	r3, #59	; 0x3b
 801f6ea:	4413      	add	r3, r2
 801f6ec:	e7e2      	b.n	801f6b4 <gmtime_r+0x108>
 801f6ee:	2201      	movs	r2, #1
 801f6f0:	e7fa      	b.n	801f6e8 <gmtime_r+0x13c>
 801f6f2:	bf00      	nop
 801f6f4:	00015180 	.word	0x00015180
 801f6f8:	00023ab1 	.word	0x00023ab1
 801f6fc:	fffdc54f 	.word	0xfffdc54f
 801f700:	00023ab0 	.word	0x00023ab0

0801f704 <__retarget_lock_init_recursive>:
 801f704:	4770      	bx	lr

0801f706 <__retarget_lock_acquire>:
 801f706:	4770      	bx	lr

0801f708 <__retarget_lock_acquire_recursive>:
 801f708:	4770      	bx	lr

0801f70a <__retarget_lock_release>:
 801f70a:	4770      	bx	lr

0801f70c <__retarget_lock_release_recursive>:
 801f70c:	4770      	bx	lr

0801f70e <__swhatbuf_r>:
 801f70e:	b570      	push	{r4, r5, r6, lr}
 801f710:	460e      	mov	r6, r1
 801f712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f716:	2900      	cmp	r1, #0
 801f718:	b096      	sub	sp, #88	; 0x58
 801f71a:	4614      	mov	r4, r2
 801f71c:	461d      	mov	r5, r3
 801f71e:	da08      	bge.n	801f732 <__swhatbuf_r+0x24>
 801f720:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f724:	2200      	movs	r2, #0
 801f726:	602a      	str	r2, [r5, #0]
 801f728:	061a      	lsls	r2, r3, #24
 801f72a:	d410      	bmi.n	801f74e <__swhatbuf_r+0x40>
 801f72c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f730:	e00e      	b.n	801f750 <__swhatbuf_r+0x42>
 801f732:	466a      	mov	r2, sp
 801f734:	f000 f9c6 	bl	801fac4 <_fstat_r>
 801f738:	2800      	cmp	r0, #0
 801f73a:	dbf1      	blt.n	801f720 <__swhatbuf_r+0x12>
 801f73c:	9a01      	ldr	r2, [sp, #4]
 801f73e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f742:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f746:	425a      	negs	r2, r3
 801f748:	415a      	adcs	r2, r3
 801f74a:	602a      	str	r2, [r5, #0]
 801f74c:	e7ee      	b.n	801f72c <__swhatbuf_r+0x1e>
 801f74e:	2340      	movs	r3, #64	; 0x40
 801f750:	2000      	movs	r0, #0
 801f752:	6023      	str	r3, [r4, #0]
 801f754:	b016      	add	sp, #88	; 0x58
 801f756:	bd70      	pop	{r4, r5, r6, pc}

0801f758 <__smakebuf_r>:
 801f758:	898b      	ldrh	r3, [r1, #12]
 801f75a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f75c:	079d      	lsls	r5, r3, #30
 801f75e:	4606      	mov	r6, r0
 801f760:	460c      	mov	r4, r1
 801f762:	d507      	bpl.n	801f774 <__smakebuf_r+0x1c>
 801f764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f768:	6023      	str	r3, [r4, #0]
 801f76a:	6123      	str	r3, [r4, #16]
 801f76c:	2301      	movs	r3, #1
 801f76e:	6163      	str	r3, [r4, #20]
 801f770:	b002      	add	sp, #8
 801f772:	bd70      	pop	{r4, r5, r6, pc}
 801f774:	ab01      	add	r3, sp, #4
 801f776:	466a      	mov	r2, sp
 801f778:	f7ff ffc9 	bl	801f70e <__swhatbuf_r>
 801f77c:	9900      	ldr	r1, [sp, #0]
 801f77e:	4605      	mov	r5, r0
 801f780:	4630      	mov	r0, r6
 801f782:	f7fe fdff 	bl	801e384 <_malloc_r>
 801f786:	b948      	cbnz	r0, 801f79c <__smakebuf_r+0x44>
 801f788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f78c:	059a      	lsls	r2, r3, #22
 801f78e:	d4ef      	bmi.n	801f770 <__smakebuf_r+0x18>
 801f790:	f023 0303 	bic.w	r3, r3, #3
 801f794:	f043 0302 	orr.w	r3, r3, #2
 801f798:	81a3      	strh	r3, [r4, #12]
 801f79a:	e7e3      	b.n	801f764 <__smakebuf_r+0xc>
 801f79c:	4b0d      	ldr	r3, [pc, #52]	; (801f7d4 <__smakebuf_r+0x7c>)
 801f79e:	62b3      	str	r3, [r6, #40]	; 0x28
 801f7a0:	89a3      	ldrh	r3, [r4, #12]
 801f7a2:	6020      	str	r0, [r4, #0]
 801f7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f7a8:	81a3      	strh	r3, [r4, #12]
 801f7aa:	9b00      	ldr	r3, [sp, #0]
 801f7ac:	6163      	str	r3, [r4, #20]
 801f7ae:	9b01      	ldr	r3, [sp, #4]
 801f7b0:	6120      	str	r0, [r4, #16]
 801f7b2:	b15b      	cbz	r3, 801f7cc <__smakebuf_r+0x74>
 801f7b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f7b8:	4630      	mov	r0, r6
 801f7ba:	f000 f995 	bl	801fae8 <_isatty_r>
 801f7be:	b128      	cbz	r0, 801f7cc <__smakebuf_r+0x74>
 801f7c0:	89a3      	ldrh	r3, [r4, #12]
 801f7c2:	f023 0303 	bic.w	r3, r3, #3
 801f7c6:	f043 0301 	orr.w	r3, r3, #1
 801f7ca:	81a3      	strh	r3, [r4, #12]
 801f7cc:	89a0      	ldrh	r0, [r4, #12]
 801f7ce:	4305      	orrs	r5, r0
 801f7d0:	81a5      	strh	r5, [r4, #12]
 801f7d2:	e7cd      	b.n	801f770 <__smakebuf_r+0x18>
 801f7d4:	0801f379 	.word	0x0801f379

0801f7d8 <__malloc_lock>:
 801f7d8:	4801      	ldr	r0, [pc, #4]	; (801f7e0 <__malloc_lock+0x8>)
 801f7da:	f7ff bf95 	b.w	801f708 <__retarget_lock_acquire_recursive>
 801f7de:	bf00      	nop
 801f7e0:	2400f74e 	.word	0x2400f74e

0801f7e4 <__malloc_unlock>:
 801f7e4:	4801      	ldr	r0, [pc, #4]	; (801f7ec <__malloc_unlock+0x8>)
 801f7e6:	f7ff bf91 	b.w	801f70c <__retarget_lock_release_recursive>
 801f7ea:	bf00      	nop
 801f7ec:	2400f74e 	.word	0x2400f74e

0801f7f0 <_realloc_r>:
 801f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f7f4:	4680      	mov	r8, r0
 801f7f6:	4614      	mov	r4, r2
 801f7f8:	460e      	mov	r6, r1
 801f7fa:	b921      	cbnz	r1, 801f806 <_realloc_r+0x16>
 801f7fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f800:	4611      	mov	r1, r2
 801f802:	f7fe bdbf 	b.w	801e384 <_malloc_r>
 801f806:	b92a      	cbnz	r2, 801f814 <_realloc_r+0x24>
 801f808:	f7fe fd50 	bl	801e2ac <_free_r>
 801f80c:	4625      	mov	r5, r4
 801f80e:	4628      	mov	r0, r5
 801f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f814:	f000 f98a 	bl	801fb2c <_malloc_usable_size_r>
 801f818:	4284      	cmp	r4, r0
 801f81a:	4607      	mov	r7, r0
 801f81c:	d802      	bhi.n	801f824 <_realloc_r+0x34>
 801f81e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f822:	d812      	bhi.n	801f84a <_realloc_r+0x5a>
 801f824:	4621      	mov	r1, r4
 801f826:	4640      	mov	r0, r8
 801f828:	f7fe fdac 	bl	801e384 <_malloc_r>
 801f82c:	4605      	mov	r5, r0
 801f82e:	2800      	cmp	r0, #0
 801f830:	d0ed      	beq.n	801f80e <_realloc_r+0x1e>
 801f832:	42bc      	cmp	r4, r7
 801f834:	4622      	mov	r2, r4
 801f836:	4631      	mov	r1, r6
 801f838:	bf28      	it	cs
 801f83a:	463a      	movcs	r2, r7
 801f83c:	f7fe fd20 	bl	801e280 <memcpy>
 801f840:	4631      	mov	r1, r6
 801f842:	4640      	mov	r0, r8
 801f844:	f7fe fd32 	bl	801e2ac <_free_r>
 801f848:	e7e1      	b.n	801f80e <_realloc_r+0x1e>
 801f84a:	4635      	mov	r5, r6
 801f84c:	e7df      	b.n	801f80e <_realloc_r+0x1e>
	...

0801f850 <siscanf>:
 801f850:	b40e      	push	{r1, r2, r3}
 801f852:	b510      	push	{r4, lr}
 801f854:	b09f      	sub	sp, #124	; 0x7c
 801f856:	ac21      	add	r4, sp, #132	; 0x84
 801f858:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f85c:	f854 2b04 	ldr.w	r2, [r4], #4
 801f860:	9201      	str	r2, [sp, #4]
 801f862:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f866:	9004      	str	r0, [sp, #16]
 801f868:	9008      	str	r0, [sp, #32]
 801f86a:	f7e0 fd93 	bl	8000394 <strlen>
 801f86e:	4b0c      	ldr	r3, [pc, #48]	; (801f8a0 <siscanf+0x50>)
 801f870:	9005      	str	r0, [sp, #20]
 801f872:	9009      	str	r0, [sp, #36]	; 0x24
 801f874:	930d      	str	r3, [sp, #52]	; 0x34
 801f876:	480b      	ldr	r0, [pc, #44]	; (801f8a4 <siscanf+0x54>)
 801f878:	9a01      	ldr	r2, [sp, #4]
 801f87a:	6800      	ldr	r0, [r0, #0]
 801f87c:	9403      	str	r4, [sp, #12]
 801f87e:	2300      	movs	r3, #0
 801f880:	9311      	str	r3, [sp, #68]	; 0x44
 801f882:	9316      	str	r3, [sp, #88]	; 0x58
 801f884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f888:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f88c:	a904      	add	r1, sp, #16
 801f88e:	4623      	mov	r3, r4
 801f890:	f000 f9ae 	bl	801fbf0 <__ssvfiscanf_r>
 801f894:	b01f      	add	sp, #124	; 0x7c
 801f896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f89a:	b003      	add	sp, #12
 801f89c:	4770      	bx	lr
 801f89e:	bf00      	nop
 801f8a0:	0801f8cb 	.word	0x0801f8cb
 801f8a4:	240000b8 	.word	0x240000b8

0801f8a8 <__sread>:
 801f8a8:	b510      	push	{r4, lr}
 801f8aa:	460c      	mov	r4, r1
 801f8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f8b0:	f000 fc68 	bl	8020184 <_read_r>
 801f8b4:	2800      	cmp	r0, #0
 801f8b6:	bfab      	itete	ge
 801f8b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f8ba:	89a3      	ldrhlt	r3, [r4, #12]
 801f8bc:	181b      	addge	r3, r3, r0
 801f8be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f8c2:	bfac      	ite	ge
 801f8c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f8c6:	81a3      	strhlt	r3, [r4, #12]
 801f8c8:	bd10      	pop	{r4, pc}

0801f8ca <__seofread>:
 801f8ca:	2000      	movs	r0, #0
 801f8cc:	4770      	bx	lr

0801f8ce <__swrite>:
 801f8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f8d2:	461f      	mov	r7, r3
 801f8d4:	898b      	ldrh	r3, [r1, #12]
 801f8d6:	05db      	lsls	r3, r3, #23
 801f8d8:	4605      	mov	r5, r0
 801f8da:	460c      	mov	r4, r1
 801f8dc:	4616      	mov	r6, r2
 801f8de:	d505      	bpl.n	801f8ec <__swrite+0x1e>
 801f8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f8e4:	2302      	movs	r3, #2
 801f8e6:	2200      	movs	r2, #0
 801f8e8:	f000 f90e 	bl	801fb08 <_lseek_r>
 801f8ec:	89a3      	ldrh	r3, [r4, #12]
 801f8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f8f6:	81a3      	strh	r3, [r4, #12]
 801f8f8:	4632      	mov	r2, r6
 801f8fa:	463b      	mov	r3, r7
 801f8fc:	4628      	mov	r0, r5
 801f8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f902:	f000 b8b1 	b.w	801fa68 <_write_r>

0801f906 <__sseek>:
 801f906:	b510      	push	{r4, lr}
 801f908:	460c      	mov	r4, r1
 801f90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f90e:	f000 f8fb 	bl	801fb08 <_lseek_r>
 801f912:	1c43      	adds	r3, r0, #1
 801f914:	89a3      	ldrh	r3, [r4, #12]
 801f916:	bf15      	itete	ne
 801f918:	6560      	strne	r0, [r4, #84]	; 0x54
 801f91a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f91e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f922:	81a3      	strheq	r3, [r4, #12]
 801f924:	bf18      	it	ne
 801f926:	81a3      	strhne	r3, [r4, #12]
 801f928:	bd10      	pop	{r4, pc}

0801f92a <__sclose>:
 801f92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f92e:	f000 b8ad 	b.w	801fa8c <_close_r>

0801f932 <strcpy>:
 801f932:	4603      	mov	r3, r0
 801f934:	f811 2b01 	ldrb.w	r2, [r1], #1
 801f938:	f803 2b01 	strb.w	r2, [r3], #1
 801f93c:	2a00      	cmp	r2, #0
 801f93e:	d1f9      	bne.n	801f934 <strcpy+0x2>
 801f940:	4770      	bx	lr

0801f942 <strncmp>:
 801f942:	b510      	push	{r4, lr}
 801f944:	b17a      	cbz	r2, 801f966 <strncmp+0x24>
 801f946:	4603      	mov	r3, r0
 801f948:	3901      	subs	r1, #1
 801f94a:	1884      	adds	r4, r0, r2
 801f94c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f950:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f954:	4290      	cmp	r0, r2
 801f956:	d101      	bne.n	801f95c <strncmp+0x1a>
 801f958:	42a3      	cmp	r3, r4
 801f95a:	d101      	bne.n	801f960 <strncmp+0x1e>
 801f95c:	1a80      	subs	r0, r0, r2
 801f95e:	bd10      	pop	{r4, pc}
 801f960:	2800      	cmp	r0, #0
 801f962:	d1f3      	bne.n	801f94c <strncmp+0xa>
 801f964:	e7fa      	b.n	801f95c <strncmp+0x1a>
 801f966:	4610      	mov	r0, r2
 801f968:	e7f9      	b.n	801f95e <strncmp+0x1c>
	...

0801f96c <_strtoul_l.constprop.0>:
 801f96c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f970:	4f36      	ldr	r7, [pc, #216]	; (801fa4c <_strtoul_l.constprop.0+0xe0>)
 801f972:	4686      	mov	lr, r0
 801f974:	460d      	mov	r5, r1
 801f976:	4628      	mov	r0, r5
 801f978:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f97c:	5de6      	ldrb	r6, [r4, r7]
 801f97e:	f016 0608 	ands.w	r6, r6, #8
 801f982:	d1f8      	bne.n	801f976 <_strtoul_l.constprop.0+0xa>
 801f984:	2c2d      	cmp	r4, #45	; 0x2d
 801f986:	d12f      	bne.n	801f9e8 <_strtoul_l.constprop.0+0x7c>
 801f988:	782c      	ldrb	r4, [r5, #0]
 801f98a:	2601      	movs	r6, #1
 801f98c:	1c85      	adds	r5, r0, #2
 801f98e:	2b00      	cmp	r3, #0
 801f990:	d057      	beq.n	801fa42 <_strtoul_l.constprop.0+0xd6>
 801f992:	2b10      	cmp	r3, #16
 801f994:	d109      	bne.n	801f9aa <_strtoul_l.constprop.0+0x3e>
 801f996:	2c30      	cmp	r4, #48	; 0x30
 801f998:	d107      	bne.n	801f9aa <_strtoul_l.constprop.0+0x3e>
 801f99a:	7828      	ldrb	r0, [r5, #0]
 801f99c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801f9a0:	2858      	cmp	r0, #88	; 0x58
 801f9a2:	d149      	bne.n	801fa38 <_strtoul_l.constprop.0+0xcc>
 801f9a4:	786c      	ldrb	r4, [r5, #1]
 801f9a6:	2310      	movs	r3, #16
 801f9a8:	3502      	adds	r5, #2
 801f9aa:	f04f 38ff 	mov.w	r8, #4294967295
 801f9ae:	2700      	movs	r7, #0
 801f9b0:	fbb8 f8f3 	udiv	r8, r8, r3
 801f9b4:	fb03 f908 	mul.w	r9, r3, r8
 801f9b8:	ea6f 0909 	mvn.w	r9, r9
 801f9bc:	4638      	mov	r0, r7
 801f9be:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801f9c2:	f1bc 0f09 	cmp.w	ip, #9
 801f9c6:	d814      	bhi.n	801f9f2 <_strtoul_l.constprop.0+0x86>
 801f9c8:	4664      	mov	r4, ip
 801f9ca:	42a3      	cmp	r3, r4
 801f9cc:	dd22      	ble.n	801fa14 <_strtoul_l.constprop.0+0xa8>
 801f9ce:	2f00      	cmp	r7, #0
 801f9d0:	db1d      	blt.n	801fa0e <_strtoul_l.constprop.0+0xa2>
 801f9d2:	4580      	cmp	r8, r0
 801f9d4:	d31b      	bcc.n	801fa0e <_strtoul_l.constprop.0+0xa2>
 801f9d6:	d101      	bne.n	801f9dc <_strtoul_l.constprop.0+0x70>
 801f9d8:	45a1      	cmp	r9, r4
 801f9da:	db18      	blt.n	801fa0e <_strtoul_l.constprop.0+0xa2>
 801f9dc:	fb00 4003 	mla	r0, r0, r3, r4
 801f9e0:	2701      	movs	r7, #1
 801f9e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f9e6:	e7ea      	b.n	801f9be <_strtoul_l.constprop.0+0x52>
 801f9e8:	2c2b      	cmp	r4, #43	; 0x2b
 801f9ea:	bf04      	itt	eq
 801f9ec:	782c      	ldrbeq	r4, [r5, #0]
 801f9ee:	1c85      	addeq	r5, r0, #2
 801f9f0:	e7cd      	b.n	801f98e <_strtoul_l.constprop.0+0x22>
 801f9f2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801f9f6:	f1bc 0f19 	cmp.w	ip, #25
 801f9fa:	d801      	bhi.n	801fa00 <_strtoul_l.constprop.0+0x94>
 801f9fc:	3c37      	subs	r4, #55	; 0x37
 801f9fe:	e7e4      	b.n	801f9ca <_strtoul_l.constprop.0+0x5e>
 801fa00:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801fa04:	f1bc 0f19 	cmp.w	ip, #25
 801fa08:	d804      	bhi.n	801fa14 <_strtoul_l.constprop.0+0xa8>
 801fa0a:	3c57      	subs	r4, #87	; 0x57
 801fa0c:	e7dd      	b.n	801f9ca <_strtoul_l.constprop.0+0x5e>
 801fa0e:	f04f 37ff 	mov.w	r7, #4294967295
 801fa12:	e7e6      	b.n	801f9e2 <_strtoul_l.constprop.0+0x76>
 801fa14:	2f00      	cmp	r7, #0
 801fa16:	da07      	bge.n	801fa28 <_strtoul_l.constprop.0+0xbc>
 801fa18:	2322      	movs	r3, #34	; 0x22
 801fa1a:	f8ce 3000 	str.w	r3, [lr]
 801fa1e:	f04f 30ff 	mov.w	r0, #4294967295
 801fa22:	b932      	cbnz	r2, 801fa32 <_strtoul_l.constprop.0+0xc6>
 801fa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fa28:	b106      	cbz	r6, 801fa2c <_strtoul_l.constprop.0+0xc0>
 801fa2a:	4240      	negs	r0, r0
 801fa2c:	2a00      	cmp	r2, #0
 801fa2e:	d0f9      	beq.n	801fa24 <_strtoul_l.constprop.0+0xb8>
 801fa30:	b107      	cbz	r7, 801fa34 <_strtoul_l.constprop.0+0xc8>
 801fa32:	1e69      	subs	r1, r5, #1
 801fa34:	6011      	str	r1, [r2, #0]
 801fa36:	e7f5      	b.n	801fa24 <_strtoul_l.constprop.0+0xb8>
 801fa38:	2430      	movs	r4, #48	; 0x30
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	d1b5      	bne.n	801f9aa <_strtoul_l.constprop.0+0x3e>
 801fa3e:	2308      	movs	r3, #8
 801fa40:	e7b3      	b.n	801f9aa <_strtoul_l.constprop.0+0x3e>
 801fa42:	2c30      	cmp	r4, #48	; 0x30
 801fa44:	d0a9      	beq.n	801f99a <_strtoul_l.constprop.0+0x2e>
 801fa46:	230a      	movs	r3, #10
 801fa48:	e7af      	b.n	801f9aa <_strtoul_l.constprop.0+0x3e>
 801fa4a:	bf00      	nop
 801fa4c:	080227e1 	.word	0x080227e1

0801fa50 <_strtoul_r>:
 801fa50:	f7ff bf8c 	b.w	801f96c <_strtoul_l.constprop.0>

0801fa54 <strtoul>:
 801fa54:	4613      	mov	r3, r2
 801fa56:	460a      	mov	r2, r1
 801fa58:	4601      	mov	r1, r0
 801fa5a:	4802      	ldr	r0, [pc, #8]	; (801fa64 <strtoul+0x10>)
 801fa5c:	6800      	ldr	r0, [r0, #0]
 801fa5e:	f7ff bf85 	b.w	801f96c <_strtoul_l.constprop.0>
 801fa62:	bf00      	nop
 801fa64:	240000b8 	.word	0x240000b8

0801fa68 <_write_r>:
 801fa68:	b538      	push	{r3, r4, r5, lr}
 801fa6a:	4d07      	ldr	r5, [pc, #28]	; (801fa88 <_write_r+0x20>)
 801fa6c:	4604      	mov	r4, r0
 801fa6e:	4608      	mov	r0, r1
 801fa70:	4611      	mov	r1, r2
 801fa72:	2200      	movs	r2, #0
 801fa74:	602a      	str	r2, [r5, #0]
 801fa76:	461a      	mov	r2, r3
 801fa78:	f7e1 fd52 	bl	8001520 <_write>
 801fa7c:	1c43      	adds	r3, r0, #1
 801fa7e:	d102      	bne.n	801fa86 <_write_r+0x1e>
 801fa80:	682b      	ldr	r3, [r5, #0]
 801fa82:	b103      	cbz	r3, 801fa86 <_write_r+0x1e>
 801fa84:	6023      	str	r3, [r4, #0]
 801fa86:	bd38      	pop	{r3, r4, r5, pc}
 801fa88:	2400f754 	.word	0x2400f754

0801fa8c <_close_r>:
 801fa8c:	b538      	push	{r3, r4, r5, lr}
 801fa8e:	4d06      	ldr	r5, [pc, #24]	; (801faa8 <_close_r+0x1c>)
 801fa90:	2300      	movs	r3, #0
 801fa92:	4604      	mov	r4, r0
 801fa94:	4608      	mov	r0, r1
 801fa96:	602b      	str	r3, [r5, #0]
 801fa98:	f7e1 fd50 	bl	800153c <_close>
 801fa9c:	1c43      	adds	r3, r0, #1
 801fa9e:	d102      	bne.n	801faa6 <_close_r+0x1a>
 801faa0:	682b      	ldr	r3, [r5, #0]
 801faa2:	b103      	cbz	r3, 801faa6 <_close_r+0x1a>
 801faa4:	6023      	str	r3, [r4, #0]
 801faa6:	bd38      	pop	{r3, r4, r5, pc}
 801faa8:	2400f754 	.word	0x2400f754

0801faac <__env_lock>:
 801faac:	4801      	ldr	r0, [pc, #4]	; (801fab4 <__env_lock+0x8>)
 801faae:	f7ff be2b 	b.w	801f708 <__retarget_lock_acquire_recursive>
 801fab2:	bf00      	nop
 801fab4:	2400f74d 	.word	0x2400f74d

0801fab8 <__env_unlock>:
 801fab8:	4801      	ldr	r0, [pc, #4]	; (801fac0 <__env_unlock+0x8>)
 801faba:	f7ff be27 	b.w	801f70c <__retarget_lock_release_recursive>
 801fabe:	bf00      	nop
 801fac0:	2400f74d 	.word	0x2400f74d

0801fac4 <_fstat_r>:
 801fac4:	b538      	push	{r3, r4, r5, lr}
 801fac6:	4d07      	ldr	r5, [pc, #28]	; (801fae4 <_fstat_r+0x20>)
 801fac8:	2300      	movs	r3, #0
 801faca:	4604      	mov	r4, r0
 801facc:	4608      	mov	r0, r1
 801face:	4611      	mov	r1, r2
 801fad0:	602b      	str	r3, [r5, #0]
 801fad2:	f7e1 fd36 	bl	8001542 <_fstat>
 801fad6:	1c43      	adds	r3, r0, #1
 801fad8:	d102      	bne.n	801fae0 <_fstat_r+0x1c>
 801fada:	682b      	ldr	r3, [r5, #0]
 801fadc:	b103      	cbz	r3, 801fae0 <_fstat_r+0x1c>
 801fade:	6023      	str	r3, [r4, #0]
 801fae0:	bd38      	pop	{r3, r4, r5, pc}
 801fae2:	bf00      	nop
 801fae4:	2400f754 	.word	0x2400f754

0801fae8 <_isatty_r>:
 801fae8:	b538      	push	{r3, r4, r5, lr}
 801faea:	4d06      	ldr	r5, [pc, #24]	; (801fb04 <_isatty_r+0x1c>)
 801faec:	2300      	movs	r3, #0
 801faee:	4604      	mov	r4, r0
 801faf0:	4608      	mov	r0, r1
 801faf2:	602b      	str	r3, [r5, #0]
 801faf4:	f7e1 fd2a 	bl	800154c <_isatty>
 801faf8:	1c43      	adds	r3, r0, #1
 801fafa:	d102      	bne.n	801fb02 <_isatty_r+0x1a>
 801fafc:	682b      	ldr	r3, [r5, #0]
 801fafe:	b103      	cbz	r3, 801fb02 <_isatty_r+0x1a>
 801fb00:	6023      	str	r3, [r4, #0]
 801fb02:	bd38      	pop	{r3, r4, r5, pc}
 801fb04:	2400f754 	.word	0x2400f754

0801fb08 <_lseek_r>:
 801fb08:	b538      	push	{r3, r4, r5, lr}
 801fb0a:	4d07      	ldr	r5, [pc, #28]	; (801fb28 <_lseek_r+0x20>)
 801fb0c:	4604      	mov	r4, r0
 801fb0e:	4608      	mov	r0, r1
 801fb10:	4611      	mov	r1, r2
 801fb12:	2200      	movs	r2, #0
 801fb14:	602a      	str	r2, [r5, #0]
 801fb16:	461a      	mov	r2, r3
 801fb18:	f7e1 fd1a 	bl	8001550 <_lseek>
 801fb1c:	1c43      	adds	r3, r0, #1
 801fb1e:	d102      	bne.n	801fb26 <_lseek_r+0x1e>
 801fb20:	682b      	ldr	r3, [r5, #0]
 801fb22:	b103      	cbz	r3, 801fb26 <_lseek_r+0x1e>
 801fb24:	6023      	str	r3, [r4, #0]
 801fb26:	bd38      	pop	{r3, r4, r5, pc}
 801fb28:	2400f754 	.word	0x2400f754

0801fb2c <_malloc_usable_size_r>:
 801fb2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb30:	1f18      	subs	r0, r3, #4
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	bfbc      	itt	lt
 801fb36:	580b      	ldrlt	r3, [r1, r0]
 801fb38:	18c0      	addlt	r0, r0, r3
 801fb3a:	4770      	bx	lr

0801fb3c <_sungetc_r>:
 801fb3c:	b538      	push	{r3, r4, r5, lr}
 801fb3e:	1c4b      	adds	r3, r1, #1
 801fb40:	4614      	mov	r4, r2
 801fb42:	d103      	bne.n	801fb4c <_sungetc_r+0x10>
 801fb44:	f04f 35ff 	mov.w	r5, #4294967295
 801fb48:	4628      	mov	r0, r5
 801fb4a:	bd38      	pop	{r3, r4, r5, pc}
 801fb4c:	8993      	ldrh	r3, [r2, #12]
 801fb4e:	f023 0320 	bic.w	r3, r3, #32
 801fb52:	8193      	strh	r3, [r2, #12]
 801fb54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fb56:	6852      	ldr	r2, [r2, #4]
 801fb58:	b2cd      	uxtb	r5, r1
 801fb5a:	b18b      	cbz	r3, 801fb80 <_sungetc_r+0x44>
 801fb5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fb5e:	4293      	cmp	r3, r2
 801fb60:	dd08      	ble.n	801fb74 <_sungetc_r+0x38>
 801fb62:	6823      	ldr	r3, [r4, #0]
 801fb64:	1e5a      	subs	r2, r3, #1
 801fb66:	6022      	str	r2, [r4, #0]
 801fb68:	f803 5c01 	strb.w	r5, [r3, #-1]
 801fb6c:	6863      	ldr	r3, [r4, #4]
 801fb6e:	3301      	adds	r3, #1
 801fb70:	6063      	str	r3, [r4, #4]
 801fb72:	e7e9      	b.n	801fb48 <_sungetc_r+0xc>
 801fb74:	4621      	mov	r1, r4
 801fb76:	f000 fbd3 	bl	8020320 <__submore>
 801fb7a:	2800      	cmp	r0, #0
 801fb7c:	d0f1      	beq.n	801fb62 <_sungetc_r+0x26>
 801fb7e:	e7e1      	b.n	801fb44 <_sungetc_r+0x8>
 801fb80:	6921      	ldr	r1, [r4, #16]
 801fb82:	6823      	ldr	r3, [r4, #0]
 801fb84:	b151      	cbz	r1, 801fb9c <_sungetc_r+0x60>
 801fb86:	4299      	cmp	r1, r3
 801fb88:	d208      	bcs.n	801fb9c <_sungetc_r+0x60>
 801fb8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801fb8e:	42a9      	cmp	r1, r5
 801fb90:	d104      	bne.n	801fb9c <_sungetc_r+0x60>
 801fb92:	3b01      	subs	r3, #1
 801fb94:	3201      	adds	r2, #1
 801fb96:	6023      	str	r3, [r4, #0]
 801fb98:	6062      	str	r2, [r4, #4]
 801fb9a:	e7d5      	b.n	801fb48 <_sungetc_r+0xc>
 801fb9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801fba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fba4:	6363      	str	r3, [r4, #52]	; 0x34
 801fba6:	2303      	movs	r3, #3
 801fba8:	63a3      	str	r3, [r4, #56]	; 0x38
 801fbaa:	4623      	mov	r3, r4
 801fbac:	f803 5f46 	strb.w	r5, [r3, #70]!
 801fbb0:	6023      	str	r3, [r4, #0]
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	e7dc      	b.n	801fb70 <_sungetc_r+0x34>

0801fbb6 <__ssrefill_r>:
 801fbb6:	b510      	push	{r4, lr}
 801fbb8:	460c      	mov	r4, r1
 801fbba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801fbbc:	b169      	cbz	r1, 801fbda <__ssrefill_r+0x24>
 801fbbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fbc2:	4299      	cmp	r1, r3
 801fbc4:	d001      	beq.n	801fbca <__ssrefill_r+0x14>
 801fbc6:	f7fe fb71 	bl	801e2ac <_free_r>
 801fbca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fbcc:	6063      	str	r3, [r4, #4]
 801fbce:	2000      	movs	r0, #0
 801fbd0:	6360      	str	r0, [r4, #52]	; 0x34
 801fbd2:	b113      	cbz	r3, 801fbda <__ssrefill_r+0x24>
 801fbd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801fbd6:	6023      	str	r3, [r4, #0]
 801fbd8:	bd10      	pop	{r4, pc}
 801fbda:	6923      	ldr	r3, [r4, #16]
 801fbdc:	6023      	str	r3, [r4, #0]
 801fbde:	2300      	movs	r3, #0
 801fbe0:	6063      	str	r3, [r4, #4]
 801fbe2:	89a3      	ldrh	r3, [r4, #12]
 801fbe4:	f043 0320 	orr.w	r3, r3, #32
 801fbe8:	81a3      	strh	r3, [r4, #12]
 801fbea:	f04f 30ff 	mov.w	r0, #4294967295
 801fbee:	e7f3      	b.n	801fbd8 <__ssrefill_r+0x22>

0801fbf0 <__ssvfiscanf_r>:
 801fbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fbf4:	460c      	mov	r4, r1
 801fbf6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801fbfa:	2100      	movs	r1, #0
 801fbfc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801fc00:	49a6      	ldr	r1, [pc, #664]	; (801fe9c <__ssvfiscanf_r+0x2ac>)
 801fc02:	91a0      	str	r1, [sp, #640]	; 0x280
 801fc04:	f10d 0804 	add.w	r8, sp, #4
 801fc08:	49a5      	ldr	r1, [pc, #660]	; (801fea0 <__ssvfiscanf_r+0x2b0>)
 801fc0a:	4fa6      	ldr	r7, [pc, #664]	; (801fea4 <__ssvfiscanf_r+0x2b4>)
 801fc0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801fea8 <__ssvfiscanf_r+0x2b8>
 801fc10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801fc14:	4606      	mov	r6, r0
 801fc16:	91a1      	str	r1, [sp, #644]	; 0x284
 801fc18:	9300      	str	r3, [sp, #0]
 801fc1a:	7813      	ldrb	r3, [r2, #0]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	f000 815a 	beq.w	801fed6 <__ssvfiscanf_r+0x2e6>
 801fc22:	5dd9      	ldrb	r1, [r3, r7]
 801fc24:	f011 0108 	ands.w	r1, r1, #8
 801fc28:	f102 0501 	add.w	r5, r2, #1
 801fc2c:	d019      	beq.n	801fc62 <__ssvfiscanf_r+0x72>
 801fc2e:	6863      	ldr	r3, [r4, #4]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	dd0f      	ble.n	801fc54 <__ssvfiscanf_r+0x64>
 801fc34:	6823      	ldr	r3, [r4, #0]
 801fc36:	781a      	ldrb	r2, [r3, #0]
 801fc38:	5cba      	ldrb	r2, [r7, r2]
 801fc3a:	0712      	lsls	r2, r2, #28
 801fc3c:	d401      	bmi.n	801fc42 <__ssvfiscanf_r+0x52>
 801fc3e:	462a      	mov	r2, r5
 801fc40:	e7eb      	b.n	801fc1a <__ssvfiscanf_r+0x2a>
 801fc42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fc44:	3201      	adds	r2, #1
 801fc46:	9245      	str	r2, [sp, #276]	; 0x114
 801fc48:	6862      	ldr	r2, [r4, #4]
 801fc4a:	3301      	adds	r3, #1
 801fc4c:	3a01      	subs	r2, #1
 801fc4e:	6062      	str	r2, [r4, #4]
 801fc50:	6023      	str	r3, [r4, #0]
 801fc52:	e7ec      	b.n	801fc2e <__ssvfiscanf_r+0x3e>
 801fc54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fc56:	4621      	mov	r1, r4
 801fc58:	4630      	mov	r0, r6
 801fc5a:	4798      	blx	r3
 801fc5c:	2800      	cmp	r0, #0
 801fc5e:	d0e9      	beq.n	801fc34 <__ssvfiscanf_r+0x44>
 801fc60:	e7ed      	b.n	801fc3e <__ssvfiscanf_r+0x4e>
 801fc62:	2b25      	cmp	r3, #37	; 0x25
 801fc64:	d012      	beq.n	801fc8c <__ssvfiscanf_r+0x9c>
 801fc66:	469a      	mov	sl, r3
 801fc68:	6863      	ldr	r3, [r4, #4]
 801fc6a:	2b00      	cmp	r3, #0
 801fc6c:	f340 8091 	ble.w	801fd92 <__ssvfiscanf_r+0x1a2>
 801fc70:	6822      	ldr	r2, [r4, #0]
 801fc72:	7813      	ldrb	r3, [r2, #0]
 801fc74:	4553      	cmp	r3, sl
 801fc76:	f040 812e 	bne.w	801fed6 <__ssvfiscanf_r+0x2e6>
 801fc7a:	6863      	ldr	r3, [r4, #4]
 801fc7c:	3b01      	subs	r3, #1
 801fc7e:	6063      	str	r3, [r4, #4]
 801fc80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801fc82:	3201      	adds	r2, #1
 801fc84:	3301      	adds	r3, #1
 801fc86:	6022      	str	r2, [r4, #0]
 801fc88:	9345      	str	r3, [sp, #276]	; 0x114
 801fc8a:	e7d8      	b.n	801fc3e <__ssvfiscanf_r+0x4e>
 801fc8c:	9141      	str	r1, [sp, #260]	; 0x104
 801fc8e:	9143      	str	r1, [sp, #268]	; 0x10c
 801fc90:	7853      	ldrb	r3, [r2, #1]
 801fc92:	2b2a      	cmp	r3, #42	; 0x2a
 801fc94:	bf02      	ittt	eq
 801fc96:	2310      	moveq	r3, #16
 801fc98:	1c95      	addeq	r5, r2, #2
 801fc9a:	9341      	streq	r3, [sp, #260]	; 0x104
 801fc9c:	220a      	movs	r2, #10
 801fc9e:	46aa      	mov	sl, r5
 801fca0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801fca4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801fca8:	2b09      	cmp	r3, #9
 801fcaa:	d91d      	bls.n	801fce8 <__ssvfiscanf_r+0xf8>
 801fcac:	487e      	ldr	r0, [pc, #504]	; (801fea8 <__ssvfiscanf_r+0x2b8>)
 801fcae:	2203      	movs	r2, #3
 801fcb0:	f7e0 fb16 	bl	80002e0 <memchr>
 801fcb4:	b140      	cbz	r0, 801fcc8 <__ssvfiscanf_r+0xd8>
 801fcb6:	2301      	movs	r3, #1
 801fcb8:	eba0 0009 	sub.w	r0, r0, r9
 801fcbc:	fa03 f000 	lsl.w	r0, r3, r0
 801fcc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fcc2:	4318      	orrs	r0, r3
 801fcc4:	9041      	str	r0, [sp, #260]	; 0x104
 801fcc6:	4655      	mov	r5, sl
 801fcc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 801fccc:	2b78      	cmp	r3, #120	; 0x78
 801fcce:	d806      	bhi.n	801fcde <__ssvfiscanf_r+0xee>
 801fcd0:	2b57      	cmp	r3, #87	; 0x57
 801fcd2:	d810      	bhi.n	801fcf6 <__ssvfiscanf_r+0x106>
 801fcd4:	2b25      	cmp	r3, #37	; 0x25
 801fcd6:	d0c6      	beq.n	801fc66 <__ssvfiscanf_r+0x76>
 801fcd8:	d856      	bhi.n	801fd88 <__ssvfiscanf_r+0x198>
 801fcda:	2b00      	cmp	r3, #0
 801fcdc:	d064      	beq.n	801fda8 <__ssvfiscanf_r+0x1b8>
 801fcde:	2303      	movs	r3, #3
 801fce0:	9347      	str	r3, [sp, #284]	; 0x11c
 801fce2:	230a      	movs	r3, #10
 801fce4:	9342      	str	r3, [sp, #264]	; 0x108
 801fce6:	e071      	b.n	801fdcc <__ssvfiscanf_r+0x1dc>
 801fce8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801fcea:	fb02 1103 	mla	r1, r2, r3, r1
 801fcee:	3930      	subs	r1, #48	; 0x30
 801fcf0:	9143      	str	r1, [sp, #268]	; 0x10c
 801fcf2:	4655      	mov	r5, sl
 801fcf4:	e7d3      	b.n	801fc9e <__ssvfiscanf_r+0xae>
 801fcf6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801fcfa:	2a20      	cmp	r2, #32
 801fcfc:	d8ef      	bhi.n	801fcde <__ssvfiscanf_r+0xee>
 801fcfe:	a101      	add	r1, pc, #4	; (adr r1, 801fd04 <__ssvfiscanf_r+0x114>)
 801fd00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801fd04:	0801fdb7 	.word	0x0801fdb7
 801fd08:	0801fcdf 	.word	0x0801fcdf
 801fd0c:	0801fcdf 	.word	0x0801fcdf
 801fd10:	0801fe15 	.word	0x0801fe15
 801fd14:	0801fcdf 	.word	0x0801fcdf
 801fd18:	0801fcdf 	.word	0x0801fcdf
 801fd1c:	0801fcdf 	.word	0x0801fcdf
 801fd20:	0801fcdf 	.word	0x0801fcdf
 801fd24:	0801fcdf 	.word	0x0801fcdf
 801fd28:	0801fcdf 	.word	0x0801fcdf
 801fd2c:	0801fcdf 	.word	0x0801fcdf
 801fd30:	0801fe2b 	.word	0x0801fe2b
 801fd34:	0801fe01 	.word	0x0801fe01
 801fd38:	0801fd8f 	.word	0x0801fd8f
 801fd3c:	0801fd8f 	.word	0x0801fd8f
 801fd40:	0801fd8f 	.word	0x0801fd8f
 801fd44:	0801fcdf 	.word	0x0801fcdf
 801fd48:	0801fe05 	.word	0x0801fe05
 801fd4c:	0801fcdf 	.word	0x0801fcdf
 801fd50:	0801fcdf 	.word	0x0801fcdf
 801fd54:	0801fcdf 	.word	0x0801fcdf
 801fd58:	0801fcdf 	.word	0x0801fcdf
 801fd5c:	0801fe3b 	.word	0x0801fe3b
 801fd60:	0801fe0d 	.word	0x0801fe0d
 801fd64:	0801fdaf 	.word	0x0801fdaf
 801fd68:	0801fcdf 	.word	0x0801fcdf
 801fd6c:	0801fcdf 	.word	0x0801fcdf
 801fd70:	0801fe37 	.word	0x0801fe37
 801fd74:	0801fcdf 	.word	0x0801fcdf
 801fd78:	0801fe01 	.word	0x0801fe01
 801fd7c:	0801fcdf 	.word	0x0801fcdf
 801fd80:	0801fcdf 	.word	0x0801fcdf
 801fd84:	0801fdb7 	.word	0x0801fdb7
 801fd88:	3b45      	subs	r3, #69	; 0x45
 801fd8a:	2b02      	cmp	r3, #2
 801fd8c:	d8a7      	bhi.n	801fcde <__ssvfiscanf_r+0xee>
 801fd8e:	2305      	movs	r3, #5
 801fd90:	e01b      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fd92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fd94:	4621      	mov	r1, r4
 801fd96:	4630      	mov	r0, r6
 801fd98:	4798      	blx	r3
 801fd9a:	2800      	cmp	r0, #0
 801fd9c:	f43f af68 	beq.w	801fc70 <__ssvfiscanf_r+0x80>
 801fda0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801fda2:	2800      	cmp	r0, #0
 801fda4:	f040 808d 	bne.w	801fec2 <__ssvfiscanf_r+0x2d2>
 801fda8:	f04f 30ff 	mov.w	r0, #4294967295
 801fdac:	e08f      	b.n	801fece <__ssvfiscanf_r+0x2de>
 801fdae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fdb0:	f042 0220 	orr.w	r2, r2, #32
 801fdb4:	9241      	str	r2, [sp, #260]	; 0x104
 801fdb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801fdb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801fdbc:	9241      	str	r2, [sp, #260]	; 0x104
 801fdbe:	2210      	movs	r2, #16
 801fdc0:	2b6f      	cmp	r3, #111	; 0x6f
 801fdc2:	9242      	str	r2, [sp, #264]	; 0x108
 801fdc4:	bf34      	ite	cc
 801fdc6:	2303      	movcc	r3, #3
 801fdc8:	2304      	movcs	r3, #4
 801fdca:	9347      	str	r3, [sp, #284]	; 0x11c
 801fdcc:	6863      	ldr	r3, [r4, #4]
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	dd42      	ble.n	801fe58 <__ssvfiscanf_r+0x268>
 801fdd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fdd4:	0659      	lsls	r1, r3, #25
 801fdd6:	d404      	bmi.n	801fde2 <__ssvfiscanf_r+0x1f2>
 801fdd8:	6823      	ldr	r3, [r4, #0]
 801fdda:	781a      	ldrb	r2, [r3, #0]
 801fddc:	5cba      	ldrb	r2, [r7, r2]
 801fdde:	0712      	lsls	r2, r2, #28
 801fde0:	d441      	bmi.n	801fe66 <__ssvfiscanf_r+0x276>
 801fde2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801fde4:	2b02      	cmp	r3, #2
 801fde6:	dc50      	bgt.n	801fe8a <__ssvfiscanf_r+0x29a>
 801fde8:	466b      	mov	r3, sp
 801fdea:	4622      	mov	r2, r4
 801fdec:	a941      	add	r1, sp, #260	; 0x104
 801fdee:	4630      	mov	r0, r6
 801fdf0:	f000 f876 	bl	801fee0 <_scanf_chars>
 801fdf4:	2801      	cmp	r0, #1
 801fdf6:	d06e      	beq.n	801fed6 <__ssvfiscanf_r+0x2e6>
 801fdf8:	2802      	cmp	r0, #2
 801fdfa:	f47f af20 	bne.w	801fc3e <__ssvfiscanf_r+0x4e>
 801fdfe:	e7cf      	b.n	801fda0 <__ssvfiscanf_r+0x1b0>
 801fe00:	220a      	movs	r2, #10
 801fe02:	e7dd      	b.n	801fdc0 <__ssvfiscanf_r+0x1d0>
 801fe04:	2300      	movs	r3, #0
 801fe06:	9342      	str	r3, [sp, #264]	; 0x108
 801fe08:	2303      	movs	r3, #3
 801fe0a:	e7de      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fe0c:	2308      	movs	r3, #8
 801fe0e:	9342      	str	r3, [sp, #264]	; 0x108
 801fe10:	2304      	movs	r3, #4
 801fe12:	e7da      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fe14:	4629      	mov	r1, r5
 801fe16:	4640      	mov	r0, r8
 801fe18:	f000 f9c6 	bl	80201a8 <__sccl>
 801fe1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fe1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe22:	9341      	str	r3, [sp, #260]	; 0x104
 801fe24:	4605      	mov	r5, r0
 801fe26:	2301      	movs	r3, #1
 801fe28:	e7cf      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fe2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801fe2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe30:	9341      	str	r3, [sp, #260]	; 0x104
 801fe32:	2300      	movs	r3, #0
 801fe34:	e7c9      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fe36:	2302      	movs	r3, #2
 801fe38:	e7c7      	b.n	801fdca <__ssvfiscanf_r+0x1da>
 801fe3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801fe3c:	06c3      	lsls	r3, r0, #27
 801fe3e:	f53f aefe 	bmi.w	801fc3e <__ssvfiscanf_r+0x4e>
 801fe42:	9b00      	ldr	r3, [sp, #0]
 801fe44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fe46:	1d19      	adds	r1, r3, #4
 801fe48:	9100      	str	r1, [sp, #0]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	f010 0f01 	tst.w	r0, #1
 801fe50:	bf14      	ite	ne
 801fe52:	801a      	strhne	r2, [r3, #0]
 801fe54:	601a      	streq	r2, [r3, #0]
 801fe56:	e6f2      	b.n	801fc3e <__ssvfiscanf_r+0x4e>
 801fe58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fe5a:	4621      	mov	r1, r4
 801fe5c:	4630      	mov	r0, r6
 801fe5e:	4798      	blx	r3
 801fe60:	2800      	cmp	r0, #0
 801fe62:	d0b6      	beq.n	801fdd2 <__ssvfiscanf_r+0x1e2>
 801fe64:	e79c      	b.n	801fda0 <__ssvfiscanf_r+0x1b0>
 801fe66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801fe68:	3201      	adds	r2, #1
 801fe6a:	9245      	str	r2, [sp, #276]	; 0x114
 801fe6c:	6862      	ldr	r2, [r4, #4]
 801fe6e:	3a01      	subs	r2, #1
 801fe70:	2a00      	cmp	r2, #0
 801fe72:	6062      	str	r2, [r4, #4]
 801fe74:	dd02      	ble.n	801fe7c <__ssvfiscanf_r+0x28c>
 801fe76:	3301      	adds	r3, #1
 801fe78:	6023      	str	r3, [r4, #0]
 801fe7a:	e7ad      	b.n	801fdd8 <__ssvfiscanf_r+0x1e8>
 801fe7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801fe7e:	4621      	mov	r1, r4
 801fe80:	4630      	mov	r0, r6
 801fe82:	4798      	blx	r3
 801fe84:	2800      	cmp	r0, #0
 801fe86:	d0a7      	beq.n	801fdd8 <__ssvfiscanf_r+0x1e8>
 801fe88:	e78a      	b.n	801fda0 <__ssvfiscanf_r+0x1b0>
 801fe8a:	2b04      	cmp	r3, #4
 801fe8c:	dc0e      	bgt.n	801feac <__ssvfiscanf_r+0x2bc>
 801fe8e:	466b      	mov	r3, sp
 801fe90:	4622      	mov	r2, r4
 801fe92:	a941      	add	r1, sp, #260	; 0x104
 801fe94:	4630      	mov	r0, r6
 801fe96:	f000 f87d 	bl	801ff94 <_scanf_i>
 801fe9a:	e7ab      	b.n	801fdf4 <__ssvfiscanf_r+0x204>
 801fe9c:	0801fb3d 	.word	0x0801fb3d
 801fea0:	0801fbb7 	.word	0x0801fbb7
 801fea4:	080227e1 	.word	0x080227e1
 801fea8:	08022712 	.word	0x08022712
 801feac:	4b0b      	ldr	r3, [pc, #44]	; (801fedc <__ssvfiscanf_r+0x2ec>)
 801feae:	2b00      	cmp	r3, #0
 801feb0:	f43f aec5 	beq.w	801fc3e <__ssvfiscanf_r+0x4e>
 801feb4:	466b      	mov	r3, sp
 801feb6:	4622      	mov	r2, r4
 801feb8:	a941      	add	r1, sp, #260	; 0x104
 801feba:	4630      	mov	r0, r6
 801febc:	f3af 8000 	nop.w
 801fec0:	e798      	b.n	801fdf4 <__ssvfiscanf_r+0x204>
 801fec2:	89a3      	ldrh	r3, [r4, #12]
 801fec4:	f013 0f40 	tst.w	r3, #64	; 0x40
 801fec8:	bf18      	it	ne
 801feca:	f04f 30ff 	movne.w	r0, #4294967295
 801fece:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801fed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fed6:	9844      	ldr	r0, [sp, #272]	; 0x110
 801fed8:	e7f9      	b.n	801fece <__ssvfiscanf_r+0x2de>
 801feda:	bf00      	nop
 801fedc:	00000000 	.word	0x00000000

0801fee0 <_scanf_chars>:
 801fee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fee4:	4615      	mov	r5, r2
 801fee6:	688a      	ldr	r2, [r1, #8]
 801fee8:	4680      	mov	r8, r0
 801feea:	460c      	mov	r4, r1
 801feec:	b932      	cbnz	r2, 801fefc <_scanf_chars+0x1c>
 801feee:	698a      	ldr	r2, [r1, #24]
 801fef0:	2a00      	cmp	r2, #0
 801fef2:	bf0c      	ite	eq
 801fef4:	2201      	moveq	r2, #1
 801fef6:	f04f 32ff 	movne.w	r2, #4294967295
 801fefa:	608a      	str	r2, [r1, #8]
 801fefc:	6822      	ldr	r2, [r4, #0]
 801fefe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801ff90 <_scanf_chars+0xb0>
 801ff02:	06d1      	lsls	r1, r2, #27
 801ff04:	bf5f      	itttt	pl
 801ff06:	681a      	ldrpl	r2, [r3, #0]
 801ff08:	1d11      	addpl	r1, r2, #4
 801ff0a:	6019      	strpl	r1, [r3, #0]
 801ff0c:	6816      	ldrpl	r6, [r2, #0]
 801ff0e:	2700      	movs	r7, #0
 801ff10:	69a0      	ldr	r0, [r4, #24]
 801ff12:	b188      	cbz	r0, 801ff38 <_scanf_chars+0x58>
 801ff14:	2801      	cmp	r0, #1
 801ff16:	d107      	bne.n	801ff28 <_scanf_chars+0x48>
 801ff18:	682a      	ldr	r2, [r5, #0]
 801ff1a:	7811      	ldrb	r1, [r2, #0]
 801ff1c:	6962      	ldr	r2, [r4, #20]
 801ff1e:	5c52      	ldrb	r2, [r2, r1]
 801ff20:	b952      	cbnz	r2, 801ff38 <_scanf_chars+0x58>
 801ff22:	2f00      	cmp	r7, #0
 801ff24:	d031      	beq.n	801ff8a <_scanf_chars+0xaa>
 801ff26:	e022      	b.n	801ff6e <_scanf_chars+0x8e>
 801ff28:	2802      	cmp	r0, #2
 801ff2a:	d120      	bne.n	801ff6e <_scanf_chars+0x8e>
 801ff2c:	682b      	ldr	r3, [r5, #0]
 801ff2e:	781b      	ldrb	r3, [r3, #0]
 801ff30:	f813 3009 	ldrb.w	r3, [r3, r9]
 801ff34:	071b      	lsls	r3, r3, #28
 801ff36:	d41a      	bmi.n	801ff6e <_scanf_chars+0x8e>
 801ff38:	6823      	ldr	r3, [r4, #0]
 801ff3a:	06da      	lsls	r2, r3, #27
 801ff3c:	bf5e      	ittt	pl
 801ff3e:	682b      	ldrpl	r3, [r5, #0]
 801ff40:	781b      	ldrbpl	r3, [r3, #0]
 801ff42:	f806 3b01 	strbpl.w	r3, [r6], #1
 801ff46:	682a      	ldr	r2, [r5, #0]
 801ff48:	686b      	ldr	r3, [r5, #4]
 801ff4a:	3201      	adds	r2, #1
 801ff4c:	602a      	str	r2, [r5, #0]
 801ff4e:	68a2      	ldr	r2, [r4, #8]
 801ff50:	3b01      	subs	r3, #1
 801ff52:	3a01      	subs	r2, #1
 801ff54:	606b      	str	r3, [r5, #4]
 801ff56:	3701      	adds	r7, #1
 801ff58:	60a2      	str	r2, [r4, #8]
 801ff5a:	b142      	cbz	r2, 801ff6e <_scanf_chars+0x8e>
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	dcd7      	bgt.n	801ff10 <_scanf_chars+0x30>
 801ff60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ff64:	4629      	mov	r1, r5
 801ff66:	4640      	mov	r0, r8
 801ff68:	4798      	blx	r3
 801ff6a:	2800      	cmp	r0, #0
 801ff6c:	d0d0      	beq.n	801ff10 <_scanf_chars+0x30>
 801ff6e:	6823      	ldr	r3, [r4, #0]
 801ff70:	f013 0310 	ands.w	r3, r3, #16
 801ff74:	d105      	bne.n	801ff82 <_scanf_chars+0xa2>
 801ff76:	68e2      	ldr	r2, [r4, #12]
 801ff78:	3201      	adds	r2, #1
 801ff7a:	60e2      	str	r2, [r4, #12]
 801ff7c:	69a2      	ldr	r2, [r4, #24]
 801ff7e:	b102      	cbz	r2, 801ff82 <_scanf_chars+0xa2>
 801ff80:	7033      	strb	r3, [r6, #0]
 801ff82:	6923      	ldr	r3, [r4, #16]
 801ff84:	443b      	add	r3, r7
 801ff86:	6123      	str	r3, [r4, #16]
 801ff88:	2000      	movs	r0, #0
 801ff8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ff8e:	bf00      	nop
 801ff90:	080227e1 	.word	0x080227e1

0801ff94 <_scanf_i>:
 801ff94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff98:	4698      	mov	r8, r3
 801ff9a:	4b76      	ldr	r3, [pc, #472]	; (8020174 <_scanf_i+0x1e0>)
 801ff9c:	460c      	mov	r4, r1
 801ff9e:	4682      	mov	sl, r0
 801ffa0:	4616      	mov	r6, r2
 801ffa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ffa6:	b087      	sub	sp, #28
 801ffa8:	ab03      	add	r3, sp, #12
 801ffaa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ffae:	4b72      	ldr	r3, [pc, #456]	; (8020178 <_scanf_i+0x1e4>)
 801ffb0:	69a1      	ldr	r1, [r4, #24]
 801ffb2:	4a72      	ldr	r2, [pc, #456]	; (802017c <_scanf_i+0x1e8>)
 801ffb4:	2903      	cmp	r1, #3
 801ffb6:	bf18      	it	ne
 801ffb8:	461a      	movne	r2, r3
 801ffba:	68a3      	ldr	r3, [r4, #8]
 801ffbc:	9201      	str	r2, [sp, #4]
 801ffbe:	1e5a      	subs	r2, r3, #1
 801ffc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ffc4:	bf88      	it	hi
 801ffc6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ffca:	4627      	mov	r7, r4
 801ffcc:	bf82      	ittt	hi
 801ffce:	eb03 0905 	addhi.w	r9, r3, r5
 801ffd2:	f240 135d 	movwhi	r3, #349	; 0x15d
 801ffd6:	60a3      	strhi	r3, [r4, #8]
 801ffd8:	f857 3b1c 	ldr.w	r3, [r7], #28
 801ffdc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801ffe0:	bf98      	it	ls
 801ffe2:	f04f 0900 	movls.w	r9, #0
 801ffe6:	6023      	str	r3, [r4, #0]
 801ffe8:	463d      	mov	r5, r7
 801ffea:	f04f 0b00 	mov.w	fp, #0
 801ffee:	6831      	ldr	r1, [r6, #0]
 801fff0:	ab03      	add	r3, sp, #12
 801fff2:	7809      	ldrb	r1, [r1, #0]
 801fff4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801fff8:	2202      	movs	r2, #2
 801fffa:	f7e0 f971 	bl	80002e0 <memchr>
 801fffe:	b328      	cbz	r0, 802004c <_scanf_i+0xb8>
 8020000:	f1bb 0f01 	cmp.w	fp, #1
 8020004:	d159      	bne.n	80200ba <_scanf_i+0x126>
 8020006:	6862      	ldr	r2, [r4, #4]
 8020008:	b92a      	cbnz	r2, 8020016 <_scanf_i+0x82>
 802000a:	6822      	ldr	r2, [r4, #0]
 802000c:	2308      	movs	r3, #8
 802000e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020012:	6063      	str	r3, [r4, #4]
 8020014:	6022      	str	r2, [r4, #0]
 8020016:	6822      	ldr	r2, [r4, #0]
 8020018:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802001c:	6022      	str	r2, [r4, #0]
 802001e:	68a2      	ldr	r2, [r4, #8]
 8020020:	1e51      	subs	r1, r2, #1
 8020022:	60a1      	str	r1, [r4, #8]
 8020024:	b192      	cbz	r2, 802004c <_scanf_i+0xb8>
 8020026:	6832      	ldr	r2, [r6, #0]
 8020028:	1c51      	adds	r1, r2, #1
 802002a:	6031      	str	r1, [r6, #0]
 802002c:	7812      	ldrb	r2, [r2, #0]
 802002e:	f805 2b01 	strb.w	r2, [r5], #1
 8020032:	6872      	ldr	r2, [r6, #4]
 8020034:	3a01      	subs	r2, #1
 8020036:	2a00      	cmp	r2, #0
 8020038:	6072      	str	r2, [r6, #4]
 802003a:	dc07      	bgt.n	802004c <_scanf_i+0xb8>
 802003c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020040:	4631      	mov	r1, r6
 8020042:	4650      	mov	r0, sl
 8020044:	4790      	blx	r2
 8020046:	2800      	cmp	r0, #0
 8020048:	f040 8085 	bne.w	8020156 <_scanf_i+0x1c2>
 802004c:	f10b 0b01 	add.w	fp, fp, #1
 8020050:	f1bb 0f03 	cmp.w	fp, #3
 8020054:	d1cb      	bne.n	801ffee <_scanf_i+0x5a>
 8020056:	6863      	ldr	r3, [r4, #4]
 8020058:	b90b      	cbnz	r3, 802005e <_scanf_i+0xca>
 802005a:	230a      	movs	r3, #10
 802005c:	6063      	str	r3, [r4, #4]
 802005e:	6863      	ldr	r3, [r4, #4]
 8020060:	4947      	ldr	r1, [pc, #284]	; (8020180 <_scanf_i+0x1ec>)
 8020062:	6960      	ldr	r0, [r4, #20]
 8020064:	1ac9      	subs	r1, r1, r3
 8020066:	f000 f89f 	bl	80201a8 <__sccl>
 802006a:	f04f 0b00 	mov.w	fp, #0
 802006e:	68a3      	ldr	r3, [r4, #8]
 8020070:	6822      	ldr	r2, [r4, #0]
 8020072:	2b00      	cmp	r3, #0
 8020074:	d03d      	beq.n	80200f2 <_scanf_i+0x15e>
 8020076:	6831      	ldr	r1, [r6, #0]
 8020078:	6960      	ldr	r0, [r4, #20]
 802007a:	f891 c000 	ldrb.w	ip, [r1]
 802007e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020082:	2800      	cmp	r0, #0
 8020084:	d035      	beq.n	80200f2 <_scanf_i+0x15e>
 8020086:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802008a:	d124      	bne.n	80200d6 <_scanf_i+0x142>
 802008c:	0510      	lsls	r0, r2, #20
 802008e:	d522      	bpl.n	80200d6 <_scanf_i+0x142>
 8020090:	f10b 0b01 	add.w	fp, fp, #1
 8020094:	f1b9 0f00 	cmp.w	r9, #0
 8020098:	d003      	beq.n	80200a2 <_scanf_i+0x10e>
 802009a:	3301      	adds	r3, #1
 802009c:	f109 39ff 	add.w	r9, r9, #4294967295
 80200a0:	60a3      	str	r3, [r4, #8]
 80200a2:	6873      	ldr	r3, [r6, #4]
 80200a4:	3b01      	subs	r3, #1
 80200a6:	2b00      	cmp	r3, #0
 80200a8:	6073      	str	r3, [r6, #4]
 80200aa:	dd1b      	ble.n	80200e4 <_scanf_i+0x150>
 80200ac:	6833      	ldr	r3, [r6, #0]
 80200ae:	3301      	adds	r3, #1
 80200b0:	6033      	str	r3, [r6, #0]
 80200b2:	68a3      	ldr	r3, [r4, #8]
 80200b4:	3b01      	subs	r3, #1
 80200b6:	60a3      	str	r3, [r4, #8]
 80200b8:	e7d9      	b.n	802006e <_scanf_i+0xda>
 80200ba:	f1bb 0f02 	cmp.w	fp, #2
 80200be:	d1ae      	bne.n	802001e <_scanf_i+0x8a>
 80200c0:	6822      	ldr	r2, [r4, #0]
 80200c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80200c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80200ca:	d1bf      	bne.n	802004c <_scanf_i+0xb8>
 80200cc:	2310      	movs	r3, #16
 80200ce:	6063      	str	r3, [r4, #4]
 80200d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80200d4:	e7a2      	b.n	802001c <_scanf_i+0x88>
 80200d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80200da:	6022      	str	r2, [r4, #0]
 80200dc:	780b      	ldrb	r3, [r1, #0]
 80200de:	f805 3b01 	strb.w	r3, [r5], #1
 80200e2:	e7de      	b.n	80200a2 <_scanf_i+0x10e>
 80200e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80200e8:	4631      	mov	r1, r6
 80200ea:	4650      	mov	r0, sl
 80200ec:	4798      	blx	r3
 80200ee:	2800      	cmp	r0, #0
 80200f0:	d0df      	beq.n	80200b2 <_scanf_i+0x11e>
 80200f2:	6823      	ldr	r3, [r4, #0]
 80200f4:	05db      	lsls	r3, r3, #23
 80200f6:	d50d      	bpl.n	8020114 <_scanf_i+0x180>
 80200f8:	42bd      	cmp	r5, r7
 80200fa:	d909      	bls.n	8020110 <_scanf_i+0x17c>
 80200fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020100:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020104:	4632      	mov	r2, r6
 8020106:	4650      	mov	r0, sl
 8020108:	4798      	blx	r3
 802010a:	f105 39ff 	add.w	r9, r5, #4294967295
 802010e:	464d      	mov	r5, r9
 8020110:	42bd      	cmp	r5, r7
 8020112:	d02d      	beq.n	8020170 <_scanf_i+0x1dc>
 8020114:	6822      	ldr	r2, [r4, #0]
 8020116:	f012 0210 	ands.w	r2, r2, #16
 802011a:	d113      	bne.n	8020144 <_scanf_i+0x1b0>
 802011c:	702a      	strb	r2, [r5, #0]
 802011e:	6863      	ldr	r3, [r4, #4]
 8020120:	9e01      	ldr	r6, [sp, #4]
 8020122:	4639      	mov	r1, r7
 8020124:	4650      	mov	r0, sl
 8020126:	47b0      	blx	r6
 8020128:	6821      	ldr	r1, [r4, #0]
 802012a:	f8d8 3000 	ldr.w	r3, [r8]
 802012e:	f011 0f20 	tst.w	r1, #32
 8020132:	d013      	beq.n	802015c <_scanf_i+0x1c8>
 8020134:	1d1a      	adds	r2, r3, #4
 8020136:	f8c8 2000 	str.w	r2, [r8]
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	6018      	str	r0, [r3, #0]
 802013e:	68e3      	ldr	r3, [r4, #12]
 8020140:	3301      	adds	r3, #1
 8020142:	60e3      	str	r3, [r4, #12]
 8020144:	1bed      	subs	r5, r5, r7
 8020146:	44ab      	add	fp, r5
 8020148:	6925      	ldr	r5, [r4, #16]
 802014a:	445d      	add	r5, fp
 802014c:	6125      	str	r5, [r4, #16]
 802014e:	2000      	movs	r0, #0
 8020150:	b007      	add	sp, #28
 8020152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020156:	f04f 0b00 	mov.w	fp, #0
 802015a:	e7ca      	b.n	80200f2 <_scanf_i+0x15e>
 802015c:	1d1a      	adds	r2, r3, #4
 802015e:	f8c8 2000 	str.w	r2, [r8]
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	f011 0f01 	tst.w	r1, #1
 8020168:	bf14      	ite	ne
 802016a:	8018      	strhne	r0, [r3, #0]
 802016c:	6018      	streq	r0, [r3, #0]
 802016e:	e7e6      	b.n	802013e <_scanf_i+0x1aa>
 8020170:	2001      	movs	r0, #1
 8020172:	e7ed      	b.n	8020150 <_scanf_i+0x1bc>
 8020174:	080203ec 	.word	0x080203ec
 8020178:	0801fa51 	.word	0x0801fa51
 802017c:	0802031d 	.word	0x0802031d
 8020180:	080228fa 	.word	0x080228fa

08020184 <_read_r>:
 8020184:	b538      	push	{r3, r4, r5, lr}
 8020186:	4d07      	ldr	r5, [pc, #28]	; (80201a4 <_read_r+0x20>)
 8020188:	4604      	mov	r4, r0
 802018a:	4608      	mov	r0, r1
 802018c:	4611      	mov	r1, r2
 802018e:	2200      	movs	r2, #0
 8020190:	602a      	str	r2, [r5, #0]
 8020192:	461a      	mov	r2, r3
 8020194:	f7e1 f9b6 	bl	8001504 <_read>
 8020198:	1c43      	adds	r3, r0, #1
 802019a:	d102      	bne.n	80201a2 <_read_r+0x1e>
 802019c:	682b      	ldr	r3, [r5, #0]
 802019e:	b103      	cbz	r3, 80201a2 <_read_r+0x1e>
 80201a0:	6023      	str	r3, [r4, #0]
 80201a2:	bd38      	pop	{r3, r4, r5, pc}
 80201a4:	2400f754 	.word	0x2400f754

080201a8 <__sccl>:
 80201a8:	b570      	push	{r4, r5, r6, lr}
 80201aa:	780b      	ldrb	r3, [r1, #0]
 80201ac:	4604      	mov	r4, r0
 80201ae:	2b5e      	cmp	r3, #94	; 0x5e
 80201b0:	bf0b      	itete	eq
 80201b2:	784b      	ldrbeq	r3, [r1, #1]
 80201b4:	1c48      	addne	r0, r1, #1
 80201b6:	1c88      	addeq	r0, r1, #2
 80201b8:	2200      	movne	r2, #0
 80201ba:	bf08      	it	eq
 80201bc:	2201      	moveq	r2, #1
 80201be:	1e61      	subs	r1, r4, #1
 80201c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80201c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80201c8:	42a9      	cmp	r1, r5
 80201ca:	d1fb      	bne.n	80201c4 <__sccl+0x1c>
 80201cc:	b90b      	cbnz	r3, 80201d2 <__sccl+0x2a>
 80201ce:	3801      	subs	r0, #1
 80201d0:	bd70      	pop	{r4, r5, r6, pc}
 80201d2:	f082 0201 	eor.w	r2, r2, #1
 80201d6:	54e2      	strb	r2, [r4, r3]
 80201d8:	4605      	mov	r5, r0
 80201da:	4628      	mov	r0, r5
 80201dc:	f810 1b01 	ldrb.w	r1, [r0], #1
 80201e0:	292d      	cmp	r1, #45	; 0x2d
 80201e2:	d006      	beq.n	80201f2 <__sccl+0x4a>
 80201e4:	295d      	cmp	r1, #93	; 0x5d
 80201e6:	d0f3      	beq.n	80201d0 <__sccl+0x28>
 80201e8:	b909      	cbnz	r1, 80201ee <__sccl+0x46>
 80201ea:	4628      	mov	r0, r5
 80201ec:	e7f0      	b.n	80201d0 <__sccl+0x28>
 80201ee:	460b      	mov	r3, r1
 80201f0:	e7f1      	b.n	80201d6 <__sccl+0x2e>
 80201f2:	786e      	ldrb	r6, [r5, #1]
 80201f4:	2e5d      	cmp	r6, #93	; 0x5d
 80201f6:	d0fa      	beq.n	80201ee <__sccl+0x46>
 80201f8:	42b3      	cmp	r3, r6
 80201fa:	dcf8      	bgt.n	80201ee <__sccl+0x46>
 80201fc:	3502      	adds	r5, #2
 80201fe:	4619      	mov	r1, r3
 8020200:	3101      	adds	r1, #1
 8020202:	428e      	cmp	r6, r1
 8020204:	5462      	strb	r2, [r4, r1]
 8020206:	dcfb      	bgt.n	8020200 <__sccl+0x58>
 8020208:	1af1      	subs	r1, r6, r3
 802020a:	3901      	subs	r1, #1
 802020c:	1c58      	adds	r0, r3, #1
 802020e:	42b3      	cmp	r3, r6
 8020210:	bfa8      	it	ge
 8020212:	2100      	movge	r1, #0
 8020214:	1843      	adds	r3, r0, r1
 8020216:	e7e0      	b.n	80201da <__sccl+0x32>

08020218 <_strtol_l.constprop.0>:
 8020218:	2b01      	cmp	r3, #1
 802021a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802021e:	d001      	beq.n	8020224 <_strtol_l.constprop.0+0xc>
 8020220:	2b24      	cmp	r3, #36	; 0x24
 8020222:	d906      	bls.n	8020232 <_strtol_l.constprop.0+0x1a>
 8020224:	f7fd feec 	bl	801e000 <__errno>
 8020228:	2316      	movs	r3, #22
 802022a:	6003      	str	r3, [r0, #0]
 802022c:	2000      	movs	r0, #0
 802022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020232:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8020318 <_strtol_l.constprop.0+0x100>
 8020236:	460d      	mov	r5, r1
 8020238:	462e      	mov	r6, r5
 802023a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802023e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8020242:	f017 0708 	ands.w	r7, r7, #8
 8020246:	d1f7      	bne.n	8020238 <_strtol_l.constprop.0+0x20>
 8020248:	2c2d      	cmp	r4, #45	; 0x2d
 802024a:	d132      	bne.n	80202b2 <_strtol_l.constprop.0+0x9a>
 802024c:	782c      	ldrb	r4, [r5, #0]
 802024e:	2701      	movs	r7, #1
 8020250:	1cb5      	adds	r5, r6, #2
 8020252:	2b00      	cmp	r3, #0
 8020254:	d05b      	beq.n	802030e <_strtol_l.constprop.0+0xf6>
 8020256:	2b10      	cmp	r3, #16
 8020258:	d109      	bne.n	802026e <_strtol_l.constprop.0+0x56>
 802025a:	2c30      	cmp	r4, #48	; 0x30
 802025c:	d107      	bne.n	802026e <_strtol_l.constprop.0+0x56>
 802025e:	782c      	ldrb	r4, [r5, #0]
 8020260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020264:	2c58      	cmp	r4, #88	; 0x58
 8020266:	d14d      	bne.n	8020304 <_strtol_l.constprop.0+0xec>
 8020268:	786c      	ldrb	r4, [r5, #1]
 802026a:	2310      	movs	r3, #16
 802026c:	3502      	adds	r5, #2
 802026e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8020272:	f108 38ff 	add.w	r8, r8, #4294967295
 8020276:	f04f 0c00 	mov.w	ip, #0
 802027a:	fbb8 f9f3 	udiv	r9, r8, r3
 802027e:	4666      	mov	r6, ip
 8020280:	fb03 8a19 	mls	sl, r3, r9, r8
 8020284:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8020288:	f1be 0f09 	cmp.w	lr, #9
 802028c:	d816      	bhi.n	80202bc <_strtol_l.constprop.0+0xa4>
 802028e:	4674      	mov	r4, lr
 8020290:	42a3      	cmp	r3, r4
 8020292:	dd24      	ble.n	80202de <_strtol_l.constprop.0+0xc6>
 8020294:	f1bc 0f00 	cmp.w	ip, #0
 8020298:	db1e      	blt.n	80202d8 <_strtol_l.constprop.0+0xc0>
 802029a:	45b1      	cmp	r9, r6
 802029c:	d31c      	bcc.n	80202d8 <_strtol_l.constprop.0+0xc0>
 802029e:	d101      	bne.n	80202a4 <_strtol_l.constprop.0+0x8c>
 80202a0:	45a2      	cmp	sl, r4
 80202a2:	db19      	blt.n	80202d8 <_strtol_l.constprop.0+0xc0>
 80202a4:	fb06 4603 	mla	r6, r6, r3, r4
 80202a8:	f04f 0c01 	mov.w	ip, #1
 80202ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80202b0:	e7e8      	b.n	8020284 <_strtol_l.constprop.0+0x6c>
 80202b2:	2c2b      	cmp	r4, #43	; 0x2b
 80202b4:	bf04      	itt	eq
 80202b6:	782c      	ldrbeq	r4, [r5, #0]
 80202b8:	1cb5      	addeq	r5, r6, #2
 80202ba:	e7ca      	b.n	8020252 <_strtol_l.constprop.0+0x3a>
 80202bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80202c0:	f1be 0f19 	cmp.w	lr, #25
 80202c4:	d801      	bhi.n	80202ca <_strtol_l.constprop.0+0xb2>
 80202c6:	3c37      	subs	r4, #55	; 0x37
 80202c8:	e7e2      	b.n	8020290 <_strtol_l.constprop.0+0x78>
 80202ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80202ce:	f1be 0f19 	cmp.w	lr, #25
 80202d2:	d804      	bhi.n	80202de <_strtol_l.constprop.0+0xc6>
 80202d4:	3c57      	subs	r4, #87	; 0x57
 80202d6:	e7db      	b.n	8020290 <_strtol_l.constprop.0+0x78>
 80202d8:	f04f 3cff 	mov.w	ip, #4294967295
 80202dc:	e7e6      	b.n	80202ac <_strtol_l.constprop.0+0x94>
 80202de:	f1bc 0f00 	cmp.w	ip, #0
 80202e2:	da05      	bge.n	80202f0 <_strtol_l.constprop.0+0xd8>
 80202e4:	2322      	movs	r3, #34	; 0x22
 80202e6:	6003      	str	r3, [r0, #0]
 80202e8:	4646      	mov	r6, r8
 80202ea:	b942      	cbnz	r2, 80202fe <_strtol_l.constprop.0+0xe6>
 80202ec:	4630      	mov	r0, r6
 80202ee:	e79e      	b.n	802022e <_strtol_l.constprop.0+0x16>
 80202f0:	b107      	cbz	r7, 80202f4 <_strtol_l.constprop.0+0xdc>
 80202f2:	4276      	negs	r6, r6
 80202f4:	2a00      	cmp	r2, #0
 80202f6:	d0f9      	beq.n	80202ec <_strtol_l.constprop.0+0xd4>
 80202f8:	f1bc 0f00 	cmp.w	ip, #0
 80202fc:	d000      	beq.n	8020300 <_strtol_l.constprop.0+0xe8>
 80202fe:	1e69      	subs	r1, r5, #1
 8020300:	6011      	str	r1, [r2, #0]
 8020302:	e7f3      	b.n	80202ec <_strtol_l.constprop.0+0xd4>
 8020304:	2430      	movs	r4, #48	; 0x30
 8020306:	2b00      	cmp	r3, #0
 8020308:	d1b1      	bne.n	802026e <_strtol_l.constprop.0+0x56>
 802030a:	2308      	movs	r3, #8
 802030c:	e7af      	b.n	802026e <_strtol_l.constprop.0+0x56>
 802030e:	2c30      	cmp	r4, #48	; 0x30
 8020310:	d0a5      	beq.n	802025e <_strtol_l.constprop.0+0x46>
 8020312:	230a      	movs	r3, #10
 8020314:	e7ab      	b.n	802026e <_strtol_l.constprop.0+0x56>
 8020316:	bf00      	nop
 8020318:	080227e1 	.word	0x080227e1

0802031c <_strtol_r>:
 802031c:	f7ff bf7c 	b.w	8020218 <_strtol_l.constprop.0>

08020320 <__submore>:
 8020320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020324:	460c      	mov	r4, r1
 8020326:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802032c:	4299      	cmp	r1, r3
 802032e:	d11d      	bne.n	802036c <__submore+0x4c>
 8020330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020334:	f7fe f826 	bl	801e384 <_malloc_r>
 8020338:	b918      	cbnz	r0, 8020342 <__submore+0x22>
 802033a:	f04f 30ff 	mov.w	r0, #4294967295
 802033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020346:	63a3      	str	r3, [r4, #56]	; 0x38
 8020348:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802034c:	6360      	str	r0, [r4, #52]	; 0x34
 802034e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8020352:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020356:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802035a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802035e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8020362:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020366:	6020      	str	r0, [r4, #0]
 8020368:	2000      	movs	r0, #0
 802036a:	e7e8      	b.n	802033e <__submore+0x1e>
 802036c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802036e:	0077      	lsls	r7, r6, #1
 8020370:	463a      	mov	r2, r7
 8020372:	f7ff fa3d 	bl	801f7f0 <_realloc_r>
 8020376:	4605      	mov	r5, r0
 8020378:	2800      	cmp	r0, #0
 802037a:	d0de      	beq.n	802033a <__submore+0x1a>
 802037c:	eb00 0806 	add.w	r8, r0, r6
 8020380:	4601      	mov	r1, r0
 8020382:	4632      	mov	r2, r6
 8020384:	4640      	mov	r0, r8
 8020386:	f7fd ff7b 	bl	801e280 <memcpy>
 802038a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802038e:	f8c4 8000 	str.w	r8, [r4]
 8020392:	e7e9      	b.n	8020368 <__submore+0x48>

08020394 <_init>:
 8020394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020396:	bf00      	nop
 8020398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802039a:	bc08      	pop	{r3}
 802039c:	469e      	mov	lr, r3
 802039e:	4770      	bx	lr

080203a0 <_fini>:
 80203a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203a2:	bf00      	nop
 80203a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80203a6:	bc08      	pop	{r3}
 80203a8:	469e      	mov	lr, r3
 80203aa:	4770      	bx	lr
