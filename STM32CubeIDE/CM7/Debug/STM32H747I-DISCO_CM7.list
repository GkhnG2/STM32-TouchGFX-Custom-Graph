
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022c8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002474  08022f30  08022f30  00032f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000834  080253a4  080253a4  000353a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000040  08025bd8  08025bd8  00035bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000010c  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08025c18  08025c18  001c710c  2**0
                  CONTENTS
  8 .ARM          00000000  08025c18  08025c18  001c710c  2**0
                  CONTENTS
  9 .preinit_array 00000000  08025c18  08025c18  001c710c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08025c18  08025c18  00035c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08025c30  08025c30  00035c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000011c  24000000  08025c38  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000eba4  2400011c  08025d54  0004011c  2**2
                  ALLOC
 14 ._user_heap_stack 00002000  2400ecc0  08025d54  0004ecc0  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c710c  2**0
                  CONTENTS, READONLY
 16 .debug_info   00106875  00000000  00000000  001c713a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000171a1  00000000  00000000  002cd9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000038f8  00000000  00000000  002e4b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000bfb8  00000000  00000000  002e8448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0005126c  00000000  00000000  002f4400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00066bda  00000000  00000000  0034566c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001dd548  00000000  00000000  003ac246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0058978e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a744  00000000  00000000  00589860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0004825c  00000000  00000000  00593fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022f14 	.word	0x08022f14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	08022f14 	.word	0x08022f14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	; (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00f bf84 	b.w	8010608 <vTaskSetApplicationTaskTag>
 8000700:	08001e29 	.word	0x08001e29

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	; 0x24
 800070e:	f021 fb9f 	bl	8021e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f021 fb9a 	bl	8021e50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00c f9c7 	bl	800cab0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xcc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800075a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2301      	movs	r3, #1
 8000778:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000790:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f00c fc7b 	bl	800d08c <HAL_RCC_OscConfig>
 8000796:	b108      	cbz	r0, 800079c <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	e7fe      	b.n	800079a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	f00d f80b 	bl	800d7d0 <HAL_RCC_ClockConfig>
 80007ba:	4601      	mov	r1, r0
 80007bc:	b108      	cbz	r0, 80007c2 <SystemClock_Config+0xbe>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c6:	f00c ff15 	bl	800d5f4 <HAL_RCC_MCOConfig>
}
 80007ca:	b01d      	add	sp, #116	; 0x74
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400

080007dc <main>:
{
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e2:	2210      	movs	r2, #16
 80007e4:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007ea:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ec:	f021 fb30 	bl	8021e50 <memset>
  HAL_MPU_Disable();
 80007f0:	f00a fbfa 	bl	800afe8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007f4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 80007f8:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fc:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000800:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000802:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000806:	f00a fc0d 	bl	800b024 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800080a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800080e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000812:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000816:	f00a fc05 	bl	800b024 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800081a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800081e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000822:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000826:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800082a:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800082c:	2318      	movs	r3, #24
 800082e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000832:	f00a fbf7 	bl	800b024 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000836:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000838:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800083a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800083e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000842:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000844:	2312      	movs	r3, #18
 8000846:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	f00a fbe8 	bl	800b024 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800085a:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800085e:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000860:	2311      	movs	r3, #17
 8000862:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	f00a fbdd 	bl	800b024 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800086a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800086e:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000872:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <main+0x300>)
 8000878:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800087a:	230e      	movs	r3, #14
 800087c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000880:	f00a fbd0 	bl	800b024 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000884:	4628      	mov	r0, r5
 8000886:	f00a fbbd 	bl	800b004 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800088a:	4b95      	ldr	r3, [pc, #596]	; (8000ae0 <main+0x304>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000892:	d111      	bne.n	80008b8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800089c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b8:	4a89      	ldr	r2, [pc, #548]	; (8000ae0 <main+0x304>)
 80008ba:	6953      	ldr	r3, [r2, #20]
 80008bc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008c0:	d123      	bne.n	800090a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008da:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008dc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80008ec:	d2f9      	bcs.n	80008e2 <main+0x106>
    } while(sets-- != 0U);
 80008ee:	3b20      	subs	r3, #32
 80008f0:	f113 0f20 	cmn.w	r3, #32
 80008f4:	d1f2      	bne.n	80008dc <main+0x100>
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fa:	6953      	ldr	r3, [r2, #20]
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000906:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	4d75      	ldr	r5, [pc, #468]	; (8000ae4 <main+0x308>)
 8000910:	682c      	ldr	r4, [r5, #0]
 8000912:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000916:	f000 82b0 	beq.w	8000e7a <main+0x69e>
 800091a:	3b01      	subs	r3, #1
 800091c:	d1f8      	bne.n	8000910 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x144>
 8000922:	b672      	cpsid	i
 8000924:	e7fe      	b.n	8000924 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000926:	f009 ffef 	bl	800a908 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800092a:	4640      	mov	r0, r8
 800092c:	f00a f83a 	bl	800a9a4 <BSP_SDRAM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	b108      	cbz	r0, 8000938 <main+0x15c>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <main+0x30c>)
 800093a:	4a6c      	ldr	r2, [pc, #432]	; (8000aec <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800093e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000940:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000944:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000948:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800094c:	f00c f9c4 	bl	800ccd8 <HAL_QSPI_Init>
 8000950:	b108      	cbz	r0, 8000956 <main+0x17a>
 8000952:	b672      	cpsid	i
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000956:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000958:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800095c:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000960:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000964:	f009 fe16 	bl	800a594 <BSP_QSPI_Init>
 8000968:	b108      	cbz	r0, 800096e <main+0x192>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800096e:	f009 fdbd 	bl	800a4ec <BSP_QSPI_EnableMemoryMappedMode>
 8000972:	4603      	mov	r3, r0
 8000974:	b108      	cbz	r0, 800097a <main+0x19e>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800097a:	485d      	ldr	r0, [pc, #372]	; (8000af0 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800097c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000980:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000afc <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 8000984:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000988:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800098c:	f00a fbd6 	bl	800b13c <HAL_DMA2D_Init>
 8000990:	4605      	mov	r5, r0
 8000992:	b108      	cbz	r0, 8000998 <main+0x1bc>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000998:	4602      	mov	r2, r0
 800099a:	4631      	mov	r1, r6
 800099c:	4855      	ldr	r0, [pc, #340]	; (8000af4 <main+0x318>)
 800099e:	f00b fa79 	bl	800be94 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009a2:	2014      	movs	r0, #20
 80009a4:	f00a faa2 	bl	800aeec <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009a8:	4631      	mov	r1, r6
 80009aa:	4622      	mov	r2, r4
 80009ac:	4851      	ldr	r0, [pc, #324]	; (8000af4 <main+0x318>)
 80009ae:	f00b fa71 	bl	800be94 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009b2:	200a      	movs	r0, #10
 80009b4:	f00a fa9a 	bl	800aeec <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009b8:	2224      	movs	r2, #36	; 0x24
 80009ba:	4629      	mov	r1, r5
 80009bc:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80009be:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009c0:	f021 fa46 	bl	8021e50 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009c4:	2218      	movs	r2, #24
 80009c6:	4629      	mov	r1, r5
 80009c8:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 80009ca:	4e4b      	ldr	r6, [pc, #300]	; (8000af8 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009cc:	f021 fa40 	bl	8021e50 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	4629      	mov	r1, r5
 80009d4:	a82d      	add	r0, sp, #180	; 0xb4
 80009d6:	f021 fa3b 	bl	8021e50 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009da:	4629      	mov	r1, r5
 80009dc:	222c      	movs	r2, #44	; 0x2c
 80009de:	a820      	add	r0, sp, #128	; 0x80
 80009e0:	f021 fa36 	bl	8021e50 <memset>
  hdsi.Instance = DSI;
 80009e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009e8:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009ec:	a90e      	add	r1, sp, #56	; 0x38
 80009ee:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009f0:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009f4:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009f6:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a00:	f00a fce8 	bl	800b3d4 <HAL_DSI_Init>
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x22e>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a0a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a0e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a12:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a16:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 8000a1a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a1c:	a917      	add	r1, sp, #92	; 0x5c
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f00a ff04 	bl	800b82c <HAL_DSI_ConfigHostTimeouts>
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x24e>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a2a:	2321      	movs	r3, #33	; 0x21
 8000a2c:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a2e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a30:	a911      	add	r1, sp, #68	; 0x44
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a34:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a38:	2319      	movs	r3, #25
 8000a3a:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a3e:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 8000a40:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a44:	f00a feb5 	bl	800b7b2 <HAL_DSI_ConfigPhyTimer>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x272>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <main+0x31c>)
 8000a52:	f00a fe9d 	bl	800b790 <HAL_DSI_ConfigFlowControl>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x280>
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a5c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x31c>)
 8000a62:	f00b f86d 	bl	800bb40 <HAL_DSI_SetLowPowerRXFilter>
 8000a66:	4601      	mov	r1, r0
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x292>
 8000a6a:	b672      	cpsid	i
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a6e:	4822      	ldr	r0, [pc, #136]	; (8000af8 <main+0x31c>)
 8000a70:	f00a fc4e 	bl	800b310 <HAL_DSI_ConfigErrorMonitor>
 8000a74:	b108      	cbz	r0, 8000a7a <main+0x29e>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a7a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a9e:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aa2:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000aaa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aae:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ab6:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab8:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ac2:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ace:	f00a fe2b 	bl	800b728 <HAL_DSI_ConfigCommand>
 8000ad2:	b1a8      	cbz	r0, 8000b00 <main+0x324>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x2fa>
 8000ad8:	0300001b 	.word	0x0300001b
 8000adc:	10040000 	.word	0x10040000
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	240002bc 	.word	0x240002bc
 8000aec:	52005000 	.word	0x52005000
 8000af0:	24000190 	.word	0x24000190
 8000af4:	58021800 	.word	0x58021800
 8000af8:	240001f8 	.word	0x240001f8
 8000afc:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000b00:	2305      	movs	r3, #5
 8000b02:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b06:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000b08:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b0a:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b0c:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000b0e:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b12:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b14:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b18:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b1a:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b1e:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b22:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <main+0x490>)
 8000b28:	f00a fd8c 	bl	800b644 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	b108      	cbz	r0, 8000b34 <main+0x358>
 8000b30:	b672      	cpsid	i
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b34:	484d      	ldr	r0, [pc, #308]	; (8000c6c <main+0x490>)
 8000b36:	f00a fd74 	bl	800b622 <HAL_DSI_SetGenericVCID>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b108      	cbz	r0, 8000b42 <main+0x366>
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	4601      	mov	r1, r0
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000b48:	4d49      	ldr	r5, [pc, #292]	; (8000c70 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4a:	f021 f981 	bl	8021e50 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b4e:	4849      	ldr	r0, [pc, #292]	; (8000c74 <main+0x498>)
 8000b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b54:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 8000b58:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 8000b5c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8000b5e:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 8000b62:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b66:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b70:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b74:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000b78:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b7c:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b80:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8000b84:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000b88:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b8c:	f00b fdcc 	bl	800c728 <HAL_LTDC_Init>
 8000b90:	b108      	cbz	r0, 8000b96 <main+0x3ba>
 8000b92:	b672      	cpsid	i
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x3b8>
  pLayerCfg.Alpha = 255;
 8000b96:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000ba0:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000ba2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000ba6:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000baa:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000bac:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bb6:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bba:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000bbc:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000bc0:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bc8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bcc:	f00b fe78 	bl	800c8c0 <HAL_LTDC_ConfigLayer>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	b108      	cbz	r0, 8000bd8 <main+0x3fc>
 8000bd4:	b672      	cpsid	i
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bd8:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bdc:	6993      	ldr	r3, [r2, #24]
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000be4:	f00a fe88 	bl	800b8f8 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000be8:	4923      	ldr	r1, [pc, #140]	; (8000c78 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bec:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bee:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <main+0x4a8>)
  IOCtx.Address     = 0;
 8000bf2:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf4:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x4ac>)
 8000bf8:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bfa:	f009 fa6b 	bl	800a0d4 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bfe:	4632      	mov	r2, r6
 8000c00:	4621      	mov	r1, r4
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <main+0x4a4>)
 8000c04:	f008 fec2 	bl	800998c <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <main+0x490>)
 8000c10:	9400      	str	r4, [sp, #0]
 8000c12:	f00a fea4 	bl	800b95e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c16:	a92d      	add	r1, sp, #180	; 0xb4
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c1a:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c1c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c20:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c24:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c28:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c2c:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c30:	f00a fd7a 	bl	800b728 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c38:	4622      	mov	r2, r4
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f00b fe6e 	bl	800c91c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c4a:	f000 fcbd 	bl	80015c8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4e:	f000 fcba 	bl	80015c6 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c52:	f00e f851 	bl	800ecf8 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <main+0x4b0>)
 8000c58:	4621      	mov	r1, r4
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <main+0x4b4>)
 8000c5c:	f00e f878 	bl	800ed50 <osThreadNew>
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x4b8>)
 8000c62:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c64:	f00e f85a 	bl	800ed1c <osKernelStart>
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x48c>
 8000c6a:	bf00      	nop
 8000c6c:	240001f8 	.word	0x240001f8
 8000c70:	24000214 	.word	0x24000214
 8000c74:	50001000 	.word	0x50001000
 8000c78:	24000138 	.word	0x24000138
 8000c7c:	0800a4bd 	.word	0x0800a4bd
 8000c80:	24000148 	.word	0x24000148
 8000c84:	08001b5d 	.word	0x08001b5d
 8000c88:	08001b95 	.word	0x08001b95
 8000c8c:	08022f80 	.word	0x08022f80
 8000c90:	080015d7 	.word	0x080015d7
 8000c94:	24000168 	.word	0x24000168
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2214      	movs	r2, #20
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f021 f8d6 	bl	8021e50 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cb2:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cbe:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	9307      	str	r3, [sp, #28]
 8000d12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	9308      	str	r3, [sp, #32]
 8000d2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d40:	9309      	str	r3, [sp, #36]	; 0x24
 8000d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	930a      	str	r3, [sp, #40]	; 0x28
 8000d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	930c      	str	r3, [sp, #48]	; 0x30
 8000d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	930d      	str	r3, [sp, #52]	; 0x34
 8000da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000da6:	f00b f875 	bl	800be94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2108      	movs	r1, #8
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <main+0x6e8>)
 8000db0:	f00b f870 	bl	800be94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dba:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x6ec>)
 8000dbc:	f00b f86a 	bl	800be94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000dc6:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <main+0x6e4>)
 8000dc8:	f00b f864 	bl	800be94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dd0:	a92d      	add	r1, sp, #180	; 0xb4
 8000dd2:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ddc:	f00a fec6 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	a92d      	add	r1, sp, #180	; 0xb4
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000de6:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f00a febc 	bl	800bb6c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000df4:	a92d      	add	r1, sp, #180	; 0xb4
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f00a feb4 	bl	800bb6c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a92d      	add	r1, sp, #180	; 0xb4
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f00a feac 	bl	800bb6c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <main+0x6f4>)
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e18:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000e1a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e1c:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e22:	f00a f92b 	bl	800b07c <HAL_CRC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f47f ad7a 	bne.w	8000922 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e2e:	492a      	ldr	r1, [pc, #168]	; (8000ed8 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e30:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e34:	680a      	ldr	r2, [r1, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e3c:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e40:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e42:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e46:	2220      	movs	r2, #32
 8000e48:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e4c:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e52:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e56:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e5a:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e5c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e60:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e64:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e68:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e6a:	f00d fc69 	bl	800e740 <HAL_SDRAM_Init>
 8000e6e:	4680      	mov	r8, r0
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f43f ad58 	beq.w	8000926 <main+0x14a>
 8000e76:	b672      	cpsid	i
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x69c>
  HAL_Init();
 8000e7a:	f009 fff7 	bl	800ae6c <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff fc41 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e86:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e9c:	f00b f808 	bl	800beb0 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f00b f812 	bl	800becc <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ea8:	4c0e      	ldr	r4, [pc, #56]	; (8000ee4 <main+0x708>)
 8000eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	f53f aef1 	bmi.w	8000c98 <main+0x4bc>
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	d1f9      	bne.n	8000eae <main+0x6d2>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x6e0>
 8000ebe:	bf00      	nop
 8000ec0:	58022400 	.word	0x58022400
 8000ec4:	58021800 	.word	0x58021800
 8000ec8:	58021400 	.word	0x58021400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	2400016c 	.word	0x2400016c
 8000ed4:	58024c00 	.word	0x58024c00
 8000ed8:	52004000 	.word	0x52004000
 8000edc:	24000308 	.word	0x24000308
 8000ee0:	52004140 	.word	0x52004140
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d101      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ef0:	f009 bfea 	b.w	800aec8 <HAL_IncTick>
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <Error_Handler+0x2>

08000f00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x2c>)
{
 8000f02:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	f00a b80b 	b.w	800af40 <HAL_NVIC_SetPriority>
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f30:	6802      	ldr	r2, [r0, #0]
{
 8000f32:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_CRC_MspInit+0x2c>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10d      	bne.n	8000f56 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58024c00 	.word	0x58024c00

08000f60 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_DMA2D_MspInit+0x40>)
{
 8000f62:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d117      	bne.n	8000f9a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f74:	f042 0210 	orr.w	r2, r2, #16
 8000f78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f7c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f8a:	f009 ffd9 	bl	800af40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f8e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f90:	b003      	add	sp, #12
 8000f92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f96:	f00a b805 	b.w	800afa4 <HAL_NVIC_EnableIRQ>
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa0:	52001000 	.word	0x52001000
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	b0ba      	sub	sp, #232	; 0xe8
 8000fac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	a803      	add	r0, sp, #12
 8000fb4:	f020 ff4c 	bl	8021e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	a808      	add	r0, sp, #32
 8000fbe:	f020 ff47 	bl	8021e50 <memset>
  if(hdsi->Instance==DSI)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc8:	d138      	bne.n	800103c <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fce:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f00c fe81 	bl	800dcdc <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	b108      	cbz	r0, 8000fe0 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000fdc:	f7ff ff8e 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fe4:	a903      	add	r1, sp, #12
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000fec:	f042 0210 	orr.w	r2, r2, #16
 8000ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ff4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ff8:	f002 0210 	and.w	r2, r2, #16
 8000ffc:	9201      	str	r2, [sp, #4]
 8000ffe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001020:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001026:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001028:	f00a fda0 	bl	800bb6c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800102c:	207b      	movs	r0, #123	; 0x7b
 800102e:	4622      	mov	r2, r4
 8001030:	2107      	movs	r1, #7
 8001032:	f009 ff85 	bl	800af40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001036:	207b      	movs	r0, #123	; 0x7b
 8001038:	f009 ffb4 	bl	800afa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800103c:	b03a      	add	sp, #232	; 0xe8
 800103e:	bd10      	pop	{r4, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	58022400 	.word	0x58022400

08001048 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b0b4      	sub	sp, #208	; 0xd0
 800104c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104e:	22c8      	movs	r2, #200	; 0xc8
 8001050:	2100      	movs	r1, #0
 8001052:	a802      	add	r0, sp, #8
 8001054:	f020 fefc 	bl	8021e50 <memset>
  if(hltdc->Instance==LTDC)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_LTDC_MspInit+0x74>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d12b      	bne.n	80010b8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001060:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001064:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001066:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800106e:	23a1      	movs	r3, #161	; 0xa1
 8001070:	2205      	movs	r2, #5
 8001072:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001076:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001078:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800107c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001080:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f00c fe2a 	bl	800dcdc <HAL_RCCEx_PeriphCLKConfig>
 8001088:	b108      	cbz	r0, 800108e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800108a:	f7ff ff37 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001094:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001098:	f042 0208 	orr.w	r2, r2, #8
 800109c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010a0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010ae:	f009 ff47 	bl	800af40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f009 ff76 	bl	800afa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010b8:	b034      	add	sp, #208	; 0xd0
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	50001000 	.word	0x50001000
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0bf      	sub	sp, #252	; 0xfc
 80010c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	a807      	add	r0, sp, #28
 80010d0:	f020 febe 	bl	8021e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	22c8      	movs	r2, #200	; 0xc8
 80010d6:	2100      	movs	r1, #0
 80010d8:	a80c      	add	r0, sp, #48	; 0x30
 80010da:	f020 feb9 	bl	8021e50 <memset>
  if(hqspi->Instance==QUADSPI)
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_QSPI_MspInit+0x16c>)
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f040 80a1 	bne.w	800122a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f00c fdf2 	bl	800dcdc <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	b108      	cbz	r0, 80010fe <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80010fa:	f7ff feff 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001104:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001106:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	a907      	add	r1, sp, #28
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800110e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001114:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001118:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800111c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001134:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114c:	f002 0220 	and.w	r2, r2, #32
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001164:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001168:	9204      	str	r2, [sp, #16]
 800116a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001170:	f042 0202 	orr.w	r2, r2, #2
 8001174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117c:	f002 0202 	and.w	r2, r2, #2
 8001180:	9205      	str	r2, [sp, #20]
 8001182:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011a0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011aa:	f00a fcdf 	bl	800bb6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ae:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	a907      	add	r1, sp, #28
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011b4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011be:	f00a fcd5 	bl	800bb6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c4:	a907      	add	r1, sp, #28
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f00a fccb 	bl	800bb6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011da:	a907      	add	r1, sp, #28
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011de:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f00a fcc0 	bl	800bb6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ec:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ee:	a907      	add	r1, sp, #28
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011fc:	f00a fcb6 	bl	800bb6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	a907      	add	r1, sp, #28
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001206:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f00a fcac 	bl	800bb6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001214:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	a907      	add	r1, sp, #28
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f00a fca1 	bl	800bb6c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800122a:	b03f      	add	sp, #252	; 0xfc
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	52005000 	.word	0x52005000
 8001234:	58024400 	.word	0x58024400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021400 	.word	0x58021400
 8001240:	58021c00 	.word	0x58021c00
 8001244:	58020400 	.word	0x58020400
 8001248:	58020c00 	.word	0x58020c00

0800124c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001250:	2100      	movs	r1, #0
 8001252:	2214      	movs	r2, #20
 8001254:	a801      	add	r0, sp, #4
 8001256:	f020 fdfb 	bl	8021e50 <memset>
  if (FMC_Initialized) {
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_SDRAM_MspInit+0xf8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	2900      	cmp	r1, #0
 8001260:	d16d      	bne.n	800133e <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001262:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001266:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	f020 fdf1 	bl	8021e50 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001276:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f00c fd2f 	bl	800dcdc <HAL_RCCEx_PeriphCLKConfig>
 800127e:	b108      	cbz	r0, 8001284 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001280:	f7ff fe3c 	bl	8000efc <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2600      	movs	r6, #0
 800128a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800128c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001292:	a901      	add	r1, sp, #4
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800129a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800129e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b8:	f00a fc58 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012bc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	a901      	add	r1, sp, #4
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f00a fc4d 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80012d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d6:	a901      	add	r1, sp, #4
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e4:	f00a fc42 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012e8:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fa:	f00a fc37 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	a901      	add	r1, sp, #4
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001306:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f00a fc2c 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001314:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a901      	add	r1, sp, #4
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f00a fc21 	bl	800bb6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	a901      	add	r1, sp, #4
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f00a fc17 	bl	800bb6c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800133e:	b039      	add	sp, #228	; 0xe4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	bf00      	nop
 8001344:	24000340 	.word	0x24000340
 8001348:	58024400 	.word	0x58024400
 800134c:	58022000 	.word	0x58022000
 8001350:	58021000 	.word	0x58021000
 8001354:	58021c00 	.word	0x58021c00
 8001358:	58021800 	.word	0x58021800
 800135c:	58020c00 	.word	0x58020c00
 8001360:	58021400 	.word	0x58021400
 8001364:	58020800 	.word	0x58020800

08001368 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001368:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SDRAM_MspDeInit+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	bb62      	cbnz	r2, 80013ca <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001370:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001372:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001378:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_SDRAM_MspDeInit+0x6c>)
 800137c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001384:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001388:	f00a fcdc 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800138c:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <HAL_SDRAM_MspDeInit+0x70>)
 8001392:	f00a fcd7 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001396:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_SDRAM_MspDeInit+0x74>)
 800139c:	f00a fcd2 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013a0:	f248 1131 	movw	r1, #33073	; 0x8131
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_SDRAM_MspDeInit+0x78>)
 80013a6:	f00a fccd 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013aa:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_SDRAM_MspDeInit+0x7c>)
 80013b0:	f00a fcc8 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013b4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_SDRAM_MspDeInit+0x80>)
 80013ba:	f00a fcc3 	bl	800bd44 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013be:	210d      	movs	r1, #13
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013c6:	f00a bcbd 	b.w	800bd44 <HAL_GPIO_DeInit>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	2400033c 	.word	0x2400033c
 80013d0:	58022000 	.word	0x58022000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58020800 	.word	0x58020800

080013f0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	280f      	cmp	r0, #15
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	d902      	bls.n	8001400 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80013fc:	b00a      	add	sp, #40	; 0x28
 80013fe:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001400:	4601      	mov	r1, r0
 8001402:	2200      	movs	r2, #0
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f009 fd9b 	bl	800af40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140a:	2036      	movs	r0, #54	; 0x36
 800140c:	f009 fdca 	bl	800afa4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001412:	4669      	mov	r1, sp
 8001414:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001416:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x88>)
 800141a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f00c fb39 	bl	800daa8 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001436:	9b07      	ldr	r3, [sp, #28]
 8001438:	b9c3      	cbnz	r3, 800146c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f00c fb11 	bl	800da60 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800143e:	4c0f      	ldr	r4, [pc, #60]	; (800147c <HAL_InitTick+0x8c>)
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_InitTick+0x90>)
 8001442:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001444:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001448:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0x94>)
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001452:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001456:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001458:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800145c:	f00d fb70 	bl	800eb40 <HAL_TIM_Base_Init>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1ca      	bne.n	80013fa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001464:	4620      	mov	r0, r4
 8001466:	f00d fa13 	bl	800e890 <HAL_TIM_Base_Start_IT>
 800146a:	e7c7      	b.n	80013fc <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146c:	f00c faf8 	bl	800da60 <HAL_RCC_GetPCLK1Freq>
 8001470:	0040      	lsls	r0, r0, #1
 8001472:	e7e4      	b.n	800143e <HAL_InitTick+0x4e>
 8001474:	24000054 	.word	0x24000054
 8001478:	58024400 	.word	0x58024400
 800147c:	24000344 	.word	0x24000344
 8001480:	40001000 	.word	0x40001000
 8001484:	000f4240 	.word	0x000f4240

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <TIM6_DAC_IRQHandler+0x8>)
 8001496:	f00d ba3d 	b.w	800e914 <HAL_TIM_IRQHandler>
 800149a:	bf00      	nop
 800149c:	24000344 	.word	0x24000344

080014a0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <LTDC_IRQHandler+0x8>)
 80014a2:	f00b b9b0 	b.w	800c806 <HAL_LTDC_IRQHandler>
 80014a6:	bf00      	nop
 80014a8:	24000214 	.word	0x24000214

080014ac <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <DMA2D_IRQHandler+0x8>)
 80014ae:	f009 be84 	b.w	800b1ba <HAL_DMA2D_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	24000190 	.word	0x24000190

080014b8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <DSI_IRQHandler+0x8>)
 80014ba:	f00a b840 	b.w	800b53e <HAL_DSI_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	240001f8 	.word	0x240001f8

080014c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ca:	f020 fc67 	bl	8021d9c <__errno>
 80014ce:	2316      	movs	r3, #22
 80014d0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	bd08      	pop	{r3, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014da:	f020 fc5f 	bl	8021d9c <__errno>
 80014de:	2316      	movs	r3, #22
 80014e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0xa>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	460d      	mov	r5, r1
 80014e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	460e      	mov	r6, r1
 80014ec:	1b73      	subs	r3, r6, r5
 80014ee:	429c      	cmp	r4, r3
 80014f0:	dc01      	bgt.n	80014f6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80014f2:	4620      	mov	r0, r4
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	e7f5      	b.n	80014ec <_read+0x8>

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	460d      	mov	r5, r1
 8001504:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	460e      	mov	r6, r1
 8001508:	1b73      	subs	r3, r6, r5
 800150a:	429c      	cmp	r4, r3
 800150c:	dc01      	bgt.n	8001512 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800150e:	4620      	mov	r0, r4
 8001510:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001512:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	e7f5      	b.n	8001508 <_write+0x8>

0800151c <_close>:

int _close(int file)
{
	return -1;
}
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001526:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001528:	604b      	str	r3, [r1, #4]
}
 800152a:	4770      	bx	lr

0800152c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800152c:	2001      	movs	r0, #1
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001530:	2000      	movs	r0, #0
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <_sbrk+0x30>)
{
 8001536:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001538:	6811      	ldr	r1, [r2, #0]
{
 800153a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800153c:	b909      	cbnz	r1, 8001542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <_sbrk+0x34>)
 8001540:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <_sbrk+0x38>)
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <_sbrk+0x3c>)
 8001548:	4403      	add	r3, r0
 800154a:	1b09      	subs	r1, r1, r4
 800154c:	428b      	cmp	r3, r1
 800154e:	d906      	bls.n	800155e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001550:	f020 fc24 	bl	8021d9c <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800155c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001560:	e7fc      	b.n	800155c <_sbrk+0x28>
 8001562:	bf00      	nop
 8001564:	24000390 	.word	0x24000390
 8001568:	2400ecc0 	.word	0x2400ecc0
 800156c:	24080000 	.word	0x24080000
 8001570:	00001000 	.word	0x00001000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f009 fc08 	bl	800ad8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f020 fc13 	bl	8021dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f919 	bl	80007dc <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 80015b8:	08025c38 	.word	0x08025c38
  ldr r2, =_sbss
 80015bc:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 80015c0:	2400ecc0 	.word	0x2400ecc0

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>

080015c6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015c6:	4770      	bx	lr

080015c8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80015c8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80015ca:	f000 ff69 	bl	80024a0 <touchgfx_components_init>
  touchgfx_init();
}
 80015ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80015d2:	f000 bef3 	b.w	80023bc <touchgfx_init>

080015d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015d6:	f000 bf65 	b.w	80024a4 <touchgfx_taskEntry>

080015da <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015da:	6840      	ldr	r0, [r0, #4]
    }
 80015dc:	4770      	bx	lr

080015de <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015de:	6041      	str	r1, [r0, #4]
    }
 80015e0:	4770      	bx	lr

080015e2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80015e2:	1a51      	subs	r1, r2, r1
 80015e4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80015e8:	fbb1 f0f3 	udiv	r0, r1, r3
 80015ec:	4770      	bx	lr
	...

080015f0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80015f2:	68c0      	ldr	r0, [r0, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015f8:	4358      	muls	r0, r3
 80015fa:	4770      	bx	lr
 80015fc:	24000394 	.word	0x24000394

08001600 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001600:	4770      	bx	lr
	...

08001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001608:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800160c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800162c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001630:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001636:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001638:	2101      	movs	r1, #1
 800163a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800163c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	2210      	movs	r2, #16
 8001640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001644:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	b983      	cbnz	r3, 8001676 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001654:	f00c f9e2 	bl	800da1c <HAL_RCC_GetHCLKFreq>
 8001658:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800165a:	f00c f819 	bl	800d690 <HAL_RCC_GetSysClockFreq>
 800165e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001662:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001666:	f00d fa6b 	bl	800eb40 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800166c:	b003      	add	sp, #12
 800166e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001672:	f00d b8d3 	b.w	800e81c <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001676:	f00c f9f3 	bl	800da60 <HAL_RCC_GetPCLK1Freq>
 800167a:	0044      	lsls	r4, r0, #1
 800167c:	e7ed      	b.n	800165a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	24000394 	.word	0x24000394
 8001688:	08024718 	.word	0x08024718

0800168c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800168c:	b510      	push	{r4, lr}
 800168e:	4604      	mov	r4, r0
 8001690:	2110      	movs	r1, #16
 8001692:	f020 fa44 	bl	8021b1e <_ZdlPvj>
 8001696:	4620      	mov	r0, r4
 8001698:	bd10      	pop	{r4, pc}

0800169a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800169a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800169c:	6803      	ldr	r3, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80016a0:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80016a2:	b131      	cbz	r1, 80016b2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80016a4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80016a6:	4790      	blx	r2
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	1b5b      	subs	r3, r3, r5
 80016ac:	4418      	add	r0, r3
 80016ae:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80016b2:	4790      	blx	r2
 80016b4:	60a0      	str	r0, [r4, #8]
}
 80016b6:	e7fb      	b.n	80016b0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080016b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016b8:	4770      	bx	lr

080016ba <_ZN20STM32TouchControllerD0Ev>:
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	2104      	movs	r1, #4
 80016c0:	f020 fa2d 	bl	8021b1e <_ZdlPvj>
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80016c8:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80016cc:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80016d0:	2000      	movs	r0, #0
    hTS->Width = 800;
 80016d2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80016d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80016dc:	230c      	movs	r3, #12
 80016de:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80016e2:	f009 fa5f 	bl	800aba4 <BSP_TS_Init>
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_ZN20STM32TouchController4initEv+0x40>)
 80016e8:	b910      	cbnz	r0, 80016f0 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80016ee:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1fb      	bne.n	80016ee <_ZN20STM32TouchController4initEv+0x26>
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_ZN20STM32TouchController4initEv+0x44>)
 80016f8:	212e      	movs	r1, #46	; 0x2e
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_ZN20STM32TouchController4initEv+0x48>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <_ZN20STM32TouchController4initEv+0x4c>)
 80016fe:	f020 fb1b 	bl	8021d38 <__assert_func>
 8001702:	bf00      	nop
 8001704:	240003f0 	.word	0x240003f0
 8001708:	240003ec 	.word	0x240003ec
 800170c:	08022fcc 	.word	0x08022fcc
 8001710:	08022fdf 	.word	0x08022fdf
 8001714:	08023009 	.word	0x08023009

08001718 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800171c:	460f      	mov	r7, r1
 800171e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001720:	781d      	ldrb	r5, [r3, #0]
 8001722:	b915      	cbnz	r5, 800172a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001724:	2500      	movs	r5, #0
}
 8001726:	4628      	mov	r0, r5
 8001728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800172a:	4c07      	ldr	r4, [pc, #28]	; (8001748 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800172c:	2000      	movs	r0, #0
 800172e:	4621      	mov	r1, r4
 8001730:	f009 facc 	bl	800accc <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f4      	beq.n	8001724 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	6033      	str	r3, [r6, #0]
            return true;
 8001742:	e7f0      	b.n	8001726 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001744:	240003ec 	.word	0x240003ec
 8001748:	240003e0 	.word	0x240003e0

0800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800174c:	2803      	cmp	r0, #3
 800174e:	d825      	bhi.n	800179c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001750:	e8df f000 	tbb	[pc, r0]
 8001754:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800175a:	2108      	movs	r1, #8
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001766:	f00a bb95 	b.w	800be94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	0952      	lsrs	r2, r2, #5
 8001778:	e7f4      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	0952      	lsrs	r2, r2, #5
 8001788:	e7ec      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	0952      	lsrs	r2, r2, #5
 800179a:	e7e4      	b.n	8001766 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	240003f4 	.word	0x240003f4
 80017a4:	58022400 	.word	0x58022400
 80017a8:	58021400 	.word	0x58021400

080017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80017ac:	2803      	cmp	r0, #3
 80017ae:	d825      	bhi.n	80017fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80017b0:	e8df f000 	tbb	[pc, r0]
 80017b4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ba:	2108      	movs	r1, #8
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	3a00      	subs	r2, #0
 80017c0:	bf18      	it	ne
 80017c2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017c6:	f00a bb65 	b.w	800be94 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	3a00      	subs	r2, #0
 80017d4:	bf18      	it	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	e7f4      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	3a00      	subs	r2, #0
 80017e4:	bf18      	it	ne
 80017e6:	2201      	movne	r2, #1
 80017e8:	e7ec      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	3a00      	subs	r2, #0
 80017f6:	bf18      	it	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	e7e4      	b.n	80017c6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	240003f4 	.word	0x240003f4
 8001804:	58022400 	.word	0x58022400
 8001808:	58021400 	.word	0x58021400

0800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800180c:	2803      	cmp	r0, #3
 800180e:	d811      	bhi.n	8001834 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001810:	e8df f000 	tbb	[pc, r0]
 8001814:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001818:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800181c:	f00a bb3f 	b.w	800be9e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	e7f9      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	e7f6      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001832:	e7f3      	b.n	800181c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58022400 	.word	0x58022400
 800183c:	58021400 	.word	0x58021400

08001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001840:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001842:	2803      	cmp	r0, #3
 8001844:	d815      	bhi.n	8001872 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001846:	e8df f000 	tbb	[pc, r0]
 800184a:	0a02      	.short	0x0a02
 800184c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800184e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001852:	f00a fb19 	bl	800be88 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001856:	1e43      	subs	r3, r0, #1
 8001858:	4258      	negs	r0, r3
 800185a:	4158      	adcs	r0, r3
 800185c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	e7f5      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001868:	e7f2      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001870:	e7ef      	b.n	8001852 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001872:	2000      	movs	r0, #0
 8001874:	e7ef      	b.n	8001856 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001876:	bf00      	nop
 8001878:	58022400 	.word	0x58022400
 800187c:	58021400 	.word	0x58021400

08001880 <_ZN8touchgfx4GPIO4initEv>:
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4d08      	ldr	r5, [pc, #32]	; (80018a4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001884:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001886:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001888:	b2e0      	uxtb	r0, r4
 800188a:	f7ff ffd9 	bl	8001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800188e:	b118      	cbz	r0, 8001898 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001894:	bf18      	it	ne
 8001896:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001898:	3401      	adds	r4, #1
 800189a:	3504      	adds	r5, #4
 800189c:	2c05      	cmp	r4, #5
 800189e:	d1f3      	bne.n	8001888 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop
 80018a4:	240003f4 	.word	0x240003f4

080018a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80018a8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80018aa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80018ae:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80018b2:	4770      	bx	lr

080018b4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80018b8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80018ba:	3900      	subs	r1, #0
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80018be:	bf18      	it	ne
 80018c0:	2101      	movne	r1, #1
 80018c2:	7019      	strb	r1, [r3, #0]
    }
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2400ea33 	.word	0x2400ea33

080018cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80018d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018d2:	b10b      	cbz	r3, 80018d8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80018d4:	4608      	mov	r0, r1
 80018d6:	4718      	bx	r3
        }
    }
 80018d8:	4770      	bx	lr

080018da <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80018da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018de:	4770      	bx	lr

080018e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80018e0:	6840      	ldr	r0, [r0, #4]
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4718      	bx	r3

080018e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	24000404 	.word	0x24000404

080018f4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80018f4:	4770      	bx	lr

080018f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80018f6:	f000 be71 	b.w	80025dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080018fa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80018fa:	f000 be4f 	b.w	800259c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018fe <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80018fe:	f000 bead 	b.w	800265c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001902 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001902:	f000 be9f 	b.w	8002644 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001906 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001906:	f000 be51 	b.w	80025ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800190a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
        swapFrameBuffers();
 800190e:	f010 fb33 	bl	8011f78 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	4620      	mov	r0, r4
 8001916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 800191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800191e:	4718      	bx	r3

08001920 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001920:	f00f bd90 	b.w	8011444 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001924 <_ZN11TouchGFXHALD0Ev>:
 8001924:	b510      	push	{r4, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	217c      	movs	r1, #124	; 0x7c
 800192a:	f020 f8f8 	bl	8021b1e <_ZdlPvj>
 800192e:	4620      	mov	r0, r4
 8001930:	bd10      	pop	{r4, pc}
	...

08001934 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800193a:	f00f bdbf 	b.w	80114bc <_ZN8touchgfx3HAL10beginFrameEv>
 800193e:	bf00      	nop
 8001940:	2400000c 	.word	0x2400000c

08001944 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
    HAL::endFrame();
 8001948:	f00f fdc4 	bl	80114d4 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 800194c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001950:	b113      	cbz	r3, 8001958 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    }
}
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c

08001960 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
    GPIO::init();
 8001964:	f7ff ff8c 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001968:	4d07      	ldr	r5, [pc, #28]	; (8001988 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fe1f 	bl	80025ae <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001970:	2300      	movs	r3, #0
    mcuInstr.init();
 8001972:	4628      	mov	r0, r5
 8001974:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001978:	f7ff fe44 	bl	8001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800197c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800197e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001980:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	bf00      	nop
 8001988:	2400040c 	.word	0x2400040c

0800198c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800198c:	6803      	ldr	r3, [r0, #0]
{
 800198e:	4604      	mov	r4, r0
 8001990:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001996:	4798      	blx	r3
    enableInterrupts();
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	4620      	mov	r0, r4
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80019a0:	f000 faa6 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4620      	mov	r0, r4
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2329      	movs	r3, #41	; 0x29
 80019b0:	2215      	movs	r2, #21
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	f009 ffd2 	bl	800b95e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80019ba:	f000 fa99 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	4620      	mov	r0, r4
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4798      	blx	r3
    for (;;)
 80019c6:	e7f8      	b.n	80019ba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80019c8:	240001f8 	.word	0x240001f8

080019cc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80019cc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80019d0:	b11b      	cbz	r3, 80019da <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80019d2:	6840      	ldr	r0, [r0, #4]
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4718      	bx	r3
    }
 80019da:	4618      	mov	r0, r3
 80019dc:	4770      	bx	lr
	...

080019e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019e0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80019e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80019e8:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80019ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80019ee:	428c      	cmp	r4, r1
 80019f0:	d009      	beq.n	8001a06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80019f2:	b93a      	cbnz	r2, 8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80019fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80019fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001a04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d0fc      	beq.n	8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001a14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a16:	2200      	movs	r2, #0
 8001a18:	e7f3      	b.n	8001a02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001a1a:	bf00      	nop
 8001a1c:	2400ea2c 	.word	0x2400ea2c
 8001a20:	2400ea2a 	.word	0x2400ea2a
 8001a24:	2400ea28 	.word	0x2400ea28

08001a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	d803      	bhi.n	8001a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d905      	bls.n	8001a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a3c:	219e      	movs	r1, #158	; 0x9e
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a42:	f020 f979 	bl	8021d38 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a4c:	801a      	strh	r2, [r3, #0]
    }
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	2400ea28 	.word	0x2400ea28
 8001a54:	2400ea2a 	.word	0x2400ea2a
 8001a58:	08023070 	.word	0x08023070
 8001a5c:	080230d3 	.word	0x080230d3
 8001a60:	08023116 	.word	0x08023116
 8001a64:	2400ea2e 	.word	0x2400ea2e
 8001a68:	2400ea30 	.word	0x2400ea30

08001a6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001a74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a76:	b935      	cbnz	r5, 8001a86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001a7a:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001a82:	f020 f959 	bl	8021d38 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a86:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a8a:	3a00      	subs	r2, #0
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001a8e:	bf18      	it	ne
 8001a90:	2201      	movne	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001a94:	6803      	ldr	r3, [r0, #0]
}
 8001a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	4718      	bx	r3
 8001aa0:	24000404 	.word	0x24000404
 8001aa4:	08023169 	.word	0x08023169
 8001aa8:	080231a1 	.word	0x080231a1
 8001aac:	08023116 	.word	0x08023116
 8001ab0:	2400ea32 	.word	0x2400ea32

08001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001ab4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001ab8:	60c3      	str	r3, [r0, #12]
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001ac6:	8503      	strh	r3, [r0, #40]	; 0x28
 8001ac8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001acc:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001ace:	8603      	strh	r3, [r0, #48]	; 0x30
 8001ad0:	6603      	str	r3, [r0, #96]	; 0x60
 8001ad2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001ad6:	6703      	str	r3, [r0, #112]	; 0x70
 8001ad8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae0:	6742      	str	r2, [r0, #116]	; 0x74
 8001ae2:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001aee:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001af2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001af6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001afa:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001afe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b02:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b06:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b0a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b0e:	42b5      	cmp	r5, r6
        instance = this;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b12:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b16:	8015      	strh	r5, [r2, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b1a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b1c:	bf28      	it	cs
 8001b1e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b22:	bf38      	it	cc
 8001b24:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b26:	8016      	strh	r6, [r2, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b2e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b32:	7013      	strb	r3, [r2, #0]
                           height)
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b36:	6003      	str	r3, [r0, #0]
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	01000001 	.word	0x01000001
 8001b40:	2400ea34 	.word	0x2400ea34
 8001b44:	2400ea28 	.word	0x2400ea28
 8001b48:	2400ea2e 	.word	0x2400ea2e
 8001b4c:	2400ea2a 	.word	0x2400ea2a
 8001b50:	2400ea30 	.word	0x2400ea30
 8001b54:	2400ea2c 	.word	0x2400ea2c
 8001b58:	080231f8 	.word	0x080231f8

08001b5c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001b5c:	2b01      	cmp	r3, #1
    {
 8001b5e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001b60:	d80e      	bhi.n	8001b80 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	2215      	movs	r2, #21
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b6e:	f009 fef6 	bl	800b95e <HAL_DSI_ShortWrite>
 8001b72:	b118      	cbz	r0, 8001b7c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b74:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e7fb      	b.n	8001b78 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001b80:	e9cd 1200 	strd	r1, r2, [sp]
 8001b84:	4601      	mov	r1, r0
 8001b86:	2239      	movs	r2, #57	; 0x39
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b8a:	f009 fef9 	bl	800b980 <HAL_DSI_LongWrite>
 8001b8e:	e7f0      	b.n	8001b72 <DSI_IO_Write+0x16>
 8001b90:	240001f8 	.word	0x240001f8

08001b94 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001b96:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	9100      	str	r1, [sp, #0]
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <DSI_IO_Read+0x24>)
 8001ba2:	f009 ff4e 	bl	800ba42 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001ba6:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001ba8:	bf14      	ite	ne
 8001baa:	f06f 0007 	mvnne.w	r0, #7
 8001bae:	2000      	moveq	r0, #0
 8001bb0:	b005      	add	sp, #20
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	240001f8 	.word	0x240001f8

08001bbc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc0:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001bc2:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001bc4:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001bcc:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001bd4:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	2239      	movs	r2, #57	; 0x39
 8001bdc:	f009 fed0 	bl	800b980 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2335      	movs	r3, #53	; 0x35
 8001be4:	462a      	mov	r2, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	f009 feb8 	bl	800b95e <HAL_DSI_ShortWrite>
    }
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	bf00      	nop
 8001bf4:	240001f8 	.word	0x240001f8

08001bf8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001bf8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001bfa:	f7ff ffdf 	bl	8001bbc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c26:	2203      	movs	r2, #3
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	240001f8 	.word	0x240001f8
 8001c34:	50001000 	.word	0x50001000

08001c38 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LCD_ReqEnable+0x20>)
    {
 8001c3a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	b939      	cbnz	r1, 8001c50 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c40:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c44:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c46:	2329      	movs	r3, #41	; 0x29
 8001c48:	2215      	movs	r2, #21
 8001c4a:	9100      	str	r1, [sp, #0]
 8001c4c:	f009 fe87 	bl	800b95e <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001c50:	b003      	add	sp, #12
 8001c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c56:	bf00      	nop
 8001c58:	2400041c 	.word	0x2400041c
 8001c5c:	240001f8 	.word	0x240001f8

08001c60 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001c62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	232a      	movs	r3, #42	; 0x2a
 8001c68:	2239      	movs	r2, #57	; 0x39
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2304      	movs	r3, #4
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <LCD_SetUpdateRegionLeft+0x20>)
 8001c72:	f009 fe85 	bl	800b980 <HAL_DSI_LongWrite>
    }
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7c:	24000004 	.word	0x24000004
 8001c80:	240001f8 	.word	0x240001f8

08001c84 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001c86:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	232a      	movs	r3, #42	; 0x2a
 8001c8c:	2239      	movs	r2, #57	; 0x39
 8001c8e:	2100      	movs	r1, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2304      	movs	r3, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <LCD_SetUpdateRegionRight+0x20>)
 8001c96:	f009 fe73 	bl	800b980 <HAL_DSI_LongWrite>
    }
 8001c9a:	b003      	add	sp, #12
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca0:	24000008 	.word	0x24000008
 8001ca4:	240001f8 	.word	0x240001f8

08001ca8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ca8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001caa:	4d14      	ldr	r5, [pc, #80]	; (8001cfc <HAL_DSI_TearingEffectCallback+0x54>)
 8001cac:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fd4c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001cb4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001cb6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001cc0:	f000 f90a 	bl	8001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001cc6:	682a      	ldr	r2, [r5, #0]
 8001cc8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001cd0:	b173      	cbz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
 8001cd2:	4d0c      	ldr	r5, [pc, #48]	; (8001d04 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001cd4:	782b      	ldrb	r3, [r5, #0]
 8001cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cda:	b94b      	cbnz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_DSI_TearingEffectCallback+0x60>)
 8001cde:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ce0:	f7ff ffbe 	bl	8001c60 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f009 fe2a 	bl	800b93e <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf0:	2000      	movs	r0, #0
    }
 8001cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf6:	f7ff bd59 	b.w	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001cfa:	bf00      	nop
 8001cfc:	2400ea34 	.word	0x2400ea34
 8001d00:	2400000c 	.word	0x2400000c
 8001d04:	2400041d 	.word	0x2400041d
 8001d08:	24000408 	.word	0x24000408

08001d0c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d10:	4e3f      	ldr	r6, [pc, #252]	; (8001e10 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d12:	b085      	sub	sp, #20
 8001d14:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d16:	7833      	ldrb	r3, [r6, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d076      	beq.n	8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d1c:	4d3d      	ldr	r5, [pc, #244]	; (8001e14 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d1e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e24 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d22:	f8d5 9000 	ldr.w	r9, [r5]
 8001d26:	4f3c      	ldr	r7, [pc, #240]	; (8001e18 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d28:	f1b9 0f00 	cmp.w	r9, #0
 8001d2c:	d139      	bne.n	8001da2 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f009 f8dc 	bl	800aeec <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f8cd 9000 	str.w	r9, [sp]
 8001d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d3e:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d42:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d54:	f002 0208 	and.w	r2, r2, #8
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d66:	4402      	add	r2, r0
 8001d68:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001d8e:	f7ff ff79 	bl	8001c84 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001d92:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001d94:	4620      	mov	r0, r4
                updateRegion = 1;
 8001d96:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001d9e:	f009 bdce 	b.w	800b93e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001da6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da8:	9502      	str	r5, [sp, #8]
 8001daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8001dc6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dca:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001dce:	f041 0101 	orr.w	r1, r1, #1
 8001dd2:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001dd4:	9503      	str	r5, [sp, #12]
 8001dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
 8001dec:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dee:	f7ff fcdd 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001df2:	f7ff ff21 	bl	8001c38 <LCD_ReqEnable>
        return instance;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001df8:	7035      	strb	r5, [r6, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001dfc:	b128      	cbz	r0, 8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e02:	b005      	add	sp, #20
 8001e04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4718      	bx	r3
 8001e0a:	b005      	add	sp, #20
 8001e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e10:	2400041d 	.word	0x2400041d
 8001e14:	24000408 	.word	0x24000408
 8001e18:	24000404 	.word	0x24000404
 8001e1c:	2400ea2e 	.word	0x2400ea2e
 8001e20:	2400ea34 	.word	0x2400ea34
 8001e24:	24000214 	.word	0x24000214

08001e28 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e28:	4601      	mov	r1, r0
 8001e2a:	b508      	push	{r3, lr}
        return instance;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <IdleTaskHook+0x14>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e30:	b101      	cbz	r1, 8001e34 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e32:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e34:	f010 f8ba 	bl	8011fac <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e38:	2001      	movs	r0, #1
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	2400ea34 	.word	0x2400ea34

08001e40 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001e4a:	601a      	str	r2, [r3, #0]

}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2400040c 	.word	0x2400040c
 8001e54:	08022fac 	.word	0x08022fac

08001e58 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2200      	movs	r2, #0
{
 8001e5c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f00c ffbf 	bl	800ede2 <osSemaphoreNew>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e66:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e68:	b928      	cbnz	r0, 8001e76 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e6c:	2128      	movs	r1, #40	; 0x28
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e72:	f01f ff61 	bl	8021d38 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00d f84e 	bl	800ef1c <osMessageQueueNew>
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e82:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e84:	b918      	cbnz	r0, 8001e8e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e8c:	e7f0      	b.n	8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	24000424 	.word	0x24000424
 8001e94:	080232c8 	.word	0x080232c8
 8001e98:	08023311 	.word	0x08023311
 8001e9c:	08023340 	.word	0x08023340
 8001ea0:	24000420 	.word	0x24000420
 8001ea4:	0802338f 	.word	0x0802338f

08001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f00c bfe1 	b.w	800ee76 <osSemaphoreAcquire>
 8001eb4:	24000424 	.word	0x24000424

08001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f00d b806 	b.w	800eecc <osSemaphoreRelease>
 8001ec0:	24000424 	.word	0x24000424

08001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f00c bfd4 	b.w	800ee76 <osSemaphoreAcquire>
 8001ece:	bf00      	nop
 8001ed0:	24000424 	.word	0x24000424

08001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ed4:	f7ff bff0 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6800      	ldr	r0, [r0, #0]
 8001ee2:	f00d b856 	b.w	800ef92 <osMessageQueuePut>
 8001ee6:	bf00      	nop
 8001ee8:	24000420 	.word	0x24000420
 8001eec:	24000010 	.word	0x24000010

08001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ef6:	a901      	add	r1, sp, #4
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f00d f879 	bl	800eff2 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2200      	movs	r2, #0
 8001f06:	a901      	add	r1, sp, #4
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f00d f872 	bl	800eff2 <osMessageQueueGet>
}
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd10      	pop	{r4, pc}
 8001f12:	bf00      	nop
 8001f14:	24000420 	.word	0x24000420

08001f18 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4718      	bx	r3

08001f1e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4770      	bx	lr

08001f22 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4718      	bx	r3

08001f28 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f28:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f2c:	4770      	bx	lr
	...

08001f30 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	4770      	bx	lr
 8001f48:	08023530 	.word	0x08023530
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
}
 8001f54:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f58:	f7ff ffea 	bl	8001f30 <_ZN8STM32DMAD1Ev>
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f01f fdde 	bl	8021b1e <_ZdlPvj>
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001f6a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001f78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f7c:	f002 0210 	and.w	r2, r2, #16
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f86:	f042 0210 	orr.w	r2, r2, #16
 8001f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_ZN8STM32DMA10initializeEv+0x44>)
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f98:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	609a      	str	r2, [r3, #8]
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	24000190 	.word	0x24000190
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	2400ea34 	.word	0x2400ea34

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f010 f937 	bl	8012254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08023530 	.word	0x08023530

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f01f fe89 	bl	8021d38 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	080233d1 	.word	0x080233d1
 8002034:	080233ec 	.word	0x080233ec
 8002038:	08023436 	.word	0x08023436

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f01f fe6b 	bl	8021d38 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	080233d1 	.word	0x080233d1
 8002070:	08023483 	.word	0x08023483
 8002074:	08023436 	.word	0x08023436

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002120:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002122:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002124:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002128:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800212c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800212e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002132:	7822      	ldrb	r2, [r4, #0]
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1101 	movw	r1, #257	; 0x101
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f01f fdf8 	bl	8021d38 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	52001000 	.word	0x52001000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	080234ce 	.word	0x080234ce
 80021bc:	080234e8 	.word	0x080234e8
 80021c0:	08023436 	.word	0x08023436
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa5      	ldrh	r5, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021de:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e2:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e5      	ldr	r5, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002212:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002216:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002218:	e7f7      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800221a:	bf00      	nop
 800221c:	52001000 	.word	0x52001000
 8002220:	00010009 	.word	0x00010009
 8002224:	00020201 	.word	0x00020201
 8002228:	00030201 	.word	0x00030201

0800222c <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d4fc      	bmi.n	800222e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002234:	2223      	movs	r2, #35	; 0x23
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	52001000 	.word	0x52001000

08002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002240:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002242:	4c10      	ldr	r4, [pc, #64]	; (8002284 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002244:	6825      	ldr	r5, [r4, #0]
 8002246:	07ed      	lsls	r5, r5, #31
 8002248:	d4fc      	bmi.n	8002244 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800224c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800224e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002250:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002252:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002256:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800225a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800225c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800225e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002260:	d00c      	beq.n	800227c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002262:	4909      	ldr	r1, [pc, #36]	; (8002288 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002264:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002268:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800226a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800226e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002272:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002274:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002276:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002278:	6023      	str	r3, [r4, #0]
    }
}
 800227a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800227c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002280:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002282:	e7f9      	b.n	8002278 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002284:	52001000 	.word	0x52001000
 8002288:	00010009 	.word	0x00010009
 800228c:	00020001 	.word	0x00020001
 8002290:	00030001 	.word	0x00030001

08002294 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002294:	2001      	movs	r0, #1
 8002296:	4770      	bx	lr

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002298:	200c      	movs	r0, #12
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800229c:	230c      	movs	r3, #12
 800229e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022a2:	3008      	adds	r0, #8
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022a6:	230c      	movs	r3, #12
 80022a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ac:	3008      	adds	r0, #8
 80022ae:	4770      	bx	lr

080022b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022b4:	f643 30cc 	movw	r0, #15308	; 0x3bcc
 80022b8:	4770      	bx	lr

080022ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ba:	f643 33cc 	movw	r3, #15308	; 0x3bcc
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c6:	f643 33cc 	movw	r3, #15308	; 0x3bcc
 80022ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d2:	2001      	movs	r0, #1
 80022d4:	4770      	bx	lr

080022d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d6:	2010      	movs	r0, #16
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022e6:	3008      	adds	r0, #8
 80022e8:	4770      	bx	lr

080022ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022ea:	4608      	mov	r0, r1
 80022ec:	f000 bb80 	b.w	80029f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022f2:	b510      	push	{r4, lr}
 80022f4:	4604      	mov	r4, r0
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	f00e fdfd 	bl	8010ef6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	080235e8 	.word	0x080235e8

08002304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff fff2 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800230c:	2114      	movs	r1, #20
 800230e:	4620      	mov	r0, r4
 8002310:	f01f fc05 	bl	8021b1e <_ZdlPvj>
 8002314:	4620      	mov	r0, r4
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f00e fde9 	bl	8010ef6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}
 8002328:	080235b4 	.word	0x080235b4

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fff2 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002334:	f643 31d4 	movw	r1, #15316	; 0x3bd4
 8002338:	4620      	mov	r0, r4
 800233a:	f01f fbf0 	bl	8021b1e <_ZdlPvj>
 800233e:	4620      	mov	r0, r4
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002346:	b510      	push	{r4, lr}
 8002348:	4604      	mov	r4, r0
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	f00e fdd3 	bl	8010ef6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}
 8002354:	08023580 	.word	0x08023580

08002358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	f7ff fff2 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002360:	2118      	movs	r1, #24
 8002362:	4620      	mov	r0, r4
 8002364:	f01f fbdb 	bl	8021b1e <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_ZN12FrontendHeapD1Ev+0x24>)
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8002378:	f7ff ffba 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800237c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002380:	f7ff ffca 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002384:	f104 0014 	add.w	r0, r4, #20
 8002388:	f7ff ffdc 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238c:	4620      	mov	r0, r4
 800238e:	bd10      	pop	{r4, pc}
 8002390:	0802361c 	.word	0x0802361c

08002394 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002394:	b508      	push	{r3, lr}
 8002396:	4802      	ldr	r0, [pc, #8]	; (80023a0 <__tcf_0+0xc>)
 8002398:	f7ff ffe8 	bl	800236c <_ZN12FrontendHeapD1Ev>
 800239c:	bd08      	pop	{r3, pc}
 800239e:	bf00      	nop
 80023a0:	2400042c 	.word	0x2400042c

080023a4 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	f7ff ffe0 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023ac:	f643 5174 	movw	r1, #15732	; 0x3d74
 80023b0:	4620      	mov	r0, r4
 80023b2:	f01f fbb4 	bl	8021b1e <_ZdlPvj>
 80023b6:	4620      	mov	r0, r4
 80023b8:	bd10      	pop	{r4, pc}
	...

080023bc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023c0:	f000 f9a2 	bl	8002708 <_ZN14BitmapDatabase11getInstanceEv>
 80023c4:	2400      	movs	r4, #0
 80023c6:	4605      	mov	r5, r0
 80023c8:	f000 f9a2 	bl	8002710 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023cc:	4623      	mov	r3, r4
 80023ce:	4601      	mov	r1, r0
 80023d0:	4622      	mov	r2, r4
 80023d2:	4628      	mov	r0, r5
 80023d4:	9400      	str	r4, [sp, #0]
 80023d6:	f016 ff91 	bl	80192fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <touchgfx_init+0xb8>)
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023de:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023e0:	4d26      	ldr	r5, [pc, #152]	; (800247c <touchgfx_init+0xc0>)
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	f004 f998 	bl	8006718 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023e8:	4825      	ldr	r0, [pc, #148]	; (8002480 <touchgfx_init+0xc4>)
 80023ea:	f016 fe3f 	bl	801906c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023ee:	782b      	ldrb	r3, [r5, #0]
 80023f0:	f3bf 8f5b 	dmb	ish
 80023f4:	07db      	lsls	r3, r3, #31
 80023f6:	d437      	bmi.n	8002468 <touchgfx_init+0xac>
 80023f8:	4628      	mov	r0, r5
 80023fa:	f01f fb92 	bl	8021b22 <__cxa_guard_acquire>
 80023fe:	b398      	cbz	r0, 8002468 <touchgfx_init+0xac>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002400:	4c20      	ldr	r4, [pc, #128]	; (8002484 <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <touchgfx_init+0xcc>)
 8002404:	f504 5770 	add.w	r7, r4, #15360	; 0x3c00
 8002408:	f104 0014 	add.w	r0, r4, #20
 800240c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002410:	6023      	str	r3, [r4, #0]
 8002412:	f107 0618 	add.w	r6, r7, #24
 8002416:	6060      	str	r0, [r4, #4]
 8002418:	f8c4 8008 	str.w	r8, [r4, #8]
 800241c:	60e7      	str	r7, [r4, #12]
 800241e:	6126      	str	r6, [r4, #16]
 8002420:	f00e fd6a 	bl	8010ef8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <touchgfx_init+0xd0>)
 8002426:	4640      	mov	r0, r8
 8002428:	6163      	str	r3, [r4, #20]
 800242a:	f00e fd65 	bl	8010ef8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <touchgfx_init+0xd4>)
 8002430:	4638      	mov	r0, r7
 8002432:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002434:	f00e fd60 	bl	8010ef8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002438:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <touchgfx_init+0xd8>)
 800243e:	f603 4014 	addw	r0, r3, #3092	; 0xc14
 8002442:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8002446:	f006 fdcd 	bl	8008fe4 <_ZN5ModelC1Ev>
 800244a:	4622      	mov	r2, r4
 800244c:	f107 0114 	add.w	r1, r7, #20
 8002450:	4630      	mov	r0, r6
 8002452:	f006 fdbd 	bl	8008fd0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002456:	4630      	mov	r0, r6
 8002458:	f000 faca 	bl	80029f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800245c:	480e      	ldr	r0, [pc, #56]	; (8002498 <touchgfx_init+0xdc>)
 800245e:	f01f fc89 	bl	8021d74 <atexit>
 8002462:	4628      	mov	r0, r5
 8002464:	f01f fb69 	bl	8021b3a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <touchgfx_init+0xe0>)
}
 800246a:	b002      	add	sp, #8
 800246c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002470:	f7ff ba76 	b.w	8001960 <_ZN11TouchGFXHAL10initializeEv>
 8002474:	2400ea98 	.word	0x2400ea98
 8002478:	24004fc0 	.word	0x24004fc0
 800247c:	24000428 	.word	0x24000428
 8002480:	24000014 	.word	0x24000014
 8002484:	2400042c 	.word	0x2400042c
 8002488:	0802361c 	.word	0x0802361c
 800248c:	08023580 	.word	0x08023580
 8002490:	080235b4 	.word	0x080235b4
 8002494:	080235e8 	.word	0x080235e8
 8002498:	08002395 	.word	0x08002395
 800249c:	24004f44 	.word	0x24004f44

080024a0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024a0:	4770      	bx	lr
	...

080024a4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024a4:	4801      	ldr	r0, [pc, #4]	; (80024ac <touchgfx_taskEntry+0x8>)
 80024a6:	f7ff ba71 	b.w	800198c <_ZN11TouchGFXHAL9taskEntryEv>
 80024aa:	bf00      	nop
 80024ac:	24004f44 	.word	0x24004f44

080024b0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024b0:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024b2:	490c      	ldr	r1, [pc, #48]	; (80024e4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024b6:	4c0d      	ldr	r4, [pc, #52]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024b8:	4608      	mov	r0, r1
 80024ba:	6023      	str	r3, [r4, #0]
 80024bc:	f7ff fd84 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024c2:	4610      	mov	r0, r2
 80024c4:	f019 f934 	bl	801b730 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024c8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d0:	4904      	ldr	r1, [pc, #16]	; (80024e4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024d2:	4808      	ldr	r0, [pc, #32]	; (80024f4 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024d4:	e9cd 3200 	strd	r3, r2, [sp]
 80024d8:	4623      	mov	r3, r4
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024dc:	f7ff faea 	bl	8001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024e0:	b002      	add	sp, #8
 80024e2:	bd10      	pop	{r4, pc}
 80024e4:	240041a4 	.word	0x240041a4
 80024e8:	08023060 	.word	0x08023060
 80024ec:	240041a0 	.word	0x240041a0
 80024f0:	24004fc4 	.word	0x24004fc4
 80024f4:	24004f44 	.word	0x24004f44

080024f8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80024f8:	4801      	ldr	r0, [pc, #4]	; (8002500 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80024fa:	f7ff bd19 	b.w	8001f30 <_ZN8STM32DMAD1Ev>
 80024fe:	bf00      	nop
 8002500:	240041a4 	.word	0x240041a4

08002504 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002504:	2000      	movs	r0, #0
 8002506:	4770      	bx	lr

08002508 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002508:	8081      	strh	r1, [r0, #4]
    }
 800250a:	4770      	bx	lr

0800250c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800250c:	80c1      	strh	r1, [r0, #6]
    }
 800250e:	4770      	bx	lr

08002510 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002510:	8101      	strh	r1, [r0, #8]
    }
 8002512:	4770      	bx	lr

08002514 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002514:	8141      	strh	r1, [r0, #10]
    }
 8002516:	4770      	bx	lr

08002518 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002518:	4770      	bx	lr

0800251a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800251a:	4770      	bx	lr

0800251c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800251c:	4770      	bx	lr

0800251e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800251e:	4770      	bx	lr

08002520 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002520:	4770      	bx	lr

08002522 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002522:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002524:	88c4      	ldrh	r4, [r0, #6]
 8002526:	6803      	ldr	r3, [r0, #0]
 8002528:	1b12      	subs	r2, r2, r4
 800252a:	8884      	ldrh	r4, [r0, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	1b09      	subs	r1, r1, r4
 8002530:	b212      	sxth	r2, r2
    }
 8002532:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002536:	b209      	sxth	r1, r1
 8002538:	4718      	bx	r3

0800253a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800253a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800254a:	6010      	str	r0, [r2, #0]
    }
 800254c:	4770      	bx	lr

0800254e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800254e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002552:	b11a      	cbz	r2, 800255c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002554:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002558:	b102      	cbz	r2, 800255c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800255a:	6018      	str	r0, [r3, #0]
        }
    }
 800255c:	4770      	bx	lr

0800255e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800255e:	2000      	movs	r0, #0
 8002560:	4770      	bx	lr

08002562 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002562:	888b      	ldrh	r3, [r1, #4]
 8002564:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002566:	2001      	movs	r0, #1
 8002568:	4770      	bx	lr

0800256a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800256a:	4770      	bx	lr

0800256c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800256c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002572:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002576:	4770      	bx	lr

08002578 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002578:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800257a:	b510      	push	{r4, lr}
        return rect.width;
 800257c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002580:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002584:	8002      	strh	r2, [r0, #0]
 8002586:	8042      	strh	r2, [r0, #2]
 8002588:	8084      	strh	r4, [r0, #4]
 800258a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800258c:	bd10      	pop	{r4, pc}

0800258e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800258e:	2200      	movs	r2, #0
 8002590:	8002      	strh	r2, [r0, #0]
 8002592:	8042      	strh	r2, [r0, #2]
 8002594:	8082      	strh	r2, [r0, #4]
 8002596:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002598:	4770      	bx	lr
	...

0800259c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	4b02      	ldr	r3, [pc, #8]	; (80025a8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800259e:	2290      	movs	r2, #144	; 0x90
 80025a0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100

080025ac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025ac:	4770      	bx	lr

080025ae <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025ae:	b570      	push	{r4, r5, r6, lr}
 80025b0:	4604      	mov	r4, r0
    HAL::initialize();
 80025b2:	f00e ff9c 	bl	80114ee <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025ba:	f014 f889 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
 80025be:	4601      	mov	r1, r0
 80025c0:	4620      	mov	r0, r4
 80025c2:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	4620      	mov	r0, r4
 80025c8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80025cc:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025d0:	2300      	movs	r3, #0
 80025d2:	46ac      	mov	ip, r5
 80025d4:	461a      	mov	r2, r3
}
 80025d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025da:	4760      	bx	ip

080025dc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80025dc:	f00e bf38 	b.w	8011450 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080025e0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80025e0:	f00f b893 	b.w	801170a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080025e4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80025e4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80025e8:	b112      	cbz	r2, 80025f0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4718      	bx	r3
    }
 80025f0:	4770      	bx	lr
	...

080025f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80025f6:	6953      	ldr	r3, [r2, #20]
 80025f8:	03db      	lsls	r3, r3, #15
{
 80025fa:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025fc:	d51e      	bpl.n	800263c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002604:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002608:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800260c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002610:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002614:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002618:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800261a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800261e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002620:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002624:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002626:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800262a:	d2f9      	bcs.n	8002620 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800262c:	3b20      	subs	r3, #32
 800262e:	f113 0f20 	cmn.w	r3, #32
 8002632:	d1f2      	bne.n	800261a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002634:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002638:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800263c:	bd70      	pop	{r4, r5, r6, pc}
 800263e:	bf00      	nop
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8002646:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800264a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800264e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002652:	f3bf 8f6f 	isb	sy
}
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100

0800265c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800265e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800266c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800266e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002670:	4e12      	ldr	r6, [pc, #72]	; (80026bc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8002672:	4604      	mov	r4, r0
 8002674:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002676:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002678:	6003      	str	r3, [r0, #0]
 800267a:	6833      	ldr	r3, [r6, #0]
 800267c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002680:	b10a      	cbz	r2, 8002686 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8002682:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002684:	b900      	cbnz	r0, 8002688 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002686:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002688:	6803      	ldr	r3, [r0, #0]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4798      	blx	r3
 800268e:	1e43      	subs	r3, r0, #1
 8002690:	425d      	negs	r5, r3
 8002692:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8002694:	6833      	ldr	r3, [r6, #0]
 8002696:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8002698:	b130      	cbz	r0, 80026a8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800269a:	6803      	ldr	r3, [r0, #0]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	4798      	blx	r3
 80026a0:	2801      	cmp	r0, #1
 80026a2:	bf08      	it	eq
 80026a4:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80026a8:	b92d      	cbnz	r5, 80026b6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80026ac:	2127      	movs	r1, #39	; 0x27
 80026ae:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80026b0:	4806      	ldr	r0, [pc, #24]	; (80026cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80026b2:	f01f fb41 	bl	8021d38 <__assert_func>
    }
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
 80026ba:	bf00      	nop
 80026bc:	2400ea34 	.word	0x2400ea34
 80026c0:	08023738 	.word	0x08023738
 80026c4:	08023628 	.word	0x08023628
 80026c8:	08023686 	.word	0x08023686
 80026cc:	080236bf 	.word	0x080236bf

080026d0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026d0:	4770      	bx	lr

080026d2 <_ZN23ApplicationFontProviderD0Ev>:
 80026d2:	b510      	push	{r4, lr}
 80026d4:	4604      	mov	r4, r0
 80026d6:	2104      	movs	r1, #4
 80026d8:	f01f fa21 	bl	8021b1e <_ZdlPvj>
 80026dc:	4620      	mov	r0, r4
 80026de:	bd10      	pop	{r4, pc}

080026e0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80026e0:	2901      	cmp	r1, #1
{
 80026e2:	b508      	push	{r3, lr}
    switch (typography)
 80026e4:	d006      	beq.n	80026f4 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80026e6:	2902      	cmp	r1, #2
 80026e8:	d008      	beq.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80026ea:	b959      	cbnz	r1, 8002704 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80026ec:	f004 f860 	bl	80067b0 <_ZN17TypedTextDatabase8getFontsEv>
 80026f0:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80026f2:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80026f4:	f004 f85c 	bl	80067b0 <_ZN17TypedTextDatabase8getFontsEv>
 80026f8:	6840      	ldr	r0, [r0, #4]
 80026fa:	e7fa      	b.n	80026f2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80026fc:	f004 f858 	bl	80067b0 <_ZN17TypedTextDatabase8getFontsEv>
 8002700:	6880      	ldr	r0, [r0, #8]
 8002702:	e7f6      	b.n	80026f2 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002704:	2000      	movs	r0, #0
 8002706:	e7f4      	b.n	80026f2 <_ZN23ApplicationFontProvider7getFontEt+0x12>

08002708 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002708:	4800      	ldr	r0, [pc, #0]	; (800270c <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800270a:	4770      	bx	lr
 800270c:	08023764 	.word	0x08023764

08002710 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002710:	2001      	movs	r0, #1
 8002712:	4770      	bx	lr

08002714 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002714:	b513      	push	{r0, r1, r4, lr}
 8002716:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002718:	b151      	cbz	r1, 8002730 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800271a:	6803      	ldr	r3, [r0, #0]
 800271c:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800271e:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002720:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002724:	689c      	ldr	r4, [r3, #8]
 8002726:	f10d 0303 	add.w	r3, sp, #3
 800272a:	47a0      	blx	r4
        return glyph;
    }
 800272c:	b002      	add	sp, #8
 800272e:	bd10      	pop	{r4, pc}
            return 0;
 8002730:	4608      	mov	r0, r1
 8002732:	e7fb      	b.n	800272c <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002734 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002734:	89c0      	ldrh	r0, [r0, #14]
 8002736:	4770      	bx	lr

08002738 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002738:	8a00      	ldrh	r0, [r0, #16]
 800273a:	4770      	bx	lr

0800273c <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 800273c:	88c0      	ldrh	r0, [r0, #6]
 800273e:	4770      	bx	lr

08002740 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002740:	8880      	ldrh	r0, [r0, #4]
 8002742:	4770      	bx	lr

08002744 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002744:	7a80      	ldrb	r0, [r0, #10]
    }
 8002746:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800274a:	4770      	bx	lr

0800274c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800274c:	7a80      	ldrb	r0, [r0, #10]
    }
 800274e:	09c0      	lsrs	r0, r0, #7
 8002750:	4770      	bx	lr

08002752 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002752:	4770      	bx	lr

08002754 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
    }
 8002758:	2108      	movs	r1, #8
 800275a:	f01f f9e0 	bl	8021b1e <_ZdlPvj>
 800275e:	4620      	mov	r0, r4
 8002760:	bd10      	pop	{r4, pc}

08002762 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002762:	4770      	bx	lr

08002764 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002764:	4770      	bx	lr

08002766 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002766:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800276a:	6808      	ldr	r0, [r1, #0]
 800276c:	6849      	ldr	r1, [r1, #4]
 800276e:	c303      	stmia	r3!, {r0, r1}
    }
 8002770:	4770      	bx	lr

08002772 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002772:	4770      	bx	lr

08002774 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002774:	4770      	bx	lr

08002776 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002776:	6041      	str	r1, [r0, #4]
    }
 8002778:	4770      	bx	lr

0800277a <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800277a:	4770      	bx	lr

0800277c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800277e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002782:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002786:	2300      	movs	r3, #0
 8002788:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800278c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002790:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	0800283d 	.word	0x0800283d

0800279c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 800279c:	2301      	movs	r3, #1
 800279e:	7203      	strb	r3, [r0, #8]
    }
 80027a0:	4770      	bx	lr

080027a2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027a2:	4770      	bx	lr

080027a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80027a4:	4770      	bx	lr

080027a6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027a6:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027a8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80027aa:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027ac:	68c2      	ldr	r2, [r0, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	1054      	asrs	r4, r2, #1
 80027b2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027b6:	07d2      	lsls	r2, r2, #31
 80027b8:	bf48      	it	mi
 80027ba:	590a      	ldrmi	r2, [r1, r4]
    }
 80027bc:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027c0:	bf48      	it	mi
 80027c2:	58d3      	ldrmi	r3, [r2, r3]
 80027c4:	4718      	bx	r3

080027c6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80027c6:	6843      	ldr	r3, [r0, #4]
 80027c8:	b12b      	cbz	r3, 80027d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80027ca:	6883      	ldr	r3, [r0, #8]
 80027cc:	b92b      	cbnz	r3, 80027da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80027ce:	68c0      	ldr	r0, [r0, #12]
 80027d0:	f000 0001 	and.w	r0, r0, #1
 80027d4:	4770      	bx	lr
 80027d6:	4618      	mov	r0, r3
 80027d8:	4770      	bx	lr
 80027da:	2001      	movs	r0, #1
    }
 80027dc:	4770      	bx	lr

080027de <_ZN8touchgfx12NoTransitionD0Ev>:
 80027de:	b510      	push	{r4, lr}
 80027e0:	4604      	mov	r4, r0
 80027e2:	210c      	movs	r1, #12
 80027e4:	f01f f99b 	bl	8021b1e <_ZdlPvj>
 80027e8:	4620      	mov	r0, r4
 80027ea:	bd10      	pop	{r4, pc}

080027ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027ec:	b510      	push	{r4, lr}
 80027ee:	4604      	mov	r4, r0
 80027f0:	2110      	movs	r1, #16
 80027f2:	f01f f994 	bl	8021b1e <_ZdlPvj>
 80027f6:	4620      	mov	r0, r4
 80027f8:	bd10      	pop	{r4, pc}

080027fa <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80027fa:	b510      	push	{r4, lr}
 80027fc:	4604      	mov	r4, r0
 80027fe:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002802:	f01f f98c 	bl	8021b1e <_ZdlPvj>
 8002806:	4620      	mov	r0, r4
 8002808:	bd10      	pop	{r4, pc}

0800280a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800280a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800280c:	f013 ff60 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002814:	f014 bba6 	b.w	8016f64 <_ZN8touchgfx11Application10invalidateEv>

08002818 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800281c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002820:	b158      	cbz	r0, 800283a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002822:	6803      	ldr	r3, [r0, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4798      	blx	r3
 8002828:	b138      	cbz	r0, 800283a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800282a:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800282e:	6803      	ldr	r3, [r0, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800283a:	bd10      	pop	{r4, pc}

0800283c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800283c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002840:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002844:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002846:	68a8      	ldr	r0, [r5, #8]
 8002848:	6803      	ldr	r3, [r0, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4798      	blx	r3
 800284e:	f643 33cb 	movw	r3, #15307	; 0x3bcb
 8002852:	4298      	cmp	r0, r3
 8002854:	d805      	bhi.n	8002862 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002858:	21a3      	movs	r1, #163	; 0xa3
 800285a:	4a46      	ldr	r2, [pc, #280]	; (8002974 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800285c:	4846      	ldr	r0, [pc, #280]	; (8002978 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800285e:	f01f fa6b 	bl	8021d38 <__assert_func>
 8002862:	6868      	ldr	r0, [r5, #4]
 8002864:	6803      	ldr	r3, [r0, #0]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4798      	blx	r3
 800286a:	280f      	cmp	r0, #15
 800286c:	d803      	bhi.n	8002876 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002870:	21a4      	movs	r1, #164	; 0xa4
 8002872:	4a40      	ldr	r2, [pc, #256]	; (8002974 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002874:	e7f2      	b.n	800285c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002876:	68e8      	ldr	r0, [r5, #12]
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4798      	blx	r3
 800287e:	280b      	cmp	r0, #11
 8002880:	d803      	bhi.n	800288a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002884:	21a5      	movs	r1, #165	; 0xa5
 8002886:	4a3b      	ldr	r2, [pc, #236]	; (8002974 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002888:	e7e8      	b.n	800285c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800288a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 800288e:	f013 ff1f 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002892:	3004      	adds	r0, #4
 8002894:	f013 ff41 	bl	801671a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8002898:	f8d9 0000 	ldr.w	r0, [r9]
 800289c:	b110      	cbz	r0, 80028a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 800289e:	6803      	ldr	r3, [r0, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4798      	blx	r3
    if (*currentTrans)
 80028a4:	f8d9 0000 	ldr.w	r0, [r9]
 80028a8:	b110      	cbz	r0, 80028b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80028aa:	6803      	ldr	r3, [r0, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4798      	blx	r3
    if (*currentScreen)
 80028b0:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800298c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80028b4:	f8d8 0000 	ldr.w	r0, [r8]
 80028b8:	b110      	cbz	r0, 80028c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80028ba:	6803      	ldr	r3, [r0, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4798      	blx	r3
    if (*currentPresenter)
 80028c0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028c4:	b110      	cbz	r0, 80028cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80028c6:	6803      	ldr	r3, [r0, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4798      	blx	r3
    if (*currentScreen)
 80028cc:	f8d8 0000 	ldr.w	r0, [r8]
 80028d0:	b110      	cbz	r0, 80028d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80028d2:	6803      	ldr	r3, [r0, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4798      	blx	r3
    if (*currentPresenter)
 80028d8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028dc:	b110      	cbz	r0, 80028e4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80028de:	6803      	ldr	r3, [r0, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80028e4:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80028e6:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80028e8:	f04f 0b00 	mov.w	fp, #0
 80028ec:	6803      	ldr	r3, [r0, #0]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	4798      	blx	r3
 80028f2:	4b24      	ldr	r3, [pc, #144]	; (8002984 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 80028f4:	4604      	mov	r4, r0
 80028f6:	f8c0 b004 	str.w	fp, [r0, #4]
 80028fa:	6003      	str	r3, [r0, #0]
 80028fc:	4659      	mov	r1, fp
 80028fe:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002902:	68a8      	ldr	r0, [r5, #8]
 8002904:	6803      	ldr	r3, [r0, #0]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4798      	blx	r3
 800290a:	4606      	mov	r6, r0
 800290c:	f006 fc06 	bl	800911c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002910:	6868      	ldr	r0, [r5, #4]
 8002912:	4659      	mov	r1, fp
 8002914:	6803      	ldr	r3, [r0, #0]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	4798      	blx	r3
 800291a:	4605      	mov	r5, r0
 800291c:	4631      	mov	r1, r6
 800291e:	f006 fb73 	bl	8009008 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002922:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002926:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800292a:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800292e:	b1e5      	cbz	r5, 800296a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002930:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002932:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002936:	4630      	mov	r0, r6
 8002938:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800293a:	f8c5 a008 	str.w	sl, [r5, #8]
 800293e:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002940:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002942:	4798      	blx	r3
    newPresenter->activate();
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	4628      	mov	r0, r5
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800294c:	4621      	mov	r1, r4
 800294e:	4630      	mov	r0, r6
 8002950:	f015 fc20 	bl	8018194 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	4620      	mov	r0, r4
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	4798      	blx	r3
    newTransition->invalidate();
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	4620      	mov	r0, r4
 8002960:	695b      	ldr	r3, [r3, #20]
}
 8002962:	b001      	add	sp, #4
 8002964:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002968:	4718      	bx	r3
    model->bind(newPresenter);
 800296a:	462b      	mov	r3, r5
 800296c:	e7e1      	b.n	8002932 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 800296e:	bf00      	nop
 8002970:	08023788 	.word	0x08023788
 8002974:	08023816 	.word	0x08023816
 8002978:	0802391a 	.word	0x0802391a
 800297c:	0802396f 	.word	0x0802396f
 8002980:	08023a12 	.word	0x08023a12
 8002984:	08023b24 	.word	0x08023b24
 8002988:	2400ea7c 	.word	0x2400ea7c
 800298c:	2400ea78 	.word	0x2400ea78

08002990 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	4604      	mov	r4, r0
 8002994:	4617      	mov	r7, r2
 8002996:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002998:	f013 ff60 	bl	801685c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 800299e:	2500      	movs	r5, #0
        instance = this;
 80029a0:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029a2:	4629      	mov	r1, r5
      model(m)
 80029a4:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80029a6:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80029aa:	4e0f      	ldr	r6, [pc, #60]	; (80029e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80029b2:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80029b6:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029ba:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80029bc:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80029c4:	4628      	mov	r0, r5
 80029c6:	f003 fea7 	bl	8006718 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80029ca:	6833      	ldr	r3, [r6, #0]
 80029cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80029d0:	b10a      	cbz	r2, 80029d6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80029d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029d4:	b900      	cbnz	r0, 80029d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80029d6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80029d8:	f019 ff5b 	bl	801c892 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80029dc:	4620      	mov	r0, r4
 80029de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e0:	2400ea88 	.word	0x2400ea88
 80029e4:	08023ad8 	.word	0x08023ad8
 80029e8:	2400ea34 	.word	0x2400ea34
 80029ec:	08023ac0 	.word	0x08023ac0

080029f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80029f2:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 80029f6:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002a00:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a04:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	0800283d 	.word	0x0800283d

08002a10 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002a10:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a12:	4770      	bx	lr

08002a14 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002a14:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a16:	4770      	bx	lr

08002a18 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002a18:	4770      	bx	lr

08002a1a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002a1a:	888b      	ldrh	r3, [r1, #4]
 8002a1c:	69c0      	ldr	r0, [r0, #28]
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	680a      	ldr	r2, [r1, #0]
 8002a22:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002a26:	4410      	add	r0, r2
 8002a28:	4770      	bx	lr

08002a2a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002a2a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002a2c:	b1c2      	cbz	r2, 8002a60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002a2e:	7b13      	ldrb	r3, [r2, #12]
 8002a30:	b1b3      	cbz	r3, 8002a60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002a32:	7b54      	ldrb	r4, [r2, #13]
 8002a34:	7ad2      	ldrb	r2, [r2, #11]
 8002a36:	0224      	lsls	r4, r4, #8
 8002a38:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a3c:	4314      	orrs	r4, r2
 8002a3e:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a40:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a42:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002a46:	8813      	ldrh	r3, [r2, #0]
 8002a48:	428b      	cmp	r3, r1
 8002a4a:	d102      	bne.n	8002a52 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002a4c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002a50:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002a52:	d805      	bhi.n	8002a60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a54:	3801      	subs	r0, #1
 8002a56:	3204      	adds	r2, #4
 8002a58:	b280      	uxth	r0, r0
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1f3      	bne.n	8002a46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002a5e:	e7f7      	b.n	8002a50 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002a60:	2000      	movs	r0, #0
 8002a62:	e7f5      	b.n	8002a50 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002a64 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002a64:	b510      	push	{r4, lr}
 8002a66:	4604      	mov	r4, r0
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	f01f f858 	bl	8021b1e <_ZdlPvj>
 8002a6e:	4620      	mov	r0, r4
 8002a70:	bd10      	pop	{r4, pc}
	...

08002a74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002a74:	b530      	push	{r4, r5, lr}
 8002a76:	b08b      	sub	sp, #44	; 0x2c
 8002a78:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002a7a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002a7e:	9508      	str	r5, [sp, #32]
 8002a80:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002a84:	9507      	str	r5, [sp, #28]
 8002a86:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002a8a:	9506      	str	r5, [sp, #24]
 8002a8c:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002a90:	9505      	str	r5, [sp, #20]
 8002a92:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002a96:	9504      	str	r5, [sp, #16]
 8002a98:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002a9c:	9503      	str	r5, [sp, #12]
 8002a9e:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002aa2:	9502      	str	r5, [sp, #8]
 8002aa4:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002aa8:	9501      	str	r5, [sp, #4]
 8002aaa:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002aae:	9500      	str	r5, [sp, #0]
 8002ab0:	f014 ff00 	bl	80178b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002ab6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002abc:	61e3      	str	r3, [r4, #28]
 8002abe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ac0:	6223      	str	r3, [r4, #32]
 8002ac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8002ac6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002ac8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002aca:	b00b      	add	sp, #44	; 0x2c
 8002acc:	bd30      	pop	{r4, r5, pc}
 8002ace:	bf00      	nop
 8002ad0:	08023b48 	.word	0x08023b48

08002ad4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002ad4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002ad6:	4770      	bx	lr

08002ad8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002ad8:	4770      	bx	lr

08002ada <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002ada:	4770      	bx	lr

08002adc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002adc:	4770      	bx	lr

08002ade <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002ade:	4770      	bx	lr

08002ae0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002ae0:	4770      	bx	lr

08002ae2 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002ae2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002ae6:	4770      	bx	lr

08002ae8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002ae8:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002aea:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002aec:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002aee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002af2:	4362      	muls	r2, r4
 8002af4:	4361      	muls	r1, r4
    }
 8002af6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002afa:	4718      	bx	r3

08002afc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8002afc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b00:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8002b0a:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002b0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	db17      	blt.n	8002b48 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8002b18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b1c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002b20:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b24:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002b28:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002b2c:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b34:	db1c      	blt.n	8002b70 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8002b36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b3a:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002b3e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b42:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b46:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002b48:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b4c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002b50:	ee17 2a10 	vmov	r2, s14
 8002b54:	1e51      	subs	r1, r2, #1
 8002b56:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b5a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002b5e:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002b62:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002b66:	ee10 2a10 	vmov	r2, s0
 8002b6a:	440a      	add	r2, r1
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	e7db      	b.n	8002b28 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002b70:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b78:	ee17 2a90 	vmov	r2, s15
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002b82:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b86:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002b8a:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002b8e:	ee10 ca90 	vmov	ip, s1
 8002b92:	4494      	add	ip, r2
 8002b94:	4662      	mov	r2, ip
 8002b96:	e7d6      	b.n	8002b46 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002b98 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002b98:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002b9a:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002b9c:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ba2:	4362      	muls	r2, r4
    }
 8002ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ba8:	4718      	bx	r3

08002baa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8002baa:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bae:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8002bb8:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002bbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	db08      	blt.n	8002bd8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002bc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002bce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bd2:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bd6:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002bd8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be0:	ee17 2a90 	vmov	r2, s15
 8002be4:	3a01      	subs	r2, #1
 8002be6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002bea:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bee:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002bf2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002bf6:	ee10 ca10 	vmov	ip, s0
 8002bfa:	4494      	add	ip, r2
 8002bfc:	4662      	mov	r2, ip
 8002bfe:	e7ea      	b.n	8002bd6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002c00 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002c00:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c02:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002c04:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c0a:	4362      	muls	r2, r4
 8002c0c:	4361      	muls	r1, r4
    }
 8002c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c12:	4718      	bx	r3

08002c14 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8002c14:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c18:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8002c22:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002c26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	db17      	blt.n	8002c60 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8002c30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c34:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c38:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c3c:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002c40:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002c44:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	db1c      	blt.n	8002c88 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8002c4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c52:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002c56:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c5a:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c5e:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002c60:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c64:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002c68:	ee17 2a10 	vmov	r2, s14
 8002c6c:	1e51      	subs	r1, r2, #1
 8002c6e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002c72:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002c76:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002c7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c7e:	ee10 2a10 	vmov	r2, s0
 8002c82:	440a      	add	r2, r1
 8002c84:	4611      	mov	r1, r2
 8002c86:	e7db      	b.n	8002c40 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002c88:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c90:	ee17 2a90 	vmov	r2, s15
 8002c94:	3a01      	subs	r2, #1
 8002c96:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002c9a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c9e:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002ca2:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002ca6:	ee10 ca90 	vmov	ip, s1
 8002caa:	4494      	add	ip, r2
 8002cac:	4662      	mov	r2, ip
 8002cae:	e7d6      	b.n	8002c5e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002cb0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002cb0:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cb2:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002cb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cba:	4362      	muls	r2, r4
    }
 8002cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cc0:	4718      	bx	r3

08002cc2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8002cc2:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002cc6:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002ccc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8002cd0:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002cd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	db08      	blt.n	8002cf0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002cde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002ce2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ce6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002cea:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002cee:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002cf0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf8:	ee17 2a90 	vmov	r2, s15
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d02:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d06:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002d0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002d0e:	ee10 ca10 	vmov	ip, s0
 8002d12:	4494      	add	ip, r2
 8002d14:	4662      	mov	r2, ip
 8002d16:	e7ea      	b.n	8002cee <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08002d18 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8002d18:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8002d1c:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db07      	blt.n	8002d32 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d26:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d2a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d2e:	1040      	asrs	r0, r0, #1
 8002d30:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d32:	f06f 0001 	mvn.w	r0, #1
 8002d36:	fb00 2003 	mla	r0, r0, r3, r2
 8002d3a:	3801      	subs	r0, #1
 8002d3c:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d40:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d44:	1040      	asrs	r0, r0, #1
 8002d46:	4240      	negs	r0, r0
    }
 8002d48:	4770      	bx	lr

08002d4a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8002d4a:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8002d4e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d52:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002d5a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002d5e:	4770      	bx	lr

08002d60 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8002d60:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8002d64:	4770      	bx	lr

08002d66 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8002d66:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8002d6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db07      	blt.n	8002d80 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d70:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d74:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d78:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d7c:	1040      	asrs	r0, r0, #1
 8002d7e:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d80:	f06f 0001 	mvn.w	r0, #1
 8002d84:	fb00 2003 	mla	r0, r0, r3, r2
 8002d88:	3801      	subs	r0, #1
 8002d8a:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d8e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d92:	1040      	asrs	r0, r0, #1
 8002d94:	4240      	negs	r0, r0
    }
 8002d96:	4770      	bx	lr

08002d98 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002d98:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8002d9c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002da0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002da8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002dac:	4770      	bx	lr

08002dae <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8002dae:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8002db2:	4770      	bx	lr

08002db4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8002db4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8002db8:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db07      	blt.n	8002dce <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002dbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002dc2:	fb93 f0f2 	sdiv	r0, r3, r2
 8002dc6:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dca:	1040      	asrs	r0, r0, #1
 8002dcc:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002dce:	f06f 0001 	mvn.w	r0, #1
 8002dd2:	fb00 2003 	mla	r0, r0, r3, r2
 8002dd6:	3801      	subs	r0, #1
 8002dd8:	fb90 f0f2 	sdiv	r0, r0, r2
 8002ddc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002de0:	1040      	asrs	r0, r0, #1
 8002de2:	4240      	negs	r0, r0
    }
 8002de4:	4770      	bx	lr

08002de6 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8002de6:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8002dea:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002dee:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002df6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002dfa:	4770      	bx	lr

08002dfc <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8002dfc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8002e00:	4770      	bx	lr

08002e02 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8002e02:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8002e06:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db07      	blt.n	8002e1c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002e0c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e10:	fb93 f0f2 	sdiv	r0, r3, r2
 8002e14:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e18:	1040      	asrs	r0, r0, #1
 8002e1a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002e1c:	f06f 0001 	mvn.w	r0, #1
 8002e20:	fb00 2003 	mla	r0, r0, r3, r2
 8002e24:	3801      	subs	r0, #1
 8002e26:	fb90 f0f2 	sdiv	r0, r0, r2
 8002e2a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e2e:	1040      	asrs	r0, r0, #1
 8002e30:	4240      	negs	r0, r0
    }
 8002e32:	4770      	bx	lr

08002e34 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002e34:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8002e38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e3c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e44:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e48:	4770      	bx	lr

08002e4a <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8002e4a:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8002e4e:	4770      	bx	lr

08002e50 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8002e50:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8002e5a:	460d      	mov	r5, r1
 8002e5c:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8002e5e:	4798      	blx	r3
        setScaleY(scale, updateData);
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	4632      	mov	r2, r6
 8002e64:	4629      	mov	r1, r5
 8002e66:	4620      	mov	r0, r4
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8002e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8002e70:	4718      	bx	r3

08002e72 <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8002e72:	6803      	ldr	r3, [r0, #0]
 8002e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e78:	4718      	bx	r3

08002e7a <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8002e7a:	6803      	ldr	r3, [r0, #0]
 8002e7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e80:	4718      	bx	r3

08002e82 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8002e82:	6803      	ldr	r3, [r0, #0]
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	4718      	bx	r3

08002e8a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002e8a:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8002e8c:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8002e8e:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002e90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 8002e94:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 8002e96:	db0e      	blt.n	8002eb6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8002e98:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002e9c:	fb92 f1f4 	sdiv	r1, r2, r4
 8002ea0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ea4:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002ea6:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 8002eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	440a      	add	r2, r1
 8002eb2:	4249      	negs	r1, r1
 8002eb4:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002eb6:	f06f 0101 	mvn.w	r1, #1
 8002eba:	fb01 4102 	mla	r1, r1, r2, r4
 8002ebe:	3901      	subs	r1, #1
 8002ec0:	fb91 f1f4 	sdiv	r1, r1, r4
 8002ec4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ec8:	1049      	asrs	r1, r1, #1
 8002eca:	4249      	negs	r1, r1
 8002ecc:	e7eb      	b.n	8002ea6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08002ece <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8002ece:	6803      	ldr	r3, [r0, #0]
 8002ed0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002ed4:	4718      	bx	r3

08002ed6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8002ed6:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8002ed8:	6803      	ldr	r3, [r0, #0]
 8002eda:	4351      	muls	r1, r2
 8002edc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ee0:	4718      	bx	r3

08002ee2 <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8002ee2:	6803      	ldr	r3, [r0, #0]
 8002ee4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002ee8:	4718      	bx	r3

08002eea <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8002eea:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8002eee:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002ef4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 8002ef8:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002efc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f04:	db08      	blt.n	8002f18 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8002f06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f12:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f16:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002f18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f20:	ee17 2a90 	vmov	r2, s15
 8002f24:	1e51      	subs	r1, r2, #1
 8002f26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f2a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f2e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f32:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f36:	ee10 2a10 	vmov	r2, s0
 8002f3a:	440a      	add	r2, r1
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	e7ea      	b.n	8002f16 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08002f40 <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8002f40:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 8002f44:	4770      	bx	lr

08002f46 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f4c:	4718      	bx	r3

08002f4e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8002f4e:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8002f50:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8002f52:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 8002f56:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f58:	4798      	blx	r3
        if (i >= 0)
 8002f5a:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8002f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8002f5e:	db07      	blt.n	8002f70 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8002f60:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002f64:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f68:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f6c:	1040      	asrs	r0, r0, #1
    }
 8002f6e:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f70:	f06f 0201 	mvn.w	r2, #1
 8002f74:	fb02 3000 	mla	r0, r2, r0, r3
 8002f78:	3801      	subs	r0, #1
 8002f7a:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f7e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f82:	1040      	asrs	r0, r0, #1
 8002f84:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f86:	e7f2      	b.n	8002f6e <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08002f88 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8002f88:	6803      	ldr	r3, [r0, #0]
 8002f8a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002f8e:	4718      	bx	r3

08002f90 <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8002f90:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8002f92:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 8002f94:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8002f98:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8002f9a:	4798      	blx	r3
        return (float)i / (float)scale;
 8002f9c:	ee07 0a90 	vmov	s15, r0
 8002fa0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002fa4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8002fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002fac:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002fb0:	bd10      	pop	{r4, pc}

08002fb2 <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8002fb2:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002fb6:	4770      	bx	lr

08002fb8 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8002fb8:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	4351      	muls	r1, r2
 8002fbe:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002fc2:	4718      	bx	r3

08002fc4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8002fc4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fc8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fce:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 8002fd2:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002fd6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	db08      	blt.n	8002ff2 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8002fe0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002fe4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002fe8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002fec:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002ff0:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002ff2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ffa:	ee17 2a90 	vmov	r2, s15
 8002ffe:	1e51      	subs	r1, r2, #1
 8003000:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003004:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003008:	ee30 0a07 	vadd.f32	s0, s0, s14
 800300c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003010:	ee10 2a10 	vmov	r2, s0
 8003014:	440a      	add	r2, r1
 8003016:	4611      	mov	r1, r2
 8003018:	e7ea      	b.n	8002ff0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

0800301a <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 800301a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 800301e:	4770      	bx	lr

08003020 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 8003020:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 8003022:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8003024:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8003028:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 800302a:	4798      	blx	r3
        if (i >= 0)
 800302c:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800302e:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8003030:	db07      	blt.n	8003042 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8003032:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003036:	fb90 f0f3 	sdiv	r0, r0, r3
 800303a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800303e:	1040      	asrs	r0, r0, #1
    }
 8003040:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003042:	f06f 0201 	mvn.w	r2, #1
 8003046:	fb02 3000 	mla	r0, r2, r0, r3
 800304a:	3801      	subs	r0, #1
 800304c:	fb90 f0f3 	sdiv	r0, r0, r3
 8003050:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003054:	1040      	asrs	r0, r0, #1
 8003056:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003058:	e7f2      	b.n	8003040 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

0800305a <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 800305a:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 800305c:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 800305e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 8003062:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8003064:	4798      	blx	r3
        return (float)i / (float)scale;
 8003066:	ee07 0a90 	vmov	s15, r0
 800306a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800306e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8003072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003076:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800307a:	bd10      	pop	{r4, pc}

0800307c <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 800307c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8003080:	4770      	bx	lr

08003082 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8003082:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8003084:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 8003086:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8003088:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 800308c:	b510      	push	{r4, lr}
 800308e:	4604      	mov	r4, r0
        if (i >= 0)
 8003090:	db0e      	blt.n	80030b0 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 8003092:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003096:	fb91 f1f2 	sdiv	r1, r1, r2
 800309a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800309e:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030a0:	b209      	sxth	r1, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4798      	blx	r3
 80030a6:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80030aa:	fb02 3000 	mla	r0, r2, r0, r3
 80030ae:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80030b0:	f06f 0001 	mvn.w	r0, #1
 80030b4:	fb00 2101 	mla	r1, r0, r1, r2
 80030b8:	3901      	subs	r1, #1
 80030ba:	fb91 f1f2 	sdiv	r1, r1, r2
 80030be:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030c2:	1049      	asrs	r1, r1, #1
 80030c4:	4249      	negs	r1, r1
 80030c6:	e7eb      	b.n	80030a0 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080030c8 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80030c8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030ca:	4770      	bx	lr

080030cc <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80030cc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80030ce:	4770      	bx	lr

080030d0 <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80030d0:	6803      	ldr	r3, [r0, #0]
 80030d2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80030d6:	4718      	bx	r3

080030d8 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80030d8:	6803      	ldr	r3, [r0, #0]
 80030da:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80030de:	4718      	bx	r3

080030e0 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80030e0:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80030e2:	6803      	ldr	r3, [r0, #0]
 80030e4:	4351      	muls	r1, r2
 80030e6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80030ea:	4718      	bx	r3

080030ec <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030ec:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80030ee:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030f0:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 80030f4:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 80030f6:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 80030fa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80030fe:	4798      	blx	r3
 8003100:	462b      	mov	r3, r5
 8003102:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8003106:	4620      	mov	r0, r4
    }
 8003108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800310c:	4718      	bx	r3

0800310e <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800310e:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8003112:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003116:	4293      	cmp	r3, r2
 8003118:	db07      	blt.n	800312a <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 800311a:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 800311e:	4419      	add	r1, r3
 8003120:	fb91 f0f2 	sdiv	r0, r1, r2
 8003124:	fb02 1110 	mls	r1, r2, r0, r1
 8003128:	b209      	sxth	r1, r1
    }
 800312a:	4608      	mov	r0, r1
 800312c:	4770      	bx	lr

0800312e <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 800312e:	0148      	lsls	r0, r1, #5
 8003130:	4770      	bx	lr

08003132 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8003132:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 8003134:	4770      	bx	lr

08003136 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8003136:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003138:	4770      	bx	lr

0800313a <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 800313a:	2001      	movs	r0, #1
 800313c:	4770      	bx	lr

0800313e <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 800313e:	4770      	bx	lr

08003140 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003140:	4770      	bx	lr

08003142 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 8003142:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003144:	b118      	cbz	r0, 800314e <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8003146:	6803      	ldr	r3, [r0, #0]
 8003148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314c:	4718      	bx	r3
    }
 800314e:	4770      	bx	lr

08003150 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003150:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003154:	b530      	push	{r4, r5, lr}
        return topPadding;
 8003156:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 800315a:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800315e:	4421      	add	r1, r4
 8003160:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003164:	8044      	strh	r4, [r0, #2]
 8003166:	1a52      	subs	r2, r2, r1
 8003168:	2100      	movs	r1, #0
 800316a:	8085      	strh	r5, [r0, #4]
 800316c:	8001      	strh	r1, [r0, #0]
 800316e:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8003170:	bd30      	pop	{r4, r5, pc}

08003172 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 8003172:	b510      	push	{r4, lr}
 8003174:	8042      	strh	r2, [r0, #2]
 8003176:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 800317a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800317e:	8004      	strh	r4, [r0, #0]
 8003180:	8082      	strh	r2, [r0, #4]
 8003182:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 8003184:	bd10      	pop	{r4, pc}

08003186 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 8003186:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003188:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 800318a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800318e:	4718      	bx	r3

08003190 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8003190:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8003192:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	4718      	bx	r3

0800319a <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800319a:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 800319e:	4770      	bx	lr

080031a0 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80031a0:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80031a4:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80031a8:	4403      	add	r3, r0
 80031aa:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80031ae:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80031b0:	b200      	sxth	r0, r0
 80031b2:	4770      	bx	lr

080031b4 <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80031b4:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80031b8:	4770      	bx	lr

080031ba <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031ba:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80031be:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80031c2:	4403      	add	r3, r0
 80031c4:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80031c8:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80031ca:	b200      	sxth	r0, r0
 80031cc:	4770      	bx	lr

080031ce <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 80031ce:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80031d0:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 80031d2:	4611      	mov	r1, r2
 80031d4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80031d8:	4718      	bx	r3

080031da <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 80031da:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80031de:	b530      	push	{r4, r5, lr}
        return leftPadding;
 80031e0:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031e4:	186c      	adds	r4, r5, r1
 80031e6:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 80031ea:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 80031ee:	1b09      	subs	r1, r1, r4
 80031f0:	2400      	movs	r4, #0
 80031f2:	8005      	strh	r5, [r0, #0]
 80031f4:	8044      	strh	r4, [r0, #2]
 80031f6:	8081      	strh	r1, [r0, #4]
 80031f8:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 80031fa:	bd30      	pop	{r4, r5, pc}

080031fc <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 80031fc:	8002      	strh	r2, [r0, #0]
 80031fe:	8083      	strh	r3, [r0, #4]
 8003200:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003204:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003208:	8042      	strh	r2, [r0, #2]
 800320a:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 800320c:	4770      	bx	lr

0800320e <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 800320e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003210:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 8003212:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003216:	4718      	bx	r3

08003218 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003218:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800321a:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 800321c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003220:	4718      	bx	r3

08003222 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 8003222:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003226:	4770      	bx	lr

08003228 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003228:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 800322c:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003230:	4403      	add	r3, r0
 8003232:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003236:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003238:	b200      	sxth	r0, r0
 800323a:	4770      	bx	lr

0800323c <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800323c:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003240:	4770      	bx	lr

08003242 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003242:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 8003246:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 800324a:	4403      	add	r3, r0
 800324c:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003250:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003252:	b200      	sxth	r0, r0
 8003254:	4770      	bx	lr

08003256 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8003256:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003258:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 800325a:	4611      	mov	r1, r2
 800325c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003260:	4718      	bx	r3

08003262 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 8003262:	4770      	bx	lr

08003264 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8003264:	4770      	bx	lr

08003266 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 8003266:	4770      	bx	lr

08003268 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8003268:	b510      	push	{r4, lr}
 800326a:	4604      	mov	r4, r0
 800326c:	2140      	movs	r1, #64	; 0x40
 800326e:	f01e fc56 	bl	8021b1e <_ZdlPvj>
 8003272:	4620      	mov	r0, r4
 8003274:	bd10      	pop	{r4, pc}

08003276 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	f01e fc4f 	bl	8021b1e <_ZdlPvj>
 8003280:	4620      	mov	r0, r4
 8003282:	bd10      	pop	{r4, pc}

08003284 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 8003284:	b510      	push	{r4, lr}
 8003286:	4604      	mov	r4, r0
 8003288:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800328c:	f01e fc47 	bl	8021b1e <_ZdlPvj>
 8003290:	4620      	mov	r0, r4
 8003292:	bd10      	pop	{r4, pc}

08003294 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8003294:	b513      	push	{r0, r1, r4, lr}
 8003296:	4603      	mov	r3, r0
 8003298:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800329a:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800329e:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 80032a0:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a6:	4798      	blx	r3
 80032a8:	9901      	ldr	r1, [sp, #4]
 80032aa:	4602      	mov	r2, r0
 80032ac:	4620      	mov	r0, r4
    }
 80032ae:	b002      	add	sp, #8
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 80032b4:	f00f bc9c 	b.w	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032b8 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80032b8:	b513      	push	{r0, r1, r4, lr}
 80032ba:	4603      	mov	r3, r0
 80032bc:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032be:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032c2:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80032c4:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	4798      	blx	r3
 80032cc:	9901      	ldr	r1, [sp, #4]
 80032ce:	4602      	mov	r2, r0
 80032d0:	4620      	mov	r0, r4
    }
 80032d2:	b002      	add	sp, #8
 80032d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80032d8:	f00f bc8a 	b.w	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080032dc <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 80032dc:	f500 600f 	add.w	r0, r0, #2288	; 0x8f0
 80032e0:	f005 bf54 	b.w	800918c <_ZN11customGraph10initializeEv>

080032e4 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 80032e4:	b508      	push	{r3, lr}
        if (alpha > 0)
 80032e6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80032ea:	b10b      	cbz	r3, 80032f0 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 80032ec:	f7ff f97a 	bl	80025e4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80032f0:	bd08      	pop	{r3, pc}
	...

080032f4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80032f4:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80032f6:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80032f8:	db03      	blt.n	8003302 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80032fa:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 80032fe:	4294      	cmp	r4, r2
 8003300:	dc06      	bgt.n	8003310 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 8003304:	f240 6139 	movw	r1, #1593	; 0x639
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 800330a:	4808      	ldr	r0, [pc, #32]	; (800332c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 800330c:	f01e fd14 	bl	8021d38 <__assert_func>
        return yValues[dataIndex(index)];
 8003310:	6803      	ldr	r3, [r0, #0]
 8003312:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 8003316:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800331a:	4798      	blx	r3
    }
 800331c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8003320:	bd10      	pop	{r4, pc}
 8003322:	bf00      	nop
 8003324:	08023ba0 	.word	0x08023ba0
 8003328:	08023bc3 	.word	0x08023bc3
 800332c:	08023c12 	.word	0x08023c12

08003330 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003330:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8003332:	b510      	push	{r4, lr}
 8003334:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 8003336:	db03      	blt.n	8003340 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 8003338:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800333c:	429a      	cmp	r2, r3
 800333e:	dc06      	bgt.n	800334e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8003342:	f240 6133 	movw	r1, #1587	; 0x633
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8003348:	4807      	ldr	r0, [pc, #28]	; (8003368 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 800334a:	f01e fcf5 	bl	8021d38 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003354:	4798      	blx	r3
 8003356:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 800335a:	fb02 3000 	mla	r0, r2, r0, r3
 800335e:	bd10      	pop	{r4, pc}
 8003360:	08023ba0 	.word	0x08023ba0
 8003364:	08023c7d 	.word	0x08023c7d
 8003368:	08023c12 	.word	0x08023c12

0800336c <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <_ZN15Screen1ViewBaseD1Ev+0x20>)
 800336e:	b510      	push	{r4, lr}
 8003370:	6003      	str	r3, [r0, #0]
 8003372:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8003374:	f011 fd2e 	bl	8014dd4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <_ZN15Screen1ViewBaseD1Ev+0x24>)
 800337a:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 800337e:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
 8003382:	f003 fa30 	bl	80067e6 <_ZN15customGraphBaseD1Ev>
}
 8003386:	4620      	mov	r0, r4
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	08024048 	.word	0x08024048
 8003390:	0802453c 	.word	0x0802453c

08003394 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003394:	b510      	push	{r4, lr}
 8003396:	4604      	mov	r4, r0
}
 8003398:	f7ff ffe8 	bl	800336c <_ZN15Screen1ViewBaseD1Ev>
 800339c:	f643 31c8 	movw	r1, #15304	; 0x3bc8
 80033a0:	4620      	mov	r0, r4
 80033a2:	f01e fbbc 	bl	8021b1e <_ZdlPvj>
 80033a6:	4620      	mov	r0, r4
 80033a8:	bd10      	pop	{r4, pc}

080033aa <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80033aa:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4604      	mov	r4, r0
        setX(x);
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80033b2:	4615      	mov	r5, r2
        setX(x);
 80033b4:	4798      	blx	r3
        setY(y);
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	4620      	mov	r0, r4
 80033ba:	4629      	mov	r1, r5
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80033be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80033c2:	4718      	bx	r3

080033c4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4604      	mov	r4, r0
 80033c8:	461d      	mov	r5, r3
 80033ca:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80033ce:	f7ff ffec 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	4629      	mov	r1, r5
 80033d6:	4620      	mov	r0, r4
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	4798      	blx	r3
        setHeight(height);
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	4631      	mov	r1, r6
 80033e0:	4620      	mov	r0, r4
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80033e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80033e8:	4718      	bx	r3
	...

080033ec <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 80033ec:	2200      	movs	r2, #0
 80033ee:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80033f2:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 80033f6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80033fa:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80033fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003402:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 8003404:	4a01      	ldr	r2, [pc, #4]	; (800340c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8003406:	6002      	str	r2, [r0, #0]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	08023cd4 	.word	0x08023cd4

08003410 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003410:	b510      	push	{r4, lr}
 8003412:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8003414:	2226      	movs	r2, #38	; 0x26
 8003416:	2100      	movs	r1, #0
 8003418:	f01e fd1a 	bl	8021e50 <memset>
 800341c:	4620      	mov	r0, r4
 800341e:	f7ff ffe5 	bl	80033ec <_ZN8touchgfx6WidgetC1Ev>
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 8003424:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 8003426:	6023      	str	r3, [r4, #0]
 8003428:	23ff      	movs	r3, #255	; 0xff
 800342a:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 800342e:	2300      	movs	r3, #0
 8003430:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 8003432:	bd10      	pop	{r4, pc}
 8003434:	08024cbc 	.word	0x08024cbc

08003438 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003438:	b510      	push	{r4, lr}
 800343a:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800343c:	2226      	movs	r2, #38	; 0x26
 800343e:	2100      	movs	r1, #0
 8003440:	f01e fd06 	bl	8021e50 <memset>
 8003444:	4620      	mov	r0, r4
 8003446:	f7ff ffd1 	bl	80033ec <_ZN8touchgfx6WidgetC1Ev>
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 800344c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003450:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003452:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8003456:	62a3      	str	r3, [r4, #40]	; 0x28
 8003458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800345c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800345e:	2300      	movs	r3, #0
 8003460:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	8723      	strh	r3, [r4, #56]	; 0x38
 800346a:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800346c:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003470:	bd10      	pop	{r4, pc}
 8003472:	bf00      	nop
 8003474:	08024c2c 	.word	0x08024c2c
 8003478:	08023780 	.word	0x08023780

0800347c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800347c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800347e:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 8003480:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003482:	f014 fb12 	bl	8017aaa <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8003486:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003488:	462a      	mov	r2, r5
 800348a:	9901      	ldr	r1, [sp, #4]
 800348c:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8003490:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8003494:	db04      	blt.n	80034a0 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003496:	f014 fb27 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 800349a:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 800349c:	b003      	add	sp, #12
 800349e:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80034a0:	f014 fb22 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80034a4:	1a20      	subs	r0, r4, r0
 80034a6:	e7f9      	b.n	800349c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080034a8 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80034a8:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034aa:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80034ae:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034b0:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80034b4:	1963      	adds	r3, r4, r5
 80034b6:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80034ba:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80034bc:	b22d      	sxth	r5, r5
 80034be:	442c      	add	r4, r5
 80034c0:	1e69      	subs	r1, r5, #1
 80034c2:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80034c6:	3c01      	subs	r4, #1
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	1af0      	subs	r0, r6, r3
 80034cc:	f7ff ffd6 	bl	800347c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80034d0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80034d4:	bd70      	pop	{r4, r5, r6, pc}

080034d6 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80034d6:	b538      	push	{r3, r4, r5, lr}
 80034d8:	4604      	mov	r4, r0
 80034da:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80034dc:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 80034e0:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 80034e4:	440b      	add	r3, r1
 80034e6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80034ea:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 80034ec:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 80034f0:	b209      	sxth	r1, r1
 80034f2:	1b52      	subs	r2, r2, r5
 80034f4:	1b40      	subs	r0, r0, r5
 80034f6:	3901      	subs	r1, #1
 80034f8:	f7ff ffc0 	bl	800347c <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80034fc:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8003500:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003504:	bd38      	pop	{r3, r4, r5, pc}
	...

08003508 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	4604      	mov	r4, r0
        : presenter(0)
 800350e:	2600      	movs	r6, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003510:	f64f 75ff 	movw	r5, #65535	; 0xffff
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003514:	f04f 0a01 	mov.w	sl, #1
 8003518:	46a3      	mov	fp, r4
 800351a:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 800351e:	f104 09e0 	add.w	r9, r4, #224	; 0xe0
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003522:	1d27      	adds	r7, r4, #4
 8003524:	ed2d 8b10 	vpush	{d8-d15}
 8003528:	b08f      	sub	sp, #60	; 0x3c
 800352a:	f014 fc87 	bl	8017e3c <_ZN8touchgfx6ScreenC1Ev>
 800352e:	4bf1      	ldr	r3, [pc, #964]	; (80038f4 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
 8003530:	63e6      	str	r6, [r4, #60]	; 0x3c
 8003532:	f84b 3b40 	str.w	r3, [fp], #64
 8003536:	4658      	mov	r0, fp
 8003538:	f7ff ff6a 	bl	8003410 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 800353c:	2226      	movs	r2, #38	; 0x26
 800353e:	4631      	mov	r1, r6
 8003540:	4640      	mov	r0, r8
 8003542:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 8003546:	f01e fc83 	bl	8021e50 <memset>
 800354a:	4640      	mov	r0, r8
 800354c:	f7ff ff4e 	bl	80033ec <_ZN8touchgfx6WidgetC1Ev>
 8003550:	4be9      	ldr	r3, [pc, #932]	; (80038f8 <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
    {
        Image::setBitmap(bmp);
 8003552:	a90c      	add	r1, sp, #48	; 0x30
 8003554:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8003556:	66e3      	str	r3, [r4, #108]	; 0x6c
 8003558:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800355c:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
 8003560:	f204 554c 	addw	r5, r4, #1356	; 0x54c
 8003564:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 8003568:	f010 fd2e 	bl	8013fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800356c:	f104 0398 	add.w	r3, r4, #152	; 0x98
 8003570:	4618      	mov	r0, r3
 8003572:	ee08 3a10 	vmov	s16, r3
 8003576:	f7ff ff5f 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 800357a:	4648      	mov	r0, r9
 800357c:	f7ff ff5c 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 8003580:	f504 7394 	add.w	r3, r4, #296	; 0x128
 8003584:	4618      	mov	r0, r3
 8003586:	ee08 3a90 	vmov	s17, r3
 800358a:	f7ff ff55 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 800358e:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 8003592:	4618      	mov	r0, r3
 8003594:	ee09 3a10 	vmov	s18, r3
 8003598:	f7ff ff4e 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 800359c:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 80035a0:	4618      	mov	r0, r3
 80035a2:	ee09 3a90 	vmov	s19, r3
 80035a6:	f7ff ff47 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035aa:	f504 7300 	add.w	r3, r4, #512	; 0x200
 80035ae:	4618      	mov	r0, r3
 80035b0:	ee0a 3a10 	vmov	s20, r3
 80035b4:	f7ff ff40 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035b8:	f504 7312 	add.w	r3, r4, #584	; 0x248
 80035bc:	4618      	mov	r0, r3
 80035be:	ee0a 3a90 	vmov	s21, r3
 80035c2:	f7ff ff39 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035c6:	f504 7324 	add.w	r3, r4, #656	; 0x290
 80035ca:	4618      	mov	r0, r3
 80035cc:	ee0b 3a10 	vmov	s22, r3
 80035d0:	f7ff ff32 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035d4:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 80035d8:	4618      	mov	r0, r3
 80035da:	ee0b 3a90 	vmov	s23, r3
 80035de:	f7ff ff2b 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035e2:	f504 7348 	add.w	r3, r4, #800	; 0x320
 80035e6:	4618      	mov	r0, r3
 80035e8:	ee0c 3a10 	vmov	s24, r3
 80035ec:	f7ff ff24 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035f0:	f504 735a 	add.w	r3, r4, #872	; 0x368
 80035f4:	4618      	mov	r0, r3
 80035f6:	ee0c 3a90 	vmov	s25, r3
 80035fa:	f7ff ff1d 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 80035fe:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 8003602:	4618      	mov	r0, r3
 8003604:	ee0d 3a10 	vmov	s26, r3
 8003608:	f7ff ff16 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 800360c:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8003610:	4618      	mov	r0, r3
 8003612:	ee0d 3a90 	vmov	s27, r3
 8003616:	f7ff ff0f 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 800361a:	f504 6388 	add.w	r3, r4, #1088	; 0x440
 800361e:	4618      	mov	r0, r3
 8003620:	ee0e 3a10 	vmov	s28, r3
 8003624:	f7ff ff08 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 8003628:	f504 6391 	add.w	r3, r4, #1160	; 0x488
 800362c:	4618      	mov	r0, r3
 800362e:	ee0e 3a90 	vmov	s29, r3
 8003632:	f7ff ff01 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 8003636:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 800363a:	4618      	mov	r0, r3
 800363c:	ee0f 3a90 	vmov	s31, r3
 8003640:	f7ff fee6 	bl	8003410 <_ZN8touchgfx3BoxC1Ev>
 8003644:	4bad      	ldr	r3, [pc, #692]	; (80038fc <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
        : color(col)
 8003646:	f8c4 64fc 	str.w	r6, [r4, #1276]	; 0x4fc
 800364a:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
 800364e:	f204 5304 	addw	r3, r4, #1284	; 0x504
 8003652:	f8a4 6500 	strh.w	r6, [r4, #1280]	; 0x500
 8003656:	4618      	mov	r0, r3
 8003658:	ee0f 3a10 	vmov	s30, r3
 800365c:	f7ff feec 	bl	8003438 <_ZN8touchgfx8TextAreaC1Ev>
 8003660:	2164      	movs	r1, #100	; 0x64
 8003662:	4628      	mov	r0, r5
 8003664:	f00f fa60 	bl	8012b28 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8003668:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800366a:	2263      	movs	r2, #99	; 0x63
 800366c:	4631      	mov	r1, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800366e:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 8003672:	f204 639c 	addw	r3, r4, #1692	; 0x69c
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003676:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8003678:	f8c4 668c 	str.w	r6, [r4, #1676]	; 0x68c
 800367c:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
 8003680:	f8c4 6694 	str.w	r6, [r4, #1684]	; 0x694
 8003684:	f8c4 a688 	str.w	sl, [r4, #1672]	; 0x688
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8003688:	f7ff fa2e 	bl	8002ae8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 800368c:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
        : DynamicDataGraph(capacity, values), current(0)
 800368e:	f8a4 6698 	strh.w	r6, [r4, #1688]	; 0x698
        : GraphScrollData(CAPACITY, y)
 8003692:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 8003696:	f604 032c 	addw	r3, r4, #2092	; 0x82c
        : CanvasWidget()
 800369a:	4618      	mov	r0, r3
 800369c:	9304      	str	r3, [sp, #16]
 800369e:	f00e feb7 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036a2:	230a      	movs	r3, #10
 80036a4:	f8c4 6858 	str.w	r6, [r4, #2136]	; 0x858
 80036a8:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
class GraphElementGridX : public GraphElementGridBase
 80036ac:	4b96      	ldr	r3, [pc, #600]	; (8003908 <_ZN15Screen1ViewBaseC1Ev+0x400>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036ae:	f8c4 6868 	str.w	r6, [r4, #2152]	; 0x868
class GraphElementGridX : public GraphElementGridBase
 80036b2:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
 80036b6:	f604 036c 	addw	r3, r4, #2156	; 0x86c
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036ba:	f8c4 a85c 	str.w	sl, [r4, #2140]	; 0x85c
        : CanvasWidget()
 80036be:	4618      	mov	r0, r3
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036c0:	f884 a864 	strb.w	sl, [r4, #2148]	; 0x864
 80036c4:	9305      	str	r3, [sp, #20]
        : CanvasWidget()
 80036c6:	f00e fea3 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036ca:	230a      	movs	r3, #10
 80036cc:	f8c4 6898 	str.w	r6, [r4, #2200]	; 0x898
 80036d0:	f8c4 68a8 	str.w	r6, [r4, #2216]	; 0x8a8
 80036d4:	f8c4 38a0 	str.w	r3, [r4, #2208]	; 0x8a0
class GraphElementGridY : public GraphElementGridBase
 80036d8:	4b8c      	ldr	r3, [pc, #560]	; (800390c <_ZN15Screen1ViewBaseC1Ev+0x404>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036da:	f8c4 a89c 	str.w	sl, [r4, #2204]	; 0x89c
class GraphElementGridY : public GraphElementGridBase
 80036de:	f8c4 386c 	str.w	r3, [r4, #2156]	; 0x86c
 80036e2:	f604 03ac 	addw	r3, r4, #2220	; 0x8ac
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036e6:	f884 a8a4 	strb.w	sl, [r4, #2212]	; 0x8a4
        : CanvasWidget()
 80036ea:	4618      	mov	r0, r3
 80036ec:	9306      	str	r3, [sp, #24]
 80036ee:	f00e fe8f 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 80036f2:	4b87      	ldr	r3, [pc, #540]	; (8003910 <_ZN15Screen1ViewBaseC1Ev+0x408>)
 80036f4:	f8c4 38ac 	str.w	r3, [r4, #2220]	; 0x8ac
 80036f8:	f04f 0302 	mov.w	r3, #2
 80036fc:	f884 38d8 	strb.w	r3, [r4, #2264]	; 0x8d8
 8003700:	f604 03dc 	addw	r3, r4, #2268	; 0x8dc
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003704:	4618      	mov	r0, r3
 8003706:	9307      	str	r3, [sp, #28]
 8003708:	f7fe ffb0 	bl	800266c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800370c:	4b81      	ldr	r3, [pc, #516]	; (8003914 <_ZN15Screen1ViewBaseC1Ev+0x40c>)
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 800370e:	f8c4 68e8 	str.w	r6, [r4, #2280]	; 0x8e8
 8003712:	f8c4 38dc 	str.w	r3, [r4, #2268]	; 0x8dc
 8003716:	3324      	adds	r3, #36	; 0x24
 8003718:	f8c4 38e4 	str.w	r3, [r4, #2276]	; 0x8e4
 800371c:	f504 630f 	add.w	r3, r4, #2288	; 0x8f0
 8003720:	4618      	mov	r0, r3
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	f005 fd22 	bl	800916c <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003728:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800372c:	f604 40e8 	addw	r0, r4, #3304	; 0xce8
 8003730:	f011 fb46 	bl	8014dc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 8003734:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003738:	4632      	mov	r2, r6
 800373a:	4631      	mov	r1, r6
 800373c:	4658      	mov	r0, fp
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003744:	f7ff fe3e 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003748:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800374c:	4659      	mov	r1, fp
 800374e:	4638      	mov	r0, r7
 8003750:	66a3      	str	r3, [r4, #104]	; 0x68
 8003752:	f00d fbe3 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8003756:	4632      	mov	r2, r6
 8003758:	4631      	mov	r1, r6
 800375a:	4640      	mov	r0, r8
 800375c:	f7ff fe25 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8003760:	4640      	mov	r0, r8
 8003762:	a90c      	add	r1, sp, #48	; 0x30
 8003764:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8003768:	f010 fc2e 	bl	8013fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800376c:	4641      	mov	r1, r8
 800376e:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
 8003770:	f10d 0820 	add.w	r8, sp, #32
 8003774:	f00d fbd2 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(443, 3);
 8003778:	2203      	movs	r2, #3
 800377a:	f240 11bb 	movw	r1, #443	; 0x1bb
 800377e:	ee18 0a10 	vmov	r0, s16
 8003782:	f7ff fe12 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003786:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800378a:	4640      	mov	r0, r8
 800378c:	ee18 1a10 	vmov	r1, s16
        color = newColor;
 8003790:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        linespace = space;
 8003794:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8003798:	f010 f87e 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800379c:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 80037a0:	f8df b178 	ldr.w	fp, [pc, #376]	; 800391c <_ZN15Screen1ViewBaseC1Ev+0x414>
 80037a4:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80037a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037ac:	230f      	movs	r3, #15
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HRIB));
 80037ae:	a90c      	add	r1, sp, #48	; 0x30
 80037b0:	ee18 0a10 	vmov	r0, s16
 80037b4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80037b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80037bc:	f010 fb14 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80037c0:	ee18 1a10 	vmov	r1, s16
 80037c4:	4638      	mov	r0, r7
 80037c6:	f00d fba9 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(308, 242);
 80037ca:	22f2      	movs	r2, #242	; 0xf2
 80037cc:	4648      	mov	r0, r9
 80037ce:	f44f 719a 	mov.w	r1, #308	; 0x134
 80037d2:	f7ff fdea 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <_ZN15Screen1ViewBaseC1Ev+0x410>)
        boundingArea = calculateBoundingArea();
 80037d8:	4649      	mov	r1, r9
 80037da:	4640      	mov	r0, r8
        color = newColor;
 80037dc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        linespace = space;
 80037e0:	f8a4 6114 	strh.w	r6, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 80037e4:	f010 f858 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80037e8:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 80037ec:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80037f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80037f4:	230e      	movs	r3, #14
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AXIG));
 80037f6:	4648      	mov	r0, r9
 80037f8:	a90c      	add	r1, sp, #48	; 0x30
 80037fa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80037fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003802:	f010 faf1 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003806:	4649      	mov	r1, r9
 8003808:	4638      	mov	r0, r7
 800380a:	f00d fb87 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2.setXY(509, 82);
 800380e:	2252      	movs	r2, #82	; 0x52
 8003810:	f240 11fd 	movw	r1, #509	; 0x1fd
 8003814:	ee18 0a90 	vmov	r0, s17
 8003818:	f7ff fdc7 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <_ZN15Screen1ViewBaseC1Ev+0x410>)
        boundingArea = calculateBoundingArea();
 800381e:	4640      	mov	r0, r8
 8003820:	ee18 1a90 	vmov	r1, s17
        color = newColor;
 8003824:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8003828:	f04f 0904 	mov.w	r9, #4
        linespace = space;
 800382c:	f8a4 615c 	strh.w	r6, [r4, #348]	; 0x15c
        boundingArea = calculateBoundingArea();
 8003830:	f010 f832 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003834:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003838:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800383c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003840:	2303      	movs	r3, #3
    textArea2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T87L));
 8003842:	a90c      	add	r1, sp, #48	; 0x30
 8003844:	ee18 0a90 	vmov	r0, s17
 8003848:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800384c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003850:	f010 faca 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003854:	ee18 1a90 	vmov	r1, s17
 8003858:	4638      	mov	r0, r7
 800385a:	f00d fb5f 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1.setXY(125, 2);
 800385e:	2202      	movs	r2, #2
 8003860:	217d      	movs	r1, #125	; 0x7d
 8003862:	ee19 0a10 	vmov	r0, s18
 8003866:	f7ff fda0 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800386e:	4640      	mov	r0, r8
 8003870:	ee19 1a10 	vmov	r1, s18
        color = newColor;
 8003874:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
        linespace = space;
 8003878:	f8a4 61a4 	strh.w	r6, [r4, #420]	; 0x1a4
        boundingArea = calculateBoundingArea();
 800387c:	f010 f80c 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003880:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003884:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003888:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800388c:	230d      	movs	r3, #13
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9869));
 800388e:	a90c      	add	r1, sp, #48	; 0x30
 8003890:	ee19 0a10 	vmov	r0, s18
 8003894:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003898:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800389c:	f010 faa4 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038a0:	ee19 1a10 	vmov	r1, s18
 80038a4:	4638      	mov	r0, r7
 80038a6:	f00d fb39 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_3.setXY(2, 109);
 80038aa:	226d      	movs	r2, #109	; 0x6d
 80038ac:	2102      	movs	r1, #2
 80038ae:	ee19 0a90 	vmov	r0, s19
 80038b2:	f7ff fd7a 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80038ba:	4640      	mov	r0, r8
 80038bc:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 80038c0:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        linespace = space;
 80038c4:	f8a4 61ec 	strh.w	r6, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 80038c8:	f00f ffe6 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80038cc:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 80038d0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80038d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5N1M));
 80038d8:	a90c      	add	r1, sp, #48	; 0x30
 80038da:	ee19 0a90 	vmov	r0, s19
 80038de:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 80038e2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80038e6:	f010 fa7f 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80038ea:	ee19 1a90 	vmov	r1, s19
 80038ee:	4638      	mov	r0, r7
 80038f0:	e016      	b.n	8003920 <_ZN15Screen1ViewBaseC1Ev+0x418>
 80038f2:	bf00      	nop
 80038f4:	08024048 	.word	0x08024048
 80038f8:	08024d8c 	.word	0x08024d8c
 80038fc:	08024d24 	.word	0x08024d24
 8003900:	080248e8 	.word	0x080248e8
 8003904:	08023eac 	.word	0x08023eac
 8003908:	08023d3c 	.word	0x08023d3c
 800390c:	08023df4 	.word	0x08023df4
 8003910:	08024bb0 	.word	0x08024bb0
 8003914:	08024838 	.word	0x08024838
 8003918:	fffcfcfc 	.word	0xfffcfcfc
 800391c:	08023780 	.word	0x08023780
 8003920:	f00d fafc 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_2.setXY(102, 101);
 8003924:	2265      	movs	r2, #101	; 0x65
 8003926:	2166      	movs	r1, #102	; 0x66
 8003928:	ee1a 0a10 	vmov	r0, s20
 800392c:	f7ff fd3d 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003934:	4640      	mov	r0, r8
 8003936:	ee1a 1a10 	vmov	r1, s20
        color = newColor;
 800393a:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
        linespace = space;
 800393e:	f8a4 6234 	strh.w	r6, [r4, #564]	; 0x234
        boundingArea = calculateBoundingArea();
 8003942:	f00f ffa9 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003946:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 800394a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800394e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8RMH));
 8003952:	a90c      	add	r1, sp, #48	; 0x30
 8003954:	ee1a 0a10 	vmov	r0, s20
 8003958:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800395c:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
 8003960:	f010 fa42 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003964:	ee1a 1a10 	vmov	r1, s20
 8003968:	4638      	mov	r0, r7
 800396a:	f00d fad7 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1.setXY(179, 222);
 800396e:	22de      	movs	r2, #222	; 0xde
 8003970:	21b3      	movs	r1, #179	; 0xb3
 8003972:	ee1a 0a90 	vmov	r0, s21
 8003976:	f7ff fd18 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 800397e:	4640      	mov	r0, r8
 8003980:	ee1a 1a90 	vmov	r1, s21
        color = newColor;
 8003984:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        linespace = space;
 8003988:	f8a4 627c 	strh.w	r6, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 800398c:	f00f ff84 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003990:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003994:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800399c:	230c      	movs	r3, #12
    textArea2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UM8B));
 800399e:	a90c      	add	r1, sp, #48	; 0x30
 80039a0:	ee1a 0a90 	vmov	r0, s21
 80039a4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80039a8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80039ac:	f010 fa1c 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80039b0:	ee1a 1a90 	vmov	r1, s21
 80039b4:	4638      	mov	r0, r7
 80039b6:	f00d fab1 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1.setXY(154, 171);
 80039ba:	22ab      	movs	r2, #171	; 0xab
 80039bc:	219a      	movs	r1, #154	; 0x9a
 80039be:	ee1b 0a10 	vmov	r0, s22
 80039c2:	f7ff fcf2 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80039ca:	4640      	mov	r0, r8
 80039cc:	ee1b 1a10 	vmov	r1, s22
        color = newColor;
 80039d0:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
        linespace = space;
 80039d4:	f8a4 62c4 	strh.w	r6, [r4, #708]	; 0x2c4
        boundingArea = calculateBoundingArea();
 80039d8:	f00f ff5e 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80039dc:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 80039e0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80039e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039e8:	230b      	movs	r3, #11
    textArea2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MTUS));
 80039ea:	a90c      	add	r1, sp, #48	; 0x30
 80039ec:	ee1b 0a10 	vmov	r0, s22
 80039f0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80039f4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80039f8:	f010 f9f6 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80039fc:	ee1b 1a10 	vmov	r1, s22
 8003a00:	4638      	mov	r0, r7
 8003a02:	f00d fa8b 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2.setXY(263, 222);
 8003a06:	22de      	movs	r2, #222	; 0xde
 8003a08:	f240 1107 	movw	r1, #263	; 0x107
 8003a0c:	ee1b 0a90 	vmov	r0, s23
 8003a10:	f7ff fccb 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003a18:	4640      	mov	r0, r8
 8003a1a:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8003a1e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        linespace = space;
 8003a22:	f8a4 630c 	strh.w	r6, [r4, #780]	; 0x30c
        boundingArea = calculateBoundingArea();
 8003a26:	f00f ff37 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a2a:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003a2e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003a32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a36:	2307      	movs	r3, #7
    textArea2_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSWL));
 8003a38:	a90c      	add	r1, sp, #48	; 0x30
 8003a3a:	ee1b 0a90 	vmov	r0, s23
 8003a3e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003a42:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003a46:	f010 f9cf 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a4a:	ee1b 1a90 	vmov	r1, s23
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f00d fa64 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1.setXY(340, 222);
 8003a54:	22de      	movs	r2, #222	; 0xde
 8003a56:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003a5a:	ee1c 0a10 	vmov	r0, s24
 8003a5e:	f7ff fca4 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003a66:	4640      	mov	r0, r8
 8003a68:	ee1c 1a10 	vmov	r1, s24
        color = newColor;
 8003a6c:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
        linespace = space;
 8003a70:	f8a4 6354 	strh.w	r6, [r4, #852]	; 0x354
        boundingArea = calculateBoundingArea();
 8003a74:	f00f ff10 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a78:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003a7c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003a80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a84:	2306      	movs	r3, #6
    textArea2_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q0BQ));
 8003a86:	a90c      	add	r1, sp, #48	; 0x30
 8003a88:	ee1c 0a10 	vmov	r0, s24
 8003a8c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003a90:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003a94:	f010 f9a8 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a98:	ee1c 1a10 	vmov	r1, s24
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f00d fa3d 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1.setXY(417, 222);
 8003aa2:	22de      	movs	r2, #222	; 0xde
 8003aa4:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003aa8:	ee1c 0a90 	vmov	r0, s25
 8003aac:	f7ff fc7d 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003ab4:	4640      	mov	r0, r8
 8003ab6:	ee1c 1a90 	vmov	r1, s25
        color = newColor;
 8003aba:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        linespace = space;
 8003abe:	f8a4 639c 	strh.w	r6, [r4, #924]	; 0x39c
        boundingArea = calculateBoundingArea();
 8003ac2:	f00f fee9 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ac6:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8003aca:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ad2:	2305      	movs	r3, #5
    textArea2_1_1_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N3JM));
 8003ad4:	a90c      	add	r1, sp, #48	; 0x30
 8003ad6:	ee1c 0a90 	vmov	r0, s25
 8003ada:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003ade:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003ae2:	f010 f981 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ae6:	ee1c 1a90 	vmov	r1, s25
 8003aea:	4638      	mov	r0, r7
 8003aec:	f00d fa16 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1_1.setXY(492, 222);
 8003af0:	22de      	movs	r2, #222	; 0xde
 8003af2:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003af6:	ee1d 0a10 	vmov	r0, s26
 8003afa:	f7ff fc56 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b02:	4640      	mov	r0, r8
 8003b04:	ee1d 1a10 	vmov	r1, s26
        color = newColor;
 8003b08:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        linespace = space;
 8003b0c:	f8a4 63e4 	strh.w	r6, [r4, #996]	; 0x3e4
        boundingArea = calculateBoundingArea();
 8003b10:	f00f fec2 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b14:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003b18:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_1_1_1_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F0NS));
 8003b20:	a90c      	add	r1, sp, #48	; 0x30
 8003b22:	ee1d 0a10 	vmov	r0, s26
 8003b26:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003b2a:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
 8003b2e:	f010 f95b 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b32:	ee1d 1a10 	vmov	r1, s26
 8003b36:	4638      	mov	r0, r7
 8003b38:	f00d f9f0 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1.setXY(154, 133);
 8003b3c:	2285      	movs	r2, #133	; 0x85
 8003b3e:	219a      	movs	r1, #154	; 0x9a
 8003b40:	ee1d 0a90 	vmov	r0, s27
 8003b44:	f7ff fc31 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	ee1d 1a90 	vmov	r1, s27
        color = newColor;
 8003b52:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
        linespace = space;
 8003b56:	f8a4 642c 	strh.w	r6, [r4, #1068]	; 0x42c
        boundingArea = calculateBoundingArea();
 8003b5a:	f00f fe9d 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b5e:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003b62:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b6a:	f04f 030a 	mov.w	r3, #10
    textArea2_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0NS1));
 8003b6e:	a90c      	add	r1, sp, #48	; 0x30
 8003b70:	ee1d 0a90 	vmov	r0, s27
 8003b74:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003b78:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003b7c:	f010 f934 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b80:	ee1d 1a90 	vmov	r1, s27
 8003b84:	4638      	mov	r0, r7
 8003b86:	f00d f9c9 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1.setXY(154, 92);
 8003b8a:	225c      	movs	r2, #92	; 0x5c
 8003b8c:	219a      	movs	r1, #154	; 0x9a
 8003b8e:	ee1e 0a10 	vmov	r0, s28
 8003b92:	f7ff fc0a 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	ee1e 1a10 	vmov	r1, s28
        color = newColor;
 8003ba0:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
        linespace = space;
 8003ba4:	f8a4 6474 	strh.w	r6, [r4, #1140]	; 0x474
        boundingArea = calculateBoundingArea();
 8003ba8:	f00f fe76 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003bac:	f204 437c 	addw	r3, r4, #1148	; 0x47c
 8003bb0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003bb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bb8:	2309      	movs	r3, #9
    textArea2_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z325));
 8003bba:	a90c      	add	r1, sp, #48	; 0x30
 8003bbc:	ee1e 0a10 	vmov	r0, s28
 8003bc0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003bc4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003bc8:	f010 f90e 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003bcc:	ee1e 1a10 	vmov	r1, s28
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	f00d f9a3 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1_1.setXY(154, 52);
 8003bd6:	2234      	movs	r2, #52	; 0x34
 8003bd8:	219a      	movs	r1, #154	; 0x9a
 8003bda:	ee1e 0a90 	vmov	r0, s29
 8003bde:	f7ff fbe4 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003be6:	4640      	mov	r0, r8
 8003be8:	ee1e 1a90 	vmov	r1, s29
        color = newColor;
 8003bec:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
        linespace = space;
 8003bf0:	f8a4 64bc 	strh.w	r6, [r4, #1212]	; 0x4bc
        boundingArea = calculateBoundingArea();
 8003bf4:	f00f fe50 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003bf8:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8003bfc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c04:	2308      	movs	r3, #8
    textArea2_1_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OXJT));
 8003c06:	a90c      	add	r1, sp, #48	; 0x30
 8003c08:	ee1e 0a90 	vmov	r0, s29
 8003c0c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c10:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003c14:	f010 f8e8 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c18:	ee1e 1a90 	vmov	r1, s29
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f00d f97d 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(533, 103, 48, 30);
 8003c22:	231e      	movs	r3, #30
 8003c24:	2267      	movs	r2, #103	; 0x67
 8003c26:	f240 2115 	movw	r1, #533	; 0x215
 8003c2a:	ee1f 0a90 	vmov	r0, s31
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2330      	movs	r3, #48	; 0x30
 8003c32:	f7ff fbc7 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	ee1f 1a90 	vmov	r1, s31
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8003c44:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003c48:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8003c4c:	f04f 0302 	mov.w	r3, #2
 8003c50:	f8a4 3500 	strh.w	r3, [r4, #1280]	; 0x500
 8003c54:	f00d f962 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2_1.setXY(552, 108);
 8003c58:	226c      	movs	r2, #108	; 0x6c
 8003c5a:	f44f 710a 	mov.w	r1, #552	; 0x228
 8003c5e:	ee1f 0a10 	vmov	r0, s30
 8003c62:	f7ff fba2 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c66:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	ee1f 1a10 	vmov	r1, s30
        color = newColor;
 8003c70:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
        linespace = space;
 8003c74:	f8a4 6538 	strh.w	r6, [r4, #1336]	; 0x538
        boundingArea = calculateBoundingArea();
 8003c78:	f00f fe0e 	bl	8013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c7c:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
 8003c80:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c84:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c88:	f04f 0302 	mov.w	r3, #2
    textArea2_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UAP4));
 8003c8c:	a90c      	add	r1, sp, #48	; 0x30
 8003c8e:	ee1f 0a10 	vmov	r0, s30
 8003c92:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003c96:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003c9a:	f010 f8a5 	bl	8013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c9e:	ee1f 1a10 	vmov	r1, s30
 8003ca2:	4638      	mov	r0, r7
 8003ca4:	f00d f93a 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(190, 22, 310, 200);
 8003ca8:	23c8      	movs	r3, #200	; 0xc8
 8003caa:	2216      	movs	r2, #22
 8003cac:	21be      	movs	r1, #190	; 0xbe
 8003cae:	4628      	mov	r0, r5
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	f44f 739b 	mov.w	r3, #310	; 0x136
        setIntervalScaled(abs(interval) * dataScale);
 8003cb6:	f04f 080a 	mov.w	r8, #10
 8003cba:	f7ff fb83 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f7ff f8c4 	bl	8002e50 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8003cc8:	4633      	mov	r3, r6
 8003cca:	4632      	mov	r2, r6
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4628      	mov	r0, r5
 8003cd0:	9600      	str	r6, [sp, #0]
 8003cd2:	f00e fedb 	bl	8012a8c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8003cd6:	4633      	mov	r3, r6
 8003cd8:	4632      	mov	r2, r6
 8003cda:	4631      	mov	r1, r6
 8003cdc:	4628      	mov	r0, r5
 8003cde:	9600      	str	r6, [sp, #0]
 8003ce0:	f00e fdfb 	bl	80128da <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8003ce4:	4631      	mov	r1, r6
 8003ce6:	2264      	movs	r2, #100	; 0x64
 8003ce8:	4628      	mov	r0, r5
 8003cea:	f7fe ff89 	bl	8002c00 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8003cee:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
        color = newColor;
 8003cf2:	4ef3      	ldr	r6, [pc, #972]	; (80040c0 <_ZN15Screen1ViewBaseC1Ev+0xbb8>)
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003cf4:	4652      	mov	r2, sl
        setIntervalScaled(abs(interval) * dataScale);
 8003cf6:	fb08 f001 	mul.w	r0, r8, r1
        color = newColor;
 8003cfa:	f8c4 6858 	str.w	r6, [r4, #2136]	; 0x858
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003cfe:	2800      	cmp	r0, #0
        lineWidth = width;
 8003d00:	f884 a864 	strb.w	sl, [r4, #2148]	; 0x864
 8003d04:	bfb8      	it	lt
 8003d06:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003d08:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d0c:	f00e ff70 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8003d10:	9904      	ldr	r1, [sp, #16]
 8003d12:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
 8003d16:	4628      	mov	r0, r5
        dataScale = scale;
 8003d18:	f8c4 a85c 	str.w	sl, [r4, #2140]	; 0x85c
 8003d1c:	f00e fde8 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003d20:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d24:	4652      	mov	r2, sl
        color = newColor;
 8003d26:	f8c4 6898 	str.w	r6, [r4, #2200]	; 0x898
        setIntervalScaled(abs(interval) * dataScale);
 8003d2a:	fb08 f001 	mul.w	r0, r8, r1
        lineWidth = width;
 8003d2e:	f884 a8a4 	strb.w	sl, [r4, #2212]	; 0x8a4
 8003d32:	2800      	cmp	r0, #0
 8003d34:	bfb8      	it	lt
 8003d36:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003d38:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003d3c:	f00e ff58 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8003d40:	9905      	ldr	r1, [sp, #20]
 8003d42:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
 8003d46:	4628      	mov	r0, r5
        dataScale = scale;
 8003d48:	f8c4 a89c 	str.w	sl, [r4, #2204]	; 0x89c
 8003d4c:	f00e fdd0 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8003d50:	4bdc      	ldr	r3, [pc, #880]	; (80040c4 <_ZN15Screen1ViewBaseC1Ev+0xbbc>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8003d52:	9906      	ldr	r1, [sp, #24]
 8003d54:	4628      	mov	r0, r5
 8003d56:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003d5a:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003d5e:	f884 98d8 	strb.w	r9, [r4, #2264]	; 0x8d8
 8003d62:	f8a4 38ec 	strh.w	r3, [r4, #2284]	; 0x8ec
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003d66:	2316      	movs	r3, #22
 8003d68:	f884 38ee 	strb.w	r3, [r4, #2286]	; 0x8ee
        canvasPainter = &painter;
 8003d6c:	9b07      	ldr	r3, [sp, #28]
 8003d6e:	f8c4 38d4 	str.w	r3, [r4, #2260]	; 0x8d4
 8003d72:	f00e fdbd 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8003d76:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003d7a:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80040c8 <_ZN15Screen1ViewBaseC1Ev+0xbc0>
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d92:	f2c1 8361 	blt.w	8005458 <_ZN15Screen1ViewBaseC1Ev+0x1f50>
            return (int)(fs + 0.5f);
 8003d96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003da6:	4628      	mov	r0, r5
 8003da8:	f00e ff7b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003dac:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003db0:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 80040cc <_ZN15Screen1ViewBaseC1Ev+0xbc4>
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc8:	f2c1 835b 	blt.w	8005482 <_ZN15Screen1ViewBaseC1Ev+0x1f7a>
            return (int)(fs + 0.5f);
 8003dcc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003ddc:	4628      	mov	r0, r5
 8003dde:	f00e ff60 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003de2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003de6:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80040d0 <_ZN15Screen1ViewBaseC1Ev+0xbc8>
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003df2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	f2c1 8355 	blt.w	80054ac <_ZN15Screen1ViewBaseC1Ev+0x1fa4>
            return (int)(fs + 0.5f);
 8003e02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e12:	4628      	mov	r0, r5
 8003e14:	f00e ff45 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e18:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e1c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80040d4 <_ZN15Screen1ViewBaseC1Ev+0xbcc>
 8003e20:	ee07 3a90 	vmov	s15, r3
 8003e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e28:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e34:	f2c1 834f 	blt.w	80054d6 <_ZN15Screen1ViewBaseC1Ev+0x1fce>
            return (int)(fs + 0.5f);
 8003e38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e44:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f00e ff2a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e4e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e52:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 80040d8 <_ZN15Screen1ViewBaseC1Ev+0xbd0>
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	f2c1 8349 	blt.w	8005500 <_ZN15Screen1ViewBaseC1Ev+0x1ff8>
            return (int)(fs + 0.5f);
 8003e6e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e7a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f00e ff0f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003e84:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003e88:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80040dc <_ZN15Screen1ViewBaseC1Ev+0xbd4>
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e94:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea0:	f2c1 8343 	blt.w	800552a <_ZN15Screen1ViewBaseC1Ev+0x2022>
            return (int)(fs + 0.5f);
 8003ea4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f00e fef4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003eba:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003ebe:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80040e0 <_ZN15Screen1ViewBaseC1Ev+0xbd8>
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003eca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003ece:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed6:	f2c1 833d 	blt.w	8005554 <_ZN15Screen1ViewBaseC1Ev+0x204c>
            return (int)(fs + 0.5f);
 8003eda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ee6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003eea:	4628      	mov	r0, r5
 8003eec:	f00e fed9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ef0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003ef4:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80040e4 <_ZN15Screen1ViewBaseC1Ev+0xbdc>
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f00:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	f2c1 8337 	blt.w	800557e <_ZN15Screen1ViewBaseC1Ev+0x2076>
            return (int)(fs + 0.5f);
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f1c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f20:	4628      	mov	r0, r5
 8003f22:	f00e febe 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f26:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f2a:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80040e8 <_ZN15Screen1ViewBaseC1Ev+0xbe0>
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	f2c1 8331 	blt.w	80055a8 <_ZN15Screen1ViewBaseC1Ev+0x20a0>
            return (int)(fs + 0.5f);
 8003f46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f52:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f56:	4628      	mov	r0, r5
 8003f58:	f00e fea3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f5c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f60:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80040ec <_ZN15Screen1ViewBaseC1Ev+0xbe4>
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f78:	f2c1 832b 	blt.w	80055d2 <_ZN15Screen1ViewBaseC1Ev+0x20ca>
            return (int)(fs + 0.5f);
 8003f7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f00e fe88 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003f92:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003f96:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80040f0 <_ZN15Screen1ViewBaseC1Ev+0xbe8>
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	f2c1 8325 	blt.w	80055fc <_ZN15Screen1ViewBaseC1Ev+0x20f4>
            return (int)(fs + 0.5f);
 8003fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fbe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f00e fe6d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003fc8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003fcc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80040f4 <_ZN15Screen1ViewBaseC1Ev+0xbec>
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe4:	f2c1 831f 	blt.w	8005626 <_ZN15Screen1ViewBaseC1Ev+0x211e>
            return (int)(fs + 0.5f);
 8003fe8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ff4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f00e fe52 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ffe:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004002:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80040f8 <_ZN15Screen1ViewBaseC1Ev+0xbf0>
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004012:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	f2c1 8319 	blt.w	8005650 <_ZN15Screen1ViewBaseC1Ev+0x2148>
            return (int)(fs + 0.5f);
 800401e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800402a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800402e:	4628      	mov	r0, r5
 8004030:	f00e fe37 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004034:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004038:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80040fc <_ZN15Screen1ViewBaseC1Ev+0xbf4>
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004044:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	f2c1 8313 	blt.w	800567a <_ZN15Screen1ViewBaseC1Ev+0x2172>
            return (int)(fs + 0.5f);
 8004054:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004060:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004064:	4628      	mov	r0, r5
 8004066:	f00e fe1c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800406a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800406e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004100 <_ZN15Screen1ViewBaseC1Ev+0xbf8>
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800407e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	f2c1 830d 	blt.w	80056a4 <_ZN15Screen1ViewBaseC1Ev+0x219c>
            return (int)(fs + 0.5f);
 800408a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800408e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004096:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800409a:	4628      	mov	r0, r5
 800409c:	f00e fe01 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040a0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80040a4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004104 <_ZN15Screen1ViewBaseC1Ev+0xbfc>
 80040a8:	ee07 3a90 	vmov	s15, r3
 80040ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040bc:	e048      	b.n	8004150 <_ZN15Screen1ViewBaseC1Ev+0xc48>
 80040be:	bf00      	nop
 80040c0:	ff1497c5 	.word	0xff1497c5
 80040c4:	ffc4b916 	.word	0xffc4b916
 80040c8:	40fdf751 	.word	0x40fdf751
 80040cc:	3fcfeea2 	.word	0x3fcfeea2
 80040d0:	40160496 	.word	0x40160496
 80040d4:	411aa4d3 	.word	0x411aa4d3
 80040d8:	41adf368 	.word	0x41adf368
 80040dc:	420f197d 	.word	0x420f197d
 80040e0:	4242b180 	.word	0x4242b180
 80040e4:	42674305 	.word	0x42674305
 80040e8:	4276a3b8 	.word	0x4276a3b8
 80040ec:	42706398 	.word	0x42706398
 80040f0:	4259c671 	.word	0x4259c671
 80040f4:	423c53c6 	.word	0x423c53c6
 80040f8:	422358c3 	.word	0x422358c3
 80040fc:	4218fa27 	.word	0x4218fa27
 8004100:	42238f61 	.word	0x42238f61
 8004104:	4243ee46 	.word	0x4243ee46
 8004108:	427513c3 	.word	0x427513c3
 800410c:	4296a021 	.word	0x4296a021
 8004110:	42b021ad 	.word	0x42b021ad
 8004114:	42c133eb 	.word	0x42c133eb
 8004118:	42c5a4c8 	.word	0x42c5a4c8
 800411c:	42bbf1d7 	.word	0x42bbf1d7
 8004120:	42a5ab40 	.word	0x42a5ab40
 8004124:	42871a0d 	.word	0x42871a0d
 8004128:	424c7f02 	.word	0x424c7f02
 800412c:	4212d7a0 	.word	0x4212d7a0
 8004130:	41d7103e 	.word	0x41d7103e
 8004134:	41b84d36 	.word	0x41b84d36
 8004138:	41c8c04f 	.word	0x41c8c04f
 800413c:	41fc6dac 	.word	0x41fc6dac
 8004140:	421fa1f2 	.word	0x421fa1f2
 8004144:	423d28aa 	.word	0x423d28aa
 8004148:	424cd2bd 	.word	0x424cd2bd
 800414c:	4248b54f 	.word	0x4248b54f
 8004150:	f2c1 82bd 	blt.w	80056ce <_ZN15Screen1ViewBaseC1Ev+0x21c6>
            return (int)(fs + 0.5f);
 8004154:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800415c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004160:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004164:	4628      	mov	r0, r5
 8004166:	f00e fd9c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800416a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800416e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8004108 <_ZN15Screen1ViewBaseC1Ev+0xc00>
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800417e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	f2c1 82b7 	blt.w	80056f8 <_ZN15Screen1ViewBaseC1Ev+0x21f0>
            return (int)(fs + 0.5f);
 800418a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800418e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004196:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800419a:	4628      	mov	r0, r5
 800419c:	f00e fd81 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041a0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041a4:	ed1f 7a27 	vldr	s14, [pc, #-156]	; 800410c <_ZN15Screen1ViewBaseC1Ev+0xc04>
 80041a8:	ee07 3a90 	vmov	s15, r3
 80041ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041bc:	f2c1 82b1 	blt.w	8005722 <_ZN15Screen1ViewBaseC1Ev+0x221a>
            return (int)(fs + 0.5f);
 80041c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041d0:	4628      	mov	r0, r5
 80041d2:	f00e fd66 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041d6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041da:	ed1f 7a33 	vldr	s14, [pc, #-204]	; 8004110 <_ZN15Screen1ViewBaseC1Ev+0xc08>
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f2:	f2c1 82ab 	blt.w	800574c <_ZN15Screen1ViewBaseC1Ev+0x2244>
            return (int)(fs + 0.5f);
 80041f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004202:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004206:	4628      	mov	r0, r5
 8004208:	f00e fd4b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800420c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004210:	ed1f 7a40 	vldr	s14, [pc, #-256]	; 8004114 <_ZN15Screen1ViewBaseC1Ev+0xc0c>
 8004214:	ee07 3a90 	vmov	s15, r3
 8004218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	f2c1 82a5 	blt.w	8005776 <_ZN15Screen1ViewBaseC1Ev+0x226e>
            return (int)(fs + 0.5f);
 800422c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004238:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800423c:	4628      	mov	r0, r5
 800423e:	f00e fd30 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004242:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004246:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8004118 <_ZN15Screen1ViewBaseC1Ev+0xc10>
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004252:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	f2c1 829f 	blt.w	80057a0 <_ZN15Screen1ViewBaseC1Ev+0x2298>
            return (int)(fs + 0.5f);
 8004262:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800426a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004272:	4628      	mov	r0, r5
 8004274:	f00e fd15 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004278:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800427c:	ed1f 7a59 	vldr	s14, [pc, #-356]	; 800411c <_ZN15Screen1ViewBaseC1Ev+0xc14>
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004288:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800428c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	f2c1 8299 	blt.w	80057ca <_ZN15Screen1ViewBaseC1Ev+0x22c2>
            return (int)(fs + 0.5f);
 8004298:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800429c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042a8:	4628      	mov	r0, r5
 80042aa:	f00e fcfa 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042ae:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042b2:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 8004120 <_ZN15Screen1ViewBaseC1Ev+0xc18>
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	f2c1 8293 	blt.w	80057f4 <_ZN15Screen1ViewBaseC1Ev+0x22ec>
            return (int)(fs + 0.5f);
 80042ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042da:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042de:	4628      	mov	r0, r5
 80042e0:	f00e fcdf 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042e4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042e8:	ed1f 7a72 	vldr	s14, [pc, #-456]	; 8004124 <_ZN15Screen1ViewBaseC1Ev+0xc1c>
 80042ec:	ee07 3a90 	vmov	s15, r3
 80042f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	f2c1 828d 	blt.w	800581e <_ZN15Screen1ViewBaseC1Ev+0x2316>
            return (int)(fs + 0.5f);
 8004304:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004308:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004310:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004314:	4628      	mov	r0, r5
 8004316:	f00e fcc4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800431a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800431e:	ed1f 7a7e 	vldr	s14, [pc, #-504]	; 8004128 <_ZN15Screen1ViewBaseC1Ev+0xc20>
 8004322:	ee07 3a90 	vmov	s15, r3
 8004326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800432e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004336:	f2c1 8287 	blt.w	8005848 <_ZN15Screen1ViewBaseC1Ev+0x2340>
            return (int)(fs + 0.5f);
 800433a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800433e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004346:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800434a:	4628      	mov	r0, r5
 800434c:	f00e fca9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004350:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004354:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800412c <_ZN15Screen1ViewBaseC1Ev+0xc24>
 8004358:	ee07 3a90 	vmov	s15, r3
 800435c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004360:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436c:	f2c1 8281 	blt.w	8005872 <_ZN15Screen1ViewBaseC1Ev+0x236a>
            return (int)(fs + 0.5f);
 8004370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800437c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004380:	4628      	mov	r0, r5
 8004382:	f00e fc8e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004386:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800438a:	ed1f 7a97 	vldr	s14, [pc, #-604]	; 8004130 <_ZN15Screen1ViewBaseC1Ev+0xc28>
 800438e:	ee07 3a90 	vmov	s15, r3
 8004392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004396:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800439a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	f2c1 827b 	blt.w	800589c <_ZN15Screen1ViewBaseC1Ev+0x2394>
            return (int)(fs + 0.5f);
 80043a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043b6:	4628      	mov	r0, r5
 80043b8:	f00e fc73 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043bc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043c0:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 8004134 <_ZN15Screen1ViewBaseC1Ev+0xc2c>
 80043c4:	ee07 3a90 	vmov	s15, r3
 80043c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	f2c1 8275 	blt.w	80058c6 <_ZN15Screen1ViewBaseC1Ev+0x23be>
            return (int)(fs + 0.5f);
 80043dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043ec:	4628      	mov	r0, r5
 80043ee:	f00e fc58 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043f2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043f6:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 8004138 <_ZN15Screen1ViewBaseC1Ev+0xc30>
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004402:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004406:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	f2c1 826f 	blt.w	80058f0 <_ZN15Screen1ViewBaseC1Ev+0x23e8>
            return (int)(fs + 0.5f);
 8004412:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800441a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004422:	4628      	mov	r0, r5
 8004424:	f00e fc3d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004428:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800442c:	ed1f 7abd 	vldr	s14, [pc, #-756]	; 800413c <_ZN15Screen1ViewBaseC1Ev+0xc34>
 8004430:	ee07 3a90 	vmov	s15, r3
 8004434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004438:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800443c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004444:	f2c1 8269 	blt.w	800591a <_ZN15Screen1ViewBaseC1Ev+0x2412>
            return (int)(fs + 0.5f);
 8004448:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800444c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004454:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004458:	4628      	mov	r0, r5
 800445a:	f00e fc22 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800445e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004462:	ed1f 7ac9 	vldr	s14, [pc, #-804]	; 8004140 <_ZN15Screen1ViewBaseC1Ev+0xc38>
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800446e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	f2c1 8263 	blt.w	8005944 <_ZN15Screen1ViewBaseC1Ev+0x243c>
            return (int)(fs + 0.5f);
 800447e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800448a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800448e:	4628      	mov	r0, r5
 8004490:	f00e fc07 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004494:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004498:	ed1f 7ad6 	vldr	s14, [pc, #-856]	; 8004144 <_ZN15Screen1ViewBaseC1Ev+0xc3c>
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	f2c1 825d 	blt.w	800596e <_ZN15Screen1ViewBaseC1Ev+0x2466>
            return (int)(fs + 0.5f);
 80044b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044c4:	4628      	mov	r0, r5
 80044c6:	f00e fbec 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044ca:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044ce:	ed1f 7ae2 	vldr	s14, [pc, #-904]	; 8004148 <_ZN15Screen1ViewBaseC1Ev+0xc40>
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e6:	f2c1 8257 	blt.w	8005998 <_ZN15Screen1ViewBaseC1Ev+0x2490>
            return (int)(fs + 0.5f);
 80044ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044fa:	4628      	mov	r0, r5
 80044fc:	f00e fbd1 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004500:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004504:	ed1f 7aef 	vldr	s14, [pc, #-956]	; 800414c <_ZN15Screen1ViewBaseC1Ev+0xc44>
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004510:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451c:	f2c1 8251 	blt.w	80059c2 <_ZN15Screen1ViewBaseC1Ev+0x24ba>
            return (int)(fs + 0.5f);
 8004520:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800452c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004530:	4628      	mov	r0, r5
 8004532:	f00e fbb6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004536:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800453a:	ed9f 7af5 	vldr	s14, [pc, #980]	; 8004910 <_ZN15Screen1ViewBaseC1Ev+0x1408>
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004546:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800454a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	f2c1 824b 	blt.w	80059ec <_ZN15Screen1ViewBaseC1Ev+0x24e4>
            return (int)(fs + 0.5f);
 8004556:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800455a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800455e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004562:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004566:	4628      	mov	r0, r5
 8004568:	f00e fb9b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800456c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004570:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8004914 <_ZN15Screen1ViewBaseC1Ev+0x140c>
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004588:	f2c1 8245 	blt.w	8005a16 <_ZN15Screen1ViewBaseC1Ev+0x250e>
            return (int)(fs + 0.5f);
 800458c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004598:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800459c:	4628      	mov	r0, r5
 800459e:	f00e fb80 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045a2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045a6:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8004918 <_ZN15Screen1ViewBaseC1Ev+0x1410>
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045be:	f2c1 823f 	blt.w	8005a40 <_ZN15Screen1ViewBaseC1Ev+0x2538>
            return (int)(fs + 0.5f);
 80045c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045d2:	4628      	mov	r0, r5
 80045d4:	f00e fb65 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045d8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045dc:	ed9f 7acf 	vldr	s14, [pc, #828]	; 800491c <_ZN15Screen1ViewBaseC1Ev+0x1414>
 80045e0:	ee07 3a90 	vmov	s15, r3
 80045e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f4:	f2c1 8239 	blt.w	8005a6a <_ZN15Screen1ViewBaseC1Ev+0x2562>
            return (int)(fs + 0.5f);
 80045f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004604:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004608:	4628      	mov	r0, r5
 800460a:	f00e fb4a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800460e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004612:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8004920 <_ZN15Screen1ViewBaseC1Ev+0x1418>
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462a:	f2c1 8233 	blt.w	8005a94 <_ZN15Screen1ViewBaseC1Ev+0x258c>
            return (int)(fs + 0.5f);
 800462e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004632:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800463a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800463e:	4628      	mov	r0, r5
 8004640:	f00e fb2f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004644:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004648:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8004924 <_ZN15Screen1ViewBaseC1Ev+0x141c>
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004654:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800465c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004660:	f2c1 822d 	blt.w	8005abe <_ZN15Screen1ViewBaseC1Ev+0x25b6>
            return (int)(fs + 0.5f);
 8004664:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004668:	ee77 7a87 	vadd.f32	s15, s15, s14
 800466c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004670:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004674:	4628      	mov	r0, r5
 8004676:	f00e fb14 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800467a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800467e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004928 <_ZN15Screen1ViewBaseC1Ev+0x1420>
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800468a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800468e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	f2c1 8227 	blt.w	8005ae8 <_ZN15Screen1ViewBaseC1Ev+0x25e0>
            return (int)(fs + 0.5f);
 800469a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800469e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046aa:	4628      	mov	r0, r5
 80046ac:	f00e faf9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046b0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046b4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800492c <_ZN15Screen1ViewBaseC1Ev+0x1424>
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046cc:	f2c1 8221 	blt.w	8005b12 <_ZN15Screen1ViewBaseC1Ev+0x260a>
            return (int)(fs + 0.5f);
 80046d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046e0:	4628      	mov	r0, r5
 80046e2:	f00e fade 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046e6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046ea:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004930 <_ZN15Screen1ViewBaseC1Ev+0x1428>
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	f2c1 821b 	blt.w	8005b3c <_ZN15Screen1ViewBaseC1Ev+0x2634>
            return (int)(fs + 0.5f);
 8004706:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800470a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800470e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004712:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004716:	4628      	mov	r0, r5
 8004718:	f00e fac3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800471c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004720:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004934 <_ZN15Screen1ViewBaseC1Ev+0x142c>
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800472c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004738:	f2c1 8215 	blt.w	8005b66 <_ZN15Screen1ViewBaseC1Ev+0x265e>
            return (int)(fs + 0.5f);
 800473c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004740:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004748:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800474c:	4628      	mov	r0, r5
 800474e:	f00e faa8 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004752:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004756:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004938 <_ZN15Screen1ViewBaseC1Ev+0x1430>
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004762:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	f2c1 820f 	blt.w	8005b90 <_ZN15Screen1ViewBaseC1Ev+0x2688>
            return (int)(fs + 0.5f);
 8004772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004776:	ee77 7a87 	vadd.f32	s15, s15, s14
 800477a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800477e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004782:	4628      	mov	r0, r5
 8004784:	f00e fa8d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004788:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800478c:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800493c <_ZN15Screen1ViewBaseC1Ev+0x1434>
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004798:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800479c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	f2c1 8209 	blt.w	8005bba <_ZN15Screen1ViewBaseC1Ev+0x26b2>
            return (int)(fs + 0.5f);
 80047a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047b4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047b8:	4628      	mov	r0, r5
 80047ba:	f00e fa72 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047be:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047c2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004940 <_ZN15Screen1ViewBaseC1Ev+0x1438>
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	f2c1 8203 	blt.w	8005be4 <_ZN15Screen1ViewBaseC1Ev+0x26dc>
            return (int)(fs + 0.5f);
 80047de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047ea:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047ee:	4628      	mov	r0, r5
 80047f0:	f00e fa57 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047f4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047f8:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004944 <_ZN15Screen1ViewBaseC1Ev+0x143c>
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004804:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004808:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004810:	f2c1 81fd 	blt.w	8005c0e <_ZN15Screen1ViewBaseC1Ev+0x2706>
            return (int)(fs + 0.5f);
 8004814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800481c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004820:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004824:	4628      	mov	r0, r5
 8004826:	f00e fa3c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800482a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800482e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004948 <_ZN15Screen1ViewBaseC1Ev+0x1440>
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800483a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800483e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004846:	f2c1 81f7 	blt.w	8005c38 <_ZN15Screen1ViewBaseC1Ev+0x2730>
            return (int)(fs + 0.5f);
 800484a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800484e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004856:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800485a:	4628      	mov	r0, r5
 800485c:	f00e fa21 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004860:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004864:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800494c <_ZN15Screen1ViewBaseC1Ev+0x1444>
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004870:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004874:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	f2c1 81f1 	blt.w	8005c62 <_ZN15Screen1ViewBaseC1Ev+0x275a>
            return (int)(fs + 0.5f);
 8004880:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004884:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800488c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004890:	4628      	mov	r0, r5
 8004892:	f00e fa06 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004896:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800489a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004950 <_ZN15Screen1ViewBaseC1Ev+0x1448>
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	f2c1 81eb 	blt.w	8005c8c <_ZN15Screen1ViewBaseC1Ev+0x2784>
            return (int)(fs + 0.5f);
 80048b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048c6:	4628      	mov	r0, r5
 80048c8:	f00e f9eb 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048cc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004954 <_ZN15Screen1ViewBaseC1Ev+0x144c>
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e8:	f2c1 81e5 	blt.w	8005cb6 <_ZN15Screen1ViewBaseC1Ev+0x27ae>
            return (int)(fs + 0.5f);
 80048ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048fc:	4628      	mov	r0, r5
 80048fe:	f00e f9d0 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004902:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004906:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004958 <_ZN15Screen1ViewBaseC1Ev+0x1450>
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	e049      	b.n	80049a4 <_ZN15Screen1ViewBaseC1Ev+0x149c>
 8004910:	42307b0b 	.word	0x42307b0b
 8004914:	420986bd 	.word	0x420986bd
 8004918:	41bb4e8a 	.word	0x41bb4e8a
 800491c:	4162b886 	.word	0x4162b886
 8004920:	4115feb0 	.word	0x4115feb0
 8004924:	412d5677 	.word	0x412d5677
 8004928:	4197c0dc 	.word	0x4197c0dc
 800492c:	4202bd8b 	.word	0x4202bd8b
 8004930:	424665b4 	.word	0x424665b4
 8004934:	42852d25 	.word	0x42852d25
 8004938:	42a10577 	.word	0x42a10577
 800493c:	42b1dfb4 	.word	0x42b1dfb4
 8004940:	42b56873 	.word	0x42b56873
 8004944:	42ac5462 	.word	0x42ac5462
 8004948:	429a2405 	.word	0x429a2405
 800494c:	42843b27 	.word	0x42843b27
 8004950:	42610aed 	.word	0x42610aed
 8004954:	4247fb84 	.word	0x4247fb84
 8004958:	4242e892 	.word	0x4242e892
 800495c:	4251c1f2 	.word	0x4251c1f2
 8004960:	426ed828 	.word	0x426ed828
 8004964:	42882ad4 	.word	0x42882ad4
 8004968:	42956170 	.word	0x42956170
 800496c:	4299fb29 	.word	0x4299fb29
 8004970:	4292db9d 	.word	0x4292db9d
 8004974:	427f6be9 	.word	0x427f6be9
 8004978:	4246694a 	.word	0x4246694a
 800497c:	4204cdd3 	.word	0x4204cdd3
 8004980:	418e5d1f 	.word	0x418e5d1f
 8004984:	40cd3001 	.word	0x40cd3001
 8004988:	3f9f7cee 	.word	0x3f9f7cee
 800498c:	404972c5 	.word	0x404972c5
 8004990:	4136e61d 	.word	0x4136e61d
 8004994:	41c068c7 	.word	0x41c068c7
 8004998:	42186a82 	.word	0x42186a82
 800499c:	424a2037 	.word	0x424a2037
 80049a0:	426b6aa4 	.word	0x426b6aa4
 80049a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b4:	f2c1 8194 	blt.w	8005ce0 <_ZN15Screen1ViewBaseC1Ev+0x27d8>
            return (int)(fs + 0.5f);
 80049b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049c8:	4628      	mov	r0, r5
 80049ca:	f00e f96a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049ce:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80049d2:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 800495c <_ZN15Screen1ViewBaseC1Ev+0x1454>
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ea:	f2c1 818e 	blt.w	8005d0a <_ZN15Screen1ViewBaseC1Ev+0x2802>
            return (int)(fs + 0.5f);
 80049ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049fa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049fe:	4628      	mov	r0, r5
 8004a00:	f00e f94f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a04:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a08:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8004960 <_ZN15Screen1ViewBaseC1Ev+0x1458>
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	f2c1 8188 	blt.w	8005d34 <_ZN15Screen1ViewBaseC1Ev+0x282c>
            return (int)(fs + 0.5f);
 8004a24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a34:	4628      	mov	r0, r5
 8004a36:	f00e f934 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a3a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a3e:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 8004964 <_ZN15Screen1ViewBaseC1Ev+0x145c>
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a56:	f2c1 8182 	blt.w	8005d5e <_ZN15Screen1ViewBaseC1Ev+0x2856>
            return (int)(fs + 0.5f);
 8004a5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a66:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f00e f919 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a70:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a74:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004968 <_ZN15Screen1ViewBaseC1Ev+0x1460>
 8004a78:	ee07 3a90 	vmov	s15, r3
 8004a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8c:	f2c1 817c 	blt.w	8005d88 <_ZN15Screen1ViewBaseC1Ev+0x2880>
            return (int)(fs + 0.5f);
 8004a90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f00e f8fe 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004aa6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004aaa:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 800496c <_ZN15Screen1ViewBaseC1Ev+0x1464>
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004aba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	f2c1 8176 	blt.w	8005db2 <_ZN15Screen1ViewBaseC1Ev+0x28aa>
            return (int)(fs + 0.5f);
 8004ac6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004aca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f00e f8e3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004adc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ae0:	ed1f 7a5d 	vldr	s14, [pc, #-372]	; 8004970 <_ZN15Screen1ViewBaseC1Ev+0x1468>
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004aec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	f2c1 8170 	blt.w	8005ddc <_ZN15Screen1ViewBaseC1Ev+0x28d4>
            return (int)(fs + 0.5f);
 8004afc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b08:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f00e f8c8 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b12:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b16:	ed1f 7a69 	vldr	s14, [pc, #-420]	; 8004974 <_ZN15Screen1ViewBaseC1Ev+0x146c>
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2e:	f2c1 816a 	blt.w	8005e06 <_ZN15Screen1ViewBaseC1Ev+0x28fe>
            return (int)(fs + 0.5f);
 8004b32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b42:	4628      	mov	r0, r5
 8004b44:	f00e f8ad 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b48:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b4c:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8004978 <_ZN15Screen1ViewBaseC1Ev+0x1470>
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b64:	f2c1 8164 	blt.w	8005e30 <_ZN15Screen1ViewBaseC1Ev+0x2928>
            return (int)(fs + 0.5f);
 8004b68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f00e f892 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b7e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b82:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 800497c <_ZN15Screen1ViewBaseC1Ev+0x1474>
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9a:	f2c1 815e 	blt.w	8005e5a <_ZN15Screen1ViewBaseC1Ev+0x2952>
            return (int)(fs + 0.5f);
 8004b9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004baa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f00e f877 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004bb4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004bb8:	ed1f 7a8f 	vldr	s14, [pc, #-572]	; 8004980 <_ZN15Screen1ViewBaseC1Ev+0x1478>
 8004bbc:	ee07 3a90 	vmov	s15, r3
 8004bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd0:	f2c1 8158 	blt.w	8005e84 <_ZN15Screen1ViewBaseC1Ev+0x297c>
            return (int)(fs + 0.5f);
 8004bd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004be4:	4628      	mov	r0, r5
 8004be6:	f00e f85c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004bea:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004bee:	ed1f 7a9b 	vldr	s14, [pc, #-620]	; 8004984 <_ZN15Screen1ViewBaseC1Ev+0x147c>
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c06:	f2c1 8152 	blt.w	8005eae <_ZN15Screen1ViewBaseC1Ev+0x29a6>
            return (int)(fs + 0.5f);
 8004c0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c16:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f00e f841 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c20:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c24:	ed1f 7aa8 	vldr	s14, [pc, #-672]	; 8004988 <_ZN15Screen1ViewBaseC1Ev+0x1480>
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c30:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	f2c1 814c 	blt.w	8005ed8 <_ZN15Screen1ViewBaseC1Ev+0x29d0>
            return (int)(fs + 0.5f);
 8004c40:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c4c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c50:	4628      	mov	r0, r5
 8004c52:	f00e f826 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c56:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c5a:	ed1f 7ab4 	vldr	s14, [pc, #-720]	; 800498c <_ZN15Screen1ViewBaseC1Ev+0x1484>
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c72:	f2c1 8146 	blt.w	8005f02 <_ZN15Screen1ViewBaseC1Ev+0x29fa>
            return (int)(fs + 0.5f);
 8004c76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c86:	4628      	mov	r0, r5
 8004c88:	f00e f80b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c8c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c90:	ed1f 7ac1 	vldr	s14, [pc, #-772]	; 8004990 <_ZN15Screen1ViewBaseC1Ev+0x1488>
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca8:	f2c1 8140 	blt.w	8005f2c <_ZN15Screen1ViewBaseC1Ev+0x2a24>
            return (int)(fs + 0.5f);
 8004cac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cb8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f00d fff0 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cc2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cc6:	ed1f 7acd 	vldr	s14, [pc, #-820]	; 8004994 <_ZN15Screen1ViewBaseC1Ev+0x148c>
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cde:	f2c1 813a 	blt.w	8005f56 <_ZN15Screen1ViewBaseC1Ev+0x2a4e>
            return (int)(fs + 0.5f);
 8004ce2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ce6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f00d ffd5 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cf8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cfc:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 8004998 <_ZN15Screen1ViewBaseC1Ev+0x1490>
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	f2c1 8134 	blt.w	8005f80 <_ZN15Screen1ViewBaseC1Ev+0x2a78>
            return (int)(fs + 0.5f);
 8004d18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f00d ffba 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d2e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d32:	ed1f 7ae6 	vldr	s14, [pc, #-920]	; 800499c <_ZN15Screen1ViewBaseC1Ev+0x1494>
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	f2c1 812e 	blt.w	8005faa <_ZN15Screen1ViewBaseC1Ev+0x2aa2>
            return (int)(fs + 0.5f);
 8004d4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d5a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f00d ff9f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d64:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d68:	ed1f 7af3 	vldr	s14, [pc, #-972]	; 80049a0 <_ZN15Screen1ViewBaseC1Ev+0x1498>
 8004d6c:	ee07 3a90 	vmov	s15, r3
 8004d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d80:	f2c1 8128 	blt.w	8005fd4 <_ZN15Screen1ViewBaseC1Ev+0x2acc>
            return (int)(fs + 0.5f);
 8004d84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d94:	4628      	mov	r0, r5
 8004d96:	f00d ff84 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d9a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d9e:	ed9f 7af5 	vldr	s14, [pc, #980]	; 8005174 <_ZN15Screen1ViewBaseC1Ev+0x1c6c>
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004daa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db6:	f2c1 8122 	blt.w	8005ffe <_ZN15Screen1ViewBaseC1Ev+0x2af6>
            return (int)(fs + 0.5f);
 8004dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f00d ff69 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004dd0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004dd4:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8005178 <_ZN15Screen1ViewBaseC1Ev+0x1c70>
 8004dd8:	ee07 3a90 	vmov	s15, r3
 8004ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004de4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dec:	f2c1 811c 	blt.w	8006028 <_ZN15Screen1ViewBaseC1Ev+0x2b20>
            return (int)(fs + 0.5f);
 8004df0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e00:	4628      	mov	r0, r5
 8004e02:	f00d ff4e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e06:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e0a:	ed9f 7adc 	vldr	s14, [pc, #880]	; 800517c <_ZN15Screen1ViewBaseC1Ev+0x1c74>
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e22:	f2c1 8116 	blt.w	8006052 <_ZN15Screen1ViewBaseC1Ev+0x2b4a>
            return (int)(fs + 0.5f);
 8004e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e36:	4628      	mov	r0, r5
 8004e38:	f00d ff33 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e3c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e40:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8005180 <_ZN15Screen1ViewBaseC1Ev+0x1c78>
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	f2c1 8110 	blt.w	800607c <_ZN15Screen1ViewBaseC1Ev+0x2b74>
            return (int)(fs + 0.5f);
 8004e5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e68:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f00d ff18 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e72:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e76:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8005184 <_ZN15Screen1ViewBaseC1Ev+0x1c7c>
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e82:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	f2c1 810a 	blt.w	80060a6 <_ZN15Screen1ViewBaseC1Ev+0x2b9e>
            return (int)(fs + 0.5f);
 8004e92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f00d fefd 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ea8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004eac:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8005188 <_ZN15Screen1ViewBaseC1Ev+0x1c80>
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ebc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	f2c1 8104 	blt.w	80060d0 <_ZN15Screen1ViewBaseC1Ev+0x2bc8>
            return (int)(fs + 0.5f);
 8004ec8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f00d fee2 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ede:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ee2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800518c <_ZN15Screen1ViewBaseC1Ev+0x1c84>
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ef2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	f2c1 80fe 	blt.w	80060fa <_ZN15Screen1ViewBaseC1Ev+0x2bf2>
            return (int)(fs + 0.5f);
 8004efe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f0a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f0e:	4628      	mov	r0, r5
 8004f10:	f00d fec7 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f14:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f18:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8005190 <_ZN15Screen1ViewBaseC1Ev+0x1c88>
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f24:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f30:	f2c1 80f8 	blt.w	8006124 <_ZN15Screen1ViewBaseC1Ev+0x2c1c>
            return (int)(fs + 0.5f);
 8004f34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f40:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f44:	4628      	mov	r0, r5
 8004f46:	f00d feac 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f4a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f4e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005194 <_ZN15Screen1ViewBaseC1Ev+0x1c8c>
 8004f52:	ee07 3a90 	vmov	s15, r3
 8004f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f66:	f2c1 80f2 	blt.w	800614e <_ZN15Screen1ViewBaseC1Ev+0x2c46>
            return (int)(fs + 0.5f);
 8004f6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f76:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f00d fe91 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f80:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f84:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8005198 <_ZN15Screen1ViewBaseC1Ev+0x1c90>
 8004f88:	ee07 3a90 	vmov	s15, r3
 8004f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f90:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9c:	f2c1 80ec 	blt.w	8006178 <_ZN15Screen1ViewBaseC1Ev+0x2c70>
            return (int)(fs + 0.5f);
 8004fa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f00d fe76 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fb6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fba:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800519c <_ZN15Screen1ViewBaseC1Ev+0x1c94>
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004fca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd2:	f2c1 80e6 	blt.w	80061a2 <_ZN15Screen1ViewBaseC1Ev+0x2c9a>
            return (int)(fs + 0.5f);
 8004fd6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f00d fe5b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fec:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ff0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80051a0 <_ZN15Screen1ViewBaseC1Ev+0x1c98>
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005000:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005008:	f2c1 80e0 	blt.w	80061cc <_ZN15Screen1ViewBaseC1Ev+0x2cc4>
            return (int)(fs + 0.5f);
 800500c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005010:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005018:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800501c:	4628      	mov	r0, r5
 800501e:	f00d fe40 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005022:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005026:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80051a4 <_ZN15Screen1ViewBaseC1Ev+0x1c9c>
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005032:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503e:	f2c1 80da 	blt.w	80061f6 <_ZN15Screen1ViewBaseC1Ev+0x2cee>
            return (int)(fs + 0.5f);
 8005042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800504a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800504e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005052:	4628      	mov	r0, r5
 8005054:	f00d fe25 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005058:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800505c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80051a8 <_ZN15Screen1ViewBaseC1Ev+0x1ca0>
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005068:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800506c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	f2c1 80d4 	blt.w	8006220 <_ZN15Screen1ViewBaseC1Ev+0x2d18>
            return (int)(fs + 0.5f);
 8005078:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800507c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005084:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005088:	4628      	mov	r0, r5
 800508a:	f00d fe0a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800508e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005092:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80051ac <_ZN15Screen1ViewBaseC1Ev+0x1ca4>
 8005096:	ee07 3a90 	vmov	s15, r3
 800509a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050aa:	f2c1 80ce 	blt.w	800624a <_ZN15Screen1ViewBaseC1Ev+0x2d42>
            return (int)(fs + 0.5f);
 80050ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050be:	4628      	mov	r0, r5
 80050c0:	f00d fdef 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050c4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050c8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80051b0 <_ZN15Screen1ViewBaseC1Ev+0x1ca8>
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e0:	f2c1 80c8 	blt.w	8006274 <_ZN15Screen1ViewBaseC1Ev+0x2d6c>
            return (int)(fs + 0.5f);
 80050e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050f0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050f4:	4628      	mov	r0, r5
 80050f6:	f00d fdd4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050fa:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050fe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80051b4 <_ZN15Screen1ViewBaseC1Ev+0x1cac>
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800510e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005116:	f2c1 80c2 	blt.w	800629e <_ZN15Screen1ViewBaseC1Ev+0x2d96>
            return (int)(fs + 0.5f);
 800511a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800511e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005126:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800512a:	4628      	mov	r0, r5
 800512c:	f00d fdb9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005130:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005134:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80051b8 <_ZN15Screen1ViewBaseC1Ev+0x1cb0>
 8005138:	ee07 3a90 	vmov	s15, r3
 800513c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005140:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514c:	f2c1 80bc 	blt.w	80062c8 <_ZN15Screen1ViewBaseC1Ev+0x2dc0>
            return (int)(fs + 0.5f);
 8005150:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800515c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005160:	4628      	mov	r0, r5
 8005162:	f00d fd9e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005166:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800516a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80051bc <_ZN15Screen1ViewBaseC1Ev+0x1cb4>
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	e039      	b.n	80051e8 <_ZN15Screen1ViewBaseC1Ev+0x1ce0>
 8005174:	42770644 	.word	0x42770644
 8005178:	426d8366 	.word	0x426d8366
 800517c:	42550015 	.word	0x42550015
 8005180:	42378204 	.word	0x42378204
 8005184:	42205953 	.word	0x42205953
 8005188:	421931ba 	.word	0x421931ba
 800518c:	42278b9a 	.word	0x42278b9a
 8005190:	424b3cd6 	.word	0x424b3cd6
 8005194:	427e5902 	.word	0x427e5902
 8005198:	429b43f0 	.word	0x429b43f0
 800519c:	42b3bbd9 	.word	0x42b3bbd9
 80051a0:	42c2e952 	.word	0x42c2e952
 80051a4:	42c4ff5a 	.word	0x42c4ff5a
 80051a8:	42b8fdf1 	.word	0x42b8fdf1
 80051ac:	42a0f5c4 	.word	0x42a0f5c4
 80051b0:	42818fa4 	.word	0x42818fa4
 80051b4:	4241ea06 	.word	0x4241ea06
 80051b8:	420aba88 	.word	0x420aba88
 80051bc:	41ce68b7 	.word	0x41ce68b7
 80051c0:	41b7f63b 	.word	0x41b7f63b
 80051c4:	41cf726c 	.word	0x41cf726c
 80051c8:	42039d1a 	.word	0x42039d1a
 80051cc:	42252ce4 	.word	0x42252ce4
 80051d0:	4240fc41 	.word	0x4240fc41
 80051d4:	424d990c 	.word	0x424d990c
 80051d8:	4245f650 	.word	0x4245f650
 80051dc:	422abce3 	.word	0x422abce3
 80051e0:	42022e5b 	.word	0x42022e5b
 80051e4:	41ad425b 	.word	0x41ad425b
 80051e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	f2c1 807b 	blt.w	80062f2 <_ZN15Screen1ViewBaseC1Ev+0x2dea>
            return (int)(fs + 0.5f);
 80051fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005204:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005208:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800520c:	4628      	mov	r0, r5
 800520e:	f00d fd48 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005212:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005216:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80051c0 <_ZN15Screen1ViewBaseC1Ev+0x1cb8>
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005222:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005226:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	f2c1 8075 	blt.w	800631c <_ZN15Screen1ViewBaseC1Ev+0x2e14>
            return (int)(fs + 0.5f);
 8005232:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005236:	ee77 7a87 	vadd.f32	s15, s15, s14
 800523a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800523e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005242:	4628      	mov	r0, r5
 8005244:	f00d fd2d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005248:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800524c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 80051c4 <_ZN15Screen1ViewBaseC1Ev+0x1cbc>
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005258:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800525c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005264:	f2c1 806f 	blt.w	8006346 <_ZN15Screen1ViewBaseC1Ev+0x2e3e>
            return (int)(fs + 0.5f);
 8005268:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800526c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005274:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005278:	4628      	mov	r0, r5
 800527a:	f00d fd12 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800527e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005282:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 80051c8 <_ZN15Screen1ViewBaseC1Ev+0x1cc0>
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800528e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	f2c1 8069 	blt.w	8006370 <_ZN15Screen1ViewBaseC1Ev+0x2e68>
            return (int)(fs + 0.5f);
 800529e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052aa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052ae:	4628      	mov	r0, r5
 80052b0:	f00d fcf7 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052b4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052b8:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80051cc <_ZN15Screen1ViewBaseC1Ev+0x1cc4>
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	f2c1 8063 	blt.w	800639a <_ZN15Screen1ViewBaseC1Ev+0x2e92>
            return (int)(fs + 0.5f);
 80052d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052e0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052e4:	4628      	mov	r0, r5
 80052e6:	f00d fcdc 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052ea:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052ee:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 80051d0 <_ZN15Screen1ViewBaseC1Ev+0x1cc8>
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052fa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005306:	f2c1 805d 	blt.w	80063c4 <_ZN15Screen1ViewBaseC1Ev+0x2ebc>
            return (int)(fs + 0.5f);
 800530a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800530e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005316:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800531a:	4628      	mov	r0, r5
 800531c:	f00d fcc1 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005320:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005324:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 80051d4 <_ZN15Screen1ViewBaseC1Ev+0x1ccc>
 8005328:	ee07 3a90 	vmov	s15, r3
 800532c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005330:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005334:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	f2c1 8057 	blt.w	80063ee <_ZN15Screen1ViewBaseC1Ev+0x2ee6>
            return (int)(fs + 0.5f);
 8005340:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800534c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005350:	4628      	mov	r0, r5
 8005352:	f00d fca6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005356:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800535a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80051d8 <_ZN15Screen1ViewBaseC1Ev+0x1cd0>
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005366:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800536a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800536e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005372:	f2c1 8051 	blt.w	8006418 <_ZN15Screen1ViewBaseC1Ev+0x2f10>
            return (int)(fs + 0.5f);
 8005376:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800537a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800537e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005382:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005386:	4628      	mov	r0, r5
 8005388:	f00d fc8b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800538c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005390:	ed1f 7a6e 	vldr	s14, [pc, #-440]	; 80051dc <_ZN15Screen1ViewBaseC1Ev+0x1cd4>
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800539c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	f2c1 804b 	blt.w	8006442 <_ZN15Screen1ViewBaseC1Ev+0x2f3a>
            return (int)(fs + 0.5f);
 80053ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053bc:	4628      	mov	r0, r5
 80053be:	f00d fc70 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053c2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80053c6:	ed1f 7a7a 	vldr	s14, [pc, #-488]	; 80051e0 <_ZN15Screen1ViewBaseC1Ev+0x1cd8>
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80053d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	f2c1 8045 	blt.w	800646c <_ZN15Screen1ViewBaseC1Ev+0x2f64>
            return (int)(fs + 0.5f);
 80053e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053f2:	4628      	mov	r0, r5
 80053f4:	f00d fc55 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053f8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80053fc:	ed1f 7a87 	vldr	s14, [pc, #-540]	; 80051e4 <_ZN15Screen1ViewBaseC1Ev+0x1cdc>
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005408:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800540c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	f2c1 803f 	blt.w	8006496 <_ZN15Screen1ViewBaseC1Ev+0x2f8e>
            return (int)(fs + 0.5f);
 8005418:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800541c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005424:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005428:	4628      	mov	r0, r5
 800542a:	f00d fc3a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 800542e:	4629      	mov	r1, r5
 8005430:	4638      	mov	r0, r7
 8005432:	f00b fd73 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(480, 268);
 8005436:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800543a:	9803      	ldr	r0, [sp, #12]
 800543c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005440:	f7fd ffb3 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
 8005444:	4638      	mov	r0, r7
 8005446:	9903      	ldr	r1, [sp, #12]
 8005448:	f00b fd68 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800544c:	4620      	mov	r0, r4
 800544e:	b00f      	add	sp, #60	; 0x3c
 8005450:	ecbd 8b10 	vpop	{d8-d15}
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005458:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800545c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005460:	ee17 3a10 	vmov	r3, s14
 8005464:	1e59      	subs	r1, r3, #1
 8005466:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800546a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005476:	ee17 3a90 	vmov	r3, s15
 800547a:	440b      	add	r3, r1
 800547c:	4619      	mov	r1, r3
 800547e:	f7fe bc92 	b.w	8003da6 <_ZN15Screen1ViewBaseC1Ev+0x89e>
 8005482:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005486:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800548a:	ee17 3a10 	vmov	r3, s14
 800548e:	1e59      	subs	r1, r3, #1
 8005490:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005494:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a0:	ee17 3a90 	vmov	r3, s15
 80054a4:	440b      	add	r3, r1
 80054a6:	4619      	mov	r1, r3
 80054a8:	f7fe bc98 	b.w	8003ddc <_ZN15Screen1ViewBaseC1Ev+0x8d4>
 80054ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80054b4:	ee17 3a10 	vmov	r3, s14
 80054b8:	1e59      	subs	r1, r3, #1
 80054ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054be:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ca:	ee17 3a90 	vmov	r3, s15
 80054ce:	440b      	add	r3, r1
 80054d0:	4619      	mov	r1, r3
 80054d2:	f7fe bc9e 	b.w	8003e12 <_ZN15Screen1ViewBaseC1Ev+0x90a>
 80054d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80054da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80054de:	ee17 3a10 	vmov	r3, s14
 80054e2:	1e59      	subs	r1, r3, #1
 80054e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80054e8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80054ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054f4:	ee17 3a90 	vmov	r3, s15
 80054f8:	440b      	add	r3, r1
 80054fa:	4619      	mov	r1, r3
 80054fc:	f7fe bca4 	b.w	8003e48 <_ZN15Screen1ViewBaseC1Ev+0x940>
 8005500:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005504:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005508:	ee17 3a10 	vmov	r3, s14
 800550c:	1e59      	subs	r1, r3, #1
 800550e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005512:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800551e:	ee17 3a90 	vmov	r3, s15
 8005522:	440b      	add	r3, r1
 8005524:	4619      	mov	r1, r3
 8005526:	f7fe bcaa 	b.w	8003e7e <_ZN15Screen1ViewBaseC1Ev+0x976>
 800552a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800552e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005532:	ee17 3a10 	vmov	r3, s14
 8005536:	1e59      	subs	r1, r3, #1
 8005538:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800553c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005548:	ee17 3a90 	vmov	r3, s15
 800554c:	440b      	add	r3, r1
 800554e:	4619      	mov	r1, r3
 8005550:	f7fe bcb0 	b.w	8003eb4 <_ZN15Screen1ViewBaseC1Ev+0x9ac>
 8005554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005558:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800555c:	ee17 3a10 	vmov	r3, s14
 8005560:	1e59      	subs	r1, r3, #1
 8005562:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005566:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005572:	ee17 3a90 	vmov	r3, s15
 8005576:	440b      	add	r3, r1
 8005578:	4619      	mov	r1, r3
 800557a:	f7fe bcb6 	b.w	8003eea <_ZN15Screen1ViewBaseC1Ev+0x9e2>
 800557e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005582:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005586:	ee17 3a10 	vmov	r3, s14
 800558a:	1e59      	subs	r1, r3, #1
 800558c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005590:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800559c:	ee17 3a90 	vmov	r3, s15
 80055a0:	440b      	add	r3, r1
 80055a2:	4619      	mov	r1, r3
 80055a4:	f7fe bcbc 	b.w	8003f20 <_ZN15Screen1ViewBaseC1Ev+0xa18>
 80055a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055b0:	ee17 3a10 	vmov	r3, s14
 80055b4:	1e59      	subs	r1, r3, #1
 80055b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055ba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80055be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055c6:	ee17 3a90 	vmov	r3, s15
 80055ca:	440b      	add	r3, r1
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fe bcc2 	b.w	8003f56 <_ZN15Screen1ViewBaseC1Ev+0xa4e>
 80055d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055da:	ee17 3a10 	vmov	r3, s14
 80055de:	1e59      	subs	r1, r3, #1
 80055e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80055e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f0:	ee17 3a90 	vmov	r3, s15
 80055f4:	440b      	add	r3, r1
 80055f6:	4619      	mov	r1, r3
 80055f8:	f7fe bcc8 	b.w	8003f8c <_ZN15Screen1ViewBaseC1Ev+0xa84>
 80055fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005600:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005604:	ee17 3a10 	vmov	r3, s14
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800560e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800561a:	ee17 3a90 	vmov	r3, s15
 800561e:	440b      	add	r3, r1
 8005620:	4619      	mov	r1, r3
 8005622:	f7fe bcce 	b.w	8003fc2 <_ZN15Screen1ViewBaseC1Ev+0xaba>
 8005626:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800562a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800562e:	ee17 3a10 	vmov	r3, s14
 8005632:	1e59      	subs	r1, r3, #1
 8005634:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005638:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800563c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005644:	ee17 3a90 	vmov	r3, s15
 8005648:	440b      	add	r3, r1
 800564a:	4619      	mov	r1, r3
 800564c:	f7fe bcd4 	b.w	8003ff8 <_ZN15Screen1ViewBaseC1Ev+0xaf0>
 8005650:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005654:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005658:	ee17 3a10 	vmov	r3, s14
 800565c:	1e59      	subs	r1, r3, #1
 800565e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005662:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800566a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800566e:	ee17 3a90 	vmov	r3, s15
 8005672:	440b      	add	r3, r1
 8005674:	4619      	mov	r1, r3
 8005676:	f7fe bcda 	b.w	800402e <_ZN15Screen1ViewBaseC1Ev+0xb26>
 800567a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800567e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005682:	ee17 3a10 	vmov	r3, s14
 8005686:	1e59      	subs	r1, r3, #1
 8005688:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800568c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005690:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005698:	ee17 3a90 	vmov	r3, s15
 800569c:	440b      	add	r3, r1
 800569e:	4619      	mov	r1, r3
 80056a0:	f7fe bce0 	b.w	8004064 <_ZN15Screen1ViewBaseC1Ev+0xb5c>
 80056a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056ac:	ee17 3a10 	vmov	r3, s14
 80056b0:	1e59      	subs	r1, r3, #1
 80056b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c2:	ee17 3a90 	vmov	r3, s15
 80056c6:	440b      	add	r3, r1
 80056c8:	4619      	mov	r1, r3
 80056ca:	f7fe bce6 	b.w	800409a <_ZN15Screen1ViewBaseC1Ev+0xb92>
 80056ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80056d6:	ee17 3a10 	vmov	r3, s14
 80056da:	1e59      	subs	r1, r3, #1
 80056dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80056e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80056e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056ec:	ee17 3a90 	vmov	r3, s15
 80056f0:	440b      	add	r3, r1
 80056f2:	4619      	mov	r1, r3
 80056f4:	f7fe bd36 	b.w	8004164 <_ZN15Screen1ViewBaseC1Ev+0xc5c>
 80056f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80056fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005700:	ee17 3a10 	vmov	r3, s14
 8005704:	1e59      	subs	r1, r3, #1
 8005706:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800570a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800570e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005712:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005716:	ee17 3a90 	vmov	r3, s15
 800571a:	440b      	add	r3, r1
 800571c:	4619      	mov	r1, r3
 800571e:	f7fe bd3c 	b.w	800419a <_ZN15Screen1ViewBaseC1Ev+0xc92>
 8005722:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005726:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800572a:	ee17 3a10 	vmov	r3, s14
 800572e:	1e59      	subs	r1, r3, #1
 8005730:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005734:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005738:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800573c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005740:	ee17 3a90 	vmov	r3, s15
 8005744:	440b      	add	r3, r1
 8005746:	4619      	mov	r1, r3
 8005748:	f7fe bd42 	b.w	80041d0 <_ZN15Screen1ViewBaseC1Ev+0xcc8>
 800574c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005750:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005754:	ee17 3a10 	vmov	r3, s14
 8005758:	1e59      	subs	r1, r3, #1
 800575a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800575e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800576a:	ee17 3a90 	vmov	r3, s15
 800576e:	440b      	add	r3, r1
 8005770:	4619      	mov	r1, r3
 8005772:	f7fe bd48 	b.w	8004206 <_ZN15Screen1ViewBaseC1Ev+0xcfe>
 8005776:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800577a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800577e:	ee17 3a10 	vmov	r3, s14
 8005782:	1e59      	subs	r1, r3, #1
 8005784:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005788:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800578c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005794:	ee17 3a90 	vmov	r3, s15
 8005798:	440b      	add	r3, r1
 800579a:	4619      	mov	r1, r3
 800579c:	f7fe bd4e 	b.w	800423c <_ZN15Screen1ViewBaseC1Ev+0xd34>
 80057a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057a8:	ee17 3a10 	vmov	r3, s14
 80057ac:	1e59      	subs	r1, r3, #1
 80057ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057be:	ee17 3a90 	vmov	r3, s15
 80057c2:	440b      	add	r3, r1
 80057c4:	4619      	mov	r1, r3
 80057c6:	f7fe bd54 	b.w	8004272 <_ZN15Screen1ViewBaseC1Ev+0xd6a>
 80057ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057d2:	ee17 3a10 	vmov	r3, s14
 80057d6:	1e59      	subs	r1, r3, #1
 80057d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057dc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80057e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057e8:	ee17 3a90 	vmov	r3, s15
 80057ec:	440b      	add	r3, r1
 80057ee:	4619      	mov	r1, r3
 80057f0:	f7fe bd5a 	b.w	80042a8 <_ZN15Screen1ViewBaseC1Ev+0xda0>
 80057f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80057f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80057fc:	ee17 3a10 	vmov	r3, s14
 8005800:	1e59      	subs	r1, r3, #1
 8005802:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005806:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800580a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005812:	ee17 3a90 	vmov	r3, s15
 8005816:	440b      	add	r3, r1
 8005818:	4619      	mov	r1, r3
 800581a:	f7fe bd60 	b.w	80042de <_ZN15Screen1ViewBaseC1Ev+0xdd6>
 800581e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005822:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005826:	ee17 3a10 	vmov	r3, s14
 800582a:	1e59      	subs	r1, r3, #1
 800582c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005830:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800583c:	ee17 3a90 	vmov	r3, s15
 8005840:	440b      	add	r3, r1
 8005842:	4619      	mov	r1, r3
 8005844:	f7fe bd66 	b.w	8004314 <_ZN15Screen1ViewBaseC1Ev+0xe0c>
 8005848:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800584c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005850:	ee17 3a10 	vmov	r3, s14
 8005854:	1e59      	subs	r1, r3, #1
 8005856:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800585a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800585e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005862:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005866:	ee17 3a90 	vmov	r3, s15
 800586a:	440b      	add	r3, r1
 800586c:	4619      	mov	r1, r3
 800586e:	f7fe bd6c 	b.w	800434a <_ZN15Screen1ViewBaseC1Ev+0xe42>
 8005872:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005876:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800587a:	ee17 3a10 	vmov	r3, s14
 800587e:	1e59      	subs	r1, r3, #1
 8005880:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005884:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800588c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005890:	ee17 3a90 	vmov	r3, s15
 8005894:	440b      	add	r3, r1
 8005896:	4619      	mov	r1, r3
 8005898:	f7fe bd72 	b.w	8004380 <_ZN15Screen1ViewBaseC1Ev+0xe78>
 800589c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058a4:	ee17 3a10 	vmov	r3, s14
 80058a8:	1e59      	subs	r1, r3, #1
 80058aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058ae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80058b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058ba:	ee17 3a90 	vmov	r3, s15
 80058be:	440b      	add	r3, r1
 80058c0:	4619      	mov	r1, r3
 80058c2:	f7fe bd78 	b.w	80043b6 <_ZN15Screen1ViewBaseC1Ev+0xeae>
 80058c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058ce:	ee17 3a10 	vmov	r3, s14
 80058d2:	1e59      	subs	r1, r3, #1
 80058d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058d8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80058dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058e4:	ee17 3a90 	vmov	r3, s15
 80058e8:	440b      	add	r3, r1
 80058ea:	4619      	mov	r1, r3
 80058ec:	f7fe bd7e 	b.w	80043ec <_ZN15Screen1ViewBaseC1Ev+0xee4>
 80058f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80058f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80058f8:	ee17 3a10 	vmov	r3, s14
 80058fc:	1e59      	subs	r1, r3, #1
 80058fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005902:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800590a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800590e:	ee17 3a90 	vmov	r3, s15
 8005912:	440b      	add	r3, r1
 8005914:	4619      	mov	r1, r3
 8005916:	f7fe bd84 	b.w	8004422 <_ZN15Screen1ViewBaseC1Ev+0xf1a>
 800591a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800591e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005922:	ee17 3a10 	vmov	r3, s14
 8005926:	1e59      	subs	r1, r3, #1
 8005928:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800592c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005938:	ee17 3a90 	vmov	r3, s15
 800593c:	440b      	add	r3, r1
 800593e:	4619      	mov	r1, r3
 8005940:	f7fe bd8a 	b.w	8004458 <_ZN15Screen1ViewBaseC1Ev+0xf50>
 8005944:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005948:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800594c:	ee17 3a10 	vmov	r3, s14
 8005950:	1e59      	subs	r1, r3, #1
 8005952:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005956:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800595a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800595e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005962:	ee17 3a90 	vmov	r3, s15
 8005966:	440b      	add	r3, r1
 8005968:	4619      	mov	r1, r3
 800596a:	f7fe bd90 	b.w	800448e <_ZN15Screen1ViewBaseC1Ev+0xf86>
 800596e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005972:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005976:	ee17 3a10 	vmov	r3, s14
 800597a:	1e59      	subs	r1, r3, #1
 800597c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005980:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800598c:	ee17 3a90 	vmov	r3, s15
 8005990:	440b      	add	r3, r1
 8005992:	4619      	mov	r1, r3
 8005994:	f7fe bd96 	b.w	80044c4 <_ZN15Screen1ViewBaseC1Ev+0xfbc>
 8005998:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800599c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059a0:	ee17 3a10 	vmov	r3, s14
 80059a4:	1e59      	subs	r1, r3, #1
 80059a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059aa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b6:	ee17 3a90 	vmov	r3, s15
 80059ba:	440b      	add	r3, r1
 80059bc:	4619      	mov	r1, r3
 80059be:	f7fe bd9c 	b.w	80044fa <_ZN15Screen1ViewBaseC1Ev+0xff2>
 80059c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059ca:	ee17 3a10 	vmov	r3, s14
 80059ce:	1e59      	subs	r1, r3, #1
 80059d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059d4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80059d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e0:	ee17 3a90 	vmov	r3, s15
 80059e4:	440b      	add	r3, r1
 80059e6:	4619      	mov	r1, r3
 80059e8:	f7fe bda2 	b.w	8004530 <_ZN15Screen1ViewBaseC1Ev+0x1028>
 80059ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80059f4:	ee17 3a10 	vmov	r3, s14
 80059f8:	1e59      	subs	r1, r3, #1
 80059fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80059fe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a0a:	ee17 3a90 	vmov	r3, s15
 8005a0e:	440b      	add	r3, r1
 8005a10:	4619      	mov	r1, r3
 8005a12:	f7fe bda8 	b.w	8004566 <_ZN15Screen1ViewBaseC1Ev+0x105e>
 8005a16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a1a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a1e:	ee17 3a10 	vmov	r3, s14
 8005a22:	1e59      	subs	r1, r3, #1
 8005a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a28:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a34:	ee17 3a90 	vmov	r3, s15
 8005a38:	440b      	add	r3, r1
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	f7fe bdae 	b.w	800459c <_ZN15Screen1ViewBaseC1Ev+0x1094>
 8005a40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a48:	ee17 3a10 	vmov	r3, s14
 8005a4c:	1e59      	subs	r1, r3, #1
 8005a4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a52:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a5e:	ee17 3a90 	vmov	r3, s15
 8005a62:	440b      	add	r3, r1
 8005a64:	4619      	mov	r1, r3
 8005a66:	f7fe bdb4 	b.w	80045d2 <_ZN15Screen1ViewBaseC1Ev+0x10ca>
 8005a6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a6e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a72:	ee17 3a10 	vmov	r3, s14
 8005a76:	1e59      	subs	r1, r3, #1
 8005a78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a7c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a88:	ee17 3a90 	vmov	r3, s15
 8005a8c:	440b      	add	r3, r1
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f7fe bdba 	b.w	8004608 <_ZN15Screen1ViewBaseC1Ev+0x1100>
 8005a94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a98:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005a9c:	ee17 3a10 	vmov	r3, s14
 8005aa0:	1e59      	subs	r1, r3, #1
 8005aa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005aa6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ab2:	ee17 3a90 	vmov	r3, s15
 8005ab6:	440b      	add	r3, r1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fe bdc0 	b.w	800463e <_ZN15Screen1ViewBaseC1Ev+0x1136>
 8005abe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ac2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ac6:	ee17 3a10 	vmov	r3, s14
 8005aca:	1e59      	subs	r1, r3, #1
 8005acc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ad0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005adc:	ee17 3a90 	vmov	r3, s15
 8005ae0:	440b      	add	r3, r1
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7fe bdc6 	b.w	8004674 <_ZN15Screen1ViewBaseC1Ev+0x116c>
 8005ae8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005aec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005af0:	ee17 3a10 	vmov	r3, s14
 8005af4:	1e59      	subs	r1, r3, #1
 8005af6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005afa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b06:	ee17 3a90 	vmov	r3, s15
 8005b0a:	440b      	add	r3, r1
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f7fe bdcc 	b.w	80046aa <_ZN15Screen1ViewBaseC1Ev+0x11a2>
 8005b12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b1a:	ee17 3a10 	vmov	r3, s14
 8005b1e:	1e59      	subs	r1, r3, #1
 8005b20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b24:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b30:	ee17 3a90 	vmov	r3, s15
 8005b34:	440b      	add	r3, r1
 8005b36:	4619      	mov	r1, r3
 8005b38:	f7fe bdd2 	b.w	80046e0 <_ZN15Screen1ViewBaseC1Ev+0x11d8>
 8005b3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b44:	ee17 3a10 	vmov	r3, s14
 8005b48:	1e59      	subs	r1, r3, #1
 8005b4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b4e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b5a:	ee17 3a90 	vmov	r3, s15
 8005b5e:	440b      	add	r3, r1
 8005b60:	4619      	mov	r1, r3
 8005b62:	f7fe bdd8 	b.w	8004716 <_ZN15Screen1ViewBaseC1Ev+0x120e>
 8005b66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b6e:	ee17 3a10 	vmov	r3, s14
 8005b72:	1e59      	subs	r1, r3, #1
 8005b74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b78:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b84:	ee17 3a90 	vmov	r3, s15
 8005b88:	440b      	add	r3, r1
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f7fe bdde 	b.w	800474c <_ZN15Screen1ViewBaseC1Ev+0x1244>
 8005b90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005b98:	ee17 3a10 	vmov	r3, s14
 8005b9c:	1e59      	subs	r1, r3, #1
 8005b9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ba2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bae:	ee17 3a90 	vmov	r3, s15
 8005bb2:	440b      	add	r3, r1
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f7fe bde4 	b.w	8004782 <_ZN15Screen1ViewBaseC1Ev+0x127a>
 8005bba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bbe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005bc2:	ee17 3a10 	vmov	r3, s14
 8005bc6:	1e59      	subs	r1, r3, #1
 8005bc8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bcc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bd8:	ee17 3a90 	vmov	r3, s15
 8005bdc:	440b      	add	r3, r1
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fe bdea 	b.w	80047b8 <_ZN15Screen1ViewBaseC1Ev+0x12b0>
 8005be4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005be8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005bec:	ee17 3a10 	vmov	r3, s14
 8005bf0:	1e59      	subs	r1, r3, #1
 8005bf2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005bf6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c02:	ee17 3a90 	vmov	r3, s15
 8005c06:	440b      	add	r3, r1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f7fe bdf0 	b.w	80047ee <_ZN15Screen1ViewBaseC1Ev+0x12e6>
 8005c0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c16:	ee17 3a10 	vmov	r3, s14
 8005c1a:	1e59      	subs	r1, r3, #1
 8005c1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c20:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c2c:	ee17 3a90 	vmov	r3, s15
 8005c30:	440b      	add	r3, r1
 8005c32:	4619      	mov	r1, r3
 8005c34:	f7fe bdf6 	b.w	8004824 <_ZN15Screen1ViewBaseC1Ev+0x131c>
 8005c38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c3c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c40:	ee17 3a10 	vmov	r3, s14
 8005c44:	1e59      	subs	r1, r3, #1
 8005c46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c4a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c56:	ee17 3a90 	vmov	r3, s15
 8005c5a:	440b      	add	r3, r1
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	f7fe bdfc 	b.w	800485a <_ZN15Screen1ViewBaseC1Ev+0x1352>
 8005c62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c6a:	ee17 3a10 	vmov	r3, s14
 8005c6e:	1e59      	subs	r1, r3, #1
 8005c70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c74:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c80:	ee17 3a90 	vmov	r3, s15
 8005c84:	440b      	add	r3, r1
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7fe be02 	b.w	8004890 <_ZN15Screen1ViewBaseC1Ev+0x1388>
 8005c8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005c90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005c94:	ee17 3a10 	vmov	r3, s14
 8005c98:	1e59      	subs	r1, r3, #1
 8005c9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005c9e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005caa:	ee17 3a90 	vmov	r3, s15
 8005cae:	440b      	add	r3, r1
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f7fe be08 	b.w	80048c6 <_ZN15Screen1ViewBaseC1Ev+0x13be>
 8005cb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005cba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005cbe:	ee17 3a10 	vmov	r3, s14
 8005cc2:	1e59      	subs	r1, r3, #1
 8005cc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cc8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cd4:	ee17 3a90 	vmov	r3, s15
 8005cd8:	440b      	add	r3, r1
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f7fe be0e 	b.w	80048fc <_ZN15Screen1ViewBaseC1Ev+0x13f4>
 8005ce0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ce4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ce8:	ee17 3a10 	vmov	r3, s14
 8005cec:	1e59      	subs	r1, r3, #1
 8005cee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cf2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cfe:	ee17 3a90 	vmov	r3, s15
 8005d02:	440b      	add	r3, r1
 8005d04:	4619      	mov	r1, r3
 8005d06:	f7fe be5f 	b.w	80049c8 <_ZN15Screen1ViewBaseC1Ev+0x14c0>
 8005d0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d12:	ee17 3a10 	vmov	r3, s14
 8005d16:	1e59      	subs	r1, r3, #1
 8005d18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d1c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d28:	ee17 3a90 	vmov	r3, s15
 8005d2c:	440b      	add	r3, r1
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7fe be65 	b.w	80049fe <_ZN15Screen1ViewBaseC1Ev+0x14f6>
 8005d34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d3c:	ee17 3a10 	vmov	r3, s14
 8005d40:	1e59      	subs	r1, r3, #1
 8005d42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d46:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d52:	ee17 3a90 	vmov	r3, s15
 8005d56:	440b      	add	r3, r1
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f7fe be6b 	b.w	8004a34 <_ZN15Screen1ViewBaseC1Ev+0x152c>
 8005d5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d62:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d66:	ee17 3a10 	vmov	r3, s14
 8005d6a:	1e59      	subs	r1, r3, #1
 8005d6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d70:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d7c:	ee17 3a90 	vmov	r3, s15
 8005d80:	440b      	add	r3, r1
 8005d82:	4619      	mov	r1, r3
 8005d84:	f7fe be71 	b.w	8004a6a <_ZN15Screen1ViewBaseC1Ev+0x1562>
 8005d88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005d8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005d90:	ee17 3a10 	vmov	r3, s14
 8005d94:	1e59      	subs	r1, r3, #1
 8005d96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d9a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005da6:	ee17 3a90 	vmov	r3, s15
 8005daa:	440b      	add	r3, r1
 8005dac:	4619      	mov	r1, r3
 8005dae:	f7fe be77 	b.w	8004aa0 <_ZN15Screen1ViewBaseC1Ev+0x1598>
 8005db2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005db6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005dba:	ee17 3a10 	vmov	r3, s14
 8005dbe:	1e59      	subs	r1, r3, #1
 8005dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005dc4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd0:	ee17 3a90 	vmov	r3, s15
 8005dd4:	440b      	add	r3, r1
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	f7fe be7d 	b.w	8004ad6 <_ZN15Screen1ViewBaseC1Ev+0x15ce>
 8005ddc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005de0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005de4:	ee17 3a10 	vmov	r3, s14
 8005de8:	1e59      	subs	r1, r3, #1
 8005dea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005dee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dfa:	ee17 3a90 	vmov	r3, s15
 8005dfe:	440b      	add	r3, r1
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fe be83 	b.w	8004b0c <_ZN15Screen1ViewBaseC1Ev+0x1604>
 8005e06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e0a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e0e:	ee17 3a10 	vmov	r3, s14
 8005e12:	1e59      	subs	r1, r3, #1
 8005e14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e18:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e24:	ee17 3a90 	vmov	r3, s15
 8005e28:	440b      	add	r3, r1
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f7fe be89 	b.w	8004b42 <_ZN15Screen1ViewBaseC1Ev+0x163a>
 8005e30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e38:	ee17 3a10 	vmov	r3, s14
 8005e3c:	1e59      	subs	r1, r3, #1
 8005e3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e42:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e4e:	ee17 3a90 	vmov	r3, s15
 8005e52:	440b      	add	r3, r1
 8005e54:	4619      	mov	r1, r3
 8005e56:	f7fe be8f 	b.w	8004b78 <_ZN15Screen1ViewBaseC1Ev+0x1670>
 8005e5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e62:	ee17 3a10 	vmov	r3, s14
 8005e66:	1e59      	subs	r1, r3, #1
 8005e68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e6c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	440b      	add	r3, r1
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f7fe be95 	b.w	8004bae <_ZN15Screen1ViewBaseC1Ev+0x16a6>
 8005e84:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005e88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e8c:	ee17 3a10 	vmov	r3, s14
 8005e90:	1e59      	subs	r1, r3, #1
 8005e92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e96:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ea2:	ee17 3a90 	vmov	r3, s15
 8005ea6:	440b      	add	r3, r1
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fe be9b 	b.w	8004be4 <_ZN15Screen1ViewBaseC1Ev+0x16dc>
 8005eae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005eb2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005eb6:	ee17 3a10 	vmov	r3, s14
 8005eba:	1e59      	subs	r1, r3, #1
 8005ebc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005ec0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ecc:	ee17 3a90 	vmov	r3, s15
 8005ed0:	440b      	add	r3, r1
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7fe bea1 	b.w	8004c1a <_ZN15Screen1ViewBaseC1Ev+0x1712>
 8005ed8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005edc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005ee0:	ee17 3a10 	vmov	r3, s14
 8005ee4:	1e59      	subs	r1, r3, #1
 8005ee6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005eea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ef6:	ee17 3a90 	vmov	r3, s15
 8005efa:	440b      	add	r3, r1
 8005efc:	4619      	mov	r1, r3
 8005efe:	f7fe bea7 	b.w	8004c50 <_ZN15Screen1ViewBaseC1Ev+0x1748>
 8005f02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f0a:	ee17 3a10 	vmov	r3, s14
 8005f0e:	1e59      	subs	r1, r3, #1
 8005f10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f14:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f20:	ee17 3a90 	vmov	r3, s15
 8005f24:	440b      	add	r3, r1
 8005f26:	4619      	mov	r1, r3
 8005f28:	f7fe bead 	b.w	8004c86 <_ZN15Screen1ViewBaseC1Ev+0x177e>
 8005f2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f30:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f34:	ee17 3a10 	vmov	r3, s14
 8005f38:	1e59      	subs	r1, r3, #1
 8005f3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f3e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f4a:	ee17 3a90 	vmov	r3, s15
 8005f4e:	440b      	add	r3, r1
 8005f50:	4619      	mov	r1, r3
 8005f52:	f7fe beb3 	b.w	8004cbc <_ZN15Screen1ViewBaseC1Ev+0x17b4>
 8005f56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f5e:	ee17 3a10 	vmov	r3, s14
 8005f62:	1e59      	subs	r1, r3, #1
 8005f64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f68:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f74:	ee17 3a90 	vmov	r3, s15
 8005f78:	440b      	add	r3, r1
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f7fe beb9 	b.w	8004cf2 <_ZN15Screen1ViewBaseC1Ev+0x17ea>
 8005f80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005f84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005f88:	ee17 3a10 	vmov	r3, s14
 8005f8c:	1e59      	subs	r1, r3, #1
 8005f8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f92:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f9e:	ee17 3a90 	vmov	r3, s15
 8005fa2:	440b      	add	r3, r1
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	f7fe bebf 	b.w	8004d28 <_ZN15Screen1ViewBaseC1Ev+0x1820>
 8005faa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fb2:	ee17 3a10 	vmov	r3, s14
 8005fb6:	1e59      	subs	r1, r3, #1
 8005fb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fbc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fc8:	ee17 3a90 	vmov	r3, s15
 8005fcc:	440b      	add	r3, r1
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f7fe bec5 	b.w	8004d5e <_ZN15Screen1ViewBaseC1Ev+0x1856>
 8005fd4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005fd8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005fdc:	ee17 3a10 	vmov	r3, s14
 8005fe0:	1e59      	subs	r1, r3, #1
 8005fe2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005fe6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ff2:	ee17 3a90 	vmov	r3, s15
 8005ff6:	440b      	add	r3, r1
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	f7fe becb 	b.w	8004d94 <_ZN15Screen1ViewBaseC1Ev+0x188c>
 8005ffe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006002:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006006:	ee17 3a10 	vmov	r3, s14
 800600a:	1e59      	subs	r1, r3, #1
 800600c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006010:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800601c:	ee17 3a90 	vmov	r3, s15
 8006020:	440b      	add	r3, r1
 8006022:	4619      	mov	r1, r3
 8006024:	f7fe bed1 	b.w	8004dca <_ZN15Screen1ViewBaseC1Ev+0x18c2>
 8006028:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800602c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006030:	ee17 3a10 	vmov	r3, s14
 8006034:	1e59      	subs	r1, r3, #1
 8006036:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800603a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006046:	ee17 3a90 	vmov	r3, s15
 800604a:	440b      	add	r3, r1
 800604c:	4619      	mov	r1, r3
 800604e:	f7fe bed7 	b.w	8004e00 <_ZN15Screen1ViewBaseC1Ev+0x18f8>
 8006052:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006056:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800605a:	ee17 3a10 	vmov	r3, s14
 800605e:	1e59      	subs	r1, r3, #1
 8006060:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006064:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006070:	ee17 3a90 	vmov	r3, s15
 8006074:	440b      	add	r3, r1
 8006076:	4619      	mov	r1, r3
 8006078:	f7fe bedd 	b.w	8004e36 <_ZN15Screen1ViewBaseC1Ev+0x192e>
 800607c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006080:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006084:	ee17 3a10 	vmov	r3, s14
 8006088:	1e59      	subs	r1, r3, #1
 800608a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800608e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800609a:	ee17 3a90 	vmov	r3, s15
 800609e:	440b      	add	r3, r1
 80060a0:	4619      	mov	r1, r3
 80060a2:	f7fe bee3 	b.w	8004e6c <_ZN15Screen1ViewBaseC1Ev+0x1964>
 80060a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060aa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060ae:	ee17 3a10 	vmov	r3, s14
 80060b2:	1e59      	subs	r1, r3, #1
 80060b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060b8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80060bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060c4:	ee17 3a90 	vmov	r3, s15
 80060c8:	440b      	add	r3, r1
 80060ca:	4619      	mov	r1, r3
 80060cc:	f7fe bee9 	b.w	8004ea2 <_ZN15Screen1ViewBaseC1Ev+0x199a>
 80060d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80060d8:	ee17 3a10 	vmov	r3, s14
 80060dc:	1e59      	subs	r1, r3, #1
 80060de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060e2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ee:	ee17 3a90 	vmov	r3, s15
 80060f2:	440b      	add	r3, r1
 80060f4:	4619      	mov	r1, r3
 80060f6:	f7fe beef 	b.w	8004ed8 <_ZN15Screen1ViewBaseC1Ev+0x19d0>
 80060fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80060fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006102:	ee17 3a10 	vmov	r3, s14
 8006106:	1e59      	subs	r1, r3, #1
 8006108:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800610c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006118:	ee17 3a90 	vmov	r3, s15
 800611c:	440b      	add	r3, r1
 800611e:	4619      	mov	r1, r3
 8006120:	f7fe bef5 	b.w	8004f0e <_ZN15Screen1ViewBaseC1Ev+0x1a06>
 8006124:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006128:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800612c:	ee17 3a10 	vmov	r3, s14
 8006130:	1e59      	subs	r1, r3, #1
 8006132:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006136:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006142:	ee17 3a90 	vmov	r3, s15
 8006146:	440b      	add	r3, r1
 8006148:	4619      	mov	r1, r3
 800614a:	f7fe befb 	b.w	8004f44 <_ZN15Screen1ViewBaseC1Ev+0x1a3c>
 800614e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006152:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006156:	ee17 3a10 	vmov	r3, s14
 800615a:	1e59      	subs	r1, r3, #1
 800615c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006160:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006164:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800616c:	ee17 3a90 	vmov	r3, s15
 8006170:	440b      	add	r3, r1
 8006172:	4619      	mov	r1, r3
 8006174:	f7fe bf01 	b.w	8004f7a <_ZN15Screen1ViewBaseC1Ev+0x1a72>
 8006178:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800617c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006180:	ee17 3a10 	vmov	r3, s14
 8006184:	1e59      	subs	r1, r3, #1
 8006186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800618a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800618e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006196:	ee17 3a90 	vmov	r3, s15
 800619a:	440b      	add	r3, r1
 800619c:	4619      	mov	r1, r3
 800619e:	f7fe bf07 	b.w	8004fb0 <_ZN15Screen1ViewBaseC1Ev+0x1aa8>
 80061a2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061a6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061aa:	ee17 3a10 	vmov	r3, s14
 80061ae:	1e59      	subs	r1, r3, #1
 80061b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061b4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061c0:	ee17 3a90 	vmov	r3, s15
 80061c4:	440b      	add	r3, r1
 80061c6:	4619      	mov	r1, r3
 80061c8:	f7fe bf0d 	b.w	8004fe6 <_ZN15Screen1ViewBaseC1Ev+0x1ade>
 80061cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061d0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061d4:	ee17 3a10 	vmov	r3, s14
 80061d8:	1e59      	subs	r1, r3, #1
 80061da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061de:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ea:	ee17 3a90 	vmov	r3, s15
 80061ee:	440b      	add	r3, r1
 80061f0:	4619      	mov	r1, r3
 80061f2:	f7fe bf13 	b.w	800501c <_ZN15Screen1ViewBaseC1Ev+0x1b14>
 80061f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061fa:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061fe:	ee17 3a10 	vmov	r3, s14
 8006202:	1e59      	subs	r1, r3, #1
 8006204:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006208:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800620c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006214:	ee17 3a90 	vmov	r3, s15
 8006218:	440b      	add	r3, r1
 800621a:	4619      	mov	r1, r3
 800621c:	f7fe bf19 	b.w	8005052 <_ZN15Screen1ViewBaseC1Ev+0x1b4a>
 8006220:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006224:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006228:	ee17 3a10 	vmov	r3, s14
 800622c:	1e59      	subs	r1, r3, #1
 800622e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006232:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800623a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800623e:	ee17 3a90 	vmov	r3, s15
 8006242:	440b      	add	r3, r1
 8006244:	4619      	mov	r1, r3
 8006246:	f7fe bf1f 	b.w	8005088 <_ZN15Screen1ViewBaseC1Ev+0x1b80>
 800624a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800624e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006252:	ee17 3a10 	vmov	r3, s14
 8006256:	1e59      	subs	r1, r3, #1
 8006258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800625c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006268:	ee17 3a90 	vmov	r3, s15
 800626c:	440b      	add	r3, r1
 800626e:	4619      	mov	r1, r3
 8006270:	f7fe bf25 	b.w	80050be <_ZN15Screen1ViewBaseC1Ev+0x1bb6>
 8006274:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006278:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800627c:	ee17 3a10 	vmov	r3, s14
 8006280:	1e59      	subs	r1, r3, #1
 8006282:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006286:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006292:	ee17 3a90 	vmov	r3, s15
 8006296:	440b      	add	r3, r1
 8006298:	4619      	mov	r1, r3
 800629a:	f7fe bf2b 	b.w	80050f4 <_ZN15Screen1ViewBaseC1Ev+0x1bec>
 800629e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062a2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062a6:	ee17 3a10 	vmov	r3, s14
 80062aa:	1e59      	subs	r1, r3, #1
 80062ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062b0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062bc:	ee17 3a90 	vmov	r3, s15
 80062c0:	440b      	add	r3, r1
 80062c2:	4619      	mov	r1, r3
 80062c4:	f7fe bf31 	b.w	800512a <_ZN15Screen1ViewBaseC1Ev+0x1c22>
 80062c8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062cc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062d0:	ee17 3a10 	vmov	r3, s14
 80062d4:	1e59      	subs	r1, r3, #1
 80062d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062da:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062e6:	ee17 3a90 	vmov	r3, s15
 80062ea:	440b      	add	r3, r1
 80062ec:	4619      	mov	r1, r3
 80062ee:	f7fe bf37 	b.w	8005160 <_ZN15Screen1ViewBaseC1Ev+0x1c58>
 80062f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062f6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062fa:	ee17 3a10 	vmov	r3, s14
 80062fe:	1e59      	subs	r1, r3, #1
 8006300:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006304:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006310:	ee17 3a90 	vmov	r3, s15
 8006314:	440b      	add	r3, r1
 8006316:	4619      	mov	r1, r3
 8006318:	f7fe bf78 	b.w	800520c <_ZN15Screen1ViewBaseC1Ev+0x1d04>
 800631c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006320:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006324:	ee17 3a10 	vmov	r3, s14
 8006328:	1e59      	subs	r1, r3, #1
 800632a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800632e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800633a:	ee17 3a90 	vmov	r3, s15
 800633e:	440b      	add	r3, r1
 8006340:	4619      	mov	r1, r3
 8006342:	f7fe bf7e 	b.w	8005242 <_ZN15Screen1ViewBaseC1Ev+0x1d3a>
 8006346:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800634a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800634e:	ee17 3a10 	vmov	r3, s14
 8006352:	1e59      	subs	r1, r3, #1
 8006354:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006358:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800635c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006364:	ee17 3a90 	vmov	r3, s15
 8006368:	440b      	add	r3, r1
 800636a:	4619      	mov	r1, r3
 800636c:	f7fe bf84 	b.w	8005278 <_ZN15Screen1ViewBaseC1Ev+0x1d70>
 8006370:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006374:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006378:	ee17 3a10 	vmov	r3, s14
 800637c:	1e59      	subs	r1, r3, #1
 800637e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006382:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800638e:	ee17 3a90 	vmov	r3, s15
 8006392:	440b      	add	r3, r1
 8006394:	4619      	mov	r1, r3
 8006396:	f7fe bf8a 	b.w	80052ae <_ZN15Screen1ViewBaseC1Ev+0x1da6>
 800639a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800639e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063a2:	ee17 3a10 	vmov	r3, s14
 80063a6:	1e59      	subs	r1, r3, #1
 80063a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063ac:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063b8:	ee17 3a90 	vmov	r3, s15
 80063bc:	440b      	add	r3, r1
 80063be:	4619      	mov	r1, r3
 80063c0:	f7fe bf90 	b.w	80052e4 <_ZN15Screen1ViewBaseC1Ev+0x1ddc>
 80063c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063c8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063cc:	ee17 3a10 	vmov	r3, s14
 80063d0:	1e59      	subs	r1, r3, #1
 80063d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063d6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063e2:	ee17 3a90 	vmov	r3, s15
 80063e6:	440b      	add	r3, r1
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fe bf96 	b.w	800531a <_ZN15Screen1ViewBaseC1Ev+0x1e12>
 80063ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063f6:	ee17 3a10 	vmov	r3, s14
 80063fa:	1e59      	subs	r1, r3, #1
 80063fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006400:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800640c:	ee17 3a90 	vmov	r3, s15
 8006410:	440b      	add	r3, r1
 8006412:	4619      	mov	r1, r3
 8006414:	f7fe bf9c 	b.w	8005350 <_ZN15Screen1ViewBaseC1Ev+0x1e48>
 8006418:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800641c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006420:	ee17 3a10 	vmov	r3, s14
 8006424:	1e59      	subs	r1, r3, #1
 8006426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800642a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006436:	ee17 3a90 	vmov	r3, s15
 800643a:	440b      	add	r3, r1
 800643c:	4619      	mov	r1, r3
 800643e:	f7fe bfa2 	b.w	8005386 <_ZN15Screen1ViewBaseC1Ev+0x1e7e>
 8006442:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006446:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800644a:	ee17 3a10 	vmov	r3, s14
 800644e:	1e59      	subs	r1, r3, #1
 8006450:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006454:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006460:	ee17 3a90 	vmov	r3, s15
 8006464:	440b      	add	r3, r1
 8006466:	4619      	mov	r1, r3
 8006468:	f7fe bfa8 	b.w	80053bc <_ZN15Screen1ViewBaseC1Ev+0x1eb4>
 800646c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006470:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006474:	ee17 3a10 	vmov	r3, s14
 8006478:	1e59      	subs	r1, r3, #1
 800647a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800647e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800648a:	ee17 3a90 	vmov	r3, s15
 800648e:	440b      	add	r3, r1
 8006490:	4619      	mov	r1, r3
 8006492:	f7fe bfae 	b.w	80053f2 <_ZN15Screen1ViewBaseC1Ev+0x1eea>
 8006496:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800649a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800649e:	ee17 3a10 	vmov	r3, s14
 80064a2:	1e59      	subs	r1, r3, #1
 80064a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064a8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064b4:	ee17 3a90 	vmov	r3, s15
 80064b8:	440b      	add	r3, r1
 80064ba:	4619      	mov	r1, r3
 80064bc:	f7fe bfb4 	b.w	8005428 <_ZN15Screen1ViewBaseC1Ev+0x1f20>

080064c0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064c0:	4770      	bx	lr
	...

080064c4 <_Z23getFont_verdana_10_4bppv>:
{
 80064c4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064c6:	4d16      	ldr	r5, [pc, #88]	; (8006520 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80064c8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80064ca:	782c      	ldrb	r4, [r5, #0]
 80064cc:	f3bf 8f5b 	dmb	ish
 80064d0:	f014 0401 	ands.w	r4, r4, #1
 80064d4:	d120      	bne.n	8006518 <_Z23getFont_verdana_10_4bppv+0x54>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f01b fb23 	bl	8021b22 <__cxa_guard_acquire>
 80064dc:	b1e0      	cbz	r0, 8006518 <_Z23getFont_verdana_10_4bppv+0x54>
 80064de:	233f      	movs	r3, #63	; 0x3f
 80064e0:	2201      	movs	r2, #1
 80064e2:	4910      	ldr	r1, [pc, #64]	; (8006524 <_Z23getFont_verdana_10_4bppv+0x60>)
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
 80064e6:	4b10      	ldr	r3, [pc, #64]	; (8006528 <_Z23getFont_verdana_10_4bppv+0x64>)
 80064e8:	4810      	ldr	r0, [pc, #64]	; (800652c <_Z23getFont_verdana_10_4bppv+0x68>)
 80064ea:	9308      	str	r3, [sp, #32]
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80064ee:	940a      	str	r4, [sp, #40]	; 0x28
 80064f0:	9405      	str	r4, [sp, #20]
 80064f2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80064f6:	2304      	movs	r3, #4
 80064f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80064fc:	230a      	movs	r3, #10
 80064fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8006508:	f7fc fab4 	bl	8002a74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <_Z23getFont_verdana_10_4bppv+0x70>)
 800650e:	f01b fc31 	bl	8021d74 <atexit>
 8006512:	4628      	mov	r0, r5
 8006514:	f01b fb11 	bl	8021b3a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8006518:	4804      	ldr	r0, [pc, #16]	; (800652c <_Z23getFont_verdana_10_4bppv+0x68>)
 800651a:	b00f      	add	sp, #60	; 0x3c
 800651c:	bd30      	pop	{r4, r5, pc}
 800651e:	bf00      	nop
 8006520:	2400501c 	.word	0x2400501c
 8006524:	08025a08 	.word	0x08025a08
 8006528:	08025bd8 	.word	0x08025bd8
 800652c:	24005020 	.word	0x24005020
 8006530:	08025c0c 	.word	0x08025c0c
 8006534:	080064c1 	.word	0x080064c1

08006538 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 30, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8006538:	4770      	bx	lr
	...

0800653c <_Z23getFont_verdana_16_4bppv>:
{
 800653c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 30, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 800653e:	4d17      	ldr	r5, [pc, #92]	; (800659c <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8006540:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 30, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8006542:	782c      	ldrb	r4, [r5, #0]
 8006544:	f3bf 8f5b 	dmb	ish
 8006548:	f014 0401 	ands.w	r4, r4, #1
 800654c:	d122      	bne.n	8006594 <_Z23getFont_verdana_16_4bppv+0x58>
 800654e:	4628      	mov	r0, r5
 8006550:	f01b fae7 	bl	8021b22 <__cxa_guard_acquire>
 8006554:	b1f0      	cbz	r0, 8006594 <_Z23getFont_verdana_16_4bppv+0x58>
 8006556:	233f      	movs	r3, #63	; 0x3f
 8006558:	221e      	movs	r2, #30
 800655a:	4911      	ldr	r1, [pc, #68]	; (80065a0 <_Z23getFont_verdana_16_4bppv+0x64>)
 800655c:	9309      	str	r3, [sp, #36]	; 0x24
 800655e:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <_Z23getFont_verdana_16_4bppv+0x68>)
 8006560:	4811      	ldr	r0, [pc, #68]	; (80065a8 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	4b11      	ldr	r3, [pc, #68]	; (80065ac <_Z23getFont_verdana_16_4bppv+0x70>)
 8006566:	940a      	str	r4, [sp, #40]	; 0x28
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	2301      	movs	r3, #1
 800656c:	9401      	str	r4, [sp, #4]
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8006574:	2304      	movs	r3, #4
 8006576:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800657a:	2310      	movs	r3, #16
 800657c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006580:	9300      	str	r3, [sp, #0]
 8006582:	2313      	movs	r3, #19
 8006584:	f7fc fa76 	bl	8002a74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006588:	4809      	ldr	r0, [pc, #36]	; (80065b0 <_Z23getFont_verdana_16_4bppv+0x74>)
 800658a:	f01b fbf3 	bl	8021d74 <atexit>
 800658e:	4628      	mov	r0, r5
 8006590:	f01b fad3 	bl	8021b3a <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8006594:	4804      	ldr	r0, [pc, #16]	; (80065a8 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8006596:	b00f      	add	sp, #60	; 0x3c
 8006598:	bd30      	pop	{r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	2400504c 	.word	0x2400504c
 80065a0:	08025a18 	.word	0x08025a18
 80065a4:	08025bdc 	.word	0x08025bdc
 80065a8:	24005050 	.word	0x24005050
 80065ac:	08025c10 	.word	0x08025c10
 80065b0:	08006539 	.word	0x08006539

080065b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065b4:	4770      	bx	lr
	...

080065b8 <_Z23getFont_verdana_40_4bppv>:
{
 80065b8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065ba:	4d16      	ldr	r5, [pc, #88]	; (8006614 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 80065bc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80065be:	782c      	ldrb	r4, [r5, #0]
 80065c0:	f3bf 8f5b 	dmb	ish
 80065c4:	f014 0401 	ands.w	r4, r4, #1
 80065c8:	d121      	bne.n	800660e <_Z23getFont_verdana_40_4bppv+0x56>
 80065ca:	4628      	mov	r0, r5
 80065cc:	f01b faa9 	bl	8021b22 <__cxa_guard_acquire>
 80065d0:	b1e8      	cbz	r0, 800660e <_Z23getFont_verdana_40_4bppv+0x56>
 80065d2:	233f      	movs	r3, #63	; 0x3f
 80065d4:	2201      	movs	r2, #1
 80065d6:	4910      	ldr	r1, [pc, #64]	; (8006618 <_Z23getFont_verdana_40_4bppv+0x60>)
 80065d8:	9309      	str	r3, [sp, #36]	; 0x24
 80065da:	4b10      	ldr	r3, [pc, #64]	; (800661c <_Z23getFont_verdana_40_4bppv+0x64>)
 80065dc:	4810      	ldr	r0, [pc, #64]	; (8006620 <_Z23getFont_verdana_40_4bppv+0x68>)
 80065de:	9308      	str	r3, [sp, #32]
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80065e2:	940a      	str	r4, [sp, #40]	; 0x28
 80065e4:	9405      	str	r4, [sp, #20]
 80065e6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80065ea:	2304      	movs	r3, #4
 80065ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80065f0:	2328      	movs	r3, #40	; 0x28
 80065f2:	2202      	movs	r2, #2
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80065fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80065fe:	f7fc fa39 	bl	8002a74 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8006602:	4809      	ldr	r0, [pc, #36]	; (8006628 <_Z23getFont_verdana_40_4bppv+0x70>)
 8006604:	f01b fbb6 	bl	8021d74 <atexit>
 8006608:	4628      	mov	r0, r5
 800660a:	f01b fa96 	bl	8021b3a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 800660e:	4804      	ldr	r0, [pc, #16]	; (8006620 <_Z23getFont_verdana_40_4bppv+0x68>)
 8006610:	b00f      	add	sp, #60	; 0x3c
 8006612:	bd30      	pop	{r4, r5, pc}
 8006614:	2400507c 	.word	0x2400507c
 8006618:	08025bbc 	.word	0x08025bbc
 800661c:	08025c08 	.word	0x08025c08
 8006620:	24005080 	.word	0x24005080
 8006624:	08025c14 	.word	0x08025c14
 8006628:	080065b5 	.word	0x080065b5

0800662c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 800662c:	2000      	movs	r0, #0
 800662e:	4770      	bx	lr

08006630 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8006630:	2000      	movs	r0, #0
 8006632:	4770      	bx	lr

08006634 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006634:	b40e      	push	{r1, r2, r3}
 8006636:	b503      	push	{r0, r1, lr}
 8006638:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800663a:	2100      	movs	r1, #0
{
 800663c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8006640:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006642:	f010 ff5f 	bl	8017504 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006646:	b002      	add	sp, #8
 8006648:	f85d eb04 	ldr.w	lr, [sp], #4
 800664c:	b003      	add	sp, #12
 800664e:	4770      	bx	lr

08006650 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006650:	b40c      	push	{r2, r3}
 8006652:	b507      	push	{r0, r1, r2, lr}
 8006654:	ab04      	add	r3, sp, #16
 8006656:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800665a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800665c:	f010 ff52 	bl	8017504 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8006660:	b003      	add	sp, #12
 8006662:	f85d eb04 	ldr.w	lr, [sp], #4
 8006666:	b002      	add	sp, #8
 8006668:	4770      	bx	lr
	...

0800666c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800666c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800666e:	b510      	push	{r4, lr}
 8006670:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8006672:	b373      	cbz	r3, 80066d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8006674:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8006676:	b92b      	cbnz	r3, 8006684 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8006678:	4b18      	ldr	r3, [pc, #96]	; (80066dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800667a:	21c5      	movs	r1, #197	; 0xc5
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800667e:	4819      	ldr	r0, [pc, #100]	; (80066e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8006680:	f01b fb5a 	bl	8021d38 <__assert_func>
            return buffer[pos];
 8006684:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8006686:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800668a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800668c:	b30b      	cbz	r3, 80066d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800668e:	f012 fab1 	bl	8018bf4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8006692:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8006694:	2b01      	cmp	r3, #1
 8006696:	d803      	bhi.n	80066a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8006698:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800669a:	21cb      	movs	r1, #203	; 0xcb
 800669c:	4a13      	ldr	r2, [pc, #76]	; (80066ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800669e:	e7ee      	b.n	800667e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 80066a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80066a2:	f640 103f 	movw	r0, #2367	; 0x93f
 80066a6:	1c53      	adds	r3, r2, #1
 80066a8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	4619      	mov	r1, r3
 80066ae:	bf88      	it	hi
 80066b0:	f1a3 010a 	subhi.w	r1, r3, #10
 80066b4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80066b8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80066ba:	4281      	cmp	r1, r0
 80066bc:	d109      	bne.n	80066d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80066be:	2b0a      	cmp	r3, #10
 80066c0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80066c4:	bf28      	it	cs
 80066c6:	2300      	movcs	r3, #0
            return buffer[pos];
 80066c8:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80066ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80066ce:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80066d0:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80066d2:	4620      	mov	r0, r4
}
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80066d8:	f012 b98e 	b.w	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80066dc:	08024074 	.word	0x08024074
 80066e0:	0802407d 	.word	0x0802407d
 80066e4:	08024128 	.word	0x08024128
 80066e8:	08024180 	.word	0x08024180
 80066ec:	0802418e 	.word	0x0802418e

080066f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80066f0:	f012 b94b 	b.w	801898a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080066f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80066f4:	b510      	push	{r4, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	ac02      	add	r4, sp, #8
 80066fa:	e884 0006 	stmia.w	r4, {r1, r2}
 80066fe:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8006700:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006702:	4621      	mov	r1, r4
    va_start(pArg, format);
 8006704:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	9b08      	ldr	r3, [sp, #32]
 800670e:	f00f fbe3 	bl	8015ed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8006712:	b006      	add	sp, #24
 8006714:	bd10      	pop	{r4, pc}
	...

08006718 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006718:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800671a:	bb18      	cbnz	r0, 8006764 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800671c:	4b12      	ldr	r3, [pc, #72]	; (8006768 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800671e:	4813      	ldr	r0, [pc, #76]	; (800676c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4913      	ldr	r1, [pc, #76]	; (8006770 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8006724:	b1b3      	cbz	r3, 8006754 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8006726:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006728:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800672a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800672c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800672e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	441a      	add	r2, r3
 8006734:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8006738:	2200      	movs	r2, #0
 800673a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800673c:	f000 f838 	bl	80067b0 <_ZN17TypedTextDatabase8getFontsEv>
 8006740:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8006742:	f000 f833 	bl	80067ac <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8006748:	601c      	str	r4, [r3, #0]
        fonts = f;
 800674a:	4b0c      	ldr	r3, [pc, #48]	; (800677c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800674c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8006750:	8018      	strh	r0, [r3, #0]
    }
}
 8006752:	e007      	b.n	8006764 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8006756:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800675a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800675e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8006760:	2c00      	cmp	r4, #0
 8006762:	d1e8      	bne.n	8006736 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8006764:	bd38      	pop	{r3, r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	240050ac 	.word	0x240050ac
 800676c:	240050b0 	.word	0x240050b0
 8006770:	240050b4 	.word	0x240050b4
 8006774:	240050b8 	.word	0x240050b8
 8006778:	2400ea8c 	.word	0x2400ea8c
 800677c:	2400ea94 	.word	0x2400ea94
 8006780:	2400ea90 	.word	0x2400ea90
 8006784:	90177040 	.word	0x90177040
 8006788:	90177000 	.word	0x90177000
 800678c:	90177108 	.word	0x90177108

08006790 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8006798:	4b03      	ldr	r3, [pc, #12]	; (80067a8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800679a:	681b      	ldr	r3, [r3, #0]
}
 800679c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	240050b4 	.word	0x240050b4
 80067a8:	240050b0 	.word	0x240050b0

080067ac <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80067ac:	2010      	movs	r0, #16
 80067ae:	4770      	bx	lr

080067b0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80067b0:	4800      	ldr	r0, [pc, #0]	; (80067b4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80067b2:	4770      	bx	lr
 80067b4:	240050bc 	.word	0x240050bc

080067b8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80067b8:	b510      	push	{r4, lr}
};
 80067ba:	4c05      	ldr	r4, [pc, #20]	; (80067d0 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_16_4bpp()),
 80067bc:	f7ff febe 	bl	800653c <_Z23getFont_verdana_16_4bppv>
};
 80067c0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80067c2:	f7ff fef9 	bl	80065b8 <_Z23getFont_verdana_40_4bppv>
};
 80067c6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80067c8:	f7ff fe7c 	bl	80064c4 <_Z23getFont_verdana_10_4bppv>
};
 80067cc:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80067ce:	bd10      	pop	{r4, pc}
 80067d0:	240050bc 	.word	0x240050bc

080067d4 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
    }
 80067d4:	4608      	mov	r0, r1
 80067d6:	4770      	bx	lr

080067d8 <_ZNK8touchgfx21GraphWrapAndClearData18indexToGlobalIndexEs>:

    virtual void clear();

    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (this->dataCounter - this->usedCapacity) + index;
 80067d8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
 80067dc:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 80067e0:	4419      	add	r1, r3
    }
 80067e2:	1a08      	subs	r0, r1, r0
 80067e4:	4770      	bx	lr

080067e6 <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 80067e6:	4770      	bx	lr

080067e8 <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 80067e8:	4770      	bx	lr

080067ea <_ZN8touchgfx17GraphWrapAndClearILs100EED1Ev>:
 * be created as new values are added.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphWrapAndClear : public GraphWrapAndClearData
 80067ea:	4770      	bx	lr

080067ec <_ZN8touchgfx17GraphWrapAndClearILs100EED0Ev>:
 80067ec:	b510      	push	{r4, lr}
 80067ee:	4604      	mov	r4, r0
 80067f0:	f44f 7137 	mov.w	r1, #732	; 0x2dc
 80067f4:	f01b f993 	bl	8021b1e <_ZdlPvj>
 80067f8:	4620      	mov	r0, r4
 80067fa:	bd10      	pop	{r4, pc}

080067fc <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 80067fc:	b510      	push	{r4, lr}
 80067fe:	4604      	mov	r4, r0
}
 8006800:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8006804:	f01b f98b 	bl	8021b1e <_ZdlPvj>
 8006808:	4620      	mov	r0, r4
 800680a:	bd10      	pop	{r4, pc}

0800680c <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase()
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	f44f 7380 	mov.w	r3, #256	; 0x100
        : x(0), y(0), width(0), height(0)
 8006814:	2600      	movs	r6, #0
 8006816:	4680      	mov	r8, r0
 8006818:	4aeb      	ldr	r2, [pc, #940]	; (8006bc8 <_ZN15customGraphBaseC1Ev+0x3bc>)
 800681a:	f100 0558 	add.w	r5, r0, #88	; 0x58
 800681e:	8483      	strh	r3, [r0, #36]	; 0x24
          firstChild(0)
 8006820:	6286      	str	r6, [r0, #40]	; 0x28
 8006822:	4604      	mov	r4, r0
 8006824:	b085      	sub	sp, #20
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006826:	2164      	movs	r1, #100	; 0x64
 8006828:	2701      	movs	r7, #1
 800682a:	f504 7b4d 	add.w	fp, r4, #820	; 0x334
 800682e:	f504 7a5d 	add.w	sl, r4, #884	; 0x374
 8006832:	f504 796d 	add.w	r9, r4, #948	; 0x3b4
 8006836:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800683a:	e9c0 6603 	strd	r6, r6, [r0, #12]
 800683e:	e9c0 6605 	strd	r6, r6, [r0, #20]
 8006842:	e9c0 6607 	strd	r6, r6, [r0, #28]
 8006846:	f848 2b2c 	str.w	r2, [r8], #44
        : Widget(), alpha(255), color(0)
 800684a:	4ae0      	ldr	r2, [pc, #896]	; (8006bcc <_ZN15customGraphBaseC1Ev+0x3c0>)
 800684c:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	64c6      	str	r6, [r0, #76]	; 0x4c
 8006854:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
        : color(col)
 8006858:	6546      	str	r6, [r0, #84]	; 0x54
        : x(0), y(0), width(0), height(0)
 800685a:	e9c0 260b 	strd	r2, r6, [r0, #44]	; 0x2c
 800685e:	e9c0 660d 	strd	r6, r6, [r0, #52]	; 0x34
 8006862:	e9c0 660f 	strd	r6, r6, [r0, #60]	; 0x3c
 8006866:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
 800686a:	4628      	mov	r0, r5
 800686c:	f00c f95c 	bl	8012b28 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8006870:	4bd7      	ldr	r3, [pc, #860]	; (8006bd0 <_ZN15customGraphBaseC1Ev+0x3c4>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006872:	4631      	mov	r1, r6
 8006874:	2263      	movs	r2, #99	; 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8006876:	65a3      	str	r3, [r4, #88]	; 0x58
{
public:
    GraphWrapAndClear()
        : GraphWrapAndClearData(CAPACITY, y)
 8006878:	f504 73d2 	add.w	r3, r4, #420	; 0x1a4
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 800687c:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 800687e:	e9c4 3667 	strd	r3, r6, [r4, #412]	; 0x19c
 8006882:	e9c4 7665 	strd	r7, r6, [r4, #404]	; 0x194
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 8006886:	f7fc f92f 	bl	8002ae8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 800688a:	4bd2      	ldr	r3, [pc, #840]	; (8006bd4 <_ZN15customGraphBaseC1Ev+0x3c8>)
        : CanvasWidget()
 800688c:	4658      	mov	r0, fp
 800688e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006890:	f00b fdbe 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8006894:	230a      	movs	r3, #10
 8006896:	f8c4 6370 	str.w	r6, [r4, #880]	; 0x370
        : CanvasWidget()
 800689a:	4650      	mov	r0, sl
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800689c:	f8c4 3368 	str.w	r3, [r4, #872]	; 0x368
class GraphElementGridX : public GraphElementGridBase
 80068a0:	4bcd      	ldr	r3, [pc, #820]	; (8006bd8 <_ZN15customGraphBaseC1Ev+0x3cc>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068a2:	f884 736c 	strb.w	r7, [r4, #876]	; 0x36c
class GraphElementGridX : public GraphElementGridBase
 80068a6:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068aa:	e9c4 67d8 	strd	r6, r7, [r4, #864]	; 0x360
        : CanvasWidget()
 80068ae:	f00b fdaf 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068b2:	230a      	movs	r3, #10
 80068b4:	f8c4 63b0 	str.w	r6, [r4, #944]	; 0x3b0
        : CanvasWidget()
 80068b8:	4648      	mov	r0, r9
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068ba:	f8c4 33a8 	str.w	r3, [r4, #936]	; 0x3a8
class GraphElementGridY : public GraphElementGridBase
 80068be:	4bc7      	ldr	r3, [pc, #796]	; (8006bdc <_ZN15customGraphBaseC1Ev+0x3d0>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068c0:	f884 73ac 	strb.w	r7, [r4, #940]	; 0x3ac
class GraphElementGridY : public GraphElementGridBase
 80068c4:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80068c8:	e9c4 67e8 	strd	r6, r7, [r4, #928]	; 0x3a0
        : CanvasWidget()
 80068cc:	f00b fda0 	bl	8012410 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 80068d0:	4bc3      	ldr	r3, [pc, #780]	; (8006be0 <_ZN15customGraphBaseC1Ev+0x3d4>)
 80068d2:	f8c4 33b4 	str.w	r3, [r4, #948]	; 0x3b4
 80068d6:	2302      	movs	r3, #2
 80068d8:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
 80068dc:	f504 7379 	add.w	r3, r4, #996	; 0x3e4
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80068e0:	4618      	mov	r0, r3
 80068e2:	9303      	str	r3, [sp, #12]
 80068e4:	f7fb fec2 	bl	800266c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80068e8:	4bbe      	ldr	r3, [pc, #760]	; (8006be4 <_ZN15customGraphBaseC1Ev+0x3d8>)
    box1.setPosition(0, 0, 310, 200);
 80068ea:	4632      	mov	r2, r6
 80068ec:	4631      	mov	r1, r6
 80068ee:	f8c4 33e4 	str.w	r3, [r4, #996]	; 0x3e4
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	4640      	mov	r0, r8
 80068f6:	f8c4 63f0 	str.w	r6, [r4, #1008]	; 0x3f0
 80068fa:	f8c4 33ec 	str.w	r3, [r4, #1004]	; 0x3ec
        rect.width = width;
 80068fe:	4bba      	ldr	r3, [pc, #744]	; (8006be8 <_ZN15customGraphBaseC1Ev+0x3dc>)
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	23c8      	movs	r3, #200	; 0xc8
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	f44f 739b 	mov.w	r3, #310	; 0x136
 800690a:	f7fc fd5b 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800690e:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8006912:	4641      	mov	r1, r8
 8006914:	4620      	mov	r0, r4
 8006916:	6563      	str	r3, [r4, #84]	; 0x54
        setIntervalScaled(abs(interval) * dataScale);
 8006918:	f04f 080a 	mov.w	r8, #10
 800691c:	f00a fafe 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(0, 0, 310, 200);
 8006920:	23c8      	movs	r3, #200	; 0xc8
 8006922:	4632      	mov	r2, r6
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800692e:	f7fc fd49 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8006932:	4632      	mov	r2, r6
 8006934:	4639      	mov	r1, r7
 8006936:	4628      	mov	r0, r5
 8006938:	f7fc fa8a 	bl	8002e50 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 800693c:	4633      	mov	r3, r6
 800693e:	4632      	mov	r2, r6
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	9600      	str	r6, [sp, #0]
 8006946:	f00c f8a1 	bl	8012a8c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 800694a:	4633      	mov	r3, r6
 800694c:	4632      	mov	r2, r6
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	9600      	str	r6, [sp, #0]
 8006954:	f00b ffc1 	bl	80128da <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8006958:	4631      	mov	r1, r6
 800695a:	2264      	movs	r2, #100	; 0x64
 800695c:	4628      	mov	r0, r5
 800695e:	f7fc f94f 	bl	8002c00 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8006962:	f8d4 1364 	ldr.w	r1, [r4, #868]	; 0x364
        color = newColor;
 8006966:	f04f 467f 	mov.w	r6, #4278190080	; 0xff000000
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 800696a:	463a      	mov	r2, r7
        setIntervalScaled(abs(interval) * dataScale);
 800696c:	fb08 f001 	mul.w	r0, r8, r1
        color = newColor;
 8006970:	f8c4 6360 	str.w	r6, [r4, #864]	; 0x360
 8006974:	2800      	cmp	r0, #0
        lineWidth = width;
 8006976:	f884 736c 	strb.w	r7, [r4, #876]	; 0x36c
 800697a:	bfb8      	it	lt
 800697c:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 800697e:	f8c4 0368 	str.w	r0, [r4, #872]	; 0x368
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006982:	f00c f935 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8006986:	4659      	mov	r1, fp
        dataScale = scale;
 8006988:	e9c4 70d9 	strd	r7, r0, [r4, #868]	; 0x364
 800698c:	4628      	mov	r0, r5
 800698e:	f00b ffaf 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8006992:	f8d4 13a4 	ldr.w	r1, [r4, #932]	; 0x3a4
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8006996:	463a      	mov	r2, r7
        color = newColor;
 8006998:	f8c4 63a0 	str.w	r6, [r4, #928]	; 0x3a0
        setIntervalScaled(abs(interval) * dataScale);
 800699c:	fb08 f001 	mul.w	r0, r8, r1
        lineWidth = width;
 80069a0:	f884 73ac 	strb.w	r7, [r4, #940]	; 0x3ac
 80069a4:	2800      	cmp	r0, #0
 80069a6:	bfb8      	it	lt
 80069a8:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 80069aa:	f8c4 03a8 	str.w	r0, [r4, #936]	; 0x3a8
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80069ae:	f00c f91f 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 80069b2:	4651      	mov	r1, sl
        dataScale = scale;
 80069b4:	e9c4 70e9 	strd	r7, r0, [r4, #932]	; 0x3a4
 80069b8:	4628      	mov	r0, r5
 80069ba:	f00b ff99 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 80069be:	4b8b      	ldr	r3, [pc, #556]	; (8006bec <_ZN15customGraphBaseC1Ev+0x3e0>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 80069c0:	4649      	mov	r1, r9
 80069c2:	4628      	mov	r0, r5
 80069c4:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        painterRed = Color::getRed(color);
 80069c8:	f249 7314 	movw	r3, #38676	; 0x9714
 80069cc:	f8a4 33f4 	strh.w	r3, [r4, #1012]	; 0x3f4
        painterBlue = Color::getBlue(color);
 80069d0:	23c5      	movs	r3, #197	; 0xc5
 80069d2:	f884 33f6 	strb.w	r3, [r4, #1014]	; 0x3f6
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	f8c4 33dc 	str.w	r3, [r4, #988]	; 0x3dc
        lineWidth = width;
 80069dc:	2304      	movs	r3, #4
 80069de:	f884 33e0 	strb.w	r3, [r4, #992]	; 0x3e0
 80069e2:	f00b ff85 	bl	80128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 80069e6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80069ea:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8006bf0 <_ZN15customGraphBaseC1Ev+0x3e4>
 80069ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80069f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80069fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069fe:	f2c1 829e 	blt.w	8007f3e <_ZN15customGraphBaseC1Ev+0x1732>
            return (int)(fs + 0.5f);
 8006a02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a0e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a12:	4628      	mov	r0, r5
 8006a14:	f00c f945 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a18:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006a1c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006bf4 <_ZN15customGraphBaseC1Ev+0x3e8>
 8006a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a24:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	f2c1 829a 	blt.w	8007f68 <_ZN15customGraphBaseC1Ev+0x175c>
            return (int)(fs + 0.5f);
 8006a34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a40:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a44:	4628      	mov	r0, r5
 8006a46:	f00c f92c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a4a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006a4e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006bf8 <_ZN15customGraphBaseC1Ev+0x3ec>
 8006a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a56:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a62:	f2c1 8296 	blt.w	8007f92 <_ZN15customGraphBaseC1Ev+0x1786>
            return (int)(fs + 0.5f);
 8006a66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a72:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006a76:	4628      	mov	r0, r5
 8006a78:	f00c f913 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006a7c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006a80:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006bfc <_ZN15customGraphBaseC1Ev+0x3f0>
 8006a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a88:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006a8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a94:	f2c1 8292 	blt.w	8007fbc <_ZN15customGraphBaseC1Ev+0x17b0>
            return (int)(fs + 0.5f);
 8006a98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006a9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f00c f8fa 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006aae:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ab2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006c00 <_ZN15customGraphBaseC1Ev+0x3f4>
 8006ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	f2c1 828e 	blt.w	8007fe6 <_ZN15customGraphBaseC1Ev+0x17da>
            return (int)(fs + 0.5f);
 8006aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ad6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ada:	4628      	mov	r0, r5
 8006adc:	f00c f8e1 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ae0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ae4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006c04 <_ZN15customGraphBaseC1Ev+0x3f8>
 8006ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	f2c1 828a 	blt.w	8008010 <_ZN15customGraphBaseC1Ev+0x1804>
            return (int)(fs + 0.5f);
 8006afc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b08:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f00c f8c8 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b12:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b16:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006c08 <_ZN15customGraphBaseC1Ev+0x3fc>
 8006b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b2a:	f2c1 8286 	blt.w	800803a <_ZN15customGraphBaseC1Ev+0x182e>
            return (int)(fs + 0.5f);
 8006b2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f00c f8af 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b44:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b48:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006c0c <_ZN15customGraphBaseC1Ev+0x400>
 8006b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b50:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5c:	f2c1 8282 	blt.w	8008064 <_ZN15customGraphBaseC1Ev+0x1858>
            return (int)(fs + 0.5f);
 8006b60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b6c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006b70:	4628      	mov	r0, r5
 8006b72:	f00c f896 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006b76:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006b7a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006c10 <_ZN15customGraphBaseC1Ev+0x404>
 8006b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b82:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	f2c1 827e 	blt.w	800808e <_ZN15customGraphBaseC1Ev+0x1882>
            return (int)(fs + 0.5f);
 8006b92:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006b96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b9e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f00c f87d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ba8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006bac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006c14 <_ZN15customGraphBaseC1Ev+0x408>
 8006bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc0:	f2c1 827a 	blt.w	80080b8 <_ZN15customGraphBaseC1Ev+0x18ac>
 8006bc4:	e04e      	b.n	8006c64 <_ZN15customGraphBaseC1Ev+0x458>
 8006bc6:	bf00      	nop
 8006bc8:	08024400 	.word	0x08024400
 8006bcc:	08024cbc 	.word	0x08024cbc
 8006bd0:	080248e8 	.word	0x080248e8
 8006bd4:	08024268 	.word	0x08024268
 8006bd8:	08023d3c 	.word	0x08023d3c
 8006bdc:	08023df4 	.word	0x08023df4
 8006be0:	08024bb0 	.word	0x08024bb0
 8006be4:	08024838 	.word	0x08024838
 8006be8:	00c80136 	.word	0x00c80136
 8006bec:	ff1497c5 	.word	0xff1497c5
 8006bf0:	42103f72 	.word	0x42103f72
 8006bf4:	41a20851 	.word	0x41a20851
 8006bf8:	40ff87e8 	.word	0x40ff87e8
 8006bfc:	3fd1ce5b 	.word	0x3fd1ce5b
 8006c00:	4014a5ce 	.word	0x4014a5ce
 8006c04:	4119d215 	.word	0x4119d215
 8006c08:	41ad65d4 	.word	0x41ad65d4
 8006c0c:	420ed09c 	.word	0x420ed09c
 8006c10:	42427609 	.word	0x42427609
 8006c14:	42672051 	.word	0x42672051
 8006c18:	42769e40 	.word	0x42769e40
 8006c1c:	42707810 	.word	0x42707810
 8006c20:	4259eac3 	.word	0x4259eac3
 8006c24:	423c79c1 	.word	0x423c79c1
 8006c28:	422371c4 	.word	0x422371c4
 8006c2c:	4218fae9 	.word	0x4218fae9
 8006c30:	422372f7 	.word	0x422372f7
 8006c34:	4243b77b 	.word	0x4243b77b
 8006c38:	4274cc96 	.word	0x4274cc96
 8006c3c:	42967bcc 	.word	0x42967bcc
 8006c40:	42b004ba 	.word	0x42b004ba
 8006c44:	42c12531 	.word	0x42c12531
 8006c48:	42c5a82b 	.word	0x42c5a82b
 8006c4c:	42bc0752 	.word	0x42bc0752
 8006c50:	42a5cedd 	.word	0x42a5cedd
 8006c54:	428744d1 	.word	0x428744d1
 8006c58:	424cd21d 	.word	0x424cd21d
 8006c5c:	421318bd 	.word	0x421318bd
 8006c60:	41d758f2 	.word	0x41d758f2
            return (int)(fs + 0.5f);
 8006c64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006c74:	4628      	mov	r0, r5
 8006c76:	f00c f814 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006c7a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006c7e:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8006c18 <_ZN15customGraphBaseC1Ev+0x40c>
 8006c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c86:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c92:	f2c1 8226 	blt.w	80080e2 <_ZN15customGraphBaseC1Ev+0x18d6>
            return (int)(fs + 0.5f);
 8006c96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ca2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f00b fffb 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006cac:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006cb0:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8006c1c <_ZN15customGraphBaseC1Ev+0x410>
 8006cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006cbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	f2c1 8222 	blt.w	800810c <_ZN15customGraphBaseC1Ev+0x1900>
            return (int)(fs + 0.5f);
 8006cc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cd4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f00b ffe2 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006cde:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ce2:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 8006c20 <_ZN15customGraphBaseC1Ev+0x414>
 8006ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cea:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf6:	f2c1 821e 	blt.w	8008136 <_ZN15customGraphBaseC1Ev+0x192a>
            return (int)(fs + 0.5f);
 8006cfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006cfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d06:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f00b ffc9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d10:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d14:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8006c24 <_ZN15customGraphBaseC1Ev+0x418>
 8006d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d28:	f2c1 821a 	blt.w	8008160 <_ZN15customGraphBaseC1Ev+0x1954>
            return (int)(fs + 0.5f);
 8006d2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d38:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	f00b ffb0 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d42:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d46:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8006c28 <_ZN15customGraphBaseC1Ev+0x41c>
 8006d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5a:	f2c1 8216 	blt.w	800818a <_ZN15customGraphBaseC1Ev+0x197e>
            return (int)(fs + 0.5f);
 8006d5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d6a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f00b ff97 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006d74:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006d78:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8006c2c <_ZN15customGraphBaseC1Ev+0x420>
 8006d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d8c:	f2c1 8212 	blt.w	80081b4 <_ZN15customGraphBaseC1Ev+0x19a8>
            return (int)(fs + 0.5f);
 8006d90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006d94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006da0:	4628      	mov	r0, r5
 8006da2:	f00b ff7e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006da6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006daa:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 8006c30 <_ZN15customGraphBaseC1Ev+0x424>
 8006dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbe:	f2c1 820e 	blt.w	80081de <_ZN15customGraphBaseC1Ev+0x19d2>
            return (int)(fs + 0.5f);
 8006dc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f00b ff65 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006dd8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ddc:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 8006c34 <_ZN15customGraphBaseC1Ev+0x428>
 8006de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006de4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006de8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df0:	f2c1 820a 	blt.w	8008208 <_ZN15customGraphBaseC1Ev+0x19fc>
            return (int)(fs + 0.5f);
 8006df4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e00:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e04:	4628      	mov	r0, r5
 8006e06:	f00b ff4c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e0a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e0e:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8006c38 <_ZN15customGraphBaseC1Ev+0x42c>
 8006e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e16:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e22:	f2c1 8206 	blt.w	8008232 <_ZN15customGraphBaseC1Ev+0x1a26>
            return (int)(fs + 0.5f);
 8006e26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e32:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e36:	4628      	mov	r0, r5
 8006e38:	f00b ff33 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e3c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e40:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8006c3c <_ZN15customGraphBaseC1Ev+0x430>
 8006e44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e48:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	f2c1 8202 	blt.w	800825c <_ZN15customGraphBaseC1Ev+0x1a50>
            return (int)(fs + 0.5f);
 8006e58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e64:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f00b ff1a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006e6e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006e72:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8006c40 <_ZN15customGraphBaseC1Ev+0x434>
 8006e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	f2c1 81fe 	blt.w	8008286 <_ZN15customGraphBaseC1Ev+0x1a7a>
            return (int)(fs + 0.5f);
 8006e8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e96:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f00b ff01 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ea0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ea4:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8006c44 <_ZN15customGraphBaseC1Ev+0x438>
 8006ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eac:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb8:	f2c1 81fa 	blt.w	80082b0 <_ZN15customGraphBaseC1Ev+0x1aa4>
            return (int)(fs + 0.5f);
 8006ebc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ec8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f00b fee8 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ed2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006ed6:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 8006c48 <_ZN15customGraphBaseC1Ev+0x43c>
 8006eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ede:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	f2c1 81f6 	blt.w	80082da <_ZN15customGraphBaseC1Ev+0x1ace>
            return (int)(fs + 0.5f);
 8006eee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006efa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006efe:	4628      	mov	r0, r5
 8006f00:	f00b fecf 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f04:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f08:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 8006c4c <_ZN15customGraphBaseC1Ev+0x440>
 8006f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f10:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1c:	f2c1 81f2 	blt.w	8008304 <_ZN15customGraphBaseC1Ev+0x1af8>
            return (int)(fs + 0.5f);
 8006f20:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f30:	4628      	mov	r0, r5
 8006f32:	f00b feb6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f36:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f3a:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 8006c50 <_ZN15customGraphBaseC1Ev+0x444>
 8006f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f42:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4e:	f2c1 81ee 	blt.w	800832e <_ZN15customGraphBaseC1Ev+0x1b22>
            return (int)(fs + 0.5f);
 8006f52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f5e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f62:	4628      	mov	r0, r5
 8006f64:	f00b fe9d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f68:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f6c:	ed1f 7ac7 	vldr	s14, [pc, #-796]	; 8006c54 <_ZN15customGraphBaseC1Ev+0x448>
 8006f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f74:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006f78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f80:	f2c1 81ea 	blt.w	8008358 <_ZN15customGraphBaseC1Ev+0x1b4c>
            return (int)(fs + 0.5f);
 8006f84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f90:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006f94:	4628      	mov	r0, r5
 8006f96:	f00b fe84 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006f9a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006f9e:	ed1f 7ad2 	vldr	s14, [pc, #-840]	; 8006c58 <_ZN15customGraphBaseC1Ev+0x44c>
 8006fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fa6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb2:	f2c1 81e6 	blt.w	8008382 <_ZN15customGraphBaseC1Ev+0x1b76>
            return (int)(fs + 0.5f);
 8006fb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fc2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f00b fe6b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006fcc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8006fd0:	ed1f 7ade 	vldr	s14, [pc, #-888]	; 8006c5c <_ZN15customGraphBaseC1Ev+0x450>
 8006fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8006fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe4:	f2c1 81e2 	blt.w	80083ac <_ZN15customGraphBaseC1Ev+0x1ba0>
            return (int)(fs + 0.5f);
 8006fe8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ff4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f00b fe52 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8006ffe:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007002:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 8006c60 <_ZN15customGraphBaseC1Ev+0x454>
 8007006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800700a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800700e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007016:	f2c1 81de 	blt.w	80083d6 <_ZN15customGraphBaseC1Ev+0x1bca>
            return (int)(fs + 0.5f);
 800701a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800701e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007026:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800702a:	4628      	mov	r0, r5
 800702c:	f00b fe39 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007030:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007034:	ed9f 7af3 	vldr	s14, [pc, #972]	; 8007404 <_ZN15customGraphBaseC1Ev+0xbf8>
 8007038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800703c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007048:	f2c1 81da 	blt.w	8008400 <_ZN15customGraphBaseC1Ev+0x1bf4>
            return (int)(fs + 0.5f);
 800704c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007058:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800705c:	4628      	mov	r0, r5
 800705e:	f00b fe20 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007062:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007066:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8007408 <_ZN15customGraphBaseC1Ev+0xbfc>
 800706a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800706e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	f2c1 81d6 	blt.w	800842a <_ZN15customGraphBaseC1Ev+0x1c1e>
            return (int)(fs + 0.5f);
 800707e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007082:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800708a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800708e:	4628      	mov	r0, r5
 8007090:	f00b fe07 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007094:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007098:	ed9f 7adc 	vldr	s14, [pc, #880]	; 800740c <_ZN15customGraphBaseC1Ev+0xc00>
 800709c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ac:	f2c1 81d2 	blt.w	8008454 <_ZN15customGraphBaseC1Ev+0x1c48>
            return (int)(fs + 0.5f);
 80070b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80070b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070bc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070c0:	4628      	mov	r0, r5
 80070c2:	f00b fdee 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070c6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80070ca:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8007410 <_ZN15customGraphBaseC1Ev+0xc04>
 80070ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80070d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	f2c1 81ce 	blt.w	800847e <_ZN15customGraphBaseC1Ev+0x1c72>
            return (int)(fs + 0.5f);
 80070e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80070e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80070ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80070f2:	4628      	mov	r0, r5
 80070f4:	f00b fdd5 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80070f8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80070fc:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8007414 <_ZN15customGraphBaseC1Ev+0xc08>
 8007100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007104:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007108:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007110:	f2c1 81ca 	blt.w	80084a8 <_ZN15customGraphBaseC1Ev+0x1c9c>
            return (int)(fs + 0.5f);
 8007114:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007118:	ee77 7a87 	vadd.f32	s15, s15, s14
 800711c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007120:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007124:	4628      	mov	r0, r5
 8007126:	f00b fdbc 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800712a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800712e:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8007418 <_ZN15customGraphBaseC1Ev+0xc0c>
 8007132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007136:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800713a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	f2c1 81c6 	blt.w	80084d2 <_ZN15customGraphBaseC1Ev+0x1cc6>
            return (int)(fs + 0.5f);
 8007146:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800714a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800714e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007152:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007156:	4628      	mov	r0, r5
 8007158:	f00b fda3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800715c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007160:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800741c <_ZN15customGraphBaseC1Ev+0xc10>
 8007164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007168:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800716c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	f2c1 81c2 	blt.w	80084fc <_ZN15customGraphBaseC1Ev+0x1cf0>
            return (int)(fs + 0.5f);
 8007178:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800717c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007184:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007188:	4628      	mov	r0, r5
 800718a:	f00b fd8a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800718e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007192:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007420 <_ZN15customGraphBaseC1Ev+0xc14>
 8007196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800719a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800719e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	f2c1 81be 	blt.w	8008526 <_ZN15customGraphBaseC1Ev+0x1d1a>
            return (int)(fs + 0.5f);
 80071aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071b6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071ba:	4628      	mov	r0, r5
 80071bc:	f00b fd71 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071c0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80071c4:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8007424 <_ZN15customGraphBaseC1Ev+0xc18>
 80071c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80071d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d8:	f2c1 81ba 	blt.w	8008550 <_ZN15customGraphBaseC1Ev+0x1d44>
            return (int)(fs + 0.5f);
 80071dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80071e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80071ec:	4628      	mov	r0, r5
 80071ee:	f00b fd58 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80071f2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80071f6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007428 <_ZN15customGraphBaseC1Ev+0xc1c>
 80071fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071fe:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720a:	f2c1 81b6 	blt.w	800857a <_ZN15customGraphBaseC1Ev+0x1d6e>
            return (int)(fs + 0.5f);
 800720e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007212:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800721a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800721e:	4628      	mov	r0, r5
 8007220:	f00b fd3f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007224:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007228:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800742c <_ZN15customGraphBaseC1Ev+0xc20>
 800722c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007230:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	f2c1 81b2 	blt.w	80085a4 <_ZN15customGraphBaseC1Ev+0x1d98>
            return (int)(fs + 0.5f);
 8007240:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800724c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007250:	4628      	mov	r0, r5
 8007252:	f00b fd26 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007256:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800725a:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007430 <_ZN15customGraphBaseC1Ev+0xc24>
 800725e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007262:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	f2c1 81ae 	blt.w	80085ce <_ZN15customGraphBaseC1Ev+0x1dc2>
            return (int)(fs + 0.5f);
 8007272:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800727a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800727e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007282:	4628      	mov	r0, r5
 8007284:	f00b fd0d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007288:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800728c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007434 <_ZN15customGraphBaseC1Ev+0xc28>
 8007290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007294:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	f2c1 81aa 	blt.w	80085f8 <_ZN15customGraphBaseC1Ev+0x1dec>
            return (int)(fs + 0.5f);
 80072a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072b4:	4628      	mov	r0, r5
 80072b6:	f00b fcf4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072ba:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80072be:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007438 <_ZN15customGraphBaseC1Ev+0xc2c>
 80072c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072c6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80072ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d2:	f2c1 81a6 	blt.w	8008622 <_ZN15customGraphBaseC1Ev+0x1e16>
            return (int)(fs + 0.5f);
 80072d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80072da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80072de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072e2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80072e6:	4628      	mov	r0, r5
 80072e8:	f00b fcdb 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80072ec:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80072f0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800743c <_ZN15customGraphBaseC1Ev+0xc30>
 80072f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072f8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80072fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007304:	f2c1 81a2 	blt.w	800864c <_ZN15customGraphBaseC1Ev+0x1e40>
            return (int)(fs + 0.5f);
 8007308:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800730c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007314:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007318:	4628      	mov	r0, r5
 800731a:	f00b fcc2 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800731e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007322:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007440 <_ZN15customGraphBaseC1Ev+0xc34>
 8007326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800732a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800732e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007336:	f2c1 819e 	blt.w	8008676 <_ZN15customGraphBaseC1Ev+0x1e6a>
            return (int)(fs + 0.5f);
 800733a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800733e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007346:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800734a:	4628      	mov	r0, r5
 800734c:	f00b fca9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007350:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007354:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007444 <_ZN15customGraphBaseC1Ev+0xc38>
 8007358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800735c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007368:	f2c1 819a 	blt.w	80086a0 <_ZN15customGraphBaseC1Ev+0x1e94>
            return (int)(fs + 0.5f);
 800736c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007378:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800737c:	4628      	mov	r0, r5
 800737e:	f00b fc90 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007382:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007386:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007448 <_ZN15customGraphBaseC1Ev+0xc3c>
 800738a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800738e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739a:	f2c1 8196 	blt.w	80086ca <_ZN15customGraphBaseC1Ev+0x1ebe>
            return (int)(fs + 0.5f);
 800739e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073aa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073ae:	4628      	mov	r0, r5
 80073b0:	f00b fc77 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073b4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80073b8:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800744c <_ZN15customGraphBaseC1Ev+0xc40>
 80073bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073c0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073cc:	f2c1 8192 	blt.w	80086f4 <_ZN15customGraphBaseC1Ev+0x1ee8>
            return (int)(fs + 0.5f);
 80073d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80073d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073dc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80073e0:	4628      	mov	r0, r5
 80073e2:	f00b fc5e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80073e6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80073ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007450 <_ZN15customGraphBaseC1Ev+0xc44>
 80073ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80073f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80073fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073fe:	f2c1 818e 	blt.w	800871e <_ZN15customGraphBaseC1Ev+0x1f12>
 8007402:	e04d      	b.n	80074a0 <_ZN15customGraphBaseC1Ev+0xc94>
 8007404:	41b85542 	.word	0x41b85542
 8007408:	41c8904d 	.word	0x41c8904d
 800740c:	41fc1b81 	.word	0x41fc1b81
 8007410:	421f766a 	.word	0x421f766a
 8007414:	423d0952 	.word	0x423d0952
 8007418:	424cca6a 	.word	0x424cca6a
 800741c:	4248c84b 	.word	0x4248c84b
 8007420:	4230a5f0 	.word	0x4230a5f0
 8007424:	4209bf36 	.word	0x4209bf36
 8007428:	41bbbd41 	.word	0x41bbbd41
 800742c:	41635399 	.word	0x41635399
 8007430:	411625ee 	.word	0x411625ee
 8007434:	412cf180 	.word	0x412cf180
 8007438:	41974bd1 	.word	0x41974bd1
 800743c:	42026b29 	.word	0x42026b29
 8007440:	42460a65 	.word	0x42460a65
 8007444:	42850387 	.word	0x42850387
 8007448:	42a0e774 	.word	0x42a0e774
 800744c:	42b1d22e 	.word	0x42b1d22e
 8007450:	42b56c82 	.word	0x42b56c82
 8007454:	42ac6728 	.word	0x42ac6728
 8007458:	429a3f75 	.word	0x429a3f75
 800745c:	4284578d 	.word	0x4284578d
 8007460:	426136d1 	.word	0x426136d1
 8007464:	42480fdf 	.word	0x42480fdf
 8007468:	4242e199 	.word	0x4242e199
 800746c:	4251a38e 	.word	0x4251a38e
 8007470:	426eacea 	.word	0x426eacea
 8007474:	42881609 	.word	0x42881609
 8007478:	429554d9 	.word	0x429554d9
 800747c:	4299fc60 	.word	0x4299fc60
 8007480:	4292ecf8 	.word	0x4292ecf8
 8007484:	427fabc7 	.word	0x427fabc7
 8007488:	4246bbd2 	.word	0x4246bbd2
 800748c:	420523a3 	.word	0x420523a3
 8007490:	418eedcb 	.word	0x418eedcb
 8007494:	40ce952d 	.word	0x40ce952d
 8007498:	3fa092cd 	.word	0x3fa092cd
 800749c:	4047b717 	.word	0x4047b717
            return (int)(fs + 0.5f);
 80074a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80074b0:	4628      	mov	r0, r5
 80074b2:	f00b fbf6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80074b6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80074ba:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8007454 <_ZN15customGraphBaseC1Ev+0xc48>
 80074be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074c2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80074c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ce:	f2c1 813b 	blt.w	8008748 <_ZN15customGraphBaseC1Ev+0x1f3c>
            return (int)(fs + 0.5f);
 80074d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074de:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80074e2:	4628      	mov	r0, r5
 80074e4:	f00b fbdd 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80074e8:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80074ec:	ed1f 7a26 	vldr	s14, [pc, #-152]	; 8007458 <_ZN15customGraphBaseC1Ev+0xc4c>
 80074f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80074f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007500:	f2c1 8137 	blt.w	8008772 <_ZN15customGraphBaseC1Ev+0x1f66>
            return (int)(fs + 0.5f);
 8007504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800750c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007510:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007514:	4628      	mov	r0, r5
 8007516:	f00b fbc4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800751a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800751e:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 800745c <_ZN15customGraphBaseC1Ev+0xc50>
 8007522:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007526:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800752a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800752e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007532:	f2c1 8133 	blt.w	800879c <_ZN15customGraphBaseC1Ev+0x1f90>
            return (int)(fs + 0.5f);
 8007536:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800753a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800753e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007542:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007546:	4628      	mov	r0, r5
 8007548:	f00b fbab 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800754c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007550:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8007460 <_ZN15customGraphBaseC1Ev+0xc54>
 8007554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007558:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800755c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007564:	f2c1 812f 	blt.w	80087c6 <_ZN15customGraphBaseC1Ev+0x1fba>
            return (int)(fs + 0.5f);
 8007568:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800756c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007574:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007578:	4628      	mov	r0, r5
 800757a:	f00b fb92 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800757e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007582:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8007464 <_ZN15customGraphBaseC1Ev+0xc58>
 8007586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800758a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800758e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	f2c1 812b 	blt.w	80087f0 <_ZN15customGraphBaseC1Ev+0x1fe4>
            return (int)(fs + 0.5f);
 800759a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800759e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075a6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80075aa:	4628      	mov	r0, r5
 80075ac:	f00b fb79 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075b0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80075b4:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 8007468 <_ZN15customGraphBaseC1Ev+0xc5c>
 80075b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c8:	f2c1 8127 	blt.w	800881a <_ZN15customGraphBaseC1Ev+0x200e>
            return (int)(fs + 0.5f);
 80075cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80075dc:	4628      	mov	r0, r5
 80075de:	f00b fb60 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80075e2:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80075e6:	ed1f 7a5f 	vldr	s14, [pc, #-380]	; 800746c <_ZN15customGraphBaseC1Ev+0xc60>
 80075ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80075f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075fa:	f2c1 8123 	blt.w	8008844 <_ZN15customGraphBaseC1Ev+0x2038>
            return (int)(fs + 0.5f);
 80075fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007602:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800760a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800760e:	4628      	mov	r0, r5
 8007610:	f00b fb47 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007614:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007618:	ed1f 7a6b 	vldr	s14, [pc, #-428]	; 8007470 <_ZN15customGraphBaseC1Ev+0xc64>
 800761c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007620:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007624:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800762c:	f2c1 811f 	blt.w	800886e <_ZN15customGraphBaseC1Ev+0x2062>
            return (int)(fs + 0.5f);
 8007630:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800763c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007640:	4628      	mov	r0, r5
 8007642:	f00b fb2e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007646:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800764a:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8007474 <_ZN15customGraphBaseC1Ev+0xc68>
 800764e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007652:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800765a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765e:	f2c1 811b 	blt.w	8008898 <_ZN15customGraphBaseC1Ev+0x208c>
            return (int)(fs + 0.5f);
 8007662:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800766a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800766e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007672:	4628      	mov	r0, r5
 8007674:	f00b fb15 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007678:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800767c:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8007478 <_ZN15customGraphBaseC1Ev+0xc6c>
 8007680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007684:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800768c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007690:	f2c1 8117 	blt.w	80088c2 <_ZN15customGraphBaseC1Ev+0x20b6>
            return (int)(fs + 0.5f);
 8007694:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007698:	ee77 7a87 	vadd.f32	s15, s15, s14
 800769c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076a0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076a4:	4628      	mov	r0, r5
 80076a6:	f00b fafc 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80076aa:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80076ae:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 800747c <_ZN15customGraphBaseC1Ev+0xc70>
 80076b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c2:	f2c1 8113 	blt.w	80088ec <_ZN15customGraphBaseC1Ev+0x20e0>
            return (int)(fs + 0.5f);
 80076c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076d2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80076d6:	4628      	mov	r0, r5
 80076d8:	f00b fae3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80076dc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80076e0:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8007480 <_ZN15customGraphBaseC1Ev+0xc74>
 80076e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80076ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	f2c1 810f 	blt.w	8008916 <_ZN15customGraphBaseC1Ev+0x210a>
            return (int)(fs + 0.5f);
 80076f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007704:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007708:	4628      	mov	r0, r5
 800770a:	f00b faca 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800770e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007712:	ed1f 7aa4 	vldr	s14, [pc, #-656]	; 8007484 <_ZN15customGraphBaseC1Ev+0xc78>
 8007716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800771a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800771e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	f2c1 810b 	blt.w	8008940 <_ZN15customGraphBaseC1Ev+0x2134>
            return (int)(fs + 0.5f);
 800772a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800772e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007736:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800773a:	4628      	mov	r0, r5
 800773c:	f00b fab1 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007740:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007744:	ed1f 7ab0 	vldr	s14, [pc, #-704]	; 8007488 <_ZN15customGraphBaseC1Ev+0xc7c>
 8007748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800774c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	f2c1 8107 	blt.w	800896a <_ZN15customGraphBaseC1Ev+0x215e>
            return (int)(fs + 0.5f);
 800775c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007768:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800776c:	4628      	mov	r0, r5
 800776e:	f00b fa98 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007772:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007776:	ed1f 7abb 	vldr	s14, [pc, #-748]	; 800748c <_ZN15customGraphBaseC1Ev+0xc80>
 800777a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800777e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	f2c1 8103 	blt.w	8008994 <_ZN15customGraphBaseC1Ev+0x2188>
            return (int)(fs + 0.5f);
 800778e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800779a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800779e:	4628      	mov	r0, r5
 80077a0:	f00b fa7f 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077a4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80077a8:	ed1f 7ac7 	vldr	s14, [pc, #-796]	; 8007490 <_ZN15customGraphBaseC1Ev+0xc84>
 80077ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077bc:	f2c1 80ff 	blt.w	80089be <_ZN15customGraphBaseC1Ev+0x21b2>
            return (int)(fs + 0.5f);
 80077c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80077d0:	4628      	mov	r0, r5
 80077d2:	f00b fa66 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80077d6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80077da:	ed1f 7ad2 	vldr	s14, [pc, #-840]	; 8007494 <_ZN15customGraphBaseC1Ev+0xc88>
 80077de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077e2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80077e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ee:	f2c1 80fb 	blt.w	80089e8 <_ZN15customGraphBaseC1Ev+0x21dc>
            return (int)(fs + 0.5f);
 80077f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077fe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007802:	4628      	mov	r0, r5
 8007804:	f00b fa4d 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007808:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800780c:	ed1f 7ade 	vldr	s14, [pc, #-888]	; 8007498 <_ZN15customGraphBaseC1Ev+0xc8c>
 8007810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007814:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	f2c1 80f7 	blt.w	8008a12 <_ZN15customGraphBaseC1Ev+0x2206>
            return (int)(fs + 0.5f);
 8007824:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800782c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007830:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007834:	4628      	mov	r0, r5
 8007836:	f00b fa34 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800783a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800783e:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 800749c <_ZN15customGraphBaseC1Ev+0xc90>
 8007842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007846:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800784a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	f2c1 80f3 	blt.w	8008a3c <_ZN15customGraphBaseC1Ev+0x2230>
            return (int)(fs + 0.5f);
 8007856:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800785a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800785e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007862:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007866:	4628      	mov	r0, r5
 8007868:	f00b fa1b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800786c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007870:	ed9f 7af3 	vldr	s14, [pc, #972]	; 8007c40 <_ZN15customGraphBaseC1Ev+0x1434>
 8007874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007878:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800787c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007884:	f2c1 80ef 	blt.w	8008a66 <_ZN15customGraphBaseC1Ev+0x225a>
            return (int)(fs + 0.5f);
 8007888:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800788c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007894:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007898:	4628      	mov	r0, r5
 800789a:	f00b fa02 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800789e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80078a2:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8007c44 <_ZN15customGraphBaseC1Ev+0x1438>
 80078a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b6:	f2c1 80eb 	blt.w	8008a90 <_ZN15customGraphBaseC1Ev+0x2284>
            return (int)(fs + 0.5f);
 80078ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078c6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078ca:	4628      	mov	r0, r5
 80078cc:	f00b f9e9 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80078d0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80078d4:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8007c48 <_ZN15customGraphBaseC1Ev+0x143c>
 80078d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078dc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80078e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80078e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e8:	f2c1 80e7 	blt.w	8008aba <_ZN15customGraphBaseC1Ev+0x22ae>
            return (int)(fs + 0.5f);
 80078ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80078f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078f8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80078fc:	4628      	mov	r0, r5
 80078fe:	f00b f9d0 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007902:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007906:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8007c4c <_ZN15customGraphBaseC1Ev+0x1440>
 800790a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800790e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007912:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791a:	f2c1 80e3 	blt.w	8008ae4 <_ZN15customGraphBaseC1Ev+0x22d8>
            return (int)(fs + 0.5f);
 800791e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007922:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800792a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800792e:	4628      	mov	r0, r5
 8007930:	f00b f9b7 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007934:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007938:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8007c50 <_ZN15customGraphBaseC1Ev+0x1444>
 800793c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007940:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800794c:	f2c1 80df 	blt.w	8008b0e <_ZN15customGraphBaseC1Ev+0x2302>
            return (int)(fs + 0.5f);
 8007950:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800795c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007960:	4628      	mov	r0, r5
 8007962:	f00b f99e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007966:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800796a:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8007c54 <_ZN15customGraphBaseC1Ev+0x1448>
 800796e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007972:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800797a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797e:	f2c1 80db 	blt.w	8008b38 <_ZN15customGraphBaseC1Ev+0x232c>
            return (int)(fs + 0.5f);
 8007982:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800798a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800798e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007992:	4628      	mov	r0, r5
 8007994:	f00b f985 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007998:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 800799c:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007c58 <_ZN15customGraphBaseC1Ev+0x144c>
 80079a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b0:	f2c1 80d7 	blt.w	8008b62 <_ZN15customGraphBaseC1Ev+0x2356>
            return (int)(fs + 0.5f);
 80079b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80079b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079c4:	4628      	mov	r0, r5
 80079c6:	f00b f96c 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079ca:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80079ce:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007c5c <_ZN15customGraphBaseC1Ev+0x1450>
 80079d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80079da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80079de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e2:	f2c1 80d3 	blt.w	8008b8c <_ZN15customGraphBaseC1Ev+0x2380>
            return (int)(fs + 0.5f);
 80079e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80079ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80079f2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80079f6:	4628      	mov	r0, r5
 80079f8:	f00b f953 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80079fc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a00:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8007c60 <_ZN15customGraphBaseC1Ev+0x1454>
 8007a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a14:	f2c1 80cf 	blt.w	8008bb6 <_ZN15customGraphBaseC1Ev+0x23aa>
            return (int)(fs + 0.5f);
 8007a18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a28:	4628      	mov	r0, r5
 8007a2a:	f00b f93a 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a2e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a32:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007c64 <_ZN15customGraphBaseC1Ev+0x1458>
 8007a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	f2c1 80cb 	blt.w	8008be0 <_ZN15customGraphBaseC1Ev+0x23d4>
            return (int)(fs + 0.5f);
 8007a4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a56:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f00b f921 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a60:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a64:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007c68 <_ZN15customGraphBaseC1Ev+0x145c>
 8007a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a78:	f2c1 80c7 	blt.w	8008c0a <_ZN15customGraphBaseC1Ev+0x23fe>
            return (int)(fs + 0.5f);
 8007a7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a88:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f00b f908 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007a92:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007a96:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8007c6c <_ZN15customGraphBaseC1Ev+0x1460>
 8007a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aaa:	f2c1 80c3 	blt.w	8008c34 <_ZN15customGraphBaseC1Ev+0x2428>
            return (int)(fs + 0.5f);
 8007aae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007ab2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aba:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f00b f8ef 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007ac4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ac8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8007c70 <_ZN15customGraphBaseC1Ev+0x1464>
 8007acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007adc:	f2c1 80bf 	blt.w	8008c5e <_ZN15customGraphBaseC1Ev+0x2452>
            return (int)(fs + 0.5f);
 8007ae0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007aec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007af0:	4628      	mov	r0, r5
 8007af2:	f00b f8d6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007af6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007afa:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007c74 <_ZN15customGraphBaseC1Ev+0x1468>
 8007afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	f2c1 80bb 	blt.w	8008c88 <_ZN15customGraphBaseC1Ev+0x247c>
            return (int)(fs + 0.5f);
 8007b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b1e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b22:	4628      	mov	r0, r5
 8007b24:	f00b f8bd 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b28:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b2c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8007c78 <_ZN15customGraphBaseC1Ev+0x146c>
 8007b30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b34:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b40:	f2c1 80b7 	blt.w	8008cb2 <_ZN15customGraphBaseC1Ev+0x24a6>
            return (int)(fs + 0.5f);
 8007b44:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b50:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b54:	4628      	mov	r0, r5
 8007b56:	f00b f8a4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b5a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b5e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8007c7c <_ZN15customGraphBaseC1Ev+0x1470>
 8007b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b66:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b72:	f2c1 80b3 	blt.w	8008cdc <_ZN15customGraphBaseC1Ev+0x24d0>
            return (int)(fs + 0.5f);
 8007b76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b82:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007b86:	4628      	mov	r0, r5
 8007b88:	f00b f88b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007b8c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007b90:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007c80 <_ZN15customGraphBaseC1Ev+0x1474>
 8007b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b98:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba4:	f2c1 80af 	blt.w	8008d06 <_ZN15customGraphBaseC1Ev+0x24fa>
            return (int)(fs + 0.5f);
 8007ba8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f00b f872 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007bbe:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007bc2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007c84 <_ZN15customGraphBaseC1Ev+0x1478>
 8007bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	f2c1 80ab 	blt.w	8008d30 <_ZN15customGraphBaseC1Ev+0x2524>
            return (int)(fs + 0.5f);
 8007bda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007be2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007be6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007bea:	4628      	mov	r0, r5
 8007bec:	f00b f859 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007bf0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007bf4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8007c88 <_ZN15customGraphBaseC1Ev+0x147c>
 8007bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c08:	f2c1 80a7 	blt.w	8008d5a <_ZN15customGraphBaseC1Ev+0x254e>
            return (int)(fs + 0.5f);
 8007c0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c18:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f00b f840 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007c22:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007c26:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007c8c <_ZN15customGraphBaseC1Ev+0x1480>
 8007c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c3a:	f2c1 80a3 	blt.w	8008d84 <_ZN15customGraphBaseC1Ev+0x2578>
 8007c3e:	e03f      	b.n	8007cc0 <_ZN15customGraphBaseC1Ev+0x14b4>
 8007c40:	4136031d 	.word	0x4136031d
 8007c44:	41bfd830 	.word	0x41bfd830
 8007c48:	421822de 	.word	0x421822de
 8007c4c:	4249e849 	.word	0x4249e849
 8007c50:	426b4cc0 	.word	0x426b4cc0
 8007c54:	42770597 	.word	0x42770597
 8007c58:	426d9b64 	.word	0x426d9b64
 8007c5c:	425525bc 	.word	0x425525bc
 8007c60:	4237a6ca 	.word	0x4237a6ca
 8007c64:	42206ee4 	.word	0x42206ee4
 8007c68:	42192db9 	.word	0x42192db9
 8007c6c:	42276a58 	.word	0x42276a58
 8007c70:	424b026b 	.word	0x424b026b
 8007c74:	427e1072 	.word	0x427e1072
 8007c78:	429b204b 	.word	0x429b204b
 8007c7c:	42b3a0e0 	.word	0x42b3a0e0
 8007c80:	42c2dd76 	.word	0x42c2dd76
 8007c84:	42c505e5 	.word	0x42c505e5
 8007c88:	42b9162d 	.word	0x42b9162d
 8007c8c:	42a11b20 	.word	0x42a11b20
 8007c90:	4281bacc 	.word	0x4281bacc
 8007c94:	42423b18 	.word	0x42423b18
 8007c98:	420af763 	.word	0x420af763
 8007c9c:	41cea69b 	.word	0x41cea69b
 8007ca0:	41b7f3d6 	.word	0x41b7f3d6
 8007ca4:	41cf3adc 	.word	0x41cf3adc
 8007ca8:	42037286 	.word	0x42037286
 8007cac:	42250275 	.word	0x42250275
 8007cb0:	4240e02d 	.word	0x4240e02d
 8007cb4:	424d953a 	.word	0x424d953a
 8007cb8:	42460dc6 	.word	0x42460dc6
 8007cbc:	422aeaf2 	.word	0x422aeaf2
            return (int)(fs + 0.5f);
 8007cc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ccc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f00a ffe6 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007cd6:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007cda:	ed1f 7a13 	vldr	s14, [pc, #-76]	; 8007c90 <_ZN15customGraphBaseC1Ev+0x1484>
 8007cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cee:	f2c1 805e 	blt.w	8008dae <_ZN15customGraphBaseC1Ev+0x25a2>
            return (int)(fs + 0.5f);
 8007cf2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cfe:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d02:	4628      	mov	r0, r5
 8007d04:	f00a ffcd 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d08:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d0c:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 8007c94 <_ZN15customGraphBaseC1Ev+0x1488>
 8007d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d20:	f2c1 805a 	blt.w	8008dd8 <_ZN15customGraphBaseC1Ev+0x25cc>
            return (int)(fs + 0.5f);
 8007d24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d34:	4628      	mov	r0, r5
 8007d36:	f00a ffb4 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d3a:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d3e:	ed1f 7a2a 	vldr	s14, [pc, #-168]	; 8007c98 <_ZN15customGraphBaseC1Ev+0x148c>
 8007d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d46:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d52:	f2c1 8056 	blt.w	8008e02 <_ZN15customGraphBaseC1Ev+0x25f6>
            return (int)(fs + 0.5f);
 8007d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d62:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d66:	4628      	mov	r0, r5
 8007d68:	f00a ff9b 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d6c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007d70:	ed1f 7a36 	vldr	s14, [pc, #-216]	; 8007c9c <_ZN15customGraphBaseC1Ev+0x1490>
 8007d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d78:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007d7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d84:	f2c1 8052 	blt.w	8008e2c <_ZN15customGraphBaseC1Ev+0x2620>
            return (int)(fs + 0.5f);
 8007d88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d94:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f00a ff82 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007d9e:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007da2:	ed1f 7a41 	vldr	s14, [pc, #-260]	; 8007ca0 <_ZN15customGraphBaseC1Ev+0x1494>
 8007da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007daa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db6:	f2c1 804e 	blt.w	8008e56 <_ZN15customGraphBaseC1Ev+0x264a>
            return (int)(fs + 0.5f);
 8007dba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007dc6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f00a ff69 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007dd0:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007dd4:	ed1f 7a4d 	vldr	s14, [pc, #-308]	; 8007ca4 <_ZN15customGraphBaseC1Ev+0x1498>
 8007dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007de0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de8:	f2c1 804a 	blt.w	8008e80 <_ZN15customGraphBaseC1Ev+0x2674>
            return (int)(fs + 0.5f);
 8007dec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007df8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	f00a ff50 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e02:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e06:	ed1f 7a58 	vldr	s14, [pc, #-352]	; 8007ca8 <_ZN15customGraphBaseC1Ev+0x149c>
 8007e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	f2c1 8046 	blt.w	8008eaa <_ZN15customGraphBaseC1Ev+0x269e>
            return (int)(fs + 0.5f);
 8007e1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e2a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e2e:	4628      	mov	r0, r5
 8007e30:	f00a ff37 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e34:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e38:	ed1f 7a64 	vldr	s14, [pc, #-400]	; 8007cac <_ZN15customGraphBaseC1Ev+0x14a0>
 8007e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e40:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e4c:	f2c1 8042 	blt.w	8008ed4 <_ZN15customGraphBaseC1Ev+0x26c8>
            return (int)(fs + 0.5f);
 8007e50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e5c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e60:	4628      	mov	r0, r5
 8007e62:	f00a ff1e 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e66:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e6a:	ed1f 7a6f 	vldr	s14, [pc, #-444]	; 8007cb0 <_ZN15customGraphBaseC1Ev+0x14a4>
 8007e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e72:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7e:	f2c1 803e 	blt.w	8008efe <_ZN15customGraphBaseC1Ev+0x26f2>
            return (int)(fs + 0.5f);
 8007e82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007e86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e8e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007e92:	4628      	mov	r0, r5
 8007e94:	f00a ff05 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007e98:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007e9c:	ed1f 7a7b 	vldr	s14, [pc, #-492]	; 8007cb4 <_ZN15customGraphBaseC1Ev+0x14a8>
 8007ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007ea8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	f2c1 803a 	blt.w	8008f28 <_ZN15customGraphBaseC1Ev+0x271c>
            return (int)(fs + 0.5f);
 8007eb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007eb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f00a feec 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007eca:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007ece:	ed1f 7a86 	vldr	s14, [pc, #-536]	; 8007cb8 <_ZN15customGraphBaseC1Ev+0x14ac>
 8007ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee2:	f2c1 8036 	blt.w	8008f52 <_ZN15customGraphBaseC1Ev+0x2746>
            return (int)(fs + 0.5f);
 8007ee6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ef2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f00a fed3 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8007efc:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8007f00:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8007cbc <_ZN15customGraphBaseC1Ev+0x14b0>
 8007f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8007f0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f14:	f2c1 8032 	blt.w	8008f7c <_ZN15customGraphBaseC1Ev+0x2770>
            return (int)(fs + 0.5f);
 8007f18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f24:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f00a feba 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
    add(dynamicGraph1);
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f008 fff3 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8007f36:	4620      	mov	r0, r4
 8007f38:	b005      	add	sp, #20
 8007f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8007f3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f46:	ee17 3a10 	vmov	r3, s14
 8007f4a:	1e59      	subs	r1, r3, #1
 8007f4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f50:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f5c:	ee17 3a90 	vmov	r3, s15
 8007f60:	440b      	add	r3, r1
 8007f62:	4619      	mov	r1, r3
 8007f64:	f7fe bd55 	b.w	8006a12 <_ZN15customGraphBaseC1Ev+0x206>
 8007f68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f6c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f70:	ee17 3a10 	vmov	r3, s14
 8007f74:	1e59      	subs	r1, r3, #1
 8007f76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f7a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f86:	ee17 3a90 	vmov	r3, s15
 8007f8a:	440b      	add	r3, r1
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f7fe bd59 	b.w	8006a44 <_ZN15customGraphBaseC1Ev+0x238>
 8007f92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007f96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007f9a:	ee17 3a10 	vmov	r3, s14
 8007f9e:	1e59      	subs	r1, r3, #1
 8007fa0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fa4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007fa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fb0:	ee17 3a90 	vmov	r3, s15
 8007fb4:	440b      	add	r3, r1
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f7fe bd5d 	b.w	8006a76 <_ZN15customGraphBaseC1Ev+0x26a>
 8007fbc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fc0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007fc4:	ee17 3a10 	vmov	r3, s14
 8007fc8:	1e59      	subs	r1, r3, #1
 8007fca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007fda:	ee17 3a90 	vmov	r3, s15
 8007fde:	440b      	add	r3, r1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	f7fe bd61 	b.w	8006aa8 <_ZN15customGraphBaseC1Ev+0x29c>
 8007fe6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007fee:	ee17 3a10 	vmov	r3, s14
 8007ff2:	1e59      	subs	r1, r3, #1
 8007ff4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ff8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007ffc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008004:	ee17 3a90 	vmov	r3, s15
 8008008:	440b      	add	r3, r1
 800800a:	4619      	mov	r1, r3
 800800c:	f7fe bd65 	b.w	8006ada <_ZN15customGraphBaseC1Ev+0x2ce>
 8008010:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008014:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008018:	ee17 3a10 	vmov	r3, s14
 800801c:	1e59      	subs	r1, r3, #1
 800801e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008022:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800802a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800802e:	ee17 3a90 	vmov	r3, s15
 8008032:	440b      	add	r3, r1
 8008034:	4619      	mov	r1, r3
 8008036:	f7fe bd69 	b.w	8006b0c <_ZN15customGraphBaseC1Ev+0x300>
 800803a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800803e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008042:	ee17 3a10 	vmov	r3, s14
 8008046:	1e59      	subs	r1, r3, #1
 8008048:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800804c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008058:	ee17 3a90 	vmov	r3, s15
 800805c:	440b      	add	r3, r1
 800805e:	4619      	mov	r1, r3
 8008060:	f7fe bd6d 	b.w	8006b3e <_ZN15customGraphBaseC1Ev+0x332>
 8008064:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008068:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800806c:	ee17 3a10 	vmov	r3, s14
 8008070:	1e59      	subs	r1, r3, #1
 8008072:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008076:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008082:	ee17 3a90 	vmov	r3, s15
 8008086:	440b      	add	r3, r1
 8008088:	4619      	mov	r1, r3
 800808a:	f7fe bd71 	b.w	8006b70 <_ZN15customGraphBaseC1Ev+0x364>
 800808e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008092:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008096:	ee17 3a10 	vmov	r3, s14
 800809a:	1e59      	subs	r1, r3, #1
 800809c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080a0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80080a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ac:	ee17 3a90 	vmov	r3, s15
 80080b0:	440b      	add	r3, r1
 80080b2:	4619      	mov	r1, r3
 80080b4:	f7fe bd75 	b.w	8006ba2 <_ZN15customGraphBaseC1Ev+0x396>
 80080b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080bc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080c0:	ee17 3a10 	vmov	r3, s14
 80080c4:	1e59      	subs	r1, r3, #1
 80080c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080ca:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080d6:	ee17 3a90 	vmov	r3, s15
 80080da:	440b      	add	r3, r1
 80080dc:	4619      	mov	r1, r3
 80080de:	f7fe bdc9 	b.w	8006c74 <_ZN15customGraphBaseC1Ev+0x468>
 80080e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80080e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80080ea:	ee17 3a10 	vmov	r3, s14
 80080ee:	1e59      	subs	r1, r3, #1
 80080f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080f4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80080f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008100:	ee17 3a90 	vmov	r3, s15
 8008104:	440b      	add	r3, r1
 8008106:	4619      	mov	r1, r3
 8008108:	f7fe bdcd 	b.w	8006ca6 <_ZN15customGraphBaseC1Ev+0x49a>
 800810c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008110:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008114:	ee17 3a10 	vmov	r3, s14
 8008118:	1e59      	subs	r1, r3, #1
 800811a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800811e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800812a:	ee17 3a90 	vmov	r3, s15
 800812e:	440b      	add	r3, r1
 8008130:	4619      	mov	r1, r3
 8008132:	f7fe bdd1 	b.w	8006cd8 <_ZN15customGraphBaseC1Ev+0x4cc>
 8008136:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800813a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800813e:	ee17 3a10 	vmov	r3, s14
 8008142:	1e59      	subs	r1, r3, #1
 8008144:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008148:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800814c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008154:	ee17 3a90 	vmov	r3, s15
 8008158:	440b      	add	r3, r1
 800815a:	4619      	mov	r1, r3
 800815c:	f7fe bdd5 	b.w	8006d0a <_ZN15customGraphBaseC1Ev+0x4fe>
 8008160:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008164:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008168:	ee17 3a10 	vmov	r3, s14
 800816c:	1e59      	subs	r1, r3, #1
 800816e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008172:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800817e:	ee17 3a90 	vmov	r3, s15
 8008182:	440b      	add	r3, r1
 8008184:	4619      	mov	r1, r3
 8008186:	f7fe bdd9 	b.w	8006d3c <_ZN15customGraphBaseC1Ev+0x530>
 800818a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800818e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008192:	ee17 3a10 	vmov	r3, s14
 8008196:	1e59      	subs	r1, r3, #1
 8008198:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800819c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80081a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081a8:	ee17 3a90 	vmov	r3, s15
 80081ac:	440b      	add	r3, r1
 80081ae:	4619      	mov	r1, r3
 80081b0:	f7fe bddd 	b.w	8006d6e <_ZN15customGraphBaseC1Ev+0x562>
 80081b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081bc:	ee17 3a10 	vmov	r3, s14
 80081c0:	1e59      	subs	r1, r3, #1
 80081c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081c6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081d2:	ee17 3a90 	vmov	r3, s15
 80081d6:	440b      	add	r3, r1
 80081d8:	4619      	mov	r1, r3
 80081da:	f7fe bde1 	b.w	8006da0 <_ZN15customGraphBaseC1Ev+0x594>
 80081de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80081e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80081e6:	ee17 3a10 	vmov	r3, s14
 80081ea:	1e59      	subs	r1, r3, #1
 80081ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081f0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80081f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80081fc:	ee17 3a90 	vmov	r3, s15
 8008200:	440b      	add	r3, r1
 8008202:	4619      	mov	r1, r3
 8008204:	f7fe bde5 	b.w	8006dd2 <_ZN15customGraphBaseC1Ev+0x5c6>
 8008208:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800820c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008210:	ee17 3a10 	vmov	r3, s14
 8008214:	1e59      	subs	r1, r3, #1
 8008216:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800821a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800821e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008226:	ee17 3a90 	vmov	r3, s15
 800822a:	440b      	add	r3, r1
 800822c:	4619      	mov	r1, r3
 800822e:	f7fe bde9 	b.w	8006e04 <_ZN15customGraphBaseC1Ev+0x5f8>
 8008232:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008236:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800823a:	ee17 3a10 	vmov	r3, s14
 800823e:	1e59      	subs	r1, r3, #1
 8008240:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008244:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800824c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008250:	ee17 3a90 	vmov	r3, s15
 8008254:	440b      	add	r3, r1
 8008256:	4619      	mov	r1, r3
 8008258:	f7fe bded 	b.w	8006e36 <_ZN15customGraphBaseC1Ev+0x62a>
 800825c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008260:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008264:	ee17 3a10 	vmov	r3, s14
 8008268:	1e59      	subs	r1, r3, #1
 800826a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800826e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800827a:	ee17 3a90 	vmov	r3, s15
 800827e:	440b      	add	r3, r1
 8008280:	4619      	mov	r1, r3
 8008282:	f7fe bdf1 	b.w	8006e68 <_ZN15customGraphBaseC1Ev+0x65c>
 8008286:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800828a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800828e:	ee17 3a10 	vmov	r3, s14
 8008292:	1e59      	subs	r1, r3, #1
 8008294:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008298:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800829c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082a4:	ee17 3a90 	vmov	r3, s15
 80082a8:	440b      	add	r3, r1
 80082aa:	4619      	mov	r1, r3
 80082ac:	f7fe bdf5 	b.w	8006e9a <_ZN15customGraphBaseC1Ev+0x68e>
 80082b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082b8:	ee17 3a10 	vmov	r3, s14
 80082bc:	1e59      	subs	r1, r3, #1
 80082be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082c2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80082c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082ce:	ee17 3a90 	vmov	r3, s15
 80082d2:	440b      	add	r3, r1
 80082d4:	4619      	mov	r1, r3
 80082d6:	f7fe bdf9 	b.w	8006ecc <_ZN15customGraphBaseC1Ev+0x6c0>
 80082da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80082de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80082e2:	ee17 3a10 	vmov	r3, s14
 80082e6:	1e59      	subs	r1, r3, #1
 80082e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80082ec:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80082f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f8:	ee17 3a90 	vmov	r3, s15
 80082fc:	440b      	add	r3, r1
 80082fe:	4619      	mov	r1, r3
 8008300:	f7fe bdfd 	b.w	8006efe <_ZN15customGraphBaseC1Ev+0x6f2>
 8008304:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008308:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800830c:	ee17 3a10 	vmov	r3, s14
 8008310:	1e59      	subs	r1, r3, #1
 8008312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008316:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800831a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800831e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008322:	ee17 3a90 	vmov	r3, s15
 8008326:	440b      	add	r3, r1
 8008328:	4619      	mov	r1, r3
 800832a:	f7fe be01 	b.w	8006f30 <_ZN15customGraphBaseC1Ev+0x724>
 800832e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008332:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008336:	ee17 3a10 	vmov	r3, s14
 800833a:	1e59      	subs	r1, r3, #1
 800833c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008340:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800834c:	ee17 3a90 	vmov	r3, s15
 8008350:	440b      	add	r3, r1
 8008352:	4619      	mov	r1, r3
 8008354:	f7fe be05 	b.w	8006f62 <_ZN15customGraphBaseC1Ev+0x756>
 8008358:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800835c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008360:	ee17 3a10 	vmov	r3, s14
 8008364:	1e59      	subs	r1, r3, #1
 8008366:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800836a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800836e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008376:	ee17 3a90 	vmov	r3, s15
 800837a:	440b      	add	r3, r1
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe be09 	b.w	8006f94 <_ZN15customGraphBaseC1Ev+0x788>
 8008382:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008386:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800838a:	ee17 3a10 	vmov	r3, s14
 800838e:	1e59      	subs	r1, r3, #1
 8008390:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008394:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083a0:	ee17 3a90 	vmov	r3, s15
 80083a4:	440b      	add	r3, r1
 80083a6:	4619      	mov	r1, r3
 80083a8:	f7fe be0d 	b.w	8006fc6 <_ZN15customGraphBaseC1Ev+0x7ba>
 80083ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083b4:	ee17 3a10 	vmov	r3, s14
 80083b8:	1e59      	subs	r1, r3, #1
 80083ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083be:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083ca:	ee17 3a90 	vmov	r3, s15
 80083ce:	440b      	add	r3, r1
 80083d0:	4619      	mov	r1, r3
 80083d2:	f7fe be11 	b.w	8006ff8 <_ZN15customGraphBaseC1Ev+0x7ec>
 80083d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80083da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80083de:	ee17 3a10 	vmov	r3, s14
 80083e2:	1e59      	subs	r1, r3, #1
 80083e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80083e8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80083ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083f4:	ee17 3a90 	vmov	r3, s15
 80083f8:	440b      	add	r3, r1
 80083fa:	4619      	mov	r1, r3
 80083fc:	f7fe be15 	b.w	800702a <_ZN15customGraphBaseC1Ev+0x81e>
 8008400:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008404:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008408:	ee17 3a10 	vmov	r3, s14
 800840c:	1e59      	subs	r1, r3, #1
 800840e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008412:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800841a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841e:	ee17 3a90 	vmov	r3, s15
 8008422:	440b      	add	r3, r1
 8008424:	4619      	mov	r1, r3
 8008426:	f7fe be19 	b.w	800705c <_ZN15customGraphBaseC1Ev+0x850>
 800842a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800842e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008432:	ee17 3a10 	vmov	r3, s14
 8008436:	1e59      	subs	r1, r3, #1
 8008438:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800843c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008448:	ee17 3a90 	vmov	r3, s15
 800844c:	440b      	add	r3, r1
 800844e:	4619      	mov	r1, r3
 8008450:	f7fe be1d 	b.w	800708e <_ZN15customGraphBaseC1Ev+0x882>
 8008454:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008458:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800845c:	ee17 3a10 	vmov	r3, s14
 8008460:	1e59      	subs	r1, r3, #1
 8008462:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008466:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008472:	ee17 3a90 	vmov	r3, s15
 8008476:	440b      	add	r3, r1
 8008478:	4619      	mov	r1, r3
 800847a:	f7fe be21 	b.w	80070c0 <_ZN15customGraphBaseC1Ev+0x8b4>
 800847e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008482:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008486:	ee17 3a10 	vmov	r3, s14
 800848a:	1e59      	subs	r1, r3, #1
 800848c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008490:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800849c:	ee17 3a90 	vmov	r3, s15
 80084a0:	440b      	add	r3, r1
 80084a2:	4619      	mov	r1, r3
 80084a4:	f7fe be25 	b.w	80070f2 <_ZN15customGraphBaseC1Ev+0x8e6>
 80084a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084b0:	ee17 3a10 	vmov	r3, s14
 80084b4:	1e59      	subs	r1, r3, #1
 80084b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084ba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80084be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c6:	ee17 3a90 	vmov	r3, s15
 80084ca:	440b      	add	r3, r1
 80084cc:	4619      	mov	r1, r3
 80084ce:	f7fe be29 	b.w	8007124 <_ZN15customGraphBaseC1Ev+0x918>
 80084d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80084d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80084da:	ee17 3a10 	vmov	r3, s14
 80084de:	1e59      	subs	r1, r3, #1
 80084e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80084e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80084e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084f0:	ee17 3a90 	vmov	r3, s15
 80084f4:	440b      	add	r3, r1
 80084f6:	4619      	mov	r1, r3
 80084f8:	f7fe be2d 	b.w	8007156 <_ZN15customGraphBaseC1Ev+0x94a>
 80084fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008500:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008504:	ee17 3a10 	vmov	r3, s14
 8008508:	1e59      	subs	r1, r3, #1
 800850a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800850e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800851a:	ee17 3a90 	vmov	r3, s15
 800851e:	440b      	add	r3, r1
 8008520:	4619      	mov	r1, r3
 8008522:	f7fe be31 	b.w	8007188 <_ZN15customGraphBaseC1Ev+0x97c>
 8008526:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800852a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800852e:	ee17 3a10 	vmov	r3, s14
 8008532:	1e59      	subs	r1, r3, #1
 8008534:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008538:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800853c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008540:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008544:	ee17 3a90 	vmov	r3, s15
 8008548:	440b      	add	r3, r1
 800854a:	4619      	mov	r1, r3
 800854c:	f7fe be35 	b.w	80071ba <_ZN15customGraphBaseC1Ev+0x9ae>
 8008550:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008554:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008558:	ee17 3a10 	vmov	r3, s14
 800855c:	1e59      	subs	r1, r3, #1
 800855e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008562:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800856e:	ee17 3a90 	vmov	r3, s15
 8008572:	440b      	add	r3, r1
 8008574:	4619      	mov	r1, r3
 8008576:	f7fe be39 	b.w	80071ec <_ZN15customGraphBaseC1Ev+0x9e0>
 800857a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800857e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008582:	ee17 3a10 	vmov	r3, s14
 8008586:	1e59      	subs	r1, r3, #1
 8008588:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800858c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008598:	ee17 3a90 	vmov	r3, s15
 800859c:	440b      	add	r3, r1
 800859e:	4619      	mov	r1, r3
 80085a0:	f7fe be3d 	b.w	800721e <_ZN15customGraphBaseC1Ev+0xa12>
 80085a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085ac:	ee17 3a10 	vmov	r3, s14
 80085b0:	1e59      	subs	r1, r3, #1
 80085b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085c2:	ee17 3a90 	vmov	r3, s15
 80085c6:	440b      	add	r3, r1
 80085c8:	4619      	mov	r1, r3
 80085ca:	f7fe be41 	b.w	8007250 <_ZN15customGraphBaseC1Ev+0xa44>
 80085ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80085d6:	ee17 3a10 	vmov	r3, s14
 80085da:	1e59      	subs	r1, r3, #1
 80085dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80085e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085ec:	ee17 3a90 	vmov	r3, s15
 80085f0:	440b      	add	r3, r1
 80085f2:	4619      	mov	r1, r3
 80085f4:	f7fe be45 	b.w	8007282 <_ZN15customGraphBaseC1Ev+0xa76>
 80085f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80085fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008600:	ee17 3a10 	vmov	r3, s14
 8008604:	1e59      	subs	r1, r3, #1
 8008606:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800860a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008616:	ee17 3a90 	vmov	r3, s15
 800861a:	440b      	add	r3, r1
 800861c:	4619      	mov	r1, r3
 800861e:	f7fe be49 	b.w	80072b4 <_ZN15customGraphBaseC1Ev+0xaa8>
 8008622:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008626:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800862a:	ee17 3a10 	vmov	r3, s14
 800862e:	1e59      	subs	r1, r3, #1
 8008630:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008634:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008640:	ee17 3a90 	vmov	r3, s15
 8008644:	440b      	add	r3, r1
 8008646:	4619      	mov	r1, r3
 8008648:	f7fe be4d 	b.w	80072e6 <_ZN15customGraphBaseC1Ev+0xada>
 800864c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008650:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008654:	ee17 3a10 	vmov	r3, s14
 8008658:	1e59      	subs	r1, r3, #1
 800865a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800865e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800866a:	ee17 3a90 	vmov	r3, s15
 800866e:	440b      	add	r3, r1
 8008670:	4619      	mov	r1, r3
 8008672:	f7fe be51 	b.w	8007318 <_ZN15customGraphBaseC1Ev+0xb0c>
 8008676:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800867a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800867e:	ee17 3a10 	vmov	r3, s14
 8008682:	1e59      	subs	r1, r3, #1
 8008684:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008688:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800868c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008694:	ee17 3a90 	vmov	r3, s15
 8008698:	440b      	add	r3, r1
 800869a:	4619      	mov	r1, r3
 800869c:	f7fe be55 	b.w	800734a <_ZN15customGraphBaseC1Ev+0xb3e>
 80086a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086a8:	ee17 3a10 	vmov	r3, s14
 80086ac:	1e59      	subs	r1, r3, #1
 80086ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086b2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086be:	ee17 3a90 	vmov	r3, s15
 80086c2:	440b      	add	r3, r1
 80086c4:	4619      	mov	r1, r3
 80086c6:	f7fe be59 	b.w	800737c <_ZN15customGraphBaseC1Ev+0xb70>
 80086ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086ce:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086d2:	ee17 3a10 	vmov	r3, s14
 80086d6:	1e59      	subs	r1, r3, #1
 80086d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80086dc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80086e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086e8:	ee17 3a90 	vmov	r3, s15
 80086ec:	440b      	add	r3, r1
 80086ee:	4619      	mov	r1, r3
 80086f0:	f7fe be5d 	b.w	80073ae <_ZN15customGraphBaseC1Ev+0xba2>
 80086f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80086f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80086fc:	ee17 3a10 	vmov	r3, s14
 8008700:	1e59      	subs	r1, r3, #1
 8008702:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008706:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008712:	ee17 3a90 	vmov	r3, s15
 8008716:	440b      	add	r3, r1
 8008718:	4619      	mov	r1, r3
 800871a:	f7fe be61 	b.w	80073e0 <_ZN15customGraphBaseC1Ev+0xbd4>
 800871e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008722:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008726:	ee17 3a10 	vmov	r3, s14
 800872a:	1e59      	subs	r1, r3, #1
 800872c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008730:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800873c:	ee17 3a90 	vmov	r3, s15
 8008740:	440b      	add	r3, r1
 8008742:	4619      	mov	r1, r3
 8008744:	f7fe beb4 	b.w	80074b0 <_ZN15customGraphBaseC1Ev+0xca4>
 8008748:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800874c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008750:	ee17 3a10 	vmov	r3, s14
 8008754:	1e59      	subs	r1, r3, #1
 8008756:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800875a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800875e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008766:	ee17 3a90 	vmov	r3, s15
 800876a:	440b      	add	r3, r1
 800876c:	4619      	mov	r1, r3
 800876e:	f7fe beb8 	b.w	80074e2 <_ZN15customGraphBaseC1Ev+0xcd6>
 8008772:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008776:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800877a:	ee17 3a10 	vmov	r3, s14
 800877e:	1e59      	subs	r1, r3, #1
 8008780:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008784:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008788:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800878c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008790:	ee17 3a90 	vmov	r3, s15
 8008794:	440b      	add	r3, r1
 8008796:	4619      	mov	r1, r3
 8008798:	f7fe bebc 	b.w	8007514 <_ZN15customGraphBaseC1Ev+0xd08>
 800879c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087a0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087a4:	ee17 3a10 	vmov	r3, s14
 80087a8:	1e59      	subs	r1, r3, #1
 80087aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087ae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80087b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087ba:	ee17 3a90 	vmov	r3, s15
 80087be:	440b      	add	r3, r1
 80087c0:	4619      	mov	r1, r3
 80087c2:	f7fe bec0 	b.w	8007546 <_ZN15customGraphBaseC1Ev+0xd3a>
 80087c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087ca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087ce:	ee17 3a10 	vmov	r3, s14
 80087d2:	1e59      	subs	r1, r3, #1
 80087d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80087d8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80087dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087e4:	ee17 3a90 	vmov	r3, s15
 80087e8:	440b      	add	r3, r1
 80087ea:	4619      	mov	r1, r3
 80087ec:	f7fe bec4 	b.w	8007578 <_ZN15customGraphBaseC1Ev+0xd6c>
 80087f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80087f4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80087f8:	ee17 3a10 	vmov	r3, s14
 80087fc:	1e59      	subs	r1, r3, #1
 80087fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008802:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800880a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800880e:	ee17 3a90 	vmov	r3, s15
 8008812:	440b      	add	r3, r1
 8008814:	4619      	mov	r1, r3
 8008816:	f7fe bec8 	b.w	80075aa <_ZN15customGraphBaseC1Ev+0xd9e>
 800881a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800881e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008822:	ee17 3a10 	vmov	r3, s14
 8008826:	1e59      	subs	r1, r3, #1
 8008828:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800882c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008838:	ee17 3a90 	vmov	r3, s15
 800883c:	440b      	add	r3, r1
 800883e:	4619      	mov	r1, r3
 8008840:	f7fe becc 	b.w	80075dc <_ZN15customGraphBaseC1Ev+0xdd0>
 8008844:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008848:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800884c:	ee17 3a10 	vmov	r3, s14
 8008850:	1e59      	subs	r1, r3, #1
 8008852:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008856:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800885a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800885e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008862:	ee17 3a90 	vmov	r3, s15
 8008866:	440b      	add	r3, r1
 8008868:	4619      	mov	r1, r3
 800886a:	f7fe bed0 	b.w	800760e <_ZN15customGraphBaseC1Ev+0xe02>
 800886e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008872:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008876:	ee17 3a10 	vmov	r3, s14
 800887a:	1e59      	subs	r1, r3, #1
 800887c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008880:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008884:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008888:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800888c:	ee17 3a90 	vmov	r3, s15
 8008890:	440b      	add	r3, r1
 8008892:	4619      	mov	r1, r3
 8008894:	f7fe bed4 	b.w	8007640 <_ZN15customGraphBaseC1Ev+0xe34>
 8008898:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800889c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088a0:	ee17 3a10 	vmov	r3, s14
 80088a4:	1e59      	subs	r1, r3, #1
 80088a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088aa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80088ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088b6:	ee17 3a90 	vmov	r3, s15
 80088ba:	440b      	add	r3, r1
 80088bc:	4619      	mov	r1, r3
 80088be:	f7fe bed8 	b.w	8007672 <_ZN15customGraphBaseC1Ev+0xe66>
 80088c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088ca:	ee17 3a10 	vmov	r3, s14
 80088ce:	1e59      	subs	r1, r3, #1
 80088d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088d4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80088d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088e0:	ee17 3a90 	vmov	r3, s15
 80088e4:	440b      	add	r3, r1
 80088e6:	4619      	mov	r1, r3
 80088e8:	f7fe bedc 	b.w	80076a4 <_ZN15customGraphBaseC1Ev+0xe98>
 80088ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80088f0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80088f4:	ee17 3a10 	vmov	r3, s14
 80088f8:	1e59      	subs	r1, r3, #1
 80088fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80088fe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800890a:	ee17 3a90 	vmov	r3, s15
 800890e:	440b      	add	r3, r1
 8008910:	4619      	mov	r1, r3
 8008912:	f7fe bee0 	b.w	80076d6 <_ZN15customGraphBaseC1Ev+0xeca>
 8008916:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800891a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800891e:	ee17 3a10 	vmov	r3, s14
 8008922:	1e59      	subs	r1, r3, #1
 8008924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008928:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800892c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008934:	ee17 3a90 	vmov	r3, s15
 8008938:	440b      	add	r3, r1
 800893a:	4619      	mov	r1, r3
 800893c:	f7fe bee4 	b.w	8007708 <_ZN15customGraphBaseC1Ev+0xefc>
 8008940:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008944:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008948:	ee17 3a10 	vmov	r3, s14
 800894c:	1e59      	subs	r1, r3, #1
 800894e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008952:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800895e:	ee17 3a90 	vmov	r3, s15
 8008962:	440b      	add	r3, r1
 8008964:	4619      	mov	r1, r3
 8008966:	f7fe bee8 	b.w	800773a <_ZN15customGraphBaseC1Ev+0xf2e>
 800896a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800896e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008972:	ee17 3a10 	vmov	r3, s14
 8008976:	1e59      	subs	r1, r3, #1
 8008978:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800897c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008980:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008988:	ee17 3a90 	vmov	r3, s15
 800898c:	440b      	add	r3, r1
 800898e:	4619      	mov	r1, r3
 8008990:	f7fe beec 	b.w	800776c <_ZN15customGraphBaseC1Ev+0xf60>
 8008994:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008998:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800899c:	ee17 3a10 	vmov	r3, s14
 80089a0:	1e59      	subs	r1, r3, #1
 80089a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089a6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80089aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089b2:	ee17 3a90 	vmov	r3, s15
 80089b6:	440b      	add	r3, r1
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7fe bef0 	b.w	800779e <_ZN15customGraphBaseC1Ev+0xf92>
 80089be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089c6:	ee17 3a10 	vmov	r3, s14
 80089ca:	1e59      	subs	r1, r3, #1
 80089cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089d0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80089d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089dc:	ee17 3a90 	vmov	r3, s15
 80089e0:	440b      	add	r3, r1
 80089e2:	4619      	mov	r1, r3
 80089e4:	f7fe bef4 	b.w	80077d0 <_ZN15customGraphBaseC1Ev+0xfc4>
 80089e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80089f0:	ee17 3a10 	vmov	r3, s14
 80089f4:	1e59      	subs	r1, r3, #1
 80089f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80089fa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80089fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a06:	ee17 3a90 	vmov	r3, s15
 8008a0a:	440b      	add	r3, r1
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	f7fe bef8 	b.w	8007802 <_ZN15customGraphBaseC1Ev+0xff6>
 8008a12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a1a:	ee17 3a10 	vmov	r3, s14
 8008a1e:	1e59      	subs	r1, r3, #1
 8008a20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a24:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a30:	ee17 3a90 	vmov	r3, s15
 8008a34:	440b      	add	r3, r1
 8008a36:	4619      	mov	r1, r3
 8008a38:	f7fe befc 	b.w	8007834 <_ZN15customGraphBaseC1Ev+0x1028>
 8008a3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a44:	ee17 3a10 	vmov	r3, s14
 8008a48:	1e59      	subs	r1, r3, #1
 8008a4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a4e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a5a:	ee17 3a90 	vmov	r3, s15
 8008a5e:	440b      	add	r3, r1
 8008a60:	4619      	mov	r1, r3
 8008a62:	f7fe bf00 	b.w	8007866 <_ZN15customGraphBaseC1Ev+0x105a>
 8008a66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a6e:	ee17 3a10 	vmov	r3, s14
 8008a72:	1e59      	subs	r1, r3, #1
 8008a74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a78:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a84:	ee17 3a90 	vmov	r3, s15
 8008a88:	440b      	add	r3, r1
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	f7fe bf04 	b.w	8007898 <_ZN15customGraphBaseC1Ev+0x108c>
 8008a90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008a94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008a98:	ee17 3a10 	vmov	r3, s14
 8008a9c:	1e59      	subs	r1, r3, #1
 8008a9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008aa2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aae:	ee17 3a90 	vmov	r3, s15
 8008ab2:	440b      	add	r3, r1
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f7fe bf08 	b.w	80078ca <_ZN15customGraphBaseC1Ev+0x10be>
 8008aba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008abe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ac2:	ee17 3a10 	vmov	r3, s14
 8008ac6:	1e59      	subs	r1, r3, #1
 8008ac8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008acc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ad8:	ee17 3a90 	vmov	r3, s15
 8008adc:	440b      	add	r3, r1
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f7fe bf0c 	b.w	80078fc <_ZN15customGraphBaseC1Ev+0x10f0>
 8008ae4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ae8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008aec:	ee17 3a10 	vmov	r3, s14
 8008af0:	1e59      	subs	r1, r3, #1
 8008af2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008af6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b02:	ee17 3a90 	vmov	r3, s15
 8008b06:	440b      	add	r3, r1
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f7fe bf10 	b.w	800792e <_ZN15customGraphBaseC1Ev+0x1122>
 8008b0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b16:	ee17 3a10 	vmov	r3, s14
 8008b1a:	1e59      	subs	r1, r3, #1
 8008b1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b20:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b2c:	ee17 3a90 	vmov	r3, s15
 8008b30:	440b      	add	r3, r1
 8008b32:	4619      	mov	r1, r3
 8008b34:	f7fe bf14 	b.w	8007960 <_ZN15customGraphBaseC1Ev+0x1154>
 8008b38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b3c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b40:	ee17 3a10 	vmov	r3, s14
 8008b44:	1e59      	subs	r1, r3, #1
 8008b46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b4a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b56:	ee17 3a90 	vmov	r3, s15
 8008b5a:	440b      	add	r3, r1
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f7fe bf18 	b.w	8007992 <_ZN15customGraphBaseC1Ev+0x1186>
 8008b62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b6a:	ee17 3a10 	vmov	r3, s14
 8008b6e:	1e59      	subs	r1, r3, #1
 8008b70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b74:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b80:	ee17 3a90 	vmov	r3, s15
 8008b84:	440b      	add	r3, r1
 8008b86:	4619      	mov	r1, r3
 8008b88:	f7fe bf1c 	b.w	80079c4 <_ZN15customGraphBaseC1Ev+0x11b8>
 8008b8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008b90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008b94:	ee17 3a10 	vmov	r3, s14
 8008b98:	1e59      	subs	r1, r3, #1
 8008b9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b9e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008baa:	ee17 3a90 	vmov	r3, s15
 8008bae:	440b      	add	r3, r1
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	f7fe bf20 	b.w	80079f6 <_ZN15customGraphBaseC1Ev+0x11ea>
 8008bb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008bba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008bbe:	ee17 3a10 	vmov	r3, s14
 8008bc2:	1e59      	subs	r1, r3, #1
 8008bc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bc8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bd4:	ee17 3a90 	vmov	r3, s15
 8008bd8:	440b      	add	r3, r1
 8008bda:	4619      	mov	r1, r3
 8008bdc:	f7fe bf24 	b.w	8007a28 <_ZN15customGraphBaseC1Ev+0x121c>
 8008be0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008be4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008be8:	ee17 3a10 	vmov	r3, s14
 8008bec:	1e59      	subs	r1, r3, #1
 8008bee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008bf2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bfe:	ee17 3a90 	vmov	r3, s15
 8008c02:	440b      	add	r3, r1
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7fe bf28 	b.w	8007a5a <_ZN15customGraphBaseC1Ev+0x124e>
 8008c0a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c12:	ee17 3a10 	vmov	r3, s14
 8008c16:	1e59      	subs	r1, r3, #1
 8008c18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c1c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c28:	ee17 3a90 	vmov	r3, s15
 8008c2c:	440b      	add	r3, r1
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f7fe bf2c 	b.w	8007a8c <_ZN15customGraphBaseC1Ev+0x1280>
 8008c34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c3c:	ee17 3a10 	vmov	r3, s14
 8008c40:	1e59      	subs	r1, r3, #1
 8008c42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c46:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c52:	ee17 3a90 	vmov	r3, s15
 8008c56:	440b      	add	r3, r1
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fe bf30 	b.w	8007abe <_ZN15customGraphBaseC1Ev+0x12b2>
 8008c5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c62:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c66:	ee17 3a10 	vmov	r3, s14
 8008c6a:	1e59      	subs	r1, r3, #1
 8008c6c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c70:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c7c:	ee17 3a90 	vmov	r3, s15
 8008c80:	440b      	add	r3, r1
 8008c82:	4619      	mov	r1, r3
 8008c84:	f7fe bf34 	b.w	8007af0 <_ZN15customGraphBaseC1Ev+0x12e4>
 8008c88:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008c90:	ee17 3a10 	vmov	r3, s14
 8008c94:	1e59      	subs	r1, r3, #1
 8008c96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008c9a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ca6:	ee17 3a90 	vmov	r3, s15
 8008caa:	440b      	add	r3, r1
 8008cac:	4619      	mov	r1, r3
 8008cae:	f7fe bf38 	b.w	8007b22 <_ZN15customGraphBaseC1Ev+0x1316>
 8008cb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008cb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008cba:	ee17 3a10 	vmov	r3, s14
 8008cbe:	1e59      	subs	r1, r3, #1
 8008cc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cc4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cd0:	ee17 3a90 	vmov	r3, s15
 8008cd4:	440b      	add	r3, r1
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	f7fe bf3c 	b.w	8007b54 <_ZN15customGraphBaseC1Ev+0x1348>
 8008cdc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ce0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008ce4:	ee17 3a10 	vmov	r3, s14
 8008ce8:	1e59      	subs	r1, r3, #1
 8008cea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008cee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cfa:	ee17 3a90 	vmov	r3, s15
 8008cfe:	440b      	add	r3, r1
 8008d00:	4619      	mov	r1, r3
 8008d02:	f7fe bf40 	b.w	8007b86 <_ZN15customGraphBaseC1Ev+0x137a>
 8008d06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d0a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d0e:	ee17 3a10 	vmov	r3, s14
 8008d12:	1e59      	subs	r1, r3, #1
 8008d14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d18:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d24:	ee17 3a90 	vmov	r3, s15
 8008d28:	440b      	add	r3, r1
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f7fe bf44 	b.w	8007bb8 <_ZN15customGraphBaseC1Ev+0x13ac>
 8008d30:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d38:	ee17 3a10 	vmov	r3, s14
 8008d3c:	1e59      	subs	r1, r3, #1
 8008d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d42:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d4e:	ee17 3a90 	vmov	r3, s15
 8008d52:	440b      	add	r3, r1
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7fe bf48 	b.w	8007bea <_ZN15customGraphBaseC1Ev+0x13de>
 8008d5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d5e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d62:	ee17 3a10 	vmov	r3, s14
 8008d66:	1e59      	subs	r1, r3, #1
 8008d68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d6c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d78:	ee17 3a90 	vmov	r3, s15
 8008d7c:	440b      	add	r3, r1
 8008d7e:	4619      	mov	r1, r3
 8008d80:	f7fe bf4c 	b.w	8007c1c <_ZN15customGraphBaseC1Ev+0x1410>
 8008d84:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008d8c:	ee17 3a10 	vmov	r3, s14
 8008d90:	1e59      	subs	r1, r3, #1
 8008d92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d96:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008da2:	ee17 3a90 	vmov	r3, s15
 8008da6:	440b      	add	r3, r1
 8008da8:	4619      	mov	r1, r3
 8008daa:	f7fe bf91 	b.w	8007cd0 <_ZN15customGraphBaseC1Ev+0x14c4>
 8008dae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008db2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008db6:	ee17 3a10 	vmov	r3, s14
 8008dba:	1e59      	subs	r1, r3, #1
 8008dbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dc0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dcc:	ee17 3a90 	vmov	r3, s15
 8008dd0:	440b      	add	r3, r1
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f7fe bf95 	b.w	8007d02 <_ZN15customGraphBaseC1Ev+0x14f6>
 8008dd8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ddc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008de0:	ee17 3a10 	vmov	r3, s14
 8008de4:	1e59      	subs	r1, r3, #1
 8008de6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dea:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008df6:	ee17 3a90 	vmov	r3, s15
 8008dfa:	440b      	add	r3, r1
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7fe bf99 	b.w	8007d34 <_ZN15customGraphBaseC1Ev+0x1528>
 8008e02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e06:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e0a:	ee17 3a10 	vmov	r3, s14
 8008e0e:	1e59      	subs	r1, r3, #1
 8008e10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e14:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e20:	ee17 3a90 	vmov	r3, s15
 8008e24:	440b      	add	r3, r1
 8008e26:	4619      	mov	r1, r3
 8008e28:	f7fe bf9d 	b.w	8007d66 <_ZN15customGraphBaseC1Ev+0x155a>
 8008e2c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e30:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e34:	ee17 3a10 	vmov	r3, s14
 8008e38:	1e59      	subs	r1, r3, #1
 8008e3a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e3e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e4a:	ee17 3a90 	vmov	r3, s15
 8008e4e:	440b      	add	r3, r1
 8008e50:	4619      	mov	r1, r3
 8008e52:	f7fe bfa1 	b.w	8007d98 <_ZN15customGraphBaseC1Ev+0x158c>
 8008e56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e5e:	ee17 3a10 	vmov	r3, s14
 8008e62:	1e59      	subs	r1, r3, #1
 8008e64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e68:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e74:	ee17 3a90 	vmov	r3, s15
 8008e78:	440b      	add	r3, r1
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f7fe bfa5 	b.w	8007dca <_ZN15customGraphBaseC1Ev+0x15be>
 8008e80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008e84:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008e88:	ee17 3a10 	vmov	r3, s14
 8008e8c:	1e59      	subs	r1, r3, #1
 8008e8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e92:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e9e:	ee17 3a90 	vmov	r3, s15
 8008ea2:	440b      	add	r3, r1
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f7fe bfa9 	b.w	8007dfc <_ZN15customGraphBaseC1Ev+0x15f0>
 8008eaa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008eae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008eb2:	ee17 3a10 	vmov	r3, s14
 8008eb6:	1e59      	subs	r1, r3, #1
 8008eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ebc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008ec0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ec8:	ee17 3a90 	vmov	r3, s15
 8008ecc:	440b      	add	r3, r1
 8008ece:	4619      	mov	r1, r3
 8008ed0:	f7fe bfad 	b.w	8007e2e <_ZN15customGraphBaseC1Ev+0x1622>
 8008ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ed8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008edc:	ee17 3a10 	vmov	r3, s14
 8008ee0:	1e59      	subs	r1, r3, #1
 8008ee2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ee6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ef2:	ee17 3a90 	vmov	r3, s15
 8008ef6:	440b      	add	r3, r1
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f7fe bfb1 	b.w	8007e60 <_ZN15customGraphBaseC1Ev+0x1654>
 8008efe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f02:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f06:	ee17 3a10 	vmov	r3, s14
 8008f0a:	1e59      	subs	r1, r3, #1
 8008f0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f10:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f1c:	ee17 3a90 	vmov	r3, s15
 8008f20:	440b      	add	r3, r1
 8008f22:	4619      	mov	r1, r3
 8008f24:	f7fe bfb5 	b.w	8007e92 <_ZN15customGraphBaseC1Ev+0x1686>
 8008f28:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f2c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f30:	ee17 3a10 	vmov	r3, s14
 8008f34:	1e59      	subs	r1, r3, #1
 8008f36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f3a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f46:	ee17 3a90 	vmov	r3, s15
 8008f4a:	440b      	add	r3, r1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f7fe bfb9 	b.w	8007ec4 <_ZN15customGraphBaseC1Ev+0x16b8>
 8008f52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f56:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f5a:	ee17 3a10 	vmov	r3, s14
 8008f5e:	1e59      	subs	r1, r3, #1
 8008f60:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f64:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f70:	ee17 3a90 	vmov	r3, s15
 8008f74:	440b      	add	r3, r1
 8008f76:	4619      	mov	r1, r3
 8008f78:	f7fe bfbd 	b.w	8007ef6 <_ZN15customGraphBaseC1Ev+0x16ea>
 8008f7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008f80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8008f84:	ee17 3a10 	vmov	r3, s14
 8008f88:	1e59      	subs	r1, r3, #1
 8008f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f8e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f9a:	ee17 3a90 	vmov	r3, s15
 8008f9e:	440b      	add	r3, r1
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f7fe bfc1 	b.w	8007f28 <_ZN15customGraphBaseC1Ev+0x171c>
 8008fa6:	bf00      	nop

08008fa8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8008fa8:	4770      	bx	lr

08008faa <_ZN19FrontendApplicationD0Ev>:
 8008faa:	b510      	push	{r4, lr}
 8008fac:	4604      	mov	r4, r0
 8008fae:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8008fb2:	f018 fdb4 	bl	8021b1e <_ZdlPvj>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	bd10      	pop	{r4, pc}

08008fba <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	4604      	mov	r4, r0
    {
        model.tick();
 8008fbe:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8008fc2:	f000 f812 	bl	8008fea <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8008fc6:	4620      	mov	r0, r4
    }
 8008fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8008fcc:	f00d bc02 	b.w	80167d4 <_ZN8touchgfx11Application15handleTickEventEv>

08008fd0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8008fd4:	f7f9 fcdc 	bl	8002990 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8008fd8:	4b01      	ldr	r3, [pc, #4]	; (8008fe0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8008fda:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8008fdc:	6023      	str	r3, [r4, #0]
}
 8008fde:	bd10      	pop	{r4, pc}
 8008fe0:	08024494 	.word	0x08024494

08008fe4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	6002      	str	r2, [r0, #0]
{

}
 8008fe8:	4770      	bx	lr

08008fea <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8008fea:	4770      	bx	lr

08008fec <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8008fec:	4770      	bx	lr

08008fee <_ZThn4_N16Screen1PresenterD1Ev>:
 8008fee:	3804      	subs	r0, #4
 8008ff0:	4770      	bx	lr

08008ff2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8008ff2:	4770      	bx	lr

08008ff4 <_ZN16Screen1PresenterD0Ev>:
 8008ff4:	b510      	push	{r4, lr}
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	2110      	movs	r1, #16
 8008ffa:	f018 fd90 	bl	8021b1e <_ZdlPvj>
 8008ffe:	4620      	mov	r0, r4
 8009000:	bd10      	pop	{r4, pc}

08009002 <_ZThn4_N16Screen1PresenterD0Ev>:
 8009002:	f1a0 0004 	sub.w	r0, r0, #4
 8009006:	e7f5      	b.n	8008ff4 <_ZN16Screen1PresenterD0Ev>

08009008 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8009008:	2200      	movs	r2, #0
    : view(v)
 800900a:	60c1      	str	r1, [r0, #12]
 800900c:	6082      	str	r2, [r0, #8]
 800900e:	4a04      	ldr	r2, [pc, #16]	; (8009020 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8009010:	b510      	push	{r4, lr}
    : view(v)
 8009012:	f102 0408 	add.w	r4, r2, #8
 8009016:	3220      	adds	r2, #32
 8009018:	6004      	str	r4, [r0, #0]
 800901a:	6042      	str	r2, [r0, #4]
}
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	080244d8 	.word	0x080244d8

08009024 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8009024:	4770      	bx	lr
	...

08009028 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tickCounter++;
 800902a:	f500 5540 	add.w	r5, r0, #12288	; 0x3000
 800902e:	2203      	movs	r2, #3
{
 8009030:	4604      	mov	r4, r0
	tickCounter++;
 8009032:	f8d5 3bc8 	ldr.w	r3, [r5, #3016]	; 0xbc8
 8009036:	3301      	adds	r3, #1
 8009038:	fb93 f2f2 	sdiv	r2, r3, r2
 800903c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	if(tickCounter % 3 == 0)
 8009040:	4293      	cmp	r3, r2
{
 8009042:	ed2d 8b04 	vpush	{d8-d9}
	tickCounter++;
 8009046:	f8c5 3bc8 	str.w	r3, [r5, #3016]	; 0xbc8
	if(tickCounter % 3 == 0)
 800904a:	d14a      	bne.n	80090e2 <_ZN11Screen1View15handleTickEventEv+0xba>
	{
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 800904c:	ee07 3a90 	vmov	s15, r3
 8009050:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8009054:	260a      	movs	r6, #10
 8009056:	2728      	movs	r7, #40	; 0x28
 8009058:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800905c:	ed9f 9b22 	vldr	d9, [pc, #136]	; 80090e8 <_ZN11Screen1View15handleTickEventEv+0xc0>
 8009060:	ee20 0b09 	vmul.f64	d0, d0, d9
 8009064:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009068:	f018 fdc6 	bl	8021bf8 <sinf>
 800906c:	eeb0 8a40 	vmov.f32	s16, s0
 8009070:	f019 fac4 	bl	80225fc <rand>
 8009074:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009078:	fb90 f1f6 	sdiv	r1, r0, r6
 800907c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009080:	fb01 0016 	mls	r0, r1, r6, r0
        return i * scale;
 8009084:	f8d4 1580 	ldr.w	r1, [r4, #1408]	; 0x580
 8009088:	ee10 3a10 	vmov	r3, s0
 800908c:	fb07 0003 	mla	r0, r7, r3, r0
        return addDataPointScaled(int2scaledY(y));
 8009090:	4341      	muls	r1, r0
 8009092:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 8009096:	f009 fe04 	bl	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
		customGraph1.addData((int)(sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 800909a:	f605 33c8 	addw	r3, r5, #3016	; 0xbc8
 800909e:	ed93 0a00 	vldr	s0, [r3]
 80090a2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80090a6:	ee20 0b09 	vmul.f64	d0, d0, d9
 80090aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80090ae:	f018 fda3 	bl	8021bf8 <sinf>
 80090b2:	eeb0 8a40 	vmov.f32	s16, s0
 80090b6:	f019 faa1 	bl	80225fc <rand>
 80090ba:	ee38 0a28 	vadd.f32	s0, s16, s17
 80090be:	fb90 f1f6 	sdiv	r1, r0, r6
 80090c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090c6:	fb01 0116 	mls	r1, r1, r6, r0
 80090ca:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 80090ce:	ee10 3a10 	vmov	r3, s0
	}
}
 80090d2:	ecbd 8b04 	vpop	{d8-d9}
		customGraph1.addData((int)(sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 80090d6:	fb07 1103 	mla	r1, r7, r3, r1
}
 80090da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		customGraph1.addData((int)(sinf(tickCounter * 0.07) + 1) * 40 + rand() % 10);
 80090de:	f000 b84f 	b.w	8009180 <_ZN11customGraph7addDataEi>
}
 80090e2:	ecbd 8b04 	vpop	{d8-d9}
 80090e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e8:	1eb851ec 	.word	0x1eb851ec
 80090ec:	3fb1eb85 	.word	0x3fb1eb85

080090f0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80090f0:	4b03      	ldr	r3, [pc, #12]	; (8009100 <_ZN11Screen1ViewD1Ev+0x10>)
 80090f2:	b510      	push	{r4, lr}
 80090f4:	4604      	mov	r4, r0
 80090f6:	6003      	str	r3, [r0, #0]
 80090f8:	f7fa f938 	bl	800336c <_ZN15Screen1ViewBaseD1Ev>
 80090fc:	4620      	mov	r0, r4
 80090fe:	bd10      	pop	{r4, pc}
 8009100:	08024508 	.word	0x08024508

08009104 <_ZN11Screen1ViewD0Ev>:
 8009104:	b510      	push	{r4, lr}
 8009106:	4604      	mov	r4, r0
 8009108:	f7ff fff2 	bl	80090f0 <_ZN11Screen1ViewD1Ev>
 800910c:	f643 31cc 	movw	r1, #15308	; 0x3bcc
 8009110:	4620      	mov	r0, r4
 8009112:	f018 fd04 	bl	8021b1e <_ZdlPvj>
 8009116:	4620      	mov	r0, r4
 8009118:	bd10      	pop	{r4, pc}
	...

0800911c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	f7fa f9f2 	bl	8003508 <_ZN15Screen1ViewBaseC1Ev>
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <_ZN11Screen1ViewC1Ev+0x1c>)
	tickCounter = 0;
 8009126:	2200      	movs	r2, #0
}
 8009128:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800912a:	6023      	str	r3, [r4, #0]
	tickCounter = 0;
 800912c:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
 8009130:	f8c3 2bc8 	str.w	r2, [r3, #3016]	; 0xbc8
}
 8009134:	bd10      	pop	{r4, pc}
 8009136:	bf00      	nop
 8009138:	08024508 	.word	0x08024508

0800913c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800913c:	f7fa b8ce 	b.w	80032dc <_ZN15Screen1ViewBase11setupScreenEv>

08009140 <_ZN11customGraphD1Ev>:
 8009140:	4b03      	ldr	r3, [pc, #12]	; (8009150 <_ZN11customGraphD1Ev+0x10>)
 8009142:	b510      	push	{r4, lr}
 8009144:	4604      	mov	r4, r0
 8009146:	6003      	str	r3, [r0, #0]
 8009148:	f7fd fb4d 	bl	80067e6 <_ZN15customGraphBaseD1Ev>
 800914c:	4620      	mov	r0, r4
 800914e:	bd10      	pop	{r4, pc}
 8009150:	0802453c 	.word	0x0802453c

08009154 <_ZN11customGraphD0Ev>:
 8009154:	b510      	push	{r4, lr}
 8009156:	4604      	mov	r4, r0
 8009158:	f7ff fff2 	bl	8009140 <_ZN11customGraphD1Ev>
 800915c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8009160:	4620      	mov	r0, r4
 8009162:	f018 fcdc 	bl	8021b1e <_ZdlPvj>
 8009166:	4620      	mov	r0, r4
 8009168:	bd10      	pop	{r4, pc}
	...

0800916c <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 800916c:	b510      	push	{r4, lr}
 800916e:	4604      	mov	r4, r0
 8009170:	f7fd fb4c 	bl	800680c <_ZN15customGraphBaseC1Ev>
 8009174:	4b01      	ldr	r3, [pc, #4]	; (800917c <_ZN11customGraphC1Ev+0x10>)
{

}
 8009176:	4620      	mov	r0, r4
customGraph::customGraph()
 8009178:	6023      	str	r3, [r4, #0]
}
 800917a:	bd10      	pop	{r4, pc}
 800917c:	0802453c 	.word	0x0802453c

08009180 <_ZN11customGraph7addDataEi>:
        return i * scale;
 8009180:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
        return addDataPointScaled(int2scaledY(y));
 8009184:	3058      	adds	r0, #88	; 0x58
 8009186:	4359      	muls	r1, r3
 8009188:	f009 bd8b 	b.w	8012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>

0800918c <_ZN11customGraph10initializeEv>:

void customGraph::initialize()
{
    customGraphBase::initialize();
 800918c:	f7fd bb2c 	b.w	80067e8 <_ZN15customGraphBase10initializeEv>

08009190 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8009190:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8009192:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 8009196:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8009198:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800919a:	2302      	movs	r3, #2
 800919c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800919e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80091a2:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80091a6:	4770      	bx	lr

080091a8 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80091a8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80091ac:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80091ae:	bf04      	itt	eq
 80091b0:	2300      	moveq	r3, #0
 80091b2:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 80091b6:	2000      	movs	r0, #0
 80091b8:	4770      	bx	lr

080091ba <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80091ba:	2000      	movs	r0, #0
 80091bc:	4770      	bx	lr

080091be <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80091be:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80091c0:	6904      	ldr	r4, [r0, #16]
 80091c2:	8900      	ldrh	r0, [r0, #8]
 80091c4:	46a4      	mov	ip, r4
}
 80091c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80091ca:	4760      	bx	ip

080091cc <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80091cc:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80091ce:	68c4      	ldr	r4, [r0, #12]
 80091d0:	8900      	ldrh	r0, [r0, #8]
 80091d2:	46a4      	mov	ip, r4
}
 80091d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80091d8:	4760      	bx	ip

080091da <FT6X06_GestureConfig>:
{
 80091da:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80091de:	f100 0818 	add.w	r8, r0, #24
{
 80091e2:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80091e4:	7809      	ldrb	r1, [r1, #0]
 80091e6:	4640      	mov	r0, r8
 80091e8:	f000 f918 	bl	800941c <ft6x06_radian_value>
 80091ec:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80091ee:	f899 1004 	ldrb.w	r1, [r9, #4]
 80091f2:	4640      	mov	r0, r8
 80091f4:	f000 f91e 	bl	8009434 <ft6x06_offset_left_right>
 80091f8:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80091fa:	f899 1008 	ldrb.w	r1, [r9, #8]
 80091fe:	4640      	mov	r0, r8
 8009200:	f000 f924 	bl	800944c <ft6x06_offset_up_down>
 8009204:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8009206:	f899 100c 	ldrb.w	r1, [r9, #12]
 800920a:	4640      	mov	r0, r8
 800920c:	f000 f92a 	bl	8009464 <ft6x06_disatnce_left_right>
 8009210:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8009212:	f899 1010 	ldrb.w	r1, [r9, #16]
 8009216:	4640      	mov	r0, r8
 8009218:	f000 f930 	bl	800947c <ft6x06_distance_up_down>
 800921c:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800921e:	f899 1014 	ldrb.w	r1, [r9, #20]
 8009222:	4640      	mov	r0, r8
 8009224:	f000 f936 	bl	8009494 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8009228:	42c5      	cmn	r5, r0
}
 800922a:	bf14      	ite	ne
 800922c:	f04f 30ff 	movne.w	r0, #4294967295
 8009230:	2000      	moveq	r0, #0
 8009232:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08009236 <FT6X06_ReadID>:
{
 8009236:	b513      	push	{r0, r1, r4, lr}
 8009238:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800923a:	3018      	adds	r0, #24
 800923c:	f10d 0107 	add.w	r1, sp, #7
 8009240:	f000 f940 	bl	80094c4 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8009244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009248:	6023      	str	r3, [r4, #0]
}
 800924a:	b002      	add	sp, #8
 800924c:	bd10      	pop	{r4, pc}

0800924e <FT6X06_GetState>:
{
 800924e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009250:	f100 0518 	add.w	r5, r0, #24
{
 8009254:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8009256:	a901      	add	r1, sp, #4
 8009258:	4628      	mov	r0, r5
 800925a:	f000 f8d2 	bl	8009402 <ft6x06_td_status>
 800925e:	bb08      	cbnz	r0, 80092a4 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8009260:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8009264:	2b02      	cmp	r3, #2
 8009266:	bf98      	it	ls
 8009268:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800926a:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800926c:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800926e:	2103      	movs	r1, #3
 8009270:	4628      	mov	r0, r5
 8009272:	eb0d 0203 	add.w	r2, sp, r3
 8009276:	f000 f8b1 	bl	80093dc <ft6x06_read_reg>
 800927a:	b9b0      	cbnz	r0, 80092aa <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800927c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009280:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800928a:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800928c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009290:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009292:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800929c:	4313      	orrs	r3, r2
 800929e:	60a3      	str	r3, [r4, #8]
}
 80092a0:	b003      	add	sp, #12
 80092a2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80092a4:	f04f 30ff 	mov.w	r0, #4294967295
 80092a8:	e7df      	b.n	800926a <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80092ae:	e7f7      	b.n	80092a0 <FT6X06_GetState+0x52>

080092b0 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80092b0:	3018      	adds	r0, #24
 80092b2:	f000 b8a1 	b.w	80093f8 <ft6x06_gest_id>

080092b6 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80092b6:	2101      	movs	r1, #1
 80092b8:	3018      	adds	r0, #24
 80092ba:	f000 b8f7 	b.w	80094ac <ft6x06_g_mode>

080092be <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80092be:	2100      	movs	r1, #0
 80092c0:	3018      	adds	r0, #24
 80092c2:	f000 b8f3 	b.w	80094ac <ft6x06_g_mode>

080092c6 <FT6X06_Init>:
{
 80092c6:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80092c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80092cc:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80092ce:	b96b      	cbnz	r3, 80092ec <FT6X06_Init+0x26>
    pObj->IO.Init();
 80092d0:	6803      	ldr	r3, [r0, #0]
 80092d2:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80092d4:	4620      	mov	r0, r4
 80092d6:	f7ff fff2 	bl	80092be <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80092da:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80092dc:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80092e0:	bf18      	it	ne
 80092e2:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80092e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 80092e8:	4240      	negs	r0, r0
}
 80092ea:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 80092ec:	2000      	movs	r0, #0
  return ret;
 80092ee:	e7fc      	b.n	80092ea <FT6X06_Init+0x24>

080092f0 <FT6X06_ClearIT>:
 80092f0:	2000      	movs	r0, #0
 80092f2:	4770      	bx	lr

080092f4 <FT6X06_GetMultiTouchState>:
{
 80092f4:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80092f6:	f100 0518 	add.w	r5, r0, #24
{
 80092fa:	b085      	sub	sp, #20
 80092fc:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80092fe:	4628      	mov	r0, r5
 8009300:	a901      	add	r1, sp, #4
 8009302:	f000 f87e 	bl	8009402 <ft6x06_td_status>
 8009306:	2800      	cmp	r0, #0
 8009308:	d145      	bne.n	8009396 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800930a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800930e:	2b02      	cmp	r3, #2
 8009310:	bf98      	it	ls
 8009312:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8009314:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8009316:	230c      	movs	r3, #12
 8009318:	aa01      	add	r2, sp, #4
 800931a:	2103      	movs	r1, #3
 800931c:	4628      	mov	r0, r5
 800931e:	f000 f85d 	bl	80093dc <ft6x06_read_reg>
 8009322:	2800      	cmp	r0, #0
 8009324:	d13a      	bne.n	800939c <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009326:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800932a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800932e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009330:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009332:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8009336:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009338:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800933a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800933e:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8009342:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009344:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800934e:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009350:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8009354:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8009356:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800935a:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800935c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009364:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8009366:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009368:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800936c:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800936e:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8009370:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8009374:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8009376:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009380:	430b      	orrs	r3, r1
 8009382:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8009384:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009388:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 800938a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800938e:	091b      	lsrs	r3, r3, #4
 8009390:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009392:	b005      	add	sp, #20
 8009394:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	e7bb      	b.n	8009314 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80093a0:	e7f7      	b.n	8009392 <FT6X06_GetMultiTouchState+0x9e>
	...

080093a4 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80093a4:	b190      	cbz	r0, 80093cc <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80093a6:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80093a8:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80093aa:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80093ac:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80093ae:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80093b0:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80093b2:	68ca      	ldr	r2, [r1, #12]
 80093b4:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80093b6:	690a      	ldr	r2, [r1, #16]
 80093b8:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80093ba:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80093bc:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80093be:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80093c0:	4a04      	ldr	r2, [pc, #16]	; (80093d4 <FT6X06_RegisterBusIO+0x30>)
 80093c2:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80093c4:	4a04      	ldr	r2, [pc, #16]	; (80093d8 <FT6X06_RegisterBusIO+0x34>)
 80093c6:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80093c8:	b103      	cbz	r3, 80093cc <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80093ca:	4718      	bx	r3
}
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	080091bf 	.word	0x080091bf
 80093d8:	080091cd 	.word	0x080091cd

080093dc <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80093dc:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80093de:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80093e2:	46a4      	mov	ip, r4
}
 80093e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80093e8:	4760      	bx	ip

080093ea <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80093ea:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80093ec:	6804      	ldr	r4, [r0, #0]
 80093ee:	6880      	ldr	r0, [r0, #8]
 80093f0:	46a4      	mov	ip, r4
}
 80093f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80093f6:	4760      	bx	ip

080093f8 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80093f8:	2301      	movs	r3, #1
{
 80093fa:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80093fc:	4619      	mov	r1, r3
 80093fe:	f7ff bfed 	b.w	80093dc <ft6x06_read_reg>

08009402 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8009402:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009404:	460a      	mov	r2, r1
{
 8009406:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8009408:	2301      	movs	r3, #1
 800940a:	2102      	movs	r1, #2
 800940c:	f7ff ffe6 	bl	80093dc <ft6x06_read_reg>
  
  if(ret == 0)
 8009410:	b918      	cbnz	r0, 800941a <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	f003 030f 	and.w	r3, r3, #15
 8009418:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800941a:	bd10      	pop	{r4, pc}

0800941c <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800941c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800941e:	2301      	movs	r3, #1
{
 8009420:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8009424:	f10d 0207 	add.w	r2, sp, #7
 8009428:	2191      	movs	r1, #145	; 0x91
 800942a:	f7ff ffde 	bl	80093ea <ft6x06_write_reg>
}
 800942e:	b003      	add	sp, #12
 8009430:	f85d fb04 	ldr.w	pc, [sp], #4

08009434 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009434:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8009436:	2301      	movs	r3, #1
{
 8009438:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800943c:	f10d 0207 	add.w	r2, sp, #7
 8009440:	2192      	movs	r1, #146	; 0x92
 8009442:	f7ff ffd2 	bl	80093ea <ft6x06_write_reg>
}
 8009446:	b003      	add	sp, #12
 8009448:	f85d fb04 	ldr.w	pc, [sp], #4

0800944c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800944c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800944e:	2301      	movs	r3, #1
{
 8009450:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8009454:	f10d 0207 	add.w	r2, sp, #7
 8009458:	2193      	movs	r1, #147	; 0x93
 800945a:	f7ff ffc6 	bl	80093ea <ft6x06_write_reg>
}
 800945e:	b003      	add	sp, #12
 8009460:	f85d fb04 	ldr.w	pc, [sp], #4

08009464 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009464:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8009466:	2301      	movs	r3, #1
{
 8009468:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800946c:	f10d 0207 	add.w	r2, sp, #7
 8009470:	2194      	movs	r1, #148	; 0x94
 8009472:	f7ff ffba 	bl	80093ea <ft6x06_write_reg>
}
 8009476:	b003      	add	sp, #12
 8009478:	f85d fb04 	ldr.w	pc, [sp], #4

0800947c <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800947c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800947e:	2301      	movs	r3, #1
{
 8009480:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8009484:	f10d 0207 	add.w	r2, sp, #7
 8009488:	2195      	movs	r1, #149	; 0x95
 800948a:	f7ff ffae 	bl	80093ea <ft6x06_write_reg>
}
 800948e:	b003      	add	sp, #12
 8009490:	f85d fb04 	ldr.w	pc, [sp], #4

08009494 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8009494:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8009496:	2301      	movs	r3, #1
{
 8009498:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800949c:	f10d 0207 	add.w	r2, sp, #7
 80094a0:	2196      	movs	r1, #150	; 0x96
 80094a2:	f7ff ffa2 	bl	80093ea <ft6x06_write_reg>
}
 80094a6:	b003      	add	sp, #12
 80094a8:	f85d fb04 	ldr.w	pc, [sp], #4

080094ac <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80094ac:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80094ae:	2301      	movs	r3, #1
{
 80094b0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80094b4:	f10d 0207 	add.w	r2, sp, #7
 80094b8:	21a4      	movs	r1, #164	; 0xa4
 80094ba:	f7ff ff96 	bl	80093ea <ft6x06_write_reg>
}
 80094be:	b003      	add	sp, #12
 80094c0:	f85d fb04 	ldr.w	pc, [sp], #4

080094c4 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80094c4:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80094c6:	2301      	movs	r3, #1
 80094c8:	21a8      	movs	r1, #168	; 0xa8
 80094ca:	f7ff bf87 	b.w	80093dc <ft6x06_read_reg>
	...

080094d0 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80094d0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80094d2:	2201      	movs	r2, #1
 80094d4:	4b07      	ldr	r3, [pc, #28]	; (80094f4 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80094d6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80094da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80094dc:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80094de:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80094e0:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80094e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094e6:	f005 f961 	bl	800e7ac <HAL_SDRAM_SendCommand>
 80094ea:	3800      	subs	r0, #0
 80094ec:	bf18      	it	ne
 80094ee:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80094f0:	4240      	negs	r0, r0
 80094f2:	bd08      	pop	{r3, pc}
 80094f4:	240050c8 	.word	0x240050c8

080094f8 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80094f8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80094fa:	2202      	movs	r2, #2
 80094fc:	4b08      	ldr	r3, [pc, #32]	; (8009520 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80094fe:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8009502:	2101      	movs	r1, #1
 8009504:	2200      	movs	r2, #0
 8009506:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800950a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800950e:	4619      	mov	r1, r3
 8009510:	f005 f94c 	bl	800e7ac <HAL_SDRAM_SendCommand>
 8009514:	3800      	subs	r0, #0
 8009516:	bf18      	it	ne
 8009518:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800951a:	4240      	negs	r0, r0
 800951c:	bd08      	pop	{r3, pc}
 800951e:	bf00      	nop
 8009520:	240050c8 	.word	0x240050c8

08009524 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009524:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 8009528:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800952a:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800952c:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800952e:	4c0b      	ldr	r4, [pc, #44]	; (800955c <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8009530:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8009532:	698a      	ldr	r2, [r1, #24]
 8009534:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8009536:	69ca      	ldr	r2, [r1, #28]
 8009538:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800953a:	2204      	movs	r2, #4
 800953c:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800953e:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009540:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8009542:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8009544:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8009546:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800954a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800954e:	f005 f92d 	bl	800e7ac <HAL_SDRAM_SendCommand>
 8009552:	3800      	subs	r0, #0
 8009554:	bf18      	it	ne
 8009556:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009558:	4240      	negs	r0, r0
 800955a:	bd10      	pop	{r4, pc}
 800955c:	240050c8 	.word	0x240050c8

08009560 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8009560:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8009564:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8009568:	2108      	movs	r1, #8
 800956a:	2200      	movs	r2, #0
 800956c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8009570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009574:	4619      	mov	r1, r3
 8009576:	f005 f919 	bl	800e7ac <HAL_SDRAM_SendCommand>
 800957a:	3800      	subs	r0, #0
 800957c:	bf18      	it	ne
 800957e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009580:	4240      	negs	r0, r0
 8009582:	bd08      	pop	{r3, pc}
 8009584:	240050c8 	.word	0x240050c8

08009588 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8009588:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800958a:	f005 f92e 	bl	800e7ea <HAL_SDRAM_ProgramRefreshRate>
 800958e:	3800      	subs	r0, #0
 8009590:	bf18      	it	ne
 8009592:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8009594:	4240      	negs	r0, r0
 8009596:	bd08      	pop	{r3, pc}

08009598 <IS42S32800J_Init>:
{
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800959c:	6809      	ldr	r1, [r1, #0]
{
 800959e:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80095a0:	f7ff ff96 	bl	80094d0 <IS42S32800J_ClockEnable>
 80095a4:	b110      	cbz	r0, 80095ac <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80095a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80095aa:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80095ac:	f001 fc98 	bl	800aee0 <HAL_GetTick>
 80095b0:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80095b2:	f001 fc95 	bl	800aee0 <HAL_GetTick>
 80095b6:	4286      	cmp	r6, r0
 80095b8:	d0fb      	beq.n	80095b2 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80095ba:	6821      	ldr	r1, [r4, #0]
 80095bc:	4628      	mov	r0, r5
 80095be:	f7ff ff9b 	bl	80094f8 <IS42S32800J_Precharge>
 80095c2:	2800      	cmp	r0, #0
 80095c4:	d1ef      	bne.n	80095a6 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80095c6:	4628      	mov	r0, r5
 80095c8:	e9d4 1200 	ldrd	r1, r2, [r4]
 80095cc:	f7ff ffc8 	bl	8009560 <IS42S32800J_RefreshMode>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d1e8      	bne.n	80095a6 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80095d4:	4621      	mov	r1, r4
 80095d6:	4628      	mov	r0, r5
 80095d8:	f7ff ffa4 	bl	8009524 <IS42S32800J_ModeRegConfig>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1e2      	bne.n	80095a6 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80095e0:	68a1      	ldr	r1, [r4, #8]
 80095e2:	4628      	mov	r0, r5
 80095e4:	f7ff ffd0 	bl	8009588 <IS42S32800J_RefreshRate>
 80095e8:	3800      	subs	r0, #0
 80095ea:	bf18      	it	ne
 80095ec:	2001      	movne	r0, #1
 80095ee:	4240      	negs	r0, r0
  return ret;
 80095f0:	e7db      	b.n	80095aa <IS42S32800J_Init+0x12>

080095f2 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80095f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80095f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80095fa:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80095fe:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8009602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009606:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800960a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800960e:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8009610:	2000      	movs	r0, #0
 8009612:	4770      	bx	lr

08009614 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009614:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009616:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800961a:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800961c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8009620:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009622:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8009624:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 8009626:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8009628:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800962a:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800962c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800962e:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009630:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8009632:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8009634:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8009636:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009638:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800963a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800963e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8009642:	2310      	movs	r3, #16
 8009644:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8009646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800964a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800964c:	f240 1301 	movw	r3, #257	; 0x101
 8009650:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009652:	f241 3388 	movw	r3, #5000	; 0x1388
 8009656:	f003 fc88 	bl	800cf6a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800965a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 800965c:	bf14      	ite	ne
 800965e:	f06f 0004 	mvnne.w	r0, #4
 8009662:	2000      	moveq	r0, #0
 8009664:	b015      	add	sp, #84	; 0x54
 8009666:	f85d fb04 	ldr.w	pc, [sp], #4

0800966a <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800966a:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800966c:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8009670:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009672:	bf08      	it	eq
 8009674:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8009678:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800967a:	bf18      	it	ne
 800967c:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8009680:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009682:	a906      	add	r1, sp, #24
{
 8009684:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009686:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8009688:	2306      	movs	r3, #6
 800968a:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800968c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800968e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8009692:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8009694:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009696:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009698:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800969c:	f003 fb6a 	bl	800cd74 <HAL_QSPI_Command>
 80096a0:	bb20      	cbnz	r0, 80096ec <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80096a2:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80096a6:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80096a8:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80096aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80096ae:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096b0:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80096b2:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80096b6:	f04f 0310 	mov.w	r3, #16
 80096ba:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80096be:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096c2:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80096c4:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80096c8:	bf0c      	ite	eq
 80096ca:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 80096ce:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096d2:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80096d4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80096da:	f003 fc46 	bl	800cf6a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80096de:	2800      	cmp	r0, #0
 80096e0:	bf0c      	ite	eq
 80096e2:	2000      	moveq	r0, #0
 80096e4:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 80096e8:	b015      	add	sp, #84	; 0x54
 80096ea:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80096ec:	f06f 0001 	mvn.w	r0, #1
 80096f0:	e7fa      	b.n	80096e8 <MT25TL01G_WriteEnable+0x7e>

080096f2 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80096f2:	2903      	cmp	r1, #3
{
 80096f4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80096f6:	bf08      	it	eq
 80096f8:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80096fc:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80096fe:	bf18      	it	ne
 8009700:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009708:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800970a:	23b7      	movs	r3, #183	; 0xb7
 800970c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800970e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009710:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009714:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009716:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009718:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800971a:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800971e:	f7ff ffa4 	bl	800966a <MT25TL01G_WriteEnable>
 8009722:	b958      	cbnz	r0, 800973c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4669      	mov	r1, sp
 800972a:	4620      	mov	r0, r4
 800972c:	f003 fb22 	bl	800cd74 <HAL_QSPI_Command>
 8009730:	b920      	cbnz	r0, 800973c <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8009732:	4629      	mov	r1, r5
 8009734:	4620      	mov	r0, r4
 8009736:	f7ff ff6d 	bl	8009614 <MT25TL01G_AutoPollingMemReady>
 800973a:	b108      	cbz	r0, 8009740 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800973c:	f06f 0001 	mvn.w	r0, #1
}
 8009740:	b00f      	add	sp, #60	; 0x3c
 8009742:	bd30      	pop	{r4, r5, pc}

08009744 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8009744:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009746:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800974a:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800974c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009750:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009752:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009754:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8009756:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009758:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800975a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800975e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009760:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009762:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009764:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009768:	f003 fb04 	bl	800cd74 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800976c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800976e:	bf14      	ite	ne
 8009770:	f06f 0001 	mvnne.w	r0, #1
 8009774:	2000      	moveq	r0, #0
 8009776:	b00f      	add	sp, #60	; 0x3c
 8009778:	f85d fb04 	ldr.w	pc, [sp], #4

0800977c <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800977c:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800977e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8009782:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009784:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009788:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800978a:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800978c:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800978e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009790:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009792:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8009796:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8009798:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800979a:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800979c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097a0:	f003 fae8 	bl	800cd74 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80097a4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80097a6:	bf14      	ite	ne
 80097a8:	f06f 0001 	mvnne.w	r0, #1
 80097ac:	2000      	moveq	r0, #0
 80097ae:	b00f      	add	sp, #60	; 0x3c
 80097b0:	f85d fb04 	ldr.w	pc, [sp], #4

080097b4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80097b4:	b500      	push	{lr}
 80097b6:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80097b8:	2903      	cmp	r1, #3
 80097ba:	d80e      	bhi.n	80097da <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80097bc:	e8df f001 	tbb	[pc, r1]
 80097c0:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80097c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097c8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80097ca:	230e      	movs	r3, #14
 80097cc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80097ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80097d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80097d8:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80097da:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80097dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80097e0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80097e4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80097e6:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80097e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80097ec:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80097ee:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80097f0:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80097f4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80097f6:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80097f8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80097fa:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80097fe:	f003 fc04 	bl	800d00a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8009802:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009804:	bf14      	ite	ne
 8009806:	f06f 0005 	mvnne.w	r0, #5
 800980a:	2000      	moveq	r0, #0
 800980c:	b011      	add	sp, #68	; 0x44
 800980e:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009816:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8009818:	233d      	movs	r3, #61	; 0x3d
 800981a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800981c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009820:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8009822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009826:	e7d7      	b.n	80097d8 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800982e:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009830:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8009832:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009836:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8009838:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800983c:	e7cc      	b.n	80097d8 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800983e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009842:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8009844:	23ed      	movs	r3, #237	; 0xed
 8009846:	e7f3      	b.n	8009830 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08009848 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8009848:	b500      	push	{lr}
 800984a:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800984c:	2903      	cmp	r1, #3
 800984e:	d80e      	bhi.n	800986e <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8009850:	e8df f001 	tbb	[pc, r1]
 8009854:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8009858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800985c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800985e:	230c      	movs	r3, #12
 8009860:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8009862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009866:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8009868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800986c:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800986e:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8009870:	466a      	mov	r2, sp
 8009872:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8009874:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8009876:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800987a:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800987c:	2300      	movs	r3, #0
 800987e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8009880:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009882:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8009886:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800988a:	f003 fbbe 	bl	800d00a <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800988e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009890:	bf14      	ite	ne
 8009892:	f06f 0005 	mvnne.w	r0, #5
 8009896:	2000      	moveq	r0, #0
 8009898:	b011      	add	sp, #68	; 0x44
 800989a:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800989e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80098a4:	23bc      	movs	r3, #188	; 0xbc
 80098a6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80098a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098ac:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80098ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098b2:	e7db      	b.n	800986c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80098b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098b8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80098ba:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80098bc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80098be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80098c4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80098c8:	e7d0      	b.n	800986c <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80098ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098ce:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80098d0:	23eb      	movs	r3, #235	; 0xeb
 80098d2:	e7f3      	b.n	80098bc <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080098d4 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80098d4:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098d6:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80098da:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80098dc:	bf08      	it	eq
 80098de:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80098e2:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80098e4:	bf18      	it	ne
 80098e6:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098ea:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80098ec:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80098ee:	2366      	movs	r3, #102	; 0x66
 80098f0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80098f2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80098f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80098fa:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80098fc:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80098fe:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009902:	f003 fa37 	bl	800cd74 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009906:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8009908:	bf14      	ite	ne
 800990a:	f06f 0001 	mvnne.w	r0, #1
 800990e:	2000      	moveq	r0, #0
 8009910:	b00f      	add	sp, #60	; 0x3c
 8009912:	f85d fb04 	ldr.w	pc, [sp], #4

08009916 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009916:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009918:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800991c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800991e:	bf08      	it	eq
 8009920:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8009924:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8009926:	bf18      	it	ne
 8009928:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800992c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800992e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8009930:	2399      	movs	r3, #153	; 0x99
 8009932:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8009934:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8009936:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800993a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800993c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800993e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8009940:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009944:	f003 fa16 	bl	800cd74 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8009948:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800994a:	bf14      	ite	ne
 800994c:	f06f 0001 	mvnne.w	r0, #1
 8009950:	2000      	moveq	r0, #0
 8009952:	b00f      	add	sp, #60	; 0x3c
 8009954:	f85d fb04 	ldr.w	pc, [sp], #4

08009958 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8009958:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800995a:	6884      	ldr	r4, [r0, #8]
 800995c:	8800      	ldrh	r0, [r0, #0]
 800995e:	46a4      	mov	ip, r4
}
 8009960:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009964:	4760      	bx	ip

08009966 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8009966:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009968:	6844      	ldr	r4, [r0, #4]
 800996a:	8800      	ldrh	r0, [r0, #0]
 800996c:	46a4      	mov	ip, r4
}
 800996e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009972:	4760      	bx	ip

08009974 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009974:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8009976:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800997c:	4798      	blx	r3
 800997e:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8009980:	68e3      	ldr	r3, [r4, #12]
 8009982:	4798      	blx	r3
 8009984:	1b83      	subs	r3, r0, r6
 8009986:	42ab      	cmp	r3, r5
 8009988:	d3fa      	bcc.n	8009980 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800998a:	bd70      	pop	{r4, r5, r6, pc}

0800998c <OTM8009A_Init>:
{
 800998c:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009990:	2300      	movs	r3, #0
 8009992:	f100 0810 	add.w	r8, r0, #16
{
 8009996:	4682      	mov	sl, r0
 8009998:	4689      	mov	r9, r1
 800999a:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800999c:	4619      	mov	r1, r3
 800999e:	4add      	ldr	r2, [pc, #884]	; (8009d14 <OTM8009A_Init+0x388>)
 80099a0:	4640      	mov	r0, r8
 80099a2:	f000 fbad 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80099a6:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80099a8:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80099aa:	4adb      	ldr	r2, [pc, #876]	; (8009d18 <OTM8009A_Init+0x38c>)
 80099ac:	21ff      	movs	r1, #255	; 0xff
 80099ae:	4640      	mov	r0, r8
 80099b0:	f000 fba6 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80099b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80099b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80099b8:	4ad8      	ldr	r2, [pc, #864]	; (8009d1c <OTM8009A_Init+0x390>)
 80099ba:	4619      	mov	r1, r3
 80099bc:	4640      	mov	r0, r8
 80099be:	f000 fb9f 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80099c2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80099c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80099c6:	4ad6      	ldr	r2, [pc, #856]	; (8009d20 <OTM8009A_Init+0x394>)
 80099c8:	21ff      	movs	r1, #255	; 0xff
 80099ca:	4640      	mov	r0, r8
 80099cc:	f000 fb98 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80099d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80099d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80099d4:	4ad1      	ldr	r2, [pc, #836]	; (8009d1c <OTM8009A_Init+0x390>)
 80099d6:	4619      	mov	r1, r3
 80099d8:	4640      	mov	r0, r8
 80099da:	f000 fb91 	bl	800a100 <otm8009a_write_reg>
 80099de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80099e0:	2300      	movs	r3, #0
 80099e2:	4ad0      	ldr	r2, [pc, #832]	; (8009d24 <OTM8009A_Init+0x398>)
 80099e4:	21c4      	movs	r1, #196	; 0xc4
 80099e6:	4640      	mov	r0, r8
 80099e8:	f000 fb8a 	bl	800a100 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80099ec:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80099ee:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80099f0:	4650      	mov	r0, sl
 80099f2:	f7ff ffbf 	bl	8009974 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80099f6:	2300      	movs	r3, #0
 80099f8:	4acb      	ldr	r2, [pc, #812]	; (8009d28 <OTM8009A_Init+0x39c>)
 80099fa:	4640      	mov	r0, r8
 80099fc:	4619      	mov	r1, r3
 80099fe:	4dcb      	ldr	r5, [pc, #812]	; (8009d2c <OTM8009A_Init+0x3a0>)
 8009a00:	f000 fb7e 	bl	800a100 <otm8009a_write_reg>
 8009a04:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009a06:	2300      	movs	r3, #0
 8009a08:	4ac9      	ldr	r2, [pc, #804]	; (8009d30 <OTM8009A_Init+0x3a4>)
 8009a0a:	21c4      	movs	r1, #196	; 0xc4
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	f000 fb77 	bl	800a100 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009a12:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8009a14:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8009a16:	4650      	mov	r0, sl
 8009a18:	f7ff ffac 	bl	8009974 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4ac5      	ldr	r2, [pc, #788]	; (8009d34 <OTM8009A_Init+0x3a8>)
 8009a20:	4640      	mov	r0, r8
 8009a22:	4619      	mov	r1, r3
 8009a24:	f000 fb6c 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009a28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8009a2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009a2c:	4ac2      	ldr	r2, [pc, #776]	; (8009d38 <OTM8009A_Init+0x3ac>)
 8009a2e:	21c5      	movs	r1, #197	; 0xc5
 8009a30:	4640      	mov	r0, r8
 8009a32:	f000 fb65 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009a36:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8009a38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009a3a:	4ac0      	ldr	r2, [pc, #768]	; (8009d3c <OTM8009A_Init+0x3b0>)
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f000 fb5e 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009a44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8009a46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009a48:	4abd      	ldr	r2, [pc, #756]	; (8009d40 <OTM8009A_Init+0x3b4>)
 8009a4a:	21c5      	movs	r1, #197	; 0xc5
 8009a4c:	4640      	mov	r0, r8
 8009a4e:	f000 fb57 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009a52:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009a54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009a56:	4abb      	ldr	r2, [pc, #748]	; (8009d44 <OTM8009A_Init+0x3b8>)
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	f000 fb50 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009a60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8009a62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009a64:	4ab8      	ldr	r2, [pc, #736]	; (8009d48 <OTM8009A_Init+0x3bc>)
 8009a66:	21c0      	movs	r1, #192	; 0xc0
 8009a68:	4640      	mov	r0, r8
 8009a6a:	f000 fb49 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009a6e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8009a70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009a72:	4aa8      	ldr	r2, [pc, #672]	; (8009d14 <OTM8009A_Init+0x388>)
 8009a74:	4619      	mov	r1, r3
 8009a76:	4640      	mov	r0, r8
 8009a78:	f000 fb42 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009a7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009a7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009a80:	4ab2      	ldr	r2, [pc, #712]	; (8009d4c <OTM8009A_Init+0x3c0>)
 8009a82:	21d9      	movs	r1, #217	; 0xd9
 8009a84:	4640      	mov	r0, r8
 8009a86:	f000 fb3b 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009a8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8009a8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009a8e:	4ab0      	ldr	r2, [pc, #704]	; (8009d50 <OTM8009A_Init+0x3c4>)
 8009a90:	4619      	mov	r1, r3
 8009a92:	4640      	mov	r0, r8
 8009a94:	f000 fb34 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009a98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009a9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009a9c:	4aad      	ldr	r2, [pc, #692]	; (8009d54 <OTM8009A_Init+0x3c8>)
 8009a9e:	21c1      	movs	r1, #193	; 0xc1
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	f000 fb2d 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009aa6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8009aa8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009aaa:	4aab      	ldr	r2, [pc, #684]	; (8009d58 <OTM8009A_Init+0x3cc>)
 8009aac:	4619      	mov	r1, r3
 8009aae:	4640      	mov	r0, r8
 8009ab0:	f000 fb26 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009ab4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009ab6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009ab8:	4aa8      	ldr	r2, [pc, #672]	; (8009d5c <OTM8009A_Init+0x3d0>)
 8009aba:	21c1      	movs	r1, #193	; 0xc1
 8009abc:	4640      	mov	r0, r8
 8009abe:	f000 fb1f 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009ac2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8009ac4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009ac6:	4aa6      	ldr	r2, [pc, #664]	; (8009d60 <OTM8009A_Init+0x3d4>)
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4640      	mov	r0, r8
 8009acc:	f000 fb18 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009ad0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8009ad2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009ad4:	4aa3      	ldr	r2, [pc, #652]	; (8009d64 <OTM8009A_Init+0x3d8>)
 8009ad6:	21c5      	movs	r1, #197	; 0xc5
 8009ad8:	4640      	mov	r0, r8
 8009ada:	f000 fb11 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009ade:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8009ae0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009ae2:	4aa1      	ldr	r2, [pc, #644]	; (8009d68 <OTM8009A_Init+0x3dc>)
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f000 fb0a 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009aec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8009aee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009af0:	4a93      	ldr	r2, [pc, #588]	; (8009d40 <OTM8009A_Init+0x3b4>)
 8009af2:	21c5      	movs	r1, #197	; 0xc5
 8009af4:	4640      	mov	r0, r8
 8009af6:	f000 fb03 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009afa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8009afc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009afe:	4a85      	ldr	r2, [pc, #532]	; (8009d14 <OTM8009A_Init+0x388>)
 8009b00:	4619      	mov	r1, r3
 8009b02:	4640      	mov	r0, r8
 8009b04:	f000 fafc 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009b08:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009b0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009b0c:	4a97      	ldr	r2, [pc, #604]	; (8009d6c <OTM8009A_Init+0x3e0>)
 8009b0e:	21d8      	movs	r1, #216	; 0xd8
 8009b10:	4640      	mov	r0, r8
 8009b12:	f000 faf5 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009b16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8009b18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009b1a:	4a95      	ldr	r2, [pc, #596]	; (8009d70 <OTM8009A_Init+0x3e4>)
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4640      	mov	r0, r8
 8009b20:	f000 faee 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009b24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8009b26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009b28:	4a92      	ldr	r2, [pc, #584]	; (8009d74 <OTM8009A_Init+0x3e8>)
 8009b2a:	21c5      	movs	r1, #197	; 0xc5
 8009b2c:	4640      	mov	r0, r8
 8009b2e:	f000 fae7 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009b32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8009b34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009b36:	4a90      	ldr	r2, [pc, #576]	; (8009d78 <OTM8009A_Init+0x3ec>)
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4640      	mov	r0, r8
 8009b3c:	f000 fae0 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009b40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8009b42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009b44:	4a8d      	ldr	r2, [pc, #564]	; (8009d7c <OTM8009A_Init+0x3f0>)
 8009b46:	21c0      	movs	r1, #192	; 0xc0
 8009b48:	4640      	mov	r0, r8
 8009b4a:	f000 fad9 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009b4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8009b50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009b52:	4a8b      	ldr	r2, [pc, #556]	; (8009d80 <OTM8009A_Init+0x3f4>)
 8009b54:	4619      	mov	r1, r3
 8009b56:	4640      	mov	r0, r8
 8009b58:	f000 fad2 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009b5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8009b5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009b60:	4a88      	ldr	r2, [pc, #544]	; (8009d84 <OTM8009A_Init+0x3f8>)
 8009b62:	21c5      	movs	r1, #197	; 0xc5
 8009b64:	4640      	mov	r0, r8
 8009b66:	f000 facb 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009b6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8009b6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009b6e:	4a78      	ldr	r2, [pc, #480]	; (8009d50 <OTM8009A_Init+0x3c4>)
 8009b70:	4619      	mov	r1, r3
 8009b72:	4640      	mov	r0, r8
 8009b74:	f000 fac4 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009b78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009b7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009b7c:	4a82      	ldr	r2, [pc, #520]	; (8009d88 <OTM8009A_Init+0x3fc>)
 8009b7e:	21c4      	movs	r1, #196	; 0xc4
 8009b80:	4640      	mov	r0, r8
 8009b82:	f000 fabd 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009b86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8009b88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009b8a:	4a73      	ldr	r2, [pc, #460]	; (8009d58 <OTM8009A_Init+0x3cc>)
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4640      	mov	r0, r8
 8009b90:	f000 fab6 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009b94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8009b96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009b98:	4a7c      	ldr	r2, [pc, #496]	; (8009d8c <OTM8009A_Init+0x400>)
 8009b9a:	21c1      	movs	r1, #193	; 0xc1
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	f000 faaf 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009ba2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8009ba4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009ba6:	4a7a      	ldr	r2, [pc, #488]	; (8009d90 <OTM8009A_Init+0x404>)
 8009ba8:	4619      	mov	r1, r3
 8009baa:	4640      	mov	r0, r8
 8009bac:	f000 faa8 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009bb0:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8009bb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009bb4:	4a77      	ldr	r2, [pc, #476]	; (8009d94 <OTM8009A_Init+0x408>)
 8009bb6:	21b3      	movs	r1, #179	; 0xb3
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f000 faa1 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009bbe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8009bc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009bc2:	4a56      	ldr	r2, [pc, #344]	; (8009d1c <OTM8009A_Init+0x390>)
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f000 fa9a 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009bcc:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009bce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009bd0:	4a71      	ldr	r2, [pc, #452]	; (8009d98 <OTM8009A_Init+0x40c>)
 8009bd2:	21ce      	movs	r1, #206	; 0xce
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	f000 fa93 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009bda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8009bdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009bde:	4a6f      	ldr	r2, [pc, #444]	; (8009d9c <OTM8009A_Init+0x410>)
 8009be0:	4619      	mov	r1, r3
 8009be2:	4640      	mov	r0, r8
 8009be4:	f000 fa8c 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009be8:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009bea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009bec:	4a6c      	ldr	r2, [pc, #432]	; (8009da0 <OTM8009A_Init+0x414>)
 8009bee:	21ce      	movs	r1, #206	; 0xce
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	f000 fa85 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009bf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8009bf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009bfa:	4a6a      	ldr	r2, [pc, #424]	; (8009da4 <OTM8009A_Init+0x418>)
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	4640      	mov	r0, r8
 8009c00:	f000 fa7e 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009c04:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009c06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009c08:	4a67      	ldr	r2, [pc, #412]	; (8009da8 <OTM8009A_Init+0x41c>)
 8009c0a:	21ce      	movs	r1, #206	; 0xce
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	f000 fa77 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009c12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8009c14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009c16:	4a65      	ldr	r2, [pc, #404]	; (8009dac <OTM8009A_Init+0x420>)
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	f000 fa70 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009c20:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009c22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009c24:	4a62      	ldr	r2, [pc, #392]	; (8009db0 <OTM8009A_Init+0x424>)
 8009c26:	21cf      	movs	r1, #207	; 0xcf
 8009c28:	4640      	mov	r0, r8
 8009c2a:	f000 fa69 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009c2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8009c30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009c32:	4a60      	ldr	r2, [pc, #384]	; (8009db4 <OTM8009A_Init+0x428>)
 8009c34:	4619      	mov	r1, r3
 8009c36:	4640      	mov	r0, r8
 8009c38:	f000 fa62 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009c3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009c3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009c40:	4a5d      	ldr	r2, [pc, #372]	; (8009db8 <OTM8009A_Init+0x42c>)
 8009c42:	21cf      	movs	r1, #207	; 0xcf
 8009c44:	4640      	mov	r0, r8
 8009c46:	f000 fa5b 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009c4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8009c4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009c4e:	4a33      	ldr	r2, [pc, #204]	; (8009d1c <OTM8009A_Init+0x390>)
 8009c50:	4619      	mov	r1, r3
 8009c52:	4640      	mov	r0, r8
 8009c54:	f000 fa54 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009c58:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009c5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009c5c:	4a57      	ldr	r2, [pc, #348]	; (8009dbc <OTM8009A_Init+0x430>)
 8009c5e:	21cb      	movs	r1, #203	; 0xcb
 8009c60:	4640      	mov	r0, r8
 8009c62:	f000 fa4d 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009c66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8009c68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009c6a:	4a55      	ldr	r2, [pc, #340]	; (8009dc0 <OTM8009A_Init+0x434>)
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f000 fa46 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009c74:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009c76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009c78:	4a52      	ldr	r2, [pc, #328]	; (8009dc4 <OTM8009A_Init+0x438>)
 8009c7a:	21cb      	movs	r1, #203	; 0xcb
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	f000 fa3f 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009c82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8009c84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009c86:	4a45      	ldr	r2, [pc, #276]	; (8009d9c <OTM8009A_Init+0x410>)
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f000 fa38 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009c90:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009c92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009c94:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <OTM8009A_Init+0x43c>)
 8009c96:	21cb      	movs	r1, #203	; 0xcb
 8009c98:	4640      	mov	r0, r8
 8009c9a:	f000 fa31 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009c9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8009ca0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009ca2:	4a40      	ldr	r2, [pc, #256]	; (8009da4 <OTM8009A_Init+0x418>)
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f000 fa2a 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009cac:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009cae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009cb0:	4a46      	ldr	r2, [pc, #280]	; (8009dcc <OTM8009A_Init+0x440>)
 8009cb2:	21cb      	movs	r1, #203	; 0xcb
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	f000 fa23 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009cba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8009cbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009cbe:	4a3b      	ldr	r2, [pc, #236]	; (8009dac <OTM8009A_Init+0x420>)
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	f000 fa1c 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009cc8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009cca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009ccc:	4a40      	ldr	r2, [pc, #256]	; (8009dd0 <OTM8009A_Init+0x444>)
 8009cce:	21cb      	movs	r1, #203	; 0xcb
 8009cd0:	4640      	mov	r0, r8
 8009cd2:	f000 fa15 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009cd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8009cd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009cda:	4a36      	ldr	r2, [pc, #216]	; (8009db4 <OTM8009A_Init+0x428>)
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f000 fa0e 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009ce4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009ce6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009ce8:	4a3a      	ldr	r2, [pc, #232]	; (8009dd4 <OTM8009A_Init+0x448>)
 8009cea:	21cb      	movs	r1, #203	; 0xcb
 8009cec:	4640      	mov	r0, r8
 8009cee:	f000 fa07 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009cf2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8009cf4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009cf6:	4a38      	ldr	r2, [pc, #224]	; (8009dd8 <OTM8009A_Init+0x44c>)
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f000 fa00 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009d00:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8009d02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009d04:	4a35      	ldr	r2, [pc, #212]	; (8009ddc <OTM8009A_Init+0x450>)
 8009d06:	21cb      	movs	r1, #203	; 0xcb
 8009d08:	4640      	mov	r0, r8
 8009d0a:	f000 f9f9 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009d0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8009d10:	4404      	add	r4, r0
 8009d12:	e065      	b.n	8009de0 <OTM8009A_Init+0x454>
 8009d14:	080246dd 	.word	0x080246dd
 8009d18:	080245d0 	.word	0x080245d0
 8009d1c:	080246de 	.word	0x080246de
 8009d20:	0802464b 	.word	0x0802464b
 8009d24:	080246df 	.word	0x080246df
 8009d28:	080246e0 	.word	0x080246e0
 8009d2c:	240050d8 	.word	0x240050d8
 8009d30:	080246e1 	.word	0x080246e1
 8009d34:	080246e2 	.word	0x080246e2
 8009d38:	080246e3 	.word	0x080246e3
 8009d3c:	080246e4 	.word	0x080246e4
 8009d40:	080246e5 	.word	0x080246e5
 8009d44:	080246e6 	.word	0x080246e6
 8009d48:	080246e7 	.word	0x080246e7
 8009d4c:	080246e8 	.word	0x080246e8
 8009d50:	080246e9 	.word	0x080246e9
 8009d54:	080246ea 	.word	0x080246ea
 8009d58:	080246eb 	.word	0x080246eb
 8009d5c:	080246ec 	.word	0x080246ec
 8009d60:	080246ed 	.word	0x080246ed
 8009d64:	080246ee 	.word	0x080246ee
 8009d68:	080246ef 	.word	0x080246ef
 8009d6c:	080246b6 	.word	0x080246b6
 8009d70:	080246f0 	.word	0x080246f0
 8009d74:	080246f1 	.word	0x080246f1
 8009d78:	080246f2 	.word	0x080246f2
 8009d7c:	080246f3 	.word	0x080246f3
 8009d80:	080246f4 	.word	0x080246f4
 8009d84:	080246f5 	.word	0x080246f5
 8009d88:	080246f6 	.word	0x080246f6
 8009d8c:	080246f7 	.word	0x080246f7
 8009d90:	080246f8 	.word	0x080246f8
 8009d94:	080246b8 	.word	0x080246b8
 8009d98:	080246ba 	.word	0x080246ba
 8009d9c:	080246f9 	.word	0x080246f9
 8009da0:	080246c0 	.word	0x080246c0
 8009da4:	080246fa 	.word	0x080246fa
 8009da8:	080246ce 	.word	0x080246ce
 8009dac:	080246fb 	.word	0x080246fb
 8009db0:	080245d3 	.word	0x080245d3
 8009db4:	080246fc 	.word	0x080246fc
 8009db8:	08024709 	.word	0x08024709
 8009dbc:	080245dd 	.word	0x080245dd
 8009dc0:	080246fd 	.word	0x080246fd
 8009dc4:	080245e7 	.word	0x080245e7
 8009dc8:	080245f6 	.word	0x080245f6
 8009dcc:	08024605 	.word	0x08024605
 8009dd0:	0802460f 	.word	0x0802460f
 8009dd4:	0802461e 	.word	0x0802461e
 8009dd8:	080246fe 	.word	0x080246fe
 8009ddc:	0802462d 	.word	0x0802462d
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009de0:	4a99      	ldr	r2, [pc, #612]	; (800a048 <OTM8009A_Init+0x6bc>)
 8009de2:	4619      	mov	r1, r3
 8009de4:	4640      	mov	r0, r8
 8009de6:	f000 f98b 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009dea:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8009dec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009dee:	4a97      	ldr	r2, [pc, #604]	; (800a04c <OTM8009A_Init+0x6c0>)
 8009df0:	21cb      	movs	r1, #203	; 0xcb
 8009df2:	4640      	mov	r0, r8
 8009df4:	f000 f984 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009df8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8009dfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009dfc:	4a94      	ldr	r2, [pc, #592]	; (800a050 <OTM8009A_Init+0x6c4>)
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4640      	mov	r0, r8
 8009e02:	f000 f97d 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009e06:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8009e08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009e0a:	4a92      	ldr	r2, [pc, #584]	; (800a054 <OTM8009A_Init+0x6c8>)
 8009e0c:	21cc      	movs	r1, #204	; 0xcc
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f000 f976 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009e14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8009e16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009e18:	4a8f      	ldr	r2, [pc, #572]	; (800a058 <OTM8009A_Init+0x6cc>)
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	f000 f96f 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009e22:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8009e24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009e26:	4a8d      	ldr	r2, [pc, #564]	; (800a05c <OTM8009A_Init+0x6d0>)
 8009e28:	21cc      	movs	r1, #204	; 0xcc
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f000 f968 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009e30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8009e32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009e34:	4a8a      	ldr	r2, [pc, #552]	; (800a060 <OTM8009A_Init+0x6d4>)
 8009e36:	4619      	mov	r1, r3
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f000 f961 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009e3e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8009e40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009e42:	4a88      	ldr	r2, [pc, #544]	; (800a064 <OTM8009A_Init+0x6d8>)
 8009e44:	21cc      	movs	r1, #204	; 0xcc
 8009e46:	4640      	mov	r0, r8
 8009e48:	f000 f95a 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009e4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8009e4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009e50:	4a85      	ldr	r2, [pc, #532]	; (800a068 <OTM8009A_Init+0x6dc>)
 8009e52:	4619      	mov	r1, r3
 8009e54:	4640      	mov	r0, r8
 8009e56:	f000 f953 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009e5a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8009e5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009e5e:	4a83      	ldr	r2, [pc, #524]	; (800a06c <OTM8009A_Init+0x6e0>)
 8009e60:	21cc      	movs	r1, #204	; 0xcc
 8009e62:	4640      	mov	r0, r8
 8009e64:	f000 f94c 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009e68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8009e6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009e6c:	4a80      	ldr	r2, [pc, #512]	; (800a070 <OTM8009A_Init+0x6e4>)
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4640      	mov	r0, r8
 8009e72:	f000 f945 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009e76:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8009e78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009e7a:	4a7e      	ldr	r2, [pc, #504]	; (800a074 <OTM8009A_Init+0x6e8>)
 8009e7c:	21cc      	movs	r1, #204	; 0xcc
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f000 f93e 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8009e86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e88:	4a7b      	ldr	r2, [pc, #492]	; (800a078 <OTM8009A_Init+0x6ec>)
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4640      	mov	r0, r8
 8009e8e:	f000 f937 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009e92:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8009e94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009e96:	4a79      	ldr	r2, [pc, #484]	; (800a07c <OTM8009A_Init+0x6f0>)
 8009e98:	21cc      	movs	r1, #204	; 0xcc
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f000 f930 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009ea0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8009ea2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009ea4:	4a76      	ldr	r2, [pc, #472]	; (800a080 <OTM8009A_Init+0x6f4>)
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	f000 f929 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009eae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8009eb0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009eb2:	4a74      	ldr	r2, [pc, #464]	; (800a084 <OTM8009A_Init+0x6f8>)
 8009eb4:	21c5      	movs	r1, #197	; 0xc5
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	f000 f922 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ebc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8009ebe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ec0:	4a71      	ldr	r2, [pc, #452]	; (800a088 <OTM8009A_Init+0x6fc>)
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4640      	mov	r0, r8
 8009ec6:	f000 f91b 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009eca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8009ecc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009ece:	4a6f      	ldr	r2, [pc, #444]	; (800a08c <OTM8009A_Init+0x700>)
 8009ed0:	21f5      	movs	r1, #245	; 0xf5
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	f000 f914 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009ed8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8009eda:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009edc:	4a6c      	ldr	r2, [pc, #432]	; (800a090 <OTM8009A_Init+0x704>)
 8009ede:	4619      	mov	r1, r3
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	f000 f90d 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009ee6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8009ee8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009eea:	4a6a      	ldr	r2, [pc, #424]	; (800a094 <OTM8009A_Init+0x708>)
 8009eec:	21c6      	movs	r1, #198	; 0xc6
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f000 f906 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ef4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8009ef6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009ef8:	4a67      	ldr	r2, [pc, #412]	; (800a098 <OTM8009A_Init+0x70c>)
 8009efa:	4619      	mov	r1, r3
 8009efc:	4640      	mov	r0, r8
 8009efe:	f000 f8ff 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009f02:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f04:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009f06:	4a65      	ldr	r2, [pc, #404]	; (800a09c <OTM8009A_Init+0x710>)
 8009f08:	21ff      	movs	r1, #255	; 0xff
 8009f0a:	4640      	mov	r0, r8
 8009f0c:	f000 f8f8 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f10:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8009f12:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f14:	4a60      	ldr	r2, [pc, #384]	; (800a098 <OTM8009A_Init+0x70c>)
 8009f16:	4619      	mov	r1, r3
 8009f18:	4640      	mov	r0, r8
 8009f1a:	f000 f8f1 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f1e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f20:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f22:	4a5d      	ldr	r2, [pc, #372]	; (800a098 <OTM8009A_Init+0x70c>)
 8009f24:	4619      	mov	r1, r3
 8009f26:	4640      	mov	r0, r8
 8009f28:	f000 f8ea 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009f2c:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f2e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009f30:	4a5b      	ldr	r2, [pc, #364]	; (800a0a0 <OTM8009A_Init+0x714>)
 8009f32:	21e1      	movs	r1, #225	; 0xe1
 8009f34:	4640      	mov	r0, r8
 8009f36:	f000 f8e3 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f3a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8009f3c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8009f3e:	4a56      	ldr	r2, [pc, #344]	; (800a098 <OTM8009A_Init+0x70c>)
 8009f40:	4619      	mov	r1, r3
 8009f42:	4640      	mov	r0, r8
 8009f44:	f000 f8dc 	bl	800a100 <otm8009a_write_reg>
 8009f48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	4a55      	ldr	r2, [pc, #340]	; (800a0a4 <OTM8009A_Init+0x718>)
 8009f4e:	21e2      	movs	r1, #226	; 0xe2
 8009f50:	4640      	mov	r0, r8
 8009f52:	f000 f8d5 	bl	800a100 <otm8009a_write_reg>
 8009f56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4a53      	ldr	r2, [pc, #332]	; (800a0a8 <OTM8009A_Init+0x71c>)
 8009f5c:	2111      	movs	r1, #17
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f000 f8ce 	bl	800a100 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8009f64:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8009f66:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8009f68:	4650      	mov	r0, sl
 8009f6a:	f7ff fd03 	bl	8009974 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8009f6e:	f1b9 0f00 	cmp.w	r9, #0
 8009f72:	d062      	beq.n	800a03a <OTM8009A_Init+0x6ae>
 8009f74:	f1b9 0f02 	cmp.w	r9, #2
 8009f78:	d108      	bne.n	8009f8c <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	4a4b      	ldr	r2, [pc, #300]	; (800a0ac <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8009f7e:	213a      	movs	r1, #58	; 0x3a
 8009f80:	4640      	mov	r0, r8
 8009f82:	f000 f8bd 	bl	800a100 <otm8009a_write_reg>
 8009f86:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8009f88:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8009f8c:	f1bb 0f01 	cmp.w	fp, #1
 8009f90:	d156      	bne.n	800a040 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009f92:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009f94:	f10d 0207 	add.w	r2, sp, #7
 8009f98:	2136      	movs	r1, #54	; 0x36
 8009f9a:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8009f9c:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	f000 f8ad 	bl	800a100 <otm8009a_write_reg>
 8009fa6:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8009fa8:	2304      	movs	r3, #4
 8009faa:	4a41      	ldr	r2, [pc, #260]	; (800a0b0 <OTM8009A_Init+0x724>)
 8009fac:	212a      	movs	r1, #42	; 0x2a
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f000 f8a6 	bl	800a100 <otm8009a_write_reg>
 8009fb4:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	4a3e      	ldr	r2, [pc, #248]	; (800a0b4 <OTM8009A_Init+0x728>)
 8009fba:	212b      	movs	r1, #43	; 0x2b
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f000 f89f 	bl	800a100 <otm8009a_write_reg>
 8009fc2:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8009fc4:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4a3b      	ldr	r2, [pc, #236]	; (800a0b8 <OTM8009A_Init+0x72c>)
 8009fcc:	2151      	movs	r1, #81	; 0x51
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f000 f896 	bl	800a100 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8009fd4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8009fd6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009fd8:	4a38      	ldr	r2, [pc, #224]	; (800a0bc <OTM8009A_Init+0x730>)
 8009fda:	2153      	movs	r1, #83	; 0x53
 8009fdc:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8009fde:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8009fe0:	f000 f88e 	bl	800a100 <otm8009a_write_reg>
 8009fe4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4a35      	ldr	r2, [pc, #212]	; (800a0c0 <OTM8009A_Init+0x734>)
 8009fea:	2155      	movs	r1, #85	; 0x55
 8009fec:	4640      	mov	r0, r8
 8009fee:	f000 f887 	bl	800a100 <otm8009a_write_reg>
 8009ff2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4a33      	ldr	r2, [pc, #204]	; (800a0c4 <OTM8009A_Init+0x738>)
 8009ff8:	215e      	movs	r1, #94	; 0x5e
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f000 f880 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a000:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800a002:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a004:	4a30      	ldr	r2, [pc, #192]	; (800a0c8 <OTM8009A_Init+0x73c>)
 800a006:	2129      	movs	r1, #41	; 0x29
 800a008:	4640      	mov	r0, r8
 800a00a:	f000 f879 	bl	800a100 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a00e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800a010:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800a012:	4a21      	ldr	r2, [pc, #132]	; (800a098 <OTM8009A_Init+0x70c>)
 800a014:	4619      	mov	r1, r3
 800a016:	4640      	mov	r0, r8
 800a018:	f000 f872 	bl	800a100 <otm8009a_write_reg>
 800a01c:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800a01e:	2300      	movs	r3, #0
 800a020:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <OTM8009A_Init+0x740>)
 800a022:	212c      	movs	r1, #44	; 0x2c
 800a024:	4640      	mov	r0, r8
 800a026:	f000 f86b 	bl	800a100 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800a02a:	42c5      	cmn	r5, r0
}
 800a02c:	bf14      	ite	ne
 800a02e:	f04f 30ff 	movne.w	r0, #4294967295
 800a032:	2000      	moveq	r0, #0
 800a034:	b003      	add	sp, #12
 800a036:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800a03a:	464b      	mov	r3, r9
 800a03c:	4a24      	ldr	r2, [pc, #144]	; (800a0d0 <OTM8009A_Init+0x744>)
 800a03e:	e79e      	b.n	8009f7e <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800a040:	2300      	movs	r3, #0
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	e7c0      	b.n	8009fc8 <OTM8009A_Init+0x63c>
 800a046:	bf00      	nop
 800a048:	080246ff 	.word	0x080246ff
 800a04c:	08024637 	.word	0x08024637
 800a050:	080246de 	.word	0x080246de
 800a054:	08024641 	.word	0x08024641
 800a058:	080246fd 	.word	0x080246fd
 800a05c:	0802464d 	.word	0x0802464d
 800a060:	080246f9 	.word	0x080246f9
 800a064:	0802465c 	.word	0x0802465c
 800a068:	080246fa 	.word	0x080246fa
 800a06c:	0802466b 	.word	0x0802466b
 800a070:	080246fb 	.word	0x080246fb
 800a074:	08024675 	.word	0x08024675
 800a078:	080246fc 	.word	0x080246fc
 800a07c:	08024684 	.word	0x08024684
 800a080:	080246e9 	.word	0x080246e9
 800a084:	0802470a 	.word	0x0802470a
 800a088:	0802470b 	.word	0x0802470b
 800a08c:	0802470c 	.word	0x0802470c
 800a090:	0802470d 	.word	0x0802470d
 800a094:	0802470e 	.word	0x0802470e
 800a098:	080246dd 	.word	0x080246dd
 800a09c:	08024693 	.word	0x08024693
 800a0a0:	08024696 	.word	0x08024696
 800a0a4:	080246a6 	.word	0x080246a6
 800a0a8:	08024700 	.word	0x08024700
 800a0ac:	08024701 	.word	0x08024701
 800a0b0:	080245c8 	.word	0x080245c8
 800a0b4:	080245cc 	.word	0x080245cc
 800a0b8:	08024703 	.word	0x08024703
 800a0bc:	08024704 	.word	0x08024704
 800a0c0:	08024705 	.word	0x08024705
 800a0c4:	08024706 	.word	0x08024706
 800a0c8:	08024707 	.word	0x08024707
 800a0cc:	08024708 	.word	0x08024708
 800a0d0:	08024702 	.word	0x08024702

0800a0d4 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800a0d4:	b160      	cbz	r0, 800a0f0 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a0d6:	684b      	ldr	r3, [r1, #4]
 800a0d8:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a0da:	688b      	ldr	r3, [r1, #8]
 800a0dc:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800a0de:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800a0e0:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800a0e2:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800a0e4:	4b04      	ldr	r3, [pc, #16]	; (800a0f8 <OTM8009A_RegisterBusIO+0x24>)
 800a0e6:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800a0e8:	4b04      	ldr	r3, [pc, #16]	; (800a0fc <OTM8009A_RegisterBusIO+0x28>)
 800a0ea:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	08009959 	.word	0x08009959
 800a0fc:	08009967 	.word	0x08009967

0800a100 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800a100:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a102:	6804      	ldr	r4, [r0, #0]
 800a104:	6880      	ldr	r0, [r0, #8]
 800a106:	46a4      	mov	ip, r4
}
 800a108:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800a10c:	4760      	bx	ip
	...

0800a110 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800a110:	4a10      	ldr	r2, [pc, #64]	; (800a154 <BSP_I2C4_DeInit+0x44>)
{
 800a112:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800a114:	6813      	ldr	r3, [r2, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800a11a:	b10b      	cbz	r3, 800a120 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800a11c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800a11e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800a120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a124:	480c      	ldr	r0, [pc, #48]	; (800a158 <BSP_I2C4_DeInit+0x48>)
 800a126:	f001 fe0d 	bl	800bd44 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800a12a:	480b      	ldr	r0, [pc, #44]	; (800a158 <BSP_I2C4_DeInit+0x48>)
 800a12c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a130:	f001 fe08 	bl	800bd44 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a136:	480a      	ldr	r0, [pc, #40]	; (800a160 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800a138:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800a13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a140:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800a144:	f002 f849 	bl	800c1da <HAL_I2C_DeInit>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0e7      	beq.n	800a11c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800a14c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a150:	e7e5      	b.n	800a11e <BSP_I2C4_DeInit+0xe>
 800a152:	bf00      	nop
 800a154:	240050e4 	.word	0x240050e4
 800a158:	58020c00 	.word	0x58020c00
 800a15c:	58024400 	.word	0x58024400
 800a160:	24005aec 	.word	0x24005aec

0800a164 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a164:	2300      	movs	r3, #0
 800a166:	2201      	movs	r2, #1
{
 800a168:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800a16a:	6041      	str	r1, [r0, #4]
{
 800a16c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a16e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a170:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800a174:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a178:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800a17c:	f001 ffdb 	bl	800c136 <HAL_I2C_Init>
 800a180:	4601      	mov	r1, r0
 800a182:	b108      	cbz	r0, 800a188 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800a184:	2001      	movs	r0, #1
}
 800a186:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800a188:	4620      	mov	r0, r4
 800a18a:	f002 f9fc 	bl	800c586 <HAL_I2CEx_ConfigAnalogFilter>
 800a18e:	4601      	mov	r1, r0
 800a190:	2800      	cmp	r0, #0
 800a192:	d1f7      	bne.n	800a184 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800a194:	4620      	mov	r0, r4
 800a196:	f002 fa1c 	bl	800c5d2 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800a19a:	3800      	subs	r0, #0
 800a19c:	bf18      	it	ne
 800a19e:	2001      	movne	r0, #1
 800a1a0:	e7f1      	b.n	800a186 <MX_I2C4_Init+0x22>
	...

0800a1a4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800a1a4:	4ba3      	ldr	r3, [pc, #652]	; (800a434 <BSP_I2C4_Init+0x290>)
 800a1a6:	48a4      	ldr	r0, [pc, #656]	; (800a438 <BSP_I2C4_Init+0x294>)
{
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800a1ac:	6003      	str	r3, [r0, #0]
{
 800a1ae:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 800a1b0:	4ba2      	ldr	r3, [pc, #648]	; (800a43c <BSP_I2C4_Init+0x298>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	9200      	str	r2, [sp, #0]
 800a1b6:	2a00      	cmp	r2, #0
 800a1b8:	f040 80cf 	bne.w	800a35a <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 800a1bc:	2201      	movs	r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800a1c0:	f002 f9dc 	bl	800c57c <HAL_I2C_GetState>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f040 80c8 	bne.w	800a35a <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a1ca:	4d9d      	ldr	r5, [pc, #628]	; (800a440 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a1cc:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a1d0:	2702      	movs	r7, #2
 800a1d2:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a1d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a1d8:	a90d      	add	r1, sp, #52	; 0x34
 800a1da:	489a      	ldr	r0, [pc, #616]	; (800a444 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800a1dc:	f043 0308 	orr.w	r3, r3, #8
 800a1e0:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800a1e4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800a1f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a1f4:	f043 0308 	orr.w	r3, r3, #8
 800a1f8:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800a1fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800a200:	f003 0308 	and.w	r3, r3, #8
 800a204:	930b      	str	r3, [sp, #44]	; 0x2c
 800a206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a20c:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a210:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800a212:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a216:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800a218:	f001 fca8 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800a21c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a220:	a90d      	add	r1, sp, #52	; 0x34
 800a222:	4888      	ldr	r0, [pc, #544]	; (800a444 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800a224:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800a226:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a22a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800a22c:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800a230:	f001 fc9c 	bl	800bb6c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800a234:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800a240:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a248:	930c      	str	r3, [sp, #48]	; 0x30
 800a24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 800a24c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a254:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800a258:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a25c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a260:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a264:	f003 fc0e 	bl	800da84 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800a268:	2800      	cmp	r0, #0
 800a26a:	d070      	beq.n	800a34e <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a26c:	4b76      	ldr	r3, [pc, #472]	; (800a448 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800a26e:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a272:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800a450 <BSP_I2C4_Init+0x2ac>
 800a276:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a27a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800a27e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800a282:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a286:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800a28a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a28c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a290:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800a294:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a29c:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800a29e:	9302      	str	r3, [sp, #8]
 800a2a0:	4b6a      	ldr	r3, [pc, #424]	; (800a44c <BSP_I2C4_Init+0x2a8>)
 800a2a2:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800a2a6:	9a00      	ldr	r2, [sp, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4696      	mov	lr, r2
{
 800a2ac:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a2ae:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800a2b0:	f240 3479 	movw	r4, #889	; 0x379
 800a2b4:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800a2b6:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800a2b8:	45a4      	cmp	ip, r4
 800a2ba:	d959      	bls.n	800a370 <BSP_I2C4_Init+0x1cc>
 800a2bc:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a2be:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800a2c0:	45ab      	cmp	fp, r5
 800a2c2:	d851      	bhi.n	800a368 <BSP_I2C4_Init+0x1c4>
 800a2c4:	9c02      	ldr	r4, [sp, #8]
 800a2c6:	42ac      	cmp	r4, r5
 800a2c8:	d34e      	bcc.n	800a368 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 800a2ca:	4590      	cmp	r8, r2
 800a2cc:	d04c      	beq.n	800a368 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a2ce:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800a2d2:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800a2d4:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a2d6:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a2da:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800a2dc:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800a2e0:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800a2e4:	d93d      	bls.n	800a362 <BSP_I2C4_Init+0x1be>
 800a2e6:	4a59      	ldr	r2, [pc, #356]	; (800a44c <BSP_I2C4_Init+0x2a8>)
 800a2e8:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a2ea:	4b58      	ldr	r3, [pc, #352]	; (800a44c <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a2ec:	f242 7210 	movw	r2, #10000	; 0x2710
 800a2f0:	4957      	ldr	r1, [pc, #348]	; (800a450 <BSP_I2C4_Init+0x2ac>)
 800a2f2:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a2f4:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a2f6:	9203      	str	r2, [sp, #12]
 800a2f8:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a2fc:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a2fe:	0043      	lsls	r3, r0, #1
 800a300:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800a304:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 800a308:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 800a30c:	f10b 0b0c 	add.w	fp, fp, #12
 800a310:	9409      	str	r4, [sp, #36]	; 0x24
 800a312:	3b0a      	subs	r3, #10
 800a314:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a316:	9b05      	ldr	r3, [sp, #20]
 800a318:	429f      	cmp	r7, r3
 800a31a:	d134      	bne.n	800a386 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800a31c:	2a7f      	cmp	r2, #127	; 0x7f
 800a31e:	d816      	bhi.n	800a34e <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a320:	2314      	movs	r3, #20
 800a322:	435a      	muls	r2, r3
 800a324:	4b4a      	ldr	r3, [pc, #296]	; (800a450 <BSP_I2C4_Init+0x2ac>)
 800a326:	1899      	adds	r1, r3, r2
 800a328:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800a32a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a32c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800a330:	684b      	ldr	r3, [r1, #4]
 800a332:	051b      	lsls	r3, r3, #20
 800a334:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a338:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800a33a:	688b      	ldr	r3, [r1, #8]
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a342:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800a344:	68cb      	ldr	r3, [r1, #12]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800a34a:	4323      	orrs	r3, r4
 800a34c:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800a34e:	9900      	ldr	r1, [sp, #0]
 800a350:	4839      	ldr	r0, [pc, #228]	; (800a438 <BSP_I2C4_Init+0x294>)
 800a352:	f7ff ff07 	bl	800a164 <MX_I2C4_Init>
 800a356:	2800      	cmp	r0, #0
 800a358:	d169      	bne.n	800a42e <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 800a35a:	2000      	movs	r0, #0
}
 800a35c:	b013      	add	sp, #76	; 0x4c
 800a35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a362:	4690      	mov	r8, r2
 800a364:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800a368:	3701      	adds	r7, #1
 800a36a:	440d      	add	r5, r1
 800a36c:	2f10      	cmp	r7, #16
 800a36e:	d1a7      	bne.n	800a2c0 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800a370:	2e10      	cmp	r6, #16
 800a372:	448c      	add	ip, r1
 800a374:	d19c      	bne.n	800a2b0 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800a376:	3201      	adds	r2, #1
 800a378:	4401      	add	r1, r0
 800a37a:	2a10      	cmp	r2, #16
 800a37c:	d196      	bne.n	800a2ac <BSP_I2C4_Init+0x108>
 800a37e:	f1be 0f00 	cmp.w	lr, #0
 800a382:	d1b0      	bne.n	800a2e6 <BSP_I2C4_Init+0x142>
 800a384:	e7b1      	b.n	800a2ea <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a386:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a388:	f04f 0c00 	mov.w	ip, #0
 800a38c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a38e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a392:	441c      	add	r4, r3
 800a394:	ebab 0503 	sub.w	r5, fp, r3
 800a398:	9404      	str	r4, [sp, #16]
 800a39a:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800a39c:	9d04      	ldr	r5, [sp, #16]
 800a39e:	9401      	str	r4, [sp, #4]
 800a3a0:	9c02      	ldr	r4, [sp, #8]
 800a3a2:	441c      	add	r4, r3
 800a3a4:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a3a6:	f241 245c 	movw	r4, #4700	; 0x125c
 800a3aa:	f8cd c018 	str.w	ip, [sp, #24]
 800a3ae:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800a3b2:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a3b6:	42a5      	cmp	r5, r4
 800a3b8:	d92e      	bls.n	800a418 <BSP_I2C4_Init+0x274>
 800a3ba:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800a3be:	d22b      	bcs.n	800a418 <BSP_I2C4_Init+0x274>
 800a3c0:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a3c2:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800a3c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a3ca:	1966      	adds	r6, r4, r5
 800a3cc:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a3d0:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 800a3d4:	f241 0447 	movw	r4, #4167	; 0x1047
 800a3d8:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800a3dc:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800a3e0:	45a2      	cmp	sl, r4
 800a3e2:	d812      	bhi.n	800a40a <BSP_I2C4_Init+0x266>
 800a3e4:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 800a3e8:	d30f      	bcc.n	800a40a <BSP_I2C4_Init+0x266>
 800a3ea:	4540      	cmp	r0, r8
 800a3ec:	d20d      	bcs.n	800a40a <BSP_I2C4_Init+0x266>
              error = -error;
 800a3ee:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800a3f2:	bf28      	it	cs
 800a3f4:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800a3f6:	9c03      	ldr	r4, [sp, #12]
 800a3f8:	45a2      	cmp	sl, r4
 800a3fa:	d206      	bcs.n	800a40a <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800a3fc:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 800a3fe:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 800a402:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800a404:	9a07      	ldr	r2, [sp, #28]
 800a406:	60ca      	str	r2, [r1, #12]
 800a408:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800a40a:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800a40e:	eba9 0903 	sub.w	r9, r9, r3
 800a412:	441e      	add	r6, r3
 800a414:	4498      	add	r8, r3
 800a416:	d1db      	bne.n	800a3d0 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800a418:	9c01      	ldr	r4, [sp, #4]
 800a41a:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800a41e:	441d      	add	r5, r3
 800a420:	eba4 0403 	sub.w	r4, r4, r3
 800a424:	9401      	str	r4, [sp, #4]
 800a426:	d1be      	bne.n	800a3a6 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800a428:	3701      	adds	r7, #1
 800a42a:	3114      	adds	r1, #20
 800a42c:	e773      	b.n	800a316 <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 800a42e:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800a432:	e793      	b.n	800a35c <BSP_I2C4_Init+0x1b8>
 800a434:	58001c00 	.word	0x58001c00
 800a438:	24005aec 	.word	0x24005aec
 800a43c:	240050e4 	.word	0x240050e4
 800a440:	58024400 	.word	0x58024400
 800a444:	58020c00 	.word	0x58020c00
 800a448:	3b9aca00 	.word	0x3b9aca00
 800a44c:	24005ae8 	.word	0x24005ae8
 800a450:	240050e8 	.word	0x240050e8

0800a454 <BSP_I2C4_WriteReg>:
{
 800a454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a456:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a45a:	9200      	str	r2, [sp, #0]
 800a45c:	460a      	mov	r2, r1
 800a45e:	4601      	mov	r1, r0
 800a460:	4808      	ldr	r0, [pc, #32]	; (800a484 <BSP_I2C4_WriteReg+0x30>)
 800a462:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a466:	2301      	movs	r3, #1
 800a468:	f001 fed0 	bl	800c20c <HAL_I2C_Mem_Write>
 800a46c:	b140      	cbz	r0, 800a480 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a46e:	4805      	ldr	r0, [pc, #20]	; (800a484 <BSP_I2C4_WriteReg+0x30>)
 800a470:	f002 f887 	bl	800c582 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a474:	2804      	cmp	r0, #4
 800a476:	bf0c      	ite	eq
 800a478:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a47c:	f06f 0003 	mvnne.w	r0, #3
}
 800a480:	b004      	add	sp, #16
 800a482:	bd10      	pop	{r4, pc}
 800a484:	24005aec 	.word	0x24005aec

0800a488 <BSP_I2C4_ReadReg>:
{
 800a488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800a48a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800a48e:	9200      	str	r2, [sp, #0]
 800a490:	460a      	mov	r2, r1
 800a492:	4601      	mov	r1, r0
 800a494:	4808      	ldr	r0, [pc, #32]	; (800a4b8 <BSP_I2C4_ReadReg+0x30>)
 800a496:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a49a:	2301      	movs	r3, #1
 800a49c:	f001 ff90 	bl	800c3c0 <HAL_I2C_Mem_Read>
 800a4a0:	b140      	cbz	r0, 800a4b4 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800a4a2:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <BSP_I2C4_ReadReg+0x30>)
 800a4a4:	f002 f86d 	bl	800c582 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800a4a8:	2804      	cmp	r0, #4
 800a4aa:	bf0c      	ite	eq
 800a4ac:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800a4b0:	f06f 0003 	mvnne.w	r0, #3
}
 800a4b4:	b004      	add	sp, #16
 800a4b6:	bd10      	pop	{r4, pc}
 800a4b8:	24005aec 	.word	0x24005aec

0800a4bc <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800a4bc:	f000 bd10 	b.w	800aee0 <HAL_GetTick>

0800a4c0 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800a4c0:	4a09      	ldr	r2, [pc, #36]	; (800a4e8 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a4c2:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800a4c6:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800a4c8:	684a      	ldr	r2, [r1, #4]
 800a4ca:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800a4d0:	688a      	ldr	r2, [r1, #8]
 800a4d2:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800a4d4:	680a      	ldr	r2, [r1, #0]
 800a4d6:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800a4d8:	2200      	movs	r2, #0
 800a4da:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800a4de:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800a4e0:	68ca      	ldr	r2, [r1, #12]
 800a4e2:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800a4e4:	f002 bbf8 	b.w	800ccd8 <HAL_QSPI_Init>
 800a4e8:	52005000 	.word	0x52005000

0800a4ec <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800a4ec:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a4ee:	b988      	cbnz	r0, 800a514 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a4f0:	4c0a      	ldr	r4, [pc, #40]	; (800a51c <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800a4f2:	480b      	ldr	r0, [pc, #44]	; (800a520 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a4f4:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a4f6:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800a4f8:	b94b      	cbnz	r3, 800a50e <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a4fa:	f7ff f9a5 	bl	8009848 <MT25TL01G_EnableMemoryMappedModeSTR>
 800a4fe:	b110      	cbz	r0, 800a506 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a500:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800a504:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a506:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800a508:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800a50a:	7023      	strb	r3, [r4, #0]
 800a50c:	e7fa      	b.n	800a504 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a50e:	f7ff f951 	bl	80097b4 <MT25TL01G_EnableMemoryMappedModeDTR>
 800a512:	e7f4      	b.n	800a4fe <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800a514:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a518:	e7f4      	b.n	800a504 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800a51a:	bf00      	nop
 800a51c:	24005b40 	.word	0x24005b40
 800a520:	240002bc 	.word	0x240002bc

0800a524 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	460c      	mov	r4, r1
 800a528:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a52a:	bb28      	cbnz	r0, 800a578 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800a52c:	4d17      	ldr	r5, [pc, #92]	; (800a58c <BSP_QSPI_ConfigFlash+0x68>)
 800a52e:	782b      	ldrb	r3, [r5, #0]
 800a530:	2b02      	cmp	r3, #2
 800a532:	d024      	beq.n	800a57e <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a534:	2a00      	cmp	r2, #0
 800a536:	4e16      	ldr	r6, [pc, #88]	; (800a590 <BSP_QSPI_ConfigFlash+0x6c>)
 800a538:	bf08      	it	eq
 800a53a:	2010      	moveq	r0, #16
 800a53c:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800a53e:	4630      	mov	r0, r6
 800a540:	f002 fbca 	bl	800ccd8 <HAL_QSPI_Init>
 800a544:	b9f0      	cbnz	r0, 800a584 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800a546:	786b      	ldrb	r3, [r5, #1]
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d10f      	bne.n	800a56c <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800a54c:	2c03      	cmp	r4, #3
 800a54e:	d105      	bne.n	800a55c <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a550:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a552:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800a554:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800a556:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800a558:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800a55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800a55c:	4630      	mov	r0, r6
 800a55e:	f7ff f90d 	bl	800977c <MT25TL01G_ExitQPIMode>
 800a562:	2800      	cmp	r0, #0
 800a564:	d0f4      	beq.n	800a550 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800a566:	f06f 0004 	mvn.w	r0, #4
 800a56a:	e7f6      	b.n	800a55a <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 800a56c:	2c03      	cmp	r4, #3
 800a56e:	d1ef      	bne.n	800a550 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff f8e7 	bl	8009744 <MT25TL01G_EnterQPIMode>
 800a576:	e7f4      	b.n	800a562 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800a578:	f06f 0001 	mvn.w	r0, #1
 800a57c:	e7ed      	b.n	800a55a <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800a57e:	f06f 0019 	mvn.w	r0, #25
 800a582:	e7ea      	b.n	800a55a <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800a584:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a588:	e7e7      	b.n	800a55a <BSP_QSPI_ConfigFlash+0x36>
 800a58a:	bf00      	nop
 800a58c:	24005b40 	.word	0x24005b40
 800a590:	240002bc 	.word	0x240002bc

0800a594 <BSP_QSPI_Init>:
{
 800a594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a598:	460d      	mov	r5, r1
 800a59a:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800a59c:	4604      	mov	r4, r0
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f040 81ac 	bne.w	800a8fc <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800a5a4:	4e03      	ldr	r6, [pc, #12]	; (800a5b4 <BSP_QSPI_Init+0x20>)
 800a5a6:	7833      	ldrb	r3, [r6, #0]
 800a5a8:	b133      	cbz	r3, 800a5b8 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800a5aa:	2000      	movs	r0, #0
}
 800a5ac:	b024      	add	sp, #144	; 0x90
 800a5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b2:	bf00      	nop
 800a5b4:	24005b40 	.word	0x24005b40
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800a5b8:	4bc2      	ldr	r3, [pc, #776]	; (800a8c4 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a5ba:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a5be:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a5c0:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 800a5c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a5c6:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a5ca:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800a5ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a5d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a5da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800a5de:	9201      	str	r2, [sp, #4]
 800a5e0:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800a5e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a5e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5e8:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800a5ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a5ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a5f0:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800a5f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a5f6:	f042 0202 	orr.w	r2, r2, #2
 800a5fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a5fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a602:	f002 0202 	and.w	r2, r2, #2
 800a606:	9202      	str	r2, [sp, #8]
 800a608:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800a60a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a60e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a612:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a616:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a61a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a61e:	9203      	str	r2, [sp, #12]
 800a620:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800a622:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a626:	f042 0208 	orr.w	r2, r2, #8
 800a62a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a62e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a632:	f002 0208 	and.w	r2, r2, #8
 800a636:	9204      	str	r2, [sp, #16]
 800a638:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800a63a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a63e:	f042 0220 	orr.w	r2, r2, #32
 800a642:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a646:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a64a:	f002 0220 	and.w	r2, r2, #32
 800a64e:	9205      	str	r2, [sp, #20]
 800a650:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800a652:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a656:	f042 0220 	orr.w	r2, r2, #32
 800a65a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a65e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a662:	f002 0220 	and.w	r2, r2, #32
 800a666:	9206      	str	r2, [sp, #24]
 800a668:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800a66a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a66e:	f042 0220 	orr.w	r2, r2, #32
 800a672:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a676:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a67a:	f002 0220 	and.w	r2, r2, #32
 800a67e:	9207      	str	r2, [sp, #28]
 800a680:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800a682:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a68a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a68e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a692:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a696:	9208      	str	r2, [sp, #32]
 800a698:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800a69a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a69e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a6a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800a6b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a6be:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6c2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a6c6:	920a      	str	r2, [sp, #40]	; 0x28
 800a6c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800a6ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6d2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a6d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6da:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800a6de:	920b      	str	r2, [sp, #44]	; 0x2c
 800a6e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800a6e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a6e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a6ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a700:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a702:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a704:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800a708:	486f      	ldr	r0, [pc, #444]	; (800a8c8 <BSP_QSPI_Init+0x334>)
 800a70a:	f001 fa2f 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a70e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a710:	a916      	add	r1, sp, #88	; 0x58
 800a712:	486e      	ldr	r0, [pc, #440]	; (800a8cc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a714:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800a716:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a71a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800a71e:	f001 fa25 	bl	800bb6c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a722:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a726:	a916      	add	r1, sp, #88	; 0x58
 800a728:	4869      	ldr	r0, [pc, #420]	; (800a8d0 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800a72a:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a72c:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a72e:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800a730:	f001 fa1c 	bl	800bb6c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a734:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800a736:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a73a:	4866      	ldr	r0, [pc, #408]	; (800a8d4 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a73c:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a740:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800a742:	f001 fa13 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a746:	a916      	add	r1, sp, #88	; 0x58
 800a748:	4863      	ldr	r0, [pc, #396]	; (800a8d8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800a74a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800a74e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800a752:	f001 fa0b 	bl	800bb6c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a756:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a758:	a916      	add	r1, sp, #88	; 0x58
 800a75a:	485e      	ldr	r0, [pc, #376]	; (800a8d4 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800a75c:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a75e:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800a760:	f001 fa04 	bl	800bb6c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a764:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a766:	a916      	add	r1, sp, #88	; 0x58
 800a768:	485b      	ldr	r0, [pc, #364]	; (800a8d8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800a76a:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800a76c:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800a76e:	f001 f9fd 	bl	800bb6c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a772:	a916      	add	r1, sp, #88	; 0x58
 800a774:	4855      	ldr	r0, [pc, #340]	; (800a8cc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800a776:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800a77a:	f001 f9f7 	bl	800bb6c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a77e:	a916      	add	r1, sp, #88	; 0x58
 800a780:	4855      	ldr	r0, [pc, #340]	; (800a8d8 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800a782:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800a786:	f001 f9f1 	bl	800bb6c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a78a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a78e:	a916      	add	r1, sp, #88	; 0x58
 800a790:	484e      	ldr	r0, [pc, #312]	; (800a8cc <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800a792:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800a794:	f001 f9ea 	bl	800bb6c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800a798:	4622      	mov	r2, r4
 800a79a:	210f      	movs	r1, #15
 800a79c:	205c      	movs	r0, #92	; 0x5c
 800a79e:	f000 fbcf 	bl	800af40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800a7a2:	205c      	movs	r0, #92	; 0x5c
 800a7a4:	f000 fbfe 	bl	800afa4 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800a7a8:	a811      	add	r0, sp, #68	; 0x44
 800a7aa:	f7fe ff22 	bl	80095f2 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a7ae:	786a      	ldrb	r2, [r5, #1]
 800a7b0:	4b4a      	ldr	r3, [pc, #296]	; (800a8dc <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800a7b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800a7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ba:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7be:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a7c2:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 800a7c4:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a7c8:	a90d      	add	r1, sp, #52	; 0x34
 800a7ca:	4845      	ldr	r0, [pc, #276]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a7cc:	bf08      	it	eq
 800a7ce:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a7d0:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800a7d2:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800a7d4:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800a7d6:	f7ff fe73 	bl	800a4c0 <MX_QSPI_Init>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f040 8091 	bne.w	800a902 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a7e0:	2103      	movs	r1, #3
 800a7e2:	483f      	ldr	r0, [pc, #252]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a7e4:	f7ff f876 	bl	80098d4 <MT25TL01G_ResetEnable>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d17c      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800a7ec:	2103      	movs	r1, #3
 800a7ee:	483c      	ldr	r0, [pc, #240]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a7f0:	f7ff f891 	bl	8009916 <MT25TL01G_ResetMemory>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d176      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a7f8:	7871      	ldrb	r1, [r6, #1]
 800a7fa:	4839      	ldr	r0, [pc, #228]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a7fc:	f7fe ff0a 	bl	8009614 <MT25TL01G_AutoPollingMemReady>
 800a800:	4601      	mov	r1, r0
 800a802:	2800      	cmp	r0, #0
 800a804:	d16f      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a806:	4836      	ldr	r0, [pc, #216]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a808:	f7ff f864 	bl	80098d4 <MT25TL01G_ResetEnable>
 800a80c:	4601      	mov	r1, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d169      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800a812:	4833      	ldr	r0, [pc, #204]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a814:	f7ff f87f 	bl	8009916 <MT25TL01G_ResetMemory>
 800a818:	4601      	mov	r1, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d163      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a81e:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800a820:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a822:	482f      	ldr	r0, [pc, #188]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800a824:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a826:	f7fe fef5 	bl	8009614 <MT25TL01G_AutoPollingMemReady>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d15b      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a82e:	7871      	ldrb	r1, [r6, #1]
 800a830:	482b      	ldr	r0, [pc, #172]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a832:	f7fe ff5e 	bl	80096f2 <MT25TL01G_Enter4BytesAddressMode>
 800a836:	2800      	cmp	r0, #0
 800a838:	d155      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a83a:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800a83e:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800a842:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a844:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800a848:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a84a:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a84c:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800a84e:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800a850:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800a854:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 800a856:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a858:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a85c:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a860:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a864:	481e      	ldr	r0, [pc, #120]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a866:	f002 fa85 	bl	800cd74 <HAL_QSPI_Command>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d13b      	bne.n	800a8e6 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a86e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a872:	f10d 0102 	add.w	r1, sp, #2
 800a876:	481a      	ldr	r0, [pc, #104]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a878:	f002 fb18 	bl	800ceac <HAL_QSPI_Receive>
 800a87c:	bb98      	cbnz	r0, 800a8e6 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800a87e:	7871      	ldrb	r1, [r6, #1]
 800a880:	4817      	ldr	r0, [pc, #92]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a882:	f7fe fef2 	bl	800966a <MT25TL01G_WriteEnable>
 800a886:	bb70      	cbnz	r0, 800a8e6 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a888:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a88a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a88e:	a916      	add	r1, sp, #88	; 0x58
 800a890:	4813      	ldr	r0, [pc, #76]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800a892:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800a894:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a898:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a89c:	051b      	lsls	r3, r3, #20
 800a89e:	0d1b      	lsrs	r3, r3, #20
 800a8a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a8:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8ac:	f002 fa62 	bl	800cd74 <HAL_QSPI_Command>
 800a8b0:	b9c8      	cbnz	r0, 800a8e6 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b6:	f10d 0102 	add.w	r1, sp, #2
 800a8ba:	4809      	ldr	r0, [pc, #36]	; (800a8e0 <BSP_QSPI_Init+0x34c>)
 800a8bc:	f002 fa9d 	bl	800cdfa <HAL_QSPI_Transmit>
 800a8c0:	e010      	b.n	800a8e4 <BSP_QSPI_Init+0x350>
 800a8c2:	bf00      	nop
 800a8c4:	58024400 	.word	0x58024400
 800a8c8:	58020400 	.word	0x58020400
 800a8cc:	58021800 	.word	0x58021800
 800a8d0:	58020c00 	.word	0x58020c00
 800a8d4:	58021c00 	.word	0x58021c00
 800a8d8:	58021400 	.word	0x58021400
 800a8dc:	08024710 	.word	0x08024710
 800a8e0:	240002bc 	.word	0x240002bc
 800a8e4:	b110      	cbz	r0, 800a8ec <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8e6:	f06f 0004 	mvn.w	r0, #4
 800a8ea:	e65f      	b.n	800a5ac <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800a8ec:	786a      	ldrb	r2, [r5, #1]
 800a8ee:	7829      	ldrb	r1, [r5, #0]
 800a8f0:	f7ff fe18 	bl	800a524 <BSP_QSPI_ConfigFlash>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f43f ae58 	beq.w	800a5aa <BSP_QSPI_Init+0x16>
 800a8fa:	e7f4      	b.n	800a8e6 <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 800a8fc:	f06f 0001 	mvn.w	r0, #1
 800a900:	e654      	b.n	800a5ac <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800a902:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800a906:	e651      	b.n	800a5ac <BSP_QSPI_Init+0x18>

0800a908 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800a908:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800a90a:	4604      	mov	r4, r0
 800a90c:	b970      	cbnz	r0, 800a92c <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <BSP_SDRAM_DeInit+0x2c>)
 800a910:	4809      	ldr	r0, [pc, #36]	; (800a938 <BSP_SDRAM_DeInit+0x30>)
 800a912:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800a914:	f003 ff3c 	bl	800e790 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800a918:	207a      	movs	r0, #122	; 0x7a
 800a91a:	f000 fb51 	bl	800afc0 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800a91e:	4807      	ldr	r0, [pc, #28]	; (800a93c <BSP_SDRAM_DeInit+0x34>)
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <BSP_SDRAM_DeInit+0x38>)
 800a922:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800a924:	f002 f8a5 	bl	800ca72 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800a928:	4620      	mov	r0, r4
}
 800a92a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800a92c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800a930:	e7fb      	b.n	800a92a <BSP_SDRAM_DeInit+0x22>
 800a932:	bf00      	nop
 800a934:	52004140 	.word	0x52004140
 800a938:	24005b4c 	.word	0x24005b4c
 800a93c:	24005b80 	.word	0x24005b80
 800a940:	52000040 	.word	0x52000040

0800a944 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a944:	2201      	movs	r2, #1
 800a946:	4915      	ldr	r1, [pc, #84]	; (800a99c <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a948:	4b15      	ldr	r3, [pc, #84]	; (800a9a0 <MX_SDRAM_Init+0x5c>)
{
 800a94a:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800a94c:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800a950:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a952:	2104      	movs	r1, #4
 800a954:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a956:	2440      	movs	r4, #64	; 0x40
{
 800a958:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800a95a:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800a95e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a962:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800a966:	2200      	movs	r2, #0
 800a968:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800a96c:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a970:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800a974:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a976:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a978:	2207      	movs	r2, #7
 800a97a:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800a97c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a980:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800a982:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800a984:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800a988:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800a98c:	f003 fed8 	bl	800e740 <HAL_SDRAM_Init>
}
 800a990:	3800      	subs	r0, #0
 800a992:	bf18      	it	ne
 800a994:	2001      	movne	r0, #1
 800a996:	b008      	add	sp, #32
 800a998:	bd10      	pop	{r4, pc}
 800a99a:	bf00      	nop
 800a99c:	52004140 	.word	0x52004140
 800a9a0:	24005b4c 	.word	0x24005b4c

0800a9a4 <BSP_SDRAM_Init>:
{
 800a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a9a6:	4605      	mov	r5, r0
{
 800a9a8:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f040 80dd 	bne.w	800ab6a <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800a9b0:	4b71      	ldr	r3, [pc, #452]	; (800ab78 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a9b2:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a9b4:	a909      	add	r1, sp, #36	; 0x24
 800a9b6:	4871      	ldr	r0, [pc, #452]	; (800ab7c <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a9b8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800a9bc:	4c70      	ldr	r4, [pc, #448]	; (800ab80 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a9be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800a9c2:	4e70      	ldr	r6, [pc, #448]	; (800ab84 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800a9c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a9c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a9cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a9d0:	9201      	str	r2, [sp, #4]
 800a9d2:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800a9d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a9d8:	f042 0201 	orr.w	r2, r2, #1
 800a9dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a9e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a9e4:	f002 0201 	and.w	r2, r2, #1
 800a9e8:	9202      	str	r2, [sp, #8]
 800a9ea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a9ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a9f0:	f042 0208 	orr.w	r2, r2, #8
 800a9f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a9f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a9fc:	f002 0208 	and.w	r2, r2, #8
 800aa00:	9203      	str	r2, [sp, #12]
 800aa02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800aa04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa08:	f042 0210 	orr.w	r2, r2, #16
 800aa0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aa10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa14:	f002 0210 	and.w	r2, r2, #16
 800aa18:	9204      	str	r2, [sp, #16]
 800aa1a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800aa1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa20:	f042 0220 	orr.w	r2, r2, #32
 800aa24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aa28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa2c:	f002 0220 	and.w	r2, r2, #32
 800aa30:	9205      	str	r2, [sp, #20]
 800aa32:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa3c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aa40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa44:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800aa48:	9206      	str	r2, [sp, #24]
 800aa4a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa54:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800aa58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa5c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800aa60:	9207      	str	r2, [sp, #28]
 800aa62:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800aa64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aa68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800aa70:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800aa72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7a:	9308      	str	r3, [sp, #32]
 800aa7c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800aa84:	230c      	movs	r3, #12
 800aa86:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800aa8a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800aa8e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800aa90:	f001 f86c 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800aa94:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800aa98:	a909      	add	r1, sp, #36	; 0x24
 800aa9a:	483b      	ldr	r0, [pc, #236]	; (800ab88 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800aa9c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800aa9e:	f001 f865 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800aaa2:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800aaa6:	a909      	add	r1, sp, #36	; 0x24
 800aaa8:	4838      	ldr	r0, [pc, #224]	; (800ab8c <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800aaaa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800aaac:	f001 f85e 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800aab0:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800aab4:	a909      	add	r1, sp, #36	; 0x24
 800aab6:	4836      	ldr	r0, [pc, #216]	; (800ab90 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800aab8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800aaba:	f001 f857 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800aabe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800aac2:	a909      	add	r1, sp, #36	; 0x24
 800aac4:	4833      	ldr	r0, [pc, #204]	; (800ab94 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800aac6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800aac8:	f001 f850 	bl	800bb6c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800aacc:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800aad0:	a909      	add	r1, sp, #36	; 0x24
 800aad2:	4831      	ldr	r0, [pc, #196]	; (800ab98 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800aad4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800aad6:	f001 f849 	bl	800bb6c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800aada:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aade:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800aae2:	f240 2002 	movw	r0, #514	; 0x202
 800aae6:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800aaea:	6334      	str	r4, [r6, #48]	; 0x30
 800aaec:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800aaee:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800aaf2:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800aaf6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800aaf8:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800aafa:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800aafc:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800aafe:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800ab02:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800ab06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800ab0a:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800ab0c:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800ab0e:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800ab10:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800ab14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ab18:	f001 ffab 	bl	800ca72 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f001 ff39 	bl	800c994 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800ab22:	462a      	mov	r2, r5
 800ab24:	210f      	movs	r1, #15
 800ab26:	207a      	movs	r0, #122	; 0x7a
 800ab28:	f000 fa0a 	bl	800af40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800ab2c:	207a      	movs	r0, #122	; 0x7a
 800ab2e:	f000 fa39 	bl	800afa4 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7ff ff06 	bl	800a944 <MX_SDRAM_Init>
 800ab38:	b9d0      	cbnz	r0, 800ab70 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800ab3a:	4919      	ldr	r1, [pc, #100]	; (800aba0 <BSP_SDRAM_Init+0x1fc>)
 800ab3c:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800ab3e:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800ab42:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800ab46:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800ab48:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800ab4c:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800ab4e:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800ab52:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800ab56:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800ab58:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800ab5a:	f7fe fd1d 	bl	8009598 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	bf18      	it	ne
 800ab62:	f06f 0004 	mvnne.w	r0, #4
}
 800ab66:	b00f      	add	sp, #60	; 0x3c
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800ab6a:	f06f 0001 	mvn.w	r0, #1
 800ab6e:	e7fa      	b.n	800ab66 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800ab70:	f04f 30ff 	mov.w	r0, #4294967295
 800ab74:	e7f7      	b.n	800ab66 <BSP_SDRAM_Init+0x1c2>
 800ab76:	bf00      	nop
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	58020c00 	.word	0x58020c00
 800ab80:	24005bec 	.word	0x24005bec
 800ab84:	24005b4c 	.word	0x24005b4c
 800ab88:	58021000 	.word	0x58021000
 800ab8c:	58021400 	.word	0x58021400
 800ab90:	58021800 	.word	0x58021800
 800ab94:	58021c00 	.word	0x58021c00
 800ab98:	58022000 	.word	0x58022000
 800ab9c:	52000040 	.word	0x52000040
 800aba0:	24005c58 	.word	0x24005c58

0800aba4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800aba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba8:	460c      	mov	r4, r1
 800abaa:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800abac:	4606      	mov	r6, r0
 800abae:	2800      	cmp	r0, #0
 800abb0:	d171      	bne.n	800ac96 <BSP_TS_Init+0xf2>
 800abb2:	680b      	ldr	r3, [r1, #0]
 800abb4:	1e5a      	subs	r2, r3, #1
 800abb6:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800abba:	d26c      	bcs.n	800ac96 <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800abbc:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800abbe:	1e51      	subs	r1, r2, #1
 800abc0:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800abc4:	d267      	bcs.n	800ac96 <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800abc6:	4293      	cmp	r3, r2
 800abc8:	bf28      	it	cs
 800abca:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800abcc:	68e2      	ldr	r2, [r4, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d861      	bhi.n	800ac96 <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800abd2:	2370      	movs	r3, #112	; 0x70
 800abd4:	2254      	movs	r2, #84	; 0x54
 800abd6:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800abda:	4f32      	ldr	r7, [pc, #200]	; (800aca4 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 800abdc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800acc4 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800abe0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800acc8 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800abe4:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800abe8:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <BSP_TS_Init+0x104>)
 800abea:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800abec:	4b2f      	ldr	r3, [pc, #188]	; (800acac <BSP_TS_Init+0x108>)
 800abee:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800abf0:	4b2f      	ldr	r3, [pc, #188]	; (800acb0 <BSP_TS_Init+0x10c>)
 800abf2:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800abf4:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <BSP_TS_Init+0x110>)
 800abf6:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800abf8:	4b2f      	ldr	r3, [pc, #188]	; (800acb8 <BSP_TS_Init+0x114>)
 800abfa:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800abfc:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800ac00:	a906      	add	r1, sp, #24
 800ac02:	4828      	ldr	r0, [pc, #160]	; (800aca4 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800ac04:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800ac08:	f7fe fbcc 	bl	80093a4 <FT6X06_RegisterBusIO>
 800ac0c:	b118      	cbz	r0, 800ac16 <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 800ac0e:	2e01      	cmp	r6, #1
 800ac10:	d044      	beq.n	800ac9c <BSP_TS_Init+0xf8>
 800ac12:	2601      	movs	r6, #1
 800ac14:	e7f2      	b.n	800abfc <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800ac16:	4669      	mov	r1, sp
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f7fe fb0c 	bl	8009236 <FT6X06_ReadID>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1f5      	bne.n	800ac0e <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 800ac22:	9b00      	ldr	r3, [sp, #0]
 800ac24:	2b11      	cmp	r3, #17
 800ac26:	d1f2      	bne.n	800ac0e <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800ac28:	a903      	add	r1, sp, #12
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f7fe fab0 	bl	8009190 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800ac30:	4b22      	ldr	r3, [pc, #136]	; (800acbc <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800ac32:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 800ac34:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800ac38:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4798      	blx	r3
 800ac40:	4605      	mov	r5, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d1e3      	bne.n	800ac0e <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ac46:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ac48:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ac4a:	4e1d      	ldr	r6, [pc, #116]	; (800acc0 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ac4c:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800ac50:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800ac5a:	68e3      	ldr	r3, [r4, #12]
 800ac5c:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800ac5e:	f8d9 3000 	ldr.w	r3, [r9]
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	4798      	blx	r3
 800ac66:	2800      	cmp	r0, #0
 800ac68:	da02      	bge.n	800ac70 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac6a:	f06f 0504 	mvn.w	r5, #4
 800ac6e:	e00e      	b.n	800ac8e <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800ac70:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ac72:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800ac74:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800ac76:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800ac78:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800ac7a:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ac7c:	68e3      	ldr	r3, [r4, #12]
 800ac7e:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800ac80:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ac82:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800ac84:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ac86:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800ac88:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800ac8a:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800ac8e:	4628      	mov	r0, r5
 800ac90:	b00c      	add	sp, #48	; 0x30
 800ac92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800ac96:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800ac9a:	e7f8      	b.n	800ac8e <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 800ac9c:	f04f 35ff 	mov.w	r5, #4294967295
 800aca0:	e7f5      	b.n	800ac8e <BSP_TS_Init+0xea>
 800aca2:	bf00      	nop
 800aca4:	24005c78 	.word	0x24005c78
 800aca8:	0800a1a5 	.word	0x0800a1a5
 800acac:	0800a111 	.word	0x0800a111
 800acb0:	0800a489 	.word	0x0800a489
 800acb4:	0800a455 	.word	0x0800a455
 800acb8:	0800a4bd 	.word	0x0800a4bd
 800acbc:	24000018 	.word	0x24000018
 800acc0:	24005ca4 	.word	0x24005ca4
 800acc4:	24005ca0 	.word	0x24005ca0
 800acc8:	24005ccc 	.word	0x24005ccc

0800accc <BSP_TS_GetState>:
{
 800accc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800acd0:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d151      	bne.n	800ad7a <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800acd6:	4b2a      	ldr	r3, [pc, #168]	; (800ad80 <BSP_TS_GetState+0xb4>)
 800acd8:	a901      	add	r1, sp, #4
 800acda:	4a2a      	ldr	r2, [pc, #168]	; (800ad84 <BSP_TS_GetState+0xb8>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6810      	ldr	r0, [r2, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	4798      	blx	r3
 800ace4:	2800      	cmp	r0, #0
 800ace6:	db45      	blt.n	800ad74 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800ace8:	4927      	ldr	r1, [pc, #156]	; (800ad88 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800acea:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800acec:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800acf0:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d03a      	beq.n	800ad6c <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800acf6:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800acf8:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800acfc:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800acfe:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 800ad02:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800ad06:	bf42      	ittt	mi
 800ad08:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 800ad0a:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 800ad0c:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800ad0e:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800ad10:	bf44      	itt	mi
 800ad12:	f108 34ff 	addmi.w	r4, r8, #4294967295
 800ad16:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800ad18:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ad1a:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800ad1c:	bf48      	it	mi
 800ad1e:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ad22:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800ad26:	bf48      	it	mi
 800ad28:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ad2a:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800ad2c:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ad2e:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800ad30:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ad32:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ad36:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ad3a:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800ad3c:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800ad3e:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800ad40:	bf8c      	ite	hi
 800ad42:	eba4 050c 	subhi.w	r5, r4, ip
 800ad46:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800ad4a:	42bb      	cmp	r3, r7
 800ad4c:	bf8c      	ite	hi
 800ad4e:	1bda      	subhi	r2, r3, r7
 800ad50:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800ad52:	42a8      	cmp	r0, r5
 800ad54:	d301      	bcc.n	800ad5a <BSP_TS_GetState+0x8e>
 800ad56:	4290      	cmp	r0, r2
 800ad58:	d205      	bcs.n	800ad66 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800ad5a:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800ad5c:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800ad5e:	2000      	movs	r0, #0
}
 800ad60:	b004      	add	sp, #16
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ad66:	e9c6 c701 	strd	ip, r7, [r6, #4]
 800ad6a:	e7f8      	b.n	800ad5e <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800ad6c:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800ad70:	60b7      	str	r7, [r6, #8]
 800ad72:	e7f5      	b.n	800ad60 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad74:	f06f 0004 	mvn.w	r0, #4
 800ad78:	e7f2      	b.n	800ad60 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800ad7a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800ad7e:	e7ef      	b.n	800ad60 <BSP_TS_GetState+0x94>
 800ad80:	24005ccc 	.word	0x24005ccc
 800ad84:	24005ca0 	.word	0x24005ca0
 800ad88:	24005ca4 	.word	0x24005ca4

0800ad8c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ad8c:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <SystemInit+0xb8>)
 800ad8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ad92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800ad96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800ad9a:	691a      	ldr	r2, [r3, #16]
 800ad9c:	f042 0210 	orr.w	r2, r2, #16
 800ada0:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ada2:	4a29      	ldr	r2, [pc, #164]	; (800ae48 <SystemInit+0xbc>)
 800ada4:	6813      	ldr	r3, [r2, #0]
 800ada6:	f003 030f 	and.w	r3, r3, #15
 800adaa:	2b06      	cmp	r3, #6
 800adac:	d805      	bhi.n	800adba <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800adae:	6813      	ldr	r3, [r2, #0]
 800adb0:	f023 030f 	bic.w	r3, r3, #15
 800adb4:	f043 0307 	orr.w	r3, r3, #7
 800adb8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800adba:	4b24      	ldr	r3, [pc, #144]	; (800ae4c <SystemInit+0xc0>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800adc4:	2200      	movs	r2, #0
 800adc6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800adc8:	4a21      	ldr	r2, [pc, #132]	; (800ae50 <SystemInit+0xc4>)
 800adca:	6819      	ldr	r1, [r3, #0]
 800adcc:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800adce:	491e      	ldr	r1, [pc, #120]	; (800ae48 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800add0:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800add2:	680a      	ldr	r2, [r1, #0]
 800add4:	0712      	lsls	r2, r2, #28
 800add6:	d505      	bpl.n	800ade4 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800add8:	680a      	ldr	r2, [r1, #0]
 800adda:	f022 020f 	bic.w	r2, r2, #15
 800adde:	f042 0207 	orr.w	r2, r2, #7
 800ade2:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800ade4:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800ade6:	491b      	ldr	r1, [pc, #108]	; (800ae54 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800ade8:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800adea:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800adec:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800adee:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800adf0:	4919      	ldr	r1, [pc, #100]	; (800ae58 <SystemInit+0xcc>)
 800adf2:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800adf4:	4919      	ldr	r1, [pc, #100]	; (800ae5c <SystemInit+0xd0>)
 800adf6:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800adf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800adfa:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800adfc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800adfe:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ae00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800ae08:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ae0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800ae0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae10:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800ae14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ae1c:	4b10      	ldr	r3, [pc, #64]	; (800ae60 <SystemInit+0xd4>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	0c1b      	lsrs	r3, r3, #16
 800ae22:	041b      	lsls	r3, r3, #16
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d203      	bcs.n	800ae32 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ae2a:	4b0e      	ldr	r3, [pc, #56]	; (800ae64 <SystemInit+0xd8>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800ae32:	4b0d      	ldr	r3, [pc, #52]	; (800ae68 <SystemInit+0xdc>)
 800ae34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800ae38:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800ae3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae3e:	4b01      	ldr	r3, [pc, #4]	; (800ae44 <SystemInit+0xb8>)
 800ae40:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800ae42:	4770      	bx	lr
 800ae44:	e000ed00 	.word	0xe000ed00
 800ae48:	52002000 	.word	0x52002000
 800ae4c:	58024400 	.word	0x58024400
 800ae50:	eaf6ed7f 	.word	0xeaf6ed7f
 800ae54:	02020200 	.word	0x02020200
 800ae58:	01ff0000 	.word	0x01ff0000
 800ae5c:	01010280 	.word	0x01010280
 800ae60:	5c001000 	.word	0x5c001000
 800ae64:	51008000 	.word	0x51008000
 800ae68:	52004000 	.word	0x52004000

0800ae6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ae6c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ae6e:	2003      	movs	r0, #3
 800ae70:	f000 f854 	bl	800af1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ae74:	f002 fc0c 	bl	800d690 <HAL_RCC_GetSysClockFreq>
 800ae78:	490f      	ldr	r1, [pc, #60]	; (800aeb8 <HAL_Init+0x4c>)
 800ae7a:	4a10      	ldr	r2, [pc, #64]	; (800aebc <HAL_Init+0x50>)
 800ae7c:	698b      	ldr	r3, [r1, #24]
 800ae7e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800ae82:	5cd3      	ldrb	r3, [r2, r3]
 800ae84:	f003 031f 	and.w	r3, r3, #31
 800ae88:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae8a:	698b      	ldr	r3, [r1, #24]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	5cd3      	ldrb	r3, [r2, r3]
 800ae92:	4a0b      	ldr	r2, [pc, #44]	; (800aec0 <HAL_Init+0x54>)
 800ae94:	f003 031f 	and.w	r3, r3, #31
 800ae98:	fa20 f303 	lsr.w	r3, r0, r3
 800ae9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae9e:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <HAL_Init+0x58>)
 800aea0:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aea2:	2000      	movs	r0, #0
 800aea4:	f7f6 faa4 	bl	80013f0 <HAL_InitTick>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	b918      	cbnz	r0, 800aeb4 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800aeac:	f7f6 f828 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aeb4:	2401      	movs	r4, #1
 800aeb6:	e7fb      	b.n	800aeb0 <HAL_Init+0x44>
 800aeb8:	58024400 	.word	0x58024400
 800aebc:	08024718 	.word	0x08024718
 800aec0:	2400004c 	.word	0x2400004c
 800aec4:	24000048 	.word	0x24000048

0800aec8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800aec8:	4a03      	ldr	r2, [pc, #12]	; (800aed8 <HAL_IncTick+0x10>)
 800aeca:	4b04      	ldr	r3, [pc, #16]	; (800aedc <HAL_IncTick+0x14>)
 800aecc:	6811      	ldr	r1, [r2, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	440b      	add	r3, r1
 800aed2:	6013      	str	r3, [r2, #0]
}
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	24005cd0 	.word	0x24005cd0
 800aedc:	24000050 	.word	0x24000050

0800aee0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800aee0:	4b01      	ldr	r3, [pc, #4]	; (800aee8 <HAL_GetTick+0x8>)
 800aee2:	6818      	ldr	r0, [r3, #0]
}
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	24005cd0 	.word	0x24005cd0

0800aeec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aef0:	f7ff fff6 	bl	800aee0 <HAL_GetTick>
 800aef4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800aef6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800aef8:	bf1e      	ittt	ne
 800aefa:	4b04      	ldrne	r3, [pc, #16]	; (800af0c <HAL_Delay+0x20>)
 800aefc:	781b      	ldrbne	r3, [r3, #0]
 800aefe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800af00:	f7ff ffee 	bl	800aee0 <HAL_GetTick>
 800af04:	1b43      	subs	r3, r0, r5
 800af06:	42a3      	cmp	r3, r4
 800af08:	d3fa      	bcc.n	800af00 <HAL_Delay+0x14>
  {
  }
}
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	24000050 	.word	0x24000050

0800af10 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800af10:	4b01      	ldr	r3, [pc, #4]	; (800af18 <HAL_GetREVID+0x8>)
 800af12:	6818      	ldr	r0, [r3, #0]
}
 800af14:	0c00      	lsrs	r0, r0, #16
 800af16:	4770      	bx	lr
 800af18:	5c001000 	.word	0x5c001000

0800af1c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af1c:	4907      	ldr	r1, [pc, #28]	; (800af3c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af1e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800af20:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800af22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800af26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800af2a:	0412      	lsls	r2, r2, #16
 800af2c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800af2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800af30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800af34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800af38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800af3a:	4770      	bx	lr
 800af3c:	e000ed00 	.word	0xe000ed00

0800af40 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800af40:	4b16      	ldr	r3, [pc, #88]	; (800af9c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800af42:	b530      	push	{r4, r5, lr}
 800af44:	68dc      	ldr	r4, [r3, #12]
 800af46:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af4a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af4e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af50:	2d04      	cmp	r5, #4
 800af52:	bf28      	it	cs
 800af54:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af56:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af58:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af5c:	bf8c      	ite	hi
 800af5e:	3c03      	subhi	r4, #3
 800af60:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af62:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800af66:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af68:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af6c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af70:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af74:	fa01 f104 	lsl.w	r1, r1, r4
 800af78:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800af80:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800af82:	db06      	blt.n	800af92 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800af88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800af8c:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800af90:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af92:	f000 000f 	and.w	r0, r0, #15
 800af96:	4a02      	ldr	r2, [pc, #8]	; (800afa0 <HAL_NVIC_SetPriority+0x60>)
 800af98:	5413      	strb	r3, [r2, r0]
 800af9a:	e7f9      	b.n	800af90 <HAL_NVIC_SetPriority+0x50>
 800af9c:	e000ed00 	.word	0xe000ed00
 800afa0:	e000ed14 	.word	0xe000ed14

0800afa4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800afa4:	2800      	cmp	r0, #0
 800afa6:	db08      	blt.n	800afba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afa8:	2301      	movs	r3, #1
 800afaa:	0942      	lsrs	r2, r0, #5
 800afac:	f000 001f 	and.w	r0, r0, #31
 800afb0:	fa03 f000 	lsl.w	r0, r3, r0
 800afb4:	4b01      	ldr	r3, [pc, #4]	; (800afbc <HAL_NVIC_EnableIRQ+0x18>)
 800afb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800afba:	4770      	bx	lr
 800afbc:	e000e100 	.word	0xe000e100

0800afc0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800afc0:	2800      	cmp	r0, #0
 800afc2:	db0d      	blt.n	800afe0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afc4:	0943      	lsrs	r3, r0, #5
 800afc6:	2201      	movs	r2, #1
 800afc8:	f000 001f 	and.w	r0, r0, #31
 800afcc:	3320      	adds	r3, #32
 800afce:	fa02 f000 	lsl.w	r0, r2, r0
 800afd2:	4a04      	ldr	r2, [pc, #16]	; (800afe4 <HAL_NVIC_DisableIRQ+0x24>)
 800afd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800afd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800afdc:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	e000e100 	.word	0xe000e100

0800afe8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800afe8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800afec:	4b04      	ldr	r3, [pc, #16]	; (800b000 <HAL_MPU_Disable+0x18>)
 800afee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	e000ed00 	.word	0xe000ed00

0800b004 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800b004:	4b06      	ldr	r3, [pc, #24]	; (800b020 <HAL_MPU_Enable+0x1c>)
 800b006:	f040 0001 	orr.w	r0, r0, #1
 800b00a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800b00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b010:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b014:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800b016:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b01a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800b01e:	4770      	bx	lr
 800b020:	e000ed00 	.word	0xe000ed00

0800b024 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800b024:	7843      	ldrb	r3, [r0, #1]
 800b026:	4a14      	ldr	r2, [pc, #80]	; (800b078 <HAL_MPU_ConfigRegion+0x54>)
{
 800b028:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800b02a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800b02e:	7801      	ldrb	r1, [r0, #0]
 800b030:	b1e9      	cbz	r1, 800b06e <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800b032:	6843      	ldr	r3, [r0, #4]
 800b034:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b038:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b03a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800b03c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b03e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b042:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800b044:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b046:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800b04a:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b04c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800b050:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b052:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800b056:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b058:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800b05c:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800b05e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b062:	7a01      	ldrb	r1, [r0, #8]
 800b064:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800b068:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800b06c:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800b06e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800b072:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800b076:	e7f9      	b.n	800b06c <HAL_MPU_ConfigRegion+0x48>
 800b078:	e000ed00 	.word	0xe000ed00

0800b07c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800b07c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b07e:	4604      	mov	r4, r0
 800b080:	b908      	cbnz	r0, 800b086 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800b082:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800b084:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b086:	7f43      	ldrb	r3, [r0, #29]
 800b088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b08c:	b913      	cbnz	r3, 800b094 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800b08e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800b090:	f7f5 ff4e 	bl	8000f30 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800b094:	2302      	movs	r3, #2
 800b096:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b098:	7923      	ldrb	r3, [r4, #4]
 800b09a:	b9e3      	cbnz	r3, 800b0d6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <HAL_CRC_Init+0x70>)
 800b0a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b0a2:	689a      	ldr	r2, [r3, #8]
 800b0a4:	f022 0218 	bic.w	r2, r2, #24
 800b0a8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b0aa:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b0ac:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b0ae:	b9d2      	cbnz	r2, 800b0e6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b0b0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b0b4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800b0b6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	6961      	ldr	r1, [r4, #20]
 800b0bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b0c0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b0c2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b0c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800b0d4:	e7d6      	b.n	800b084 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b0d6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f808 	bl	800b0f0 <HAL_CRCEx_Polynomial_Set>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d0e2      	beq.n	800b0aa <HAL_CRC_Init+0x2e>
 800b0e4:	e7cd      	b.n	800b082 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b0e6:	6922      	ldr	r2, [r4, #16]
 800b0e8:	e7e4      	b.n	800b0b4 <HAL_CRC_Init+0x38>
 800b0ea:	bf00      	nop
 800b0ec:	04c11db7 	.word	0x04c11db7

0800b0f0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b0f0:	07cb      	lsls	r3, r1, #31
{
 800b0f2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b0f4:	d50c      	bpl.n	800b110 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b0f6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	d31c      	bcc.n	800b136 <HAL_CRCEx_Polynomial_Set+0x46>
 800b0fc:	fa21 f403 	lsr.w	r4, r1, r3
 800b100:	07e4      	lsls	r4, r4, #31
 800b102:	d5f9      	bpl.n	800b0f8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800b104:	2a10      	cmp	r2, #16
 800b106:	d012      	beq.n	800b12e <HAL_CRCEx_Polynomial_Set+0x3e>
 800b108:	d804      	bhi.n	800b114 <HAL_CRCEx_Polynomial_Set+0x24>
 800b10a:	b13a      	cbz	r2, 800b11c <HAL_CRCEx_Polynomial_Set+0x2c>
 800b10c:	2a08      	cmp	r2, #8
 800b10e:	d010      	beq.n	800b132 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 800b110:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800b112:	e00b      	b.n	800b12c <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 800b114:	2a18      	cmp	r2, #24
 800b116:	d1fb      	bne.n	800b110 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800b118:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800b11a:	d8f9      	bhi.n	800b110 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b11c:	6800      	ldr	r0, [r0, #0]
 800b11e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b120:	6883      	ldr	r3, [r0, #8]
 800b122:	f023 0318 	bic.w	r3, r3, #24
 800b126:	431a      	orrs	r2, r3
 800b128:	6082      	str	r2, [r0, #8]
 800b12a:	2000      	movs	r0, #0
}
 800b12c:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800b12e:	2b07      	cmp	r3, #7
 800b130:	e7f3      	b.n	800b11a <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800b132:	2b0f      	cmp	r3, #15
 800b134:	e7f1      	b.n	800b11a <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800b136:	2a00      	cmp	r2, #0
 800b138:	d1ea      	bne.n	800b110 <HAL_CRCEx_Polynomial_Set+0x20>
 800b13a:	e7ef      	b.n	800b11c <HAL_CRCEx_Polynomial_Set+0x2c>

0800b13c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800b13c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800b13e:	4604      	mov	r4, r0
 800b140:	2800      	cmp	r0, #0
 800b142:	d036      	beq.n	800b1b2 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800b144:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800b148:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b14c:	b91b      	cbnz	r3, 800b156 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800b14e:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800b152:	f7f5 ff05 	bl	8000f60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b156:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b158:	69e0      	ldr	r0, [r4, #28]
 800b15a:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800b15c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b164:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800b166:	6819      	ldr	r1, [r3, #0]
 800b168:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800b16c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800b170:	430a      	orrs	r2, r1
 800b172:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b176:	68a2      	ldr	r2, [r4, #8]
 800b178:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800b17c:	4302      	orrs	r2, r0
 800b17e:	f021 0101 	bic.w	r1, r1, #1
 800b182:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b184:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800b186:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800b188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b18a:	0c12      	lsrs	r2, r2, #16
 800b18c:	0412      	lsls	r2, r2, #16
 800b18e:	430a      	orrs	r2, r1
 800b190:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b192:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b194:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800b198:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800b19c:	0552      	lsls	r2, r2, #21
 800b19e:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b1a2:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800b1a4:	430a      	orrs	r2, r1
 800b1a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b1a8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800b1aa:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800b1ac:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800b1b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b1b2:	2001      	movs	r0, #1
 800b1b4:	e7fc      	b.n	800b1b0 <HAL_DMA2D_Init+0x74>

0800b1b6 <HAL_DMA2D_LineEventCallback>:
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800b1b8:	4770      	bx	lr

0800b1ba <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b1ba:	6803      	ldr	r3, [r0, #0]
{
 800b1bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800b1be:	685e      	ldr	r6, [r3, #4]
{
 800b1c0:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800b1c2:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800b1c4:	07f2      	lsls	r2, r6, #31
 800b1c6:	d514      	bpl.n	800b1f2 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800b1c8:	05e9      	lsls	r1, r5, #23
 800b1ca:	d512      	bpl.n	800b1f2 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b1d2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800b1d4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800b1d6:	f042 0201 	orr.w	r2, r2, #1
 800b1da:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800b1dc:	2201      	movs	r2, #1
 800b1de:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b1ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b1ee:	b103      	cbz	r3, 800b1f2 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b1f0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800b1f2:	06b2      	lsls	r2, r6, #26
 800b1f4:	d516      	bpl.n	800b224 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800b1f6:	04ab      	lsls	r3, r5, #18
 800b1f8:	d514      	bpl.n	800b224 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b202:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800b204:	2220      	movs	r2, #32
 800b206:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800b208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b20a:	f043 0302 	orr.w	r3, r3, #2
 800b20e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b210:	2304      	movs	r3, #4
 800b212:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b216:	2300      	movs	r3, #0
 800b218:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b21c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b21e:	b10b      	cbz	r3, 800b224 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b220:	4620      	mov	r0, r4
 800b222:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800b224:	0730      	lsls	r0, r6, #28
 800b226:	d516      	bpl.n	800b256 <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800b228:	0529      	lsls	r1, r5, #20
 800b22a:	d514      	bpl.n	800b256 <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b234:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800b236:	2208      	movs	r2, #8
 800b238:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800b23a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b23c:	f043 0304 	orr.w	r3, r3, #4
 800b240:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800b242:	2304      	movs	r3, #4
 800b244:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b248:	2300      	movs	r3, #0
 800b24a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800b24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b250:	b10b      	cbz	r3, 800b256 <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800b252:	4620      	mov	r0, r4
 800b254:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800b256:	0772      	lsls	r2, r6, #29
 800b258:	d50b      	bpl.n	800b272 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800b25a:	056b      	lsls	r3, r5, #21
 800b25c:	d509      	bpl.n	800b272 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b25e:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b260:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b268:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800b26a:	2204      	movs	r2, #4
 800b26c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800b26e:	f7ff ffa2 	bl	800b1b6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800b272:	07b0      	lsls	r0, r6, #30
 800b274:	d514      	bpl.n	800b2a0 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800b276:	05a9      	lsls	r1, r5, #22
 800b278:	d512      	bpl.n	800b2a0 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b282:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800b284:	2202      	movs	r2, #2
 800b286:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b28a:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800b292:	2300      	movs	r3, #0
 800b294:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800b298:	6a23      	ldr	r3, [r4, #32]
 800b29a:	b10b      	cbz	r3, 800b2a0 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800b29c:	4620      	mov	r0, r4
 800b29e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800b2a0:	06f2      	lsls	r2, r6, #27
 800b2a2:	d513      	bpl.n	800b2cc <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800b2a4:	04eb      	lsls	r3, r5, #19
 800b2a6:	d511      	bpl.n	800b2cc <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b2a8:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b2aa:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b2b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800b2b4:	2210      	movs	r2, #16
 800b2b6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800b2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ba:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800b2c8:	f7ff ff76 	bl	800b1b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800b2cc:	bd70      	pop	{r4, r5, r6, pc}

0800b2ce <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800b2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	460d      	mov	r5, r1
 800b2d6:	4614      	mov	r4, r2
 800b2d8:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2da:	f7ff fe01 	bl	800aee0 <HAL_GetTick>
 800b2de:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800b2e4:	07d2      	lsls	r2, r2, #31
 800b2e6:	d50a      	bpl.n	800b2fe <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b2e8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800b2ec:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800b2ee:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800b2f0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800b2f4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800b2f8:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800b2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b2fe:	f7ff fdef 	bl	800aee0 <HAL_GetTick>
 800b302:	eba0 0008 	sub.w	r0, r0, r8
 800b306:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b30a:	d9e9      	bls.n	800b2e0 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800b30c:	2003      	movs	r0, #3
 800b30e:	e7f4      	b.n	800b2fa <DSI_ShortWrite+0x2c>

0800b310 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b310:	7c03      	ldrb	r3, [r0, #16]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d05c      	beq.n	800b3d0 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800b316:	2200      	movs	r2, #0
 800b318:	6803      	ldr	r3, [r0, #0]
 800b31a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b31e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b322:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800b324:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800b326:	d507      	bpl.n	800b338 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800b328:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b32c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800b330:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800b334:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800b338:	078a      	lsls	r2, r1, #30
 800b33a:	d505      	bpl.n	800b348 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800b33c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b340:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800b344:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800b348:	074a      	lsls	r2, r1, #29
 800b34a:	d505      	bpl.n	800b358 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800b34c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b350:	f042 0201 	orr.w	r2, r2, #1
 800b354:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800b358:	070a      	lsls	r2, r1, #28
 800b35a:	d505      	bpl.n	800b368 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800b35c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b360:	f042 0202 	orr.w	r2, r2, #2
 800b364:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800b368:	06ca      	lsls	r2, r1, #27
 800b36a:	d505      	bpl.n	800b378 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800b36c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b370:	f042 020c 	orr.w	r2, r2, #12
 800b374:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800b378:	068a      	lsls	r2, r1, #26
 800b37a:	d505      	bpl.n	800b388 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800b37c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b380:	f042 0210 	orr.w	r2, r2, #16
 800b384:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800b388:	064a      	lsls	r2, r1, #25
 800b38a:	d505      	bpl.n	800b398 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800b38c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b390:	f042 0220 	orr.w	r2, r2, #32
 800b394:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800b398:	060a      	lsls	r2, r1, #24
 800b39a:	d505      	bpl.n	800b3a8 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800b39c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800b3a8:	05ca      	lsls	r2, r1, #23
 800b3aa:	d505      	bpl.n	800b3b8 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800b3ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b3b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b3b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800b3b8:	058a      	lsls	r2, r1, #22
 800b3ba:	d505      	bpl.n	800b3c8 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800b3bc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800b3c0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800b3c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b3d0:	2002      	movs	r0, #2
}
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_DSI_Init>:
{
 800b3d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3d6:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800b3d8:	4604      	mov	r4, r0
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f000 80a9 	beq.w	800b532 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800b3e0:	7c43      	ldrb	r3, [r0, #17]
 800b3e2:	b90b      	cbnz	r3, 800b3e8 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800b3e4:	f7f5 fde0 	bl	8000fa8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800b3e8:	2303      	movs	r3, #3
 800b3ea:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800b3f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800b3fa:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800b3fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800b402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800b40a:	f7ff fd69 	bl	800aee0 <HAL_GetTick>
 800b40e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800b410:	6822      	ldr	r2, [r4, #0]
 800b412:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800b416:	04d9      	lsls	r1, r3, #19
 800b418:	d57a      	bpl.n	800b510 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800b41a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b41e:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800b422:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800b426:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b42a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b42e:	e9d5 0300 	ldrd	r0, r3, [r5]
 800b432:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b434:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800b438:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800b43a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800b43e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800b440:	430b      	orrs	r3, r1
 800b442:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800b446:	2300      	movs	r3, #0
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b44e:	f043 0301 	orr.w	r3, r3, #1
 800b452:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800b456:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800b462:	f7ff fd43 	bl	800aeec <HAL_Delay>
  tickstart = HAL_GetTick();
 800b466:	f7ff fd3b 	bl	800aee0 <HAL_GetTick>
 800b46a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b472:	05d2      	lsls	r2, r2, #23
 800b474:	d556      	bpl.n	800b524 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b476:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b47a:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b47e:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800b480:	f042 0206 	orr.w	r2, r2, #6
 800b484:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800b488:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b48c:	f022 0203 	bic.w	r2, r2, #3
 800b490:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b494:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800b498:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b49a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800b49c:	f042 0201 	orr.w	r2, r2, #1
 800b4a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800b4a4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b4a8:	f022 0203 	bic.w	r2, r2, #3
 800b4ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b4b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b4b4:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b4b6:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800b4b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b4c2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b4c4:	689a      	ldr	r2, [r3, #8]
 800b4c6:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b4c8:	491b      	ldr	r1, [pc, #108]	; (800b538 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800b4ca:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b4cc:	686a      	ldr	r2, [r5, #4]
 800b4ce:	2a01      	cmp	r2, #1
 800b4d0:	bf38      	it	cc
 800b4d2:	2201      	movcc	r2, #1
 800b4d4:	434a      	muls	r2, r1
 800b4d6:	68a9      	ldr	r1, [r5, #8]
 800b4d8:	f001 0103 	and.w	r1, r1, #3
 800b4dc:	408a      	lsls	r2, r1
 800b4de:	6829      	ldr	r1, [r5, #0]
 800b4e0:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800b4e2:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800b4e4:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800b4e8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800b4ec:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800b4f0:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800b4f4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800b4fe:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800b502:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800b506:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800b508:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800b50a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800b50c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800b50e:	e007      	b.n	800b520 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b510:	f7ff fce6 	bl	800aee0 <HAL_GetTick>
 800b514:	1b80      	subs	r0, r0, r6
 800b516:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b51a:	f67f af79 	bls.w	800b410 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800b51e:	2003      	movs	r0, #3
}
 800b520:	b002      	add	sp, #8
 800b522:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b524:	f7ff fcdc 	bl	800aee0 <HAL_GetTick>
 800b528:	1b80      	subs	r0, r0, r6
 800b52a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b52e:	d99d      	bls.n	800b46c <HAL_DSI_Init+0x98>
 800b530:	e7f5      	b.n	800b51e <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800b532:	2001      	movs	r0, #1
 800b534:	e7f4      	b.n	800b520 <HAL_DSI_Init+0x14c>
 800b536:	bf00      	nop
 800b538:	003d0900 	.word	0x003d0900

0800b53c <HAL_DSI_ErrorCallback>:
 800b53c:	4770      	bx	lr

0800b53e <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b53e:	6803      	ldr	r3, [r0, #0]
 800b540:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b544:	07d1      	lsls	r1, r2, #31
{
 800b546:	b510      	push	{r4, lr}
 800b548:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800b54a:	d508      	bpl.n	800b55e <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800b54c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b550:	07d2      	lsls	r2, r2, #31
 800b552:	d504      	bpl.n	800b55e <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800b554:	2201      	movs	r2, #1
 800b556:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800b55a:	f7f6 fba5 	bl	8001ca8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800b564:	0791      	lsls	r1, r2, #30
 800b566:	d509      	bpl.n	800b57c <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800b568:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b56c:	0792      	lsls	r2, r2, #30
 800b56e:	d505      	bpl.n	800b57c <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b570:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b572:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800b574:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800b578:	f7f6 fbc8 	bl	8001d0c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800b57c:	69a3      	ldr	r3, [r4, #24]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d04e      	beq.n	800b620 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800b582:	6821      	ldr	r1, [r4, #0]
 800b584:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b588:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800b58c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800b590:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b592:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b596:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800b598:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800b59a:	b119      	cbz	r1, 800b5a4 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800b59c:	6961      	ldr	r1, [r4, #20]
 800b59e:	f041 0101 	orr.w	r1, r1, #1
 800b5a2:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800b5a4:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800b5a8:	d003      	beq.n	800b5b2 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800b5aa:	6962      	ldr	r2, [r4, #20]
 800b5ac:	f042 0202 	orr.w	r2, r2, #2
 800b5b0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800b5b2:	07d8      	lsls	r0, r3, #31
 800b5b4:	d503      	bpl.n	800b5be <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800b5b6:	6962      	ldr	r2, [r4, #20]
 800b5b8:	f042 0204 	orr.w	r2, r2, #4
 800b5bc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800b5be:	0799      	lsls	r1, r3, #30
 800b5c0:	d503      	bpl.n	800b5ca <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800b5c2:	6962      	ldr	r2, [r4, #20]
 800b5c4:	f042 0208 	orr.w	r2, r2, #8
 800b5c8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800b5ca:	f013 0f0c 	tst.w	r3, #12
 800b5ce:	d003      	beq.n	800b5d8 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800b5d0:	6962      	ldr	r2, [r4, #20]
 800b5d2:	f042 0210 	orr.w	r2, r2, #16
 800b5d6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800b5d8:	06da      	lsls	r2, r3, #27
 800b5da:	d503      	bpl.n	800b5e4 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800b5dc:	6962      	ldr	r2, [r4, #20]
 800b5de:	f042 0220 	orr.w	r2, r2, #32
 800b5e2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800b5e4:	0698      	lsls	r0, r3, #26
 800b5e6:	d503      	bpl.n	800b5f0 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800b5e8:	6962      	ldr	r2, [r4, #20]
 800b5ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5ee:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800b5f0:	0659      	lsls	r1, r3, #25
 800b5f2:	d503      	bpl.n	800b5fc <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800b5f4:	6962      	ldr	r2, [r4, #20]
 800b5f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b5fa:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800b5fc:	061a      	lsls	r2, r3, #24
 800b5fe:	d503      	bpl.n	800b608 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800b600:	6962      	ldr	r2, [r4, #20]
 800b602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b606:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800b608:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800b60c:	d003      	beq.n	800b616 <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800b60e:	6963      	ldr	r3, [r4, #20]
 800b610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b614:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800b616:	6963      	ldr	r3, [r4, #20]
 800b618:	b113      	cbz	r3, 800b620 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff ff8e 	bl	800b53c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800b620:	bd10      	pop	{r4, pc}

0800b622 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b622:	7c03      	ldrb	r3, [r0, #16]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d00b      	beq.n	800b640 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800b628:	6803      	ldr	r3, [r0, #0]
 800b62a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b62c:	f022 0203 	bic.w	r2, r2, #3
 800b630:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800b632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b634:	4311      	orrs	r1, r2
 800b636:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b638:	2300      	movs	r3, #0
 800b63a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b63c:	4618      	mov	r0, r3
 800b63e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b640:	2002      	movs	r0, #2
}
 800b642:	4770      	bx	lr

0800b644 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800b644:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b646:	7c03      	ldrb	r3, [r0, #16]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d06a      	beq.n	800b722 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b64c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b64e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800b650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b652:	f042 0201 	orr.w	r2, r2, #1
 800b656:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800b658:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b65c:	f022 0201 	bic.w	r2, r2, #1
 800b660:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800b664:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b668:	f042 0201 	orr.w	r2, r2, #1
 800b66c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800b670:	68da      	ldr	r2, [r3, #12]
 800b672:	f022 0203 	bic.w	r2, r2, #3
 800b676:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800b678:	68da      	ldr	r2, [r3, #12]
 800b67a:	4322      	orrs	r2, r4
 800b67c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800b67e:	695a      	ldr	r2, [r3, #20]
 800b680:	f022 0207 	bic.w	r2, r2, #7
 800b684:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b686:	695c      	ldr	r4, [r3, #20]
 800b688:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800b68c:	432a      	orrs	r2, r5
 800b68e:	694d      	ldr	r5, [r1, #20]
 800b690:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b692:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800b694:	4322      	orrs	r2, r4
 800b696:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	f022 020f 	bic.w	r2, r2, #15
 800b69e:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800b6a0:	691c      	ldr	r4, [r3, #16]
 800b6a2:	432c      	orrs	r4, r5
 800b6a4:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800b6a6:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800b6aa:	f024 040e 	bic.w	r4, r4, #14
 800b6ae:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b6b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b6b6:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800b6b8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800b6bc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800b6c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b6c2:	0c12      	lsrs	r2, r2, #16
 800b6c4:	0412      	lsls	r2, r2, #16
 800b6c6:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800b6c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b6ca:	4322      	orrs	r2, r4
 800b6cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800b6ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800b6d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b6d6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b6da:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800b6de:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800b6e2:	432a      	orrs	r2, r5
 800b6e4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800b6e6:	432a      	orrs	r2, r5
 800b6e8:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b6ea:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800b6ec:	432a      	orrs	r2, r5
 800b6ee:	4322      	orrs	r2, r4
 800b6f0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800b6f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b6f6:	f022 0201 	bic.w	r2, r2, #1
 800b6fa:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800b6fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b6fe:	430a      	orrs	r2, r1
 800b700:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800b702:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b706:	f042 0201 	orr.w	r2, r2, #1
 800b70a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800b70e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800b712:	f042 0202 	orr.w	r2, r2, #2
 800b716:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b71a:	2300      	movs	r3, #0
 800b71c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b71e:	4618      	mov	r0, r3
}
 800b720:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b722:	2002      	movs	r0, #2
 800b724:	e7fc      	b.n	800b720 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800b728 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800b728:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b72a:	7c03      	ldrb	r3, [r0, #16]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d02a      	beq.n	800b786 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800b730:	6802      	ldr	r2, [r0, #0]
 800b732:	4b16      	ldr	r3, [pc, #88]	; (800b78c <HAL_DSI_ConfigCommand+0x64>)
 800b734:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800b736:	4023      	ands	r3, r4
 800b738:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b73a:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800b73c:	e9d1 3500 	ldrd	r3, r5, [r1]
 800b740:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800b742:	688d      	ldr	r5, [r1, #8]
 800b744:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800b746:	68cd      	ldr	r5, [r1, #12]
 800b748:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800b74a:	690d      	ldr	r5, [r1, #16]
 800b74c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800b74e:	694d      	ldr	r5, [r1, #20]
 800b750:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800b752:	698d      	ldr	r5, [r1, #24]
 800b754:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800b756:	69cd      	ldr	r5, [r1, #28]
 800b758:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800b75a:	6a0d      	ldr	r5, [r1, #32]
 800b75c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800b75e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800b760:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800b762:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800b764:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800b766:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b768:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800b76a:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800b76c:	4323      	orrs	r3, r4
 800b76e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800b770:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800b772:	f023 0302 	bic.w	r3, r3, #2
 800b776:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800b778:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800b77a:	430b      	orrs	r3, r1
 800b77c:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b77e:	2300      	movs	r3, #0
 800b780:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b782:	4618      	mov	r0, r3
}
 800b784:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b786:	2002      	movs	r0, #2
 800b788:	e7fc      	b.n	800b784 <HAL_DSI_ConfigCommand+0x5c>
 800b78a:	bf00      	nop
 800b78c:	fef080ff 	.word	0xfef080ff

0800b790 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b790:	7c03      	ldrb	r3, [r0, #16]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d00b      	beq.n	800b7ae <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800b796:	6803      	ldr	r3, [r0, #0]
 800b798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79a:	f022 021f 	bic.w	r2, r2, #31
 800b79e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800b7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a2:	4311      	orrs	r1, r2
 800b7a4:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b7ae:	2002      	movs	r0, #2
}
 800b7b0:	4770      	bx	lr

0800b7b2 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800b7b2:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b7b4:	7c03      	ldrb	r3, [r0, #16]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d035      	beq.n	800b826 <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b7ba:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800b7bc:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b7c0:	4294      	cmp	r4, r2
 800b7c2:	bf38      	it	cc
 800b7c4:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800b7c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b7ca:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800b7ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800b7d2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b7d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7da:	4322      	orrs	r2, r4
 800b7dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800b7e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b7e4:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800b7e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b7ec:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800b7f0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800b7f4:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b7f6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800b7fa:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b7fc:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800b7fe:	432a      	orrs	r2, r5
 800b800:	4322      	orrs	r2, r4
 800b802:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800b806:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b80a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b80e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800b812:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800b816:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b81a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b81e:	2300      	movs	r3, #0
 800b820:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b822:	4618      	mov	r0, r3
}
 800b824:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b826:	2002      	movs	r0, #2
 800b828:	e7fc      	b.n	800b824 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800b82c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800b82c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b82e:	7c03      	ldrb	r3, [r0, #16]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d05c      	beq.n	800b8ee <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b834:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b836:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b838:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b83a:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800b83c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800b840:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b842:	689a      	ldr	r2, [r3, #8]
 800b844:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b848:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800b84a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800b84c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b84e:	b292      	uxth	r2, r2
 800b850:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800b852:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800b854:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b858:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800b85a:	4a26      	ldr	r2, [pc, #152]	; (800b8f4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800b85c:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b85e:	4014      	ands	r4, r2
 800b860:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b862:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800b864:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b866:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800b868:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800b86a:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800b86c:	4014      	ands	r4, r2
 800b86e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b870:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800b872:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b874:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800b876:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800b878:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b87c:	4014      	ands	r4, r2
 800b87e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b882:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b886:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b888:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800b88a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800b88e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b892:	4014      	ands	r4, r2
 800b894:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800b898:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b89c:	432c      	orrs	r4, r5
 800b89e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800b8a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8a6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800b8aa:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b8ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b8b2:	698d      	ldr	r5, [r1, #24]
 800b8b4:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b8b6:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b8b8:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800b8ba:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800b8be:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800b8c2:	4014      	ands	r4, r2
 800b8c4:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800b8c8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800b8cc:	432c      	orrs	r4, r5
 800b8ce:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800b8d2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800b8d6:	4022      	ands	r2, r4
 800b8d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800b8dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b8ea:	4618      	mov	r0, r3
}
 800b8ec:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b8ee:	2002      	movs	r0, #2
 800b8f0:	e7fc      	b.n	800b8ec <HAL_DSI_ConfigHostTimeouts+0xc0>
 800b8f2:	bf00      	nop
 800b8f4:	ffff0000 	.word	0xffff0000

0800b8f8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b8f8:	7c03      	ldrb	r3, [r0, #16]
{
 800b8fa:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d01c      	beq.n	800b93a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800b900:	6802      	ldr	r2, [r0, #0]
 800b902:	2300      	movs	r3, #0
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	6851      	ldr	r1, [r2, #4]
 800b908:	f041 0101 	orr.w	r1, r1, #1
 800b90c:	6051      	str	r1, [r2, #4]
 800b90e:	6851      	ldr	r1, [r2, #4]
 800b910:	f001 0101 	and.w	r1, r1, #1
 800b914:	9100      	str	r1, [sp, #0]
 800b916:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b918:	9301      	str	r3, [sp, #4]
 800b91a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800b91e:	f041 0108 	orr.w	r1, r1, #8
 800b922:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800b926:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b92a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b92c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800b92e:	f002 0208 	and.w	r2, r2, #8
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	9a01      	ldr	r2, [sp, #4]
}
 800b936:	b002      	add	sp, #8
 800b938:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b93a:	2002      	movs	r0, #2
 800b93c:	e7fb      	b.n	800b936 <HAL_DSI_Start+0x3e>

0800b93e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800b93e:	7c03      	ldrb	r3, [r0, #16]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d00a      	beq.n	800b95a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800b944:	6802      	ldr	r2, [r0, #0]
 800b946:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800b94a:	f043 0304 	orr.w	r3, r3, #4
 800b94e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b952:	2300      	movs	r3, #0
 800b954:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800b956:	4618      	mov	r0, r3
 800b958:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800b95a:	2002      	movs	r0, #2
}
 800b95c:	4770      	bx	lr

0800b95e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800b95e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b960:	7c05      	ldrb	r5, [r0, #16]
{
 800b962:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800b964:	2d01      	cmp	r5, #1
 800b966:	d009      	beq.n	800b97c <HAL_DSI_ShortWrite+0x1e>
 800b968:	2501      	movs	r5, #1
 800b96a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800b96c:	9d06      	ldr	r5, [sp, #24]
 800b96e:	9500      	str	r5, [sp, #0]
 800b970:	f7ff fcad 	bl	800b2ce <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800b974:	2300      	movs	r3, #0
 800b976:	7423      	strb	r3, [r4, #16]

  return status;
}
 800b978:	b003      	add	sp, #12
 800b97a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800b97c:	2002      	movs	r0, #2
 800b97e:	e7fb      	b.n	800b978 <HAL_DSI_ShortWrite+0x1a>

0800b980 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800b980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800b986:	7c03      	ldrb	r3, [r0, #16]
{
 800b988:	4606      	mov	r6, r0
 800b98a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800b98c:	2b01      	cmp	r3, #1
{
 800b98e:	4615      	mov	r5, r2
 800b990:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800b994:	d053      	beq.n	800ba3e <HAL_DSI_LongWrite+0xbe>
 800b996:	2301      	movs	r3, #1
 800b998:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800b99a:	f7ff faa1 	bl	800aee0 <HAL_GetTick>
 800b99e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800b9a0:	6831      	ldr	r1, [r6, #0]
 800b9a2:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800b9a4:	f013 0a01 	ands.w	sl, r3, #1
 800b9a8:	d01a      	beq.n	800b9e0 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b9aa:	2c03      	cmp	r4, #3
 800b9ac:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800b9ae:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800b9b2:	bf28      	it	cs
 800b9b4:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800b9b6:	4282      	cmp	r2, r0
 800b9b8:	d11e      	bne.n	800b9f8 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800b9ba:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800b9bc:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800b9be:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800b9c2:	bb1b      	cbnz	r3, 800ba0c <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800b9c4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b9c6:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800b9ca:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800b9cc:	0222      	lsls	r2, r4, #8
 800b9ce:	0224      	lsls	r4, r4, #8
 800b9d0:	b292      	uxth	r2, r2
 800b9d2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800b9d6:	4315      	orrs	r5, r2
 800b9d8:	432c      	orrs	r4, r5
 800b9da:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800b9dc:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800b9de:	e009      	b.n	800b9f4 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800b9e0:	f7ff fa7e 	bl	800aee0 <HAL_GetTick>
 800b9e4:	eba0 000b 	sub.w	r0, r0, fp
 800b9e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b9ec:	d9d8      	bls.n	800b9a0 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800b9ee:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800b9f0:	f886 a010 	strb.w	sl, [r6, #16]
}
 800b9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800b9f8:	f818 3002 	ldrb.w	r3, [r8, r2]
 800b9fc:	3201      	adds	r2, #1
 800b9fe:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800ba02:	fa03 f30c 	lsl.w	r3, r3, ip
 800ba06:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800ba0a:	e7d4      	b.n	800b9b6 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ba0c:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800ba0e:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ba12:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800ba14:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800ba16:	bf28      	it	cs
 800ba18:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ba1c:	f812 8000 	ldrb.w	r8, [r2, r0]
 800ba20:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800ba24:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ba26:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800ba2a:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800ba2c:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800ba30:	d1f4      	bne.n	800ba1c <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 800ba32:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 800ba36:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800ba38:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 800ba3c:	e7c1      	b.n	800b9c2 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800ba3e:	2002      	movs	r0, #2
 800ba40:	e7d8      	b.n	800b9f4 <HAL_DSI_LongWrite+0x74>

0800ba42 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800ba42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba46:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800ba48:	7c03      	ldrb	r3, [r0, #16]
{
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800ba4e:	2b01      	cmp	r3, #1
{
 800ba50:	4617      	mov	r7, r2
 800ba52:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ba56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 800ba5a:	d06f      	beq.n	800bb3c <HAL_DSI_Read+0xfa>
 800ba5c:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800ba5e:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800ba60:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800ba62:	d90d      	bls.n	800ba80 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800ba64:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800ba68:	2237      	movs	r2, #55	; 0x37
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	b2f3      	uxtb	r3, r6
 800ba6e:	f7ff fc2e 	bl	800b2ce <DSI_ShortWrite>
 800ba72:	b128      	cbz	r0, 800ba80 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800ba74:	2300      	movs	r3, #0

      return HAL_ERROR;
 800ba76:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800ba78:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800ba80:	f1b9 0f06 	cmp.w	r9, #6
 800ba84:	d10f      	bne.n	800baa6 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ba86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800ba88:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800ba8a:	021b      	lsls	r3, r3, #8
 800ba8c:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 800ba90:	f044 0406 	orr.w	r4, r4, #6
 800ba94:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800ba96:	f7ff fa23 	bl	800aee0 <HAL_GetTick>
 800ba9a:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800ba9c:	2e00      	cmp	r6, #0
 800ba9e:	dc27      	bgt.n	800baf0 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800baa0:	2000      	movs	r0, #0
 800baa2:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800baa4:	e7e9      	b.n	800ba7a <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800baa6:	f1b9 0f04 	cmp.w	r9, #4
 800baaa:	d105      	bne.n	800bab8 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800baac:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800baae:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bab0:	f044 0404 	orr.w	r4, r4, #4
 800bab4:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800bab6:	e7ee      	b.n	800ba96 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800bab8:	f1b9 0f14 	cmp.w	r9, #20
 800babc:	d108      	bne.n	800bad0 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800babe:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bac2:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800bac4:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bac6:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800baca:	f044 0414 	orr.w	r4, r4, #20
 800bace:	e7f1      	b.n	800bab4 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800bad0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800bad4:	d1ce      	bne.n	800ba74 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800bad6:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bada:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800badc:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bae0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800bae4:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800bae6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800baea:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 800baee:	e7e1      	b.n	800bab4 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800baf0:	682a      	ldr	r2, [r5, #0]
 800baf2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800baf4:	f013 0310 	ands.w	r3, r3, #16
 800baf8:	d10d      	bne.n	800bb16 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800bafa:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800bafc:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800bafe:	4632      	mov	r2, r6
 800bb00:	bf28      	it	cs
 800bb02:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800bb04:	00d9      	lsls	r1, r3, #3
 800bb06:	fa20 f101 	lsr.w	r1, r0, r1
 800bb0a:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d1f8      	bne.n	800bb04 <HAL_DSI_Read+0xc2>
        pdata++;
 800bb12:	4417      	add	r7, r2
        datasize--;
 800bb14:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800bb16:	f7ff f9e3 	bl	800aee0 <HAL_GetTick>
 800bb1a:	1b00      	subs	r0, r0, r4
 800bb1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800bb20:	d903      	bls.n	800bb2a <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800bb22:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800bb24:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800bb26:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800bb28:	e7a7      	b.n	800ba7a <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800bb2e:	0652      	lsls	r2, r2, #25
 800bb30:	d4b4      	bmi.n	800ba9c <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800bb32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bb36:	069b      	lsls	r3, r3, #26
 800bb38:	d49c      	bmi.n	800ba74 <HAL_DSI_Read+0x32>
 800bb3a:	e7af      	b.n	800ba9c <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800bb3c:	2002      	movs	r0, #2
 800bb3e:	e79c      	b.n	800ba7a <HAL_DSI_Read+0x38>

0800bb40 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800bb40:	7c03      	ldrb	r3, [r0, #16]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d010      	beq.n	800bb68 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800bb46:	6803      	ldr	r3, [r0, #0]
 800bb48:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800bb4c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800bb50:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800bb54:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800bb58:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800bb5c:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800bb60:	2300      	movs	r3, #0
 800bb62:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800bb64:	4618      	mov	r0, r3
 800bb66:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800bb68:	2002      	movs	r0, #2
}
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800bb70:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb72:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800bd40 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bb76:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bb7a:	680a      	ldr	r2, [r1, #0]
 800bb7c:	fa32 f503 	lsrs.w	r5, r2, r3
 800bb80:	d102      	bne.n	800bb88 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800bb82:	b003      	add	sp, #12
 800bb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bb88:	f04f 0e01 	mov.w	lr, #1
 800bb8c:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800bb90:	ea1e 0202 	ands.w	r2, lr, r2
 800bb94:	f000 80bd 	beq.w	800bd12 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bb98:	684e      	ldr	r6, [r1, #4]
 800bb9a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bb9e:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bba2:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bba6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bbaa:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bbac:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bbb0:	2f01      	cmp	r7, #1
 800bbb2:	d834      	bhi.n	800bc1e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800bbb4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bbb6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bbba:	68cf      	ldr	r7, [r1, #12]
 800bbbc:	fa07 f708 	lsl.w	r7, r7, r8
 800bbc0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800bbc4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800bbc6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bbc8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bbcc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800bbd0:	409f      	lsls	r7, r3
 800bbd2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800bbd6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800bbd8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbda:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bbdc:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bbe0:	688f      	ldr	r7, [r1, #8]
 800bbe2:	fa07 f708 	lsl.w	r7, r7, r8
 800bbe6:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800bbea:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbec:	d119      	bne.n	800bc22 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800bbee:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bbf2:	f003 0b07 	and.w	fp, r3, #7
 800bbf6:	f04f 0e0f 	mov.w	lr, #15
 800bbfa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800bbfe:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800bc02:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bc06:	fa0e fe0b 	lsl.w	lr, lr, fp
 800bc0a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bc0e:	690f      	ldr	r7, [r1, #16]
 800bc10:	fa07 f70b 	lsl.w	r7, r7, fp
 800bc14:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800bc18:	f8ca 7020 	str.w	r7, [sl, #32]
 800bc1c:	e001      	b.n	800bc22 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bc1e:	2d03      	cmp	r5, #3
 800bc20:	d1da      	bne.n	800bbd8 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800bc22:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc24:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bc28:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bc2c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc30:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 800bc34:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bc36:	d06c      	beq.n	800bd12 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc38:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800bc3c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bc40:	f003 0c03 	and.w	ip, r3, #3
 800bc44:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc48:	f045 0502 	orr.w	r5, r5, #2
 800bc4c:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bc50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc54:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 800bc58:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800bc5c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800bc60:	f005 0502 	and.w	r5, r5, #2
 800bc64:	9501      	str	r5, [sp, #4]
 800bc66:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bc68:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800bc6c:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bc70:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bc74:	4d31      	ldr	r5, [pc, #196]	; (800bd3c <HAL_GPIO_Init+0x1d0>)
 800bc76:	42a8      	cmp	r0, r5
 800bc78:	d04d      	beq.n	800bd16 <HAL_GPIO_Init+0x1aa>
 800bc7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc7e:	42a8      	cmp	r0, r5
 800bc80:	d04b      	beq.n	800bd1a <HAL_GPIO_Init+0x1ae>
 800bc82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc86:	42a8      	cmp	r0, r5
 800bc88:	d049      	beq.n	800bd1e <HAL_GPIO_Init+0x1b2>
 800bc8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc8e:	42a8      	cmp	r0, r5
 800bc90:	d047      	beq.n	800bd22 <HAL_GPIO_Init+0x1b6>
 800bc92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc96:	42a8      	cmp	r0, r5
 800bc98:	d045      	beq.n	800bd26 <HAL_GPIO_Init+0x1ba>
 800bc9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bc9e:	42a8      	cmp	r0, r5
 800bca0:	d043      	beq.n	800bd2a <HAL_GPIO_Init+0x1be>
 800bca2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bca6:	42a8      	cmp	r0, r5
 800bca8:	d041      	beq.n	800bd2e <HAL_GPIO_Init+0x1c2>
 800bcaa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bcae:	42a8      	cmp	r0, r5
 800bcb0:	d03f      	beq.n	800bd32 <HAL_GPIO_Init+0x1c6>
 800bcb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bcb6:	42a8      	cmp	r0, r5
 800bcb8:	d03d      	beq.n	800bd36 <HAL_GPIO_Init+0x1ca>
 800bcba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800bcbe:	42a8      	cmp	r0, r5
 800bcc0:	bf0c      	ite	eq
 800bcc2:	2509      	moveq	r5, #9
 800bcc4:	250a      	movne	r5, #10
 800bcc6:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bcca:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bcce:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bcd2:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800bcd4:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800bcd8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800bcda:	bf0c      	ite	eq
 800bcdc:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800bcde:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bce0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800bce4:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800bce6:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800bce8:	bf0c      	ite	eq
 800bcea:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800bcec:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bcee:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800bcf2:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800bcf4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800bcf8:	bf0c      	ite	eq
 800bcfa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800bcfc:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bcfe:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800bd00:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800bd04:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800bd08:	bf54      	ite	pl
 800bd0a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800bd0c:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800bd0e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800bd12:	3301      	adds	r3, #1
 800bd14:	e731      	b.n	800bb7a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bd16:	2500      	movs	r5, #0
 800bd18:	e7d5      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd1a:	2501      	movs	r5, #1
 800bd1c:	e7d3      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd1e:	2502      	movs	r5, #2
 800bd20:	e7d1      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd22:	2503      	movs	r5, #3
 800bd24:	e7cf      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd26:	2504      	movs	r5, #4
 800bd28:	e7cd      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd2a:	2505      	movs	r5, #5
 800bd2c:	e7cb      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd2e:	2506      	movs	r5, #6
 800bd30:	e7c9      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd32:	2507      	movs	r5, #7
 800bd34:	e7c7      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd36:	2508      	movs	r5, #8
 800bd38:	e7c5      	b.n	800bcc6 <HAL_GPIO_Init+0x15a>
 800bd3a:	bf00      	nop
 800bd3c:	58020000 	.word	0x58020000
 800bd40:	58024400 	.word	0x58024400

0800bd44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800bd48:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd4a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800be78 <HAL_GPIO_DeInit+0x134>
 800bd4e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800be7c <HAL_GPIO_DeInit+0x138>
 800bd52:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800be80 <HAL_GPIO_DeInit+0x13c>
 800bd56:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800be84 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 800bd5a:	fa31 f302 	lsrs.w	r3, r1, r2
 800bd5e:	d101      	bne.n	800bd64 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800bd64:	2301      	movs	r3, #1
 800bd66:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800bd6a:	ea1c 0601 	ands.w	r6, ip, r1
 800bd6e:	d06d      	beq.n	800be4c <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bd70:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bd74:	f002 0703 	and.w	r7, r2, #3
 800bd78:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd7a:	4b3e      	ldr	r3, [pc, #248]	; (800be74 <HAL_GPIO_DeInit+0x130>)
 800bd7c:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bd80:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd82:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bd84:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bd88:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bd8c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800bd90:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bd94:	d05c      	beq.n	800be50 <HAL_GPIO_DeInit+0x10c>
 800bd96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd9a:	4298      	cmp	r0, r3
 800bd9c:	d05a      	beq.n	800be54 <HAL_GPIO_DeInit+0x110>
 800bd9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bda2:	4298      	cmp	r0, r3
 800bda4:	d058      	beq.n	800be58 <HAL_GPIO_DeInit+0x114>
 800bda6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdaa:	4298      	cmp	r0, r3
 800bdac:	d056      	beq.n	800be5c <HAL_GPIO_DeInit+0x118>
 800bdae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdb2:	4298      	cmp	r0, r3
 800bdb4:	d054      	beq.n	800be60 <HAL_GPIO_DeInit+0x11c>
 800bdb6:	4540      	cmp	r0, r8
 800bdb8:	d054      	beq.n	800be64 <HAL_GPIO_DeInit+0x120>
 800bdba:	4548      	cmp	r0, r9
 800bdbc:	d054      	beq.n	800be68 <HAL_GPIO_DeInit+0x124>
 800bdbe:	4550      	cmp	r0, sl
 800bdc0:	d054      	beq.n	800be6c <HAL_GPIO_DeInit+0x128>
 800bdc2:	4558      	cmp	r0, fp
 800bdc4:	d054      	beq.n	800be70 <HAL_GPIO_DeInit+0x12c>
 800bdc6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800bdca:	4298      	cmp	r0, r3
 800bdcc:	bf0c      	ite	eq
 800bdce:	2309      	moveq	r3, #9
 800bdd0:	230a      	movne	r3, #10
 800bdd2:	40bb      	lsls	r3, r7
 800bdd4:	4573      	cmp	r3, lr
 800bdd6:	d119      	bne.n	800be0c <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800bdd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bddc:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800bde0:	ea27 0706 	bic.w	r7, r7, r6
 800bde4:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800bde8:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800bdec:	ea27 0706 	bic.w	r7, r7, r6
 800bdf0:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800bdf4:	685f      	ldr	r7, [r3, #4]
 800bdf6:	ea27 0706 	bic.w	r7, r7, r6
 800bdfa:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800bdfc:	681f      	ldr	r7, [r3, #0]
 800bdfe:	ea27 0606 	bic.w	r6, r7, r6
 800be02:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800be04:	68a3      	ldr	r3, [r4, #8]
 800be06:	ea23 0305 	bic.w	r3, r3, r5
 800be0a:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800be0c:	2503      	movs	r5, #3
 800be0e:	0053      	lsls	r3, r2, #1
 800be10:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800be12:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800be16:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800be1a:	260f      	movs	r6, #15
 800be1c:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800be1e:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800be20:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800be22:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800be24:	fa22 f405 	lsr.w	r4, r2, r5
 800be28:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800be2c:	6a25      	ldr	r5, [r4, #32]
 800be2e:	ea25 0606 	bic.w	r6, r5, r6
 800be32:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be34:	68c4      	ldr	r4, [r0, #12]
 800be36:	ea24 0403 	bic.w	r4, r4, r3
 800be3a:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800be3c:	6844      	ldr	r4, [r0, #4]
 800be3e:	ea24 040c 	bic.w	r4, r4, ip
 800be42:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800be44:	6884      	ldr	r4, [r0, #8]
 800be46:	ea24 0303 	bic.w	r3, r4, r3
 800be4a:	6083      	str	r3, [r0, #8]
    position++;
 800be4c:	3201      	adds	r2, #1
 800be4e:	e784      	b.n	800bd5a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800be50:	2300      	movs	r3, #0
 800be52:	e7be      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be54:	2301      	movs	r3, #1
 800be56:	e7bc      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be58:	2302      	movs	r3, #2
 800be5a:	e7ba      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be5c:	2303      	movs	r3, #3
 800be5e:	e7b8      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be60:	2304      	movs	r3, #4
 800be62:	e7b6      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be64:	2305      	movs	r3, #5
 800be66:	e7b4      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be68:	2306      	movs	r3, #6
 800be6a:	e7b2      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be6c:	2307      	movs	r3, #7
 800be6e:	e7b0      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be70:	2308      	movs	r3, #8
 800be72:	e7ae      	b.n	800bdd2 <HAL_GPIO_DeInit+0x8e>
 800be74:	58020000 	.word	0x58020000
 800be78:	58021400 	.word	0x58021400
 800be7c:	58021800 	.word	0x58021800
 800be80:	58021c00 	.word	0x58021c00
 800be84:	58022000 	.word	0x58022000

0800be88 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800be88:	6903      	ldr	r3, [r0, #16]
 800be8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800be8c:	bf14      	ite	ne
 800be8e:	2001      	movne	r0, #1
 800be90:	2000      	moveq	r0, #0
 800be92:	4770      	bx	lr

0800be94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800be94:	b10a      	cbz	r2, 800be9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800be96:	6181      	str	r1, [r0, #24]
  }
}
 800be98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800be9a:	0409      	lsls	r1, r1, #16
 800be9c:	e7fb      	b.n	800be96 <HAL_GPIO_WritePin+0x2>

0800be9e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800be9e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bea0:	ea01 0203 	and.w	r2, r1, r3
 800bea4:	ea21 0103 	bic.w	r1, r1, r3
 800bea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800beac:	6181      	str	r1, [r0, #24]
}
 800beae:	4770      	bx	lr

0800beb0 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <HAL_HSEM_FastTake+0x14>)
 800beb2:	3020      	adds	r0, #32
 800beb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800beb8:	4b03      	ldr	r3, [pc, #12]	; (800bec8 <HAL_HSEM_FastTake+0x18>)
 800beba:	1ac0      	subs	r0, r0, r3
 800bebc:	bf18      	it	ne
 800bebe:	2001      	movne	r0, #1
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	58026400 	.word	0x58026400
 800bec8:	80000300 	.word	0x80000300

0800becc <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800becc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800bed0:	4b01      	ldr	r3, [pc, #4]	; (800bed8 <HAL_HSEM_Release+0xc>)
 800bed2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800bed6:	4770      	bx	lr
 800bed8:	58026400 	.word	0x58026400

0800bedc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bedc:	6803      	ldr	r3, [r0, #0]
 800bede:	699a      	ldr	r2, [r3, #24]
 800bee0:	0791      	lsls	r1, r2, #30
 800bee2:	d501      	bpl.n	800bee8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bee4:	2200      	movs	r2, #0
 800bee6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bee8:	699a      	ldr	r2, [r3, #24]
 800beea:	07d2      	lsls	r2, r2, #31
 800beec:	d403      	bmi.n	800bef6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800beee:	699a      	ldr	r2, [r3, #24]
 800bef0:	f042 0201 	orr.w	r2, r2, #1
 800bef4:	619a      	str	r2, [r3, #24]
  }
}
 800bef6:	4770      	bx	lr

0800bef8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bef8:	b530      	push	{r4, r5, lr}
 800befa:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800befc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf00:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf02:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf04:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf0a:	4a05      	ldr	r2, [pc, #20]	; (800bf20 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf0c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf0e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bf12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800bf16:	ea20 0002 	bic.w	r0, r0, r2
 800bf1a:	4303      	orrs	r3, r0
 800bf1c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bf1e:	bd30      	pop	{r4, r5, pc}
 800bf20:	03ff63ff 	.word	0x03ff63ff

0800bf24 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800bf24:	6803      	ldr	r3, [r0, #0]
{
 800bf26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800bf2a:	699c      	ldr	r4, [r3, #24]
{
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	460f      	mov	r7, r1
 800bf30:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bf32:	f014 0410 	ands.w	r4, r4, #16
 800bf36:	d070      	beq.n	800c01a <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800bf38:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf3a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800bf3c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf3e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bf40:	682b      	ldr	r3, [r5, #0]
 800bf42:	699a      	ldr	r2, [r3, #24]
 800bf44:	0692      	lsls	r2, r2, #26
 800bf46:	d462      	bmi.n	800c00e <I2C_IsErrorOccurred+0xea>
 800bf48:	f1b8 0f00 	cmp.w	r8, #0
 800bf4c:	d036      	beq.n	800bfbc <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 800bf4e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800bf52:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800bf58:	05d6      	lsls	r6, r2, #23
 800bf5a:	d505      	bpl.n	800bf68 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bf5c:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800bf60:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800bf64:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bf66:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800bf68:	0551      	lsls	r1, r2, #21
 800bf6a:	d505      	bpl.n	800bf78 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bf6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800bf70:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800bf74:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bf76:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800bf78:	0592      	lsls	r2, r2, #22
 800bf7a:	d550      	bpl.n	800c01e <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bf7c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800bf80:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bf84:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800bf86:	4628      	mov	r0, r5
 800bf88:	f7ff ffa8 	bl	800bedc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800bf8c:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800bf8e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800bf90:	6853      	ldr	r3, [r2, #4]
 800bf92:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800bf96:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800bf9a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800bf9e:	f023 0301 	bic.w	r3, r3, #1
 800bfa2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800bfa4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bfa6:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800bfa8:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800bfaa:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800bfac:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800bfb6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800bfba:	e032      	b.n	800c022 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800bfbc:	1c7a      	adds	r2, r7, #1
 800bfbe:	d0c0      	beq.n	800bf42 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bfc0:	f7fe ff8e 	bl	800aee0 <HAL_GetTick>
 800bfc4:	1b80      	subs	r0, r0, r6
 800bfc6:	42b8      	cmp	r0, r7
 800bfc8:	d801      	bhi.n	800bfce <I2C_IsErrorOccurred+0xaa>
 800bfca:	2f00      	cmp	r7, #0
 800bfcc:	d1b8      	bne.n	800bf40 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bfce:	682b      	ldr	r3, [r5, #0]
 800bfd0:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800bfd2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bfd6:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800bfd8:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bfda:	0400      	lsls	r0, r0, #16
 800bfdc:	d50a      	bpl.n	800bff4 <I2C_IsErrorOccurred+0xd0>
 800bfde:	0448      	lsls	r0, r1, #17
 800bfe0:	d408      	bmi.n	800bff4 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800bfe2:	2a20      	cmp	r2, #32
 800bfe4:	d006      	beq.n	800bff4 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfec:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bfee:	f7fe ff77 	bl	800aee0 <HAL_GetTick>
 800bff2:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	0699      	lsls	r1, r3, #26
 800bffa:	d4a1      	bmi.n	800bf40 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bffc:	f7fe ff70 	bl	800aee0 <HAL_GetTick>
 800c000:	1b80      	subs	r0, r0, r6
 800c002:	2819      	cmp	r0, #25
 800c004:	d9f6      	bls.n	800bff4 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c006:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800c008:	f04f 0801 	mov.w	r8, #1
 800c00c:	e798      	b.n	800bf40 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800c00e:	f1b8 0f00 	cmp.w	r8, #0
 800c012:	d19c      	bne.n	800bf4e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c014:	2220      	movs	r2, #32
 800c016:	61da      	str	r2, [r3, #28]
 800c018:	e799      	b.n	800bf4e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800c01a:	4620      	mov	r0, r4
 800c01c:	e79a      	b.n	800bf54 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800c01e:	2800      	cmp	r0, #0
 800c020:	d1b1      	bne.n	800bf86 <I2C_IsErrorOccurred+0x62>
}
 800c022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c026 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c02e:	6823      	ldr	r3, [r4, #0]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	079b      	lsls	r3, r3, #30
 800c034:	d501      	bpl.n	800c03a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800c036:	2000      	movs	r0, #0
}
 800c038:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c03a:	4632      	mov	r2, r6
 800c03c:	4629      	mov	r1, r5
 800c03e:	4620      	mov	r0, r4
 800c040:	f7ff ff70 	bl	800bf24 <I2C_IsErrorOccurred>
 800c044:	b9c0      	cbnz	r0, 800c078 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800c046:	1c6a      	adds	r2, r5, #1
 800c048:	d0f1      	beq.n	800c02e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c04a:	f7fe ff49 	bl	800aee0 <HAL_GetTick>
 800c04e:	1b80      	subs	r0, r0, r6
 800c050:	42a8      	cmp	r0, r5
 800c052:	d801      	bhi.n	800c058 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800c054:	2d00      	cmp	r5, #0
 800c056:	d1ea      	bne.n	800c02e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800c058:	6823      	ldr	r3, [r4, #0]
 800c05a:	699b      	ldr	r3, [r3, #24]
 800c05c:	f013 0302 	ands.w	r3, r3, #2
 800c060:	d1e5      	bne.n	800c02e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c062:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800c064:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c068:	f042 0220 	orr.w	r2, r2, #32
 800c06c:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c06e:	2220      	movs	r2, #32
 800c070:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800c078:	2001      	movs	r0, #1
 800c07a:	e7dd      	b.n	800c038 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800c07c <I2C_WaitOnFlagUntilTimeout>:
{
 800c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	9f06      	ldr	r7, [sp, #24]
 800c082:	4604      	mov	r4, r0
 800c084:	4688      	mov	r8, r1
 800c086:	4616      	mov	r6, r2
 800c088:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c08a:	6822      	ldr	r2, [r4, #0]
 800c08c:	6993      	ldr	r3, [r2, #24]
 800c08e:	ea38 0303 	bics.w	r3, r8, r3
 800c092:	bf0c      	ite	eq
 800c094:	2301      	moveq	r3, #1
 800c096:	2300      	movne	r3, #0
 800c098:	42b3      	cmp	r3, r6
 800c09a:	d001      	beq.n	800c0a0 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800c09c:	2000      	movs	r0, #0
 800c09e:	e01e      	b.n	800c0de <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800c0a0:	1c6b      	adds	r3, r5, #1
 800c0a2:	d0f3      	beq.n	800c08c <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0a4:	f7fe ff1c 	bl	800aee0 <HAL_GetTick>
 800c0a8:	1bc0      	subs	r0, r0, r7
 800c0aa:	42a8      	cmp	r0, r5
 800c0ac:	d801      	bhi.n	800c0b2 <I2C_WaitOnFlagUntilTimeout+0x36>
 800c0ae:	2d00      	cmp	r5, #0
 800c0b0:	d1eb      	bne.n	800c08a <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	ea38 0303 	bics.w	r3, r8, r3
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2301      	moveq	r3, #1
 800c0be:	2300      	movne	r3, #0
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	d1e2      	bne.n	800c08a <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800c0c6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0c8:	f043 0320 	orr.w	r3, r3, #32
 800c0cc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c0ce:	2320      	movs	r3, #32
 800c0d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800c0da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800c0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c0e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800c0e2:	b570      	push	{r4, r5, r6, lr}
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	460d      	mov	r5, r1
 800c0e8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c0ea:	6823      	ldr	r3, [r4, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	069b      	lsls	r3, r3, #26
 800c0f0:	d501      	bpl.n	800c0f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800c0f2:	2000      	movs	r0, #0
}
 800c0f4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7ff ff12 	bl	800bf24 <I2C_IsErrorOccurred>
 800c100:	b9b0      	cbnz	r0, 800c130 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c102:	f7fe feed 	bl	800aee0 <HAL_GetTick>
 800c106:	1b80      	subs	r0, r0, r6
 800c108:	42a8      	cmp	r0, r5
 800c10a:	d801      	bhi.n	800c110 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	d1ec      	bne.n	800c0ea <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	699b      	ldr	r3, [r3, #24]
 800c114:	f013 0320 	ands.w	r3, r3, #32
 800c118:	d1e7      	bne.n	800c0ea <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c11a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c11c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c120:	f042 0220 	orr.w	r2, r2, #32
 800c124:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c126:	2220      	movs	r2, #32
 800c128:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800c130:	2001      	movs	r0, #1
 800c132:	e7df      	b.n	800c0f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800c134 <HAL_I2C_MspInit>:
}
 800c134:	4770      	bx	lr

0800c136 <HAL_I2C_Init>:
{
 800c136:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c138:	4604      	mov	r4, r0
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d04a      	beq.n	800c1d4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c13e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c142:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c146:	b91b      	cbnz	r3, 800c150 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800c148:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800c14c:	f7ff fff2 	bl	800c134 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c150:	2324      	movs	r3, #36	; 0x24
 800c152:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c156:	6823      	ldr	r3, [r4, #0]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	f022 0201 	bic.w	r2, r2, #1
 800c15e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c160:	6862      	ldr	r2, [r4, #4]
 800c162:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c166:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c168:	689a      	ldr	r2, [r3, #8]
 800c16a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c16e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c170:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c174:	2901      	cmp	r1, #1
 800c176:	d124      	bne.n	800c1c2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c17c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c17e:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c180:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c182:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800c186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c18a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c18c:	68da      	ldr	r2, [r3, #12]
 800c18e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c192:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c194:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800c198:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c19a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c19c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c1a0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1a2:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800c1a6:	430a      	orrs	r2, r1
 800c1a8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	f042 0201 	orr.w	r2, r2, #1
 800c1b0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800c1b2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1b4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c1b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c1ba:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800c1c0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c1c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1c6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c1c8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1ca:	d1d8      	bne.n	800c17e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c1cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	e7d4      	b.n	800c17e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e7f3      	b.n	800c1c0 <HAL_I2C_Init+0x8a>

0800c1d8 <HAL_I2C_MspDeInit>:
 800c1d8:	4770      	bx	lr

0800c1da <HAL_I2C_DeInit>:
{
 800c1da:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800c1dc:	4604      	mov	r4, r0
 800c1de:	b198      	cbz	r0, 800c208 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800c1e0:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c1e2:	2324      	movs	r3, #36	; 0x24
 800c1e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c1e8:	6813      	ldr	r3, [r2, #0]
 800c1ea:	f023 0301 	bic.w	r3, r3, #1
 800c1ee:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800c1f0:	f7ff fff2 	bl	800c1d8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800c1f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800c1fc:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c200:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c202:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800c206:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c208:	2001      	movs	r0, #1
 800c20a:	e7fc      	b.n	800c206 <HAL_I2C_DeInit+0x2c>

0800c20c <HAL_I2C_Mem_Write>:
{
 800c20c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c210:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c212:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c216:	4604      	mov	r4, r0
 800c218:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c21a:	2b20      	cmp	r3, #32
{
 800c21c:	4616      	mov	r6, r2
 800c21e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c222:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c226:	f040 80c6 	bne.w	800c3b6 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800c22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c22c:	b113      	cbz	r3, 800c234 <HAL_I2C_Mem_Write+0x28>
 800c22e:	f1ba 0f00 	cmp.w	sl, #0
 800c232:	d106      	bne.n	800c242 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c234:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c238:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c23a:	2001      	movs	r0, #1
}
 800c23c:	b003      	add	sp, #12
 800c23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c242:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c246:	2b01      	cmp	r3, #1
 800c248:	f000 80b5 	beq.w	800c3b6 <HAL_I2C_Mem_Write+0x1aa>
 800c24c:	f04f 0b01 	mov.w	fp, #1
 800c250:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c254:	f7fe fe44 	bl	800aee0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c258:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800c25a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c25c:	9000      	str	r0, [sp, #0]
 800c25e:	465a      	mov	r2, fp
 800c260:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c264:	4620      	mov	r0, r4
 800c266:	f7ff ff09 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d1e5      	bne.n	800c23a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c26e:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c270:	fa5f f289 	uxtb.w	r2, r9
 800c274:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800c276:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c278:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c27c:	2340      	movs	r3, #64	; 0x40
 800c27e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800c282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c284:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c286:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800c288:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c28a:	4b4c      	ldr	r3, [pc, #304]	; (800c3bc <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800c28c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c296:	f7ff fe2f 	bl	800bef8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c29a:	462a      	mov	r2, r5
 800c29c:	4641      	mov	r1, r8
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f7ff fec1 	bl	800c026 <I2C_WaitOnTXISFlagUntilTimeout>
 800c2a4:	bb18      	cbnz	r0, 800c2ee <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c2a6:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2aa:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c2ac:	d115      	bne.n	800c2da <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2ae:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2180      	movs	r1, #128	; 0x80
 800c2b4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2b6:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c2b8:	4643      	mov	r3, r8
 800c2ba:	9500      	str	r5, [sp, #0]
 800c2bc:	f7ff fede 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c2c0:	b9a8      	cbnz	r0, 800c2ee <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	2bff      	cmp	r3, #255	; 0xff
 800c2c8:	d815      	bhi.n	800c2f6 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c2ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c2cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2d0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800c2d2:	b292      	uxth	r2, r2
 800c2d4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c2d6:	b2d2      	uxtb	r2, r2
 800c2d8:	e012      	b.n	800c300 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c2da:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2dc:	4641      	mov	r1, r8
 800c2de:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c2e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c2e2:	462a      	mov	r2, r5
 800c2e4:	f7ff fe9f 	bl	800c026 <I2C_WaitOnTXISFlagUntilTimeout>
 800c2e8:	b908      	cbnz	r0, 800c2ee <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	e7df      	b.n	800c2ae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c2f4:	e7a1      	b.n	800c23a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2f6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c2f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2fc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2fe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c300:	4639      	mov	r1, r7
 800c302:	4620      	mov	r0, r4
 800c304:	f7ff fdf8 	bl	800bef8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c308:	462a      	mov	r2, r5
 800c30a:	4641      	mov	r1, r8
 800c30c:	4620      	mov	r0, r4
 800c30e:	f7ff fe8a 	bl	800c026 <I2C_WaitOnTXISFlagUntilTimeout>
 800c312:	2800      	cmp	r0, #0
 800c314:	d191      	bne.n	800c23a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c318:	6822      	ldr	r2, [r4, #0]
 800c31a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800c31e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c320:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c322:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c324:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c326:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c328:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800c32a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800c32c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c32e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c330:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c332:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c334:	b29b      	uxth	r3, r3
 800c336:	b1b3      	cbz	r3, 800c366 <HAL_I2C_Mem_Write+0x15a>
 800c338:	b9aa      	cbnz	r2, 800c366 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c33a:	4643      	mov	r3, r8
 800c33c:	2180      	movs	r1, #128	; 0x80
 800c33e:	4620      	mov	r0, r4
 800c340:	9500      	str	r5, [sp, #0]
 800c342:	f7ff fe9b 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c346:	2800      	cmp	r0, #0
 800c348:	f47f af77 	bne.w	800c23a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c34c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c34e:	b29b      	uxth	r3, r3
 800c350:	2bff      	cmp	r3, #255	; 0xff
 800c352:	d928      	bls.n	800c3a6 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c354:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c35a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c35c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c35e:	4639      	mov	r1, r7
 800c360:	4620      	mov	r0, r4
 800c362:	f7ff fdc9 	bl	800bef8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c366:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c368:	b29b      	uxth	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1cc      	bne.n	800c308 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c36e:	462a      	mov	r2, r5
 800c370:	4641      	mov	r1, r8
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff feb5 	bl	800c0e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c378:	2800      	cmp	r0, #0
 800c37a:	f47f af5e 	bne.w	800c23a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	2120      	movs	r1, #32
 800c382:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c384:	685a      	ldr	r2, [r3, #4]
 800c386:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c38a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c38e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c392:	f022 0201 	bic.w	r2, r2, #1
 800c396:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c398:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c39c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3a0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c3a4:	e74a      	b.n	800c23c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c3a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3ac:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800c3ae:	b292      	uxth	r2, r2
 800c3b0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3b2:	b2d2      	uxtb	r2, r2
 800c3b4:	e7d3      	b.n	800c35e <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800c3b6:	2002      	movs	r0, #2
 800c3b8:	e740      	b.n	800c23c <HAL_I2C_Mem_Write+0x30>
 800c3ba:	bf00      	nop
 800c3bc:	80002000 	.word	0x80002000

0800c3c0 <HAL_I2C_Mem_Read>:
{
 800c3c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3ce:	2b20      	cmp	r3, #32
{
 800c3d0:	4616      	mov	r6, r2
 800c3d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c3d6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3da:	f040 80c9 	bne.w	800c570 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800c3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3e0:	b113      	cbz	r3, 800c3e8 <HAL_I2C_Mem_Read+0x28>
 800c3e2:	f1ba 0f00 	cmp.w	sl, #0
 800c3e6:	d106      	bne.n	800c3f6 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c3e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ec:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800c3ee:	2001      	movs	r0, #1
}
 800c3f0:	b003      	add	sp, #12
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800c3f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	f000 80b8 	beq.w	800c570 <HAL_I2C_Mem_Read+0x1b0>
 800c400:	f04f 0b01 	mov.w	fp, #1
 800c404:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c408:	f7fe fd6a 	bl	800aee0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c40c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800c40e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c410:	9000      	str	r0, [sp, #0]
 800c412:	465a      	mov	r2, fp
 800c414:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c418:	4620      	mov	r0, r4
 800c41a:	f7ff fe2f 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d1e5      	bne.n	800c3ee <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c422:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c424:	fa5f f289 	uxtb.w	r2, r9
 800c428:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800c42a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c42c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c430:	2340      	movs	r3, #64	; 0x40
 800c432:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800c436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c438:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800c43a:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c43c:	4b4d      	ldr	r3, [pc, #308]	; (800c574 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800c43e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	4603      	mov	r3, r0
 800c446:	4620      	mov	r0, r4
 800c448:	f7ff fd56 	bl	800bef8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c44c:	462a      	mov	r2, r5
 800c44e:	4641      	mov	r1, r8
 800c450:	4620      	mov	r0, r4
 800c452:	f7ff fde8 	bl	800c026 <I2C_WaitOnTXISFlagUntilTimeout>
 800c456:	bb20      	cbnz	r0, 800c4a2 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c458:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c45c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c45e:	d116      	bne.n	800c48e <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c460:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c462:	2200      	movs	r2, #0
 800c464:	2140      	movs	r1, #64	; 0x40
 800c466:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c468:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c46a:	4643      	mov	r3, r8
 800c46c:	9500      	str	r5, [sp, #0]
 800c46e:	f7ff fe05 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c472:	b9b0      	cbnz	r0, 800c4a2 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c474:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c476:	b29b      	uxth	r3, r3
 800c478:	2bff      	cmp	r3, #255	; 0xff
 800c47a:	4b3f      	ldr	r3, [pc, #252]	; (800c578 <HAL_I2C_Mem_Read+0x1b8>)
 800c47c:	d815      	bhi.n	800c4aa <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800c47e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800c486:	b292      	uxth	r2, r2
 800c488:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c48a:	b2d2      	uxtb	r2, r2
 800c48c:	e012      	b.n	800c4b4 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c48e:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c490:	4641      	mov	r1, r8
 800c492:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c494:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c496:	462a      	mov	r2, r5
 800c498:	f7ff fdc5 	bl	800c026 <I2C_WaitOnTXISFlagUntilTimeout>
 800c49c:	b908      	cbnz	r0, 800c4a2 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	e7de      	b.n	800c460 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800c4a8:	e7a1      	b.n	800c3ee <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4aa:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4b2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f7ff fd1e 	bl	800bef8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c4bc:	4643      	mov	r3, r8
 800c4be:	2200      	movs	r2, #0
 800c4c0:	2104      	movs	r1, #4
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	9500      	str	r5, [sp, #0]
 800c4c6:	f7ff fdd9 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d18f      	bne.n	800c3ee <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800c4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c4d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800c4da:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800c4dc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c4de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c4e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c4e2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800c4e4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800c4e6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	b1b3      	cbz	r3, 800c520 <HAL_I2C_Mem_Read+0x160>
 800c4f2:	b9aa      	cbnz	r2, 800c520 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c4f4:	4643      	mov	r3, r8
 800c4f6:	2180      	movs	r1, #128	; 0x80
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	9500      	str	r5, [sp, #0]
 800c4fc:	f7ff fdbe 	bl	800c07c <I2C_WaitOnFlagUntilTimeout>
 800c500:	2800      	cmp	r0, #0
 800c502:	f47f af74 	bne.w	800c3ee <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c508:	b29b      	uxth	r3, r3
 800c50a:	2bff      	cmp	r3, #255	; 0xff
 800c50c:	d928      	bls.n	800c560 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c50e:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c514:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c516:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c518:	4639      	mov	r1, r7
 800c51a:	4620      	mov	r0, r4
 800c51c:	f7ff fcec 	bl	800bef8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800c520:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c522:	b29b      	uxth	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1c9      	bne.n	800c4bc <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c528:	462a      	mov	r2, r5
 800c52a:	4641      	mov	r1, r8
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7ff fdd8 	bl	800c0e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c532:	2800      	cmp	r0, #0
 800c534:	f47f af5b 	bne.w	800c3ee <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	2120      	movs	r1, #32
 800c53c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800c544:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800c548:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800c54c:	f022 0201 	bic.w	r2, r2, #1
 800c550:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c552:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c556:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c55a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c55e:	e747      	b.n	800c3f0 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800c560:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c566:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800c568:	b292      	uxth	r2, r2
 800c56a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c56c:	b2d2      	uxtb	r2, r2
 800c56e:	e7d3      	b.n	800c518 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800c570:	2002      	movs	r0, #2
 800c572:	e73d      	b.n	800c3f0 <HAL_I2C_Mem_Read+0x30>
 800c574:	80002000 	.word	0x80002000
 800c578:	80002400 	.word	0x80002400

0800c57c <HAL_I2C_GetState>:
  return hi2c->State;
 800c57c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800c580:	4770      	bx	lr

0800c582 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800c582:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800c584:	4770      	bx	lr

0800c586 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c586:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c588:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c58c:	2b20      	cmp	r3, #32
 800c58e:	b2dc      	uxtb	r4, r3
 800c590:	d11d      	bne.n	800c5ce <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c592:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c596:	2b01      	cmp	r3, #1
 800c598:	d019      	beq.n	800c5ce <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c59a:	2324      	movs	r3, #36	; 0x24
 800c59c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c5a0:	6803      	ldr	r3, [r0, #0]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	f022 0201 	bic.w	r2, r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c5b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4311      	orrs	r1, r2
 800c5b6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	f042 0201 	orr.w	r2, r2, #1
 800c5be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5c0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c5c2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c5c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c5ca:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c5cc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c5ce:	2002      	movs	r0, #2
 800c5d0:	e7fc      	b.n	800c5cc <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800c5d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c5d2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	b2dc      	uxtb	r4, r3
 800c5dc:	d11c      	bne.n	800c618 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c5de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d018      	beq.n	800c618 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c5e6:	2324      	movs	r3, #36	; 0x24
 800c5e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c5ec:	6803      	ldr	r3, [r0, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	f022 0201 	bic.w	r2, r2, #1
 800c5f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c5f6:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c5f8:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c5fc:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c600:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	f042 0201 	orr.w	r2, r2, #1
 800c608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c60a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800c60c:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c610:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800c614:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c616:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800c618:	2002      	movs	r0, #2
 800c61a:	e7fc      	b.n	800c616 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800c61c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c61c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c61e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c620:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c624:	3284      	adds	r2, #132	; 0x84
 800c626:	1883      	adds	r3, r0, r2
{
 800c628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c62c:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c62e:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c632:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c634:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c638:	684c      	ldr	r4, [r1, #4]
 800c63a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c63e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c642:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c646:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c648:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c64a:	68c5      	ldr	r5, [r0, #12]
 800c64c:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800c650:	443d      	add	r5, r7
 800c652:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c656:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c658:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c65a:	68c5      	ldr	r5, [r0, #12]
 800c65c:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800c660:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c662:	689d      	ldr	r5, [r3, #8]
 800c664:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800c668:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c66a:	688d      	ldr	r5, [r1, #8]
 800c66c:	68c7      	ldr	r7, [r0, #12]
 800c66e:	3501      	adds	r5, #1
 800c670:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800c674:	443d      	add	r5, r7
 800c676:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c67a:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c67c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c67e:	691d      	ldr	r5, [r3, #16]
 800c680:	f025 0507 	bic.w	r5, r5, #7
 800c684:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c686:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c688:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c68a:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c68e:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c692:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c696:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800c69a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800c69e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800c6a2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800c6a6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c6a8:	695d      	ldr	r5, [r3, #20]
 800c6aa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800c6ae:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c6b0:	694d      	ldr	r5, [r1, #20]
 800c6b2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c6b4:	69dd      	ldr	r5, [r3, #28]
 800c6b6:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800c6ba:	f025 0507 	bic.w	r5, r5, #7
 800c6be:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c6c0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800c6c4:	433d      	orrs	r5, r7
 800c6c6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c6c8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c6ca:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c6cc:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c6d0:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c6d2:	b31e      	cbz	r6, 800c71c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c6d4:	2e01      	cmp	r6, #1
 800c6d6:	d023      	beq.n	800c720 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c6d8:	1eb5      	subs	r5, r6, #2
 800c6da:	2d02      	cmp	r5, #2
 800c6dc:	d922      	bls.n	800c724 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800c6de:	2e07      	cmp	r6, #7
 800c6e0:	bf0c      	ite	eq
 800c6e2:	2502      	moveq	r5, #2
 800c6e4:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c6e6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c6e8:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c6ec:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c6f0:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c6f2:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c6f4:	3407      	adds	r4, #7
 800c6f6:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c6f8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c6fa:	436e      	muls	r6, r5
 800c6fc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800c700:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c702:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800c704:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800c708:	f024 0407 	bic.w	r4, r4, #7
 800c70c:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c70e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c710:	5883      	ldr	r3, [r0, r2]
 800c712:	f043 0301 	orr.w	r3, r3, #1
 800c716:	5083      	str	r3, [r0, r2]
}
 800c718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800c71c:	2504      	movs	r5, #4
 800c71e:	e7e2      	b.n	800c6e6 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800c720:	2503      	movs	r5, #3
 800c722:	e7e0      	b.n	800c6e6 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800c724:	2502      	movs	r5, #2
 800c726:	e7de      	b.n	800c6e6 <LTDC_SetConfig+0xca>

0800c728 <HAL_LTDC_Init>:
{
 800c728:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800c72a:	4604      	mov	r4, r0
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d063      	beq.n	800c7f8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c730:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800c734:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c738:	b91b      	cbnz	r3, 800c742 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800c73a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800c73e:	f7f4 fc83 	bl	8001048 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c742:	2302      	movs	r3, #2
 800c744:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c750:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c752:	6999      	ldr	r1, [r3, #24]
 800c754:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800c758:	4302      	orrs	r2, r0
 800c75a:	68e0      	ldr	r0, [r4, #12]
 800c75c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c75e:	6920      	ldr	r0, [r4, #16]
 800c760:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c762:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c764:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c766:	4925      	ldr	r1, [pc, #148]	; (800c7fc <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c768:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	400a      	ands	r2, r1
 800c76e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c770:	689a      	ldr	r2, [r3, #8]
 800c772:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c776:	69a0      	ldr	r0, [r4, #24]
 800c778:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c77a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c77c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	400a      	ands	r2, r1
 800c782:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c784:	68da      	ldr	r2, [r3, #12]
 800c786:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c78a:	6a20      	ldr	r0, [r4, #32]
 800c78c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c78e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c790:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	400a      	ands	r2, r1
 800c796:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c798:	691a      	ldr	r2, [r3, #16]
 800c79a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800c79e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c7a0:	4302      	orrs	r2, r0
 800c7a2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c7a4:	695a      	ldr	r2, [r3, #20]
 800c7a6:	4011      	ands	r1, r2
 800c7a8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c7aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c7ac:	695a      	ldr	r2, [r3, #20]
 800c7ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c7b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c7b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c7ba:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c7be:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c7c2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c7c6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c7c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c7ca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800c7d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c7d8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c7da:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c7dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7de:	f042 0206 	orr.w	r2, r2, #6
 800c7e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800c7e4:	699a      	ldr	r2, [r3, #24]
 800c7e6:	f042 0201 	orr.w	r2, r2, #1
 800c7ea:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800c7ec:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c7ee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800c7f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c7f8:	2001      	movs	r0, #1
 800c7fa:	e7fc      	b.n	800c7f6 <HAL_LTDC_Init+0xce>
 800c7fc:	f000f800 	.word	0xf000f800

0800c800 <HAL_LTDC_ErrorCallback>:
 800c800:	4770      	bx	lr

0800c802 <HAL_LTDC_LineEventCallback>:
 800c802:	4770      	bx	lr

0800c804 <HAL_LTDC_ReloadEventCallback>:
 800c804:	4770      	bx	lr

0800c806 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c806:	6803      	ldr	r3, [r0, #0]
{
 800c808:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800c80a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800c80c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800c80e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800c810:	0772      	lsls	r2, r6, #29
 800c812:	d514      	bpl.n	800c83e <HAL_LTDC_IRQHandler+0x38>
 800c814:	0769      	lsls	r1, r5, #29
 800c816:	d512      	bpl.n	800c83e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800c818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c81a:	f022 0204 	bic.w	r2, r2, #4
 800c81e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800c820:	2204      	movs	r2, #4
 800c822:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800c824:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800c828:	f043 0301 	orr.w	r3, r3, #1
 800c82c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800c830:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c832:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c836:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c83a:	f7ff ffe1 	bl	800c800 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800c83e:	07b2      	lsls	r2, r6, #30
 800c840:	d516      	bpl.n	800c870 <HAL_LTDC_IRQHandler+0x6a>
 800c842:	07ab      	lsls	r3, r5, #30
 800c844:	d514      	bpl.n	800c870 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c846:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800c848:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800c84a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c84c:	f022 0202 	bic.w	r2, r2, #2
 800c850:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800c852:	2202      	movs	r2, #2
 800c854:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800c856:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c85a:	4313      	orrs	r3, r2
 800c85c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800c860:	2304      	movs	r3, #4
 800c862:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c866:	2300      	movs	r3, #0
 800c868:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800c86c:	f7ff ffc8 	bl	800c800 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800c870:	07f0      	lsls	r0, r6, #31
 800c872:	d510      	bpl.n	800c896 <HAL_LTDC_IRQHandler+0x90>
 800c874:	07e9      	lsls	r1, r5, #31
 800c876:	d50e      	bpl.n	800c896 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c878:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800c87a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800c87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c87e:	f022 0201 	bic.w	r2, r2, #1
 800c882:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800c884:	2201      	movs	r2, #1
 800c886:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800c888:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800c88a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c88e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800c892:	f7ff ffb6 	bl	800c802 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800c896:	0732      	lsls	r2, r6, #28
 800c898:	d511      	bpl.n	800c8be <HAL_LTDC_IRQHandler+0xb8>
 800c89a:	072b      	lsls	r3, r5, #28
 800c89c:	d50f      	bpl.n	800c8be <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c89e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c8a0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800c8a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a4:	f022 0208 	bic.w	r2, r2, #8
 800c8a8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800c8aa:	2208      	movs	r2, #8
 800c8ac:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800c8ba:	f7ff ffa3 	bl	800c804 <HAL_LTDC_ReloadEventCallback>
}
 800c8be:	bd70      	pop	{r4, r5, r6, pc}

0800c8c0 <HAL_LTDC_ConfigLayer>:
{
 800c8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800c8c4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800c8c8:	4606      	mov	r6, r0
 800c8ca:	460f      	mov	r7, r1
 800c8cc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	f04f 0002 	mov.w	r0, #2
 800c8d4:	d01f      	beq.n	800c916 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c8d6:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800c8d8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c8dc:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c8de:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c8e2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800c8e6:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c8ea:	3438      	adds	r4, #56	; 0x38
 800c8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8f8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	4662      	mov	r2, ip
 800c8fe:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c900:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c902:	f7ff fe8b 	bl	800c61c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c906:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800c908:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c90a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c90e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c912:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800c916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c91c <HAL_LTDC_SetPitch>:
{
 800c91c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800c91e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800c922:	2b01      	cmp	r3, #1
 800c924:	f04f 0302 	mov.w	r3, #2
 800c928:	d02c      	beq.n	800c984 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800c92a:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c92c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800c930:	fb04 0402 	mla	r4, r4, r2, r0
 800c934:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c936:	b33c      	cbz	r4, 800c988 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c938:	2c01      	cmp	r4, #1
 800c93a:	d027      	beq.n	800c98c <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c93c:	1ea5      	subs	r5, r4, #2
 800c93e:	429d      	cmp	r5, r3
 800c940:	d902      	bls.n	800c948 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800c942:	2c07      	cmp	r4, #7
 800c944:	bf18      	it	ne
 800c946:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800c948:	01d2      	lsls	r2, r2, #7
 800c94a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800c94c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800c94e:	3284      	adds	r2, #132	; 0x84
 800c950:	4422      	add	r2, r4
 800c952:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800c954:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800c958:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800c95c:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800c95e:	4c0c      	ldr	r4, [pc, #48]	; (800c990 <HAL_LTDC_SetPitch+0x74>)
 800c960:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c962:	f045 0501 	orr.w	r5, r5, #1
 800c966:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800c968:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800c96a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800c96e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800c970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c972:	f043 0301 	orr.w	r3, r3, #1
 800c976:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800c978:	2301      	movs	r3, #1
 800c97a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800c97e:	2300      	movs	r3, #0
 800c980:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800c984:	4618      	mov	r0, r3
 800c986:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800c988:	2304      	movs	r3, #4
 800c98a:	e7dd      	b.n	800c948 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e7db      	b.n	800c948 <HAL_LTDC_SetPitch+0x2c>
 800c990:	50001000 	.word	0x50001000

0800c994 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c998:	f7fe faa2 	bl	800aee0 <HAL_GetTick>
 800c99c:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c99e:	2c00      	cmp	r4, #0
 800c9a0:	d061      	beq.n	800ca66 <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800c9a2:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c9a4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800c9a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800c9b0:	68d3      	ldr	r3, [r2, #12]
 800c9b2:	f023 0301 	bic.w	r3, r3, #1
 800c9b6:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	07d2      	lsls	r2, r2, #31
 800c9be:	d448      	bmi.n	800ca52 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c9c0:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c9c8:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800c9cc:	430a      	orrs	r2, r1
 800c9ce:	69e1      	ldr	r1, [r4, #28]
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	6a21      	ldr	r1, [r4, #32]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	68a1      	ldr	r1, [r4, #8]
 800c9e4:	430a      	orrs	r2, r1
 800c9e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c9e8:	3901      	subs	r1, #1
 800c9ea:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c9ee:	6861      	ldr	r1, [r4, #4]
 800c9f0:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c9f4:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c9f6:	d103      	bne.n	800ca00 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800c9fe:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ca00:	2200      	movs	r2, #0
 800ca02:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ca04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	da04      	bge.n	800ca14 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ca0a:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ca0c:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ca0e:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800ca12:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ca14:	b292      	uxth	r2, r2
 800ca16:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ca18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	da25      	bge.n	800ca6a <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ca1e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ca20:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ca22:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800ca26:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ca28:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ca2a:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ca2e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ca32:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ca34:	f04f 0200 	mov.w	r2, #0
 800ca38:	d019      	beq.n	800ca6e <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ca3a:	b2c9      	uxtb	r1, r1
 800ca3c:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ca3e:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800ca40:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800ca42:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ca44:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800ca46:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800ca48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800ca4c:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800ca50:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ca52:	f7fe fa45 	bl	800aee0 <HAL_GetTick>
 800ca56:	1b40      	subs	r0, r0, r5
 800ca58:	2805      	cmp	r0, #5
 800ca5a:	d9ad      	bls.n	800c9b8 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ca5c:	2340      	movs	r3, #64	; 0x40
 800ca5e:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ca60:	2303      	movs	r3, #3
 800ca62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800ca66:	2001      	movs	r0, #1
 800ca68:	e7f2      	b.n	800ca50 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ca6a:	6a18      	ldr	r0, [r3, #32]
 800ca6c:	e7dd      	b.n	800ca2a <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800ca6e:	629a      	str	r2, [r3, #40]	; 0x28
 800ca70:	e7e5      	b.n	800ca3e <HAL_MDMA_Init+0xaa>

0800ca72 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800ca72:	b1d8      	cbz	r0, 800caac <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800ca74:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ca76:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800ca78:	68d3      	ldr	r3, [r2, #12]
 800ca7a:	f023 0301 	bic.w	r3, r3, #1
 800ca7e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800ca84:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800ca86:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800ca88:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800ca8a:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800ca8c:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800ca8e:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800ca90:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800ca92:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800ca94:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ca96:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ca98:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800ca9a:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ca9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800caa0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800caa4:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800caa8:	4618      	mov	r0, r3
 800caaa:	4770      	bx	lr
    return HAL_ERROR;
 800caac:	2001      	movs	r0, #1
}
 800caae:	4770      	bx	lr

0800cab0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cab0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cab2:	4d1c      	ldr	r5, [pc, #112]	; (800cb24 <HAL_PWREx_ConfigSupply+0x74>)
{
 800cab4:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800cab6:	68eb      	ldr	r3, [r5, #12]
 800cab8:	f003 0307 	and.w	r3, r3, #7
 800cabc:	2b06      	cmp	r3, #6
 800cabe:	d006      	beq.n	800cace <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cac0:	68e8      	ldr	r0, [r5, #12]
 800cac2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cac6:	1b00      	subs	r0, r0, r4
 800cac8:	bf18      	it	ne
 800caca:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cace:	68eb      	ldr	r3, [r5, #12]
 800cad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cad4:	4303      	orrs	r3, r0
 800cad6:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800cad8:	f7fe fa02 	bl	800aee0 <HAL_GetTick>
 800cadc:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cade:	686b      	ldr	r3, [r5, #4]
 800cae0:	049a      	lsls	r2, r3, #18
 800cae2:	d508      	bpl.n	800caf6 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800cae4:	f1a4 031d 	sub.w	r3, r4, #29
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d90c      	bls.n	800cb06 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800caec:	3c2d      	subs	r4, #45	; 0x2d
 800caee:	2c01      	cmp	r4, #1
 800caf0:	d909      	bls.n	800cb06 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800caf2:	2000      	movs	r0, #0
 800caf4:	e7ea      	b.n	800cacc <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800caf6:	f7fe f9f3 	bl	800aee0 <HAL_GetTick>
 800cafa:	1b80      	subs	r0, r0, r6
 800cafc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cb00:	d9ed      	bls.n	800cade <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800cb02:	2001      	movs	r0, #1
 800cb04:	e7e2      	b.n	800cacc <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800cb06:	f7fe f9eb 	bl	800aee0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cb0a:	4d06      	ldr	r5, [pc, #24]	; (800cb24 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800cb0c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800cb0e:	68eb      	ldr	r3, [r5, #12]
 800cb10:	03db      	lsls	r3, r3, #15
 800cb12:	d4ee      	bmi.n	800caf2 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cb14:	f7fe f9e4 	bl	800aee0 <HAL_GetTick>
 800cb18:	1b00      	subs	r0, r0, r4
 800cb1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cb1e:	d9f6      	bls.n	800cb0e <HAL_PWREx_ConfigSupply+0x5e>
 800cb20:	e7ef      	b.n	800cb02 <HAL_PWREx_ConfigSupply+0x52>
 800cb22:	bf00      	nop
 800cb24:	58024800 	.word	0x58024800

0800cb28 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800cb28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800cb2c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800cb2e:	b136      	cbz	r6, 800cb3e <QSPI_Config+0x16>
 800cb30:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800cb34:	d003      	beq.n	800cb3e <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cb36:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800cb38:	6804      	ldr	r4, [r0, #0]
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cb3e:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb42:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800cb46:	f1b9 0f00 	cmp.w	r9, #0
 800cb4a:	d04f      	beq.n	800cbec <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb4c:	694b      	ldr	r3, [r1, #20]
 800cb4e:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800cb52:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb54:	f8d1 a000 	ldr.w	sl, [r1]
 800cb58:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800cb5c:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800cb60:	ea49 0902 	orr.w	r9, r9, r2
 800cb64:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cb68:	b335      	cbz	r5, 800cbb8 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb6a:	688b      	ldr	r3, [r1, #8]
 800cb6c:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb70:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cb72:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cb74:	b19f      	cbz	r7, 800cb9e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb76:	ea4a 0307 	orr.w	r3, sl, r7
 800cb7a:	4323      	orrs	r3, r4
 800cb7c:	68cc      	ldr	r4, [r1, #12]
 800cb7e:	ea43 0308 	orr.w	r3, r3, r8
 800cb82:	ea43 030e 	orr.w	r3, r3, lr
 800cb86:	4333      	orrs	r3, r6
 800cb88:	4323      	orrs	r3, r4
 800cb8a:	ea43 030c 	orr.w	r3, r3, ip
 800cb8e:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb90:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb94:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb96:	d00d      	beq.n	800cbb4 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cb98:	684b      	ldr	r3, [r1, #4]
 800cb9a:	6183      	str	r3, [r0, #24]
 800cb9c:	e00a      	b.n	800cbb4 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb9e:	ea4a 0304 	orr.w	r3, sl, r4
 800cba2:	ea43 0308 	orr.w	r3, r3, r8
 800cba6:	ea43 030e 	orr.w	r3, r3, lr
 800cbaa:	4333      	orrs	r3, r6
 800cbac:	ea43 030c 	orr.w	r3, r3, ip
 800cbb0:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbb2:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800cbb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cbb8:	b16f      	cbz	r7, 800cbd6 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbba:	ea4a 0307 	orr.w	r3, sl, r7
 800cbbe:	4323      	orrs	r3, r4
 800cbc0:	68cc      	ldr	r4, [r1, #12]
 800cbc2:	ea43 0308 	orr.w	r3, r3, r8
 800cbc6:	ea43 030e 	orr.w	r3, r3, lr
 800cbca:	4323      	orrs	r3, r4
 800cbcc:	ea43 030c 	orr.w	r3, r3, ip
 800cbd0:	ea43 0309 	orr.w	r3, r3, r9
 800cbd4:	e7dc      	b.n	800cb90 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbd6:	ea4a 0304 	orr.w	r3, sl, r4
 800cbda:	ea43 0308 	orr.w	r3, r3, r8
 800cbde:	ea43 030e 	orr.w	r3, r3, lr
 800cbe2:	ea43 030c 	orr.w	r3, r3, ip
 800cbe6:	ea43 0309 	orr.w	r3, r3, r9
 800cbea:	e7e2      	b.n	800cbb2 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800cbec:	b365      	cbz	r5, 800cc48 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cbee:	6804      	ldr	r4, [r0, #0]
 800cbf0:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbf2:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800cbf4:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cbf6:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cbfa:	694e      	ldr	r6, [r1, #20]
 800cbfc:	ea43 0502 	orr.w	r5, r3, r2
 800cc00:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800cc04:	04b6      	lsls	r6, r6, #18
 800cc06:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc0a:	b1a7      	cbz	r7, 800cc36 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc0c:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cc0e:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc12:	ea40 0008 	orr.w	r0, r0, r8
 800cc16:	ea43 0300 	orr.w	r3, r3, r0
 800cc1a:	68c8      	ldr	r0, [r1, #12]
 800cc1c:	ea43 030c 	orr.w	r3, r3, ip
 800cc20:	ea43 0300 	orr.w	r3, r3, r0
 800cc24:	ea43 0306 	orr.w	r3, r3, r6
 800cc28:	ea43 0305 	orr.w	r3, r3, r5
 800cc2c:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cc2e:	d0c1      	beq.n	800cbb4 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cc30:	684b      	ldr	r3, [r1, #4]
 800cc32:	61a3      	str	r3, [r4, #24]
 800cc34:	e7be      	b.n	800cbb4 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc36:	ea40 0008 	orr.w	r0, r0, r8
 800cc3a:	4303      	orrs	r3, r0
 800cc3c:	ea43 030c 	orr.w	r3, r3, ip
 800cc40:	4333      	orrs	r3, r6
 800cc42:	432b      	orrs	r3, r5
 800cc44:	6163      	str	r3, [r4, #20]
 800cc46:	e7b5      	b.n	800cbb4 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800cc48:	b17f      	cbz	r7, 800cc6a <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc4a:	ea46 0307 	orr.w	r3, r6, r7
 800cc4e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800cc50:	6800      	ldr	r0, [r0, #0]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	4323      	orrs	r3, r4
 800cc56:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800cc58:	4323      	orrs	r3, r4
 800cc5a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800cc5c:	4323      	orrs	r3, r4
 800cc5e:	68cc      	ldr	r4, [r1, #12]
 800cc60:	4323      	orrs	r3, r4
 800cc62:	694c      	ldr	r4, [r1, #20]
 800cc64:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800cc68:	e792      	b.n	800cb90 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d0a2      	beq.n	800cbb4 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cc6e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800cc70:	6800      	ldr	r0, [r0, #0]
 800cc72:	4333      	orrs	r3, r6
 800cc74:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800cc76:	431a      	orrs	r2, r3
 800cc78:	694b      	ldr	r3, [r1, #20]
 800cc7a:	4332      	orrs	r2, r6
 800cc7c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800cc7e:	4332      	orrs	r2, r6
 800cc80:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800cc84:	6142      	str	r2, [r0, #20]
}
 800cc86:	e795      	b.n	800cbb4 <QSPI_Config+0x8c>

0800cc88 <QSPI_WaitFlagStateUntilTimeout>:
{
 800cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cc90:	4604      	mov	r4, r0
 800cc92:	460e      	mov	r6, r1
 800cc94:	4615      	mov	r5, r2
 800cc96:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800cc98:	6822      	ldr	r2, [r4, #0]
 800cc9a:	6893      	ldr	r3, [r2, #8]
 800cc9c:	4233      	tst	r3, r6
 800cc9e:	bf14      	ite	ne
 800cca0:	2301      	movne	r3, #1
 800cca2:	2300      	moveq	r3, #0
 800cca4:	42ab      	cmp	r3, r5
 800cca6:	d101      	bne.n	800ccac <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800cca8:	2000      	movs	r0, #0
 800ccaa:	e012      	b.n	800ccd2 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800ccac:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ccb0:	d0f3      	beq.n	800cc9a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccb2:	f7fe f915 	bl	800aee0 <HAL_GetTick>
 800ccb6:	1bc0      	subs	r0, r0, r7
 800ccb8:	4540      	cmp	r0, r8
 800ccba:	d802      	bhi.n	800ccc2 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800ccbc:	f1b8 0f00 	cmp.w	r8, #0
 800ccc0:	d1ea      	bne.n	800cc98 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ccc2:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ccc4:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800ccc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800ccca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cccc:	f043 0301 	orr.w	r3, r3, #1
 800ccd0:	6463      	str	r3, [r4, #68]	; 0x44
}
 800ccd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ccd8 <HAL_QSPI_Init>:
{
 800ccd8:	b530      	push	{r4, r5, lr}
 800ccda:	4604      	mov	r4, r0
 800ccdc:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800ccde:	f7fe f8ff 	bl	800aee0 <HAL_GetTick>
 800cce2:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800cce4:	2c00      	cmp	r4, #0
 800cce6:	d040      	beq.n	800cd6a <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800cce8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ccec:	b93a      	cbnz	r2, 800ccfe <HAL_QSPI_Init+0x26>
 800ccee:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f7f4 f9e7 	bl	80010c4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800ccf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccfa:	9b03      	ldr	r3, [sp, #12]
 800ccfc:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	68a1      	ldr	r1, [r4, #8]
 800cd02:	6802      	ldr	r2, [r0, #0]
 800cd04:	3901      	subs	r1, #1
 800cd06:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800cd0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cd0e:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800cd10:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800cd12:	4620      	mov	r0, r4
 800cd14:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800cd16:	9200      	str	r2, [sp, #0]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f7ff ffb5 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800cd1e:	bb10      	cbnz	r0, 800cd66 <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800cd20:	6822      	ldr	r2, [r4, #0]
 800cd22:	69e5      	ldr	r5, [r4, #28]
 800cd24:	68e3      	ldr	r3, [r4, #12]
 800cd26:	6811      	ldr	r1, [r2, #0]
 800cd28:	432b      	orrs	r3, r5
 800cd2a:	6a25      	ldr	r5, [r4, #32]
 800cd2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800cd30:	432b      	orrs	r3, r5
 800cd32:	6865      	ldr	r5, [r4, #4]
 800cd34:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800cd38:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800cd3c:	430b      	orrs	r3, r1
 800cd3e:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800cd40:	6855      	ldr	r5, [r2, #4]
 800cd42:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800cd46:	430b      	orrs	r3, r1
 800cd48:	6921      	ldr	r1, [r4, #16]
 800cd4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cd4e:	4908      	ldr	r1, [pc, #32]	; (800cd70 <HAL_QSPI_Init+0x98>)
 800cd50:	4029      	ands	r1, r5
 800cd52:	430b      	orrs	r3, r1
 800cd54:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800cd56:	6813      	ldr	r3, [r2, #0]
 800cd58:	f043 0301 	orr.w	r3, r3, #1
 800cd5c:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800cd5e:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cd60:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800cd62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800cd66:	b005      	add	sp, #20
 800cd68:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800cd6a:	2001      	movs	r0, #1
 800cd6c:	e7fb      	b.n	800cd66 <HAL_QSPI_Init+0x8e>
 800cd6e:	bf00      	nop
 800cd70:	ffe0f8fe 	.word	0xffe0f8fe

0800cd74 <HAL_QSPI_Command>:
{
 800cd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd78:	4604      	mov	r4, r0
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	4617      	mov	r7, r2
 800cd7e:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800cd80:	f7fe f8ae 	bl	800aee0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cd84:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cd88:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800cd8a:	2a01      	cmp	r2, #1
 800cd8c:	d033      	beq.n	800cdf6 <HAL_QSPI_Command+0x82>
 800cd8e:	2201      	movs	r2, #1
 800cd90:	2602      	movs	r6, #2
 800cd92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cd96:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cd9a:	2a01      	cmp	r2, #1
 800cd9c:	fa5f f882 	uxtb.w	r8, r2
 800cda0:	d127      	bne.n	800cdf2 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cda2:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cda4:	9003      	str	r0, [sp, #12]
 800cda6:	2120      	movs	r1, #32
 800cda8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cdaa:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cdac:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800cdae:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cdb2:	f7ff ff69 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	b9a0      	cbnz	r0, 800cde4 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800cdba:	4602      	mov	r2, r0
 800cdbc:	4649      	mov	r1, r9
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7ff feb2 	bl	800cb28 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800cdc4:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	b94a      	cbnz	r2, 800cde0 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cdcc:	4642      	mov	r2, r8
 800cdce:	4631      	mov	r1, r6
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	9700      	str	r7, [sp, #0]
 800cdd4:	f7ff ff58 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800cdd8:	4605      	mov	r5, r0
 800cdda:	b918      	cbnz	r0, 800cde4 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cde0:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cde4:	2300      	movs	r3, #0
 800cde6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cdea:	4628      	mov	r0, r5
 800cdec:	b005      	add	sp, #20
 800cdee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800cdf2:	4635      	mov	r5, r6
 800cdf4:	e7f6      	b.n	800cde4 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800cdf6:	2502      	movs	r5, #2
 800cdf8:	e7f7      	b.n	800cdea <HAL_QSPI_Command+0x76>

0800cdfa <HAL_QSPI_Transmit>:
{
 800cdfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	b085      	sub	sp, #20
 800ce00:	4616      	mov	r6, r2
 800ce02:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ce04:	f7fe f86c 	bl	800aee0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ce08:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800ce0c:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800ce0e:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800ce10:	2a01      	cmp	r2, #1
 800ce12:	d049      	beq.n	800cea8 <HAL_QSPI_Transmit+0xae>
 800ce14:	2201      	movs	r2, #1
 800ce16:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ce1a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ce1e:	2a01      	cmp	r2, #1
 800ce20:	b2d0      	uxtb	r0, r2
 800ce22:	d13f      	bne.n	800cea4 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ce24:	2200      	movs	r2, #0
 800ce26:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800ce28:	2f00      	cmp	r7, #0
 800ce2a:	d036      	beq.n	800ce9a <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800ce2c:	2212      	movs	r2, #18
 800ce2e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce32:	692a      	ldr	r2, [r5, #16]
 800ce34:	3201      	adds	r2, #1
 800ce36:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce38:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800ce3a:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ce3c:	3201      	adds	r2, #1
 800ce3e:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ce40:	696a      	ldr	r2, [r5, #20]
 800ce42:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800ce46:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800ce48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce4a:	b98a      	cbnz	r2, 800ce70 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	2102      	movs	r1, #2
 800ce50:	4620      	mov	r0, r4
 800ce52:	9600      	str	r6, [sp, #0]
 800ce54:	f7ff ff18 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800ce58:	b910      	cbnz	r0, 800ce60 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ce60:	2301      	movs	r3, #1
 800ce62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800ce66:	2300      	movs	r3, #0
 800ce68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800ce6c:	b005      	add	sp, #20
 800ce6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ce70:	2201      	movs	r2, #1
 800ce72:	2104      	movs	r1, #4
 800ce74:	4620      	mov	r0, r4
 800ce76:	9600      	str	r6, [sp, #0]
 800ce78:	9303      	str	r3, [sp, #12]
 800ce7a:	f7ff ff05 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	d1ee      	bne.n	800ce60 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ce82:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800ce84:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ce86:	7812      	ldrb	r2, [r2, #0]
 800ce88:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800ce8c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ce8e:	3201      	adds	r2, #1
 800ce90:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800ce92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ce94:	3a01      	subs	r2, #1
 800ce96:	62e2      	str	r2, [r4, #44]	; 0x2c
 800ce98:	e7d6      	b.n	800ce48 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ce9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ce9c:	f043 0308 	orr.w	r3, r3, #8
 800cea0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800cea2:	e7e0      	b.n	800ce66 <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800cea4:	2002      	movs	r0, #2
 800cea6:	e7de      	b.n	800ce66 <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800cea8:	2002      	movs	r0, #2
 800ceaa:	e7df      	b.n	800ce6c <HAL_QSPI_Transmit+0x72>

0800ceac <HAL_QSPI_Receive>:
{
 800ceac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceae:	4604      	mov	r4, r0
 800ceb0:	b085      	sub	sp, #20
 800ceb2:	4616      	mov	r6, r2
 800ceb4:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800ceb6:	f7fe f813 	bl	800aee0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ceba:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800cebc:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800cebe:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800cec2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800cec6:	2a01      	cmp	r2, #1
 800cec8:	d04d      	beq.n	800cf66 <HAL_QSPI_Receive+0xba>
 800ceca:	2201      	movs	r2, #1
 800cecc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ced0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800ced4:	2a01      	cmp	r2, #1
 800ced6:	b2d0      	uxtb	r0, r2
 800ced8:	d143      	bne.n	800cf62 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ceda:	2200      	movs	r2, #0
 800cedc:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800cede:	2f00      	cmp	r7, #0
 800cee0:	d03a      	beq.n	800cf58 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800cee2:	2222      	movs	r2, #34	; 0x22
 800cee4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800cee8:	692a      	ldr	r2, [r5, #16]
 800ceea:	3201      	adds	r2, #1
 800ceec:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ceee:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800cef0:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800cef2:	3201      	adds	r2, #1
 800cef4:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800cef6:	6969      	ldr	r1, [r5, #20]
 800cef8:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800cefc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800cf00:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800cf02:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800cf06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf08:	b98a      	cbnz	r2, 800cf2e <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	2102      	movs	r1, #2
 800cf0e:	4620      	mov	r0, r4
 800cf10:	9600      	str	r6, [sp, #0]
 800cf12:	f7ff feb9 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800cf16:	b910      	cbnz	r0, 800cf1e <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cf24:	2300      	movs	r3, #0
 800cf26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cf2a:	b005      	add	sp, #20
 800cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800cf2e:	2201      	movs	r2, #1
 800cf30:	2106      	movs	r1, #6
 800cf32:	4620      	mov	r0, r4
 800cf34:	9600      	str	r6, [sp, #0]
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	f7ff fea6 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d1ee      	bne.n	800cf1e <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cf40:	f895 1020 	ldrb.w	r1, [r5, #32]
 800cf44:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800cf46:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800cf48:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800cf4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cf4c:	3201      	adds	r2, #1
 800cf4e:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800cf50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800cf52:	3a01      	subs	r2, #1
 800cf54:	63a2      	str	r2, [r4, #56]	; 0x38
 800cf56:	e7d6      	b.n	800cf06 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800cf58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf5a:	f043 0308 	orr.w	r3, r3, #8
 800cf5e:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800cf60:	e7e0      	b.n	800cf24 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800cf62:	2002      	movs	r0, #2
 800cf64:	e7de      	b.n	800cf24 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800cf66:	2002      	movs	r0, #2
 800cf68:	e7df      	b.n	800cf2a <HAL_QSPI_Receive+0x7e>

0800cf6a <HAL_QSPI_AutoPolling>:
{
 800cf6a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cf6e:	4604      	mov	r4, r0
 800cf70:	4615      	mov	r5, r2
 800cf72:	461e      	mov	r6, r3
 800cf74:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800cf76:	f7fd ffb3 	bl	800aee0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800cf7a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800cf7e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800cf80:	2a01      	cmp	r2, #1
 800cf82:	d040      	beq.n	800d006 <HAL_QSPI_AutoPolling+0x9c>
 800cf84:	2201      	movs	r2, #1
 800cf86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800cf8a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800cf8e:	2a01      	cmp	r2, #1
 800cf90:	b2d7      	uxtb	r7, r2
 800cf92:	d136      	bne.n	800d002 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cf94:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf96:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cf98:	9003      	str	r0, [sp, #12]
 800cf9a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800cf9c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cf9e:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800cfa0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800cfa4:	2120      	movs	r1, #32
 800cfa6:	f7ff fe6f 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800cfaa:	bb20      	cbnz	r0, 800cff6 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cfac:	6821      	ldr	r1, [r4, #0]
 800cfae:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cfb0:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800cfb2:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800cfb4:	686a      	ldr	r2, [r5, #4]
 800cfb6:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800cfb8:	68aa      	ldr	r2, [r5, #8]
 800cfba:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cfbc:	680a      	ldr	r2, [r1, #0]
 800cfbe:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800cfc2:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cfc4:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800cfc6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800cfca:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cfcc:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800cfce:	68ea      	ldr	r2, [r5, #12]
 800cfd0:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800cfd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cfd8:	f7ff fda6 	bl	800cb28 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	463a      	mov	r2, r7
 800cfe0:	2108      	movs	r1, #8
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	9600      	str	r6, [sp, #0]
 800cfe6:	f7ff fe4f 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800cfea:	b920      	cbnz	r0, 800cff6 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	2208      	movs	r2, #8
 800cff0:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800cff2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800cff6:	2300      	movs	r3, #0
 800cff8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800cffc:	b004      	add	sp, #16
 800cffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800d002:	2002      	movs	r0, #2
 800d004:	e7f7      	b.n	800cff6 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800d006:	2002      	movs	r0, #2
 800d008:	e7f8      	b.n	800cffc <HAL_QSPI_AutoPolling+0x92>

0800d00a <HAL_QSPI_MemoryMapped>:
{
 800d00a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d00c:	4604      	mov	r4, r0
 800d00e:	4616      	mov	r6, r2
 800d010:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800d012:	f7fd ff65 	bl	800aee0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800d016:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800d01a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800d01c:	2a01      	cmp	r2, #1
 800d01e:	d033      	beq.n	800d088 <HAL_QSPI_MemoryMapped+0x7e>
 800d020:	2201      	movs	r2, #1
 800d022:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800d026:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800d02a:	2a01      	cmp	r2, #1
 800d02c:	d12a      	bne.n	800d084 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d02e:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d030:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d032:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800d034:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800d036:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800d03a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d03c:	9100      	str	r1, [sp, #0]
 800d03e:	2120      	movs	r1, #32
 800d040:	f7ff fe22 	bl	800cc88 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800d044:	4605      	mov	r5, r0
 800d046:	b9b8      	cbnz	r0, 800d078 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	6872      	ldr	r2, [r6, #4]
 800d04c:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d04e:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800d050:	f020 0008 	bic.w	r0, r0, #8
 800d054:	ea40 0002 	orr.w	r0, r0, r2
 800d058:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800d05a:	d107      	bne.n	800d06c <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800d05c:	6832      	ldr	r2, [r6, #0]
 800d05e:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800d060:	2210      	movs	r2, #16
 800d062:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d06a:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800d06c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800d070:	4639      	mov	r1, r7
 800d072:	4620      	mov	r0, r4
 800d074:	f7ff fd58 	bl	800cb28 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800d078:	2300      	movs	r3, #0
 800d07a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800d07e:	4628      	mov	r0, r5
 800d080:	b003      	add	sp, #12
 800d082:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800d084:	2502      	movs	r5, #2
 800d086:	e7f7      	b.n	800d078 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800d088:	2502      	movs	r5, #2
 800d08a:	e7f8      	b.n	800d07e <HAL_QSPI_MemoryMapped+0x74>

0800d08c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d08e:	4604      	mov	r4, r0
 800d090:	b908      	cbnz	r0, 800d096 <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800d092:	2001      	movs	r0, #1
 800d094:	e08b      	b.n	800d1ae <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d096:	6803      	ldr	r3, [r0, #0]
 800d098:	07df      	lsls	r7, r3, #31
 800d09a:	d45e      	bmi.n	800d15a <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	079e      	lsls	r6, r3, #30
 800d0a0:	f100 80af 	bmi.w	800d202 <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	06da      	lsls	r2, r3, #27
 800d0a8:	d527      	bpl.n	800d0fa <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0aa:	4b9e      	ldr	r3, [pc, #632]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d0ac:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d0ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0b0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d0b4:	2a08      	cmp	r2, #8
 800d0b6:	d007      	beq.n	800d0c8 <HAL_RCC_OscConfig+0x3c>
 800d0b8:	2a18      	cmp	r2, #24
 800d0ba:	f040 8107 	bne.w	800d2cc <HAL_RCC_OscConfig+0x240>
 800d0be:	f001 0203 	and.w	r2, r1, #3
 800d0c2:	2a01      	cmp	r2, #1
 800d0c4:	f040 8102 	bne.w	800d2cc <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	05db      	lsls	r3, r3, #23
 800d0cc:	d502      	bpl.n	800d0d4 <HAL_RCC_OscConfig+0x48>
 800d0ce:	69e3      	ldr	r3, [r4, #28]
 800d0d0:	2b80      	cmp	r3, #128	; 0x80
 800d0d2:	d1de      	bne.n	800d092 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d0d4:	f7fd ff1c 	bl	800af10 <HAL_GetREVID>
 800d0d8:	f241 0303 	movw	r3, #4099	; 0x1003
 800d0dc:	6a21      	ldr	r1, [r4, #32]
 800d0de:	4298      	cmp	r0, r3
 800d0e0:	4b90      	ldr	r3, [pc, #576]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d0e2:	f200 80ec 	bhi.w	800d2be <HAL_RCC_OscConfig+0x232>
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	2920      	cmp	r1, #32
 800d0ea:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800d0ee:	bf0c      	ite	eq
 800d0f0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800d0f4:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800d0f8:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	0719      	lsls	r1, r3, #28
 800d0fe:	f100 8127 	bmi.w	800d350 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	069a      	lsls	r2, r3, #26
 800d106:	f100 8148 	bmi.w	800d39a <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	075d      	lsls	r5, r3, #29
 800d10e:	d51e      	bpl.n	800d14e <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800d110:	4d85      	ldr	r5, [pc, #532]	; (800d328 <HAL_RCC_OscConfig+0x29c>)
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d118:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800d11a:	f7fd fee1 	bl	800aee0 <HAL_GetTick>
 800d11e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	05da      	lsls	r2, r3, #23
 800d124:	f140 815e 	bpl.w	800d3e4 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d128:	68a3      	ldr	r3, [r4, #8]
 800d12a:	4d7e      	ldr	r5, [pc, #504]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	f040 8160 	bne.w	800d3f2 <HAL_RCC_OscConfig+0x366>
 800d132:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d134:	f043 0301 	orr.w	r3, r3, #1
 800d138:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d13a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d13e:	f7fd fecf 	bl	800aee0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d142:	4e78      	ldr	r6, [pc, #480]	; (800d324 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 800d144:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d146:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d148:	079b      	lsls	r3, r3, #30
 800d14a:	f140 8178 	bpl.w	800d43e <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d14e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d150:	2800      	cmp	r0, #0
 800d152:	f040 817b 	bne.w	800d44c <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800d156:	2000      	movs	r0, #0
 800d158:	e029      	b.n	800d1ae <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d15a:	4b72      	ldr	r3, [pc, #456]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d15c:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d15e:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d160:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d164:	2a10      	cmp	r2, #16
 800d166:	d005      	beq.n	800d174 <HAL_RCC_OscConfig+0xe8>
 800d168:	2a18      	cmp	r2, #24
 800d16a:	d10a      	bne.n	800d182 <HAL_RCC_OscConfig+0xf6>
 800d16c:	f001 0203 	and.w	r2, r1, #3
 800d170:	2a02      	cmp	r2, #2
 800d172:	d106      	bne.n	800d182 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	039d      	lsls	r5, r3, #14
 800d178:	d590      	bpl.n	800d09c <HAL_RCC_OscConfig+0x10>
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d18d      	bne.n	800d09c <HAL_RCC_OscConfig+0x10>
 800d180:	e787      	b.n	800d092 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d182:	6862      	ldr	r2, [r4, #4]
 800d184:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d188:	d112      	bne.n	800d1b0 <HAL_RCC_OscConfig+0x124>
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d190:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d192:	f7fd fea5 	bl	800aee0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d196:	4e63      	ldr	r6, [pc, #396]	; (800d324 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 800d198:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d19a:	6833      	ldr	r3, [r6, #0]
 800d19c:	0398      	lsls	r0, r3, #14
 800d19e:	f53f af7d 	bmi.w	800d09c <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1a2:	f7fd fe9d 	bl	800aee0 <HAL_GetTick>
 800d1a6:	1b40      	subs	r0, r0, r5
 800d1a8:	2864      	cmp	r0, #100	; 0x64
 800d1aa:	d9f6      	bls.n	800d19a <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800d1ac:	2003      	movs	r0, #3
}
 800d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1b0:	4d5c      	ldr	r5, [pc, #368]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d1b2:	682b      	ldr	r3, [r5, #0]
 800d1b4:	b99a      	cbnz	r2, 800d1de <HAL_RCC_OscConfig+0x152>
 800d1b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	682b      	ldr	r3, [r5, #0]
 800d1be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d1c4:	f7fd fe8c 	bl	800aee0 <HAL_GetTick>
 800d1c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	0399      	lsls	r1, r3, #14
 800d1ce:	f57f af65 	bpl.w	800d09c <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d1d2:	f7fd fe85 	bl	800aee0 <HAL_GetTick>
 800d1d6:	1b80      	subs	r0, r0, r6
 800d1d8:	2864      	cmp	r0, #100	; 0x64
 800d1da:	d9f6      	bls.n	800d1ca <HAL_RCC_OscConfig+0x13e>
 800d1dc:	e7e6      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1de:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800d1e2:	d107      	bne.n	800d1f4 <HAL_RCC_OscConfig+0x168>
 800d1e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d1e8:	602b      	str	r3, [r5, #0]
 800d1ea:	682b      	ldr	r3, [r5, #0]
 800d1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	e7ce      	b.n	800d192 <HAL_RCC_OscConfig+0x106>
 800d1f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d200:	e7f6      	b.n	800d1f0 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d202:	4b48      	ldr	r3, [pc, #288]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d204:	68e1      	ldr	r1, [r4, #12]
 800d206:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d208:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d20a:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800d20e:	d003      	beq.n	800d218 <HAL_RCC_OscConfig+0x18c>
 800d210:	2a18      	cmp	r2, #24
 800d212:	d12b      	bne.n	800d26c <HAL_RCC_OscConfig+0x1e0>
 800d214:	0782      	lsls	r2, r0, #30
 800d216:	d129      	bne.n	800d26c <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	075b      	lsls	r3, r3, #29
 800d21c:	d502      	bpl.n	800d224 <HAL_RCC_OscConfig+0x198>
 800d21e:	2900      	cmp	r1, #0
 800d220:	f43f af37 	beq.w	800d092 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d224:	4d3f      	ldr	r5, [pc, #252]	; (800d324 <HAL_RCC_OscConfig+0x298>)
 800d226:	682a      	ldr	r2, [r5, #0]
 800d228:	f022 0219 	bic.w	r2, r2, #25
 800d22c:	430a      	orrs	r2, r1
 800d22e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800d230:	f7fd fe56 	bl	800aee0 <HAL_GetTick>
 800d234:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d236:	682b      	ldr	r3, [r5, #0]
 800d238:	075f      	lsls	r7, r3, #29
 800d23a:	d511      	bpl.n	800d260 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d23c:	f7fd fe68 	bl	800af10 <HAL_GetREVID>
 800d240:	f241 0303 	movw	r3, #4099	; 0x1003
 800d244:	6922      	ldr	r2, [r4, #16]
 800d246:	4298      	cmp	r0, r3
 800d248:	686b      	ldr	r3, [r5, #4]
 800d24a:	d822      	bhi.n	800d292 <HAL_RCC_OscConfig+0x206>
 800d24c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800d250:	2a40      	cmp	r2, #64	; 0x40
 800d252:	bf0c      	ite	eq
 800d254:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800d258:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800d25c:	606b      	str	r3, [r5, #4]
 800d25e:	e721      	b.n	800d0a4 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d260:	f7fd fe3e 	bl	800aee0 <HAL_GetTick>
 800d264:	1b80      	subs	r0, r0, r6
 800d266:	2802      	cmp	r0, #2
 800d268:	d9e5      	bls.n	800d236 <HAL_RCC_OscConfig+0x1aa>
 800d26a:	e79f      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d26c:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d26e:	b1a9      	cbz	r1, 800d29c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d270:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d274:	4d2b      	ldr	r5, [pc, #172]	; (800d324 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d276:	430a      	orrs	r2, r1
 800d278:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d27a:	f7fd fe31 	bl	800aee0 <HAL_GetTick>
 800d27e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	0758      	lsls	r0, r3, #29
 800d284:	d4da      	bmi.n	800d23c <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d286:	f7fd fe2b 	bl	800aee0 <HAL_GetTick>
 800d28a:	1b80      	subs	r0, r0, r6
 800d28c:	2802      	cmp	r0, #2
 800d28e:	d9f7      	bls.n	800d280 <HAL_RCC_OscConfig+0x1f4>
 800d290:	e78c      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d292:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d296:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d29a:	e7df      	b.n	800d25c <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 800d29c:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d2a0:	4e20      	ldr	r6, [pc, #128]	; (800d324 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800d2a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d2a4:	f7fd fe1c 	bl	800aee0 <HAL_GetTick>
 800d2a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d2aa:	6833      	ldr	r3, [r6, #0]
 800d2ac:	0759      	lsls	r1, r3, #29
 800d2ae:	f57f aef9 	bpl.w	800d0a4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d2b2:	f7fd fe15 	bl	800aee0 <HAL_GetTick>
 800d2b6:	1b40      	subs	r0, r0, r5
 800d2b8:	2802      	cmp	r0, #2
 800d2ba:	d9f6      	bls.n	800d2aa <HAL_RCC_OscConfig+0x21e>
 800d2bc:	e776      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800d2c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d2c8:	60da      	str	r2, [r3, #12]
 800d2ca:	e716      	b.n	800d0fa <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800d2cc:	69e2      	ldr	r2, [r4, #28]
 800d2ce:	b36a      	cbz	r2, 800d32c <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800d2d0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2d2:	4d14      	ldr	r5, [pc, #80]	; (800d324 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 800d2d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d2da:	f7fd fe01 	bl	800aee0 <HAL_GetTick>
 800d2de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2e0:	682b      	ldr	r3, [r5, #0]
 800d2e2:	05df      	lsls	r7, r3, #23
 800d2e4:	d511      	bpl.n	800d30a <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d2e6:	f7fd fe13 	bl	800af10 <HAL_GetREVID>
 800d2ea:	f241 0303 	movw	r3, #4099	; 0x1003
 800d2ee:	6a22      	ldr	r2, [r4, #32]
 800d2f0:	4298      	cmp	r0, r3
 800d2f2:	d810      	bhi.n	800d316 <HAL_RCC_OscConfig+0x28a>
 800d2f4:	686b      	ldr	r3, [r5, #4]
 800d2f6:	2a20      	cmp	r2, #32
 800d2f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800d2fc:	bf0c      	ite	eq
 800d2fe:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800d302:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800d306:	606b      	str	r3, [r5, #4]
 800d308:	e6f7      	b.n	800d0fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d30a:	f7fd fde9 	bl	800aee0 <HAL_GetTick>
 800d30e:	1b80      	subs	r0, r0, r6
 800d310:	2802      	cmp	r0, #2
 800d312:	d9e5      	bls.n	800d2e0 <HAL_RCC_OscConfig+0x254>
 800d314:	e74a      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d316:	68eb      	ldr	r3, [r5, #12]
 800d318:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800d31c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d320:	60eb      	str	r3, [r5, #12]
 800d322:	e6ea      	b.n	800d0fa <HAL_RCC_OscConfig+0x6e>
 800d324:	58024400 	.word	0x58024400
 800d328:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800d32c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d32e:	4e88      	ldr	r6, [pc, #544]	; (800d550 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800d330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d334:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800d336:	f7fd fdd3 	bl	800aee0 <HAL_GetTick>
 800d33a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d33c:	6833      	ldr	r3, [r6, #0]
 800d33e:	05d8      	lsls	r0, r3, #23
 800d340:	f57f aedb 	bpl.w	800d0fa <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800d344:	f7fd fdcc 	bl	800aee0 <HAL_GetTick>
 800d348:	1b40      	subs	r0, r0, r5
 800d34a:	2802      	cmp	r0, #2
 800d34c:	d9f6      	bls.n	800d33c <HAL_RCC_OscConfig+0x2b0>
 800d34e:	e72d      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d350:	6963      	ldr	r3, [r4, #20]
 800d352:	4d7f      	ldr	r5, [pc, #508]	; (800d550 <HAL_RCC_OscConfig+0x4c4>)
 800d354:	b183      	cbz	r3, 800d378 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800d356:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d358:	f043 0301 	orr.w	r3, r3, #1
 800d35c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d35e:	f7fd fdbf 	bl	800aee0 <HAL_GetTick>
 800d362:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d364:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d366:	079b      	lsls	r3, r3, #30
 800d368:	f53f aecb 	bmi.w	800d102 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d36c:	f7fd fdb8 	bl	800aee0 <HAL_GetTick>
 800d370:	1b80      	subs	r0, r0, r6
 800d372:	2802      	cmp	r0, #2
 800d374:	d9f6      	bls.n	800d364 <HAL_RCC_OscConfig+0x2d8>
 800d376:	e719      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800d378:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d37a:	f023 0301 	bic.w	r3, r3, #1
 800d37e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d380:	f7fd fdae 	bl	800aee0 <HAL_GetTick>
 800d384:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d386:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d388:	079f      	lsls	r7, r3, #30
 800d38a:	f57f aeba 	bpl.w	800d102 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d38e:	f7fd fda7 	bl	800aee0 <HAL_GetTick>
 800d392:	1b80      	subs	r0, r0, r6
 800d394:	2802      	cmp	r0, #2
 800d396:	d9f6      	bls.n	800d386 <HAL_RCC_OscConfig+0x2fa>
 800d398:	e708      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d39a:	69a3      	ldr	r3, [r4, #24]
 800d39c:	4d6c      	ldr	r5, [pc, #432]	; (800d550 <HAL_RCC_OscConfig+0x4c4>)
 800d39e:	b183      	cbz	r3, 800d3c2 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800d3a0:	682b      	ldr	r3, [r5, #0]
 800d3a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3a6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d3a8:	f7fd fd9a 	bl	800aee0 <HAL_GetTick>
 800d3ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3ae:	682b      	ldr	r3, [r5, #0]
 800d3b0:	0498      	lsls	r0, r3, #18
 800d3b2:	f53f aeaa 	bmi.w	800d10a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3b6:	f7fd fd93 	bl	800aee0 <HAL_GetTick>
 800d3ba:	1b80      	subs	r0, r0, r6
 800d3bc:	2802      	cmp	r0, #2
 800d3be:	d9f6      	bls.n	800d3ae <HAL_RCC_OscConfig+0x322>
 800d3c0:	e6f4      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800d3c2:	682b      	ldr	r3, [r5, #0]
 800d3c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800d3ca:	f7fd fd89 	bl	800aee0 <HAL_GetTick>
 800d3ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	0499      	lsls	r1, r3, #18
 800d3d4:	f57f ae99 	bpl.w	800d10a <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3d8:	f7fd fd82 	bl	800aee0 <HAL_GetTick>
 800d3dc:	1b80      	subs	r0, r0, r6
 800d3de:	2802      	cmp	r0, #2
 800d3e0:	d9f6      	bls.n	800d3d0 <HAL_RCC_OscConfig+0x344>
 800d3e2:	e6e3      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d3e4:	f7fd fd7c 	bl	800aee0 <HAL_GetTick>
 800d3e8:	1b80      	subs	r0, r0, r6
 800d3ea:	2864      	cmp	r0, #100	; 0x64
 800d3ec:	f67f ae98 	bls.w	800d120 <HAL_RCC_OscConfig+0x94>
 800d3f0:	e6dc      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3f2:	b9b3      	cbnz	r3, 800d422 <HAL_RCC_OscConfig+0x396>
 800d3f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3f6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3fa:	f023 0301 	bic.w	r3, r3, #1
 800d3fe:	672b      	str	r3, [r5, #112]	; 0x70
 800d400:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d402:	f023 0304 	bic.w	r3, r3, #4
 800d406:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d408:	f7fd fd6a 	bl	800aee0 <HAL_GetTick>
 800d40c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d40e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d410:	0798      	lsls	r0, r3, #30
 800d412:	f57f ae9c 	bpl.w	800d14e <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d416:	f7fd fd63 	bl	800aee0 <HAL_GetTick>
 800d41a:	1b80      	subs	r0, r0, r6
 800d41c:	42b8      	cmp	r0, r7
 800d41e:	d9f6      	bls.n	800d40e <HAL_RCC_OscConfig+0x382>
 800d420:	e6c4      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d422:	2b05      	cmp	r3, #5
 800d424:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d426:	d103      	bne.n	800d430 <HAL_RCC_OscConfig+0x3a4>
 800d428:	f043 0304 	orr.w	r3, r3, #4
 800d42c:	672b      	str	r3, [r5, #112]	; 0x70
 800d42e:	e680      	b.n	800d132 <HAL_RCC_OscConfig+0xa6>
 800d430:	f023 0301 	bic.w	r3, r3, #1
 800d434:	672b      	str	r3, [r5, #112]	; 0x70
 800d436:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d438:	f023 0304 	bic.w	r3, r3, #4
 800d43c:	e67c      	b.n	800d138 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d43e:	f7fd fd4f 	bl	800aee0 <HAL_GetTick>
 800d442:	1b40      	subs	r0, r0, r5
 800d444:	42b8      	cmp	r0, r7
 800d446:	f67f ae7e 	bls.w	800d146 <HAL_RCC_OscConfig+0xba>
 800d44a:	e6af      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d44c:	4d40      	ldr	r5, [pc, #256]	; (800d550 <HAL_RCC_OscConfig+0x4c4>)
 800d44e:	692b      	ldr	r3, [r5, #16]
 800d450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d454:	2b18      	cmp	r3, #24
 800d456:	d07d      	beq.n	800d554 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800d458:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d45a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800d45c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d460:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d462:	d167      	bne.n	800d534 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800d464:	f7fd fd3c 	bl	800aee0 <HAL_GetTick>
 800d468:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d46a:	682b      	ldr	r3, [r5, #0]
 800d46c:	0199      	lsls	r1, r3, #6
 800d46e:	d45b      	bmi.n	800d528 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d470:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800d472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800d474:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800d478:	f023 0303 	bic.w	r3, r3, #3
 800d47c:	4313      	orrs	r3, r2
 800d47e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d480:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d484:	62ab      	str	r3, [r5, #40]	; 0x28
 800d486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d488:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d48a:	3b01      	subs	r3, #1
 800d48c:	3a01      	subs	r2, #1
 800d48e:	025b      	lsls	r3, r3, #9
 800d490:	0412      	lsls	r2, r2, #16
 800d492:	b29b      	uxth	r3, r3
 800d494:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800d498:	4313      	orrs	r3, r2
 800d49a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d49c:	3a01      	subs	r2, #1
 800d49e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	0612      	lsls	r2, r2, #24
 800d4aa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800d4b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4b4:	f023 0301 	bic.w	r3, r3, #1
 800d4b8:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d4ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d4bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d4be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d4c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d4ca:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d4cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d4d0:	f023 030c 	bic.w	r3, r3, #12
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d4d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4da:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d4dc:	f023 0302 	bic.w	r3, r3, #2
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d4e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4f2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d4f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d4fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800d4fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d4fe:	f043 0301 	orr.w	r3, r3, #1
 800d502:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d50a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d50c:	f7fd fce8 	bl	800aee0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d510:	4d0f      	ldr	r5, [pc, #60]	; (800d550 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800d512:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d514:	682b      	ldr	r3, [r5, #0]
 800d516:	019a      	lsls	r2, r3, #6
 800d518:	f53f ae1d 	bmi.w	800d156 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d51c:	f7fd fce0 	bl	800aee0 <HAL_GetTick>
 800d520:	1b00      	subs	r0, r0, r4
 800d522:	2802      	cmp	r0, #2
 800d524:	d9f6      	bls.n	800d514 <HAL_RCC_OscConfig+0x488>
 800d526:	e641      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d528:	f7fd fcda 	bl	800aee0 <HAL_GetTick>
 800d52c:	1b80      	subs	r0, r0, r6
 800d52e:	2802      	cmp	r0, #2
 800d530:	d99b      	bls.n	800d46a <HAL_RCC_OscConfig+0x3de>
 800d532:	e63b      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800d534:	f7fd fcd4 	bl	800aee0 <HAL_GetTick>
 800d538:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d53a:	682b      	ldr	r3, [r5, #0]
 800d53c:	019b      	lsls	r3, r3, #6
 800d53e:	f57f ae0a 	bpl.w	800d156 <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d542:	f7fd fccd 	bl	800aee0 <HAL_GetTick>
 800d546:	1b00      	subs	r0, r0, r4
 800d548:	2802      	cmp	r0, #2
 800d54a:	d9f6      	bls.n	800d53a <HAL_RCC_OscConfig+0x4ae>
 800d54c:	e62e      	b.n	800d1ac <HAL_RCC_OscConfig+0x120>
 800d54e:	bf00      	nop
 800d550:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d554:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d556:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d558:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d55a:	f43f ae28 	beq.w	800d1ae <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d55e:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d562:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d564:	4281      	cmp	r1, r0
 800d566:	f47f ad94 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d56a:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d56e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d570:	428a      	cmp	r2, r1
 800d572:	f47f ad8e 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d576:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d578:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800d57c:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d57e:	4291      	cmp	r1, r2
 800d580:	f47f ad87 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d584:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d586:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800d58a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d58c:	4291      	cmp	r1, r2
 800d58e:	f47f ad80 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d592:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d594:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800d598:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d59a:	4291      	cmp	r1, r2
 800d59c:	f47f ad79 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d5a0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d5a2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d5a6:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d5a8:	4293      	cmp	r3, r2
 800d5aa:	f47f ad72 	bne.w	800d092 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d5ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d5b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d5b2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	f43f adcd 	beq.w	800d156 <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 800d5bc:	4d0c      	ldr	r5, [pc, #48]	; (800d5f0 <HAL_RCC_OscConfig+0x564>)
 800d5be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d5c0:	f023 0301 	bic.w	r3, r3, #1
 800d5c4:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800d5c6:	f7fd fc8b 	bl	800aee0 <HAL_GetTick>
 800d5ca:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d5cc:	f7fd fc88 	bl	800aee0 <HAL_GetTick>
 800d5d0:	42b0      	cmp	r0, r6
 800d5d2:	d0fb      	beq.n	800d5cc <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5d4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800d5d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d5d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d5e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d5e4:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800d5e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d5e8:	f043 0301 	orr.w	r3, r3, #1
 800d5ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 800d5ee:	e5b2      	b.n	800d156 <HAL_RCC_OscConfig+0xca>
 800d5f0:	58024400 	.word	0x58024400

0800d5f4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800d5f4:	b570      	push	{r4, r5, r6, lr}
 800d5f6:	4c23      	ldr	r4, [pc, #140]	; (800d684 <HAL_RCC_MCOConfig+0x90>)
 800d5f8:	b088      	sub	sp, #32
 800d5fa:	460e      	mov	r6, r1
 800d5fc:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800d5fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800d602:	b9f8      	cbnz	r0, 800d644 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800d604:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d608:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d60c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800d60e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d612:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d616:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	9301      	str	r3, [sp, #4]
 800d61e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d620:	2302      	movs	r3, #2
 800d622:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d626:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d628:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d62c:	4816      	ldr	r0, [pc, #88]	; (800d688 <HAL_RCC_MCOConfig+0x94>)
 800d62e:	f7fe fa9d 	bl	800bb6c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800d632:	6923      	ldr	r3, [r4, #16]
 800d634:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800d638:	ea43 0106 	orr.w	r1, r3, r6
 800d63c:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d63e:	6121      	str	r1, [r4, #16]
  }
}
 800d640:	b008      	add	sp, #32
 800d642:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800d644:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d648:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d64c:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d64e:	480f      	ldr	r0, [pc, #60]	; (800d68c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800d650:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800d654:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	9302      	str	r3, [sp, #8]
 800d65e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d660:	2302      	movs	r3, #2
 800d662:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d666:	2300      	movs	r3, #0
 800d668:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d66c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d66e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d670:	f7fe fa7c 	bl	800bb6c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800d67a:	ea43 0106 	orr.w	r1, r3, r6
 800d67e:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800d682:	e7dc      	b.n	800d63e <HAL_RCC_MCOConfig+0x4a>
 800d684:	58024400 	.word	0x58024400
 800d688:	58020000 	.word	0x58020000
 800d68c:	58020800 	.word	0x58020800

0800d690 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d690:	4b48      	ldr	r3, [pc, #288]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x124>)
 800d692:	691a      	ldr	r2, [r3, #16]
 800d694:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800d698:	2a10      	cmp	r2, #16
{
 800d69a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d69c:	f000 8086 	beq.w	800d7ac <HAL_RCC_GetSysClockFreq+0x11c>
 800d6a0:	2a18      	cmp	r2, #24
 800d6a2:	d00c      	beq.n	800d6be <HAL_RCC_GetSysClockFreq+0x2e>
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	f040 8083 	bne.w	800d7b0 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	4842      	ldr	r0, [pc, #264]	; (800d7b8 <HAL_RCC_GetSysClockFreq+0x128>)
 800d6ae:	f012 0f20 	tst.w	r2, #32
 800d6b2:	d003      	beq.n	800d6bc <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d6ba:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800d6bc:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6be:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d6c0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d6c2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800d6c4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d6c8:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800d6ce:	d0f5      	beq.n	800d6bc <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6d0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d6d4:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6d8:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6dc:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6e0:	4362      	muls	r2, r4
 800d6e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d6ea:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6ec:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6f0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800d6f4:	d04c      	beq.n	800d790 <HAL_RCC_GetSysClockFreq+0x100>
 800d6f6:	2902      	cmp	r1, #2
 800d6f8:	d03c      	beq.n	800d774 <HAL_RCC_GetSysClockFreq+0xe4>
 800d6fa:	2900      	cmp	r1, #0
 800d6fc:	d148      	bne.n	800d790 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	0692      	lsls	r2, r2, #26
 800d702:	d527      	bpl.n	800d754 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d704:	6819      	ldr	r1, [r3, #0]
 800d706:	4a2c      	ldr	r2, [pc, #176]	; (800d7b8 <HAL_RCC_GetSysClockFreq+0x128>)
 800d708:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d70e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d714:	ee07 2a10 	vmov	s14, r2
 800d718:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800d71c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800d720:	ee06 3a90 	vmov	s13, r3
 800d724:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d728:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d72c:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d730:	4b20      	ldr	r3, [pc, #128]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d732:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d738:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d73c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d73e:	ee07 3a10 	vmov	s14, r3
 800d742:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800d746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d74a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800d74e:	ee17 0a90 	vmov	r0, s15
 800d752:	e7b3      	b.n	800d6bc <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d75a:	ee07 3a10 	vmov	s14, r3
 800d75e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d762:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d766:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d76a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800d7bc <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d76e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d772:	e7dd      	b.n	800d730 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d77a:	ee07 3a10 	vmov	s14, r3
 800d77e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d782:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d786:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d78a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800d7c0 <HAL_RCC_GetSysClockFreq+0x130>
 800d78e:	e7ee      	b.n	800d76e <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d796:	ee07 3a10 	vmov	s14, r3
 800d79a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d7a6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x134>
 800d7aa:	e7e0      	b.n	800d76e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7ac:	4806      	ldr	r0, [pc, #24]	; (800d7c8 <HAL_RCC_GetSysClockFreq+0x138>)
 800d7ae:	e785      	b.n	800d6bc <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800d7b0:	4806      	ldr	r0, [pc, #24]	; (800d7cc <HAL_RCC_GetSysClockFreq+0x13c>)
 800d7b2:	e783      	b.n	800d6bc <HAL_RCC_GetSysClockFreq+0x2c>
 800d7b4:	58024400 	.word	0x58024400
 800d7b8:	03d09000 	.word	0x03d09000
 800d7bc:	4c742400 	.word	0x4c742400
 800d7c0:	4bbebc20 	.word	0x4bbebc20
 800d7c4:	4a742400 	.word	0x4a742400
 800d7c8:	017d7840 	.word	0x017d7840
 800d7cc:	003d0900 	.word	0x003d0900

0800d7d0 <HAL_RCC_ClockConfig>:
{
 800d7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	b910      	cbnz	r0, 800d7e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800d7da:	2001      	movs	r0, #1
}
 800d7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d7e0:	4a88      	ldr	r2, [pc, #544]	; (800da04 <HAL_RCC_ClockConfig+0x234>)
 800d7e2:	6813      	ldr	r3, [r2, #0]
 800d7e4:	f003 030f 	and.w	r3, r3, #15
 800d7e8:	428b      	cmp	r3, r1
 800d7ea:	f0c0 8093 	bcc.w	800d914 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	075f      	lsls	r7, r3, #29
 800d7f2:	f100 809b 	bmi.w	800d92c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7f6:	071e      	lsls	r6, r3, #28
 800d7f8:	d50b      	bpl.n	800d812 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d7fa:	4983      	ldr	r1, [pc, #524]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d7fc:	6966      	ldr	r6, [r4, #20]
 800d7fe:	69c8      	ldr	r0, [r1, #28]
 800d800:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d804:	4286      	cmp	r6, r0
 800d806:	d904      	bls.n	800d812 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d808:	69ca      	ldr	r2, [r1, #28]
 800d80a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d80e:	4332      	orrs	r2, r6
 800d810:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d812:	06d8      	lsls	r0, r3, #27
 800d814:	d50b      	bpl.n	800d82e <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d816:	497c      	ldr	r1, [pc, #496]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d818:	69a6      	ldr	r6, [r4, #24]
 800d81a:	69c8      	ldr	r0, [r1, #28]
 800d81c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800d820:	4286      	cmp	r6, r0
 800d822:	d904      	bls.n	800d82e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d824:	69ca      	ldr	r2, [r1, #28]
 800d826:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d82a:	4332      	orrs	r2, r6
 800d82c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d82e:	0699      	lsls	r1, r3, #26
 800d830:	d50b      	bpl.n	800d84a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d832:	4975      	ldr	r1, [pc, #468]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d834:	69e6      	ldr	r6, [r4, #28]
 800d836:	6a08      	ldr	r0, [r1, #32]
 800d838:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d83c:	4286      	cmp	r6, r0
 800d83e:	d904      	bls.n	800d84a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d840:	6a0a      	ldr	r2, [r1, #32]
 800d842:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d846:	4332      	orrs	r2, r6
 800d848:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d84a:	079a      	lsls	r2, r3, #30
 800d84c:	d50b      	bpl.n	800d866 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d84e:	496e      	ldr	r1, [pc, #440]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d850:	68e6      	ldr	r6, [r4, #12]
 800d852:	6988      	ldr	r0, [r1, #24]
 800d854:	f000 000f 	and.w	r0, r0, #15
 800d858:	4286      	cmp	r6, r0
 800d85a:	d904      	bls.n	800d866 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d85c:	698a      	ldr	r2, [r1, #24]
 800d85e:	f022 020f 	bic.w	r2, r2, #15
 800d862:	4332      	orrs	r2, r6
 800d864:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d866:	07df      	lsls	r7, r3, #31
 800d868:	d46e      	bmi.n	800d948 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	079e      	lsls	r6, r3, #30
 800d86e:	f100 80a1 	bmi.w	800d9b4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d872:	4964      	ldr	r1, [pc, #400]	; (800da04 <HAL_RCC_ClockConfig+0x234>)
 800d874:	680a      	ldr	r2, [r1, #0]
 800d876:	f002 020f 	and.w	r2, r2, #15
 800d87a:	42aa      	cmp	r2, r5
 800d87c:	f200 80a8 	bhi.w	800d9d0 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d880:	0758      	lsls	r0, r3, #29
 800d882:	f100 80b1 	bmi.w	800d9e8 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d886:	0719      	lsls	r1, r3, #28
 800d888:	d50b      	bpl.n	800d8a2 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d88a:	495f      	ldr	r1, [pc, #380]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d88c:	6965      	ldr	r5, [r4, #20]
 800d88e:	69c8      	ldr	r0, [r1, #28]
 800d890:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d894:	4285      	cmp	r5, r0
 800d896:	d204      	bcs.n	800d8a2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d898:	69ca      	ldr	r2, [r1, #28]
 800d89a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d89e:	432a      	orrs	r2, r5
 800d8a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d8a2:	06da      	lsls	r2, r3, #27
 800d8a4:	d50b      	bpl.n	800d8be <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d8a6:	4958      	ldr	r1, [pc, #352]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d8a8:	69a5      	ldr	r5, [r4, #24]
 800d8aa:	69c8      	ldr	r0, [r1, #28]
 800d8ac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800d8b0:	4285      	cmp	r5, r0
 800d8b2:	d204      	bcs.n	800d8be <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d8b4:	69ca      	ldr	r2, [r1, #28]
 800d8b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d8ba:	432a      	orrs	r2, r5
 800d8bc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d8be:	069b      	lsls	r3, r3, #26
 800d8c0:	d50b      	bpl.n	800d8da <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d8c2:	4a51      	ldr	r2, [pc, #324]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d8c4:	69e0      	ldr	r0, [r4, #28]
 800d8c6:	6a11      	ldr	r1, [r2, #32]
 800d8c8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800d8cc:	4288      	cmp	r0, r1
 800d8ce:	d204      	bcs.n	800d8da <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d8d0:	6a13      	ldr	r3, [r2, #32]
 800d8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8d6:	4303      	orrs	r3, r0
 800d8d8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d8da:	f7ff fed9 	bl	800d690 <HAL_RCC_GetSysClockFreq>
 800d8de:	494a      	ldr	r1, [pc, #296]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d8e0:	4a4a      	ldr	r2, [pc, #296]	; (800da0c <HAL_RCC_ClockConfig+0x23c>)
 800d8e2:	698b      	ldr	r3, [r1, #24]
 800d8e4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800d8e8:	5cd3      	ldrb	r3, [r2, r3]
 800d8ea:	f003 031f 	and.w	r3, r3, #31
 800d8ee:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d8f0:	698b      	ldr	r3, [r1, #24]
 800d8f2:	f003 030f 	and.w	r3, r3, #15
 800d8f6:	5cd3      	ldrb	r3, [r2, r3]
 800d8f8:	4a45      	ldr	r2, [pc, #276]	; (800da10 <HAL_RCC_ClockConfig+0x240>)
 800d8fa:	f003 031f 	and.w	r3, r3, #31
 800d8fe:	fa20 f303 	lsr.w	r3, r0, r3
 800d902:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800d904:	4b43      	ldr	r3, [pc, #268]	; (800da14 <HAL_RCC_ClockConfig+0x244>)
 800d906:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800d908:	4b43      	ldr	r3, [pc, #268]	; (800da18 <HAL_RCC_ClockConfig+0x248>)
}
 800d90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800d90e:	6818      	ldr	r0, [r3, #0]
 800d910:	f7f3 bd6e 	b.w	80013f0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d914:	6813      	ldr	r3, [r2, #0]
 800d916:	f023 030f 	bic.w	r3, r3, #15
 800d91a:	430b      	orrs	r3, r1
 800d91c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d91e:	6813      	ldr	r3, [r2, #0]
 800d920:	f003 030f 	and.w	r3, r3, #15
 800d924:	428b      	cmp	r3, r1
 800d926:	f47f af58 	bne.w	800d7da <HAL_RCC_ClockConfig+0xa>
 800d92a:	e760      	b.n	800d7ee <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d92c:	4936      	ldr	r1, [pc, #216]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d92e:	6926      	ldr	r6, [r4, #16]
 800d930:	6988      	ldr	r0, [r1, #24]
 800d932:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d936:	4286      	cmp	r6, r0
 800d938:	f67f af5d 	bls.w	800d7f6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d93c:	698a      	ldr	r2, [r1, #24]
 800d93e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d942:	4332      	orrs	r2, r6
 800d944:	618a      	str	r2, [r1, #24]
 800d946:	e756      	b.n	800d7f6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d948:	4b2f      	ldr	r3, [pc, #188]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d94a:	68a1      	ldr	r1, [r4, #8]
 800d94c:	699a      	ldr	r2, [r3, #24]
 800d94e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800d952:	430a      	orrs	r2, r1
 800d954:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d956:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d958:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d95a:	2a02      	cmp	r2, #2
 800d95c:	d11d      	bne.n	800d99a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d95e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d962:	f43f af3a 	beq.w	800d7da <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d966:	4e28      	ldr	r6, [pc, #160]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d968:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d96c:	6933      	ldr	r3, [r6, #16]
 800d96e:	f023 0307 	bic.w	r3, r3, #7
 800d972:	4313      	orrs	r3, r2
 800d974:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800d976:	f7fd fab3 	bl	800aee0 <HAL_GetTick>
 800d97a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d97c:	6933      	ldr	r3, [r6, #16]
 800d97e:	6862      	ldr	r2, [r4, #4]
 800d980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d984:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800d988:	f43f af6f 	beq.w	800d86a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d98c:	f7fd faa8 	bl	800aee0 <HAL_GetTick>
 800d990:	1bc0      	subs	r0, r0, r7
 800d992:	4540      	cmp	r0, r8
 800d994:	d9f2      	bls.n	800d97c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800d996:	2003      	movs	r0, #3
 800d998:	e720      	b.n	800d7dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d99a:	2a03      	cmp	r2, #3
 800d99c:	d102      	bne.n	800d9a4 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d99e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800d9a2:	e7de      	b.n	800d962 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d9a4:	2a01      	cmp	r2, #1
 800d9a6:	d102      	bne.n	800d9ae <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d9a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 800d9ac:	e7d9      	b.n	800d962 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d9ae:	f013 0f04 	tst.w	r3, #4
 800d9b2:	e7d6      	b.n	800d962 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d9b4:	4914      	ldr	r1, [pc, #80]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d9b6:	68e6      	ldr	r6, [r4, #12]
 800d9b8:	6988      	ldr	r0, [r1, #24]
 800d9ba:	f000 000f 	and.w	r0, r0, #15
 800d9be:	4286      	cmp	r6, r0
 800d9c0:	f4bf af57 	bcs.w	800d872 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9c4:	698a      	ldr	r2, [r1, #24]
 800d9c6:	f022 020f 	bic.w	r2, r2, #15
 800d9ca:	4332      	orrs	r2, r6
 800d9cc:	618a      	str	r2, [r1, #24]
 800d9ce:	e750      	b.n	800d872 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9d0:	680a      	ldr	r2, [r1, #0]
 800d9d2:	f022 020f 	bic.w	r2, r2, #15
 800d9d6:	432a      	orrs	r2, r5
 800d9d8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9da:	680a      	ldr	r2, [r1, #0]
 800d9dc:	f002 020f 	and.w	r2, r2, #15
 800d9e0:	42aa      	cmp	r2, r5
 800d9e2:	f47f aefa 	bne.w	800d7da <HAL_RCC_ClockConfig+0xa>
 800d9e6:	e74b      	b.n	800d880 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9e8:	4907      	ldr	r1, [pc, #28]	; (800da08 <HAL_RCC_ClockConfig+0x238>)
 800d9ea:	6925      	ldr	r5, [r4, #16]
 800d9ec:	6988      	ldr	r0, [r1, #24]
 800d9ee:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800d9f2:	4285      	cmp	r5, r0
 800d9f4:	f4bf af47 	bcs.w	800d886 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d9f8:	698a      	ldr	r2, [r1, #24]
 800d9fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800d9fe:	432a      	orrs	r2, r5
 800da00:	618a      	str	r2, [r1, #24]
 800da02:	e740      	b.n	800d886 <HAL_RCC_ClockConfig+0xb6>
 800da04:	52002000 	.word	0x52002000
 800da08:	58024400 	.word	0x58024400
 800da0c:	08024718 	.word	0x08024718
 800da10:	2400004c 	.word	0x2400004c
 800da14:	24000048 	.word	0x24000048
 800da18:	24000054 	.word	0x24000054

0800da1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da1c:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da1e:	4c0c      	ldr	r4, [pc, #48]	; (800da50 <HAL_RCC_GetHCLKFreq+0x34>)
 800da20:	f7ff fe36 	bl	800d690 <HAL_RCC_GetSysClockFreq>
 800da24:	490b      	ldr	r1, [pc, #44]	; (800da54 <HAL_RCC_GetHCLKFreq+0x38>)
 800da26:	69a3      	ldr	r3, [r4, #24]
 800da28:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800da2c:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da2e:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da30:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da34:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da38:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da3c:	5ccb      	ldrb	r3, [r1, r3]
 800da3e:	f003 031f 	and.w	r3, r3, #31
 800da42:	fa22 f003 	lsr.w	r0, r2, r3
 800da46:	4b04      	ldr	r3, [pc, #16]	; (800da58 <HAL_RCC_GetHCLKFreq+0x3c>)
 800da48:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da4a:	4b04      	ldr	r3, [pc, #16]	; (800da5c <HAL_RCC_GetHCLKFreq+0x40>)
 800da4c:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800da4e:	bd10      	pop	{r4, pc}
 800da50:	58024400 	.word	0x58024400
 800da54:	08024718 	.word	0x08024718
 800da58:	2400004c 	.word	0x2400004c
 800da5c:	24000048 	.word	0x24000048

0800da60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800da60:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800da62:	f7ff ffdb 	bl	800da1c <HAL_RCC_GetHCLKFreq>
 800da66:	4b05      	ldr	r3, [pc, #20]	; (800da7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800da68:	4a05      	ldr	r2, [pc, #20]	; (800da80 <HAL_RCC_GetPCLK1Freq+0x20>)
 800da6a:	69db      	ldr	r3, [r3, #28]
 800da6c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800da70:	5cd3      	ldrb	r3, [r2, r3]
 800da72:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800da76:	40d8      	lsrs	r0, r3
 800da78:	bd08      	pop	{r3, pc}
 800da7a:	bf00      	nop
 800da7c:	58024400 	.word	0x58024400
 800da80:	08024718 	.word	0x08024718

0800da84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800da84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800da86:	f7ff ffc9 	bl	800da1c <HAL_RCC_GetHCLKFreq>
 800da8a:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800da8c:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800da94:	5cd3      	ldrb	r3, [r2, r3]
 800da96:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800da9a:	40d8      	lsrs	r0, r3
 800da9c:	bd08      	pop	{r3, pc}
 800da9e:	bf00      	nop
 800daa0:	58024400 	.word	0x58024400
 800daa4:	08024718 	.word	0x08024718

0800daa8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800daa8:	233f      	movs	r3, #63	; 0x3f
 800daaa:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800daac:	4b11      	ldr	r3, [pc, #68]	; (800daf4 <HAL_RCC_GetClockConfig+0x4c>)
 800daae:	691a      	ldr	r2, [r3, #16]
 800dab0:	f002 0207 	and.w	r2, r2, #7
 800dab4:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800dab6:	699a      	ldr	r2, [r3, #24]
 800dab8:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800dabc:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800dabe:	699a      	ldr	r2, [r3, #24]
 800dac0:	f002 020f 	and.w	r2, r2, #15
 800dac4:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800dac6:	699a      	ldr	r2, [r3, #24]
 800dac8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800dacc:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800dace:	69da      	ldr	r2, [r3, #28]
 800dad0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800dad4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800dad6:	69da      	ldr	r2, [r3, #28]
 800dad8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800dadc:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800dade:	6a1b      	ldr	r3, [r3, #32]
 800dae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dae4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dae6:	4b04      	ldr	r3, [pc, #16]	; (800daf8 <HAL_RCC_GetClockConfig+0x50>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 030f 	and.w	r3, r3, #15
 800daee:	600b      	str	r3, [r1, #0]
}
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	58024400 	.word	0x58024400
 800daf8:	52002000 	.word	0x52002000

0800dafc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dafe:	4c3a      	ldr	r4, [pc, #232]	; (800dbe8 <RCCEx_PLL2_Config+0xec>)
{
 800db00:	4606      	mov	r6, r0
 800db02:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db06:	f003 0303 	and.w	r3, r3, #3
 800db0a:	2b03      	cmp	r3, #3
 800db0c:	d069      	beq.n	800dbe2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db14:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db16:	f7fd f9e3 	bl	800aee0 <HAL_GetTick>
 800db1a:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	011a      	lsls	r2, r3, #4
 800db20:	d44b      	bmi.n	800dbba <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db24:	6832      	ldr	r2, [r6, #0]
 800db26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800db2a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800db2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800db30:	68b3      	ldr	r3, [r6, #8]
 800db32:	68f2      	ldr	r2, [r6, #12]
 800db34:	3b01      	subs	r3, #1
 800db36:	3a01      	subs	r2, #1
 800db38:	025b      	lsls	r3, r3, #9
 800db3a:	0412      	lsls	r2, r2, #16
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800db42:	4313      	orrs	r3, r2
 800db44:	6872      	ldr	r2, [r6, #4]
 800db46:	3a01      	subs	r2, #1
 800db48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db4c:	4313      	orrs	r3, r2
 800db4e:	6932      	ldr	r2, [r6, #16]
 800db50:	3a01      	subs	r2, #1
 800db52:	0612      	lsls	r2, r2, #24
 800db54:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800db58:	4313      	orrs	r3, r2
 800db5a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db5e:	6972      	ldr	r2, [r6, #20]
 800db60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800db64:	4313      	orrs	r3, r2
 800db66:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db6a:	69b2      	ldr	r2, [r6, #24]
 800db6c:	f023 0320 	bic.w	r3, r3, #32
 800db70:	4313      	orrs	r3, r2
 800db72:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800db74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db76:	f023 0310 	bic.w	r3, r3, #16
 800db7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db7e:	69f2      	ldr	r2, [r6, #28]
 800db80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800db88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800db8c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800db8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800db90:	f043 0310 	orr.w	r3, r3, #16
 800db94:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800db96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800db98:	b9b5      	cbnz	r5, 800dbc8 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800db9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800db9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dba0:	4c11      	ldr	r4, [pc, #68]	; (800dbe8 <RCCEx_PLL2_Config+0xec>)
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dba8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbaa:	f7fd f999 	bl	800aee0 <HAL_GetTick>
 800dbae:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	011b      	lsls	r3, r3, #4
 800dbb4:	d50f      	bpl.n	800dbd6 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	e005      	b.n	800dbc6 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbba:	f7fd f991 	bl	800aee0 <HAL_GetTick>
 800dbbe:	1bc0      	subs	r0, r0, r7
 800dbc0:	2802      	cmp	r0, #2
 800dbc2:	d9ab      	bls.n	800db1c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800dbc4:	2003      	movs	r0, #3
}
 800dbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbc8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbca:	bf0c      	ite	eq
 800dbcc:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbd0:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800dbd4:	e7e3      	b.n	800db9e <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbd6:	f7fd f983 	bl	800aee0 <HAL_GetTick>
 800dbda:	1b40      	subs	r0, r0, r5
 800dbdc:	2802      	cmp	r0, #2
 800dbde:	d9e7      	bls.n	800dbb0 <RCCEx_PLL2_Config+0xb4>
 800dbe0:	e7f0      	b.n	800dbc4 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	e7ef      	b.n	800dbc6 <RCCEx_PLL2_Config+0xca>
 800dbe6:	bf00      	nop
 800dbe8:	58024400 	.word	0x58024400

0800dbec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dbee:	4c3a      	ldr	r4, [pc, #232]	; (800dcd8 <RCCEx_PLL3_Config+0xec>)
{
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dbf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbf6:	f003 0303 	and.w	r3, r3, #3
 800dbfa:	2b03      	cmp	r3, #3
 800dbfc:	d069      	beq.n	800dcd2 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dbfe:	6823      	ldr	r3, [r4, #0]
 800dc00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc06:	f7fd f96b 	bl	800aee0 <HAL_GetTick>
 800dc0a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	009a      	lsls	r2, r3, #2
 800dc10:	d44b      	bmi.n	800dcaa <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dc14:	6832      	ldr	r2, [r6, #0]
 800dc16:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800dc1a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800dc1e:	62a3      	str	r3, [r4, #40]	; 0x28
 800dc20:	68b3      	ldr	r3, [r6, #8]
 800dc22:	68f2      	ldr	r2, [r6, #12]
 800dc24:	3b01      	subs	r3, #1
 800dc26:	3a01      	subs	r2, #1
 800dc28:	025b      	lsls	r3, r3, #9
 800dc2a:	0412      	lsls	r2, r2, #16
 800dc2c:	b29b      	uxth	r3, r3
 800dc2e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800dc32:	4313      	orrs	r3, r2
 800dc34:	6872      	ldr	r2, [r6, #4]
 800dc36:	3a01      	subs	r2, #1
 800dc38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	6932      	ldr	r2, [r6, #16]
 800dc40:	3a01      	subs	r2, #1
 800dc42:	0612      	lsls	r2, r2, #24
 800dc44:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800dc48:	4313      	orrs	r3, r2
 800dc4a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dc4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc4e:	6972      	ldr	r2, [r6, #20]
 800dc50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800dc54:	4313      	orrs	r3, r2
 800dc56:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dc58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc5a:	69b2      	ldr	r2, [r6, #24]
 800dc5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc60:	4313      	orrs	r3, r2
 800dc62:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dc64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dc6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dc6e:	69f2      	ldr	r2, [r6, #28]
 800dc70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800dc78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dc7c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dc7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc84:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dc86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800dc88:	b9b5      	cbnz	r5, 800dcb8 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dc8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dc8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dc90:	4c11      	ldr	r4, [pc, #68]	; (800dcd8 <RCCEx_PLL3_Config+0xec>)
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc9a:	f7fd f921 	bl	800aee0 <HAL_GetTick>
 800dc9e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	d50f      	bpl.n	800dcc6 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800dca6:	2000      	movs	r0, #0
 800dca8:	e005      	b.n	800dcb6 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcaa:	f7fd f919 	bl	800aee0 <HAL_GetTick>
 800dcae:	1bc0      	subs	r0, r0, r7
 800dcb0:	2802      	cmp	r0, #2
 800dcb2:	d9ab      	bls.n	800dc0c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800dcb4:	2003      	movs	r0, #3
}
 800dcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800dcb8:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dcba:	bf0c      	ite	eq
 800dcbc:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dcc0:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800dcc4:	e7e3      	b.n	800dc8e <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcc6:	f7fd f90b 	bl	800aee0 <HAL_GetTick>
 800dcca:	1b40      	subs	r0, r0, r5
 800dccc:	2802      	cmp	r0, #2
 800dcce:	d9e7      	bls.n	800dca0 <RCCEx_PLL3_Config+0xb4>
 800dcd0:	e7f0      	b.n	800dcb4 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800dcd2:	2001      	movs	r0, #1
 800dcd4:	e7ef      	b.n	800dcb6 <RCCEx_PLL3_Config+0xca>
 800dcd6:	bf00      	nop
 800dcd8:	58024400 	.word	0x58024400

0800dcdc <HAL_RCCEx_PeriphCLKConfig>:
{
 800dcdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dce0:	6803      	ldr	r3, [r0, #0]
{
 800dce2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dce4:	011c      	lsls	r4, r3, #4
 800dce6:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800dcea:	d509      	bpl.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800dcec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800dcee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcf2:	d02e      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dcf4:	d813      	bhi.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800dcf6:	b1f3      	cbz	r3, 800dd36 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800dcf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfc:	d021      	beq.n	800dd42 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800dcfe:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	05d8      	lsls	r0, r3, #23
 800dd04:	f140 8104 	bpl.w	800df10 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800dd08:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800dd0a:	2b04      	cmp	r3, #4
 800dd0c:	f200 80ff 	bhi.w	800df0e <HAL_RCCEx_PeriphCLKConfig+0x232>
 800dd10:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dd14:	002b0024 	.word	0x002b0024
 800dd18:	002900f7 	.word	0x002900f7
 800dd1c:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 800dd1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dd22:	d1ec      	bne.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dd24:	4aaa      	ldr	r2, [pc, #680]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd26:	2600      	movs	r6, #0
 800dd28:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800dd2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dd2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800dd30:	430b      	orrs	r3, r1
 800dd32:	6513      	str	r3, [r2, #80]	; 0x50
 800dd34:	e7e4      	b.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd36:	4aa6      	ldr	r2, [pc, #664]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dd3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd3e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800dd40:	e7f0      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dd42:	2102      	movs	r1, #2
 800dd44:	3008      	adds	r0, #8
 800dd46:	f7ff fed9 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd4a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d1d7      	bne.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800dd50:	e7e8      	b.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dd52:	2102      	movs	r1, #2
 800dd54:	3028      	adds	r0, #40	; 0x28
 800dd56:	f7ff ff49 	bl	800dbec <RCCEx_PLL3_Config>
 800dd5a:	e7f6      	b.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd5c:	4a9c      	ldr	r2, [pc, #624]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd64:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800dd66:	4634      	mov	r4, r6
 800dd68:	e005      	b.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	f105 0008 	add.w	r0, r5, #8
 800dd70:	f7ff fec4 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd74:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800dd76:	2c00      	cmp	r4, #0
 800dd78:	f040 80cc 	bne.w	800df14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd7c:	4a94      	ldr	r2, [pc, #592]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd7e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800dd80:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dd82:	f023 0307 	bic.w	r3, r3, #7
 800dd86:	430b      	orrs	r3, r1
 800dd88:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	0599      	lsls	r1, r3, #22
 800dd8e:	d50d      	bpl.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 800dd90:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800dd92:	2b80      	cmp	r3, #128	; 0x80
 800dd94:	f000 80dc 	beq.w	800df50 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800dd98:	f200 80be 	bhi.w	800df18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 80ca 	beq.w	800df36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800dda2:	2b40      	cmp	r3, #64	; 0x40
 800dda4:	f000 80cd 	beq.w	800df42 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800dda8:	2601      	movs	r6, #1
 800ddaa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ddac:	682b      	ldr	r3, [r5, #0]
 800ddae:	055a      	lsls	r2, r3, #21
 800ddb0:	d510      	bpl.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ddb2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800ddb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddba:	f000 80ef 	beq.w	800df9c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800ddbe:	f200 80cf 	bhi.w	800df60 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 80dd 	beq.w	800df82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ddc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddcc:	f000 80df 	beq.w	800df8e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800ddd0:	2601      	movs	r6, #1
 800ddd2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	051b      	lsls	r3, r3, #20
 800ddd8:	d510      	bpl.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800ddda:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800ddde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dde2:	f000 8104 	beq.w	800dfee <HAL_RCCEx_PeriphCLKConfig+0x312>
 800dde6:	f200 80e1 	bhi.w	800dfac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 80f2 	beq.w	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800ddf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ddf4:	f000 80f4 	beq.w	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800ddf8:	2601      	movs	r6, #1
 800ddfa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	019f      	lsls	r7, r3, #6
 800de00:	d50d      	bpl.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800de02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800de04:	2b20      	cmp	r3, #32
 800de06:	f000 810c 	beq.w	800e022 <HAL_RCCEx_PeriphCLKConfig+0x346>
 800de0a:	f200 80f8 	bhi.w	800dffe <HAL_RCCEx_PeriphCLKConfig+0x322>
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80f8 	beq.w	800e004 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800de14:	2b10      	cmp	r3, #16
 800de16:	f000 80fe 	beq.w	800e016 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800de1a:	2601      	movs	r6, #1
 800de1c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800de1e:	682b      	ldr	r3, [r5, #0]
 800de20:	04d8      	lsls	r0, r3, #19
 800de22:	d50f      	bpl.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800de24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de2a:	f000 8120 	beq.w	800e06e <HAL_RCCEx_PeriphCLKConfig+0x392>
 800de2e:	f200 8101 	bhi.w	800e034 <HAL_RCCEx_PeriphCLKConfig+0x358>
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 810e 	beq.w	800e054 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800de38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de3c:	f000 8110 	beq.w	800e060 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800de40:	2601      	movs	r6, #1
 800de42:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800de44:	682b      	ldr	r3, [r5, #0]
 800de46:	0499      	lsls	r1, r3, #18
 800de48:	d50f      	bpl.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 800de4a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800de4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800de50:	f000 812e 	beq.w	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800de54:	f200 8113 	bhi.w	800e07e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 8119 	beq.w	800e090 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800de5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de62:	f000 811e 	beq.w	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800de66:	2601      	movs	r6, #1
 800de68:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800de6a:	682b      	ldr	r3, [r5, #0]
 800de6c:	045a      	lsls	r2, r3, #17
 800de6e:	d510      	bpl.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 800de70:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800de74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de78:	f000 813c 	beq.w	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800de7c:	f200 8120 	bhi.w	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 8126 	beq.w	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800de86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de8a:	f000 812c 	beq.w	800e0e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800de8e:	2601      	movs	r6, #1
 800de90:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800de92:	682b      	ldr	r3, [r5, #0]
 800de94:	015b      	lsls	r3, r3, #5
 800de96:	d515      	bpl.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800de98:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800de9a:	b14b      	cbz	r3, 800deb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800de9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dea0:	f040 8130 	bne.w	800e104 <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dea4:	2101      	movs	r1, #1
 800dea6:	f105 0008 	add.w	r0, r5, #8
 800deaa:	f7ff fe27 	bl	800dafc <RCCEx_PLL2_Config>
 800deae:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800deb0:	2c00      	cmp	r4, #0
 800deb2:	f040 812a 	bne.w	800e10a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800deb6:	4a46      	ldr	r2, [pc, #280]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800deb8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800deba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800debc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dec0:	430b      	orrs	r3, r1
 800dec2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dec4:	682b      	ldr	r3, [r5, #0]
 800dec6:	041f      	lsls	r7, r3, #16
 800dec8:	d50d      	bpl.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800deca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800decc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ded0:	f000 811d 	beq.w	800e10e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ded4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ded8:	f000 8127 	beq.w	800e12a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f000 811b 	beq.w	800e118 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800dee2:	2601      	movs	r6, #1
 800dee4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dee6:	682b      	ldr	r3, [r5, #0]
 800dee8:	01d8      	lsls	r0, r3, #7
 800deea:	f140 8135 	bpl.w	800e158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800deee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800def0:	2b03      	cmp	r3, #3
 800def2:	f200 8176 	bhi.w	800e1e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800def6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800defa:	0126      	.short	0x0126
 800defc:	016d0121 	.word	0x016d0121
 800df00:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df02:	2100      	movs	r1, #0
 800df04:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800df08:	f7ff fe70 	bl	800dbec <RCCEx_PLL3_Config>
 800df0c:	e732      	b.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800df0e:	2601      	movs	r6, #1
 800df10:	4634      	mov	r4, r6
 800df12:	e73a      	b.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0xae>
 800df14:	4626      	mov	r6, r4
 800df16:	e738      	b.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800df18:	2bc0      	cmp	r3, #192	; 0xc0
 800df1a:	d003      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800df1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df20:	f47f af42 	bne.w	800dda8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800df24:	b9d4      	cbnz	r4, 800df5c <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800df26:	4a2a      	ldr	r2, [pc, #168]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df28:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800df2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800df2c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800df30:	430b      	orrs	r3, r1
 800df32:	6513      	str	r3, [r2, #80]	; 0x50
 800df34:	e73a      	b.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df36:	4a26      	ldr	r2, [pc, #152]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800df3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800df40:	e7f0      	b.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df42:	2100      	movs	r1, #0
 800df44:	f105 0008 	add.w	r0, r5, #8
 800df48:	f7ff fdd8 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df4c:	4604      	mov	r4, r0
        break;
 800df4e:	e7e9      	b.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df50:	2100      	movs	r1, #0
 800df52:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800df56:	f7ff fe49 	bl	800dbec <RCCEx_PLL3_Config>
 800df5a:	e7f7      	b.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x270>
 800df5c:	4626      	mov	r6, r4
 800df5e:	e725      	b.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800df60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800df64:	d003      	beq.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800df66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800df6a:	f47f af31 	bne.w	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800df6e:	b9dc      	cbnz	r4, 800dfa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800df70:	4a17      	ldr	r2, [pc, #92]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df72:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800df76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800df78:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800df7c:	430b      	orrs	r3, r1
 800df7e:	6593      	str	r3, [r2, #88]	; 0x58
 800df80:	e728      	b.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df82:	4a13      	ldr	r2, [pc, #76]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800df86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df8a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800df8c:	e7ef      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df8e:	2100      	movs	r1, #0
 800df90:	f105 0008 	add.w	r0, r5, #8
 800df94:	f7ff fdb2 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df98:	4604      	mov	r4, r0
        break;
 800df9a:	e7e8      	b.n	800df6e <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800df9c:	2100      	movs	r1, #0
 800df9e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800dfa2:	f7ff fe23 	bl	800dbec <RCCEx_PLL3_Config>
 800dfa6:	e7f7      	b.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800dfa8:	4626      	mov	r6, r4
 800dfaa:	e713      	b.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800dfac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dfb0:	d003      	beq.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800dfb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dfb6:	f47f af1f 	bne.w	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800dfba:	b9f4      	cbnz	r4, 800dffa <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dfbc:	4a04      	ldr	r2, [pc, #16]	; (800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dfbe:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800dfc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800dfc4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	6593      	str	r3, [r2, #88]	; 0x58
 800dfcc:	e716      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x120>
 800dfce:	bf00      	nop
 800dfd0:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd4:	4aa1      	ldr	r2, [pc, #644]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800dfd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800dfd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfdc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800dfde:	e7ec      	b.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	f105 0008 	add.w	r0, r5, #8
 800dfe6:	f7ff fd89 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfea:	4604      	mov	r4, r0
        break;
 800dfec:	e7e5      	b.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfee:	2100      	movs	r1, #0
 800dff0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800dff4:	f7ff fdfa 	bl	800dbec <RCCEx_PLL3_Config>
 800dff8:	e7f7      	b.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800dffa:	4626      	mov	r6, r4
 800dffc:	e6fe      	b.n	800ddfc <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800dffe:	2b30      	cmp	r3, #48	; 0x30
 800e000:	f47f af0b 	bne.w	800de1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800e004:	b9a4      	cbnz	r4, 800e030 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e006:	4a95      	ldr	r2, [pc, #596]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e008:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800e00a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e00c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e010:	430b      	orrs	r3, r1
 800e012:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e014:	e703      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e016:	4a91      	ldr	r2, [pc, #580]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e018:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e01e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e020:	e7f0      	b.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e022:	2102      	movs	r1, #2
 800e024:	f105 0008 	add.w	r0, r5, #8
 800e028:	f7ff fd68 	bl	800dafc <RCCEx_PLL2_Config>
 800e02c:	4604      	mov	r4, r0
        break;
 800e02e:	e7e9      	b.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800e030:	4626      	mov	r6, r4
 800e032:	e6f4      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800e034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e038:	d003      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800e03a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e03e:	f47f aeff 	bne.w	800de40 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800e042:	b9d4      	cbnz	r4, 800e07a <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e044:	4a85      	ldr	r2, [pc, #532]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e046:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800e048:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e04a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e04e:	430b      	orrs	r3, r1
 800e050:	6513      	str	r3, [r2, #80]	; 0x50
 800e052:	e6f7      	b.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e054:	4a81      	ldr	r2, [pc, #516]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e056:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e05c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800e05e:	e7f0      	b.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e060:	2100      	movs	r1, #0
 800e062:	f105 0008 	add.w	r0, r5, #8
 800e066:	f7ff fd49 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e06a:	4604      	mov	r4, r0
        break;
 800e06c:	e7e9      	b.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e06e:	2100      	movs	r1, #0
 800e070:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e074:	f7ff fdba 	bl	800dbec <RCCEx_PLL3_Config>
 800e078:	e7f7      	b.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800e07a:	4626      	mov	r6, r4
 800e07c:	e6e2      	b.n	800de44 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800e07e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e082:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800e086:	d003      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800e088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e08c:	f47f aeeb 	bne.w	800de66 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800e090:	b9a4      	cbnz	r4, 800e0bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e092:	4a72      	ldr	r2, [pc, #456]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e094:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800e096:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e098:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800e09c:	430b      	orrs	r3, r1
 800e09e:	6513      	str	r3, [r2, #80]	; 0x50
 800e0a0:	e6e3      	b.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	f105 0008 	add.w	r0, r5, #8
 800e0a8:	f7ff fd28 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0ac:	4604      	mov	r4, r0
        break;
 800e0ae:	e7ef      	b.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0b0:	2101      	movs	r1, #1
 800e0b2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e0b6:	f7ff fd99 	bl	800dbec <RCCEx_PLL3_Config>
 800e0ba:	e7f7      	b.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800e0bc:	4626      	mov	r6, r4
 800e0be:	e6d4      	b.n	800de6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800e0c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e0c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e0c8:	d003      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800e0ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0ce:	f47f aede 	bne.w	800de8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800e0d2:	b9ac      	cbnz	r4, 800e100 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e0d4:	4a61      	ldr	r2, [pc, #388]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e0d6:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800e0da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e0dc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800e0e0:	430b      	orrs	r3, r1
 800e0e2:	6593      	str	r3, [r2, #88]	; 0x58
 800e0e4:	e6d5      	b.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	f105 0008 	add.w	r0, r5, #8
 800e0ec:	f7ff fd06 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0f0:	4604      	mov	r4, r0
        break;
 800e0f2:	e7ee      	b.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e0fa:	f7ff fd77 	bl	800dbec <RCCEx_PLL3_Config>
 800e0fe:	e7f7      	b.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e100:	4626      	mov	r6, r4
 800e102:	e6c6      	b.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800e104:	2601      	movs	r6, #1
 800e106:	4634      	mov	r4, r6
 800e108:	e6dc      	b.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e10a:	4626      	mov	r6, r4
 800e10c:	e6da      	b.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e10e:	4a53      	ldr	r2, [pc, #332]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e110:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e116:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e118:	b974      	cbnz	r4, 800e138 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e11a:	4a50      	ldr	r2, [pc, #320]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e11c:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800e11e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e120:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800e124:	430b      	orrs	r3, r1
 800e126:	6513      	str	r3, [r2, #80]	; 0x50
 800e128:	e6dd      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e12a:	2101      	movs	r1, #1
 800e12c:	f105 0008 	add.w	r0, r5, #8
 800e130:	f7ff fce4 	bl	800dafc <RCCEx_PLL2_Config>
 800e134:	4604      	mov	r4, r0
        break;
 800e136:	e7ef      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800e138:	4626      	mov	r6, r4
 800e13a:	e6d4      	b.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e13c:	4a47      	ldr	r2, [pc, #284]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e13e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e144:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e146:	2c00      	cmp	r4, #0
 800e148:	d14e      	bne.n	800e1e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e14a:	4a44      	ldr	r2, [pc, #272]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e14c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800e14e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e150:	f023 0303 	bic.w	r3, r3, #3
 800e154:	430b      	orrs	r3, r1
 800e156:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e158:	682b      	ldr	r3, [r5, #0]
 800e15a:	0259      	lsls	r1, r3, #9
 800e15c:	d54e      	bpl.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e15e:	4f40      	ldr	r7, [pc, #256]	; (800e260 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e166:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800e168:	f7fc feba 	bl	800aee0 <HAL_GetTick>
 800e16c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	05da      	lsls	r2, r3, #23
 800e172:	d53b      	bpl.n	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800e174:	2c00      	cmp	r4, #0
 800e176:	d16f      	bne.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e178:	4b38      	ldr	r3, [pc, #224]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e17a:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800e17e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e180:	4042      	eors	r2, r0
 800e182:	f412 7f40 	tst.w	r2, #768	; 0x300
 800e186:	d00b      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e188:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800e18a:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e18c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e190:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800e194:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e196:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e198:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800e19c:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800e19e:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e1a0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800e1a4:	d043      	beq.n	800e22e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1a6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800e1aa:	492c      	ldr	r1, [pc, #176]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e1ac:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800e1b0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e1b4:	d14c      	bne.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800e1b6:	6908      	ldr	r0, [r1, #16]
 800e1b8:	4a2a      	ldr	r2, [pc, #168]	; (800e264 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800e1ba:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800e1be:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800e1c2:	4302      	orrs	r2, r0
 800e1c4:	610a      	str	r2, [r1, #16]
 800e1c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1ca:	4a24      	ldr	r2, [pc, #144]	; (800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800e1cc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800e1ce:	430b      	orrs	r3, r1
 800e1d0:	6713      	str	r3, [r2, #112]	; 0x70
 800e1d2:	e013      	b.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e1d4:	2102      	movs	r1, #2
 800e1d6:	f105 0008 	add.w	r0, r5, #8
 800e1da:	f7ff fc8f 	bl	800dafc <RCCEx_PLL2_Config>
 800e1de:	4604      	mov	r4, r0
        break;
 800e1e0:	e7b1      	b.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800e1e2:	2601      	movs	r6, #1
 800e1e4:	4634      	mov	r4, r6
 800e1e6:	e7b7      	b.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800e1e8:	4626      	mov	r6, r4
 800e1ea:	e7b5      	b.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e1ec:	f7fc fe78 	bl	800aee0 <HAL_GetTick>
 800e1f0:	eba0 0008 	sub.w	r0, r0, r8
 800e1f4:	2864      	cmp	r0, #100	; 0x64
 800e1f6:	d9ba      	bls.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800e1f8:	2603      	movs	r6, #3
 800e1fa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	07d8      	lsls	r0, r3, #31
 800e200:	d50a      	bpl.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800e202:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800e206:	2b10      	cmp	r3, #16
 800e208:	d045      	beq.n	800e296 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800e20a:	d82d      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d031      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e210:	2b08      	cmp	r3, #8
 800e212:	d039      	beq.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800e214:	2601      	movs	r6, #1
 800e216:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e218:	682b      	ldr	r3, [r5, #0]
 800e21a:	0799      	lsls	r1, r3, #30
 800e21c:	d551      	bpl.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e21e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800e220:	2b05      	cmp	r3, #5
 800e222:	d864      	bhi.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e224:	e8df f003 	tbb	[pc, r3]
 800e228:	455d3f45 	.word	0x455d3f45
 800e22c:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800e22e:	f7fc fe57 	bl	800aee0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e232:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800e25c <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800e236:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e238:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e23c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800e240:	079b      	lsls	r3, r3, #30
 800e242:	d4b0      	bmi.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e244:	f7fc fe4c 	bl	800aee0 <HAL_GetTick>
 800e248:	1bc0      	subs	r0, r0, r7
 800e24a:	4548      	cmp	r0, r9
 800e24c:	d9f6      	bls.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x560>
 800e24e:	e7d3      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e250:	690a      	ldr	r2, [r1, #16]
 800e252:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800e256:	e7b5      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800e258:	4626      	mov	r6, r4
 800e25a:	e7cf      	b.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800e25c:	58024400 	.word	0x58024400
 800e260:	58024800 	.word	0x58024800
 800e264:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800e268:	f023 0208 	bic.w	r2, r3, #8
 800e26c:	2a20      	cmp	r2, #32
 800e26e:	d001      	beq.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e270:	2b18      	cmp	r3, #24
 800e272:	d1cf      	bne.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800e274:	b9ac      	cbnz	r4, 800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e276:	4a20      	ldr	r2, [pc, #128]	; (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800e278:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800e27c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e27e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800e282:	430b      	orrs	r3, r1
 800e284:	6553      	str	r3, [r2, #84]	; 0x54
 800e286:	e7c7      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e288:	2101      	movs	r1, #1
 800e28a:	f105 0008 	add.w	r0, r5, #8
 800e28e:	f7ff fc35 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e292:	4604      	mov	r4, r0
        break;
 800e294:	e7ee      	b.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e296:	2101      	movs	r1, #1
 800e298:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e29c:	f7ff fca6 	bl	800dbec <RCCEx_PLL3_Config>
 800e2a0:	e7f7      	b.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800e2a2:	4626      	mov	r6, r4
 800e2a4:	e7b8      	b.n	800e218 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	f105 0008 	add.w	r0, r5, #8
 800e2ac:	f7ff fc26 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2b0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e2b2:	b9fc      	cbnz	r4, 800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e2b4:	4a10      	ldr	r2, [pc, #64]	; (800e2f8 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800e2b6:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800e2b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e2ba:	f023 0307 	bic.w	r3, r3, #7
 800e2be:	430b      	orrs	r3, r1
 800e2c0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2c2:	682b      	ldr	r3, [r5, #0]
 800e2c4:	075a      	lsls	r2, r3, #29
 800e2c6:	d52a      	bpl.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e2c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800e2cc:	2b05      	cmp	r3, #5
 800e2ce:	f200 817b 	bhi.w	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800e2d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e2d6:	0019      	.short	0x0019
 800e2d8:	01730013 	.word	0x01730013
 800e2dc:	00190019 	.word	0x00190019
 800e2e0:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e2e2:	2101      	movs	r1, #1
 800e2e4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e2e8:	f7ff fc80 	bl	800dbec <RCCEx_PLL3_Config>
 800e2ec:	e7e0      	b.n	800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e2ee:	2601      	movs	r6, #1
 800e2f0:	4634      	mov	r4, r6
 800e2f2:	e7e6      	b.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800e2f4:	4626      	mov	r6, r4
 800e2f6:	e7e4      	b.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800e2f8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	f105 0008 	add.w	r0, r5, #8
 800e302:	f7ff fbfb 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e306:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e308:	2c00      	cmp	r4, #0
 800e30a:	f040 8160 	bne.w	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e30e:	4aaa      	ldr	r2, [pc, #680]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e310:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800e314:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e316:	f023 0307 	bic.w	r3, r3, #7
 800e31a:	430b      	orrs	r3, r1
 800e31c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e31e:	682b      	ldr	r3, [r5, #0]
 800e320:	069b      	lsls	r3, r3, #26
 800e322:	d510      	bpl.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e324:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800e328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e32c:	f000 816b 	beq.w	800e606 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800e330:	f200 814f 	bhi.w	800e5d2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 8155 	beq.w	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800e33a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e33e:	f000 815b 	beq.w	800e5f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800e342:	2601      	movs	r6, #1
 800e344:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	065f      	lsls	r7, r3, #25
 800e34a:	d510      	bpl.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e34c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800e350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e354:	f000 8179 	beq.w	800e64a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e358:	f200 815d 	bhi.w	800e616 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 8163 	beq.w	800e628 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800e362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e366:	f000 8169 	beq.w	800e63c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e36a:	2601      	movs	r6, #1
 800e36c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e36e:	682b      	ldr	r3, [r5, #0]
 800e370:	0618      	lsls	r0, r3, #24
 800e372:	d510      	bpl.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e374:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800e378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e37c:	f000 8187 	beq.w	800e68e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800e380:	f200 816b 	bhi.w	800e65a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 8171 	beq.w	800e66c <HAL_RCCEx_PeriphCLKConfig+0x990>
 800e38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e38e:	f000 8177 	beq.w	800e680 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800e392:	2601      	movs	r6, #1
 800e394:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e396:	682b      	ldr	r3, [r5, #0]
 800e398:	0719      	lsls	r1, r3, #28
 800e39a:	d514      	bpl.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e39c:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800e3a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a4:	d107      	bne.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e3a6:	2102      	movs	r1, #2
 800e3a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e3ac:	f7ff fc1e 	bl	800dbec <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	bf18      	it	ne
 800e3b4:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e3b6:	4a80      	ldr	r2, [pc, #512]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e3b8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800e3bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e3be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e3c2:	430b      	orrs	r3, r1
 800e3c4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e3c6:	682b      	ldr	r3, [r5, #0]
 800e3c8:	06da      	lsls	r2, r3, #27
 800e3ca:	d514      	bpl.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e3cc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800e3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3d4:	d107      	bne.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e3d6:	2102      	movs	r1, #2
 800e3d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e3dc:	f7ff fc06 	bl	800dbec <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	bf18      	it	ne
 800e3e4:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e3e6:	4a74      	ldr	r2, [pc, #464]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e3e8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800e3ec:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3f2:	430b      	orrs	r3, r1
 800e3f4:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e3f6:	682b      	ldr	r3, [r5, #0]
 800e3f8:	031b      	lsls	r3, r3, #12
 800e3fa:	d51b      	bpl.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800e3fc:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800e400:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e404:	f000 814b 	beq.w	800e69e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800e408:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800e40c:	d007      	beq.n	800e41e <HAL_RCCEx_PeriphCLKConfig+0x742>
 800e40e:	2900      	cmp	r1, #0
 800e410:	f040 814b 	bne.w	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e414:	f105 0008 	add.w	r0, r5, #8
 800e418:	f7ff fb70 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e41c:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800e41e:	2c00      	cmp	r4, #0
 800e420:	f040 8146 	bne.w	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e424:	4a64      	ldr	r2, [pc, #400]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e426:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800e42a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e42c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e430:	430b      	orrs	r3, r1
 800e432:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	035f      	lsls	r7, r3, #13
 800e438:	d51c      	bpl.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800e43a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800e43e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e442:	f000 8137 	beq.w	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800e446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e44a:	d008      	beq.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x782>
 800e44c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e450:	f040 8137 	bne.w	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e454:	4a58      	ldr	r2, [pc, #352]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e456:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e45c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e45e:	2c00      	cmp	r4, #0
 800e460:	f040 8132 	bne.w	800e6c8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e464:	4a54      	ldr	r2, [pc, #336]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e466:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800e46a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e46c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e470:	430b      	orrs	r3, r1
 800e472:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e474:	682b      	ldr	r3, [r5, #0]
 800e476:	03d8      	lsls	r0, r3, #15
 800e478:	d509      	bpl.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800e47a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 8125 	beq.w	800e6cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800e482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e486:	f000 812f 	beq.w	800e6e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800e48a:	2601      	movs	r6, #1
 800e48c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	0099      	lsls	r1, r3, #2
 800e492:	d507      	bpl.n	800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e494:	2102      	movs	r1, #2
 800e496:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e49a:	f7ff fba7 	bl	800dbec <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	bf18      	it	ne
 800e4a2:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e4a4:	e9d5 3100 	ldrd	r3, r1, [r5]
 800e4a8:	039a      	lsls	r2, r3, #14
 800e4aa:	d50b      	bpl.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800e4ac:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800e4b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800e4b4:	f000 812f 	beq.w	800e716 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800e4b8:	f200 811f 	bhi.w	800e6fa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	f000 8122 	beq.w	800e706 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800e4c2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e4c4:	02df      	lsls	r7, r3, #11
 800e4c6:	d506      	bpl.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e4c8:	483b      	ldr	r0, [pc, #236]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e4ca:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800e4cc:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e4ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800e4d2:	4322      	orrs	r2, r4
 800e4d4:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e4d6:	00dc      	lsls	r4, r3, #3
 800e4d8:	d507      	bpl.n	800e4ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e4da:	4837      	ldr	r0, [pc, #220]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e4dc:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800e4e0:	6902      	ldr	r2, [r0, #16]
 800e4e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e4e6:	4322      	orrs	r2, r4
 800e4e8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e4ea:	0298      	lsls	r0, r3, #10
 800e4ec:	d506      	bpl.n	800e4fc <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e4ee:	4832      	ldr	r0, [pc, #200]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e4f0:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800e4f2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e4f4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800e4f8:	4322      	orrs	r2, r4
 800e4fa:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e4fc:	005a      	lsls	r2, r3, #1
 800e4fe:	d509      	bpl.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e500:	4a2d      	ldr	r2, [pc, #180]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e502:	6910      	ldr	r0, [r2, #16]
 800e504:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800e508:	6110      	str	r0, [r2, #16]
 800e50a:	6910      	ldr	r0, [r2, #16]
 800e50c:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800e510:	4320      	orrs	r0, r4
 800e512:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e514:	2b00      	cmp	r3, #0
 800e516:	da06      	bge.n	800e526 <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e518:	4827      	ldr	r0, [pc, #156]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e51a:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800e51c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800e51e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e522:	4322      	orrs	r2, r4
 800e524:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e526:	021b      	lsls	r3, r3, #8
 800e528:	d507      	bpl.n	800e53a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e52a:	4a23      	ldr	r2, [pc, #140]	; (800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800e52c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800e530:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e532:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800e536:	4303      	orrs	r3, r0
 800e538:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e53a:	07cf      	lsls	r7, r1, #31
 800e53c:	d507      	bpl.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e53e:	2100      	movs	r1, #0
 800e540:	f105 0008 	add.w	r0, r5, #8
 800e544:	f7ff fada 	bl	800dafc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e548:	2800      	cmp	r0, #0
 800e54a:	bf18      	it	ne
 800e54c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e54e:	686b      	ldr	r3, [r5, #4]
 800e550:	079c      	lsls	r4, r3, #30
 800e552:	d507      	bpl.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e554:	2101      	movs	r1, #1
 800e556:	f105 0008 	add.w	r0, r5, #8
 800e55a:	f7ff facf 	bl	800dafc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e55e:	2800      	cmp	r0, #0
 800e560:	bf18      	it	ne
 800e562:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e564:	686b      	ldr	r3, [r5, #4]
 800e566:	0758      	lsls	r0, r3, #29
 800e568:	d507      	bpl.n	800e57a <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e56a:	2102      	movs	r1, #2
 800e56c:	f105 0008 	add.w	r0, r5, #8
 800e570:	f7ff fac4 	bl	800dafc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800e574:	2800      	cmp	r0, #0
 800e576:	bf18      	it	ne
 800e578:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e57a:	686b      	ldr	r3, [r5, #4]
 800e57c:	0719      	lsls	r1, r3, #28
 800e57e:	d507      	bpl.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e580:	2100      	movs	r1, #0
 800e582:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e586:	f7ff fb31 	bl	800dbec <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e58a:	2800      	cmp	r0, #0
 800e58c:	bf18      	it	ne
 800e58e:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e590:	686b      	ldr	r3, [r5, #4]
 800e592:	06da      	lsls	r2, r3, #27
 800e594:	d507      	bpl.n	800e5a6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e596:	2101      	movs	r1, #1
 800e598:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e59c:	f7ff fb26 	bl	800dbec <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	bf18      	it	ne
 800e5a4:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e5a6:	686b      	ldr	r3, [r5, #4]
 800e5a8:	069b      	lsls	r3, r3, #26
 800e5aa:	f100 80bc 	bmi.w	800e726 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800e5ae:	1e30      	subs	r0, r6, #0
 800e5b0:	bf18      	it	ne
 800e5b2:	2001      	movne	r0, #1
}
 800e5b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5b8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5bc:	2101      	movs	r1, #1
 800e5be:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e5c2:	f7ff fb13 	bl	800dbec <RCCEx_PLL3_Config>
 800e5c6:	e69e      	b.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e5c8:	2601      	movs	r6, #1
 800e5ca:	4634      	mov	r4, r6
 800e5cc:	e6a7      	b.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800e5ce:	4626      	mov	r6, r4
 800e5d0:	e6a5      	b.n	800e31e <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e5d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e5d6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800e5da:	d003      	beq.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800e5dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e5e0:	f47f aeaf 	bne.w	800e342 <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800e5e4:	b9ac      	cbnz	r4, 800e612 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5e6:	4a55      	ldr	r2, [pc, #340]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e5e8:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800e5ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800e5ee:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800e5f2:	430b      	orrs	r3, r1
 800e5f4:	6553      	str	r3, [r2, #84]	; 0x54
 800e5f6:	e6a6      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	f105 0008 	add.w	r0, r5, #8
 800e5fe:	f7ff fa7d 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e602:	4604      	mov	r4, r0
        break;
 800e604:	e7ee      	b.n	800e5e4 <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e606:	2102      	movs	r1, #2
 800e608:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e60c:	f7ff faee 	bl	800dbec <RCCEx_PLL3_Config>
 800e610:	e7f7      	b.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800e612:	4626      	mov	r6, r4
 800e614:	e697      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e61a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800e61e:	d003      	beq.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800e620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e624:	f47f aea1 	bne.w	800e36a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800e628:	b9ac      	cbnz	r4, 800e656 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e62a:	4a44      	ldr	r2, [pc, #272]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e62c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800e630:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e632:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800e636:	430b      	orrs	r3, r1
 800e638:	6593      	str	r3, [r2, #88]	; 0x58
 800e63a:	e698      	b.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e63c:	2100      	movs	r1, #0
 800e63e:	f105 0008 	add.w	r0, r5, #8
 800e642:	f7ff fa5b 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e646:	4604      	mov	r4, r0
        break;
 800e648:	e7ee      	b.n	800e628 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e64a:	2102      	movs	r1, #2
 800e64c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e650:	f7ff facc 	bl	800dbec <RCCEx_PLL3_Config>
 800e654:	e7f7      	b.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e656:	4626      	mov	r6, r4
 800e658:	e689      	b.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e65a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e65e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e662:	d003      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x990>
 800e664:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e668:	f47f ae93 	bne.w	800e392 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800e66c:	b9ac      	cbnz	r4, 800e69a <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e66e:	4a33      	ldr	r2, [pc, #204]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e670:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800e674:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800e676:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800e67a:	430b      	orrs	r3, r1
 800e67c:	6593      	str	r3, [r2, #88]	; 0x58
 800e67e:	e68a      	b.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e680:	2100      	movs	r1, #0
 800e682:	f105 0008 	add.w	r0, r5, #8
 800e686:	f7ff fa39 	bl	800dafc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e68a:	4604      	mov	r4, r0
        break;
 800e68c:	e7ee      	b.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e68e:	2102      	movs	r1, #2
 800e690:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e694:	f7ff faaa 	bl	800dbec <RCCEx_PLL3_Config>
 800e698:	e7f7      	b.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800e69a:	4626      	mov	r6, r4
 800e69c:	e67b      	b.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e69e:	2102      	movs	r1, #2
 800e6a0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e6a4:	f7ff faa2 	bl	800dbec <RCCEx_PLL3_Config>
 800e6a8:	e6b8      	b.n	800e41c <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800e6aa:	2601      	movs	r6, #1
 800e6ac:	4634      	mov	r4, r6
 800e6ae:	e6c1      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800e6b0:	4626      	mov	r6, r4
 800e6b2:	e6bf      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6b4:	2101      	movs	r1, #1
 800e6b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e6ba:	f7ff fa97 	bl	800dbec <RCCEx_PLL3_Config>
 800e6be:	4604      	mov	r4, r0
        break;
 800e6c0:	e6cd      	b.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800e6c2:	2601      	movs	r6, #1
 800e6c4:	4634      	mov	r4, r6
 800e6c6:	e6d5      	b.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x798>
 800e6c8:	4626      	mov	r6, r4
 800e6ca:	e6d3      	b.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6cc:	4a1b      	ldr	r2, [pc, #108]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e6ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e6d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800e6d6:	b974      	cbnz	r4, 800e6f6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e6d8:	4a18      	ldr	r2, [pc, #96]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e6da:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800e6dc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800e6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6e2:	430b      	orrs	r3, r1
 800e6e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e6e6:	e6d2      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e6e8:	2102      	movs	r1, #2
 800e6ea:	f105 0008 	add.w	r0, r5, #8
 800e6ee:	f7ff fa05 	bl	800dafc <RCCEx_PLL2_Config>
 800e6f2:	4604      	mov	r4, r0
        break;
 800e6f4:	e7ef      	b.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800e6f6:	4626      	mov	r6, r4
 800e6f8:	e6c9      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800e6fa:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800e6fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e702:	f47f aede 	bne.w	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800e706:	b964      	cbnz	r4, 800e722 <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e708:	4c0c      	ldr	r4, [pc, #48]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e70a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800e70c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e710:	4302      	orrs	r2, r0
 800e712:	6562      	str	r2, [r4, #84]	; 0x54
 800e714:	e6d6      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e716:	4f09      	ldr	r7, [pc, #36]	; (800e73c <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800e718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e71a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e71e:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800e720:	e7f1      	b.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800e722:	4626      	mov	r6, r4
 800e724:	e6ce      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e726:	2102      	movs	r1, #2
 800e728:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800e72c:	f7ff fa5e 	bl	800dbec <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800e730:	2800      	cmp	r0, #0
 800e732:	f43f af3c 	beq.w	800e5ae <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800e736:	2001      	movs	r0, #1
 800e738:	e73c      	b.n	800e5b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800e73a:	bf00      	nop
 800e73c:	58024400 	.word	0x58024400

0800e740 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e744:	4604      	mov	r4, r0
 800e746:	b1f0      	cbz	r0, 800e786 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e748:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e74c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e750:	b91b      	cbnz	r3, 800e75a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e752:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e756:	f7f2 fd79 	bl	800124c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e75a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e75c:	1d21      	adds	r1, r4, #4
 800e75e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e760:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e764:	f000 fa1f 	bl	800eba6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e768:	6862      	ldr	r2, [r4, #4]
 800e76a:	4629      	mov	r1, r5
 800e76c:	6820      	ldr	r0, [r4, #0]
 800e76e:	f000 fa55 	bl	800ec1c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800e772:	4a06      	ldr	r2, [pc, #24]	; (800e78c <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800e774:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800e776:	6813      	ldr	r3, [r2, #0]
 800e778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e77c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e77e:	2301      	movs	r3, #1
 800e780:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800e784:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e786:	2001      	movs	r0, #1
 800e788:	e7fc      	b.n	800e784 <HAL_SDRAM_Init+0x44>
 800e78a:	bf00      	nop
 800e78c:	52004000 	.word	0x52004000

0800e790 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800e790:	b510      	push	{r4, lr}
 800e792:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800e794:	f7f2 fde8 	bl	8001368 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800e798:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e79c:	f000 fa74 	bl	800ec88 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800e7a6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800e7aa:	bd10      	pop	{r4, pc}

0800e7ac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e7ac:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e7ae:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e7b6:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e7b8:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800e7ba:	d010      	beq.n	800e7de <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e7bc:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800e7c0:	2c01      	cmp	r4, #1
 800e7c2:	d110      	bne.n	800e7e6 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e7c4:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e7c6:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e7c8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e7cc:	f000 fa6b 	bl	800eca6 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e7d0:	6833      	ldr	r3, [r6, #0]
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d104      	bne.n	800e7e0 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e7d6:	2305      	movs	r3, #5
 800e7d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e7dc:	2000      	movs	r0, #0
}
 800e7de:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e7e0:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800e7e4:	e7fa      	b.n	800e7dc <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	e7f9      	b.n	800e7de <HAL_SDRAM_SendCommand+0x32>

0800e7ea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e7ea:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e7ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e7f0:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	b2d8      	uxtb	r0, r3
 800e7f6:	d00d      	beq.n	800e814 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e7f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	b2dd      	uxtb	r5, r3
 800e800:	d109      	bne.n	800e816 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e802:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e804:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e806:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e80a:	f000 fa5e 	bl	800ecca <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e80e:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e810:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800e814:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800e816:	2001      	movs	r0, #1
 800e818:	e7fc      	b.n	800e814 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800e81a <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e81a:	4770      	bx	lr

0800e81c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e81c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e820:	2b01      	cmp	r3, #1
 800e822:	d12f      	bne.n	800e884 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e824:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e826:	4a18      	ldr	r2, [pc, #96]	; (800e888 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800e828:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e82c:	6803      	ldr	r3, [r0, #0]
 800e82e:	4293      	cmp	r3, r2
 800e830:	d01a      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e836:	d017      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e838:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d013      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e840:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e844:	4293      	cmp	r3, r2
 800e846:	d00f      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e848:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d00b      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e850:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e854:	4293      	cmp	r3, r2
 800e856:	d007      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e858:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d003      	beq.n	800e868 <HAL_TIM_Base_Start+0x4c>
 800e860:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e864:	4293      	cmp	r3, r2
 800e866:	d107      	bne.n	800e878 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e868:	6899      	ldr	r1, [r3, #8]
 800e86a:	4a08      	ldr	r2, [pc, #32]	; (800e88c <HAL_TIM_Base_Start+0x70>)
 800e86c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e86e:	2a06      	cmp	r2, #6
 800e870:	d006      	beq.n	800e880 <HAL_TIM_Base_Start+0x64>
 800e872:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e876:	d003      	beq.n	800e880 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e878:	681a      	ldr	r2, [r3, #0]
 800e87a:	f042 0201 	orr.w	r2, r2, #1
 800e87e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e880:	2000      	movs	r0, #0
}
 800e882:	4770      	bx	lr
    return HAL_ERROR;
 800e884:	2001      	movs	r0, #1
 800e886:	4770      	bx	lr
 800e888:	40010000 	.word	0x40010000
 800e88c:	00010007 	.word	0x00010007

0800e890 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e890:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800e894:	2b01      	cmp	r3, #1
 800e896:	d133      	bne.n	800e900 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e898:	2302      	movs	r3, #2
 800e89a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e89e:	6803      	ldr	r3, [r0, #0]
 800e8a0:	68da      	ldr	r2, [r3, #12]
 800e8a2:	f042 0201 	orr.w	r2, r2, #1
 800e8a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8a8:	4a16      	ldr	r2, [pc, #88]	; (800e904 <HAL_TIM_Base_Start_IT+0x74>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d01a      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8b2:	d017      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8b4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	d013      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d00f      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d00b      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8cc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d007      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8d4:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d003      	beq.n	800e8e4 <HAL_TIM_Base_Start_IT+0x54>
 800e8dc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d107      	bne.n	800e8f4 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8e4:	6899      	ldr	r1, [r3, #8]
 800e8e6:	4a08      	ldr	r2, [pc, #32]	; (800e908 <HAL_TIM_Base_Start_IT+0x78>)
 800e8e8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8ea:	2a06      	cmp	r2, #6
 800e8ec:	d006      	beq.n	800e8fc <HAL_TIM_Base_Start_IT+0x6c>
 800e8ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e8f2:	d003      	beq.n	800e8fc <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	f042 0201 	orr.w	r2, r2, #1
 800e8fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e8fc:	2000      	movs	r0, #0
}
 800e8fe:	4770      	bx	lr
    return HAL_ERROR;
 800e900:	2001      	movs	r0, #1
 800e902:	4770      	bx	lr
 800e904:	40010000 	.word	0x40010000
 800e908:	00010007 	.word	0x00010007

0800e90c <HAL_TIM_OC_DelayElapsedCallback>:
 800e90c:	4770      	bx	lr

0800e90e <HAL_TIM_IC_CaptureCallback>:
 800e90e:	4770      	bx	lr

0800e910 <HAL_TIM_PWM_PulseFinishedCallback>:
 800e910:	4770      	bx	lr

0800e912 <HAL_TIM_TriggerCallback>:
 800e912:	4770      	bx	lr

0800e914 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e914:	6803      	ldr	r3, [r0, #0]
 800e916:	691a      	ldr	r2, [r3, #16]
 800e918:	0791      	lsls	r1, r2, #30
{
 800e91a:	b510      	push	{r4, lr}
 800e91c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e91e:	d50f      	bpl.n	800e940 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e920:	68da      	ldr	r2, [r3, #12]
 800e922:	0792      	lsls	r2, r2, #30
 800e924:	d50c      	bpl.n	800e940 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e926:	f06f 0202 	mvn.w	r2, #2
 800e92a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e92c:	2201      	movs	r2, #1
 800e92e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	0799      	lsls	r1, r3, #30
 800e934:	f000 8085 	beq.w	800ea42 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e938:	f7ff ffe9 	bl	800e90e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e93c:	2300      	movs	r3, #0
 800e93e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	691a      	ldr	r2, [r3, #16]
 800e944:	0752      	lsls	r2, r2, #29
 800e946:	d510      	bpl.n	800e96a <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e948:	68da      	ldr	r2, [r3, #12]
 800e94a:	0750      	lsls	r0, r2, #29
 800e94c:	d50d      	bpl.n	800e96a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e94e:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e952:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e956:	2202      	movs	r2, #2
 800e958:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e95a:	699b      	ldr	r3, [r3, #24]
 800e95c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e960:	d075      	beq.n	800ea4e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800e962:	f7ff ffd4 	bl	800e90e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e966:	2300      	movs	r3, #0
 800e968:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	691a      	ldr	r2, [r3, #16]
 800e96e:	0711      	lsls	r1, r2, #28
 800e970:	d50f      	bpl.n	800e992 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e972:	68da      	ldr	r2, [r3, #12]
 800e974:	0712      	lsls	r2, r2, #28
 800e976:	d50c      	bpl.n	800e992 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e978:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e97c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e97e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e980:	2204      	movs	r2, #4
 800e982:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e984:	69db      	ldr	r3, [r3, #28]
 800e986:	079b      	lsls	r3, r3, #30
 800e988:	d067      	beq.n	800ea5a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800e98a:	f7ff ffc0 	bl	800e90e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e98e:	2300      	movs	r3, #0
 800e990:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	691a      	ldr	r2, [r3, #16]
 800e996:	06d0      	lsls	r0, r2, #27
 800e998:	d510      	bpl.n	800e9bc <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e99a:	68da      	ldr	r2, [r3, #12]
 800e99c:	06d1      	lsls	r1, r2, #27
 800e99e:	d50d      	bpl.n	800e9bc <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9a0:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9a8:	2208      	movs	r2, #8
 800e9aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9ac:	69db      	ldr	r3, [r3, #28]
 800e9ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e9b2:	d058      	beq.n	800ea66 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800e9b4:	f7ff ffab 	bl	800e90e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	691a      	ldr	r2, [r3, #16]
 800e9c0:	07d2      	lsls	r2, r2, #31
 800e9c2:	d508      	bpl.n	800e9d6 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	07d0      	lsls	r0, r2, #31
 800e9c8:	d505      	bpl.n	800e9d6 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e9ca:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e9d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e9d2:	f7f2 fa89 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	691a      	ldr	r2, [r3, #16]
 800e9da:	0611      	lsls	r1, r2, #24
 800e9dc:	d508      	bpl.n	800e9f0 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e9de:	68da      	ldr	r2, [r3, #12]
 800e9e0:	0612      	lsls	r2, r2, #24
 800e9e2:	d505      	bpl.n	800e9f0 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e9ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e9ec:	f000 f8d9 	bl	800eba2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e9f0:	6823      	ldr	r3, [r4, #0]
 800e9f2:	691a      	ldr	r2, [r3, #16]
 800e9f4:	05d0      	lsls	r0, r2, #23
 800e9f6:	d508      	bpl.n	800ea0a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	0611      	lsls	r1, r2, #24
 800e9fc:	d505      	bpl.n	800ea0a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ea02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ea04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ea06:	f000 f8cd 	bl	800eba4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	691a      	ldr	r2, [r3, #16]
 800ea0e:	0652      	lsls	r2, r2, #25
 800ea10:	d508      	bpl.n	800ea24 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea12:	68da      	ldr	r2, [r3, #12]
 800ea14:	0650      	lsls	r0, r2, #25
 800ea16:	d505      	bpl.n	800ea24 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea18:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea1e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ea20:	f7ff ff77 	bl	800e912 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	691a      	ldr	r2, [r3, #16]
 800ea28:	0691      	lsls	r1, r2, #26
 800ea2a:	d522      	bpl.n	800ea72 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ea2c:	68da      	ldr	r2, [r3, #12]
 800ea2e:	0692      	lsls	r2, r2, #26
 800ea30:	d51f      	bpl.n	800ea72 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ea32:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ea38:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ea3e:	f000 b8af 	b.w	800eba0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea42:	f7ff ff63 	bl	800e90c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff ff62 	bl	800e910 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea4c:	e776      	b.n	800e93c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea4e:	f7ff ff5d 	bl	800e90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea52:	4620      	mov	r0, r4
 800ea54:	f7ff ff5c 	bl	800e910 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea58:	e785      	b.n	800e966 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea5a:	f7ff ff57 	bl	800e90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f7ff ff56 	bl	800e910 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea64:	e793      	b.n	800e98e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea66:	f7ff ff51 	bl	800e90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f7ff ff50 	bl	800e910 <HAL_TIM_PWM_PulseFinishedCallback>
 800ea70:	e7a2      	b.n	800e9b8 <HAL_TIM_IRQHandler+0xa4>
}
 800ea72:	bd10      	pop	{r4, pc}

0800ea74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea74:	4a30      	ldr	r2, [pc, #192]	; (800eb38 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800ea76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea78:	4290      	cmp	r0, r2
 800ea7a:	d012      	beq.n	800eaa2 <TIM_Base_SetConfig+0x2e>
 800ea7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ea80:	d00f      	beq.n	800eaa2 <TIM_Base_SetConfig+0x2e>
 800ea82:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ea86:	4290      	cmp	r0, r2
 800ea88:	d00b      	beq.n	800eaa2 <TIM_Base_SetConfig+0x2e>
 800ea8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea8e:	4290      	cmp	r0, r2
 800ea90:	d007      	beq.n	800eaa2 <TIM_Base_SetConfig+0x2e>
 800ea92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ea96:	4290      	cmp	r0, r2
 800ea98:	d003      	beq.n	800eaa2 <TIM_Base_SetConfig+0x2e>
 800ea9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ea9e:	4290      	cmp	r0, r2
 800eaa0:	d119      	bne.n	800ead6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800eaa2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800eaa8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eaaa:	4a23      	ldr	r2, [pc, #140]	; (800eb38 <TIM_Base_SetConfig+0xc4>)
 800eaac:	4290      	cmp	r0, r2
 800eaae:	d01d      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eab0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800eab4:	d01a      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eab6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800eaba:	4290      	cmp	r0, r2
 800eabc:	d016      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eabe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eac2:	4290      	cmp	r0, r2
 800eac4:	d012      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eac6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eaca:	4290      	cmp	r0, r2
 800eacc:	d00e      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eace:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ead2:	4290      	cmp	r0, r2
 800ead4:	d00a      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800ead6:	4a19      	ldr	r2, [pc, #100]	; (800eb3c <TIM_Base_SetConfig+0xc8>)
 800ead8:	4290      	cmp	r0, r2
 800eada:	d007      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eadc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eae0:	4290      	cmp	r0, r2
 800eae2:	d003      	beq.n	800eaec <TIM_Base_SetConfig+0x78>
 800eae4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800eae8:	4290      	cmp	r0, r2
 800eaea:	d103      	bne.n	800eaf4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eaec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eaf0:	68ca      	ldr	r2, [r1, #12]
 800eaf2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eaf4:	694a      	ldr	r2, [r1, #20]
 800eaf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eafa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800eafc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eafe:	688b      	ldr	r3, [r1, #8]
 800eb00:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800eb02:	680b      	ldr	r3, [r1, #0]
 800eb04:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eb06:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <TIM_Base_SetConfig+0xc4>)
 800eb08:	4298      	cmp	r0, r3
 800eb0a:	d00f      	beq.n	800eb2c <TIM_Base_SetConfig+0xb8>
 800eb0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb10:	4298      	cmp	r0, r3
 800eb12:	d00b      	beq.n	800eb2c <TIM_Base_SetConfig+0xb8>
 800eb14:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800eb18:	4298      	cmp	r0, r3
 800eb1a:	d007      	beq.n	800eb2c <TIM_Base_SetConfig+0xb8>
 800eb1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb20:	4298      	cmp	r0, r3
 800eb22:	d003      	beq.n	800eb2c <TIM_Base_SetConfig+0xb8>
 800eb24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eb28:	4298      	cmp	r0, r3
 800eb2a:	d101      	bne.n	800eb30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eb2c:	690b      	ldr	r3, [r1, #16]
 800eb2e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eb30:	2301      	movs	r3, #1
 800eb32:	6143      	str	r3, [r0, #20]
}
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	40010000 	.word	0x40010000
 800eb3c:	40014000 	.word	0x40014000

0800eb40 <HAL_TIM_Base_Init>:
{
 800eb40:	b510      	push	{r4, lr}
  if (htim == NULL)
 800eb42:	4604      	mov	r4, r0
 800eb44:	b350      	cbz	r0, 800eb9c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eb46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800eb4a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eb4e:	b91b      	cbnz	r3, 800eb58 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800eb50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800eb54:	f7ff fe61 	bl	800e81a <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800eb58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb5a:	6820      	ldr	r0, [r4, #0]
 800eb5c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800eb5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb62:	f7ff ff87 	bl	800ea74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb66:	2301      	movs	r3, #1
  return HAL_OK;
 800eb68:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb6a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800eb72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800eb76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800eb7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800eb7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800eb8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800eb92:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800eb96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800eb9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800eb9c:	2001      	movs	r0, #1
 800eb9e:	e7fc      	b.n	800eb9a <HAL_TIM_Base_Init+0x5a>

0800eba0 <HAL_TIMEx_CommutCallback>:
 800eba0:	4770      	bx	lr

0800eba2 <HAL_TIMEx_BreakCallback>:
 800eba2:	4770      	bx	lr

0800eba4 <HAL_TIMEx_Break2Callback>:
 800eba4:	4770      	bx	lr

0800eba6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800eba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ebaa:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ebac:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800ebb0:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800ebb4:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800ebb8:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800ebbc:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800ebc0:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ebc2:	b9a2      	cbnz	r2, 800ebee <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ebc4:	ea43 0209 	orr.w	r2, r3, r9
 800ebc8:	6801      	ldr	r1, [r0, #0]
 800ebca:	432a      	orrs	r2, r5
 800ebcc:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ebd0:	ea42 0308 	orr.w	r3, r2, r8
 800ebd4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800ebd8:	ea43 030e 	orr.w	r3, r3, lr
 800ebdc:	ea43 030c 	orr.w	r3, r3, ip
 800ebe0:	433b      	orrs	r3, r7
 800ebe2:	4333      	orrs	r3, r6
 800ebe4:	430b      	orrs	r3, r1
 800ebe6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ebe8:	2000      	movs	r0, #0
 800ebea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ebee:	6802      	ldr	r2, [r0, #0]
 800ebf0:	ea43 0309 	orr.w	r3, r3, r9
 800ebf4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800ebf8:	4313      	orrs	r3, r2
 800ebfa:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ebfc:	ea45 0308 	orr.w	r3, r5, r8
 800ec00:	6842      	ldr	r2, [r0, #4]
 800ec02:	ea43 030e 	orr.w	r3, r3, lr
 800ec06:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800ec0a:	ea43 030c 	orr.w	r3, r3, ip
 800ec0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800ec12:	433b      	orrs	r3, r7
 800ec14:	4333      	orrs	r3, r6
 800ec16:	4313      	orrs	r3, r2
 800ec18:	6043      	str	r3, [r0, #4]
 800ec1a:	e7e5      	b.n	800ebe8 <FMC_SDRAM_Init+0x42>

0800ec1c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec1c:	68cb      	ldr	r3, [r1, #12]
 800ec1e:	f103 3cff 	add.w	ip, r3, #4294967295
 800ec22:	694b      	ldr	r3, [r1, #20]
{
 800ec24:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec26:	3b01      	subs	r3, #1
 800ec28:	680f      	ldr	r7, [r1, #0]
 800ec2a:	684c      	ldr	r4, [r1, #4]
 800ec2c:	688e      	ldr	r6, [r1, #8]
 800ec2e:	051b      	lsls	r3, r3, #20
 800ec30:	690d      	ldr	r5, [r1, #16]
 800ec32:	3c01      	subs	r4, #1
 800ec34:	6989      	ldr	r1, [r1, #24]
 800ec36:	3e01      	subs	r6, #1
 800ec38:	3d01      	subs	r5, #1
 800ec3a:	3f01      	subs	r7, #1
 800ec3c:	3901      	subs	r1, #1
 800ec3e:	0124      	lsls	r4, r4, #4
 800ec40:	0236      	lsls	r6, r6, #8
 800ec42:	042d      	lsls	r5, r5, #16
 800ec44:	0609      	lsls	r1, r1, #24
 800ec46:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ec4a:	b95a      	cbnz	r2, 800ec64 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec4c:	433b      	orrs	r3, r7
 800ec4e:	6882      	ldr	r2, [r0, #8]
 800ec50:	4323      	orrs	r3, r4
 800ec52:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ec56:	4333      	orrs	r3, r6
 800ec58:	432b      	orrs	r3, r5
 800ec5a:	430b      	orrs	r3, r1
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ec60:	2000      	movs	r0, #0
 800ec62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec64:	6882      	ldr	r2, [r0, #8]
 800ec66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ec6a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ec6e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ec70:	ea44 0306 	orr.w	r3, r4, r6
 800ec74:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ec76:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ec78:	68c2      	ldr	r2, [r0, #12]
 800ec7a:	432b      	orrs	r3, r5
 800ec7c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ec80:	430b      	orrs	r3, r1
 800ec82:	4313      	orrs	r3, r2
 800ec84:	60c3      	str	r3, [r0, #12]
 800ec86:	e7eb      	b.n	800ec60 <FMC_SDRAM_Timing_Init+0x44>

0800ec88 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800ec88:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800ec8c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ec90:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800ec94:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ec98:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800ec9e:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800eca0:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	4770      	bx	lr

0800eca6 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800eca6:	6902      	ldr	r2, [r0, #16]
{
 800eca8:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ecaa:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ecae:	0d92      	lsrs	r2, r2, #22
 800ecb0:	4323      	orrs	r3, r4
 800ecb2:	68cc      	ldr	r4, [r1, #12]
 800ecb4:	0592      	lsls	r2, r2, #22
 800ecb6:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ecba:	4313      	orrs	r3, r2
 800ecbc:	688a      	ldr	r2, [r1, #8]
 800ecbe:	3a01      	subs	r2, #1
 800ecc0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ecc4:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	bd10      	pop	{r4, pc}

0800ecca <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ecca:	6943      	ldr	r3, [r0, #20]
 800eccc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ecd0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800ecd4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ecd8:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800ecda:	2000      	movs	r0, #0
 800ecdc:	4770      	bx	lr

0800ecde <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ecde:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800ece0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ece4:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ece6:	f001 fe07 	bl	80108f8 <xTaskGetSchedulerState>
 800ecea:	2801      	cmp	r0, #1
 800ecec:	d003      	beq.n	800ecf6 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ecee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ecf2:	f000 bbcf 	b.w	800f494 <xPortSysTickHandler>
}
 800ecf6:	bd08      	pop	{r3, pc}

0800ecf8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecf8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecfc:	b92b      	cbnz	r3, 800ed0a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ecfe:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <osKernelInitialize+0x20>)
 800ed00:	6818      	ldr	r0, [r3, #0]
 800ed02:	b928      	cbnz	r0, 800ed10 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ed04:	2201      	movs	r2, #1
 800ed06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ed08:	4770      	bx	lr
    stat = osErrorISR;
 800ed0a:	f06f 0005 	mvn.w	r0, #5
 800ed0e:	4770      	bx	lr
    } else {
      stat = osError;
 800ed10:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	24005f34 	.word	0x24005f34

0800ed1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ed1c:	b510      	push	{r4, lr}
 800ed1e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed22:	b95c      	cbnz	r4, 800ed3c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ed24:	4b08      	ldr	r3, [pc, #32]	; (800ed48 <osKernelStart+0x2c>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	2a01      	cmp	r2, #1
 800ed2a:	d10a      	bne.n	800ed42 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ed2c:	4a07      	ldr	r2, [pc, #28]	; (800ed4c <osKernelStart+0x30>)
 800ed2e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ed30:	2202      	movs	r2, #2
 800ed32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ed34:	f001 fc84 	bl	8010640 <vTaskStartScheduler>
      stat = osOK;
 800ed38:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ed3a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ed3c:	f06f 0005 	mvn.w	r0, #5
 800ed40:	e7fb      	b.n	800ed3a <osKernelStart+0x1e>
      stat = osError;
 800ed42:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ed46:	e7f8      	b.n	800ed3a <osKernelStart+0x1e>
 800ed48:	24005f34 	.word	0x24005f34
 800ed4c:	e000ed00 	.word	0xe000ed00

0800ed50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed52:	4614      	mov	r4, r2
 800ed54:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ed56:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ed58:	460b      	mov	r3, r1
  hTask = NULL;
 800ed5a:	9205      	str	r2, [sp, #20]
 800ed5c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ed60:	b9d2      	cbnz	r2, 800ed98 <osThreadNew+0x48>
 800ed62:	b1c8      	cbz	r0, 800ed98 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ed64:	2c00      	cmp	r4, #0
 800ed66:	d02f      	beq.n	800edc8 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ed68:	69a5      	ldr	r5, [r4, #24]
 800ed6a:	2d00      	cmp	r5, #0
 800ed6c:	bf08      	it	eq
 800ed6e:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ed70:	1e69      	subs	r1, r5, #1
 800ed72:	46ac      	mov	ip, r5
 800ed74:	2937      	cmp	r1, #55	; 0x37
 800ed76:	d82b      	bhi.n	800edd0 <osThreadNew+0x80>
 800ed78:	6861      	ldr	r1, [r4, #4]
 800ed7a:	07c9      	lsls	r1, r1, #31
 800ed7c:	d428      	bmi.n	800edd0 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ed7e:	6966      	ldr	r6, [r4, #20]
 800ed80:	b16e      	cbz	r6, 800ed9e <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ed82:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ed84:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed86:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ed8a:	b157      	cbz	r7, 800eda2 <osThreadNew+0x52>
 800ed8c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800ed90:	d902      	bls.n	800ed98 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed92:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ed94:	b104      	cbz	r4, 800ed98 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ed96:	b9ee      	cbnz	r6, 800edd4 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ed98:	9805      	ldr	r0, [sp, #20]
}
 800ed9a:	b007      	add	sp, #28
 800ed9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800ed9e:	2280      	movs	r2, #128	; 0x80
 800eda0:	e7f0      	b.n	800ed84 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eda2:	f1be 0f00 	cmp.w	lr, #0
 800eda6:	d1f7      	bne.n	800ed98 <osThreadNew+0x48>
      if (mem == 0) {
 800eda8:	6924      	ldr	r4, [r4, #16]
 800edaa:	2c00      	cmp	r4, #0
 800edac:	d1f4      	bne.n	800ed98 <osThreadNew+0x48>
 800edae:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800edb0:	a905      	add	r1, sp, #20
 800edb2:	b292      	uxth	r2, r2
 800edb4:	e9cd c100 	strd	ip, r1, [sp]
 800edb8:	4621      	mov	r1, r4
 800edba:	f001 fae0 	bl	801037e <xTaskCreate>
 800edbe:	2801      	cmp	r0, #1
            hTask = NULL;
 800edc0:	bf1c      	itt	ne
 800edc2:	2300      	movne	r3, #0
 800edc4:	9305      	strne	r3, [sp, #20]
 800edc6:	e7e7      	b.n	800ed98 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800edc8:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800edcc:	2280      	movs	r2, #128	; 0x80
 800edce:	e7ef      	b.n	800edb0 <osThreadNew+0x60>
        return (NULL);
 800edd0:	4610      	mov	r0, r2
 800edd2:	e7e2      	b.n	800ed9a <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800edd4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800edd8:	9500      	str	r5, [sp, #0]
 800edda:	f001 fa98 	bl	801030e <xTaskCreateStatic>
 800edde:	9005      	str	r0, [sp, #20]
 800ede0:	e7da      	b.n	800ed98 <osThreadNew+0x48>

0800ede2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ede2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ede4:	4604      	mov	r4, r0
 800ede6:	460e      	mov	r6, r1
 800ede8:	4615      	mov	r5, r2
 800edea:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800edee:	b11a      	cbz	r2, 800edf8 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800edf0:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800edf2:	4620      	mov	r0, r4
 800edf4:	b003      	add	sp, #12
 800edf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800edf8:	2800      	cmp	r0, #0
 800edfa:	d0f9      	beq.n	800edf0 <osSemaphoreNew+0xe>
 800edfc:	4288      	cmp	r0, r1
 800edfe:	d3f7      	bcc.n	800edf0 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800ee00:	b1e5      	cbz	r5, 800ee3c <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ee02:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800ee06:	b1bb      	cbz	r3, 800ee38 <osSemaphoreNew+0x56>
 800ee08:	2f4f      	cmp	r7, #79	; 0x4f
 800ee0a:	d9f1      	bls.n	800edf0 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800ee0c:	2801      	cmp	r0, #1
 800ee0e:	d12a      	bne.n	800ee66 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ee10:	2103      	movs	r1, #3
 800ee12:	9100      	str	r1, [sp, #0]
 800ee14:	4611      	mov	r1, r2
 800ee16:	f000 fce5 	bl	800f7e4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ee1a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d0e7      	beq.n	800edf0 <osSemaphoreNew+0xe>
 800ee20:	b1de      	cbz	r6, 800ee5a <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee22:	2300      	movs	r3, #0
 800ee24:	461a      	mov	r2, r3
 800ee26:	4619      	mov	r1, r3
 800ee28:	f000 fd91 	bl	800f94e <xQueueGenericSend>
 800ee2c:	2801      	cmp	r0, #1
 800ee2e:	d014      	beq.n	800ee5a <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800ee30:	4620      	mov	r0, r4
 800ee32:	f001 f8cd 	bl	800ffd0 <vQueueDelete>
 800ee36:	e7db      	b.n	800edf0 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee38:	2f00      	cmp	r7, #0
 800ee3a:	d1d9      	bne.n	800edf0 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800ee3c:	2c01      	cmp	r4, #1
 800ee3e:	d105      	bne.n	800ee4c <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800ee40:	2203      	movs	r2, #3
 800ee42:	2100      	movs	r1, #0
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fd1b 	bl	800f880 <xQueueGenericCreate>
 800ee4a:	e7e6      	b.n	800ee1a <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4631      	mov	r1, r6
 800ee50:	f000 fd5f 	bl	800f912 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ee54:	4604      	mov	r4, r0
 800ee56:	2800      	cmp	r0, #0
 800ee58:	d0ca      	beq.n	800edf0 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800ee5a:	b955      	cbnz	r5, 800ee72 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800ee5c:	4629      	mov	r1, r5
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f001 f890 	bl	800ff84 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ee64:	e7c5      	b.n	800edf2 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee66:	461a      	mov	r2, r3
 800ee68:	f000 fd31 	bl	800f8ce <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d0be      	beq.n	800edf0 <osSemaphoreNew+0xe>
          name = attr->name;
 800ee72:	682d      	ldr	r5, [r5, #0]
 800ee74:	e7f2      	b.n	800ee5c <osSemaphoreNew+0x7a>

0800ee76 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ee76:	b513      	push	{r0, r1, r4, lr}
 800ee78:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ee7a:	b308      	cbz	r0, 800eec0 <osSemaphoreAcquire+0x4a>
 800ee7c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ee80:	b1b3      	cbz	r3, 800eeb0 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800ee82:	b9e9      	cbnz	r1, 800eec0 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ee84:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ee86:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ee88:	f001 f82c 	bl	800fee4 <xQueueReceiveFromISR>
 800ee8c:	2801      	cmp	r0, #1
 800ee8e:	d114      	bne.n	800eeba <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ee90:	9b01      	ldr	r3, [sp, #4]
 800ee92:	b913      	cbnz	r3, 800ee9a <osSemaphoreAcquire+0x24>
  stat = osOK;
 800ee94:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ee96:	b002      	add	sp, #8
 800ee98:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800ee9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ee9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eea6:	f3bf 8f4f 	dsb	sy
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	e7f1      	b.n	800ee94 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800eeb0:	f000 ff55 	bl	800fd5e <xQueueSemaphoreTake>
 800eeb4:	2801      	cmp	r0, #1
 800eeb6:	d0ed      	beq.n	800ee94 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800eeb8:	b92c      	cbnz	r4, 800eec6 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800eeba:	f06f 0002 	mvn.w	r0, #2
 800eebe:	e7ea      	b.n	800ee96 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eec0:	f06f 0003 	mvn.w	r0, #3
 800eec4:	e7e7      	b.n	800ee96 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800eec6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800eeca:	e7e4      	b.n	800ee96 <osSemaphoreAcquire+0x20>

0800eecc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eecc:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800eece:	b310      	cbz	r0, 800ef16 <osSemaphoreRelease+0x4a>
 800eed0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800eed4:	b1b3      	cbz	r3, 800ef04 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800eed6:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800eed8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800eeda:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800eedc:	f000 fe4c 	bl	800fb78 <xQueueGiveFromISR>
 800eee0:	2801      	cmp	r0, #1
 800eee2:	d115      	bne.n	800ef10 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800eee4:	9b01      	ldr	r3, [sp, #4]
 800eee6:	b913      	cbnz	r3, 800eeee <osSemaphoreRelease+0x22>
  stat = osOK;
 800eee8:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800eeea:	b002      	add	sp, #8
 800eeec:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800eeee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800eef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eef6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800eefa:	f3bf 8f4f 	dsb	sy
 800eefe:	f3bf 8f6f 	isb	sy
 800ef02:	e7f1      	b.n	800eee8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ef04:	461a      	mov	r2, r3
 800ef06:	4619      	mov	r1, r3
 800ef08:	f000 fd21 	bl	800f94e <xQueueGenericSend>
 800ef0c:	2801      	cmp	r0, #1
 800ef0e:	d0eb      	beq.n	800eee8 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800ef10:	f06f 0002 	mvn.w	r0, #2
 800ef14:	e7e9      	b.n	800eeea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ef16:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ef1a:	e7e6      	b.n	800eeea <osSemaphoreRelease+0x1e>

0800ef1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ef1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef1e:	4605      	mov	r5, r0
 800ef20:	460e      	mov	r6, r1
 800ef22:	4614      	mov	r4, r2
 800ef24:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ef28:	b11f      	cbz	r7, 800ef32 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800ef2a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	b003      	add	sp, #12
 800ef30:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d0f9      	beq.n	800ef2a <osMessageQueueNew+0xe>
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d0f7      	beq.n	800ef2a <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800ef3a:	b1da      	cbz	r2, 800ef74 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ef3c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800ef40:	b183      	cbz	r3, 800ef64 <osMessageQueueNew+0x48>
 800ef42:	2a4f      	cmp	r2, #79	; 0x4f
 800ef44:	d9f1      	bls.n	800ef2a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ef46:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ef48:	2a00      	cmp	r2, #0
 800ef4a:	d0ee      	beq.n	800ef2a <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ef4c:	434d      	muls	r5, r1
 800ef4e:	6966      	ldr	r6, [r4, #20]
 800ef50:	42ae      	cmp	r6, r5
 800ef52:	d3ea      	bcc.n	800ef2a <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ef54:	9700      	str	r7, [sp, #0]
 800ef56:	f000 fc45 	bl	800f7e4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d0e4      	beq.n	800ef2a <osMessageQueueNew+0xe>
        name = attr->name;
 800ef60:	6824      	ldr	r4, [r4, #0]
 800ef62:	e011      	b.n	800ef88 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	d1e0      	bne.n	800ef2a <osMessageQueueNew+0xe>
 800ef68:	6923      	ldr	r3, [r4, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1dd      	bne.n	800ef2a <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ef6e:	6963      	ldr	r3, [r4, #20]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1da      	bne.n	800ef2a <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800ef74:	4628      	mov	r0, r5
 800ef76:	2200      	movs	r2, #0
 800ef78:	4631      	mov	r1, r6
 800ef7a:	f000 fc81 	bl	800f880 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800ef7e:	4605      	mov	r5, r0
 800ef80:	2800      	cmp	r0, #0
 800ef82:	d0d2      	beq.n	800ef2a <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800ef84:	2c00      	cmp	r4, #0
 800ef86:	d1eb      	bne.n	800ef60 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	f000 fffa 	bl	800ff84 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800ef90:	e7cc      	b.n	800ef2c <osMessageQueueNew+0x10>

0800ef92 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ef92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef94:	461c      	mov	r4, r3
 800ef96:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ef9a:	b1c6      	cbz	r6, 800efce <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef9c:	b318      	cbz	r0, 800efe6 <osMessageQueuePut+0x54>
 800ef9e:	b311      	cbz	r1, 800efe6 <osMessageQueuePut+0x54>
 800efa0:	bb0b      	cbnz	r3, 800efe6 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800efa2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800efa4:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800efa6:	f000 fd85 	bl	800fab4 <xQueueGenericSendFromISR>
 800efaa:	2801      	cmp	r0, #1
 800efac:	d118      	bne.n	800efe0 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800efae:	9b01      	ldr	r3, [sp, #4]
 800efb0:	b913      	cbnz	r3, 800efb8 <osMessageQueuePut+0x26>
  stat = osOK;
 800efb2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800efb4:	b002      	add	sp, #8
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800efb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800efbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	e7f1      	b.n	800efb2 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800efce:	b150      	cbz	r0, 800efe6 <osMessageQueuePut+0x54>
 800efd0:	b149      	cbz	r1, 800efe6 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800efd2:	4633      	mov	r3, r6
 800efd4:	4622      	mov	r2, r4
 800efd6:	f000 fcba 	bl	800f94e <xQueueGenericSend>
 800efda:	2801      	cmp	r0, #1
 800efdc:	d0e9      	beq.n	800efb2 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800efde:	b92c      	cbnz	r4, 800efec <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800efe0:	f06f 0002 	mvn.w	r0, #2
 800efe4:	e7e6      	b.n	800efb4 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800efe6:	f06f 0003 	mvn.w	r0, #3
 800efea:	e7e3      	b.n	800efb4 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800efec:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800eff0:	e7e0      	b.n	800efb4 <osMessageQueuePut+0x22>

0800eff2 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eff2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eff4:	461c      	mov	r4, r3
 800eff6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800effa:	b1c3      	cbz	r3, 800f02e <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800effc:	b310      	cbz	r0, 800f044 <osMessageQueueGet+0x52>
 800effe:	b309      	cbz	r1, 800f044 <osMessageQueueGet+0x52>
 800f000:	bb04      	cbnz	r4, 800f044 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f002:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800f004:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f006:	f000 ff6d 	bl	800fee4 <xQueueReceiveFromISR>
 800f00a:	2801      	cmp	r0, #1
 800f00c:	d117      	bne.n	800f03e <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800f00e:	9b01      	ldr	r3, [sp, #4]
 800f010:	b913      	cbnz	r3, 800f018 <osMessageQueueGet+0x26>
  stat = osOK;
 800f012:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800f014:	b003      	add	sp, #12
 800f016:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800f018:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f020:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f024:	f3bf 8f4f 	dsb	sy
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	e7f1      	b.n	800f012 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f02e:	b148      	cbz	r0, 800f044 <osMessageQueueGet+0x52>
 800f030:	b141      	cbz	r1, 800f044 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f032:	4622      	mov	r2, r4
 800f034:	f000 fdf4 	bl	800fc20 <xQueueReceive>
 800f038:	2801      	cmp	r0, #1
 800f03a:	d0ea      	beq.n	800f012 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800f03c:	b92c      	cbnz	r4, 800f04a <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800f03e:	f06f 0002 	mvn.w	r0, #2
 800f042:	e7e7      	b.n	800f014 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800f044:	f06f 0003 	mvn.w	r0, #3
 800f048:	e7e4      	b.n	800f014 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800f04a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800f04e:	e7e1      	b.n	800f014 <osMessageQueueGet+0x22>

0800f050 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f050:	4b03      	ldr	r3, [pc, #12]	; (800f060 <vApplicationGetIdleTaskMemory+0x10>)
 800f052:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f054:	4b03      	ldr	r3, [pc, #12]	; (800f064 <vApplicationGetIdleTaskMemory+0x14>)
 800f056:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f058:	2380      	movs	r3, #128	; 0x80
 800f05a:	6013      	str	r3, [r2, #0]
}
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	24005ed4 	.word	0x24005ed4
 800f064:	24005cd4 	.word	0x24005cd4

0800f068 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f068:	4b03      	ldr	r3, [pc, #12]	; (800f078 <vApplicationGetTimerTaskMemory+0x10>)
 800f06a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <vApplicationGetTimerTaskMemory+0x14>)
 800f06e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f074:	6013      	str	r3, [r2, #0]
}
 800f076:	4770      	bx	lr
 800f078:	24006338 	.word	0x24006338
 800f07c:	24005f38 	.word	0x24005f38

0800f080 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f080:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <prvInsertBlockIntoFreeList+0x40>)
{
 800f082:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f084:	461a      	mov	r2, r3
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4283      	cmp	r3, r0
 800f08a:	d3fb      	bcc.n	800f084 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f08c:	6854      	ldr	r4, [r2, #4]
 800f08e:	1911      	adds	r1, r2, r4
 800f090:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f092:	bf01      	itttt	eq
 800f094:	6841      	ldreq	r1, [r0, #4]
 800f096:	4610      	moveq	r0, r2
 800f098:	1909      	addeq	r1, r1, r4
 800f09a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f09c:	6844      	ldr	r4, [r0, #4]
 800f09e:	1901      	adds	r1, r0, r4
 800f0a0:	428b      	cmp	r3, r1
 800f0a2:	d107      	bne.n	800f0b4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f0a4:	4907      	ldr	r1, [pc, #28]	; (800f0c4 <prvInsertBlockIntoFreeList+0x44>)
 800f0a6:	6809      	ldr	r1, [r1, #0]
 800f0a8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0aa:	bf1f      	itttt	ne
 800f0ac:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f0ae:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f0b0:	1909      	addne	r1, r1, r4
 800f0b2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f0b4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f0b6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f0b8:	bf18      	it	ne
 800f0ba:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	bf00      	nop
 800f0c0:	2400e3b0 	.word	0x2400e3b0
 800f0c4:	24006398 	.word	0x24006398

0800f0c8 <pvPortMalloc>:
{
 800f0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0cc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800f0ce:	f001 f983 	bl	80103d8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800f0d2:	4842      	ldr	r0, [pc, #264]	; (800f1dc <pvPortMalloc+0x114>)
 800f0d4:	4d42      	ldr	r5, [pc, #264]	; (800f1e0 <pvPortMalloc+0x118>)
 800f0d6:	6803      	ldr	r3, [r0, #0]
 800f0d8:	bb0b      	cbnz	r3, 800f11e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800f0da:	4942      	ldr	r1, [pc, #264]	; (800f1e4 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0dc:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0de:	4e42      	ldr	r6, [pc, #264]	; (800f1e8 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0e0:	bf1b      	ittet	ne
 800f0e2:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0e4:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0e8:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0ec:	f023 0307 	bicne.w	r3, r3, #7
 800f0f0:	bf1c      	itt	ne
 800f0f2:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0f4:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800f0f6:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0f8:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0fa:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0fc:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800f0fe:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f100:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800f104:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f108:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800f10a:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f10c:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f110:	4a36      	ldr	r2, [pc, #216]	; (800f1ec <pvPortMalloc+0x124>)
 800f112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f114:	4a36      	ldr	r2, [pc, #216]	; (800f1f0 <pvPortMalloc+0x128>)
 800f116:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f11c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f11e:	682f      	ldr	r7, [r5, #0]
 800f120:	4227      	tst	r7, r4
 800f122:	d155      	bne.n	800f1d0 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800f124:	2c00      	cmp	r4, #0
 800f126:	d046      	beq.n	800f1b6 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800f128:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f12c:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f12e:	bf1c      	itt	ne
 800f130:	f023 0307 	bicne.w	r3, r3, #7
 800f134:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f136:	2b00      	cmp	r3, #0
 800f138:	d04a      	beq.n	800f1d0 <pvPortMalloc+0x108>
 800f13a:	4c2d      	ldr	r4, [pc, #180]	; (800f1f0 <pvPortMalloc+0x128>)
 800f13c:	6826      	ldr	r6, [r4, #0]
 800f13e:	429e      	cmp	r6, r3
 800f140:	d346      	bcc.n	800f1d0 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800f142:	4a29      	ldr	r2, [pc, #164]	; (800f1e8 <pvPortMalloc+0x120>)
 800f144:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f146:	6869      	ldr	r1, [r5, #4]
 800f148:	4299      	cmp	r1, r3
 800f14a:	d204      	bcs.n	800f156 <pvPortMalloc+0x8e>
 800f14c:	f8d5 c000 	ldr.w	ip, [r5]
 800f150:	f1bc 0f00 	cmp.w	ip, #0
 800f154:	d115      	bne.n	800f182 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800f156:	6800      	ldr	r0, [r0, #0]
 800f158:	42a8      	cmp	r0, r5
 800f15a:	d039      	beq.n	800f1d0 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f15c:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f15e:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f160:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f164:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f166:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f168:	d912      	bls.n	800f190 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f16a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f16c:	0742      	lsls	r2, r0, #29
 800f16e:	d00b      	beq.n	800f188 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	e7fe      	b.n	800f180 <pvPortMalloc+0xb8>
 800f182:	462a      	mov	r2, r5
 800f184:	4665      	mov	r5, ip
 800f186:	e7de      	b.n	800f146 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f188:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f18a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f18c:	f7ff ff78 	bl	800f080 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f190:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f192:	4916      	ldr	r1, [pc, #88]	; (800f1ec <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f194:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f196:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800f198:	4a16      	ldr	r2, [pc, #88]	; (800f1f4 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800f19a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f19c:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800f19e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800f1a0:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f1a2:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f1a4:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f1a6:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800f1aa:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f1ae:	bf38      	it	cc
 800f1b0:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f1b2:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800f1b4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800f1b6:	f001 f9b3 	bl	8010520 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1ba:	0763      	lsls	r3, r4, #29
 800f1bc:	d00a      	beq.n	800f1d4 <pvPortMalloc+0x10c>
 800f1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	e7fe      	b.n	800f1ce <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800f1d0:	2400      	movs	r4, #0
 800f1d2:	e7f0      	b.n	800f1b6 <pvPortMalloc+0xee>
}
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1da:	bf00      	nop
 800f1dc:	24006398 	.word	0x24006398
 800f1e0:	2400e39c 	.word	0x2400e39c
 800f1e4:	2400639c 	.word	0x2400639c
 800f1e8:	2400e3b0 	.word	0x2400e3b0
 800f1ec:	2400e3a4 	.word	0x2400e3a4
 800f1f0:	2400e3a0 	.word	0x2400e3a0
 800f1f4:	2400e3a8 	.word	0x2400e3a8

0800f1f8 <vPortFree>:
{
 800f1f8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	b390      	cbz	r0, 800f264 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f1fe:	4a1a      	ldr	r2, [pc, #104]	; (800f268 <vPortFree+0x70>)
 800f200:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f204:	6812      	ldr	r2, [r2, #0]
 800f206:	4213      	tst	r3, r2
 800f208:	d108      	bne.n	800f21c <vPortFree+0x24>
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	e7fe      	b.n	800f21a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f21c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800f220:	b141      	cbz	r1, 800f234 <vPortFree+0x3c>
 800f222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f226:	f383 8811 	msr	BASEPRI, r3
 800f22a:	f3bf 8f6f 	isb	sy
 800f22e:	f3bf 8f4f 	dsb	sy
 800f232:	e7fe      	b.n	800f232 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f234:	ea23 0302 	bic.w	r3, r3, r2
 800f238:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800f23c:	f001 f8cc 	bl	80103d8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f240:	4a0a      	ldr	r2, [pc, #40]	; (800f26c <vPortFree+0x74>)
 800f242:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f246:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f24a:	6811      	ldr	r1, [r2, #0]
 800f24c:	440b      	add	r3, r1
 800f24e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f250:	f7ff ff16 	bl	800f080 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f254:	4a06      	ldr	r2, [pc, #24]	; (800f270 <vPortFree+0x78>)
 800f256:	6813      	ldr	r3, [r2, #0]
 800f258:	3301      	adds	r3, #1
}
 800f25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800f25e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800f260:	f001 b95e 	b.w	8010520 <xTaskResumeAll>
}
 800f264:	bd10      	pop	{r4, pc}
 800f266:	bf00      	nop
 800f268:	2400e39c 	.word	0x2400e39c
 800f26c:	2400e3a0 	.word	0x2400e3a0
 800f270:	2400e3ac 	.word	0x2400e3ac

0800f274 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f274:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f278:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f27c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f27e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f280:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f284:	2300      	movs	r3, #0
 800f286:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f288:	4770      	bx	lr

0800f28a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f28a:	2300      	movs	r3, #0
 800f28c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f28e:	4770      	bx	lr

0800f290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800f290:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f292:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800f294:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f296:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f298:	689a      	ldr	r2, [r3, #8]
 800f29a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f29c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f29e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f2a0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	6003      	str	r3, [r0, #0]
}
 800f2a6:	4770      	bx	lr

0800f2a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2a8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f2aa:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f2ac:	1c63      	adds	r3, r4, #1
 800f2ae:	d10a      	bne.n	800f2c6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f2b0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f2b2:	685a      	ldr	r2, [r3, #4]
 800f2b4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2b6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2b8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2ba:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800f2bc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800f2be:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	6003      	str	r3, [r0, #0]
}
 800f2c4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f2c6:	f100 0208 	add.w	r2, r0, #8
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	6852      	ldr	r2, [r2, #4]
 800f2ce:	6815      	ldr	r5, [r2, #0]
 800f2d0:	42a5      	cmp	r5, r4
 800f2d2:	d9fa      	bls.n	800f2ca <vListInsert+0x22>
 800f2d4:	e7ed      	b.n	800f2b2 <vListInsert+0xa>

0800f2d6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2d6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2d8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800f2dc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2de:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2e0:	6859      	ldr	r1, [r3, #4]
 800f2e2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2e4:	bf08      	it	eq
 800f2e6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	3a01      	subs	r2, #1
 800f2f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2f2:	6818      	ldr	r0, [r3, #0]
}
 800f2f4:	4770      	bx	lr
	...

0800f2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f2f8:	4808      	ldr	r0, [pc, #32]	; (800f31c <prvPortStartFirstTask+0x24>)
 800f2fa:	6800      	ldr	r0, [r0, #0]
 800f2fc:	6800      	ldr	r0, [r0, #0]
 800f2fe:	f380 8808 	msr	MSP, r0
 800f302:	f04f 0000 	mov.w	r0, #0
 800f306:	f380 8814 	msr	CONTROL, r0
 800f30a:	b662      	cpsie	i
 800f30c:	b661      	cpsie	f
 800f30e:	f3bf 8f4f 	dsb	sy
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	df00      	svc	0
 800f318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f31a:	0000      	.short	0x0000
 800f31c:	e000ed08 	.word	0xe000ed08

0800f320 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f320:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f330 <vPortEnableVFP+0x10>
 800f324:	6801      	ldr	r1, [r0, #0]
 800f326:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f32a:	6001      	str	r1, [r0, #0]
 800f32c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f32e:	0000      	.short	0x0000
 800f330:	e000ed88 	.word	0xe000ed88

0800f334 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800f334:	2300      	movs	r3, #0
{
 800f336:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800f338:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800f33a:	4b0d      	ldr	r3, [pc, #52]	; (800f370 <prvTaskExitError+0x3c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3301      	adds	r3, #1
 800f340:	d008      	beq.n	800f354 <prvTaskExitError+0x20>
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	e7fe      	b.n	800f352 <prvTaskExitError+0x1e>
 800f354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800f364:	9b01      	ldr	r3, [sp, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0fc      	beq.n	800f364 <prvTaskExitError+0x30>
}
 800f36a:	b002      	add	sp, #8
 800f36c:	4770      	bx	lr
 800f36e:	bf00      	nop
 800f370:	24000058 	.word	0x24000058

0800f374 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f378:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f37c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800f380:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f382:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f384:	4b03      	ldr	r3, [pc, #12]	; (800f394 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f386:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f388:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f38a:	f06f 0302 	mvn.w	r3, #2
 800f38e:	6203      	str	r3, [r0, #32]
}
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop
 800f394:	0800f335 	.word	0x0800f335
	...

0800f3a0 <SVC_Handler>:
	__asm volatile (
 800f3a0:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <pxCurrentTCBConst2>)
 800f3a2:	6819      	ldr	r1, [r3, #0]
 800f3a4:	6808      	ldr	r0, [r1, #0]
 800f3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3aa:	f380 8809 	msr	PSP, r0
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f04f 0000 	mov.w	r0, #0
 800f3b6:	f380 8811 	msr	BASEPRI, r0
 800f3ba:	4770      	bx	lr
 800f3bc:	f3af 8000 	nop.w

0800f3c0 <pxCurrentTCBConst2>:
 800f3c0:	2400e400 	.word	0x2400e400

0800f3c4 <vPortEnterCritical>:
 800f3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800f3d4:	4a0a      	ldr	r2, [pc, #40]	; (800f400 <vPortEnterCritical+0x3c>)
 800f3d6:	6813      	ldr	r3, [r2, #0]
 800f3d8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800f3da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800f3dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800f3de:	d10e      	bne.n	800f3fe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f3e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f3e4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	b143      	cbz	r3, 800f3fe <vPortEnterCritical+0x3a>
 800f3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f0:	f383 8811 	msr	BASEPRI, r3
 800f3f4:	f3bf 8f6f 	isb	sy
 800f3f8:	f3bf 8f4f 	dsb	sy
 800f3fc:	e7fe      	b.n	800f3fc <vPortEnterCritical+0x38>
}
 800f3fe:	4770      	bx	lr
 800f400:	24000058 	.word	0x24000058

0800f404 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800f404:	4a08      	ldr	r2, [pc, #32]	; (800f428 <vPortExitCritical+0x24>)
 800f406:	6813      	ldr	r3, [r2, #0]
 800f408:	b943      	cbnz	r3, 800f41c <vPortExitCritical+0x18>
 800f40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	e7fe      	b.n	800f41a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800f41c:	3b01      	subs	r3, #1
 800f41e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f420:	b90b      	cbnz	r3, 800f426 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f422:	f383 8811 	msr	BASEPRI, r3
}
 800f426:	4770      	bx	lr
 800f428:	24000058 	.word	0x24000058
 800f42c:	00000000 	.word	0x00000000

0800f430 <PendSV_Handler>:
	__asm volatile
 800f430:	f3ef 8009 	mrs	r0, PSP
 800f434:	f3bf 8f6f 	isb	sy
 800f438:	4b15      	ldr	r3, [pc, #84]	; (800f490 <pxCurrentTCBConst>)
 800f43a:	681a      	ldr	r2, [r3, #0]
 800f43c:	f01e 0f10 	tst.w	lr, #16
 800f440:	bf08      	it	eq
 800f442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f44a:	6010      	str	r0, [r2, #0]
 800f44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f450:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f454:	f380 8811 	msr	BASEPRI, r0
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	f3bf 8f6f 	isb	sy
 800f460:	f001 f93c 	bl	80106dc <vTaskSwitchContext>
 800f464:	f04f 0000 	mov.w	r0, #0
 800f468:	f380 8811 	msr	BASEPRI, r0
 800f46c:	bc09      	pop	{r0, r3}
 800f46e:	6819      	ldr	r1, [r3, #0]
 800f470:	6808      	ldr	r0, [r1, #0]
 800f472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f476:	f01e 0f10 	tst.w	lr, #16
 800f47a:	bf08      	it	eq
 800f47c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f480:	f380 8809 	msr	PSP, r0
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	f3af 8000 	nop.w

0800f490 <pxCurrentTCBConst>:
 800f490:	2400e400 	.word	0x2400e400

0800f494 <xPortSysTickHandler>:
{
 800f494:	b508      	push	{r3, lr}
	__asm volatile
 800f496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49a:	f383 8811 	msr	BASEPRI, r3
 800f49e:	f3bf 8f6f 	isb	sy
 800f4a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800f4a6:	f000 ffa5 	bl	80103f4 <xTaskIncrementTick>
 800f4aa:	b128      	cbz	r0, 800f4b8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f4ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f383 8811 	msr	BASEPRI, r3
}
 800f4be:	bd08      	pop	{r3, pc}

0800f4c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800f4c4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4ca:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4cc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <vPortSetupTimerInterrupt+0x20>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f4d6:	3b01      	subs	r3, #1
 800f4d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4da:	2307      	movs	r3, #7
 800f4dc:	6113      	str	r3, [r2, #16]
}
 800f4de:	4770      	bx	lr
 800f4e0:	24000048 	.word	0x24000048

0800f4e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f4e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800f4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f4ea:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800f4ee:	4a3a      	ldr	r2, [pc, #232]	; (800f5d8 <xPortStartScheduler+0xf4>)
 800f4f0:	4291      	cmp	r1, r2
 800f4f2:	d108      	bne.n	800f506 <xPortStartScheduler+0x22>
	__asm volatile
 800f4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	e7fe      	b.n	800f504 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f506:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800f50a:	4b34      	ldr	r3, [pc, #208]	; (800f5dc <xPortStartScheduler+0xf8>)
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d108      	bne.n	800f522 <xPortStartScheduler+0x3e>
 800f510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f514:	f383 8811 	msr	BASEPRI, r3
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	f3bf 8f4f 	dsb	sy
 800f520:	e7fe      	b.n	800f520 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f522:	4b2f      	ldr	r3, [pc, #188]	; (800f5e0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f524:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f526:	781a      	ldrb	r2, [r3, #0]
 800f528:	b2d2      	uxtb	r2, r2
 800f52a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f52c:	22ff      	movs	r2, #255	; 0xff
 800f52e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f530:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f532:	4a2c      	ldr	r2, [pc, #176]	; (800f5e4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f534:	b2db      	uxtb	r3, r3
 800f536:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f53a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f53e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f542:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f544:	2307      	movs	r3, #7
 800f546:	4a28      	ldr	r2, [pc, #160]	; (800f5e8 <xPortStartScheduler+0x104>)
 800f548:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f54a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f54e:	1e5c      	subs	r4, r3, #1
 800f550:	0600      	lsls	r0, r0, #24
 800f552:	d40c      	bmi.n	800f56e <xPortStartScheduler+0x8a>
 800f554:	b111      	cbz	r1, 800f55c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f556:	2b03      	cmp	r3, #3
 800f558:	6013      	str	r3, [r2, #0]
 800f55a:	d011      	beq.n	800f580 <xPortStartScheduler+0x9c>
 800f55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f560:	f383 8811 	msr	BASEPRI, r3
 800f564:	f3bf 8f6f 	isb	sy
 800f568:	f3bf 8f4f 	dsb	sy
 800f56c:	e7fe      	b.n	800f56c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f56e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f572:	2101      	movs	r1, #1
 800f574:	005b      	lsls	r3, r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	f88d 3003 	strb.w	r3, [sp, #3]
 800f57c:	4623      	mov	r3, r4
 800f57e:	e7e4      	b.n	800f54a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f580:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f584:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800f588:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f58a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f58c:	9b01      	ldr	r3, [sp, #4]
 800f58e:	4a14      	ldr	r2, [pc, #80]	; (800f5e0 <xPortStartScheduler+0xfc>)
 800f590:	b2db      	uxtb	r3, r3
 800f592:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f594:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f59c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f5a0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800f5a4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f5a8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800f5ac:	f7ff ff88 	bl	800f4c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800f5b0:	4b0e      	ldr	r3, [pc, #56]	; (800f5ec <xPortStartScheduler+0x108>)
 800f5b2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800f5b4:	f7ff feb4 	bl	800f320 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f5b8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800f5bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f5c0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800f5c4:	f7ff fe98 	bl	800f2f8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800f5c8:	f001 f888 	bl	80106dc <vTaskSwitchContext>
}
 800f5cc:	4628      	mov	r0, r5
	prvTaskExitError();
 800f5ce:	f7ff feb1 	bl	800f334 <prvTaskExitError>
}
 800f5d2:	b003      	add	sp, #12
 800f5d4:	bd30      	pop	{r4, r5, pc}
 800f5d6:	bf00      	nop
 800f5d8:	410fc271 	.word	0x410fc271
 800f5dc:	410fc270 	.word	0x410fc270
 800f5e0:	e000e400 	.word	0xe000e400
 800f5e4:	2400e3b8 	.word	0x2400e3b8
 800f5e8:	2400e3bc 	.word	0x2400e3bc
 800f5ec:	24000058 	.word	0x24000058

0800f5f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f5f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f5f4:	2b0f      	cmp	r3, #15
 800f5f6:	d90e      	bls.n	800f616 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f5f8:	4a11      	ldr	r2, [pc, #68]	; (800f640 <vPortValidateInterruptPriority+0x50>)
 800f5fa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5fc:	4a11      	ldr	r2, [pc, #68]	; (800f644 <vPortValidateInterruptPriority+0x54>)
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	429a      	cmp	r2, r3
 800f602:	d908      	bls.n	800f616 <vPortValidateInterruptPriority+0x26>
 800f604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f608:	f383 8811 	msr	BASEPRI, r3
 800f60c:	f3bf 8f6f 	isb	sy
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	e7fe      	b.n	800f614 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f616:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f61a:	4a0b      	ldr	r2, [pc, #44]	; (800f648 <vPortValidateInterruptPriority+0x58>)
 800f61c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800f620:	6812      	ldr	r2, [r2, #0]
 800f622:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f626:	4293      	cmp	r3, r2
 800f628:	d908      	bls.n	800f63c <vPortValidateInterruptPriority+0x4c>
 800f62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62e:	f383 8811 	msr	BASEPRI, r3
 800f632:	f3bf 8f6f 	isb	sy
 800f636:	f3bf 8f4f 	dsb	sy
 800f63a:	e7fe      	b.n	800f63a <vPortValidateInterruptPriority+0x4a>
	}
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	e000e3f0 	.word	0xe000e3f0
 800f644:	2400e3b8 	.word	0x2400e3b8
 800f648:	2400e3bc 	.word	0x2400e3bc

0800f64c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f64c:	b510      	push	{r4, lr}
 800f64e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f650:	f7ff feb8 	bl	800f3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f654:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f656:	f7ff fed5 	bl	800f404 <vPortExitCritical>

	return xReturn;
}
 800f65a:	fab4 f084 	clz	r0, r4
 800f65e:	0940      	lsrs	r0, r0, #5
 800f660:	bd10      	pop	{r4, pc}

0800f662 <prvCopyDataToQueue>:
{
 800f662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f664:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f666:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800f668:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f66a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f66c:	b952      	cbnz	r2, 800f684 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f66e:	6807      	ldr	r7, [r0, #0]
 800f670:	bb47      	cbnz	r7, 800f6c4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f672:	6880      	ldr	r0, [r0, #8]
 800f674:	f001 f990 	bl	8010998 <xTaskPriorityDisinherit>
 800f678:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f67a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f67c:	3601      	adds	r6, #1
}
 800f67e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f680:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800f682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800f684:	b965      	cbnz	r5, 800f6a0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f686:	6840      	ldr	r0, [r0, #4]
 800f688:	f012 fbd4 	bl	8021e34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f68c:	6863      	ldr	r3, [r4, #4]
 800f68e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f690:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f692:	68a2      	ldr	r2, [r4, #8]
 800f694:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f696:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f698:	d3f0      	bcc.n	800f67c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f69a:	6823      	ldr	r3, [r4, #0]
 800f69c:	6063      	str	r3, [r4, #4]
 800f69e:	e7ed      	b.n	800f67c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f6a0:	68c0      	ldr	r0, [r0, #12]
 800f6a2:	f012 fbc7 	bl	8021e34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f6a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f6a8:	68e3      	ldr	r3, [r4, #12]
 800f6aa:	4251      	negs	r1, r2
 800f6ac:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6ae:	6822      	ldr	r2, [r4, #0]
 800f6b0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f6b2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f6b4:	bf3e      	ittt	cc
 800f6b6:	68a3      	ldrcc	r3, [r4, #8]
 800f6b8:	185b      	addcc	r3, r3, r1
 800f6ba:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800f6bc:	2d02      	cmp	r5, #2
 800f6be:	d101      	bne.n	800f6c4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6c0:	b116      	cbz	r6, 800f6c8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800f6c2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800f6c4:	2500      	movs	r5, #0
 800f6c6:	e7d9      	b.n	800f67c <prvCopyDataToQueue+0x1a>
 800f6c8:	4635      	mov	r5, r6
 800f6ca:	e7d7      	b.n	800f67c <prvCopyDataToQueue+0x1a>

0800f6cc <prvCopyDataFromQueue>:
{
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f6d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800f6d2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f6d4:	b162      	cbz	r2, 800f6f0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f6d6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f6d8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f6da:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f6dc:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f6de:	60dc      	str	r4, [r3, #12]
}
 800f6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f6e4:	bf24      	itt	cs
 800f6e6:	6819      	ldrcs	r1, [r3, #0]
 800f6e8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6ea:	68d9      	ldr	r1, [r3, #12]
 800f6ec:	f012 bba2 	b.w	8021e34 <memcpy>
}
 800f6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <prvUnlockQueue>:
{
 800f6f6:	b570      	push	{r4, r5, r6, lr}
 800f6f8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f6fa:	f7ff fe63 	bl	800f3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800f6fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f702:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800f706:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f708:	2d00      	cmp	r5, #0
 800f70a:	dc14      	bgt.n	800f736 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800f70c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f70e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800f712:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800f716:	f7ff fe75 	bl	800f404 <vPortExitCritical>
	taskENTER_CRITICAL();
 800f71a:	f7ff fe53 	bl	800f3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800f71e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800f722:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f724:	2d00      	cmp	r5, #0
 800f726:	dc12      	bgt.n	800f74e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800f728:	23ff      	movs	r3, #255	; 0xff
 800f72a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800f72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800f732:	f7ff be67 	b.w	800f404 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d0e7      	beq.n	800f70c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f73c:	4630      	mov	r0, r6
 800f73e:	f001 f849 	bl	80107d4 <xTaskRemoveFromEventList>
 800f742:	b108      	cbz	r0, 800f748 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800f744:	f001 f8d2 	bl	80108ec <vTaskMissedYield>
			--cTxLock;
 800f748:	3d01      	subs	r5, #1
 800f74a:	b26d      	sxtb	r5, r5
 800f74c:	e7dc      	b.n	800f708 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f74e:	6923      	ldr	r3, [r4, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d0e9      	beq.n	800f728 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f754:	4630      	mov	r0, r6
 800f756:	f001 f83d 	bl	80107d4 <xTaskRemoveFromEventList>
 800f75a:	b108      	cbz	r0, 800f760 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800f75c:	f001 f8c6 	bl	80108ec <vTaskMissedYield>
				--cRxLock;
 800f760:	3d01      	subs	r5, #1
 800f762:	b26d      	sxtb	r5, r5
 800f764:	e7de      	b.n	800f724 <prvUnlockQueue+0x2e>

0800f766 <xQueueGenericReset>:
{
 800f766:	b538      	push	{r3, r4, r5, lr}
 800f768:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800f76a:	4604      	mov	r4, r0
 800f76c:	b940      	cbnz	r0, 800f780 <xQueueGenericReset+0x1a>
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	e7fe      	b.n	800f77e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800f780:	f7ff fe20 	bl	800f3c4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f784:	6822      	ldr	r2, [r4, #0]
 800f786:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f78a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f78c:	434b      	muls	r3, r1
 800f78e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f790:	1a5b      	subs	r3, r3, r1
 800f792:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f794:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f796:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f798:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f79a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f79c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800f79e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800f7a6:	b9a5      	cbnz	r5, 800f7d2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	b173      	cbz	r3, 800f7ca <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7ac:	f104 0010 	add.w	r0, r4, #16
 800f7b0:	f001 f810 	bl	80107d4 <xTaskRemoveFromEventList>
 800f7b4:	b148      	cbz	r0, 800f7ca <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800f7b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800f7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800f7c2:	f3bf 8f4f 	dsb	sy
 800f7c6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800f7ca:	f7ff fe1b 	bl	800f404 <vPortExitCritical>
}
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7d2:	f104 0010 	add.w	r0, r4, #16
 800f7d6:	f7ff fd4d 	bl	800f274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800f7de:	f7ff fd49 	bl	800f274 <vListInitialise>
 800f7e2:	e7f2      	b.n	800f7ca <xQueueGenericReset+0x64>

0800f7e4 <xQueueGenericCreateStatic>:
	{
 800f7e4:	b513      	push	{r0, r1, r4, lr}
 800f7e6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7e8:	b940      	cbnz	r0, 800f7fc <xQueueGenericCreateStatic+0x18>
 800f7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ee:	f383 8811 	msr	BASEPRI, r3
 800f7f2:	f3bf 8f6f 	isb	sy
 800f7f6:	f3bf 8f4f 	dsb	sy
 800f7fa:	e7fe      	b.n	800f7fa <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800f7fc:	b943      	cbnz	r3, 800f810 <xQueueGenericCreateStatic+0x2c>
 800f7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	e7fe      	b.n	800f80e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f810:	b14a      	cbz	r2, 800f826 <xQueueGenericCreateStatic+0x42>
 800f812:	b991      	cbnz	r1, 800f83a <xQueueGenericCreateStatic+0x56>
 800f814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f818:	f383 8811 	msr	BASEPRI, r3
 800f81c:	f3bf 8f6f 	isb	sy
 800f820:	f3bf 8f4f 	dsb	sy
 800f824:	e7fe      	b.n	800f824 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f826:	b141      	cbz	r1, 800f83a <xQueueGenericCreateStatic+0x56>
 800f828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82c:	f383 8811 	msr	BASEPRI, r3
 800f830:	f3bf 8f6f 	isb	sy
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	e7fe      	b.n	800f838 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f83a:	2350      	movs	r3, #80	; 0x50
 800f83c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f83e:	9b01      	ldr	r3, [sp, #4]
 800f840:	2b50      	cmp	r3, #80	; 0x50
 800f842:	d008      	beq.n	800f856 <xQueueGenericCreateStatic+0x72>
 800f844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f848:	f383 8811 	msr	BASEPRI, r3
 800f84c:	f3bf 8f6f 	isb	sy
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	e7fe      	b.n	800f854 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f856:	2900      	cmp	r1, #0
 800f858:	bf08      	it	eq
 800f85a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f85c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f85e:	2301      	movs	r3, #1
 800f860:	6022      	str	r2, [r4, #0]
 800f862:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800f866:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f86a:	4619      	mov	r1, r3
 800f86c:	4620      	mov	r0, r4
 800f86e:	f7ff ff7a 	bl	800f766 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f872:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800f876:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800f878:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800f87c:	b002      	add	sp, #8
 800f87e:	bd10      	pop	{r4, pc}

0800f880 <xQueueGenericCreate>:
	{
 800f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f882:	460d      	mov	r5, r1
 800f884:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f886:	4606      	mov	r6, r0
 800f888:	b940      	cbnz	r0, 800f89c <xQueueGenericCreate+0x1c>
 800f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	e7fe      	b.n	800f89a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f89c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f89e:	3050      	adds	r0, #80	; 0x50
 800f8a0:	f7ff fc12 	bl	800f0c8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	b170      	cbz	r0, 800f8c6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f8ae:	b165      	cbz	r5, 800f8ca <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8b0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f8b4:	2101      	movs	r1, #1
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800f8ba:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f8be:	f7ff ff52 	bl	800f766 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800f8c2:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	e7f2      	b.n	800f8b4 <xQueueGenericCreate+0x34>

0800f8ce <xQueueCreateCountingSemaphoreStatic>:
	{
 800f8ce:	b513      	push	{r0, r1, r4, lr}
 800f8d0:	4613      	mov	r3, r2
 800f8d2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f8d4:	b940      	cbnz	r0, 800f8e8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800f8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8da:	f383 8811 	msr	BASEPRI, r3
 800f8de:	f3bf 8f6f 	isb	sy
 800f8e2:	f3bf 8f4f 	dsb	sy
 800f8e6:	e7fe      	b.n	800f8e6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f8e8:	4288      	cmp	r0, r1
 800f8ea:	d208      	bcs.n	800f8fe <xQueueCreateCountingSemaphoreStatic+0x30>
 800f8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f0:	f383 8811 	msr	BASEPRI, r3
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	f3bf 8f4f 	dsb	sy
 800f8fc:	e7fe      	b.n	800f8fc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f8fe:	2202      	movs	r2, #2
 800f900:	9200      	str	r2, [sp, #0]
 800f902:	2200      	movs	r2, #0
 800f904:	4611      	mov	r1, r2
 800f906:	f7ff ff6d 	bl	800f7e4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800f90a:	b100      	cbz	r0, 800f90e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f90c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f90e:	b002      	add	sp, #8
 800f910:	bd10      	pop	{r4, pc}

0800f912 <xQueueCreateCountingSemaphore>:
	{
 800f912:	b510      	push	{r4, lr}
 800f914:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f916:	b940      	cbnz	r0, 800f92a <xQueueCreateCountingSemaphore+0x18>
 800f918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f91c:	f383 8811 	msr	BASEPRI, r3
 800f920:	f3bf 8f6f 	isb	sy
 800f924:	f3bf 8f4f 	dsb	sy
 800f928:	e7fe      	b.n	800f928 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f92a:	4288      	cmp	r0, r1
 800f92c:	d208      	bcs.n	800f940 <xQueueCreateCountingSemaphore+0x2e>
 800f92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f932:	f383 8811 	msr	BASEPRI, r3
 800f936:	f3bf 8f6f 	isb	sy
 800f93a:	f3bf 8f4f 	dsb	sy
 800f93e:	e7fe      	b.n	800f93e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f940:	2202      	movs	r2, #2
 800f942:	2100      	movs	r1, #0
 800f944:	f7ff ff9c 	bl	800f880 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f948:	b100      	cbz	r0, 800f94c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f94a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f94c:	bd10      	pop	{r4, pc}

0800f94e <xQueueGenericSend>:
{
 800f94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f952:	b085      	sub	sp, #20
 800f954:	4688      	mov	r8, r1
 800f956:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800f958:	4604      	mov	r4, r0
{
 800f95a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800f95c:	b940      	cbnz	r0, 800f970 <xQueueGenericSend+0x22>
 800f95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f962:	f383 8811 	msr	BASEPRI, r3
 800f966:	f3bf 8f6f 	isb	sy
 800f96a:	f3bf 8f4f 	dsb	sy
 800f96e:	e7fe      	b.n	800f96e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f970:	b951      	cbnz	r1, 800f988 <xQueueGenericSend+0x3a>
 800f972:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f974:	b143      	cbz	r3, 800f988 <xQueueGenericSend+0x3a>
 800f976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	e7fe      	b.n	800f986 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f988:	2f02      	cmp	r7, #2
 800f98a:	d10b      	bne.n	800f9a4 <xQueueGenericSend+0x56>
 800f98c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d008      	beq.n	800f9a4 <xQueueGenericSend+0x56>
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	e7fe      	b.n	800f9a2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9a4:	f000 ffa8 	bl	80108f8 <xTaskGetSchedulerState>
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	b950      	cbnz	r0, 800f9c2 <xQueueGenericSend+0x74>
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	b14b      	cbz	r3, 800f9c4 <xQueueGenericSend+0x76>
 800f9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	e7fe      	b.n	800f9c0 <xQueueGenericSend+0x72>
 800f9c2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800f9c4:	f04f 0900 	mov.w	r9, #0
 800f9c8:	e037      	b.n	800fa3a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f9ca:	9d01      	ldr	r5, [sp, #4]
 800f9cc:	b91d      	cbnz	r5, 800f9d6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800f9ce:	f7ff fd19 	bl	800f404 <vPortExitCritical>
			return errQUEUE_FULL;
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	e052      	b.n	800fa7c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800f9d6:	b916      	cbnz	r6, 800f9de <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9d8:	a802      	add	r0, sp, #8
 800f9da:	f000 ff3f 	bl	801085c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800f9de:	f7ff fd11 	bl	800f404 <vPortExitCritical>
		vTaskSuspendAll();
 800f9e2:	f000 fcf9 	bl	80103d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9e6:	f7ff fced 	bl	800f3c4 <vPortEnterCritical>
 800f9ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800f9ee:	2bff      	cmp	r3, #255	; 0xff
 800f9f0:	d101      	bne.n	800f9f6 <xQueueGenericSend+0xa8>
 800f9f2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800f9f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800f9fa:	2bff      	cmp	r3, #255	; 0xff
 800f9fc:	d101      	bne.n	800fa02 <xQueueGenericSend+0xb4>
 800f9fe:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800fa02:	f7ff fcff 	bl	800f404 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fa06:	a901      	add	r1, sp, #4
 800fa08:	a802      	add	r0, sp, #8
 800fa0a:	f000 ff33 	bl	8010874 <xTaskCheckForTimeOut>
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d14a      	bne.n	800faa8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa12:	f7ff fcd7 	bl	800f3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fa18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d131      	bne.n	800fa82 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800fa1e:	f7ff fcf1 	bl	800f404 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa22:	9901      	ldr	r1, [sp, #4]
 800fa24:	f104 0010 	add.w	r0, r4, #16
 800fa28:	f000 fe9c 	bl	8010764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	f7ff fe62 	bl	800f6f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fa32:	f000 fd75 	bl	8010520 <xTaskResumeAll>
 800fa36:	b360      	cbz	r0, 800fa92 <xQueueGenericSend+0x144>
 800fa38:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fa3a:	f7ff fcc3 	bl	800f3c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fa40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d301      	bcc.n	800fa4a <xQueueGenericSend+0xfc>
 800fa46:	2f02      	cmp	r7, #2
 800fa48:	d1bf      	bne.n	800f9ca <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fa4a:	463a      	mov	r2, r7
 800fa4c:	4641      	mov	r1, r8
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f7ff fe07 	bl	800f662 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa56:	b11b      	cbz	r3, 800fa60 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fa5c:	f000 feba 	bl	80107d4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800fa60:	b148      	cbz	r0, 800fa76 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800fa62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fa76:	f7ff fcc5 	bl	800f404 <vPortExitCritical>
				return pdPASS;
 800fa7a:	2001      	movs	r0, #1
}
 800fa7c:	b005      	add	sp, #20
 800fa7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800fa82:	f7ff fcbf 	bl	800f404 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800fa86:	4620      	mov	r0, r4
 800fa88:	f7ff fe35 	bl	800f6f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa8c:	f000 fd48 	bl	8010520 <xTaskResumeAll>
 800fa90:	e7d2      	b.n	800fa38 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800fa92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fa96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fa9e:	f3bf 8f4f 	dsb	sy
 800faa2:	f3bf 8f6f 	isb	sy
 800faa6:	e7c7      	b.n	800fa38 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800faa8:	4620      	mov	r0, r4
 800faaa:	f7ff fe24 	bl	800f6f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800faae:	f000 fd37 	bl	8010520 <xTaskResumeAll>
 800fab2:	e78e      	b.n	800f9d2 <xQueueGenericSend+0x84>

0800fab4 <xQueueGenericSendFromISR>:
{
 800fab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fab8:	4689      	mov	r9, r1
 800faba:	4690      	mov	r8, r2
 800fabc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800fabe:	4604      	mov	r4, r0
 800fac0:	b940      	cbnz	r0, 800fad4 <xQueueGenericSendFromISR+0x20>
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	f383 8811 	msr	BASEPRI, r3
 800faca:	f3bf 8f6f 	isb	sy
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	e7fe      	b.n	800fad2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fad4:	b951      	cbnz	r1, 800faec <xQueueGenericSendFromISR+0x38>
 800fad6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fad8:	b143      	cbz	r3, 800faec <xQueueGenericSendFromISR+0x38>
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	e7fe      	b.n	800faea <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800faec:	2f02      	cmp	r7, #2
 800faee:	d10b      	bne.n	800fb08 <xQueueGenericSendFromISR+0x54>
 800faf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d008      	beq.n	800fb08 <xQueueGenericSendFromISR+0x54>
 800faf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafa:	f383 8811 	msr	BASEPRI, r3
 800fafe:	f3bf 8f6f 	isb	sy
 800fb02:	f3bf 8f4f 	dsb	sy
 800fb06:	e7fe      	b.n	800fb06 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb08:	f7ff fd72 	bl	800f5f0 <vPortValidateInterruptPriority>
	__asm volatile
 800fb0c:	f3ef 8611 	mrs	r6, BASEPRI
 800fb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800fb22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d301      	bcc.n	800fb2c <xQueueGenericSendFromISR+0x78>
 800fb28:	2f02      	cmp	r7, #2
 800fb2a:	d123      	bne.n	800fb74 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb2c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb30:	463a      	mov	r2, r7
 800fb32:	4649      	mov	r1, r9
 800fb34:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb36:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb3a:	f7ff fd92 	bl	800f662 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800fb3e:	1c6b      	adds	r3, r5, #1
 800fb40:	d113      	bne.n	800fb6a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb44:	b90b      	cbnz	r3, 800fb4a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800fb46:	2001      	movs	r0, #1
 800fb48:	e00b      	b.n	800fb62 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fb4e:	f000 fe41 	bl	80107d4 <xTaskRemoveFromEventList>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d0f7      	beq.n	800fb46 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800fb56:	f1b8 0f00 	cmp.w	r8, #0
 800fb5a:	d0f4      	beq.n	800fb46 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800fb62:	f386 8811 	msr	BASEPRI, r6
}
 800fb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb6a:	3501      	adds	r5, #1
 800fb6c:	b26d      	sxtb	r5, r5
 800fb6e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800fb72:	e7e8      	b.n	800fb46 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800fb74:	2000      	movs	r0, #0
 800fb76:	e7f4      	b.n	800fb62 <xQueueGenericSendFromISR+0xae>

0800fb78 <xQueueGiveFromISR>:
{
 800fb78:	b570      	push	{r4, r5, r6, lr}
 800fb7a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	b940      	cbnz	r0, 800fb92 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800fb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	e7fe      	b.n	800fb90 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fb94:	b143      	cbz	r3, 800fba8 <xQueueGiveFromISR+0x30>
 800fb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9a:	f383 8811 	msr	BASEPRI, r3
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f3bf 8f4f 	dsb	sy
 800fba6:	e7fe      	b.n	800fba6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fba8:	6803      	ldr	r3, [r0, #0]
 800fbaa:	b953      	cbnz	r3, 800fbc2 <xQueueGiveFromISR+0x4a>
 800fbac:	6883      	ldr	r3, [r0, #8]
 800fbae:	b143      	cbz	r3, 800fbc2 <xQueueGiveFromISR+0x4a>
 800fbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	e7fe      	b.n	800fbc0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbc2:	f7ff fd15 	bl	800f5f0 <vPortValidateInterruptPriority>
	__asm volatile
 800fbc6:	f3ef 8611 	mrs	r6, BASEPRI
 800fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fbdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d91c      	bls.n	800fc1c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbe2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbe6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800fbe8:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbea:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbec:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800fbee:	d110      	bne.n	800fc12 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf2:	b90b      	cbnz	r3, 800fbf8 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	e009      	b.n	800fc0c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbf8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fbfc:	f000 fdea 	bl	80107d4 <xTaskRemoveFromEventList>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	d0f7      	beq.n	800fbf4 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800fc04:	2d00      	cmp	r5, #0
 800fc06:	d0f5      	beq.n	800fbf4 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc08:	2001      	movs	r0, #1
 800fc0a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800fc0c:	f386 8811 	msr	BASEPRI, r6
}
 800fc10:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc12:	3301      	adds	r3, #1
 800fc14:	b25b      	sxtb	r3, r3
 800fc16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc1a:	e7eb      	b.n	800fbf4 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	e7f5      	b.n	800fc0c <xQueueGiveFromISR+0x94>

0800fc20 <xQueueReceive>:
{
 800fc20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800fc24:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800fc26:	4604      	mov	r4, r0
{
 800fc28:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fc2a:	b940      	cbnz	r0, 800fc3e <xQueueReceive+0x1e>
	__asm volatile
 800fc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	e7fe      	b.n	800fc3c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc3e:	b951      	cbnz	r1, 800fc56 <xQueueReceive+0x36>
 800fc40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800fc42:	b143      	cbz	r3, 800fc56 <xQueueReceive+0x36>
 800fc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc48:	f383 8811 	msr	BASEPRI, r3
 800fc4c:	f3bf 8f6f 	isb	sy
 800fc50:	f3bf 8f4f 	dsb	sy
 800fc54:	e7fe      	b.n	800fc54 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc56:	f000 fe4f 	bl	80108f8 <xTaskGetSchedulerState>
 800fc5a:	4606      	mov	r6, r0
 800fc5c:	b950      	cbnz	r0, 800fc74 <xQueueReceive+0x54>
 800fc5e:	9b01      	ldr	r3, [sp, #4]
 800fc60:	b14b      	cbz	r3, 800fc76 <xQueueReceive+0x56>
 800fc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc66:	f383 8811 	msr	BASEPRI, r3
 800fc6a:	f3bf 8f6f 	isb	sy
 800fc6e:	f3bf 8f4f 	dsb	sy
 800fc72:	e7fe      	b.n	800fc72 <xQueueReceive+0x52>
 800fc74:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800fc76:	f04f 0800 	mov.w	r8, #0
 800fc7a:	e03d      	b.n	800fcf8 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc7c:	9d01      	ldr	r5, [sp, #4]
 800fc7e:	b91d      	cbnz	r5, 800fc88 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800fc80:	f7ff fbc0 	bl	800f404 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800fc84:	2000      	movs	r0, #0
 800fc86:	e056      	b.n	800fd36 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800fc88:	b916      	cbnz	r6, 800fc90 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc8a:	a802      	add	r0, sp, #8
 800fc8c:	f000 fde6 	bl	801085c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fc90:	f7ff fbb8 	bl	800f404 <vPortExitCritical>
		vTaskSuspendAll();
 800fc94:	f000 fba0 	bl	80103d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc98:	f7ff fb94 	bl	800f3c4 <vPortEnterCritical>
 800fc9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fca0:	2bff      	cmp	r3, #255	; 0xff
 800fca2:	d101      	bne.n	800fca8 <xQueueReceive+0x88>
 800fca4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800fca8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fcac:	2bff      	cmp	r3, #255	; 0xff
 800fcae:	d101      	bne.n	800fcb4 <xQueueReceive+0x94>
 800fcb0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800fcb4:	f7ff fba6 	bl	800f404 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcb8:	a901      	add	r1, sp, #4
 800fcba:	a802      	add	r0, sp, #8
 800fcbc:	f000 fdda 	bl	8010874 <xTaskCheckForTimeOut>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	d141      	bne.n	800fd48 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f7ff fcc1 	bl	800f64c <prvIsQueueEmpty>
 800fcca:	b3b8      	cbz	r0, 800fd3c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fccc:	9901      	ldr	r1, [sp, #4]
 800fcce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fcd2:	f000 fd47 	bl	8010764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f7ff fd0d 	bl	800f6f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fcdc:	f000 fc20 	bl	8010520 <xTaskResumeAll>
 800fce0:	b948      	cbnz	r0, 800fcf6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800fce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fcee:	f3bf 8f4f 	dsb	sy
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fcf8:	f7ff fb64 	bl	800f3c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcfc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcfe:	2d00      	cmp	r5, #0
 800fd00:	d0bc      	beq.n	800fc7c <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd02:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd04:	4639      	mov	r1, r7
 800fd06:	4620      	mov	r0, r4
 800fd08:	f7ff fce0 	bl	800f6cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd0c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd0e:	6923      	ldr	r3, [r4, #16]
 800fd10:	b173      	cbz	r3, 800fd30 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd12:	f104 0010 	add.w	r0, r4, #16
 800fd16:	f000 fd5d 	bl	80107d4 <xTaskRemoveFromEventList>
 800fd1a:	b148      	cbz	r0, 800fd30 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800fd1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fd20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800fd30:	f7ff fb68 	bl	800f404 <vPortExitCritical>
				return pdPASS;
 800fd34:	2001      	movs	r0, #1
}
 800fd36:	b004      	add	sp, #16
 800fd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f7ff fcda 	bl	800f6f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd42:	f000 fbed 	bl	8010520 <xTaskResumeAll>
 800fd46:	e7d6      	b.n	800fcf6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7ff fcd4 	bl	800f6f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd4e:	f000 fbe7 	bl	8010520 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd52:	4620      	mov	r0, r4
 800fd54:	f7ff fc7a 	bl	800f64c <prvIsQueueEmpty>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d0cc      	beq.n	800fcf6 <xQueueReceive+0xd6>
 800fd5c:	e792      	b.n	800fc84 <xQueueReceive+0x64>

0800fd5e <xQueueSemaphoreTake>:
{
 800fd5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd60:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800fd62:	4604      	mov	r4, r0
{
 800fd64:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800fd66:	b940      	cbnz	r0, 800fd7a <xQueueSemaphoreTake+0x1c>
 800fd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	e7fe      	b.n	800fd78 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800fd7a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800fd7c:	b145      	cbz	r5, 800fd90 <xQueueSemaphoreTake+0x32>
 800fd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	e7fe      	b.n	800fd8e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd90:	f000 fdb2 	bl	80108f8 <xTaskGetSchedulerState>
 800fd94:	4606      	mov	r6, r0
 800fd96:	b950      	cbnz	r0, 800fdae <xQueueSemaphoreTake+0x50>
 800fd98:	9b01      	ldr	r3, [sp, #4]
 800fd9a:	b15b      	cbz	r3, 800fdb4 <xQueueSemaphoreTake+0x56>
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	e7fe      	b.n	800fdac <xQueueSemaphoreTake+0x4e>
 800fdae:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800fdb0:	2700      	movs	r7, #0
 800fdb2:	e053      	b.n	800fe5c <xQueueSemaphoreTake+0xfe>
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	e7fb      	b.n	800fdb0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	b963      	cbnz	r3, 800fdd6 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fdbc:	b145      	cbz	r5, 800fdd0 <xQueueSemaphoreTake+0x72>
 800fdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc2:	f383 8811 	msr	BASEPRI, r3
 800fdc6:	f3bf 8f6f 	isb	sy
 800fdca:	f3bf 8f4f 	dsb	sy
 800fdce:	e7fe      	b.n	800fdce <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800fdd0:	f7ff fb18 	bl	800f404 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800fdd4:	e062      	b.n	800fe9c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800fdd6:	b916      	cbnz	r6, 800fdde <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fdd8:	a802      	add	r0, sp, #8
 800fdda:	f000 fd3f 	bl	801085c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800fdde:	f7ff fb11 	bl	800f404 <vPortExitCritical>
		vTaskSuspendAll();
 800fde2:	f000 faf9 	bl	80103d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fde6:	f7ff faed 	bl	800f3c4 <vPortEnterCritical>
 800fdea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fdee:	2bff      	cmp	r3, #255	; 0xff
 800fdf0:	d101      	bne.n	800fdf6 <xQueueSemaphoreTake+0x98>
 800fdf2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800fdf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800fdfa:	2bff      	cmp	r3, #255	; 0xff
 800fdfc:	d101      	bne.n	800fe02 <xQueueSemaphoreTake+0xa4>
 800fdfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fe02:	f7ff faff 	bl	800f404 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe06:	a901      	add	r1, sp, #4
 800fe08:	a802      	add	r0, sp, #8
 800fe0a:	f000 fd33 	bl	8010874 <xTaskCheckForTimeOut>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d14d      	bne.n	800feae <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe12:	4620      	mov	r0, r4
 800fe14:	f7ff fc1a 	bl	800f64c <prvIsQueueEmpty>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d042      	beq.n	800fea2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe1c:	6823      	ldr	r3, [r4, #0]
 800fe1e:	b93b      	cbnz	r3, 800fe30 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800fe20:	f7ff fad0 	bl	800f3c4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe24:	68a0      	ldr	r0, [r4, #8]
 800fe26:	f000 fd77 	bl	8010918 <xTaskPriorityInherit>
 800fe2a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800fe2c:	f7ff faea 	bl	800f404 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe30:	9901      	ldr	r1, [sp, #4]
 800fe32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800fe36:	f000 fc95 	bl	8010764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f7ff fc5b 	bl	800f6f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe40:	f000 fb6e 	bl	8010520 <xTaskResumeAll>
 800fe44:	b948      	cbnz	r0, 800fe5a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800fe46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800fe5c:	f7ff fab2 	bl	800f3c4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fe60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0a8      	beq.n	800fdb8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fe66:	3b01      	subs	r3, #1
 800fe68:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	b913      	cbnz	r3, 800fe74 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe6e:	f000 fe29 	bl	8010ac4 <pvTaskIncrementMutexHeldCount>
 800fe72:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe74:	6923      	ldr	r3, [r4, #16]
 800fe76:	b173      	cbz	r3, 800fe96 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe78:	f104 0010 	add.w	r0, r4, #16
 800fe7c:	f000 fcaa 	bl	80107d4 <xTaskRemoveFromEventList>
 800fe80:	b148      	cbz	r0, 800fe96 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800fe82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800fe86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe8a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800fe8e:	f3bf 8f4f 	dsb	sy
 800fe92:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800fe96:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800fe98:	f7ff fab4 	bl	800f404 <vPortExitCritical>
}
 800fe9c:	4628      	mov	r0, r5
 800fe9e:	b005      	add	sp, #20
 800fea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800fea2:	4620      	mov	r0, r4
 800fea4:	f7ff fc27 	bl	800f6f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fea8:	f000 fb3a 	bl	8010520 <xTaskResumeAll>
 800feac:	e7d5      	b.n	800fe5a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800feae:	4620      	mov	r0, r4
 800feb0:	f7ff fc21 	bl	800f6f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800feb4:	f000 fb34 	bl	8010520 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800feb8:	4620      	mov	r0, r4
 800feba:	f7ff fbc7 	bl	800f64c <prvIsQueueEmpty>
 800febe:	2800      	cmp	r0, #0
 800fec0:	d0cb      	beq.n	800fe5a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800fec2:	2d00      	cmp	r5, #0
 800fec4:	d0ea      	beq.n	800fe9c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800fec6:	f7ff fa7d 	bl	800f3c4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800feca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fecc:	b119      	cbz	r1, 800fed6 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fed0:	6819      	ldr	r1, [r3, #0]
 800fed2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fed6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800fed8:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800feda:	f000 fda1 	bl	8010a20 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800fede:	f7ff fa91 	bl	800f404 <vPortExitCritical>
 800fee2:	e7db      	b.n	800fe9c <xQueueSemaphoreTake+0x13e>

0800fee4 <xQueueReceiveFromISR>:
{
 800fee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee8:	4689      	mov	r9, r1
 800feea:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800feec:	4605      	mov	r5, r0
 800feee:	b940      	cbnz	r0, 800ff02 <xQueueReceiveFromISR+0x1e>
 800fef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef4:	f383 8811 	msr	BASEPRI, r3
 800fef8:	f3bf 8f6f 	isb	sy
 800fefc:	f3bf 8f4f 	dsb	sy
 800ff00:	e7fe      	b.n	800ff00 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff02:	b951      	cbnz	r1, 800ff1a <xQueueReceiveFromISR+0x36>
 800ff04:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ff06:	b143      	cbz	r3, 800ff1a <xQueueReceiveFromISR+0x36>
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	e7fe      	b.n	800ff18 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff1a:	f7ff fb69 	bl	800f5f0 <vPortValidateInterruptPriority>
	__asm volatile
 800ff1e:	f3ef 8711 	mrs	r7, BASEPRI
 800ff22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff26:	f383 8811 	msr	BASEPRI, r3
 800ff2a:	f3bf 8f6f 	isb	sy
 800ff2e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff32:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff34:	b31c      	cbz	r4, 800ff7e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff36:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff3a:	4649      	mov	r1, r9
 800ff3c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff3e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff40:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff42:	f7ff fbc3 	bl	800f6cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff46:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800ff48:	1c73      	adds	r3, r6, #1
 800ff4a:	d113      	bne.n	800ff74 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4c:	692b      	ldr	r3, [r5, #16]
 800ff4e:	b90b      	cbnz	r3, 800ff54 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800ff50:	2001      	movs	r0, #1
 800ff52:	e00b      	b.n	800ff6c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff54:	f105 0010 	add.w	r0, r5, #16
 800ff58:	f000 fc3c 	bl	80107d4 <xTaskRemoveFromEventList>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d0f7      	beq.n	800ff50 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800ff60:	f1b8 0f00 	cmp.w	r8, #0
 800ff64:	d0f4      	beq.n	800ff50 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff66:	2001      	movs	r0, #1
 800ff68:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800ff6c:	f387 8811 	msr	BASEPRI, r7
}
 800ff70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff74:	3601      	adds	r6, #1
 800ff76:	b276      	sxtb	r6, r6
 800ff78:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800ff7c:	e7e8      	b.n	800ff50 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800ff7e:	4620      	mov	r0, r4
 800ff80:	e7f4      	b.n	800ff6c <xQueueReceiveFromISR+0x88>
	...

0800ff84 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff84:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ff86:	4a07      	ldr	r2, [pc, #28]	; (800ffa4 <vQueueAddToRegistry+0x20>)
	{
 800ff88:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ff8a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800ff8e:	b92c      	cbnz	r4, 800ff9c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ff90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ff94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff98:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ff9a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	2b08      	cmp	r3, #8
 800ffa0:	d1f3      	bne.n	800ff8a <vQueueAddToRegistry+0x6>
 800ffa2:	e7fa      	b.n	800ff9a <vQueueAddToRegistry+0x16>
 800ffa4:	2400e3c0 	.word	0x2400e3c0

0800ffa8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffa8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ffaa:	4a08      	ldr	r2, [pc, #32]	; (800ffcc <vQueueUnregisterQueue+0x24>)
	{
 800ffac:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ffae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800ffb2:	684c      	ldr	r4, [r1, #4]
 800ffb4:	4284      	cmp	r4, r0
 800ffb6:	d104      	bne.n	800ffc2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ffbe:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ffc0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d1f2      	bne.n	800ffae <vQueueUnregisterQueue+0x6>
 800ffc8:	e7fa      	b.n	800ffc0 <vQueueUnregisterQueue+0x18>
 800ffca:	bf00      	nop
 800ffcc:	2400e3c0 	.word	0x2400e3c0

0800ffd0 <vQueueDelete>:
{
 800ffd0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	b940      	cbnz	r0, 800ffe8 <vQueueDelete+0x18>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	e7fe      	b.n	800ffe6 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800ffe8:	f7ff ffde 	bl	800ffa8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ffec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800fff0:	b923      	cbnz	r3, 800fffc <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800fff2:	4620      	mov	r0, r4
}
 800fff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800fff8:	f7ff b8fe 	b.w	800f1f8 <vPortFree>
}
 800fffc:	bd10      	pop	{r4, pc}

0800fffe <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fffe:	b570      	push	{r4, r5, r6, lr}
 8010000:	4604      	mov	r4, r0
 8010002:	460d      	mov	r5, r1
 8010004:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010006:	f7ff f9dd 	bl	800f3c4 <vPortEnterCritical>
 801000a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801000e:	2bff      	cmp	r3, #255	; 0xff
 8010010:	d102      	bne.n	8010018 <vQueueWaitForMessageRestricted+0x1a>
 8010012:	2300      	movs	r3, #0
 8010014:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010018:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801001c:	2bff      	cmp	r3, #255	; 0xff
 801001e:	d102      	bne.n	8010026 <vQueueWaitForMessageRestricted+0x28>
 8010020:	2300      	movs	r3, #0
 8010022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010026:	f7ff f9ed 	bl	800f404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801002a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801002c:	b92b      	cbnz	r3, 801003a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801002e:	4632      	mov	r2, r6
 8010030:	4629      	mov	r1, r5
 8010032:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010036:	f000 fbaf 	bl	8010798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801003a:	4620      	mov	r0, r4
	}
 801003c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8010040:	f7ff bb59 	b.w	800f6f6 <prvUnlockQueue>

08010044 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010048:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801004a:	f7ff f9bb 	bl	800f3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801004e:	4b2f      	ldr	r3, [pc, #188]	; (801010c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8010050:	4e2f      	ldr	r6, [pc, #188]	; (8010110 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	4f2f      	ldr	r7, [pc, #188]	; (8010114 <prvAddNewTaskToReadyList+0xd0>)
 8010056:	3201      	adds	r2, #1
 8010058:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801005a:	6835      	ldr	r5, [r6, #0]
 801005c:	2d00      	cmp	r5, #0
 801005e:	d14a      	bne.n	80100f6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010060:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d11f      	bne.n	80100a8 <prvAddNewTaskToReadyList+0x64>
 8010068:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801006a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801006c:	4640      	mov	r0, r8
 801006e:	f7ff f901 	bl	800f274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010072:	f108 0814 	add.w	r8, r8, #20
 8010076:	2d38      	cmp	r5, #56	; 0x38
 8010078:	d1f7      	bne.n	801006a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 801007a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801013c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 801007e:	4d26      	ldr	r5, [pc, #152]	; (8010118 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 8010080:	4640      	mov	r0, r8
 8010082:	f7ff f8f7 	bl	800f274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010086:	4628      	mov	r0, r5
 8010088:	f7ff f8f4 	bl	800f274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801008c:	4823      	ldr	r0, [pc, #140]	; (801011c <prvAddNewTaskToReadyList+0xd8>)
 801008e:	f7ff f8f1 	bl	800f274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010092:	4823      	ldr	r0, [pc, #140]	; (8010120 <prvAddNewTaskToReadyList+0xdc>)
 8010094:	f7ff f8ee 	bl	800f274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010098:	4822      	ldr	r0, [pc, #136]	; (8010124 <prvAddNewTaskToReadyList+0xe0>)
 801009a:	f7ff f8eb 	bl	800f274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801009e:	4b22      	ldr	r3, [pc, #136]	; (8010128 <prvAddNewTaskToReadyList+0xe4>)
 80100a0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80100a4:	4b21      	ldr	r3, [pc, #132]	; (801012c <prvAddNewTaskToReadyList+0xe8>)
 80100a6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80100a8:	4a21      	ldr	r2, [pc, #132]	; (8010130 <prvAddNewTaskToReadyList+0xec>)
 80100aa:	6813      	ldr	r3, [r2, #0]
 80100ac:	3301      	adds	r3, #1
 80100ae:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80100b0:	4a20      	ldr	r2, [pc, #128]	; (8010134 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80100b2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80100b4:	6811      	ldr	r1, [r2, #0]
 80100b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80100b8:	428b      	cmp	r3, r1
 80100ba:	d900      	bls.n	80100be <prvAddNewTaskToReadyList+0x7a>
 80100bc:	6013      	str	r3, [r2, #0]
 80100be:	2014      	movs	r0, #20
 80100c0:	1d21      	adds	r1, r4, #4
 80100c2:	fb00 7003 	mla	r0, r0, r3, r7
 80100c6:	f7ff f8e3 	bl	800f290 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80100ca:	f7ff f99b 	bl	800f404 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80100ce:	4b1a      	ldr	r3, [pc, #104]	; (8010138 <prvAddNewTaskToReadyList+0xf4>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	b173      	cbz	r3, 80100f2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80100d4:	6833      	ldr	r3, [r6, #0]
 80100d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80100da:	429a      	cmp	r2, r3
 80100dc:	d209      	bcs.n	80100f2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80100de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80100e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	f3bf 8f6f 	isb	sy
}
 80100f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80100f6:	4b10      	ldr	r3, [pc, #64]	; (8010138 <prvAddNewTaskToReadyList+0xf4>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d1d4      	bne.n	80100a8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80100fe:	6833      	ldr	r3, [r6, #0]
 8010100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010102:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010104:	429a      	cmp	r2, r3
 8010106:	d8cf      	bhi.n	80100a8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8010108:	6034      	str	r4, [r6, #0]
 801010a:	e7cd      	b.n	80100a8 <prvAddNewTaskToReadyList+0x64>
 801010c:	2400e86c 	.word	0x2400e86c
 8010110:	2400e400 	.word	0x2400e400
 8010114:	2400e40c 	.word	0x2400e40c
 8010118:	2400e894 	.word	0x2400e894
 801011c:	2400e8b4 	.word	0x2400e8b4
 8010120:	2400e8e0 	.word	0x2400e8e0
 8010124:	2400e8cc 	.word	0x2400e8cc
 8010128:	2400e404 	.word	0x2400e404
 801012c:	2400e408 	.word	0x2400e408
 8010130:	2400e878 	.word	0x2400e878
 8010134:	2400e87c 	.word	0x2400e87c
 8010138:	2400e8c8 	.word	0x2400e8c8
 801013c:	2400e880 	.word	0x2400e880

08010140 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010142:	4b15      	ldr	r3, [pc, #84]	; (8010198 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8010144:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010146:	4e15      	ldr	r6, [pc, #84]	; (801019c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8010148:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801014a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801014c:	6830      	ldr	r0, [r6, #0]
 801014e:	3004      	adds	r0, #4
 8010150:	f7ff f8c1 	bl	800f2d6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010154:	1c63      	adds	r3, r4, #1
 8010156:	d107      	bne.n	8010168 <prvAddCurrentTaskToDelayedList+0x28>
 8010158:	b137      	cbz	r7, 8010168 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801015a:	6831      	ldr	r1, [r6, #0]
 801015c:	4810      	ldr	r0, [pc, #64]	; (80101a0 <prvAddCurrentTaskToDelayedList+0x60>)
 801015e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010164:	f7ff b894 	b.w	800f290 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010168:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801016a:	6833      	ldr	r3, [r6, #0]
 801016c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801016e:	d307      	bcc.n	8010180 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010170:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <prvAddCurrentTaskToDelayedList+0x64>)
 8010172:	6818      	ldr	r0, [r3, #0]
 8010174:	6831      	ldr	r1, [r6, #0]
}
 8010176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801017a:	3104      	adds	r1, #4
 801017c:	f7ff b894 	b.w	800f2a8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010180:	4b09      	ldr	r3, [pc, #36]	; (80101a8 <prvAddCurrentTaskToDelayedList+0x68>)
 8010182:	6818      	ldr	r0, [r3, #0]
 8010184:	6831      	ldr	r1, [r6, #0]
 8010186:	3104      	adds	r1, #4
 8010188:	f7ff f88e 	bl	800f2a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801018c:	4b07      	ldr	r3, [pc, #28]	; (80101ac <prvAddCurrentTaskToDelayedList+0x6c>)
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	42a2      	cmp	r2, r4
 8010192:	d900      	bls.n	8010196 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 8010194:	601c      	str	r4, [r3, #0]
}
 8010196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010198:	2400e8f4 	.word	0x2400e8f4
 801019c:	2400e400 	.word	0x2400e400
 80101a0:	2400e8cc 	.word	0x2400e8cc
 80101a4:	2400e408 	.word	0x2400e408
 80101a8:	2400e404 	.word	0x2400e404
 80101ac:	2400e8a8 	.word	0x2400e8a8

080101b0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101b0:	4a06      	ldr	r2, [pc, #24]	; (80101cc <prvResetNextTaskUnblockTime+0x1c>)
 80101b2:	6813      	ldr	r3, [r2, #0]
 80101b4:	6819      	ldr	r1, [r3, #0]
 80101b6:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <prvResetNextTaskUnblockTime+0x20>)
 80101b8:	b919      	cbnz	r1, 80101c2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80101ba:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101be:	601a      	str	r2, [r3, #0]
}
 80101c0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c2:	6812      	ldr	r2, [r2, #0]
 80101c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101c6:	68d2      	ldr	r2, [r2, #12]
 80101c8:	6852      	ldr	r2, [r2, #4]
 80101ca:	e7f8      	b.n	80101be <prvResetNextTaskUnblockTime+0xe>
 80101cc:	2400e404 	.word	0x2400e404
 80101d0:	2400e8a8 	.word	0x2400e8a8

080101d4 <prvDeleteTCB>:
	{
 80101d4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101d6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 80101da:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80101dc:	b93b      	cbnz	r3, 80101ee <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80101de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80101e0:	f7ff f80a 	bl	800f1f8 <vPortFree>
				vPortFree( pxTCB );
 80101e4:	4620      	mov	r0, r4
	}
 80101e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80101ea:	f7ff b805 	b.w	800f1f8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d0f9      	beq.n	80101e6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d008      	beq.n	8010208 <prvDeleteTCB+0x34>
 80101f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fa:	f383 8811 	msr	BASEPRI, r3
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f3bf 8f4f 	dsb	sy
 8010206:	e7fe      	b.n	8010206 <prvDeleteTCB+0x32>
	}
 8010208:	bd10      	pop	{r4, pc}
	...

0801020c <prvIdleTask>:
{
 801020c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801020e:	4c14      	ldr	r4, [pc, #80]	; (8010260 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010210:	4f14      	ldr	r7, [pc, #80]	; (8010264 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8010212:	4d15      	ldr	r5, [pc, #84]	; (8010268 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010214:	6823      	ldr	r3, [r4, #0]
 8010216:	b983      	cbnz	r3, 801023a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010218:	4b14      	ldr	r3, [pc, #80]	; (801026c <prvIdleTask+0x60>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	2b01      	cmp	r3, #1
 801021e:	d909      	bls.n	8010234 <prvIdleTask+0x28>
				taskYIELD();
 8010220:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010228:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8010234:	f7f0 fa60 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8010238:	e7eb      	b.n	8010212 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 801023a:	f7ff f8c3 	bl	800f3c4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010242:	1d30      	adds	r0, r6, #4
 8010244:	f7ff f847 	bl	800f2d6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010248:	682b      	ldr	r3, [r5, #0]
 801024a:	3b01      	subs	r3, #1
 801024c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	3b01      	subs	r3, #1
 8010252:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8010254:	f7ff f8d6 	bl	800f404 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8010258:	4630      	mov	r0, r6
 801025a:	f7ff ffbb 	bl	80101d4 <prvDeleteTCB>
 801025e:	e7d9      	b.n	8010214 <prvIdleTask+0x8>
 8010260:	2400e870 	.word	0x2400e870
 8010264:	2400e8e0 	.word	0x2400e8e0
 8010268:	2400e86c 	.word	0x2400e86c
 801026c:	2400e40c 	.word	0x2400e40c

08010270 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010274:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010278:	4606      	mov	r6, r0
 801027a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801027c:	21a5      	movs	r1, #165	; 0xa5
 801027e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010280:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010282:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8010286:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801028a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801028c:	f011 fde0 	bl	8021e50 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010290:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8010292:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010294:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8010298:	b3b5      	cbz	r5, 8010308 <prvInitialiseNewTask.constprop.0+0x98>
 801029a:	1e6b      	subs	r3, r5, #1
 801029c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80102a0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80102a6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80102aa:	b108      	cbz	r0, 80102b0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102ac:	42ab      	cmp	r3, r5
 80102ae:	d1f8      	bne.n	80102a2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102b0:	2300      	movs	r3, #0
 80102b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80102b6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80102b8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80102bc:	1d20      	adds	r0, r4, #4
 80102be:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80102c0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 80102c4:	bf28      	it	cs
 80102c6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80102c8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80102ca:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102cc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80102d0:	f7fe ffdb 	bl	800f28a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80102d4:	f104 0018 	add.w	r0, r4, #24
 80102d8:	f7fe ffd7 	bl	800f28a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80102dc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102e0:	463a      	mov	r2, r7
 80102e2:	4631      	mov	r1, r6
 80102e4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80102e6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102e8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80102ea:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80102ec:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80102f0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80102f4:	f7ff f83e 	bl	800f374 <pxPortInitialiseStack>
 80102f8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80102fa:	f1b8 0f00 	cmp.w	r8, #0
 80102fe:	d001      	beq.n	8010304 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010300:	f8c8 4000 	str.w	r4, [r8]
}
 8010304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010308:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 801030c:	e7d3      	b.n	80102b6 <prvInitialiseNewTask.constprop.0+0x46>

0801030e <xTaskCreateStatic>:
	{
 801030e:	b570      	push	{r4, r5, r6, lr}
 8010310:	b086      	sub	sp, #24
 8010312:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8010316:	b945      	cbnz	r5, 801032a <xTaskCreateStatic+0x1c>
 8010318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031c:	f383 8811 	msr	BASEPRI, r3
 8010320:	f3bf 8f6f 	isb	sy
 8010324:	f3bf 8f4f 	dsb	sy
 8010328:	e7fe      	b.n	8010328 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 801032a:	b944      	cbnz	r4, 801033e <xTaskCreateStatic+0x30>
 801032c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010330:	f383 8811 	msr	BASEPRI, r3
 8010334:	f3bf 8f6f 	isb	sy
 8010338:	f3bf 8f4f 	dsb	sy
 801033c:	e7fe      	b.n	801033c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801033e:	2660      	movs	r6, #96	; 0x60
 8010340:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010342:	9e05      	ldr	r6, [sp, #20]
 8010344:	2e60      	cmp	r6, #96	; 0x60
 8010346:	d008      	beq.n	801035a <xTaskCreateStatic+0x4c>
 8010348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	e7fe      	b.n	8010358 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801035a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801035c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801035e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010360:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010364:	ad04      	add	r5, sp, #16
 8010366:	9402      	str	r4, [sp, #8]
 8010368:	9501      	str	r5, [sp, #4]
 801036a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801036c:	9500      	str	r5, [sp, #0]
 801036e:	f7ff ff7f 	bl	8010270 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010372:	4620      	mov	r0, r4
 8010374:	f7ff fe66 	bl	8010044 <prvAddNewTaskToReadyList>
	}
 8010378:	9804      	ldr	r0, [sp, #16]
 801037a:	b006      	add	sp, #24
 801037c:	bd70      	pop	{r4, r5, r6, pc}

0801037e <xTaskCreate>:
	{
 801037e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010382:	4607      	mov	r7, r0
 8010384:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010386:	0090      	lsls	r0, r2, #2
	{
 8010388:	4688      	mov	r8, r1
 801038a:	4616      	mov	r6, r2
 801038c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801038e:	f7fe fe9b 	bl	800f0c8 <pvPortMalloc>
			if( pxStack != NULL )
 8010392:	4605      	mov	r5, r0
 8010394:	b1e8      	cbz	r0, 80103d2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010396:	2060      	movs	r0, #96	; 0x60
 8010398:	f7fe fe96 	bl	800f0c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801039c:	4604      	mov	r4, r0
 801039e:	b1a8      	cbz	r0, 80103cc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103a0:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80103a2:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103a4:	4632      	mov	r2, r6
 80103a6:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80103a8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80103ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80103ae:	9002      	str	r0, [sp, #8]
 80103b0:	4638      	mov	r0, r7
 80103b2:	9301      	str	r3, [sp, #4]
 80103b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	464b      	mov	r3, r9
 80103ba:	f7ff ff59 	bl	8010270 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80103be:	4620      	mov	r0, r4
 80103c0:	f7ff fe40 	bl	8010044 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80103c4:	2001      	movs	r0, #1
	}
 80103c6:	b005      	add	sp, #20
 80103c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80103cc:	4628      	mov	r0, r5
 80103ce:	f7fe ff13 	bl	800f1f8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80103d2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80103d6:	e7f6      	b.n	80103c6 <xTaskCreate+0x48>

080103d8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80103d8:	4a02      	ldr	r2, [pc, #8]	; (80103e4 <vTaskSuspendAll+0xc>)
 80103da:	6813      	ldr	r3, [r2, #0]
 80103dc:	3301      	adds	r3, #1
 80103de:	6013      	str	r3, [r2, #0]
}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	2400e874 	.word	0x2400e874

080103e8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80103e8:	4b01      	ldr	r3, [pc, #4]	; (80103f0 <xTaskGetTickCount+0x8>)
 80103ea:	6818      	ldr	r0, [r3, #0]
}
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop
 80103f0:	2400e8f4 	.word	0x2400e8f4

080103f4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103f4:	4b3f      	ldr	r3, [pc, #252]	; (80104f4 <xTaskIncrementTick+0x100>)
 80103f6:	681b      	ldr	r3, [r3, #0]
{
 80103f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d172      	bne.n	80104e6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010400:	4b3d      	ldr	r3, [pc, #244]	; (80104f8 <xTaskIncrementTick+0x104>)
 8010402:	681d      	ldr	r5, [r3, #0]
 8010404:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8010406:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010408:	b9bd      	cbnz	r5, 801043a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 801040a:	4b3c      	ldr	r3, [pc, #240]	; (80104fc <xTaskIncrementTick+0x108>)
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	6812      	ldr	r2, [r2, #0]
 8010410:	b142      	cbz	r2, 8010424 <xTaskIncrementTick+0x30>
 8010412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	e7fe      	b.n	8010422 <xTaskIncrementTick+0x2e>
 8010424:	4a36      	ldr	r2, [pc, #216]	; (8010500 <xTaskIncrementTick+0x10c>)
 8010426:	6819      	ldr	r1, [r3, #0]
 8010428:	6810      	ldr	r0, [r2, #0]
 801042a:	6018      	str	r0, [r3, #0]
 801042c:	6011      	str	r1, [r2, #0]
 801042e:	4a35      	ldr	r2, [pc, #212]	; (8010504 <xTaskIncrementTick+0x110>)
 8010430:	6813      	ldr	r3, [r2, #0]
 8010432:	3301      	adds	r3, #1
 8010434:	6013      	str	r3, [r2, #0]
 8010436:	f7ff febb 	bl	80101b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801043a:	4e33      	ldr	r6, [pc, #204]	; (8010508 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 801043c:	2400      	movs	r4, #0
 801043e:	4f33      	ldr	r7, [pc, #204]	; (801050c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010440:	6833      	ldr	r3, [r6, #0]
 8010442:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8010518 <xTaskIncrementTick+0x124>
 8010446:	429d      	cmp	r5, r3
 8010448:	d211      	bcs.n	801046e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801044a:	f8d8 3000 	ldr.w	r3, [r8]
 801044e:	2214      	movs	r2, #20
 8010450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010452:	4353      	muls	r3, r2
 8010454:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8010456:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8010458:	4b2d      	ldr	r3, [pc, #180]	; (8010510 <xTaskIncrementTick+0x11c>)
 801045a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 801045c:	bf28      	it	cs
 801045e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8010460:	2b00      	cmp	r3, #0
 8010462:	bf18      	it	ne
 8010464:	2401      	movne	r4, #1
}
 8010466:	4620      	mov	r0, r4
 8010468:	b003      	add	sp, #12
 801046a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801046e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80104fc <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8010472:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 801051c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010476:	f8d9 3000 	ldr.w	r3, [r9]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	b91b      	cbnz	r3, 8010486 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801047e:	f04f 33ff 	mov.w	r3, #4294967295
 8010482:	6033      	str	r3, [r6, #0]
					break;
 8010484:	e7e1      	b.n	801044a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010486:	f8d9 3000 	ldr.w	r3, [r9]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010490:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8010494:	4295      	cmp	r5, r2
 8010496:	d201      	bcs.n	801049c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8010498:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801049a:	e7d6      	b.n	801044a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801049c:	f10b 0104 	add.w	r1, fp, #4
 80104a0:	4608      	mov	r0, r1
 80104a2:	9101      	str	r1, [sp, #4]
 80104a4:	f7fe ff17 	bl	800f2d6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80104a8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80104ac:	9901      	ldr	r1, [sp, #4]
 80104ae:	b122      	cbz	r2, 80104ba <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80104b0:	f10b 0018 	add.w	r0, fp, #24
 80104b4:	f7fe ff0f 	bl	800f2d6 <uxListRemove>
 80104b8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80104ba:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80104be:	f8da 2000 	ldr.w	r2, [sl]
 80104c2:	4290      	cmp	r0, r2
 80104c4:	d901      	bls.n	80104ca <xTaskIncrementTick+0xd6>
 80104c6:	f8ca 0000 	str.w	r0, [sl]
 80104ca:	2314      	movs	r3, #20
 80104cc:	fb03 7000 	mla	r0, r3, r0, r7
 80104d0:	f7fe fede 	bl	800f290 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80104d4:	f8d8 1000 	ldr.w	r1, [r8]
 80104d8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80104dc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80104de:	429a      	cmp	r2, r3
 80104e0:	bf28      	it	cs
 80104e2:	2401      	movcs	r4, #1
 80104e4:	e7c7      	b.n	8010476 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 80104e6:	4a0b      	ldr	r2, [pc, #44]	; (8010514 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80104e8:	2400      	movs	r4, #0
		++xPendedTicks;
 80104ea:	6813      	ldr	r3, [r2, #0]
 80104ec:	3301      	adds	r3, #1
 80104ee:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 80104f0:	e7b9      	b.n	8010466 <xTaskIncrementTick+0x72>
 80104f2:	bf00      	nop
 80104f4:	2400e874 	.word	0x2400e874
 80104f8:	2400e8f4 	.word	0x2400e8f4
 80104fc:	2400e404 	.word	0x2400e404
 8010500:	2400e408 	.word	0x2400e408
 8010504:	2400e8ac 	.word	0x2400e8ac
 8010508:	2400e8a8 	.word	0x2400e8a8
 801050c:	2400e40c 	.word	0x2400e40c
 8010510:	2400e8f8 	.word	0x2400e8f8
 8010514:	2400e8b0 	.word	0x2400e8b0
 8010518:	2400e400 	.word	0x2400e400
 801051c:	2400e87c 	.word	0x2400e87c

08010520 <xTaskResumeAll>:
{
 8010520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8010522:	4c31      	ldr	r4, [pc, #196]	; (80105e8 <xTaskResumeAll+0xc8>)
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	b943      	cbnz	r3, 801053a <xTaskResumeAll+0x1a>
 8010528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052c:	f383 8811 	msr	BASEPRI, r3
 8010530:	f3bf 8f6f 	isb	sy
 8010534:	f3bf 8f4f 	dsb	sy
 8010538:	e7fe      	b.n	8010538 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 801053a:	f7fe ff43 	bl	800f3c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	3b01      	subs	r3, #1
 8010542:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010544:	6824      	ldr	r4, [r4, #0]
 8010546:	b12c      	cbz	r4, 8010554 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8010548:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801054a:	f7fe ff5b 	bl	800f404 <vPortExitCritical>
}
 801054e:	4620      	mov	r0, r4
 8010550:	b003      	add	sp, #12
 8010552:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010554:	4b25      	ldr	r3, [pc, #148]	; (80105ec <xTaskResumeAll+0xcc>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d0f5      	beq.n	8010548 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801055c:	4d24      	ldr	r5, [pc, #144]	; (80105f0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 801055e:	4e25      	ldr	r6, [pc, #148]	; (80105f4 <xTaskResumeAll+0xd4>)
 8010560:	4f25      	ldr	r7, [pc, #148]	; (80105f8 <xTaskResumeAll+0xd8>)
 8010562:	e01e      	b.n	80105a2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010564:	68eb      	ldr	r3, [r5, #12]
 8010566:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010568:	f104 0018 	add.w	r0, r4, #24
 801056c:	f7fe feb3 	bl	800f2d6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010570:	1d21      	adds	r1, r4, #4
 8010572:	4608      	mov	r0, r1
 8010574:	9101      	str	r1, [sp, #4]
 8010576:	f7fe feae 	bl	800f2d6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801057a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801057c:	6832      	ldr	r2, [r6, #0]
 801057e:	9901      	ldr	r1, [sp, #4]
 8010580:	4293      	cmp	r3, r2
 8010582:	d900      	bls.n	8010586 <xTaskResumeAll+0x66>
 8010584:	6033      	str	r3, [r6, #0]
 8010586:	2014      	movs	r0, #20
 8010588:	fb00 7003 	mla	r0, r0, r3, r7
 801058c:	f7fe fe80 	bl	800f290 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010590:	4b1a      	ldr	r3, [pc, #104]	; (80105fc <xTaskResumeAll+0xdc>)
 8010592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010598:	429a      	cmp	r2, r3
 801059a:	d302      	bcc.n	80105a2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 801059c:	4b18      	ldr	r3, [pc, #96]	; (8010600 <xTaskResumeAll+0xe0>)
 801059e:	2201      	movs	r2, #1
 80105a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105a2:	682b      	ldr	r3, [r5, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d1dd      	bne.n	8010564 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 80105a8:	b10c      	cbz	r4, 80105ae <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 80105aa:	f7ff fe01 	bl	80101b0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80105ae:	4d15      	ldr	r5, [pc, #84]	; (8010604 <xTaskResumeAll+0xe4>)
 80105b0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80105b2:	b144      	cbz	r4, 80105c6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80105b4:	4e12      	ldr	r6, [pc, #72]	; (8010600 <xTaskResumeAll+0xe0>)
 80105b6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80105b8:	f7ff ff1c 	bl	80103f4 <xTaskIncrementTick>
 80105bc:	b100      	cbz	r0, 80105c0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 80105be:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80105c0:	3c01      	subs	r4, #1
 80105c2:	d1f9      	bne.n	80105b8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 80105c4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80105c6:	4b0e      	ldr	r3, [pc, #56]	; (8010600 <xTaskResumeAll+0xe0>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d0bc      	beq.n	8010548 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 80105ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80105d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80105da:	f3bf 8f4f 	dsb	sy
 80105de:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80105e2:	2401      	movs	r4, #1
 80105e4:	e7b1      	b.n	801054a <xTaskResumeAll+0x2a>
 80105e6:	bf00      	nop
 80105e8:	2400e874 	.word	0x2400e874
 80105ec:	2400e86c 	.word	0x2400e86c
 80105f0:	2400e8b4 	.word	0x2400e8b4
 80105f4:	2400e87c 	.word	0x2400e87c
 80105f8:	2400e40c 	.word	0x2400e40c
 80105fc:	2400e400 	.word	0x2400e400
 8010600:	2400e8f8 	.word	0x2400e8f8
 8010604:	2400e8b0 	.word	0x2400e8b0

08010608 <vTaskSetApplicationTaskTag>:
	{
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	460d      	mov	r5, r1
		if( xTask == NULL )
 801060c:	4604      	mov	r4, r0
 801060e:	b908      	cbnz	r0, 8010614 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8010610:	4b04      	ldr	r3, [pc, #16]	; (8010624 <vTaskSetApplicationTaskTag+0x1c>)
 8010612:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8010614:	f7fe fed6 	bl	800f3c4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8010618:	6565      	str	r5, [r4, #84]	; 0x54
	}
 801061a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 801061e:	f7fe bef1 	b.w	800f404 <vPortExitCritical>
 8010622:	bf00      	nop
 8010624:	2400e400 	.word	0x2400e400

08010628 <xTaskCallApplicationTaskHook>:
	{
 8010628:	4603      	mov	r3, r0
 801062a:	4608      	mov	r0, r1
		if( xTask == NULL )
 801062c:	b90b      	cbnz	r3, 8010632 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 801062e:	4b03      	ldr	r3, [pc, #12]	; (801063c <xTaskCallApplicationTaskHook+0x14>)
 8010630:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8010632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010634:	b103      	cbz	r3, 8010638 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8010636:	4718      	bx	r3
	}
 8010638:	4618      	mov	r0, r3
 801063a:	4770      	bx	lr
 801063c:	2400e400 	.word	0x2400e400

08010640 <vTaskStartScheduler>:
{
 8010640:	b510      	push	{r4, lr}
 8010642:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010644:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010646:	aa07      	add	r2, sp, #28
 8010648:	a906      	add	r1, sp, #24
 801064a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801064c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010650:	f7fe fcfe 	bl	800f050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010654:	9b05      	ldr	r3, [sp, #20]
 8010656:	9a07      	ldr	r2, [sp, #28]
 8010658:	9302      	str	r3, [sp, #8]
 801065a:	9b06      	ldr	r3, [sp, #24]
 801065c:	4919      	ldr	r1, [pc, #100]	; (80106c4 <vTaskStartScheduler+0x84>)
 801065e:	481a      	ldr	r0, [pc, #104]	; (80106c8 <vTaskStartScheduler+0x88>)
 8010660:	e9cd 4300 	strd	r4, r3, [sp]
 8010664:	4623      	mov	r3, r4
 8010666:	f7ff fe52 	bl	801030e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801066a:	b340      	cbz	r0, 80106be <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 801066c:	f000 fa88 	bl	8010b80 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8010670:	2801      	cmp	r0, #1
 8010672:	d119      	bne.n	80106a8 <vTaskStartScheduler+0x68>
 8010674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010678:	f383 8811 	msr	BASEPRI, r3
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8010684:	f04f 32ff 	mov.w	r2, #4294967295
 8010688:	4b10      	ldr	r3, [pc, #64]	; (80106cc <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 801068a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 801068c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801068e:	4b10      	ldr	r3, [pc, #64]	; (80106d0 <vTaskStartScheduler+0x90>)
 8010690:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010692:	4b10      	ldr	r3, [pc, #64]	; (80106d4 <vTaskStartScheduler+0x94>)
 8010694:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8010696:	4b10      	ldr	r3, [pc, #64]	; (80106d8 <vTaskStartScheduler+0x98>)
 8010698:	6818      	ldr	r0, [r3, #0]
 801069a:	f7ff ffc5 	bl	8010628 <xTaskCallApplicationTaskHook>
}
 801069e:	b008      	add	sp, #32
 80106a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80106a4:	f7fe bf1e 	b.w	800f4e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80106a8:	3001      	adds	r0, #1
 80106aa:	d108      	bne.n	80106be <vTaskStartScheduler+0x7e>
 80106ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b0:	f383 8811 	msr	BASEPRI, r3
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	f3bf 8f4f 	dsb	sy
 80106bc:	e7fe      	b.n	80106bc <vTaskStartScheduler+0x7c>
}
 80106be:	b008      	add	sp, #32
 80106c0:	bd10      	pop	{r4, pc}
 80106c2:	bf00      	nop
 80106c4:	08024728 	.word	0x08024728
 80106c8:	0801020d 	.word	0x0801020d
 80106cc:	2400e8a8 	.word	0x2400e8a8
 80106d0:	2400e8c8 	.word	0x2400e8c8
 80106d4:	2400e8f4 	.word	0x2400e8f4
 80106d8:	2400e400 	.word	0x2400e400

080106dc <vTaskSwitchContext>:
{
 80106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80106de:	4b1c      	ldr	r3, [pc, #112]	; (8010750 <vTaskSwitchContext+0x74>)
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	4b1c      	ldr	r3, [pc, #112]	; (8010754 <vTaskSwitchContext+0x78>)
 80106e4:	b112      	cbz	r2, 80106ec <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80106e6:	2201      	movs	r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
}
 80106ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 80106ec:	4c1a      	ldr	r4, [pc, #104]	; (8010758 <vTaskSwitchContext+0x7c>)
 80106ee:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106f0:	4e1a      	ldr	r6, [pc, #104]	; (801075c <vTaskSwitchContext+0x80>)
 80106f2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 80106f4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 80106f6:	6820      	ldr	r0, [r4, #0]
 80106f8:	f7ff ff96 	bl	8010628 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106fc:	6832      	ldr	r2, [r6, #0]
 80106fe:	4918      	ldr	r1, [pc, #96]	; (8010760 <vTaskSwitchContext+0x84>)
 8010700:	fb07 f302 	mul.w	r3, r7, r2
 8010704:	58cd      	ldr	r5, [r1, r3]
 8010706:	18c8      	adds	r0, r1, r3
 8010708:	b1ad      	cbz	r5, 8010736 <vTaskSwitchContext+0x5a>
 801070a:	6845      	ldr	r5, [r0, #4]
 801070c:	3308      	adds	r3, #8
 801070e:	686d      	ldr	r5, [r5, #4]
 8010710:	440b      	add	r3, r1
 8010712:	429d      	cmp	r5, r3
 8010714:	6045      	str	r5, [r0, #4]
 8010716:	bf04      	itt	eq
 8010718:	686b      	ldreq	r3, [r5, #4]
 801071a:	6043      	streq	r3, [r0, #4]
 801071c:	2314      	movs	r3, #20
 801071e:	fb03 1102 	mla	r1, r3, r2, r1
 8010722:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8010724:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 801072c:	6820      	ldr	r0, [r4, #0]
}
 801072e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8010732:	f7ff bf79 	b.w	8010628 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010736:	b942      	cbnz	r2, 801074a <vTaskSwitchContext+0x6e>
 8010738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	e7fe      	b.n	8010748 <vTaskSwitchContext+0x6c>
 801074a:	3a01      	subs	r2, #1
 801074c:	e7d8      	b.n	8010700 <vTaskSwitchContext+0x24>
 801074e:	bf00      	nop
 8010750:	2400e874 	.word	0x2400e874
 8010754:	2400e8f8 	.word	0x2400e8f8
 8010758:	2400e400 	.word	0x2400e400
 801075c:	2400e87c 	.word	0x2400e87c
 8010760:	2400e40c 	.word	0x2400e40c

08010764 <vTaskPlaceOnEventList>:
{
 8010764:	b510      	push	{r4, lr}
 8010766:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8010768:	b940      	cbnz	r0, 801077c <vTaskPlaceOnEventList+0x18>
 801076a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	e7fe      	b.n	801077a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801077c:	4b05      	ldr	r3, [pc, #20]	; (8010794 <vTaskPlaceOnEventList+0x30>)
 801077e:	6819      	ldr	r1, [r3, #0]
 8010780:	3118      	adds	r1, #24
 8010782:	f7fe fd91 	bl	800f2a8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010786:	4620      	mov	r0, r4
 8010788:	2101      	movs	r1, #1
}
 801078a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801078e:	f7ff bcd7 	b.w	8010140 <prvAddCurrentTaskToDelayedList>
 8010792:	bf00      	nop
 8010794:	2400e400 	.word	0x2400e400

08010798 <vTaskPlaceOnEventListRestricted>:
	{
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	460d      	mov	r5, r1
 801079c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 801079e:	b940      	cbnz	r0, 80107b2 <vTaskPlaceOnEventListRestricted+0x1a>
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	e7fe      	b.n	80107b0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80107b2:	4b07      	ldr	r3, [pc, #28]	; (80107d0 <vTaskPlaceOnEventListRestricted+0x38>)
 80107b4:	6819      	ldr	r1, [r3, #0]
 80107b6:	3118      	adds	r1, #24
 80107b8:	f7fe fd6a 	bl	800f290 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80107bc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80107be:	4621      	mov	r1, r4
 80107c0:	bf0c      	ite	eq
 80107c2:	4628      	moveq	r0, r5
 80107c4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80107c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80107cc:	f7ff bcb8 	b.w	8010140 <prvAddCurrentTaskToDelayedList>
 80107d0:	2400e400 	.word	0x2400e400

080107d4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107d4:	68c3      	ldr	r3, [r0, #12]
{
 80107d6:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80107da:	b944      	cbnz	r4, 80107ee <xTaskRemoveFromEventList+0x1a>
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	e7fe      	b.n	80107ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80107ee:	f104 0118 	add.w	r1, r4, #24
 80107f2:	4608      	mov	r0, r1
 80107f4:	9101      	str	r1, [sp, #4]
 80107f6:	f7fe fd6e 	bl	800f2d6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107fa:	4b12      	ldr	r3, [pc, #72]	; (8010844 <xTaskRemoveFromEventList+0x70>)
 80107fc:	9901      	ldr	r1, [sp, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	b9e3      	cbnz	r3, 801083c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010802:	1d21      	adds	r1, r4, #4
 8010804:	4608      	mov	r0, r1
 8010806:	9101      	str	r1, [sp, #4]
 8010808:	f7fe fd65 	bl	800f2d6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801080c:	4a0e      	ldr	r2, [pc, #56]	; (8010848 <xTaskRemoveFromEventList+0x74>)
 801080e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010810:	6810      	ldr	r0, [r2, #0]
 8010812:	9901      	ldr	r1, [sp, #4]
 8010814:	4283      	cmp	r3, r0
 8010816:	d900      	bls.n	801081a <xTaskRemoveFromEventList+0x46>
 8010818:	6013      	str	r3, [r2, #0]
 801081a:	4a0c      	ldr	r2, [pc, #48]	; (801084c <xTaskRemoveFromEventList+0x78>)
 801081c:	2014      	movs	r0, #20
 801081e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010822:	f7fe fd35 	bl	800f290 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010826:	4b0a      	ldr	r3, [pc, #40]	; (8010850 <xTaskRemoveFromEventList+0x7c>)
 8010828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082e:	429a      	cmp	r2, r3
 8010830:	d906      	bls.n	8010840 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8010832:	2001      	movs	r0, #1
 8010834:	4b07      	ldr	r3, [pc, #28]	; (8010854 <xTaskRemoveFromEventList+0x80>)
 8010836:	6018      	str	r0, [r3, #0]
}
 8010838:	b002      	add	sp, #8
 801083a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801083c:	4806      	ldr	r0, [pc, #24]	; (8010858 <xTaskRemoveFromEventList+0x84>)
 801083e:	e7f0      	b.n	8010822 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8010840:	2000      	movs	r0, #0
	return xReturn;
 8010842:	e7f9      	b.n	8010838 <xTaskRemoveFromEventList+0x64>
 8010844:	2400e874 	.word	0x2400e874
 8010848:	2400e87c 	.word	0x2400e87c
 801084c:	2400e40c 	.word	0x2400e40c
 8010850:	2400e400 	.word	0x2400e400
 8010854:	2400e8f8 	.word	0x2400e8f8
 8010858:	2400e8b4 	.word	0x2400e8b4

0801085c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801085c:	4b03      	ldr	r3, [pc, #12]	; (801086c <vTaskInternalSetTimeOutState+0x10>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010862:	4b03      	ldr	r3, [pc, #12]	; (8010870 <vTaskInternalSetTimeOutState+0x14>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	6043      	str	r3, [r0, #4]
}
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	2400e8ac 	.word	0x2400e8ac
 8010870:	2400e8f4 	.word	0x2400e8f4

08010874 <xTaskCheckForTimeOut>:
{
 8010874:	b570      	push	{r4, r5, r6, lr}
 8010876:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8010878:	4605      	mov	r5, r0
 801087a:	b940      	cbnz	r0, 801088e <xTaskCheckForTimeOut+0x1a>
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	e7fe      	b.n	801088c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 801088e:	b941      	cbnz	r1, 80108a2 <xTaskCheckForTimeOut+0x2e>
 8010890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	e7fe      	b.n	80108a0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80108a2:	f7fe fd8f 	bl	800f3c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80108a6:	4b0f      	ldr	r3, [pc, #60]	; (80108e4 <xTaskCheckForTimeOut+0x70>)
 80108a8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80108aa:	6823      	ldr	r3, [r4, #0]
 80108ac:	1c5a      	adds	r2, r3, #1
 80108ae:	d010      	beq.n	80108d2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108b0:	480d      	ldr	r0, [pc, #52]	; (80108e8 <xTaskCheckForTimeOut+0x74>)
 80108b2:	682e      	ldr	r6, [r5, #0]
 80108b4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108b6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108b8:	4286      	cmp	r6, r0
 80108ba:	d001      	beq.n	80108c0 <xTaskCheckForTimeOut+0x4c>
 80108bc:	428a      	cmp	r2, r1
 80108be:	d90f      	bls.n	80108e0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108c0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108c2:	4283      	cmp	r3, r0
 80108c4:	d90a      	bls.n	80108dc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80108c6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108c8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80108ca:	4413      	add	r3, r2
 80108cc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108ce:	f7ff ffc5 	bl	801085c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80108d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80108d4:	f7fe fd96 	bl	800f404 <vPortExitCritical>
}
 80108d8:	4620      	mov	r0, r4
 80108da:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80108e0:	2401      	movs	r4, #1
 80108e2:	e7f7      	b.n	80108d4 <xTaskCheckForTimeOut+0x60>
 80108e4:	2400e8f4 	.word	0x2400e8f4
 80108e8:	2400e8ac 	.word	0x2400e8ac

080108ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80108ec:	4b01      	ldr	r3, [pc, #4]	; (80108f4 <vTaskMissedYield+0x8>)
 80108ee:	2201      	movs	r2, #1
 80108f0:	601a      	str	r2, [r3, #0]
}
 80108f2:	4770      	bx	lr
 80108f4:	2400e8f8 	.word	0x2400e8f8

080108f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80108f8:	4b05      	ldr	r3, [pc, #20]	; (8010910 <xTaskGetSchedulerState+0x18>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	b133      	cbz	r3, 801090c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80108fe:	4b05      	ldr	r3, [pc, #20]	; (8010914 <xTaskGetSchedulerState+0x1c>)
 8010900:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8010902:	2b00      	cmp	r3, #0
 8010904:	bf0c      	ite	eq
 8010906:	2002      	moveq	r0, #2
 8010908:	2000      	movne	r0, #0
 801090a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801090c:	2001      	movs	r0, #1
	}
 801090e:	4770      	bx	lr
 8010910:	2400e8c8 	.word	0x2400e8c8
 8010914:	2400e874 	.word	0x2400e874

08010918 <xTaskPriorityInherit>:
	{
 8010918:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801091a:	4604      	mov	r4, r0
 801091c:	b340      	cbz	r0, 8010970 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801091e:	4d1b      	ldr	r5, [pc, #108]	; (801098c <xTaskPriorityInherit+0x74>)
 8010920:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010922:	682a      	ldr	r2, [r5, #0]
 8010924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010926:	4293      	cmp	r3, r2
 8010928:	d228      	bcs.n	801097c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801092a:	6982      	ldr	r2, [r0, #24]
 801092c:	2a00      	cmp	r2, #0
 801092e:	db04      	blt.n	801093a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010930:	682a      	ldr	r2, [r5, #0]
 8010932:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010934:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8010938:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801093a:	2214      	movs	r2, #20
 801093c:	4e14      	ldr	r6, [pc, #80]	; (8010990 <xTaskPriorityInherit+0x78>)
 801093e:	fb02 6303 	mla	r3, r2, r3, r6
 8010942:	6962      	ldr	r2, [r4, #20]
 8010944:	429a      	cmp	r2, r3
 8010946:	d115      	bne.n	8010974 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010948:	1d21      	adds	r1, r4, #4
 801094a:	4608      	mov	r0, r1
 801094c:	9101      	str	r1, [sp, #4]
 801094e:	f7fe fcc2 	bl	800f2d6 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010952:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010954:	4a0f      	ldr	r2, [pc, #60]	; (8010994 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010958:	6810      	ldr	r0, [r2, #0]
 801095a:	9901      	ldr	r1, [sp, #4]
 801095c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801095e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010960:	d900      	bls.n	8010964 <xTaskPriorityInherit+0x4c>
 8010962:	6013      	str	r3, [r2, #0]
 8010964:	2014      	movs	r0, #20
 8010966:	fb00 6003 	mla	r0, r0, r3, r6
 801096a:	f7fe fc91 	bl	800f290 <vListInsertEnd>
				xReturn = pdTRUE;
 801096e:	2001      	movs	r0, #1
	}
 8010970:	b002      	add	sp, #8
 8010972:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010978:	62e3      	str	r3, [r4, #44]	; 0x2c
 801097a:	e7f8      	b.n	801096e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801097c:	682b      	ldr	r3, [r5, #0]
 801097e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8010980:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010982:	42a0      	cmp	r0, r4
 8010984:	bf2c      	ite	cs
 8010986:	2000      	movcs	r0, #0
 8010988:	2001      	movcc	r0, #1
 801098a:	e7f1      	b.n	8010970 <xTaskPriorityInherit+0x58>
 801098c:	2400e400 	.word	0x2400e400
 8010990:	2400e40c 	.word	0x2400e40c
 8010994:	2400e87c 	.word	0x2400e87c

08010998 <xTaskPriorityDisinherit>:
	{
 8010998:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 801099a:	b910      	cbnz	r0, 80109a2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 801099c:	2000      	movs	r0, #0
	}
 801099e:	b002      	add	sp, #8
 80109a0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80109a2:	4b1c      	ldr	r3, [pc, #112]	; (8010a14 <xTaskPriorityDisinherit+0x7c>)
 80109a4:	681c      	ldr	r4, [r3, #0]
 80109a6:	4284      	cmp	r4, r0
 80109a8:	d008      	beq.n	80109bc <xTaskPriorityDisinherit+0x24>
 80109aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ae:	f383 8811 	msr	BASEPRI, r3
 80109b2:	f3bf 8f6f 	isb	sy
 80109b6:	f3bf 8f4f 	dsb	sy
 80109ba:	e7fe      	b.n	80109ba <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80109bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80109be:	b943      	cbnz	r3, 80109d2 <xTaskPriorityDisinherit+0x3a>
 80109c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c4:	f383 8811 	msr	BASEPRI, r3
 80109c8:	f3bf 8f6f 	isb	sy
 80109cc:	f3bf 8f4f 	dsb	sy
 80109d0:	e7fe      	b.n	80109d0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80109d2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80109d4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80109d6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80109d8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80109da:	4291      	cmp	r1, r2
 80109dc:	d0de      	beq.n	801099c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d1dc      	bne.n	801099c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109e2:	1d21      	adds	r1, r4, #4
 80109e4:	4608      	mov	r0, r1
 80109e6:	9101      	str	r1, [sp, #4]
 80109e8:	f7fe fc75 	bl	800f2d6 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80109ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80109ee:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80109f4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109f6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80109f8:	4a07      	ldr	r2, [pc, #28]	; (8010a18 <xTaskPriorityDisinherit+0x80>)
 80109fa:	6810      	ldr	r0, [r2, #0]
 80109fc:	4283      	cmp	r3, r0
 80109fe:	d900      	bls.n	8010a02 <xTaskPriorityDisinherit+0x6a>
 8010a00:	6013      	str	r3, [r2, #0]
 8010a02:	4a06      	ldr	r2, [pc, #24]	; (8010a1c <xTaskPriorityDisinherit+0x84>)
 8010a04:	2014      	movs	r0, #20
 8010a06:	fb00 2003 	mla	r0, r0, r3, r2
 8010a0a:	f7fe fc41 	bl	800f290 <vListInsertEnd>
					xReturn = pdTRUE;
 8010a0e:	2001      	movs	r0, #1
		return xReturn;
 8010a10:	e7c5      	b.n	801099e <xTaskPriorityDisinherit+0x6>
 8010a12:	bf00      	nop
 8010a14:	2400e400 	.word	0x2400e400
 8010a18:	2400e87c 	.word	0x2400e87c
 8010a1c:	2400e40c 	.word	0x2400e40c

08010a20 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8010a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8010a22:	4604      	mov	r4, r0
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d044      	beq.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8010a28:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8010a2a:	b942      	cbnz	r2, 8010a3e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	e7fe      	b.n	8010a3c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010a3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8010a40:	4299      	cmp	r1, r3
 8010a42:	bf38      	it	cc
 8010a44:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010a46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010a48:	428b      	cmp	r3, r1
 8010a4a:	d032      	beq.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010a4c:	2a01      	cmp	r2, #1
 8010a4e:	d130      	bne.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8010a50:	4a19      	ldr	r2, [pc, #100]	; (8010ab8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8010a52:	6812      	ldr	r2, [r2, #0]
 8010a54:	4282      	cmp	r2, r0
 8010a56:	d108      	bne.n	8010a6a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8010a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a5c:	f383 8811 	msr	BASEPRI, r3
 8010a60:	f3bf 8f6f 	isb	sy
 8010a64:	f3bf 8f4f 	dsb	sy
 8010a68:	e7fe      	b.n	8010a68 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a6a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a6c:	4d13      	ldr	r5, [pc, #76]	; (8010abc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010a6e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a70:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8010a74:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a76:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a7a:	bfa8      	it	ge
 8010a7c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a80:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a82:	bfa8      	it	ge
 8010a84:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d113      	bne.n	8010ab2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a8a:	1d01      	adds	r1, r0, #4
 8010a8c:	4608      	mov	r0, r1
 8010a8e:	9101      	str	r1, [sp, #4]
 8010a90:	f7fe fc21 	bl	800f2d6 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8010a94:	4a0a      	ldr	r2, [pc, #40]	; (8010ac0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8010a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010a98:	6810      	ldr	r0, [r2, #0]
 8010a9a:	9901      	ldr	r1, [sp, #4]
 8010a9c:	4283      	cmp	r3, r0
 8010a9e:	d900      	bls.n	8010aa2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 8010aa0:	6013      	str	r3, [r2, #0]
 8010aa2:	2014      	movs	r0, #20
 8010aa4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8010aa8:	b003      	add	sp, #12
 8010aaa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8010aae:	f7fe bbef 	b.w	800f290 <vListInsertEnd>
	}
 8010ab2:	b003      	add	sp, #12
 8010ab4:	bd30      	pop	{r4, r5, pc}
 8010ab6:	bf00      	nop
 8010ab8:	2400e400 	.word	0x2400e400
 8010abc:	2400e40c 	.word	0x2400e40c
 8010ac0:	2400e87c 	.word	0x2400e87c

08010ac4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010ac4:	4b04      	ldr	r3, [pc, #16]	; (8010ad8 <pvTaskIncrementMutexHeldCount+0x14>)
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	b11a      	cbz	r2, 8010ad2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8010aca:	6819      	ldr	r1, [r3, #0]
 8010acc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8010ace:	3201      	adds	r2, #1
 8010ad0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8010ad2:	6818      	ldr	r0, [r3, #0]
	}
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	2400e400 	.word	0x2400e400

08010adc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8010ade:	4c11      	ldr	r4, [pc, #68]	; (8010b24 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8010ae0:	f7fe fc70 	bl	800f3c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8010ae4:	6825      	ldr	r5, [r4, #0]
 8010ae6:	b9bd      	cbnz	r5, 8010b18 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8010ae8:	4f0f      	ldr	r7, [pc, #60]	; (8010b28 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8010aea:	4e10      	ldr	r6, [pc, #64]	; (8010b2c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8010aec:	4638      	mov	r0, r7
 8010aee:	f7fe fbc1 	bl	800f274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7fe fbbe 	bl	800f274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010af8:	4b0d      	ldr	r3, [pc, #52]	; (8010b30 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010afa:	4a0e      	ldr	r2, [pc, #56]	; (8010b34 <prvCheckForValidListAndQueue+0x58>)
 8010afc:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8010afe:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b00:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8010b02:	4b0d      	ldr	r3, [pc, #52]	; (8010b38 <prvCheckForValidListAndQueue+0x5c>)
 8010b04:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010b06:	4b0d      	ldr	r3, [pc, #52]	; (8010b3c <prvCheckForValidListAndQueue+0x60>)
 8010b08:	9500      	str	r5, [sp, #0]
 8010b0a:	f7fe fe6b 	bl	800f7e4 <xQueueGenericCreateStatic>
 8010b0e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010b10:	b110      	cbz	r0, 8010b18 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010b12:	490b      	ldr	r1, [pc, #44]	; (8010b40 <prvCheckForValidListAndQueue+0x64>)
 8010b14:	f7ff fa36 	bl	800ff84 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8010b18:	b003      	add	sp, #12
 8010b1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8010b1e:	f7fe bc71 	b.w	800f404 <vPortExitCritical>
 8010b22:	bf00      	nop
 8010b24:	2400ea20 	.word	0x2400ea20
 8010b28:	2400e9a4 	.word	0x2400e9a4
 8010b2c:	2400e9b8 	.word	0x2400e9b8
 8010b30:	2400e8fc 	.word	0x2400e8fc
 8010b34:	2400e904 	.word	0x2400e904
 8010b38:	2400e900 	.word	0x2400e900
 8010b3c:	2400e9d0 	.word	0x2400e9d0
 8010b40:	0802472d 	.word	0x0802472d

08010b44 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8010b44:	4291      	cmp	r1, r2
{
 8010b46:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b48:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b4a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8010b4c:	d80a      	bhi.n	8010b64 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b4e:	1ad2      	subs	r2, r2, r3
 8010b50:	6983      	ldr	r3, [r0, #24]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d20d      	bcs.n	8010b72 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b56:	1d01      	adds	r1, r0, #4
 8010b58:	4b07      	ldr	r3, [pc, #28]	; (8010b78 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	f7fe fba4 	bl	800f2a8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010b60:	2000      	movs	r0, #0
}
 8010b62:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d201      	bcs.n	8010b6c <prvInsertTimerInActiveList+0x28>
 8010b68:	4299      	cmp	r1, r3
 8010b6a:	d202      	bcs.n	8010b72 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b6c:	1d01      	adds	r1, r0, #4
 8010b6e:	4b03      	ldr	r3, [pc, #12]	; (8010b7c <prvInsertTimerInActiveList+0x38>)
 8010b70:	e7f3      	b.n	8010b5a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8010b72:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8010b74:	e7f5      	b.n	8010b62 <prvInsertTimerInActiveList+0x1e>
 8010b76:	bf00      	nop
 8010b78:	2400e900 	.word	0x2400e900
 8010b7c:	2400e8fc 	.word	0x2400e8fc

08010b80 <xTimerCreateTimerTask>:
{
 8010b80:	b510      	push	{r4, lr}
 8010b82:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8010b84:	f7ff ffaa 	bl	8010adc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010b88:	4b12      	ldr	r3, [pc, #72]	; (8010bd4 <xTimerCreateTimerTask+0x54>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	b1b3      	cbz	r3, 8010bbc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010b8e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b90:	aa07      	add	r2, sp, #28
 8010b92:	a906      	add	r1, sp, #24
 8010b94:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010b96:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010b9a:	f7fe fa65 	bl	800f068 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010b9e:	9b05      	ldr	r3, [sp, #20]
 8010ba0:	9a07      	ldr	r2, [sp, #28]
 8010ba2:	9302      	str	r3, [sp, #8]
 8010ba4:	9b06      	ldr	r3, [sp, #24]
 8010ba6:	490c      	ldr	r1, [pc, #48]	; (8010bd8 <xTimerCreateTimerTask+0x58>)
 8010ba8:	9301      	str	r3, [sp, #4]
 8010baa:	2302      	movs	r3, #2
 8010bac:	480b      	ldr	r0, [pc, #44]	; (8010bdc <xTimerCreateTimerTask+0x5c>)
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	4623      	mov	r3, r4
 8010bb2:	f7ff fbac 	bl	801030e <xTaskCreateStatic>
 8010bb6:	4b0a      	ldr	r3, [pc, #40]	; (8010be0 <xTimerCreateTimerTask+0x60>)
 8010bb8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010bba:	b940      	cbnz	r0, 8010bce <xTimerCreateTimerTask+0x4e>
 8010bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc0:	f383 8811 	msr	BASEPRI, r3
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8010bcc:	e7fe      	b.n	8010bcc <xTimerCreateTimerTask+0x4c>
}
 8010bce:	2001      	movs	r0, #1
 8010bd0:	b008      	add	sp, #32
 8010bd2:	bd10      	pop	{r4, pc}
 8010bd4:	2400ea20 	.word	0x2400ea20
 8010bd8:	08024732 	.word	0x08024732
 8010bdc:	08010ce5 	.word	0x08010ce5
 8010be0:	2400ea24 	.word	0x2400ea24

08010be4 <xTimerGenericCommand>:
{
 8010be4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010be6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8010be8:	4604      	mov	r4, r0
{
 8010bea:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8010bec:	b940      	cbnz	r0, 8010c00 <xTimerGenericCommand+0x1c>
 8010bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	e7fe      	b.n	8010bfe <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8010c00:	4d0c      	ldr	r5, [pc, #48]	; (8010c34 <xTimerGenericCommand+0x50>)
 8010c02:	6828      	ldr	r0, [r5, #0]
 8010c04:	b178      	cbz	r0, 8010c26 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c06:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010c08:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010c0a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010c0e:	dc0c      	bgt.n	8010c2a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c10:	f7ff fe72 	bl	80108f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c14:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010c16:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c18:	4669      	mov	r1, sp
 8010c1a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010c1c:	bf0c      	ite	eq
 8010c1e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010c20:	461a      	movne	r2, r3
 8010c22:	f7fe fe94 	bl	800f94e <xQueueGenericSend>
}
 8010c26:	b004      	add	sp, #16
 8010c28:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	4669      	mov	r1, sp
 8010c2e:	f7fe ff41 	bl	800fab4 <xQueueGenericSendFromISR>
 8010c32:	e7f8      	b.n	8010c26 <xTimerGenericCommand+0x42>
 8010c34:	2400ea20 	.word	0x2400ea20

08010c38 <prvSampleTimeNow>:
{
 8010c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8010c3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8010ce0 <prvSampleTimeNow+0xa8>
{
 8010c40:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8010c42:	f7ff fbd1 	bl	80103e8 <xTaskGetTickCount>
 8010c46:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8010c48:	f8d8 3000 	ldr.w	r3, [r8]
 8010c4c:	4283      	cmp	r3, r0
 8010c4e:	d940      	bls.n	8010cd2 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c50:	4f21      	ldr	r7, [pc, #132]	; (8010cd8 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c52:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	b95a      	cbnz	r2, 8010c74 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8010c5c:	4a1f      	ldr	r2, [pc, #124]	; (8010cdc <prvSampleTimeNow+0xa4>)
 8010c5e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c60:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010c62:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8010c64:	6039      	str	r1, [r7, #0]
}
 8010c66:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8010c68:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8010c6a:	f8c8 5000 	str.w	r5, [r8]
}
 8010c6e:	b004      	add	sp, #16
 8010c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c74:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c76:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c78:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c7c:	1d21      	adds	r1, r4, #4
 8010c7e:	4608      	mov	r0, r1
 8010c80:	9103      	str	r1, [sp, #12]
 8010c82:	f7fe fb28 	bl	800f2d6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c86:	6a23      	ldr	r3, [r4, #32]
 8010c88:	4620      	mov	r0, r4
 8010c8a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010c90:	9903      	ldr	r1, [sp, #12]
 8010c92:	f013 0f04 	tst.w	r3, #4
 8010c96:	d0de      	beq.n	8010c56 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c98:	69a3      	ldr	r3, [r4, #24]
 8010c9a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010c9c:	459a      	cmp	sl, r3
 8010c9e:	d205      	bcs.n	8010cac <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ca0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010ca2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ca4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ca6:	f7fe faff 	bl	800f2a8 <vListInsert>
 8010caa:	e7d4      	b.n	8010c56 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010cac:	2300      	movs	r3, #0
 8010cae:	4652      	mov	r2, sl
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f8cd 9000 	str.w	r9, [sp]
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	f7ff ff94 	bl	8010be4 <xTimerGenericCommand>
				configASSERT( xResult );
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d1ca      	bne.n	8010c56 <prvSampleTimeNow+0x1e>
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	e7fe      	b.n	8010cd0 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	e7c7      	b.n	8010c66 <prvSampleTimeNow+0x2e>
 8010cd6:	bf00      	nop
 8010cd8:	2400e8fc 	.word	0x2400e8fc
 8010cdc:	2400e900 	.word	0x2400e900
 8010ce0:	2400e9cc 	.word	0x2400e9cc

08010ce4 <prvTimerTask>:
{
 8010ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010ce8:	4d6e      	ldr	r5, [pc, #440]	; (8010ea4 <prvTimerTask+0x1c0>)
{
 8010cea:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010cec:	4e6e      	ldr	r6, [pc, #440]	; (8010ea8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010cee:	682b      	ldr	r3, [r5, #0]
 8010cf0:	f8d3 8000 	ldr.w	r8, [r3]
 8010cf4:	f1b8 0f00 	cmp.w	r8, #0
 8010cf8:	d035      	beq.n	8010d66 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cfa:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010cfc:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010cfe:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8010d02:	f7ff fb69 	bl	80103d8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d06:	a804      	add	r0, sp, #16
 8010d08:	f7ff ff96 	bl	8010c38 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8010d0c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d0e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d169      	bne.n	8010de8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010d14:	2c00      	cmp	r4, #0
 8010d16:	d14c      	bne.n	8010db2 <prvTimerTask+0xce>
 8010d18:	4540      	cmp	r0, r8
 8010d1a:	d350      	bcc.n	8010dbe <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8010d1c:	f7ff fc00 	bl	8010520 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d20:	682b      	ldr	r3, [r5, #0]
 8010d22:	68db      	ldr	r3, [r3, #12]
 8010d24:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d26:	1d38      	adds	r0, r7, #4
 8010d28:	f7fe fad5 	bl	800f2d6 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d30:	0758      	lsls	r0, r3, #29
 8010d32:	d51a      	bpl.n	8010d6a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010d34:	69b9      	ldr	r1, [r7, #24]
 8010d36:	4643      	mov	r3, r8
 8010d38:	464a      	mov	r2, r9
 8010d3a:	4638      	mov	r0, r7
 8010d3c:	4441      	add	r1, r8
 8010d3e:	f7ff ff01 	bl	8010b44 <prvInsertTimerInActiveList>
 8010d42:	b1b0      	cbz	r0, 8010d72 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010d44:	4623      	mov	r3, r4
 8010d46:	4642      	mov	r2, r8
 8010d48:	4621      	mov	r1, r4
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	9400      	str	r4, [sp, #0]
 8010d4e:	f7ff ff49 	bl	8010be4 <xTimerGenericCommand>
			configASSERT( xResult );
 8010d52:	b970      	cbnz	r0, 8010d72 <prvTimerTask+0x8e>
 8010d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d58:	f383 8811 	msr	BASEPRI, r3
 8010d5c:	f3bf 8f6f 	isb	sy
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	e7fe      	b.n	8010d64 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d66:	2401      	movs	r4, #1
 8010d68:	e7cb      	b.n	8010d02 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d6a:	f023 0301 	bic.w	r3, r3, #1
 8010d6e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	4638      	mov	r0, r7
 8010d76:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d78:	2200      	movs	r2, #0
 8010d7a:	a904      	add	r1, sp, #16
 8010d7c:	6830      	ldr	r0, [r6, #0]
 8010d7e:	f7fe ff4f 	bl	800fc20 <xQueueReceive>
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d0b3      	beq.n	8010cee <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d86:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d88:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	db2f      	blt.n	8010dee <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d8e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d90:	6963      	ldr	r3, [r4, #20]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d132      	bne.n	8010dfc <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d96:	a803      	add	r0, sp, #12
 8010d98:	f7ff ff4e 	bl	8010c38 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010d9c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d9e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8010da0:	2b09      	cmp	r3, #9
 8010da2:	d8e9      	bhi.n	8010d78 <prvTimerTask+0x94>
 8010da4:	e8df f003 	tbb	[pc, r3]
 8010da8:	572e2e2e 	.word	0x572e2e2e
 8010dac:	2e2e765e 	.word	0x2e2e765e
 8010db0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010db2:	4b3e      	ldr	r3, [pc, #248]	; (8010eac <prvTimerTask+0x1c8>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	681c      	ldr	r4, [r3, #0]
 8010db8:	fab4 f484 	clz	r4, r4
 8010dbc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	eba8 0109 	sub.w	r1, r8, r9
 8010dc4:	6830      	ldr	r0, [r6, #0]
 8010dc6:	f7ff f91a 	bl	800fffe <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010dca:	f7ff fba9 	bl	8010520 <xTaskResumeAll>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d1d2      	bne.n	8010d78 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8010dd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010dde:	f3bf 8f4f 	dsb	sy
 8010de2:	f3bf 8f6f 	isb	sy
 8010de6:	e7c7      	b.n	8010d78 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8010de8:	f7ff fb9a 	bl	8010520 <xTaskResumeAll>
}
 8010dec:	e7c4      	b.n	8010d78 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010dee:	9b05      	ldr	r3, [sp, #20]
 8010df0:	9907      	ldr	r1, [sp, #28]
 8010df2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010df4:	9b04      	ldr	r3, [sp, #16]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	dbbe      	blt.n	8010d78 <prvTimerTask+0x94>
 8010dfa:	e7c8      	b.n	8010d8e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dfc:	1d20      	adds	r0, r4, #4
 8010dfe:	f7fe fa6a 	bl	800f2d6 <uxListRemove>
 8010e02:	e7c8      	b.n	8010d96 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e08:	4620      	mov	r0, r4
 8010e0a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e0c:	f043 0301 	orr.w	r3, r3, #1
 8010e10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010e14:	9b05      	ldr	r3, [sp, #20]
 8010e16:	4419      	add	r1, r3
 8010e18:	f7ff fe94 	bl	8010b44 <prvInsertTimerInActiveList>
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d0ab      	beq.n	8010d78 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e20:	6a23      	ldr	r3, [r4, #32]
 8010e22:	4620      	mov	r0, r4
 8010e24:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e2a:	0759      	lsls	r1, r3, #29
 8010e2c:	d5a4      	bpl.n	8010d78 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010e2e:	69a2      	ldr	r2, [r4, #24]
 8010e30:	2300      	movs	r3, #0
 8010e32:	9905      	ldr	r1, [sp, #20]
 8010e34:	4620      	mov	r0, r4
 8010e36:	9300      	str	r3, [sp, #0]
 8010e38:	440a      	add	r2, r1
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	f7ff fed2 	bl	8010be4 <xTimerGenericCommand>
							configASSERT( xResult );
 8010e40:	2800      	cmp	r0, #0
 8010e42:	d199      	bne.n	8010d78 <prvTimerTask+0x94>
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	e7fe      	b.n	8010e54 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e56:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e5a:	f023 0301 	bic.w	r3, r3, #1
 8010e5e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8010e62:	e789      	b.n	8010d78 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e64:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e68:	f043 0301 	orr.w	r3, r3, #1
 8010e6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e70:	9905      	ldr	r1, [sp, #20]
 8010e72:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e74:	b941      	cbnz	r1, 8010e88 <prvTimerTask+0x1a4>
 8010e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7a:	f383 8811 	msr	BASEPRI, r3
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f3bf 8f4f 	dsb	sy
 8010e86:	e7fe      	b.n	8010e86 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e88:	4603      	mov	r3, r0
 8010e8a:	4401      	add	r1, r0
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f7ff fe59 	bl	8010b44 <prvInsertTimerInActiveList>
					break;
 8010e92:	e771      	b.n	8010d78 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e94:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010e98:	079a      	lsls	r2, r3, #30
 8010e9a:	d4de      	bmi.n	8010e5a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f7fe f9ab 	bl	800f1f8 <vPortFree>
 8010ea2:	e769      	b.n	8010d78 <prvTimerTask+0x94>
 8010ea4:	2400e8fc 	.word	0x2400e8fc
 8010ea8:	2400ea20 	.word	0x2400ea20
 8010eac:	2400e900 	.word	0x2400e900

08010eb0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8010eb0:	8880      	ldrh	r0, [r0, #4]
 8010eb2:	4770      	bx	lr

08010eb4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8010eb4:	b570      	push	{r4, r5, r6, lr}
 8010eb6:	6803      	ldr	r3, [r0, #0]
 8010eb8:	460c      	mov	r4, r1
 8010eba:	2100      	movs	r1, #0
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec0:	4798      	blx	r3
 8010ec2:	4606      	mov	r6, r0
 8010ec4:	682b      	ldr	r3, [r5, #0]
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	1ba4      	subs	r4, r4, r6
 8010eca:	6a1b      	ldr	r3, [r3, #32]
 8010ecc:	b2a4      	uxth	r4, r4
 8010ece:	4798      	blx	r3
 8010ed0:	fbb4 f0f0 	udiv	r0, r4, r0
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}

08010ed6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	8083      	strh	r3, [r0, #4]
 8010eda:	4770      	bx	lr

08010edc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8010edc:	b510      	push	{r4, lr}
 8010ede:	6803      	ldr	r3, [r0, #0]
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	8881      	ldrh	r1, [r0, #4]
 8010ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee6:	4798      	blx	r3
 8010ee8:	88a3      	ldrh	r3, [r4, #4]
 8010eea:	3301      	adds	r3, #1
 8010eec:	80a3      	strh	r3, [r4, #4]
 8010eee:	bd10      	pop	{r4, pc}

08010ef0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8010ef0:	6803      	ldr	r3, [r0, #0]
 8010ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef4:	4718      	bx	r3

08010ef6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8010ef6:	4770      	bx	lr

08010ef8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8010ef8:	4a02      	ldr	r2, [pc, #8]	; (8010f04 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8010efa:	6002      	str	r2, [r0, #0]
 8010efc:	2200      	movs	r2, #0
 8010efe:	8082      	strh	r2, [r0, #4]
 8010f00:	4770      	bx	lr
 8010f02:	bf00      	nop
 8010f04:	08024744 	.word	0x08024744

08010f08 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8010f08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010f0a:	2000      	movs	r0, #0
 8010f0c:	b12b      	cbz	r3, 8010f1a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010f0e:	b920      	cbnz	r0, 8010f1a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8010f10:	1a5a      	subs	r2, r3, r1
 8010f12:	699b      	ldr	r3, [r3, #24]
 8010f14:	4250      	negs	r0, r2
 8010f16:	4150      	adcs	r0, r2
 8010f18:	e7f8      	b.n	8010f0c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8010f1a:	4770      	bx	lr

08010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	6148      	str	r0, [r1, #20]
 8010f20:	618b      	str	r3, [r1, #24]
 8010f22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010f24:	b913      	cbnz	r3, 8010f2c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8010f26:	6281      	str	r1, [r0, #40]	; 0x28
 8010f28:	4770      	bx	lr
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	699a      	ldr	r2, [r3, #24]
 8010f2e:	2a00      	cmp	r2, #0
 8010f30:	d1fb      	bne.n	8010f2a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8010f32:	6199      	str	r1, [r3, #24]
 8010f34:	4770      	bx	lr

08010f36 <_ZN8touchgfx9Container9removeAllEv>:
 8010f36:	2200      	movs	r2, #0
 8010f38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010f3a:	b123      	cbz	r3, 8010f46 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8010f3c:	6999      	ldr	r1, [r3, #24]
 8010f3e:	6281      	str	r1, [r0, #40]	; 0x28
 8010f40:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8010f44:	e7f8      	b.n	8010f38 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8010f46:	4770      	bx	lr

08010f48 <_ZN8touchgfx9Container6unlinkEv>:
 8010f48:	2300      	movs	r3, #0
 8010f4a:	6283      	str	r3, [r0, #40]	; 0x28
 8010f4c:	4770      	bx	lr

08010f4e <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010f4e:	2200      	movs	r2, #0
 8010f50:	8002      	strh	r2, [r0, #0]
 8010f52:	8042      	strh	r2, [r0, #2]
 8010f54:	8082      	strh	r2, [r0, #4]
 8010f56:	80c2      	strh	r2, [r0, #6]
 8010f58:	4770      	bx	lr

08010f5a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8010f5a:	b570      	push	{r4, r5, r6, lr}
 8010f5c:	460d      	mov	r5, r1
 8010f5e:	4616      	mov	r6, r2
 8010f60:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010f62:	b13c      	cbz	r4, 8010f74 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8010f64:	6823      	ldr	r3, [r4, #0]
 8010f66:	4620      	mov	r0, r4
 8010f68:	4632      	mov	r2, r6
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f6e:	4798      	blx	r3
 8010f70:	69a4      	ldr	r4, [r4, #24]
 8010f72:	e7f6      	b.n	8010f62 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8010f74:	bd70      	pop	{r4, r5, r6, pc}

08010f76 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010f76:	b538      	push	{r3, r4, r5, lr}
 8010f78:	460d      	mov	r5, r1
 8010f7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010f7c:	b134      	cbz	r4, 8010f8c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010f7e:	682b      	ldr	r3, [r5, #0]
 8010f80:	4621      	mov	r1, r4
 8010f82:	4628      	mov	r0, r5
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	4798      	blx	r3
 8010f88:	69a4      	ldr	r4, [r4, #24]
 8010f8a:	e7f7      	b.n	8010f7c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010f8c:	bd38      	pop	{r3, r4, r5, pc}

08010f8e <_ZN8touchgfx9ContainerD1Ev>:
 8010f8e:	4770      	bx	lr

08010f90 <_ZN8touchgfx9ContainerD0Ev>:
 8010f90:	b510      	push	{r4, lr}
 8010f92:	4604      	mov	r4, r0
 8010f94:	212c      	movs	r1, #44	; 0x2c
 8010f96:	f010 fdc2 	bl	8021b1e <_ZdlPvj>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	bd10      	pop	{r4, pc}

08010f9e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010f9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fa0:	b19b      	cbz	r3, 8010fca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010fa2:	428b      	cmp	r3, r1
 8010fa4:	d109      	bne.n	8010fba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010fa6:	699a      	ldr	r2, [r3, #24]
 8010fa8:	2100      	movs	r1, #0
 8010faa:	6159      	str	r1, [r3, #20]
 8010fac:	6282      	str	r2, [r0, #40]	; 0x28
 8010fae:	b902      	cbnz	r2, 8010fb2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8010fb0:	4770      	bx	lr
 8010fb2:	6199      	str	r1, [r3, #24]
 8010fb4:	4770      	bx	lr
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	b13a      	cbz	r2, 8010fca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010fba:	699a      	ldr	r2, [r3, #24]
 8010fbc:	428a      	cmp	r2, r1
 8010fbe:	d1fa      	bne.n	8010fb6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8010fc0:	698a      	ldr	r2, [r1, #24]
 8010fc2:	619a      	str	r2, [r3, #24]
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8010fca:	4770      	bx	lr

08010fcc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8010fcc:	b410      	push	{r4}
 8010fce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	b92b      	cbnz	r3, 8010fe0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8010fd4:	6803      	ldr	r3, [r0, #0]
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fde:	4718      	bx	r3
 8010fe0:	b941      	cbnz	r1, 8010ff4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8010fe2:	6193      	str	r3, [r2, #24]
 8010fe4:	6282      	str	r2, [r0, #40]	; 0x28
 8010fe6:	6154      	str	r4, [r2, #20]
 8010fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	d0f9      	beq.n	8010fe8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8010ff4:	4299      	cmp	r1, r3
 8010ff6:	6998      	ldr	r0, [r3, #24]
 8010ff8:	d1f9      	bne.n	8010fee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8010ffa:	6190      	str	r0, [r2, #24]
 8010ffc:	618a      	str	r2, [r1, #24]
 8010ffe:	e7f2      	b.n	8010fe6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08011000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8011000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011004:	461f      	mov	r7, r3
 8011006:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801100a:	460d      	mov	r5, r1
 801100c:	4616      	mov	r6, r2
 801100e:	b103      	cbz	r3, 8011012 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8011010:	6038      	str	r0, [r7, #0]
 8011012:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011014:	b314      	cbz	r4, 801105c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8011016:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801101a:	b1eb      	cbz	r3, 8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801101c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011020:	428d      	cmp	r5, r1
 8011022:	db19      	blt.n	8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011024:	b289      	uxth	r1, r1
 8011026:	8923      	ldrh	r3, [r4, #8]
 8011028:	440b      	add	r3, r1
 801102a:	b21b      	sxth	r3, r3
 801102c:	429d      	cmp	r5, r3
 801102e:	da13      	bge.n	8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011030:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011034:	4296      	cmp	r6, r2
 8011036:	db0f      	blt.n	8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011038:	b292      	uxth	r2, r2
 801103a:	8963      	ldrh	r3, [r4, #10]
 801103c:	4413      	add	r3, r2
 801103e:	b21b      	sxth	r3, r3
 8011040:	429e      	cmp	r6, r3
 8011042:	da09      	bge.n	8011058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8011044:	6823      	ldr	r3, [r4, #0]
 8011046:	1ab2      	subs	r2, r6, r2
 8011048:	1a69      	subs	r1, r5, r1
 801104a:	4620      	mov	r0, r4
 801104c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8011050:	b212      	sxth	r2, r2
 8011052:	463b      	mov	r3, r7
 8011054:	b209      	sxth	r1, r1
 8011056:	47c0      	blx	r8
 8011058:	69a4      	ldr	r4, [r4, #24]
 801105a:	e7db      	b.n	8011014 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011060 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8011060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011064:	4c6d      	ldr	r4, [pc, #436]	; (801121c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8011066:	b0a1      	sub	sp, #132	; 0x84
 8011068:	4606      	mov	r6, r0
 801106a:	6824      	ldr	r4, [r4, #0]
 801106c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801106e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8011072:	2400      	movs	r4, #0
 8011074:	9303      	str	r3, [sp, #12]
 8011076:	802c      	strh	r4, [r5, #0]
 8011078:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801107a:	802c      	strh	r4, [r5, #0]
 801107c:	601c      	str	r4, [r3, #0]
 801107e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011082:	f7ff ffbd 	bl	8011000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011086:	f1b9 0f03 	cmp.w	r9, #3
 801108a:	f340 80c1 	ble.w	8011210 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801108e:	4631      	mov	r1, r6
 8011090:	a80c      	add	r0, sp, #48	; 0x30
 8011092:	f006 fbfd 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011096:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801109a:	9306      	str	r3, [sp, #24]
 801109c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80110a0:	9307      	str	r3, [sp, #28]
 80110a2:	9b03      	ldr	r3, [sp, #12]
 80110a4:	f8d3 a000 	ldr.w	sl, [r3]
 80110a8:	f1ba 0f00 	cmp.w	sl, #0
 80110ac:	f000 80b3 	beq.w	8011216 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80110b0:	4651      	mov	r1, sl
 80110b2:	a810      	add	r0, sp, #64	; 0x40
 80110b4:	f006 fbec 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80110b8:	2002      	movs	r0, #2
 80110ba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	9a06      	ldr	r2, [sp, #24]
 80110c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80110c6:	189d      	adds	r5, r3, r2
 80110c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80110cc:	9a07      	ldr	r2, [sp, #28]
 80110ce:	4419      	add	r1, r3
 80110d0:	9b02      	ldr	r3, [sp, #8]
 80110d2:	4413      	add	r3, r2
 80110d4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80110d8:	1a6d      	subs	r5, r5, r1
 80110da:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80110de:	fb92 f2f0 	sdiv	r2, r2, r0
 80110e2:	440a      	add	r2, r1
 80110e4:	1a9b      	subs	r3, r3, r2
 80110e6:	435b      	muls	r3, r3
 80110e8:	fb05 3505 	mla	r5, r5, r5, r3
 80110ec:	4f4c      	ldr	r7, [pc, #304]	; (8011220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80110ee:	ac10      	add	r4, sp, #64	; 0x40
 80110f0:	f1b9 0f0c 	cmp.w	r9, #12
 80110f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80110f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80110fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80110fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80110fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011100:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8011104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011108:	f04f 0303 	mov.w	r3, #3
 801110c:	bfd8      	it	le
 801110e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8011112:	f04f 0400 	mov.w	r4, #0
 8011116:	f8cd 9000 	str.w	r9, [sp]
 801111a:	bfcc      	ite	gt
 801111c:	4698      	movgt	r8, r3
 801111e:	fb92 f8f3 	sdivle	r8, r2, r3
 8011122:	1c63      	adds	r3, r4, #1
 8011124:	aa10      	add	r2, sp, #64	; 0x40
 8011126:	f004 0401 	and.w	r4, r4, #1
 801112a:	f04f 0b00 	mov.w	fp, #0
 801112e:	9308      	str	r3, [sp, #32]
 8011130:	9b00      	ldr	r3, [sp, #0]
 8011132:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8011136:	fb93 f3f8 	sdiv	r3, r3, r8
 801113a:	3404      	adds	r4, #4
 801113c:	b29b      	uxth	r3, r3
 801113e:	9304      	str	r3, [sp, #16]
 8011140:	9a04      	ldr	r2, [sp, #16]
 8011142:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8011146:	fb13 f302 	smulbb	r3, r3, r2
 801114a:	9a01      	ldr	r2, [sp, #4]
 801114c:	b29b      	uxth	r3, r3
 801114e:	1899      	adds	r1, r3, r2
 8011150:	9305      	str	r3, [sp, #20]
 8011152:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011156:	b209      	sxth	r1, r1
 8011158:	4299      	cmp	r1, r3
 801115a:	db4d      	blt.n	80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801115c:	8932      	ldrh	r2, [r6, #8]
 801115e:	4413      	add	r3, r2
 8011160:	b21b      	sxth	r3, r3
 8011162:	4299      	cmp	r1, r3
 8011164:	da48      	bge.n	80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011166:	9b04      	ldr	r3, [sp, #16]
 8011168:	6827      	ldr	r7, [r4, #0]
 801116a:	fb17 f703 	smulbb	r7, r7, r3
 801116e:	9b02      	ldr	r3, [sp, #8]
 8011170:	b2bf      	uxth	r7, r7
 8011172:	18fa      	adds	r2, r7, r3
 8011174:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011178:	b212      	sxth	r2, r2
 801117a:	429a      	cmp	r2, r3
 801117c:	db3c      	blt.n	80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801117e:	8970      	ldrh	r0, [r6, #10]
 8011180:	4403      	add	r3, r0
 8011182:	b21b      	sxth	r3, r3
 8011184:	429a      	cmp	r2, r3
 8011186:	da37      	bge.n	80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011188:	2300      	movs	r3, #0
 801118a:	4630      	mov	r0, r6
 801118c:	930b      	str	r3, [sp, #44]	; 0x2c
 801118e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011190:	f7ff ff36 	bl	8011000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011196:	b37a      	cbz	r2, 80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8011198:	4552      	cmp	r2, sl
 801119a:	d02d      	beq.n	80111f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801119c:	4611      	mov	r1, r2
 801119e:	a80e      	add	r0, sp, #56	; 0x38
 80111a0:	9209      	str	r2, [sp, #36]	; 0x24
 80111a2:	f006 fb75 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111a6:	f04f 0e02 	mov.w	lr, #2
 80111aa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80111ae:	9a06      	ldr	r2, [sp, #24]
 80111b0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80111b4:	9b01      	ldr	r3, [sp, #4]
 80111b6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80111ba:	4413      	add	r3, r2
 80111bc:	9a07      	ldr	r2, [sp, #28]
 80111be:	fb91 f1fe 	sdiv	r1, r1, lr
 80111c2:	fb9c fcfe 	sdiv	ip, ip, lr
 80111c6:	4401      	add	r1, r0
 80111c8:	1a58      	subs	r0, r3, r1
 80111ca:	9b02      	ldr	r3, [sp, #8]
 80111cc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80111d0:	4413      	add	r3, r2
 80111d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111d4:	448c      	add	ip, r1
 80111d6:	eba3 030c 	sub.w	r3, r3, ip
 80111da:	435b      	muls	r3, r3
 80111dc:	fb00 3300 	mla	r3, r0, r0, r3
 80111e0:	42ab      	cmp	r3, r5
 80111e2:	d208      	bcs.n	80111f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80111e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111e6:	461d      	mov	r5, r3
 80111e8:	9803      	ldr	r0, [sp, #12]
 80111ea:	6001      	str	r1, [r0, #0]
 80111ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80111ee:	9805      	ldr	r0, [sp, #20]
 80111f0:	8008      	strh	r0, [r1, #0]
 80111f2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80111f4:	800f      	strh	r7, [r1, #0]
 80111f6:	4692      	mov	sl, r2
 80111f8:	f10b 0b01 	add.w	fp, fp, #1
 80111fc:	3408      	adds	r4, #8
 80111fe:	f1bb 0f04 	cmp.w	fp, #4
 8011202:	d19d      	bne.n	8011140 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8011204:	9b00      	ldr	r3, [sp, #0]
 8011206:	9c08      	ldr	r4, [sp, #32]
 8011208:	444b      	add	r3, r9
 801120a:	4544      	cmp	r4, r8
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	d188      	bne.n	8011122 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8011210:	b021      	add	sp, #132	; 0x84
 8011212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011216:	f04f 35ff 	mov.w	r5, #4294967295
 801121a:	e767      	b.n	80110ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801121c:	2400ea34 	.word	0x2400ea34
 8011220:	08022f30 	.word	0x08022f30

08011224 <_ZN8touchgfx4RectaNERKS0_>:
 8011224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011228:	f9b1 7000 	ldrsh.w	r7, [r1]
 801122c:	888c      	ldrh	r4, [r1, #4]
 801122e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011232:	443c      	add	r4, r7
 8011234:	b2a4      	uxth	r4, r4
 8011236:	fa0f f884 	sxth.w	r8, r4
 801123a:	45c1      	cmp	r9, r8
 801123c:	da2f      	bge.n	801129e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801123e:	8882      	ldrh	r2, [r0, #4]
 8011240:	444a      	add	r2, r9
 8011242:	b292      	uxth	r2, r2
 8011244:	fa0f fe82 	sxth.w	lr, r2
 8011248:	4577      	cmp	r7, lr
 801124a:	da28      	bge.n	801129e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801124c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8011250:	88cb      	ldrh	r3, [r1, #6]
 8011252:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011256:	442b      	add	r3, r5
 8011258:	b21b      	sxth	r3, r3
 801125a:	429e      	cmp	r6, r3
 801125c:	da1f      	bge.n	801129e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801125e:	88c3      	ldrh	r3, [r0, #6]
 8011260:	4433      	add	r3, r6
 8011262:	b29b      	uxth	r3, r3
 8011264:	fa0f fc83 	sxth.w	ip, r3
 8011268:	4565      	cmp	r5, ip
 801126a:	da18      	bge.n	801129e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801126c:	454f      	cmp	r7, r9
 801126e:	bfb8      	it	lt
 8011270:	464f      	movlt	r7, r9
 8011272:	42b5      	cmp	r5, r6
 8011274:	bfb8      	it	lt
 8011276:	4635      	movlt	r5, r6
 8011278:	45f0      	cmp	r8, lr
 801127a:	bfd8      	it	le
 801127c:	4622      	movle	r2, r4
 801127e:	1bd2      	subs	r2, r2, r7
 8011280:	8082      	strh	r2, [r0, #4]
 8011282:	884a      	ldrh	r2, [r1, #2]
 8011284:	88c9      	ldrh	r1, [r1, #6]
 8011286:	8007      	strh	r7, [r0, #0]
 8011288:	440a      	add	r2, r1
 801128a:	8045      	strh	r5, [r0, #2]
 801128c:	b292      	uxth	r2, r2
 801128e:	b211      	sxth	r1, r2
 8011290:	458c      	cmp	ip, r1
 8011292:	bfa8      	it	ge
 8011294:	4613      	movge	r3, r2
 8011296:	1b5b      	subs	r3, r3, r5
 8011298:	80c3      	strh	r3, [r0, #6]
 801129a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801129e:	2300      	movs	r3, #0
 80112a0:	8003      	strh	r3, [r0, #0]
 80112a2:	8043      	strh	r3, [r0, #2]
 80112a4:	8083      	strh	r3, [r0, #4]
 80112a6:	80c3      	strh	r3, [r0, #6]
 80112a8:	e7f7      	b.n	801129a <_ZN8touchgfx4RectaNERKS0_+0x76>

080112aa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80112aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dd06      	ble.n	80112c0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80112b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80112b6:	2800      	cmp	r0, #0
 80112b8:	bfcc      	ite	gt
 80112ba:	2000      	movgt	r0, #0
 80112bc:	2001      	movle	r0, #1
 80112be:	4770      	bx	lr
 80112c0:	2001      	movs	r0, #1
 80112c2:	4770      	bx	lr

080112c4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80112c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112c8:	2300      	movs	r3, #0
 80112ca:	4604      	mov	r4, r0
 80112cc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80112ce:	8003      	strh	r3, [r0, #0]
 80112d0:	8043      	strh	r3, [r0, #2]
 80112d2:	8083      	strh	r3, [r0, #4]
 80112d4:	80c3      	strh	r3, [r0, #6]
 80112d6:	2d00      	cmp	r5, #0
 80112d8:	d040      	beq.n	801135c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80112da:	1d28      	adds	r0, r5, #4
 80112dc:	f7ff ffe5 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80112e0:	b988      	cbnz	r0, 8011306 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80112e2:	4620      	mov	r0, r4
 80112e4:	f7ff ffe1 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80112e8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80112ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80112f0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80112f4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80112f8:	b138      	cbz	r0, 801130a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80112fa:	8022      	strh	r2, [r4, #0]
 80112fc:	8063      	strh	r3, [r4, #2]
 80112fe:	f8a4 e004 	strh.w	lr, [r4, #4]
 8011302:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011306:	69ad      	ldr	r5, [r5, #24]
 8011308:	e7e5      	b.n	80112d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801130a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801130e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011312:	4290      	cmp	r0, r2
 8011314:	4607      	mov	r7, r0
 8011316:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801131a:	460e      	mov	r6, r1
 801131c:	bfa8      	it	ge
 801131e:	4617      	movge	r7, r2
 8011320:	4299      	cmp	r1, r3
 8011322:	4472      	add	r2, lr
 8011324:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8011328:	bfa8      	it	ge
 801132a:	461e      	movge	r6, r3
 801132c:	4440      	add	r0, r8
 801132e:	4471      	add	r1, lr
 8011330:	4463      	add	r3, ip
 8011332:	b200      	sxth	r0, r0
 8011334:	8027      	strh	r7, [r4, #0]
 8011336:	b212      	sxth	r2, r2
 8011338:	8066      	strh	r6, [r4, #2]
 801133a:	b209      	sxth	r1, r1
 801133c:	b21b      	sxth	r3, r3
 801133e:	4290      	cmp	r0, r2
 8011340:	bfac      	ite	ge
 8011342:	ebc7 0200 	rsbge	r2, r7, r0
 8011346:	ebc7 0202 	rsblt	r2, r7, r2
 801134a:	4299      	cmp	r1, r3
 801134c:	bfac      	ite	ge
 801134e:	ebc6 0301 	rsbge	r3, r6, r1
 8011352:	ebc6 0303 	rsblt	r3, r6, r3
 8011356:	80a2      	strh	r2, [r4, #4]
 8011358:	80e3      	strh	r3, [r4, #6]
 801135a:	e7d4      	b.n	8011306 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801135c:	4620      	mov	r0, r4
 801135e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011362 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8011362:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011366:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801136a:	b383      	cbz	r3, 80113ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801136c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801136e:	b374      	cbz	r4, 80113ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8011370:	f9b1 5000 	ldrsh.w	r5, [r1]
 8011374:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011378:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801137c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011380:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011384:	b303      	cbz	r3, 80113c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8011386:	4668      	mov	r0, sp
 8011388:	1d21      	adds	r1, r4, #4
 801138a:	f8ad 5000 	strh.w	r5, [sp]
 801138e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8011392:	f8ad 7004 	strh.w	r7, [sp, #4]
 8011396:	f8ad 8006 	strh.w	r8, [sp, #6]
 801139a:	f7ff ff43 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801139e:	4668      	mov	r0, sp
 80113a0:	f7ff ff83 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80113a4:	b980      	cbnz	r0, 80113c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80113a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80113aa:	4669      	mov	r1, sp
 80113ac:	88a2      	ldrh	r2, [r4, #4]
 80113ae:	4620      	mov	r0, r4
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	88e2      	ldrh	r2, [r4, #6]
 80113b4:	f8ad 3000 	strh.w	r3, [sp]
 80113b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80113bc:	1a9b      	subs	r3, r3, r2
 80113be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80113c2:	6823      	ldr	r3, [r4, #0]
 80113c4:	689b      	ldr	r3, [r3, #8]
 80113c6:	4798      	blx	r3
 80113c8:	69a4      	ldr	r4, [r4, #24]
 80113ca:	2c00      	cmp	r4, #0
 80113cc:	d1d8      	bne.n	8011380 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80113ce:	b002      	add	sp, #8
 80113d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80113d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80113da:	460d      	mov	r5, r1
 80113dc:	4616      	mov	r6, r2
 80113de:	b323      	cbz	r3, 801142a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80113e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80113e2:	b314      	cbz	r4, 801142a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80113e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80113e8:	b1eb      	cbz	r3, 8011426 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80113ea:	6828      	ldr	r0, [r5, #0]
 80113ec:	466b      	mov	r3, sp
 80113ee:	6869      	ldr	r1, [r5, #4]
 80113f0:	c303      	stmia	r3!, {r0, r1}
 80113f2:	4668      	mov	r0, sp
 80113f4:	1d21      	adds	r1, r4, #4
 80113f6:	f7ff ff15 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 80113fa:	4668      	mov	r0, sp
 80113fc:	f7ff ff55 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8011400:	b988      	cbnz	r0, 8011426 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011402:	f8bd 3000 	ldrh.w	r3, [sp]
 8011406:	4669      	mov	r1, sp
 8011408:	88a2      	ldrh	r2, [r4, #4]
 801140a:	4620      	mov	r0, r4
 801140c:	1a9b      	subs	r3, r3, r2
 801140e:	88e2      	ldrh	r2, [r4, #6]
 8011410:	f8ad 3000 	strh.w	r3, [sp]
 8011414:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011418:	1a9b      	subs	r3, r3, r2
 801141a:	4632      	mov	r2, r6
 801141c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011420:	6823      	ldr	r3, [r4, #0]
 8011422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011424:	4798      	blx	r3
 8011426:	69a4      	ldr	r4, [r4, #24]
 8011428:	e7db      	b.n	80113e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801142a:	b002      	add	sp, #8
 801142c:	bd70      	pop	{r4, r5, r6, pc}

0801142e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801142e:	6803      	ldr	r3, [r0, #0]
 8011430:	b513      	push	{r0, r1, r4, lr}
 8011432:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8011436:	2300      	movs	r3, #0
 8011438:	e9cd 3300 	strd	r3, r3, [sp]
 801143c:	466b      	mov	r3, sp
 801143e:	47a0      	blx	r4
 8011440:	b002      	add	sp, #8
 8011442:	bd10      	pop	{r4, pc}

08011444 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8011444:	2301      	movs	r3, #1
 8011446:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801144a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801144e:	4770      	bx	lr

08011450 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8011450:	2301      	movs	r3, #1
 8011452:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8011456:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801145a:	4770      	bx	lr

0801145c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801145c:	6843      	ldr	r3, [r0, #4]
 801145e:	2201      	movs	r2, #1
 8011460:	725a      	strb	r2, [r3, #9]
 8011462:	6840      	ldr	r0, [r0, #4]
 8011464:	6803      	ldr	r3, [r0, #0]
 8011466:	691b      	ldr	r3, [r3, #16]
 8011468:	4718      	bx	r3

0801146a <_ZN8touchgfx3HAL8flushDMAEv>:
 801146a:	6840      	ldr	r0, [r0, #4]
 801146c:	6803      	ldr	r3, [r0, #0]
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	4718      	bx	r3

08011472 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8011472:	b530      	push	{r4, r5, lr}
 8011474:	b08b      	sub	sp, #44	; 0x2c
 8011476:	6804      	ldr	r4, [r0, #0]
 8011478:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801147c:	9509      	str	r5, [sp, #36]	; 0x24
 801147e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8011482:	9508      	str	r5, [sp, #32]
 8011484:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8011488:	9507      	str	r5, [sp, #28]
 801148a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801148e:	9506      	str	r5, [sp, #24]
 8011490:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8011494:	9505      	str	r5, [sp, #20]
 8011496:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801149a:	9504      	str	r5, [sp, #16]
 801149c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 80114a0:	9503      	str	r5, [sp, #12]
 80114a2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80114a6:	9502      	str	r5, [sp, #8]
 80114a8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80114ac:	e9cd 3500 	strd	r3, r5, [sp]
 80114b0:	4613      	mov	r3, r2
 80114b2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 80114b4:	2200      	movs	r2, #0
 80114b6:	47a0      	blx	r4
 80114b8:	b00b      	add	sp, #44	; 0x2c
 80114ba:	bd30      	pop	{r4, r5, pc}

080114bc <_ZN8touchgfx3HAL10beginFrameEv>:
 80114bc:	4b04      	ldr	r3, [pc, #16]	; (80114d0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	b123      	cbz	r3, 80114cc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80114c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80114c6:	f080 0001 	eor.w	r0, r0, #1
 80114ca:	4770      	bx	lr
 80114cc:	2001      	movs	r0, #1
 80114ce:	4770      	bx	lr
 80114d0:	2400ea32 	.word	0x2400ea32

080114d4 <_ZN8touchgfx3HAL8endFrameEv>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	6840      	ldr	r0, [r0, #4]
 80114da:	6803      	ldr	r3, [r0, #0]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	4798      	blx	r3
 80114e0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80114e4:	b113      	cbz	r3, 80114ec <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80114e6:	2301      	movs	r3, #1
 80114e8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80114ec:	bd10      	pop	{r4, pc}

080114ee <_ZN8touchgfx3HAL10initializeEv>:
 80114ee:	b510      	push	{r4, lr}
 80114f0:	4604      	mov	r4, r0
 80114f2:	f7f0 fcb1 	bl	8001e58 <_ZN8touchgfx10OSWrappers10initializeEv>
 80114f6:	f7f0 f9c3 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
 80114fa:	6860      	ldr	r0, [r4, #4]
 80114fc:	6803      	ldr	r3, [r0, #0]
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	4798      	blx	r3
 8011502:	68e0      	ldr	r0, [r4, #12]
 8011504:	6803      	ldr	r3, [r0, #0]
 8011506:	689b      	ldr	r3, [r3, #8]
 8011508:	4798      	blx	r3
 801150a:	6823      	ldr	r3, [r4, #0]
 801150c:	4620      	mov	r0, r4
 801150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011514:	4718      	bx	r3
	...

08011518 <_ZN8touchgfx3HAL4tickEv>:
 8011518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801151a:	6803      	ldr	r3, [r0, #0]
 801151c:	4604      	mov	r4, r0
 801151e:	4d5b      	ldr	r5, [pc, #364]	; (801168c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8011520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011524:	4798      	blx	r3
 8011526:	2800      	cmp	r0, #0
 8011528:	f000 8095 	beq.w	8011656 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801152c:	2001      	movs	r0, #1
 801152e:	2600      	movs	r6, #0
 8011530:	f7f0 f90c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011534:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8011538:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801153c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011540:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8011544:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8011548:	b133      	cbz	r3, 8011558 <_ZN8touchgfx3HAL4tickEv+0x40>
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	4620      	mov	r0, r4
 801154e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8011552:	4798      	blx	r3
 8011554:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8011558:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801155c:	2601      	movs	r6, #1
 801155e:	6862      	ldr	r2, [r4, #4]
 8011560:	f083 0301 	eor.w	r3, r3, #1
 8011564:	702e      	strb	r6, [r5, #0]
 8011566:	7253      	strb	r3, [r2, #9]
 8011568:	f005 f8b2 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
 801156c:	6803      	ldr	r3, [r0, #0]
 801156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011570:	4798      	blx	r3
 8011572:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011576:	b90b      	cbnz	r3, 801157c <_ZN8touchgfx3HAL4tickEv+0x64>
 8011578:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801157c:	f005 f8a8 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
 8011580:	6803      	ldr	r3, [r0, #0]
 8011582:	695b      	ldr	r3, [r3, #20]
 8011584:	4798      	blx	r3
 8011586:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011588:	6803      	ldr	r3, [r0, #0]
 801158a:	691b      	ldr	r3, [r3, #16]
 801158c:	4798      	blx	r3
 801158e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011592:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8011596:	3b01      	subs	r3, #1
 8011598:	b2db      	uxtb	r3, r3
 801159a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801159e:	b10a      	cbz	r2, 80115a4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d1eb      	bne.n	801157c <_ZN8touchgfx3HAL4tickEv+0x64>
 80115a4:	4a3a      	ldr	r2, [pc, #232]	; (8011690 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80115a6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80115aa:	7813      	ldrb	r3, [r2, #0]
 80115ac:	3301      	adds	r3, #1
 80115ae:	b25b      	sxtb	r3, r3
 80115b0:	4299      	cmp	r1, r3
 80115b2:	7013      	strb	r3, [r2, #0]
 80115b4:	dc10      	bgt.n	80115d8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80115b6:	2300      	movs	r3, #0
 80115b8:	68e0      	ldr	r0, [r4, #12]
 80115ba:	a902      	add	r1, sp, #8
 80115bc:	7013      	strb	r3, [r2, #0]
 80115be:	aa03      	add	r2, sp, #12
 80115c0:	6803      	ldr	r3, [r0, #0]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	4798      	blx	r3
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d050      	beq.n	801166e <_ZN8touchgfx3HAL4tickEv+0x156>
 80115cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80115d0:	4620      	mov	r0, r4
 80115d2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80115d6:	4798      	blx	r3
 80115d8:	2300      	movs	r3, #0
 80115da:	6960      	ldr	r0, [r4, #20]
 80115dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80115e0:	b158      	cbz	r0, 80115fa <_ZN8touchgfx3HAL4tickEv+0xe2>
 80115e2:	6803      	ldr	r3, [r0, #0]
 80115e4:	f10d 0107 	add.w	r1, sp, #7
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	4798      	blx	r3
 80115ec:	b128      	cbz	r0, 80115fa <_ZN8touchgfx3HAL4tickEv+0xe2>
 80115ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80115f4:	6803      	ldr	r3, [r0, #0]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	4798      	blx	r3
 80115fa:	f104 001c 	add.w	r0, r4, #28
 80115fe:	f00f feb7 	bl	8021370 <_ZN8touchgfx8Gestures4tickEv>
 8011602:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8011606:	b30b      	cbz	r3, 801164c <_ZN8touchgfx3HAL4tickEv+0x134>
 8011608:	6920      	ldr	r0, [r4, #16]
 801160a:	6803      	ldr	r3, [r0, #0]
 801160c:	691b      	ldr	r3, [r3, #16]
 801160e:	4798      	blx	r3
 8011610:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011612:	4606      	mov	r6, r0
 8011614:	b903      	cbnz	r3, 8011618 <_ZN8touchgfx3HAL4tickEv+0x100>
 8011616:	6720      	str	r0, [r4, #112]	; 0x70
 8011618:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801161a:	4a1e      	ldr	r2, [pc, #120]	; (8011694 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801161c:	1af3      	subs	r3, r6, r3
 801161e:	4293      	cmp	r3, r2
 8011620:	d914      	bls.n	801164c <_ZN8touchgfx3HAL4tickEv+0x134>
 8011622:	6920      	ldr	r0, [r4, #16]
 8011624:	6803      	ldr	r3, [r0, #0]
 8011626:	699b      	ldr	r3, [r3, #24]
 8011628:	4798      	blx	r3
 801162a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801162c:	2264      	movs	r2, #100	; 0x64
 801162e:	1af3      	subs	r3, r6, r3
 8011630:	fbb3 f3f2 	udiv	r3, r3, r2
 8011634:	fbb0 f0f3 	udiv	r0, r0, r3
 8011638:	2800      	cmp	r0, #0
 801163a:	dc1d      	bgt.n	8011678 <_ZN8touchgfx3HAL4tickEv+0x160>
 801163c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8011640:	6920      	ldr	r0, [r4, #16]
 8011642:	2100      	movs	r1, #0
 8011644:	6803      	ldr	r3, [r0, #0]
 8011646:	69db      	ldr	r3, [r3, #28]
 8011648:	4798      	blx	r3
 801164a:	6726      	str	r6, [r4, #112]	; 0x70
 801164c:	f005 f840 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
 8011650:	6803      	ldr	r3, [r0, #0]
 8011652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011654:	4798      	blx	r3
 8011656:	6823      	ldr	r3, [r4, #0]
 8011658:	4620      	mov	r0, r4
 801165a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801165e:	4798      	blx	r3
 8011660:	2001      	movs	r0, #1
 8011662:	f7f0 f8a3 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011666:	2300      	movs	r3, #0
 8011668:	702b      	strb	r3, [r5, #0]
 801166a:	b004      	add	sp, #16
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011672:	4620      	mov	r0, r4
 8011674:	4798      	blx	r3
 8011676:	e7af      	b.n	80115d8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8011678:	2863      	cmp	r0, #99	; 0x63
 801167a:	bfcb      	itete	gt
 801167c:	2300      	movgt	r3, #0
 801167e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8011682:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8011686:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801168a:	e7d9      	b.n	8011640 <_ZN8touchgfx3HAL4tickEv+0x128>
 801168c:	2400ea38 	.word	0x2400ea38
 8011690:	2400ea39 	.word	0x2400ea39
 8011694:	05f5e100 	.word	0x05f5e100

08011698 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8011698:	f7f0 bc0e 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801169c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801169c:	6581      	str	r1, [r0, #88]	; 0x58
 801169e:	301c      	adds	r0, #28
 80116a0:	f00f be64 	b.w	802136c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080116a4 <_ZN8touchgfx3HAL5touchEll>:
 80116a4:	b530      	push	{r4, r5, lr}
 80116a6:	b087      	sub	sp, #28
 80116a8:	4604      	mov	r4, r0
 80116aa:	a804      	add	r0, sp, #16
 80116ac:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80116b0:	f004 fe54 	bl	801635c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80116b4:	9b04      	ldr	r3, [sp, #16]
 80116b6:	a906      	add	r1, sp, #24
 80116b8:	a803      	add	r0, sp, #12
 80116ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80116be:	9b05      	ldr	r3, [sp, #20]
 80116c0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80116c4:	f004 fe9c 	bl	8016400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80116c8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80116cc:	f104 001c 	add.w	r0, r4, #28
 80116d0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80116d4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80116d8:	b189      	cbz	r1, 80116fe <_ZN8touchgfx3HAL5touchEll+0x5a>
 80116da:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	4613      	mov	r3, r2
 80116e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80116e6:	462a      	mov	r2, r5
 80116e8:	f00f fe50 	bl	802138c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80116ec:	b128      	cbz	r0, 80116fa <_ZN8touchgfx3HAL5touchEll+0x56>
 80116ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80116f2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80116f4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80116f8:	6623      	str	r3, [r4, #96]	; 0x60
 80116fa:	b007      	add	sp, #28
 80116fc:	bd30      	pop	{r4, r5, pc}
 80116fe:	f00f fe85 	bl	802140c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011702:	2301      	movs	r3, #1
 8011704:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011708:	e7f1      	b.n	80116ee <_ZN8touchgfx3HAL5touchEll+0x4a>

0801170a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801170a:	b510      	push	{r4, lr}
 801170c:	2b00      	cmp	r3, #0
 801170e:	d046      	beq.n	801179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011710:	ea81 0002 	eor.w	r0, r1, r2
 8011714:	07c4      	lsls	r4, r0, #31
 8011716:	d508      	bpl.n	801172a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8011718:	440b      	add	r3, r1
 801171a:	3a01      	subs	r2, #1
 801171c:	428b      	cmp	r3, r1
 801171e:	d93e      	bls.n	801179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011720:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011724:	f801 0b01 	strb.w	r0, [r1], #1
 8011728:	e7f8      	b.n	801171c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801172a:	07d0      	lsls	r0, r2, #31
 801172c:	bf42      	ittt	mi
 801172e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8011732:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8011736:	f801 0b01 	strbmi.w	r0, [r1], #1
 801173a:	2b01      	cmp	r3, #1
 801173c:	d911      	bls.n	8011762 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801173e:	ea81 0402 	eor.w	r4, r1, r2
 8011742:	4610      	mov	r0, r2
 8011744:	07a4      	lsls	r4, r4, #30
 8011746:	d022      	beq.n	801178e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8011748:	f023 0401 	bic.w	r4, r3, #1
 801174c:	440c      	add	r4, r1
 801174e:	428c      	cmp	r4, r1
 8011750:	4602      	mov	r2, r0
 8011752:	d904      	bls.n	801175e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8011754:	8812      	ldrh	r2, [r2, #0]
 8011756:	3002      	adds	r0, #2
 8011758:	f821 2b02 	strh.w	r2, [r1], #2
 801175c:	e7f7      	b.n	801174e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801175e:	f003 0301 	and.w	r3, r3, #1
 8011762:	f023 0003 	bic.w	r0, r3, #3
 8011766:	4408      	add	r0, r1
 8011768:	4288      	cmp	r0, r1
 801176a:	4614      	mov	r4, r2
 801176c:	d904      	bls.n	8011778 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801176e:	6824      	ldr	r4, [r4, #0]
 8011770:	3204      	adds	r2, #4
 8011772:	f841 4b04 	str.w	r4, [r1], #4
 8011776:	e7f7      	b.n	8011768 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8011778:	f003 0303 	and.w	r3, r3, #3
 801177c:	3a01      	subs	r2, #1
 801177e:	440b      	add	r3, r1
 8011780:	428b      	cmp	r3, r1
 8011782:	d90c      	bls.n	801179e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011784:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8011788:	f801 0b01 	strb.w	r0, [r1], #1
 801178c:	e7f8      	b.n	8011780 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801178e:	0790      	lsls	r0, r2, #30
 8011790:	d0e7      	beq.n	8011762 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011792:	f832 0b02 	ldrh.w	r0, [r2], #2
 8011796:	3b02      	subs	r3, #2
 8011798:	f821 0b02 	strh.w	r0, [r1], #2
 801179c:	e7e1      	b.n	8011762 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801179e:	2001      	movs	r0, #1
 80117a0:	bd10      	pop	{r4, pc}

080117a2 <_ZN8touchgfx3HAL7noTouchEv>:
 80117a2:	b510      	push	{r4, lr}
 80117a4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80117a8:	4604      	mov	r4, r0
 80117aa:	b153      	cbz	r3, 80117c2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80117ac:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80117b0:	2101      	movs	r1, #1
 80117b2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80117b6:	301c      	adds	r0, #28
 80117b8:	f00f fe28 	bl	802140c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80117bc:	2300      	movs	r3, #0
 80117be:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80117c2:	bd10      	pop	{r4, pc}

080117c4 <_ZN8touchgfx3HAL3lcdEv>:
 80117c4:	4b04      	ldr	r3, [pc, #16]	; (80117d8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80117cc:	b10a      	cbz	r2, 80117d2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 80117ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80117d0:	b900      	cbnz	r0, 80117d4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 80117d2:	6898      	ldr	r0, [r3, #8]
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	2400ea34 	.word	0x2400ea34

080117dc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80117dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117e0:	b085      	sub	sp, #20
 80117e2:	4604      	mov	r4, r0
 80117e4:	2000      	movs	r0, #0
 80117e6:	4699      	mov	r9, r3
 80117e8:	ad04      	add	r5, sp, #16
 80117ea:	460f      	mov	r7, r1
 80117ec:	4690      	mov	r8, r2
 80117ee:	f845 0d04 	str.w	r0, [r5, #-4]!
 80117f2:	69a0      	ldr	r0, [r4, #24]
 80117f4:	6806      	ldr	r6, [r0, #0]
 80117f6:	9501      	str	r5, [sp, #4]
 80117f8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80117fc:	9500      	str	r5, [sp, #0]
 80117fe:	6835      	ldr	r5, [r6, #0]
 8011800:	47a8      	blx	r5
 8011802:	4d10      	ldr	r5, [pc, #64]	; (8011844 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8011804:	4606      	mov	r6, r0
 8011806:	f8a5 9000 	strh.w	r9, [r5]
 801180a:	f7ff ffdb 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 801180e:	6803      	ldr	r3, [r0, #0]
 8011810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011812:	4798      	blx	r3
 8011814:	b128      	cbz	r0, 8011822 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8011816:	2801      	cmp	r0, #1
 8011818:	d00b      	beq.n	8011832 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 801181a:	4630      	mov	r0, r6
 801181c:	b005      	add	sp, #20
 801181e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011822:	882b      	ldrh	r3, [r5, #0]
 8011824:	fb08 7203 	mla	r2, r8, r3, r7
 8011828:	9b03      	ldr	r3, [sp, #12]
 801182a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801182e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011830:	e7f3      	b.n	801181a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011832:	882a      	ldrh	r2, [r5, #0]
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	fb08 7202 	mla	r2, r8, r2, r7
 801183a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801183e:	1a9a      	subs	r2, r3, r2
 8011840:	63e2      	str	r2, [r4, #60]	; 0x3c
 8011842:	e7ea      	b.n	801181a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8011844:	2400ea2e 	.word	0x2400ea2e

08011848 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8011848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801184a:	b08b      	sub	sp, #44	; 0x2c
 801184c:	4617      	mov	r7, r2
 801184e:	4604      	mov	r4, r0
 8011850:	460e      	mov	r6, r1
 8011852:	461d      	mov	r5, r3
 8011854:	f7ff ffb6 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011858:	6803      	ldr	r3, [r0, #0]
 801185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801185c:	4798      	blx	r3
 801185e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011862:	9007      	str	r0, [sp, #28]
 8011864:	4631      	mov	r1, r6
 8011866:	6822      	ldr	r2, [r4, #0]
 8011868:	e9cd 0308 	strd	r0, r3, [sp, #32]
 801186c:	4b0c      	ldr	r3, [pc, #48]	; (80118a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801186e:	4620      	mov	r0, r4
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	9306      	str	r3, [sp, #24]
 8011874:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011878:	9305      	str	r3, [sp, #20]
 801187a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801187e:	9304      	str	r3, [sp, #16]
 8011880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011884:	9303      	str	r3, [sp, #12]
 8011886:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801188a:	9302      	str	r3, [sp, #8]
 801188c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011890:	e9cd 5300 	strd	r5, r3, [sp]
 8011894:	463b      	mov	r3, r7
 8011896:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8011898:	2200      	movs	r2, #0
 801189a:	47a8      	blx	r5
 801189c:	b00b      	add	sp, #44	; 0x2c
 801189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118a0:	2400ea2e 	.word	0x2400ea2e

080118a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80118a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118a8:	4698      	mov	r8, r3
 80118aa:	6803      	ldr	r3, [r0, #0]
 80118ac:	b08b      	sub	sp, #44	; 0x2c
 80118ae:	4617      	mov	r7, r2
 80118b0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80118b2:	460e      	mov	r6, r1
 80118b4:	4b13      	ldr	r3, [pc, #76]	; (8011904 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80118b6:	4604      	mov	r4, r0
 80118b8:	f8b3 9000 	ldrh.w	r9, [r3]
 80118bc:	f7ff ff82 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 80118c0:	6803      	ldr	r3, [r0, #0]
 80118c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c4:	4798      	blx	r3
 80118c6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80118ca:	2200      	movs	r2, #0
 80118cc:	4631      	mov	r1, r6
 80118ce:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80118d2:	2302      	movs	r3, #2
 80118d4:	4620      	mov	r0, r4
 80118d6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80118da:	2301      	movs	r3, #1
 80118dc:	9305      	str	r3, [sp, #20]
 80118de:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80118e2:	9304      	str	r3, [sp, #16]
 80118e4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80118e8:	9303      	str	r3, [sp, #12]
 80118ea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80118ee:	9302      	str	r3, [sp, #8]
 80118f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80118f4:	e9cd 8300 	strd	r8, r3, [sp]
 80118f8:	463b      	mov	r3, r7
 80118fa:	47a8      	blx	r5
 80118fc:	b00b      	add	sp, #44	; 0x2c
 80118fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011902:	bf00      	nop
 8011904:	2400ea2e 	.word	0x2400ea2e

08011908 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801190c:	4698      	mov	r8, r3
 801190e:	6803      	ldr	r3, [r0, #0]
 8011910:	b087      	sub	sp, #28
 8011912:	460e      	mov	r6, r1
 8011914:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8011916:	4617      	mov	r7, r2
 8011918:	4b0f      	ldr	r3, [pc, #60]	; (8011958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801191a:	4604      	mov	r4, r0
 801191c:	f8b3 9000 	ldrh.w	r9, [r3]
 8011920:	f7ff ff50 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011924:	6803      	ldr	r3, [r0, #0]
 8011926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011928:	4798      	blx	r3
 801192a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801192e:	463a      	mov	r2, r7
 8011930:	4631      	mov	r1, r6
 8011932:	f8cd 900c 	str.w	r9, [sp, #12]
 8011936:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801193a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801193e:	4620      	mov	r0, r4
 8011940:	9302      	str	r3, [sp, #8]
 8011942:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011946:	9301      	str	r3, [sp, #4]
 8011948:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	4643      	mov	r3, r8
 8011950:	47a8      	blx	r5
 8011952:	b007      	add	sp, #28
 8011954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011958:	2400ea2e 	.word	0x2400ea2e

0801195c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801195c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011960:	4604      	mov	r4, r0
 8011962:	b08f      	sub	sp, #60	; 0x3c
 8011964:	4610      	mov	r0, r2
 8011966:	460d      	mov	r5, r1
 8011968:	4691      	mov	r9, r2
 801196a:	461e      	mov	r6, r3
 801196c:	f007 fb96 	bl	801909c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011970:	2800      	cmp	r0, #0
 8011972:	f000 809d 	beq.w	8011ab0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011976:	6823      	ldr	r3, [r4, #0]
 8011978:	4620      	mov	r0, r4
 801197a:	f8df b198 	ldr.w	fp, [pc, #408]	; 8011b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801197e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011984:	4798      	blx	r3
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	4620      	mov	r0, r4
 801198a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8011b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011990:	4798      	blx	r3
 8011992:	f8bb 3000 	ldrh.w	r3, [fp]
 8011996:	4f5c      	ldr	r7, [pc, #368]	; (8011b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011998:	9301      	str	r3, [sp, #4]
 801199a:	f8ba 3000 	ldrh.w	r3, [sl]
 801199e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80119a2:	4640      	mov	r0, r8
 80119a4:	9302      	str	r3, [sp, #8]
 80119a6:	883b      	ldrh	r3, [r7, #0]
 80119a8:	9303      	str	r3, [sp, #12]
 80119aa:	4b58      	ldr	r3, [pc, #352]	; (8011b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80119ac:	881a      	ldrh	r2, [r3, #0]
 80119ae:	9305      	str	r3, [sp, #20]
 80119b0:	9204      	str	r2, [sp, #16]
 80119b2:	f007 fcb7 	bl	8019324 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80119b6:	8038      	strh	r0, [r7, #0]
 80119b8:	4640      	mov	r0, r8
 80119ba:	f007 fce7 	bl	801938c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80119be:	9b05      	ldr	r3, [sp, #20]
 80119c0:	b280      	uxth	r0, r0
 80119c2:	8018      	strh	r0, [r3, #0]
 80119c4:	4b52      	ldr	r3, [pc, #328]	; (8011b10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d174      	bne.n	8011ab6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80119cc:	883b      	ldrh	r3, [r7, #0]
 80119ce:	f8aa 0000 	strh.w	r0, [sl]
 80119d2:	f8ab 3000 	strh.w	r3, [fp]
 80119d6:	4648      	mov	r0, r9
 80119d8:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80119dc:	f007 fb5e 	bl	801909c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80119e0:	2200      	movs	r2, #0
 80119e2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80119e6:	4611      	mov	r1, r2
 80119e8:	4628      	mov	r0, r5
 80119ea:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80119ee:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80119f2:	f7f1 fcda 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
 80119f6:	2301      	movs	r3, #1
 80119f8:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80119fc:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011a00:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dd5c      	ble.n	8011ac2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011a08:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	dd58      	ble.n	8011ac2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011a10:	462a      	mov	r2, r5
 8011a12:	ab0a      	add	r3, sp, #40	; 0x28
 8011a14:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011a18:	6851      	ldr	r1, [r2, #4]
 8011a1a:	c303      	stmia	r3!, {r0, r1}
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	a80a      	add	r0, sp, #40	; 0x28
 8011a20:	f7ff fc00 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8011a24:	4b38      	ldr	r3, [pc, #224]	; (8011b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011a26:	2100      	movs	r1, #0
 8011a28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a2c:	4b37      	ldr	r3, [pc, #220]	; (8011b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011a2e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011a32:	aa0a      	add	r2, sp, #40	; 0x28
 8011a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a38:	910c      	str	r1, [sp, #48]	; 0x30
 8011a3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011a3e:	ab08      	add	r3, sp, #32
 8011a40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a44:	e883 0003 	stmia.w	r3, {r0, r1}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	a90c      	add	r1, sp, #48	; 0x30
 8011a4c:	f7ff fbea 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8011a50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d13c      	bne.n	8011ad0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011a56:	2000      	movs	r0, #0
 8011a58:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011a5c:	2600      	movs	r6, #0
 8011a5e:	696b      	ldr	r3, [r5, #20]
 8011a60:	a908      	add	r1, sp, #32
 8011a62:	682a      	ldr	r2, [r5, #0]
 8011a64:	4628      	mov	r0, r5
 8011a66:	9305      	str	r3, [sp, #20]
 8011a68:	616e      	str	r6, [r5, #20]
 8011a6a:	6892      	ldr	r2, [r2, #8]
 8011a6c:	4790      	blx	r2
 8011a6e:	9b05      	ldr	r3, [sp, #20]
 8011a70:	4652      	mov	r2, sl
 8011a72:	4649      	mov	r1, r9
 8011a74:	616b      	str	r3, [r5, #20]
 8011a76:	4628      	mov	r0, r5
 8011a78:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011a7c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011a80:	f7f1 fc93 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
 8011a84:	9a01      	ldr	r2, [sp, #4]
 8011a86:	4b23      	ldr	r3, [pc, #140]	; (8011b14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011a88:	4620      	mov	r0, r4
 8011a8a:	801a      	strh	r2, [r3, #0]
 8011a8c:	9a02      	ldr	r2, [sp, #8]
 8011a8e:	4b22      	ldr	r3, [pc, #136]	; (8011b18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011a90:	801a      	strh	r2, [r3, #0]
 8011a92:	9a03      	ldr	r2, [sp, #12]
 8011a94:	4b1c      	ldr	r3, [pc, #112]	; (8011b08 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011a96:	801a      	strh	r2, [r3, #0]
 8011a98:	4b1c      	ldr	r3, [pc, #112]	; (8011b0c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011a9a:	9a04      	ldr	r2, [sp, #16]
 8011a9c:	801a      	strh	r2, [r3, #0]
 8011a9e:	6823      	ldr	r3, [r4, #0]
 8011aa0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aa6:	4798      	blx	r3
 8011aa8:	6823      	ldr	r3, [r4, #0]
 8011aaa:	4620      	mov	r0, r4
 8011aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aae:	4798      	blx	r3
 8011ab0:	b00f      	add	sp, #60	; 0x3c
 8011ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ab6:	883b      	ldrh	r3, [r7, #0]
 8011ab8:	f8ab 0000 	strh.w	r0, [fp]
 8011abc:	f8aa 3000 	strh.w	r3, [sl]
 8011ac0:	e789      	b.n	80119d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011ac2:	462a      	mov	r2, r5
 8011ac4:	ab0a      	add	r3, sp, #40	; 0x28
 8011ac6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011aca:	6851      	ldr	r1, [r2, #4]
 8011acc:	c303      	stmia	r3!, {r0, r1}
 8011ace:	e7a9      	b.n	8011a24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011ad0:	a807      	add	r0, sp, #28
 8011ad2:	f007 fd5f 	bl	8019594 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011ada:	6803      	ldr	r3, [r0, #0]
 8011adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ade:	4798      	blx	r3
 8011ae0:	4286      	cmp	r6, r0
 8011ae2:	d1b8      	bne.n	8011a56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011ae4:	f7ff fe6e 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011ae8:	6803      	ldr	r3, [r0, #0]
 8011aea:	4606      	mov	r6, r0
 8011aec:	a807      	add	r0, sp, #28
 8011aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011af0:	9305      	str	r3, [sp, #20]
 8011af2:	f007 fd4f 	bl	8019594 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011af6:	9b05      	ldr	r3, [sp, #20]
 8011af8:	4601      	mov	r1, r0
 8011afa:	4630      	mov	r0, r6
 8011afc:	4798      	blx	r3
 8011afe:	f080 0001 	eor.w	r0, r0, #1
 8011b02:	b2c0      	uxtb	r0, r0
 8011b04:	e7a8      	b.n	8011a58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8011b06:	bf00      	nop
 8011b08:	2400ea28 	.word	0x2400ea28
 8011b0c:	2400ea2a 	.word	0x2400ea2a
 8011b10:	2400ea2c 	.word	0x2400ea2c
 8011b14:	2400ea2e 	.word	0x2400ea2e
 8011b18:	2400ea30 	.word	0x2400ea30

08011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011b1c:	4b07      	ldr	r3, [pc, #28]	; (8011b3c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011b1e:	b510      	push	{r4, lr}
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	4604      	mov	r4, r0
 8011b24:	b13b      	cbz	r3, 8011b36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011b26:	6803      	ldr	r3, [r0, #0]
 8011b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2a:	4798      	blx	r3
 8011b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011b2e:	4283      	cmp	r3, r0
 8011b30:	d101      	bne.n	8011b36 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011b32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011b34:	bd10      	pop	{r4, pc}
 8011b36:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011b38:	e7fc      	b.n	8011b34 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011b3a:	bf00      	nop
 8011b3c:	2400ea32 	.word	0x2400ea32

08011b40 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b44:	461d      	mov	r5, r3
 8011b46:	b08a      	sub	sp, #40	; 0x28
 8011b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b4c:	4690      	mov	r8, r2
 8011b4e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011b52:	2400      	movs	r4, #0
 8011b54:	4607      	mov	r7, r0
 8011b56:	fb06 8505 	mla	r5, r6, r5, r8
 8011b5a:	9404      	str	r4, [sp, #16]
 8011b5c:	f88d 4020 	strb.w	r4, [sp, #32]
 8011b60:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011b64:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011b68:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011b6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011b70:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011b74:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011b78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011b7c:	f7ff ffce 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011b80:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011b8a:	a901      	add	r1, sp, #4
 8011b8c:	9505      	str	r5, [sp, #20]
 8011b8e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011b92:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8011b96:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011b9a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011b9e:	6803      	ldr	r3, [r0, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	4798      	blx	r3
 8011ba4:	b00a      	add	sp, #40	; 0x28
 8011ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011baa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8011baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bae:	b08b      	sub	sp, #44	; 0x2c
 8011bb0:	2400      	movs	r4, #0
 8011bb2:	4691      	mov	r9, r2
 8011bb4:	461d      	mov	r5, r3
 8011bb6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011bba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011bbe:	4688      	mov	r8, r1
 8011bc0:	4607      	mov	r7, r0
 8011bc2:	9404      	str	r4, [sp, #16]
 8011bc4:	fb06 9505 	mla	r5, r6, r5, r9
 8011bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011bcc:	f7ff ffa6 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011bd0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011bd4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011bde:	a901      	add	r1, sp, #4
 8011be0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011be4:	9505      	str	r5, [sp, #20]
 8011be6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011bea:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011bee:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011bf2:	f8cd 8010 	str.w	r8, [sp, #16]
 8011bf6:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011bfa:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011bfe:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011c02:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011c06:	6803      	ldr	r3, [r0, #0]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	4798      	blx	r3
 8011c0c:	b00b      	add	sp, #44	; 0x2c
 8011c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011c14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c18:	b08a      	sub	sp, #40	; 0x28
 8011c1a:	4698      	mov	r8, r3
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4606      	mov	r6, r0
 8011c20:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011c24:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8011c28:	2d0b      	cmp	r5, #11
 8011c2a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011c2e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011c32:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8011c36:	9304      	str	r3, [sp, #16]
 8011c38:	d137      	bne.n	8011caa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8011c3a:	2380      	movs	r3, #128	; 0x80
 8011c3c:	f88d 0020 	strb.w	r0, [sp, #32]
 8011c40:	4630      	mov	r0, r6
 8011c42:	9203      	str	r2, [sp, #12]
 8011c44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011c48:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011c4c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011c50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011c54:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011c58:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011c5c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011c60:	f7ff ff5c 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011c64:	2c0b      	cmp	r4, #11
 8011c66:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011c6a:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011c6e:	bf94      	ite	ls
 8011c70:	4b19      	ldrls	r3, [pc, #100]	; (8011cd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011c72:	2100      	movhi	r1, #0
 8011c74:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011c78:	bf98      	it	ls
 8011c7a:	5d19      	ldrbls	r1, [r3, r4]
 8011c7c:	fb02 8307 	mla	r3, r2, r7, r8
 8011c80:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011c84:	10c9      	asrs	r1, r1, #3
 8011c86:	fb01 0003 	mla	r0, r1, r3, r0
 8011c8a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011c8e:	a901      	add	r1, sp, #4
 8011c90:	9005      	str	r0, [sp, #20]
 8011c92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011c96:	2300      	movs	r3, #0
 8011c98:	6870      	ldr	r0, [r6, #4]
 8011c9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011c9e:	6803      	ldr	r3, [r0, #0]
 8011ca0:	685b      	ldr	r3, [r3, #4]
 8011ca2:	4798      	blx	r3
 8011ca4:	b00a      	add	sp, #40	; 0x28
 8011ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011caa:	2d02      	cmp	r5, #2
 8011cac:	d109      	bne.n	8011cc2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011cae:	28ff      	cmp	r0, #255	; 0xff
 8011cb0:	d105      	bne.n	8011cbe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011cb2:	f1bc 0f00 	cmp.w	ip, #0
 8011cb6:	bf14      	ite	ne
 8011cb8:	2340      	movne	r3, #64	; 0x40
 8011cba:	2320      	moveq	r3, #32
 8011cbc:	e7be      	b.n	8011c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011cbe:	2340      	movs	r3, #64	; 0x40
 8011cc0:	e7bc      	b.n	8011c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011cc2:	28ff      	cmp	r0, #255	; 0xff
 8011cc4:	d105      	bne.n	8011cd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8011cc6:	f1bc 0f00 	cmp.w	ip, #0
 8011cca:	bf14      	ite	ne
 8011ccc:	2304      	movne	r3, #4
 8011cce:	2301      	moveq	r3, #1
 8011cd0:	e7b4      	b.n	8011c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011cd2:	2304      	movs	r3, #4
 8011cd4:	e7b2      	b.n	8011c3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011cd6:	bf00      	nop
 8011cd8:	08024800 	.word	0x08024800

08011cdc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce0:	b08b      	sub	sp, #44	; 0x2c
 8011ce2:	461d      	mov	r5, r3
 8011ce4:	2400      	movs	r4, #0
 8011ce6:	4688      	mov	r8, r1
 8011ce8:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8011cec:	4693      	mov	fp, r2
 8011cee:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8011cf2:	4607      	mov	r7, r0
 8011cf4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011cf8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011cfc:	9404      	str	r4, [sp, #16]
 8011cfe:	bf14      	ite	ne
 8011d00:	2308      	movne	r3, #8
 8011d02:	2302      	moveq	r3, #2
 8011d04:	fb05 b50a 	mla	r5, r5, sl, fp
 8011d08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d0c:	f7ff ff06 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d10:	2e0b      	cmp	r6, #11
 8011d12:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011d16:	a901      	add	r1, sp, #4
 8011d18:	bf98      	it	ls
 8011d1a:	4b13      	ldrls	r3, [pc, #76]	; (8011d68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011d1c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011d20:	bf98      	it	ls
 8011d22:	5d9c      	ldrbls	r4, [r3, r6]
 8011d24:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011d28:	10e4      	asrs	r4, r4, #3
 8011d2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d32:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011d36:	fb04 0405 	mla	r4, r4, r5, r0
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d40:	2300      	movs	r3, #0
 8011d42:	9405      	str	r4, [sp, #20]
 8011d44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011d48:	f88d 9020 	strb.w	r9, [sp, #32]
 8011d4c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8011d50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011d54:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8011d58:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8011d5c:	6803      	ldr	r3, [r0, #0]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	4798      	blx	r3
 8011d62:	b00b      	add	sp, #44	; 0x2c
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	08024800 	.word	0x08024800

08011d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d70:	461e      	mov	r6, r3
 8011d72:	4b0a      	ldr	r3, [pc, #40]	; (8011d9c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011d74:	460f      	mov	r7, r1
 8011d76:	4690      	mov	r8, r2
 8011d78:	881d      	ldrh	r5, [r3, #0]
 8011d7a:	f7ff fd23 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011d7e:	6803      	ldr	r3, [r0, #0]
 8011d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d82:	4798      	blx	r3
 8011d84:	280b      	cmp	r0, #11
 8011d86:	bf96      	itet	ls
 8011d88:	4b05      	ldrls	r3, [pc, #20]	; (8011da0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011d8a:	2400      	movhi	r4, #0
 8011d8c:	5c1c      	ldrbls	r4, [r3, r0]
 8011d8e:	fb08 7005 	mla	r0, r8, r5, r7
 8011d92:	10e4      	asrs	r4, r4, #3
 8011d94:	fb04 6000 	mla	r0, r4, r0, r6
 8011d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9c:	2400ea2e 	.word	0x2400ea2e
 8011da0:	08024800 	.word	0x08024800

08011da4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011da6:	b08b      	sub	sp, #44	; 0x2c
 8011da8:	461f      	mov	r7, r3
 8011daa:	4604      	mov	r4, r0
 8011dac:	4616      	mov	r6, r2
 8011dae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011db2:	2500      	movs	r5, #0
 8011db4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011db8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011dbc:	9504      	str	r5, [sp, #16]
 8011dbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011dc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011dc6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011dca:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011dce:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011dd2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011dd6:	f88d 3020 	strb.w	r3, [sp, #32]
 8011dda:	f7ff fe9f 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011dde:	463a      	mov	r2, r7
 8011de0:	4631      	mov	r1, r6
 8011de2:	4603      	mov	r3, r0
 8011de4:	4620      	mov	r0, r4
 8011de6:	f7ff ffc1 	bl	8011d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011dea:	4b0e      	ldr	r3, [pc, #56]	; (8011e24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011dec:	9005      	str	r0, [sp, #20]
 8011dee:	881b      	ldrh	r3, [r3, #0]
 8011df0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011df4:	f7ff fce6 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011df8:	6803      	ldr	r3, [r0, #0]
 8011dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dfc:	4798      	blx	r3
 8011dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011e00:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011e04:	a901      	add	r1, sp, #4
 8011e06:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011e0a:	9304      	str	r3, [sp, #16]
 8011e0c:	6860      	ldr	r0, [r4, #4]
 8011e0e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011e12:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011e16:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011e1a:	6803      	ldr	r3, [r0, #0]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	4798      	blx	r3
 8011e20:	b00b      	add	sp, #44	; 0x2c
 8011e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e24:	2400ea2e 	.word	0x2400ea2e

08011e28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e2a:	b08d      	sub	sp, #52	; 0x34
 8011e2c:	2501      	movs	r5, #1
 8011e2e:	4604      	mov	r4, r0
 8011e30:	466b      	mov	r3, sp
 8011e32:	9503      	str	r5, [sp, #12]
 8011e34:	e883 0006 	stmia.w	r3, {r1, r2}
 8011e38:	2300      	movs	r3, #0
 8011e3a:	f8bd 6000 	ldrh.w	r6, [sp]
 8011e3e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011e42:	9306      	str	r3, [sp, #24]
 8011e44:	6803      	ldr	r3, [r0, #0]
 8011e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e48:	4798      	blx	r3
 8011e4a:	463a      	mov	r2, r7
 8011e4c:	4631      	mov	r1, r6
 8011e4e:	4603      	mov	r3, r0
 8011e50:	4620      	mov	r0, r4
 8011e52:	f7ff ff8b 	bl	8011d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011e58:	9004      	str	r0, [sp, #16]
 8011e5a:	9307      	str	r3, [sp, #28]
 8011e5c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011e60:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011e64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011e68:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011e6c:	4b0e      	ldr	r3, [pc, #56]	; (8011ea8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011e74:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011e78:	f7ff fca4 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011e7c:	6803      	ldr	r3, [r0, #0]
 8011e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e80:	4798      	blx	r3
 8011e82:	23ff      	movs	r3, #255	; 0xff
 8011e84:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011e88:	a903      	add	r1, sp, #12
 8011e8a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011e8e:	6860      	ldr	r0, [r4, #4]
 8011e90:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011e94:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011e98:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011e9c:	6803      	ldr	r3, [r0, #0]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	4798      	blx	r3
 8011ea2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011ea4:	b00d      	add	sp, #52	; 0x34
 8011ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea8:	2400ea2e 	.word	0x2400ea2e

08011eac <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8011eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eb0:	b08c      	sub	sp, #48	; 0x30
 8011eb2:	461e      	mov	r6, r3
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	466d      	mov	r5, sp
 8011eba:	9306      	str	r3, [sp, #24]
 8011ebc:	6803      	ldr	r3, [r0, #0]
 8011ebe:	e885 0006 	stmia.w	r5, {r1, r2}
 8011ec2:	2501      	movs	r5, #1
 8011ec4:	f8bd 7000 	ldrh.w	r7, [sp]
 8011ec8:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8011ecc:	9503      	str	r5, [sp, #12]
 8011ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ed0:	4798      	blx	r3
 8011ed2:	4642      	mov	r2, r8
 8011ed4:	4639      	mov	r1, r7
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	4620      	mov	r0, r4
 8011eda:	f7ff ff47 	bl	8011d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011ede:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011ee2:	9004      	str	r0, [sp, #16]
 8011ee4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011ee8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011eec:	9607      	str	r6, [sp, #28]
 8011eee:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011ef2:	4b10      	ldr	r3, [pc, #64]	; (8011f34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8011ef4:	881b      	ldrh	r3, [r3, #0]
 8011ef6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8011efa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011efc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8011f00:	f7ff fc60 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8011f04:	6803      	ldr	r3, [r0, #0]
 8011f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f08:	4798      	blx	r3
 8011f0a:	23ff      	movs	r3, #255	; 0xff
 8011f0c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8011f10:	a903      	add	r1, sp, #12
 8011f12:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8011f16:	6860      	ldr	r0, [r4, #4]
 8011f18:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8011f1c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8011f20:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8011f24:	6803      	ldr	r3, [r0, #0]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	4798      	blx	r3
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	b00c      	add	sp, #48	; 0x30
 8011f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f32:	bf00      	nop
 8011f34:	2400ea2e 	.word	0x2400ea2e

08011f38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8011f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f3a:	b085      	sub	sp, #20
 8011f3c:	4605      	mov	r5, r0
 8011f3e:	ac02      	add	r4, sp, #8
 8011f40:	e884 0006 	stmia.w	r4, {r1, r2}
 8011f44:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8011f48:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8011f4c:	f7ff fde6 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f50:	4631      	mov	r1, r6
 8011f52:	4603      	mov	r3, r0
 8011f54:	463a      	mov	r2, r7
 8011f56:	4628      	mov	r0, r5
 8011f58:	f7ff ff08 	bl	8011d6c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011f5c:	4a05      	ldr	r2, [pc, #20]	; (8011f74 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8011f5e:	682b      	ldr	r3, [r5, #0]
 8011f60:	8812      	ldrh	r2, [r2, #0]
 8011f62:	9200      	str	r2, [sp, #0]
 8011f64:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8011f66:	4603      	mov	r3, r0
 8011f68:	4628      	mov	r0, r5
 8011f6a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8011f6e:	47b0      	blx	r6
 8011f70:	b005      	add	sp, #20
 8011f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f74:	2400ea2e 	.word	0x2400ea2e

08011f78 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8011f7e:	4604      	mov	r4, r0
 8011f80:	b19b      	cbz	r3, 8011faa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8011f82:	2002      	movs	r0, #2
 8011f84:	f7ef fc42 	bl	800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011f90:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8011f94:	6823      	ldr	r3, [r4, #0]
 8011f96:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8011f9a:	f7ff fdbf 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f9e:	4601      	mov	r1, r0
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fa8:	4718      	bx	r3
 8011faa:	bd70      	pop	{r4, r5, r6, pc}

08011fac <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	4605      	mov	r5, r0
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	2003      	movs	r0, #3
 8011fb4:	b149      	cbz	r1, 8011fca <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8011fb6:	f7ef fbc9 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8011fba:	6928      	ldr	r0, [r5, #16]
 8011fbc:	b168      	cbz	r0, 8011fda <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011fbe:	6803      	ldr	r3, [r0, #0]
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	695b      	ldr	r3, [r3, #20]
 8011fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011fc8:	4718      	bx	r3
 8011fca:	f7ef fbef 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8011fce:	6928      	ldr	r0, [r5, #16]
 8011fd0:	b118      	cbz	r0, 8011fda <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8011fd2:	6803      	ldr	r3, [r0, #0]
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	695b      	ldr	r3, [r3, #20]
 8011fd8:	e7f4      	b.n	8011fc4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8011fda:	bd70      	pop	{r4, r5, r6, pc}

08011fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8011fe2:	4604      	mov	r4, r0
 8011fe4:	460d      	mov	r5, r1
 8011fe6:	428b      	cmp	r3, r1
 8011fe8:	d006      	beq.n	8011ff8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8011fea:	6803      	ldr	r3, [r0, #0]
 8011fec:	b929      	cbnz	r1, 8011ffa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8011fee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8011ff2:	4798      	blx	r3
 8011ff4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8011ff8:	bd38      	pop	{r3, r4, r5, pc}
 8011ffa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8011ffe:	e7f8      	b.n	8011ff2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08012000 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8012000:	4b0d      	ldr	r3, [pc, #52]	; (8012038 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012002:	b510      	push	{r4, lr}
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	4604      	mov	r4, r0
 8012008:	b95b      	cbnz	r3, 8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801200a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801200e:	2b02      	cmp	r3, #2
 8012010:	d007      	beq.n	8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012012:	6840      	ldr	r0, [r0, #4]
 8012014:	f000 f92a 	bl	801226c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012018:	b118      	cbz	r0, 8012022 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801201a:	6862      	ldr	r2, [r4, #4]
 801201c:	7a53      	ldrb	r3, [r2, #9]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d0fc      	beq.n	801201c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8012022:	f7ef ff41 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012026:	4620      	mov	r0, r4
 8012028:	2100      	movs	r1, #0
 801202a:	f7ff ffd7 	bl	8011fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801202e:	4620      	mov	r0, r4
 8012030:	f7ff fd74 	bl	8011b1c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012034:	bd10      	pop	{r4, pc}
 8012036:	bf00      	nop
 8012038:	2400ea32 	.word	0x2400ea32

0801203c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	4604      	mov	r4, r0
 8012040:	6803      	ldr	r3, [r0, #0]
 8012042:	b919      	cbnz	r1, 801204c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8012044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801204a:	4718      	bx	r3
 801204c:	2200      	movs	r2, #0
 801204e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8012052:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8012056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012058:	4798      	blx	r3
 801205a:	4605      	mov	r5, r0
 801205c:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 8012060:	4620      	mov	r0, r4
 8012062:	2101      	movs	r1, #1
 8012064:	f7ff ffba 	bl	8011fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8012068:	4628      	mov	r0, r5
 801206a:	bd70      	pop	{r4, r5, r6, pc}

0801206c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801206c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8012070:	1a13      	subs	r3, r2, r0
 8012072:	4258      	negs	r0, r3
 8012074:	4158      	adcs	r0, r3
 8012076:	4770      	bx	lr

08012078 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8012078:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801207c:	1a9b      	subs	r3, r3, r2
 801207e:	2b00      	cmp	r3, #0
 8012080:	bfdc      	itt	le
 8012082:	6882      	ldrle	r2, [r0, #8]
 8012084:	189b      	addle	r3, r3, r2
 8012086:	2b01      	cmp	r3, #1
 8012088:	bfcc      	ite	gt
 801208a:	2000      	movgt	r0, #0
 801208c:	2001      	movle	r0, #1
 801208e:	4770      	bx	lr

08012090 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8012090:	6902      	ldr	r2, [r0, #16]
 8012092:	6843      	ldr	r3, [r0, #4]
 8012094:	2024      	movs	r0, #36	; 0x24
 8012096:	fb00 3002 	mla	r0, r0, r2, r3
 801209a:	4770      	bx	lr

0801209c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801209c:	6803      	ldr	r3, [r0, #0]
 801209e:	691b      	ldr	r3, [r3, #16]
 80120a0:	4718      	bx	r3

080120a2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80120a2:	2301      	movs	r3, #1
 80120a4:	b570      	push	{r4, r5, r6, lr}
 80120a6:	7203      	strb	r3, [r0, #8]
 80120a8:	4604      	mov	r4, r0
 80120aa:	6840      	ldr	r0, [r0, #4]
 80120ac:	6803      	ldr	r3, [r0, #0]
 80120ae:	699b      	ldr	r3, [r3, #24]
 80120b0:	4798      	blx	r3
 80120b2:	6803      	ldr	r3, [r0, #0]
 80120b4:	4605      	mov	r5, r0
 80120b6:	2b40      	cmp	r3, #64	; 0x40
 80120b8:	d00c      	beq.n	80120d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80120ba:	d810      	bhi.n	80120de <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80120bc:	2b04      	cmp	r3, #4
 80120be:	d01d      	beq.n	80120fc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80120c0:	d804      	bhi.n	80120cc <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d006      	beq.n	80120d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d02c      	beq.n	8012124 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80120ca:	bd70      	pop	{r4, r5, r6, pc}
 80120cc:	2b08      	cmp	r3, #8
 80120ce:	d01d      	beq.n	801210c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 80120d0:	2b20      	cmp	r3, #32
 80120d2:	d1fa      	bne.n	80120ca <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 80120d4:	6823      	ldr	r3, [r4, #0]
 80120d6:	4620      	mov	r0, r4
 80120d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120da:	4798      	blx	r3
 80120dc:	e013      	b.n	8012106 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80120de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120e2:	d0f7      	beq.n	80120d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80120e4:	d804      	bhi.n	80120f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 80120e6:	2b80      	cmp	r3, #128	; 0x80
 80120e8:	d0f4      	beq.n	80120d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80120ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ee:	e7f0      	b.n	80120d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80120f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80120f4:	d0ee      	beq.n	80120d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80120f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80120fa:	e7e5      	b.n	80120c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80120fc:	6823      	ldr	r3, [r4, #0]
 80120fe:	7f01      	ldrb	r1, [r0, #28]
 8012100:	4620      	mov	r0, r4
 8012102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012104:	4798      	blx	r3
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801210a:	e006      	b.n	801211a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	7f01      	ldrb	r1, [r0, #28]
 8012110:	4620      	mov	r0, r4
 8012112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012114:	4798      	blx	r3
 8012116:	6823      	ldr	r3, [r4, #0]
 8012118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801211a:	4629      	mov	r1, r5
 801211c:	4620      	mov	r0, r4
 801211e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012122:	4718      	bx	r3
 8012124:	6823      	ldr	r3, [r4, #0]
 8012126:	4620      	mov	r0, r4
 8012128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801212a:	4798      	blx	r3
 801212c:	e7f3      	b.n	8012116 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801212e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801212e:	4770      	bx	lr

08012130 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012130:	4770      	bx	lr

08012132 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8012132:	4770      	bx	lr

08012134 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012134:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012138:	b510      	push	{r4, lr}
 801213a:	1ad2      	subs	r2, r2, r3
 801213c:	2a00      	cmp	r2, #0
 801213e:	bfdc      	itt	le
 8012140:	6884      	ldrle	r4, [r0, #8]
 8012142:	1912      	addle	r2, r2, r4
 8012144:	2a01      	cmp	r2, #1
 8012146:	dd16      	ble.n	8012176 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012148:	6842      	ldr	r2, [r0, #4]
 801214a:	2424      	movs	r4, #36	; 0x24
 801214c:	fb04 2303 	mla	r3, r4, r3, r2
 8012150:	f101 0220 	add.w	r2, r1, #32
 8012154:	f851 4b04 	ldr.w	r4, [r1], #4
 8012158:	4291      	cmp	r1, r2
 801215a:	f843 4b04 	str.w	r4, [r3], #4
 801215e:	d1f9      	bne.n	8012154 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012160:	780a      	ldrb	r2, [r1, #0]
 8012162:	701a      	strb	r2, [r3, #0]
 8012164:	68c3      	ldr	r3, [r0, #12]
 8012166:	6882      	ldr	r2, [r0, #8]
 8012168:	f3bf 8f5b 	dmb	ish
 801216c:	3301      	adds	r3, #1
 801216e:	429a      	cmp	r2, r3
 8012170:	bfd8      	it	le
 8012172:	1a9b      	suble	r3, r3, r2
 8012174:	60c3      	str	r3, [r0, #12]
 8012176:	bd10      	pop	{r4, pc}

08012178 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8012178:	6903      	ldr	r3, [r0, #16]
 801217a:	6882      	ldr	r2, [r0, #8]
 801217c:	f3bf 8f5b 	dmb	ish
 8012180:	3301      	adds	r3, #1
 8012182:	429a      	cmp	r2, r3
 8012184:	bfd8      	it	le
 8012186:	1a9b      	suble	r3, r3, r2
 8012188:	6103      	str	r3, [r0, #16]
 801218a:	4770      	bx	lr

0801218c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801218c:	b570      	push	{r4, r5, r6, lr}
 801218e:	4604      	mov	r4, r0
 8012190:	460e      	mov	r6, r1
 8012192:	6860      	ldr	r0, [r4, #4]
 8012194:	6803      	ldr	r3, [r0, #0]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	4798      	blx	r3
 801219a:	2800      	cmp	r0, #0
 801219c:	d1f9      	bne.n	8012192 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801219e:	4d0d      	ldr	r5, [pc, #52]	; (80121d4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80121a0:	6828      	ldr	r0, [r5, #0]
 80121a2:	6803      	ldr	r3, [r0, #0]
 80121a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121a6:	4798      	blx	r3
 80121a8:	f7ef fe8c 	bl	8001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80121ac:	6828      	ldr	r0, [r5, #0]
 80121ae:	2101      	movs	r1, #1
 80121b0:	f7ff ff14 	bl	8011fdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80121b4:	6860      	ldr	r0, [r4, #4]
 80121b6:	4631      	mov	r1, r6
 80121b8:	6803      	ldr	r3, [r0, #0]
 80121ba:	689b      	ldr	r3, [r3, #8]
 80121bc:	4798      	blx	r3
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	4620      	mov	r0, r4
 80121c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121c4:	4798      	blx	r3
 80121c6:	6828      	ldr	r0, [r5, #0]
 80121c8:	6803      	ldr	r3, [r0, #0]
 80121ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121d0:	4718      	bx	r3
 80121d2:	bf00      	nop
 80121d4:	2400ea34 	.word	0x2400ea34

080121d8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80121d8:	b508      	push	{r3, lr}
 80121da:	f7ef fe65 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80121de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80121e2:	f7ef be69 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080121e6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80121e6:	b510      	push	{r4, lr}
 80121e8:	4604      	mov	r4, r0
 80121ea:	2114      	movs	r1, #20
 80121ec:	f00f fc97 	bl	8021b1e <_ZdlPvj>
 80121f0:	4620      	mov	r0, r4
 80121f2:	bd10      	pop	{r4, pc}

080121f4 <_ZN8touchgfx13DMA_Interface5startEv>:
 80121f4:	b510      	push	{r4, lr}
 80121f6:	4604      	mov	r4, r0
 80121f8:	6840      	ldr	r0, [r0, #4]
 80121fa:	6803      	ldr	r3, [r0, #0]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4798      	blx	r3
 8012200:	b948      	cbnz	r0, 8012216 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012202:	7a63      	ldrb	r3, [r4, #9]
 8012204:	b13b      	cbz	r3, 8012216 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012206:	7a23      	ldrb	r3, [r4, #8]
 8012208:	b92b      	cbnz	r3, 8012216 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	4620      	mov	r0, r4
 801220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012214:	4718      	bx	r3
 8012216:	bd10      	pop	{r4, pc}

08012218 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8012218:	b570      	push	{r4, r5, r6, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	6840      	ldr	r0, [r0, #4]
 801221e:	6803      	ldr	r3, [r0, #0]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4798      	blx	r3
 8012224:	4605      	mov	r5, r0
 8012226:	b930      	cbnz	r0, 8012236 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8012228:	7a23      	ldrb	r3, [r4, #8]
 801222a:	b123      	cbz	r3, 8012236 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801222c:	6860      	ldr	r0, [r4, #4]
 801222e:	6803      	ldr	r3, [r0, #0]
 8012230:	695b      	ldr	r3, [r3, #20]
 8012232:	4798      	blx	r3
 8012234:	7225      	strb	r5, [r4, #8]
 8012236:	6860      	ldr	r0, [r4, #4]
 8012238:	6803      	ldr	r3, [r0, #0]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	4798      	blx	r3
 801223e:	b928      	cbnz	r0, 801224c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012240:	6823      	ldr	r3, [r4, #0]
 8012242:	4620      	mov	r0, r4
 8012244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801224a:	4718      	bx	r3
 801224c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012250:	f7ef be40 	b.w	8001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08012254 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012254:	b510      	push	{r4, lr}
 8012256:	6082      	str	r2, [r0, #8]
 8012258:	2200      	movs	r2, #0
 801225a:	4c03      	ldr	r4, [pc, #12]	; (8012268 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801225c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012260:	e9c0 4100 	strd	r4, r1, [r0]
 8012264:	bd10      	pop	{r4, pc}
 8012266:	bf00      	nop
 8012268:	08024814 	.word	0x08024814

0801226c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801226c:	6840      	ldr	r0, [r0, #4]
 801226e:	6803      	ldr	r3, [r0, #0]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	4718      	bx	r3

08012274 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012274:	0c0b      	lsrs	r3, r1, #16
 8012276:	60c1      	str	r1, [r0, #12]
 8012278:	7481      	strb	r1, [r0, #18]
 801227a:	7403      	strb	r3, [r0, #16]
 801227c:	0a0b      	lsrs	r3, r1, #8
 801227e:	7443      	strb	r3, [r0, #17]
 8012280:	4770      	bx	lr

08012282 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012282:	f1a0 0008 	sub.w	r0, r0, #8
 8012286:	e7f5      	b.n	8012274 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

08012288 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8012288:	b508      	push	{r3, lr}
 801228a:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	6803      	ldr	r3, [r0, #0]
 8012290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012294:	4798      	blx	r3
 8012296:	1e43      	subs	r3, r0, #1
 8012298:	4258      	negs	r0, r3
 801229a:	4158      	adcs	r0, r3
 801229c:	bd08      	pop	{r3, pc}
 801229e:	bf00      	nop
 80122a0:	2400ea34 	.word	0x2400ea34

080122a4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 80122a4:	4770      	bx	lr

080122a6 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80122a6:	3808      	subs	r0, #8
 80122a8:	4770      	bx	lr

080122aa <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80122aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80122ae:	b410      	push	{r4}
 80122b0:	188c      	adds	r4, r1, r2
 80122b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80122b6:	68c2      	ldr	r2, [r0, #12]
 80122b8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80122bc:	4620      	mov	r0, r4
 80122be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122c2:	f7ef bfbd 	b.w	8002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

080122c6 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 80122c6:	f7ef bfb1 	b.w	800222c <_ZN8touchgfx5paint8tearDownEv>

080122ca <_ZN8touchgfx13PainterRGB888D0Ev>:
 80122ca:	b510      	push	{r4, lr}
 80122cc:	4604      	mov	r4, r0
 80122ce:	2114      	movs	r1, #20
 80122d0:	f00f fc25 	bl	8021b1e <_ZdlPvj>
 80122d4:	4620      	mov	r0, r4
 80122d6:	bd10      	pop	{r4, pc}

080122d8 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 80122d8:	f1a0 0008 	sub.w	r0, r0, #8
 80122dc:	e7f5      	b.n	80122ca <_ZN8touchgfx13PainterRGB888D0Ev>
	...

080122e0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80122e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80122e2:	6803      	ldr	r3, [r0, #0]
 80122e4:	460d      	mov	r5, r1
 80122e6:	4604      	mov	r4, r0
 80122e8:	4601      	mov	r1, r0
 80122ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122ec:	a802      	add	r0, sp, #8
 80122ee:	4798      	blx	r3
 80122f0:	6828      	ldr	r0, [r5, #0]
 80122f2:	6869      	ldr	r1, [r5, #4]
 80122f4:	466b      	mov	r3, sp
 80122f6:	c303      	stmia	r3!, {r0, r1}
 80122f8:	4668      	mov	r0, sp
 80122fa:	4619      	mov	r1, r3
 80122fc:	f7fe ff92 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8012300:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012302:	b1a8      	cbz	r0, 8012330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012304:	6803      	ldr	r3, [r0, #0]
 8012306:	1d21      	adds	r1, r4, #4
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	4798      	blx	r3
 801230c:	b180      	cbz	r0, 8012330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801230e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	dd0c      	ble.n	8012330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8012316:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801231a:	2d00      	cmp	r5, #0
 801231c:	dd08      	ble.n	8012330 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801231e:	4a2d      	ldr	r2, [pc, #180]	; (80123d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8012320:	7812      	ldrb	r2, [r2, #0]
 8012322:	b13a      	cbz	r2, 8012334 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8012324:	2a01      	cmp	r2, #1
 8012326:	d02d      	beq.n	8012384 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8012328:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801232a:	6803      	ldr	r3, [r0, #0]
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	4798      	blx	r3
 8012330:	b004      	add	sp, #16
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012338:	441d      	add	r5, r3
 801233a:	b2ad      	uxth	r5, r5
 801233c:	b22e      	sxth	r6, r5
 801233e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012342:	42b3      	cmp	r3, r6
 8012344:	daf0      	bge.n	8012328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012346:	6823      	ldr	r3, [r4, #0]
 8012348:	4669      	mov	r1, sp
 801234a:	4620      	mov	r0, r4
 801234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801234e:	4798      	blx	r3
 8012350:	b940      	cbnz	r0, 8012364 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8012352:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012356:	2b01      	cmp	r3, #1
 8012358:	d004      	beq.n	8012364 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801235a:	3301      	adds	r3, #1
 801235c:	105b      	asrs	r3, r3, #1
 801235e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012362:	e7f0      	b.n	8012346 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8012364:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012368:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801236c:	4413      	add	r3, r2
 801236e:	b29b      	uxth	r3, r3
 8012370:	441a      	add	r2, r3
 8012372:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012376:	b212      	sxth	r2, r2
 8012378:	4296      	cmp	r6, r2
 801237a:	dae0      	bge.n	801233e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801237c:	1aeb      	subs	r3, r5, r3
 801237e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012382:	e7dc      	b.n	801233e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8012384:	f8bd 5000 	ldrh.w	r5, [sp]
 8012388:	441d      	add	r5, r3
 801238a:	b2ad      	uxth	r5, r5
 801238c:	b22e      	sxth	r6, r5
 801238e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8012392:	42b3      	cmp	r3, r6
 8012394:	dac8      	bge.n	8012328 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012396:	6823      	ldr	r3, [r4, #0]
 8012398:	4669      	mov	r1, sp
 801239a:	4620      	mov	r0, r4
 801239c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801239e:	4798      	blx	r3
 80123a0:	b940      	cbnz	r0, 80123b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80123a2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d004      	beq.n	80123b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80123aa:	3301      	adds	r3, #1
 80123ac:	105b      	asrs	r3, r3, #1
 80123ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80123b2:	e7f0      	b.n	8012396 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80123b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80123b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80123bc:	4413      	add	r3, r2
 80123be:	b29b      	uxth	r3, r3
 80123c0:	441a      	add	r2, r3
 80123c2:	f8ad 3000 	strh.w	r3, [sp]
 80123c6:	b212      	sxth	r2, r2
 80123c8:	4296      	cmp	r6, r2
 80123ca:	dae0      	bge.n	801238e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80123cc:	1aeb      	subs	r3, r5, r3
 80123ce:	f8ad 3004 	strh.w	r3, [sp, #4]
 80123d2:	e7dc      	b.n	801238e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80123d4:	2400ea2c 	.word	0x2400ea2c

080123d8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80123d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123da:	6803      	ldr	r3, [r0, #0]
 80123dc:	4604      	mov	r4, r0
 80123de:	4601      	mov	r1, r0
 80123e0:	4668      	mov	r0, sp
 80123e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123e4:	4798      	blx	r3
 80123e6:	2100      	movs	r1, #0
 80123e8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80123ec:	4668      	mov	r0, sp
 80123ee:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80123f2:	9102      	str	r1, [sp, #8]
 80123f4:	a902      	add	r1, sp, #8
 80123f6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80123fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80123fe:	f7fe ff11 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8012402:	6823      	ldr	r3, [r4, #0]
 8012404:	4669      	mov	r1, sp
 8012406:	4620      	mov	r0, r4
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	4798      	blx	r3
 801240c:	b004      	add	sp, #16
 801240e:	bd10      	pop	{r4, pc}

08012410 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012410:	2101      	movs	r1, #1
 8012412:	2200      	movs	r2, #0
 8012414:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8012418:	490a      	ldr	r1, [pc, #40]	; (8012444 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801241a:	8082      	strh	r2, [r0, #4]
 801241c:	6001      	str	r1, [r0, #0]
 801241e:	21ff      	movs	r1, #255	; 0xff
 8012420:	80c2      	strh	r2, [r0, #6]
 8012422:	8102      	strh	r2, [r0, #8]
 8012424:	8142      	strh	r2, [r0, #10]
 8012426:	8182      	strh	r2, [r0, #12]
 8012428:	81c2      	strh	r2, [r0, #14]
 801242a:	8202      	strh	r2, [r0, #16]
 801242c:	8242      	strh	r2, [r0, #18]
 801242e:	61c2      	str	r2, [r0, #28]
 8012430:	8402      	strh	r2, [r0, #32]
 8012432:	8442      	strh	r2, [r0, #34]	; 0x22
 8012434:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8012438:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801243c:	6282      	str	r2, [r0, #40]	; 0x28
 801243e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012442:	4770      	bx	lr
 8012444:	08024870 	.word	0x08024870

08012448 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8012448:	6301      	str	r1, [r0, #48]	; 0x30
 801244a:	4770      	bx	lr

0801244c <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
 801244c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801244e:	4770      	bx	lr

08012450 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8012450:	6341      	str	r1, [r0, #52]	; 0x34
 8012452:	4770      	bx	lr

08012454 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
 8012454:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012456:	4770      	bx	lr

08012458 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8012458:	4770      	bx	lr

0801245a <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 801245a:	4608      	mov	r0, r1
 801245c:	4770      	bx	lr

0801245e <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801245e:	b530      	push	{r4, r5, lr}
 8012460:	460d      	mov	r5, r1
 8012462:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8012464:	8949      	ldrh	r1, [r1, #10]
 8012466:	b085      	sub	sp, #20
 8012468:	4604      	mov	r4, r0
 801246a:	1ac9      	subs	r1, r1, r3
 801246c:	6803      	ldr	r3, [r0, #0]
 801246e:	f10d 0206 	add.w	r2, sp, #6
 8012472:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8012476:	b209      	sxth	r1, r1
 8012478:	4798      	blx	r3
 801247a:	b1a0      	cbz	r0, 80124a6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801247c:	792b      	ldrb	r3, [r5, #4]
 801247e:	b993      	cbnz	r3, 80124a6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8012480:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8012484:	b178      	cbz	r0, 80124a6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8012486:	6803      	ldr	r3, [r0, #0]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	4798      	blx	r3
 801248c:	b158      	cbz	r0, 80124a6 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 801248e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012492:	aa02      	add	r2, sp, #8
 8012494:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8012498:	4621      	mov	r1, r4
 801249a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801249e:	9503      	str	r5, [sp, #12]
 80124a0:	6803      	ldr	r3, [r0, #0]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	4798      	blx	r3
 80124a6:	b005      	add	sp, #20
 80124a8:	bd30      	pop	{r4, r5, pc}

080124aa <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80124aa:	428a      	cmp	r2, r1
 80124ac:	bfbc      	itt	lt
 80124ae:	460b      	movlt	r3, r1
 80124b0:	4611      	movlt	r1, r2
 80124b2:	b510      	push	{r4, lr}
 80124b4:	bfb8      	it	lt
 80124b6:	461a      	movlt	r2, r3
 80124b8:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 80124bc:	4604      	mov	r4, r0
 80124be:	428b      	cmp	r3, r1
 80124c0:	d103      	bne.n	80124ca <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80124c2:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d011      	beq.n	80124ee <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80124ca:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 80124ce:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80124d2:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 80124d6:	f005 f940 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 80124da:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80124de:	f005 f93c 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 80124e2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80124e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124ea:	f005 b936 	b.w	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 80124ee:	bd10      	pop	{r4, pc}

080124f0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 80124f0:	428a      	cmp	r2, r1
 80124f2:	bfbc      	itt	lt
 80124f4:	460b      	movlt	r3, r1
 80124f6:	4611      	movlt	r1, r2
 80124f8:	b510      	push	{r4, lr}
 80124fa:	bfb8      	it	lt
 80124fc:	461a      	movlt	r2, r3
 80124fe:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8012502:	4604      	mov	r4, r0
 8012504:	428b      	cmp	r3, r1
 8012506:	d103      	bne.n	8012510 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8012508:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 801250c:	4293      	cmp	r3, r2
 801250e:	d011      	beq.n	8012534 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8012510:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8012514:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012518:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 801251c:	f005 f91d 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012520:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012524:	f005 f919 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012528:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801252c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012530:	f005 b913 	b.w	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012534:	bd10      	pop	{r4, pc}

08012536 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8012536:	2300      	movs	r3, #0
 8012538:	3038      	adds	r0, #56	; 0x38
 801253a:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 801253e:	f005 b90c 	b.w	801775a <_ZNK8touchgfx8Drawable10invalidateEv>

08012542 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8012542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012546:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801254a:	4605      	mov	r5, r0
 801254c:	4688      	mov	r8, r1
 801254e:	4617      	mov	r7, r2
 8012550:	2b00      	cmp	r3, #0
 8012552:	d03e      	beq.n	80125d2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8012554:	6803      	ldr	r3, [r0, #0]
 8012556:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801255a:	4798      	blx	r3
 801255c:	682b      	ldr	r3, [r5, #0]
 801255e:	4604      	mov	r4, r0
 8012560:	4628      	mov	r0, r5
 8012562:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012566:	4798      	blx	r3
 8012568:	4284      	cmp	r4, r0
 801256a:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 801256e:	bfc2      	ittt	gt
 8012570:	4623      	movgt	r3, r4
 8012572:	4604      	movgt	r4, r0
 8012574:	4618      	movgt	r0, r3
 8012576:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 801257a:	42b3      	cmp	r3, r6
 801257c:	da29      	bge.n	80125d2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 801257e:	42b0      	cmp	r0, r6
 8012580:	bfa8      	it	ge
 8012582:	4630      	movge	r0, r6
 8012584:	2800      	cmp	r0, #0
 8012586:	db24      	blt.n	80125d2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8012588:	f1b8 0f00 	cmp.w	r8, #0
 801258c:	d11e      	bne.n	80125cc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 801258e:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8012592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8012596:	460c      	mov	r4, r1
 8012598:	009a      	lsls	r2, r3, #2
 801259a:	4298      	cmp	r0, r3
 801259c:	dd0b      	ble.n	80125b6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 801259e:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 80125a2:	3301      	adds	r3, #1
 80125a4:	58b6      	ldr	r6, [r6, r2]
 80125a6:	3204      	adds	r2, #4
 80125a8:	42b1      	cmp	r1, r6
 80125aa:	bfa8      	it	ge
 80125ac:	4631      	movge	r1, r6
 80125ae:	42b4      	cmp	r4, r6
 80125b0:	bfb8      	it	lt
 80125b2:	4634      	movlt	r4, r6
 80125b4:	e7f1      	b.n	801259a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 80125b6:	1bc9      	subs	r1, r1, r7
 80125b8:	193a      	adds	r2, r7, r4
 80125ba:	4291      	cmp	r1, r2
 80125bc:	d009      	beq.n	80125d2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 80125be:	682b      	ldr	r3, [r5, #0]
 80125c0:	4628      	mov	r0, r5
 80125c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80125c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125ca:	4718      	bx	r3
 80125cc:	427c      	negs	r4, r7
 80125ce:	4639      	mov	r1, r7
 80125d0:	e7e2      	b.n	8012598 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80125d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080125d6 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 80125d6:	b530      	push	{r4, r5, lr}
 80125d8:	790b      	ldrb	r3, [r1, #4]
 80125da:	b085      	sub	sp, #20
 80125dc:	4604      	mov	r4, r0
 80125de:	460d      	mov	r5, r1
 80125e0:	2b02      	cmp	r3, #2
 80125e2:	d020      	beq.n	8012626 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80125e4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80125e6:	f10d 0206 	add.w	r2, sp, #6
 80125ea:	88c9      	ldrh	r1, [r1, #6]
 80125ec:	1ac9      	subs	r1, r1, r3
 80125ee:	6803      	ldr	r3, [r0, #0]
 80125f0:	b209      	sxth	r1, r1
 80125f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80125f6:	4798      	blx	r3
 80125f8:	b1a8      	cbz	r0, 8012626 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 80125fa:	792b      	ldrb	r3, [r5, #4]
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d812      	bhi.n	8012626 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012600:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8012604:	b178      	cbz	r0, 8012626 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8012606:	6803      	ldr	r3, [r0, #0]
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	4798      	blx	r3
 801260c:	b158      	cbz	r0, 8012626 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801260e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8012612:	aa02      	add	r2, sp, #8
 8012614:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8012618:	4621      	mov	r1, r4
 801261a:	f8ad 3008 	strh.w	r3, [sp, #8]
 801261e:	9503      	str	r5, [sp, #12]
 8012620:	6803      	ldr	r3, [r0, #0]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	4798      	blx	r3
 8012626:	b005      	add	sp, #20
 8012628:	bd30      	pop	{r4, r5, pc}

0801262a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 801262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262e:	4604      	mov	r4, r0
 8012630:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8012634:	4690      	mov	r8, r2
 8012636:	461f      	mov	r7, r3
 8012638:	9e06      	ldr	r6, [sp, #24]
 801263a:	b928      	cbnz	r0, 8012648 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 801263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012640:	8033      	strh	r3, [r6, #0]
 8012642:	803b      	strh	r3, [r7, #0]
 8012644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012648:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 801264c:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8012650:	1883      	adds	r3, r0, r2
 8012652:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8012656:	1ad2      	subs	r2, r2, r3
 8012658:	b212      	sxth	r2, r2
 801265a:	2a01      	cmp	r2, #1
 801265c:	dc07      	bgt.n	801266e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 801265e:	2300      	movs	r3, #0
 8012660:	803b      	strh	r3, [r7, #0]
 8012662:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8012666:	3b01      	subs	r3, #1
 8012668:	8033      	strh	r3, [r6, #0]
 801266a:	2001      	movs	r0, #1
 801266c:	e7ea      	b.n	8012644 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 801266e:	1a08      	subs	r0, r1, r0
 8012670:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8012674:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8012678:	0140      	lsls	r0, r0, #5
 801267a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801267c:	1a5b      	subs	r3, r3, r1
 801267e:	d459      	bmi.n	8012734 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8012680:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012684:	fb93 f1f5 	sdiv	r1, r3, r5
 8012688:	2302      	movs	r3, #2
 801268a:	fb91 f1f3 	sdiv	r1, r1, r3
 801268e:	3a01      	subs	r2, #1
 8012690:	f005 fa2a 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
 8012694:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8012698:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 801269c:	2900      	cmp	r1, #0
 801269e:	db55      	blt.n	801274c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 80126a0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80126a4:	2502      	movs	r5, #2
 80126a6:	fb93 f3fc 	sdiv	r3, r3, ip
 80126aa:	fb93 f3f5 	sdiv	r3, r3, r5
 80126ae:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80126b2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 80126b6:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 80126ba:	1a52      	subs	r2, r2, r1
 80126bc:	eba8 0003 	sub.w	r0, r8, r3
 80126c0:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80126c4:	d44e      	bmi.n	8012764 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 80126c6:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80126ca:	fb92 f1fc 	sdiv	r1, r2, ip
 80126ce:	2202      	movs	r2, #2
 80126d0:	fb91 f1f2 	sdiv	r1, r1, r2
 80126d4:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 80126d8:	4413      	add	r3, r2
 80126da:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80126de:	1ad2      	subs	r2, r2, r3
 80126e0:	b212      	sxth	r2, r2
 80126e2:	3a01      	subs	r2, #1
 80126e4:	f005 fa00 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
 80126e8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80126ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	db44      	blt.n	801277c <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 80126f2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80126f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80126fa:	2202      	movs	r2, #2
 80126fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8012700:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8012704:	2020      	movs	r0, #32
 8012706:	429d      	cmp	r5, r3
 8012708:	bfde      	ittt	le
 801270a:	461a      	movle	r2, r3
 801270c:	462b      	movle	r3, r5
 801270e:	4615      	movle	r5, r2
 8012710:	b21b      	sxth	r3, r3
 8012712:	2d00      	cmp	r5, #0
 8012714:	bfaa      	itet	ge
 8012716:	351f      	addge	r5, #31
 8012718:	fb95 f5f0 	sdivlt	r5, r5, r0
 801271c:	116d      	asrge	r5, r5, #5
 801271e:	fb93 f3f0 	sdiv	r3, r3, r0
 8012722:	b22d      	sxth	r5, r5
 8012724:	803b      	strh	r3, [r7, #0]
 8012726:	2d00      	cmp	r5, #0
 8012728:	8035      	strh	r5, [r6, #0]
 801272a:	da33      	bge.n	8012794 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 801272c:	2000      	movs	r0, #0
 801272e:	8030      	strh	r0, [r6, #0]
 8012730:	8038      	strh	r0, [r7, #0]
 8012732:	e787      	b.n	8012644 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8012734:	f06f 0101 	mvn.w	r1, #1
 8012738:	fb01 5303 	mla	r3, r1, r3, r5
 801273c:	1e59      	subs	r1, r3, #1
 801273e:	2302      	movs	r3, #2
 8012740:	fb91 f1f5 	sdiv	r1, r1, r5
 8012744:	fb91 f1f3 	sdiv	r1, r1, r3
 8012748:	4249      	negs	r1, r1
 801274a:	e7a0      	b.n	801268e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 801274c:	f06f 0301 	mvn.w	r3, #1
 8012750:	2502      	movs	r5, #2
 8012752:	fb03 c301 	mla	r3, r3, r1, ip
 8012756:	3b01      	subs	r3, #1
 8012758:	fb93 f3fc 	sdiv	r3, r3, ip
 801275c:	fb93 f3f5 	sdiv	r3, r3, r5
 8012760:	425b      	negs	r3, r3
 8012762:	e7a4      	b.n	80126ae <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8012764:	f06f 0101 	mvn.w	r1, #1
 8012768:	fb01 c202 	mla	r2, r1, r2, ip
 801276c:	1e51      	subs	r1, r2, #1
 801276e:	2202      	movs	r2, #2
 8012770:	fb91 f1fc 	sdiv	r1, r1, ip
 8012774:	fb91 f1f2 	sdiv	r1, r1, r2
 8012778:	4249      	negs	r1, r1
 801277a:	e7ab      	b.n	80126d4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 801277c:	f06f 0101 	mvn.w	r1, #1
 8012780:	fb01 2303 	mla	r3, r1, r3, r2
 8012784:	3b01      	subs	r3, #1
 8012786:	fb93 f3f2 	sdiv	r3, r3, r2
 801278a:	2202      	movs	r2, #2
 801278c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012790:	425b      	negs	r3, r3
 8012792:	e7b5      	b.n	8012700 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8012794:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012798:	f9b7 2000 	ldrsh.w	r2, [r7]
 801279c:	4293      	cmp	r3, r2
 801279e:	dc05      	bgt.n	80127ac <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 80127a0:	3b01      	subs	r3, #1
 80127a2:	2000      	movs	r0, #0
 80127a4:	b21b      	sxth	r3, r3
 80127a6:	8033      	strh	r3, [r6, #0]
 80127a8:	803b      	strh	r3, [r7, #0]
 80127aa:	e74b      	b.n	8012644 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80127ac:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80127b0:	803a      	strh	r2, [r7, #0]
 80127b2:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80127b6:	f9b6 2000 	ldrsh.w	r2, [r6]
 80127ba:	4293      	cmp	r3, r2
 80127bc:	bfdc      	itt	le
 80127be:	f103 33ff 	addle.w	r3, r3, #4294967295
 80127c2:	b21a      	sxthle	r2, r3
 80127c4:	8032      	strh	r2, [r6, #0]
 80127c6:	e750      	b.n	801266a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

080127c8 <_ZN8touchgfx9ContainerC1Ev>:
 80127c8:	2101      	movs	r1, #1
 80127ca:	2200      	movs	r2, #0
 80127cc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80127d0:	4909      	ldr	r1, [pc, #36]	; (80127f8 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 80127d2:	8082      	strh	r2, [r0, #4]
 80127d4:	80c2      	strh	r2, [r0, #6]
 80127d6:	8102      	strh	r2, [r0, #8]
 80127d8:	8142      	strh	r2, [r0, #10]
 80127da:	8182      	strh	r2, [r0, #12]
 80127dc:	81c2      	strh	r2, [r0, #14]
 80127de:	8202      	strh	r2, [r0, #16]
 80127e0:	8242      	strh	r2, [r0, #18]
 80127e2:	61c2      	str	r2, [r0, #28]
 80127e4:	8402      	strh	r2, [r0, #32]
 80127e6:	8442      	strh	r2, [r0, #34]	; 0x22
 80127e8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80127ec:	6001      	str	r1, [r0, #0]
 80127ee:	6282      	str	r2, [r0, #40]	; 0x28
 80127f0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	08024778 	.word	0x08024778

080127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 80127fc:	6800      	ldr	r0, [r0, #0]
 80127fe:	2800      	cmp	r0, #0
 8012800:	bfbd      	ittte	lt
 8012802:	380f      	sublt	r0, #15
 8012804:	2320      	movlt	r3, #32
 8012806:	fb90 f0f3 	sdivlt	r0, r0, r3
 801280a:	3010      	addge	r0, #16
 801280c:	bfa8      	it	ge
 801280e:	1140      	asrge	r0, r0, #5
 8012810:	4770      	bx	lr

08012812 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8012812:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012816:	4605      	mov	r5, r0
 8012818:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801281c:	4688      	mov	r8, r1
 801281e:	4691      	mov	r9, r2
 8012820:	469a      	mov	sl, r3
 8012822:	b360      	cbz	r0, 801287e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8012824:	2700      	movs	r7, #0
 8012826:	f04f 3bff 	mov.w	fp, #4294967295
 801282a:	b23e      	sxth	r6, r7
 801282c:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 8012830:	42b3      	cmp	r3, r6
 8012832:	dd23      	ble.n	801287c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8012834:	682b      	ldr	r3, [r5, #0]
 8012836:	4631      	mov	r1, r6
 8012838:	4628      	mov	r0, r5
 801283a:	3701      	adds	r7, #1
 801283c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012840:	4798      	blx	r3
 8012842:	9001      	str	r0, [sp, #4]
 8012844:	a801      	add	r0, sp, #4
 8012846:	f7ff ffd9 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801284a:	682b      	ldr	r3, [r5, #0]
 801284c:	eba0 0008 	sub.w	r0, r0, r8
 8012850:	4631      	mov	r1, r6
 8012852:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012856:	b204      	sxth	r4, r0
 8012858:	4628      	mov	r0, r5
 801285a:	4798      	blx	r3
 801285c:	9001      	str	r0, [sp, #4]
 801285e:	a801      	add	r0, sp, #4
 8012860:	f7ff ffcc 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012864:	eba0 0009 	sub.w	r0, r0, r9
 8012868:	fb10 f000 	smulbb	r0, r0, r0
 801286c:	fb04 0404 	mla	r4, r4, r4, r0
 8012870:	455c      	cmp	r4, fp
 8012872:	bf3c      	itt	cc
 8012874:	f8aa 6000 	strhcc.w	r6, [sl]
 8012878:	46a3      	movcc	fp, r4
 801287a:	e7d6      	b.n	801282a <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 801287c:	2001      	movs	r0, #1
 801287e:	b003      	add	sp, #12
 8012880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012884 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8012884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012888:	4604      	mov	r4, r0
 801288a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 801288e:	4688      	mov	r8, r1
 8012890:	4691      	mov	r9, r2
 8012892:	b1f8      	cbz	r0, 80128d4 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 8012894:	2500      	movs	r5, #0
 8012896:	f04f 37ff 	mov.w	r7, #4294967295
 801289a:	b22e      	sxth	r6, r5
 801289c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80128a0:	42b3      	cmp	r3, r6
 80128a2:	dd16      	ble.n	80128d2 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 80128a4:	6823      	ldr	r3, [r4, #0]
 80128a6:	4631      	mov	r1, r6
 80128a8:	4620      	mov	r0, r4
 80128aa:	3501      	adds	r5, #1
 80128ac:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80128b0:	4798      	blx	r3
 80128b2:	9001      	str	r0, [sp, #4]
 80128b4:	a801      	add	r0, sp, #4
 80128b6:	f7ff ffa1 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80128ba:	b200      	sxth	r0, r0
 80128bc:	eba0 0008 	sub.w	r0, r0, r8
 80128c0:	2800      	cmp	r0, #0
 80128c2:	bfb8      	it	lt
 80128c4:	4240      	neglt	r0, r0
 80128c6:	42b8      	cmp	r0, r7
 80128c8:	bf3c      	itt	cc
 80128ca:	f8a9 6000 	strhcc.w	r6, [r9]
 80128ce:	4607      	movcc	r7, r0
 80128d0:	e7e3      	b.n	801289a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 80128d2:	2001      	movs	r0, #1
 80128d4:	b003      	add	sp, #12
 80128d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080128da <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 80128da:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 80128de:	f9bd 3000 	ldrsh.w	r3, [sp]
 80128e2:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 80128e6:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 80128ea:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 80128ee:	4770      	bx	lr

080128f0 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 80128f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128f2:	4604      	mov	r4, r0
 80128f4:	3038      	adds	r0, #56	; 0x38
 80128f6:	460d      	mov	r5, r1
 80128f8:	f7fe fb10 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80128fc:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8012900:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8012904:	4628      	mov	r0, r5
 8012906:	9200      	str	r2, [sp, #0]
 8012908:	2200      	movs	r2, #0
 801290a:	4611      	mov	r1, r2
 801290c:	f7f0 fd5a 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012910:	b003      	add	sp, #12
 8012912:	bd30      	pop	{r4, r5, pc}

08012914 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801291a:	460d      	mov	r5, r1
 801291c:	428b      	cmp	r3, r1
 801291e:	dd08      	ble.n	8012932 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012920:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8012922:	b134      	cbz	r4, 8012932 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	4620      	mov	r0, r4
 8012928:	4629      	mov	r1, r5
 801292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801292c:	4798      	blx	r3
 801292e:	69a4      	ldr	r4, [r4, #24]
 8012930:	e7f7      	b.n	8012922 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8012932:	bd38      	pop	{r3, r4, r5, pc}

08012934 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8012934:	b570      	push	{r4, r5, r6, lr}
 8012936:	4606      	mov	r6, r0
 8012938:	460d      	mov	r5, r1
 801293a:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 801293e:	b134      	cbz	r4, 801294e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8012940:	6823      	ldr	r3, [r4, #0]
 8012942:	4620      	mov	r0, r4
 8012944:	4629      	mov	r1, r5
 8012946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012948:	4798      	blx	r3
 801294a:	69a4      	ldr	r4, [r4, #24]
 801294c:	e7f7      	b.n	801293e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801294e:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 8012952:	b134      	cbz	r4, 8012962 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8012954:	6823      	ldr	r3, [r4, #0]
 8012956:	4620      	mov	r0, r4
 8012958:	4629      	mov	r1, r5
 801295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801295c:	4798      	blx	r3
 801295e:	69a4      	ldr	r4, [r4, #24]
 8012960:	e7f7      	b.n	8012952 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8012962:	bd70      	pop	{r4, r5, r6, pc}

08012964 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8012964:	b538      	push	{r3, r4, r5, lr}
 8012966:	4604      	mov	r4, r0
 8012968:	2500      	movs	r5, #0
 801296a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801296e:	42ab      	cmp	r3, r5
 8012970:	db05      	blt.n	801297e <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 8012972:	b229      	sxth	r1, r5
 8012974:	4620      	mov	r0, r4
 8012976:	f7ff ffdd 	bl	8012934 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 801297a:	3501      	adds	r5, #1
 801297c:	e7f5      	b.n	801296a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 801297e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012982:	f004 feea 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 8012986:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801298a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801298e:	f004 bee4 	b.w	801775a <_ZNK8touchgfx8Drawable10invalidateEv>

08012992 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8012992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012994:	4604      	mov	r4, r0
 8012996:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8012998:	b15d      	cbz	r5, 80129b2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 801299a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 801299e:	4628      	mov	r0, r5
 80129a0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80129a4:	9200      	str	r2, [sp, #0]
 80129a6:	2200      	movs	r2, #0
 80129a8:	4611      	mov	r1, r2
 80129aa:	f7f0 fd0b 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80129ae:	69ad      	ldr	r5, [r5, #24]
 80129b0:	e7f2      	b.n	8012998 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80129b2:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 80129b6:	b15d      	cbz	r5, 80129d0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80129b8:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 80129bc:	4628      	mov	r0, r5
 80129be:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 80129c2:	9200      	str	r2, [sp, #0]
 80129c4:	2200      	movs	r2, #0
 80129c6:	4611      	mov	r1, r2
 80129c8:	f7f0 fcfc 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80129cc:	69ad      	ldr	r5, [r5, #24]
 80129ce:	e7f2      	b.n	80129b6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80129d0:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80129d4:	b15d      	cbz	r5, 80129ee <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80129d6:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 80129da:	4628      	mov	r0, r5
 80129dc:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 80129e0:	9200      	str	r2, [sp, #0]
 80129e2:	2200      	movs	r2, #0
 80129e4:	4611      	mov	r1, r2
 80129e6:	f7f0 fced 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 80129ea:	69ad      	ldr	r5, [r5, #24]
 80129ec:	e7f2      	b.n	80129d4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 80129ee:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80129f2:	b15d      	cbz	r5, 8012a0c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 80129f4:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80129f8:	4628      	mov	r0, r5
 80129fa:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 80129fe:	9200      	str	r2, [sp, #0]
 8012a00:	2200      	movs	r2, #0
 8012a02:	4611      	mov	r1, r2
 8012a04:	f7f0 fcde 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a08:	69ad      	ldr	r5, [r5, #24]
 8012a0a:	e7f2      	b.n	80129f2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8012a0c:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8012a10:	b15d      	cbz	r5, 8012a2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8012a12:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8012a16:	4628      	mov	r0, r5
 8012a18:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8012a1c:	9200      	str	r2, [sp, #0]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	4611      	mov	r1, r2
 8012a22:	f7f0 fccf 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012a26:	69ad      	ldr	r5, [r5, #24]
 8012a28:	e7f2      	b.n	8012a10 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	695b      	ldr	r3, [r3, #20]
 8012a30:	b003      	add	sp, #12
 8012a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a36:	4718      	bx	r3

08012a38 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8012a38:	b430      	push	{r4, r5}
 8012a3a:	b28a      	uxth	r2, r1
 8012a3c:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 8012a40:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8012a44:	1b15      	subs	r5, r2, r4
 8012a46:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8012a4a:	8101      	strh	r1, [r0, #8]
 8012a4c:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 8012a50:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8012a54:	442c      	add	r4, r5
 8012a56:	1b12      	subs	r2, r2, r4
 8012a58:	bc30      	pop	{r4, r5}
 8012a5a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012a5e:	f7ff bf98 	b.w	8012992 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012a62 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8012a62:	b430      	push	{r4, r5}
 8012a64:	b28a      	uxth	r2, r1
 8012a66:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8012a6a:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 8012a6e:	1b15      	subs	r5, r2, r4
 8012a70:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8012a74:	8141      	strh	r1, [r0, #10]
 8012a76:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8012a7a:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 8012a7e:	442c      	add	r4, r5
 8012a80:	1b12      	subs	r2, r2, r4
 8012a82:	bc30      	pop	{r4, r5}
 8012a84:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8012a88:	f7ff bf83 	b.w	8012992 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012a8c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8012a8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a90:	fa1f fa83 	uxth.w	sl, r3
 8012a94:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8012a98:	4615      	mov	r5, r2
 8012a9a:	4699      	mov	r9, r3
 8012a9c:	fa1f f887 	uxth.w	r8, r7
 8012aa0:	8903      	ldrh	r3, [r0, #8]
 8012aa2:	4452      	add	r2, sl
 8012aa4:	4604      	mov	r4, r0
 8012aa6:	8940      	ldrh	r0, [r0, #10]
 8012aa8:	460e      	mov	r6, r1
 8012aaa:	1a9b      	subs	r3, r3, r2
 8012aac:	eb08 0201 	add.w	r2, r8, r1
 8012ab0:	1a80      	subs	r0, r0, r2
 8012ab2:	b21b      	sxth	r3, r3
 8012ab4:	460a      	mov	r2, r1
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	b200      	sxth	r0, r0
 8012aba:	9000      	str	r0, [sp, #0]
 8012abc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012ac0:	f7f0 fc80 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012aca:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8012ace:	4611      	mov	r1, r2
 8012ad0:	9600      	str	r6, [sp, #0]
 8012ad2:	f7f0 fc77 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012ad6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012ada:	2200      	movs	r2, #0
 8012adc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	462b      	mov	r3, r5
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	f7f0 fc6d 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012aea:	8921      	ldrh	r1, [r4, #8]
 8012aec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012af0:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8012af4:	eba1 010a 	sub.w	r1, r1, sl
 8012af8:	2200      	movs	r2, #0
 8012afa:	9300      	str	r3, [sp, #0]
 8012afc:	464b      	mov	r3, r9
 8012afe:	b209      	sxth	r1, r1
 8012b00:	f7f0 fc60 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b04:	8962      	ldrh	r2, [r4, #10]
 8012b06:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8012b0a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8012b0e:	eba2 0208 	sub.w	r2, r2, r8
 8012b12:	9700      	str	r7, [sp, #0]
 8012b14:	2100      	movs	r1, #0
 8012b16:	b212      	sxth	r2, r2
 8012b18:	f7f0 fc54 	bl	80033c4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	b002      	add	sp, #8
 8012b20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	f7ff bf35 	b.w	8012992 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08012b28 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	b085      	sub	sp, #20
 8012b2e:	4604      	mov	r4, r0
 8012b30:	2601      	movs	r6, #1
 8012b32:	2500      	movs	r5, #0
 8012b34:	9103      	str	r1, [sp, #12]
 8012b36:	f7ff fe47 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b3a:	4b2c      	ldr	r3, [pc, #176]	; (8012bec <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8012b3c:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 8012b40:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8012b44:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8012b48:	6023      	str	r3, [r4, #0]
 8012b4a:	23ff      	movs	r3, #255	; 0xff
 8012b4c:	4658      	mov	r0, fp
 8012b4e:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 8012b52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8012b56:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8012b5a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012b5e:	f7ff fe33 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b62:	4648      	mov	r0, r9
 8012b64:	f7ff fe30 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b68:	4640      	mov	r0, r8
 8012b6a:	f7ff fe2d 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b6e:	4650      	mov	r0, sl
 8012b70:	f7ff fe2a 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b74:	4638      	mov	r0, r7
 8012b76:	f7ff fe27 	bl	80127c8 <_ZN8touchgfx9ContainerC1Ev>
 8012b7a:	9903      	ldr	r1, [sp, #12]
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8012b82:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8012b86:	4659      	mov	r1, fp
 8012b88:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8012b8c:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 8012b90:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8012b94:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8012b98:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8012b9c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012ba0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012ba4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8012ba8:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 8012bac:	f7fe f9b6 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bb0:	4651      	mov	r1, sl
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f7fe f9b2 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bb8:	4649      	mov	r1, r9
 8012bba:	4620      	mov	r0, r4
 8012bbc:	f7fe f9ae 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bc0:	4641      	mov	r1, r8
 8012bc2:	4620      	mov	r0, r4
 8012bc4:	f7fe f9aa 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bc8:	4639      	mov	r1, r7
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f7fe f9a6 	bl	8010f1c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8012bd0:	4620      	mov	r0, r4
 8012bd2:	9500      	str	r5, [sp, #0]
 8012bd4:	462b      	mov	r3, r5
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ff ff57 	bl	8012a8c <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8012bde:	4620      	mov	r0, r4
 8012be0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 8012be4:	b005      	add	sp, #20
 8012be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bea:	bf00      	nop
 8012bec:	08024a80 	.word	0x08024a80

08012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8012bf0:	4291      	cmp	r1, r2
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	d003      	beq.n	8012bfe <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8012bf6:	460a      	mov	r2, r1
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	f004 bf75 	b.w	8017ae8 <_ZN8touchgfx6muldivElll>
 8012bfe:	4770      	bx	lr

08012c00 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8012c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c04:	6803      	ldr	r3, [r0, #0]
 8012c06:	460d      	mov	r5, r1
 8012c08:	4604      	mov	r4, r0
 8012c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012c0e:	4798      	blx	r3
 8012c10:	42a8      	cmp	r0, r5
 8012c12:	4606      	mov	r6, r0
 8012c14:	d024      	beq.n	8012c60 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	4601      	mov	r1, r0
 8012c1a:	462a      	mov	r2, r5
 8012c1c:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8012c20:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 8012c24:	f7ff ffe4 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c28:	4680      	mov	r8, r0
 8012c2a:	462a      	mov	r2, r5
 8012c2c:	4631      	mov	r1, r6
 8012c2e:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 8012c32:	f7ff ffdd 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c36:	4641      	mov	r1, r8
 8012c38:	4602      	mov	r2, r0
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	47b8      	blx	r7
 8012c3e:	462a      	mov	r2, r5
 8012c40:	4631      	mov	r1, r6
 8012c42:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8012c46:	f7ff ffd3 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c4a:	462a      	mov	r2, r5
 8012c4c:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8012c50:	4631      	mov	r1, r6
 8012c52:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8012c56:	f7ff ffcb 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c5a:	6325      	str	r5, [r4, #48]	; 0x30
 8012c5c:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c64 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8012c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c68:	4604      	mov	r4, r0
 8012c6a:	460f      	mov	r7, r1
 8012c6c:	b1b2      	cbz	r2, 8012c9c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012c6e:	6803      	ldr	r3, [r0, #0]
 8012c70:	2600      	movs	r6, #0
 8012c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012c76:	4798      	blx	r3
 8012c78:	4681      	mov	r9, r0
 8012c7a:	b235      	sxth	r5, r6
 8012c7c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8012c80:	3601      	adds	r6, #1
 8012c82:	42ab      	cmp	r3, r5
 8012c84:	dd0a      	ble.n	8012c9c <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8012c86:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8012c8a:	463a      	mov	r2, r7
 8012c8c:	4649      	mov	r1, r9
 8012c8e:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8012c92:	f7ff ffad 	bl	8012bf0 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8012c96:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8012c9a:	e7ee      	b.n	8012c7a <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8012c9c:	6367      	str	r7, [r4, #52]	; 0x34
 8012c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012ca2 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8012ca2:	b570      	push	{r4, r5, r6, lr}
 8012ca4:	6803      	ldr	r3, [r0, #0]
 8012ca6:	4604      	mov	r4, r0
 8012ca8:	460d      	mov	r5, r1
 8012caa:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8012cae:	4798      	blx	r3
 8012cb0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8012cb4:	4629      	mov	r1, r5
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	3301      	adds	r3, #1
 8012cba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8012cbe:	6823      	ldr	r3, [r4, #0]
 8012cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cc4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8012cc8:	4718      	bx	r3

08012cca <_ZN8touchgfx16GraphElementLineD1Ev>:
 8012cca:	4770      	bx	lr

08012ccc <_ZN8touchgfx16GraphElementLineD0Ev>:
 8012ccc:	b510      	push	{r4, lr}
 8012cce:	4604      	mov	r4, r0
 8012cd0:	2130      	movs	r1, #48	; 0x30
 8012cd2:	f00e ff24 	bl	8021b1e <_ZdlPvj>
 8012cd6:	4620      	mov	r0, r4
 8012cd8:	bd10      	pop	{r4, pc}

08012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cdc:	4604      	mov	r4, r0
 8012cde:	4608      	mov	r0, r1
 8012ce0:	460d      	mov	r5, r1
 8012ce2:	f7fe fae2 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ce6:	b978      	cbnz	r0, 8012d08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f7fe fade 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012cee:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012cf2:	b150      	cbz	r0, 8012d0a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012cf4:	8026      	strh	r6, [r4, #0]
 8012cf6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012cfa:	8063      	strh	r3, [r4, #2]
 8012cfc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012d00:	80a3      	strh	r3, [r4, #4]
 8012d02:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012d06:	80e3      	strh	r3, [r4, #6]
 8012d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d0a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012d0e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012d12:	42b1      	cmp	r1, r6
 8012d14:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012d18:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012d1c:	460f      	mov	r7, r1
 8012d1e:	88ed      	ldrh	r5, [r5, #6]
 8012d20:	bfa8      	it	ge
 8012d22:	4637      	movge	r7, r6
 8012d24:	4293      	cmp	r3, r2
 8012d26:	4618      	mov	r0, r3
 8012d28:	4466      	add	r6, ip
 8012d2a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012d2e:	bfa8      	it	ge
 8012d30:	4610      	movge	r0, r2
 8012d32:	442a      	add	r2, r5
 8012d34:	88e5      	ldrh	r5, [r4, #6]
 8012d36:	4461      	add	r1, ip
 8012d38:	b236      	sxth	r6, r6
 8012d3a:	8027      	strh	r7, [r4, #0]
 8012d3c:	442b      	add	r3, r5
 8012d3e:	b209      	sxth	r1, r1
 8012d40:	b212      	sxth	r2, r2
 8012d42:	8060      	strh	r0, [r4, #2]
 8012d44:	b21b      	sxth	r3, r3
 8012d46:	428e      	cmp	r6, r1
 8012d48:	bfac      	ite	ge
 8012d4a:	ebc7 0106 	rsbge	r1, r7, r6
 8012d4e:	ebc7 0101 	rsblt	r1, r7, r1
 8012d52:	429a      	cmp	r2, r3
 8012d54:	bfac      	ite	ge
 8012d56:	ebc0 0202 	rsbge	r2, r0, r2
 8012d5a:	ebc0 0203 	rsblt	r2, r0, r3
 8012d5e:	80a1      	strh	r1, [r4, #4]
 8012d60:	80e2      	strh	r2, [r4, #6]
 8012d62:	e7d1      	b.n	8012d08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08012d64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8012d64:	6800      	ldr	r0, [r0, #0]
 8012d66:	2800      	cmp	r0, #0
 8012d68:	bfb9      	ittee	lt
 8012d6a:	2320      	movlt	r3, #32
 8012d6c:	fb90 f0f3 	sdivlt	r0, r0, r3
 8012d70:	301f      	addge	r0, #31
 8012d72:	1140      	asrge	r0, r0, #5
 8012d74:	4770      	bx	lr

08012d76 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 8012d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7a:	6803      	ldr	r3, [r0, #0]
 8012d7c:	b093      	sub	sp, #76	; 0x4c
 8012d7e:	6945      	ldr	r5, [r0, #20]
 8012d80:	4604      	mov	r4, r0
 8012d82:	460f      	mov	r7, r1
 8012d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d86:	2d00      	cmp	r5, #0
 8012d88:	f000 81ad 	beq.w	80130e6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 8012d8c:	696d      	ldr	r5, [r5, #20]
 8012d8e:	4798      	blx	r3
 8012d90:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d077      	beq.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012d98:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012d9c:	fb13 f000 	smulbb	r0, r3, r0
 8012da0:	b283      	uxth	r3, r0
 8012da2:	1c58      	adds	r0, r3, #1
 8012da4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012da8:	1200      	asrs	r0, r0, #8
 8012daa:	d06d      	beq.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012dac:	b2c3      	uxtb	r3, r0
 8012dae:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8012db2:	462a      	mov	r2, r5
 8012db4:	4621      	mov	r1, r4
 8012db6:	9308      	str	r3, [sp, #32]
 8012db8:	4640      	mov	r0, r8
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	ae0e      	add	r6, sp, #56	; 0x38
 8012dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012dc2:	4798      	blx	r3
 8012dc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8012dc8:	e886 0003 	stmia.w	r6, {r0, r1}
 8012dcc:	4639      	mov	r1, r7
 8012dce:	4630      	mov	r0, r6
 8012dd0:	f7fe fa28 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8012dd4:	6823      	ldr	r3, [r4, #0]
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	4620      	mov	r0, r4
 8012dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dde:	4798      	blx	r3
 8012de0:	6823      	ldr	r3, [r4, #0]
 8012de2:	4607      	mov	r7, r0
 8012de4:	4629      	mov	r1, r5
 8012de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012dea:	4620      	mov	r0, r4
 8012dec:	4798      	blx	r3
 8012dee:	4681      	mov	r9, r0
 8012df0:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8012df4:	4629      	mov	r1, r5
 8012df6:	0103      	lsls	r3, r0, #4
 8012df8:	4620      	mov	r0, r4
 8012dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8012dfc:	6823      	ldr	r3, [r4, #0]
 8012dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012e02:	4798      	blx	r3
 8012e04:	4629      	mov	r1, r5
 8012e06:	b203      	sxth	r3, r0
 8012e08:	4620      	mov	r0, r4
 8012e0a:	9306      	str	r3, [sp, #24]
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012e12:	4798      	blx	r3
 8012e14:	2f00      	cmp	r7, #0
 8012e16:	b203      	sxth	r3, r0
 8012e18:	9307      	str	r3, [sp, #28]
 8012e1a:	d138      	bne.n	8012e8e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8012e1c:	f1b9 0f00 	cmp.w	r9, #0
 8012e20:	d132      	bne.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	464a      	mov	r2, r9
 8012e26:	4629      	mov	r1, r5
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012e2e:	4798      	blx	r3
 8012e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e32:	1ac0      	subs	r0, r0, r3
 8012e34:	9010      	str	r0, [sp, #64]	; 0x40
 8012e36:	4640      	mov	r0, r8
 8012e38:	f7ff fce0 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	4607      	mov	r7, r0
 8012e40:	4629      	mov	r1, r5
 8012e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012e46:	4620      	mov	r0, r4
 8012e48:	4798      	blx	r3
 8012e4a:	1a38      	subs	r0, r7, r0
 8012e4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012e50:	fa0f f880 	sxth.w	r8, r0
 8012e54:	eb13 0f08 	cmn.w	r3, r8
 8012e58:	d416      	bmi.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	4620      	mov	r0, r4
 8012e60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8012e64:	4798      	blx	r3
 8012e66:	4580      	cmp	r8, r0
 8012e68:	da0e      	bge.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012e6a:	9a08      	ldr	r2, [sp, #32]
 8012e6c:	b23f      	sxth	r7, r7
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	4631      	mov	r1, r6
 8012e72:	9202      	str	r2, [sp, #8]
 8012e74:	4620      	mov	r0, r4
 8012e76:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012e7a:	9700      	str	r7, [sp, #0]
 8012e7c:	9201      	str	r2, [sp, #4]
 8012e7e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8012e82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e86:	47a8      	blx	r5
 8012e88:	b013      	add	sp, #76	; 0x4c
 8012e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e8e:	ddfb      	ble.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012e90:	6823      	ldr	r3, [r4, #0]
 8012e92:	4629      	mov	r1, r5
 8012e94:	4620      	mov	r0, r4
 8012e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012e9a:	4798      	blx	r3
 8012e9c:	6823      	ldr	r3, [r4, #0]
 8012e9e:	4683      	mov	fp, r0
 8012ea0:	4629      	mov	r1, r5
 8012ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4798      	blx	r3
 8012eaa:	eba0 030b 	sub.w	r3, r0, fp
 8012eae:	4680      	mov	r8, r0
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	bfb8      	it	lt
 8012eb4:	425b      	neglt	r3, r3
 8012eb6:	fb93 f3f7 	sdiv	r3, r3, r7
 8012eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012ebe:	dce3      	bgt.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012ec0:	6823      	ldr	r3, [r4, #0]
 8012ec2:	465a      	mov	r2, fp
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ecc:	4798      	blx	r3
 8012ece:	6823      	ldr	r3, [r4, #0]
 8012ed0:	4606      	mov	r6, r0
 8012ed2:	4642      	mov	r2, r8
 8012ed4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012ed8:	4629      	mov	r1, r5
 8012eda:	4620      	mov	r0, r4
 8012edc:	4798      	blx	r3
 8012ede:	42b0      	cmp	r0, r6
 8012ee0:	bfa2      	ittt	ge
 8012ee2:	4643      	movge	r3, r8
 8012ee4:	46d8      	movge	r8, fp
 8012ee6:	469b      	movge	fp, r3
 8012ee8:	fb98 f6f7 	sdiv	r6, r8, r7
 8012eec:	fb9b f2f7 	sdiv	r2, fp, r7
 8012ef0:	45d8      	cmp	r8, fp
 8012ef2:	bfac      	ite	ge
 8012ef4:	f04f 33ff 	movge.w	r3, #4294967295
 8012ef8:	2301      	movlt	r3, #1
 8012efa:	1af6      	subs	r6, r6, r3
 8012efc:	441a      	add	r2, r3
 8012efe:	4296      	cmp	r6, r2
 8012f00:	bfac      	ite	ge
 8012f02:	f04f 3aff 	movge.w	sl, #4294967295
 8012f06:	f04f 0a01 	movlt.w	sl, #1
 8012f0a:	f1b9 0f00 	cmp.w	r9, #0
 8012f0e:	d13e      	bne.n	8012f8e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8012f10:	fb07 fb0a 	mul.w	fp, r7, sl
 8012f14:	eb0a 0802 	add.w	r8, sl, r2
 8012f18:	4377      	muls	r7, r6
 8012f1a:	45b0      	cmp	r8, r6
 8012f1c:	d0b4      	beq.n	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8012f1e:	6823      	ldr	r3, [r4, #0]
 8012f20:	463a      	mov	r2, r7
 8012f22:	4629      	mov	r1, r5
 8012f24:	4620      	mov	r0, r4
 8012f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012f2a:	4798      	blx	r3
 8012f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f2e:	1ac0      	subs	r0, r0, r3
 8012f30:	9010      	str	r0, [sp, #64]	; 0x40
 8012f32:	a810      	add	r0, sp, #64	; 0x40
 8012f34:	f7ff fc62 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012f38:	6823      	ldr	r3, [r4, #0]
 8012f3a:	4681      	mov	r9, r0
 8012f3c:	4629      	mov	r1, r5
 8012f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f42:	4620      	mov	r0, r4
 8012f44:	4798      	blx	r3
 8012f46:	eba9 0000 	sub.w	r0, r9, r0
 8012f4a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8012f4e:	b203      	sxth	r3, r0
 8012f50:	42da      	cmn	r2, r3
 8012f52:	9304      	str	r3, [sp, #16]
 8012f54:	d418      	bmi.n	8012f88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8012f56:	6822      	ldr	r2, [r4, #0]
 8012f58:	4629      	mov	r1, r5
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8012f60:	4790      	blx	r2
 8012f62:	9b04      	ldr	r3, [sp, #16]
 8012f64:	4283      	cmp	r3, r0
 8012f66:	da0f      	bge.n	8012f88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8012f68:	9b08      	ldr	r3, [sp, #32]
 8012f6a:	a90e      	add	r1, sp, #56	; 0x38
 8012f6c:	6822      	ldr	r2, [r4, #0]
 8012f6e:	4620      	mov	r0, r4
 8012f70:	9302      	str	r3, [sp, #8]
 8012f72:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	fa0f f389 	sxth.w	r3, r9
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 8012f82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012f86:	47c8      	blx	r9
 8012f88:	4456      	add	r6, sl
 8012f8a:	445f      	add	r7, fp
 8012f8c:	e7c5      	b.n	8012f1a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8012f8e:	fb98 f8f9 	sdiv	r8, r8, r9
 8012f92:	eba8 0203 	sub.w	r2, r8, r3
 8012f96:	4629      	mov	r1, r5
 8012f98:	4620      	mov	r0, r4
 8012f9a:	9204      	str	r2, [sp, #16]
 8012f9c:	fb9b f8f9 	sdiv	r8, fp, r9
 8012fa0:	4498      	add	r8, r3
 8012fa2:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8012fa6:	4542      	cmp	r2, r8
 8012fa8:	bfac      	ite	ge
 8012faa:	f04f 33ff 	movge.w	r3, #4294967295
 8012fae:	2301      	movlt	r3, #1
 8012fb0:	fb02 f209 	mul.w	r2, r2, r9
 8012fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8012fb6:	6823      	ldr	r3, [r4, #0]
 8012fb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fbc:	4798      	blx	r3
 8012fbe:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8012fc2:	4658      	mov	r0, fp
 8012fc4:	f7ff fc1a 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012fc8:	fb06 f207 	mul.w	r2, r6, r7
 8012fcc:	b203      	sxth	r3, r0
 8012fce:	4629      	mov	r1, r5
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	9305      	str	r3, [sp, #20]
 8012fd4:	6823      	ldr	r3, [r4, #0]
 8012fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8012fda:	4798      	blx	r3
 8012fdc:	9010      	str	r0, [sp, #64]	; 0x40
 8012fde:	4658      	mov	r0, fp
 8012fe0:	f7ff fc0c 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8012fe4:	fb07 f20a 	mul.w	r2, r7, sl
 8012fe8:	b203      	sxth	r3, r0
 8012fea:	920b      	str	r2, [sp, #44]	; 0x2c
 8012fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fee:	4442      	add	r2, r8
 8012ff0:	920c      	str	r2, [sp, #48]	; 0x30
 8012ff2:	9a05      	ldr	r2, [sp, #20]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	dc16      	bgt.n	8013026 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8012ff8:	eb06 080a 	add.w	r8, r6, sl
 8012ffc:	fb07 f808 	mul.w	r8, r7, r8
 8013000:	9a05      	ldr	r2, [sp, #20]
 8013002:	429a      	cmp	r2, r3
 8013004:	db54      	blt.n	80130b0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8013006:	6823      	ldr	r3, [r4, #0]
 8013008:	4642      	mov	r2, r8
 801300a:	4629      	mov	r1, r5
 801300c:	4620      	mov	r0, r4
 801300e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013012:	4456      	add	r6, sl
 8013014:	4798      	blx	r3
 8013016:	9010      	str	r0, [sp, #64]	; 0x40
 8013018:	4658      	mov	r0, fp
 801301a:	f7ff fbef 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801301e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013020:	b203      	sxth	r3, r0
 8013022:	4490      	add	r8, r2
 8013024:	e7ec      	b.n	8013000 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8013026:	6823      	ldr	r3, [r4, #0]
 8013028:	fb07 f206 	mul.w	r2, r7, r6
 801302c:	4629      	mov	r1, r5
 801302e:	4620      	mov	r0, r4
 8013030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013034:	4798      	blx	r3
 8013036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013038:	1ac0      	subs	r0, r0, r3
 801303a:	9010      	str	r0, [sp, #64]	; 0x40
 801303c:	4658      	mov	r0, fp
 801303e:	f7ff fbdd 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013042:	6823      	ldr	r3, [r4, #0]
 8013044:	4680      	mov	r8, r0
 8013046:	4629      	mov	r1, r5
 8013048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801304c:	4620      	mov	r0, r4
 801304e:	4798      	blx	r3
 8013050:	eba8 0000 	sub.w	r0, r8, r0
 8013054:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8013058:	b203      	sxth	r3, r0
 801305a:	42da      	cmn	r2, r3
 801305c:	930d      	str	r3, [sp, #52]	; 0x34
 801305e:	d418      	bmi.n	8013092 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8013060:	6822      	ldr	r2, [r4, #0]
 8013062:	4629      	mov	r1, r5
 8013064:	4620      	mov	r0, r4
 8013066:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 801306a:	4790      	blx	r2
 801306c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801306e:	4283      	cmp	r3, r0
 8013070:	da0f      	bge.n	8013092 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8013072:	9b08      	ldr	r3, [sp, #32]
 8013074:	a90e      	add	r1, sp, #56	; 0x38
 8013076:	6822      	ldr	r2, [r4, #0]
 8013078:	4620      	mov	r0, r4
 801307a:	9302      	str	r3, [sp, #8]
 801307c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	fa0f f388 	sxth.w	r3, r8
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 801308c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013090:	47c0      	blx	r8
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	4456      	add	r6, sl
 8013096:	4629      	mov	r1, r5
 8013098:	4620      	mov	r0, r4
 801309a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801309e:	fb06 f207 	mul.w	r2, r6, r7
 80130a2:	4798      	blx	r3
 80130a4:	9010      	str	r0, [sp, #64]	; 0x40
 80130a6:	4658      	mov	r0, fp
 80130a8:	f7ff fba8 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80130ac:	b203      	sxth	r3, r0
 80130ae:	e7a0      	b.n	8012ff2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80130b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130b2:	930d      	str	r3, [sp, #52]	; 0x34
 80130b4:	9b04      	ldr	r3, [sp, #16]
 80130b6:	4413      	add	r3, r2
 80130b8:	9304      	str	r3, [sp, #16]
 80130ba:	9a04      	ldr	r2, [sp, #16]
 80130bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130be:	4293      	cmp	r3, r2
 80130c0:	f43f aee2 	beq.w	8012e88 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80130c4:	9b04      	ldr	r3, [sp, #16]
 80130c6:	4629      	mov	r1, r5
 80130c8:	6822      	ldr	r2, [r4, #0]
 80130ca:	4620      	mov	r0, r4
 80130cc:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 80130d0:	fb03 f209 	mul.w	r2, r3, r9
 80130d4:	47c0      	blx	r8
 80130d6:	9010      	str	r0, [sp, #64]	; 0x40
 80130d8:	4658      	mov	r0, fp
 80130da:	f7ff fb8f 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80130de:	b203      	sxth	r3, r0
 80130e0:	9305      	str	r3, [sp, #20]
 80130e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130e4:	e785      	b.n	8012ff2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80130e6:	4798      	blx	r3
 80130e8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80130ec:	deff      	udf	#255	; 0xff

080130ee <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 80130ee:	b510      	push	{r4, lr}
 80130f0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 80130f4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 80130f8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 80130fc:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8013100:	139b      	asrs	r3, r3, #14
 8013102:	13a4      	asrs	r4, r4, #14
 8013104:	429c      	cmp	r4, r3
 8013106:	bfb8      	it	lt
 8013108:	461c      	movlt	r4, r3
 801310a:	2c01      	cmp	r4, #1
 801310c:	dd07      	ble.n	801311e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801310e:	fb91 f1f4 	sdiv	r1, r1, r4
 8013112:	fb90 f0f4 	sdiv	r0, r0, r4
 8013116:	f7ff ffea 	bl	80130ee <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801311a:	4360      	muls	r0, r4
 801311c:	bd10      	pop	{r4, pc}
 801311e:	4340      	muls	r0, r0
 8013120:	fb01 0101 	mla	r1, r1, r1, r0
 8013124:	2000      	movs	r0, #0
 8013126:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801312a:	bfb4      	ite	lt
 801312c:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 8013130:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8013134:	18c2      	adds	r2, r0, r3
 8013136:	428a      	cmp	r2, r1
 8013138:	bf9c      	itt	ls
 801313a:	1898      	addls	r0, r3, r2
 801313c:	1a89      	subls	r1, r1, r2
 801313e:	089b      	lsrs	r3, r3, #2
 8013140:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8013144:	d1f6      	bne.n	8013134 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8013146:	e7e9      	b.n	801311c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08013148 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8013148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801314a:	9906      	ldr	r1, [sp, #24]
 801314c:	4606      	mov	r6, r0
 801314e:	461c      	mov	r4, r3
 8013150:	2020      	movs	r0, #32
 8013152:	4291      	cmp	r1, r2
 8013154:	bfbc      	itt	lt
 8013156:	9206      	strlt	r2, [sp, #24]
 8013158:	460a      	movlt	r2, r1
 801315a:	9907      	ldr	r1, [sp, #28]
 801315c:	428b      	cmp	r3, r1
 801315e:	bfc4      	itt	gt
 8013160:	460c      	movgt	r4, r1
 8013162:	9307      	strgt	r3, [sp, #28]
 8013164:	fb92 f5f0 	sdiv	r5, r2, r0
 8013168:	fb94 f4f0 	sdiv	r4, r4, r0
 801316c:	a806      	add	r0, sp, #24
 801316e:	f7ff fdf9 	bl	8012d64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013172:	4607      	mov	r7, r0
 8013174:	a807      	add	r0, sp, #28
 8013176:	f7ff fdf5 	bl	8012d64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801317a:	1b7a      	subs	r2, r7, r5
 801317c:	1b00      	subs	r0, r0, r4
 801317e:	8035      	strh	r5, [r6, #0]
 8013180:	8074      	strh	r4, [r6, #2]
 8013182:	80f0      	strh	r0, [r6, #6]
 8013184:	4630      	mov	r0, r6
 8013186:	80b2      	strh	r2, [r6, #4]
 8013188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801318a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 801318a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801318c:	9c08      	ldr	r4, [sp, #32]
 801318e:	2602      	movs	r6, #2
 8013190:	4605      	mov	r5, r0
 8013192:	3401      	adds	r4, #1
 8013194:	fb94 f4f6 	sdiv	r4, r4, r6
 8013198:	18a6      	adds	r6, r4, r2
 801319a:	191f      	adds	r7, r3, r4
 801319c:	1b12      	subs	r2, r2, r4
 801319e:	1b1b      	subs	r3, r3, r4
 80131a0:	e9cd 6700 	strd	r6, r7, [sp]
 80131a4:	f7ff ffd0 	bl	8013148 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80131a8:	4628      	mov	r0, r5
 80131aa:	b003      	add	sp, #12
 80131ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080131ae <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 80131ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80131b2:	6943      	ldr	r3, [r0, #20]
 80131b4:	b087      	sub	sp, #28
 80131b6:	4606      	mov	r6, r0
 80131b8:	460d      	mov	r5, r1
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d072      	beq.n	80132a4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 80131be:	695c      	ldr	r4, [r3, #20]
 80131c0:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 80131c4:	6823      	ldr	r3, [r4, #0]
 80131c6:	4620      	mov	r0, r4
 80131c8:	017f      	lsls	r7, r7, #5
 80131ca:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80131ce:	4798      	blx	r3
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	4680      	mov	r8, r0
 80131d4:	4629      	mov	r1, r5
 80131d6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80131da:	4620      	mov	r0, r4
 80131dc:	4798      	blx	r3
 80131de:	9700      	str	r7, [sp, #0]
 80131e0:	4603      	mov	r3, r0
 80131e2:	4642      	mov	r2, r8
 80131e4:	4631      	mov	r1, r6
 80131e6:	a802      	add	r0, sp, #8
 80131e8:	f7ff ffcf 	bl	801318a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 80131ec:	2d00      	cmp	r5, #0
 80131ee:	dd1b      	ble.n	8013228 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 80131f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80131f4:	6823      	ldr	r3, [r4, #0]
 80131f6:	4620      	mov	r0, r4
 80131f8:	fa0f f888 	sxth.w	r8, r8
 80131fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013200:	4641      	mov	r1, r8
 8013202:	4798      	blx	r3
 8013204:	6823      	ldr	r3, [r4, #0]
 8013206:	4681      	mov	r9, r0
 8013208:	4641      	mov	r1, r8
 801320a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801320e:	4620      	mov	r0, r4
 8013210:	4798      	blx	r3
 8013212:	4631      	mov	r1, r6
 8013214:	4603      	mov	r3, r0
 8013216:	9700      	str	r7, [sp, #0]
 8013218:	a804      	add	r0, sp, #16
 801321a:	464a      	mov	r2, r9
 801321c:	f7ff ffb5 	bl	801318a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8013220:	a904      	add	r1, sp, #16
 8013222:	a802      	add	r0, sp, #8
 8013224:	f7ff fd59 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013228:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801322c:	3b01      	subs	r3, #1
 801322e:	429d      	cmp	r5, r3
 8013230:	da19      	bge.n	8013266 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8013232:	3501      	adds	r5, #1
 8013234:	6823      	ldr	r3, [r4, #0]
 8013236:	4620      	mov	r0, r4
 8013238:	b22d      	sxth	r5, r5
 801323a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801323e:	4629      	mov	r1, r5
 8013240:	4798      	blx	r3
 8013242:	6823      	ldr	r3, [r4, #0]
 8013244:	4680      	mov	r8, r0
 8013246:	4629      	mov	r1, r5
 8013248:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801324c:	4620      	mov	r0, r4
 801324e:	4798      	blx	r3
 8013250:	4631      	mov	r1, r6
 8013252:	4603      	mov	r3, r0
 8013254:	9700      	str	r7, [sp, #0]
 8013256:	a804      	add	r0, sp, #16
 8013258:	4642      	mov	r2, r8
 801325a:	f7ff ff96 	bl	801318a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801325e:	a904      	add	r1, sp, #16
 8013260:	a802      	add	r0, sp, #8
 8013262:	f7ff fd3a 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013266:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 801326a:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 801326e:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8013272:	18ca      	adds	r2, r1, r3
 8013274:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8013278:	f8ad 1012 	strh.w	r1, [sp, #18]
 801327c:	a904      	add	r1, sp, #16
 801327e:	1a9b      	subs	r3, r3, r2
 8013280:	2200      	movs	r2, #0
 8013282:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013286:	a802      	add	r0, sp, #8
 8013288:	f8ad 2010 	strh.w	r2, [sp, #16]
 801328c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013290:	f7fd ffc8 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8013294:	6833      	ldr	r3, [r6, #0]
 8013296:	a902      	add	r1, sp, #8
 8013298:	4630      	mov	r0, r6
 801329a:	691b      	ldr	r3, [r3, #16]
 801329c:	4798      	blx	r3
 801329e:	b007      	add	sp, #28
 80132a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	deff      	udf	#255	; 0xff

080132a8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 80132a8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	da05      	bge.n	80132bc <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	880a      	ldrh	r2, [r1, #0]
 80132b4:	441a      	add	r2, r3
 80132b6:	425b      	negs	r3, r3
 80132b8:	800a      	strh	r2, [r1, #0]
 80132ba:	808b      	strh	r3, [r1, #4]
 80132bc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	da05      	bge.n	80132d0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	884a      	ldrh	r2, [r1, #2]
 80132c8:	441a      	add	r2, r3
 80132ca:	425b      	negs	r3, r3
 80132cc:	804a      	strh	r2, [r1, #2]
 80132ce:	80cb      	strh	r3, [r1, #6]
 80132d0:	4770      	bx	lr

080132d2 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 80132d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80132d4:	4604      	mov	r4, r0
 80132d6:	460d      	mov	r5, r1
 80132d8:	6801      	ldr	r1, [r0, #0]
 80132da:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 80132de:	9001      	str	r0, [sp, #4]
 80132e0:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80132e4:	9000      	str	r0, [sp, #0]
 80132e6:	a802      	add	r0, sp, #8
 80132e8:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 80132ec:	4621      	mov	r1, r4
 80132ee:	47b0      	blx	r6
 80132f0:	a902      	add	r1, sp, #8
 80132f2:	4620      	mov	r0, r4
 80132f4:	f7ff ffd8 	bl	80132a8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 80132f8:	a802      	add	r0, sp, #8
 80132fa:	4629      	mov	r1, r5
 80132fc:	f7fd ff92 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8013300:	a802      	add	r0, sp, #8
 8013302:	f7fd ffd2 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8013306:	b968      	cbnz	r0, 8013324 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	a902      	add	r1, sp, #8
 801330c:	4620      	mov	r0, r4
 801330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013310:	4798      	blx	r3
 8013312:	f7fe fa57 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8013316:	6803      	ldr	r3, [r0, #0]
 8013318:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801331a:	a902      	add	r1, sp, #8
 801331c:	6a1d      	ldr	r5, [r3, #32]
 801331e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8013322:	47a8      	blx	r5
 8013324:	b004      	add	sp, #16
 8013326:	bd70      	pop	{r4, r5, r6, pc}

08013328 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8013328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332c:	b08b      	sub	sp, #44	; 0x2c
 801332e:	461e      	mov	r6, r3
 8013330:	460f      	mov	r7, r1
 8013332:	4615      	mov	r5, r2
 8013334:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8013338:	429e      	cmp	r6, r3
 801333a:	9304      	str	r3, [sp, #16]
 801333c:	d074      	beq.n	8013428 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 801333e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013342:	4631      	mov	r1, r6
 8013344:	4610      	mov	r0, r2
 8013346:	4634      	mov	r4, r6
 8013348:	015b      	lsls	r3, r3, #5
 801334a:	9303      	str	r3, [sp, #12]
 801334c:	6813      	ldr	r3, [r2, #0]
 801334e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8013352:	4798      	blx	r3
 8013354:	ab0a      	add	r3, sp, #40	; 0x28
 8013356:	f843 0d10 	str.w	r0, [r3, #-16]!
 801335a:	4618      	mov	r0, r3
 801335c:	f7ff fa4e 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8013360:	682b      	ldr	r3, [r5, #0]
 8013362:	4631      	mov	r1, r6
 8013364:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013368:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801336c:	4628      	mov	r0, r5
 801336e:	4798      	blx	r3
 8013370:	ab0a      	add	r3, sp, #40	; 0x28
 8013372:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff fa40 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801337c:	4641      	mov	r1, r8
 801337e:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8013382:	4638      	mov	r0, r7
 8013384:	464a      	mov	r2, r9
 8013386:	f00e fb09 	bl	802199c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801338a:	2301      	movs	r3, #1
 801338c:	9300      	str	r3, [sp, #0]
 801338e:	4628      	mov	r0, r5
 8013390:	9b00      	ldr	r3, [sp, #0]
 8013392:	441c      	add	r4, r3
 8013394:	682b      	ldr	r3, [r5, #0]
 8013396:	b224      	sxth	r4, r4
 8013398:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 801339c:	4621      	mov	r1, r4
 801339e:	4798      	blx	r3
 80133a0:	9008      	str	r0, [sp, #32]
 80133a2:	a808      	add	r0, sp, #32
 80133a4:	f7ff fa2a 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80133a8:	4621      	mov	r1, r4
 80133aa:	0143      	lsls	r3, r0, #5
 80133ac:	4628      	mov	r0, r5
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	682b      	ldr	r3, [r5, #0]
 80133b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80133b6:	4798      	blx	r3
 80133b8:	9009      	str	r0, [sp, #36]	; 0x24
 80133ba:	a809      	add	r0, sp, #36	; 0x24
 80133bc:	f7ff fa1e 	bl	80127fc <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80133c0:	0143      	lsls	r3, r0, #5
 80133c2:	9302      	str	r3, [sp, #8]
 80133c4:	9b01      	ldr	r3, [sp, #4]
 80133c6:	eba3 0b08 	sub.w	fp, r3, r8
 80133ca:	9b02      	ldr	r3, [sp, #8]
 80133cc:	eba3 0a09 	sub.w	sl, r3, r9
 80133d0:	4658      	mov	r0, fp
 80133d2:	4651      	mov	r1, sl
 80133d4:	f7ff fe8b 	bl	80130ee <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80133d8:	b320      	cbz	r0, 8013424 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 80133da:	4602      	mov	r2, r0
 80133dc:	4651      	mov	r1, sl
 80133de:	9005      	str	r0, [sp, #20]
 80133e0:	9803      	ldr	r0, [sp, #12]
 80133e2:	f004 fb81 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
 80133e6:	2302      	movs	r3, #2
 80133e8:	4659      	mov	r1, fp
 80133ea:	fb90 faf3 	sdiv	sl, r0, r3
 80133ee:	9b05      	ldr	r3, [sp, #20]
 80133f0:	9803      	ldr	r0, [sp, #12]
 80133f2:	461a      	mov	r2, r3
 80133f4:	f004 fb78 	bl	8017ae8 <_ZN8touchgfx6muldivElll>
 80133f8:	2302      	movs	r3, #2
 80133fa:	eba8 010a 	sub.w	r1, r8, sl
 80133fe:	fb90 fbf3 	sdiv	fp, r0, r3
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	eb0b 0209 	add.w	r2, fp, r9
 8013408:	4638      	mov	r0, r7
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	4798      	blx	r3
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	9a02      	ldr	r2, [sp, #8]
 8013412:	4638      	mov	r0, r7
 8013414:	9901      	ldr	r1, [sp, #4]
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	445a      	add	r2, fp
 801341a:	eba1 010a 	sub.w	r1, r1, sl
 801341e:	4798      	blx	r3
 8013420:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8013424:	42a6      	cmp	r6, r4
 8013426:	db02      	blt.n	801342e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8013428:	b00b      	add	sp, #44	; 0x2c
 801342a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342e:	9b00      	ldr	r3, [sp, #0]
 8013430:	9a04      	ldr	r2, [sp, #16]
 8013432:	42a2      	cmp	r2, r4
 8013434:	bf08      	it	eq
 8013436:	f04f 33ff 	moveq.w	r3, #4294967295
 801343a:	e7a7      	b.n	801338c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0801343c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 801343c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013440:	6943      	ldr	r3, [r0, #20]
 8013442:	b0a2      	sub	sp, #136	; 0x88
 8013444:	4606      	mov	r6, r0
 8013446:	460f      	mov	r7, r1
 8013448:	2b00      	cmp	r3, #0
 801344a:	d06c      	beq.n	8013526 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 801344c:	695c      	ldr	r4, [r3, #20]
 801344e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013452:	2b01      	cmp	r3, #1
 8013454:	dc04      	bgt.n	8013460 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8013456:	2401      	movs	r4, #1
 8013458:	4620      	mov	r0, r4
 801345a:	b022      	add	sp, #136	; 0x88
 801345c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013460:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013464:	ad22      	add	r5, sp, #136	; 0x88
 8013466:	011b      	lsls	r3, r3, #4
 8013468:	f845 3d70 	str.w	r3, [r5, #-112]!
 801346c:	4628      	mov	r0, r5
 801346e:	f7ff fc79 	bl	8012d64 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8013472:	8839      	ldrh	r1, [r7, #0]
 8013474:	88ba      	ldrh	r2, [r7, #4]
 8013476:	b280      	uxth	r0, r0
 8013478:	6823      	ldr	r3, [r4, #0]
 801347a:	440a      	add	r2, r1
 801347c:	1a09      	subs	r1, r1, r0
 801347e:	4402      	add	r2, r0
 8013480:	f10d 000e 	add.w	r0, sp, #14
 8013484:	b209      	sxth	r1, r1
 8013486:	9000      	str	r0, [sp, #0]
 8013488:	b212      	sxth	r2, r2
 801348a:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 801348e:	4620      	mov	r0, r4
 8013490:	ab03      	add	r3, sp, #12
 8013492:	47c0      	blx	r8
 8013494:	2800      	cmp	r0, #0
 8013496:	d0de      	beq.n	8013456 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8013498:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 801349c:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 80134a0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 80134a4:	18ca      	adds	r2, r1, r3
 80134a6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80134aa:	f8ad 1012 	strh.w	r1, [sp, #18]
 80134ae:	4639      	mov	r1, r7
 80134b0:	1a9b      	subs	r3, r3, r2
 80134b2:	2200      	movs	r2, #0
 80134b4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80134b8:	a804      	add	r0, sp, #16
 80134ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80134be:	f8ad 2010 	strh.w	r2, [sp, #16]
 80134c2:	f7fd feaf 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 80134c6:	aa04      	add	r2, sp, #16
 80134c8:	4631      	mov	r1, r6
 80134ca:	4628      	mov	r0, r5
 80134cc:	f00e f8ec 	bl	80216a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 80134d0:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 80134d4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80134d8:	2f00      	cmp	r7, #0
 80134da:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80134de:	dd03      	ble.n	80134e8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 80134e0:	42bb      	cmp	r3, r7
 80134e2:	da01      	bge.n	80134e8 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 80134e4:	42ba      	cmp	r2, r7
 80134e6:	da11      	bge.n	801350c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 80134e8:	9200      	str	r2, [sp, #0]
 80134ea:	4622      	mov	r2, r4
 80134ec:	4629      	mov	r1, r5
 80134ee:	4630      	mov	r0, r6
 80134f0:	f7ff ff1a 	bl	8013328 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 80134f4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80134f8:	4628      	mov	r0, r5
 80134fa:	f00e f991 	bl	8021820 <_ZN8touchgfx6Canvas6renderEh>
 80134fe:	4b0b      	ldr	r3, [pc, #44]	; (801352c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8013500:	4604      	mov	r4, r0
 8013502:	a80e      	add	r0, sp, #56	; 0x38
 8013504:	9306      	str	r3, [sp, #24]
 8013506:	f000 fddd 	bl	80140c4 <_ZN8touchgfx7OutlineD1Ev>
 801350a:	e7a5      	b.n	8013458 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801350c:	1e7a      	subs	r2, r7, #1
 801350e:	4629      	mov	r1, r5
 8013510:	4630      	mov	r0, r6
 8013512:	b212      	sxth	r2, r2
 8013514:	9200      	str	r2, [sp, #0]
 8013516:	4622      	mov	r2, r4
 8013518:	f7ff ff06 	bl	8013328 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801351c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	463b      	mov	r3, r7
 8013524:	e7e1      	b.n	80134ea <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8013526:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 801352a:	deff      	udf	#255	; 0xff
 801352c:	0802510c 	.word	0x0802510c

08013530 <_ZN8touchgfx21GraphWrapAndClearData5clearEv>:
 8013530:	b510      	push	{r4, lr}
 8013532:	4604      	mov	r4, r0
 8013534:	f7ff fa16 	bl	8012964 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013538:	4620      	mov	r0, r4
 801353a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801353e:	f7fe bffa 	b.w	8012536 <_ZN8touchgfx17AbstractDataGraph5clearEv>

08013542 <_ZN8touchgfx21GraphWrapAndClearData8addValueEi>:
 8013542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013544:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8013548:	460f      	mov	r7, r1
 801354a:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 801354e:	4604      	mov	r4, r0
 8013550:	1c6b      	adds	r3, r5, #1
 8013552:	4629      	mov	r1, r5
 8013554:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
 8013558:	6803      	ldr	r3, [r0, #0]
 801355a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 801355e:	4798      	blx	r3
 8013560:	f846 7020 	str.w	r7, [r6, r0, lsl #2]
 8013564:	b915      	cbnz	r5, 801356c <_ZN8touchgfx21GraphWrapAndClearData8addValueEi+0x2a>
 8013566:	4620      	mov	r0, r4
 8013568:	f7ff f9fc 	bl	8012964 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 801356c:	4620      	mov	r0, r4
 801356e:	4629      	mov	r1, r5
 8013570:	f7ff f9d0 	bl	8012914 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013574:	4628      	mov	r0, r5
 8013576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013578 <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv>:
 8013578:	f9b0 111e 	ldrsh.w	r1, [r0, #286]	; 0x11e
 801357c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8013580:	4291      	cmp	r1, r2
 8013582:	db03      	blt.n	801358c <_ZN8touchgfx21GraphWrapAndClearData14beforeAddValueEv+0x14>
 8013584:	6803      	ldr	r3, [r0, #0]
 8013586:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801358a:	4718      	bx	r3
 801358c:	4770      	bx	lr

0801358e <_ZN8touchgfx15GraphScrollData5clearEv>:
 801358e:	b510      	push	{r4, lr}
 8013590:	4604      	mov	r4, r0
 8013592:	f7fe ffd0 	bl	8012536 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8013596:	2300      	movs	r3, #0
 8013598:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 801359c:	bd10      	pop	{r4, pc}

0801359e <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 801359e:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80135a2:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d101      	bne.n	80135ae <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 80135aa:	f7ff b9db 	b.w	8012964 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80135ae:	4770      	bx	lr

080135b0 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 80135b0:	b538      	push	{r3, r4, r5, lr}
 80135b2:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 80135b6:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 80135ba:	42a5      	cmp	r5, r4
 80135bc:	da04      	bge.n	80135c8 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 80135be:	6803      	ldr	r3, [r0, #0]
 80135c0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80135c4:	4798      	blx	r3
 80135c6:	bd38      	pop	{r3, r4, r5, pc}
 80135c8:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80135cc:	4408      	add	r0, r1
 80135ce:	1b00      	subs	r0, r0, r4
 80135d0:	e7f9      	b.n	80135c6 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

080135d2 <_ZN8touchgfx15GraphScrollData8addValueEi>:
 80135d2:	b570      	push	{r4, r5, r6, lr}
 80135d4:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 80135d8:	4604      	mov	r4, r0
 80135da:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 80135de:	1c6b      	adds	r3, r5, #1
 80135e0:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 80135e4:	b21b      	sxth	r3, r3
 80135e6:	42ae      	cmp	r6, r5
 80135e8:	fb93 f0f2 	sdiv	r0, r3, r2
 80135ec:	bf08      	it	eq
 80135ee:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 80135f2:	4296      	cmp	r6, r2
 80135f4:	fb02 3010 	mls	r0, r2, r0, r3
 80135f8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80135fc:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 8013600:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8013604:	d108      	bne.n	8013618 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8013606:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801360a:	f004 f8a6 	bl	801775a <_ZNK8touchgfx8Drawable10invalidateEv>
 801360e:	4620      	mov	r0, r4
 8013610:	f7ff f9a8 	bl	8012964 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8013614:	4628      	mov	r0, r5
 8013616:	bd70      	pop	{r4, r5, r6, pc}
 8013618:	4629      	mov	r1, r5
 801361a:	4620      	mov	r0, r4
 801361c:	f7ff f97a 	bl	8012914 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8013620:	e7f8      	b.n	8013614 <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08013622 <_ZN8touchgfx8TextArea8setWidthEs>:
 8013622:	b530      	push	{r4, r5, lr}
 8013624:	b085      	sub	sp, #20
 8013626:	6803      	ldr	r3, [r0, #0]
 8013628:	4604      	mov	r4, r0
 801362a:	8101      	strh	r1, [r0, #8]
 801362c:	466d      	mov	r5, sp
 801362e:	4601      	mov	r1, r0
 8013630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013634:	343c      	adds	r4, #60	; 0x3c
 8013636:	4628      	mov	r0, r5
 8013638:	4798      	blx	r3
 801363a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801363e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013642:	b005      	add	sp, #20
 8013644:	bd30      	pop	{r4, r5, pc}

08013646 <_ZN8touchgfx8TextArea9setHeightEs>:
 8013646:	b530      	push	{r4, r5, lr}
 8013648:	b085      	sub	sp, #20
 801364a:	6803      	ldr	r3, [r0, #0]
 801364c:	4604      	mov	r4, r0
 801364e:	8141      	strh	r1, [r0, #10]
 8013650:	466d      	mov	r5, sp
 8013652:	4601      	mov	r1, r0
 8013654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013658:	343c      	adds	r4, #60	; 0x3c
 801365a:	4628      	mov	r0, r5
 801365c:	4798      	blx	r3
 801365e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013666:	b005      	add	sp, #20
 8013668:	bd30      	pop	{r4, r5, pc}

0801366a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 801366a:	2200      	movs	r2, #0
 801366c:	8002      	strh	r2, [r0, #0]
 801366e:	8042      	strh	r2, [r0, #2]
 8013670:	8082      	strh	r2, [r0, #4]
 8013672:	80c2      	strh	r2, [r0, #6]
 8013674:	4770      	bx	lr

08013676 <_ZN8touchgfx8TextArea8setAlphaEh>:
 8013676:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 801367a:	4770      	bx	lr

0801367c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	6803      	ldr	r3, [r0, #0]
 8013680:	4604      	mov	r4, r0
 8013682:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013684:	460d      	mov	r5, r1
 8013686:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8013688:	4b08      	ldr	r3, [pc, #32]	; (80136ac <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013690:	4b07      	ldr	r3, [pc, #28]	; (80136b0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013698:	6803      	ldr	r3, [r0, #0]
 801369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801369c:	4798      	blx	r3
 801369e:	1a29      	subs	r1, r5, r0
 80136a0:	4633      	mov	r3, r6
 80136a2:	4620      	mov	r0, r4
 80136a4:	b209      	sxth	r1, r1
 80136a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136aa:	4718      	bx	r3
 80136ac:	2400ea8c 	.word	0x2400ea8c
 80136b0:	2400ea94 	.word	0x2400ea94

080136b4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	6803      	ldr	r3, [r0, #0]
 80136b8:	4604      	mov	r4, r0
 80136ba:	4615      	mov	r5, r2
 80136bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136be:	4798      	blx	r3
 80136c0:	6823      	ldr	r3, [r4, #0]
 80136c2:	4629      	mov	r1, r5
 80136c4:	4620      	mov	r0, r4
 80136c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80136c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136cc:	4718      	bx	r3

080136ce <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80136ce:	2000      	movs	r0, #0
 80136d0:	4770      	bx	lr

080136d2 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 80136d2:	2000      	movs	r0, #0
 80136d4:	4770      	bx	lr
	...

080136d8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80136da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80136dc:	881b      	ldrh	r3, [r3, #0]
 80136de:	4293      	cmp	r3, r2
 80136e0:	bf81      	itttt	hi
 80136e2:	4b06      	ldrhi	r3, [pc, #24]	; (80136fc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80136e4:	681b      	ldrhi	r3, [r3, #0]
 80136e6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80136ea:	7858      	ldrbhi	r0, [r3, #1]
 80136ec:	bf8c      	ite	hi
 80136ee:	f000 0003 	andhi.w	r0, r0, #3
 80136f2:	2000      	movls	r0, #0
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	2400ea90 	.word	0x2400ea90
 80136fc:	2400ea8c 	.word	0x2400ea8c

08013700 <_ZN8touchgfx8TextAreaD1Ev>:
 8013700:	4770      	bx	lr
	...

08013704 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8013704:	4b11      	ldr	r3, [pc, #68]	; (801374c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8013706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801370a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801370c:	4604      	mov	r4, r0
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	428b      	cmp	r3, r1
 8013712:	d918      	bls.n	8013746 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8013714:	6803      	ldr	r3, [r0, #0]
 8013716:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8013718:	4b0d      	ldr	r3, [pc, #52]	; (8013750 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801371a:	6818      	ldr	r0, [r3, #0]
 801371c:	f7f3 f838 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 8013720:	6823      	ldr	r3, [r4, #0]
 8013722:	4606      	mov	r6, r0
 8013724:	4620      	mov	r0, r4
 8013726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013728:	4798      	blx	r3
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	4607      	mov	r7, r0
 801372e:	4620      	mov	r0, r4
 8013730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013734:	4798      	blx	r3
 8013736:	463a      	mov	r2, r7
 8013738:	4603      	mov	r3, r0
 801373a:	4631      	mov	r1, r6
 801373c:	4620      	mov	r0, r4
 801373e:	46ac      	mov	ip, r5
 8013740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	4760      	bx	ip
 8013746:	2000      	movs	r0, #0
 8013748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801374c:	2400ea90 	.word	0x2400ea90
 8013750:	2400ea98 	.word	0x2400ea98

08013754 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8013754:	4b18      	ldr	r3, [pc, #96]	; (80137b8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8013756:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801375a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801375c:	4604      	mov	r4, r0
 801375e:	881b      	ldrh	r3, [r3, #0]
 8013760:	428b      	cmp	r3, r1
 8013762:	d926      	bls.n	80137b2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8013764:	4b15      	ldr	r3, [pc, #84]	; (80137bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801376c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8013770:	4b13      	ldr	r3, [pc, #76]	; (80137c0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8013772:	7855      	ldrb	r5, [r2, #1]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801377a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801377e:	6833      	ldr	r3, [r6, #0]
 8013780:	69df      	ldr	r7, [r3, #28]
 8013782:	4b10      	ldr	r3, [pc, #64]	; (80137c4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8013784:	6818      	ldr	r0, [r3, #0]
 8013786:	f7f3 f803 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	4680      	mov	r8, r0
 801378e:	4620      	mov	r0, r4
 8013790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013792:	4798      	blx	r3
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	4681      	mov	r9, r0
 8013798:	4620      	mov	r0, r4
 801379a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801379e:	4798      	blx	r3
 80137a0:	464b      	mov	r3, r9
 80137a2:	9000      	str	r0, [sp, #0]
 80137a4:	4642      	mov	r2, r8
 80137a6:	4629      	mov	r1, r5
 80137a8:	4630      	mov	r0, r6
 80137aa:	47b8      	blx	r7
 80137ac:	b003      	add	sp, #12
 80137ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137b2:	2000      	movs	r0, #0
 80137b4:	e7fa      	b.n	80137ac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 80137b6:	bf00      	nop
 80137b8:	2400ea90 	.word	0x2400ea90
 80137bc:	2400ea8c 	.word	0x2400ea8c
 80137c0:	2400ea94 	.word	0x2400ea94
 80137c4:	2400ea98 	.word	0x2400ea98

080137c8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80137c8:	b40e      	push	{r1, r2, r3}
 80137ca:	4b30      	ldr	r3, [pc, #192]	; (801388c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 80137cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137d0:	881a      	ldrh	r2, [r3, #0]
 80137d2:	b09d      	sub	sp, #116	; 0x74
 80137d4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80137d6:	4604      	mov	r4, r0
 80137d8:	429a      	cmp	r2, r3
 80137da:	d954      	bls.n	8013886 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 80137dc:	aa26      	add	r2, sp, #152	; 0x98
 80137de:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8013890 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 80137e2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013894 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 80137e6:	9202      	str	r2, [sp, #8]
 80137e8:	f8d9 2000 	ldr.w	r2, [r9]
 80137ec:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80137f0:	f8d8 3000 	ldr.w	r3, [r8]
 80137f4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80137f8:	682b      	ldr	r3, [r5, #0]
 80137fa:	4628      	mov	r0, r5
 80137fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137fe:	4798      	blx	r3
 8013800:	4606      	mov	r6, r0
 8013802:	b207      	sxth	r7, r0
 8013804:	a803      	add	r0, sp, #12
 8013806:	f004 fccb 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 801380a:	682b      	ldr	r3, [r5, #0]
 801380c:	4628      	mov	r0, r5
 801380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013810:	4798      	blx	r3
 8013812:	682b      	ldr	r3, [r5, #0]
 8013814:	4682      	mov	sl, r0
 8013816:	4628      	mov	r0, r5
 8013818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801381a:	4798      	blx	r3
 801381c:	4653      	mov	r3, sl
 801381e:	9000      	str	r0, [sp, #0]
 8013820:	a803      	add	r0, sp, #12
 8013822:	9a02      	ldr	r2, [sp, #8]
 8013824:	9925      	ldr	r1, [sp, #148]	; 0x94
 8013826:	f004 fd16 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801382a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801382c:	f8d9 3000 	ldr.w	r3, [r9]
 8013830:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8013834:	8925      	ldrh	r5, [r4, #8]
 8013836:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801383a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801383e:	eba5 050c 	sub.w	r5, r5, ip
 8013842:	784a      	ldrb	r2, [r1, #1]
 8013844:	f8d8 3000 	ldr.w	r3, [r8]
 8013848:	b22d      	sxth	r5, r5
 801384a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801384e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8013852:	9500      	str	r5, [sp, #0]
 8013854:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013858:	a803      	add	r0, sp, #12
 801385a:	f002 fb0d 	bl	8015e78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801385e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8013862:	b203      	sxth	r3, r0
 8013864:	18b9      	adds	r1, r7, r2
 8013866:	2900      	cmp	r1, #0
 8013868:	dd0b      	ble.n	8013882 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801386a:	3b01      	subs	r3, #1
 801386c:	fb13 f302 	smulbb	r3, r3, r2
 8013870:	fb16 3300 	smlabb	r3, r6, r0, r3
 8013874:	b21f      	sxth	r7, r3
 8013876:	4638      	mov	r0, r7
 8013878:	b01d      	add	sp, #116	; 0x74
 801387a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801387e:	b003      	add	sp, #12
 8013880:	4770      	bx	lr
 8013882:	2b00      	cmp	r3, #0
 8013884:	dcf7      	bgt.n	8013876 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8013886:	2700      	movs	r7, #0
 8013888:	e7f5      	b.n	8013876 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801388a:	bf00      	nop
 801388c:	2400ea90 	.word	0x2400ea90
 8013890:	2400ea8c 	.word	0x2400ea8c
 8013894:	2400ea94 	.word	0x2400ea94

08013898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8013898:	4bbd      	ldr	r3, [pc, #756]	; (8013b90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801389a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801389e:	460c      	mov	r4, r1
 80138a0:	881b      	ldrh	r3, [r3, #0]
 80138a2:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 80138a4:	b0a9      	sub	sp, #164	; 0xa4
 80138a6:	4680      	mov	r8, r0
 80138a8:	428b      	cmp	r3, r1
 80138aa:	d809      	bhi.n	80138c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 80138ac:	2300      	movs	r3, #0
 80138ae:	f04f 32ff 	mov.w	r2, #4294967295
 80138b2:	6083      	str	r3, [r0, #8]
 80138b4:	e9c0 3200 	strd	r3, r2, [r0]
 80138b8:	4640      	mov	r0, r8
 80138ba:	b029      	add	sp, #164	; 0xa4
 80138bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138c0:	4eb4      	ldr	r6, [pc, #720]	; (8013b94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 80138c2:	6833      	ldr	r3, [r6, #0]
 80138c4:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80138c8:	4bb3      	ldr	r3, [pc, #716]	; (8013b98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80138d0:	4bb2      	ldr	r3, [pc, #712]	; (8013b9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 80138d2:	6818      	ldr	r0, [r3, #0]
 80138d4:	f7f2 ff5c 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 80138d8:	682b      	ldr	r3, [r5, #0]
 80138da:	4681      	mov	r9, r0
 80138dc:	4628      	mov	r0, r5
 80138de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138e0:	4798      	blx	r3
 80138e2:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 80138e4:	b203      	sxth	r3, r0
 80138e6:	4682      	mov	sl, r0
 80138e8:	4407      	add	r7, r0
 80138ea:	a80f      	add	r0, sp, #60	; 0x3c
 80138ec:	9304      	str	r3, [sp, #16]
 80138ee:	b2bb      	uxth	r3, r7
 80138f0:	9303      	str	r3, [sp, #12]
 80138f2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f040 80a5 	bne.w	8013a46 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 80138fc:	f004 fc50 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8013900:	682b      	ldr	r3, [r5, #0]
 8013902:	4628      	mov	r0, r5
 8013904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013906:	4798      	blx	r3
 8013908:	682b      	ldr	r3, [r5, #0]
 801390a:	4606      	mov	r6, r0
 801390c:	4628      	mov	r0, r5
 801390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013910:	4798      	blx	r3
 8013912:	6823      	ldr	r3, [r4, #0]
 8013914:	4607      	mov	r7, r0
 8013916:	4620      	mov	r0, r4
 8013918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801391a:	4798      	blx	r3
 801391c:	6823      	ldr	r3, [r4, #0]
 801391e:	4683      	mov	fp, r0
 8013920:	4620      	mov	r0, r4
 8013922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013926:	4798      	blx	r3
 8013928:	463b      	mov	r3, r7
 801392a:	4649      	mov	r1, r9
 801392c:	4632      	mov	r2, r6
 801392e:	2600      	movs	r6, #0
 8013930:	e9cd b000 	strd	fp, r0, [sp]
 8013934:	a80f      	add	r0, sp, #60	; 0x3c
 8013936:	4637      	mov	r7, r6
 8013938:	f004 fca2 	bl	8018280 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801393c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013940:	f8df b250 	ldr.w	fp, [pc, #592]	; 8013b94 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8013944:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013948:	bf0c      	ite	eq
 801394a:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 801394e:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8013952:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013954:	4629      	mov	r1, r5
 8013956:	f8db 3000 	ldr.w	r3, [fp]
 801395a:	a80f      	add	r0, sp, #60	; 0x3c
 801395c:	3701      	adds	r7, #1
 801395e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013962:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013966:	b2bf      	uxth	r7, r7
 8013968:	785b      	ldrb	r3, [r3, #1]
 801396a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801396e:	f001 ff9e 	bl	80158ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8013972:	9b03      	ldr	r3, [sp, #12]
 8013974:	4286      	cmp	r6, r0
 8013976:	eba9 0903 	sub.w	r9, r9, r3
 801397a:	bfb8      	it	lt
 801397c:	4606      	movlt	r6, r0
 801397e:	a80f      	add	r0, sp, #60	; 0x3c
 8013980:	fa0f f989 	sxth.w	r9, r9
 8013984:	b236      	sxth	r6, r6
 8013986:	f004 fc32 	bl	80181ee <_ZN8touchgfx12TextProvider11endOfStringEv>
 801398a:	b918      	cbnz	r0, 8013994 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 801398c:	7a2b      	ldrb	r3, [r5, #8]
 801398e:	444b      	add	r3, r9
 8013990:	2b00      	cmp	r3, #0
 8013992:	dcde      	bgt.n	8013952 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8013994:	9b03      	ldr	r3, [sp, #12]
 8013996:	4620      	mov	r0, r4
 8013998:	9a04      	ldr	r2, [sp, #16]
 801399a:	fb13 f707 	smulbb	r7, r3, r7
 801399e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80139a0:	f895 9009 	ldrb.w	r9, [r5, #9]
 80139a4:	1aff      	subs	r7, r7, r3
 80139a6:	b2bf      	uxth	r7, r7
 80139a8:	b23b      	sxth	r3, r7
 80139aa:	429a      	cmp	r2, r3
 80139ac:	bfa8      	it	ge
 80139ae:	4657      	movge	r7, sl
 80139b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80139b4:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80139b8:	6823      	ldr	r3, [r4, #0]
 80139ba:	444f      	add	r7, r9
 80139bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139be:	bf08      	it	eq
 80139c0:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 80139c4:	fa1f f987 	uxth.w	r9, r7
 80139c8:	bf18      	it	ne
 80139ca:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 80139ce:	4798      	blx	r3
 80139d0:	2801      	cmp	r0, #1
 80139d2:	fa0f f789 	sxth.w	r7, r9
 80139d6:	b2b3      	uxth	r3, r6
 80139d8:	f000 80e2 	beq.w	8013ba0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 80139dc:	2802      	cmp	r0, #2
 80139de:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 80139e2:	f000 80e3 	beq.w	8013bac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 80139e6:	7aea      	ldrb	r2, [r5, #11]
 80139e8:	b236      	sxth	r6, r6
 80139ea:	7b2d      	ldrb	r5, [r5, #12]
 80139ec:	1ab6      	subs	r6, r6, r2
 80139ee:	442a      	add	r2, r5
 80139f0:	fa1f fa86 	uxth.w	sl, r6
 80139f4:	4413      	add	r3, r2
 80139f6:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80139fa:	fa0f fb8a 	sxth.w	fp, sl
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	2a02      	cmp	r2, #2
 8013a02:	b21e      	sxth	r6, r3
 8013a04:	f000 80d6 	beq.w	8013bb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8013a08:	2a03      	cmp	r2, #3
 8013a0a:	f000 80de 	beq.w	8013bca <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8013a0e:	2a01      	cmp	r2, #1
 8013a10:	f040 80e6 	bne.w	8013be0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8013a14:	8925      	ldrh	r5, [r4, #8]
 8013a16:	4633      	mov	r3, r6
 8013a18:	463e      	mov	r6, r7
 8013a1a:	eba5 0909 	sub.w	r9, r5, r9
 8013a1e:	461f      	mov	r7, r3
 8013a20:	465d      	mov	r5, fp
 8013a22:	fa0f fb89 	sxth.w	fp, r9
 8013a26:	4b5d      	ldr	r3, [pc, #372]	; (8013b9c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8013a28:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013a2a:	6818      	ldr	r0, [r3, #0]
 8013a2c:	f7f2 feb0 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 8013a30:	f8a8 b000 	strh.w	fp, [r8]
 8013a34:	f8a8 5002 	strh.w	r5, [r8, #2]
 8013a38:	f8a8 6004 	strh.w	r6, [r8, #4]
 8013a3c:	f8a8 7006 	strh.w	r7, [r8, #6]
 8013a40:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a44:	e738      	b.n	80138b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8013a46:	f004 fbab 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8013a4a:	682b      	ldr	r3, [r5, #0]
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013a50:	4798      	blx	r3
 8013a52:	682b      	ldr	r3, [r5, #0]
 8013a54:	4607      	mov	r7, r0
 8013a56:	4628      	mov	r0, r5
 8013a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a5a:	4798      	blx	r3
 8013a5c:	6823      	ldr	r3, [r4, #0]
 8013a5e:	4683      	mov	fp, r0
 8013a60:	4620      	mov	r0, r4
 8013a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a64:	4798      	blx	r3
 8013a66:	6822      	ldr	r2, [r4, #0]
 8013a68:	9005      	str	r0, [sp, #20]
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8013a70:	4790      	blx	r2
 8013a72:	9b05      	ldr	r3, [sp, #20]
 8013a74:	463a      	mov	r2, r7
 8013a76:	4649      	mov	r1, r9
 8013a78:	9001      	str	r0, [sp, #4]
 8013a7a:	a80f      	add	r0, sp, #60	; 0x3c
 8013a7c:	9300      	str	r3, [sp, #0]
 8013a7e:	465b      	mov	r3, fp
 8013a80:	f004 fbfe 	bl	8018280 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8013a84:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013a88:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8013a8c:	af0f      	add	r7, sp, #60	; 0x3c
 8013a8e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013a92:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013a96:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013a98:	bf0a      	itet	eq
 8013a9a:	464a      	moveq	r2, r9
 8013a9c:	461a      	movne	r2, r3
 8013a9e:	4699      	moveq	r9, r3
 8013aa0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8013aa4:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8013aa8:	1ad2      	subs	r2, r2, r3
 8013aaa:	6833      	ldr	r3, [r6, #0]
 8013aac:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8013ab0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013ab4:	7859      	ldrb	r1, [r3, #1]
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	9707      	str	r7, [sp, #28]
 8013aba:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8013abe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8013ac6:	f88d 1020 	strb.w	r1, [sp, #32]
 8013aca:	9509      	str	r5, [sp, #36]	; 0x24
 8013acc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013ad0:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8013ad4:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8013ad8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013adc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8013ae0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8013ae4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013ae8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013aec:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013af0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013af4:	b350      	cbz	r0, 8013b4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013af6:	682b      	ldr	r3, [r5, #0]
 8013af8:	4628      	mov	r0, r5
 8013afa:	695b      	ldr	r3, [r3, #20]
 8013afc:	4798      	blx	r3
 8013afe:	4607      	mov	r7, r0
 8013b00:	b320      	cbz	r0, 8013b4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b04:	4639      	mov	r1, r7
 8013b06:	6803      	ldr	r3, [r0, #0]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	4798      	blx	r3
 8013b0c:	4606      	mov	r6, r0
 8013b0e:	b1e8      	cbz	r0, 8013b4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b10:	7b43      	ldrb	r3, [r0, #13]
 8013b12:	7a82      	ldrb	r2, [r0, #10]
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8013b20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8013b24:	2b06      	cmp	r3, #6
 8013b26:	d111      	bne.n	8013b4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8013b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b2a:	4632      	mov	r2, r6
 8013b2c:	4639      	mov	r1, r7
 8013b2e:	6803      	ldr	r3, [r0, #0]
 8013b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b32:	4798      	blx	r3
 8013b34:	7b73      	ldrb	r3, [r6, #13]
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013b3c:	7ab3      	ldrb	r3, [r6, #10]
 8013b3e:	4313      	orrs	r3, r2
 8013b40:	4418      	add	r0, r3
 8013b42:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013b46:	4418      	add	r0, r3
 8013b48:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8013b4c:	2600      	movs	r6, #0
 8013b4e:	4637      	mov	r7, r6
 8013b50:	a806      	add	r0, sp, #24
 8013b52:	3701      	adds	r7, #1
 8013b54:	f002 f88d 	bl	8015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8013b58:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8013b5c:	9b03      	ldr	r3, [sp, #12]
 8013b5e:	b2bf      	uxth	r7, r7
 8013b60:	4286      	cmp	r6, r0
 8013b62:	eba9 0903 	sub.w	r9, r9, r3
 8013b66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8013b6a:	bfb8      	it	lt
 8013b6c:	4606      	movlt	r6, r0
 8013b6e:	fa0f f989 	sxth.w	r9, r9
 8013b72:	b236      	sxth	r6, r6
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	f43f af0d 	beq.w	8013994 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b7a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	f47f af08 	bne.w	8013994 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b84:	7a2b      	ldrb	r3, [r5, #8]
 8013b86:	444b      	add	r3, r9
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	dce1      	bgt.n	8013b50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8013b8c:	e702      	b.n	8013994 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8013b8e:	bf00      	nop
 8013b90:	2400ea90 	.word	0x2400ea90
 8013b94:	2400ea8c 	.word	0x2400ea8c
 8013b98:	2400ea94 	.word	0x2400ea94
 8013b9c:	2400ea98 	.word	0x2400ea98
 8013ba0:	ebaa 0606 	sub.w	r6, sl, r6
 8013ba4:	2002      	movs	r0, #2
 8013ba6:	fb96 f6f0 	sdiv	r6, r6, r0
 8013baa:	e71c      	b.n	80139e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013bac:	441e      	add	r6, r3
 8013bae:	ebaa 0606 	sub.w	r6, sl, r6
 8013bb2:	e718      	b.n	80139e6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8013bb4:	8925      	ldrh	r5, [r4, #8]
 8013bb6:	1aed      	subs	r5, r5, r3
 8013bb8:	eba5 050a 	sub.w	r5, r5, sl
 8013bbc:	fa0f fb85 	sxth.w	fp, r5
 8013bc0:	8965      	ldrh	r5, [r4, #10]
 8013bc2:	eba5 0509 	sub.w	r5, r5, r9
 8013bc6:	b22d      	sxth	r5, r5
 8013bc8:	e72d      	b.n	8013a26 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013bca:	8965      	ldrh	r5, [r4, #10]
 8013bcc:	f04f 0b00 	mov.w	fp, #0
 8013bd0:	1aed      	subs	r5, r5, r3
 8013bd2:	4633      	mov	r3, r6
 8013bd4:	463e      	mov	r6, r7
 8013bd6:	eba5 050a 	sub.w	r5, r5, sl
 8013bda:	461f      	mov	r7, r3
 8013bdc:	b22d      	sxth	r5, r5
 8013bde:	e722      	b.n	8013a26 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8013be0:	2500      	movs	r5, #0
 8013be2:	e720      	b.n	8013a26 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08013be4 <_ZN8touchgfx8TextAreaD0Ev>:
 8013be4:	b510      	push	{r4, lr}
 8013be6:	4604      	mov	r4, r0
 8013be8:	2148      	movs	r1, #72	; 0x48
 8013bea:	f00d ff98 	bl	8021b1e <_ZdlPvj>
 8013bee:	4620      	mov	r0, r4
 8013bf0:	bd10      	pop	{r4, pc}
	...

08013bf4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8013bf4:	b513      	push	{r0, r1, r4, lr}
 8013bf6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	b1fb      	cbz	r3, 8013c3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013bfe:	4b16      	ldr	r3, [pc, #88]	; (8013c58 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8013c00:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	428b      	cmp	r3, r1
 8013c06:	d91a      	bls.n	8013c3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c08:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	dd16      	ble.n	8013c3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c10:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	dd12      	ble.n	8013c3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c18:	4b10      	ldr	r3, [pc, #64]	; (8013c5c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8013c1a:	6818      	ldr	r0, [r3, #0]
 8013c1c:	f7f2 fdb8 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 8013c20:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013c24:	6822      	ldr	r2, [r4, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	db06      	blt.n	8013c38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013c2a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	db02      	blt.n	8013c38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8013c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013c34:	4298      	cmp	r0, r3
 8013c36:	d004      	beq.n	8013c42 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8013c38:	6953      	ldr	r3, [r2, #20]
 8013c3a:	4620      	mov	r0, r4
 8013c3c:	4798      	blx	r3
 8013c3e:	b002      	add	sp, #8
 8013c40:	bd10      	pop	{r4, pc}
 8013c42:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8013c46:	466b      	mov	r3, sp
 8013c48:	6912      	ldr	r2, [r2, #16]
 8013c4a:	c903      	ldmia	r1, {r0, r1}
 8013c4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013c50:	4619      	mov	r1, r3
 8013c52:	4620      	mov	r0, r4
 8013c54:	4790      	blx	r2
 8013c56:	e7f2      	b.n	8013c3e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013c58:	2400ea90 	.word	0x2400ea90
 8013c5c:	2400ea98 	.word	0x2400ea98

08013c60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013c60:	4b45      	ldr	r3, [pc, #276]	; (8013d78 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c66:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013c68:	b08e      	sub	sp, #56	; 0x38
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	4293      	cmp	r3, r2
 8013c70:	d97e      	bls.n	8013d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013c72:	6808      	ldr	r0, [r1, #0]
 8013c74:	ab05      	add	r3, sp, #20
 8013c76:	6849      	ldr	r1, [r1, #4]
 8013c78:	4d40      	ldr	r5, [pc, #256]	; (8013d7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8013c7a:	c303      	stmia	r3!, {r0, r1}
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	6828      	ldr	r0, [r5, #0]
 8013c80:	f7f2 fd86 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 8013c84:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	db11      	blt.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c8c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	db0d      	blt.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013c96:	4298      	cmp	r0, r3
 8013c98:	d10a      	bne.n	8013cb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013c9a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8013c9e:	ab09      	add	r3, sp, #36	; 0x24
 8013ca0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ca4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ca8:	4619      	mov	r1, r3
 8013caa:	a805      	add	r0, sp, #20
 8013cac:	f7fd faba 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8013cb0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	dd5b      	ble.n	8013d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013cb8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	dd57      	ble.n	8013d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013cc0:	4f2f      	ldr	r7, [pc, #188]	; (8013d80 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013cc2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013cc4:	683b      	ldr	r3, [r7, #0]
 8013cc6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8013cca:	4b2e      	ldr	r3, [pc, #184]	; (8013d84 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013cd2:	2e00      	cmp	r6, #0
 8013cd4:	d04c      	beq.n	8013d70 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013cd6:	6823      	ldr	r3, [r4, #0]
 8013cd8:	4620      	mov	r0, r4
 8013cda:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8013cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ce0:	4798      	blx	r3
 8013ce2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8013cea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8013cee:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8013cf2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8013cf6:	785b      	ldrb	r3, [r3, #1]
 8013cf8:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8013cfc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013d00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013d02:	9609      	str	r6, [sp, #36]	; 0x24
 8013d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d08:	4b1f      	ldr	r3, [pc, #124]	; (8013d88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8013d0a:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8013d14:	910b      	str	r1, [sp, #44]	; 0x2c
 8013d16:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8013d1a:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8013d1e:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8013d22:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8013d26:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013d2a:	b10a      	cbz	r2, 8013d30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8013d2c:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8013d2e:	b906      	cbnz	r6, 8013d32 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8013d30:	689e      	ldr	r6, [r3, #8]
 8013d32:	af07      	add	r7, sp, #28
 8013d34:	4621      	mov	r1, r4
 8013d36:	4638      	mov	r0, r7
 8013d38:	f003 fdaa 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d3c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8013d3e:	6828      	ldr	r0, [r5, #0]
 8013d40:	f7f2 fd26 	bl	8006790 <_ZNK8touchgfx5Texts7getTextEt>
 8013d44:	6823      	ldr	r3, [r4, #0]
 8013d46:	4605      	mov	r5, r0
 8013d48:	4620      	mov	r0, r4
 8013d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d4c:	4798      	blx	r3
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	4680      	mov	r8, r0
 8013d52:	4620      	mov	r0, r4
 8013d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d58:	4798      	blx	r3
 8013d5a:	ab09      	add	r3, sp, #36	; 0x24
 8013d5c:	9501      	str	r5, [sp, #4]
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	ab05      	add	r3, sp, #20
 8013d62:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013d66:	4630      	mov	r0, r6
 8013d68:	e897 0006 	ldmia.w	r7, {r1, r2}
 8013d6c:	f7f2 fcc2 	bl	80066f4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013d70:	b00e      	add	sp, #56	; 0x38
 8013d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d76:	bf00      	nop
 8013d78:	2400ea90 	.word	0x2400ea90
 8013d7c:	2400ea98 	.word	0x2400ea98
 8013d80:	2400ea8c 	.word	0x2400ea8c
 8013d84:	2400ea94 	.word	0x2400ea94
 8013d88:	2400ea34 	.word	0x2400ea34

08013d8c <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8013d8c:	b570      	push	{r4, r5, r6, lr}
 8013d8e:	6803      	ldr	r3, [r0, #0]
 8013d90:	4604      	mov	r4, r0
 8013d92:	4615      	mov	r5, r2
 8013d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d96:	4798      	blx	r3
 8013d98:	6823      	ldr	r3, [r4, #0]
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013da4:	4718      	bx	r3
	...

08013da8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8013da8:	b538      	push	{r3, r4, r5, lr}
 8013daa:	4b0e      	ldr	r3, [pc, #56]	; (8013de4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013dac:	4604      	mov	r4, r0
 8013dae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d214      	bcs.n	8013de0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8013db6:	6803      	ldr	r3, [r0, #0]
 8013db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013dba:	4798      	blx	r3
 8013dbc:	6823      	ldr	r3, [r4, #0]
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dc4:	4798      	blx	r3
 8013dc6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013dca:	b22d      	sxth	r5, r5
 8013dcc:	4601      	mov	r1, r0
 8013dce:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8013dd2:	bf06      	itte	eq
 8013dd4:	4602      	moveq	r2, r0
 8013dd6:	4629      	moveq	r1, r5
 8013dd8:	462a      	movne	r2, r5
 8013dda:	4620      	mov	r0, r4
 8013ddc:	f7ff ffd6 	bl	8013d8c <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013de0:	bd38      	pop	{r3, r4, r5, pc}
 8013de2:	bf00      	nop
 8013de4:	2400ea90 	.word	0x2400ea90

08013de8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8013de8:	b530      	push	{r4, r5, lr}
 8013dea:	888b      	ldrh	r3, [r1, #4]
 8013dec:	b085      	sub	sp, #20
 8013dee:	4604      	mov	r4, r0
 8013df0:	8583      	strh	r3, [r0, #44]	; 0x2c
 8013df2:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8013df6:	b923      	cbnz	r3, 8013e02 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013df8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013dfc:	b90b      	cbnz	r3, 8013e02 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013dfe:	f7ff ffd3 	bl	8013da8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013e02:	6823      	ldr	r3, [r4, #0]
 8013e04:	466d      	mov	r5, sp
 8013e06:	4621      	mov	r1, r4
 8013e08:	343c      	adds	r4, #60	; 0x3c
 8013e0a:	4628      	mov	r0, r5
 8013e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e10:	4798      	blx	r3
 8013e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e1a:	b005      	add	sp, #20
 8013e1c:	bd30      	pop	{r4, r5, pc}

08013e1e <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013e1e:	2300      	movs	r3, #0
 8013e20:	8083      	strh	r3, [r0, #4]
 8013e22:	80c3      	strh	r3, [r0, #6]
 8013e24:	8003      	strh	r3, [r0, #0]
 8013e26:	8043      	strh	r3, [r0, #2]
 8013e28:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013e2c:	2bff      	cmp	r3, #255	; 0xff
 8013e2e:	bf01      	itttt	eq
 8013e30:	890b      	ldrheq	r3, [r1, #8]
 8013e32:	8083      	strheq	r3, [r0, #4]
 8013e34:	894b      	ldrheq	r3, [r1, #10]
 8013e36:	80c3      	strheq	r3, [r0, #6]
 8013e38:	4770      	bx	lr
	...

08013e3c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013e3e:	4604      	mov	r4, r0
 8013e40:	466b      	mov	r3, sp
 8013e42:	6808      	ldr	r0, [r1, #0]
 8013e44:	6849      	ldr	r1, [r1, #4]
 8013e46:	c303      	stmia	r3!, {r0, r1}
 8013e48:	6823      	ldr	r3, [r4, #0]
 8013e4a:	4669      	mov	r1, sp
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e50:	4798      	blx	r3
 8013e52:	4b08      	ldr	r3, [pc, #32]	; (8013e74 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013e5a:	b10a      	cbz	r2, 8013e60 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013e5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013e5e:	b900      	cbnz	r0, 8013e62 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013e60:	6898      	ldr	r0, [r3, #8]
 8013e62:	6803      	ldr	r3, [r0, #0]
 8013e64:	4669      	mov	r1, sp
 8013e66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013e68:	6a1d      	ldr	r5, [r3, #32]
 8013e6a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013e6e:	47a8      	blx	r5
 8013e70:	b003      	add	sp, #12
 8013e72:	bd30      	pop	{r4, r5, pc}
 8013e74:	2400ea34 	.word	0x2400ea34

08013e78 <_ZN8touchgfx3BoxD1Ev>:
 8013e78:	4770      	bx	lr

08013e7a <_ZN8touchgfx3BoxD0Ev>:
 8013e7a:	b510      	push	{r4, lr}
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	212c      	movs	r1, #44	; 0x2c
 8013e80:	f00d fe4d 	bl	8021b1e <_ZdlPvj>
 8013e84:	4620      	mov	r0, r4
 8013e86:	bd10      	pop	{r4, pc}

08013e88 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013e88:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013e8c:	b12a      	cbz	r2, 8013e9a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013e8e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013e92:	b112      	cbz	r2, 8013e9a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013e94:	6803      	ldr	r3, [r0, #0]
 8013e96:	695b      	ldr	r3, [r3, #20]
 8013e98:	4718      	bx	r3
 8013e9a:	4770      	bx	lr

08013e9c <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8013e9c:	4770      	bx	lr

08013e9e <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8013e9e:	b510      	push	{r4, lr}
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	2134      	movs	r1, #52	; 0x34
 8013ea4:	f00d fe3b 	bl	8021b1e <_ZdlPvj>
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	bd10      	pop	{r4, pc}

08013eac <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8013eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eb0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013eb2:	4604      	mov	r4, r0
 8013eb4:	460e      	mov	r6, r1
 8013eb6:	b08e      	sub	sp, #56	; 0x38
 8013eb8:	b218      	sxth	r0, r3
 8013eba:	8921      	ldrh	r1, [r4, #8]
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	8962      	ldrh	r2, [r4, #10]
 8013ec0:	f8ad 0000 	strh.w	r0, [sp]
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	f8ad 0002 	strh.w	r0, [sp, #2]
 8013eca:	1ac9      	subs	r1, r1, r3
 8013ecc:	1ad3      	subs	r3, r2, r3
 8013ece:	b209      	sxth	r1, r1
 8013ed0:	b21b      	sxth	r3, r3
 8013ed2:	2900      	cmp	r1, #0
 8013ed4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013ed8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013edc:	dd5e      	ble.n	8013f9c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	dd5c      	ble.n	8013f9c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8013ee2:	6830      	ldr	r0, [r6, #0]
 8013ee4:	ab02      	add	r3, sp, #8
 8013ee6:	6871      	ldr	r1, [r6, #4]
 8013ee8:	c303      	stmia	r3!, {r0, r1}
 8013eea:	4669      	mov	r1, sp
 8013eec:	a802      	add	r0, sp, #8
 8013eee:	f7fd f999 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	a902      	add	r1, sp, #8
 8013ef6:	f7ff ffa1 	bl	8013e3c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8013efa:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8013efc:	2800      	cmp	r0, #0
 8013efe:	d05f      	beq.n	8013fc0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013f00:	8963      	ldrh	r3, [r4, #10]
 8013f02:	b202      	sxth	r2, r0
 8013f04:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013f08:	2500      	movs	r5, #0
 8013f0a:	1a1f      	subs	r7, r3, r0
 8013f0c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8013f10:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013f14:	b21b      	sxth	r3, r3
 8013f16:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013f1a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8013f1e:	af04      	add	r7, sp, #16
 8013f20:	1a09      	subs	r1, r1, r0
 8013f22:	9506      	str	r5, [sp, #24]
 8013f24:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013f28:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013f2c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8013f30:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8013f34:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013f38:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013f3c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013f40:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8013f44:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8013f48:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013f4c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8013f50:	ab06      	add	r3, sp, #24
 8013f52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013f56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013f5a:	e887 0003 	stmia.w	r7, {r0, r1}
 8013f5e:	4631      	mov	r1, r6
 8013f60:	4638      	mov	r0, r7
 8013f62:	f7fd f95f 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8013f66:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	dd12      	ble.n	8013f94 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013f6e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dd0e      	ble.n	8013f94 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013f76:	6823      	ldr	r3, [r4, #0]
 8013f78:	4639      	mov	r1, r7
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f7e:	4798      	blx	r3
 8013f80:	f7fd fc20 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8013f84:	6803      	ldr	r3, [r0, #0]
 8013f86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013f88:	4639      	mov	r1, r7
 8013f8a:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8013f8e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013f92:	47c0      	blx	r8
 8013f94:	3501      	adds	r5, #1
 8013f96:	2d04      	cmp	r5, #4
 8013f98:	d1da      	bne.n	8013f50 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8013f9a:	e011      	b.n	8013fc0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013f9c:	6830      	ldr	r0, [r6, #0]
 8013f9e:	ab06      	add	r3, sp, #24
 8013fa0:	6871      	ldr	r1, [r6, #4]
 8013fa2:	c303      	stmia	r3!, {r0, r1}
 8013fa4:	6823      	ldr	r3, [r4, #0]
 8013fa6:	a906      	add	r1, sp, #24
 8013fa8:	4620      	mov	r0, r4
 8013faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fac:	4798      	blx	r3
 8013fae:	f7fd fc09 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8013fb2:	6803      	ldr	r3, [r0, #0]
 8013fb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013fb6:	a906      	add	r1, sp, #24
 8013fb8:	6a1d      	ldr	r5, [r3, #32]
 8013fba:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013fbe:	47a8      	blx	r5
 8013fc0:	b00e      	add	sp, #56	; 0x38
 8013fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013fc6 <_ZN8touchgfx5ImageD1Ev>:
 8013fc6:	4770      	bx	lr

08013fc8 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	880b      	ldrh	r3, [r1, #0]
 8013fcc:	460d      	mov	r5, r1
 8013fce:	4604      	mov	r4, r0
 8013fd0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013fd2:	4608      	mov	r0, r1
 8013fd4:	f005 f9a6 	bl	8019324 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013fd8:	4606      	mov	r6, r0
 8013fda:	4628      	mov	r0, r5
 8013fdc:	f005 f9d6 	bl	801938c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	4605      	mov	r5, r0
 8013fe4:	4631      	mov	r1, r6
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fea:	4798      	blx	r3
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	4629      	mov	r1, r5
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ff8:	4718      	bx	r3

08013ffa <_ZN8touchgfx5ImageD0Ev>:
 8013ffa:	b510      	push	{r4, lr}
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	212c      	movs	r1, #44	; 0x2c
 8014000:	f00d fd8d 	bl	8021b1e <_ZdlPvj>
 8014004:	4620      	mov	r0, r4
 8014006:	bd10      	pop	{r4, pc}

08014008 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8014008:	b510      	push	{r4, lr}
 801400a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801400e:	4604      	mov	r4, r0
 8014010:	2bff      	cmp	r3, #255	; 0xff
 8014012:	d006      	beq.n	8014022 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8014014:	2300      	movs	r3, #0
 8014016:	8003      	strh	r3, [r0, #0]
 8014018:	8043      	strh	r3, [r0, #2]
 801401a:	8083      	strh	r3, [r0, #4]
 801401c:	80c3      	strh	r3, [r0, #6]
 801401e:	4620      	mov	r0, r4
 8014020:	bd10      	pop	{r4, pc}
 8014022:	3126      	adds	r1, #38	; 0x26
 8014024:	f005 f9e6 	bl	80193f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8014028:	e7f9      	b.n	801401e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801402a <_ZNK8touchgfx5Image17invalidateContentEv>:
 801402a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801402e:	b12a      	cbz	r2, 801403c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014030:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8014034:	b112      	cbz	r2, 801403c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8014036:	6803      	ldr	r3, [r0, #0]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	4718      	bx	r3
 801403c:	4770      	bx	lr
	...

08014040 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8014040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	b088      	sub	sp, #32
 8014048:	2500      	movs	r5, #0
 801404a:	460f      	mov	r7, r1
 801404c:	f854 3b26 	ldr.w	r3, [r4], #38
 8014050:	a904      	add	r1, sp, #16
 8014052:	4606      	mov	r6, r0
 8014054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014056:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801405a:	4798      	blx	r3
 801405c:	4620      	mov	r0, r4
 801405e:	f005 f961 	bl	8019324 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014062:	4680      	mov	r8, r0
 8014064:	4620      	mov	r0, r4
 8014066:	f005 f991 	bl	801938c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801406a:	9506      	str	r5, [sp, #24]
 801406c:	ad06      	add	r5, sp, #24
 801406e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8014072:	4639      	mov	r1, r7
 8014074:	f8ad 801c 	strh.w	r8, [sp, #28]
 8014078:	4628      	mov	r0, r5
 801407a:	f7fd f8d3 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801407e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8014082:	2b00      	cmp	r3, #0
 8014084:	dd19      	ble.n	80140ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8014086:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801408a:	2b00      	cmp	r3, #0
 801408c:	dd15      	ble.n	80140ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801408e:	4b0c      	ldr	r3, [pc, #48]	; (80140c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8014096:	b10a      	cbz	r2, 801409c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8014098:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801409a:	b900      	cbnz	r0, 801409e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801409c:	6898      	ldr	r0, [r3, #8]
 801409e:	2701      	movs	r7, #1
 80140a0:	6801      	ldr	r1, [r0, #0]
 80140a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80140a6:	9702      	str	r7, [sp, #8]
 80140a8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80140ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80140b0:	e9cd 5600 	strd	r5, r6, [sp]
 80140b4:	688d      	ldr	r5, [r1, #8]
 80140b6:	4621      	mov	r1, r4
 80140b8:	47a8      	blx	r5
 80140ba:	b008      	add	sp, #32
 80140bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140c0:	2400ea34 	.word	0x2400ea34

080140c4 <_ZN8touchgfx7OutlineD1Ev>:
 80140c4:	4770      	bx	lr

080140c6 <_ZN8touchgfx7OutlineD0Ev>:
 80140c6:	b510      	push	{r4, lr}
 80140c8:	4604      	mov	r4, r0
 80140ca:	2130      	movs	r1, #48	; 0x30
 80140cc:	f00d fd27 	bl	8021b1e <_ZdlPvj>
 80140d0:	4620      	mov	r0, r4
 80140d2:	bd10      	pop	{r4, pc}

080140d4 <_ZN8touchgfx7Outline5resetEv>:
 80140d4:	b510      	push	{r4, lr}
 80140d6:	4604      	mov	r4, r0
 80140d8:	f000 fe86 	bl	8014de8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80140dc:	60e0      	str	r0, [r4, #12]
 80140de:	f000 fe89 	bl	8014df4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80140e2:	68e3      	ldr	r3, [r4, #12]
 80140e4:	08c0      	lsrs	r0, r0, #3
 80140e6:	2200      	movs	r2, #0
 80140e8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80140ec:	6123      	str	r3, [r4, #16]
 80140ee:	3801      	subs	r0, #1
 80140f0:	60a2      	str	r2, [r4, #8]
 80140f2:	6060      	str	r0, [r4, #4]
 80140f4:	8019      	strh	r1, [r3, #0]
 80140f6:	8059      	strh	r1, [r3, #2]
 80140f8:	809a      	strh	r2, [r3, #4]
 80140fa:	80da      	strh	r2, [r3, #6]
 80140fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140fe:	f023 0301 	bic.w	r3, r3, #1
 8014102:	f043 0302 	orr.w	r3, r3, #2
 8014106:	6263      	str	r3, [r4, #36]	; 0x24
 8014108:	bd10      	pop	{r4, pc}
	...

0801410c <_ZN8touchgfx7OutlineC1Ev>:
 801410c:	4b0a      	ldr	r3, [pc, #40]	; (8014138 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801410e:	b510      	push	{r4, lr}
 8014110:	6003      	str	r3, [r0, #0]
 8014112:	2300      	movs	r3, #0
 8014114:	4604      	mov	r4, r0
 8014116:	6243      	str	r3, [r0, #36]	; 0x24
 8014118:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801411c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014120:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8014124:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8014128:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801412c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8014130:	f7ff ffd0 	bl	80140d4 <_ZN8touchgfx7Outline5resetEv>
 8014134:	4620      	mov	r0, r4
 8014136:	bd10      	pop	{r4, pc}
 8014138:	08024df8 	.word	0x08024df8

0801413c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014140:	b093      	sub	sp, #76	; 0x4c
 8014142:	1156      	asrs	r6, r2, #5
 8014144:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014146:	9305      	str	r3, [sp, #20]
 8014148:	1153      	asrs	r3, r2, #5
 801414a:	f004 051f 	and.w	r5, r4, #31
 801414e:	9303      	str	r3, [sp, #12]
 8014150:	1163      	asrs	r3, r4, #5
 8014152:	9504      	str	r5, [sp, #16]
 8014154:	1165      	asrs	r5, r4, #5
 8014156:	9306      	str	r3, [sp, #24]
 8014158:	f002 031f 	and.w	r3, r2, #31
 801415c:	42ae      	cmp	r6, r5
 801415e:	f040 80f4 	bne.w	801434a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8014162:	9c04      	ldr	r4, [sp, #16]
 8014164:	9a05      	ldr	r2, [sp, #20]
 8014166:	42a3      	cmp	r3, r4
 8014168:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801416c:	6902      	ldr	r2, [r0, #16]
 801416e:	d125      	bne.n	80141bc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8014170:	f9b2 3000 	ldrsh.w	r3, [r2]
 8014174:	459e      	cmp	lr, r3
 8014176:	d103      	bne.n	8014180 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8014178:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801417c:	429e      	cmp	r6, r3
 801417e:	d035      	beq.n	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014180:	88d1      	ldrh	r1, [r2, #6]
 8014182:	8893      	ldrh	r3, [r2, #4]
 8014184:	430b      	orrs	r3, r1
 8014186:	d010      	beq.n	80141aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014188:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801418c:	2b00      	cmp	r3, #0
 801418e:	db0c      	blt.n	80141aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014190:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8014192:	428b      	cmp	r3, r1
 8014194:	da09      	bge.n	80141aa <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014196:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801419a:	428b      	cmp	r3, r1
 801419c:	f103 0301 	add.w	r3, r3, #1
 80141a0:	bf38      	it	cc
 80141a2:	3208      	addcc	r2, #8
 80141a4:	6083      	str	r3, [r0, #8]
 80141a6:	bf38      	it	cc
 80141a8:	6102      	strcc	r2, [r0, #16]
 80141aa:	6903      	ldr	r3, [r0, #16]
 80141ac:	9a03      	ldr	r2, [sp, #12]
 80141ae:	f8a3 e000 	strh.w	lr, [r3]
 80141b2:	805a      	strh	r2, [r3, #2]
 80141b4:	2200      	movs	r2, #0
 80141b6:	809a      	strh	r2, [r3, #4]
 80141b8:	80da      	strh	r2, [r3, #6]
 80141ba:	e017      	b.n	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80141bc:	9c05      	ldr	r4, [sp, #20]
 80141be:	114e      	asrs	r6, r1, #5
 80141c0:	f001 0c1f 	and.w	ip, r1, #31
 80141c4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80141c8:	f004 041f 	and.w	r4, r4, #31
 80141cc:	4576      	cmp	r6, lr
 80141ce:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80141d2:	9402      	str	r4, [sp, #8]
 80141d4:	9c04      	ldr	r4, [sp, #16]
 80141d6:	eba4 0403 	sub.w	r4, r4, r3
 80141da:	d10a      	bne.n	80141f2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80141dc:	9b02      	ldr	r3, [sp, #8]
 80141de:	44a0      	add	r8, r4
 80141e0:	449c      	add	ip, r3
 80141e2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80141e6:	fb04 a40c 	mla	r4, r4, ip, sl
 80141ea:	80d4      	strh	r4, [r2, #6]
 80141ec:	b013      	add	sp, #76	; 0x4c
 80141ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f2:	9d05      	ldr	r5, [sp, #20]
 80141f4:	1a69      	subs	r1, r5, r1
 80141f6:	bf51      	iteee	pl
 80141f8:	f1cc 0520 	rsbpl	r5, ip, #32
 80141fc:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014200:	4249      	negmi	r1, r1
 8014202:	2500      	movmi	r5, #0
 8014204:	bf5d      	ittte	pl
 8014206:	436c      	mulpl	r4, r5
 8014208:	2520      	movpl	r5, #32
 801420a:	f04f 0901 	movpl.w	r9, #1
 801420e:	f04f 39ff 	movmi.w	r9, #4294967295
 8014212:	9501      	str	r5, [sp, #4]
 8014214:	9f01      	ldr	r7, [sp, #4]
 8014216:	444e      	add	r6, r9
 8014218:	fb94 f5f1 	sdiv	r5, r4, r1
 801421c:	fb01 4415 	mls	r4, r1, r5, r4
 8014220:	44bc      	add	ip, r7
 8014222:	2c00      	cmp	r4, #0
 8014224:	bfbc      	itt	lt
 8014226:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801422a:	1864      	addlt	r4, r4, r1
 801422c:	44a8      	add	r8, r5
 801422e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014232:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014236:	f8a2 c006 	strh.w	ip, [r2, #6]
 801423a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801423e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014242:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8014246:	ea58 0202 	orrs.w	r2, r8, r2
 801424a:	d011      	beq.n	8014270 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801424c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014250:	f1b8 0f00 	cmp.w	r8, #0
 8014254:	db0c      	blt.n	8014270 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8014256:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8014258:	4590      	cmp	r8, r2
 801425a:	da09      	bge.n	8014270 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801425c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8014260:	4590      	cmp	r8, r2
 8014262:	bf3c      	itt	cc
 8014264:	f10c 0208 	addcc.w	r2, ip, #8
 8014268:	6102      	strcc	r2, [r0, #16]
 801426a:	f108 0201 	add.w	r2, r8, #1
 801426e:	6082      	str	r2, [r0, #8]
 8014270:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014274:	2700      	movs	r7, #0
 8014276:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801427a:	45b6      	cmp	lr, r6
 801427c:	f8ac 6000 	strh.w	r6, [ip]
 8014280:	442b      	add	r3, r5
 8014282:	f8ac 2002 	strh.w	r2, [ip, #2]
 8014286:	f8ac 7004 	strh.w	r7, [ip, #4]
 801428a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801428e:	d04b      	beq.n	8014328 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8014290:	9f04      	ldr	r7, [sp, #16]
 8014292:	1a64      	subs	r4, r4, r1
 8014294:	f04f 0a00 	mov.w	sl, #0
 8014298:	1aff      	subs	r7, r7, r3
 801429a:	443d      	add	r5, r7
 801429c:	016d      	lsls	r5, r5, #5
 801429e:	fb95 f8f1 	sdiv	r8, r5, r1
 80142a2:	fb01 5518 	mls	r5, r1, r8, r5
 80142a6:	2d00      	cmp	r5, #0
 80142a8:	bfbc      	itt	lt
 80142aa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80142ae:	186d      	addlt	r5, r5, r1
 80142b0:	f108 0701 	add.w	r7, r8, #1
 80142b4:	9703      	str	r7, [sp, #12]
 80142b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80142ba:	1964      	adds	r4, r4, r5
 80142bc:	444e      	add	r6, r9
 80142be:	bf54      	ite	pl
 80142c0:	9f03      	ldrpl	r7, [sp, #12]
 80142c2:	4647      	movmi	r7, r8
 80142c4:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80142c8:	bf58      	it	pl
 80142ca:	1a64      	subpl	r4, r4, r1
 80142cc:	443b      	add	r3, r7
 80142ce:	44bb      	add	fp, r7
 80142d0:	f8ac b004 	strh.w	fp, [ip, #4]
 80142d4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80142d8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80142dc:	f8ac b006 	strh.w	fp, [ip, #6]
 80142e0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80142e4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80142e8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80142ec:	ea5b 0707 	orrs.w	r7, fp, r7
 80142f0:	d011      	beq.n	8014316 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80142f2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80142f6:	f1bb 0f00 	cmp.w	fp, #0
 80142fa:	db0c      	blt.n	8014316 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80142fc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80142fe:	45bb      	cmp	fp, r7
 8014300:	da09      	bge.n	8014316 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014302:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014306:	45bb      	cmp	fp, r7
 8014308:	bf3c      	itt	cc
 801430a:	f10c 0708 	addcc.w	r7, ip, #8
 801430e:	6107      	strcc	r7, [r0, #16]
 8014310:	f10b 0701 	add.w	r7, fp, #1
 8014314:	6087      	str	r7, [r0, #8]
 8014316:	6907      	ldr	r7, [r0, #16]
 8014318:	45b6      	cmp	lr, r6
 801431a:	803e      	strh	r6, [r7, #0]
 801431c:	807a      	strh	r2, [r7, #2]
 801431e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014322:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014326:	d1c6      	bne.n	80142b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8014328:	9a04      	ldr	r2, [sp, #16]
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	6902      	ldr	r2, [r0, #16]
 801432e:	8891      	ldrh	r1, [r2, #4]
 8014330:	88d6      	ldrh	r6, [r2, #6]
 8014332:	4419      	add	r1, r3
 8014334:	8091      	strh	r1, [r2, #4]
 8014336:	9902      	ldr	r1, [sp, #8]
 8014338:	f101 0c20 	add.w	ip, r1, #32
 801433c:	9901      	ldr	r1, [sp, #4]
 801433e:	ebac 0c01 	sub.w	ip, ip, r1
 8014342:	fb03 630c 	mla	r3, r3, ip, r6
 8014346:	80d3      	strh	r3, [r2, #6]
 8014348:	e750      	b.n	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801434a:	9d05      	ldr	r5, [sp, #20]
 801434c:	1aa2      	subs	r2, r4, r2
 801434e:	eba5 0501 	sub.w	r5, r5, r1
 8014352:	9202      	str	r2, [sp, #8]
 8014354:	9508      	str	r5, [sp, #32]
 8014356:	f140 8128 	bpl.w	80145aa <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801435a:	9a03      	ldr	r2, [sp, #12]
 801435c:	2a00      	cmp	r2, #0
 801435e:	f6ff af45 	blt.w	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014362:	9a02      	ldr	r2, [sp, #8]
 8014364:	f04f 34ff 	mov.w	r4, #4294967295
 8014368:	4252      	negs	r2, r2
 801436a:	940b      	str	r4, [sp, #44]	; 0x2c
 801436c:	2400      	movs	r4, #0
 801436e:	9202      	str	r2, [sp, #8]
 8014370:	9a06      	ldr	r2, [sp, #24]
 8014372:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8014376:	9206      	str	r2, [sp, #24]
 8014378:	462a      	mov	r2, r5
 801437a:	435a      	muls	r2, r3
 801437c:	9401      	str	r4, [sp, #4]
 801437e:	9c02      	ldr	r4, [sp, #8]
 8014380:	9d02      	ldr	r5, [sp, #8]
 8014382:	fb92 f4f4 	sdiv	r4, r2, r4
 8014386:	fb05 2214 	mls	r2, r5, r4, r2
 801438a:	2a00      	cmp	r2, #0
 801438c:	9207      	str	r2, [sp, #28]
 801438e:	bfbc      	itt	lt
 8014390:	1952      	addlt	r2, r2, r5
 8014392:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014396:	6905      	ldr	r5, [r0, #16]
 8014398:	bfb8      	it	lt
 801439a:	9207      	strlt	r2, [sp, #28]
 801439c:	eb04 0901 	add.w	r9, r4, r1
 80143a0:	9a01      	ldr	r2, [sp, #4]
 80143a2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80143a6:	429a      	cmp	r2, r3
 80143a8:	f040 8111 	bne.w	80145ce <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80143ac:	f9b5 3000 	ldrsh.w	r3, [r5]
 80143b0:	429e      	cmp	r6, r3
 80143b2:	d104      	bne.n	80143be <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80143b4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80143b8:	9a03      	ldr	r2, [sp, #12]
 80143ba:	429a      	cmp	r2, r3
 80143bc:	d01b      	beq.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80143be:	88ea      	ldrh	r2, [r5, #6]
 80143c0:	88ab      	ldrh	r3, [r5, #4]
 80143c2:	4313      	orrs	r3, r2
 80143c4:	d010      	beq.n	80143e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80143c6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80143ca:	2a00      	cmp	r2, #0
 80143cc:	db0c      	blt.n	80143e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80143ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80143d0:	429a      	cmp	r2, r3
 80143d2:	da09      	bge.n	80143e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80143d4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80143d8:	429a      	cmp	r2, r3
 80143da:	f102 0201 	add.w	r2, r2, #1
 80143de:	bf38      	it	cc
 80143e0:	3508      	addcc	r5, #8
 80143e2:	6082      	str	r2, [r0, #8]
 80143e4:	bf38      	it	cc
 80143e6:	6105      	strcc	r5, [r0, #16]
 80143e8:	6903      	ldr	r3, [r0, #16]
 80143ea:	9a03      	ldr	r2, [sp, #12]
 80143ec:	801e      	strh	r6, [r3, #0]
 80143ee:	805a      	strh	r2, [r3, #2]
 80143f0:	2200      	movs	r2, #0
 80143f2:	809a      	strh	r2, [r3, #4]
 80143f4:	80da      	strh	r2, [r3, #6]
 80143f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80143f8:	9a03      	ldr	r2, [sp, #12]
 80143fa:	6901      	ldr	r1, [r0, #16]
 80143fc:	441a      	add	r2, r3
 80143fe:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014402:	42b3      	cmp	r3, r6
 8014404:	d103      	bne.n	801440e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8014406:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801440a:	429a      	cmp	r2, r3
 801440c:	d01a      	beq.n	8014444 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801440e:	88cc      	ldrh	r4, [r1, #6]
 8014410:	888b      	ldrh	r3, [r1, #4]
 8014412:	4323      	orrs	r3, r4
 8014414:	d010      	beq.n	8014438 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014416:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801441a:	2c00      	cmp	r4, #0
 801441c:	db0c      	blt.n	8014438 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801441e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014420:	429c      	cmp	r4, r3
 8014422:	da09      	bge.n	8014438 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014424:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014428:	429c      	cmp	r4, r3
 801442a:	f104 0401 	add.w	r4, r4, #1
 801442e:	bf38      	it	cc
 8014430:	3108      	addcc	r1, #8
 8014432:	6084      	str	r4, [r0, #8]
 8014434:	bf38      	it	cc
 8014436:	6101      	strcc	r1, [r0, #16]
 8014438:	6903      	ldr	r3, [r0, #16]
 801443a:	2100      	movs	r1, #0
 801443c:	801e      	strh	r6, [r3, #0]
 801443e:	805a      	strh	r2, [r3, #2]
 8014440:	8099      	strh	r1, [r3, #4]
 8014442:	80d9      	strh	r1, [r3, #6]
 8014444:	9b06      	ldr	r3, [sp, #24]
 8014446:	4293      	cmp	r3, r2
 8014448:	f000 8082 	beq.w	8014550 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801444c:	9b08      	ldr	r3, [sp, #32]
 801444e:	9902      	ldr	r1, [sp, #8]
 8014450:	015b      	lsls	r3, r3, #5
 8014452:	9c02      	ldr	r4, [sp, #8]
 8014454:	fb93 f1f1 	sdiv	r1, r3, r1
 8014458:	fb04 3311 	mls	r3, r4, r1, r3
 801445c:	9103      	str	r1, [sp, #12]
 801445e:	2b00      	cmp	r3, #0
 8014460:	9308      	str	r3, [sp, #32]
 8014462:	da04      	bge.n	801446e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8014464:	1e4b      	subs	r3, r1, #1
 8014466:	9303      	str	r3, [sp, #12]
 8014468:	9b08      	ldr	r3, [sp, #32]
 801446a:	4423      	add	r3, r4
 801446c:	9308      	str	r3, [sp, #32]
 801446e:	9b07      	ldr	r3, [sp, #28]
 8014470:	464f      	mov	r7, r9
 8014472:	9902      	ldr	r1, [sp, #8]
 8014474:	2600      	movs	r6, #0
 8014476:	1a5b      	subs	r3, r3, r1
 8014478:	9307      	str	r3, [sp, #28]
 801447a:	9b01      	ldr	r3, [sp, #4]
 801447c:	f1c3 0320 	rsb	r3, r3, #32
 8014480:	930e      	str	r3, [sp, #56]	; 0x38
 8014482:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014484:	9b01      	ldr	r3, [sp, #4]
 8014486:	1a5b      	subs	r3, r3, r1
 8014488:	930a      	str	r3, [sp, #40]	; 0x28
 801448a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801448e:	185b      	adds	r3, r3, r1
 8014490:	bf58      	it	pl
 8014492:	9902      	ldrpl	r1, [sp, #8]
 8014494:	9307      	str	r3, [sp, #28]
 8014496:	bf57      	itett	pl
 8014498:	1a5b      	subpl	r3, r3, r1
 801449a:	9903      	ldrmi	r1, [sp, #12]
 801449c:	9307      	strpl	r3, [sp, #28]
 801449e:	9b03      	ldrpl	r3, [sp, #12]
 80144a0:	bf58      	it	pl
 80144a2:	1c59      	addpl	r1, r3, #1
 80144a4:	2a00      	cmp	r2, #0
 80144a6:	4489      	add	r9, r1
 80144a8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80144ac:	db2e      	blt.n	801450c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80144ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80144b0:	4293      	cmp	r3, r2
 80144b2:	dd2b      	ble.n	801450c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80144b4:	9c01      	ldr	r4, [sp, #4]
 80144b6:	6905      	ldr	r5, [r0, #16]
 80144b8:	46a0      	mov	r8, r4
 80144ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80144bc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80144c0:	45a0      	cmp	r8, r4
 80144c2:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80144c6:	f040 814c 	bne.w	8014762 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80144ca:	f9b5 1000 	ldrsh.w	r1, [r5]
 80144ce:	4551      	cmp	r1, sl
 80144d0:	d103      	bne.n	80144da <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80144d2:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80144d6:	4291      	cmp	r1, r2
 80144d8:	d018      	beq.n	801450c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80144da:	ea5c 010e 	orrs.w	r1, ip, lr
 80144de:	d00f      	beq.n	8014500 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80144e0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80144e4:	2900      	cmp	r1, #0
 80144e6:	db0b      	blt.n	8014500 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80144e8:	428b      	cmp	r3, r1
 80144ea:	dd09      	ble.n	8014500 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80144ec:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80144f0:	4299      	cmp	r1, r3
 80144f2:	f101 0101 	add.w	r1, r1, #1
 80144f6:	bf38      	it	cc
 80144f8:	3508      	addcc	r5, #8
 80144fa:	6081      	str	r1, [r0, #8]
 80144fc:	bf38      	it	cc
 80144fe:	6105      	strcc	r5, [r0, #16]
 8014500:	6903      	ldr	r3, [r0, #16]
 8014502:	f8a3 a000 	strh.w	sl, [r3]
 8014506:	805a      	strh	r2, [r3, #2]
 8014508:	809e      	strh	r6, [r3, #4]
 801450a:	80de      	strh	r6, [r3, #6]
 801450c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801450e:	6901      	ldr	r1, [r0, #16]
 8014510:	441a      	add	r2, r3
 8014512:	88cc      	ldrh	r4, [r1, #6]
 8014514:	888b      	ldrh	r3, [r1, #4]
 8014516:	4323      	orrs	r3, r4
 8014518:	d010      	beq.n	801453c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801451a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801451e:	2c00      	cmp	r4, #0
 8014520:	db0c      	blt.n	801453c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014522:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014524:	429c      	cmp	r4, r3
 8014526:	da09      	bge.n	801453c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014528:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801452c:	429c      	cmp	r4, r3
 801452e:	f104 0401 	add.w	r4, r4, #1
 8014532:	bf38      	it	cc
 8014534:	3108      	addcc	r1, #8
 8014536:	6084      	str	r4, [r0, #8]
 8014538:	bf38      	it	cc
 801453a:	6101      	strcc	r1, [r0, #16]
 801453c:	6903      	ldr	r3, [r0, #16]
 801453e:	464f      	mov	r7, r9
 8014540:	f8a3 a000 	strh.w	sl, [r3]
 8014544:	805a      	strh	r2, [r3, #2]
 8014546:	809e      	strh	r6, [r3, #4]
 8014548:	80de      	strh	r6, [r3, #6]
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	4293      	cmp	r3, r2
 801454e:	d19c      	bne.n	801448a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	6907      	ldr	r7, [r0, #16]
 8014554:	f1c3 0620 	rsb	r6, r3, #32
 8014558:	9b05      	ldr	r3, [sp, #20]
 801455a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801455e:	9b04      	ldr	r3, [sp, #16]
 8014560:	429e      	cmp	r6, r3
 8014562:	f040 81c7 	bne.w	80148f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8014566:	f9b7 3000 	ldrsh.w	r3, [r7]
 801456a:	459e      	cmp	lr, r3
 801456c:	d104      	bne.n	8014578 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801456e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014572:	429a      	cmp	r2, r3
 8014574:	f43f ae3a 	beq.w	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014578:	88f9      	ldrh	r1, [r7, #6]
 801457a:	88bb      	ldrh	r3, [r7, #4]
 801457c:	430b      	orrs	r3, r1
 801457e:	d010      	beq.n	80145a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014584:	2b00      	cmp	r3, #0
 8014586:	db0c      	blt.n	80145a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014588:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801458a:	428b      	cmp	r3, r1
 801458c:	da09      	bge.n	80145a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801458e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014592:	428b      	cmp	r3, r1
 8014594:	f103 0301 	add.w	r3, r3, #1
 8014598:	bf38      	it	cc
 801459a:	3708      	addcc	r7, #8
 801459c:	6083      	str	r3, [r0, #8]
 801459e:	bf38      	it	cc
 80145a0:	6107      	strcc	r7, [r0, #16]
 80145a2:	6903      	ldr	r3, [r0, #16]
 80145a4:	f8a3 e000 	strh.w	lr, [r3]
 80145a8:	e603      	b.n	80141b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80145aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80145ac:	9c03      	ldr	r4, [sp, #12]
 80145ae:	42a2      	cmp	r2, r4
 80145b0:	f6ff ae1c 	blt.w	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80145b4:	9c06      	ldr	r4, [sp, #24]
 80145b6:	42a2      	cmp	r2, r4
 80145b8:	9c08      	ldr	r4, [sp, #32]
 80145ba:	bfbc      	itt	lt
 80145bc:	3201      	addlt	r2, #1
 80145be:	9206      	strlt	r2, [sp, #24]
 80145c0:	f1c3 0220 	rsb	r2, r3, #32
 80145c4:	4362      	muls	r2, r4
 80145c6:	2401      	movs	r4, #1
 80145c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80145ca:	2420      	movs	r4, #32
 80145cc:	e6d6      	b.n	801437c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80145ce:	ea4f 1861 	mov.w	r8, r1, asr #5
 80145d2:	f009 021f 	and.w	r2, r9, #31
 80145d6:	f001 011f 	and.w	r1, r1, #31
 80145da:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80145de:	920c      	str	r2, [sp, #48]	; 0x30
 80145e0:	45b0      	cmp	r8, r6
 80145e2:	9a01      	ldr	r2, [sp, #4]
 80145e4:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80145e8:	eba2 0203 	sub.w	r2, r2, r3
 80145ec:	d108      	bne.n	8014600 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80145ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145f0:	4496      	add	lr, r2
 80145f2:	4419      	add	r1, r3
 80145f4:	f8a5 e004 	strh.w	lr, [r5, #4]
 80145f8:	fb02 a101 	mla	r1, r2, r1, sl
 80145fc:	80e9      	strh	r1, [r5, #6]
 80145fe:	e6fa      	b.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014600:	2c00      	cmp	r4, #0
 8014602:	f2c0 80a7 	blt.w	8014754 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8014606:	2701      	movs	r7, #1
 8014608:	f1c1 0c20 	rsb	ip, r1, #32
 801460c:	970a      	str	r7, [sp, #40]	; 0x28
 801460e:	2720      	movs	r7, #32
 8014610:	fb02 f20c 	mul.w	r2, r2, ip
 8014614:	9709      	str	r7, [sp, #36]	; 0x24
 8014616:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014618:	fb92 fcf4 	sdiv	ip, r2, r4
 801461c:	fb04 221c 	mls	r2, r4, ip, r2
 8014620:	4439      	add	r1, r7
 8014622:	2a00      	cmp	r2, #0
 8014624:	bfbc      	itt	lt
 8014626:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801462a:	1912      	addlt	r2, r2, r4
 801462c:	fb0c a101 	mla	r1, ip, r1, sl
 8014630:	44e6      	add	lr, ip
 8014632:	80e9      	strh	r1, [r5, #6]
 8014634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014636:	f8a5 e004 	strh.w	lr, [r5, #4]
 801463a:	eb08 0501 	add.w	r5, r8, r1
 801463e:	6901      	ldr	r1, [r0, #16]
 8014640:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014644:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8014648:	ea58 070e 	orrs.w	r7, r8, lr
 801464c:	d010      	beq.n	8014670 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801464e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014652:	f1be 0f00 	cmp.w	lr, #0
 8014656:	db0b      	blt.n	8014670 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014658:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801465a:	45be      	cmp	lr, r7
 801465c:	da08      	bge.n	8014670 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 801465e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014662:	45be      	cmp	lr, r7
 8014664:	bf3c      	itt	cc
 8014666:	3108      	addcc	r1, #8
 8014668:	6101      	strcc	r1, [r0, #16]
 801466a:	f10e 0101 	add.w	r1, lr, #1
 801466e:	6081      	str	r1, [r0, #8]
 8014670:	6901      	ldr	r1, [r0, #16]
 8014672:	f04f 0e00 	mov.w	lr, #0
 8014676:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801467a:	42ae      	cmp	r6, r5
 801467c:	800d      	strh	r5, [r1, #0]
 801467e:	4463      	add	r3, ip
 8014680:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014684:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014688:	f8a1 e006 	strh.w	lr, [r1, #6]
 801468c:	d053      	beq.n	8014736 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801468e:	9901      	ldr	r1, [sp, #4]
 8014690:	1b12      	subs	r2, r2, r4
 8014692:	1ac9      	subs	r1, r1, r3
 8014694:	4461      	add	r1, ip
 8014696:	0149      	lsls	r1, r1, #5
 8014698:	fb91 fef4 	sdiv	lr, r1, r4
 801469c:	fb04 111e 	mls	r1, r4, lr, r1
 80146a0:	2900      	cmp	r1, #0
 80146a2:	bfbc      	itt	lt
 80146a4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 80146a8:	1909      	addlt	r1, r1, r4
 80146aa:	f10e 0701 	add.w	r7, lr, #1
 80146ae:	970d      	str	r7, [sp, #52]	; 0x34
 80146b0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 80146b4:	1852      	adds	r2, r2, r1
 80146b6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80146b8:	bf54      	ite	pl
 80146ba:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 80146be:	46f4      	movmi	ip, lr
 80146c0:	f8ba b004 	ldrh.w	fp, [sl, #4]
 80146c4:	bf58      	it	pl
 80146c6:	1b12      	subpl	r2, r2, r4
 80146c8:	4463      	add	r3, ip
 80146ca:	443d      	add	r5, r7
 80146cc:	44e3      	add	fp, ip
 80146ce:	f8aa b004 	strh.w	fp, [sl, #4]
 80146d2:	f8ba b006 	ldrh.w	fp, [sl, #6]
 80146d6:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80146da:	f8aa b006 	strh.w	fp, [sl, #6]
 80146de:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80146e2:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80146e6:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80146ea:	ea5b 070a 	orrs.w	r7, fp, sl
 80146ee:	d014      	beq.n	801471a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80146f0:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80146f4:	f1ba 0f00 	cmp.w	sl, #0
 80146f8:	db0f      	blt.n	801471a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80146fa:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80146fc:	45ba      	cmp	sl, r7
 80146fe:	da0c      	bge.n	801471a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014700:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014704:	45ba      	cmp	sl, r7
 8014706:	f10a 0a01 	add.w	sl, sl, #1
 801470a:	bf38      	it	cc
 801470c:	f10c 0c08 	addcc.w	ip, ip, #8
 8014710:	f8c0 a008 	str.w	sl, [r0, #8]
 8014714:	bf38      	it	cc
 8014716:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801471a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801471e:	f04f 0700 	mov.w	r7, #0
 8014722:	42ae      	cmp	r6, r5
 8014724:	f8ac 5000 	strh.w	r5, [ip]
 8014728:	f8ac 8002 	strh.w	r8, [ip, #2]
 801472c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014730:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014734:	d1bc      	bne.n	80146b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8014736:	6904      	ldr	r4, [r0, #16]
 8014738:	9a01      	ldr	r2, [sp, #4]
 801473a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801473c:	1ad3      	subs	r3, r2, r3
 801473e:	88a2      	ldrh	r2, [r4, #4]
 8014740:	3120      	adds	r1, #32
 8014742:	441a      	add	r2, r3
 8014744:	80a2      	strh	r2, [r4, #4]
 8014746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014748:	1a89      	subs	r1, r1, r2
 801474a:	88e2      	ldrh	r2, [r4, #6]
 801474c:	fb03 2301 	mla	r3, r3, r1, r2
 8014750:	80e3      	strh	r3, [r4, #6]
 8014752:	e650      	b.n	80143f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014754:	f04f 37ff 	mov.w	r7, #4294967295
 8014758:	434a      	muls	r2, r1
 801475a:	4264      	negs	r4, r4
 801475c:	970a      	str	r7, [sp, #40]	; 0x28
 801475e:	2700      	movs	r7, #0
 8014760:	e758      	b.n	8014614 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8014762:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014766:	f009 031f 	and.w	r3, r9, #31
 801476a:	f007 071f 	and.w	r7, r7, #31
 801476e:	fa1f fc8c 	uxth.w	ip, ip
 8014772:	45d0      	cmp	r8, sl
 8014774:	930f      	str	r3, [sp, #60]	; 0x3c
 8014776:	fa1f fe8e 	uxth.w	lr, lr
 801477a:	d10a      	bne.n	8014792 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801477c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801477e:	449c      	add	ip, r3
 8014780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014782:	441f      	add	r7, r3
 8014784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014786:	f8a5 c004 	strh.w	ip, [r5, #4]
 801478a:	fb03 e707 	mla	r7, r3, r7, lr
 801478e:	80ef      	strh	r7, [r5, #6]
 8014790:	e6bc      	b.n	801450c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014792:	2900      	cmp	r1, #0
 8014794:	f2c0 80a6 	blt.w	80148e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014798:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801479a:	f1c7 0320 	rsb	r3, r7, #32
 801479e:	4363      	muls	r3, r4
 80147a0:	2401      	movs	r4, #1
 80147a2:	940d      	str	r4, [sp, #52]	; 0x34
 80147a4:	2420      	movs	r4, #32
 80147a6:	940c      	str	r4, [sp, #48]	; 0x30
 80147a8:	fb93 f4f1 	sdiv	r4, r3, r1
 80147ac:	fb01 3b14 	mls	fp, r1, r4, r3
 80147b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147b2:	f1bb 0f00 	cmp.w	fp, #0
 80147b6:	441f      	add	r7, r3
 80147b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80147ba:	bfbc      	itt	lt
 80147bc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80147c0:	448b      	addlt	fp, r1
 80147c2:	fb04 e707 	mla	r7, r4, r7, lr
 80147c6:	44a4      	add	ip, r4
 80147c8:	80ef      	strh	r7, [r5, #6]
 80147ca:	f8a5 c004 	strh.w	ip, [r5, #4]
 80147ce:	eb08 0503 	add.w	r5, r8, r3
 80147d2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80147d6:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80147da:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80147de:	ea5e 0307 	orrs.w	r3, lr, r7
 80147e2:	d011      	beq.n	8014808 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80147e4:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80147e8:	f1be 0f00 	cmp.w	lr, #0
 80147ec:	db0c      	blt.n	8014808 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80147ee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80147f0:	45be      	cmp	lr, r7
 80147f2:	da09      	bge.n	8014808 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80147f4:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80147f8:	45be      	cmp	lr, r7
 80147fa:	bf3c      	itt	cc
 80147fc:	f10c 0708 	addcc.w	r7, ip, #8
 8014800:	6107      	strcc	r7, [r0, #16]
 8014802:	f10e 0701 	add.w	r7, lr, #1
 8014806:	6087      	str	r7, [r0, #8]
 8014808:	6907      	ldr	r7, [r0, #16]
 801480a:	b213      	sxth	r3, r2
 801480c:	4555      	cmp	r5, sl
 801480e:	9310      	str	r3, [sp, #64]	; 0x40
 8014810:	807b      	strh	r3, [r7, #2]
 8014812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014814:	803d      	strh	r5, [r7, #0]
 8014816:	80be      	strh	r6, [r7, #4]
 8014818:	eb04 0c03 	add.w	ip, r4, r3
 801481c:	80fe      	strh	r6, [r7, #6]
 801481e:	d050      	beq.n	80148c2 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014820:	9b01      	ldr	r3, [sp, #4]
 8014822:	eba3 070c 	sub.w	r7, r3, ip
 8014826:	ebab 0301 	sub.w	r3, fp, r1
 801482a:	443c      	add	r4, r7
 801482c:	9309      	str	r3, [sp, #36]	; 0x24
 801482e:	0164      	lsls	r4, r4, #5
 8014830:	fb94 f8f1 	sdiv	r8, r4, r1
 8014834:	fb01 4418 	mls	r4, r1, r8, r4
 8014838:	2c00      	cmp	r4, #0
 801483a:	bfbc      	itt	lt
 801483c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014840:	1864      	addlt	r4, r4, r1
 8014842:	f108 0701 	add.w	r7, r8, #1
 8014846:	9711      	str	r7, [sp, #68]	; 0x44
 8014848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801484a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801484e:	191b      	adds	r3, r3, r4
 8014850:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014854:	bf54      	ite	pl
 8014856:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8014858:	4647      	movmi	r7, r8
 801485a:	9309      	str	r3, [sp, #36]	; 0x24
 801485c:	bf58      	it	pl
 801485e:	1a5b      	subpl	r3, r3, r1
 8014860:	44bb      	add	fp, r7
 8014862:	44bc      	add	ip, r7
 8014864:	bf58      	it	pl
 8014866:	9309      	strpl	r3, [sp, #36]	; 0x24
 8014868:	f8ae b004 	strh.w	fp, [lr, #4]
 801486c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014870:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014874:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014876:	f8ae b006 	strh.w	fp, [lr, #6]
 801487a:	443d      	add	r5, r7
 801487c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014880:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014884:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014888:	ea5b 0307 	orrs.w	r3, fp, r7
 801488c:	d011      	beq.n	80148b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801488e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8014892:	f1bb 0f00 	cmp.w	fp, #0
 8014896:	db0c      	blt.n	80148b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014898:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801489a:	45bb      	cmp	fp, r7
 801489c:	da09      	bge.n	80148b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 801489e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80148a2:	45bb      	cmp	fp, r7
 80148a4:	bf3c      	itt	cc
 80148a6:	f10e 0708 	addcc.w	r7, lr, #8
 80148aa:	6107      	strcc	r7, [r0, #16]
 80148ac:	f10b 0701 	add.w	r7, fp, #1
 80148b0:	6087      	str	r7, [r0, #8]
 80148b2:	6907      	ldr	r7, [r0, #16]
 80148b4:	4555      	cmp	r5, sl
 80148b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148b8:	803d      	strh	r5, [r7, #0]
 80148ba:	807b      	strh	r3, [r7, #2]
 80148bc:	80be      	strh	r6, [r7, #4]
 80148be:	80fe      	strh	r6, [r7, #6]
 80148c0:	d1c2      	bne.n	8014848 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80148c2:	9b01      	ldr	r3, [sp, #4]
 80148c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80148c6:	eba3 0c0c 	sub.w	ip, r3, ip
 80148ca:	6903      	ldr	r3, [r0, #16]
 80148cc:	3720      	adds	r7, #32
 80148ce:	8899      	ldrh	r1, [r3, #4]
 80148d0:	4461      	add	r1, ip
 80148d2:	8099      	strh	r1, [r3, #4]
 80148d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148d6:	1a7f      	subs	r7, r7, r1
 80148d8:	88d9      	ldrh	r1, [r3, #6]
 80148da:	fb0c 1c07 	mla	ip, ip, r7, r1
 80148de:	f8a3 c006 	strh.w	ip, [r3, #6]
 80148e2:	e613      	b.n	801450c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80148e4:	f04f 34ff 	mov.w	r4, #4294967295
 80148e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148ea:	4249      	negs	r1, r1
 80148ec:	940d      	str	r4, [sp, #52]	; 0x34
 80148ee:	2400      	movs	r4, #0
 80148f0:	437b      	muls	r3, r7
 80148f2:	e758      	b.n	80147a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80148f4:	9905      	ldr	r1, [sp, #20]
 80148f6:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80148fa:	f009 0c1f 	and.w	ip, r9, #31
 80148fe:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014902:	f001 011f 	and.w	r1, r1, #31
 8014906:	45f3      	cmp	fp, lr
 8014908:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801490c:	9102      	str	r1, [sp, #8]
 801490e:	9904      	ldr	r1, [sp, #16]
 8014910:	eba1 0406 	sub.w	r4, r1, r6
 8014914:	d108      	bne.n	8014928 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8014916:	9b02      	ldr	r3, [sp, #8]
 8014918:	44a0      	add	r8, r4
 801491a:	449c      	add	ip, r3
 801491c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014920:	fb04 a40c 	mla	r4, r4, ip, sl
 8014924:	80fc      	strh	r4, [r7, #6]
 8014926:	e461      	b.n	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014928:	9905      	ldr	r1, [sp, #20]
 801492a:	ebb1 0109 	subs.w	r1, r1, r9
 801492e:	bf51      	iteee	pl
 8014930:	f1cc 0520 	rsbpl	r5, ip, #32
 8014934:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014938:	4249      	negmi	r1, r1
 801493a:	2500      	movmi	r5, #0
 801493c:	bf5d      	ittte	pl
 801493e:	436c      	mulpl	r4, r5
 8014940:	2520      	movpl	r5, #32
 8014942:	f04f 0901 	movpl.w	r9, #1
 8014946:	f04f 39ff 	movmi.w	r9, #4294967295
 801494a:	9501      	str	r5, [sp, #4]
 801494c:	9b01      	ldr	r3, [sp, #4]
 801494e:	fb94 f5f1 	sdiv	r5, r4, r1
 8014952:	fb01 4415 	mls	r4, r1, r5, r4
 8014956:	449c      	add	ip, r3
 8014958:	eb0b 0309 	add.w	r3, fp, r9
 801495c:	2c00      	cmp	r4, #0
 801495e:	bfbc      	itt	lt
 8014960:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014964:	1864      	addlt	r4, r4, r1
 8014966:	44a8      	add	r8, r5
 8014968:	fb05 ac0c 	mla	ip, r5, ip, sl
 801496c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014970:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014974:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014978:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801497c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014980:	ea58 0707 	orrs.w	r7, r8, r7
 8014984:	d011      	beq.n	80149aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014986:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801498a:	f1b8 0f00 	cmp.w	r8, #0
 801498e:	db0c      	blt.n	80149aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014990:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014992:	45b8      	cmp	r8, r7
 8014994:	da09      	bge.n	80149aa <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014996:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801499a:	45b8      	cmp	r8, r7
 801499c:	bf3c      	itt	cc
 801499e:	f10c 0708 	addcc.w	r7, ip, #8
 80149a2:	6107      	strcc	r7, [r0, #16]
 80149a4:	f108 0701 	add.w	r7, r8, #1
 80149a8:	6087      	str	r7, [r0, #8]
 80149aa:	6907      	ldr	r7, [r0, #16]
 80149ac:	f04f 0c00 	mov.w	ip, #0
 80149b0:	b212      	sxth	r2, r2
 80149b2:	459e      	cmp	lr, r3
 80149b4:	803b      	strh	r3, [r7, #0]
 80149b6:	442e      	add	r6, r5
 80149b8:	807a      	strh	r2, [r7, #2]
 80149ba:	f8a7 c004 	strh.w	ip, [r7, #4]
 80149be:	f8a7 c006 	strh.w	ip, [r7, #6]
 80149c2:	d04b      	beq.n	8014a5c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80149c4:	9f04      	ldr	r7, [sp, #16]
 80149c6:	1a64      	subs	r4, r4, r1
 80149c8:	f04f 0a00 	mov.w	sl, #0
 80149cc:	1bbf      	subs	r7, r7, r6
 80149ce:	443d      	add	r5, r7
 80149d0:	016d      	lsls	r5, r5, #5
 80149d2:	fb95 f8f1 	sdiv	r8, r5, r1
 80149d6:	fb01 5518 	mls	r5, r1, r8, r5
 80149da:	4565      	cmp	r5, ip
 80149dc:	bfbc      	itt	lt
 80149de:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80149e2:	186d      	addlt	r5, r5, r1
 80149e4:	f108 0701 	add.w	r7, r8, #1
 80149e8:	9703      	str	r7, [sp, #12]
 80149ea:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80149ee:	1964      	adds	r4, r4, r5
 80149f0:	444b      	add	r3, r9
 80149f2:	bf54      	ite	pl
 80149f4:	9f03      	ldrpl	r7, [sp, #12]
 80149f6:	4647      	movmi	r7, r8
 80149f8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80149fc:	bf58      	it	pl
 80149fe:	1a64      	subpl	r4, r4, r1
 8014a00:	443e      	add	r6, r7
 8014a02:	44bb      	add	fp, r7
 8014a04:	f8ac b004 	strh.w	fp, [ip, #4]
 8014a08:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014a0c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014a10:	f8ac b006 	strh.w	fp, [ip, #6]
 8014a14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014a18:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014a1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014a20:	ea5b 0707 	orrs.w	r7, fp, r7
 8014a24:	d011      	beq.n	8014a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014a26:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014a2a:	f1bb 0f00 	cmp.w	fp, #0
 8014a2e:	db0c      	blt.n	8014a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014a30:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8014a32:	45bb      	cmp	fp, r7
 8014a34:	da09      	bge.n	8014a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014a36:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014a3a:	45bb      	cmp	fp, r7
 8014a3c:	bf3c      	itt	cc
 8014a3e:	f10c 0708 	addcc.w	r7, ip, #8
 8014a42:	6107      	strcc	r7, [r0, #16]
 8014a44:	f10b 0701 	add.w	r7, fp, #1
 8014a48:	6087      	str	r7, [r0, #8]
 8014a4a:	6907      	ldr	r7, [r0, #16]
 8014a4c:	459e      	cmp	lr, r3
 8014a4e:	803b      	strh	r3, [r7, #0]
 8014a50:	807a      	strh	r2, [r7, #2]
 8014a52:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014a56:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014a5a:	d1c6      	bne.n	80149ea <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014a5c:	9b04      	ldr	r3, [sp, #16]
 8014a5e:	1b9e      	subs	r6, r3, r6
 8014a60:	6903      	ldr	r3, [r0, #16]
 8014a62:	889a      	ldrh	r2, [r3, #4]
 8014a64:	4432      	add	r2, r6
 8014a66:	809a      	strh	r2, [r3, #4]
 8014a68:	9a02      	ldr	r2, [sp, #8]
 8014a6a:	f102 0c20 	add.w	ip, r2, #32
 8014a6e:	9a01      	ldr	r2, [sp, #4]
 8014a70:	ebac 0c02 	sub.w	ip, ip, r2
 8014a74:	88da      	ldrh	r2, [r3, #6]
 8014a76:	fb06 260c 	mla	r6, r6, ip, r2
 8014a7a:	80de      	strh	r6, [r3, #6]
 8014a7c:	f7ff bbb6 	b.w	80141ec <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014a80 <_ZN8touchgfx7Outline6lineToEii>:
 8014a80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014a82:	079b      	lsls	r3, r3, #30
 8014a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a86:	460e      	mov	r6, r1
 8014a88:	4615      	mov	r5, r2
 8014a8a:	d511      	bpl.n	8014ab0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014a8c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014a90:	ea86 0701 	eor.w	r7, r6, r1
 8014a94:	ea85 0302 	eor.w	r3, r5, r2
 8014a98:	433b      	orrs	r3, r7
 8014a9a:	d009      	beq.n	8014ab0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014a9c:	4633      	mov	r3, r6
 8014a9e:	9500      	str	r5, [sp, #0]
 8014aa0:	f7ff fb4c 	bl	801413c <_ZN8touchgfx7Outline10renderLineEiiii>
 8014aa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014aa6:	f043 0301 	orr.w	r3, r3, #1
 8014aaa:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014aae:	6243      	str	r3, [r0, #36]	; 0x24
 8014ab0:	b003      	add	sp, #12
 8014ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ab4 <_ZN8touchgfx7Outline6moveToEii>:
 8014ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ab6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014ab8:	4615      	mov	r5, r2
 8014aba:	4604      	mov	r4, r0
 8014abc:	460e      	mov	r6, r1
 8014abe:	079a      	lsls	r2, r3, #30
 8014ac0:	d401      	bmi.n	8014ac6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014ac2:	f7ff fb07 	bl	80140d4 <_ZN8touchgfx7Outline5resetEv>
 8014ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ac8:	07db      	lsls	r3, r3, #31
 8014aca:	d504      	bpl.n	8014ad6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014acc:	4620      	mov	r0, r4
 8014ace:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014ad2:	f7ff ffd5 	bl	8014a80 <_ZN8touchgfx7Outline6lineToEii>
 8014ad6:	6923      	ldr	r3, [r4, #16]
 8014ad8:	1170      	asrs	r0, r6, #5
 8014ada:	1169      	asrs	r1, r5, #5
 8014adc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ae0:	4290      	cmp	r0, r2
 8014ae2:	d103      	bne.n	8014aec <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014ae4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014ae8:	4291      	cmp	r1, r2
 8014aea:	d01a      	beq.n	8014b22 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014aec:	88df      	ldrh	r7, [r3, #6]
 8014aee:	889a      	ldrh	r2, [r3, #4]
 8014af0:	433a      	orrs	r2, r7
 8014af2:	d010      	beq.n	8014b16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014af4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014af8:	2a00      	cmp	r2, #0
 8014afa:	db0c      	blt.n	8014b16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014afc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8014afe:	42ba      	cmp	r2, r7
 8014b00:	da09      	bge.n	8014b16 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014b02:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8014b06:	42ba      	cmp	r2, r7
 8014b08:	f102 0201 	add.w	r2, r2, #1
 8014b0c:	bf38      	it	cc
 8014b0e:	3308      	addcc	r3, #8
 8014b10:	60a2      	str	r2, [r4, #8]
 8014b12:	bf38      	it	cc
 8014b14:	6123      	strcc	r3, [r4, #16]
 8014b16:	6923      	ldr	r3, [r4, #16]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	8018      	strh	r0, [r3, #0]
 8014b1c:	8059      	strh	r1, [r3, #2]
 8014b1e:	809a      	strh	r2, [r3, #4]
 8014b20:	80da      	strh	r2, [r3, #6]
 8014b22:	6166      	str	r6, [r4, #20]
 8014b24:	6225      	str	r5, [r4, #32]
 8014b26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014b2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b30:	b0d0      	sub	sp, #320	; 0x140
 8014b32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014b36:	466c      	mov	r4, sp
 8014b38:	4627      	mov	r7, r4
 8014b3a:	1a0d      	subs	r5, r1, r0
 8014b3c:	f100 0308 	add.w	r3, r0, #8
 8014b40:	2d48      	cmp	r5, #72	; 0x48
 8014b42:	f340 80d5 	ble.w	8014cf0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014b46:	112d      	asrs	r5, r5, #4
 8014b48:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014b4c:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014b50:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014b54:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014b58:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014b5c:	6816      	ldr	r6, [r2, #0]
 8014b5e:	6006      	str	r6, [r0, #0]
 8014b60:	6856      	ldr	r6, [r2, #4]
 8014b62:	6046      	str	r6, [r0, #4]
 8014b64:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014b68:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014b6c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014b70:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014b74:	f1a1 0208 	sub.w	r2, r1, #8
 8014b78:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014b7c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014b80:	4565      	cmp	r5, ip
 8014b82:	db06      	blt.n	8014b92 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8014b84:	d119      	bne.n	8014bba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014b86:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8014b8a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8014b8e:	42ae      	cmp	r6, r5
 8014b90:	dd13      	ble.n	8014bba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8014b92:	460e      	mov	r6, r1
 8014b94:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8014b98:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8014b9c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014ba0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8014ba4:	601d      	str	r5, [r3, #0]
 8014ba6:	6875      	ldr	r5, [r6, #4]
 8014ba8:	605d      	str	r5, [r3, #4]
 8014baa:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014bae:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014bb2:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014bb6:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014bba:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8014bbe:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8014bc2:	42ae      	cmp	r6, r5
 8014bc4:	db06      	blt.n	8014bd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8014bc6:	d116      	bne.n	8014bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014bc8:	f9b0 c000 	ldrsh.w	ip, [r0]
 8014bcc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8014bd0:	45ac      	cmp	ip, r5
 8014bd2:	da10      	bge.n	8014bf6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8014bd4:	681d      	ldr	r5, [r3, #0]
 8014bd6:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014bda:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014bde:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014be2:	6005      	str	r5, [r0, #0]
 8014be4:	685d      	ldr	r5, [r3, #4]
 8014be6:	f8a0 8008 	strh.w	r8, [r0, #8]
 8014bea:	6045      	str	r5, [r0, #4]
 8014bec:	8146      	strh	r6, [r0, #10]
 8014bee:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8014bf2:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8014bf6:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014bfa:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014bfe:	4565      	cmp	r5, ip
 8014c00:	db06      	blt.n	8014c10 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8014c02:	d119      	bne.n	8014c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014c04:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8014c08:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014c0c:	42ae      	cmp	r6, r5
 8014c0e:	da13      	bge.n	8014c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014c10:	460e      	mov	r6, r1
 8014c12:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014c16:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8014c1a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8014c1e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8014c22:	6005      	str	r5, [r0, #0]
 8014c24:	6875      	ldr	r5, [r6, #4]
 8014c26:	6045      	str	r5, [r0, #4]
 8014c28:	f821 9c08 	strh.w	r9, [r1, #-8]
 8014c2c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8014c30:	f821 8c04 	strh.w	r8, [r1, #-4]
 8014c34:	f821 ec02 	strh.w	lr, [r1, #-2]
 8014c38:	3308      	adds	r3, #8
 8014c3a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8014c3e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8014c42:	45e6      	cmp	lr, ip
 8014c44:	dbf8      	blt.n	8014c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014c46:	d105      	bne.n	8014c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014c48:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014c4c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8014c50:	42ae      	cmp	r6, r5
 8014c52:	dbf1      	blt.n	8014c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014c54:	4615      	mov	r5, r2
 8014c56:	3a08      	subs	r2, #8
 8014c58:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8014c5c:	45b4      	cmp	ip, r6
 8014c5e:	dbf9      	blt.n	8014c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014c60:	d105      	bne.n	8014c6e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8014c62:	f9b0 8000 	ldrsh.w	r8, [r0]
 8014c66:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014c6a:	45b0      	cmp	r8, r6
 8014c6c:	dbf2      	blt.n	8014c54 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8014c6e:	4293      	cmp	r3, r2
 8014c70:	f1a5 0608 	sub.w	r6, r5, #8
 8014c74:	d816      	bhi.n	8014ca4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8014c76:	f8d6 c000 	ldr.w	ip, [r6]
 8014c7a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8014c7e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8014c82:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8014c86:	f8c3 c000 	str.w	ip, [r3]
 8014c8a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8014c8e:	f8c3 c004 	str.w	ip, [r3, #4]
 8014c92:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014c96:	f825 ec06 	strh.w	lr, [r5, #-6]
 8014c9a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014c9e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014ca2:	e7c9      	b.n	8014c38 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8014ca4:	f8d6 e000 	ldr.w	lr, [r6]
 8014ca8:	f9b0 a000 	ldrsh.w	sl, [r0]
 8014cac:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8014cb0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8014cb4:	f8c0 e000 	str.w	lr, [r0]
 8014cb8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8014cbc:	1a16      	subs	r6, r2, r0
 8014cbe:	f8c0 e004 	str.w	lr, [r0, #4]
 8014cc2:	f825 ac08 	strh.w	sl, [r5, #-8]
 8014cc6:	f825 cc06 	strh.w	ip, [r5, #-6]
 8014cca:	f825 9c04 	strh.w	r9, [r5, #-4]
 8014cce:	f825 8c02 	strh.w	r8, [r5, #-2]
 8014cd2:	1acd      	subs	r5, r1, r3
 8014cd4:	10ed      	asrs	r5, r5, #3
 8014cd6:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8014cda:	bfb5      	itete	lt
 8014cdc:	e9c4 0200 	strdlt	r0, r2, [r4]
 8014ce0:	e9c4 3100 	strdge	r3, r1, [r4]
 8014ce4:	460a      	movlt	r2, r1
 8014ce6:	4603      	movge	r3, r0
 8014ce8:	3408      	adds	r4, #8
 8014cea:	4618      	mov	r0, r3
 8014cec:	4611      	mov	r1, r2
 8014cee:	e724      	b.n	8014b3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014cf0:	4299      	cmp	r1, r3
 8014cf2:	d927      	bls.n	8014d44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8014cf4:	f1a3 0210 	sub.w	r2, r3, #16
 8014cf8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8014cfc:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8014d00:	45ac      	cmp	ip, r5
 8014d02:	db06      	blt.n	8014d12 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8014d04:	d11c      	bne.n	8014d40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014d06:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014d0a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8014d0e:	42ae      	cmp	r6, r5
 8014d10:	da16      	bge.n	8014d40 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8014d12:	4615      	mov	r5, r2
 8014d14:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8014d18:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8014d1c:	3a08      	subs	r2, #8
 8014d1e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8014d22:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8014d26:	6196      	str	r6, [r2, #24]
 8014d28:	42a8      	cmp	r0, r5
 8014d2a:	686e      	ldr	r6, [r5, #4]
 8014d2c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8014d30:	61d6      	str	r6, [r2, #28]
 8014d32:	f8a2 c012 	strh.w	ip, [r2, #18]
 8014d36:	f8a2 8014 	strh.w	r8, [r2, #20]
 8014d3a:	f8a2 e016 	strh.w	lr, [r2, #22]
 8014d3e:	d1db      	bne.n	8014cf8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8014d40:	3308      	adds	r3, #8
 8014d42:	e7d5      	b.n	8014cf0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014d44:	42bc      	cmp	r4, r7
 8014d46:	d903      	bls.n	8014d50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8014d48:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8014d4c:	3c08      	subs	r4, #8
 8014d4e:	e6f4      	b.n	8014b3a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8014d50:	b050      	add	sp, #320	; 0x140
 8014d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014d56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8014d56:	b510      	push	{r4, lr}
 8014d58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	07da      	lsls	r2, r3, #31
 8014d5e:	d507      	bpl.n	8014d70 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8014d60:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8014d64:	f7ff fe8c 	bl	8014a80 <_ZN8touchgfx7Outline6lineToEii>
 8014d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014d6a:	f023 0301 	bic.w	r3, r3, #1
 8014d6e:	6243      	str	r3, [r0, #36]	; 0x24
 8014d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d72:	079b      	lsls	r3, r3, #30
 8014d74:	d521      	bpl.n	8014dba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8014d76:	6923      	ldr	r3, [r4, #16]
 8014d78:	88d9      	ldrh	r1, [r3, #6]
 8014d7a:	889a      	ldrh	r2, [r3, #4]
 8014d7c:	430a      	orrs	r2, r1
 8014d7e:	d010      	beq.n	8014da2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014d80:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014d84:	2a00      	cmp	r2, #0
 8014d86:	db0c      	blt.n	8014da2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014d88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014d8a:	428a      	cmp	r2, r1
 8014d8c:	da09      	bge.n	8014da2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8014d8e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8014d92:	4291      	cmp	r1, r2
 8014d94:	f102 0201 	add.w	r2, r2, #1
 8014d98:	bf88      	it	hi
 8014d9a:	3308      	addhi	r3, #8
 8014d9c:	60a2      	str	r2, [r4, #8]
 8014d9e:	bf88      	it	hi
 8014da0:	6123      	strhi	r3, [r4, #16]
 8014da2:	68a1      	ldr	r1, [r4, #8]
 8014da4:	b129      	cbz	r1, 8014db2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014da6:	6863      	ldr	r3, [r4, #4]
 8014da8:	4299      	cmp	r1, r3
 8014daa:	d802      	bhi.n	8014db2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8014dac:	68e0      	ldr	r0, [r4, #12]
 8014dae:	f7ff febd 	bl	8014b2c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8014db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014db4:	f023 0302 	bic.w	r3, r3, #2
 8014db8:	6263      	str	r3, [r4, #36]	; 0x24
 8014dba:	68e0      	ldr	r0, [r4, #12]
 8014dbc:	bd10      	pop	{r4, pc}
	...

08014dc0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8014dc0:	4b02      	ldr	r3, [pc, #8]	; (8014dcc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8014dc2:	6018      	str	r0, [r3, #0]
 8014dc4:	4b02      	ldr	r3, [pc, #8]	; (8014dd0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8014dc6:	6019      	str	r1, [r3, #0]
 8014dc8:	4770      	bx	lr
 8014dca:	bf00      	nop
 8014dcc:	2400ea3c 	.word	0x2400ea3c
 8014dd0:	2400ea40 	.word	0x2400ea40

08014dd4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4a02      	ldr	r2, [pc, #8]	; (8014de0 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8014dd8:	6013      	str	r3, [r2, #0]
 8014dda:	4a02      	ldr	r2, [pc, #8]	; (8014de4 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8014ddc:	6013      	str	r3, [r2, #0]
 8014dde:	4770      	bx	lr
 8014de0:	2400ea3c 	.word	0x2400ea3c
 8014de4:	2400ea40 	.word	0x2400ea40

08014de8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8014de8:	4b01      	ldr	r3, [pc, #4]	; (8014df0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8014dea:	6818      	ldr	r0, [r3, #0]
 8014dec:	4770      	bx	lr
 8014dee:	bf00      	nop
 8014df0:	2400ea3c 	.word	0x2400ea3c

08014df4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8014df4:	4b01      	ldr	r3, [pc, #4]	; (8014dfc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8014df6:	6818      	ldr	r0, [r3, #0]
 8014df8:	4770      	bx	lr
 8014dfa:	bf00      	nop
 8014dfc:	2400ea40 	.word	0x2400ea40

08014e00 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8014e00:	b510      	push	{r4, lr}
 8014e02:	6803      	ldr	r3, [r0, #0]
 8014e04:	460c      	mov	r4, r1
 8014e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e08:	4798      	blx	r3
 8014e0a:	1b03      	subs	r3, r0, r4
 8014e0c:	4258      	negs	r0, r3
 8014e0e:	4158      	adcs	r0, r3
 8014e10:	bd10      	pop	{r4, pc}
	...

08014e14 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8014e14:	4b01      	ldr	r3, [pc, #4]	; (8014e1c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8014e16:	6019      	str	r1, [r3, #0]
 8014e18:	4770      	bx	lr
 8014e1a:	bf00      	nop
 8014e1c:	2400ea44 	.word	0x2400ea44

08014e20 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8014e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e24:	4696      	mov	lr, r2
 8014e26:	b097      	sub	sp, #92	; 0x5c
 8014e28:	4605      	mov	r5, r0
 8014e2a:	4614      	mov	r4, r2
 8014e2c:	460e      	mov	r6, r1
 8014e2e:	461f      	mov	r7, r3
 8014e30:	f10d 0c1c 	add.w	ip, sp, #28
 8014e34:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8014e38:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8014e3c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8014e40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e48:	f8de 3000 	ldr.w	r3, [lr]
 8014e4c:	f104 0e14 	add.w	lr, r4, #20
 8014e50:	f8cc 3000 	str.w	r3, [ip]
 8014e54:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014e58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e60:	f8de 3000 	ldr.w	r3, [lr]
 8014e64:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014e68:	f8cc 3000 	str.w	r3, [ip]
 8014e6c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e78:	f8de 3000 	ldr.w	r3, [lr]
 8014e7c:	4631      	mov	r1, r6
 8014e7e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e80:	4628      	mov	r0, r5
 8014e82:	f8cc 3000 	str.w	r3, [ip]
 8014e86:	682b      	ldr	r3, [r5, #0]
 8014e88:	9201      	str	r2, [sp, #4]
 8014e8a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014e8c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014e90:	9200      	str	r2, [sp, #0]
 8014e92:	aa07      	add	r2, sp, #28
 8014e94:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014e98:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8014e9c:	463b      	mov	r3, r7
 8014e9e:	47d8      	blx	fp
 8014ea0:	46a6      	mov	lr, r4
 8014ea2:	f10d 0c1c 	add.w	ip, sp, #28
 8014ea6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014eaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eae:	f8de 3000 	ldr.w	r3, [lr]
 8014eb2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8014eb6:	343c      	adds	r4, #60	; 0x3c
 8014eb8:	f8cc 3000 	str.w	r3, [ip]
 8014ebc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8014ec0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ec8:	f8de 3000 	ldr.w	r3, [lr]
 8014ecc:	f8cc 3000 	str.w	r3, [ip]
 8014ed0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ed6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eda:	6823      	ldr	r3, [r4, #0]
 8014edc:	4631      	mov	r1, r6
 8014ede:	4628      	mov	r0, r5
 8014ee0:	f8cc 3000 	str.w	r3, [ip]
 8014ee4:	682b      	ldr	r3, [r5, #0]
 8014ee6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8014eea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014eec:	f8cd 8008 	str.w	r8, [sp, #8]
 8014ef0:	9201      	str	r2, [sp, #4]
 8014ef2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ef4:	9200      	str	r2, [sp, #0]
 8014ef6:	aa07      	add	r2, sp, #28
 8014ef8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8014efa:	463b      	mov	r3, r7
 8014efc:	47a0      	blx	r4
 8014efe:	b017      	add	sp, #92	; 0x5c
 8014f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f04 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f08:	b08d      	sub	sp, #52	; 0x34
 8014f0a:	4688      	mov	r8, r1
 8014f0c:	f8d3 c000 	ldr.w	ip, [r3]
 8014f10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f12:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8014f16:	680f      	ldr	r7, [r1, #0]
 8014f18:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014f1c:	eba7 070c 	sub.w	r7, r7, ip
 8014f20:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014f24:	edd3 6a07 	vldr	s13, [r3, #28]
 8014f28:	42bc      	cmp	r4, r7
 8014f2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014f2c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014f30:	bfa8      	it	ge
 8014f32:	463c      	movge	r4, r7
 8014f34:	f9b1 9000 	ldrsh.w	r9, [r1]
 8014f38:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014f3c:	ee07 4a90 	vmov	s15, r4
 8014f40:	eb09 0e0c 	add.w	lr, r9, ip
 8014f44:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8014f48:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014f4c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014f50:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014f54:	4571      	cmp	r1, lr
 8014f56:	ee25 4a04 	vmul.f32	s8, s10, s8
 8014f5a:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014f5e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014f62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f66:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8014f6a:	ee32 1a05 	vadd.f32	s2, s4, s10
 8014f6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8014f72:	ee36 0a84 	vadd.f32	s0, s13, s8
 8014f76:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014f7a:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014f7e:	f340 808c 	ble.w	801509a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8014f82:	eba1 060e 	sub.w	r6, r1, lr
 8014f86:	fb96 f5f4 	sdiv	r5, r6, r4
 8014f8a:	ee07 5a10 	vmov	s14, r5
 8014f8e:	2d00      	cmp	r5, #0
 8014f90:	fb04 6615 	mls	r6, r4, r5, r6
 8014f94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014f98:	eea7 0a04 	vfma.f32	s0, s14, s8
 8014f9c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8014fa0:	eea7 1a05 	vfma.f32	s2, s14, s10
 8014fa4:	dd12      	ble.n	8014fcc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8014fa6:	ee70 6a44 	vsub.f32	s13, s0, s8
 8014faa:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8014fae:	ee31 2a45 	vsub.f32	s4, s2, s10
 8014fb2:	eef5 6a40 	vcmp.f32	s13, #0.0
 8014fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fba:	bf14      	ite	ne
 8014fbc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8014fc0:	eeb0 7a67 	vmoveq.f32	s14, s15
 8014fc4:	ee61 1a87 	vmul.f32	s3, s3, s14
 8014fc8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014fcc:	fb05 f204 	mul.w	r2, r5, r4
 8014fd0:	1abf      	subs	r7, r7, r2
 8014fd2:	4494      	add	ip, r2
 8014fd4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8014fd8:	4411      	add	r1, r2
 8014fda:	eb09 020c 	add.w	r2, r9, ip
 8014fde:	b209      	sxth	r1, r1
 8014fe0:	443a      	add	r2, r7
 8014fe2:	428a      	cmp	r2, r1
 8014fe4:	bfc4      	itt	gt
 8014fe6:	eba1 0209 	subgt.w	r2, r1, r9
 8014fea:	eba2 070c 	subgt.w	r7, r2, ip
 8014fee:	2f00      	cmp	r7, #0
 8014ff0:	dd50      	ble.n	8015094 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014ff2:	fb97 f1f4 	sdiv	r1, r7, r4
 8014ff6:	fb04 7211 	mls	r2, r4, r1, r7
 8014ffa:	b90a      	cbnz	r2, 8015000 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014ffc:	3901      	subs	r1, #1
 8014ffe:	4622      	mov	r2, r4
 8015000:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015004:	6840      	ldr	r0, [r0, #4]
 8015006:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801500a:	44b6      	add	lr, r6
 801500c:	f8d0 a000 	ldr.w	sl, [r0]
 8015010:	2900      	cmp	r1, #0
 8015012:	bfcc      	ite	gt
 8015014:	46a1      	movgt	r9, r4
 8015016:	4691      	movle	r9, r2
 8015018:	900b      	str	r0, [sp, #44]	; 0x2c
 801501a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801501c:	fb04 e505 	mla	r5, r4, r5, lr
 8015020:	eef0 6a42 	vmov.f32	s13, s4
 8015024:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8015028:	9008      	str	r0, [sp, #32]
 801502a:	eeb0 7a61 	vmov.f32	s14, s3
 801502e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8015030:	695b      	ldr	r3, [r3, #20]
 8015032:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015036:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801503a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801503e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015040:	445b      	add	r3, fp
 8015042:	9307      	str	r3, [sp, #28]
 8015044:	ee16 3a90 	vmov	r3, s13
 8015048:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801504c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8015050:	ee21 3a23 	vmul.f32	s6, s2, s7
 8015054:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8015058:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801505c:	ee17 7a90 	vmov	r7, s15
 8015060:	ee73 7a42 	vsub.f32	s15, s6, s4
 8015064:	fb97 f7f4 	sdiv	r7, r7, r4
 8015068:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801506c:	ee17 ca90 	vmov	ip, s15
 8015070:	fb9c fcf4 	sdiv	ip, ip, r4
 8015074:	fb0c 3306 	mla	r3, ip, r6, r3
 8015078:	9302      	str	r3, [sp, #8]
 801507a:	ee17 3a10 	vmov	r3, s14
 801507e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8015082:	fb07 3706 	mla	r7, r7, r6, r3
 8015086:	eba9 0306 	sub.w	r3, r9, r6
 801508a:	e9cd 4700 	strd	r4, r7, [sp]
 801508e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8015092:	47a0      	blx	r4
 8015094:	b00d      	add	sp, #52	; 0x34
 8015096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801509a:	2500      	movs	r5, #0
 801509c:	462e      	mov	r6, r5
 801509e:	e799      	b.n	8014fd4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080150a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80150a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150a4:	b0db      	sub	sp, #364	; 0x16c
 80150a6:	461d      	mov	r5, r3
 80150a8:	4614      	mov	r4, r2
 80150aa:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80150ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80150b0:	4629      	mov	r1, r5
 80150b2:	930a      	str	r3, [sp, #40]	; 0x28
 80150b4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80150b8:	9009      	str	r0, [sp, #36]	; 0x24
 80150ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80150bc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80150c0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80150c4:	9310      	str	r3, [sp, #64]	; 0x40
 80150c6:	6803      	ldr	r3, [r0, #0]
 80150c8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80150ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80150ce:	47b8      	blx	r7
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	6058      	str	r0, [r3, #4]
 80150d4:	2800      	cmp	r0, #0
 80150d6:	f000 83a1 	beq.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80150da:	682b      	ldr	r3, [r5, #0]
 80150dc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80150e0:	ed94 7a02 	vldr	s14, [r4, #8]
 80150e4:	9314      	str	r3, [sp, #80]	; 0x50
 80150e6:	686b      	ldr	r3, [r5, #4]
 80150e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80150ec:	9315      	str	r3, [sp, #84]	; 0x54
 80150ee:	4bc1      	ldr	r3, [pc, #772]	; (80153f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80150f0:	7819      	ldrb	r1, [r3, #0]
 80150f2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80150f6:	2900      	cmp	r1, #0
 80150f8:	bf16      	itet	ne
 80150fa:	4619      	movne	r1, r3
 80150fc:	4611      	moveq	r1, r2
 80150fe:	4613      	movne	r3, r2
 8015100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015104:	9116      	str	r1, [sp, #88]	; 0x58
 8015106:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801510a:	f240 8387 	bls.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801510e:	ed94 7a07 	vldr	s14, [r4, #28]
 8015112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801511a:	f240 837f 	bls.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801511e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8015122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801512a:	f240 8377 	bls.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801512e:	6822      	ldr	r2, [r4, #0]
 8015130:	4bb1      	ldr	r3, [pc, #708]	; (80153f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015132:	429a      	cmp	r2, r3
 8015134:	f2c0 8372 	blt.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015138:	49b0      	ldr	r1, [pc, #704]	; (80153fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801513a:	6963      	ldr	r3, [r4, #20]
 801513c:	428a      	cmp	r2, r1
 801513e:	f300 836d 	bgt.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015142:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015146:	48ae      	ldr	r0, [pc, #696]	; (8015400 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8015148:	33ff      	adds	r3, #255	; 0xff
 801514a:	4283      	cmp	r3, r0
 801514c:	f200 8366 	bhi.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015152:	4dac      	ldr	r5, [pc, #688]	; (8015404 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8015154:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8015158:	33ff      	adds	r3, #255	; 0xff
 801515a:	42ab      	cmp	r3, r5
 801515c:	f200 835e 	bhi.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015160:	6862      	ldr	r2, [r4, #4]
 8015162:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8015166:	33ff      	adds	r3, #255	; 0xff
 8015168:	4283      	cmp	r3, r0
 801516a:	f200 8357 	bhi.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801516e:	69a1      	ldr	r1, [r4, #24]
 8015170:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8015174:	33ff      	adds	r3, #255	; 0xff
 8015176:	4283      	cmp	r3, r0
 8015178:	f200 8350 	bhi.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801517c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801517e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8015182:	30ff      	adds	r0, #255	; 0xff
 8015184:	42a8      	cmp	r0, r5
 8015186:	f200 8349 	bhi.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801518a:	428a      	cmp	r2, r1
 801518c:	f280 8110 	bge.w	80153b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8015190:	429a      	cmp	r2, r3
 8015192:	f300 8119 	bgt.w	80153c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8015196:	4299      	cmp	r1, r3
 8015198:	f280 811d 	bge.w	80153d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801519c:	2502      	movs	r5, #2
 801519e:	2701      	movs	r7, #1
 80151a0:	46a9      	mov	r9, r5
 80151a2:	46b8      	mov	r8, r7
 80151a4:	f04f 0a00 	mov.w	sl, #0
 80151a8:	4621      	mov	r1, r4
 80151aa:	a849      	add	r0, sp, #292	; 0x124
 80151ac:	f003 fd42 	bl	8018c34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80151b0:	4622      	mov	r2, r4
 80151b2:	4653      	mov	r3, sl
 80151b4:	a949      	add	r1, sp, #292	; 0x124
 80151b6:	f8cd 9000 	str.w	r9, [sp]
 80151ba:	a819      	add	r0, sp, #100	; 0x64
 80151bc:	f003 fe6a 	bl	8018e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80151c0:	4622      	mov	r2, r4
 80151c2:	4653      	mov	r3, sl
 80151c4:	a949      	add	r1, sp, #292	; 0x124
 80151c6:	f8cd 8000 	str.w	r8, [sp]
 80151ca:	a829      	add	r0, sp, #164	; 0xa4
 80151cc:	f003 fe62 	bl	8018e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80151d0:	4643      	mov	r3, r8
 80151d2:	4622      	mov	r2, r4
 80151d4:	a949      	add	r1, sp, #292	; 0x124
 80151d6:	f8cd 9000 	str.w	r9, [sp]
 80151da:	a839      	add	r0, sp, #228	; 0xe4
 80151dc:	f003 fe5a 	bl	8018e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80151e0:	42af      	cmp	r7, r5
 80151e2:	af12      	add	r7, sp, #72	; 0x48
 80151e4:	bfb7      	itett	lt
 80151e6:	2300      	movlt	r3, #0
 80151e8:	2301      	movge	r3, #1
 80151ea:	ad29      	addlt	r5, sp, #164	; 0xa4
 80151ec:	ac19      	addlt	r4, sp, #100	; 0x64
 80151ee:	bfb1      	iteee	lt
 80151f0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80151f2:	ad19      	addge	r5, sp, #100	; 0x64
 80151f4:	930e      	strge	r3, [sp, #56]	; 0x38
 80151f6:	ac29      	addge	r4, sp, #164	; 0xa4
 80151f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80151fe:	e887 0003 	stmia.w	r7, {r0, r1}
 8015202:	b928      	cbnz	r0, 8015210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015204:	4b80      	ldr	r3, [pc, #512]	; (8015408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8015206:	6818      	ldr	r0, [r3, #0]
 8015208:	6803      	ldr	r3, [r0, #0]
 801520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801520c:	4798      	blx	r3
 801520e:	6038      	str	r0, [r7, #0]
 8015210:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015212:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015216:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801521a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801521c:	930c      	str	r3, [sp, #48]	; 0x30
 801521e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015220:	6963      	ldr	r3, [r4, #20]
 8015222:	440b      	add	r3, r1
 8015224:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015228:	4408      	add	r0, r1
 801522a:	b200      	sxth	r0, r0
 801522c:	4283      	cmp	r3, r0
 801522e:	900d      	str	r0, [sp, #52]	; 0x34
 8015230:	f280 80dd 	bge.w	80153ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015234:	428b      	cmp	r3, r1
 8015236:	da08      	bge.n	801524a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015238:	2a00      	cmp	r2, #0
 801523a:	dd06      	ble.n	801524a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801523c:	1acb      	subs	r3, r1, r3
 801523e:	429a      	cmp	r2, r3
 8015240:	f2c0 80e4 	blt.w	801540c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015244:	2b00      	cmp	r3, #0
 8015246:	f300 80e2 	bgt.w	801540e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801524a:	6967      	ldr	r7, [r4, #20]
 801524c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8015250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015252:	443b      	add	r3, r7
 8015254:	461f      	mov	r7, r3
 8015256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015258:	1bdf      	subs	r7, r3, r7
 801525a:	4297      	cmp	r7, r2
 801525c:	bfa8      	it	ge
 801525e:	4617      	movge	r7, r2
 8015260:	2f00      	cmp	r7, #0
 8015262:	f340 8166 	ble.w	8015532 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8015266:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015268:	6829      	ldr	r1, [r5, #0]
 801526a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801526e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8015272:	4411      	add	r1, r2
 8015274:	6820      	ldr	r0, [r4, #0]
 8015276:	4299      	cmp	r1, r3
 8015278:	dd1a      	ble.n	80152b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801527a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801527e:	4402      	add	r2, r0
 8015280:	440b      	add	r3, r1
 8015282:	b21b      	sxth	r3, r3
 8015284:	429a      	cmp	r2, r3
 8015286:	dc13      	bgt.n	80152b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8015288:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801528a:	a912      	add	r1, sp, #72	; 0x48
 801528c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801528e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	9206      	str	r2, [sp, #24]
 8015294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015296:	9500      	str	r5, [sp, #0]
 8015298:	9205      	str	r2, [sp, #20]
 801529a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801529c:	e9cd b203 	strd	fp, r2, [sp, #12]
 80152a0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80152a2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80152a6:	aa49      	add	r2, sp, #292	; 0x124
 80152a8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80152ac:	4623      	mov	r3, r4
 80152ae:	47c8      	blx	r9
 80152b0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80152b4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80152b8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80152bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80152c0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80152c4:	68a1      	ldr	r1, [r4, #8]
 80152c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80152ca:	ed94 6a08 	vldr	s12, [r4, #32]
 80152ce:	edd4 6a07 	vldr	s13, [r4, #28]
 80152d2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80152d6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80152da:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80152de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80152e2:	edc4 6a07 	vstr	s13, [r4, #28]
 80152e6:	441a      	add	r2, r3
 80152e8:	6963      	ldr	r3, [r4, #20]
 80152ea:	3301      	adds	r3, #1
 80152ec:	6022      	str	r2, [r4, #0]
 80152ee:	6163      	str	r3, [r4, #20]
 80152f0:	69a3      	ldr	r3, [r4, #24]
 80152f2:	3b01      	subs	r3, #1
 80152f4:	61a3      	str	r3, [r4, #24]
 80152f6:	6923      	ldr	r3, [r4, #16]
 80152f8:	440b      	add	r3, r1
 80152fa:	68e1      	ldr	r1, [r4, #12]
 80152fc:	428b      	cmp	r3, r1
 80152fe:	6123      	str	r3, [r4, #16]
 8015300:	db15      	blt.n	801532e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015302:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015306:	3201      	adds	r2, #1
 8015308:	1a5b      	subs	r3, r3, r1
 801530a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801530e:	6022      	str	r2, [r4, #0]
 8015310:	6123      	str	r3, [r4, #16]
 8015312:	edc4 6a07 	vstr	s13, [r4, #28]
 8015316:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801531a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801531e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015322:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015326:	ee77 7a27 	vadd.f32	s15, s14, s15
 801532a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801532e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015332:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015336:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801533a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801533e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015342:	68a9      	ldr	r1, [r5, #8]
 8015344:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015348:	ed95 6a08 	vldr	s12, [r5, #32]
 801534c:	edd5 6a07 	vldr	s13, [r5, #28]
 8015350:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015354:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015358:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801535c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015360:	edc5 6a07 	vstr	s13, [r5, #28]
 8015364:	441a      	add	r2, r3
 8015366:	696b      	ldr	r3, [r5, #20]
 8015368:	3301      	adds	r3, #1
 801536a:	602a      	str	r2, [r5, #0]
 801536c:	616b      	str	r3, [r5, #20]
 801536e:	69ab      	ldr	r3, [r5, #24]
 8015370:	3b01      	subs	r3, #1
 8015372:	61ab      	str	r3, [r5, #24]
 8015374:	692b      	ldr	r3, [r5, #16]
 8015376:	440b      	add	r3, r1
 8015378:	68e9      	ldr	r1, [r5, #12]
 801537a:	428b      	cmp	r3, r1
 801537c:	612b      	str	r3, [r5, #16]
 801537e:	db15      	blt.n	80153ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8015380:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8015384:	3201      	adds	r2, #1
 8015386:	1a5b      	subs	r3, r3, r1
 8015388:	ee76 6a26 	vadd.f32	s13, s12, s13
 801538c:	602a      	str	r2, [r5, #0]
 801538e:	612b      	str	r3, [r5, #16]
 8015390:	edc5 6a07 	vstr	s13, [r5, #28]
 8015394:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8015398:	ee36 7a87 	vadd.f32	s14, s13, s14
 801539c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80153a0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80153a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80153a8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80153ac:	3f01      	subs	r7, #1
 80153ae:	e757      	b.n	8015260 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80153b0:	4299      	cmp	r1, r3
 80153b2:	dc13      	bgt.n	80153dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80153b4:	429a      	cmp	r2, r3
 80153b6:	da14      	bge.n	80153e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80153b8:	2502      	movs	r5, #2
 80153ba:	2703      	movs	r7, #3
 80153bc:	f04f 0800 	mov.w	r8, #0
 80153c0:	46a9      	mov	r9, r5
 80153c2:	f04f 0a01 	mov.w	sl, #1
 80153c6:	e6ef      	b.n	80151a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80153c8:	2501      	movs	r5, #1
 80153ca:	2700      	movs	r7, #0
 80153cc:	46a9      	mov	r9, r5
 80153ce:	46b8      	mov	r8, r7
 80153d0:	f04f 0a02 	mov.w	sl, #2
 80153d4:	e6e8      	b.n	80151a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80153d6:	2501      	movs	r5, #1
 80153d8:	2702      	movs	r7, #2
 80153da:	e6e1      	b.n	80151a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80153dc:	2500      	movs	r5, #0
 80153de:	2701      	movs	r7, #1
 80153e0:	e7f4      	b.n	80153cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80153e2:	2702      	movs	r7, #2
 80153e4:	2503      	movs	r5, #3
 80153e6:	f04f 0900 	mov.w	r9, #0
 80153ea:	46b8      	mov	r8, r7
 80153ec:	e7e9      	b.n	80153c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80153ee:	4613      	mov	r3, r2
 80153f0:	e728      	b.n	8015244 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80153f2:	bf00      	nop
 80153f4:	2400ea2c 	.word	0x2400ea2c
 80153f8:	fffd8f01 	.word	0xfffd8f01
 80153fc:	00027100 	.word	0x00027100
 8015400:	0004e1ff 	.word	0x0004e1ff
 8015404:	0004e1fe 	.word	0x0004e1fe
 8015408:	2400ea34 	.word	0x2400ea34
 801540c:	4613      	mov	r3, r2
 801540e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015410:	469e      	mov	lr, r3
 8015412:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8015414:	469c      	mov	ip, r3
 8015416:	9111      	str	r1, [sp, #68]	; 0x44
 8015418:	f04f 0900 	mov.w	r9, #0
 801541c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8015420:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8015424:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8015428:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801542c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8015430:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8015434:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8015438:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801543c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8015440:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8015444:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8015448:	f1bc 0f00 	cmp.w	ip, #0
 801544c:	d147      	bne.n	80154de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801544e:	eb03 0c07 	add.w	ip, r3, r7
 8015452:	1ad7      	subs	r7, r2, r3
 8015454:	f1b9 0f00 	cmp.w	r9, #0
 8015458:	d009      	beq.n	801546e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801545a:	9029      	str	r0, [sp, #164]	; 0xa4
 801545c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8015460:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8015464:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8015468:	912d      	str	r1, [sp, #180]	; 0xb4
 801546a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801546e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8015470:	f04f 0800 	mov.w	r8, #0
 8015474:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015478:	9111      	str	r1, [sp, #68]	; 0x44
 801547a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801547e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8015482:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015486:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801548a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801548e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8015492:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015496:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801549a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801549e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80154a2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80154a6:	f1be 0f00 	cmp.w	lr, #0
 80154aa:	d031      	beq.n	8015510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80154ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80154ae:	4450      	add	r0, sl
 80154b0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80154b4:	4431      	add	r1, r6
 80154b6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80154ba:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80154be:	4549      	cmp	r1, r9
 80154c0:	db08      	blt.n	80154d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80154c2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80154c6:	3001      	adds	r0, #1
 80154c8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80154cc:	eba1 0109 	sub.w	r1, r1, r9
 80154d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80154d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80154d8:	f04f 0801 	mov.w	r8, #1
 80154dc:	e7e3      	b.n	80154a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80154de:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80154e0:	4450      	add	r0, sl
 80154e2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80154e6:	4431      	add	r1, r6
 80154e8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80154ec:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80154f0:	4541      	cmp	r1, r8
 80154f2:	db08      	blt.n	8015506 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80154f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80154f8:	3001      	adds	r0, #1
 80154fa:	ee37 7a25 	vadd.f32	s14, s14, s11
 80154fe:	eba1 0108 	sub.w	r1, r1, r8
 8015502:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015506:	f10c 3cff 	add.w	ip, ip, #4294967295
 801550a:	f04f 0901 	mov.w	r9, #1
 801550e:	e79b      	b.n	8015448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015510:	449c      	add	ip, r3
 8015512:	1aff      	subs	r7, r7, r3
 8015514:	f1b8 0f00 	cmp.w	r8, #0
 8015518:	d009      	beq.n	801552e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801551a:	9019      	str	r0, [sp, #100]	; 0x64
 801551c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8015520:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8015524:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015528:	911d      	str	r1, [sp, #116]	; 0x74
 801552a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801552e:	1ad2      	subs	r2, r2, r3
 8015530:	e68b      	b.n	801524a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015534:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8015536:	2b00      	cmp	r3, #0
 8015538:	f000 80d1 	beq.w	80156de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801553c:	ad19      	add	r5, sp, #100	; 0x64
 801553e:	ac39      	add	r4, sp, #228	; 0xe4
 8015540:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015542:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8015546:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801554a:	930c      	str	r3, [sp, #48]	; 0x30
 801554c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801554e:	6963      	ldr	r3, [r4, #20]
 8015550:	440b      	add	r3, r1
 8015552:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8015556:	4408      	add	r0, r1
 8015558:	b200      	sxth	r0, r0
 801555a:	4283      	cmp	r3, r0
 801555c:	900d      	str	r0, [sp, #52]	; 0x34
 801555e:	f280 80c1 	bge.w	80156e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8015562:	428b      	cmp	r3, r1
 8015564:	da08      	bge.n	8015578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015566:	2a00      	cmp	r2, #0
 8015568:	dd06      	ble.n	8015578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801556a:	1acb      	subs	r3, r1, r3
 801556c:	429a      	cmp	r2, r3
 801556e:	f2c0 80bb 	blt.w	80156e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8015572:	2b00      	cmp	r3, #0
 8015574:	f300 80b9 	bgt.w	80156ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8015578:	6967      	ldr	r7, [r4, #20]
 801557a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801557e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015580:	443b      	add	r3, r7
 8015582:	461f      	mov	r7, r3
 8015584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015586:	1bdf      	subs	r7, r3, r7
 8015588:	4297      	cmp	r7, r2
 801558a:	bfa8      	it	ge
 801558c:	4617      	movge	r7, r2
 801558e:	2f00      	cmp	r7, #0
 8015590:	f340 813c 	ble.w	801580c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8015594:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015596:	6829      	ldr	r1, [r5, #0]
 8015598:	f9b3 2000 	ldrsh.w	r2, [r3]
 801559c:	f9bb 3000 	ldrsh.w	r3, [fp]
 80155a0:	4411      	add	r1, r2
 80155a2:	6820      	ldr	r0, [r4, #0]
 80155a4:	4299      	cmp	r1, r3
 80155a6:	dd1a      	ble.n	80155de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80155a8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80155ac:	4402      	add	r2, r0
 80155ae:	440b      	add	r3, r1
 80155b0:	b21b      	sxth	r3, r3
 80155b2:	429a      	cmp	r2, r3
 80155b4:	dc13      	bgt.n	80155de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80155b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155b8:	a912      	add	r1, sp, #72	; 0x48
 80155ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	9206      	str	r2, [sp, #24]
 80155c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155c4:	9500      	str	r5, [sp, #0]
 80155c6:	9205      	str	r2, [sp, #20]
 80155c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155ca:	e9cd b203 	strd	fp, r2, [sp, #12]
 80155ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80155d0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80155d4:	aa49      	add	r2, sp, #292	; 0x124
 80155d6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80155da:	4623      	mov	r3, r4
 80155dc:	47c8      	blx	r9
 80155de:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80155e2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80155e6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80155ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80155ee:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80155f2:	68a1      	ldr	r1, [r4, #8]
 80155f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80155f8:	ed94 6a08 	vldr	s12, [r4, #32]
 80155fc:	edd4 6a07 	vldr	s13, [r4, #28]
 8015600:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015604:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015608:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801560c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015610:	edc4 6a07 	vstr	s13, [r4, #28]
 8015614:	441a      	add	r2, r3
 8015616:	6963      	ldr	r3, [r4, #20]
 8015618:	3301      	adds	r3, #1
 801561a:	6022      	str	r2, [r4, #0]
 801561c:	6163      	str	r3, [r4, #20]
 801561e:	69a3      	ldr	r3, [r4, #24]
 8015620:	3b01      	subs	r3, #1
 8015622:	61a3      	str	r3, [r4, #24]
 8015624:	6923      	ldr	r3, [r4, #16]
 8015626:	440b      	add	r3, r1
 8015628:	68e1      	ldr	r1, [r4, #12]
 801562a:	428b      	cmp	r3, r1
 801562c:	6123      	str	r3, [r4, #16]
 801562e:	db15      	blt.n	801565c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015630:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8015634:	3201      	adds	r2, #1
 8015636:	1a5b      	subs	r3, r3, r1
 8015638:	ee76 6a26 	vadd.f32	s13, s12, s13
 801563c:	6022      	str	r2, [r4, #0]
 801563e:	6123      	str	r3, [r4, #16]
 8015640:	edc4 6a07 	vstr	s13, [r4, #28]
 8015644:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015648:	ee36 7a87 	vadd.f32	s14, s13, s14
 801564c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8015650:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015658:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801565c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8015660:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8015664:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8015668:	ee37 7a27 	vadd.f32	s14, s14, s15
 801566c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8015670:	68a9      	ldr	r1, [r5, #8]
 8015672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015676:	ed95 6a08 	vldr	s12, [r5, #32]
 801567a:	edd5 6a07 	vldr	s13, [r5, #28]
 801567e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8015682:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015686:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801568a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801568e:	edc5 6a07 	vstr	s13, [r5, #28]
 8015692:	441a      	add	r2, r3
 8015694:	696b      	ldr	r3, [r5, #20]
 8015696:	3301      	adds	r3, #1
 8015698:	602a      	str	r2, [r5, #0]
 801569a:	616b      	str	r3, [r5, #20]
 801569c:	69ab      	ldr	r3, [r5, #24]
 801569e:	3b01      	subs	r3, #1
 80156a0:	61ab      	str	r3, [r5, #24]
 80156a2:	692b      	ldr	r3, [r5, #16]
 80156a4:	440b      	add	r3, r1
 80156a6:	68e9      	ldr	r1, [r5, #12]
 80156a8:	428b      	cmp	r3, r1
 80156aa:	612b      	str	r3, [r5, #16]
 80156ac:	db15      	blt.n	80156da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80156ae:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80156b2:	3201      	adds	r2, #1
 80156b4:	1a5b      	subs	r3, r3, r1
 80156b6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80156ba:	602a      	str	r2, [r5, #0]
 80156bc:	612b      	str	r3, [r5, #16]
 80156be:	edc5 6a07 	vstr	s13, [r5, #28]
 80156c2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80156c6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80156ca:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80156ce:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80156d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80156d6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80156da:	3f01      	subs	r7, #1
 80156dc:	e757      	b.n	801558e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80156de:	ad39      	add	r5, sp, #228	; 0xe4
 80156e0:	ac19      	add	r4, sp, #100	; 0x64
 80156e2:	e72d      	b.n	8015540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80156e4:	4613      	mov	r3, r2
 80156e6:	e744      	b.n	8015572 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80156e8:	4613      	mov	r3, r2
 80156ea:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80156ec:	469e      	mov	lr, r3
 80156ee:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80156f2:	461f      	mov	r7, r3
 80156f4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80156f8:	f04f 0900 	mov.w	r9, #0
 80156fc:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8015700:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8015704:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8015708:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801570c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8015710:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8015712:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8015716:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801571a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801571e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8015722:	960e      	str	r6, [sp, #56]	; 0x38
 8015724:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8015728:	2f00      	cmp	r7, #0
 801572a:	d146      	bne.n	80157ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801572c:	449c      	add	ip, r3
 801572e:	1ad7      	subs	r7, r2, r3
 8015730:	f1b9 0f00 	cmp.w	r9, #0
 8015734:	d009      	beq.n	801574a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015736:	9039      	str	r0, [sp, #228]	; 0xe4
 8015738:	913d      	str	r1, [sp, #244]	; 0xf4
 801573a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801573e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8015742:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8015746:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801574a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801574c:	f04f 0800 	mov.w	r8, #0
 8015750:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8015754:	910e      	str	r1, [sp, #56]	; 0x38
 8015756:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801575a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801575e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8015762:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8015766:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801576a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801576e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8015772:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8015776:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801577a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801577e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8015782:	f1be 0f00 	cmp.w	lr, #0
 8015786:	d030      	beq.n	80157ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015788:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801578a:	4450      	add	r0, sl
 801578c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015790:	4431      	add	r1, r6
 8015792:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015796:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801579a:	4549      	cmp	r1, r9
 801579c:	db08      	blt.n	80157b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801579e:	ee77 7a85 	vadd.f32	s15, s15, s10
 80157a2:	3001      	adds	r0, #1
 80157a4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80157a8:	eba1 0109 	sub.w	r1, r1, r9
 80157ac:	ee37 7a06 	vadd.f32	s14, s14, s12
 80157b0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80157b4:	f04f 0801 	mov.w	r8, #1
 80157b8:	e7e3      	b.n	8015782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80157ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80157bc:	4450      	add	r0, sl
 80157be:	ee37 7a24 	vadd.f32	s14, s14, s9
 80157c2:	4431      	add	r1, r6
 80157c4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80157c8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80157cc:	4541      	cmp	r1, r8
 80157ce:	db08      	blt.n	80157e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80157d0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80157d4:	3001      	adds	r0, #1
 80157d6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80157da:	eba1 0108 	sub.w	r1, r1, r8
 80157de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80157e2:	3f01      	subs	r7, #1
 80157e4:	f04f 0901 	mov.w	r9, #1
 80157e8:	e79e      	b.n	8015728 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80157ea:	449c      	add	ip, r3
 80157ec:	1aff      	subs	r7, r7, r3
 80157ee:	f1b8 0f00 	cmp.w	r8, #0
 80157f2:	d009      	beq.n	8015808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80157f4:	9019      	str	r0, [sp, #100]	; 0x64
 80157f6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80157fa:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80157fe:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8015802:	911d      	str	r1, [sp, #116]	; 0x74
 8015804:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8015808:	1ad2      	subs	r2, r2, r3
 801580a:	e6b5      	b.n	8015578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801580c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	b923      	cbnz	r3, 801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015812:	4b04      	ldr	r3, [pc, #16]	; (8015824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015814:	6818      	ldr	r0, [r3, #0]
 8015816:	6803      	ldr	r3, [r0, #0]
 8015818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801581a:	4798      	blx	r3
 801581c:	b05b      	add	sp, #364	; 0x16c
 801581e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015822:	bf00      	nop
 8015824:	2400ea34 	.word	0x2400ea34

08015828 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015828:	b570      	push	{r4, r5, r6, lr}
 801582a:	4604      	mov	r4, r0
 801582c:	2500      	movs	r5, #0
 801582e:	9805      	ldr	r0, [sp, #20]
 8015830:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015834:	6061      	str	r1, [r4, #4]
 8015836:	8263      	strh	r3, [r4, #18]
 8015838:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801583c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015840:	8025      	strh	r5, [r4, #0]
 8015842:	7221      	strb	r1, [r4, #8]
 8015844:	7266      	strb	r6, [r4, #9]
 8015846:	60e0      	str	r0, [r4, #12]
 8015848:	8222      	strh	r2, [r4, #16]
 801584a:	82a3      	strh	r3, [r4, #20]
 801584c:	82e5      	strh	r5, [r4, #22]
 801584e:	8325      	strh	r5, [r4, #24]
 8015850:	8365      	strh	r5, [r4, #26]
 8015852:	83a5      	strh	r5, [r4, #28]
 8015854:	83e5      	strh	r5, [r4, #30]
 8015856:	8425      	strh	r5, [r4, #32]
 8015858:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801585c:	b32e      	cbz	r6, 80158aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801585e:	6803      	ldr	r3, [r0, #0]
 8015860:	695b      	ldr	r3, [r3, #20]
 8015862:	4798      	blx	r3
 8015864:	4606      	mov	r6, r0
 8015866:	b300      	cbz	r0, 80158aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015868:	68e0      	ldr	r0, [r4, #12]
 801586a:	4631      	mov	r1, r6
 801586c:	6803      	ldr	r3, [r0, #0]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	4798      	blx	r3
 8015872:	4605      	mov	r5, r0
 8015874:	b1c8      	cbz	r0, 80158aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015876:	7b43      	ldrb	r3, [r0, #13]
 8015878:	7a82      	ldrb	r2, [r0, #10]
 801587a:	005b      	lsls	r3, r3, #1
 801587c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015880:	4313      	orrs	r3, r2
 8015882:	8423      	strh	r3, [r4, #32]
 8015884:	7a63      	ldrb	r3, [r4, #9]
 8015886:	2b06      	cmp	r3, #6
 8015888:	d10f      	bne.n	80158aa <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801588a:	68e0      	ldr	r0, [r4, #12]
 801588c:	462a      	mov	r2, r5
 801588e:	4631      	mov	r1, r6
 8015890:	6803      	ldr	r3, [r0, #0]
 8015892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015894:	4798      	blx	r3
 8015896:	7b6b      	ldrb	r3, [r5, #13]
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801589e:	7aab      	ldrb	r3, [r5, #10]
 80158a0:	4313      	orrs	r3, r2
 80158a2:	4418      	add	r0, r3
 80158a4:	8c23      	ldrh	r3, [r4, #32]
 80158a6:	4418      	add	r0, r3
 80158a8:	8420      	strh	r0, [r4, #32]
 80158aa:	4620      	mov	r0, r4
 80158ac:	bd70      	pop	{r4, r5, r6, pc}

080158ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80158ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b2:	2400      	movs	r4, #0
 80158b4:	b085      	sub	sp, #20
 80158b6:	4681      	mov	r9, r0
 80158b8:	4688      	mov	r8, r1
 80158ba:	4692      	mov	sl, r2
 80158bc:	469b      	mov	fp, r3
 80158be:	4627      	mov	r7, r4
 80158c0:	4625      	mov	r5, r4
 80158c2:	4626      	mov	r6, r4
 80158c4:	4554      	cmp	r4, sl
 80158c6:	da2a      	bge.n	801591e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80158c8:	2300      	movs	r3, #0
 80158ca:	9303      	str	r3, [sp, #12]
 80158cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80158d0:	429d      	cmp	r5, r3
 80158d2:	d004      	beq.n	80158de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80158d4:	f242 030b 	movw	r3, #8203	; 0x200b
 80158d8:	429d      	cmp	r5, r3
 80158da:	bf18      	it	ne
 80158dc:	462f      	movne	r7, r5
 80158de:	ab03      	add	r3, sp, #12
 80158e0:	4642      	mov	r2, r8
 80158e2:	4659      	mov	r1, fp
 80158e4:	4648      	mov	r0, r9
 80158e6:	f002 ffbb 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80158ea:	4605      	mov	r5, r0
 80158ec:	b1b8      	cbz	r0, 801591e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80158ee:	280a      	cmp	r0, #10
 80158f0:	d015      	beq.n	801591e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80158f2:	9a03      	ldr	r2, [sp, #12]
 80158f4:	b18a      	cbz	r2, 801591a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80158f6:	7b50      	ldrb	r0, [r2, #13]
 80158f8:	4639      	mov	r1, r7
 80158fa:	7a93      	ldrb	r3, [r2, #10]
 80158fc:	0040      	lsls	r0, r0, #1
 80158fe:	8895      	ldrh	r5, [r2, #4]
 8015900:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015904:	4303      	orrs	r3, r0
 8015906:	4640      	mov	r0, r8
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	f8d8 3000 	ldr.w	r3, [r8]
 801590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015910:	4798      	blx	r3
 8015912:	9b01      	ldr	r3, [sp, #4]
 8015914:	4418      	add	r0, r3
 8015916:	4406      	add	r6, r0
 8015918:	b2b6      	uxth	r6, r6
 801591a:	3401      	adds	r4, #1
 801591c:	e7d2      	b.n	80158c4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801591e:	4630      	mov	r0, r6
 8015920:	b005      	add	sp, #20
 8015922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015926:	2a02      	cmp	r2, #2
 8015928:	b530      	push	{r4, r5, lr}
 801592a:	d011      	beq.n	8015950 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801592c:	2a03      	cmp	r2, #3
 801592e:	d01c      	beq.n	801596a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015930:	2a01      	cmp	r2, #1
 8015932:	d10c      	bne.n	801594e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015934:	888b      	ldrh	r3, [r1, #4]
 8015936:	8801      	ldrh	r1, [r0, #0]
 8015938:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801593c:	1a5b      	subs	r3, r3, r1
 801593e:	8844      	ldrh	r4, [r0, #2]
 8015940:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015944:	1a9b      	subs	r3, r3, r2
 8015946:	8004      	strh	r4, [r0, #0]
 8015948:	8081      	strh	r1, [r0, #4]
 801594a:	8043      	strh	r3, [r0, #2]
 801594c:	80c2      	strh	r2, [r0, #6]
 801594e:	bd30      	pop	{r4, r5, pc}
 8015950:	88cb      	ldrh	r3, [r1, #6]
 8015952:	8842      	ldrh	r2, [r0, #2]
 8015954:	1a9b      	subs	r3, r3, r2
 8015956:	88c2      	ldrh	r2, [r0, #6]
 8015958:	1a9b      	subs	r3, r3, r2
 801595a:	888a      	ldrh	r2, [r1, #4]
 801595c:	8801      	ldrh	r1, [r0, #0]
 801595e:	8043      	strh	r3, [r0, #2]
 8015960:	1a52      	subs	r2, r2, r1
 8015962:	8881      	ldrh	r1, [r0, #4]
 8015964:	1a52      	subs	r2, r2, r1
 8015966:	8002      	strh	r2, [r0, #0]
 8015968:	e7f1      	b.n	801594e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801596a:	88cb      	ldrh	r3, [r1, #6]
 801596c:	8841      	ldrh	r1, [r0, #2]
 801596e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015972:	1a5b      	subs	r3, r3, r1
 8015974:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015978:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801597c:	1a9b      	subs	r3, r3, r2
 801597e:	8045      	strh	r5, [r0, #2]
 8015980:	8082      	strh	r2, [r0, #4]
 8015982:	8003      	strh	r3, [r0, #0]
 8015984:	80c4      	strh	r4, [r0, #6]
 8015986:	e7e2      	b.n	801594e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801598c:	b09f      	sub	sp, #124	; 0x7c
 801598e:	9116      	str	r1, [sp, #88]	; 0x58
 8015990:	9317      	str	r3, [sp, #92]	; 0x5c
 8015992:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015994:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015996:	8809      	ldrh	r1, [r1, #0]
 8015998:	889b      	ldrh	r3, [r3, #4]
 801599a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801599e:	440b      	add	r3, r1
 80159a0:	9212      	str	r2, [sp, #72]	; 0x48
 80159a2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80159a6:	b21b      	sxth	r3, r3
 80159a8:	9011      	str	r0, [sp, #68]	; 0x44
 80159aa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80159ae:	9310      	str	r3, [sp, #64]	; 0x40
 80159b0:	f8d8 3000 	ldr.w	r3, [r8]
 80159b4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 80159b8:	7b19      	ldrb	r1, [r3, #12]
 80159ba:	7adb      	ldrb	r3, [r3, #11]
 80159bc:	9114      	str	r1, [sp, #80]	; 0x50
 80159be:	9315      	str	r3, [sp, #84]	; 0x54
 80159c0:	2a00      	cmp	r2, #0
 80159c2:	d06a      	beq.n	8015a9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 80159c4:	f898 3010 	ldrb.w	r3, [r8, #16]
 80159c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80159ca:	2b06      	cmp	r3, #6
 80159cc:	bf14      	ite	ne
 80159ce:	2301      	movne	r3, #1
 80159d0:	2302      	moveq	r3, #2
 80159d2:	4413      	add	r3, r2
 80159d4:	f04f 0900 	mov.w	r9, #0
 80159d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80159da:	464c      	mov	r4, r9
 80159dc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80159e0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80159e4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80159e8:	4293      	cmp	r3, r2
 80159ea:	f280 808f 	bge.w	8015b0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80159ee:	2300      	movs	r3, #0
 80159f0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80159f4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80159f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80159fc:	429c      	cmp	r4, r3
 80159fe:	d006      	beq.n	8015a0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8015a00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a02:	f242 020b 	movw	r2, #8203	; 0x200b
 8015a06:	4294      	cmp	r4, r2
 8015a08:	bf18      	it	ne
 8015a0a:	4623      	movne	r3, r4
 8015a0c:	930d      	str	r3, [sp, #52]	; 0x34
 8015a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a10:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8015a12:	f8d8 2000 	ldr.w	r2, [r8]
 8015a16:	428b      	cmp	r3, r1
 8015a18:	db41      	blt.n	8015a9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015a1a:	6813      	ldr	r3, [r2, #0]
 8015a1c:	4610      	mov	r0, r2
 8015a1e:	695b      	ldr	r3, [r3, #20]
 8015a20:	4798      	blx	r3
 8015a22:	4604      	mov	r4, r0
 8015a24:	f8d8 0000 	ldr.w	r0, [r8]
 8015a28:	aa1d      	add	r2, sp, #116	; 0x74
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	6803      	ldr	r3, [r0, #0]
 8015a2e:	689d      	ldr	r5, [r3, #8]
 8015a30:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015a34:	47a8      	blx	r5
 8015a36:	901c      	str	r0, [sp, #112]	; 0x70
 8015a38:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	f000 80ec 	beq.w	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015a42:	f242 030b 	movw	r3, #8203	; 0x200b
 8015a46:	429c      	cmp	r4, r3
 8015a48:	f000 80e7 	beq.w	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015a4c:	2c00      	cmp	r4, #0
 8015a4e:	f000 80f9 	beq.w	8015c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015a52:	2c0a      	cmp	r4, #10
 8015a54:	d060      	beq.n	8015b18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015a56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015a58:	b36a      	cbz	r2, 8015ab6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015a5a:	8894      	ldrh	r4, [r2, #4]
 8015a5c:	f1bb 0f00 	cmp.w	fp, #0
 8015a60:	d03b      	beq.n	8015ada <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8015a62:	f892 900d 	ldrb.w	r9, [r2, #13]
 8015a66:	f1bb 0f01 	cmp.w	fp, #1
 8015a6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015a6e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8015a72:	f892 900a 	ldrb.w	r9, [r2, #10]
 8015a76:	ea49 0903 	orr.w	r9, r9, r3
 8015a7a:	d134      	bne.n	8015ae6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8015a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a7e:	eba6 0609 	sub.w	r6, r6, r9
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d14f      	bne.n	8015b26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015a86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a88:	eb09 0306 	add.w	r3, r9, r6
 8015a8c:	4413      	add	r3, r2
 8015a8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8015a90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015a94:	4293      	cmp	r3, r2
 8015a96:	da51      	bge.n	8015b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015a98:	e038      	b.n	8015b0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8015a9a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a9c:	e79a      	b.n	80159d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8015a9e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8015aa2:	4659      	mov	r1, fp
 8015aa4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015aa6:	9301      	str	r3, [sp, #4]
 8015aa8:	ab1d      	add	r3, sp, #116	; 0x74
 8015aaa:	9300      	str	r3, [sp, #0]
 8015aac:	ab1c      	add	r3, sp, #112	; 0x70
 8015aae:	f002 ff20 	bl	80188f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015ab2:	4604      	mov	r4, r0
 8015ab4:	e7c0      	b.n	8015a38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015ab6:	f8d8 0000 	ldr.w	r0, [r8]
 8015aba:	6803      	ldr	r3, [r0, #0]
 8015abc:	691b      	ldr	r3, [r3, #16]
 8015abe:	4798      	blx	r3
 8015ac0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015ac4:	4298      	cmp	r0, r3
 8015ac6:	f000 80a8 	beq.w	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015aca:	f242 030b 	movw	r3, #8203	; 0x200b
 8015ace:	4298      	cmp	r0, r3
 8015ad0:	f000 80a3 	beq.w	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015ad4:	f1bb 0f00 	cmp.w	fp, #0
 8015ad8:	d100      	bne.n	8015adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8015ada:	444e      	add	r6, r9
 8015adc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015ade:	2a00      	cmp	r2, #0
 8015ae0:	d1bf      	bne.n	8015a62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015ae2:	4691      	mov	r9, r2
 8015ae4:	e099      	b.n	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	f000 80ad 	beq.w	8015c48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8015aee:	f1bb 0f00 	cmp.w	fp, #0
 8015af2:	d118      	bne.n	8015b26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8015af4:	f8d8 0000 	ldr.w	r0, [r8]
 8015af8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015afa:	6803      	ldr	r3, [r0, #0]
 8015afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015afe:	4798      	blx	r3
 8015b00:	4406      	add	r6, r0
 8015b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015b06:	1af3      	subs	r3, r6, r3
 8015b08:	4293      	cmp	r3, r2
 8015b0a:	dd17      	ble.n	8015b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8015b0c:	2c00      	cmp	r4, #0
 8015b0e:	f000 8099 	beq.w	8015c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015b12:	2c0a      	cmp	r4, #10
 8015b14:	f040 8087 	bne.w	8015c26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8015b18:	240a      	movs	r4, #10
 8015b1a:	fab4 f084 	clz	r0, r4
 8015b1e:	0940      	lsrs	r0, r0, #5
 8015b20:	b01f      	add	sp, #124	; 0x7c
 8015b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b26:	f8d8 0000 	ldr.w	r0, [r8]
 8015b2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b2c:	6803      	ldr	r3, [r0, #0]
 8015b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b30:	4798      	blx	r3
 8015b32:	f1bb 0f01 	cmp.w	fp, #1
 8015b36:	eba6 0600 	sub.w	r6, r6, r0
 8015b3a:	d0a4      	beq.n	8015a86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015b3c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8015b3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015b40:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015b44:	f9b3 7000 	ldrsh.w	r7, [r3]
 8015b48:	7b43      	ldrb	r3, [r0, #13]
 8015b4a:	4431      	add	r1, r6
 8015b4c:	015b      	lsls	r3, r3, #5
 8015b4e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015b52:	7983      	ldrb	r3, [r0, #6]
 8015b54:	4313      	orrs	r3, r2
 8015b56:	440b      	add	r3, r1
 8015b58:	42bb      	cmp	r3, r7
 8015b5a:	db5e      	blt.n	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b5e:	4299      	cmp	r1, r3
 8015b60:	da5b      	bge.n	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015b62:	f8d8 0000 	ldr.w	r0, [r8]
 8015b66:	42b7      	cmp	r7, r6
 8015b68:	6803      	ldr	r3, [r0, #0]
 8015b6a:	bfcc      	ite	gt
 8015b6c:	1bbf      	subgt	r7, r7, r6
 8015b6e:	2700      	movle	r7, #0
 8015b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b72:	bfc8      	it	gt
 8015b74:	b2bf      	uxthgt	r7, r7
 8015b76:	4798      	blx	r3
 8015b78:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015b7a:	7b5a      	ldrb	r2, [r3, #13]
 8015b7c:	00d1      	lsls	r1, r2, #3
 8015b7e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8015b82:	7a19      	ldrb	r1, [r3, #8]
 8015b84:	4329      	orrs	r1, r5
 8015b86:	0655      	lsls	r5, r2, #25
 8015b88:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8015b8a:	bf48      	it	mi
 8015b8c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8015b90:	4405      	add	r5, r0
 8015b92:	bf48      	it	mi
 8015b94:	b209      	sxthmi	r1, r1
 8015b96:	1a6d      	subs	r5, r5, r1
 8015b98:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8015b9a:	b2ad      	uxth	r5, r5
 8015b9c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015ba0:	fa0f fa85 	sxth.w	sl, r5
 8015ba4:	4551      	cmp	r1, sl
 8015ba6:	dd3c      	ble.n	8015c22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8015ba8:	0112      	lsls	r2, r2, #4
 8015baa:	79d8      	ldrb	r0, [r3, #7]
 8015bac:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8015bb0:	4302      	orrs	r2, r0
 8015bb2:	4492      	add	sl, r2
 8015bb4:	4551      	cmp	r1, sl
 8015bb6:	dc30      	bgt.n	8015c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8015bb8:	1b4d      	subs	r5, r1, r5
 8015bba:	468a      	mov	sl, r1
 8015bbc:	b22d      	sxth	r5, r5
 8015bbe:	9319      	str	r3, [sp, #100]	; 0x64
 8015bc0:	b2ad      	uxth	r5, r5
 8015bc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015bc4:	f8d8 0000 	ldr.w	r0, [r8]
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	6801      	ldr	r1, [r0, #0]
 8015bcc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8015bce:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015bd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8015bd2:	9218      	str	r2, [sp, #96]	; 0x60
 8015bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015bd6:	4788      	blx	r1
 8015bd8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015bdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015bde:	910b      	str	r1, [sp, #44]	; 0x2c
 8015be0:	f898 100e 	ldrb.w	r1, [r8, #14]
 8015be4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015be6:	910a      	str	r1, [sp, #40]	; 0x28
 8015be8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8015bec:	9109      	str	r1, [sp, #36]	; 0x24
 8015bee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8015bf2:	9305      	str	r3, [sp, #20]
 8015bf4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8015bf6:	9206      	str	r2, [sp, #24]
 8015bf8:	9304      	str	r3, [sp, #16]
 8015bfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015bfc:	f8cd a004 	str.w	sl, [sp, #4]
 8015c00:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8015c04:	4437      	add	r7, r6
 8015c06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015c08:	b23f      	sxth	r7, r7
 8015c0a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8015c0e:	9700      	str	r7, [sp, #0]
 8015c10:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	47a8      	blx	r5
 8015c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	930e      	str	r3, [sp, #56]	; 0x38
 8015c20:	e6e0      	b.n	80159e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8015c22:	2500      	movs	r5, #0
 8015c24:	e7cb      	b.n	8015bbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8015c26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8015c28:	3501      	adds	r5, #1
 8015c2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c2c:	429d      	cmp	r5, r3
 8015c2e:	f6bf af74 	bge.w	8015b1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015c32:	4659      	mov	r1, fp
 8015c34:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8015c36:	f7f0 fd19 	bl	800666c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015c3a:	4604      	mov	r4, r0
 8015c3c:	b110      	cbz	r0, 8015c44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8015c3e:	280a      	cmp	r0, #10
 8015c40:	d1f2      	bne.n	8015c28 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8015c42:	e769      	b.n	8015b18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8015c44:	2400      	movs	r4, #0
 8015c46:	e768      	b.n	8015b1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8015c48:	f1bb 0f00 	cmp.w	fp, #0
 8015c4c:	f43f af59 	beq.w	8015b02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8015c50:	e774      	b.n	8015b3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08015c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8015c52:	b530      	push	{r4, r5, lr}
 8015c54:	8ac4      	ldrh	r4, [r0, #22]
 8015c56:	8b45      	ldrh	r5, [r0, #26]
 8015c58:	8343      	strh	r3, [r0, #26]
 8015c5a:	442c      	add	r4, r5
 8015c5c:	1ae4      	subs	r4, r4, r3
 8015c5e:	8b83      	ldrh	r3, [r0, #28]
 8015c60:	82c4      	strh	r4, [r0, #22]
 8015c62:	8b04      	ldrh	r4, [r0, #24]
 8015c64:	4422      	add	r2, r4
 8015c66:	440c      	add	r4, r1
 8015c68:	1a59      	subs	r1, r3, r1
 8015c6a:	83c2      	strh	r2, [r0, #30]
 8015c6c:	8304      	strh	r4, [r0, #24]
 8015c6e:	8381      	strh	r1, [r0, #28]
 8015c70:	bd30      	pop	{r4, r5, pc}

08015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8015c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c76:	4604      	mov	r4, r0
 8015c78:	8a47      	ldrh	r7, [r0, #18]
 8015c7a:	68c0      	ldr	r0, [r0, #12]
 8015c7c:	b085      	sub	sp, #20
 8015c7e:	6803      	ldr	r3, [r0, #0]
 8015c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c82:	4798      	blx	r3
 8015c84:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8015c88:	7a63      	ldrb	r3, [r4, #9]
 8015c8a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8015c8e:	3b01      	subs	r3, #1
 8015c90:	42b7      	cmp	r7, r6
 8015c92:	bfac      	ite	ge
 8015c94:	f04f 0900 	movge.w	r9, #0
 8015c98:	f04f 0901 	movlt.w	r9, #1
 8015c9c:	2b05      	cmp	r3, #5
 8015c9e:	d804      	bhi.n	8015caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8015ca0:	e8df f003 	tbb	[pc, r3]
 8015ca4:	470f0854 	.word	0x470f0854
 8015ca8:	4c4c      	.short	0x4c4c
 8015caa:	2500      	movs	r5, #0
 8015cac:	46a9      	mov	r9, r5
 8015cae:	462e      	mov	r6, r5
 8015cb0:	462f      	mov	r7, r5
 8015cb2:	e00e      	b.n	8015cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015cb4:	42b7      	cmp	r7, r6
 8015cb6:	f04f 0500 	mov.w	r5, #0
 8015cba:	bfb4      	ite	lt
 8015cbc:	2600      	movlt	r6, #0
 8015cbe:	2601      	movge	r6, #1
 8015cc0:	e7f6      	b.n	8015cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015cc2:	42b7      	cmp	r7, r6
 8015cc4:	464d      	mov	r5, r9
 8015cc6:	f04f 0900 	mov.w	r9, #0
 8015cca:	bfb4      	ite	lt
 8015ccc:	2600      	movlt	r6, #0
 8015cce:	2601      	movge	r6, #1
 8015cd0:	464f      	mov	r7, r9
 8015cd2:	f04f 0800 	mov.w	r8, #0
 8015cd6:	f8a4 8016 	strh.w	r8, [r4, #22]
 8015cda:	f8a4 8018 	strh.w	r8, [r4, #24]
 8015cde:	f8cd 8004 	str.w	r8, [sp, #4]
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	9303      	str	r3, [sp, #12]
 8015ce6:	8823      	ldrh	r3, [r4, #0]
 8015ce8:	2b20      	cmp	r3, #32
 8015cea:	d033      	beq.n	8015d54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8015cec:	f242 010b 	movw	r1, #8203	; 0x200b
 8015cf0:	1a5a      	subs	r2, r3, r1
 8015cf2:	f1d2 0a00 	rsbs	sl, r2, #0
 8015cf6:	eb4a 0a02 	adc.w	sl, sl, r2
 8015cfa:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8015cfe:	4293      	cmp	r3, r2
 8015d00:	d008      	beq.n	8015d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015d02:	428b      	cmp	r3, r1
 8015d04:	9a01      	ldr	r2, [sp, #4]
 8015d06:	bf0e      	itee	eq
 8015d08:	f04f 0a01 	moveq.w	sl, #1
 8015d0c:	461a      	movne	r2, r3
 8015d0e:	f04f 0a00 	movne.w	sl, #0
 8015d12:	9201      	str	r2, [sp, #4]
 8015d14:	ab03      	add	r3, sp, #12
 8015d16:	68e2      	ldr	r2, [r4, #12]
 8015d18:	7a21      	ldrb	r1, [r4, #8]
 8015d1a:	6860      	ldr	r0, [r4, #4]
 8015d1c:	f002 fda0 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015d20:	8020      	strh	r0, [r4, #0]
 8015d22:	b9d8      	cbnz	r0, 8015d5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8015d24:	8ba2      	ldrh	r2, [r4, #28]
 8015d26:	2300      	movs	r3, #0
 8015d28:	4611      	mov	r1, r2
 8015d2a:	4620      	mov	r0, r4
 8015d2c:	f7ff ff91 	bl	8015c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015d30:	e06e      	b.n	8015e10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015d32:	2500      	movs	r5, #0
 8015d34:	2701      	movs	r7, #1
 8015d36:	46a9      	mov	r9, r5
 8015d38:	462e      	mov	r6, r5
 8015d3a:	e7ca      	b.n	8015cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015d3c:	42b7      	cmp	r7, r6
 8015d3e:	f04f 0500 	mov.w	r5, #0
 8015d42:	bfb4      	ite	lt
 8015d44:	2700      	movlt	r7, #0
 8015d46:	2701      	movge	r7, #1
 8015d48:	462e      	mov	r6, r5
 8015d4a:	e7c2      	b.n	8015cd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8015d4c:	2500      	movs	r5, #0
 8015d4e:	2601      	movs	r6, #1
 8015d50:	46a9      	mov	r9, r5
 8015d52:	e7ad      	b.n	8015cb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8015d54:	9301      	str	r3, [sp, #4]
 8015d56:	f04f 0a01 	mov.w	sl, #1
 8015d5a:	e7db      	b.n	8015d14 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8015d5c:	8b63      	ldrh	r3, [r4, #26]
 8015d5e:	280a      	cmp	r0, #10
 8015d60:	f103 0301 	add.w	r3, r3, #1
 8015d64:	8363      	strh	r3, [r4, #26]
 8015d66:	d0dd      	beq.n	8015d24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8015d68:	9a03      	ldr	r2, [sp, #12]
 8015d6a:	bb62      	cbnz	r2, 8015dc6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8015d6c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015d70:	4298      	cmp	r0, r3
 8015d72:	d003      	beq.n	8015d7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015d74:	f242 030b 	movw	r3, #8203	; 0x200b
 8015d78:	4298      	cmp	r0, r3
 8015d7a:	d1b2      	bne.n	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015d7c:	8823      	ldrh	r3, [r4, #0]
 8015d7e:	8ba1      	ldrh	r1, [r4, #28]
 8015d80:	2b20      	cmp	r3, #32
 8015d82:	d003      	beq.n	8015d8c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8015d84:	f242 000b 	movw	r0, #8203	; 0x200b
 8015d88:	4283      	cmp	r3, r0
 8015d8a:	d131      	bne.n	8015df0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8015d8c:	f1ba 0f00 	cmp.w	sl, #0
 8015d90:	bf0a      	itet	eq
 8015d92:	4688      	moveq	r8, r1
 8015d94:	4650      	movne	r0, sl
 8015d96:	2001      	moveq	r0, #1
 8015d98:	440a      	add	r2, r1
 8015d9a:	8b23      	ldrh	r3, [r4, #24]
 8015d9c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8015da0:	b292      	uxth	r2, r2
 8015da2:	83a2      	strh	r2, [r4, #28]
 8015da4:	4413      	add	r3, r2
 8015da6:	f1b9 0f00 	cmp.w	r9, #0
 8015daa:	d102      	bne.n	8015db2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8015dac:	2d00      	cmp	r5, #0
 8015dae:	d042      	beq.n	8015e36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8015db0:	b300      	cbz	r0, 8015df4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8015db2:	8c21      	ldrh	r1, [r4, #32]
 8015db4:	4419      	add	r1, r3
 8015db6:	458c      	cmp	ip, r1
 8015db8:	da37      	bge.n	8015e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015dba:	8ae1      	ldrh	r1, [r4, #22]
 8015dbc:	2900      	cmp	r1, #0
 8015dbe:	d034      	beq.n	8015e2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8015dc0:	4563      	cmp	r3, ip
 8015dc2:	dd8e      	ble.n	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015dc4:	e01d      	b.n	8015e02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8015dc6:	8893      	ldrh	r3, [r2, #4]
 8015dc8:	9901      	ldr	r1, [sp, #4]
 8015dca:	8023      	strh	r3, [r4, #0]
 8015dcc:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8015dd0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8015dd4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8015dd8:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8015ddc:	ea4b 0b00 	orr.w	fp, fp, r0
 8015de0:	68e0      	ldr	r0, [r4, #12]
 8015de2:	6803      	ldr	r3, [r0, #0]
 8015de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015de6:	4798      	blx	r3
 8015de8:	eb0b 0200 	add.w	r2, fp, r0
 8015dec:	b292      	uxth	r2, r2
 8015dee:	e7c5      	b.n	8015d7c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8015df0:	2000      	movs	r0, #0
 8015df2:	e7d1      	b.n	8015d98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8015df4:	4563      	cmp	r3, ip
 8015df6:	f77f af74 	ble.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015dfa:	8ae3      	ldrh	r3, [r4, #22]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	f43f af70 	beq.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e02:	2301      	movs	r3, #1
 8015e04:	8c22      	ldrh	r2, [r4, #32]
 8015e06:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8015e0a:	8be3      	ldrh	r3, [r4, #30]
 8015e0c:	4413      	add	r3, r2
 8015e0e:	83e3      	strh	r3, [r4, #30]
 8015e10:	68e0      	ldr	r0, [r4, #12]
 8015e12:	6803      	ldr	r3, [r0, #0]
 8015e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e16:	4798      	blx	r3
 8015e18:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8015e1c:	4418      	add	r0, r3
 8015e1e:	8a63      	ldrh	r3, [r4, #18]
 8015e20:	1a18      	subs	r0, r3, r0
 8015e22:	8260      	strh	r0, [r4, #18]
 8015e24:	b005      	add	sp, #20
 8015e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	4611      	mov	r1, r2
 8015e2e:	4620      	mov	r0, r4
 8015e30:	f7ff ff0f 	bl	8015c52 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8015e34:	e755      	b.n	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e36:	4563      	cmp	r3, ip
 8015e38:	dd14      	ble.n	8015e64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8015e3a:	b117      	cbz	r7, 8015e42 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	460a      	mov	r2, r1
 8015e40:	e772      	b.n	8015d28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8015e42:	2e00      	cmp	r6, #0
 8015e44:	f43f af4d 	beq.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	f47f af4a 	bne.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e4e:	f1ba 0f00 	cmp.w	sl, #0
 8015e52:	d002      	beq.n	8015e5a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8015e54:	2301      	movs	r3, #1
 8015e56:	4642      	mov	r2, r8
 8015e58:	e767      	b.n	8015d2a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8015e5a:	8ae3      	ldrh	r3, [r4, #22]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	f43f af40 	beq.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e62:	e7d5      	b.n	8015e10 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	f47f af3c 	bne.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e6a:	f1ba 0f00 	cmp.w	sl, #0
 8015e6e:	f43f af38 	beq.w	8015ce2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8015e72:	2301      	movs	r3, #1
 8015e74:	4642      	mov	r2, r8
 8015e76:	e7da      	b.n	8015e2e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08015e78 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8015e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	b08f      	sub	sp, #60	; 0x3c
 8015e7e:	4617      	mov	r7, r2
 8015e80:	461c      	mov	r4, r3
 8015e82:	460e      	mov	r6, r1
 8015e84:	b1d1      	cbz	r1, 8015ebc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	4620      	mov	r0, r4
 8015e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e8c:	4798      	blx	r3
 8015e8e:	4240      	negs	r0, r0
 8015e90:	9603      	str	r6, [sp, #12]
 8015e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e96:	b200      	sxth	r0, r0
 8015e98:	9700      	str	r7, [sp, #0]
 8015e9a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8015e9e:	4629      	mov	r1, r5
 8015ea0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8015ea4:	2401      	movs	r4, #1
 8015ea6:	a805      	add	r0, sp, #20
 8015ea8:	f7ff fcbe 	bl	8015828 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015eac:	a805      	add	r0, sp, #20
 8015eae:	f7ff fee0 	bl	8015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015eb2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8015eb6:	b163      	cbz	r3, 8015ed2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8015eb8:	3401      	adds	r4, #1
 8015eba:	e7f7      	b.n	8015eac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8015ebc:	2401      	movs	r4, #1
 8015ebe:	f002 fd9b 	bl	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ec2:	280a      	cmp	r0, #10
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	bf08      	it	eq
 8015ec8:	3401      	addeq	r4, #1
 8015eca:	f002 fd95 	bl	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015ece:	2800      	cmp	r0, #0
 8015ed0:	d1f7      	bne.n	8015ec2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8015ed2:	b2a0      	uxth	r0, r4
 8015ed4:	b00f      	add	sp, #60	; 0x3c
 8015ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ed8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	b0e3      	sub	sp, #396	; 0x18c
 8015ede:	461c      	mov	r4, r3
 8015ee0:	4683      	mov	fp, r0
 8015ee2:	4688      	mov	r8, r1
 8015ee4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 810f 	beq.w	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015eec:	6823      	ldr	r3, [r4, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 810b 	beq.w	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015ef4:	7ba3      	ldrb	r3, [r4, #14]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	f000 8107 	beq.w	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8015efc:	ad0a      	add	r5, sp, #40	; 0x28
 8015efe:	6810      	ldr	r0, [r2, #0]
 8015f00:	6851      	ldr	r1, [r2, #4]
 8015f02:	462b      	mov	r3, r5
 8015f04:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8015f08:	c303      	stmia	r3!, {r0, r1}
 8015f0a:	2100      	movs	r1, #0
 8015f0c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8015f10:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015f14:	4628      	mov	r0, r5
 8015f16:	910c      	str	r1, [sp, #48]	; 0x30
 8015f18:	a90c      	add	r1, sp, #48	; 0x30
 8015f1a:	79a2      	ldrb	r2, [r4, #6]
 8015f1c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015f20:	f7ff fd01 	bl	8015926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015f24:	a90c      	add	r1, sp, #48	; 0x30
 8015f26:	79a2      	ldrb	r2, [r4, #6]
 8015f28:	4608      	mov	r0, r1
 8015f2a:	f7ff fcfc 	bl	8015926 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8015f2e:	a817      	add	r0, sp, #92	; 0x5c
 8015f30:	f002 f936 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8015f34:	6820      	ldr	r0, [r4, #0]
 8015f36:	6803      	ldr	r3, [r0, #0]
 8015f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f3a:	4798      	blx	r3
 8015f3c:	4606      	mov	r6, r0
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	6803      	ldr	r3, [r0, #0]
 8015f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f44:	4798      	blx	r3
 8015f46:	4633      	mov	r3, r6
 8015f48:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015f4a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015f4c:	9000      	str	r0, [sp, #0]
 8015f4e:	a817      	add	r0, sp, #92	; 0x5c
 8015f50:	f002 f981 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	f894 a004 	ldrb.w	sl, [r4, #4]
 8015f5a:	6803      	ldr	r3, [r0, #0]
 8015f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f5e:	4798      	blx	r3
 8015f60:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	4607      	mov	r7, r0
 8015f68:	4406      	add	r6, r0
 8015f6a:	a830      	add	r0, sp, #192	; 0xc0
 8015f6c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8015f70:	f002 f916 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8015f74:	7c23      	ldrb	r3, [r4, #16]
 8015f76:	b17b      	cbz	r3, 8015f98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8015f78:	6820      	ldr	r0, [r4, #0]
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f7e:	4798      	blx	r3
 8015f80:	9009      	str	r0, [sp, #36]	; 0x24
 8015f82:	6820      	ldr	r0, [r4, #0]
 8015f84:	6802      	ldr	r2, [r0, #0]
 8015f86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015f88:	4790      	blx	r2
 8015f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f8c:	9000      	str	r0, [sp, #0]
 8015f8e:	a830      	add	r0, sp, #192	; 0xc0
 8015f90:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8015f92:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8015f94:	f002 f95f 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015f98:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015f9c:	a80e      	add	r0, sp, #56	; 0x38
 8015f9e:	7be2      	ldrb	r2, [r4, #15]
 8015fa0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8015fa4:	1a8a      	subs	r2, r1, r2
 8015fa6:	7c21      	ldrb	r1, [r4, #16]
 8015fa8:	9103      	str	r1, [sp, #12]
 8015faa:	b292      	uxth	r2, r2
 8015fac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8015fb0:	9102      	str	r1, [sp, #8]
 8015fb2:	6821      	ldr	r1, [r4, #0]
 8015fb4:	9101      	str	r1, [sp, #4]
 8015fb6:	7961      	ldrb	r1, [r4, #5]
 8015fb8:	9100      	str	r1, [sp, #0]
 8015fba:	a930      	add	r1, sp, #192	; 0xc0
 8015fbc:	f7ff fc34 	bl	8015828 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8015fc0:	2e00      	cmp	r6, #0
 8015fc2:	dc5b      	bgt.n	801607c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8015fc4:	af17      	add	r7, sp, #92	; 0x5c
 8015fc6:	f04f 0900 	mov.w	r9, #0
 8015fca:	7c23      	ldrb	r3, [r4, #16]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	f000 80ae 	beq.w	801612e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8015fd2:	a80e      	add	r0, sp, #56	; 0x38
 8015fd4:	f7ff fe4d 	bl	8015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015fd8:	f1ba 0f00 	cmp.w	sl, #0
 8015fdc:	f000 80a2 	beq.w	8016124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8015fe0:	7c23      	ldrb	r3, [r4, #16]
 8015fe2:	2264      	movs	r2, #100	; 0x64
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	a849      	add	r0, sp, #292	; 0x124
 8015fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8015fea:	f00b ff23 	bl	8021e34 <memcpy>
 8015fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 80a4 	beq.w	801613e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8015ff6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015ffa:	7922      	ldrb	r2, [r4, #4]
 8015ffc:	2a01      	cmp	r2, #1
 8015ffe:	f040 8087 	bne.w	8016110 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016002:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8016006:	1ac0      	subs	r0, r0, r3
 8016008:	2302      	movs	r3, #2
 801600a:	fb90 f0f3 	sdiv	r0, r0, r3
 801600e:	b200      	sxth	r0, r0
 8016010:	7c23      	ldrb	r3, [r4, #16]
 8016012:	2b00      	cmp	r3, #0
 8016014:	f000 8088 	beq.w	8016128 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8016018:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801601c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8016020:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016024:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8016028:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801602c:	2100      	movs	r1, #0
 801602e:	4410      	add	r0, r2
 8016030:	4642      	mov	r2, r8
 8016032:	b200      	sxth	r0, r0
 8016034:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8016038:	9000      	str	r0, [sp, #0]
 801603a:	4658      	mov	r0, fp
 801603c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8016040:	f7ff fca2 	bl	8015988 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8016044:	2800      	cmp	r0, #0
 8016046:	d160      	bne.n	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016048:	b2b2      	uxth	r2, r6
 801604a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801604e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016052:	4413      	add	r3, r2
 8016054:	1a8a      	subs	r2, r1, r2
 8016056:	b21b      	sxth	r3, r3
 8016058:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801605c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8016060:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016064:	2a00      	cmp	r2, #0
 8016066:	d150      	bne.n	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8016068:	6822      	ldr	r2, [r4, #0]
 801606a:	8869      	ldrh	r1, [r5, #2]
 801606c:	7a12      	ldrb	r2, [r2, #8]
 801606e:	1a9b      	subs	r3, r3, r2
 8016070:	88ea      	ldrh	r2, [r5, #6]
 8016072:	440a      	add	r2, r1
 8016074:	b212      	sxth	r2, r2
 8016076:	4293      	cmp	r3, r2
 8016078:	dda7      	ble.n	8015fca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801607a:	e046      	b.n	801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801607c:	7c23      	ldrb	r3, [r4, #16]
 801607e:	444f      	add	r7, r9
 8016080:	b1c3      	cbz	r3, 80160b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8016082:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8016086:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801608a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801608e:	443b      	add	r3, r7
 8016090:	4293      	cmp	r3, r2
 8016092:	da97      	bge.n	8015fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016094:	a80e      	add	r0, sp, #56	; 0x38
 8016096:	f7ff fdec 	bl	8015c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801609a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801609e:	3b01      	subs	r3, #1
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	454b      	cmp	r3, r9
 80160a4:	9309      	str	r3, [sp, #36]	; 0x24
 80160a6:	d021      	beq.n	80160ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80160a8:	7961      	ldrb	r1, [r4, #5]
 80160aa:	a817      	add	r0, sp, #92	; 0x5c
 80160ac:	f7f0 fade 	bl	800666c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80160b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160b2:	e7f4      	b.n	801609e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80160b4:	fa1f f986 	uxth.w	r9, r6
 80160b8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80160bc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80160c0:	443b      	add	r3, r7
 80160c2:	4293      	cmp	r3, r2
 80160c4:	f6bf af7e 	bge.w	8015fc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80160c8:	a817      	add	r0, sp, #92	; 0x5c
 80160ca:	f002 fc95 	bl	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80160ce:	b1e0      	cbz	r0, 801610a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80160d0:	280a      	cmp	r0, #10
 80160d2:	d1f1      	bne.n	80160b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80160d4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80160d8:	444b      	add	r3, r9
 80160da:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80160de:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80160e2:	eba3 0309 	sub.w	r3, r3, r9
 80160e6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80160ea:	e7e5      	b.n	80160b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80160ec:	b2b3      	uxth	r3, r6
 80160ee:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80160f2:	441a      	add	r2, r3
 80160f4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80160f8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80160fc:	1ad3      	subs	r3, r2, r3
 80160fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016102:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016106:	2b00      	cmp	r3, #0
 8016108:	d1bd      	bne.n	8016086 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801610a:	b063      	add	sp, #396	; 0x18c
 801610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016110:	2a02      	cmp	r2, #2
 8016112:	d105      	bne.n	8016120 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8016114:	7be2      	ldrb	r2, [r4, #15]
 8016116:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801611a:	1a80      	subs	r0, r0, r2
 801611c:	1ac0      	subs	r0, r0, r3
 801611e:	e776      	b.n	801600e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8016120:	2000      	movs	r0, #0
 8016122:	e775      	b.n	8016010 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016124:	7be0      	ldrb	r0, [r4, #15]
 8016126:	e773      	b.n	8016010 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8016128:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801612c:	e776      	b.n	801601c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801612e:	f1ba 0f00 	cmp.w	sl, #0
 8016132:	d0f7      	beq.n	8016124 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8016134:	2264      	movs	r2, #100	; 0x64
 8016136:	4639      	mov	r1, r7
 8016138:	a849      	add	r0, sp, #292	; 0x124
 801613a:	f00b fe7b 	bl	8021e34 <memcpy>
 801613e:	2300      	movs	r3, #0
 8016140:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8016144:	6821      	ldr	r1, [r4, #0]
 8016146:	a849      	add	r0, sp, #292	; 0x124
 8016148:	f7ff fbb1 	bl	80158ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801614c:	b203      	sxth	r3, r0
 801614e:	e754      	b.n	8015ffa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08016150 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8016150:	2b03      	cmp	r3, #3
 8016152:	d818      	bhi.n	8016186 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8016154:	e8df f003 	tbb	[pc, r3]
 8016158:	130d0602 	.word	0x130d0602
 801615c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016160:	1850      	adds	r0, r2, r1
 8016162:	4770      	bx	lr
 8016164:	8803      	ldrh	r3, [r0, #0]
 8016166:	8880      	ldrh	r0, [r0, #4]
 8016168:	4418      	add	r0, r3
 801616a:	b200      	sxth	r0, r0
 801616c:	1a80      	subs	r0, r0, r2
 801616e:	3801      	subs	r0, #1
 8016170:	4770      	bx	lr
 8016172:	8803      	ldrh	r3, [r0, #0]
 8016174:	8880      	ldrh	r0, [r0, #4]
 8016176:	4418      	add	r0, r3
 8016178:	b200      	sxth	r0, r0
 801617a:	1a40      	subs	r0, r0, r1
 801617c:	e7f7      	b.n	801616e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801617e:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016182:	4410      	add	r0, r2
 8016184:	4770      	bx	lr
 8016186:	2000      	movs	r0, #0
 8016188:	4770      	bx	lr

0801618a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801618a:	2b03      	cmp	r3, #3
 801618c:	d817      	bhi.n	80161be <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801618e:	e8df f003 	tbb	[pc, r3]
 8016192:	0602      	.short	0x0602
 8016194:	1009      	.short	0x1009
 8016196:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801619a:	1850      	adds	r0, r2, r1
 801619c:	4770      	bx	lr
 801619e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80161a2:	e7fa      	b.n	801619a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80161a4:	8843      	ldrh	r3, [r0, #2]
 80161a6:	88c0      	ldrh	r0, [r0, #6]
 80161a8:	4418      	add	r0, r3
 80161aa:	b200      	sxth	r0, r0
 80161ac:	1a80      	subs	r0, r0, r2
 80161ae:	3801      	subs	r0, #1
 80161b0:	4770      	bx	lr
 80161b2:	8843      	ldrh	r3, [r0, #2]
 80161b4:	88c0      	ldrh	r0, [r0, #6]
 80161b6:	4418      	add	r0, r3
 80161b8:	b200      	sxth	r0, r0
 80161ba:	1a40      	subs	r0, r0, r1
 80161bc:	e7f7      	b.n	80161ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80161be:	2000      	movs	r0, #0
 80161c0:	4770      	bx	lr
	...

080161c4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80161c4:	4b01      	ldr	r3, [pc, #4]	; (80161cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80161c6:	2200      	movs	r2, #0
 80161c8:	601a      	str	r2, [r3, #0]
 80161ca:	4770      	bx	lr
 80161cc:	2400ea44 	.word	0x2400ea44

080161d0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80161d0:	4603      	mov	r3, r0
 80161d2:	b1c8      	cbz	r0, 8016208 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80161d4:	0c02      	lsrs	r2, r0, #16
 80161d6:	0412      	lsls	r2, r2, #16
 80161d8:	b9a2      	cbnz	r2, 8016204 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80161da:	0403      	lsls	r3, r0, #16
 80161dc:	2010      	movs	r0, #16
 80161de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80161e2:	bf04      	itt	eq
 80161e4:	021b      	lsleq	r3, r3, #8
 80161e6:	3008      	addeq	r0, #8
 80161e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80161ec:	bf04      	itt	eq
 80161ee:	011b      	lsleq	r3, r3, #4
 80161f0:	3004      	addeq	r0, #4
 80161f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80161f6:	bf04      	itt	eq
 80161f8:	009b      	lsleq	r3, r3, #2
 80161fa:	3002      	addeq	r0, #2
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	db04      	blt.n	801620a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016200:	3001      	adds	r0, #1
 8016202:	4770      	bx	lr
 8016204:	2000      	movs	r0, #0
 8016206:	e7ea      	b.n	80161de <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016208:	2020      	movs	r0, #32
 801620a:	4770      	bx	lr

0801620c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801620c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016210:	b087      	sub	sp, #28
 8016212:	4681      	mov	r9, r0
 8016214:	4698      	mov	r8, r3
 8016216:	4610      	mov	r0, r2
 8016218:	460d      	mov	r5, r1
 801621a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801621e:	b981      	cbnz	r1, 8016242 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8016220:	b14b      	cbz	r3, 8016236 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8016222:	460b      	mov	r3, r1
 8016224:	464a      	mov	r2, r9
 8016226:	4641      	mov	r1, r8
 8016228:	e9cd 4700 	strd	r4, r7, [sp]
 801622c:	f7ff ffee 	bl	801620c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016230:	b007      	add	sp, #28
 8016232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016236:	f04f 33ff 	mov.w	r3, #4294967295
 801623a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801623e:	603b      	str	r3, [r7, #0]
 8016240:	e7f6      	b.n	8016230 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016242:	fa32 fa01 	lsrs.w	sl, r2, r1
 8016246:	d107      	bne.n	8016258 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8016248:	fb09 f602 	mul.w	r6, r9, r2
 801624c:	fbb6 f0f4 	udiv	r0, r6, r4
 8016250:	fb04 6610 	mls	r6, r4, r0, r6
 8016254:	603e      	str	r6, [r7, #0]
 8016256:	e7eb      	b.n	8016230 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8016258:	2601      	movs	r6, #1
 801625a:	fa09 fb01 	lsl.w	fp, r9, r1
 801625e:	408e      	lsls	r6, r1
 8016260:	fbbb f3f4 	udiv	r3, fp, r4
 8016264:	3e01      	subs	r6, #1
 8016266:	9302      	str	r3, [sp, #8]
 8016268:	fb0a f303 	mul.w	r3, sl, r3
 801626c:	4016      	ands	r6, r2
 801626e:	9303      	str	r3, [sp, #12]
 8016270:	4630      	mov	r0, r6
 8016272:	f7ff ffad 	bl	80161d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016276:	464a      	mov	r2, r9
 8016278:	460b      	mov	r3, r1
 801627a:	4601      	mov	r1, r0
 801627c:	4630      	mov	r0, r6
 801627e:	e9cd 4700 	strd	r4, r7, [sp]
 8016282:	f7ff ffc3 	bl	801620c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016286:	9b02      	ldr	r3, [sp, #8]
 8016288:	4606      	mov	r6, r0
 801628a:	eb05 0108 	add.w	r1, r5, r8
 801628e:	fb04 bb13 	mls	fp, r4, r3, fp
 8016292:	4658      	mov	r0, fp
 8016294:	f7ff ff9c 	bl	80161d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016298:	ab05      	add	r3, sp, #20
 801629a:	465a      	mov	r2, fp
 801629c:	e9cd 4300 	strd	r4, r3, [sp]
 80162a0:	4603      	mov	r3, r0
 80162a2:	4650      	mov	r0, sl
 80162a4:	f7ff ffb2 	bl	801620c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80162a8:	6839      	ldr	r1, [r7, #0]
 80162aa:	9a05      	ldr	r2, [sp, #20]
 80162ac:	9b03      	ldr	r3, [sp, #12]
 80162ae:	4411      	add	r1, r2
 80162b0:	fbb1 f2f4 	udiv	r2, r1, r4
 80162b4:	18d3      	adds	r3, r2, r3
 80162b6:	fb04 1412 	mls	r4, r4, r2, r1
 80162ba:	441e      	add	r6, r3
 80162bc:	603c      	str	r4, [r7, #0]
 80162be:	4430      	add	r0, r6
 80162c0:	e7b6      	b.n	8016230 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

080162c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 80162c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80162c6:	b085      	sub	sp, #20
 80162c8:	f1b0 0900 	subs.w	r9, r0, #0
 80162cc:	461d      	mov	r5, r3
 80162ce:	4617      	mov	r7, r2
 80162d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80162d2:	bfbb      	ittet	lt
 80162d4:	f1c9 0900 	rsblt	r9, r9, #0
 80162d8:	f04f 36ff 	movlt.w	r6, #4294967295
 80162dc:	2601      	movge	r6, #1
 80162de:	6823      	ldrlt	r3, [r4, #0]
 80162e0:	bfbc      	itt	lt
 80162e2:	425b      	neglt	r3, r3
 80162e4:	6023      	strlt	r3, [r4, #0]
 80162e6:	2a00      	cmp	r2, #0
 80162e8:	da04      	bge.n	80162f4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80162ea:	6823      	ldr	r3, [r4, #0]
 80162ec:	4257      	negs	r7, r2
 80162ee:	4276      	negs	r6, r6
 80162f0:	425b      	negs	r3, r3
 80162f2:	6023      	str	r3, [r4, #0]
 80162f4:	2d00      	cmp	r5, #0
 80162f6:	4638      	mov	r0, r7
 80162f8:	bfba      	itte	lt
 80162fa:	426d      	neglt	r5, r5
 80162fc:	f04f 38ff 	movlt.w	r8, #4294967295
 8016300:	f04f 0801 	movge.w	r8, #1
 8016304:	f7ff ff64 	bl	80161d0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016308:	ab03      	add	r3, sp, #12
 801630a:	463a      	mov	r2, r7
 801630c:	e9cd 5300 	strd	r5, r3, [sp]
 8016310:	4603      	mov	r3, r0
 8016312:	4648      	mov	r0, r9
 8016314:	f7ff ff7a 	bl	801620c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016318:	6823      	ldr	r3, [r4, #0]
 801631a:	9a03      	ldr	r2, [sp, #12]
 801631c:	4546      	cmp	r6, r8
 801631e:	441a      	add	r2, r3
 8016320:	fb92 f3f5 	sdiv	r3, r2, r5
 8016324:	4418      	add	r0, r3
 8016326:	fb05 2313 	mls	r3, r5, r3, r2
 801632a:	bf18      	it	ne
 801632c:	4240      	negne	r0, r0
 801632e:	1c72      	adds	r2, r6, #1
 8016330:	6023      	str	r3, [r4, #0]
 8016332:	d105      	bne.n	8016340 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8016334:	2b00      	cmp	r3, #0
 8016336:	f1c3 0200 	rsb	r2, r3, #0
 801633a:	db0b      	blt.n	8016354 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801633c:	6022      	str	r2, [r4, #0]
 801633e:	e006      	b.n	801634e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016340:	2e01      	cmp	r6, #1
 8016342:	d104      	bne.n	801634e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016344:	2b00      	cmp	r3, #0
 8016346:	da02      	bge.n	801634e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8016348:	442b      	add	r3, r5
 801634a:	3801      	subs	r0, #1
 801634c:	6023      	str	r3, [r4, #0]
 801634e:	b005      	add	sp, #20
 8016350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016354:	3801      	subs	r0, #1
 8016356:	1b52      	subs	r2, r2, r5
 8016358:	e7f0      	b.n	801633c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801635c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801635c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8016360:	4c1c      	ldr	r4, [pc, #112]	; (80163d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8016362:	4605      	mov	r5, r0
 8016364:	6807      	ldr	r7, [r0, #0]
 8016366:	69a3      	ldr	r3, [r4, #24]
 8016368:	b92b      	cbnz	r3, 8016376 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801636a:	6840      	ldr	r0, [r0, #4]
 801636c:	e9c5 7000 	strd	r7, r0, [r5]
 8016370:	b004      	add	sp, #16
 8016372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016376:	f04f 0802 	mov.w	r8, #2
 801637a:	68a2      	ldr	r2, [r4, #8]
 801637c:	ae04      	add	r6, sp, #16
 801637e:	6820      	ldr	r0, [r4, #0]
 8016380:	fb93 f1f8 	sdiv	r1, r3, r8
 8016384:	440a      	add	r2, r1
 8016386:	69e1      	ldr	r1, [r4, #28]
 8016388:	f846 2d04 	str.w	r2, [r6, #-4]!
 801638c:	463a      	mov	r2, r7
 801638e:	9600      	str	r6, [sp, #0]
 8016390:	f7ff ff97 	bl	80162c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016394:	69a3      	ldr	r3, [r4, #24]
 8016396:	4607      	mov	r7, r0
 8016398:	686a      	ldr	r2, [r5, #4]
 801639a:	6a21      	ldr	r1, [r4, #32]
 801639c:	9600      	str	r6, [sp, #0]
 801639e:	6860      	ldr	r0, [r4, #4]
 80163a0:	f7ff ff8f 	bl	80162c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80163a4:	69a3      	ldr	r3, [r4, #24]
 80163a6:	6962      	ldr	r2, [r4, #20]
 80163a8:	4407      	add	r7, r0
 80163aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80163ac:	9600      	str	r6, [sp, #0]
 80163ae:	68e0      	ldr	r0, [r4, #12]
 80163b0:	fb93 f8f8 	sdiv	r8, r3, r8
 80163b4:	4442      	add	r2, r8
 80163b6:	9203      	str	r2, [sp, #12]
 80163b8:	682a      	ldr	r2, [r5, #0]
 80163ba:	f7ff ff82 	bl	80162c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80163be:	4680      	mov	r8, r0
 80163c0:	9600      	str	r6, [sp, #0]
 80163c2:	69a3      	ldr	r3, [r4, #24]
 80163c4:	686a      	ldr	r2, [r5, #4]
 80163c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80163c8:	6920      	ldr	r0, [r4, #16]
 80163ca:	f7ff ff7a 	bl	80162c2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80163ce:	4440      	add	r0, r8
 80163d0:	e7cc      	b.n	801636c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80163d2:	bf00      	nop
 80163d4:	2400ea48 	.word	0x2400ea48

080163d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80163d8:	4b07      	ldr	r3, [pc, #28]	; (80163f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80163da:	781b      	ldrb	r3, [r3, #0]
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d109      	bne.n	80163f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80163e0:	f9b1 3000 	ldrsh.w	r3, [r1]
 80163e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80163e8:	8003      	strh	r3, [r0, #0]
 80163ea:	4b04      	ldr	r3, [pc, #16]	; (80163fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80163ec:	881b      	ldrh	r3, [r3, #0]
 80163ee:	3b01      	subs	r3, #1
 80163f0:	1a9b      	subs	r3, r3, r2
 80163f2:	800b      	strh	r3, [r1, #0]
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	2400ea2c 	.word	0x2400ea2c
 80163fc:	2400ea28 	.word	0x2400ea28

08016400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8016400:	4b07      	ldr	r3, [pc, #28]	; (8016420 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8016402:	b510      	push	{r4, lr}
 8016404:	781b      	ldrb	r3, [r3, #0]
 8016406:	2b01      	cmp	r3, #1
 8016408:	d108      	bne.n	801641c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801640a:	4b06      	ldr	r3, [pc, #24]	; (8016424 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801640c:	880c      	ldrh	r4, [r1, #0]
 801640e:	881b      	ldrh	r3, [r3, #0]
 8016410:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016414:	3b01      	subs	r3, #1
 8016416:	1b1b      	subs	r3, r3, r4
 8016418:	8003      	strh	r3, [r0, #0]
 801641a:	800a      	strh	r2, [r1, #0]
 801641c:	bd10      	pop	{r4, pc}
 801641e:	bf00      	nop
 8016420:	2400ea2c 	.word	0x2400ea2c
 8016424:	2400ea28 	.word	0x2400ea28

08016428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8016428:	4b0a      	ldr	r3, [pc, #40]	; (8016454 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801642a:	b510      	push	{r4, lr}
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d10e      	bne.n	8016450 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8016432:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8016436:	8843      	ldrh	r3, [r0, #2]
 8016438:	f9b0 4000 	ldrsh.w	r4, [r0]
 801643c:	18ca      	adds	r2, r1, r3
 801643e:	4b06      	ldr	r3, [pc, #24]	; (8016458 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8016440:	8044      	strh	r4, [r0, #2]
 8016442:	881b      	ldrh	r3, [r3, #0]
 8016444:	1a9b      	subs	r3, r3, r2
 8016446:	8003      	strh	r3, [r0, #0]
 8016448:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801644c:	8081      	strh	r1, [r0, #4]
 801644e:	80c3      	strh	r3, [r0, #6]
 8016450:	bd10      	pop	{r4, pc}
 8016452:	bf00      	nop
 8016454:	2400ea2c 	.word	0x2400ea2c
 8016458:	2400ea28 	.word	0x2400ea28

0801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801645c:	4b08      	ldr	r3, [pc, #32]	; (8016480 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	2b01      	cmp	r3, #1
 8016462:	d10c      	bne.n	801647e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8016464:	8803      	ldrh	r3, [r0, #0]
 8016466:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801646a:	8842      	ldrh	r2, [r0, #2]
 801646c:	8002      	strh	r2, [r0, #0]
 801646e:	185a      	adds	r2, r3, r1
 8016470:	4b04      	ldr	r3, [pc, #16]	; (8016484 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8016472:	881b      	ldrh	r3, [r3, #0]
 8016474:	1a9b      	subs	r3, r3, r2
 8016476:	8043      	strh	r3, [r0, #2]
 8016478:	88c3      	ldrh	r3, [r0, #6]
 801647a:	80c1      	strh	r1, [r0, #6]
 801647c:	8083      	strh	r3, [r0, #4]
 801647e:	4770      	bx	lr
 8016480:	2400ea2c 	.word	0x2400ea2c
 8016484:	2400ea28 	.word	0x2400ea28

08016488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016488:	4b07      	ldr	r3, [pc, #28]	; (80164a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801648a:	b510      	push	{r4, lr}
 801648c:	781b      	ldrb	r3, [r3, #0]
 801648e:	2b01      	cmp	r3, #1
 8016490:	d108      	bne.n	80164a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8016492:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016496:	f9b0 4000 	ldrsh.w	r4, [r0]
 801649a:	8003      	strh	r3, [r0, #0]
 801649c:	8893      	ldrh	r3, [r2, #4]
 801649e:	3b01      	subs	r3, #1
 80164a0:	1b1b      	subs	r3, r3, r4
 80164a2:	800b      	strh	r3, [r1, #0]
 80164a4:	bd10      	pop	{r4, pc}
 80164a6:	bf00      	nop
 80164a8:	2400ea2c 	.word	0x2400ea2c

080164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80164ac:	4b0a      	ldr	r3, [pc, #40]	; (80164d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80164ae:	460a      	mov	r2, r1
 80164b0:	b510      	push	{r4, lr}
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d10d      	bne.n	80164d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80164b8:	8881      	ldrh	r1, [r0, #4]
 80164ba:	8803      	ldrh	r3, [r0, #0]
 80164bc:	440b      	add	r3, r1
 80164be:	4601      	mov	r1, r0
 80164c0:	3b01      	subs	r3, #1
 80164c2:	f821 3b02 	strh.w	r3, [r1], #2
 80164c6:	f7ff ffdf 	bl	8016488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80164ca:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80164ce:	88c2      	ldrh	r2, [r0, #6]
 80164d0:	80c3      	strh	r3, [r0, #6]
 80164d2:	8082      	strh	r2, [r0, #4]
 80164d4:	bd10      	pop	{r4, pc}
 80164d6:	bf00      	nop
 80164d8:	2400ea2c 	.word	0x2400ea2c

080164dc <_ZN8touchgfx11Application13requestRedrawEv>:
 80164dc:	4b06      	ldr	r3, [pc, #24]	; (80164f8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80164de:	2100      	movs	r1, #0
 80164e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80164e4:	4b05      	ldr	r3, [pc, #20]	; (80164fc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80164e6:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80164ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80164ee:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80164f2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80164f6:	4770      	bx	lr
 80164f8:	2400ea28 	.word	0x2400ea28
 80164fc:	2400ea2a 	.word	0x2400ea2a

08016500 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8016500:	4b03      	ldr	r3, [pc, #12]	; (8016510 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8016502:	6818      	ldr	r0, [r3, #0]
 8016504:	b110      	cbz	r0, 801650c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8016506:	6803      	ldr	r3, [r0, #0]
 8016508:	699b      	ldr	r3, [r3, #24]
 801650a:	4718      	bx	r3
 801650c:	4770      	bx	lr
 801650e:	bf00      	nop
 8016510:	2400ea78 	.word	0x2400ea78

08016514 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8016514:	4770      	bx	lr
	...

08016518 <_ZN8touchgfx11Application4drawEv>:
 8016518:	4b09      	ldr	r3, [pc, #36]	; (8016540 <_ZN8touchgfx11Application4drawEv+0x28>)
 801651a:	b507      	push	{r0, r1, r2, lr}
 801651c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016520:	2100      	movs	r1, #0
 8016522:	4b08      	ldr	r3, [pc, #32]	; (8016544 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8016524:	9100      	str	r1, [sp, #0]
 8016526:	4669      	mov	r1, sp
 8016528:	f9b3 3000 	ldrsh.w	r3, [r3]
 801652c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016530:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016534:	6803      	ldr	r3, [r0, #0]
 8016536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016538:	4798      	blx	r3
 801653a:	b003      	add	sp, #12
 801653c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016540:	2400ea28 	.word	0x2400ea28
 8016544:	2400ea2a 	.word	0x2400ea2a

08016548 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016548:	4b03      	ldr	r3, [pc, #12]	; (8016558 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801654a:	6818      	ldr	r0, [r3, #0]
 801654c:	b110      	cbz	r0, 8016554 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801654e:	6803      	ldr	r3, [r0, #0]
 8016550:	69db      	ldr	r3, [r3, #28]
 8016552:	4718      	bx	r3
 8016554:	4770      	bx	lr
 8016556:	bf00      	nop
 8016558:	2400ea78 	.word	0x2400ea78

0801655c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801655c:	4b03      	ldr	r3, [pc, #12]	; (801656c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801655e:	6818      	ldr	r0, [r3, #0]
 8016560:	b110      	cbz	r0, 8016568 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016562:	6803      	ldr	r3, [r0, #0]
 8016564:	6a1b      	ldr	r3, [r3, #32]
 8016566:	4718      	bx	r3
 8016568:	4770      	bx	lr
 801656a:	bf00      	nop
 801656c:	2400ea78 	.word	0x2400ea78

08016570 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016570:	2300      	movs	r3, #0
 8016572:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8016576:	4770      	bx	lr

08016578 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016578:	4b03      	ldr	r3, [pc, #12]	; (8016588 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801657a:	6818      	ldr	r0, [r3, #0]
 801657c:	b110      	cbz	r0, 8016584 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801657e:	6803      	ldr	r3, [r0, #0]
 8016580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016582:	4718      	bx	r3
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	2400ea78 	.word	0x2400ea78

0801658c <_ZN8touchgfx11ApplicationD1Ev>:
 801658c:	4770      	bx	lr

0801658e <_ZN8touchgfx11ApplicationD0Ev>:
 801658e:	b510      	push	{r4, lr}
 8016590:	4604      	mov	r4, r0
 8016592:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8016596:	f00b fac2 	bl	8021b1e <_ZdlPvj>
 801659a:	4620      	mov	r0, r4
 801659c:	bd10      	pop	{r4, pc}

0801659e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801659e:	b510      	push	{r4, lr}
 80165a0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80165a4:	888a      	ldrh	r2, [r1, #4]
 80165a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80165aa:	4422      	add	r2, r4
 80165ac:	b212      	sxth	r2, r2
 80165ae:	4293      	cmp	r3, r2
 80165b0:	da15      	bge.n	80165de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80165b2:	8882      	ldrh	r2, [r0, #4]
 80165b4:	4413      	add	r3, r2
 80165b6:	b21b      	sxth	r3, r3
 80165b8:	429c      	cmp	r4, r3
 80165ba:	da10      	bge.n	80165de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80165bc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80165c0:	88c9      	ldrh	r1, [r1, #6]
 80165c2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80165c6:	4419      	add	r1, r3
 80165c8:	b209      	sxth	r1, r1
 80165ca:	428a      	cmp	r2, r1
 80165cc:	da07      	bge.n	80165de <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80165ce:	88c0      	ldrh	r0, [r0, #6]
 80165d0:	4410      	add	r0, r2
 80165d2:	b200      	sxth	r0, r0
 80165d4:	4283      	cmp	r3, r0
 80165d6:	bfac      	ite	ge
 80165d8:	2000      	movge	r0, #0
 80165da:	2001      	movlt	r0, #1
 80165dc:	bd10      	pop	{r4, pc}
 80165de:	2000      	movs	r0, #0
 80165e0:	e7fc      	b.n	80165dc <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080165e2 <_ZN8touchgfx4Rect10restrictToEss>:
 80165e2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	b510      	push	{r4, lr}
 80165ea:	da04      	bge.n	80165f6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80165ec:	8884      	ldrh	r4, [r0, #4]
 80165ee:	4423      	add	r3, r4
 80165f0:	8083      	strh	r3, [r0, #4]
 80165f2:	2300      	movs	r3, #0
 80165f4:	8003      	strh	r3, [r0, #0]
 80165f6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80165fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80165fe:	1b09      	subs	r1, r1, r4
 8016600:	428b      	cmp	r3, r1
 8016602:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016606:	bfc8      	it	gt
 8016608:	8081      	strhgt	r1, [r0, #4]
 801660a:	2b00      	cmp	r3, #0
 801660c:	da04      	bge.n	8016618 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801660e:	88c1      	ldrh	r1, [r0, #6]
 8016610:	440b      	add	r3, r1
 8016612:	80c3      	strh	r3, [r0, #6]
 8016614:	2300      	movs	r3, #0
 8016616:	8043      	strh	r3, [r0, #2]
 8016618:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801661c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016620:	1a52      	subs	r2, r2, r1
 8016622:	4293      	cmp	r3, r2
 8016624:	bfc8      	it	gt
 8016626:	80c2      	strhgt	r2, [r0, #6]
 8016628:	bd10      	pop	{r4, pc}
	...

0801662c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801662c:	4b10      	ldr	r3, [pc, #64]	; (8016670 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801662e:	b510      	push	{r4, lr}
 8016630:	460c      	mov	r4, r1
 8016632:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016636:	4b0f      	ldr	r3, [pc, #60]	; (8016674 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016638:	4620      	mov	r0, r4
 801663a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801663e:	f7ff ffd0 	bl	80165e2 <_ZN8touchgfx4Rect10restrictToEss>
 8016642:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016644:	6818      	ldr	r0, [r3, #0]
 8016646:	b190      	cbz	r0, 801666e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016648:	6803      	ldr	r3, [r0, #0]
 801664a:	4621      	mov	r1, r4
 801664c:	689b      	ldr	r3, [r3, #8]
 801664e:	4798      	blx	r3
 8016650:	4b0a      	ldr	r3, [pc, #40]	; (801667c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016652:	6818      	ldr	r0, [r3, #0]
 8016654:	b118      	cbz	r0, 801665e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016656:	6803      	ldr	r3, [r0, #0]
 8016658:	4621      	mov	r1, r4
 801665a:	689b      	ldr	r3, [r3, #8]
 801665c:	4798      	blx	r3
 801665e:	4b08      	ldr	r3, [pc, #32]	; (8016680 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016660:	4621      	mov	r1, r4
 8016662:	6818      	ldr	r0, [r3, #0]
 8016664:	6803      	ldr	r3, [r0, #0]
 8016666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801666a:	69db      	ldr	r3, [r3, #28]
 801666c:	4718      	bx	r3
 801666e:	bd10      	pop	{r4, pc}
 8016670:	2400ea2a 	.word	0x2400ea2a
 8016674:	2400ea28 	.word	0x2400ea28
 8016678:	2400ea78 	.word	0x2400ea78
 801667c:	2400ea74 	.word	0x2400ea74
 8016680:	2400ea34 	.word	0x2400ea34

08016684 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016686:	4606      	mov	r6, r0
 8016688:	4608      	mov	r0, r1
 801668a:	460f      	mov	r7, r1
 801668c:	f7fa fe0d 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016690:	b9e8      	cbnz	r0, 80166ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016692:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016696:	f9b6 4000 	ldrsh.w	r4, [r6]
 801669a:	42a5      	cmp	r5, r4
 801669c:	db17      	blt.n	80166ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801669e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80166a2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	db11      	blt.n	80166ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80166aa:	88b9      	ldrh	r1, [r7, #4]
 80166ac:	440d      	add	r5, r1
 80166ae:	88b1      	ldrh	r1, [r6, #4]
 80166b0:	440c      	add	r4, r1
 80166b2:	b22d      	sxth	r5, r5
 80166b4:	b224      	sxth	r4, r4
 80166b6:	42a5      	cmp	r5, r4
 80166b8:	dc09      	bgt.n	80166ce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80166ba:	88f8      	ldrh	r0, [r7, #6]
 80166bc:	4410      	add	r0, r2
 80166be:	88f2      	ldrh	r2, [r6, #6]
 80166c0:	4413      	add	r3, r2
 80166c2:	b200      	sxth	r0, r0
 80166c4:	b21b      	sxth	r3, r3
 80166c6:	4298      	cmp	r0, r3
 80166c8:	bfcc      	ite	gt
 80166ca:	2000      	movgt	r0, #0
 80166cc:	2001      	movle	r0, #1
 80166ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080166d0 <_ZN8touchgfx11Application11getInstanceEv>:
 80166d0:	4b01      	ldr	r3, [pc, #4]	; (80166d8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80166d2:	6818      	ldr	r0, [r3, #0]
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop
 80166d8:	2400ea88 	.word	0x2400ea88

080166dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80166dc:	2300      	movs	r3, #0
 80166de:	b510      	push	{r4, lr}
 80166e0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80166e4:	4604      	mov	r4, r0
 80166e6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80166ea:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80166ee:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80166f2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80166f6:	429a      	cmp	r2, r3
 80166f8:	d90e      	bls.n	8016718 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80166fa:	18e2      	adds	r2, r4, r3
 80166fc:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8016700:	b122      	cbz	r2, 801670c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016702:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016706:	6803      	ldr	r3, [r0, #0]
 8016708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801670a:	4798      	blx	r3
 801670c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016710:	3301      	adds	r3, #1
 8016712:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016716:	e7ea      	b.n	80166ee <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016718:	bd10      	pop	{r4, pc}

0801671a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801671a:	2300      	movs	r3, #0
 801671c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8016720:	30a4      	adds	r0, #164	; 0xa4
 8016722:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016726:	f802 3b01 	strb.w	r3, [r2], #1
 801672a:	4282      	cmp	r2, r0
 801672c:	d1fb      	bne.n	8016726 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801672e:	4770      	bx	lr

08016730 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	4c0b      	ldr	r4, [pc, #44]	; (8016760 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016734:	4605      	mov	r5, r0
 8016736:	460e      	mov	r6, r1
 8016738:	6820      	ldr	r0, [r4, #0]
 801673a:	b110      	cbz	r0, 8016742 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801673c:	6803      	ldr	r3, [r0, #0]
 801673e:	695b      	ldr	r3, [r3, #20]
 8016740:	4798      	blx	r3
 8016742:	1d28      	adds	r0, r5, #4
 8016744:	f7ff ffe9 	bl	801671a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016748:	6026      	str	r6, [r4, #0]
 801674a:	6833      	ldr	r3, [r6, #0]
 801674c:	4630      	mov	r0, r6
 801674e:	68db      	ldr	r3, [r3, #12]
 8016750:	4798      	blx	r3
 8016752:	682b      	ldr	r3, [r5, #0]
 8016754:	4628      	mov	r0, r5
 8016756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801675c:	4718      	bx	r3
 801675e:	bf00      	nop
 8016760:	2400ea78 	.word	0x2400ea78

08016764 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016764:	2300      	movs	r3, #0
 8016766:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801676a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801676e:	461a      	mov	r2, r3
 8016770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016772:	461c      	mov	r4, r3
 8016774:	461d      	mov	r5, r3
 8016776:	459c      	cmp	ip, r3
 8016778:	dd1a      	ble.n	80167b0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801677a:	18c6      	adds	r6, r0, r3
 801677c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8016780:	b16e      	cbz	r6, 801679e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016782:	429a      	cmp	r2, r3
 8016784:	d008      	beq.n	8016798 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016786:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801678a:	fa1f fe82 	uxth.w	lr, r2
 801678e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016792:	1887      	adds	r7, r0, r2
 8016794:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8016798:	3201      	adds	r2, #1
 801679a:	3301      	adds	r3, #1
 801679c:	e7eb      	b.n	8016776 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801679e:	4299      	cmp	r1, r3
 80167a0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80167a4:	bfa8      	it	ge
 80167a6:	3501      	addge	r5, #1
 80167a8:	429e      	cmp	r6, r3
 80167aa:	bfc8      	it	gt
 80167ac:	3401      	addgt	r4, #1
 80167ae:	e7f4      	b.n	801679a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80167b0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80167b4:	1b49      	subs	r1, r1, r5
 80167b6:	1b1b      	subs	r3, r3, r4
 80167b8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80167bc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80167c0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80167c4:	4293      	cmp	r3, r2
 80167c6:	dd03      	ble.n	80167d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80167c8:	3b01      	subs	r3, #1
 80167ca:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80167ce:	e7f7      	b.n	80167c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80167d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080167d4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80167d4:	b570      	push	{r4, r5, r6, lr}
 80167d6:	4d16      	ldr	r5, [pc, #88]	; (8016830 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80167d8:	4604      	mov	r4, r0
 80167da:	6828      	ldr	r0, [r5, #0]
 80167dc:	b140      	cbz	r0, 80167f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80167de:	7a03      	ldrb	r3, [r0, #8]
 80167e0:	b933      	cbnz	r3, 80167f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80167e2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80167e6:	6803      	ldr	r3, [r0, #0]
 80167e8:	689b      	ldr	r3, [r3, #8]
 80167ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167ee:	4718      	bx	r3
 80167f0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80167f4:	4e0f      	ldr	r6, [pc, #60]	; (8016834 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80167f6:	b973      	cbnz	r3, 8016816 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167f8:	b168      	cbz	r0, 8016816 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167fa:	7a03      	ldrb	r3, [r0, #8]
 80167fc:	b15b      	cbz	r3, 8016816 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80167fe:	6830      	ldr	r0, [r6, #0]
 8016800:	b110      	cbz	r0, 8016808 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016802:	6803      	ldr	r3, [r0, #0]
 8016804:	691b      	ldr	r3, [r3, #16]
 8016806:	4798      	blx	r3
 8016808:	6828      	ldr	r0, [r5, #0]
 801680a:	6803      	ldr	r3, [r0, #0]
 801680c:	68db      	ldr	r3, [r3, #12]
 801680e:	4798      	blx	r3
 8016810:	2301      	movs	r3, #1
 8016812:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8016816:	3404      	adds	r4, #4
 8016818:	4620      	mov	r0, r4
 801681a:	f7ff ff5f 	bl	80166dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801681e:	4620      	mov	r0, r4
 8016820:	f7ff ffa0 	bl	8016764 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016824:	6830      	ldr	r0, [r6, #0]
 8016826:	b110      	cbz	r0, 801682e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016828:	6803      	ldr	r3, [r0, #0]
 801682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801682c:	e7dd      	b.n	80167ea <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801682e:	bd70      	pop	{r4, r5, r6, pc}
 8016830:	2400ea7c 	.word	0x2400ea7c
 8016834:	2400ea78 	.word	0x2400ea78

08016838 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016838:	4603      	mov	r3, r0
 801683a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801683e:	2200      	movs	r2, #0
 8016840:	801a      	strh	r2, [r3, #0]
 8016842:	3308      	adds	r3, #8
 8016844:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016848:	f823 2c04 	strh.w	r2, [r3, #-4]
 801684c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016850:	428b      	cmp	r3, r1
 8016852:	d1f5      	bne.n	8016840 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016854:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8016858:	4770      	bx	lr
	...

0801685c <_ZN8touchgfx11ApplicationC1Ev>:
 801685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801685e:	4b1d      	ldr	r3, [pc, #116]	; (80168d4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016860:	4606      	mov	r6, r0
 8016862:	4604      	mov	r4, r0
 8016864:	2500      	movs	r5, #0
 8016866:	f846 3b04 	str.w	r3, [r6], #4
 801686a:	22a8      	movs	r2, #168	; 0xa8
 801686c:	2100      	movs	r1, #0
 801686e:	4630      	mov	r0, r6
 8016870:	f00b faee 	bl	8021e50 <memset>
 8016874:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8016878:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801687c:	4f16      	ldr	r7, [pc, #88]	; (80168d8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801687e:	f7ff ffdb 	bl	8016838 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016882:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8016886:	f7ff ffd7 	bl	8016838 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801688a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801688e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8016892:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8016896:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801689a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801689e:	490f      	ldr	r1, [pc, #60]	; (80168dc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80168a0:	480f      	ldr	r0, [pc, #60]	; (80168e0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80168a2:	f00a fd11 	bl	80212c8 <CRC_Lock>
 80168a6:	4b0f      	ldr	r3, [pc, #60]	; (80168e4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80168a8:	b158      	cbz	r0, 80168c2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80168aa:	801d      	strh	r5, [r3, #0]
 80168ac:	2300      	movs	r3, #0
 80168ae:	4a0e      	ldr	r2, [pc, #56]	; (80168e8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80168b0:	4630      	mov	r0, r6
 80168b2:	6013      	str	r3, [r2, #0]
 80168b4:	4a0d      	ldr	r2, [pc, #52]	; (80168ec <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80168b6:	603b      	str	r3, [r7, #0]
 80168b8:	6013      	str	r3, [r2, #0]
 80168ba:	f7ff ff2e 	bl	801671a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80168be:	4620      	mov	r0, r4
 80168c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80168c6:	2002      	movs	r0, #2
 80168c8:	801a      	strh	r2, [r3, #0]
 80168ca:	6038      	str	r0, [r7, #0]
 80168cc:	f001 faee 	bl	8017eac <_ZN8touchgfx6Screen4drawEv>
 80168d0:	e7ec      	b.n	80168ac <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80168d2:	bf00      	nop
 80168d4:	08024e08 	.word	0x08024e08
 80168d8:	2400ea78 	.word	0x2400ea78
 80168dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80168e0:	f407a5c2 	.word	0xf407a5c2
 80168e4:	2400005c 	.word	0x2400005c
 80168e8:	2400ea88 	.word	0x2400ea88
 80168ec:	2400ea7c 	.word	0x2400ea7c

080168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80168f0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80168f4:	3b01      	subs	r3, #1
 80168f6:	b29b      	uxth	r3, r3
 80168f8:	428b      	cmp	r3, r1
 80168fa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80168fe:	b510      	push	{r4, lr}
 8016900:	d908      	bls.n	8016914 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016902:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016906:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016910:	685a      	ldr	r2, [r3, #4]
 8016912:	6062      	str	r2, [r4, #4]
 8016914:	bd10      	pop	{r4, pc}
	...

08016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801691c:	b08f      	sub	sp, #60	; 0x3c
 801691e:	4b8f      	ldr	r3, [pc, #572]	; (8016b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016920:	4683      	mov	fp, r0
 8016922:	ac0a      	add	r4, sp, #40	; 0x28
 8016924:	e884 0006 	stmia.w	r4, {r1, r2}
 8016928:	f9b3 2000 	ldrsh.w	r2, [r3]
 801692c:	4620      	mov	r0, r4
 801692e:	4b8c      	ldr	r3, [pc, #560]	; (8016b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016930:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016934:	f7ff fe55 	bl	80165e2 <_ZN8touchgfx4Rect10restrictToEss>
 8016938:	4620      	mov	r0, r4
 801693a:	f7fa fcb6 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801693e:	2800      	cmp	r0, #0
 8016940:	d16a      	bne.n	8016a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016942:	9403      	str	r4, [sp, #12]
 8016944:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8016948:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801694c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016950:	9301      	str	r3, [sp, #4]
 8016952:	35a4      	adds	r5, #164	; 0xa4
 8016954:	b15c      	cbz	r4, 801696e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016956:	4629      	mov	r1, r5
 8016958:	9803      	ldr	r0, [sp, #12]
 801695a:	f7ff fe93 	bl	8016684 <_ZNK8touchgfx4Rect8includesERKS0_>
 801695e:	3c01      	subs	r4, #1
 8016960:	b118      	cbz	r0, 801696a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8016962:	b2a1      	uxth	r1, r4
 8016964:	9801      	ldr	r0, [sp, #4]
 8016966:	f7ff ffc3 	bl	80168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801696a:	3d08      	subs	r5, #8
 801696c:	e7f2      	b.n	8016954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801696e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8016972:	f108 33ff 	add.w	r3, r8, #4294967295
 8016976:	f8cd 8010 	str.w	r8, [sp, #16]
 801697a:	9302      	str	r3, [sp, #8]
 801697c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8016980:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8016984:	9306      	str	r3, [sp, #24]
 8016986:	445c      	add	r4, fp
 8016988:	2500      	movs	r5, #0
 801698a:	4626      	mov	r6, r4
 801698c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016990:	462f      	mov	r7, r5
 8016992:	9b05      	ldr	r3, [sp, #20]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d073      	beq.n	8016a80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016998:	9903      	ldr	r1, [sp, #12]
 801699a:	4630      	mov	r0, r6
 801699c:	f7ff fdff 	bl	801659e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80169a0:	b350      	cbz	r0, 80169f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80169a2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80169a6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80169aa:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80169ae:	45e6      	cmp	lr, ip
 80169b0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80169b4:	db33      	blt.n	8016a1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169b6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80169ba:	88b3      	ldrh	r3, [r6, #4]
 80169bc:	4472      	add	r2, lr
 80169be:	4463      	add	r3, ip
 80169c0:	b212      	sxth	r2, r2
 80169c2:	b21b      	sxth	r3, r3
 80169c4:	429a      	cmp	r2, r3
 80169c6:	dc2a      	bgt.n	8016a1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80169c8:	fa1f f289 	uxth.w	r2, r9
 80169cc:	88f3      	ldrh	r3, [r6, #6]
 80169ce:	45ca      	cmp	sl, r9
 80169d0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80169d4:	4413      	add	r3, r2
 80169d6:	fa1f fc8a 	uxth.w	ip, sl
 80169da:	b29b      	uxth	r3, r3
 80169dc:	fa0f fe83 	sxth.w	lr, r3
 80169e0:	db0f      	blt.n	8016a02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80169e2:	eba3 030c 	sub.w	r3, r3, ip
 80169e6:	1ac9      	subs	r1, r1, r3
 80169e8:	b209      	sxth	r1, r1
 80169ea:	2900      	cmp	r1, #0
 80169ec:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80169f0:	dd12      	ble.n	8016a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80169f2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80169f6:	4605      	mov	r5, r0
 80169f8:	9b05      	ldr	r3, [sp, #20]
 80169fa:	3e08      	subs	r6, #8
 80169fc:	3b01      	subs	r3, #1
 80169fe:	9305      	str	r3, [sp, #20]
 8016a00:	e7c7      	b.n	8016992 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016a02:	4461      	add	r1, ip
 8016a04:	b209      	sxth	r1, r1
 8016a06:	4571      	cmp	r1, lr
 8016a08:	dc38      	bgt.n	8016a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a0a:	eba2 020c 	sub.w	r2, r2, ip
 8016a0e:	b212      	sxth	r2, r2
 8016a10:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8016a14:	2a00      	cmp	r2, #0
 8016a16:	dcee      	bgt.n	80169f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a18:	b00f      	add	sp, #60	; 0x3c
 8016a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a1e:	45ca      	cmp	sl, r9
 8016a20:	db2c      	blt.n	8016a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a22:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8016a26:	449a      	add	sl, r3
 8016a28:	88f3      	ldrh	r3, [r6, #6]
 8016a2a:	4499      	add	r9, r3
 8016a2c:	fa0f fa8a 	sxth.w	sl, sl
 8016a30:	fa0f f989 	sxth.w	r9, r9
 8016a34:	45ca      	cmp	sl, r9
 8016a36:	dc21      	bgt.n	8016a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a38:	fa1f f28c 	uxth.w	r2, ip
 8016a3c:	88b3      	ldrh	r3, [r6, #4]
 8016a3e:	45e6      	cmp	lr, ip
 8016a40:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8016a44:	4413      	add	r3, r2
 8016a46:	fa1f f98e 	uxth.w	r9, lr
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	fa0f fa83 	sxth.w	sl, r3
 8016a50:	db0a      	blt.n	8016a68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016a52:	eba3 0309 	sub.w	r3, r3, r9
 8016a56:	1ac9      	subs	r1, r1, r3
 8016a58:	b209      	sxth	r1, r1
 8016a5a:	2900      	cmp	r1, #0
 8016a5c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8016a60:	ddda      	ble.n	8016a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016a62:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8016a66:	e7c6      	b.n	80169f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016a68:	4449      	add	r1, r9
 8016a6a:	b209      	sxth	r1, r1
 8016a6c:	4551      	cmp	r1, sl
 8016a6e:	dc05      	bgt.n	8016a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016a70:	eba2 0209 	sub.w	r2, r2, r9
 8016a74:	b212      	sxth	r2, r2
 8016a76:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8016a7a:	e7cb      	b.n	8016a14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016a7c:	4607      	mov	r7, r0
 8016a7e:	e7bb      	b.n	80169f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016a80:	2d00      	cmp	r5, #0
 8016a82:	d181      	bne.n	8016988 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016a84:	2f00      	cmp	r7, #0
 8016a86:	f000 81dd 	beq.w	8016e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016a8a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8016a8e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8016a92:	b2b3      	uxth	r3, r6
 8016a94:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8016a98:	b2b9      	uxth	r1, r7
 8016a9a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8016a9e:	441a      	add	r2, r3
 8016aa0:	448a      	add	sl, r1
 8016aa2:	9105      	str	r1, [sp, #20]
 8016aa4:	b292      	uxth	r2, r2
 8016aa6:	fa1f fa8a 	uxth.w	sl, sl
 8016aaa:	fa0f f882 	sxth.w	r8, r2
 8016aae:	fa0f f98a 	sxth.w	r9, sl
 8016ab2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016ab6:	9b04      	ldr	r3, [sp, #16]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d053      	beq.n	8016b64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016abc:	9903      	ldr	r1, [sp, #12]
 8016abe:	4620      	mov	r0, r4
 8016ac0:	f7ff fd6d 	bl	801659e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016ac4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016ac8:	b1c0      	cbz	r0, 8016afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016aca:	f9b4 e000 	ldrsh.w	lr, [r4]
 8016ace:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8016ad2:	4576      	cmp	r6, lr
 8016ad4:	dc23      	bgt.n	8016b1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ad6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016ada:	44f4      	add	ip, lr
 8016adc:	fa0f fc8c 	sxth.w	ip, ip
 8016ae0:	45e0      	cmp	r8, ip
 8016ae2:	db1c      	blt.n	8016b1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8016ae4:	428f      	cmp	r7, r1
 8016ae6:	fa1f fc81 	uxth.w	ip, r1
 8016aea:	88e1      	ldrh	r1, [r4, #6]
 8016aec:	dc0d      	bgt.n	8016b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8016aee:	ebaa 0c0c 	sub.w	ip, sl, ip
 8016af2:	f8a4 9002 	strh.w	r9, [r4, #2]
 8016af6:	eba1 010c 	sub.w	r1, r1, ip
 8016afa:	80e1      	strh	r1, [r4, #6]
 8016afc:	4628      	mov	r0, r5
 8016afe:	9904      	ldr	r1, [sp, #16]
 8016b00:	3c08      	subs	r4, #8
 8016b02:	4605      	mov	r5, r0
 8016b04:	3901      	subs	r1, #1
 8016b06:	9104      	str	r1, [sp, #16]
 8016b08:	e7d3      	b.n	8016ab2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8016b0a:	4461      	add	r1, ip
 8016b0c:	b209      	sxth	r1, r1
 8016b0e:	4549      	cmp	r1, r9
 8016b10:	dcf5      	bgt.n	8016afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b12:	9905      	ldr	r1, [sp, #20]
 8016b14:	eba1 0c0c 	sub.w	ip, r1, ip
 8016b18:	f8a4 c006 	strh.w	ip, [r4, #6]
 8016b1c:	e7ee      	b.n	8016afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016b1e:	428f      	cmp	r7, r1
 8016b20:	dced      	bgt.n	8016afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b22:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8016b26:	4461      	add	r1, ip
 8016b28:	b209      	sxth	r1, r1
 8016b2a:	4589      	cmp	r9, r1
 8016b2c:	dbe7      	blt.n	8016afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b2e:	4576      	cmp	r6, lr
 8016b30:	fa1f fc8e 	uxth.w	ip, lr
 8016b34:	88a1      	ldrh	r1, [r4, #4]
 8016b36:	dc07      	bgt.n	8016b48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8016b38:	eba2 0c0c 	sub.w	ip, r2, ip
 8016b3c:	f8a4 8000 	strh.w	r8, [r4]
 8016b40:	eba1 010c 	sub.w	r1, r1, ip
 8016b44:	80a1      	strh	r1, [r4, #4]
 8016b46:	e7d9      	b.n	8016afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016b48:	4461      	add	r1, ip
 8016b4a:	b209      	sxth	r1, r1
 8016b4c:	4588      	cmp	r8, r1
 8016b4e:	dbd6      	blt.n	8016afe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8016b50:	eba3 0c0c 	sub.w	ip, r3, ip
 8016b54:	f8a4 c004 	strh.w	ip, [r4, #4]
 8016b58:	e7d0      	b.n	8016afc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8016b5a:	bf00      	nop
 8016b5c:	2400ea2a 	.word	0x2400ea2a
 8016b60:	2400ea28 	.word	0x2400ea28
 8016b64:	2d00      	cmp	r5, #0
 8016b66:	f000 816d 	beq.w	8016e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b6a:	9b06      	ldr	r3, [sp, #24]
 8016b6c:	445b      	add	r3, fp
 8016b6e:	461c      	mov	r4, r3
 8016b70:	9b02      	ldr	r3, [sp, #8]
 8016b72:	3301      	adds	r3, #1
 8016b74:	f000 8166 	beq.w	8016e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016b78:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8016b7c:	9803      	ldr	r0, [sp, #12]
 8016b7e:	4629      	mov	r1, r5
 8016b80:	f7ff fd80 	bl	8016684 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016b84:	b120      	cbz	r0, 8016b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8016b86:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8016b8a:	9801      	ldr	r0, [sp, #4]
 8016b8c:	f7ff feb0 	bl	80168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016b90:	9903      	ldr	r1, [sp, #12]
 8016b92:	4628      	mov	r0, r5
 8016b94:	f7ff fd03 	bl	801659e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f000 809c 	beq.w	8016cd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016b9e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8016ba2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016ba6:	fa1f f189 	uxth.w	r1, r9
 8016baa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016bae:	9309      	str	r3, [sp, #36]	; 0x24
 8016bb0:	eb01 0c03 	add.w	ip, r1, r3
 8016bb4:	b283      	uxth	r3, r0
 8016bb6:	4548      	cmp	r0, r9
 8016bb8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8016bbc:	fa1f fa8c 	uxth.w	sl, ip
 8016bc0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8016bc4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8016bc8:	eb03 050c 	add.w	r5, r3, ip
 8016bcc:	b2ad      	uxth	r5, r5
 8016bce:	9505      	str	r5, [sp, #20]
 8016bd0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8016bd4:	9504      	str	r5, [sp, #16]
 8016bd6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8016bda:	f340 8099 	ble.w	8016d10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8016bde:	1a5b      	subs	r3, r3, r1
 8016be0:	4596      	cmp	lr, r2
 8016be2:	fa0f f08a 	sxth.w	r0, sl
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	b21e      	sxth	r6, r3
 8016bea:	dd2e      	ble.n	8016c4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8016bec:	9f02      	ldr	r7, [sp, #8]
 8016bee:	fa1f fe8e 	uxth.w	lr, lr
 8016bf2:	b292      	uxth	r2, r2
 8016bf4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8016bf8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8016bfc:	9f04      	ldr	r7, [sp, #16]
 8016bfe:	ebae 0102 	sub.w	r1, lr, r2
 8016c02:	44a6      	add	lr, r4
 8016c04:	1a3f      	subs	r7, r7, r0
 8016c06:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8016c0a:	b289      	uxth	r1, r1
 8016c0c:	4402      	add	r2, r0
 8016c0e:	fa0f fe8e 	sxth.w	lr, lr
 8016c12:	b20d      	sxth	r5, r1
 8016c14:	b212      	sxth	r2, r2
 8016c16:	436f      	muls	r7, r5
 8016c18:	ebae 0202 	sub.w	r2, lr, r2
 8016c1c:	4372      	muls	r2, r6
 8016c1e:	4297      	cmp	r7, r2
 8016c20:	db09      	blt.n	8016c36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8016c22:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8016c26:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8016c2a:	449c      	add	ip, r3
 8016c2c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016c30:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016c34:	e686      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c36:	4421      	add	r1, r4
 8016c38:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8016c3c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8016c40:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016c44:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016c48:	e67c      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016c4a:	9f04      	ldr	r7, [sp, #16]
 8016c4c:	42b8      	cmp	r0, r7
 8016c4e:	da27      	bge.n	8016ca0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8016c50:	9902      	ldr	r1, [sp, #8]
 8016c52:	1a3f      	subs	r7, r7, r0
 8016c54:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8016c58:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8016c5c:	eb05 010e 	add.w	r1, r5, lr
 8016c60:	fa1f f881 	uxth.w	r8, r1
 8016c64:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8016c68:	4411      	add	r1, r2
 8016c6a:	fa0f f988 	sxth.w	r9, r8
 8016c6e:	eba2 020e 	sub.w	r2, r2, lr
 8016c72:	eba1 0108 	sub.w	r1, r1, r8
 8016c76:	4372      	muls	r2, r6
 8016c78:	b289      	uxth	r1, r1
 8016c7a:	fa0f f881 	sxth.w	r8, r1
 8016c7e:	fb08 f707 	mul.w	r7, r8, r7
 8016c82:	42ba      	cmp	r2, r7
 8016c84:	dc06      	bgt.n	8016c94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8016c86:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8016c8a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8016c8e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8016c92:	e7ca      	b.n	8016c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8016c94:	4429      	add	r1, r5
 8016c96:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8016c9a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016c9e:	e651      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016ca0:	9805      	ldr	r0, [sp, #20]
 8016ca2:	2d06      	cmp	r5, #6
 8016ca4:	ebaa 0000 	sub.w	r0, sl, r0
 8016ca8:	b280      	uxth	r0, r0
 8016caa:	fa0f fe80 	sxth.w	lr, r0
 8016cae:	d817      	bhi.n	8016ce0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8016cb0:	9b04      	ldr	r3, [sp, #16]
 8016cb2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8016cb6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8016cba:	1c6b      	adds	r3, r5, #1
 8016cbc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8016cc0:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016cc4:	9b01      	ldr	r3, [sp, #4]
 8016cc6:	9801      	ldr	r0, [sp, #4]
 8016cc8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016ccc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016cd0:	805a      	strh	r2, [r3, #2]
 8016cd2:	809e      	strh	r6, [r3, #4]
 8016cd4:	80d9      	strh	r1, [r3, #6]
 8016cd6:	9b02      	ldr	r3, [sp, #8]
 8016cd8:	3c08      	subs	r4, #8
 8016cda:	3b01      	subs	r3, #1
 8016cdc:	9302      	str	r3, [sp, #8]
 8016cde:	e747      	b.n	8016b70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8016ce0:	9a02      	ldr	r2, [sp, #8]
 8016ce2:	45b6      	cmp	lr, r6
 8016ce4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016ce8:	db0d      	blt.n	8016d06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8016cea:	449c      	add	ip, r3
 8016cec:	445a      	add	r2, fp
 8016cee:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8016cf2:	fa1f fc8c 	uxth.w	ip, ip
 8016cf6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8016cfa:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8016cfe:	448c      	add	ip, r1
 8016d00:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8016d04:	e61e      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d06:	445a      	add	r2, fp
 8016d08:	4484      	add	ip, r0
 8016d0a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8016d0e:	e78f      	b.n	8016c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d10:	fa1f f18e 	uxth.w	r1, lr
 8016d14:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8016d18:	b293      	uxth	r3, r2
 8016d1a:	4596      	cmp	lr, r2
 8016d1c:	eb01 0806 	add.w	r8, r1, r6
 8016d20:	9306      	str	r3, [sp, #24]
 8016d22:	fa1f f888 	uxth.w	r8, r8
 8016d26:	9f06      	ldr	r7, [sp, #24]
 8016d28:	fa0f f388 	sxth.w	r3, r8
 8016d2c:	9307      	str	r3, [sp, #28]
 8016d2e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8016d32:	443b      	add	r3, r7
 8016d34:	b29b      	uxth	r3, r3
 8016d36:	9308      	str	r3, [sp, #32]
 8016d38:	da24      	bge.n	8016d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8016d3a:	9905      	ldr	r1, [sp, #20]
 8016d3c:	eba3 0308 	sub.w	r3, r3, r8
 8016d40:	eba2 020e 	sub.w	r2, r2, lr
 8016d44:	eba9 0000 	sub.w	r0, r9, r0
 8016d48:	ebaa 0401 	sub.w	r4, sl, r1
 8016d4c:	b29b      	uxth	r3, r3
 8016d4e:	b2a4      	uxth	r4, r4
 8016d50:	b219      	sxth	r1, r3
 8016d52:	b225      	sxth	r5, r4
 8016d54:	4348      	muls	r0, r1
 8016d56:	436a      	muls	r2, r5
 8016d58:	4282      	cmp	r2, r0
 8016d5a:	9a02      	ldr	r2, [sp, #8]
 8016d5c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8016d60:	445a      	add	r2, fp
 8016d62:	dc06      	bgt.n	8016d72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8016d64:	9b07      	ldr	r3, [sp, #28]
 8016d66:	44a4      	add	ip, r4
 8016d68:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8016d6c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8016d70:	e75e      	b.n	8016c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016d72:	9904      	ldr	r1, [sp, #16]
 8016d74:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8016d78:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8016d7c:	4433      	add	r3, r6
 8016d7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016d82:	e5df      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016d84:	9f06      	ldr	r7, [sp, #24]
 8016d86:	9b04      	ldr	r3, [sp, #16]
 8016d88:	1bc9      	subs	r1, r1, r7
 8016d8a:	fa0f f78a 	sxth.w	r7, sl
 8016d8e:	b289      	uxth	r1, r1
 8016d90:	429f      	cmp	r7, r3
 8016d92:	fa0f fe81 	sxth.w	lr, r1
 8016d96:	dd23      	ble.n	8016de0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8016d98:	9a05      	ldr	r2, [sp, #20]
 8016d9a:	eba9 0000 	sub.w	r0, r9, r0
 8016d9e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8016da2:	ebaa 0202 	sub.w	r2, sl, r2
 8016da6:	9d07      	ldr	r5, [sp, #28]
 8016da8:	fb0e f000 	mul.w	r0, lr, r0
 8016dac:	b292      	uxth	r2, r2
 8016dae:	eba5 0a03 	sub.w	sl, r5, r3
 8016db2:	9b02      	ldr	r3, [sp, #8]
 8016db4:	b214      	sxth	r4, r2
 8016db6:	00db      	lsls	r3, r3, #3
 8016db8:	fb04 fa0a 	mul.w	sl, r4, sl
 8016dbc:	445b      	add	r3, fp
 8016dbe:	4550      	cmp	r0, sl
 8016dc0:	db03      	blt.n	8016dca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8016dc2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8016dc6:	4494      	add	ip, r2
 8016dc8:	e732      	b.n	8016c30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8016dca:	9a04      	ldr	r2, [sp, #16]
 8016dcc:	4431      	add	r1, r6
 8016dce:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8016dd2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016dd6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8016dda:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016dde:	e75c      	b.n	8016c9a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8016de0:	9b08      	ldr	r3, [sp, #32]
 8016de2:	2d06      	cmp	r5, #6
 8016de4:	eba3 0308 	sub.w	r3, r3, r8
 8016de8:	b29b      	uxth	r3, r3
 8016dea:	b218      	sxth	r0, r3
 8016dec:	d813      	bhi.n	8016e16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8016dee:	9b07      	ldr	r3, [sp, #28]
 8016df0:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8016df4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8016df8:	1c6b      	adds	r3, r5, #1
 8016dfa:	9901      	ldr	r1, [sp, #4]
 8016dfc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8016e00:	9b01      	ldr	r3, [sp, #4]
 8016e02:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8016e06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016e0a:	805a      	strh	r2, [r3, #2]
 8016e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e0e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8016e12:	809a      	strh	r2, [r3, #4]
 8016e14:	e75f      	b.n	8016cd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8016e16:	9c02      	ldr	r4, [sp, #8]
 8016e18:	4570      	cmp	r0, lr
 8016e1a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8016e1e:	db0d      	blt.n	8016e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8016e20:	4431      	add	r1, r6
 8016e22:	9b06      	ldr	r3, [sp, #24]
 8016e24:	445c      	add	r4, fp
 8016e26:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016e2a:	b289      	uxth	r1, r1
 8016e2c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8016e30:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8016e34:	4419      	add	r1, r3
 8016e36:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8016e3a:	e583      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016e3c:	445c      	add	r4, fp
 8016e3e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8016e42:	e79b      	b.n	8016d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8016e44:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8016e48:	2e07      	cmp	r6, #7
 8016e4a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8016e4e:	d812      	bhi.n	8016e76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8016e50:	1c75      	adds	r5, r6, #1
 8016e52:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8016e56:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016e5a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8016e5e:	9d01      	ldr	r5, [sp, #4]
 8016e60:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8016e64:	442c      	add	r4, r5
 8016e66:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8016e6a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8016e6e:	8061      	strh	r1, [r4, #2]
 8016e70:	80a2      	strh	r2, [r4, #4]
 8016e72:	80e3      	strh	r3, [r4, #6]
 8016e74:	e5d0      	b.n	8016a18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016e76:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8016e7a:	3e01      	subs	r6, #1
 8016e7c:	445c      	add	r4, fp
 8016e7e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8016e82:	f04f 37ff 	mov.w	r7, #4294967295
 8016e86:	2500      	movs	r5, #0
 8016e88:	9305      	str	r3, [sp, #20]
 8016e8a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8016e8e:	1e72      	subs	r2, r6, #1
 8016e90:	9302      	str	r3, [sp, #8]
 8016e92:	4691      	mov	r9, r2
 8016e94:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8016e98:	9304      	str	r3, [sp, #16]
 8016e9a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8016e9e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016ea2:	6818      	ldr	r0, [r3, #0]
 8016ea4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016ea8:	9207      	str	r2, [sp, #28]
 8016eaa:	bf16      	itet	ne
 8016eac:	9905      	ldrne	r1, [sp, #20]
 8016eae:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8016eb2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8016eb6:	9306      	str	r3, [sp, #24]
 8016eb8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8016ebc:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8016ec0:	fb18 f801 	smulbb	r8, r8, r1
 8016ec4:	6859      	ldr	r1, [r3, #4]
 8016ec6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8016eca:	4671      	mov	r1, lr
 8016ecc:	a80c      	add	r0, sp, #48	; 0x30
 8016ece:	f7fb ff04 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016ed2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8016ed6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8016eda:	f04f 0c08 	mov.w	ip, #8
 8016ede:	9b04      	ldr	r3, [sp, #16]
 8016ee0:	9a02      	ldr	r2, [sp, #8]
 8016ee2:	fb10 f001 	smulbb	r0, r0, r1
 8016ee6:	fb02 8803 	mla	r8, r2, r3, r8
 8016eea:	eba0 0108 	sub.w	r1, r0, r8
 8016eee:	fb90 f0fc 	sdiv	r0, r0, ip
 8016ef2:	4288      	cmp	r0, r1
 8016ef4:	dc20      	bgt.n	8016f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016ef6:	4551      	cmp	r1, sl
 8016ef8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8016efc:	da03      	bge.n	8016f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8016efe:	b1d9      	cbz	r1, 8016f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8016f00:	468a      	mov	sl, r1
 8016f02:	464f      	mov	r7, r9
 8016f04:	4635      	mov	r5, r6
 8016f06:	f109 39ff 	add.w	r9, r9, #4294967295
 8016f0a:	f119 0f02 	cmn.w	r9, #2
 8016f0e:	d1c6      	bne.n	8016e9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8016f10:	4616      	mov	r6, r2
 8016f12:	3201      	adds	r2, #1
 8016f14:	f1a4 0408 	sub.w	r4, r4, #8
 8016f18:	d1b7      	bne.n	8016e8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8016f1a:	9b01      	ldr	r3, [sp, #4]
 8016f1c:	b2ac      	uxth	r4, r5
 8016f1e:	00ed      	lsls	r5, r5, #3
 8016f20:	1958      	adds	r0, r3, r5
 8016f22:	1c7b      	adds	r3, r7, #1
 8016f24:	d10b      	bne.n	8016f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8016f26:	4601      	mov	r1, r0
 8016f28:	9803      	ldr	r0, [sp, #12]
 8016f2a:	f7fb fed6 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f2e:	4621      	mov	r1, r4
 8016f30:	9801      	ldr	r0, [sp, #4]
 8016f32:	f7ff fcdd 	bl	80168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016f36:	e505      	b.n	8016944 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8016f38:	464f      	mov	r7, r9
 8016f3a:	4635      	mov	r5, r6
 8016f3c:	e7ed      	b.n	8016f1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8016f3e:	9b01      	ldr	r3, [sp, #4]
 8016f40:	00ff      	lsls	r7, r7, #3
 8016f42:	445d      	add	r5, fp
 8016f44:	19d9      	adds	r1, r3, r7
 8016f46:	445f      	add	r7, fp
 8016f48:	f7fb fec7 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8016f4c:	9b03      	ldr	r3, [sp, #12]
 8016f4e:	cb03      	ldmia	r3!, {r0, r1}
 8016f50:	9b03      	ldr	r3, [sp, #12]
 8016f52:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8016f56:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8016f5a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8016f5e:	6869      	ldr	r1, [r5, #4]
 8016f60:	c303      	stmia	r3!, {r0, r1}
 8016f62:	e7e4      	b.n	8016f2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08016f64 <_ZN8touchgfx11Application10invalidateEv>:
 8016f64:	4b09      	ldr	r3, [pc, #36]	; (8016f8c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016f66:	b082      	sub	sp, #8
 8016f68:	2100      	movs	r1, #0
 8016f6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f6e:	4b08      	ldr	r3, [pc, #32]	; (8016f90 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016f70:	9100      	str	r1, [sp, #0]
 8016f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f76:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016f7e:	ab02      	add	r3, sp, #8
 8016f80:	e913 0006 	ldmdb	r3, {r1, r2}
 8016f84:	b002      	add	sp, #8
 8016f86:	f7ff bcc7 	b.w	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016f8a:	bf00      	nop
 8016f8c:	2400ea28 	.word	0x2400ea28
 8016f90:	2400ea2a 	.word	0x2400ea2a

08016f94 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8016f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f98:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8016f9c:	b09b      	sub	sp, #108	; 0x6c
 8016f9e:	4604      	mov	r4, r0
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f7fa f982 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fa6:	4605      	mov	r5, r0
 8016fa8:	b940      	cbnz	r0, 8016fbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8016faa:	4620      	mov	r0, r4
 8016fac:	e896 0006 	ldmia.w	r6, {r1, r2}
 8016fb0:	f7ff fcb2 	bl	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016fb4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8016fb8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8016fbc:	4bc8      	ldr	r3, [pc, #800]	; (80172e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d03e      	beq.n	8017042 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016fc4:	4dc7      	ldr	r5, [pc, #796]	; (80172e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f7fa f96f 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8016fcc:	4606      	mov	r6, r0
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d137      	bne.n	8017042 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8016fd2:	4628      	mov	r0, r5
 8016fd4:	f7ff fa28 	bl	8016428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8016fd8:	6829      	ldr	r1, [r5, #0]
 8016fda:	686a      	ldr	r2, [r5, #4]
 8016fdc:	4620      	mov	r0, r4
 8016fde:	f7ff fc9b 	bl	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016fe2:	802e      	strh	r6, [r5, #0]
 8016fe4:	806e      	strh	r6, [r5, #2]
 8016fe6:	80ae      	strh	r6, [r5, #4]
 8016fe8:	80ee      	strh	r6, [r5, #6]
 8016fea:	ae09      	add	r6, sp, #36	; 0x24
 8016fec:	4630      	mov	r0, r6
 8016fee:	f7ff fc23 	bl	8016838 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016ff2:	4abd      	ldr	r2, [pc, #756]	; (80172e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8016ff4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8016ff8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016ffc:	8815      	ldrh	r5, [r2, #0]
 8016ffe:	9202      	str	r2, [sp, #8]
 8017000:	462b      	mov	r3, r5
 8017002:	429f      	cmp	r7, r3
 8017004:	d924      	bls.n	8017050 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8017006:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801700a:	2907      	cmp	r1, #7
 801700c:	d816      	bhi.n	801703c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801700e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8017012:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8017016:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801701a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801701e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8017022:	1c4a      	adds	r2, r1, #1
 8017024:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8017028:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801702c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8017030:	f8a2 9002 	strh.w	r9, [r2, #2]
 8017034:	f8a2 e004 	strh.w	lr, [r2, #4]
 8017038:	f8a2 c006 	strh.w	ip, [r2, #6]
 801703c:	3301      	adds	r3, #1
 801703e:	b29b      	uxth	r3, r3
 8017040:	e7df      	b.n	8017002 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8017042:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8017046:	2b00      	cmp	r3, #0
 8017048:	d1cf      	bne.n	8016fea <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801704a:	b01b      	add	sp, #108	; 0x6c
 801704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017050:	462f      	mov	r7, r5
 8017052:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8017056:	42bb      	cmp	r3, r7
 8017058:	d90b      	bls.n	8017072 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801705a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801705e:	3701      	adds	r7, #1
 8017060:	4620      	mov	r0, r4
 8017062:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8017066:	b2bf      	uxth	r7, r7
 8017068:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801706c:	f7ff fc54 	bl	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017070:	e7ef      	b.n	8017052 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 8017072:	4a9e      	ldr	r2, [pc, #632]	; (80172ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8017074:	6813      	ldr	r3, [r2, #0]
 8017076:	4690      	mov	r8, r2
 8017078:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801707c:	2b01      	cmp	r3, #1
 801707e:	f040 80e4 	bne.w	801724a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 8017082:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8017086:	4629      	mov	r1, r5
 8017088:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801708c:	2500      	movs	r5, #0
 801708e:	33ae      	adds	r3, #174	; 0xae
 8017090:	428f      	cmp	r7, r1
 8017092:	f103 0308 	add.w	r3, r3, #8
 8017096:	dd0a      	ble.n	80170ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8017098:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801709c:	3101      	adds	r1, #1
 801709e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80170a2:	4402      	add	r2, r0
 80170a4:	b212      	sxth	r2, r2
 80170a6:	4295      	cmp	r5, r2
 80170a8:	bfb8      	it	lt
 80170aa:	4615      	movlt	r5, r2
 80170ac:	e7f0      	b.n	8017090 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80170ae:	4b90      	ldr	r3, [pc, #576]	; (80172f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80170b0:	f8df b238 	ldr.w	fp, [pc, #568]	; 80172ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80170b4:	881b      	ldrh	r3, [r3, #0]
 80170b6:	46d8      	mov	r8, fp
 80170b8:	2b0f      	cmp	r3, #15
 80170ba:	bf8c      	ite	hi
 80170bc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80170c0:	f04f 0a01 	movls.w	sl, #1
 80170c4:	2300      	movs	r3, #0
 80170c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80170ca:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80170ce:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80170d2:	4438      	add	r0, r7
 80170d4:	b207      	sxth	r7, r0
 80170d6:	f8db 0000 	ldr.w	r0, [fp]
 80170da:	42bd      	cmp	r5, r7
 80170dc:	6803      	ldr	r3, [r0, #0]
 80170de:	f340 8084 	ble.w	80171ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80170e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80170e6:	4798      	blx	r3
 80170e8:	eb07 030a 	add.w	r3, r7, sl
 80170ec:	4298      	cmp	r0, r3
 80170ee:	da07      	bge.n	8017100 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80170f0:	4285      	cmp	r5, r0
 80170f2:	dd05      	ble.n	8017100 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80170f4:	4287      	cmp	r7, r0
 80170f6:	dd6d      	ble.n	80171d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80170f8:	2f00      	cmp	r7, #0
 80170fa:	dd6b      	ble.n	80171d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80170fc:	4628      	mov	r0, r5
 80170fe:	e004      	b.n	801710a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8017100:	4287      	cmp	r7, r0
 8017102:	dcfb      	bgt.n	80170fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8017104:	42a8      	cmp	r0, r5
 8017106:	bfa8      	it	ge
 8017108:	4628      	movge	r0, r5
 801710a:	4b7a      	ldr	r3, [pc, #488]	; (80172f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801710c:	1bc0      	subs	r0, r0, r7
 801710e:	2200      	movs	r2, #0
 8017110:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017118:	f8ad 2014 	strh.w	r2, [sp, #20]
 801711c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017120:	9b02      	ldr	r3, [sp, #8]
 8017122:	f8ad 001a 	strh.w	r0, [sp, #26]
 8017126:	881f      	ldrh	r7, [r3, #0]
 8017128:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801712c:	42bb      	cmp	r3, r7
 801712e:	d9cc      	bls.n	80170ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8017130:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8017134:	ab07      	add	r3, sp, #28
 8017136:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801713a:	6851      	ldr	r1, [r2, #4]
 801713c:	c303      	stmia	r3!, {r0, r1}
 801713e:	a905      	add	r1, sp, #20
 8017140:	a807      	add	r0, sp, #28
 8017142:	f7ff fa2c 	bl	801659e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017146:	2800      	cmp	r0, #0
 8017148:	d04c      	beq.n	80171e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801714a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801714e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8017152:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8017156:	4686      	mov	lr, r0
 8017158:	4290      	cmp	r0, r2
 801715a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801715e:	4448      	add	r0, r9
 8017160:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8017164:	bfb8      	it	lt
 8017166:	4696      	movlt	lr, r2
 8017168:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801716c:	444a      	add	r2, r9
 801716e:	b280      	uxth	r0, r0
 8017170:	4299      	cmp	r1, r3
 8017172:	468c      	mov	ip, r1
 8017174:	b292      	uxth	r2, r2
 8017176:	9303      	str	r3, [sp, #12]
 8017178:	bfb8      	it	lt
 801717a:	469c      	movlt	ip, r3
 801717c:	b203      	sxth	r3, r0
 801717e:	fa0f f982 	sxth.w	r9, r2
 8017182:	f8ad e01c 	strh.w	lr, [sp, #28]
 8017186:	f8ad c01e 	strh.w	ip, [sp, #30]
 801718a:	454b      	cmp	r3, r9
 801718c:	bfb8      	it	lt
 801718e:	4602      	movlt	r2, r0
 8017190:	9b03      	ldr	r3, [sp, #12]
 8017192:	eba2 020e 	sub.w	r2, r2, lr
 8017196:	f8ad 2020 	strh.w	r2, [sp, #32]
 801719a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801719e:	4411      	add	r1, r2
 80171a0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80171a4:	4413      	add	r3, r2
 80171a6:	b289      	uxth	r1, r1
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	b208      	sxth	r0, r1
 80171ac:	b21a      	sxth	r2, r3
 80171ae:	4290      	cmp	r0, r2
 80171b0:	bfb8      	it	lt
 80171b2:	460b      	movlt	r3, r1
 80171b4:	eba3 030c 	sub.w	r3, r3, ip
 80171b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80171bc:	a807      	add	r0, sp, #28
 80171be:	f7fa f874 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80171c2:	b920      	cbnz	r0, 80171ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80171c4:	6823      	ldr	r3, [r4, #0]
 80171c6:	a907      	add	r1, sp, #28
 80171c8:	4620      	mov	r0, r4
 80171ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171cc:	4798      	blx	r3
 80171ce:	3701      	adds	r7, #1
 80171d0:	b2bf      	uxth	r7, r7
 80171d2:	e7a9      	b.n	8017128 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80171d4:	f8d8 0000 	ldr.w	r0, [r8]
 80171d8:	2101      	movs	r1, #1
 80171da:	6803      	ldr	r3, [r0, #0]
 80171dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80171e0:	4798      	blx	r3
 80171e2:	e772      	b.n	80170ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80171e4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80171e8:	e7e8      	b.n	80171bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80171ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ec:	4798      	blx	r3
 80171ee:	4b42      	ldr	r3, [pc, #264]	; (80172f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80171f0:	781b      	ldrb	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	f43f af29 	beq.w	801704a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80171f8:	2300      	movs	r3, #0
 80171fa:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80171fe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8017202:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8017206:	9b02      	ldr	r3, [sp, #8]
 8017208:	881b      	ldrh	r3, [r3, #0]
 801720a:	429d      	cmp	r5, r3
 801720c:	f67f af1d 	bls.w	801704a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8017210:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8017214:	2907      	cmp	r1, #7
 8017216:	d815      	bhi.n	8017244 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8017218:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801721c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8017220:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8017224:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8017228:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801722c:	1c4a      	adds	r2, r1, #1
 801722e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8017232:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8017236:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801723a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801723e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8017242:	80d7      	strh	r7, [r2, #6]
 8017244:	3301      	adds	r3, #1
 8017246:	b29b      	uxth	r3, r3
 8017248:	e7df      	b.n	801720a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801724a:	2b02      	cmp	r3, #2
 801724c:	f040 8135 	bne.w	80174ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8017250:	4b2a      	ldr	r3, [pc, #168]	; (80172fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8017252:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8017256:	781b      	ldrb	r3, [r3, #0]
 8017258:	2b01      	cmp	r3, #1
 801725a:	f000 809c 	beq.w	8017396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801725e:	9b02      	ldr	r3, [sp, #8]
 8017260:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8017264:	f8b3 b000 	ldrh.w	fp, [r3]
 8017268:	f10b 0b01 	add.w	fp, fp, #1
 801726c:	fa1f fb8b 	uxth.w	fp, fp
 8017270:	2a00      	cmp	r2, #0
 8017272:	d0bc      	beq.n	80171ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017274:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8017278:	4659      	mov	r1, fp
 801727a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801727e:	f04f 0800 	mov.w	r8, #0
 8017282:	441d      	add	r5, r3
 8017284:	b22d      	sxth	r5, r5
 8017286:	b28b      	uxth	r3, r1
 8017288:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801728c:	429a      	cmp	r2, r3
 801728e:	f240 80c0 	bls.w	8017412 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8017292:	4427      	add	r7, r4
 8017294:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8017298:	4608      	mov	r0, r1
 801729a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801729e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80172a2:	4563      	cmp	r3, ip
 80172a4:	f340 80a2 	ble.w	80173ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80172a8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80172ac:	4465      	add	r5, ip
 80172ae:	b22d      	sxth	r5, r5
 80172b0:	429d      	cmp	r5, r3
 80172b2:	bfa8      	it	ge
 80172b4:	461d      	movge	r5, r3
 80172b6:	3101      	adds	r1, #1
 80172b8:	4680      	mov	r8, r0
 80172ba:	e7e4      	b.n	8017286 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80172bc:	d10b      	bne.n	80172d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80172be:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80172c2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80172c6:	458c      	cmp	ip, r1
 80172c8:	bfb4      	ite	lt
 80172ca:	469c      	movlt	ip, r3
 80172cc:	46bc      	movge	ip, r7
 80172ce:	4572      	cmp	r2, lr
 80172d0:	bfb8      	it	lt
 80172d2:	4672      	movlt	r2, lr
 80172d4:	e087      	b.n	80173e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80172d6:	428a      	cmp	r2, r1
 80172d8:	46bc      	mov	ip, r7
 80172da:	bfb8      	it	lt
 80172dc:	460a      	movlt	r2, r1
 80172de:	e082      	b.n	80173e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80172e0:	2400ea74 	.word	0x2400ea74
 80172e4:	2400ea80 	.word	0x2400ea80
 80172e8:	2400005c 	.word	0x2400005c
 80172ec:	2400ea34 	.word	0x2400ea34
 80172f0:	2400ea2a 	.word	0x2400ea2a
 80172f4:	2400ea28 	.word	0x2400ea28
 80172f8:	2400ea32 	.word	0x2400ea32
 80172fc:	2400ea2c 	.word	0x2400ea2c
 8017300:	1961      	adds	r1, r4, r5
 8017302:	ab07      	add	r3, sp, #28
 8017304:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8017308:	6849      	ldr	r1, [r1, #4]
 801730a:	c303      	stmia	r3!, {r0, r1}
 801730c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8017310:	a807      	add	r0, sp, #28
 8017312:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017316:	2b13      	cmp	r3, #19
 8017318:	440b      	add	r3, r1
 801731a:	bfd8      	it	le
 801731c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8017320:	1a9b      	subs	r3, r3, r2
 8017322:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017326:	f8ad 3020 	strh.w	r3, [sp, #32]
 801732a:	f7ff f897 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801732e:	a807      	add	r0, sp, #28
 8017330:	f7f9 ffbb 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017334:	bb78      	cbnz	r0, 8017396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8017336:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801733a:	4425      	add	r5, r4
 801733c:	f8d8 0000 	ldr.w	r0, [r8]
 8017340:	f1bc 0f14 	cmp.w	ip, #20
 8017344:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017348:	f8d0 e000 	ldr.w	lr, [r0]
 801734c:	bfa8      	it	ge
 801734e:	f04f 0c14 	movge.w	ip, #20
 8017352:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8017356:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801735a:	fa1f fc8c 	uxth.w	ip, ip
 801735e:	f8cd c000 	str.w	ip, [sp]
 8017362:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8017366:	47d0      	blx	sl
 8017368:	4682      	mov	sl, r0
 801736a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801736e:	a807      	add	r0, sp, #28
 8017370:	f7ff f85a 	bl	8016428 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	4620      	mov	r0, r4
 8017378:	a907      	add	r1, sp, #28
 801737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801737c:	4798      	blx	r3
 801737e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8017382:	eba0 000a 	sub.w	r0, r0, sl
 8017386:	b200      	sxth	r0, r0
 8017388:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801738c:	b918      	cbnz	r0, 8017396 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801738e:	b2b9      	uxth	r1, r7
 8017390:	4648      	mov	r0, r9
 8017392:	f7ff faad 	bl	80168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017396:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801739a:	f1bb 0f00 	cmp.w	fp, #0
 801739e:	f43f af26 	beq.w	80171ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80173a2:	9b02      	ldr	r3, [sp, #8]
 80173a4:	2700      	movs	r7, #0
 80173a6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80173aa:	881b      	ldrh	r3, [r3, #0]
 80173ac:	3301      	adds	r3, #1
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	b299      	uxth	r1, r3
 80173b2:	00fd      	lsls	r5, r7, #3
 80173b4:	458b      	cmp	fp, r1
 80173b6:	d9a3      	bls.n	8017300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80173b8:	4425      	add	r5, r4
 80173ba:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80173be:	469c      	mov	ip, r3
 80173c0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80173c4:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80173c8:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80173cc:	4408      	add	r0, r1
 80173ce:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80173d2:	4471      	add	r1, lr
 80173d4:	b200      	sxth	r0, r0
 80173d6:	b209      	sxth	r1, r1
 80173d8:	4288      	cmp	r0, r1
 80173da:	f6bf af6f 	bge.w	80172bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 80173de:	4586      	cmp	lr, r0
 80173e0:	4672      	mov	r2, lr
 80173e2:	bfb8      	it	lt
 80173e4:	4602      	movlt	r2, r0
 80173e6:	3301      	adds	r3, #1
 80173e8:	4667      	mov	r7, ip
 80173ea:	e7e1      	b.n	80173b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 80173ec:	d10c      	bne.n	8017408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 80173ee:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 80173f2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 80173f6:	4287      	cmp	r7, r0
 80173f8:	bfb4      	ite	lt
 80173fa:	4608      	movlt	r0, r1
 80173fc:	4640      	movge	r0, r8
 80173fe:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8017402:	443b      	add	r3, r7
 8017404:	b21b      	sxth	r3, r3
 8017406:	e753      	b.n	80172b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8017408:	4565      	cmp	r5, ip
 801740a:	4640      	mov	r0, r8
 801740c:	bfa8      	it	ge
 801740e:	4665      	movge	r5, ip
 8017410:	e751      	b.n	80172b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8017412:	eb09 0007 	add.w	r0, r9, r7
 8017416:	4427      	add	r7, r4
 8017418:	9203      	str	r2, [sp, #12]
 801741a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801741e:	f1ba 0f13 	cmp.w	sl, #19
 8017422:	bfde      	ittt	le
 8017424:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8017428:	4455      	addle	r5, sl
 801742a:	b22d      	sxthle	r5, r5
 801742c:	f7f9 ff3d 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017430:	9a03      	ldr	r2, [sp, #12]
 8017432:	2800      	cmp	r0, #0
 8017434:	f47f af1c 	bne.w	8017270 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8017438:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801743c:	fa1f fa8a 	uxth.w	sl, sl
 8017440:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017444:	1aad      	subs	r5, r5, r2
 8017446:	4829      	ldr	r0, [pc, #164]	; (80174ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8017448:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801744c:	2d14      	cmp	r5, #20
 801744e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8017452:	6800      	ldr	r0, [r0, #0]
 8017454:	bfa8      	it	ge
 8017456:	2514      	movge	r5, #20
 8017458:	f8ad 101c 	strh.w	r1, [sp, #28]
 801745c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017460:	b289      	uxth	r1, r1
 8017462:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017466:	b2ad      	uxth	r5, r5
 8017468:	f8d0 c000 	ldr.w	ip, [r0]
 801746c:	b292      	uxth	r2, r2
 801746e:	4555      	cmp	r5, sl
 8017470:	bf94      	ite	ls
 8017472:	9500      	strls	r5, [sp, #0]
 8017474:	f8cd a000 	strhi.w	sl, [sp]
 8017478:	b29b      	uxth	r3, r3
 801747a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801747e:	47a8      	blx	r5
 8017480:	6823      	ldr	r3, [r4, #0]
 8017482:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8017486:	a907      	add	r1, sp, #28
 8017488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801748a:	4620      	mov	r0, r4
 801748c:	4798      	blx	r3
 801748e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8017492:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017496:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801749a:	1a5b      	subs	r3, r3, r1
 801749c:	440a      	add	r2, r1
 801749e:	b21b      	sxth	r3, r3
 80174a0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80174a4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f47f aed8 	bne.w	801725e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80174ae:	fa1f f188 	uxth.w	r1, r8
 80174b2:	4648      	mov	r0, r9
 80174b4:	f7ff fa1c 	bl	80168f0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80174b8:	e6d1      	b.n	801725e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80174ba:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80174be:	42ab      	cmp	r3, r5
 80174c0:	f67f ae95 	bls.w	80171ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80174c4:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80174c8:	ab07      	add	r3, sp, #28
 80174ca:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80174ce:	6851      	ldr	r1, [r2, #4]
 80174d0:	c303      	stmia	r3!, {r0, r1}
 80174d2:	a807      	add	r0, sp, #28
 80174d4:	f7f9 fee9 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80174d8:	b920      	cbnz	r0, 80174e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 80174da:	6823      	ldr	r3, [r4, #0]
 80174dc:	a907      	add	r1, sp, #28
 80174de:	4620      	mov	r0, r4
 80174e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174e2:	4798      	blx	r3
 80174e4:	3501      	adds	r5, #1
 80174e6:	b2ad      	uxth	r5, r5
 80174e8:	e7e7      	b.n	80174ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80174ea:	bf00      	nop
 80174ec:	2400ea34 	.word	0x2400ea34

080174f0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80174f0:	4b03      	ldr	r3, [pc, #12]	; (8017500 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80174f2:	2200      	movs	r2, #0
 80174f4:	801a      	strh	r2, [r3, #0]
 80174f6:	805a      	strh	r2, [r3, #2]
 80174f8:	809a      	strh	r2, [r3, #4]
 80174fa:	80da      	strh	r2, [r3, #6]
 80174fc:	4770      	bx	lr
 80174fe:	bf00      	nop
 8017500:	2400ea80 	.word	0x2400ea80

08017504 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017508:	b09d      	sub	sp, #116	; 0x74
 801750a:	4606      	mov	r6, r0
 801750c:	4614      	mov	r4, r2
 801750e:	468a      	mov	sl, r1
 8017510:	a803      	add	r0, sp, #12
 8017512:	461d      	mov	r5, r3
 8017514:	f000 fe44 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8017518:	6833      	ldr	r3, [r6, #0]
 801751a:	4630      	mov	r0, r6
 801751c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8017520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017522:	4798      	blx	r3
 8017524:	6833      	ldr	r3, [r6, #0]
 8017526:	4607      	mov	r7, r0
 8017528:	4630      	mov	r0, r6
 801752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801752c:	4798      	blx	r3
 801752e:	462a      	mov	r2, r5
 8017530:	2500      	movs	r5, #0
 8017532:	4621      	mov	r1, r4
 8017534:	9000      	str	r0, [sp, #0]
 8017536:	463b      	mov	r3, r7
 8017538:	462c      	mov	r4, r5
 801753a:	46a9      	mov	r9, r5
 801753c:	46a8      	mov	r8, r5
 801753e:	a803      	add	r0, sp, #12
 8017540:	f000 fe89 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017544:	2300      	movs	r3, #0
 8017546:	9302      	str	r3, [sp, #8]
 8017548:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801754c:	429c      	cmp	r4, r3
 801754e:	d002      	beq.n	8017556 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017550:	455c      	cmp	r4, fp
 8017552:	bf18      	it	ne
 8017554:	4625      	movne	r5, r4
 8017556:	ab02      	add	r3, sp, #8
 8017558:	4632      	mov	r2, r6
 801755a:	4651      	mov	r1, sl
 801755c:	a803      	add	r0, sp, #12
 801755e:	f001 f97f 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017562:	4604      	mov	r4, r0
 8017564:	b108      	cbz	r0, 801756a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017566:	280a      	cmp	r0, #10
 8017568:	d10a      	bne.n	8017580 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801756a:	45c1      	cmp	r9, r8
 801756c:	bf38      	it	cc
 801756e:	46c1      	movcc	r9, r8
 8017570:	f04f 0800 	mov.w	r8, #0
 8017574:	2c00      	cmp	r4, #0
 8017576:	d1e5      	bne.n	8017544 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017578:	4648      	mov	r0, r9
 801757a:	b01d      	add	sp, #116	; 0x74
 801757c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017580:	9a02      	ldr	r2, [sp, #8]
 8017582:	2a00      	cmp	r2, #0
 8017584:	d0de      	beq.n	8017544 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017586:	7b57      	ldrb	r7, [r2, #13]
 8017588:	4629      	mov	r1, r5
 801758a:	6833      	ldr	r3, [r6, #0]
 801758c:	007f      	lsls	r7, r7, #1
 801758e:	8894      	ldrh	r4, [r2, #4]
 8017590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017592:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8017596:	7a97      	ldrb	r7, [r2, #10]
 8017598:	4307      	orrs	r7, r0
 801759a:	4630      	mov	r0, r6
 801759c:	4798      	blx	r3
 801759e:	4438      	add	r0, r7
 80175a0:	4480      	add	r8, r0
 80175a2:	fa1f f888 	uxth.w	r8, r8
 80175a6:	e7e5      	b.n	8017574 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080175a8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80175a8:	b508      	push	{r3, lr}
 80175aa:	6803      	ldr	r3, [r0, #0]
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	4798      	blx	r3
 80175b0:	b128      	cbz	r0, 80175be <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80175b2:	7b43      	ldrb	r3, [r0, #13]
 80175b4:	7a80      	ldrb	r0, [r0, #10]
 80175b6:	005b      	lsls	r3, r3, #1
 80175b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80175bc:	4318      	orrs	r0, r3
 80175be:	bd08      	pop	{r3, pc}

080175c0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80175c0:	b40e      	push	{r1, r2, r3}
 80175c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175c4:	b09e      	sub	sp, #120	; 0x78
 80175c6:	4605      	mov	r5, r0
 80175c8:	ab23      	add	r3, sp, #140	; 0x8c
 80175ca:	a805      	add	r0, sp, #20
 80175cc:	f853 4b04 	ldr.w	r4, [r3], #4
 80175d0:	9303      	str	r3, [sp, #12]
 80175d2:	f000 fde5 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 80175d6:	682b      	ldr	r3, [r5, #0]
 80175d8:	4628      	mov	r0, r5
 80175da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80175dc:	4798      	blx	r3
 80175de:	682b      	ldr	r3, [r5, #0]
 80175e0:	4606      	mov	r6, r0
 80175e2:	4628      	mov	r0, r5
 80175e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80175e6:	4798      	blx	r3
 80175e8:	4633      	mov	r3, r6
 80175ea:	4621      	mov	r1, r4
 80175ec:	ae1e      	add	r6, sp, #120	; 0x78
 80175ee:	2400      	movs	r4, #0
 80175f0:	9000      	str	r0, [sp, #0]
 80175f2:	9a03      	ldr	r2, [sp, #12]
 80175f4:	a805      	add	r0, sp, #20
 80175f6:	f000 fe2e 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80175fa:	f846 4d68 	str.w	r4, [r6, #-104]!
 80175fe:	462a      	mov	r2, r5
 8017600:	4633      	mov	r3, r6
 8017602:	4621      	mov	r1, r4
 8017604:	a805      	add	r0, sp, #20
 8017606:	f001 f92b 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801760a:	b300      	cbz	r0, 801764e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801760c:	280a      	cmp	r0, #10
 801760e:	d01a      	beq.n	8017646 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017610:	9f04      	ldr	r7, [sp, #16]
 8017612:	b1c7      	cbz	r7, 8017646 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017614:	7b78      	ldrb	r0, [r7, #13]
 8017616:	7a3b      	ldrb	r3, [r7, #8]
 8017618:	00c1      	lsls	r1, r0, #3
 801761a:	88ea      	ldrh	r2, [r5, #6]
 801761c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8017620:	4319      	orrs	r1, r3
 8017622:	0643      	lsls	r3, r0, #25
 8017624:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017628:	bf48      	it	mi
 801762a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801762e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017632:	bf48      	it	mi
 8017634:	b219      	sxthmi	r1, r3
 8017636:	79fb      	ldrb	r3, [r7, #7]
 8017638:	4303      	orrs	r3, r0
 801763a:	4413      	add	r3, r2
 801763c:	1a5b      	subs	r3, r3, r1
 801763e:	b21b      	sxth	r3, r3
 8017640:	429c      	cmp	r4, r3
 8017642:	bfb8      	it	lt
 8017644:	461c      	movlt	r4, r3
 8017646:	4633      	mov	r3, r6
 8017648:	462a      	mov	r2, r5
 801764a:	2100      	movs	r1, #0
 801764c:	e7da      	b.n	8017604 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801764e:	b2a0      	uxth	r0, r4
 8017650:	b01e      	add	sp, #120	; 0x78
 8017652:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017656:	b003      	add	sp, #12
 8017658:	4770      	bx	lr

0801765a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801765a:	7a43      	ldrb	r3, [r0, #9]
 801765c:	8880      	ldrh	r0, [r0, #4]
 801765e:	4418      	add	r0, r3
 8017660:	b280      	uxth	r0, r0
 8017662:	4770      	bx	lr

08017664 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017664:	6803      	ldr	r3, [r0, #0]
 8017666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017668:	4718      	bx	r3

0801766a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801766a:	b40e      	push	{r1, r2, r3}
 801766c:	b570      	push	{r4, r5, r6, lr}
 801766e:	b09d      	sub	sp, #116	; 0x74
 8017670:	4604      	mov	r4, r0
 8017672:	ab21      	add	r3, sp, #132	; 0x84
 8017674:	a803      	add	r0, sp, #12
 8017676:	f853 5b04 	ldr.w	r5, [r3], #4
 801767a:	9302      	str	r3, [sp, #8]
 801767c:	f000 fd90 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 8017680:	6823      	ldr	r3, [r4, #0]
 8017682:	4620      	mov	r0, r4
 8017684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017686:	4798      	blx	r3
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	4606      	mov	r6, r0
 801768c:	4620      	mov	r0, r4
 801768e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017690:	2401      	movs	r4, #1
 8017692:	4798      	blx	r3
 8017694:	4633      	mov	r3, r6
 8017696:	9000      	str	r0, [sp, #0]
 8017698:	4629      	mov	r1, r5
 801769a:	9a02      	ldr	r2, [sp, #8]
 801769c:	a803      	add	r0, sp, #12
 801769e:	f000 fdda 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80176a2:	a803      	add	r0, sp, #12
 80176a4:	f001 f9a8 	bl	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80176a8:	b2a3      	uxth	r3, r4
 80176aa:	b138      	cbz	r0, 80176bc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80176ac:	280a      	cmp	r0, #10
 80176ae:	a803      	add	r0, sp, #12
 80176b0:	bf04      	itt	eq
 80176b2:	3301      	addeq	r3, #1
 80176b4:	b21c      	sxtheq	r4, r3
 80176b6:	f001 f99f 	bl	80189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80176ba:	e7f5      	b.n	80176a8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80176bc:	4618      	mov	r0, r3
 80176be:	b01d      	add	sp, #116	; 0x74
 80176c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176c4:	b003      	add	sp, #12
 80176c6:	4770      	bx	lr

080176c8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80176c8:	b40e      	push	{r1, r2, r3}
 80176ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176cc:	b09e      	sub	sp, #120	; 0x78
 80176ce:	4604      	mov	r4, r0
 80176d0:	ab23      	add	r3, sp, #140	; 0x8c
 80176d2:	a805      	add	r0, sp, #20
 80176d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80176d8:	9303      	str	r3, [sp, #12]
 80176da:	f000 fd61 	bl	80181a0 <_ZN8touchgfx12TextProviderC1Ev>
 80176de:	6823      	ldr	r3, [r4, #0]
 80176e0:	4620      	mov	r0, r4
 80176e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176e4:	4798      	blx	r3
 80176e6:	6823      	ldr	r3, [r4, #0]
 80176e8:	4606      	mov	r6, r0
 80176ea:	4620      	mov	r0, r4
 80176ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176ee:	4798      	blx	r3
 80176f0:	4633      	mov	r3, r6
 80176f2:	4629      	mov	r1, r5
 80176f4:	9000      	str	r0, [sp, #0]
 80176f6:	9a03      	ldr	r2, [sp, #12]
 80176f8:	a805      	add	r0, sp, #20
 80176fa:	f000 fdac 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80176fe:	ad1e      	add	r5, sp, #120	; 0x78
 8017700:	2100      	movs	r1, #0
 8017702:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8017706:	4622      	mov	r2, r4
 8017708:	a805      	add	r0, sp, #20
 801770a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801770e:	462b      	mov	r3, r5
 8017710:	f001 f8a6 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017714:	b1d8      	cbz	r0, 801774e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017716:	280a      	cmp	r0, #10
 8017718:	d012      	beq.n	8017740 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801771a:	9804      	ldr	r0, [sp, #16]
 801771c:	b180      	cbz	r0, 8017740 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801771e:	7b47      	ldrb	r7, [r0, #13]
 8017720:	88e2      	ldrh	r2, [r4, #6]
 8017722:	00fb      	lsls	r3, r7, #3
 8017724:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8017728:	7a03      	ldrb	r3, [r0, #8]
 801772a:	430b      	orrs	r3, r1
 801772c:	0679      	lsls	r1, r7, #25
 801772e:	bf44      	itt	mi
 8017730:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8017734:	b21b      	sxthmi	r3, r3
 8017736:	1ad3      	subs	r3, r2, r3
 8017738:	b21b      	sxth	r3, r3
 801773a:	429e      	cmp	r6, r3
 801773c:	bfa8      	it	ge
 801773e:	461e      	movge	r6, r3
 8017740:	462b      	mov	r3, r5
 8017742:	4622      	mov	r2, r4
 8017744:	2100      	movs	r1, #0
 8017746:	a805      	add	r0, sp, #20
 8017748:	f001 f88a 	bl	8018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801774c:	e7e2      	b.n	8017714 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801774e:	4630      	mov	r0, r6
 8017750:	b01e      	add	sp, #120	; 0x78
 8017752:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017756:	b003      	add	sp, #12
 8017758:	4770      	bx	lr

0801775a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801775a:	b513      	push	{r0, r1, r4, lr}
 801775c:	6803      	ldr	r3, [r0, #0]
 801775e:	2400      	movs	r4, #0
 8017760:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017764:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017768:	f8ad 1004 	strh.w	r1, [sp, #4]
 801776c:	4669      	mov	r1, sp
 801776e:	691b      	ldr	r3, [r3, #16]
 8017770:	9400      	str	r4, [sp, #0]
 8017772:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017776:	4798      	blx	r3
 8017778:	b002      	add	sp, #8
 801777a:	bd10      	pop	{r4, pc}

0801777c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801777c:	b538      	push	{r3, r4, r5, lr}
 801777e:	680b      	ldr	r3, [r1, #0]
 8017780:	460c      	mov	r4, r1
 8017782:	4605      	mov	r5, r0
 8017784:	68db      	ldr	r3, [r3, #12]
 8017786:	4798      	blx	r3
 8017788:	6823      	ldr	r3, [r4, #0]
 801778a:	4620      	mov	r0, r4
 801778c:	4629      	mov	r1, r5
 801778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017790:	4798      	blx	r3
 8017792:	4628      	mov	r0, r5
 8017794:	bd38      	pop	{r3, r4, r5, pc}

08017796 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017796:	b410      	push	{r4}
 8017798:	880a      	ldrh	r2, [r1, #0]
 801779a:	8884      	ldrh	r4, [r0, #4]
 801779c:	4422      	add	r2, r4
 801779e:	800a      	strh	r2, [r1, #0]
 80177a0:	884a      	ldrh	r2, [r1, #2]
 80177a2:	88c4      	ldrh	r4, [r0, #6]
 80177a4:	4422      	add	r2, r4
 80177a6:	804a      	strh	r2, [r1, #2]
 80177a8:	6940      	ldr	r0, [r0, #20]
 80177aa:	b120      	cbz	r0, 80177b6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80177ac:	6803      	ldr	r3, [r0, #0]
 80177ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b4:	4718      	bx	r3
 80177b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177ba:	4770      	bx	lr

080177bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80177bc:	b570      	push	{r4, r5, r6, lr}
 80177be:	8882      	ldrh	r2, [r0, #4]
 80177c0:	460c      	mov	r4, r1
 80177c2:	880b      	ldrh	r3, [r1, #0]
 80177c4:	4605      	mov	r5, r0
 80177c6:	4413      	add	r3, r2
 80177c8:	800b      	strh	r3, [r1, #0]
 80177ca:	884b      	ldrh	r3, [r1, #2]
 80177cc:	88c2      	ldrh	r2, [r0, #6]
 80177ce:	4413      	add	r3, r2
 80177d0:	804b      	strh	r3, [r1, #2]
 80177d2:	1d01      	adds	r1, r0, #4
 80177d4:	4620      	mov	r0, r4
 80177d6:	f7f9 fd25 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 80177da:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	dd0b      	ble.n	80177fa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80177e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	dd07      	ble.n	80177fa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80177ea:	6968      	ldr	r0, [r5, #20]
 80177ec:	b128      	cbz	r0, 80177fa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80177ee:	6803      	ldr	r3, [r0, #0]
 80177f0:	4621      	mov	r1, r4
 80177f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80177f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177f8:	4718      	bx	r3
 80177fa:	bd70      	pop	{r4, r5, r6, pc}

080177fc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80177fc:	b570      	push	{r4, r5, r6, lr}
 80177fe:	8882      	ldrh	r2, [r0, #4]
 8017800:	460c      	mov	r4, r1
 8017802:	880b      	ldrh	r3, [r1, #0]
 8017804:	4605      	mov	r5, r0
 8017806:	4413      	add	r3, r2
 8017808:	800b      	strh	r3, [r1, #0]
 801780a:	884b      	ldrh	r3, [r1, #2]
 801780c:	88c2      	ldrh	r2, [r0, #6]
 801780e:	4413      	add	r3, r2
 8017810:	804b      	strh	r3, [r1, #2]
 8017812:	1d01      	adds	r1, r0, #4
 8017814:	4620      	mov	r0, r4
 8017816:	f7f9 fd05 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801781a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801781e:	2b00      	cmp	r3, #0
 8017820:	dd18      	ble.n	8017854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017822:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017826:	2b00      	cmp	r3, #0
 8017828:	dd14      	ble.n	8017854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801782a:	6968      	ldr	r0, [r5, #20]
 801782c:	b128      	cbz	r0, 801783a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801782e:	6803      	ldr	r3, [r0, #0]
 8017830:	4621      	mov	r1, r4
 8017832:	691b      	ldr	r3, [r3, #16]
 8017834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017838:	4718      	bx	r3
 801783a:	4b07      	ldr	r3, [pc, #28]	; (8017858 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	3304      	adds	r3, #4
 8017840:	429d      	cmp	r5, r3
 8017842:	d107      	bne.n	8017854 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8017844:	f7fe ff44 	bl	80166d0 <_ZN8touchgfx11Application11getInstanceEv>
 8017848:	6821      	ldr	r1, [r4, #0]
 801784a:	6862      	ldr	r2, [r4, #4]
 801784c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017850:	f7ff b862 	b.w	8016918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8017854:	bd70      	pop	{r4, r5, r6, pc}
 8017856:	bf00      	nop
 8017858:	2400ea78 	.word	0x2400ea78

0801785c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801785c:	b570      	push	{r4, r5, r6, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	4616      	mov	r6, r2
 8017862:	460d      	mov	r5, r1
 8017864:	b901      	cbnz	r1, 8017868 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017866:	b192      	cbz	r2, 801788e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017868:	6823      	ldr	r3, [r4, #0]
 801786a:	4620      	mov	r0, r4
 801786c:	699b      	ldr	r3, [r3, #24]
 801786e:	4798      	blx	r3
 8017870:	88e2      	ldrh	r2, [r4, #6]
 8017872:	88a1      	ldrh	r1, [r4, #4]
 8017874:	4620      	mov	r0, r4
 8017876:	4432      	add	r2, r6
 8017878:	4429      	add	r1, r5
 801787a:	b212      	sxth	r2, r2
 801787c:	b209      	sxth	r1, r1
 801787e:	f7eb fd94 	bl	80033aa <_ZN8touchgfx8Drawable5setXYEss>
 8017882:	6823      	ldr	r3, [r4, #0]
 8017884:	4620      	mov	r0, r4
 8017886:	699b      	ldr	r3, [r3, #24]
 8017888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801788c:	4718      	bx	r3
 801788e:	bd70      	pop	{r4, r5, r6, pc}

08017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017890:	b510      	push	{r4, lr}
 8017892:	2300      	movs	r3, #0
 8017894:	4604      	mov	r4, r0
 8017896:	4608      	mov	r0, r1
 8017898:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801789c:	8023      	strh	r3, [r4, #0]
 801789e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80178a2:	8063      	strh	r3, [r4, #2]
 80178a4:	6803      	ldr	r3, [r0, #0]
 80178a6:	80a1      	strh	r1, [r4, #4]
 80178a8:	4621      	mov	r1, r4
 80178aa:	80e2      	strh	r2, [r4, #6]
 80178ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178ae:	4798      	blx	r3
 80178b0:	4620      	mov	r0, r4
 80178b2:	bd10      	pop	{r4, pc}

080178b4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80178b4:	b530      	push	{r4, r5, lr}
 80178b6:	8083      	strh	r3, [r0, #4]
 80178b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80178bc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80178c0:	80c3      	strh	r3, [r0, #6]
 80178c2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80178c6:	6141      	str	r1, [r0, #20]
 80178c8:	7203      	strb	r3, [r0, #8]
 80178ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80178ce:	8302      	strh	r2, [r0, #24]
 80178d0:	7243      	strb	r3, [r0, #9]
 80178d2:	7a83      	ldrb	r3, [r0, #10]
 80178d4:	f365 0306 	bfi	r3, r5, #0, #7
 80178d8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80178dc:	f365 13c7 	bfi	r3, r5, #7, #1
 80178e0:	7283      	strb	r3, [r0, #10]
 80178e2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80178e6:	72c3      	strb	r3, [r0, #11]
 80178e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80178ec:	7303      	strb	r3, [r0, #12]
 80178ee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80178f2:	81c3      	strh	r3, [r0, #14]
 80178f4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80178f8:	8203      	strh	r3, [r0, #16]
 80178fa:	4b01      	ldr	r3, [pc, #4]	; (8017900 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80178fc:	6003      	str	r3, [r0, #0]
 80178fe:	bd30      	pop	{r4, r5, pc}
 8017900:	08024e54 	.word	0x08024e54

08017904 <_ZNK8touchgfx9ConstFont4findEt>:
 8017904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017906:	6944      	ldr	r4, [r0, #20]
 8017908:	b3bc      	cbz	r4, 801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801790a:	88a3      	ldrh	r3, [r4, #4]
 801790c:	8b02      	ldrh	r2, [r0, #24]
 801790e:	1acb      	subs	r3, r1, r3
 8017910:	f102 32ff 	add.w	r2, r2, #4294967295
 8017914:	d431      	bmi.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017916:	4293      	cmp	r3, r2
 8017918:	dd0c      	ble.n	8017934 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801791a:	230e      	movs	r3, #14
 801791c:	fb03 4302 	mla	r3, r3, r2, r4
 8017920:	889b      	ldrh	r3, [r3, #4]
 8017922:	1a5b      	subs	r3, r3, r1
 8017924:	1ad3      	subs	r3, r2, r3
 8017926:	429a      	cmp	r2, r3
 8017928:	db27      	blt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801792a:	2b00      	cmp	r3, #0
 801792c:	bfbc      	itt	lt
 801792e:	2302      	movlt	r3, #2
 8017930:	fb92 f3f3 	sdivlt	r3, r2, r3
 8017934:	2500      	movs	r5, #0
 8017936:	260e      	movs	r6, #14
 8017938:	4295      	cmp	r5, r2
 801793a:	dc1e      	bgt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801793c:	fb06 4003 	mla	r0, r6, r3, r4
 8017940:	8887      	ldrh	r7, [r0, #4]
 8017942:	42b9      	cmp	r1, r7
 8017944:	d01a      	beq.n	801797c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8017946:	d20d      	bcs.n	8017964 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8017948:	1e5a      	subs	r2, r3, #1
 801794a:	4295      	cmp	r5, r2
 801794c:	dc15      	bgt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801794e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8017952:	1a5b      	subs	r3, r3, r1
 8017954:	1ad3      	subs	r3, r2, r3
 8017956:	429a      	cmp	r2, r3
 8017958:	db0f      	blt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801795a:	429d      	cmp	r5, r3
 801795c:	ddec      	ble.n	8017938 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801795e:	1953      	adds	r3, r2, r5
 8017960:	105b      	asrs	r3, r3, #1
 8017962:	e7e9      	b.n	8017938 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017964:	1c5d      	adds	r5, r3, #1
 8017966:	42aa      	cmp	r2, r5
 8017968:	db07      	blt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801796a:	8a43      	ldrh	r3, [r0, #18]
 801796c:	1acb      	subs	r3, r1, r3
 801796e:	442b      	add	r3, r5
 8017970:	429d      	cmp	r5, r3
 8017972:	dc02      	bgt.n	801797a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8017974:	429a      	cmp	r2, r3
 8017976:	dadf      	bge.n	8017938 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8017978:	e7f1      	b.n	801795e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801797a:	2000      	movs	r0, #0
 801797c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801797e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801797e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017980:	4604      	mov	r4, r0
 8017982:	4617      	mov	r7, r2
 8017984:	461e      	mov	r6, r3
 8017986:	b911      	cbnz	r1, 801798e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8017988:	2500      	movs	r5, #0
 801798a:	4628      	mov	r0, r5
 801798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801798e:	290a      	cmp	r1, #10
 8017990:	d0fa      	beq.n	8017988 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8017992:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8017996:	4291      	cmp	r1, r2
 8017998:	d0f6      	beq.n	8017988 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801799a:	f242 020b 	movw	r2, #8203	; 0x200b
 801799e:	4291      	cmp	r1, r2
 80179a0:	d0f2      	beq.n	8017988 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80179a2:	f7ff ffaf 	bl	8017904 <_ZNK8touchgfx9ConstFont4findEt>
 80179a6:	4605      	mov	r5, r0
 80179a8:	b950      	cbnz	r0, 80179c0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80179aa:	6823      	ldr	r3, [r4, #0]
 80179ac:	4620      	mov	r0, r4
 80179ae:	691b      	ldr	r3, [r3, #16]
 80179b0:	4798      	blx	r3
 80179b2:	4601      	mov	r1, r0
 80179b4:	4620      	mov	r0, r4
 80179b6:	f7ff ffa5 	bl	8017904 <_ZNK8touchgfx9ConstFont4findEt>
 80179ba:	4605      	mov	r5, r0
 80179bc:	2800      	cmp	r0, #0
 80179be:	d0e3      	beq.n	8017988 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80179c0:	6823      	ldr	r3, [r4, #0]
 80179c2:	4629      	mov	r1, r5
 80179c4:	4620      	mov	r0, r4
 80179c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80179c8:	4798      	blx	r3
 80179ca:	6038      	str	r0, [r7, #0]
 80179cc:	6823      	ldr	r3, [r4, #0]
 80179ce:	4620      	mov	r0, r4
 80179d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179d2:	4798      	blx	r3
 80179d4:	7030      	strb	r0, [r6, #0]
 80179d6:	e7d8      	b.n	801798a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080179d8 <_ZN8touchgfx4clzuEm>:
 80179d8:	4603      	mov	r3, r0
 80179da:	b1c8      	cbz	r0, 8017a10 <_ZN8touchgfx4clzuEm+0x38>
 80179dc:	0c02      	lsrs	r2, r0, #16
 80179de:	0412      	lsls	r2, r2, #16
 80179e0:	b9a2      	cbnz	r2, 8017a0c <_ZN8touchgfx4clzuEm+0x34>
 80179e2:	0403      	lsls	r3, r0, #16
 80179e4:	2010      	movs	r0, #16
 80179e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80179ea:	bf04      	itt	eq
 80179ec:	021b      	lsleq	r3, r3, #8
 80179ee:	3008      	addeq	r0, #8
 80179f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80179f4:	bf04      	itt	eq
 80179f6:	011b      	lsleq	r3, r3, #4
 80179f8:	3004      	addeq	r0, #4
 80179fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80179fe:	bf04      	itt	eq
 8017a00:	009b      	lsleq	r3, r3, #2
 8017a02:	3002      	addeq	r0, #2
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	db04      	blt.n	8017a12 <_ZN8touchgfx4clzuEm+0x3a>
 8017a08:	3001      	adds	r0, #1
 8017a0a:	4770      	bx	lr
 8017a0c:	2000      	movs	r0, #0
 8017a0e:	e7ea      	b.n	80179e6 <_ZN8touchgfx4clzuEm+0xe>
 8017a10:	2020      	movs	r0, #32
 8017a12:	4770      	bx	lr

08017a14 <_ZN8touchgfx7muldivuEmmmRm>:
 8017a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a18:	4680      	mov	r8, r0
 8017a1a:	460f      	mov	r7, r1
 8017a1c:	4615      	mov	r5, r2
 8017a1e:	461e      	mov	r6, r3
 8017a20:	f7ff ffda 	bl	80179d8 <_ZN8touchgfx4clzuEm>
 8017a24:	b998      	cbnz	r0, 8017a4e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8017a26:	4608      	mov	r0, r1
 8017a28:	f7ff ffd6 	bl	80179d8 <_ZN8touchgfx4clzuEm>
 8017a2c:	2800      	cmp	r0, #0
 8017a2e:	dd08      	ble.n	8017a42 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8017a30:	4633      	mov	r3, r6
 8017a32:	462a      	mov	r2, r5
 8017a34:	4641      	mov	r1, r8
 8017a36:	4638      	mov	r0, r7
 8017a38:	f7ff ffec 	bl	8017a14 <_ZN8touchgfx7muldivuEmmmRm>
 8017a3c:	b003      	add	sp, #12
 8017a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a42:	f04f 33ff 	mov.w	r3, #4294967295
 8017a46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017a4a:	6033      	str	r3, [r6, #0]
 8017a4c:	e7f6      	b.n	8017a3c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017a4e:	fa31 f900 	lsrs.w	r9, r1, r0
 8017a52:	fb01 f308 	mul.w	r3, r1, r8
 8017a56:	d105      	bne.n	8017a64 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8017a58:	fbb3 f0f5 	udiv	r0, r3, r5
 8017a5c:	fb05 3510 	mls	r5, r5, r0, r3
 8017a60:	6035      	str	r5, [r6, #0]
 8017a62:	e7eb      	b.n	8017a3c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8017a64:	2301      	movs	r3, #1
 8017a66:	fa08 fb00 	lsl.w	fp, r8, r0
 8017a6a:	462a      	mov	r2, r5
 8017a6c:	4641      	mov	r1, r8
 8017a6e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a72:	4633      	mov	r3, r6
 8017a74:	fbbb faf5 	udiv	sl, fp, r5
 8017a78:	3801      	subs	r0, #1
 8017a7a:	fb09 f40a 	mul.w	r4, r9, sl
 8017a7e:	4038      	ands	r0, r7
 8017a80:	f7ff ffc8 	bl	8017a14 <_ZN8touchgfx7muldivuEmmmRm>
 8017a84:	462a      	mov	r2, r5
 8017a86:	4607      	mov	r7, r0
 8017a88:	ab01      	add	r3, sp, #4
 8017a8a:	fb05 b11a 	mls	r1, r5, sl, fp
 8017a8e:	4648      	mov	r0, r9
 8017a90:	f7ff ffc0 	bl	8017a14 <_ZN8touchgfx7muldivuEmmmRm>
 8017a94:	9b01      	ldr	r3, [sp, #4]
 8017a96:	6832      	ldr	r2, [r6, #0]
 8017a98:	441a      	add	r2, r3
 8017a9a:	fbb2 f3f5 	udiv	r3, r2, r5
 8017a9e:	441c      	add	r4, r3
 8017aa0:	fb05 2513 	mls	r5, r5, r3, r2
 8017aa4:	443c      	add	r4, r7
 8017aa6:	4420      	add	r0, r4
 8017aa8:	e7da      	b.n	8017a60 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08017aaa <_ZN8touchgfx6muldivElllRl>:
 8017aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017aac:	2800      	cmp	r0, #0
 8017aae:	461e      	mov	r6, r3
 8017ab0:	bfba      	itte	lt
 8017ab2:	4240      	neglt	r0, r0
 8017ab4:	f04f 34ff 	movlt.w	r4, #4294967295
 8017ab8:	2401      	movge	r4, #1
 8017aba:	2900      	cmp	r1, #0
 8017abc:	bfbc      	itt	lt
 8017abe:	4249      	neglt	r1, r1
 8017ac0:	4264      	neglt	r4, r4
 8017ac2:	2a00      	cmp	r2, #0
 8017ac4:	bfb6      	itet	lt
 8017ac6:	4265      	neglt	r5, r4
 8017ac8:	4625      	movge	r5, r4
 8017aca:	4252      	neglt	r2, r2
 8017acc:	4288      	cmp	r0, r1
 8017ace:	bfc2      	ittt	gt
 8017ad0:	4603      	movgt	r3, r0
 8017ad2:	4608      	movgt	r0, r1
 8017ad4:	4619      	movgt	r1, r3
 8017ad6:	ab01      	add	r3, sp, #4
 8017ad8:	f7ff ff9c 	bl	8017a14 <_ZN8touchgfx7muldivuEmmmRm>
 8017adc:	9b01      	ldr	r3, [sp, #4]
 8017ade:	4368      	muls	r0, r5
 8017ae0:	435c      	muls	r4, r3
 8017ae2:	6034      	str	r4, [r6, #0]
 8017ae4:	b002      	add	sp, #8
 8017ae6:	bd70      	pop	{r4, r5, r6, pc}

08017ae8 <_ZN8touchgfx6muldivElll>:
 8017ae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017aea:	4606      	mov	r6, r0
 8017aec:	ab01      	add	r3, sp, #4
 8017aee:	460d      	mov	r5, r1
 8017af0:	4614      	mov	r4, r2
 8017af2:	f7ff ffda 	bl	8017aaa <_ZN8touchgfx6muldivElllRl>
 8017af6:	2e00      	cmp	r6, #0
 8017af8:	db20      	blt.n	8017b3c <_ZN8touchgfx6muldivElll+0x54>
 8017afa:	bf14      	ite	ne
 8017afc:	2301      	movne	r3, #1
 8017afe:	2300      	moveq	r3, #0
 8017b00:	2d00      	cmp	r5, #0
 8017b02:	db1e      	blt.n	8017b42 <_ZN8touchgfx6muldivElll+0x5a>
 8017b04:	bf14      	ite	ne
 8017b06:	2201      	movne	r2, #1
 8017b08:	2200      	moveq	r2, #0
 8017b0a:	2c00      	cmp	r4, #0
 8017b0c:	fb03 f202 	mul.w	r2, r3, r2
 8017b10:	db1a      	blt.n	8017b48 <_ZN8touchgfx6muldivElll+0x60>
 8017b12:	bf14      	ite	ne
 8017b14:	2301      	movne	r3, #1
 8017b16:	2300      	moveq	r3, #0
 8017b18:	4353      	muls	r3, r2
 8017b1a:	2b01      	cmp	r3, #1
 8017b1c:	d117      	bne.n	8017b4e <_ZN8touchgfx6muldivElll+0x66>
 8017b1e:	2c00      	cmp	r4, #0
 8017b20:	9b01      	ldr	r3, [sp, #4]
 8017b22:	bfb8      	it	lt
 8017b24:	4264      	neglt	r4, r4
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	f104 0401 	add.w	r4, r4, #1
 8017b2c:	bfb8      	it	lt
 8017b2e:	425b      	neglt	r3, r3
 8017b30:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017b34:	db00      	blt.n	8017b38 <_ZN8touchgfx6muldivElll+0x50>
 8017b36:	3001      	adds	r0, #1
 8017b38:	b002      	add	sp, #8
 8017b3a:	bd70      	pop	{r4, r5, r6, pc}
 8017b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b40:	e7de      	b.n	8017b00 <_ZN8touchgfx6muldivElll+0x18>
 8017b42:	f04f 32ff 	mov.w	r2, #4294967295
 8017b46:	e7e0      	b.n	8017b0a <_ZN8touchgfx6muldivElll+0x22>
 8017b48:	f04f 33ff 	mov.w	r3, #4294967295
 8017b4c:	e7e4      	b.n	8017b18 <_ZN8touchgfx6muldivElll+0x30>
 8017b4e:	3301      	adds	r3, #1
 8017b50:	d1f2      	bne.n	8017b38 <_ZN8touchgfx6muldivElll+0x50>
 8017b52:	9b01      	ldr	r3, [sp, #4]
 8017b54:	2c00      	cmp	r4, #0
 8017b56:	bfb8      	it	lt
 8017b58:	4264      	neglt	r4, r4
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bfb8      	it	lt
 8017b5e:	425b      	neglt	r3, r3
 8017b60:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8017b64:	bfc8      	it	gt
 8017b66:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8017b6a:	e7e5      	b.n	8017b38 <_ZN8touchgfx6muldivElll+0x50>

08017b6c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	4770      	bx	lr

08017b70 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8017b70:	2001      	movs	r0, #1
 8017b72:	4770      	bx	lr

08017b74 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8017b74:	2002      	movs	r0, #2
 8017b76:	4770      	bx	lr

08017b78 <_ZN8touchgfx6ScreenD1Ev>:
 8017b78:	4770      	bx	lr

08017b7a <_ZN8touchgfx12GestureEventD1Ev>:
 8017b7a:	4770      	bx	lr

08017b7c <_ZN8touchgfx9DragEventD1Ev>:
 8017b7c:	4770      	bx	lr

08017b7e <_ZN8touchgfx10ClickEventD1Ev>:
 8017b7e:	4770      	bx	lr

08017b80 <_ZN8touchgfx10ClickEventD0Ev>:
 8017b80:	b510      	push	{r4, lr}
 8017b82:	4604      	mov	r4, r0
 8017b84:	210c      	movs	r1, #12
 8017b86:	f009 ffca 	bl	8021b1e <_ZdlPvj>
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	bd10      	pop	{r4, pc}

08017b8e <_ZN8touchgfx9DragEventD0Ev>:
 8017b8e:	b510      	push	{r4, lr}
 8017b90:	4604      	mov	r4, r0
 8017b92:	2110      	movs	r1, #16
 8017b94:	f009 ffc3 	bl	8021b1e <_ZdlPvj>
 8017b98:	4620      	mov	r0, r4
 8017b9a:	bd10      	pop	{r4, pc}

08017b9c <_ZN8touchgfx12GestureEventD0Ev>:
 8017b9c:	b510      	push	{r4, lr}
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	210c      	movs	r1, #12
 8017ba2:	f009 ffbc 	bl	8021b1e <_ZdlPvj>
 8017ba6:	4620      	mov	r0, r4
 8017ba8:	bd10      	pop	{r4, pc}

08017baa <_ZN8touchgfx6ScreenD0Ev>:
 8017baa:	b510      	push	{r4, lr}
 8017bac:	4604      	mov	r4, r0
 8017bae:	213c      	movs	r1, #60	; 0x3c
 8017bb0:	f009 ffb5 	bl	8021b1e <_ZdlPvj>
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	bd10      	pop	{r4, pc}

08017bb8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8017bb8:	b530      	push	{r4, r5, lr}
 8017bba:	460d      	mov	r5, r1
 8017bbc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017bbe:	b087      	sub	sp, #28
 8017bc0:	4604      	mov	r4, r0
 8017bc2:	b301      	cbz	r1, 8017c06 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8017bc4:	a801      	add	r0, sp, #4
 8017bc6:	f7ff fe63 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017bca:	892a      	ldrh	r2, [r5, #8]
 8017bcc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017bd0:	7928      	ldrb	r0, [r5, #4]
 8017bd2:	1ad2      	subs	r2, r2, r3
 8017bd4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8017bd6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8017bda:	441a      	add	r2, r3
 8017bdc:	896b      	ldrh	r3, [r5, #10]
 8017bde:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8017be2:	f88d 0010 	strb.w	r0, [sp, #16]
 8017be6:	1b5b      	subs	r3, r3, r5
 8017be8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8017bea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017bec:	442b      	add	r3, r5
 8017bee:	4d07      	ldr	r5, [pc, #28]	; (8017c0c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8017bf0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017bf4:	a903      	add	r1, sp, #12
 8017bf6:	9503      	str	r5, [sp, #12]
 8017bf8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017bfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017c00:	6803      	ldr	r3, [r0, #0]
 8017c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017c04:	4798      	blx	r3
 8017c06:	b007      	add	sp, #28
 8017c08:	bd30      	pop	{r4, r5, pc}
 8017c0a:	bf00      	nop
 8017c0c:	08024edc 	.word	0x08024edc

08017c10 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8017c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017c16:	b08a      	sub	sp, #40	; 0x28
 8017c18:	4604      	mov	r4, r0
 8017c1a:	460d      	mov	r5, r1
 8017c1c:	b113      	cbz	r3, 8017c24 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8017c1e:	790b      	ldrb	r3, [r1, #4]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d044      	beq.n	8017cae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017c24:	f104 0804 	add.w	r8, r4, #4
 8017c28:	a803      	add	r0, sp, #12
 8017c2a:	4641      	mov	r1, r8
 8017c2c:	f7ff fe30 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c30:	792b      	ldrb	r3, [r5, #4]
 8017c32:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8017c36:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8017c3a:	b983      	cbnz	r3, 8017c5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8017c3c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8017c40:	892a      	ldrh	r2, [r5, #8]
 8017c42:	88e9      	ldrh	r1, [r5, #6]
 8017c44:	4640      	mov	r0, r8
 8017c46:	1b92      	subs	r2, r2, r6
 8017c48:	9301      	str	r3, [sp, #4]
 8017c4a:	1bc9      	subs	r1, r1, r7
 8017c4c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8017c50:	b212      	sxth	r2, r2
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	b209      	sxth	r1, r1
 8017c56:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8017c5a:	f7f9 fa01 	bl	8011060 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8017c5e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017c60:	b329      	cbz	r1, 8017cae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017c62:	a805      	add	r0, sp, #20
 8017c64:	f7ff fe14 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017c68:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8017c6c:	792b      	ldrb	r3, [r5, #4]
 8017c6e:	a907      	add	r1, sp, #28
 8017c70:	1abf      	subs	r7, r7, r2
 8017c72:	88ea      	ldrh	r2, [r5, #6]
 8017c74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8017c76:	4417      	add	r7, r2
 8017c78:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8017c7a:	f88d 3020 	strb.w	r3, [sp, #32]
 8017c7e:	4417      	add	r7, r2
 8017c80:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8017c84:	1ab6      	subs	r6, r6, r2
 8017c86:	892a      	ldrh	r2, [r5, #8]
 8017c88:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8017c8c:	4416      	add	r6, r2
 8017c8e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8017c90:	4416      	add	r6, r2
 8017c92:	4a08      	ldr	r2, [pc, #32]	; (8017cb4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8017c94:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8017c98:	2600      	movs	r6, #0
 8017c9a:	9207      	str	r2, [sp, #28]
 8017c9c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8017ca0:	6803      	ldr	r3, [r0, #0]
 8017ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ca4:	4798      	blx	r3
 8017ca6:	792b      	ldrb	r3, [r5, #4]
 8017ca8:	b10b      	cbz	r3, 8017cae <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8017caa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8017cae:	b00a      	add	sp, #40	; 0x28
 8017cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cb4:	08024eb4 	.word	0x08024eb4

08017cb8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8017cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cbc:	460c      	mov	r4, r1
 8017cbe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8017cc0:	b088      	sub	sp, #32
 8017cc2:	4605      	mov	r5, r0
 8017cc4:	2900      	cmp	r1, #0
 8017cc6:	d06d      	beq.n	8017da4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8017cc8:	4668      	mov	r0, sp
 8017cca:	f7ff fde1 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cce:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8017cd0:	88e3      	ldrh	r3, [r4, #6]
 8017cd2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8017cd6:	440b      	add	r3, r1
 8017cd8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8017cdc:	b21b      	sxth	r3, r3
 8017cde:	4543      	cmp	r3, r8
 8017ce0:	db31      	blt.n	8017d46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017ce2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8017ce6:	44c4      	add	ip, r8
 8017ce8:	fa0f fc8c 	sxth.w	ip, ip
 8017cec:	4563      	cmp	r3, ip
 8017cee:	da2a      	bge.n	8017d46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017cf0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8017cf2:	8926      	ldrh	r6, [r4, #8]
 8017cf4:	4416      	add	r6, r2
 8017cf6:	b236      	sxth	r6, r6
 8017cf8:	42be      	cmp	r6, r7
 8017cfa:	db24      	blt.n	8017d46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017cfc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017d00:	4438      	add	r0, r7
 8017d02:	b200      	sxth	r0, r0
 8017d04:	4286      	cmp	r6, r0
 8017d06:	da1e      	bge.n	8017d46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d08:	8963      	ldrh	r3, [r4, #10]
 8017d0a:	4419      	add	r1, r3
 8017d0c:	b209      	sxth	r1, r1
 8017d0e:	4541      	cmp	r1, r8
 8017d10:	db08      	blt.n	8017d24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d12:	4561      	cmp	r1, ip
 8017d14:	da06      	bge.n	8017d24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d16:	89a3      	ldrh	r3, [r4, #12]
 8017d18:	441a      	add	r2, r3
 8017d1a:	b212      	sxth	r2, r2
 8017d1c:	42ba      	cmp	r2, r7
 8017d1e:	db01      	blt.n	8017d24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8017d20:	4282      	cmp	r2, r0
 8017d22:	db10      	blt.n	8017d46 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8017d24:	4b21      	ldr	r3, [pc, #132]	; (8017dac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8017d26:	a904      	add	r1, sp, #16
 8017d28:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017d2a:	9304      	str	r3, [sp, #16]
 8017d2c:	2302      	movs	r3, #2
 8017d2e:	f88d 3014 	strb.w	r3, [sp, #20]
 8017d32:	2300      	movs	r3, #0
 8017d34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017d38:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017d3c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017d40:	6803      	ldr	r3, [r0, #0]
 8017d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d44:	4798      	blx	r3
 8017d46:	1d29      	adds	r1, r5, #4
 8017d48:	a802      	add	r0, sp, #8
 8017d4a:	f7ff fda1 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017d52:	88e0      	ldrh	r0, [r4, #6]
 8017d54:	eba3 0808 	sub.w	r8, r3, r8
 8017d58:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017d5c:	7921      	ldrb	r1, [r4, #4]
 8017d5e:	fa1f f888 	uxth.w	r8, r8
 8017d62:	1bdf      	subs	r7, r3, r7
 8017d64:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8017d68:	b2bb      	uxth	r3, r7
 8017d6a:	4440      	add	r0, r8
 8017d6c:	8922      	ldrh	r2, [r4, #8]
 8017d6e:	8967      	ldrh	r7, [r4, #10]
 8017d70:	4460      	add	r0, ip
 8017d72:	89a4      	ldrh	r4, [r4, #12]
 8017d74:	441a      	add	r2, r3
 8017d76:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8017d78:	44b8      	add	r8, r7
 8017d7a:	4423      	add	r3, r4
 8017d7c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017d80:	4432      	add	r2, r6
 8017d82:	44e0      	add	r8, ip
 8017d84:	4433      	add	r3, r6
 8017d86:	4c0a      	ldr	r4, [pc, #40]	; (8017db0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8017d88:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017d8a:	f88d 1014 	strb.w	r1, [sp, #20]
 8017d8e:	a904      	add	r1, sp, #16
 8017d90:	9404      	str	r4, [sp, #16]
 8017d92:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017d96:	f8ad 801a 	strh.w	r8, [sp, #26]
 8017d9a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017d9e:	6803      	ldr	r3, [r0, #0]
 8017da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017da2:	4798      	blx	r3
 8017da4:	b008      	add	sp, #32
 8017da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017daa:	bf00      	nop
 8017dac:	08024eb4 	.word	0x08024eb4
 8017db0:	08024ec8 	.word	0x08024ec8

08017db4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8017db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017db6:	4604      	mov	r4, r0
 8017db8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8017dbc:	3201      	adds	r2, #1
 8017dbe:	d112      	bne.n	8017de6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8017dc0:	2500      	movs	r5, #0
 8017dc2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017dc6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017dca:	6803      	ldr	r3, [r0, #0]
 8017dcc:	9500      	str	r5, [sp, #0]
 8017dce:	466d      	mov	r5, sp
 8017dd0:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017dd4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017dd8:	4629      	mov	r1, r5
 8017dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ddc:	4798      	blx	r3
 8017dde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017de2:	e884 0003 	stmia.w	r4, {r0, r1}
 8017de6:	4620      	mov	r0, r4
 8017de8:	b003      	add	sp, #12
 8017dea:	bd30      	pop	{r4, r5, pc}

08017dec <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8017dec:	b513      	push	{r0, r1, r4, lr}
 8017dee:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8017df2:	4604      	mov	r4, r0
 8017df4:	3301      	adds	r3, #1
 8017df6:	d109      	bne.n	8017e0c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8017df8:	4601      	mov	r1, r0
 8017dfa:	4668      	mov	r0, sp
 8017dfc:	f7ff fd48 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e04:	8423      	strh	r3, [r4, #32]
 8017e06:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017e0a:	8463      	strh	r3, [r4, #34]	; 0x22
 8017e0c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8017e10:	b002      	add	sp, #8
 8017e12:	bd10      	pop	{r4, pc}

08017e14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8017e14:	b513      	push	{r0, r1, r4, lr}
 8017e16:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	d109      	bne.n	8017e34 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8017e20:	4601      	mov	r1, r0
 8017e22:	4668      	mov	r0, sp
 8017e24:	f7ff fd34 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e28:	f8bd 3000 	ldrh.w	r3, [sp]
 8017e2c:	8423      	strh	r3, [r4, #32]
 8017e2e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017e32:	8463      	strh	r3, [r4, #34]	; 0x22
 8017e34:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8017e38:	b002      	add	sp, #8
 8017e3a:	bd10      	pop	{r4, pc}

08017e3c <_ZN8touchgfx6ScreenC1Ev>:
 8017e3c:	b570      	push	{r4, r5, r6, lr}
 8017e3e:	4b17      	ldr	r3, [pc, #92]	; (8017e9c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8017e40:	4605      	mov	r5, r0
 8017e42:	4a17      	ldr	r2, [pc, #92]	; (8017ea0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8017e44:	2101      	movs	r1, #1
 8017e46:	f845 3b04 	str.w	r3, [r5], #4
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	6042      	str	r2, [r0, #4]
 8017e4e:	4604      	mov	r4, r0
 8017e50:	8103      	strh	r3, [r0, #8]
 8017e52:	8143      	strh	r3, [r0, #10]
 8017e54:	8183      	strh	r3, [r0, #12]
 8017e56:	81c3      	strh	r3, [r0, #14]
 8017e58:	8203      	strh	r3, [r0, #16]
 8017e5a:	8243      	strh	r3, [r0, #18]
 8017e5c:	8283      	strh	r3, [r0, #20]
 8017e5e:	82c3      	strh	r3, [r0, #22]
 8017e60:	6203      	str	r3, [r0, #32]
 8017e62:	8483      	strh	r3, [r0, #36]	; 0x24
 8017e64:	84c3      	strh	r3, [r0, #38]	; 0x26
 8017e66:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8017e6a:	6343      	str	r3, [r0, #52]	; 0x34
 8017e6c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8017e70:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8017e74:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8017e78:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8017e7c:	4b09      	ldr	r3, [pc, #36]	; (8017ea4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017e84:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8017e86:	4a08      	ldr	r2, [pc, #32]	; (8017ea8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8017e88:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017e8c:	4798      	blx	r3
 8017e8e:	6863      	ldr	r3, [r4, #4]
 8017e90:	4628      	mov	r0, r5
 8017e92:	4631      	mov	r1, r6
 8017e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e96:	4798      	blx	r3
 8017e98:	4620      	mov	r0, r4
 8017e9a:	bd70      	pop	{r4, r5, r6, pc}
 8017e9c:	08024ef0 	.word	0x08024ef0
 8017ea0:	08024778 	.word	0x08024778
 8017ea4:	2400ea2a 	.word	0x2400ea2a
 8017ea8:	2400ea28 	.word	0x2400ea28

08017eac <_ZN8touchgfx6Screen4drawEv>:
 8017eac:	4b09      	ldr	r3, [pc, #36]	; (8017ed4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8017eae:	b507      	push	{r0, r1, r2, lr}
 8017eb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	4b08      	ldr	r3, [pc, #32]	; (8017ed8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8017eb8:	9100      	str	r1, [sp, #0]
 8017eba:	4669      	mov	r1, sp
 8017ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ec0:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017ec4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ec8:	6803      	ldr	r3, [r0, #0]
 8017eca:	689b      	ldr	r3, [r3, #8]
 8017ecc:	4798      	blx	r3
 8017ece:	b003      	add	sp, #12
 8017ed0:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ed4:	2400ea28 	.word	0x2400ea28
 8017ed8:	2400ea2a 	.word	0x2400ea2a

08017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8017edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017ee4:	b089      	sub	sp, #36	; 0x24
 8017ee6:	4680      	mov	r8, r0
 8017ee8:	460c      	mov	r4, r1
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	4615      	mov	r5, r2
 8017eee:	dd0e      	ble.n	8017f0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017ef0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	dd0a      	ble.n	8017f0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f7ff ff5b 	bl	8017db4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017efe:	4621      	mov	r1, r4
 8017f00:	f7fe fb4d 	bl	801659e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017f04:	69eb      	ldr	r3, [r5, #28]
 8017f06:	b928      	cbnz	r0, 8017f14 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8017f08:	461d      	mov	r5, r3
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d1f4      	bne.n	8017ef8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8017f0e:	b009      	add	sp, #36	; 0x24
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f14:	ae04      	add	r6, sp, #16
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	f000 80b5 	beq.w	8018086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017f1c:	682b      	ldr	r3, [r5, #0]
 8017f1e:	4629      	mov	r1, r5
 8017f20:	a802      	add	r0, sp, #8
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	4798      	blx	r3
 8017f26:	4628      	mov	r0, r5
 8017f28:	f7ff ff60 	bl	8017dec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8017f2c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8017f30:	4407      	add	r7, r0
 8017f32:	4628      	mov	r0, r5
 8017f34:	f7ff ff6e 	bl	8017e14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8017f38:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017f3c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017f40:	b23f      	sxth	r7, r7
 8017f42:	4418      	add	r0, r3
 8017f44:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017f48:	4621      	mov	r1, r4
 8017f4a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017f4e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8017f52:	4630      	mov	r0, r6
 8017f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017f58:	f8ad 7010 	strh.w	r7, [sp, #16]
 8017f5c:	f7f9 f962 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8017f60:	4628      	mov	r0, r5
 8017f62:	f7ff ff27 	bl	8017db4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8017f66:	ab06      	add	r3, sp, #24
 8017f68:	4602      	mov	r2, r0
 8017f6a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8017f6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f72:	4611      	mov	r1, r2
 8017f74:	4618      	mov	r0, r3
 8017f76:	f7f9 f955 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8017f7a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017f7e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017f82:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8017f86:	4299      	cmp	r1, r3
 8017f88:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8017f8c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8017f90:	d10b      	bne.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017f92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017f96:	4552      	cmp	r2, sl
 8017f98:	d107      	bne.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017f9a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8017f9e:	455a      	cmp	r2, fp
 8017fa0:	d103      	bne.n	8017faa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8017fa2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017fa6:	454a      	cmp	r2, r9
 8017fa8:	d06d      	beq.n	8018086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8017faa:	f1bb 0f00 	cmp.w	fp, #0
 8017fae:	dd65      	ble.n	801807c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017fb0:	f1b9 0f00 	cmp.w	r9, #0
 8017fb4:	dd62      	ble.n	801807c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8017fb6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8017fba:	fa1f f08a 	uxth.w	r0, sl
 8017fbe:	4552      	cmp	r2, sl
 8017fc0:	9000      	str	r0, [sp, #0]
 8017fc2:	da12      	bge.n	8017fea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8017fc4:	9301      	str	r3, [sp, #4]
 8017fc6:	9b00      	ldr	r3, [sp, #0]
 8017fc8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8017fcc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8017fd0:	1a9a      	subs	r2, r3, r2
 8017fd2:	f8ad 1010 	strh.w	r1, [sp, #16]
 8017fd6:	4631      	mov	r1, r6
 8017fd8:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017fdc:	4640      	mov	r0, r8
 8017fde:	f8ad 2016 	strh.w	r2, [sp, #22]
 8017fe2:	69ea      	ldr	r2, [r5, #28]
 8017fe4:	f7ff ff7a 	bl	8017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8017fe8:	9b01      	ldr	r3, [sp, #4]
 8017fea:	f9b4 2000 	ldrsh.w	r2, [r4]
 8017fee:	b29f      	uxth	r7, r3
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	da0d      	bge.n	8018010 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8017ff4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8017ff8:	1aba      	subs	r2, r7, r2
 8017ffa:	f8ad a012 	strh.w	sl, [sp, #18]
 8017ffe:	4631      	mov	r1, r6
 8018000:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018004:	4640      	mov	r0, r8
 8018006:	f8ad 9016 	strh.w	r9, [sp, #22]
 801800a:	69ea      	ldr	r2, [r5, #28]
 801800c:	f7ff ff66 	bl	8017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018010:	8822      	ldrh	r2, [r4, #0]
 8018012:	445f      	add	r7, fp
 8018014:	88a3      	ldrh	r3, [r4, #4]
 8018016:	b2bf      	uxth	r7, r7
 8018018:	4413      	add	r3, r2
 801801a:	b23a      	sxth	r2, r7
 801801c:	b29b      	uxth	r3, r3
 801801e:	b219      	sxth	r1, r3
 8018020:	4291      	cmp	r1, r2
 8018022:	dd0d      	ble.n	8018040 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018024:	1bdb      	subs	r3, r3, r7
 8018026:	f8ad 2010 	strh.w	r2, [sp, #16]
 801802a:	f8ad a012 	strh.w	sl, [sp, #18]
 801802e:	4631      	mov	r1, r6
 8018030:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018034:	4640      	mov	r0, r8
 8018036:	f8ad 9016 	strh.w	r9, [sp, #22]
 801803a:	69ea      	ldr	r2, [r5, #28]
 801803c:	f7ff ff4e 	bl	8017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018040:	88e2      	ldrh	r2, [r4, #6]
 8018042:	8863      	ldrh	r3, [r4, #2]
 8018044:	4413      	add	r3, r2
 8018046:	9a00      	ldr	r2, [sp, #0]
 8018048:	444a      	add	r2, r9
 801804a:	b29b      	uxth	r3, r3
 801804c:	fa1f f982 	uxth.w	r9, r2
 8018050:	b219      	sxth	r1, r3
 8018052:	fa0f f289 	sxth.w	r2, r9
 8018056:	428a      	cmp	r2, r1
 8018058:	da15      	bge.n	8018086 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801805a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801805e:	eba3 0309 	sub.w	r3, r3, r9
 8018062:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018066:	f8ad 1014 	strh.w	r1, [sp, #20]
 801806a:	4631      	mov	r1, r6
 801806c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018070:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018078:	69ea      	ldr	r2, [r5, #28]
 801807a:	e001      	b.n	8018080 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801807c:	69ea      	ldr	r2, [r5, #28]
 801807e:	4621      	mov	r1, r4
 8018080:	4640      	mov	r0, r8
 8018082:	f7ff ff2b 	bl	8017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018086:	4628      	mov	r0, r5
 8018088:	f7ff fe94 	bl	8017db4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801808c:	6861      	ldr	r1, [r4, #4]
 801808e:	4602      	mov	r2, r0
 8018090:	4633      	mov	r3, r6
 8018092:	6820      	ldr	r0, [r4, #0]
 8018094:	c303      	stmia	r3!, {r0, r1}
 8018096:	4611      	mov	r1, r2
 8018098:	4630      	mov	r0, r6
 801809a:	f7f9 f8c3 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801809e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f77f af33 	ble.w	8017f0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80180a8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	f77f af2e 	ble.w	8017f0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80180b2:	4628      	mov	r0, r5
 80180b4:	f7ff fe9a 	bl	8017dec <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80180b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80180bc:	1a18      	subs	r0, r3, r0
 80180be:	f8ad 0010 	strh.w	r0, [sp, #16]
 80180c2:	4628      	mov	r0, r5
 80180c4:	f7ff fea6 	bl	8017e14 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80180c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80180cc:	4631      	mov	r1, r6
 80180ce:	1a18      	subs	r0, r3, r0
 80180d0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80180d4:	4628      	mov	r0, r5
 80180d6:	682b      	ldr	r3, [r5, #0]
 80180d8:	689b      	ldr	r3, [r3, #8]
 80180da:	4798      	blx	r3
 80180dc:	e717      	b.n	8017f0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080180de <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80180de:	b570      	push	{r4, r5, r6, lr}
 80180e0:	1d06      	adds	r6, r0, #4
 80180e2:	b086      	sub	sp, #24
 80180e4:	460c      	mov	r4, r1
 80180e6:	2300      	movs	r3, #0
 80180e8:	4631      	mov	r1, r6
 80180ea:	4605      	mov	r5, r0
 80180ec:	a802      	add	r0, sp, #8
 80180ee:	9301      	str	r3, [sp, #4]
 80180f0:	f7ff fbce 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80180f8:	8822      	ldrh	r2, [r4, #0]
 80180fa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80180fe:	1ad2      	subs	r2, r2, r3
 8018100:	8863      	ldrh	r3, [r4, #2]
 8018102:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018106:	1a5b      	subs	r3, r3, r1
 8018108:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801810c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018110:	aa01      	add	r2, sp, #4
 8018112:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018116:	4630      	mov	r0, r6
 8018118:	f8ad 1016 	strh.w	r1, [sp, #22]
 801811c:	a904      	add	r1, sp, #16
 801811e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018122:	f7f9 f957 	bl	80113d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018126:	9a01      	ldr	r2, [sp, #4]
 8018128:	b11a      	cbz	r2, 8018132 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801812a:	4621      	mov	r1, r4
 801812c:	4628      	mov	r0, r5
 801812e:	f7ff fed5 	bl	8017edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018132:	b006      	add	sp, #24
 8018134:	bd70      	pop	{r4, r5, r6, pc}

08018136 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018136:	4602      	mov	r2, r0
 8018138:	b530      	push	{r4, r5, lr}
 801813a:	4604      	mov	r4, r0
 801813c:	b085      	sub	sp, #20
 801813e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018142:	460d      	mov	r5, r1
 8018144:	466b      	mov	r3, sp
 8018146:	6851      	ldr	r1, [r2, #4]
 8018148:	c303      	stmia	r3!, {r0, r1}
 801814a:	4629      	mov	r1, r5
 801814c:	4668      	mov	r0, sp
 801814e:	f7f9 f869 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 8018152:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018156:	b12b      	cbz	r3, 8018164 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018158:	4669      	mov	r1, sp
 801815a:	4620      	mov	r0, r4
 801815c:	f7ff ffbf 	bl	80180de <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018160:	b005      	add	sp, #20
 8018162:	bd30      	pop	{r4, r5, pc}
 8018164:	3404      	adds	r4, #4
 8018166:	a802      	add	r0, sp, #8
 8018168:	4621      	mov	r1, r4
 801816a:	f7ff fb91 	bl	8017890 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801816e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018172:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018176:	4669      	mov	r1, sp
 8018178:	4620      	mov	r0, r4
 801817a:	1a9b      	subs	r3, r3, r2
 801817c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018180:	f8ad 3000 	strh.w	r3, [sp]
 8018184:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018188:	1a9b      	subs	r3, r3, r2
 801818a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801818e:	f7f9 f8e8 	bl	8011362 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018192:	e7e5      	b.n	8018160 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018194 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018194:	460b      	mov	r3, r1
 8018196:	680a      	ldr	r2, [r1, #0]
 8018198:	1d01      	adds	r1, r0, #4
 801819a:	6992      	ldr	r2, [r2, #24]
 801819c:	4618      	mov	r0, r3
 801819e:	4710      	bx	r2

080181a0 <_ZN8touchgfx12TextProviderC1Ev>:
 80181a0:	b538      	push	{r3, r4, r5, lr}
 80181a2:	2500      	movs	r5, #0
 80181a4:	2302      	movs	r3, #2
 80181a6:	4604      	mov	r4, r0
 80181a8:	220e      	movs	r2, #14
 80181aa:	7403      	strb	r3, [r0, #16]
 80181ac:	4629      	mov	r1, r5
 80181ae:	6145      	str	r5, [r0, #20]
 80181b0:	7605      	strb	r5, [r0, #24]
 80181b2:	83c5      	strh	r5, [r0, #30]
 80181b4:	8405      	strh	r5, [r0, #32]
 80181b6:	86c5      	strh	r5, [r0, #54]	; 0x36
 80181b8:	8705      	strh	r5, [r0, #56]	; 0x38
 80181ba:	87c5      	strh	r5, [r0, #62]	; 0x3e
 80181bc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 80181c0:	e9c0 5500 	strd	r5, r5, [r0]
 80181c4:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 80181c8:	304c      	adds	r0, #76	; 0x4c
 80181ca:	f009 fe41 	bl	8021e50 <memset>
 80181ce:	2301      	movs	r3, #1
 80181d0:	4620      	mov	r0, r4
 80181d2:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 80181d6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80181da:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80181de:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80181e2:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80181e6:	f7ee fa83 	bl	80066f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80181ea:	4620      	mov	r0, r4
 80181ec:	bd38      	pop	{r3, r4, r5, pc}

080181ee <_ZN8touchgfx12TextProvider11endOfStringEv>:
 80181ee:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80181f0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80181f4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80181f6:	fab0 f080 	clz	r0, r0
 80181fa:	0940      	lsrs	r0, r0, #5
 80181fc:	4770      	bx	lr

080181fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80181fe:	b530      	push	{r4, r5, lr}
 8018200:	2500      	movs	r5, #0
 8018202:	2401      	movs	r4, #1
 8018204:	6843      	ldr	r3, [r0, #4]
 8018206:	b913      	cbnz	r3, 801820e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018208:	6803      	ldr	r3, [r0, #0]
 801820a:	b313      	cbz	r3, 8018252 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801820c:	6043      	str	r3, [r0, #4]
 801820e:	7e03      	ldrb	r3, [r0, #24]
 8018210:	b143      	cbz	r3, 8018224 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018212:	6943      	ldr	r3, [r0, #20]
 8018214:	b12b      	cbz	r3, 8018222 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018216:	881a      	ldrh	r2, [r3, #0]
 8018218:	b11a      	cbz	r2, 8018222 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801821a:	1c9a      	adds	r2, r3, #2
 801821c:	6142      	str	r2, [r0, #20]
 801821e:	8818      	ldrh	r0, [r3, #0]
 8018220:	bd30      	pop	{r4, r5, pc}
 8018222:	7605      	strb	r5, [r0, #24]
 8018224:	6843      	ldr	r3, [r0, #4]
 8018226:	8819      	ldrh	r1, [r3, #0]
 8018228:	b199      	cbz	r1, 8018252 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801822a:	1c9a      	adds	r2, r3, #2
 801822c:	2902      	cmp	r1, #2
 801822e:	6042      	str	r2, [r0, #4]
 8018230:	d1f5      	bne.n	801821e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018232:	7c03      	ldrb	r3, [r0, #16]
 8018234:	2b01      	cmp	r3, #1
 8018236:	d8e5      	bhi.n	8018204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018238:	1c5a      	adds	r2, r3, #1
 801823a:	3302      	adds	r3, #2
 801823c:	7402      	strb	r2, [r0, #16]
 801823e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018242:	6143      	str	r3, [r0, #20]
 8018244:	2b00      	cmp	r3, #0
 8018246:	d0dd      	beq.n	8018204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018248:	881b      	ldrh	r3, [r3, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d0da      	beq.n	8018204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801824e:	7604      	strb	r4, [r0, #24]
 8018250:	e7d8      	b.n	8018204 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018252:	2000      	movs	r0, #0
 8018254:	e7e4      	b.n	8018220 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018256:	6001      	str	r1, [r0, #0]
 8018258:	2100      	movs	r1, #0
 801825a:	b430      	push	{r4, r5}
 801825c:	6041      	str	r1, [r0, #4]
 801825e:	6815      	ldr	r5, [r2, #0]
 8018260:	6085      	str	r5, [r0, #8]
 8018262:	6852      	ldr	r2, [r2, #4]
 8018264:	6443      	str	r3, [r0, #68]	; 0x44
 8018266:	9b02      	ldr	r3, [sp, #8]
 8018268:	60c2      	str	r2, [r0, #12]
 801826a:	7401      	strb	r1, [r0, #16]
 801826c:	6141      	str	r1, [r0, #20]
 801826e:	7601      	strb	r1, [r0, #24]
 8018270:	8701      	strh	r1, [r0, #56]	; 0x38
 8018272:	8401      	strh	r1, [r0, #32]
 8018274:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8018278:	6483      	str	r3, [r0, #72]	; 0x48
 801827a:	bc30      	pop	{r4, r5}
 801827c:	f7ee ba38 	b.w	80066f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018280 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018280:	b408      	push	{r3}
 8018282:	b510      	push	{r4, lr}
 8018284:	b085      	sub	sp, #20
 8018286:	ac07      	add	r4, sp, #28
 8018288:	f854 3b04 	ldr.w	r3, [r4], #4
 801828c:	9300      	str	r3, [sp, #0]
 801828e:	4613      	mov	r3, r2
 8018290:	4622      	mov	r2, r4
 8018292:	9403      	str	r4, [sp, #12]
 8018294:	f7ff ffdf 	bl	8018256 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018298:	b005      	add	sp, #20
 801829a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801829e:	b001      	add	sp, #4
 80182a0:	4770      	bx	lr

080182a2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80182a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182a4:	4605      	mov	r5, r0
 80182a6:	4608      	mov	r0, r1
 80182a8:	b1f1      	cbz	r1, 80182e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80182aa:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80182ae:	460b      	mov	r3, r1
 80182b0:	f101 0708 	add.w	r7, r1, #8
 80182b4:	4622      	mov	r2, r4
 80182b6:	6818      	ldr	r0, [r3, #0]
 80182b8:	3308      	adds	r3, #8
 80182ba:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80182be:	4626      	mov	r6, r4
 80182c0:	42bb      	cmp	r3, r7
 80182c2:	c603      	stmia	r6!, {r0, r1}
 80182c4:	4634      	mov	r4, r6
 80182c6:	d1f6      	bne.n	80182b6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80182c8:	6818      	ldr	r0, [r3, #0]
 80182ca:	6030      	str	r0, [r6, #0]
 80182cc:	4610      	mov	r0, r2
 80182ce:	889b      	ldrh	r3, [r3, #4]
 80182d0:	80b3      	strh	r3, [r6, #4]
 80182d2:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 80182d6:	015b      	lsls	r3, r3, #5
 80182d8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80182dc:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 80182e0:	430b      	orrs	r3, r1
 80182e2:	425b      	negs	r3, r3
 80182e4:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 80182e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080182ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80182ea:	b538      	push	{r3, r4, r5, lr}
 80182ec:	460c      	mov	r4, r1
 80182ee:	6811      	ldr	r1, [r2, #0]
 80182f0:	4610      	mov	r0, r2
 80182f2:	68cd      	ldr	r5, [r1, #12]
 80182f4:	4619      	mov	r1, r3
 80182f6:	47a8      	blx	r5
 80182f8:	2800      	cmp	r0, #0
 80182fa:	bf08      	it	eq
 80182fc:	4620      	moveq	r0, r4
 80182fe:	bd38      	pop	{r3, r4, r5, pc}

08018300 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018302:	4604      	mov	r4, r0
 8018304:	4615      	mov	r5, r2
 8018306:	4608      	mov	r0, r1
 8018308:	b93a      	cbnz	r2, 801831a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801830a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801830e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8018312:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8018316:	4628      	mov	r0, r5
 8018318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801831a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801831e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8018322:	8893      	ldrh	r3, [r2, #4]
 8018324:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8018328:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801832c:	79ee      	ldrb	r6, [r5, #7]
 801832e:	4316      	orrs	r6, r2
 8018330:	19da      	adds	r2, r3, r7
 8018332:	b291      	uxth	r1, r2
 8018334:	b2b7      	uxth	r7, r6
 8018336:	291d      	cmp	r1, #29
 8018338:	d87b      	bhi.n	8018432 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801833a:	2201      	movs	r2, #1
 801833c:	10f6      	asrs	r6, r6, #3
 801833e:	408a      	lsls	r2, r1
 8018340:	4974      	ldr	r1, [pc, #464]	; (8018514 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8018342:	420a      	tst	r2, r1
 8018344:	d12e      	bne.n	80183a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018346:	f412 7f60 	tst.w	r2, #896	; 0x380
 801834a:	d072      	beq.n	8018432 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801834c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8018350:	462b      	mov	r3, r5
 8018352:	f105 0e08 	add.w	lr, r5, #8
 8018356:	4615      	mov	r5, r2
 8018358:	6818      	ldr	r0, [r3, #0]
 801835a:	3308      	adds	r3, #8
 801835c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018360:	4694      	mov	ip, r2
 8018362:	4573      	cmp	r3, lr
 8018364:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018368:	4662      	mov	r2, ip
 801836a:	d1f5      	bne.n	8018358 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801836c:	6818      	ldr	r0, [r3, #0]
 801836e:	f8cc 0000 	str.w	r0, [ip]
 8018372:	889b      	ldrh	r3, [r3, #4]
 8018374:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018378:	b2b3      	uxth	r3, r6
 801837a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801837e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8018382:	1aca      	subs	r2, r1, r3
 8018384:	1bcf      	subs	r7, r1, r7
 8018386:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801838a:	b292      	uxth	r2, r2
 801838c:	1afb      	subs	r3, r7, r3
 801838e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8018392:	10d2      	asrs	r2, r2, #3
 8018394:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8018398:	4302      	orrs	r2, r0
 801839a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801839e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80183a2:	e7b8      	b.n	8018316 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80183a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80183a6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80183aa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80183ac:	f640 6333 	movw	r3, #3635	; 0xe33
 80183b0:	4299      	cmp	r1, r3
 80183b2:	d110      	bne.n	80183d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 80183b4:	6803      	ldr	r3, [r0, #0]
 80183b6:	68db      	ldr	r3, [r3, #12]
 80183b8:	4798      	blx	r3
 80183ba:	7b41      	ldrb	r1, [r0, #13]
 80183bc:	00cb      	lsls	r3, r1, #3
 80183be:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80183c2:	7a03      	ldrb	r3, [r0, #8]
 80183c4:	0648      	lsls	r0, r1, #25
 80183c6:	ea43 0302 	orr.w	r3, r3, r2
 80183ca:	bf44      	itt	mi
 80183cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80183d0:	b21b      	sxthmi	r3, r3
 80183d2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80183d6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80183da:	462a      	mov	r2, r5
 80183dc:	f105 0c08 	add.w	ip, r5, #8
 80183e0:	443b      	add	r3, r7
 80183e2:	4433      	add	r3, r6
 80183e4:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 80183e8:	b29b      	uxth	r3, r3
 80183ea:	4635      	mov	r5, r6
 80183ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80183f0:	6810      	ldr	r0, [r2, #0]
 80183f2:	3208      	adds	r2, #8
 80183f4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80183f8:	4637      	mov	r7, r6
 80183fa:	4562      	cmp	r2, ip
 80183fc:	c703      	stmia	r7!, {r0, r1}
 80183fe:	463e      	mov	r6, r7
 8018400:	d1f6      	bne.n	80183f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8018402:	6810      	ldr	r0, [r2, #0]
 8018404:	6038      	str	r0, [r7, #0]
 8018406:	8892      	ldrh	r2, [r2, #4]
 8018408:	80ba      	strh	r2, [r7, #4]
 801840a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801840e:	10db      	asrs	r3, r3, #3
 8018410:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018418:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801841c:	4313      	orrs	r3, r2
 801841e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8018422:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8018426:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801842a:	1a9b      	subs	r3, r3, r2
 801842c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8018430:	e771      	b.n	8018316 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8018432:	f023 0204 	bic.w	r2, r3, #4
 8018436:	f640 611b 	movw	r1, #3611	; 0xe1b
 801843a:	428a      	cmp	r2, r1
 801843c:	d003      	beq.n	8018446 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801843e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8018442:	4293      	cmp	r3, r2
 8018444:	d120      	bne.n	8018488 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8018446:	3b01      	subs	r3, #1
 8018448:	4602      	mov	r2, r0
 801844a:	4629      	mov	r1, r5
 801844c:	4620      	mov	r0, r4
 801844e:	b29b      	uxth	r3, r3
 8018450:	f7ff ff4b 	bl	80182ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018454:	7b41      	ldrb	r1, [r0, #13]
 8018456:	00cb      	lsls	r3, r1, #3
 8018458:	0649      	lsls	r1, r1, #25
 801845a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801845e:	7a03      	ldrb	r3, [r0, #8]
 8018460:	ea43 0302 	orr.w	r3, r3, r2
 8018464:	bf44      	itt	mi
 8018466:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801846a:	b21b      	sxthmi	r3, r3
 801846c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8018470:	7b6b      	ldrb	r3, [r5, #13]
 8018472:	7aaa      	ldrb	r2, [r5, #10]
 8018474:	005b      	lsls	r3, r3, #1
 8018476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801847a:	4313      	orrs	r3, r2
 801847c:	115a      	asrs	r2, r3, #5
 801847e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018482:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018486:	e035      	b.n	80184f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8018488:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801848c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8018490:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8018494:	7a2a      	ldrb	r2, [r5, #8]
 8018496:	ea42 0201 	orr.w	r2, r2, r1
 801849a:	f640 6109 	movw	r1, #3593	; 0xe09
 801849e:	bf1c      	itt	ne
 80184a0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80184a4:	b212      	sxthne	r2, r2
 80184a6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80184aa:	f023 0210 	bic.w	r2, r3, #16
 80184ae:	428a      	cmp	r2, r1
 80184b0:	d003      	beq.n	80184ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80184b2:	f640 6213 	movw	r2, #3603	; 0xe13
 80184b6:	4293      	cmp	r3, r2
 80184b8:	d129      	bne.n	801850e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80184ba:	7b6e      	ldrb	r6, [r5, #13]
 80184bc:	4629      	mov	r1, r5
 80184be:	0076      	lsls	r6, r6, #1
 80184c0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80184c4:	7aae      	ldrb	r6, [r5, #10]
 80184c6:	4316      	orrs	r6, r2
 80184c8:	f640 6213 	movw	r2, #3603	; 0xe13
 80184cc:	4293      	cmp	r3, r2
 80184ce:	4602      	mov	r2, r0
 80184d0:	4620      	mov	r0, r4
 80184d2:	bf16      	itet	ne
 80184d4:	f103 33ff 	addne.w	r3, r3, #4294967295
 80184d8:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80184dc:	b29b      	uxthne	r3, r3
 80184de:	f7ff ff04 	bl	80182ea <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80184e2:	7b43      	ldrb	r3, [r0, #13]
 80184e4:	7a82      	ldrb	r2, [r0, #10]
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80184ec:	4313      	orrs	r3, r2
 80184ee:	1af6      	subs	r6, r6, r3
 80184f0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80184f4:	7b69      	ldrb	r1, [r5, #13]
 80184f6:	00cb      	lsls	r3, r1, #3
 80184f8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80184fc:	7a2b      	ldrb	r3, [r5, #8]
 80184fe:	4313      	orrs	r3, r2
 8018500:	064a      	lsls	r2, r1, #25
 8018502:	bf44      	itt	mi
 8018504:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018508:	b21b      	sxthmi	r3, r3
 801850a:	1bdb      	subs	r3, r3, r7
 801850c:	e747      	b.n	801839e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801850e:	2300      	movs	r3, #0
 8018510:	e7b7      	b.n	8018482 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8018512:	bf00      	nop
 8018514:	3fc00079 	.word	0x3fc00079

08018518 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801851c:	4604      	mov	r4, r0
 801851e:	b942      	cbnz	r2, 8018532 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8018520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018524:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8018528:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801852c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8018530:	e047      	b.n	80185c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8018532:	7b51      	ldrb	r1, [r2, #13]
 8018534:	8893      	ldrh	r3, [r2, #4]
 8018536:	010d      	lsls	r5, r1, #4
 8018538:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801853c:	79d5      	ldrb	r5, [r2, #7]
 801853e:	4305      	orrs	r5, r0
 8018540:	2d04      	cmp	r5, #4
 8018542:	bfcc      	ite	gt
 8018544:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8018548:	f04f 0e01 	movle.w	lr, #1
 801854c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8018550:	f200 80ab 	bhi.w	80186aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8018554:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8018558:	4283      	cmp	r3, r0
 801855a:	d216      	bcs.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801855c:	f240 605b 	movw	r0, #1627	; 0x65b
 8018560:	4283      	cmp	r3, r0
 8018562:	d859      	bhi.n	8018618 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8018564:	f240 6057 	movw	r0, #1623	; 0x657
 8018568:	4283      	cmp	r3, r0
 801856a:	d20e      	bcs.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801856c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018570:	d24a      	bcs.n	8018608 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8018572:	f240 604e 	movw	r0, #1614	; 0x64e
 8018576:	4283      	cmp	r3, r0
 8018578:	d207      	bcs.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801857a:	f240 601a 	movw	r0, #1562	; 0x61a
 801857e:	4283      	cmp	r3, r0
 8018580:	d02a      	beq.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018582:	d821      	bhi.n	80185c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8018584:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8018588:	d35b      	bcc.n	8018642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801858a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801858e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018592:	f040 80d0 	bne.w	8018736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8018596:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801859a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801859e:	f040 80ca 	bne.w	8018736 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80185a2:	00cb      	lsls	r3, r1, #3
 80185a4:	0649      	lsls	r1, r1, #25
 80185a6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80185aa:	7a13      	ldrb	r3, [r2, #8]
 80185ac:	ea43 0300 	orr.w	r3, r3, r0
 80185b0:	bf44      	itt	mi
 80185b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80185b6:	b21b      	sxthmi	r3, r3
 80185b8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80185bc:	1b5d      	subs	r5, r3, r5
 80185be:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80185c2:	4610      	mov	r0, r2
 80185c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185c8:	f240 604b 	movw	r0, #1611	; 0x64b
 80185cc:	4283      	cmp	r3, r0
 80185ce:	d338      	bcc.n	8018642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80185d0:	f240 604c 	movw	r0, #1612	; 0x64c
 80185d4:	4283      	cmp	r3, r0
 80185d6:	d9d8      	bls.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80185d8:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 80185dc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80185e0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80185e4:	f040 80f3 	bne.w	80187ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80185e8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80185ec:	f040 80ef 	bne.w	80187ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80185f0:	00cb      	lsls	r3, r1, #3
 80185f2:	064e      	lsls	r6, r1, #25
 80185f4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80185f8:	7a13      	ldrb	r3, [r2, #8]
 80185fa:	ea43 0300 	orr.w	r3, r3, r0
 80185fe:	bf44      	itt	mi
 8018600:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018604:	b21b      	sxthmi	r3, r3
 8018606:	e7d9      	b.n	80185bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8018608:	f240 6054 	movw	r0, #1620	; 0x654
 801860c:	4283      	cmp	r3, r0
 801860e:	d8e3      	bhi.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018610:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8018614:	d9e0      	bls.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018616:	e7b8      	b.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018618:	f240 6074 	movw	r0, #1652	; 0x674
 801861c:	4283      	cmp	r3, r0
 801861e:	d0b4      	beq.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018620:	d82d      	bhi.n	801867e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8018622:	f240 605e 	movw	r0, #1630	; 0x65e
 8018626:	4283      	cmp	r3, r0
 8018628:	d804      	bhi.n	8018634 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801862a:	f240 605d 	movw	r0, #1629	; 0x65d
 801862e:	4283      	cmp	r3, r0
 8018630:	d3d2      	bcc.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018632:	e7aa      	b.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018634:	f240 605f 	movw	r0, #1631	; 0x65f
 8018638:	4283      	cmp	r3, r0
 801863a:	d0cd      	beq.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801863c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8018640:	d0a3      	beq.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018642:	00cb      	lsls	r3, r1, #3
 8018644:	0649      	lsls	r1, r1, #25
 8018646:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801864a:	7a13      	ldrb	r3, [r2, #8]
 801864c:	ea43 0300 	orr.w	r3, r3, r0
 8018650:	bf44      	itt	mi
 8018652:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018656:	b21b      	sxthmi	r3, r3
 8018658:	1b5d      	subs	r5, r3, r5
 801865a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801865e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8018662:	7b53      	ldrb	r3, [r2, #13]
 8018664:	015b      	lsls	r3, r3, #5
 8018666:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801866a:	7993      	ldrb	r3, [r2, #6]
 801866c:	430b      	orrs	r3, r1
 801866e:	2105      	movs	r1, #5
 8018670:	005b      	lsls	r3, r3, #1
 8018672:	fb93 f3f1 	sdiv	r3, r3, r1
 8018676:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801867a:	440b      	add	r3, r1
 801867c:	e756      	b.n	801852c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801867e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8018682:	4283      	cmp	r3, r0
 8018684:	d809      	bhi.n	801869a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8018686:	f240 60df 	movw	r0, #1759	; 0x6df
 801868a:	4283      	cmp	r3, r0
 801868c:	f4bf af7d 	bcs.w	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018690:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8018694:	2b05      	cmp	r3, #5
 8018696:	d8d4      	bhi.n	8018642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8018698:	e777      	b.n	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801869a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801869e:	4283      	cmp	r3, r0
 80186a0:	d09a      	beq.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80186a2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80186a6:	4283      	cmp	r3, r0
 80186a8:	e7ca      	b.n	8018640 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80186aa:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80186ae:	d22b      	bcs.n	8018708 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80186b0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80186b4:	4283      	cmp	r3, r0
 80186b6:	d28f      	bcs.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80186b8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80186bc:	4283      	cmp	r3, r0
 80186be:	d816      	bhi.n	80186ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80186c0:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80186c4:	4283      	cmp	r3, r0
 80186c6:	f4bf af60 	bcs.w	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186ca:	f240 60ec 	movw	r0, #1772	; 0x6ec
 80186ce:	4283      	cmp	r3, r0
 80186d0:	d80a      	bhi.n	80186e8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80186d2:	f240 60eb 	movw	r0, #1771	; 0x6eb
 80186d6:	4283      	cmp	r3, r0
 80186d8:	f4bf af57 	bcs.w	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80186dc:	f240 60ea 	movw	r0, #1770	; 0x6ea
 80186e0:	4283      	cmp	r3, r0
 80186e2:	f43f af79 	beq.w	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80186e6:	e7ac      	b.n	8018642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80186e8:	f240 60ed 	movw	r0, #1773	; 0x6ed
 80186ec:	e7f8      	b.n	80186e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80186ee:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80186f2:	4283      	cmp	r3, r0
 80186f4:	d802      	bhi.n	80186fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80186f6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80186fa:	e798      	b.n	801862e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80186fc:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8018700:	4283      	cmp	r3, r0
 8018702:	f47f af42 	bne.w	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8018706:	e767      	b.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018708:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801870c:	4283      	cmp	r3, r0
 801870e:	f43f af63 	beq.w	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8018712:	d802      	bhi.n	801871a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8018714:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8018718:	e7f2      	b.n	8018700 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801871a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801871e:	4283      	cmp	r3, r0
 8018720:	d805      	bhi.n	801872e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8018722:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8018726:	4283      	cmp	r3, r0
 8018728:	f4ff af2f 	bcc.w	801858a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801872c:	e754      	b.n	80185d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801872e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8018732:	4283      	cmp	r3, r0
 8018734:	e7af      	b.n	8018696 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8018736:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801873a:	4617      	mov	r7, r2
 801873c:	f102 0808 	add.w	r8, r2, #8
 8018740:	4666      	mov	r6, ip
 8018742:	6838      	ldr	r0, [r7, #0]
 8018744:	3708      	adds	r7, #8
 8018746:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801874a:	46e6      	mov	lr, ip
 801874c:	4547      	cmp	r7, r8
 801874e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018752:	46f4      	mov	ip, lr
 8018754:	d1f5      	bne.n	8018742 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8018756:	6838      	ldr	r0, [r7, #0]
 8018758:	f8ce 0000 	str.w	r0, [lr]
 801875c:	88b9      	ldrh	r1, [r7, #4]
 801875e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8018762:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8018766:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801876a:	d009      	beq.n	8018780 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801876c:	7b51      	ldrb	r1, [r2, #13]
 801876e:	7992      	ldrb	r2, [r2, #6]
 8018770:	0149      	lsls	r1, r1, #5
 8018772:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8018776:	4311      	orrs	r1, r2
 8018778:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801877c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018780:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8018784:	b2ad      	uxth	r5, r5
 8018786:	d00d      	beq.n	80187a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8018788:	442b      	add	r3, r5
 801878a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801878e:	b29b      	uxth	r3, r3
 8018790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018794:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018798:	10db      	asrs	r3, r3, #3
 801879a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801879e:	4313      	orrs	r3, r2
 80187a0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80187a4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80187a8:	00cb      	lsls	r3, r1, #3
 80187aa:	064f      	lsls	r7, r1, #25
 80187ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80187b0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80187b4:	ea43 0302 	orr.w	r3, r3, r2
 80187b8:	bf44      	itt	mi
 80187ba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80187be:	b21b      	sxthmi	r3, r3
 80187c0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80187c4:	1b5b      	subs	r3, r3, r5
 80187c6:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80187ca:	4632      	mov	r2, r6
 80187cc:	e6f9      	b.n	80185c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80187ce:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80187d2:	4617      	mov	r7, r2
 80187d4:	f102 0908 	add.w	r9, r2, #8
 80187d8:	4666      	mov	r6, ip
 80187da:	6838      	ldr	r0, [r7, #0]
 80187dc:	3708      	adds	r7, #8
 80187de:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80187e2:	46e0      	mov	r8, ip
 80187e4:	454f      	cmp	r7, r9
 80187e6:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80187ea:	46c4      	mov	ip, r8
 80187ec:	d1f5      	bne.n	80187da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80187ee:	6838      	ldr	r0, [r7, #0]
 80187f0:	f8c8 0000 	str.w	r0, [r8]
 80187f4:	88b9      	ldrh	r1, [r7, #4]
 80187f6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80187fa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80187fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8018802:	d009      	beq.n	8018818 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8018804:	7b51      	ldrb	r1, [r2, #13]
 8018806:	7992      	ldrb	r2, [r2, #6]
 8018808:	0149      	lsls	r1, r1, #5
 801880a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801880e:	4311      	orrs	r1, r2
 8018810:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8018814:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8018818:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801881c:	d00e      	beq.n	801883c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801881e:	eba3 030e 	sub.w	r3, r3, lr
 8018822:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8018826:	b29b      	uxth	r3, r3
 8018828:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801882c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8018830:	10db      	asrs	r3, r3, #3
 8018832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018836:	4313      	orrs	r3, r2
 8018838:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801883c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8018840:	00cb      	lsls	r3, r1, #3
 8018842:	0648      	lsls	r0, r1, #25
 8018844:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8018848:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801884c:	ea43 0302 	orr.w	r3, r3, r2
 8018850:	bf44      	itt	mi
 8018852:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8018856:	b21b      	sxthmi	r3, r3
 8018858:	1b5d      	subs	r5, r3, r5
 801885a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801885e:	e7b4      	b.n	80187ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08018860 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8018860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018864:	461e      	mov	r6, r3
 8018866:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8018868:	4604      	mov	r4, r0
 801886a:	4617      	mov	r7, r2
 801886c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018870:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018874:	f7ed fefa 	bl	800666c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8018878:	4605      	mov	r5, r0
 801887a:	b918      	cbnz	r0, 8018884 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801887c:	6030      	str	r0, [r6, #0]
 801887e:	4628      	mov	r0, r5
 8018880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	4601      	mov	r1, r0
 8018888:	4638      	mov	r0, r7
 801888a:	68db      	ldr	r3, [r3, #12]
 801888c:	4798      	blx	r3
 801888e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8018892:	4602      	mov	r2, r0
 8018894:	6030      	str	r0, [r6, #0]
 8018896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801889a:	d213      	bcs.n	80188c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801889c:	4643      	mov	r3, r8
 801889e:	4639      	mov	r1, r7
 80188a0:	4620      	mov	r0, r4
 80188a2:	f7ff fe39 	bl	8018518 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80188a6:	6030      	str	r0, [r6, #0]
 80188a8:	6833      	ldr	r3, [r6, #0]
 80188aa:	b143      	cbz	r3, 80188be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80188ac:	7b5a      	ldrb	r2, [r3, #13]
 80188ae:	7a9b      	ldrb	r3, [r3, #10]
 80188b0:	0052      	lsls	r2, r2, #1
 80188b2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80188b6:	4313      	orrs	r3, r2
 80188b8:	bf0c      	ite	eq
 80188ba:	2301      	moveq	r3, #1
 80188bc:	2300      	movne	r3, #0
 80188be:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80188c2:	e7dc      	b.n	801887e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80188c4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80188c8:	b29b      	uxth	r3, r3
 80188ca:	2b7f      	cmp	r3, #127	; 0x7f
 80188cc:	d804      	bhi.n	80188d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80188ce:	4639      	mov	r1, r7
 80188d0:	4620      	mov	r0, r4
 80188d2:	f7ff fd15 	bl	8018300 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80188d6:	e7e6      	b.n	80188a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80188d8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d0e3      	beq.n	80188a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80188e0:	f640 1302 	movw	r3, #2306	; 0x902
 80188e4:	429d      	cmp	r5, r3
 80188e6:	d1df      	bne.n	80188a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80188e8:	4601      	mov	r1, r0
 80188ea:	4620      	mov	r0, r4
 80188ec:	f7ff fcd9 	bl	80182a2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80188f0:	e7d9      	b.n	80188a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080188f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80188f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188f6:	461e      	mov	r6, r3
 80188f8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80188fa:	4604      	mov	r4, r0
 80188fc:	4617      	mov	r7, r2
 80188fe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018902:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018906:	f7ed feb1 	bl	800666c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801890a:	4605      	mov	r5, r0
 801890c:	b918      	cbnz	r0, 8018916 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801890e:	6030      	str	r0, [r6, #0]
 8018910:	4628      	mov	r0, r5
 8018912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	4601      	mov	r1, r0
 801891a:	4638      	mov	r0, r7
 801891c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8018920:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018924:	47c8      	blx	r9
 8018926:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801892a:	4602      	mov	r2, r0
 801892c:	6030      	str	r0, [r6, #0]
 801892e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018932:	d213      	bcs.n	801895c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8018934:	4643      	mov	r3, r8
 8018936:	4639      	mov	r1, r7
 8018938:	4620      	mov	r0, r4
 801893a:	f7ff fded 	bl	8018518 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801893e:	6030      	str	r0, [r6, #0]
 8018940:	6833      	ldr	r3, [r6, #0]
 8018942:	b143      	cbz	r3, 8018956 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8018944:	7b5a      	ldrb	r2, [r3, #13]
 8018946:	7a9b      	ldrb	r3, [r3, #10]
 8018948:	0052      	lsls	r2, r2, #1
 801894a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801894e:	4313      	orrs	r3, r2
 8018950:	bf0c      	ite	eq
 8018952:	2301      	moveq	r3, #1
 8018954:	2300      	movne	r3, #0
 8018956:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801895a:	e7d9      	b.n	8018910 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801895c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8018960:	b29b      	uxth	r3, r3
 8018962:	2b7f      	cmp	r3, #127	; 0x7f
 8018964:	d804      	bhi.n	8018970 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8018966:	4639      	mov	r1, r7
 8018968:	4620      	mov	r0, r4
 801896a:	f7ff fcc9 	bl	8018300 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801896e:	e7e6      	b.n	801893e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8018970:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8018974:	2b00      	cmp	r3, #0
 8018976:	d0e3      	beq.n	8018940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018978:	f640 1302 	movw	r3, #2306	; 0x902
 801897c:	429d      	cmp	r5, r3
 801897e:	d1df      	bne.n	8018940 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8018980:	4601      	mov	r1, r0
 8018982:	4620      	mov	r0, r4
 8018984:	f7ff fc8d 	bl	80182a2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8018988:	e7d9      	b.n	801893e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801898a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801898a:	b510      	push	{r4, lr}
 801898c:	4604      	mov	r4, r0
 801898e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8018992:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8018994:	b1e1      	cbz	r1, 80189d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8018996:	2b0a      	cmp	r3, #10
 8018998:	d02d      	beq.n	80189f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801899a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801899c:	3901      	subs	r1, #1
 801899e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80189a2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80189a4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80189a8:	1c51      	adds	r1, r2, #1
 80189aa:	b289      	uxth	r1, r1
 80189ac:	2901      	cmp	r1, #1
 80189ae:	bf8a      	itet	hi
 80189b0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80189b4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80189b6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80189b8:	1c5a      	adds	r2, r3, #1
 80189ba:	8722      	strh	r2, [r4, #56]	; 0x38
 80189bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80189be:	4413      	add	r3, r2
 80189c0:	b29b      	uxth	r3, r3
 80189c2:	2b09      	cmp	r3, #9
 80189c4:	bf88      	it	hi
 80189c6:	3b0a      	subhi	r3, #10
 80189c8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80189cc:	8458      	strh	r0, [r3, #34]	; 0x22
 80189ce:	e7de      	b.n	801898e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80189d0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80189d2:	2b0a      	cmp	r3, #10
 80189d4:	d00f      	beq.n	80189f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80189d6:	4620      	mov	r0, r4
 80189d8:	f7ff fc11 	bl	80181fe <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80189dc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80189de:	1c5a      	adds	r2, r3, #1
 80189e0:	8722      	strh	r2, [r4, #56]	; 0x38
 80189e2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80189e4:	4413      	add	r3, r2
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	2b09      	cmp	r3, #9
 80189ea:	bf88      	it	hi
 80189ec:	3b0a      	subhi	r3, #10
 80189ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80189f2:	8458      	strh	r0, [r3, #34]	; 0x22
 80189f4:	e7ec      	b.n	80189d0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80189f6:	bd10      	pop	{r4, pc}

080189f8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80189fc:	4604      	mov	r4, r0
 80189fe:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8018a02:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8018a04:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8018a06:	3a01      	subs	r2, #1
 8018a08:	8702      	strh	r2, [r0, #56]	; 0x38
 8018a0a:	1c5a      	adds	r2, r3, #1
 8018a0c:	b292      	uxth	r2, r2
 8018a0e:	2a09      	cmp	r2, #9
 8018a10:	bf8a      	itet	hi
 8018a12:	3b09      	subhi	r3, #9
 8018a14:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8018a16:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8018a18:	f7ff ffb7 	bl	801898a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8018a1c:	8c23      	ldrh	r3, [r4, #32]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	bf9c      	itt	ls
 8018a22:	3301      	addls	r3, #1
 8018a24:	8423      	strhls	r3, [r4, #32]
 8018a26:	8be3      	ldrh	r3, [r4, #30]
 8018a28:	b90b      	cbnz	r3, 8018a2e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8018a2a:	2302      	movs	r3, #2
 8018a2c:	83e3      	strh	r3, [r4, #30]
 8018a2e:	8be3      	ldrh	r3, [r4, #30]
 8018a30:	4628      	mov	r0, r5
 8018a32:	3b01      	subs	r3, #1
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	83e3      	strh	r3, [r4, #30]
 8018a38:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018a3c:	8365      	strh	r5, [r4, #26]
 8018a3e:	bd38      	pop	{r3, r4, r5, pc}

08018a40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8018a40:	428a      	cmp	r2, r1
 8018a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a46:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8018a48:	d932      	bls.n	8018ab0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8018a4a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8018a4c:	1a54      	subs	r4, r2, r1
 8018a4e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8018a52:	19ee      	adds	r6, r5, r7
 8018a54:	fa1f fe84 	uxth.w	lr, r4
 8018a58:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8018a5c:	3e01      	subs	r6, #1
 8018a5e:	b2b4      	uxth	r4, r6
 8018a60:	eba4 090e 	sub.w	r9, r4, lr
 8018a64:	fa1f f989 	uxth.w	r9, r9
 8018a68:	2c09      	cmp	r4, #9
 8018a6a:	4626      	mov	r6, r4
 8018a6c:	bf88      	it	hi
 8018a6e:	f1a4 060a 	subhi.w	r6, r4, #10
 8018a72:	f1bc 0f00 	cmp.w	ip, #0
 8018a76:	f104 34ff 	add.w	r4, r4, #4294967295
 8018a7a:	bf08      	it	eq
 8018a7c:	f04f 0c02 	moveq.w	ip, #2
 8018a80:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018a84:	b2a4      	uxth	r4, r4
 8018a86:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018a8a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8018a8e:	454c      	cmp	r4, r9
 8018a90:	fa1f fc8c 	uxth.w	ip, ip
 8018a94:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8018a98:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8018a9c:	d1e4      	bne.n	8018a68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8018a9e:	eba5 050e 	sub.w	r5, r5, lr
 8018aa2:	eb0e 0408 	add.w	r4, lr, r8
 8018aa6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8018aaa:	8705      	strh	r5, [r0, #56]	; 0x38
 8018aac:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8018ab0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8018ab2:	250a      	movs	r5, #10
 8018ab4:	1a64      	subs	r4, r4, r1
 8018ab6:	4439      	add	r1, r7
 8018ab8:	b289      	uxth	r1, r1
 8018aba:	8704      	strh	r4, [r0, #56]	; 0x38
 8018abc:	2909      	cmp	r1, #9
 8018abe:	bf88      	it	hi
 8018ac0:	390a      	subhi	r1, #10
 8018ac2:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018ac4:	b18a      	cbz	r2, 8018aea <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8018ac6:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8018ac8:	3a01      	subs	r2, #1
 8018aca:	3101      	adds	r1, #1
 8018acc:	b292      	uxth	r2, r2
 8018ace:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8018ad2:	8701      	strh	r1, [r0, #56]	; 0x38
 8018ad4:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018ad6:	b901      	cbnz	r1, 8018ada <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8018ad8:	86c5      	strh	r5, [r0, #54]	; 0x36
 8018ada:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8018adc:	3901      	subs	r1, #1
 8018ade:	b289      	uxth	r1, r1
 8018ae0:	86c1      	strh	r1, [r0, #54]	; 0x36
 8018ae2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8018ae6:	844c      	strh	r4, [r1, #34]	; 0x22
 8018ae8:	e7ec      	b.n	8018ac4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8018aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018aee:	f7ff bf4c 	b.w	801898a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08018af2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8018af2:	b570      	push	{r4, r5, r6, lr}
 8018af4:	2500      	movs	r5, #0
 8018af6:	4295      	cmp	r5, r2
 8018af8:	d011      	beq.n	8018b1e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8018afa:	8bc4      	ldrh	r4, [r0, #30]
 8018afc:	f831 6b02 	ldrh.w	r6, [r1], #2
 8018b00:	4414      	add	r4, r2
 8018b02:	3c01      	subs	r4, #1
 8018b04:	1b64      	subs	r4, r4, r5
 8018b06:	b2a4      	uxth	r4, r4
 8018b08:	2c01      	cmp	r4, #1
 8018b0a:	bf88      	it	hi
 8018b0c:	3c02      	subhi	r4, #2
 8018b0e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018b12:	8b64      	ldrh	r4, [r4, #26]
 8018b14:	42b4      	cmp	r4, r6
 8018b16:	d117      	bne.n	8018b48 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8018b18:	3501      	adds	r5, #1
 8018b1a:	b2ad      	uxth	r5, r5
 8018b1c:	e7eb      	b.n	8018af6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8018b1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018b22:	2400      	movs	r4, #0
 8018b24:	4413      	add	r3, r2
 8018b26:	b2a2      	uxth	r2, r4
 8018b28:	429a      	cmp	r2, r3
 8018b2a:	da0f      	bge.n	8018b4c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8018b2c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8018b2e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8018b32:	3401      	adds	r4, #1
 8018b34:	4432      	add	r2, r6
 8018b36:	b292      	uxth	r2, r2
 8018b38:	2a09      	cmp	r2, #9
 8018b3a:	bf88      	it	hi
 8018b3c:	3a0a      	subhi	r2, #10
 8018b3e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8018b42:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8018b44:	42aa      	cmp	r2, r5
 8018b46:	d0ee      	beq.n	8018b26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8018b48:	2000      	movs	r0, #0
 8018b4a:	bd70      	pop	{r4, r5, r6, pc}
 8018b4c:	2001      	movs	r0, #1
 8018b4e:	e7fc      	b.n	8018b4a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08018b50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8018b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	4605      	mov	r5, r0
 8018b56:	4616      	mov	r6, r2
 8018b58:	1c8c      	adds	r4, r1, #2
 8018b5a:	8809      	ldrh	r1, [r1, #0]
 8018b5c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8018b60:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8018b64:	42b3      	cmp	r3, r6
 8018b66:	d124      	bne.n	8018bb2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8018b68:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8018b6c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8018b70:	f001 070f 	and.w	r7, r1, #15
 8018b74:	4652      	mov	r2, sl
 8018b76:	f8cd 8000 	str.w	r8, [sp]
 8018b7a:	464b      	mov	r3, r9
 8018b7c:	4621      	mov	r1, r4
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f7ff ffb7 	bl	8018af2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8018b84:	4683      	mov	fp, r0
 8018b86:	b168      	cbz	r0, 8018ba4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8018b88:	eb0a 0109 	add.w	r1, sl, r9
 8018b8c:	463a      	mov	r2, r7
 8018b8e:	4628      	mov	r0, r5
 8018b90:	4441      	add	r1, r8
 8018b92:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8018b96:	4649      	mov	r1, r9
 8018b98:	f7ff ff52 	bl	8018a40 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8018b9c:	4658      	mov	r0, fp
 8018b9e:	b003      	add	sp, #12
 8018ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ba4:	eb07 010a 	add.w	r1, r7, sl
 8018ba8:	4449      	add	r1, r9
 8018baa:	4441      	add	r1, r8
 8018bac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8018bb0:	e7d2      	b.n	8018b58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8018bb2:	f04f 0b00 	mov.w	fp, #0
 8018bb6:	e7f1      	b.n	8018b9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08018bb8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8018bb8:	b570      	push	{r4, r5, r6, lr}
 8018bba:	8810      	ldrh	r0, [r2, #0]
 8018bbc:	4298      	cmp	r0, r3
 8018bbe:	d817      	bhi.n	8018bf0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018bc0:	1e48      	subs	r0, r1, #1
 8018bc2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8018bc6:	4298      	cmp	r0, r3
 8018bc8:	d312      	bcc.n	8018bf0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018bca:	2400      	movs	r4, #0
 8018bcc:	428c      	cmp	r4, r1
 8018bce:	d20f      	bcs.n	8018bf0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8018bd0:	1860      	adds	r0, r4, r1
 8018bd2:	1040      	asrs	r0, r0, #1
 8018bd4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8018bd8:	0085      	lsls	r5, r0, #2
 8018bda:	42b3      	cmp	r3, r6
 8018bdc:	d902      	bls.n	8018be4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8018bde:	3001      	adds	r0, #1
 8018be0:	b284      	uxth	r4, r0
 8018be2:	e7f3      	b.n	8018bcc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018be4:	d201      	bcs.n	8018bea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8018be6:	b281      	uxth	r1, r0
 8018be8:	e7f0      	b.n	8018bcc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8018bea:	442a      	add	r2, r5
 8018bec:	8850      	ldrh	r0, [r2, #2]
 8018bee:	bd70      	pop	{r4, r5, r6, pc}
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	e7fc      	b.n	8018bee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08018bf4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8018bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8018bfa:	4604      	mov	r4, r0
 8018bfc:	260b      	movs	r6, #11
 8018bfe:	886f      	ldrh	r7, [r5, #2]
 8018c00:	087f      	lsrs	r7, r7, #1
 8018c02:	3e01      	subs	r6, #1
 8018c04:	d013      	beq.n	8018c2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018c06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8018c08:	462a      	mov	r2, r5
 8018c0a:	4639      	mov	r1, r7
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018c12:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8018c16:	4643      	mov	r3, r8
 8018c18:	f7ff ffce 	bl	8018bb8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8018c1c:	b138      	cbz	r0, 8018c2e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8018c1e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8018c22:	4642      	mov	r2, r8
 8018c24:	4620      	mov	r0, r4
 8018c26:	f7ff ff93 	bl	8018b50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	d1e9      	bne.n	8018c02 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8018c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018c34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8018c34:	b570      	push	{r4, r5, r6, lr}
 8018c36:	694a      	ldr	r2, [r1, #20]
 8018c38:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018c3a:	684b      	ldr	r3, [r1, #4]
 8018c3c:	1b54      	subs	r4, r2, r5
 8018c3e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8018c40:	f000 8106 	beq.w	8018e50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8018c44:	1b9b      	subs	r3, r3, r6
 8018c46:	d003      	beq.n	8018c50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018c48:	4363      	muls	r3, r4
 8018c4a:	2210      	movs	r2, #16
 8018c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018c50:	680c      	ldr	r4, [r1, #0]
 8018c52:	698a      	ldr	r2, [r1, #24]
 8018c54:	1b65      	subs	r5, r4, r5
 8018c56:	f000 80fd 	beq.w	8018e54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8018c5a:	1b92      	subs	r2, r2, r6
 8018c5c:	d003      	beq.n	8018c66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018c5e:	436a      	muls	r2, r5
 8018c60:	2410      	movs	r4, #16
 8018c62:	fb92 f2f4 	sdiv	r2, r2, r4
 8018c66:	1a9b      	subs	r3, r3, r2
 8018c68:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8018e90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8018c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018c70:	460a      	mov	r2, r1
 8018c72:	ee07 3a90 	vmov	s15, r3
 8018c76:	f100 040c 	add.w	r4, r0, #12
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c80:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018c84:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8018c88:	eeb1 6a43 	vneg.f32	s12, s6
 8018c8c:	edd2 7a02 	vldr	s15, [r2, #8]
 8018c90:	3214      	adds	r2, #20
 8018c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8018c96:	ece3 6a01 	vstmia	r3!, {s13}
 8018c9a:	429c      	cmp	r4, r3
 8018c9c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8018ca0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018ca4:	edc3 7a02 	vstr	s15, [r3, #8]
 8018ca8:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018cac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018cb0:	edc3 7a05 	vstr	s15, [r3, #20]
 8018cb4:	d1ea      	bne.n	8018c8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8018cb6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018cb8:	698b      	ldr	r3, [r1, #24]
 8018cba:	edd0 4a02 	vldr	s9, [r0, #8]
 8018cbe:	1a9b      	subs	r3, r3, r2
 8018cc0:	edd0 3a00 	vldr	s7, [r0]
 8018cc4:	edd0 6a01 	vldr	s13, [r0, #4]
 8018cc8:	ee07 3a90 	vmov	s15, r3
 8018ccc:	684b      	ldr	r3, [r1, #4]
 8018cce:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8018cd2:	ed90 5a05 	vldr	s10, [r0, #20]
 8018cd6:	1a9b      	subs	r3, r3, r2
 8018cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018cdc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8018ce0:	ed90 2a03 	vldr	s4, [r0, #12]
 8018ce4:	ee07 3a10 	vmov	s14, r3
 8018ce8:	edd0 5a04 	vldr	s11, [r0, #16]
 8018cec:	ee67 7a84 	vmul.f32	s15, s15, s8
 8018cf0:	ed90 1a07 	vldr	s2, [r0, #28]
 8018cf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018cf8:	edd0 2a06 	vldr	s5, [r0, #24]
 8018cfc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8018d00:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8018d04:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d08:	ee32 5a45 	vsub.f32	s10, s4, s10
 8018d0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018d10:	ee67 7a83 	vmul.f32	s15, s15, s6
 8018d14:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8018d18:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018d1a:	694a      	ldr	r2, [r1, #20]
 8018d1c:	1b13      	subs	r3, r2, r4
 8018d1e:	ee07 3a10 	vmov	s14, r3
 8018d22:	680b      	ldr	r3, [r1, #0]
 8018d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d28:	1b1b      	subs	r3, r3, r4
 8018d2a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d2e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8018d32:	ee07 3a10 	vmov	s14, r3
 8018d36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d3a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d3e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8018d42:	ee64 4a86 	vmul.f32	s9, s9, s12
 8018d46:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8018d4a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018d4c:	698b      	ldr	r3, [r1, #24]
 8018d4e:	1a9b      	subs	r3, r3, r2
 8018d50:	ee06 3a90 	vmov	s13, r3
 8018d54:	684b      	ldr	r3, [r1, #4]
 8018d56:	1a9b      	subs	r3, r3, r2
 8018d58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018d5c:	ee07 3a10 	vmov	s14, r3
 8018d60:	ee66 6a84 	vmul.f32	s13, s13, s8
 8018d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d68:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8018d6c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d70:	eee5 6a87 	vfma.f32	s13, s11, s14
 8018d74:	ee66 6a83 	vmul.f32	s13, s13, s6
 8018d78:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8018d7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018d7e:	694a      	ldr	r2, [r1, #20]
 8018d80:	1b13      	subs	r3, r2, r4
 8018d82:	ee07 3a10 	vmov	s14, r3
 8018d86:	680b      	ldr	r3, [r1, #0]
 8018d88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d8c:	1b1b      	subs	r3, r3, r4
 8018d8e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018d92:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8018d96:	ee07 3a10 	vmov	s14, r3
 8018d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018d9e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018da2:	eea5 5a87 	vfma.f32	s10, s11, s14
 8018da6:	edd0 5a08 	vldr	s11, [r0, #32]
 8018daa:	ee31 1a65 	vsub.f32	s2, s2, s11
 8018dae:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8018db2:	ee25 5a06 	vmul.f32	s10, s10, s12
 8018db6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8018dba:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018dbc:	698b      	ldr	r3, [r1, #24]
 8018dbe:	1a9b      	subs	r3, r3, r2
 8018dc0:	ee07 3a10 	vmov	s14, r3
 8018dc4:	684b      	ldr	r3, [r1, #4]
 8018dc6:	1a9b      	subs	r3, r3, r2
 8018dc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018dcc:	ee01 3a90 	vmov	s3, r3
 8018dd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8018dd4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8018dd8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8018ddc:	ee61 1a84 	vmul.f32	s3, s3, s8
 8018de0:	eea1 7a21 	vfma.f32	s14, s2, s3
 8018de4:	ee27 7a03 	vmul.f32	s14, s14, s6
 8018de8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018dec:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8018dee:	694a      	ldr	r2, [r1, #20]
 8018df0:	1b13      	subs	r3, r2, r4
 8018df2:	ee03 3a10 	vmov	s6, r3
 8018df6:	680b      	ldr	r3, [r1, #0]
 8018df8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018dfc:	1b1b      	subs	r3, r3, r4
 8018dfe:	ee23 3a04 	vmul.f32	s6, s6, s8
 8018e02:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8018e06:	ee03 3a10 	vmov	s6, r3
 8018e0a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8018e0e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8018e12:	eee1 5a04 	vfma.f32	s11, s2, s8
 8018e16:	ee25 6a86 	vmul.f32	s12, s11, s12
 8018e1a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8018e1e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8018e22:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8018e26:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8018e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e2e:	dd13      	ble.n	8018e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8018e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e34:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8018e38:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018e3a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8018e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e46:	dd15      	ble.n	8018e74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8018e48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018e4c:	6403      	str	r3, [r0, #64]	; 0x40
 8018e4e:	bd70      	pop	{r4, r5, r6, pc}
 8018e50:	4623      	mov	r3, r4
 8018e52:	e6fd      	b.n	8018c50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8018e54:	462a      	mov	r2, r5
 8018e56:	e706      	b.n	8018c66 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8018e58:	d502      	bpl.n	8018e60 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8018e5a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018e5e:	e7e9      	b.n	8018e34 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8018e60:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8018e64:	eea3 2a85 	vfma.f32	s4, s7, s10
 8018e68:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8018e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e70:	dade      	bge.n	8018e30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8018e72:	e7f2      	b.n	8018e5a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8018e74:	d502      	bpl.n	8018e7c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8018e76:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8018e7a:	e7e7      	b.n	8018e4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8018e7c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8018e80:	eee3 4a86 	vfma.f32	s9, s7, s12
 8018e84:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8018e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e8c:	dadc      	bge.n	8018e48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8018e8e:	e7f2      	b.n	8018e76 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8018e90:	3d800000 	.word	0x3d800000

08018e94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8018e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e98:	2714      	movs	r7, #20
 8018e9a:	435f      	muls	r7, r3
 8018e9c:	eb02 0c07 	add.w	ip, r2, r7
 8018ea0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8018ea4:	f115 0e0f 	adds.w	lr, r5, #15
 8018ea8:	f100 80a2 	bmi.w	8018ff0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8018eac:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8018eb0:	9c08      	ldr	r4, [sp, #32]
 8018eb2:	2614      	movs	r6, #20
 8018eb4:	f8c0 e014 	str.w	lr, [r0, #20]
 8018eb8:	4366      	muls	r6, r4
 8018eba:	eb02 0806 	add.w	r8, r2, r6
 8018ebe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018ec2:	f115 040f 	adds.w	r4, r5, #15
 8018ec6:	f100 809f 	bmi.w	8019008 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8018eca:	1124      	asrs	r4, r4, #4
 8018ecc:	eba4 040e 	sub.w	r4, r4, lr
 8018ed0:	6184      	str	r4, [r0, #24]
 8018ed2:	2c00      	cmp	r4, #0
 8018ed4:	f000 808a 	beq.w	8018fec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8018ed8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8018edc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018ee0:	5995      	ldr	r5, [r2, r6]
 8018ee2:	eba4 0809 	sub.w	r8, r4, r9
 8018ee6:	59d4      	ldr	r4, [r2, r7]
 8018ee8:	eba5 0a04 	sub.w	sl, r5, r4
 8018eec:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8018ef0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8018ef4:	fb0e fe05 	mul.w	lr, lr, r5
 8018ef8:	fb0a ee19 	mls	lr, sl, r9, lr
 8018efc:	fb08 e404 	mla	r4, r8, r4, lr
 8018f00:	3c01      	subs	r4, #1
 8018f02:	19a4      	adds	r4, r4, r6
 8018f04:	f100 808c 	bmi.w	8019020 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8018f08:	fb94 fef6 	sdiv	lr, r4, r6
 8018f0c:	fb06 441e 	mls	r4, r6, lr, r4
 8018f10:	f8c0 e000 	str.w	lr, [r0]
 8018f14:	6104      	str	r4, [r0, #16]
 8018f16:	2d00      	cmp	r5, #0
 8018f18:	f2c0 8095 	blt.w	8019046 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8018f1c:	fb95 f4f6 	sdiv	r4, r5, r6
 8018f20:	fb06 5514 	mls	r5, r6, r4, r5
 8018f24:	6044      	str	r4, [r0, #4]
 8018f26:	6085      	str	r5, [r0, #8]
 8018f28:	60c6      	str	r6, [r0, #12]
 8018f2a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018f2e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8018f32:	6945      	ldr	r5, [r0, #20]
 8018f34:	59d2      	ldr	r2, [r2, r7]
 8018f36:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8018f3a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8019068 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8018f3e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018f42:	ee07 4a10 	vmov	s14, r4
 8018f46:	6804      	ldr	r4, [r0, #0]
 8018f48:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8018f4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018f50:	ee07 2a90 	vmov	s15, r2
 8018f54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018f60:	edd3 6a00 	vldr	s13, [r3]
 8018f64:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018f68:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8018f6c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018f70:	edc0 6a07 	vstr	s13, [r0, #28]
 8018f74:	edd0 6a01 	vldr	s13, [r0, #4]
 8018f78:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8018f7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018f80:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8018f84:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018f88:	ed80 6a08 	vstr	s12, [r0, #32]
 8018f8c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8018f8e:	6242      	str	r2, [r0, #36]	; 0x24
 8018f90:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8018f94:	ed93 6a03 	vldr	s12, [r3, #12]
 8018f98:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018f9c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018fa0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018fa4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8018fa8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8018fac:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8018fb0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018fb4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8018fb8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018fba:	6302      	str	r2, [r0, #48]	; 0x30
 8018fbc:	ed93 6a06 	vldr	s12, [r3, #24]
 8018fc0:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8018fc4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8018fc8:	eeb0 7a46 	vmov.f32	s14, s12
 8018fcc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8018fd0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018fd4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8018fd8:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8018fdc:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8018fe0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018fe4:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8018fe8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8018fea:	63c3      	str	r3, [r0, #60]	; 0x3c
 8018fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ff0:	2410      	movs	r4, #16
 8018ff2:	f1c5 0501 	rsb	r5, r5, #1
 8018ff6:	fb9e fef4 	sdiv	lr, lr, r4
 8018ffa:	f015 050f 	ands.w	r5, r5, #15
 8018ffe:	bf18      	it	ne
 8019000:	2501      	movne	r5, #1
 8019002:	ebae 0e05 	sub.w	lr, lr, r5
 8019006:	e753      	b.n	8018eb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019008:	f04f 0910 	mov.w	r9, #16
 801900c:	f1c5 0501 	rsb	r5, r5, #1
 8019010:	fb94 f4f9 	sdiv	r4, r4, r9
 8019014:	f015 050f 	ands.w	r5, r5, #15
 8019018:	bf18      	it	ne
 801901a:	2501      	movne	r5, #1
 801901c:	1b64      	subs	r4, r4, r5
 801901e:	e755      	b.n	8018ecc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019020:	4264      	negs	r4, r4
 8019022:	fb94 fef6 	sdiv	lr, r4, r6
 8019026:	f1ce 0800 	rsb	r8, lr, #0
 801902a:	fb06 441e 	mls	r4, r6, lr, r4
 801902e:	f8c0 8000 	str.w	r8, [r0]
 8019032:	6104      	str	r4, [r0, #16]
 8019034:	2c00      	cmp	r4, #0
 8019036:	f43f af6e 	beq.w	8018f16 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801903a:	ea6f 0e0e 	mvn.w	lr, lr
 801903e:	1b34      	subs	r4, r6, r4
 8019040:	f8c0 e000 	str.w	lr, [r0]
 8019044:	e766      	b.n	8018f14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019046:	426d      	negs	r5, r5
 8019048:	fb95 f4f6 	sdiv	r4, r5, r6
 801904c:	f1c4 0e00 	rsb	lr, r4, #0
 8019050:	fb06 5514 	mls	r5, r6, r4, r5
 8019054:	f8c0 e004 	str.w	lr, [r0, #4]
 8019058:	6085      	str	r5, [r0, #8]
 801905a:	2d00      	cmp	r5, #0
 801905c:	f43f af64 	beq.w	8018f28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019060:	43e4      	mvns	r4, r4
 8019062:	1b75      	subs	r5, r6, r5
 8019064:	6044      	str	r4, [r0, #4]
 8019066:	e75e      	b.n	8018f26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019068:	3d800000 	.word	0x3d800000

0801906c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801906c:	4b01      	ldr	r3, [pc, #4]	; (8019074 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801906e:	6018      	str	r0, [r3, #0]
 8019070:	4770      	bx	lr
 8019072:	bf00      	nop
 8019074:	2400ea9c 	.word	0x2400ea9c

08019078 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8019078:	4b06      	ldr	r3, [pc, #24]	; (8019094 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801907a:	881a      	ldrh	r2, [r3, #0]
 801907c:	4282      	cmp	r2, r0
 801907e:	d807      	bhi.n	8019090 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8019080:	4b05      	ldr	r3, [pc, #20]	; (8019098 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8019082:	881b      	ldrh	r3, [r3, #0]
 8019084:	4413      	add	r3, r2
 8019086:	4298      	cmp	r0, r3
 8019088:	bfac      	ite	ge
 801908a:	2000      	movge	r0, #0
 801908c:	2001      	movlt	r0, #1
 801908e:	4770      	bx	lr
 8019090:	2000      	movs	r0, #0
 8019092:	4770      	bx	lr
 8019094:	2400eabc 	.word	0x2400eabc
 8019098:	2400eac0 	.word	0x2400eac0

0801909c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801909c:	b508      	push	{r3, lr}
 801909e:	4601      	mov	r1, r0
 80190a0:	f7ff ffea 	bl	8019078 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80190a4:	b118      	cbz	r0, 80190ae <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80190a6:	4b02      	ldr	r3, [pc, #8]	; (80190b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80190ae:	bd08      	pop	{r3, pc}
 80190b0:	2400eaa0 	.word	0x2400eaa0

080190b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80190b4:	b538      	push	{r3, r4, r5, lr}
 80190b6:	4604      	mov	r4, r0
 80190b8:	f7ff ffde 	bl	8019078 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80190bc:	b188      	cbz	r0, 80190e2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80190be:	4b09      	ldr	r3, [pc, #36]	; (80190e4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80190c0:	881a      	ldrh	r2, [r3, #0]
 80190c2:	4b09      	ldr	r3, [pc, #36]	; (80190e8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80190c4:	1aa4      	subs	r4, r4, r2
 80190c6:	220e      	movs	r2, #14
 80190c8:	681d      	ldr	r5, [r3, #0]
 80190ca:	4362      	muls	r2, r4
 80190cc:	18ac      	adds	r4, r5, r2
 80190ce:	7b23      	ldrb	r3, [r4, #12]
 80190d0:	f013 0320 	ands.w	r3, r3, #32
 80190d4:	bf17      	itett	ne
 80190d6:	680b      	ldrne	r3, [r1, #0]
 80190d8:	4618      	moveq	r0, r3
 80190da:	50ab      	strne	r3, [r5, r2]
 80190dc:	684b      	ldrne	r3, [r1, #4]
 80190de:	bf18      	it	ne
 80190e0:	6063      	strne	r3, [r4, #4]
 80190e2:	bd38      	pop	{r3, r4, r5, pc}
 80190e4:	2400eabc 	.word	0x2400eabc
 80190e8:	2400eaa4 	.word	0x2400eaa4

080190ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80190ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80190f0:	4606      	mov	r6, r0
 80190f2:	460c      	mov	r4, r1
 80190f4:	f7ff ffc0 	bl	8019078 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80190f8:	b918      	cbnz	r0, 8019102 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80190fa:	2000      	movs	r0, #0
 80190fc:	b002      	add	sp, #8
 80190fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019102:	4608      	mov	r0, r1
 8019104:	f7f8 f8d1 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8019108:	2800      	cmp	r0, #0
 801910a:	d1f6      	bne.n	80190fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801910c:	4b3f      	ldr	r3, [pc, #252]	; (801920c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801910e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8019210 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8019112:	881d      	ldrh	r5, [r3, #0]
 8019114:	f8d9 a000 	ldr.w	sl, [r9]
 8019118:	46c8      	mov	r8, r9
 801911a:	1b73      	subs	r3, r6, r5
 801911c:	250e      	movs	r5, #14
 801911e:	435d      	muls	r5, r3
 8019120:	eb0a 0705 	add.w	r7, sl, r5
 8019124:	7b3b      	ldrb	r3, [r7, #12]
 8019126:	f013 0f20 	tst.w	r3, #32
 801912a:	d0e6      	beq.n	80190fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801912c:	4621      	mov	r1, r4
 801912e:	4638      	mov	r0, r7
 8019130:	f7fd faa8 	bl	8016684 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019134:	2800      	cmp	r0, #0
 8019136:	d1e1      	bne.n	80190fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019138:	4639      	mov	r1, r7
 801913a:	4620      	mov	r0, r4
 801913c:	f7fd faa2 	bl	8016684 <_ZNK8touchgfx4Rect8includesERKS0_>
 8019140:	b108      	cbz	r0, 8019146 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8019142:	4621      	mov	r1, r4
 8019144:	e020      	b.n	8019188 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8019146:	f9b4 2000 	ldrsh.w	r2, [r4]
 801914a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801914e:	429a      	cmp	r2, r3
 8019150:	d11e      	bne.n	8019190 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019152:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8019156:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801915a:	429a      	cmp	r2, r3
 801915c:	d118      	bne.n	8019190 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801915e:	6820      	ldr	r0, [r4, #0]
 8019160:	466b      	mov	r3, sp
 8019162:	6861      	ldr	r1, [r4, #4]
 8019164:	c303      	stmia	r3!, {r0, r1}
 8019166:	4639      	mov	r1, r7
 8019168:	4668      	mov	r0, sp
 801916a:	f7f9 fdb6 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801916e:	f8d9 3000 	ldr.w	r3, [r9]
 8019172:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019176:	442b      	add	r3, r5
 8019178:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801917c:	4413      	add	r3, r2
 801917e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8019182:	4293      	cmp	r3, r2
 8019184:	dc04      	bgt.n	8019190 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8019186:	4669      	mov	r1, sp
 8019188:	4630      	mov	r0, r6
 801918a:	f7ff ff93 	bl	80190b4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801918e:	e7b5      	b.n	80190fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8019190:	f8d8 3000 	ldr.w	r3, [r8]
 8019194:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8019198:	442b      	add	r3, r5
 801919a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801919e:	4291      	cmp	r1, r2
 80191a0:	d119      	bne.n	80191d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80191a2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80191a6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80191aa:	4291      	cmp	r1, r2
 80191ac:	d113      	bne.n	80191d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80191ae:	6820      	ldr	r0, [r4, #0]
 80191b0:	466a      	mov	r2, sp
 80191b2:	6861      	ldr	r1, [r4, #4]
 80191b4:	c203      	stmia	r2!, {r0, r1}
 80191b6:	4619      	mov	r1, r3
 80191b8:	4668      	mov	r0, sp
 80191ba:	f7f9 fd8e 	bl	8012cda <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80191be:	f8d8 3000 	ldr.w	r3, [r8]
 80191c2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80191c6:	442b      	add	r3, r5
 80191c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80191cc:	4413      	add	r3, r2
 80191ce:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80191d2:	4293      	cmp	r3, r2
 80191d4:	ddd7      	ble.n	8019186 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80191d6:	4620      	mov	r0, r4
 80191d8:	f7f8 f867 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80191dc:	b990      	cbnz	r0, 8019204 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80191de:	88a7      	ldrh	r7, [r4, #4]
 80191e0:	88e3      	ldrh	r3, [r4, #6]
 80191e2:	fb17 f703 	smulbb	r7, r7, r3
 80191e6:	f8d8 3000 	ldr.w	r3, [r8]
 80191ea:	441d      	add	r5, r3
 80191ec:	4628      	mov	r0, r5
 80191ee:	f7f8 f85c 	bl	80112aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80191f2:	b948      	cbnz	r0, 8019208 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80191f4:	88ab      	ldrh	r3, [r5, #4]
 80191f6:	88ea      	ldrh	r2, [r5, #6]
 80191f8:	fb13 f302 	smulbb	r3, r3, r2
 80191fc:	42bb      	cmp	r3, r7
 80191fe:	f6bf af7c 	bge.w	80190fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8019202:	e79e      	b.n	8019142 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8019204:	2700      	movs	r7, #0
 8019206:	e7ee      	b.n	80191e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8019208:	2300      	movs	r3, #0
 801920a:	e7f7      	b.n	80191fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801920c:	2400eabc 	.word	0x2400eabc
 8019210:	2400eaa4 	.word	0x2400eaa4

08019214 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8019214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019216:	4c24      	ldr	r4, [pc, #144]	; (80192a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8019218:	6823      	ldr	r3, [r4, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d042      	beq.n	80192a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801921e:	4a23      	ldr	r2, [pc, #140]	; (80192ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8019220:	4d23      	ldr	r5, [pc, #140]	; (80192b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8019222:	8811      	ldrh	r1, [r2, #0]
 8019224:	f8b5 c000 	ldrh.w	ip, [r5]
 8019228:	4822      	ldr	r0, [pc, #136]	; (80192b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801922a:	4461      	add	r1, ip
 801922c:	1c4a      	adds	r2, r1, #1
 801922e:	008f      	lsls	r7, r1, #2
 8019230:	f022 0201 	bic.w	r2, r2, #1
 8019234:	19de      	adds	r6, r3, r7
 8019236:	0412      	lsls	r2, r2, #16
 8019238:	6006      	str	r6, [r0, #0]
 801923a:	4e1f      	ldr	r6, [pc, #124]	; (80192b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801923c:	0c12      	lsrs	r2, r2, #16
 801923e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8019242:	19da      	adds	r2, r3, r7
 8019244:	6032      	str	r2, [r6, #0]
 8019246:	220e      	movs	r2, #14
 8019248:	fb02 f20c 	mul.w	r2, r2, ip
 801924c:	3203      	adds	r2, #3
 801924e:	f022 0203 	bic.w	r2, r2, #3
 8019252:	443a      	add	r2, r7
 8019254:	4f19      	ldr	r7, [pc, #100]	; (80192bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8019256:	4413      	add	r3, r2
 8019258:	603b      	str	r3, [r7, #0]
 801925a:	2300      	movs	r3, #0
 801925c:	4f18      	ldr	r7, [pc, #96]	; (80192c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801925e:	469c      	mov	ip, r3
 8019260:	803b      	strh	r3, [r7, #0]
 8019262:	4f18      	ldr	r7, [pc, #96]	; (80192c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8019264:	683f      	ldr	r7, [r7, #0]
 8019266:	1aba      	subs	r2, r7, r2
 8019268:	4f17      	ldr	r7, [pc, #92]	; (80192c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801926a:	603a      	str	r2, [r7, #0]
 801926c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8019270:	4a16      	ldr	r2, [pc, #88]	; (80192cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8019272:	8013      	strh	r3, [r2, #0]
 8019274:	428b      	cmp	r3, r1
 8019276:	d10d      	bne.n	8019294 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8019278:	882d      	ldrh	r5, [r5, #0]
 801927a:	2300      	movs	r3, #0
 801927c:	6830      	ldr	r0, [r6, #0]
 801927e:	240e      	movs	r4, #14
 8019280:	429d      	cmp	r5, r3
 8019282:	d90f      	bls.n	80192a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8019284:	fb04 0203 	mla	r2, r4, r3, r0
 8019288:	3301      	adds	r3, #1
 801928a:	7b11      	ldrb	r1, [r2, #12]
 801928c:	f36f 1145 	bfc	r1, #5, #1
 8019290:	7311      	strb	r1, [r2, #12]
 8019292:	e7f5      	b.n	8019280 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8019294:	6822      	ldr	r2, [r4, #0]
 8019296:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801929a:	6802      	ldr	r2, [r0, #0]
 801929c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80192a0:	3301      	adds	r3, #1
 80192a2:	e7e7      	b.n	8019274 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80192a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192a6:	bf00      	nop
 80192a8:	2400eaa0 	.word	0x2400eaa0
 80192ac:	2400eabc 	.word	0x2400eabc
 80192b0:	2400eac0 	.word	0x2400eac0
 80192b4:	2400eab4 	.word	0x2400eab4
 80192b8:	2400eaa4 	.word	0x2400eaa4
 80192bc:	2400eaac 	.word	0x2400eaac
 80192c0:	2400eabe 	.word	0x2400eabe
 80192c4:	2400eaa8 	.word	0x2400eaa8
 80192c8:	2400eab8 	.word	0x2400eab8
 80192cc:	2400eab0 	.word	0x2400eab0

080192d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80192d0:	4b06      	ldr	r3, [pc, #24]	; (80192ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	b943      	cbnz	r3, 80192e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80192d6:	b139      	cbz	r1, 80192e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80192d8:	4b05      	ldr	r3, [pc, #20]	; (80192f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80192da:	801a      	strh	r2, [r3, #0]
 80192dc:	4b05      	ldr	r3, [pc, #20]	; (80192f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80192de:	6019      	str	r1, [r3, #0]
 80192e0:	4b05      	ldr	r3, [pc, #20]	; (80192f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80192e2:	6018      	str	r0, [r3, #0]
 80192e4:	f7ff bf96 	b.w	8019214 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop
 80192ec:	2400eaac 	.word	0x2400eaac
 80192f0:	2400eac0 	.word	0x2400eac0
 80192f4:	2400eaa8 	.word	0x2400eaa8
 80192f8:	2400eaa0 	.word	0x2400eaa0

080192fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80192fc:	b470      	push	{r4, r5, r6}
 80192fe:	4c07      	ldr	r4, [pc, #28]	; (801931c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8019300:	4605      	mov	r5, r0
 8019302:	4610      	mov	r0, r2
 8019304:	9a03      	ldr	r2, [sp, #12]
 8019306:	6826      	ldr	r6, [r4, #0]
 8019308:	b936      	cbnz	r6, 8019318 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801930a:	6025      	str	r5, [r4, #0]
 801930c:	4c04      	ldr	r4, [pc, #16]	; (8019320 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801930e:	8021      	strh	r1, [r4, #0]
 8019310:	4619      	mov	r1, r3
 8019312:	bc70      	pop	{r4, r5, r6}
 8019314:	f7ff bfdc 	b.w	80192d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8019318:	bc70      	pop	{r4, r5, r6}
 801931a:	4770      	bx	lr
 801931c:	2400eac4 	.word	0x2400eac4
 8019320:	2400eabc 	.word	0x2400eabc

08019324 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8019324:	4a12      	ldr	r2, [pc, #72]	; (8019370 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8019326:	8803      	ldrh	r3, [r0, #0]
 8019328:	8812      	ldrh	r2, [r2, #0]
 801932a:	4293      	cmp	r3, r2
 801932c:	d207      	bcs.n	801933e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801932e:	4a11      	ldr	r2, [pc, #68]	; (8019374 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8019330:	2114      	movs	r1, #20
 8019332:	6812      	ldr	r2, [r2, #0]
 8019334:	fb01 2303 	mla	r3, r1, r3, r2
 8019338:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801933c:	4770      	bx	lr
 801933e:	490e      	ldr	r1, [pc, #56]	; (8019378 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8019340:	8809      	ldrh	r1, [r1, #0]
 8019342:	4411      	add	r1, r2
 8019344:	428b      	cmp	r3, r1
 8019346:	da04      	bge.n	8019352 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8019348:	1a9b      	subs	r3, r3, r2
 801934a:	4a0c      	ldr	r2, [pc, #48]	; (801937c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801934c:	210e      	movs	r1, #14
 801934e:	6812      	ldr	r2, [r2, #0]
 8019350:	e7f0      	b.n	8019334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8019352:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019356:	4293      	cmp	r3, r2
 8019358:	d108      	bne.n	801936c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801935a:	4b09      	ldr	r3, [pc, #36]	; (8019380 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	b91b      	cbnz	r3, 8019368 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8019360:	4b08      	ldr	r3, [pc, #32]	; (8019384 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8019362:	f9b3 0000 	ldrsh.w	r0, [r3]
 8019366:	4770      	bx	lr
 8019368:	4b07      	ldr	r3, [pc, #28]	; (8019388 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801936a:	e7fa      	b.n	8019362 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801936c:	2000      	movs	r0, #0
 801936e:	4770      	bx	lr
 8019370:	2400eabc 	.word	0x2400eabc
 8019374:	2400eac4 	.word	0x2400eac4
 8019378:	2400eac0 	.word	0x2400eac0
 801937c:	2400eaa4 	.word	0x2400eaa4
 8019380:	2400ea2c 	.word	0x2400ea2c
 8019384:	2400ea2e 	.word	0x2400ea2e
 8019388:	2400ea30 	.word	0x2400ea30

0801938c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801938c:	4a12      	ldr	r2, [pc, #72]	; (80193d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801938e:	8803      	ldrh	r3, [r0, #0]
 8019390:	8812      	ldrh	r2, [r2, #0]
 8019392:	4293      	cmp	r3, r2
 8019394:	d207      	bcs.n	80193a6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8019396:	4a11      	ldr	r2, [pc, #68]	; (80193dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8019398:	2114      	movs	r1, #20
 801939a:	6812      	ldr	r2, [r2, #0]
 801939c:	fb01 2303 	mla	r3, r1, r3, r2
 80193a0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80193a4:	4770      	bx	lr
 80193a6:	490e      	ldr	r1, [pc, #56]	; (80193e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80193a8:	8809      	ldrh	r1, [r1, #0]
 80193aa:	4411      	add	r1, r2
 80193ac:	428b      	cmp	r3, r1
 80193ae:	da04      	bge.n	80193ba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80193b0:	1a9b      	subs	r3, r3, r2
 80193b2:	4a0c      	ldr	r2, [pc, #48]	; (80193e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80193b4:	210e      	movs	r1, #14
 80193b6:	6812      	ldr	r2, [r2, #0]
 80193b8:	e7f0      	b.n	801939c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80193ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80193be:	4293      	cmp	r3, r2
 80193c0:	d108      	bne.n	80193d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80193c2:	4b09      	ldr	r3, [pc, #36]	; (80193e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80193c4:	781b      	ldrb	r3, [r3, #0]
 80193c6:	b91b      	cbnz	r3, 80193d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80193c8:	4b08      	ldr	r3, [pc, #32]	; (80193ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80193ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 80193ce:	4770      	bx	lr
 80193d0:	4b07      	ldr	r3, [pc, #28]	; (80193f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80193d2:	e7fa      	b.n	80193ca <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80193d4:	2000      	movs	r0, #0
 80193d6:	4770      	bx	lr
 80193d8:	2400eabc 	.word	0x2400eabc
 80193dc:	2400eac4 	.word	0x2400eac4
 80193e0:	2400eac0 	.word	0x2400eac0
 80193e4:	2400eaa4 	.word	0x2400eaa4
 80193e8:	2400ea2c 	.word	0x2400ea2c
 80193ec:	2400ea30 	.word	0x2400ea30
 80193f0:	2400ea2e 	.word	0x2400ea2e

080193f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80193f4:	4a1f      	ldr	r2, [pc, #124]	; (8019474 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80193f6:	b510      	push	{r4, lr}
 80193f8:	880b      	ldrh	r3, [r1, #0]
 80193fa:	8812      	ldrh	r2, [r2, #0]
 80193fc:	4293      	cmp	r3, r2
 80193fe:	d213      	bcs.n	8019428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8019400:	4a1d      	ldr	r2, [pc, #116]	; (8019478 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8019402:	2114      	movs	r1, #20
 8019404:	6812      	ldr	r2, [r2, #0]
 8019406:	fb01 2303 	mla	r3, r1, r3, r2
 801940a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801940e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8019412:	8a1a      	ldrh	r2, [r3, #16]
 8019414:	8a5b      	ldrh	r3, [r3, #18]
 8019416:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801941a:	8004      	strh	r4, [r0, #0]
 801941c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019420:	8041      	strh	r1, [r0, #2]
 8019422:	8082      	strh	r2, [r0, #4]
 8019424:	80c3      	strh	r3, [r0, #6]
 8019426:	e00e      	b.n	8019446 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019428:	4914      	ldr	r1, [pc, #80]	; (801947c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801942a:	8809      	ldrh	r1, [r1, #0]
 801942c:	4411      	add	r1, r2
 801942e:	428b      	cmp	r3, r1
 8019430:	da0a      	bge.n	8019448 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8019432:	1a9b      	subs	r3, r3, r2
 8019434:	4a12      	ldr	r2, [pc, #72]	; (8019480 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8019436:	210e      	movs	r1, #14
 8019438:	6812      	ldr	r2, [r2, #0]
 801943a:	fb01 2303 	mla	r3, r1, r3, r2
 801943e:	681a      	ldr	r2, [r3, #0]
 8019440:	6002      	str	r2, [r0, #0]
 8019442:	685a      	ldr	r2, [r3, #4]
 8019444:	6042      	str	r2, [r0, #4]
 8019446:	bd10      	pop	{r4, pc}
 8019448:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801944c:	4293      	cmp	r3, r2
 801944e:	d10b      	bne.n	8019468 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8019450:	4b0c      	ldr	r3, [pc, #48]	; (8019484 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8019452:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019456:	4b0c      	ldr	r3, [pc, #48]	; (8019488 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8019458:	8081      	strh	r1, [r0, #4]
 801945a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801945e:	2300      	movs	r3, #0
 8019460:	80c2      	strh	r2, [r0, #6]
 8019462:	8003      	strh	r3, [r0, #0]
 8019464:	8043      	strh	r3, [r0, #2]
 8019466:	e7ee      	b.n	8019446 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8019468:	2300      	movs	r3, #0
 801946a:	8003      	strh	r3, [r0, #0]
 801946c:	8043      	strh	r3, [r0, #2]
 801946e:	8083      	strh	r3, [r0, #4]
 8019470:	e7d8      	b.n	8019424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8019472:	bf00      	nop
 8019474:	2400eabc 	.word	0x2400eabc
 8019478:	2400eac4 	.word	0x2400eac4
 801947c:	2400eac0 	.word	0x2400eac0
 8019480:	2400eaa4 	.word	0x2400eaa4
 8019484:	2400ea28 	.word	0x2400ea28
 8019488:	2400ea2a 	.word	0x2400ea2a

0801948c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801948c:	4a12      	ldr	r2, [pc, #72]	; (80194d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801948e:	8803      	ldrh	r3, [r0, #0]
 8019490:	8811      	ldrh	r1, [r2, #0]
 8019492:	428b      	cmp	r3, r1
 8019494:	d20b      	bcs.n	80194ae <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8019496:	4a11      	ldr	r2, [pc, #68]	; (80194dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8019498:	6812      	ldr	r2, [r2, #0]
 801949a:	b112      	cbz	r2, 80194a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801949c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80194a0:	b9c0      	cbnz	r0, 80194d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80194a2:	4a0f      	ldr	r2, [pc, #60]	; (80194e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80194a4:	6811      	ldr	r1, [r2, #0]
 80194a6:	2214      	movs	r2, #20
 80194a8:	4353      	muls	r3, r2
 80194aa:	58c8      	ldr	r0, [r1, r3]
 80194ac:	4770      	bx	lr
 80194ae:	4a0d      	ldr	r2, [pc, #52]	; (80194e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80194b0:	8812      	ldrh	r2, [r2, #0]
 80194b2:	440a      	add	r2, r1
 80194b4:	4293      	cmp	r3, r2
 80194b6:	da04      	bge.n	80194c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80194b8:	4a08      	ldr	r2, [pc, #32]	; (80194dc <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80194ba:	6812      	ldr	r2, [r2, #0]
 80194bc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80194c0:	4770      	bx	lr
 80194c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80194c6:	4293      	cmp	r3, r2
 80194c8:	d103      	bne.n	80194d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80194ca:	4b07      	ldr	r3, [pc, #28]	; (80194e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80194d0:	4770      	bx	lr
 80194d2:	2000      	movs	r0, #0
 80194d4:	4770      	bx	lr
 80194d6:	bf00      	nop
 80194d8:	2400eabc 	.word	0x2400eabc
 80194dc:	2400eaa0 	.word	0x2400eaa0
 80194e0:	2400eac4 	.word	0x2400eac4
 80194e4:	2400eac0 	.word	0x2400eac0
 80194e8:	2400ea34 	.word	0x2400ea34

080194ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80194ec:	4b24      	ldr	r3, [pc, #144]	; (8019580 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80194ee:	8802      	ldrh	r2, [r0, #0]
 80194f0:	8818      	ldrh	r0, [r3, #0]
 80194f2:	4282      	cmp	r2, r0
 80194f4:	d221      	bcs.n	801953a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80194f6:	4b23      	ldr	r3, [pc, #140]	; (8019584 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80194f8:	6819      	ldr	r1, [r3, #0]
 80194fa:	2314      	movs	r3, #20
 80194fc:	fb03 1302 	mla	r3, r3, r2, r1
 8019500:	6858      	ldr	r0, [r3, #4]
 8019502:	2800      	cmp	r0, #0
 8019504:	d03a      	beq.n	801957c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019506:	4920      	ldr	r1, [pc, #128]	; (8019588 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019508:	6809      	ldr	r1, [r1, #0]
 801950a:	2900      	cmp	r1, #0
 801950c:	d036      	beq.n	801957c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801950e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8019512:	2900      	cmp	r1, #0
 8019514:	d032      	beq.n	801957c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8019516:	891a      	ldrh	r2, [r3, #8]
 8019518:	8958      	ldrh	r0, [r3, #10]
 801951a:	4350      	muls	r0, r2
 801951c:	7c5a      	ldrb	r2, [r3, #17]
 801951e:	7cdb      	ldrb	r3, [r3, #19]
 8019520:	0952      	lsrs	r2, r2, #5
 8019522:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8019526:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801952a:	2b0b      	cmp	r3, #11
 801952c:	bf18      	it	ne
 801952e:	0040      	lslne	r0, r0, #1
 8019530:	3003      	adds	r0, #3
 8019532:	f020 0003 	bic.w	r0, r0, #3
 8019536:	4408      	add	r0, r1
 8019538:	4770      	bx	lr
 801953a:	4b14      	ldr	r3, [pc, #80]	; (801958c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801953c:	881b      	ldrh	r3, [r3, #0]
 801953e:	4403      	add	r3, r0
 8019540:	429a      	cmp	r2, r3
 8019542:	da1a      	bge.n	801957a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019544:	4b12      	ldr	r3, [pc, #72]	; (8019590 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8019546:	1a10      	subs	r0, r2, r0
 8019548:	210e      	movs	r1, #14
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	fb01 3000 	mla	r0, r1, r0, r3
 8019550:	7b03      	ldrb	r3, [r0, #12]
 8019552:	f003 031f 	and.w	r3, r3, #31
 8019556:	2b0b      	cmp	r3, #11
 8019558:	d10b      	bne.n	8019572 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801955a:	8903      	ldrh	r3, [r0, #8]
 801955c:	8940      	ldrh	r0, [r0, #10]
 801955e:	4358      	muls	r0, r3
 8019560:	4b09      	ldr	r3, [pc, #36]	; (8019588 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8019562:	3003      	adds	r0, #3
 8019564:	6819      	ldr	r1, [r3, #0]
 8019566:	f020 0303 	bic.w	r3, r0, #3
 801956a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801956e:	4418      	add	r0, r3
 8019570:	4770      	bx	lr
 8019572:	2b0d      	cmp	r3, #13
 8019574:	d101      	bne.n	801957a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8019576:	300d      	adds	r0, #13
 8019578:	4770      	bx	lr
 801957a:	2000      	movs	r0, #0
 801957c:	4770      	bx	lr
 801957e:	bf00      	nop
 8019580:	2400eabc 	.word	0x2400eabc
 8019584:	2400eac4 	.word	0x2400eac4
 8019588:	2400eaa0 	.word	0x2400eaa0
 801958c:	2400eac0 	.word	0x2400eac0
 8019590:	2400eaa4 	.word	0x2400eaa4

08019594 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8019594:	4a17      	ldr	r2, [pc, #92]	; (80195f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8019596:	b510      	push	{r4, lr}
 8019598:	8803      	ldrh	r3, [r0, #0]
 801959a:	8812      	ldrh	r2, [r2, #0]
 801959c:	4293      	cmp	r3, r2
 801959e:	d20c      	bcs.n	80195ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80195a0:	4a15      	ldr	r2, [pc, #84]	; (80195f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80195a2:	2114      	movs	r1, #20
 80195a4:	6812      	ldr	r2, [r2, #0]
 80195a6:	fb01 2303 	mla	r3, r1, r3, r2
 80195aa:	7c58      	ldrb	r0, [r3, #17]
 80195ac:	0942      	lsrs	r2, r0, #5
 80195ae:	7cd8      	ldrb	r0, [r3, #19]
 80195b0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80195b4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80195b8:	bd10      	pop	{r4, pc}
 80195ba:	4910      	ldr	r1, [pc, #64]	; (80195fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80195bc:	8809      	ldrh	r1, [r1, #0]
 80195be:	4411      	add	r1, r2
 80195c0:	428b      	cmp	r3, r1
 80195c2:	da09      	bge.n	80195d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80195c4:	1a9b      	subs	r3, r3, r2
 80195c6:	4a0e      	ldr	r2, [pc, #56]	; (8019600 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80195c8:	210e      	movs	r1, #14
 80195ca:	6812      	ldr	r2, [r2, #0]
 80195cc:	fb01 2303 	mla	r3, r1, r3, r2
 80195d0:	7b18      	ldrb	r0, [r3, #12]
 80195d2:	f000 001f 	and.w	r0, r0, #31
 80195d6:	e7ef      	b.n	80195b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80195d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80195dc:	4293      	cmp	r3, r2
 80195de:	d106      	bne.n	80195ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80195e0:	f7f8 f8f0 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 80195e4:	6803      	ldr	r3, [r0, #0]
 80195e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ec:	4718      	bx	r3
 80195ee:	2000      	movs	r0, #0
 80195f0:	e7e2      	b.n	80195b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80195f2:	bf00      	nop
 80195f4:	2400eabc 	.word	0x2400eabc
 80195f8:	2400eac4 	.word	0x2400eac4
 80195fc:	2400eac0 	.word	0x2400eac0
 8019600:	2400eaa4 	.word	0x2400eaa4

08019604 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8019604:	2018      	movs	r0, #24
 8019606:	4770      	bx	lr

08019608 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8019608:	2001      	movs	r0, #1
 801960a:	4770      	bx	lr

0801960c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801960c:	4b02      	ldr	r3, [pc, #8]	; (8019618 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801960e:	8818      	ldrh	r0, [r3, #0]
 8019610:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019614:	b280      	uxth	r0, r0
 8019616:	4770      	bx	lr
 8019618:	2400ea2e 	.word	0x2400ea2e

0801961c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801961c:	2bff      	cmp	r3, #255	; 0xff
 801961e:	d040      	beq.n	80196a2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8019620:	2a2c      	cmp	r2, #44	; 0x2c
 8019622:	d02a      	beq.n	801967a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8019624:	d80f      	bhi.n	8019646 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8019626:	2a08      	cmp	r2, #8
 8019628:	d037      	beq.n	801969a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801962a:	d805      	bhi.n	8019638 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801962c:	2a04      	cmp	r2, #4
 801962e:	d032      	beq.n	8019696 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8019630:	2a05      	cmp	r2, #5
 8019632:	d02e      	beq.n	8019692 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8019634:	2000      	movs	r0, #0
 8019636:	4770      	bx	lr
 8019638:	2a0a      	cmp	r2, #10
 801963a:	d02e      	beq.n	801969a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801963c:	d301      	bcc.n	8019642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801963e:	2a0b      	cmp	r2, #11
 8019640:	d1f8      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019642:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8019644:	4770      	bx	lr
 8019646:	2a30      	cmp	r2, #48	; 0x30
 8019648:	d029      	beq.n	801969e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801964a:	d808      	bhi.n	801965e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801964c:	2a2e      	cmp	r2, #46	; 0x2e
 801964e:	684b      	ldr	r3, [r1, #4]
 8019650:	d01a      	beq.n	8019688 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8019652:	d90b      	bls.n	801966c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8019654:	781b      	ldrb	r3, [r3, #0]
 8019656:	2b00      	cmp	r3, #0
 8019658:	d1ec      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801965a:	6a00      	ldr	r0, [r0, #32]
 801965c:	4770      	bx	lr
 801965e:	2a32      	cmp	r2, #50	; 0x32
 8019660:	d01d      	beq.n	801969e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8019662:	d301      	bcc.n	8019668 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8019664:	2a33      	cmp	r2, #51	; 0x33
 8019666:	d1e5      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019668:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801966a:	4770      	bx	lr
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d0f3      	beq.n	801965a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8019672:	2b01      	cmp	r3, #1
 8019674:	d1de      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019676:	6900      	ldr	r0, [r0, #16]
 8019678:	4770      	bx	lr
 801967a:	684b      	ldr	r3, [r1, #4]
 801967c:	781b      	ldrb	r3, [r3, #0]
 801967e:	b133      	cbz	r3, 801968e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8019680:	2b01      	cmp	r3, #1
 8019682:	d1d7      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019684:	6880      	ldr	r0, [r0, #8]
 8019686:	4770      	bx	lr
 8019688:	781b      	ldrb	r3, [r3, #0]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d1d2      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801968e:	6980      	ldr	r0, [r0, #24]
 8019690:	4770      	bx	lr
 8019692:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019694:	4770      	bx	lr
 8019696:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019698:	4770      	bx	lr
 801969a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801969c:	4770      	bx	lr
 801969e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80196a0:	4770      	bx	lr
 80196a2:	2a2c      	cmp	r2, #44	; 0x2c
 80196a4:	d02a      	beq.n	80196fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80196a6:	d80f      	bhi.n	80196c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80196a8:	2a08      	cmp	r2, #8
 80196aa:	d035      	beq.n	8019718 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80196ac:	d805      	bhi.n	80196ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80196ae:	2a04      	cmp	r2, #4
 80196b0:	d030      	beq.n	8019714 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80196b2:	2a05      	cmp	r2, #5
 80196b4:	d1be      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80196b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80196b8:	4770      	bx	lr
 80196ba:	2a0a      	cmp	r2, #10
 80196bc:	d02c      	beq.n	8019718 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80196be:	d301      	bcc.n	80196c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 80196c0:	2a0b      	cmp	r2, #11
 80196c2:	d1b7      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80196c4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80196c6:	4770      	bx	lr
 80196c8:	2a30      	cmp	r2, #48	; 0x30
 80196ca:	d027      	beq.n	801971c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80196cc:	d808      	bhi.n	80196e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 80196ce:	2a2e      	cmp	r2, #46	; 0x2e
 80196d0:	684b      	ldr	r3, [r1, #4]
 80196d2:	d01a      	beq.n	801970a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80196d4:	d90b      	bls.n	80196ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d1ab      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80196dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80196de:	4770      	bx	lr
 80196e0:	2a32      	cmp	r2, #50	; 0x32
 80196e2:	d01b      	beq.n	801971c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 80196e4:	d301      	bcc.n	80196ea <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 80196e6:	2a33      	cmp	r2, #51	; 0x33
 80196e8:	d1a4      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80196ea:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80196ec:	4770      	bx	lr
 80196ee:	781b      	ldrb	r3, [r3, #0]
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d0f3      	beq.n	80196dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80196f4:	2b01      	cmp	r3, #1
 80196f6:	d19d      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80196f8:	6940      	ldr	r0, [r0, #20]
 80196fa:	4770      	bx	lr
 80196fc:	684b      	ldr	r3, [r1, #4]
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	b133      	cbz	r3, 8019710 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8019702:	2b01      	cmp	r3, #1
 8019704:	d196      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019706:	68c0      	ldr	r0, [r0, #12]
 8019708:	4770      	bx	lr
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d191      	bne.n	8019634 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8019710:	69c0      	ldr	r0, [r0, #28]
 8019712:	4770      	bx	lr
 8019714:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019716:	4770      	bx	lr
 8019718:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801971a:	4770      	bx	lr
 801971c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801971e:	4770      	bx	lr

08019720 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019724:	b085      	sub	sp, #20
 8019726:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8019728:	9203      	str	r2, [sp, #12]
 801972a:	6870      	ldr	r0, [r6, #4]
 801972c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019730:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8019734:	9101      	str	r1, [sp, #4]
 8019736:	fa1f f885 	uxth.w	r8, r5
 801973a:	43ed      	mvns	r5, r5
 801973c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019740:	b2ed      	uxtb	r5, r5
 8019742:	fb00 2404 	mla	r4, r0, r4, r2
 8019746:	6832      	ldr	r2, [r6, #0]
 8019748:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801974c:	4414      	add	r4, r2
 801974e:	f8dc 2000 	ldr.w	r2, [ip]
 8019752:	9202      	str	r2, [sp, #8]
 8019754:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019758:	f102 0e04 	add.w	lr, r2, #4
 801975c:	9a01      	ldr	r2, [sp, #4]
 801975e:	2a00      	cmp	r2, #0
 8019760:	dc03      	bgt.n	801976a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019762:	9a03      	ldr	r2, [sp, #12]
 8019764:	2a00      	cmp	r2, #0
 8019766:	f340 8116 	ble.w	8019996 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801976a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801976c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8019770:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019776:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801977a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801977e:	2b00      	cmp	r3, #0
 8019780:	dd0e      	ble.n	80197a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019782:	1406      	asrs	r6, r0, #16
 8019784:	d405      	bmi.n	8019792 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019786:	4556      	cmp	r6, sl
 8019788:	da03      	bge.n	8019792 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801978a:	1416      	asrs	r6, r2, #16
 801978c:	d401      	bmi.n	8019792 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801978e:	454e      	cmp	r6, r9
 8019790:	db07      	blt.n	80197a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019792:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019794:	3b01      	subs	r3, #1
 8019796:	3403      	adds	r4, #3
 8019798:	4430      	add	r0, r6
 801979a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801979c:	4432      	add	r2, r6
 801979e:	e7ee      	b.n	801977e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80197a0:	d063      	beq.n	801986a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80197a2:	1e5e      	subs	r6, r3, #1
 80197a4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80197a6:	fb07 0706 	mla	r7, r7, r6, r0
 80197aa:	143f      	asrs	r7, r7, #16
 80197ac:	d454      	bmi.n	8019858 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80197ae:	4557      	cmp	r7, sl
 80197b0:	da52      	bge.n	8019858 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80197b2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80197b4:	fb07 2606 	mla	r6, r7, r6, r2
 80197b8:	1436      	asrs	r6, r6, #16
 80197ba:	d44d      	bmi.n	8019858 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80197bc:	454e      	cmp	r6, r9
 80197be:	da4b      	bge.n	8019858 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80197c0:	1ce6      	adds	r6, r4, #3
 80197c2:	4699      	mov	r9, r3
 80197c4:	f1b9 0f00 	cmp.w	r9, #0
 80197c8:	f106 0603 	add.w	r6, r6, #3
 80197cc:	dd48      	ble.n	8019860 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80197ce:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80197d2:	1417      	asrs	r7, r2, #16
 80197d4:	9902      	ldr	r1, [sp, #8]
 80197d6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80197da:	f109 39ff 	add.w	r9, r9, #4294967295
 80197de:	fb0b 1707 	mla	r7, fp, r7, r1
 80197e2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80197e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80197e8:	f817 700a 	ldrb.w	r7, [r7, sl]
 80197ec:	fb1b fb05 	smulbb	fp, fp, r5
 80197f0:	4408      	add	r0, r1
 80197f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80197f4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80197f8:	440a      	add	r2, r1
 80197fa:	eb0e 0a07 	add.w	sl, lr, r7
 80197fe:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8019802:	fb07 b708 	mla	r7, r7, r8, fp
 8019806:	b2bf      	uxth	r7, r7
 8019808:	f107 0b01 	add.w	fp, r7, #1
 801980c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019810:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8019814:	fb1b fb05 	smulbb	fp, fp, r5
 8019818:	123f      	asrs	r7, r7, #8
 801981a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801981e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8019822:	fb07 b708 	mla	r7, r7, r8, fp
 8019826:	b2bf      	uxth	r7, r7
 8019828:	f107 0b01 	add.w	fp, r7, #1
 801982c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8019830:	123f      	asrs	r7, r7, #8
 8019832:	f806 7c05 	strb.w	r7, [r6, #-5]
 8019836:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801983a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801983e:	fb1a fa05 	smulbb	sl, sl, r5
 8019842:	fb07 a708 	mla	r7, r7, r8, sl
 8019846:	b2bf      	uxth	r7, r7
 8019848:	f107 0a01 	add.w	sl, r7, #1
 801984c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019850:	123f      	asrs	r7, r7, #8
 8019852:	f806 7c04 	strb.w	r7, [r6, #-4]
 8019856:	e7b5      	b.n	80197c4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019858:	2700      	movs	r7, #0
 801985a:	1bde      	subs	r6, r3, r7
 801985c:	2e00      	cmp	r6, #0
 801985e:	dc42      	bgt.n	80198e6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8019860:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019868:	441c      	add	r4, r3
 801986a:	9b01      	ldr	r3, [sp, #4]
 801986c:	2b00      	cmp	r3, #0
 801986e:	f340 8092 	ble.w	8019996 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019872:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019878:	ee30 0a04 	vadd.f32	s0, s0, s8
 801987c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019880:	eef0 6a62 	vmov.f32	s13, s5
 8019884:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019888:	ee31 1a05 	vadd.f32	s2, s2, s10
 801988c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019890:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8019894:	eef0 6a43 	vmov.f32	s13, s6
 8019898:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801989c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80198a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80198a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80198a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80198ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80198b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80198b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80198b8:	ee12 2a90 	vmov	r2, s5
 80198bc:	eef0 2a47 	vmov.f32	s5, s14
 80198c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80198c4:	ee13 2a10 	vmov	r2, s6
 80198c8:	9311      	str	r3, [sp, #68]	; 0x44
 80198ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198cc:	eeb0 3a67 	vmov.f32	s6, s15
 80198d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80198d4:	9312      	str	r3, [sp, #72]	; 0x48
 80198d6:	9b01      	ldr	r3, [sp, #4]
 80198d8:	9a03      	ldr	r2, [sp, #12]
 80198da:	3b01      	subs	r3, #1
 80198dc:	9301      	str	r3, [sp, #4]
 80198de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80198e0:	bf08      	it	eq
 80198e2:	4613      	moveq	r3, r2
 80198e4:	e73a      	b.n	801975c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80198e6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80198ea:	d44e      	bmi.n	801998a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80198ec:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80198f0:	4556      	cmp	r6, sl
 80198f2:	dd4a      	ble.n	801998a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80198f4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80198f8:	d447      	bmi.n	801998a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80198fa:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80198fe:	4559      	cmp	r1, fp
 8019900:	dd43      	ble.n	801998a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8019902:	fa0f f986 	sxth.w	r9, r6
 8019906:	9902      	ldr	r1, [sp, #8]
 8019908:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801990c:	fb0b 1909 	mla	r9, fp, r9, r1
 8019910:	f814 b006 	ldrb.w	fp, [r4, r6]
 8019914:	f819 900a 	ldrb.w	r9, [r9, sl]
 8019918:	fb1b fb05 	smulbb	fp, fp, r5
 801991c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019920:	eb0e 0a09 	add.w	sl, lr, r9
 8019924:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8019928:	fb09 b908 	mla	r9, r9, r8, fp
 801992c:	fa1f f989 	uxth.w	r9, r9
 8019930:	f109 0b01 	add.w	fp, r9, #1
 8019934:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019938:	ea4f 2929 	mov.w	r9, r9, asr #8
 801993c:	f804 9006 	strb.w	r9, [r4, r6]
 8019940:	4426      	add	r6, r4
 8019942:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019946:	f896 b001 	ldrb.w	fp, [r6, #1]
 801994a:	fb1b fb05 	smulbb	fp, fp, r5
 801994e:	fb09 b908 	mla	r9, r9, r8, fp
 8019952:	fa1f f989 	uxth.w	r9, r9
 8019956:	f109 0b01 	add.w	fp, r9, #1
 801995a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801995e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019962:	f886 9001 	strb.w	r9, [r6, #1]
 8019966:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801996a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801996e:	fb1a fa05 	smulbb	sl, sl, r5
 8019972:	fb09 a908 	mla	r9, r9, r8, sl
 8019976:	fa1f f989 	uxth.w	r9, r9
 801997a:	f109 0a01 	add.w	sl, r9, #1
 801997e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8019982:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019986:	f886 9002 	strb.w	r9, [r6, #2]
 801998a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801998c:	3701      	adds	r7, #1
 801998e:	4408      	add	r0, r1
 8019990:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019992:	440a      	add	r2, r1
 8019994:	e761      	b.n	801985a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019996:	b005      	add	sp, #20
 8019998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801999c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801999c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80199a2:	4693      	mov	fp, r2
 80199a4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80199a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80199aa:	6868      	ldr	r0, [r5, #4]
 80199ac:	6877      	ldr	r7, [r6, #4]
 80199ae:	9100      	str	r1, [sp, #0]
 80199b0:	3704      	adds	r7, #4
 80199b2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80199b6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80199ba:	fb00 2404 	mla	r4, r0, r4, r2
 80199be:	682a      	ldr	r2, [r5, #0]
 80199c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80199c4:	4414      	add	r4, r2
 80199c6:	6832      	ldr	r2, [r6, #0]
 80199c8:	9201      	str	r2, [sp, #4]
 80199ca:	9a00      	ldr	r2, [sp, #0]
 80199cc:	2a00      	cmp	r2, #0
 80199ce:	dc03      	bgt.n	80199d8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80199d0:	f1bb 0f00 	cmp.w	fp, #0
 80199d4:	f340 80bc 	ble.w	8019b50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80199d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80199da:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80199de:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80199e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80199e4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80199e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	dd0c      	ble.n	8019a0a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80199f0:	1405      	asrs	r5, r0, #16
 80199f2:	d405      	bmi.n	8019a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80199f4:	4555      	cmp	r5, sl
 80199f6:	da03      	bge.n	8019a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80199f8:	1415      	asrs	r5, r2, #16
 80199fa:	d401      	bmi.n	8019a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80199fc:	454d      	cmp	r5, r9
 80199fe:	db05      	blt.n	8019a0c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019a00:	4440      	add	r0, r8
 8019a02:	4472      	add	r2, lr
 8019a04:	3b01      	subs	r3, #1
 8019a06:	3403      	adds	r4, #3
 8019a08:	e7f0      	b.n	80199ec <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8019a0a:	d03f      	beq.n	8019a8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8019a0c:	1e5d      	subs	r5, r3, #1
 8019a0e:	fb08 0c05 	mla	ip, r8, r5, r0
 8019a12:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8019a16:	d42e      	bmi.n	8019a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019a18:	45d4      	cmp	ip, sl
 8019a1a:	da2c      	bge.n	8019a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019a1c:	fb0e 2505 	mla	r5, lr, r5, r2
 8019a20:	142d      	asrs	r5, r5, #16
 8019a22:	d428      	bmi.n	8019a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019a24:	454d      	cmp	r5, r9
 8019a26:	da26      	bge.n	8019a76 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8019a28:	1ce5      	adds	r5, r4, #3
 8019a2a:	469c      	mov	ip, r3
 8019a2c:	f1bc 0f00 	cmp.w	ip, #0
 8019a30:	f105 0503 	add.w	r5, r5, #3
 8019a34:	dd25      	ble.n	8019a82 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8019a36:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8019a3a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8019a3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019a42:	4472      	add	r2, lr
 8019a44:	468a      	mov	sl, r1
 8019a46:	9901      	ldr	r1, [sp, #4]
 8019a48:	fb0a 1909 	mla	r9, sl, r9, r1
 8019a4c:	1401      	asrs	r1, r0, #16
 8019a4e:	4440      	add	r0, r8
 8019a50:	f819 9001 	ldrb.w	r9, [r9, r1]
 8019a54:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8019a58:	eb07 0a09 	add.w	sl, r7, r9
 8019a5c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8019a60:	f805 9c06 	strb.w	r9, [r5, #-6]
 8019a64:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8019a68:	f805 9c05 	strb.w	r9, [r5, #-5]
 8019a6c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8019a70:	f805 9c04 	strb.w	r9, [r5, #-4]
 8019a74:	e7da      	b.n	8019a2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019a76:	2500      	movs	r5, #0
 8019a78:	eba3 0c05 	sub.w	ip, r3, r5
 8019a7c:	f1bc 0f00 	cmp.w	ip, #0
 8019a80:	dc3b      	bgt.n	8019afa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8019a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019a86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a8a:	441c      	add	r4, r3
 8019a8c:	9b00      	ldr	r3, [sp, #0]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	dd5e      	ble.n	8019b50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8019a92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019a9c:	eeb0 6a62 	vmov.f32	s12, s5
 8019aa0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019aa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019aa8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019aac:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8019ab0:	eeb0 6a43 	vmov.f32	s12, s6
 8019ab4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ab8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8019abc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ac0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019ac4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019ac8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019acc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019ad0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019ad4:	ee12 2a90 	vmov	r2, s5
 8019ad8:	eef0 2a47 	vmov.f32	s5, s14
 8019adc:	fb92 f8f3 	sdiv	r8, r2, r3
 8019ae0:	ee13 2a10 	vmov	r2, s6
 8019ae4:	eeb0 3a67 	vmov.f32	s6, s15
 8019ae8:	fb92 fef3 	sdiv	lr, r2, r3
 8019aec:	9b00      	ldr	r3, [sp, #0]
 8019aee:	3b01      	subs	r3, #1
 8019af0:	9300      	str	r3, [sp, #0]
 8019af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019af4:	bf08      	it	eq
 8019af6:	465b      	moveq	r3, fp
 8019af8:	e767      	b.n	80199ca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8019afa:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019afe:	d423      	bmi.n	8019b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019b00:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8019b04:	45cc      	cmp	ip, r9
 8019b06:	dd1f      	ble.n	8019b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019b08:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8019b0c:	d41c      	bmi.n	8019b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019b0e:	68f1      	ldr	r1, [r6, #12]
 8019b10:	4551      	cmp	r1, sl
 8019b12:	dd19      	ble.n	8019b48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8019b14:	fa0f fc8c 	sxth.w	ip, ip
 8019b18:	9901      	ldr	r1, [sp, #4]
 8019b1a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8019b1e:	f81c c009 	ldrb.w	ip, [ip, r9]
 8019b22:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019b26:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8019b2a:	eb07 090c 	add.w	r9, r7, ip
 8019b2e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8019b32:	f804 a00c 	strb.w	sl, [r4, ip]
 8019b36:	44a4      	add	ip, r4
 8019b38:	f899 a001 	ldrb.w	sl, [r9, #1]
 8019b3c:	f88c a001 	strb.w	sl, [ip, #1]
 8019b40:	f899 9002 	ldrb.w	r9, [r9, #2]
 8019b44:	f88c 9002 	strb.w	r9, [ip, #2]
 8019b48:	4440      	add	r0, r8
 8019b4a:	4472      	add	r2, lr
 8019b4c:	3501      	adds	r5, #1
 8019b4e:	e793      	b.n	8019a78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8019b50:	b003      	add	sp, #12
 8019b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b5a:	b085      	sub	sp, #20
 8019b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019b62:	9202      	str	r2, [sp, #8]
 8019b64:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019b68:	6860      	ldr	r0, [r4, #4]
 8019b6a:	9203      	str	r2, [sp, #12]
 8019b6c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019b70:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019b74:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8019b78:	fb00 2505 	mla	r5, r0, r5, r2
 8019b7c:	6822      	ldr	r2, [r4, #0]
 8019b7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019b82:	4415      	add	r5, r2
 8019b84:	f8dc 2000 	ldr.w	r2, [ip]
 8019b88:	9200      	str	r2, [sp, #0]
 8019b8a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019b8e:	3204      	adds	r2, #4
 8019b90:	9201      	str	r2, [sp, #4]
 8019b92:	2900      	cmp	r1, #0
 8019b94:	dc03      	bgt.n	8019b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019b96:	9a02      	ldr	r2, [sp, #8]
 8019b98:	2a00      	cmp	r2, #0
 8019b9a:	f340 8127 	ble.w	8019dec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ba0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019ba4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8019ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019baa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019bae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	dd0d      	ble.n	8019bd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019bb6:	1422      	asrs	r2, r4, #16
 8019bb8:	d405      	bmi.n	8019bc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bba:	4542      	cmp	r2, r8
 8019bbc:	da03      	bge.n	8019bc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bbe:	1402      	asrs	r2, r0, #16
 8019bc0:	d401      	bmi.n	8019bc6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019bc2:	42ba      	cmp	r2, r7
 8019bc4:	db06      	blt.n	8019bd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019bc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019bc8:	4474      	add	r4, lr
 8019bca:	3b01      	subs	r3, #1
 8019bcc:	3503      	adds	r5, #3
 8019bce:	4410      	add	r0, r2
 8019bd0:	e7ef      	b.n	8019bb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019bd2:	d075      	beq.n	8019cc0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8019bd4:	1e5a      	subs	r2, r3, #1
 8019bd6:	fb0e 4602 	mla	r6, lr, r2, r4
 8019bda:	1436      	asrs	r6, r6, #16
 8019bdc:	d465      	bmi.n	8019caa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019bde:	4546      	cmp	r6, r8
 8019be0:	da63      	bge.n	8019caa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019be2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019be4:	fb06 0202 	mla	r2, r6, r2, r0
 8019be8:	1412      	asrs	r2, r2, #16
 8019bea:	d45e      	bmi.n	8019caa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019bec:	42ba      	cmp	r2, r7
 8019bee:	da5c      	bge.n	8019caa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8019bf0:	1cef      	adds	r7, r5, #3
 8019bf2:	4699      	mov	r9, r3
 8019bf4:	f1b9 0f00 	cmp.w	r9, #0
 8019bf8:	dd5d      	ble.n	8019cb6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8019bfa:	1402      	asrs	r2, r0, #16
 8019bfc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019c00:	1426      	asrs	r6, r4, #16
 8019c02:	4692      	mov	sl, r2
 8019c04:	9a00      	ldr	r2, [sp, #0]
 8019c06:	fb08 220a 	mla	r2, r8, sl, r2
 8019c0a:	5d92      	ldrb	r2, [r2, r6]
 8019c0c:	9e01      	ldr	r6, [sp, #4]
 8019c0e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8019c12:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8019c16:	d041      	beq.n	8019c9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8019c18:	9a03      	ldr	r2, [sp, #12]
 8019c1a:	fa5f fb86 	uxtb.w	fp, r6
 8019c1e:	fb02 f808 	mul.w	r8, r2, r8
 8019c22:	f108 0201 	add.w	r2, r8, #1
 8019c26:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8019c2a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8019c2e:	1212      	asrs	r2, r2, #8
 8019c30:	fa1f fa82 	uxth.w	sl, r2
 8019c34:	43d2      	mvns	r2, r2
 8019c36:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c3a:	b2d2      	uxtb	r2, r2
 8019c3c:	fb08 b802 	mla	r8, r8, r2, fp
 8019c40:	fa1f f888 	uxth.w	r8, r8
 8019c44:	f108 0b01 	add.w	fp, r8, #1
 8019c48:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c4c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8019c50:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019c54:	fb1b fb0a 	smulbb	fp, fp, sl
 8019c58:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c5c:	fb16 fa0a 	smulbb	sl, r6, sl
 8019c60:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8019c64:	f807 8c03 	strb.w	r8, [r7, #-3]
 8019c68:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8019c6c:	fb06 aa02 	mla	sl, r6, r2, sl
 8019c70:	fb08 b802 	mla	r8, r8, r2, fp
 8019c74:	fa1f fa8a 	uxth.w	sl, sl
 8019c78:	fa1f f888 	uxth.w	r8, r8
 8019c7c:	f10a 0601 	add.w	r6, sl, #1
 8019c80:	f108 0b01 	add.w	fp, r8, #1
 8019c84:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8019c88:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8019c8c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019c90:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019c94:	f807 ac01 	strb.w	sl, [r7, #-1]
 8019c98:	f807 8c02 	strb.w	r8, [r7, #-2]
 8019c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019c9e:	4474      	add	r4, lr
 8019ca0:	3703      	adds	r7, #3
 8019ca2:	f109 39ff 	add.w	r9, r9, #4294967295
 8019ca6:	4410      	add	r0, r2
 8019ca8:	e7a4      	b.n	8019bf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019caa:	f04f 0800 	mov.w	r8, #0
 8019cae:	eba3 0208 	sub.w	r2, r3, r8
 8019cb2:	2a00      	cmp	r2, #0
 8019cb4:	dc3b      	bgt.n	8019d2e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8019cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019cbe:	441d      	add	r5, r3
 8019cc0:	2900      	cmp	r1, #0
 8019cc2:	f340 8093 	ble.w	8019dec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8019cc6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ccc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019cd0:	3901      	subs	r1, #1
 8019cd2:	eeb0 6a62 	vmov.f32	s12, s5
 8019cd6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019cda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019cde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ce2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019ce6:	eeb0 6a43 	vmov.f32	s12, s6
 8019cea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019cee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019cf2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019cf6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019cfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019cfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019d02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019d06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019d0a:	ee12 2a90 	vmov	r2, s5
 8019d0e:	eef0 2a47 	vmov.f32	s5, s14
 8019d12:	fb92 fef3 	sdiv	lr, r2, r3
 8019d16:	ee13 2a10 	vmov	r2, s6
 8019d1a:	eeb0 3a67 	vmov.f32	s6, s15
 8019d1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019d22:	9a02      	ldr	r2, [sp, #8]
 8019d24:	9312      	str	r3, [sp, #72]	; 0x48
 8019d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d28:	bf08      	it	eq
 8019d2a:	4613      	moveq	r3, r2
 8019d2c:	e731      	b.n	8019b92 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019d2e:	1427      	asrs	r7, r4, #16
 8019d30:	d456      	bmi.n	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019d32:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8019d36:	42be      	cmp	r6, r7
 8019d38:	dd52      	ble.n	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019d3a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8019d3e:	d44f      	bmi.n	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019d40:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8019d44:	454a      	cmp	r2, r9
 8019d46:	dd4b      	ble.n	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019d48:	9a00      	ldr	r2, [sp, #0]
 8019d4a:	b236      	sxth	r6, r6
 8019d4c:	fb09 2606 	mla	r6, r9, r6, r2
 8019d50:	5df2      	ldrb	r2, [r6, r7]
 8019d52:	9e01      	ldr	r6, [sp, #4]
 8019d54:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8019d58:	0e3a      	lsrs	r2, r7, #24
 8019d5a:	d041      	beq.n	8019de0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8019d5c:	9e03      	ldr	r6, [sp, #12]
 8019d5e:	fa5f fb87 	uxtb.w	fp, r7
 8019d62:	4372      	muls	r2, r6
 8019d64:	1c56      	adds	r6, r2, #1
 8019d66:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019d6a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8019d6e:	1212      	asrs	r2, r2, #8
 8019d70:	f815 9006 	ldrb.w	r9, [r5, r6]
 8019d74:	fa1f fa82 	uxth.w	sl, r2
 8019d78:	43d2      	mvns	r2, r2
 8019d7a:	fb1b fb0a 	smulbb	fp, fp, sl
 8019d7e:	b2d2      	uxtb	r2, r2
 8019d80:	fb09 b902 	mla	r9, r9, r2, fp
 8019d84:	fa1f f989 	uxth.w	r9, r9
 8019d88:	f109 0b01 	add.w	fp, r9, #1
 8019d8c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019d90:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8019d94:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019d98:	fb1b fb0a 	smulbb	fp, fp, sl
 8019d9c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019da0:	fb17 fa0a 	smulbb	sl, r7, sl
 8019da4:	f805 9006 	strb.w	r9, [r5, r6]
 8019da8:	442e      	add	r6, r5
 8019daa:	78b7      	ldrb	r7, [r6, #2]
 8019dac:	f896 9001 	ldrb.w	r9, [r6, #1]
 8019db0:	fb07 aa02 	mla	sl, r7, r2, sl
 8019db4:	fb09 b902 	mla	r9, r9, r2, fp
 8019db8:	fa1f fa8a 	uxth.w	sl, sl
 8019dbc:	fa1f f989 	uxth.w	r9, r9
 8019dc0:	f10a 0701 	add.w	r7, sl, #1
 8019dc4:	f109 0b01 	add.w	fp, r9, #1
 8019dc8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019dcc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019dd0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8019dd4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019dd8:	f886 a002 	strb.w	sl, [r6, #2]
 8019ddc:	f886 9001 	strb.w	r9, [r6, #1]
 8019de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019de2:	4474      	add	r4, lr
 8019de4:	f108 0801 	add.w	r8, r8, #1
 8019de8:	4410      	add	r0, r2
 8019dea:	e760      	b.n	8019cae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8019dec:	b005      	add	sp, #20
 8019dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019df2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df6:	b085      	sub	sp, #20
 8019df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019dfc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019dfe:	9203      	str	r2, [sp, #12]
 8019e00:	6868      	ldr	r0, [r5, #4]
 8019e02:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019e06:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8019e0a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019e0e:	fb00 2404 	mla	r4, r0, r4, r2
 8019e12:	682a      	ldr	r2, [r5, #0]
 8019e14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019e18:	4414      	add	r4, r2
 8019e1a:	f8dc 2000 	ldr.w	r2, [ip]
 8019e1e:	9201      	str	r2, [sp, #4]
 8019e20:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8019e24:	3204      	adds	r2, #4
 8019e26:	9202      	str	r2, [sp, #8]
 8019e28:	2900      	cmp	r1, #0
 8019e2a:	dc03      	bgt.n	8019e34 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8019e2c:	9a03      	ldr	r2, [sp, #12]
 8019e2e:	2a00      	cmp	r2, #0
 8019e30:	f340 8137 	ble.w	801a0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019e34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019e36:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019e3a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019e3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019e40:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8019e44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	dd0d      	ble.n	8019e68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8019e4c:	1405      	asrs	r5, r0, #16
 8019e4e:	d405      	bmi.n	8019e5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019e50:	4545      	cmp	r5, r8
 8019e52:	da03      	bge.n	8019e5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019e54:	1415      	asrs	r5, r2, #16
 8019e56:	d401      	bmi.n	8019e5c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019e58:	42bd      	cmp	r5, r7
 8019e5a:	db06      	blt.n	8019e6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8019e5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8019e5e:	4470      	add	r0, lr
 8019e60:	3b01      	subs	r3, #1
 8019e62:	3403      	adds	r4, #3
 8019e64:	442a      	add	r2, r5
 8019e66:	e7ef      	b.n	8019e48 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8019e68:	d070      	beq.n	8019f4c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8019e6a:	1e5d      	subs	r5, r3, #1
 8019e6c:	fb0e 0605 	mla	r6, lr, r5, r0
 8019e70:	1436      	asrs	r6, r6, #16
 8019e72:	d462      	bmi.n	8019f3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019e74:	4546      	cmp	r6, r8
 8019e76:	da60      	bge.n	8019f3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019e78:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019e7a:	fb06 2505 	mla	r5, r6, r5, r2
 8019e7e:	142d      	asrs	r5, r5, #16
 8019e80:	d45b      	bmi.n	8019f3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019e82:	42bd      	cmp	r5, r7
 8019e84:	da59      	bge.n	8019f3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8019e86:	1ce5      	adds	r5, r4, #3
 8019e88:	469a      	mov	sl, r3
 8019e8a:	f1ba 0f00 	cmp.w	sl, #0
 8019e8e:	dd58      	ble.n	8019f42 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8019e90:	1416      	asrs	r6, r2, #16
 8019e92:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8019e96:	1407      	asrs	r7, r0, #16
 8019e98:	46b1      	mov	r9, r6
 8019e9a:	9e01      	ldr	r6, [sp, #4]
 8019e9c:	fb08 6609 	mla	r6, r8, r9, r6
 8019ea0:	5df6      	ldrb	r6, [r6, r7]
 8019ea2:	9f02      	ldr	r7, [sp, #8]
 8019ea4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8019ea8:	0e37      	lsrs	r7, r6, #24
 8019eaa:	2fff      	cmp	r7, #255	; 0xff
 8019eac:	f000 80f0 	beq.w	801a090 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8019eb0:	fa5f f887 	uxtb.w	r8, r7
 8019eb4:	b3d7      	cbz	r7, 8019f2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8019eb6:	fa1f f788 	uxth.w	r7, r8
 8019eba:	ea6f 0808 	mvn.w	r8, r8
 8019ebe:	fa5f fb86 	uxtb.w	fp, r6
 8019ec2:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8019ec6:	fa5f f888 	uxtb.w	r8, r8
 8019eca:	fb1b fb07 	smulbb	fp, fp, r7
 8019ece:	fb09 b908 	mla	r9, r9, r8, fp
 8019ed2:	fa1f f989 	uxth.w	r9, r9
 8019ed6:	f109 0b01 	add.w	fp, r9, #1
 8019eda:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019ede:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8019ee2:	fb1b fb08 	smulbb	fp, fp, r8
 8019ee6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019eea:	f805 9c03 	strb.w	r9, [r5, #-3]
 8019eee:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8019ef2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8019ef6:	fb09 b907 	mla	r9, r9, r7, fp
 8019efa:	fa1f f989 	uxth.w	r9, r9
 8019efe:	f109 0b01 	add.w	fp, r9, #1
 8019f02:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8019f06:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019f0a:	f805 9c02 	strb.w	r9, [r5, #-2]
 8019f0e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8019f12:	fb19 f808 	smulbb	r8, r9, r8
 8019f16:	fb06 8607 	mla	r6, r6, r7, r8
 8019f1a:	b2b6      	uxth	r6, r6
 8019f1c:	f106 0801 	add.w	r8, r6, #1
 8019f20:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019f24:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019f28:	f805 8c01 	strb.w	r8, [r5, #-1]
 8019f2c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8019f2e:	4470      	add	r0, lr
 8019f30:	3503      	adds	r5, #3
 8019f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019f36:	4432      	add	r2, r6
 8019f38:	e7a7      	b.n	8019e8a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019f3a:	2600      	movs	r6, #0
 8019f3c:	1b9d      	subs	r5, r3, r6
 8019f3e:	2d00      	cmp	r5, #0
 8019f40:	dc3b      	bgt.n	8019fba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019f42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f4a:	441c      	add	r4, r3
 8019f4c:	2900      	cmp	r1, #0
 8019f4e:	f340 80a8 	ble.w	801a0a2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019f52:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f5c:	3901      	subs	r1, #1
 8019f5e:	eeb0 6a62 	vmov.f32	s12, s5
 8019f62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f6e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019f72:	eeb0 6a43 	vmov.f32	s12, s6
 8019f76:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f7a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019f7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f96:	ee12 2a90 	vmov	r2, s5
 8019f9a:	eef0 2a47 	vmov.f32	s5, s14
 8019f9e:	fb92 fef3 	sdiv	lr, r2, r3
 8019fa2:	ee13 2a10 	vmov	r2, s6
 8019fa6:	eeb0 3a67 	vmov.f32	s6, s15
 8019faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8019fae:	9a03      	ldr	r2, [sp, #12]
 8019fb0:	9312      	str	r3, [sp, #72]	; 0x48
 8019fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fb4:	bf08      	it	eq
 8019fb6:	4613      	moveq	r3, r2
 8019fb8:	e736      	b.n	8019e28 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019fba:	ea5f 4820 	movs.w	r8, r0, asr #16
 8019fbe:	d457      	bmi.n	801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019fc0:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8019fc4:	4547      	cmp	r7, r8
 8019fc6:	dd53      	ble.n	801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019fc8:	ea5f 4922 	movs.w	r9, r2, asr #16
 8019fcc:	d450      	bmi.n	801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019fce:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8019fd2:	454d      	cmp	r5, r9
 8019fd4:	dd4c      	ble.n	801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019fd6:	9d01      	ldr	r5, [sp, #4]
 8019fd8:	b23f      	sxth	r7, r7
 8019fda:	fb09 5707 	mla	r7, r9, r7, r5
 8019fde:	f817 5008 	ldrb.w	r5, [r7, r8]
 8019fe2:	9f02      	ldr	r7, [sp, #8]
 8019fe4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8019fe8:	0e2f      	lsrs	r7, r5, #24
 8019fea:	2fff      	cmp	r7, #255	; 0xff
 8019fec:	d045      	beq.n	801a07a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019fee:	fa5f f987 	uxtb.w	r9, r7
 8019ff2:	b3ef      	cbz	r7, 801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019ff4:	fa1f f889 	uxth.w	r8, r9
 8019ff8:	ea6f 0909 	mvn.w	r9, r9
 8019ffc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a000:	fa5f fb85 	uxtb.w	fp, r5
 801a004:	f814 a007 	ldrb.w	sl, [r4, r7]
 801a008:	fa5f f989 	uxtb.w	r9, r9
 801a00c:	fb1b fb08 	smulbb	fp, fp, r8
 801a010:	fb0a ba09 	mla	sl, sl, r9, fp
 801a014:	fa1f fa8a 	uxth.w	sl, sl
 801a018:	f10a 0b01 	add.w	fp, sl, #1
 801a01c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a020:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a024:	f804 a007 	strb.w	sl, [r4, r7]
 801a028:	4427      	add	r7, r4
 801a02a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801a02e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801a032:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a036:	fb1b fb09 	smulbb	fp, fp, r9
 801a03a:	fb0a ba08 	mla	sl, sl, r8, fp
 801a03e:	fa1f fa8a 	uxth.w	sl, sl
 801a042:	f10a 0b01 	add.w	fp, sl, #1
 801a046:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801a04a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a04e:	f887 a001 	strb.w	sl, [r7, #1]
 801a052:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a056:	fb1a f909 	smulbb	r9, sl, r9
 801a05a:	fb05 9508 	mla	r5, r5, r8, r9
 801a05e:	b2ad      	uxth	r5, r5
 801a060:	f105 0901 	add.w	r9, r5, #1
 801a064:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801a068:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a06c:	f887 9002 	strb.w	r9, [r7, #2]
 801a070:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801a072:	4470      	add	r0, lr
 801a074:	3601      	adds	r6, #1
 801a076:	442a      	add	r2, r5
 801a078:	e760      	b.n	8019f3c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a07a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801a07e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801a082:	55e5      	strb	r5, [r4, r7]
 801a084:	4427      	add	r7, r4
 801a086:	0c2d      	lsrs	r5, r5, #16
 801a088:	f887 8001 	strb.w	r8, [r7, #1]
 801a08c:	70bd      	strb	r5, [r7, #2]
 801a08e:	e7ef      	b.n	801a070 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801a090:	0a37      	lsrs	r7, r6, #8
 801a092:	f805 6c03 	strb.w	r6, [r5, #-3]
 801a096:	0c36      	lsrs	r6, r6, #16
 801a098:	f805 7c02 	strb.w	r7, [r5, #-2]
 801a09c:	f805 6c01 	strb.w	r6, [r5, #-1]
 801a0a0:	e744      	b.n	8019f2c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a0a2:	b005      	add	sp, #20
 801a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a0a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a0a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0ac:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a0ae:	9201      	str	r2, [sp, #4]
 801a0b0:	6870      	ldr	r0, [r6, #4]
 801a0b2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801a0b6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a0ba:	fa1f fe85 	uxth.w	lr, r5
 801a0be:	43ed      	mvns	r5, r5
 801a0c0:	f8dc 8000 	ldr.w	r8, [ip]
 801a0c4:	b2ed      	uxtb	r5, r5
 801a0c6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a0ca:	fb00 2404 	mla	r4, r0, r4, r2
 801a0ce:	6832      	ldr	r2, [r6, #0]
 801a0d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0d4:	4414      	add	r4, r2
 801a0d6:	2900      	cmp	r1, #0
 801a0d8:	dc03      	bgt.n	801a0e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801a0da:	9a01      	ldr	r2, [sp, #4]
 801a0dc:	2a00      	cmp	r2, #0
 801a0de:	f340 810d 	ble.w	801a2fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a0e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a0e4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801a0e8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a0ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a0ee:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801a0f2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	dd0e      	ble.n	801a118 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801a0fa:	1406      	asrs	r6, r0, #16
 801a0fc:	d405      	bmi.n	801a10a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a0fe:	4556      	cmp	r6, sl
 801a100:	da03      	bge.n	801a10a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a102:	1416      	asrs	r6, r2, #16
 801a104:	d401      	bmi.n	801a10a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a106:	454e      	cmp	r6, r9
 801a108:	db07      	blt.n	801a11a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a10a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a10c:	3b01      	subs	r3, #1
 801a10e:	3403      	adds	r4, #3
 801a110:	4430      	add	r0, r6
 801a112:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a114:	4432      	add	r2, r6
 801a116:	e7ee      	b.n	801a0f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801a118:	d060      	beq.n	801a1dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801a11a:	1e5e      	subs	r6, r3, #1
 801a11c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a11e:	fb07 0706 	mla	r7, r7, r6, r0
 801a122:	143f      	asrs	r7, r7, #16
 801a124:	d451      	bmi.n	801a1ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a126:	4557      	cmp	r7, sl
 801a128:	da4f      	bge.n	801a1ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a12a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a12c:	fb07 2606 	mla	r6, r7, r6, r2
 801a130:	1436      	asrs	r6, r6, #16
 801a132:	d44a      	bmi.n	801a1ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a134:	454e      	cmp	r6, r9
 801a136:	da48      	bge.n	801a1ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801a138:	1ce6      	adds	r6, r4, #3
 801a13a:	4699      	mov	r9, r3
 801a13c:	f1b9 0f00 	cmp.w	r9, #0
 801a140:	f106 0603 	add.w	r6, r6, #3
 801a144:	dd45      	ble.n	801a1d2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801a146:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801a14a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a14e:	1417      	asrs	r7, r2, #16
 801a150:	f109 39ff 	add.w	r9, r9, #4294967295
 801a154:	fb0b a707 	mla	r7, fp, r7, sl
 801a158:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801a15c:	fb1b fb05 	smulbb	fp, fp, r5
 801a160:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a164:	eb08 0a07 	add.w	sl, r8, r7
 801a168:	f818 7007 	ldrb.w	r7, [r8, r7]
 801a16c:	fb07 b70e 	mla	r7, r7, lr, fp
 801a170:	b2bf      	uxth	r7, r7
 801a172:	f107 0b01 	add.w	fp, r7, #1
 801a176:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a17a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801a17e:	fb1b fb05 	smulbb	fp, fp, r5
 801a182:	123f      	asrs	r7, r7, #8
 801a184:	f806 7c06 	strb.w	r7, [r6, #-6]
 801a188:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801a18c:	fb07 b70e 	mla	r7, r7, lr, fp
 801a190:	b2bf      	uxth	r7, r7
 801a192:	f107 0b01 	add.w	fp, r7, #1
 801a196:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801a19a:	123f      	asrs	r7, r7, #8
 801a19c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801a1a0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801a1a4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801a1a8:	fb1a fa05 	smulbb	sl, sl, r5
 801a1ac:	fb07 a70e 	mla	r7, r7, lr, sl
 801a1b0:	b2bf      	uxth	r7, r7
 801a1b2:	f107 0a01 	add.w	sl, r7, #1
 801a1b6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801a1ba:	123f      	asrs	r7, r7, #8
 801a1bc:	f806 7c04 	strb.w	r7, [r6, #-4]
 801a1c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a1c2:	4438      	add	r0, r7
 801a1c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a1c6:	443a      	add	r2, r7
 801a1c8:	e7b8      	b.n	801a13c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a1ca:	2700      	movs	r7, #0
 801a1cc:	1bde      	subs	r6, r3, r7
 801a1ce:	2e00      	cmp	r6, #0
 801a1d0:	dc3f      	bgt.n	801a252 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801a1d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a1d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a1da:	441c      	add	r4, r3
 801a1dc:	2900      	cmp	r1, #0
 801a1de:	f340 808d 	ble.w	801a2fc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1ec:	3901      	subs	r1, #1
 801a1ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1f2:	eef0 6a62 	vmov.f32	s13, s5
 801a1f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a1fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a202:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801a206:	eef0 6a43 	vmov.f32	s13, s6
 801a20a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a20e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801a212:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a216:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a21a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a21e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a222:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a226:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a22a:	ee12 2a90 	vmov	r2, s5
 801a22e:	eef0 2a47 	vmov.f32	s5, s14
 801a232:	fb92 f3f3 	sdiv	r3, r2, r3
 801a236:	ee13 2a10 	vmov	r2, s6
 801a23a:	930f      	str	r3, [sp, #60]	; 0x3c
 801a23c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a23e:	eeb0 3a67 	vmov.f32	s6, s15
 801a242:	fb92 f3f3 	sdiv	r3, r2, r3
 801a246:	9a01      	ldr	r2, [sp, #4]
 801a248:	9310      	str	r3, [sp, #64]	; 0x40
 801a24a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a24c:	bf08      	it	eq
 801a24e:	4613      	moveq	r3, r2
 801a250:	e741      	b.n	801a0d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a252:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a256:	d44b      	bmi.n	801a2f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a258:	f8dc b008 	ldr.w	fp, [ip, #8]
 801a25c:	45cb      	cmp	fp, r9
 801a25e:	dd47      	ble.n	801a2f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a260:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a264:	d444      	bmi.n	801a2f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a266:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801a26a:	4556      	cmp	r6, sl
 801a26c:	dd40      	ble.n	801a2f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801a26e:	fa0f f68b 	sxth.w	r6, fp
 801a272:	fb0a 9906 	mla	r9, sl, r6, r9
 801a276:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801a27a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801a27e:	f814 b006 	ldrb.w	fp, [r4, r6]
 801a282:	fb1b fb05 	smulbb	fp, fp, r5
 801a286:	eb08 0a09 	add.w	sl, r8, r9
 801a28a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801a28e:	fb09 b90e 	mla	r9, r9, lr, fp
 801a292:	fa1f f989 	uxth.w	r9, r9
 801a296:	f109 0b01 	add.w	fp, r9, #1
 801a29a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a29e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2a2:	f804 9006 	strb.w	r9, [r4, r6]
 801a2a6:	4426      	add	r6, r4
 801a2a8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801a2ac:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a2b0:	fb1b fb05 	smulbb	fp, fp, r5
 801a2b4:	fb09 b90e 	mla	r9, r9, lr, fp
 801a2b8:	fa1f f989 	uxth.w	r9, r9
 801a2bc:	f109 0b01 	add.w	fp, r9, #1
 801a2c0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a2c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2c8:	f886 9001 	strb.w	r9, [r6, #1]
 801a2cc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801a2d0:	f896 a002 	ldrb.w	sl, [r6, #2]
 801a2d4:	fb1a fa05 	smulbb	sl, sl, r5
 801a2d8:	fb09 a90e 	mla	r9, r9, lr, sl
 801a2dc:	fa1f f989 	uxth.w	r9, r9
 801a2e0:	f109 0a01 	add.w	sl, r9, #1
 801a2e4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801a2e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a2ec:	f886 9002 	strb.w	r9, [r6, #2]
 801a2f0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a2f2:	3701      	adds	r7, #1
 801a2f4:	4430      	add	r0, r6
 801a2f6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a2f8:	4432      	add	r2, r6
 801a2fa:	e767      	b.n	801a1cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801a2fc:	b003      	add	sp, #12
 801a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a302 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a302:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a306:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801a308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a30c:	9201      	str	r2, [sp, #4]
 801a30e:	6868      	ldr	r0, [r5, #4]
 801a310:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801a312:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801a316:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801a31a:	fb00 2404 	mla	r4, r0, r4, r2
 801a31e:	682a      	ldr	r2, [r5, #0]
 801a320:	f8d7 8000 	ldr.w	r8, [r7]
 801a324:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a328:	4414      	add	r4, r2
 801a32a:	2900      	cmp	r1, #0
 801a32c:	dc03      	bgt.n	801a336 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a32e:	9a01      	ldr	r2, [sp, #4]
 801a330:	2a00      	cmp	r2, #0
 801a332:	f340 80af 	ble.w	801a494 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a338:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801a33c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a342:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801a346:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	dd0c      	ble.n	801a368 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801a34e:	1405      	asrs	r5, r0, #16
 801a350:	d405      	bmi.n	801a35e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a352:	4555      	cmp	r5, sl
 801a354:	da03      	bge.n	801a35e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a356:	1415      	asrs	r5, r2, #16
 801a358:	d401      	bmi.n	801a35e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a35a:	454d      	cmp	r5, r9
 801a35c:	db05      	blt.n	801a36a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a35e:	4470      	add	r0, lr
 801a360:	4462      	add	r2, ip
 801a362:	3b01      	subs	r3, #1
 801a364:	3403      	adds	r4, #3
 801a366:	e7f0      	b.n	801a34a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a368:	d038      	beq.n	801a3dc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801a36a:	1e5d      	subs	r5, r3, #1
 801a36c:	fb0e 0605 	mla	r6, lr, r5, r0
 801a370:	1436      	asrs	r6, r6, #16
 801a372:	d42a      	bmi.n	801a3ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a374:	4556      	cmp	r6, sl
 801a376:	da28      	bge.n	801a3ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a378:	fb0c 2505 	mla	r5, ip, r5, r2
 801a37c:	142d      	asrs	r5, r5, #16
 801a37e:	d424      	bmi.n	801a3ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a380:	454d      	cmp	r5, r9
 801a382:	da22      	bge.n	801a3ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801a384:	1ce6      	adds	r6, r4, #3
 801a386:	4699      	mov	r9, r3
 801a388:	f1b9 0f00 	cmp.w	r9, #0
 801a38c:	f106 0603 	add.w	r6, r6, #3
 801a390:	dd1f      	ble.n	801a3d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801a392:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801a396:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801a39a:	1415      	asrs	r5, r2, #16
 801a39c:	4470      	add	r0, lr
 801a39e:	4462      	add	r2, ip
 801a3a0:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3a4:	fb0b a505 	mla	r5, fp, r5, sl
 801a3a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3ac:	eb08 0a05 	add.w	sl, r8, r5
 801a3b0:	f818 5005 	ldrb.w	r5, [r8, r5]
 801a3b4:	f806 5c06 	strb.w	r5, [r6, #-6]
 801a3b8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a3bc:	f806 5c05 	strb.w	r5, [r6, #-5]
 801a3c0:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801a3c4:	f806 5c04 	strb.w	r5, [r6, #-4]
 801a3c8:	e7de      	b.n	801a388 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801a3ca:	2600      	movs	r6, #0
 801a3cc:	1b9d      	subs	r5, r3, r6
 801a3ce:	2d00      	cmp	r5, #0
 801a3d0:	dc38      	bgt.n	801a444 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a3d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a3d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a3da:	441c      	add	r4, r3
 801a3dc:	2900      	cmp	r1, #0
 801a3de:	dd59      	ble.n	801a494 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801a3e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a3e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3ea:	3901      	subs	r1, #1
 801a3ec:	eeb0 6a62 	vmov.f32	s12, s5
 801a3f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a3f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a3fc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a400:	eeb0 6a43 	vmov.f32	s12, s6
 801a404:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a408:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a40c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a410:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a414:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a418:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a41c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a420:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a424:	ee12 2a90 	vmov	r2, s5
 801a428:	eef0 2a47 	vmov.f32	s5, s14
 801a42c:	fb92 fef3 	sdiv	lr, r2, r3
 801a430:	ee13 2a10 	vmov	r2, s6
 801a434:	eeb0 3a67 	vmov.f32	s6, s15
 801a438:	fb92 fcf3 	sdiv	ip, r2, r3
 801a43c:	9a01      	ldr	r2, [sp, #4]
 801a43e:	bf08      	it	eq
 801a440:	4613      	moveq	r3, r2
 801a442:	e772      	b.n	801a32a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a444:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a448:	d420      	bmi.n	801a48c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a44a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801a44e:	45cb      	cmp	fp, r9
 801a450:	dd1c      	ble.n	801a48c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a452:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801a456:	d419      	bmi.n	801a48c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a458:	68fd      	ldr	r5, [r7, #12]
 801a45a:	4555      	cmp	r5, sl
 801a45c:	dd16      	ble.n	801a48c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801a45e:	fa0f f58b 	sxth.w	r5, fp
 801a462:	fb0a 9505 	mla	r5, sl, r5, r9
 801a466:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a46a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801a46e:	eb08 0b05 	add.w	fp, r8, r5
 801a472:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801a476:	f804 9005 	strb.w	r9, [r4, r5]
 801a47a:	4425      	add	r5, r4
 801a47c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801a480:	f885 9001 	strb.w	r9, [r5, #1]
 801a484:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801a488:	f885 9002 	strb.w	r9, [r5, #2]
 801a48c:	4470      	add	r0, lr
 801a48e:	4462      	add	r2, ip
 801a490:	3601      	adds	r6, #1
 801a492:	e79b      	b.n	801a3cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801a494:	b003      	add	sp, #12
 801a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a49a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a49e:	b085      	sub	sp, #20
 801a4a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a4a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a4a6:	9202      	str	r2, [sp, #8]
 801a4a8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801a4ac:	6860      	ldr	r0, [r4, #4]
 801a4ae:	9203      	str	r2, [sp, #12]
 801a4b0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801a4b4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801a4b8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801a4bc:	fb00 2505 	mla	r5, r0, r5, r2
 801a4c0:	6822      	ldr	r2, [r4, #0]
 801a4c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4c6:	4415      	add	r5, r2
 801a4c8:	f8dc 2000 	ldr.w	r2, [ip]
 801a4cc:	9201      	str	r2, [sp, #4]
 801a4ce:	2900      	cmp	r1, #0
 801a4d0:	dc03      	bgt.n	801a4da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801a4d2:	9a02      	ldr	r2, [sp, #8]
 801a4d4:	2a00      	cmp	r2, #0
 801a4d6:	f340 8122 	ble.w	801a71e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a4da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a4dc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a4e0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a4e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a4e6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a4ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	dd0d      	ble.n	801a50e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801a4f2:	1422      	asrs	r2, r4, #16
 801a4f4:	d405      	bmi.n	801a502 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a4f6:	4542      	cmp	r2, r8
 801a4f8:	da03      	bge.n	801a502 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a4fa:	1402      	asrs	r2, r0, #16
 801a4fc:	d401      	bmi.n	801a502 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a4fe:	42ba      	cmp	r2, r7
 801a500:	db06      	blt.n	801a510 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801a502:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a504:	4474      	add	r4, lr
 801a506:	3b01      	subs	r3, #1
 801a508:	3503      	adds	r5, #3
 801a50a:	4410      	add	r0, r2
 801a50c:	e7ef      	b.n	801a4ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801a50e:	d072      	beq.n	801a5f6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801a510:	1e5a      	subs	r2, r3, #1
 801a512:	fb0e 4602 	mla	r6, lr, r2, r4
 801a516:	1436      	asrs	r6, r6, #16
 801a518:	d462      	bmi.n	801a5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a51a:	4546      	cmp	r6, r8
 801a51c:	da60      	bge.n	801a5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a51e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a520:	fb06 0202 	mla	r2, r6, r2, r0
 801a524:	1412      	asrs	r2, r2, #16
 801a526:	d45b      	bmi.n	801a5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a528:	42ba      	cmp	r2, r7
 801a52a:	da59      	bge.n	801a5e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801a52c:	1cef      	adds	r7, r5, #3
 801a52e:	4699      	mov	r9, r3
 801a530:	f1b9 0f00 	cmp.w	r9, #0
 801a534:	dd5a      	ble.n	801a5ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801a536:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801a53a:	1426      	asrs	r6, r4, #16
 801a53c:	1402      	asrs	r2, r0, #16
 801a53e:	fb08 6202 	mla	r2, r8, r2, r6
 801a542:	9e01      	ldr	r6, [sp, #4]
 801a544:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801a548:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801a54c:	d041      	beq.n	801a5d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801a54e:	9a03      	ldr	r2, [sp, #12]
 801a550:	fa5f fb86 	uxtb.w	fp, r6
 801a554:	fb02 f808 	mul.w	r8, r2, r8
 801a558:	f108 0201 	add.w	r2, r8, #1
 801a55c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801a560:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801a564:	1212      	asrs	r2, r2, #8
 801a566:	fa1f fa82 	uxth.w	sl, r2
 801a56a:	43d2      	mvns	r2, r2
 801a56c:	fb1b fb0a 	smulbb	fp, fp, sl
 801a570:	b2d2      	uxtb	r2, r2
 801a572:	fb08 b802 	mla	r8, r8, r2, fp
 801a576:	fa1f f888 	uxth.w	r8, r8
 801a57a:	f108 0b01 	add.w	fp, r8, #1
 801a57e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a582:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801a586:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801a58a:	fb1b fb0a 	smulbb	fp, fp, sl
 801a58e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a592:	fb16 fa0a 	smulbb	sl, r6, sl
 801a596:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801a59a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801a59e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801a5a2:	fb06 aa02 	mla	sl, r6, r2, sl
 801a5a6:	fb08 b802 	mla	r8, r8, r2, fp
 801a5aa:	fa1f fa8a 	uxth.w	sl, sl
 801a5ae:	fa1f f888 	uxth.w	r8, r8
 801a5b2:	f10a 0601 	add.w	r6, sl, #1
 801a5b6:	f108 0b01 	add.w	fp, r8, #1
 801a5ba:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801a5be:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801a5c2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a5c6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a5ca:	f807 ac01 	strb.w	sl, [r7, #-1]
 801a5ce:	f807 8c02 	strb.w	r8, [r7, #-2]
 801a5d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a5d4:	4474      	add	r4, lr
 801a5d6:	3703      	adds	r7, #3
 801a5d8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a5dc:	4410      	add	r0, r2
 801a5de:	e7a7      	b.n	801a530 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a5e0:	f04f 0800 	mov.w	r8, #0
 801a5e4:	eba3 0208 	sub.w	r2, r3, r8
 801a5e8:	2a00      	cmp	r2, #0
 801a5ea:	dc3b      	bgt.n	801a664 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801a5ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a5f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5f4:	441d      	add	r5, r3
 801a5f6:	2900      	cmp	r1, #0
 801a5f8:	f340 8091 	ble.w	801a71e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801a5fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a602:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a606:	3901      	subs	r1, #1
 801a608:	eeb0 6a62 	vmov.f32	s12, s5
 801a60c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a610:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a614:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a618:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801a61c:	eeb0 6a43 	vmov.f32	s12, s6
 801a620:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a624:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801a628:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a62c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a630:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a634:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a638:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a63c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a640:	ee12 2a90 	vmov	r2, s5
 801a644:	eef0 2a47 	vmov.f32	s5, s14
 801a648:	fb92 fef3 	sdiv	lr, r2, r3
 801a64c:	ee13 2a10 	vmov	r2, s6
 801a650:	eeb0 3a67 	vmov.f32	s6, s15
 801a654:	fb92 f3f3 	sdiv	r3, r2, r3
 801a658:	9a02      	ldr	r2, [sp, #8]
 801a65a:	9312      	str	r3, [sp, #72]	; 0x48
 801a65c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a65e:	bf08      	it	eq
 801a660:	4613      	moveq	r3, r2
 801a662:	e734      	b.n	801a4ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a664:	1427      	asrs	r7, r4, #16
 801a666:	d454      	bmi.n	801a712 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a668:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a66c:	42be      	cmp	r6, r7
 801a66e:	dd50      	ble.n	801a712 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a670:	ea5f 4920 	movs.w	r9, r0, asr #16
 801a674:	d44d      	bmi.n	801a712 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a676:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a67a:	454a      	cmp	r2, r9
 801a67c:	dd49      	ble.n	801a712 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a67e:	b236      	sxth	r6, r6
 801a680:	9a01      	ldr	r2, [sp, #4]
 801a682:	fb09 7606 	mla	r6, r9, r6, r7
 801a686:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a68a:	0e3a      	lsrs	r2, r7, #24
 801a68c:	d041      	beq.n	801a712 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801a68e:	9e03      	ldr	r6, [sp, #12]
 801a690:	fa5f fb87 	uxtb.w	fp, r7
 801a694:	4372      	muls	r2, r6
 801a696:	1c56      	adds	r6, r2, #1
 801a698:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801a69c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801a6a0:	1212      	asrs	r2, r2, #8
 801a6a2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801a6a6:	fa1f fa82 	uxth.w	sl, r2
 801a6aa:	43d2      	mvns	r2, r2
 801a6ac:	fb1b fb0a 	smulbb	fp, fp, sl
 801a6b0:	b2d2      	uxtb	r2, r2
 801a6b2:	fb09 b902 	mla	r9, r9, r2, fp
 801a6b6:	fa1f f989 	uxth.w	r9, r9
 801a6ba:	f109 0b01 	add.w	fp, r9, #1
 801a6be:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a6c2:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801a6c6:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801a6ca:	fb1b fb0a 	smulbb	fp, fp, sl
 801a6ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6d2:	fb17 fa0a 	smulbb	sl, r7, sl
 801a6d6:	f805 9006 	strb.w	r9, [r5, r6]
 801a6da:	442e      	add	r6, r5
 801a6dc:	78b7      	ldrb	r7, [r6, #2]
 801a6de:	f896 9001 	ldrb.w	r9, [r6, #1]
 801a6e2:	fb07 aa02 	mla	sl, r7, r2, sl
 801a6e6:	fb09 b902 	mla	r9, r9, r2, fp
 801a6ea:	fa1f fa8a 	uxth.w	sl, sl
 801a6ee:	fa1f f989 	uxth.w	r9, r9
 801a6f2:	f10a 0701 	add.w	r7, sl, #1
 801a6f6:	f109 0b01 	add.w	fp, r9, #1
 801a6fa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a6fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801a702:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a706:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a70a:	f886 a002 	strb.w	sl, [r6, #2]
 801a70e:	f886 9001 	strb.w	r9, [r6, #1]
 801a712:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a714:	4474      	add	r4, lr
 801a716:	f108 0801 	add.w	r8, r8, #1
 801a71a:	4410      	add	r0, r2
 801a71c:	e762      	b.n	801a5e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a71e:	b005      	add	sp, #20
 801a720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a724 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a728:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a72e:	9201      	str	r2, [sp, #4]
 801a730:	6860      	ldr	r0, [r4, #4]
 801a732:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801a736:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801a73a:	fb00 2505 	mla	r5, r0, r5, r2
 801a73e:	6822      	ldr	r2, [r4, #0]
 801a740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a744:	4415      	add	r5, r2
 801a746:	f8dc 2000 	ldr.w	r2, [ip]
 801a74a:	9200      	str	r2, [sp, #0]
 801a74c:	2900      	cmp	r1, #0
 801a74e:	dc03      	bgt.n	801a758 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801a750:	9a01      	ldr	r2, [sp, #4]
 801a752:	2a00      	cmp	r2, #0
 801a754:	f340 812b 	ble.w	801a9ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a75a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a75e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801a762:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a764:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801a768:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	dd0e      	ble.n	801a78e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a770:	1422      	asrs	r2, r4, #16
 801a772:	d405      	bmi.n	801a780 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a774:	4572      	cmp	r2, lr
 801a776:	da03      	bge.n	801a780 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a778:	1402      	asrs	r2, r0, #16
 801a77a:	d401      	bmi.n	801a780 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801a77c:	42ba      	cmp	r2, r7
 801a77e:	db07      	blt.n	801a790 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801a780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a782:	3b01      	subs	r3, #1
 801a784:	3503      	adds	r5, #3
 801a786:	4414      	add	r4, r2
 801a788:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a78a:	4410      	add	r0, r2
 801a78c:	e7ee      	b.n	801a76c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801a78e:	d06f      	beq.n	801a870 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801a790:	1e5a      	subs	r2, r3, #1
 801a792:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801a794:	fb06 4602 	mla	r6, r6, r2, r4
 801a798:	1436      	asrs	r6, r6, #16
 801a79a:	d45e      	bmi.n	801a85a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a79c:	4576      	cmp	r6, lr
 801a79e:	da5c      	bge.n	801a85a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a7a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801a7a2:	fb06 0202 	mla	r2, r6, r2, r0
 801a7a6:	1412      	asrs	r2, r2, #16
 801a7a8:	d457      	bmi.n	801a85a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a7aa:	42ba      	cmp	r2, r7
 801a7ac:	da55      	bge.n	801a85a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801a7ae:	1cee      	adds	r6, r5, #3
 801a7b0:	469a      	mov	sl, r3
 801a7b2:	f1ba 0f00 	cmp.w	sl, #0
 801a7b6:	dd56      	ble.n	801a866 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a7b8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801a7bc:	1427      	asrs	r7, r4, #16
 801a7be:	1402      	asrs	r2, r0, #16
 801a7c0:	fb0e 7202 	mla	r2, lr, r2, r7
 801a7c4:	9f00      	ldr	r7, [sp, #0]
 801a7c6:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801a7ca:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801a7ce:	d03c      	beq.n	801a84a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a7d0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a7d4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a7d8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801a7dc:	fa5f f28e 	uxtb.w	r2, lr
 801a7e0:	b2ff      	uxtb	r7, r7
 801a7e2:	f000 80dd 	beq.w	801a9a0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a7e6:	fa1f f882 	uxth.w	r8, r2
 801a7ea:	43d2      	mvns	r2, r2
 801a7ec:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801a7f0:	fb17 f708 	smulbb	r7, r7, r8
 801a7f4:	b2d2      	uxtb	r2, r2
 801a7f6:	fb19 f908 	smulbb	r9, r9, r8
 801a7fa:	fb0e 7702 	mla	r7, lr, r2, r7
 801a7fe:	fb1b f808 	smulbb	r8, fp, r8
 801a802:	b2bf      	uxth	r7, r7
 801a804:	f107 0e01 	add.w	lr, r7, #1
 801a808:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801a80c:	123f      	asrs	r7, r7, #8
 801a80e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a812:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801a816:	fb07 9902 	mla	r9, r7, r2, r9
 801a81a:	fa1f f989 	uxth.w	r9, r9
 801a81e:	f109 0701 	add.w	r7, r9, #1
 801a822:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801a826:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801a82a:	fb07 8802 	mla	r8, r7, r2, r8
 801a82e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a832:	fa1f f888 	uxth.w	r8, r8
 801a836:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a83a:	f108 0201 	add.w	r2, r8, #1
 801a83e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a842:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a846:	f806 8c01 	strb.w	r8, [r6, #-1]
 801a84a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a84c:	3603      	adds	r6, #3
 801a84e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a852:	4414      	add	r4, r2
 801a854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a856:	4410      	add	r0, r2
 801a858:	e7ab      	b.n	801a7b2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a85a:	f04f 0e00 	mov.w	lr, #0
 801a85e:	eba3 020e 	sub.w	r2, r3, lr
 801a862:	2a00      	cmp	r2, #0
 801a864:	dc3d      	bgt.n	801a8e2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801a866:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a86a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a86e:	441d      	add	r5, r3
 801a870:	2900      	cmp	r1, #0
 801a872:	f340 809c 	ble.w	801a9ae <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801a876:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a87a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a87c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a880:	3901      	subs	r1, #1
 801a882:	eeb0 6a62 	vmov.f32	s12, s5
 801a886:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a88a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a88e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a892:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801a896:	eeb0 6a43 	vmov.f32	s12, s6
 801a89a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a89e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801a8a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a8a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a8aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a8ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a8b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8ba:	ee12 2a90 	vmov	r2, s5
 801a8be:	eef0 2a47 	vmov.f32	s5, s14
 801a8c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8c6:	ee13 2a10 	vmov	r2, s6
 801a8ca:	930f      	str	r3, [sp, #60]	; 0x3c
 801a8cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8ce:	eeb0 3a67 	vmov.f32	s6, s15
 801a8d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8d6:	9a01      	ldr	r2, [sp, #4]
 801a8d8:	9310      	str	r3, [sp, #64]	; 0x40
 801a8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8dc:	bf08      	it	eq
 801a8de:	4613      	moveq	r3, r2
 801a8e0:	e734      	b.n	801a74c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801a8e2:	1427      	asrs	r7, r4, #16
 801a8e4:	d44d      	bmi.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a8e6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801a8ea:	42be      	cmp	r6, r7
 801a8ec:	dd49      	ble.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a8ee:	ea5f 4820 	movs.w	r8, r0, asr #16
 801a8f2:	d446      	bmi.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a8f4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801a8f8:	4542      	cmp	r2, r8
 801a8fa:	dd42      	ble.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a8fc:	b236      	sxth	r6, r6
 801a8fe:	9a00      	ldr	r2, [sp, #0]
 801a900:	fb08 7606 	mla	r6, r8, r6, r7
 801a904:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801a908:	0e3a      	lsrs	r2, r7, #24
 801a90a:	d03a      	beq.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a90c:	2aff      	cmp	r2, #255	; 0xff
 801a90e:	b2d6      	uxtb	r6, r2
 801a910:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801a914:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801a918:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801a91c:	b2ff      	uxtb	r7, r7
 801a91e:	d037      	beq.n	801a990 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801a920:	fa1f f986 	uxth.w	r9, r6
 801a924:	4472      	add	r2, lr
 801a926:	43f6      	mvns	r6, r6
 801a928:	f815 8002 	ldrb.w	r8, [r5, r2]
 801a92c:	fb17 f709 	smulbb	r7, r7, r9
 801a930:	fb1a fa09 	smulbb	sl, sl, r9
 801a934:	b2f6      	uxtb	r6, r6
 801a936:	fb1b f909 	smulbb	r9, fp, r9
 801a93a:	fb08 7706 	mla	r7, r8, r6, r7
 801a93e:	b2bf      	uxth	r7, r7
 801a940:	f107 0801 	add.w	r8, r7, #1
 801a944:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801a948:	123f      	asrs	r7, r7, #8
 801a94a:	54af      	strb	r7, [r5, r2]
 801a94c:	442a      	add	r2, r5
 801a94e:	7857      	ldrb	r7, [r2, #1]
 801a950:	fb07 aa06 	mla	sl, r7, r6, sl
 801a954:	fa1f fa8a 	uxth.w	sl, sl
 801a958:	f10a 0701 	add.w	r7, sl, #1
 801a95c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a960:	7897      	ldrb	r7, [r2, #2]
 801a962:	fb07 9906 	mla	r9, r7, r6, r9
 801a966:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a96a:	fa1f f989 	uxth.w	r9, r9
 801a96e:	f882 a001 	strb.w	sl, [r2, #1]
 801a972:	f109 0601 	add.w	r6, r9, #1
 801a976:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801a97a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a97e:	f882 9002 	strb.w	r9, [r2, #2]
 801a982:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a984:	f10e 0e01 	add.w	lr, lr, #1
 801a988:	4414      	add	r4, r2
 801a98a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a98c:	4410      	add	r0, r2
 801a98e:	e766      	b.n	801a85e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801a990:	4472      	add	r2, lr
 801a992:	54af      	strb	r7, [r5, r2]
 801a994:	442a      	add	r2, r5
 801a996:	f882 a001 	strb.w	sl, [r2, #1]
 801a99a:	f882 b002 	strb.w	fp, [r2, #2]
 801a99e:	e7f0      	b.n	801a982 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801a9a0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801a9a4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801a9a8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801a9ac:	e74d      	b.n	801a84a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a9ae:	b003      	add	sp, #12
 801a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a9b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b8:	b087      	sub	sp, #28
 801a9ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9be:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a9c0:	9204      	str	r2, [sp, #16]
 801a9c2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a9c6:	6860      	ldr	r0, [r4, #4]
 801a9c8:	9205      	str	r2, [sp, #20]
 801a9ca:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801a9ce:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801a9d2:	9101      	str	r1, [sp, #4]
 801a9d4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801a9d8:	fb00 2505 	mla	r5, r0, r5, r2
 801a9dc:	6822      	ldr	r2, [r4, #0]
 801a9de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a9e2:	4415      	add	r5, r2
 801a9e4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801a9e8:	3201      	adds	r2, #1
 801a9ea:	f022 0201 	bic.w	r2, r2, #1
 801a9ee:	9202      	str	r2, [sp, #8]
 801a9f0:	f8dc 2000 	ldr.w	r2, [ip]
 801a9f4:	9203      	str	r2, [sp, #12]
 801a9f6:	9a01      	ldr	r2, [sp, #4]
 801a9f8:	2a00      	cmp	r2, #0
 801a9fa:	dc03      	bgt.n	801aa04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801a9fc:	9a04      	ldr	r2, [sp, #16]
 801a9fe:	2a00      	cmp	r2, #0
 801aa00:	f340 8135 	ble.w	801ac6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801aa04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa06:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aa0a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801aa0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aa10:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801aa14:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	dd0d      	ble.n	801aa38 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801aa1c:	1422      	asrs	r2, r4, #16
 801aa1e:	d405      	bmi.n	801aa2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aa20:	4542      	cmp	r2, r8
 801aa22:	da03      	bge.n	801aa2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aa24:	1402      	asrs	r2, r0, #16
 801aa26:	d401      	bmi.n	801aa2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aa28:	42ba      	cmp	r2, r7
 801aa2a:	db06      	blt.n	801aa3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801aa2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa2e:	4474      	add	r4, lr
 801aa30:	3b01      	subs	r3, #1
 801aa32:	3503      	adds	r5, #3
 801aa34:	4410      	add	r0, r2
 801aa36:	e7ef      	b.n	801aa18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801aa38:	d077      	beq.n	801ab2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801aa3a:	1e5a      	subs	r2, r3, #1
 801aa3c:	fb0e 4602 	mla	r6, lr, r2, r4
 801aa40:	1436      	asrs	r6, r6, #16
 801aa42:	d469      	bmi.n	801ab18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aa44:	4546      	cmp	r6, r8
 801aa46:	da67      	bge.n	801ab18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aa48:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801aa4a:	fb06 0202 	mla	r2, r6, r2, r0
 801aa4e:	1412      	asrs	r2, r2, #16
 801aa50:	d462      	bmi.n	801ab18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aa52:	42ba      	cmp	r2, r7
 801aa54:	da60      	bge.n	801ab18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801aa56:	1cee      	adds	r6, r5, #3
 801aa58:	4699      	mov	r9, r3
 801aa5a:	f1b9 0f00 	cmp.w	r9, #0
 801aa5e:	dd5f      	ble.n	801ab20 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801aa60:	1422      	asrs	r2, r4, #16
 801aa62:	9902      	ldr	r1, [sp, #8]
 801aa64:	1407      	asrs	r7, r0, #16
 801aa66:	fb01 2707 	mla	r7, r1, r7, r2
 801aa6a:	9903      	ldr	r1, [sp, #12]
 801aa6c:	087a      	lsrs	r2, r7, #1
 801aa6e:	5c8a      	ldrb	r2, [r1, r2]
 801aa70:	07f9      	lsls	r1, r7, #31
 801aa72:	bf54      	ite	pl
 801aa74:	f002 020f 	andpl.w	r2, r2, #15
 801aa78:	1112      	asrmi	r2, r2, #4
 801aa7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801aa7e:	b2d2      	uxtb	r2, r2
 801aa80:	2a00      	cmp	r2, #0
 801aa82:	d042      	beq.n	801ab0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801aa84:	497b      	ldr	r1, [pc, #492]	; (801ac74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801aa86:	680f      	ldr	r7, [r1, #0]
 801aa88:	9905      	ldr	r1, [sp, #20]
 801aa8a:	fa5f fb87 	uxtb.w	fp, r7
 801aa8e:	434a      	muls	r2, r1
 801aa90:	f102 0801 	add.w	r8, r2, #1
 801aa94:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801aa98:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801aa9c:	1212      	asrs	r2, r2, #8
 801aa9e:	fa1f fa82 	uxth.w	sl, r2
 801aaa2:	43d2      	mvns	r2, r2
 801aaa4:	fb1b fb0a 	smulbb	fp, fp, sl
 801aaa8:	b2d2      	uxtb	r2, r2
 801aaaa:	fb08 b802 	mla	r8, r8, r2, fp
 801aaae:	fa1f f888 	uxth.w	r8, r8
 801aab2:	f108 0b01 	add.w	fp, r8, #1
 801aab6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aaba:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801aabe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801aac2:	fb1b fb0a 	smulbb	fp, fp, sl
 801aac6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aaca:	fb17 fa0a 	smulbb	sl, r7, sl
 801aace:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801aad2:	f806 8c03 	strb.w	r8, [r6, #-3]
 801aad6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801aada:	fb07 aa02 	mla	sl, r7, r2, sl
 801aade:	fb08 b802 	mla	r8, r8, r2, fp
 801aae2:	fa1f fa8a 	uxth.w	sl, sl
 801aae6:	fa1f f888 	uxth.w	r8, r8
 801aaea:	f10a 0701 	add.w	r7, sl, #1
 801aaee:	f108 0b01 	add.w	fp, r8, #1
 801aaf2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aaf6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801aafa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aafe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ab02:	f806 ac01 	strb.w	sl, [r6, #-1]
 801ab06:	f806 8c02 	strb.w	r8, [r6, #-2]
 801ab0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ab0c:	4474      	add	r4, lr
 801ab0e:	3603      	adds	r6, #3
 801ab10:	f109 39ff 	add.w	r9, r9, #4294967295
 801ab14:	4410      	add	r0, r2
 801ab16:	e7a0      	b.n	801aa5a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801ab18:	2700      	movs	r7, #0
 801ab1a:	1bda      	subs	r2, r3, r7
 801ab1c:	2a00      	cmp	r2, #0
 801ab1e:	dc3e      	bgt.n	801ab9e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ab20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab28:	441d      	add	r5, r3
 801ab2a:	9b01      	ldr	r3, [sp, #4]
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	f340 809e 	ble.w	801ac6e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ab32:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab3c:	eeb0 6a62 	vmov.f32	s12, s5
 801ab40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab44:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab4c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ab50:	eeb0 6a43 	vmov.f32	s12, s6
 801ab54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab58:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ab5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab60:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab64:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab74:	ee12 2a90 	vmov	r2, s5
 801ab78:	eef0 2a47 	vmov.f32	s5, s14
 801ab7c:	fb92 fef3 	sdiv	lr, r2, r3
 801ab80:	ee13 2a10 	vmov	r2, s6
 801ab84:	eeb0 3a67 	vmov.f32	s6, s15
 801ab88:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab8c:	9314      	str	r3, [sp, #80]	; 0x50
 801ab8e:	9b01      	ldr	r3, [sp, #4]
 801ab90:	9a04      	ldr	r2, [sp, #16]
 801ab92:	3b01      	subs	r3, #1
 801ab94:	9301      	str	r3, [sp, #4]
 801ab96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ab98:	bf08      	it	eq
 801ab9a:	4613      	moveq	r3, r2
 801ab9c:	e72b      	b.n	801a9f6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ab9e:	1426      	asrs	r6, r4, #16
 801aba0:	d460      	bmi.n	801ac64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801aba2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801aba6:	42b2      	cmp	r2, r6
 801aba8:	dd5c      	ble.n	801ac64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abaa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801abae:	d459      	bmi.n	801ac64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abb0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801abb4:	4542      	cmp	r2, r8
 801abb6:	dd55      	ble.n	801ac64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abb8:	9a02      	ldr	r2, [sp, #8]
 801abba:	9903      	ldr	r1, [sp, #12]
 801abbc:	fb08 6602 	mla	r6, r8, r2, r6
 801abc0:	0872      	lsrs	r2, r6, #1
 801abc2:	07f6      	lsls	r6, r6, #31
 801abc4:	5c8a      	ldrb	r2, [r1, r2]
 801abc6:	bf54      	ite	pl
 801abc8:	f002 020f 	andpl.w	r2, r2, #15
 801abcc:	1112      	asrmi	r2, r2, #4
 801abce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801abd2:	b2d2      	uxtb	r2, r2
 801abd4:	2a00      	cmp	r2, #0
 801abd6:	d045      	beq.n	801ac64 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abd8:	4926      	ldr	r1, [pc, #152]	; (801ac74 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801abda:	f8d1 8000 	ldr.w	r8, [r1]
 801abde:	9905      	ldr	r1, [sp, #20]
 801abe0:	fa5f fb88 	uxtb.w	fp, r8
 801abe4:	434a      	muls	r2, r1
 801abe6:	1c56      	adds	r6, r2, #1
 801abe8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801abec:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801abf0:	1212      	asrs	r2, r2, #8
 801abf2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801abf6:	fa1f fa82 	uxth.w	sl, r2
 801abfa:	43d2      	mvns	r2, r2
 801abfc:	fb1b fb0a 	smulbb	fp, fp, sl
 801ac00:	b2d2      	uxtb	r2, r2
 801ac02:	fb09 b902 	mla	r9, r9, r2, fp
 801ac06:	fa1f f989 	uxth.w	r9, r9
 801ac0a:	f109 0b01 	add.w	fp, r9, #1
 801ac0e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac12:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801ac16:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801ac1a:	fb1b fb0a 	smulbb	fp, fp, sl
 801ac1e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac22:	fb18 fa0a 	smulbb	sl, r8, sl
 801ac26:	f805 9006 	strb.w	r9, [r5, r6]
 801ac2a:	442e      	add	r6, r5
 801ac2c:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ac30:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ac34:	fb08 aa02 	mla	sl, r8, r2, sl
 801ac38:	fb09 b902 	mla	r9, r9, r2, fp
 801ac3c:	fa1f fa8a 	uxth.w	sl, sl
 801ac40:	fa1f f989 	uxth.w	r9, r9
 801ac44:	f10a 0801 	add.w	r8, sl, #1
 801ac48:	f109 0b01 	add.w	fp, r9, #1
 801ac4c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801ac50:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac54:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ac58:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac5c:	f886 a002 	strb.w	sl, [r6, #2]
 801ac60:	f886 9001 	strb.w	r9, [r6, #1]
 801ac64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac66:	4474      	add	r4, lr
 801ac68:	3701      	adds	r7, #1
 801ac6a:	4410      	add	r0, r2
 801ac6c:	e755      	b.n	801ab1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801ac6e:	b007      	add	sp, #28
 801ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac74:	2400ea44 	.word	0x2400ea44

0801ac78 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac7c:	b085      	sub	sp, #20
 801ac7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ac82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ac84:	9203      	str	r2, [sp, #12]
 801ac86:	6860      	ldr	r0, [r4, #4]
 801ac88:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801ac8c:	9100      	str	r1, [sp, #0]
 801ac8e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801ac92:	fb00 2606 	mla	r6, r0, r6, r2
 801ac96:	6822      	ldr	r2, [r4, #0]
 801ac98:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ac9c:	4416      	add	r6, r2
 801ac9e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801aca2:	3201      	adds	r2, #1
 801aca4:	f022 0201 	bic.w	r2, r2, #1
 801aca8:	9201      	str	r2, [sp, #4]
 801acaa:	f8dc 2000 	ldr.w	r2, [ip]
 801acae:	9202      	str	r2, [sp, #8]
 801acb0:	9a00      	ldr	r2, [sp, #0]
 801acb2:	2a00      	cmp	r2, #0
 801acb4:	dc03      	bgt.n	801acbe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801acb6:	9a03      	ldr	r2, [sp, #12]
 801acb8:	2a00      	cmp	r2, #0
 801acba:	f340 8140 	ble.w	801af3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801acbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acc0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801acc4:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801acc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801acca:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801acce:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	dd0e      	ble.n	801acf4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801acd6:	142a      	asrs	r2, r5, #16
 801acd8:	d405      	bmi.n	801ace6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801acda:	4572      	cmp	r2, lr
 801acdc:	da03      	bge.n	801ace6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801acde:	1422      	asrs	r2, r4, #16
 801ace0:	d401      	bmi.n	801ace6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ace2:	42ba      	cmp	r2, r7
 801ace4:	db07      	blt.n	801acf6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ace6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ace8:	3b01      	subs	r3, #1
 801acea:	3603      	adds	r6, #3
 801acec:	4415      	add	r5, r2
 801acee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801acf0:	4414      	add	r4, r2
 801acf2:	e7ee      	b.n	801acd2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801acf4:	d072      	beq.n	801addc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801acf6:	1e5a      	subs	r2, r3, #1
 801acf8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801acfa:	fb00 5002 	mla	r0, r0, r2, r5
 801acfe:	1400      	asrs	r0, r0, #16
 801ad00:	d463      	bmi.n	801adca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad02:	4570      	cmp	r0, lr
 801ad04:	da61      	bge.n	801adca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad06:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ad08:	fb00 4202 	mla	r2, r0, r2, r4
 801ad0c:	1412      	asrs	r2, r2, #16
 801ad0e:	d45c      	bmi.n	801adca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad10:	42ba      	cmp	r2, r7
 801ad12:	da5a      	bge.n	801adca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801ad14:	1cf0      	adds	r0, r6, #3
 801ad16:	469a      	mov	sl, r3
 801ad18:	f1ba 0f00 	cmp.w	sl, #0
 801ad1c:	dd59      	ble.n	801add2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801ad1e:	142a      	asrs	r2, r5, #16
 801ad20:	9901      	ldr	r1, [sp, #4]
 801ad22:	1427      	asrs	r7, r4, #16
 801ad24:	fb01 2707 	mla	r7, r1, r7, r2
 801ad28:	9902      	ldr	r1, [sp, #8]
 801ad2a:	087a      	lsrs	r2, r7, #1
 801ad2c:	5c8a      	ldrb	r2, [r1, r2]
 801ad2e:	07f9      	lsls	r1, r7, #31
 801ad30:	bf54      	ite	pl
 801ad32:	f002 020f 	andpl.w	r2, r2, #15
 801ad36:	1112      	asrmi	r2, r2, #4
 801ad38:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ad3c:	b2d2      	uxtb	r2, r2
 801ad3e:	2a00      	cmp	r2, #0
 801ad40:	d03b      	beq.n	801adba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ad42:	4980      	ldr	r1, [pc, #512]	; (801af44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ad44:	2aff      	cmp	r2, #255	; 0xff
 801ad46:	680f      	ldr	r7, [r1, #0]
 801ad48:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801ad4c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801ad50:	b2ff      	uxtb	r7, r7
 801ad52:	f000 80ed 	beq.w	801af30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801ad56:	fa1f f882 	uxth.w	r8, r2
 801ad5a:	43d2      	mvns	r2, r2
 801ad5c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801ad60:	fb17 f708 	smulbb	r7, r7, r8
 801ad64:	b2d2      	uxtb	r2, r2
 801ad66:	fb19 f908 	smulbb	r9, r9, r8
 801ad6a:	fb0e 7702 	mla	r7, lr, r2, r7
 801ad6e:	fb1b f808 	smulbb	r8, fp, r8
 801ad72:	b2bf      	uxth	r7, r7
 801ad74:	f107 0e01 	add.w	lr, r7, #1
 801ad78:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801ad7c:	123f      	asrs	r7, r7, #8
 801ad7e:	f800 7c03 	strb.w	r7, [r0, #-3]
 801ad82:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801ad86:	fb07 9902 	mla	r9, r7, r2, r9
 801ad8a:	fa1f f989 	uxth.w	r9, r9
 801ad8e:	f109 0701 	add.w	r7, r9, #1
 801ad92:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801ad96:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801ad9a:	fb07 8802 	mla	r8, r7, r2, r8
 801ad9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ada2:	fa1f f888 	uxth.w	r8, r8
 801ada6:	f800 9c02 	strb.w	r9, [r0, #-2]
 801adaa:	f108 0201 	add.w	r2, r8, #1
 801adae:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801adb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801adb6:	f800 8c01 	strb.w	r8, [r0, #-1]
 801adba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801adbc:	3003      	adds	r0, #3
 801adbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801adc2:	4415      	add	r5, r2
 801adc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801adc6:	4414      	add	r4, r2
 801adc8:	e7a6      	b.n	801ad18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801adca:	2700      	movs	r7, #0
 801adcc:	1bda      	subs	r2, r3, r7
 801adce:	2a00      	cmp	r2, #0
 801add0:	dc40      	bgt.n	801ae54 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801add2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801add6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801adda:	441e      	add	r6, r3
 801addc:	9b00      	ldr	r3, [sp, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	f340 80ad 	ble.w	801af3e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801ade4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ade8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801adea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801adee:	eeb0 6a62 	vmov.f32	s12, s5
 801adf2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801adf6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801adfa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adfe:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ae02:	eeb0 6a43 	vmov.f32	s12, s6
 801ae06:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ae0a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ae0e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ae12:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ae16:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ae1a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ae1e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ae22:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ae26:	ee12 2a90 	vmov	r2, s5
 801ae2a:	eef0 2a47 	vmov.f32	s5, s14
 801ae2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae32:	ee13 2a10 	vmov	r2, s6
 801ae36:	9311      	str	r3, [sp, #68]	; 0x44
 801ae38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae3a:	eeb0 3a67 	vmov.f32	s6, s15
 801ae3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ae42:	9312      	str	r3, [sp, #72]	; 0x48
 801ae44:	9b00      	ldr	r3, [sp, #0]
 801ae46:	9a03      	ldr	r2, [sp, #12]
 801ae48:	3b01      	subs	r3, #1
 801ae4a:	9300      	str	r3, [sp, #0]
 801ae4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae4e:	bf08      	it	eq
 801ae50:	4613      	moveq	r3, r2
 801ae52:	e72d      	b.n	801acb0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ae54:	1428      	asrs	r0, r5, #16
 801ae56:	d45c      	bmi.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae58:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801ae5c:	4282      	cmp	r2, r0
 801ae5e:	dd58      	ble.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae60:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ae64:	d455      	bmi.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae66:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ae6a:	4572      	cmp	r2, lr
 801ae6c:	dd51      	ble.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae6e:	9a01      	ldr	r2, [sp, #4]
 801ae70:	9902      	ldr	r1, [sp, #8]
 801ae72:	fb0e 0002 	mla	r0, lr, r2, r0
 801ae76:	0842      	lsrs	r2, r0, #1
 801ae78:	07c0      	lsls	r0, r0, #31
 801ae7a:	5c8a      	ldrb	r2, [r1, r2]
 801ae7c:	bf54      	ite	pl
 801ae7e:	f002 020f 	andpl.w	r2, r2, #15
 801ae82:	1112      	asrmi	r2, r2, #4
 801ae84:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ae88:	b2d2      	uxtb	r2, r2
 801ae8a:	2a00      	cmp	r2, #0
 801ae8c:	d041      	beq.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801ae8e:	492d      	ldr	r1, [pc, #180]	; (801af44 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801ae90:	2aff      	cmp	r2, #255	; 0xff
 801ae92:	6808      	ldr	r0, [r1, #0]
 801ae94:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801ae98:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ae9c:	fa5f fe80 	uxtb.w	lr, r0
 801aea0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801aea4:	d03b      	beq.n	801af1e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801aea6:	fa1f f982 	uxth.w	r9, r2
 801aeaa:	4438      	add	r0, r7
 801aeac:	43d2      	mvns	r2, r2
 801aeae:	f816 8000 	ldrb.w	r8, [r6, r0]
 801aeb2:	fb1e fe09 	smulbb	lr, lr, r9
 801aeb6:	fb1a fa09 	smulbb	sl, sl, r9
 801aeba:	b2d2      	uxtb	r2, r2
 801aebc:	fb1b f909 	smulbb	r9, fp, r9
 801aec0:	fb08 ee02 	mla	lr, r8, r2, lr
 801aec4:	fa1f fe8e 	uxth.w	lr, lr
 801aec8:	f10e 0801 	add.w	r8, lr, #1
 801aecc:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801aed0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801aed4:	f806 e000 	strb.w	lr, [r6, r0]
 801aed8:	4430      	add	r0, r6
 801aeda:	f890 e001 	ldrb.w	lr, [r0, #1]
 801aede:	fb0e aa02 	mla	sl, lr, r2, sl
 801aee2:	fa1f fa8a 	uxth.w	sl, sl
 801aee6:	f10a 0e01 	add.w	lr, sl, #1
 801aeea:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801aeee:	f890 e002 	ldrb.w	lr, [r0, #2]
 801aef2:	fb0e 9902 	mla	r9, lr, r2, r9
 801aef6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801aefa:	fa1f f989 	uxth.w	r9, r9
 801aefe:	f880 a001 	strb.w	sl, [r0, #1]
 801af02:	f109 0201 	add.w	r2, r9, #1
 801af06:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801af0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af0e:	f880 9002 	strb.w	r9, [r0, #2]
 801af12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801af14:	3701      	adds	r7, #1
 801af16:	4415      	add	r5, r2
 801af18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801af1a:	4414      	add	r4, r2
 801af1c:	e756      	b.n	801adcc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801af1e:	4438      	add	r0, r7
 801af20:	f806 e000 	strb.w	lr, [r6, r0]
 801af24:	4430      	add	r0, r6
 801af26:	f880 a001 	strb.w	sl, [r0, #1]
 801af2a:	f880 b002 	strb.w	fp, [r0, #2]
 801af2e:	e7f0      	b.n	801af12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801af30:	f800 7c03 	strb.w	r7, [r0, #-3]
 801af34:	f800 9c02 	strb.w	r9, [r0, #-2]
 801af38:	f800 bc01 	strb.w	fp, [r0, #-1]
 801af3c:	e73d      	b.n	801adba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801af3e:	b005      	add	sp, #20
 801af40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af44:	2400ea44 	.word	0x2400ea44

0801af48 <_ZN8touchgfx8LCD24bppD1Ev>:
 801af48:	4770      	bx	lr

0801af4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801af4a:	4770      	bx	lr

0801af4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801af4c:	4770      	bx	lr

0801af4e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801af4e:	4770      	bx	lr

0801af50 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801af50:	4770      	bx	lr

0801af52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801af52:	4770      	bx	lr

0801af54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801af54:	4770      	bx	lr

0801af56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801af56:	4770      	bx	lr

0801af58 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801af58:	4770      	bx	lr

0801af5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801af5a:	4770      	bx	lr

0801af5c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801af5c:	4770      	bx	lr

0801af5e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801af5e:	4770      	bx	lr

0801af60 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801af60:	4770      	bx	lr

0801af62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801af62:	4770      	bx	lr

0801af64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801af64:	4770      	bx	lr

0801af66 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801af66:	4770      	bx	lr

0801af68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801af68:	4770      	bx	lr

0801af6a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801af6a:	4770      	bx	lr

0801af6c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801af6c:	4770      	bx	lr

0801af6e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801af6e:	4770      	bx	lr

0801af70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801af70:	4770      	bx	lr
	...

0801af74 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801af74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af76:	4606      	mov	r6, r0
 801af78:	b087      	sub	sp, #28
 801af7a:	4615      	mov	r5, r2
 801af7c:	461f      	mov	r7, r3
 801af7e:	b353      	cbz	r3, 801afd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801af80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801af84:	2b00      	cmp	r3, #0
 801af86:	dd26      	ble.n	801afd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801af88:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	dd22      	ble.n	801afd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801af90:	6808      	ldr	r0, [r1, #0]
 801af92:	aa04      	add	r2, sp, #16
 801af94:	6849      	ldr	r1, [r1, #4]
 801af96:	4c1b      	ldr	r4, [pc, #108]	; (801b004 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801af98:	c203      	stmia	r2!, {r0, r1}
 801af9a:	a804      	add	r0, sp, #16
 801af9c:	f7fb fa5e 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801afa0:	6820      	ldr	r0, [r4, #0]
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afa6:	4798      	blx	r3
 801afa8:	2fff      	cmp	r7, #255	; 0xff
 801afaa:	d016      	beq.n	801afda <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801afac:	f010 0f08 	tst.w	r0, #8
 801afb0:	6820      	ldr	r0, [r4, #0]
 801afb2:	d015      	beq.n	801afe0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801afb4:	2400      	movs	r4, #0
 801afb6:	6801      	ldr	r1, [r0, #0]
 801afb8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801afbc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801afc0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801afc4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801afc8:	9401      	str	r4, [sp, #4]
 801afca:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801afce:	9400      	str	r4, [sp, #0]
 801afd0:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801afd2:	4629      	mov	r1, r5
 801afd4:	47a0      	blx	r4
 801afd6:	b007      	add	sp, #28
 801afd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afda:	f010 0f02 	tst.w	r0, #2
 801afde:	e7e7      	b.n	801afb0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801afe0:	6803      	ldr	r3, [r0, #0]
 801afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afe4:	4798      	blx	r3
 801afe6:	4b08      	ldr	r3, [pc, #32]	; (801b008 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801afe8:	4601      	mov	r1, r0
 801afea:	4630      	mov	r0, r6
 801afec:	881a      	ldrh	r2, [r3, #0]
 801afee:	6833      	ldr	r3, [r6, #0]
 801aff0:	e9cd 5700 	strd	r5, r7, [sp]
 801aff4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801aff6:	ab04      	add	r3, sp, #16
 801aff8:	47a8      	blx	r5
 801affa:	6820      	ldr	r0, [r4, #0]
 801affc:	6803      	ldr	r3, [r0, #0]
 801affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b000:	4798      	blx	r3
 801b002:	e7e8      	b.n	801afd6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801b004:	2400ea34 	.word	0x2400ea34
 801b008:	2400ea2e 	.word	0x2400ea2e

0801b00c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801b00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b010:	b08b      	sub	sp, #44	; 0x2c
 801b012:	460d      	mov	r5, r1
 801b014:	4616      	mov	r6, r2
 801b016:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801b01a:	f1b8 0f00 	cmp.w	r8, #0
 801b01e:	d047      	beq.n	801b0b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b020:	6810      	ldr	r0, [r2, #0]
 801b022:	ac06      	add	r4, sp, #24
 801b024:	6851      	ldr	r1, [r2, #4]
 801b026:	4f51      	ldr	r7, [pc, #324]	; (801b16c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801b028:	c403      	stmia	r4!, {r0, r1}
 801b02a:	6818      	ldr	r0, [r3, #0]
 801b02c:	ac08      	add	r4, sp, #32
 801b02e:	6859      	ldr	r1, [r3, #4]
 801b030:	c403      	stmia	r4!, {r0, r1}
 801b032:	a806      	add	r0, sp, #24
 801b034:	f7fb fa12 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b038:	4631      	mov	r1, r6
 801b03a:	a808      	add	r0, sp, #32
 801b03c:	f7fb fa36 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b040:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b044:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801b048:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b04c:	6838      	ldr	r0, [r7, #0]
 801b04e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b052:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801b056:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801b05a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b05e:	440d      	add	r5, r1
 801b060:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801b064:	440a      	add	r2, r1
 801b066:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b06a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b06e:	4413      	add	r3, r2
 801b070:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b074:	6803      	ldr	r3, [r0, #0]
 801b076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b078:	4798      	blx	r3
 801b07a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b07e:	d01a      	beq.n	801b0b6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801b080:	f010 0f04 	tst.w	r0, #4
 801b084:	6838      	ldr	r0, [r7, #0]
 801b086:	d019      	beq.n	801b0bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801b088:	2100      	movs	r1, #0
 801b08a:	6807      	ldr	r7, [r0, #0]
 801b08c:	b2a4      	uxth	r4, r4
 801b08e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b092:	b2b6      	uxth	r6, r6
 801b094:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801b098:	9401      	str	r4, [sp, #4]
 801b09a:	9600      	str	r6, [sp, #0]
 801b09c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b0a0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801b0a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b0a8:	9102      	str	r1, [sp, #8]
 801b0aa:	4629      	mov	r1, r5
 801b0ac:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801b0ae:	47a0      	blx	r4
 801b0b0:	b00b      	add	sp, #44	; 0x2c
 801b0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0b6:	f010 0f01 	tst.w	r0, #1
 801b0ba:	e7e3      	b.n	801b084 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801b0bc:	6803      	ldr	r3, [r0, #0]
 801b0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0c0:	4798      	blx	r3
 801b0c2:	4a2b      	ldr	r2, [pc, #172]	; (801b170 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801b0c4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b0c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b0cc:	8813      	ldrh	r3, [r2, #0]
 801b0ce:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801b0d2:	fb03 f404 	mul.w	r4, r3, r4
 801b0d6:	fb03 c101 	mla	r1, r3, r1, ip
 801b0da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b0de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b0e2:	4408      	add	r0, r1
 801b0e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801b0e8:	4404      	add	r4, r0
 801b0ea:	d02e      	beq.n	801b14a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801b0ec:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b0f0:	1b9b      	subs	r3, r3, r6
 801b0f2:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801b0f6:	1b96      	subs	r6, r2, r6
 801b0f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0fc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b100:	42a0      	cmp	r0, r4
 801b102:	d22d      	bcs.n	801b160 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b104:	eb00 0e01 	add.w	lr, r0, r1
 801b108:	4570      	cmp	r0, lr
 801b10a:	d210      	bcs.n	801b12e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801b10c:	f890 9000 	ldrb.w	r9, [r0]
 801b110:	f815 2b01 	ldrb.w	r2, [r5], #1
 801b114:	fb19 f90c 	smulbb	r9, r9, ip
 801b118:	fb02 9208 	mla	r2, r2, r8, r9
 801b11c:	b292      	uxth	r2, r2
 801b11e:	f102 0901 	add.w	r9, r2, #1
 801b122:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801b126:	1212      	asrs	r2, r2, #8
 801b128:	f800 2b01 	strb.w	r2, [r0], #1
 801b12c:	e7ec      	b.n	801b108 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801b12e:	4418      	add	r0, r3
 801b130:	4435      	add	r5, r6
 801b132:	e7e5      	b.n	801b100 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801b134:	8813      	ldrh	r3, [r2, #0]
 801b136:	1b9b      	subs	r3, r3, r6
 801b138:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b13c:	4418      	add	r0, r3
 801b13e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b142:	1b9b      	subs	r3, r3, r6
 801b144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b148:	441d      	add	r5, r3
 801b14a:	42a0      	cmp	r0, r4
 801b14c:	d208      	bcs.n	801b160 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801b14e:	eb00 0c01 	add.w	ip, r0, r1
 801b152:	4560      	cmp	r0, ip
 801b154:	d2ee      	bcs.n	801b134 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801b156:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b15a:	f800 3b01 	strb.w	r3, [r0], #1
 801b15e:	e7f8      	b.n	801b152 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801b160:	6838      	ldr	r0, [r7, #0]
 801b162:	6803      	ldr	r3, [r0, #0]
 801b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b166:	4798      	blx	r3
 801b168:	e7a2      	b.n	801b0b0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801b16a:	bf00      	nop
 801b16c:	2400ea34 	.word	0x2400ea34
 801b170:	2400ea2e 	.word	0x2400ea2e

0801b174 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801b174:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b176:	2300      	movs	r3, #0
 801b178:	b085      	sub	sp, #20
 801b17a:	9300      	str	r3, [sp, #0]
 801b17c:	4b41      	ldr	r3, [pc, #260]	; (801b284 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801b17e:	781b      	ldrb	r3, [r3, #0]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d136      	bne.n	801b1f2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801b184:	4a40      	ldr	r2, [pc, #256]	; (801b288 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b186:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b18a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d131      	bne.n	801b1f6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801b192:	4b3e      	ldr	r3, [pc, #248]	; (801b28c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b194:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b198:	ac02      	add	r4, sp, #8
 801b19a:	6808      	ldr	r0, [r1, #0]
 801b19c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b1a0:	ab02      	add	r3, sp, #8
 801b1a2:	6849      	ldr	r1, [r1, #4]
 801b1a4:	4d3a      	ldr	r5, [pc, #232]	; (801b290 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801b1a6:	c303      	stmia	r3!, {r0, r1}
 801b1a8:	4669      	mov	r1, sp
 801b1aa:	4620      	mov	r0, r4
 801b1ac:	f7fb f97e 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b1b0:	4668      	mov	r0, sp
 801b1b2:	f7fb f953 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b1b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b1ba:	f8bd 2000 	ldrh.w	r2, [sp]
 801b1be:	462e      	mov	r6, r5
 801b1c0:	6828      	ldr	r0, [r5, #0]
 801b1c2:	4413      	add	r3, r2
 801b1c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b1c8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b1cc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b1d0:	4413      	add	r3, r2
 801b1d2:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b1d6:	6803      	ldr	r3, [r0, #0]
 801b1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b1da:	4798      	blx	r3
 801b1dc:	f010 0f01 	tst.w	r0, #1
 801b1e0:	d00b      	beq.n	801b1fa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801b1e2:	6828      	ldr	r0, [r5, #0]
 801b1e4:	6803      	ldr	r3, [r0, #0]
 801b1e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 801b1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b1ec:	4798      	blx	r3
 801b1ee:	b005      	add	sp, #20
 801b1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1f2:	4a26      	ldr	r2, [pc, #152]	; (801b28c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801b1f4:	e7c7      	b.n	801b186 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801b1f6:	4b24      	ldr	r3, [pc, #144]	; (801b288 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b1f8:	e7cc      	b.n	801b194 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801b1fa:	6830      	ldr	r0, [r6, #0]
 801b1fc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801b200:	6803      	ldr	r3, [r0, #0]
 801b202:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b208:	4798      	blx	r3
 801b20a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801b20e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b212:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801b216:	fb14 3402 	smlabb	r4, r4, r2, r3
 801b21a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b21e:	4404      	add	r4, r0
 801b220:	6830      	ldr	r0, [r6, #0]
 801b222:	6803      	ldr	r3, [r0, #0]
 801b224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b226:	4798      	blx	r3
 801b228:	4917      	ldr	r1, [pc, #92]	; (801b288 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801b22a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801b22e:	880b      	ldrh	r3, [r1, #0]
 801b230:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801b234:	fb03 c202 	mla	r2, r3, r2, ip
 801b238:	437b      	muls	r3, r7
 801b23a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801b23e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b242:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b246:	4410      	add	r0, r2
 801b248:	18c2      	adds	r2, r0, r3
 801b24a:	4290      	cmp	r0, r2
 801b24c:	d214      	bcs.n	801b278 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801b24e:	eb00 0c07 	add.w	ip, r0, r7
 801b252:	4560      	cmp	r0, ip
 801b254:	d204      	bcs.n	801b260 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801b256:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b25a:	f800 3b01 	strb.w	r3, [r0], #1
 801b25e:	e7f8      	b.n	801b252 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801b260:	880b      	ldrh	r3, [r1, #0]
 801b262:	1b5b      	subs	r3, r3, r5
 801b264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b268:	4418      	add	r0, r3
 801b26a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801b26e:	1b5b      	subs	r3, r3, r5
 801b270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b274:	441c      	add	r4, r3
 801b276:	e7e8      	b.n	801b24a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801b278:	6830      	ldr	r0, [r6, #0]
 801b27a:	6803      	ldr	r3, [r0, #0]
 801b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b27e:	4798      	blx	r3
 801b280:	e7b5      	b.n	801b1ee <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801b282:	bf00      	nop
 801b284:	2400ea2c 	.word	0x2400ea2c
 801b288:	2400ea2e 	.word	0x2400ea2e
 801b28c:	2400ea30 	.word	0x2400ea30
 801b290:	2400ea34 	.word	0x2400ea34

0801b294 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b298:	b089      	sub	sp, #36	; 0x24
 801b29a:	4607      	mov	r7, r0
 801b29c:	4689      	mov	r9, r1
 801b29e:	4692      	mov	sl, r2
 801b2a0:	ac08      	add	r4, sp, #32
 801b2a2:	461e      	mov	r6, r3
 801b2a4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	f7fe f8ef 	bl	801948c <_ZNK8touchgfx6Bitmap7getDataEv>
 801b2ae:	683b      	ldr	r3, [r7, #0]
 801b2b0:	4605      	mov	r5, r0
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801b2b8:	f7fe f834 	bl	8019324 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b2bc:	4683      	mov	fp, r0
 801b2be:	4620      	mov	r0, r4
 801b2c0:	f7fe f864 	bl	801938c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b2c4:	4653      	mov	r3, sl
 801b2c6:	464a      	mov	r2, r9
 801b2c8:	4639      	mov	r1, r7
 801b2ca:	9500      	str	r5, [sp, #0]
 801b2cc:	e9cd b001 	strd	fp, r0, [sp, #4]
 801b2d0:	a806      	add	r0, sp, #24
 801b2d2:	47c0      	blx	r8
 801b2d4:	a906      	add	r1, sp, #24
 801b2d6:	4630      	mov	r0, r6
 801b2d8:	f7fd ff08 	bl	80190ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801b2dc:	4628      	mov	r0, r5
 801b2de:	b009      	add	sp, #36	; 0x24
 801b2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2e4 <_ZN8touchgfx8LCD24bppD0Ev>:
 801b2e4:	b510      	push	{r4, lr}
 801b2e6:	4604      	mov	r4, r0
 801b2e8:	2158      	movs	r1, #88	; 0x58
 801b2ea:	f006 fc18 	bl	8021b1e <_ZdlPvj>
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	bd10      	pop	{r4, pc}

0801b2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	2104      	movs	r1, #4
 801b2f8:	f006 fc11 	bl	8021b1e <_ZdlPvj>
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	bd10      	pop	{r4, pc}

0801b300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b300:	b510      	push	{r4, lr}
 801b302:	4604      	mov	r4, r0
 801b304:	2104      	movs	r1, #4
 801b306:	f006 fc0a 	bl	8021b1e <_ZdlPvj>
 801b30a:	4620      	mov	r0, r4
 801b30c:	bd10      	pop	{r4, pc}

0801b30e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b30e:	b510      	push	{r4, lr}
 801b310:	4604      	mov	r4, r0
 801b312:	2104      	movs	r1, #4
 801b314:	f006 fc03 	bl	8021b1e <_ZdlPvj>
 801b318:	4620      	mov	r0, r4
 801b31a:	bd10      	pop	{r4, pc}

0801b31c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b31c:	b510      	push	{r4, lr}
 801b31e:	4604      	mov	r4, r0
 801b320:	2104      	movs	r1, #4
 801b322:	f006 fbfc 	bl	8021b1e <_ZdlPvj>
 801b326:	4620      	mov	r0, r4
 801b328:	bd10      	pop	{r4, pc}

0801b32a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b32a:	b510      	push	{r4, lr}
 801b32c:	4604      	mov	r4, r0
 801b32e:	2104      	movs	r1, #4
 801b330:	f006 fbf5 	bl	8021b1e <_ZdlPvj>
 801b334:	4620      	mov	r0, r4
 801b336:	bd10      	pop	{r4, pc}

0801b338 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b338:	b510      	push	{r4, lr}
 801b33a:	4604      	mov	r4, r0
 801b33c:	2104      	movs	r1, #4
 801b33e:	f006 fbee 	bl	8021b1e <_ZdlPvj>
 801b342:	4620      	mov	r0, r4
 801b344:	bd10      	pop	{r4, pc}

0801b346 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b346:	b510      	push	{r4, lr}
 801b348:	4604      	mov	r4, r0
 801b34a:	2104      	movs	r1, #4
 801b34c:	f006 fbe7 	bl	8021b1e <_ZdlPvj>
 801b350:	4620      	mov	r0, r4
 801b352:	bd10      	pop	{r4, pc}

0801b354 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b354:	b510      	push	{r4, lr}
 801b356:	4604      	mov	r4, r0
 801b358:	2104      	movs	r1, #4
 801b35a:	f006 fbe0 	bl	8021b1e <_ZdlPvj>
 801b35e:	4620      	mov	r0, r4
 801b360:	bd10      	pop	{r4, pc}

0801b362 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801b362:	b510      	push	{r4, lr}
 801b364:	4604      	mov	r4, r0
 801b366:	2104      	movs	r1, #4
 801b368:	f006 fbd9 	bl	8021b1e <_ZdlPvj>
 801b36c:	4620      	mov	r0, r4
 801b36e:	bd10      	pop	{r4, pc}

0801b370 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801b370:	b510      	push	{r4, lr}
 801b372:	4604      	mov	r4, r0
 801b374:	2104      	movs	r1, #4
 801b376:	f006 fbd2 	bl	8021b1e <_ZdlPvj>
 801b37a:	4620      	mov	r0, r4
 801b37c:	bd10      	pop	{r4, pc}

0801b37e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801b37e:	b510      	push	{r4, lr}
 801b380:	4604      	mov	r4, r0
 801b382:	2104      	movs	r1, #4
 801b384:	f006 fbcb 	bl	8021b1e <_ZdlPvj>
 801b388:	4620      	mov	r0, r4
 801b38a:	bd10      	pop	{r4, pc}

0801b38c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801b38c:	b510      	push	{r4, lr}
 801b38e:	4604      	mov	r4, r0
 801b390:	2104      	movs	r1, #4
 801b392:	f006 fbc4 	bl	8021b1e <_ZdlPvj>
 801b396:	4620      	mov	r0, r4
 801b398:	bd10      	pop	{r4, pc}

0801b39a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801b39a:	b510      	push	{r4, lr}
 801b39c:	4604      	mov	r4, r0
 801b39e:	2104      	movs	r1, #4
 801b3a0:	f006 fbbd 	bl	8021b1e <_ZdlPvj>
 801b3a4:	4620      	mov	r0, r4
 801b3a6:	bd10      	pop	{r4, pc}

0801b3a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801b3a8:	b510      	push	{r4, lr}
 801b3aa:	4604      	mov	r4, r0
 801b3ac:	2104      	movs	r1, #4
 801b3ae:	f006 fbb6 	bl	8021b1e <_ZdlPvj>
 801b3b2:	4620      	mov	r0, r4
 801b3b4:	bd10      	pop	{r4, pc}

0801b3b6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801b3b6:	b510      	push	{r4, lr}
 801b3b8:	4604      	mov	r4, r0
 801b3ba:	2104      	movs	r1, #4
 801b3bc:	f006 fbaf 	bl	8021b1e <_ZdlPvj>
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	bd10      	pop	{r4, pc}

0801b3c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801b3c4:	b510      	push	{r4, lr}
 801b3c6:	4604      	mov	r4, r0
 801b3c8:	2104      	movs	r1, #4
 801b3ca:	f006 fba8 	bl	8021b1e <_ZdlPvj>
 801b3ce:	4620      	mov	r0, r4
 801b3d0:	bd10      	pop	{r4, pc}

0801b3d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801b3d2:	b510      	push	{r4, lr}
 801b3d4:	4604      	mov	r4, r0
 801b3d6:	2104      	movs	r1, #4
 801b3d8:	f006 fba1 	bl	8021b1e <_ZdlPvj>
 801b3dc:	4620      	mov	r0, r4
 801b3de:	bd10      	pop	{r4, pc}

0801b3e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801b3e0:	b510      	push	{r4, lr}
 801b3e2:	4604      	mov	r4, r0
 801b3e4:	2104      	movs	r1, #4
 801b3e6:	f006 fb9a 	bl	8021b1e <_ZdlPvj>
 801b3ea:	4620      	mov	r0, r4
 801b3ec:	bd10      	pop	{r4, pc}

0801b3ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801b3ee:	b510      	push	{r4, lr}
 801b3f0:	4604      	mov	r4, r0
 801b3f2:	2104      	movs	r1, #4
 801b3f4:	f006 fb93 	bl	8021b1e <_ZdlPvj>
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	bd10      	pop	{r4, pc}

0801b3fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801b3fc:	b510      	push	{r4, lr}
 801b3fe:	4604      	mov	r4, r0
 801b400:	2104      	movs	r1, #4
 801b402:	f006 fb8c 	bl	8021b1e <_ZdlPvj>
 801b406:	4620      	mov	r0, r4
 801b408:	bd10      	pop	{r4, pc}

0801b40a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801b40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b40e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801b412:	9c06      	ldr	r4, [sp, #24]
 801b414:	2800      	cmp	r0, #0
 801b416:	d06e      	beq.n	801b4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b418:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801b41c:	2d00      	cmp	r5, #0
 801b41e:	dd6a      	ble.n	801b4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b420:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801b424:	f1bc 0f00 	cmp.w	ip, #0
 801b428:	dd65      	ble.n	801b4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b42a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801b42e:	28ff      	cmp	r0, #255	; 0xff
 801b430:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b434:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801b438:	fb02 3306 	mla	r3, r2, r6, r3
 801b43c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801b440:	b2e4      	uxtb	r4, r4
 801b442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b446:	4419      	add	r1, r3
 801b448:	fb02 f30c 	mul.w	r3, r2, ip
 801b44c:	eba2 0205 	sub.w	r2, r2, r5
 801b450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b458:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b45c:	440b      	add	r3, r1
 801b45e:	d03e      	beq.n	801b4de <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801b460:	fa1f fc80 	uxth.w	ip, r0
 801b464:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b468:	fb06 f60c 	mul.w	r6, r6, ip
 801b46c:	b280      	uxth	r0, r0
 801b46e:	fb07 f70c 	mul.w	r7, r7, ip
 801b472:	fb04 f40c 	mul.w	r4, r4, ip
 801b476:	4299      	cmp	r1, r3
 801b478:	d23d      	bcs.n	801b4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b47a:	eb01 0c05 	add.w	ip, r1, r5
 801b47e:	458c      	cmp	ip, r1
 801b480:	f101 0e03 	add.w	lr, r1, #3
 801b484:	d928      	bls.n	801b4d8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801b486:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801b48a:	fb11 f100 	smulbb	r1, r1, r0
 801b48e:	4421      	add	r1, r4
 801b490:	b289      	uxth	r1, r1
 801b492:	f101 0801 	add.w	r8, r1, #1
 801b496:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b49a:	1209      	asrs	r1, r1, #8
 801b49c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801b4a0:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801b4a4:	fb11 f100 	smulbb	r1, r1, r0
 801b4a8:	4439      	add	r1, r7
 801b4aa:	b289      	uxth	r1, r1
 801b4ac:	f101 0801 	add.w	r8, r1, #1
 801b4b0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b4b4:	1209      	asrs	r1, r1, #8
 801b4b6:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801b4ba:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801b4be:	fb11 f100 	smulbb	r1, r1, r0
 801b4c2:	4431      	add	r1, r6
 801b4c4:	b289      	uxth	r1, r1
 801b4c6:	f101 0801 	add.w	r8, r1, #1
 801b4ca:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b4ce:	1209      	asrs	r1, r1, #8
 801b4d0:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801b4d4:	4671      	mov	r1, lr
 801b4d6:	e7d2      	b.n	801b47e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801b4d8:	4411      	add	r1, r2
 801b4da:	e7cc      	b.n	801b476 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801b4dc:	4411      	add	r1, r2
 801b4de:	4299      	cmp	r1, r3
 801b4e0:	d209      	bcs.n	801b4f6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801b4e2:	1948      	adds	r0, r1, r5
 801b4e4:	4281      	cmp	r1, r0
 801b4e6:	d2f9      	bcs.n	801b4dc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801b4e8:	700c      	strb	r4, [r1, #0]
 801b4ea:	3103      	adds	r1, #3
 801b4ec:	f801 7c02 	strb.w	r7, [r1, #-2]
 801b4f0:	f801 6c01 	strb.w	r6, [r1, #-1]
 801b4f4:	e7f6      	b.n	801b4e4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801b4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b4fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b500:	b093      	sub	sp, #76	; 0x4c
 801b502:	4699      	mov	r9, r3
 801b504:	4617      	mov	r7, r2
 801b506:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b50a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801b50e:	4604      	mov	r4, r0
 801b510:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801b514:	a80c      	add	r0, sp, #48	; 0x30
 801b516:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801b51a:	460d      	mov	r5, r1
 801b51c:	4649      	mov	r1, r9
 801b51e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b522:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b526:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801b52a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801b52e:	f7f5 fe79 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801b532:	4639      	mov	r1, r7
 801b534:	a80c      	add	r0, sp, #48	; 0x30
 801b536:	f7f5 fe75 	bl	8011224 <_ZN8touchgfx4RectaNERKS0_>
 801b53a:	4b78      	ldr	r3, [pc, #480]	; (801b71c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801b53c:	8818      	ldrh	r0, [r3, #0]
 801b53e:	4b78      	ldr	r3, [pc, #480]	; (801b720 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801b540:	b202      	sxth	r2, r0
 801b542:	8819      	ldrh	r1, [r3, #0]
 801b544:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801b548:	b20f      	sxth	r7, r1
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	da07      	bge.n	801b55e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801b54e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801b552:	4463      	add	r3, ip
 801b554:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b558:	2300      	movs	r3, #0
 801b55a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b55e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801b562:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801b566:	1ad2      	subs	r2, r2, r3
 801b568:	4594      	cmp	ip, r2
 801b56a:	bfc4      	itt	gt
 801b56c:	1ac2      	subgt	r2, r0, r3
 801b56e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801b572:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b576:	2a00      	cmp	r2, #0
 801b578:	da07      	bge.n	801b58a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801b57a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801b57e:	4462      	add	r2, ip
 801b580:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801b584:	2200      	movs	r2, #0
 801b586:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b58a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801b58e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801b592:	1abf      	subs	r7, r7, r2
 801b594:	45bc      	cmp	ip, r7
 801b596:	f8df c190 	ldr.w	ip, [pc, #400]	; 801b728 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801b59a:	bfc8      	it	gt
 801b59c:	1a8f      	subgt	r7, r1, r2
 801b59e:	f89c c000 	ldrb.w	ip, [ip]
 801b5a2:	bfc8      	it	gt
 801b5a4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801b5a8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801b5ac:	f1bc 0f00 	cmp.w	ip, #0
 801b5b0:	d176      	bne.n	801b6a0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801b5b2:	4287      	cmp	r7, r0
 801b5b4:	bf14      	ite	ne
 801b5b6:	2100      	movne	r1, #0
 801b5b8:	2101      	moveq	r1, #1
 801b5ba:	2f00      	cmp	r7, #0
 801b5bc:	9107      	str	r1, [sp, #28]
 801b5be:	dd73      	ble.n	801b6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b5c0:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801b5c4:	2900      	cmp	r1, #0
 801b5c6:	9104      	str	r1, [sp, #16]
 801b5c8:	dd6e      	ble.n	801b6a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801b5ca:	f8b9 1000 	ldrh.w	r1, [r9]
 801b5ce:	a80e      	add	r0, sp, #56	; 0x38
 801b5d0:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801b5d4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801b5d8:	1a5b      	subs	r3, r3, r1
 801b5da:	a910      	add	r1, sp, #64	; 0x40
 801b5dc:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801b5e0:	b21b      	sxth	r3, r3
 801b5e2:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801b5e6:	f8df a144 	ldr.w	sl, [pc, #324]	; 801b72c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b5ea:	9305      	str	r3, [sp, #20]
 801b5ec:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801b5f0:	1ad2      	subs	r2, r2, r3
 801b5f2:	b213      	sxth	r3, r2
 801b5f4:	9306      	str	r3, [sp, #24]
 801b5f6:	9b05      	ldr	r3, [sp, #20]
 801b5f8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b5fc:	9b06      	ldr	r3, [sp, #24]
 801b5fe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b602:	9b04      	ldr	r3, [sp, #16]
 801b604:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b608:	2300      	movs	r3, #0
 801b60a:	9310      	str	r3, [sp, #64]	; 0x40
 801b60c:	f7fa ff4e 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b610:	4640      	mov	r0, r8
 801b612:	f7fa ff23 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b616:	a810      	add	r0, sp, #64	; 0x40
 801b618:	f7fa ff20 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b61c:	4b41      	ldr	r3, [pc, #260]	; (801b724 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801b61e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801b622:	4628      	mov	r0, r5
 801b624:	881b      	ldrh	r3, [r3, #0]
 801b626:	9308      	str	r3, [sp, #32]
 801b628:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801b62c:	b21b      	sxth	r3, r3
 801b62e:	9303      	str	r3, [sp, #12]
 801b630:	682b      	ldr	r3, [r5, #0]
 801b632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b634:	4798      	blx	r3
 801b636:	9a03      	ldr	r2, [sp, #12]
 801b638:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801b63c:	4681      	mov	r9, r0
 801b63e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801b642:	fb13 f302 	smulbb	r3, r3, r2
 801b646:	2203      	movs	r2, #3
 801b648:	f8da 0000 	ldr.w	r0, [sl]
 801b64c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801b650:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801b652:	920b      	str	r2, [sp, #44]	; 0x2c
 801b654:	441d      	add	r5, r3
 801b656:	6803      	ldr	r3, [r0, #0]
 801b658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b65a:	4798      	blx	r3
 801b65c:	9009      	str	r0, [sp, #36]	; 0x24
 801b65e:	f8da 0000 	ldr.w	r0, [sl]
 801b662:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b666:	6803      	ldr	r3, [r0, #0]
 801b668:	910a      	str	r1, [sp, #40]	; 0x28
 801b66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b66c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801b670:	4798      	blx	r3
 801b672:	f010 0f01 	tst.w	r0, #1
 801b676:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801b67a:	d01e      	beq.n	801b6ba <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801b67c:	f8da 0000 	ldr.w	r0, [sl]
 801b680:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801b684:	6803      	ldr	r3, [r0, #0]
 801b686:	9200      	str	r2, [sp, #0]
 801b688:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801b68a:	462b      	mov	r3, r5
 801b68c:	e898 0006 	ldmia.w	r8, {r1, r2}
 801b690:	47b0      	blx	r6
 801b692:	9b05      	ldr	r3, [sp, #20]
 801b694:	80a7      	strh	r7, [r4, #4]
 801b696:	8023      	strh	r3, [r4, #0]
 801b698:	9b06      	ldr	r3, [sp, #24]
 801b69a:	8063      	strh	r3, [r4, #2]
 801b69c:	9b04      	ldr	r3, [sp, #16]
 801b69e:	e007      	b.n	801b6b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801b6a0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801b6a4:	4288      	cmp	r0, r1
 801b6a6:	e785      	b.n	801b5b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801b6a8:	2300      	movs	r3, #0
 801b6aa:	8023      	strh	r3, [r4, #0]
 801b6ac:	8063      	strh	r3, [r4, #2]
 801b6ae:	80a3      	strh	r3, [r4, #4]
 801b6b0:	4620      	mov	r0, r4
 801b6b2:	80e3      	strh	r3, [r4, #6]
 801b6b4:	b013      	add	sp, #76	; 0x4c
 801b6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ba:	fb09 f606 	mul.w	r6, r9, r6
 801b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6c0:	fb11 6602 	smlabb	r6, r1, r2, r6
 801b6c4:	9a07      	ldr	r2, [sp, #28]
 801b6c6:	4433      	add	r3, r6
 801b6c8:	461e      	mov	r6, r3
 801b6ca:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b6ce:	b16a      	cbz	r2, 801b6ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b6d0:	9a08      	ldr	r2, [sp, #32]
 801b6d2:	4593      	cmp	fp, r2
 801b6d4:	d10a      	bne.n	801b6ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801b6d6:	f8da 0000 	ldr.w	r0, [sl]
 801b6da:	fb09 f303 	mul.w	r3, r9, r3
 801b6de:	4629      	mov	r1, r5
 801b6e0:	6802      	ldr	r2, [r0, #0]
 801b6e2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801b6e6:	4632      	mov	r2, r6
 801b6e8:	47d0      	blx	sl
 801b6ea:	e7d2      	b.n	801b692 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b6ec:	9a03      	ldr	r2, [sp, #12]
 801b6ee:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801b72c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801b6f2:	fb02 5803 	mla	r8, r2, r3, r5
 801b6f6:	4545      	cmp	r5, r8
 801b6f8:	d2cb      	bcs.n	801b692 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801b6fa:	f8db 0000 	ldr.w	r0, [fp]
 801b6fe:	4629      	mov	r1, r5
 801b700:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801b704:	6802      	ldr	r2, [r0, #0]
 801b706:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b70a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801b70e:	4632      	mov	r2, r6
 801b710:	47d0      	blx	sl
 801b712:	9b03      	ldr	r3, [sp, #12]
 801b714:	444e      	add	r6, r9
 801b716:	441d      	add	r5, r3
 801b718:	e7ed      	b.n	801b6f6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801b71a:	bf00      	nop
 801b71c:	2400ea28 	.word	0x2400ea28
 801b720:	2400ea2a 	.word	0x2400ea2a
 801b724:	2400ea2e 	.word	0x2400ea2e
 801b728:	2400ea2c 	.word	0x2400ea2c
 801b72c:	2400ea34 	.word	0x2400ea34

0801b730 <_ZN8touchgfx8LCD24bppC1Ev>:
 801b730:	2200      	movs	r2, #0
 801b732:	490c      	ldr	r1, [pc, #48]	; (801b764 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801b734:	6042      	str	r2, [r0, #4]
 801b736:	6001      	str	r1, [r0, #0]
 801b738:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801b73c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801b740:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801b744:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801b748:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801b74c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801b750:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801b754:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801b758:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801b75c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801b760:	4770      	bx	lr
 801b762:	bf00      	nop
 801b764:	080250b4 	.word	0x080250b4

0801b768 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b76c:	b091      	sub	sp, #68	; 0x44
 801b76e:	4607      	mov	r7, r0
 801b770:	4688      	mov	r8, r1
 801b772:	6810      	ldr	r0, [r2, #0]
 801b774:	6851      	ldr	r1, [r2, #4]
 801b776:	ac0c      	add	r4, sp, #48	; 0x30
 801b778:	4616      	mov	r6, r2
 801b77a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801b77e:	4d64      	ldr	r5, [pc, #400]	; (801b910 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b780:	f8df a190 	ldr.w	sl, [pc, #400]	; 801b914 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801b784:	c403      	stmia	r4!, {r0, r1}
 801b786:	6818      	ldr	r0, [r3, #0]
 801b788:	ac0e      	add	r4, sp, #56	; 0x38
 801b78a:	6859      	ldr	r1, [r3, #4]
 801b78c:	c403      	stmia	r4!, {r0, r1}
 801b78e:	a80c      	add	r0, sp, #48	; 0x30
 801b790:	f7fa fe64 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b794:	4631      	mov	r1, r6
 801b796:	a80e      	add	r0, sp, #56	; 0x38
 801b798:	f7fa fe88 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b79c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b7a0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b7a4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b7a8:	6828      	ldr	r0, [r5, #0]
 801b7aa:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b7ae:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801b7b2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801b7b6:	440f      	add	r7, r1
 801b7b8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b7bc:	440a      	add	r2, r1
 801b7be:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b7c2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b7c6:	4413      	add	r3, r2
 801b7c8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b7cc:	6803      	ldr	r3, [r0, #0]
 801b7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b7d0:	4798      	blx	r3
 801b7d2:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b7d6:	6828      	ldr	r0, [r5, #0]
 801b7d8:	d01f      	beq.n	801b81a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801b7da:	2201      	movs	r2, #1
 801b7dc:	2500      	movs	r5, #0
 801b7de:	6801      	ldr	r1, [r0, #0]
 801b7e0:	b2a4      	uxth	r4, r4
 801b7e2:	b2b6      	uxth	r6, r6
 801b7e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b7e8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801b7ec:	250b      	movs	r5, #11
 801b7ee:	9507      	str	r5, [sp, #28]
 801b7f0:	f8ba 5000 	ldrh.w	r5, [sl]
 801b7f4:	f8cd 9010 	str.w	r9, [sp, #16]
 801b7f8:	9602      	str	r6, [sp, #8]
 801b7fa:	9401      	str	r4, [sp, #4]
 801b7fc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801b800:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b804:	9203      	str	r2, [sp, #12]
 801b806:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b80a:	9200      	str	r2, [sp, #0]
 801b80c:	4642      	mov	r2, r8
 801b80e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801b810:	4639      	mov	r1, r7
 801b812:	47a0      	blx	r4
 801b814:	b011      	add	sp, #68	; 0x44
 801b816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b81a:	6803      	ldr	r3, [r0, #0]
 801b81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b81e:	4798      	blx	r3
 801b820:	f8ba 5000 	ldrh.w	r5, [sl]
 801b824:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b828:	f04f 0e04 	mov.w	lr, #4
 801b82c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b830:	436e      	muls	r6, r5
 801b832:	fb05 2303 	mla	r3, r5, r3, r2
 801b836:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b83a:	1b2d      	subs	r5, r5, r4
 801b83c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b844:	4418      	add	r0, r3
 801b846:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b84a:	1982      	adds	r2, r0, r6
 801b84c:	1b1b      	subs	r3, r3, r4
 801b84e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b852:	930b      	str	r3, [sp, #44]	; 0x2c
 801b854:	4290      	cmp	r0, r2
 801b856:	d254      	bcs.n	801b902 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801b858:	eb00 0a04 	add.w	sl, r0, r4
 801b85c:	4550      	cmp	r0, sl
 801b85e:	d24c      	bcs.n	801b8fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801b860:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b864:	fb1e e101 	smlabb	r1, lr, r1, lr
 801b868:	eb08 0c01 	add.w	ip, r8, r1
 801b86c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b870:	b173      	cbz	r3, 801b890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b872:	2bff      	cmp	r3, #255	; 0xff
 801b874:	f818 b001 	ldrb.w	fp, [r8, r1]
 801b878:	d10c      	bne.n	801b894 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b87a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b87e:	d109      	bne.n	801b894 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801b880:	f880 b000 	strb.w	fp, [r0]
 801b884:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b888:	7043      	strb	r3, [r0, #1]
 801b88a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b88e:	7083      	strb	r3, [r0, #2]
 801b890:	3003      	adds	r0, #3
 801b892:	e7e3      	b.n	801b85c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801b894:	fb09 f103 	mul.w	r1, r9, r3
 801b898:	1c4b      	adds	r3, r1, #1
 801b89a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b89e:	7801      	ldrb	r1, [r0, #0]
 801b8a0:	121b      	asrs	r3, r3, #8
 801b8a2:	b29e      	uxth	r6, r3
 801b8a4:	43db      	mvns	r3, r3
 801b8a6:	fb1b fb06 	smulbb	fp, fp, r6
 801b8aa:	b2db      	uxtb	r3, r3
 801b8ac:	fb01 b103 	mla	r1, r1, r3, fp
 801b8b0:	b289      	uxth	r1, r1
 801b8b2:	f101 0b01 	add.w	fp, r1, #1
 801b8b6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b8ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b8be:	fb1b fb03 	smulbb	fp, fp, r3
 801b8c2:	1209      	asrs	r1, r1, #8
 801b8c4:	7001      	strb	r1, [r0, #0]
 801b8c6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b8ca:	fb01 b106 	mla	r1, r1, r6, fp
 801b8ce:	b289      	uxth	r1, r1
 801b8d0:	f101 0b01 	add.w	fp, r1, #1
 801b8d4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801b8d8:	1209      	asrs	r1, r1, #8
 801b8da:	7041      	strb	r1, [r0, #1]
 801b8dc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801b8e0:	f890 c002 	ldrb.w	ip, [r0, #2]
 801b8e4:	fb1c f303 	smulbb	r3, ip, r3
 801b8e8:	fb01 3606 	mla	r6, r1, r6, r3
 801b8ec:	b2b6      	uxth	r6, r6
 801b8ee:	1c73      	adds	r3, r6, #1
 801b8f0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801b8f4:	1236      	asrs	r6, r6, #8
 801b8f6:	7086      	strb	r6, [r0, #2]
 801b8f8:	e7ca      	b.n	801b890 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8fc:	4428      	add	r0, r5
 801b8fe:	441f      	add	r7, r3
 801b900:	e7a8      	b.n	801b854 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801b902:	4b03      	ldr	r3, [pc, #12]	; (801b910 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801b904:	6818      	ldr	r0, [r3, #0]
 801b906:	6803      	ldr	r3, [r0, #0]
 801b908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b90a:	4798      	blx	r3
 801b90c:	e782      	b.n	801b814 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801b90e:	bf00      	nop
 801b910:	2400ea34 	.word	0x2400ea34
 801b914:	2400ea2e 	.word	0x2400ea2e

0801b918 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b91c:	b091      	sub	sp, #68	; 0x44
 801b91e:	4680      	mov	r8, r0
 801b920:	460e      	mov	r6, r1
 801b922:	6810      	ldr	r0, [r2, #0]
 801b924:	6851      	ldr	r1, [r2, #4]
 801b926:	ad0c      	add	r5, sp, #48	; 0x30
 801b928:	4614      	mov	r4, r2
 801b92a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801b92e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801bac8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801b932:	f8df a198 	ldr.w	sl, [pc, #408]	; 801bacc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b936:	c503      	stmia	r5!, {r0, r1}
 801b938:	6818      	ldr	r0, [r3, #0]
 801b93a:	ad0e      	add	r5, sp, #56	; 0x38
 801b93c:	6859      	ldr	r1, [r3, #4]
 801b93e:	c503      	stmia	r5!, {r0, r1}
 801b940:	a80c      	add	r0, sp, #48	; 0x30
 801b942:	f7fa fd8b 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b946:	4621      	mov	r1, r4
 801b948:	a80e      	add	r0, sp, #56	; 0x38
 801b94a:	f7fa fdaf 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b94e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b952:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b956:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b95a:	f8d9 0000 	ldr.w	r0, [r9]
 801b95e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b962:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801b966:	eb08 0401 	add.w	r4, r8, r1
 801b96a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b96e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801b972:	440a      	add	r2, r1
 801b974:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b978:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b97c:	4413      	add	r3, r2
 801b97e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b982:	6803      	ldr	r3, [r0, #0]
 801b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b986:	4798      	blx	r3
 801b988:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b98c:	f8d9 0000 	ldr.w	r0, [r9]
 801b990:	d022      	beq.n	801b9d8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801b992:	2200      	movs	r2, #0
 801b994:	f04f 0c01 	mov.w	ip, #1
 801b998:	6801      	ldr	r1, [r0, #0]
 801b99a:	b2ad      	uxth	r5, r5
 801b99c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b9a0:	e9cd c208 	strd	ip, r2, [sp, #32]
 801b9a4:	f04f 0c0b 	mov.w	ip, #11
 801b9a8:	f8cd c01c 	str.w	ip, [sp, #28]
 801b9ac:	f8ba c000 	ldrh.w	ip, [sl]
 801b9b0:	9704      	str	r7, [sp, #16]
 801b9b2:	9502      	str	r5, [sp, #8]
 801b9b4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801b9b8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b9bc:	9203      	str	r2, [sp, #12]
 801b9be:	fa1f f288 	uxth.w	r2, r8
 801b9c2:	9201      	str	r2, [sp, #4]
 801b9c4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b9c8:	9200      	str	r2, [sp, #0]
 801b9ca:	4632      	mov	r2, r6
 801b9cc:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801b9ce:	4621      	mov	r1, r4
 801b9d0:	47a8      	blx	r5
 801b9d2:	b011      	add	sp, #68	; 0x44
 801b9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9d8:	6803      	ldr	r3, [r0, #0]
 801b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9dc:	4798      	blx	r3
 801b9de:	f8ba 2000 	ldrh.w	r2, [sl]
 801b9e2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b9e6:	f04f 0e03 	mov.w	lr, #3
 801b9ea:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b9ee:	4355      	muls	r5, r2
 801b9f0:	fa1f fc87 	uxth.w	ip, r7
 801b9f4:	fb02 1303 	mla	r3, r2, r3, r1
 801b9f8:	eba2 0208 	sub.w	r2, r2, r8
 801b9fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba08:	4418      	add	r0, r3
 801ba0a:	920b      	str	r2, [sp, #44]	; 0x2c
 801ba0c:	1943      	adds	r3, r0, r5
 801ba0e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801ba12:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801ba16:	eba2 0208 	sub.w	r2, r2, r8
 801ba1a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ba1e:	b2ad      	uxth	r5, r5
 801ba20:	4298      	cmp	r0, r3
 801ba22:	d24a      	bcs.n	801baba <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801ba24:	eb00 0908 	add.w	r9, r0, r8
 801ba28:	4621      	mov	r1, r4
 801ba2a:	4548      	cmp	r0, r9
 801ba2c:	460c      	mov	r4, r1
 801ba2e:	d240      	bcs.n	801bab2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801ba30:	f04f 0a04 	mov.w	sl, #4
 801ba34:	7824      	ldrb	r4, [r4, #0]
 801ba36:	2fff      	cmp	r7, #255	; 0xff
 801ba38:	f101 0101 	add.w	r1, r1, #1
 801ba3c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801ba40:	eb06 0a04 	add.w	sl, r6, r4
 801ba44:	f816 b004 	ldrb.w	fp, [r6, r4]
 801ba48:	d02b      	beq.n	801baa2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801ba4a:	7804      	ldrb	r4, [r0, #0]
 801ba4c:	fb14 f405 	smulbb	r4, r4, r5
 801ba50:	fb0b 440c 	mla	r4, fp, ip, r4
 801ba54:	b2a4      	uxth	r4, r4
 801ba56:	f104 0b01 	add.w	fp, r4, #1
 801ba5a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ba5e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ba62:	fb1b fb05 	smulbb	fp, fp, r5
 801ba66:	1224      	asrs	r4, r4, #8
 801ba68:	7004      	strb	r4, [r0, #0]
 801ba6a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801ba6e:	fb04 b40c 	mla	r4, r4, ip, fp
 801ba72:	b2a4      	uxth	r4, r4
 801ba74:	f104 0b01 	add.w	fp, r4, #1
 801ba78:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801ba7c:	1224      	asrs	r4, r4, #8
 801ba7e:	7044      	strb	r4, [r0, #1]
 801ba80:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801ba84:	f890 a002 	ldrb.w	sl, [r0, #2]
 801ba88:	fb1a fa05 	smulbb	sl, sl, r5
 801ba8c:	fb04 a40c 	mla	r4, r4, ip, sl
 801ba90:	b2a4      	uxth	r4, r4
 801ba92:	f104 0a01 	add.w	sl, r4, #1
 801ba96:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801ba9a:	1224      	asrs	r4, r4, #8
 801ba9c:	7084      	strb	r4, [r0, #2]
 801ba9e:	3003      	adds	r0, #3
 801baa0:	e7c3      	b.n	801ba2a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801baa2:	f880 b000 	strb.w	fp, [r0]
 801baa6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801baaa:	7044      	strb	r4, [r0, #1]
 801baac:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801bab0:	e7f4      	b.n	801ba9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801bab2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bab4:	4420      	add	r0, r4
 801bab6:	188c      	adds	r4, r1, r2
 801bab8:	e7b2      	b.n	801ba20 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801baba:	4b03      	ldr	r3, [pc, #12]	; (801bac8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801babc:	6818      	ldr	r0, [r3, #0]
 801babe:	6803      	ldr	r3, [r0, #0]
 801bac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bac2:	4798      	blx	r3
 801bac4:	e785      	b.n	801b9d2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801bac6:	bf00      	nop
 801bac8:	2400ea34 	.word	0x2400ea34
 801bacc:	2400ea2e 	.word	0x2400ea2e

0801bad0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801bad0:	b430      	push	{r4, r5}
 801bad2:	780d      	ldrb	r5, [r1, #0]
 801bad4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801bad8:	b11d      	cbz	r5, 801bae2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801bada:	2d01      	cmp	r5, #1
 801badc:	d005      	beq.n	801baea <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801bade:	bc30      	pop	{r4, r5}
 801bae0:	4770      	bx	lr
 801bae2:	9402      	str	r4, [sp, #8]
 801bae4:	bc30      	pop	{r4, r5}
 801bae6:	f7ff be3f 	b.w	801b768 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801baea:	9402      	str	r4, [sp, #8]
 801baec:	bc30      	pop	{r4, r5}
 801baee:	f7ff bf13 	b.w	801b918 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801baf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801baf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801baf8:	4605      	mov	r5, r0
 801bafa:	b08f      	sub	sp, #60	; 0x3c
 801bafc:	460c      	mov	r4, r1
 801bafe:	461f      	mov	r7, r3
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d052      	beq.n	801bbaa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bb04:	6808      	ldr	r0, [r1, #0]
 801bb06:	ab0a      	add	r3, sp, #40	; 0x28
 801bb08:	6849      	ldr	r1, [r1, #4]
 801bb0a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801bcd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801bb0e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801bcd8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801bb12:	c303      	stmia	r3!, {r0, r1}
 801bb14:	6810      	ldr	r0, [r2, #0]
 801bb16:	ab0c      	add	r3, sp, #48	; 0x30
 801bb18:	6851      	ldr	r1, [r2, #4]
 801bb1a:	c303      	stmia	r3!, {r0, r1}
 801bb1c:	a80a      	add	r0, sp, #40	; 0x28
 801bb1e:	f7fa fc9d 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bb22:	4621      	mov	r1, r4
 801bb24:	a80c      	add	r0, sp, #48	; 0x30
 801bb26:	f7fa fcc1 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bb2a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801bb2e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801bb32:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bb36:	f8d8 0000 	ldr.w	r0, [r8]
 801bb3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bb3e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801bb42:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801bb46:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801bb4a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801bb4e:	440a      	add	r2, r1
 801bb50:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801bb54:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801bb58:	4413      	add	r3, r2
 801bb5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bb5e:	6803      	ldr	r3, [r0, #0]
 801bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb62:	4798      	blx	r3
 801bb64:	2fff      	cmp	r7, #255	; 0xff
 801bb66:	d023      	beq.n	801bbb0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801bb68:	f010 0f04 	tst.w	r0, #4
 801bb6c:	f8d8 0000 	ldr.w	r0, [r8]
 801bb70:	d021      	beq.n	801bbb6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801bb72:	2100      	movs	r1, #0
 801bb74:	f04f 0e01 	mov.w	lr, #1
 801bb78:	f8d0 c000 	ldr.w	ip, [r0]
 801bb7c:	b2a4      	uxth	r4, r4
 801bb7e:	9106      	str	r1, [sp, #24]
 801bb80:	b2b6      	uxth	r6, r6
 801bb82:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801bb86:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801bb8a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801bb8e:	f8b9 e000 	ldrh.w	lr, [r9]
 801bb92:	9703      	str	r7, [sp, #12]
 801bb94:	9401      	str	r4, [sp, #4]
 801bb96:	9600      	str	r6, [sp, #0]
 801bb98:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801bb9c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bba0:	9102      	str	r1, [sp, #8]
 801bba2:	4629      	mov	r1, r5
 801bba4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801bba8:	47a0      	blx	r4
 801bbaa:	b00f      	add	sp, #60	; 0x3c
 801bbac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbb0:	f010 0f01 	tst.w	r0, #1
 801bbb4:	e7da      	b.n	801bb6c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801bbb6:	6803      	ldr	r3, [r0, #0]
 801bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbba:	4798      	blx	r3
 801bbbc:	f8b9 1000 	ldrh.w	r1, [r9]
 801bbc0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801bbc4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801bbc8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801bbcc:	434c      	muls	r4, r1
 801bbce:	2fff      	cmp	r7, #255	; 0xff
 801bbd0:	fb01 2303 	mla	r3, r1, r3, r2
 801bbd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bbd8:	eba1 0106 	sub.w	r1, r1, r6
 801bbdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bbe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801bbe4:	4418      	add	r0, r3
 801bbe6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801bbea:	eba3 0606 	sub.w	r6, r3, r6
 801bbee:	4404      	add	r4, r0
 801bbf0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801bbf4:	d04a      	beq.n	801bc8c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801bbf6:	43fa      	mvns	r2, r7
 801bbf8:	b2bb      	uxth	r3, r7
 801bbfa:	b2d7      	uxtb	r7, r2
 801bbfc:	42a0      	cmp	r0, r4
 801bbfe:	d263      	bcs.n	801bcc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bc00:	eb00 0e0c 	add.w	lr, r0, ip
 801bc04:	4586      	cmp	lr, r0
 801bc06:	f100 0803 	add.w	r8, r0, #3
 801bc0a:	d93a      	bls.n	801bc82 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801bc0c:	f835 2b02 	ldrh.w	r2, [r5], #2
 801bc10:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801bc14:	00d0      	lsls	r0, r2, #3
 801bc16:	fb19 f907 	smulbb	r9, r9, r7
 801bc1a:	b2c0      	uxtb	r0, r0
 801bc1c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bc20:	fb00 9003 	mla	r0, r0, r3, r9
 801bc24:	b280      	uxth	r0, r0
 801bc26:	f100 0901 	add.w	r9, r0, #1
 801bc2a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bc2e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801bc32:	fb19 f907 	smulbb	r9, r9, r7
 801bc36:	1200      	asrs	r0, r0, #8
 801bc38:	f808 0c03 	strb.w	r0, [r8, #-3]
 801bc3c:	10d0      	asrs	r0, r2, #3
 801bc3e:	1212      	asrs	r2, r2, #8
 801bc40:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bc44:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bc48:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801bc4c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bc50:	fb00 9003 	mla	r0, r0, r3, r9
 801bc54:	b280      	uxth	r0, r0
 801bc56:	f100 0901 	add.w	r9, r0, #1
 801bc5a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801bc5e:	1200      	asrs	r0, r0, #8
 801bc60:	f808 0c02 	strb.w	r0, [r8, #-2]
 801bc64:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801bc68:	fb10 f007 	smulbb	r0, r0, r7
 801bc6c:	fb02 0203 	mla	r2, r2, r3, r0
 801bc70:	b292      	uxth	r2, r2
 801bc72:	1c50      	adds	r0, r2, #1
 801bc74:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bc78:	4640      	mov	r0, r8
 801bc7a:	1212      	asrs	r2, r2, #8
 801bc7c:	f808 2c01 	strb.w	r2, [r8, #-1]
 801bc80:	e7c0      	b.n	801bc04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801bc82:	4408      	add	r0, r1
 801bc84:	4435      	add	r5, r6
 801bc86:	e7b9      	b.n	801bbfc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801bc88:	4408      	add	r0, r1
 801bc8a:	4435      	add	r5, r6
 801bc8c:	42a0      	cmp	r0, r4
 801bc8e:	d21b      	bcs.n	801bcc8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801bc90:	eb00 070c 	add.w	r7, r0, ip
 801bc94:	42b8      	cmp	r0, r7
 801bc96:	d2f7      	bcs.n	801bc88 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801bc98:	f835 3b02 	ldrh.w	r3, [r5], #2
 801bc9c:	3003      	adds	r0, #3
 801bc9e:	00da      	lsls	r2, r3, #3
 801bca0:	b2d2      	uxtb	r2, r2
 801bca2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801bca6:	f800 2c03 	strb.w	r2, [r0, #-3]
 801bcaa:	10da      	asrs	r2, r3, #3
 801bcac:	121b      	asrs	r3, r3, #8
 801bcae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801bcb2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801bcb6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801bcba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801bcbe:	f800 2c02 	strb.w	r2, [r0, #-2]
 801bcc2:	f800 3c01 	strb.w	r3, [r0, #-1]
 801bcc6:	e7e5      	b.n	801bc94 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801bcc8:	4b02      	ldr	r3, [pc, #8]	; (801bcd4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801bcca:	6818      	ldr	r0, [r3, #0]
 801bccc:	6803      	ldr	r3, [r0, #0]
 801bcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcd0:	4798      	blx	r3
 801bcd2:	e76a      	b.n	801bbaa <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801bcd4:	2400ea34 	.word	0x2400ea34
 801bcd8:	2400ea2e 	.word	0x2400ea2e

0801bcdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bce0:	b08a      	sub	sp, #40	; 0x28
 801bce2:	460d      	mov	r5, r1
 801bce4:	4604      	mov	r4, r0
 801bce6:	461e      	mov	r6, r3
 801bce8:	6808      	ldr	r0, [r1, #0]
 801bcea:	ab06      	add	r3, sp, #24
 801bcec:	6849      	ldr	r1, [r1, #4]
 801bcee:	4f5d      	ldr	r7, [pc, #372]	; (801be64 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801bcf0:	c303      	stmia	r3!, {r0, r1}
 801bcf2:	6810      	ldr	r0, [r2, #0]
 801bcf4:	ab08      	add	r3, sp, #32
 801bcf6:	6851      	ldr	r1, [r2, #4]
 801bcf8:	c303      	stmia	r3!, {r0, r1}
 801bcfa:	a806      	add	r0, sp, #24
 801bcfc:	f7fa fbae 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bd00:	4629      	mov	r1, r5
 801bd02:	a808      	add	r0, sp, #32
 801bd04:	f7fa fbd2 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801bd08:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bd0c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801bd10:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bd14:	6838      	ldr	r0, [r7, #0]
 801bd16:	fb11 2103 	smlabb	r1, r1, r3, r2
 801bd1a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801bd1e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801bd22:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801bd26:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801bd2a:	440a      	add	r2, r1
 801bd2c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bd30:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bd34:	4413      	add	r3, r2
 801bd36:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bd3a:	6803      	ldr	r3, [r0, #0]
 801bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd3e:	4798      	blx	r3
 801bd40:	2eff      	cmp	r6, #255	; 0xff
 801bd42:	d119      	bne.n	801bd78 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801bd44:	f010 0f20 	tst.w	r0, #32
 801bd48:	6838      	ldr	r0, [r7, #0]
 801bd4a:	d018      	beq.n	801bd7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801bd4c:	b2ad      	uxth	r5, r5
 801bd4e:	2700      	movs	r7, #0
 801bd50:	6801      	ldr	r1, [r0, #0]
 801bd52:	9501      	str	r5, [sp, #4]
 801bd54:	fa1f f588 	uxth.w	r5, r8
 801bd58:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801bd5c:	9500      	str	r5, [sp, #0]
 801bd5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801bd62:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801bd66:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801bd6a:	9602      	str	r6, [sp, #8]
 801bd6c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801bd6e:	4621      	mov	r1, r4
 801bd70:	47a8      	blx	r5
 801bd72:	b00a      	add	sp, #40	; 0x28
 801bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd78:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bd7c:	e7e4      	b.n	801bd48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801bd7e:	6803      	ldr	r3, [r0, #0]
 801bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd82:	4798      	blx	r3
 801bd84:	4b38      	ldr	r3, [pc, #224]	; (801be68 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801bd86:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801bd8a:	f8b3 c000 	ldrh.w	ip, [r3]
 801bd8e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801bd92:	fb0c f505 	mul.w	r5, ip, r5
 801bd96:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801bd9a:	fb0c 2303 	mla	r3, ip, r3, r2
 801bd9e:	ebac 0c08 	sub.w	ip, ip, r8
 801bda2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bda6:	ebae 0e08 	sub.w	lr, lr, r8
 801bdaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801bdb2:	4418      	add	r0, r3
 801bdb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801bdb8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801bdbc:	4405      	add	r5, r0
 801bdbe:	42a8      	cmp	r0, r5
 801bdc0:	d24a      	bcs.n	801be58 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801bdc2:	eb00 0803 	add.w	r8, r0, r3
 801bdc6:	4540      	cmp	r0, r8
 801bdc8:	d243      	bcs.n	801be52 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801bdca:	78e2      	ldrb	r2, [r4, #3]
 801bdcc:	b15a      	cbz	r2, 801bde6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801bdce:	2aff      	cmp	r2, #255	; 0xff
 801bdd0:	f894 9000 	ldrb.w	r9, [r4]
 801bdd4:	d10a      	bne.n	801bdec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801bdd6:	2eff      	cmp	r6, #255	; 0xff
 801bdd8:	d108      	bne.n	801bdec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801bdda:	f880 9000 	strb.w	r9, [r0]
 801bdde:	7862      	ldrb	r2, [r4, #1]
 801bde0:	7042      	strb	r2, [r0, #1]
 801bde2:	78a2      	ldrb	r2, [r4, #2]
 801bde4:	7082      	strb	r2, [r0, #2]
 801bde6:	3003      	adds	r0, #3
 801bde8:	3404      	adds	r4, #4
 801bdea:	e7ec      	b.n	801bdc6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801bdec:	4372      	muls	r2, r6
 801bdee:	1c51      	adds	r1, r2, #1
 801bdf0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801bdf4:	1209      	asrs	r1, r1, #8
 801bdf6:	fa1f fa81 	uxth.w	sl, r1
 801bdfa:	43c9      	mvns	r1, r1
 801bdfc:	fb19 f90a 	smulbb	r9, r9, sl
 801be00:	b2ca      	uxtb	r2, r1
 801be02:	7801      	ldrb	r1, [r0, #0]
 801be04:	fb01 9902 	mla	r9, r1, r2, r9
 801be08:	fa1f f989 	uxth.w	r9, r9
 801be0c:	f109 0101 	add.w	r1, r9, #1
 801be10:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801be14:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be18:	f880 9000 	strb.w	r9, [r0]
 801be1c:	f890 9001 	ldrb.w	r9, [r0, #1]
 801be20:	7861      	ldrb	r1, [r4, #1]
 801be22:	fb19 f902 	smulbb	r9, r9, r2
 801be26:	fb01 910a 	mla	r1, r1, sl, r9
 801be2a:	b289      	uxth	r1, r1
 801be2c:	f101 0901 	add.w	r9, r1, #1
 801be30:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801be34:	1209      	asrs	r1, r1, #8
 801be36:	7041      	strb	r1, [r0, #1]
 801be38:	7881      	ldrb	r1, [r0, #2]
 801be3a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801be3e:	fb11 f202 	smulbb	r2, r1, r2
 801be42:	fb09 220a 	mla	r2, r9, sl, r2
 801be46:	b292      	uxth	r2, r2
 801be48:	1c51      	adds	r1, r2, #1
 801be4a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801be4e:	1212      	asrs	r2, r2, #8
 801be50:	e7c8      	b.n	801bde4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801be52:	4460      	add	r0, ip
 801be54:	4474      	add	r4, lr
 801be56:	e7b2      	b.n	801bdbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801be58:	6838      	ldr	r0, [r7, #0]
 801be5a:	6803      	ldr	r3, [r0, #0]
 801be5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be5e:	4798      	blx	r3
 801be60:	e787      	b.n	801bd72 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801be62:	bf00      	nop
 801be64:	2400ea34 	.word	0x2400ea34
 801be68:	2400ea2e 	.word	0x2400ea2e

0801be6c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801be6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be70:	b085      	sub	sp, #20
 801be72:	4606      	mov	r6, r0
 801be74:	460c      	mov	r4, r1
 801be76:	4691      	mov	r9, r2
 801be78:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801be7c:	4698      	mov	r8, r3
 801be7e:	b31d      	cbz	r5, 801bec8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801be80:	4608      	mov	r0, r1
 801be82:	f7fd fa4f 	bl	8019324 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801be86:	4607      	mov	r7, r0
 801be88:	4620      	mov	r0, r4
 801be8a:	f7fd fa7f 	bl	801938c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801be8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801be92:	4620      	mov	r0, r4
 801be94:	f8ad 9008 	strh.w	r9, [sp, #8]
 801be98:	f8ad 800a 	strh.w	r8, [sp, #10]
 801be9c:	f8ad 700c 	strh.w	r7, [sp, #12]
 801bea0:	f7fd fb78 	bl	8019594 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801bea4:	280b      	cmp	r0, #11
 801bea6:	d80f      	bhi.n	801bec8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801bea8:	e8df f000 	tbb	[pc, r0]
 801beac:	0e062920 	.word	0x0e062920
 801beb0:	0e0e0e0e 	.word	0x0e0e0e0e
 801beb4:	110e0e0e 	.word	0x110e0e0e
 801beb8:	4620      	mov	r0, r4
 801beba:	f7fd fae7 	bl	801948c <_ZNK8touchgfx6Bitmap7getDataEv>
 801bebe:	462b      	mov	r3, r5
 801bec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bec2:	a902      	add	r1, sp, #8
 801bec4:	f7ff ff0a 	bl	801bcdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bec8:	b005      	add	sp, #20
 801beca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bece:	4620      	mov	r0, r4
 801bed0:	f7fd fadc 	bl	801948c <_ZNK8touchgfx6Bitmap7getDataEv>
 801bed4:	4606      	mov	r6, r0
 801bed6:	4620      	mov	r0, r4
 801bed8:	f7fd fb08 	bl	80194ec <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801bedc:	9500      	str	r5, [sp, #0]
 801bede:	4601      	mov	r1, r0
 801bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bee2:	aa02      	add	r2, sp, #8
 801bee4:	4630      	mov	r0, r6
 801bee6:	f7ff fdf3 	bl	801bad0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801beea:	e7ed      	b.n	801bec8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801beec:	4620      	mov	r0, r4
 801beee:	f7fd facd 	bl	801948c <_ZNK8touchgfx6Bitmap7getDataEv>
 801bef2:	462b      	mov	r3, r5
 801bef4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bef6:	a902      	add	r1, sp, #8
 801bef8:	f7ff fdfc 	bl	801baf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801befc:	e7e4      	b.n	801bec8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801befe:	6833      	ldr	r3, [r6, #0]
 801bf00:	4620      	mov	r0, r4
 801bf02:	68df      	ldr	r7, [r3, #12]
 801bf04:	f7fd fac2 	bl	801948c <_ZNK8touchgfx6Bitmap7getDataEv>
 801bf08:	2300      	movs	r3, #0
 801bf0a:	4601      	mov	r1, r0
 801bf0c:	aa02      	add	r2, sp, #8
 801bf0e:	4630      	mov	r0, r6
 801bf10:	e9cd 5300 	strd	r5, r3, [sp]
 801bf14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bf16:	47b8      	blx	r7
 801bf18:	e7d6      	b.n	801bec8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801bf1a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801bf1a:	b4f0      	push	{r4, r5, r6, r7}
 801bf1c:	4616      	mov	r6, r2
 801bf1e:	461c      	mov	r4, r3
 801bf20:	460d      	mov	r5, r1
 801bf22:	9a04      	ldr	r2, [sp, #16]
 801bf24:	2e01      	cmp	r6, #1
 801bf26:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bf2a:	d00e      	beq.n	801bf4a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801bf2c:	d303      	bcc.n	801bf36 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801bf2e:	2e02      	cmp	r6, #2
 801bf30:	d006      	beq.n	801bf40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801bf32:	bcf0      	pop	{r4, r5, r6, r7}
 801bf34:	4770      	bx	lr
 801bf36:	4621      	mov	r1, r4
 801bf38:	4628      	mov	r0, r5
 801bf3a:	bcf0      	pop	{r4, r5, r6, r7}
 801bf3c:	f7ff bdda 	b.w	801baf4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801bf40:	4621      	mov	r1, r4
 801bf42:	4628      	mov	r0, r5
 801bf44:	bcf0      	pop	{r4, r5, r6, r7}
 801bf46:	f7ff bec9 	b.w	801bcdc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801bf4a:	6805      	ldr	r5, [r0, #0]
 801bf4c:	2600      	movs	r6, #0
 801bf4e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801bf52:	68ed      	ldr	r5, [r5, #12]
 801bf54:	4613      	mov	r3, r2
 801bf56:	4622      	mov	r2, r4
 801bf58:	46ac      	mov	ip, r5
 801bf5a:	bcf0      	pop	{r4, r5, r6, r7}
 801bf5c:	4760      	bx	ip
	...

0801bf60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801bf60:	b160      	cbz	r0, 801bf7c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801bf62:	2903      	cmp	r1, #3
 801bf64:	d818      	bhi.n	801bf98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801bf66:	e8df f001 	tbb	[pc, r1]
 801bf6a:	1902      	.short	0x1902
 801bf6c:	1b06      	.short	0x1b06
 801bf6e:	4b0e      	ldr	r3, [pc, #56]	; (801bfa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801bf70:	8818      	ldrh	r0, [r3, #0]
 801bf72:	4240      	negs	r0, r0
 801bf74:	4770      	bx	lr
 801bf76:	4b0c      	ldr	r3, [pc, #48]	; (801bfa8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801bf78:	8818      	ldrh	r0, [r3, #0]
 801bf7a:	4770      	bx	lr
 801bf7c:	2903      	cmp	r1, #3
 801bf7e:	d80b      	bhi.n	801bf98 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801bf80:	a301      	add	r3, pc, #4	; (adr r3, 801bf88 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801bf82:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801bf86:	bf00      	nop
 801bf88:	0801bf9d 	.word	0x0801bf9d
 801bf8c:	0801bf77 	.word	0x0801bf77
 801bf90:	0801bfa1 	.word	0x0801bfa1
 801bf94:	0801bf6f 	.word	0x0801bf6f
 801bf98:	2000      	movs	r0, #0
 801bf9a:	4770      	bx	lr
 801bf9c:	2001      	movs	r0, #1
 801bf9e:	4770      	bx	lr
 801bfa0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa4:	4770      	bx	lr
 801bfa6:	bf00      	nop
 801bfa8:	2400ea2e 	.word	0x2400ea2e

0801bfac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801bfac:	b160      	cbz	r0, 801bfc8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801bfae:	2903      	cmp	r1, #3
 801bfb0:	d818      	bhi.n	801bfe4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801bfb2:	e8df f001 	tbb	[pc, r1]
 801bfb6:	0219      	.short	0x0219
 801bfb8:	051b      	.short	0x051b
 801bfba:	4b0e      	ldr	r3, [pc, #56]	; (801bff4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801bfbc:	8818      	ldrh	r0, [r3, #0]
 801bfbe:	4770      	bx	lr
 801bfc0:	4b0c      	ldr	r3, [pc, #48]	; (801bff4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801bfc2:	8818      	ldrh	r0, [r3, #0]
 801bfc4:	4240      	negs	r0, r0
 801bfc6:	4770      	bx	lr
 801bfc8:	2903      	cmp	r1, #3
 801bfca:	d80b      	bhi.n	801bfe4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801bfcc:	a301      	add	r3, pc, #4	; (adr r3, 801bfd4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801bfce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801bfd2:	bf00      	nop
 801bfd4:	0801bfbb 	.word	0x0801bfbb
 801bfd8:	0801bfed 	.word	0x0801bfed
 801bfdc:	0801bfc1 	.word	0x0801bfc1
 801bfe0:	0801bfe9 	.word	0x0801bfe9
 801bfe4:	2000      	movs	r0, #0
 801bfe6:	4770      	bx	lr
 801bfe8:	2001      	movs	r0, #1
 801bfea:	4770      	bx	lr
 801bfec:	f04f 30ff 	mov.w	r0, #4294967295
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop
 801bff4:	2400ea2e 	.word	0x2400ea2e

0801bff8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bffc:	b097      	sub	sp, #92	; 0x5c
 801bffe:	910b      	str	r1, [sp, #44]	; 0x2c
 801c000:	a912      	add	r1, sp, #72	; 0x48
 801c002:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801c006:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801c00a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801c00e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801c012:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801c016:	e881 000c 	stmia.w	r1, {r2, r3}
 801c01a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801c01e:	930a      	str	r3, [sp, #40]	; 0x28
 801c020:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801c024:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801c028:	9311      	str	r3, [sp, #68]	; 0x44
 801c02a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801c02e:	798d      	ldrb	r5, [r1, #6]
 801c030:	930c      	str	r3, [sp, #48]	; 0x30
 801c032:	7b4b      	ldrb	r3, [r1, #13]
 801c034:	0158      	lsls	r0, r3, #5
 801c036:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c03a:	4328      	orrs	r0, r5
 801c03c:	9009      	str	r0, [sp, #36]	; 0x24
 801c03e:	f000 817c 	beq.w	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c042:	011b      	lsls	r3, r3, #4
 801c044:	79c8      	ldrb	r0, [r1, #7]
 801c046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c04a:	4303      	orrs	r3, r0
 801c04c:	930e      	str	r3, [sp, #56]	; 0x38
 801c04e:	f000 8174 	beq.w	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c052:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801c056:	b29b      	uxth	r3, r3
 801c058:	2f00      	cmp	r7, #0
 801c05a:	f000 8116 	beq.w	801c28a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801c05e:	1aff      	subs	r7, r7, r3
 801c060:	b2bf      	uxth	r7, r7
 801c062:	043b      	lsls	r3, r7, #16
 801c064:	d502      	bpl.n	801c06c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c066:	1bf6      	subs	r6, r6, r7
 801c068:	2700      	movs	r7, #0
 801c06a:	b236      	sxth	r6, r6
 801c06c:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c070:	a812      	add	r0, sp, #72	; 0x48
 801c072:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801c076:	428e      	cmp	r6, r1
 801c078:	b28b      	uxth	r3, r1
 801c07a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801c07e:	bfbf      	itttt	lt
 801c080:	18ff      	addlt	r7, r7, r3
 801c082:	1bbe      	sublt	r6, r7, r6
 801c084:	b2b7      	uxthlt	r7, r6
 801c086:	460e      	movlt	r6, r1
 801c088:	8891      	ldrh	r1, [r2, #4]
 801c08a:	440b      	add	r3, r1
 801c08c:	4631      	mov	r1, r6
 801c08e:	b21b      	sxth	r3, r3
 801c090:	9310      	str	r3, [sp, #64]	; 0x40
 801c092:	88d3      	ldrh	r3, [r2, #6]
 801c094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c096:	449a      	add	sl, r3
 801c098:	fa0f f38a 	sxth.w	r3, sl
 801c09c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801c0a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c0a2:	4bb5      	ldr	r3, [pc, #724]	; (801c378 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801c0a4:	f893 b000 	ldrb.w	fp, [r3]
 801c0a8:	f10b 3cff 	add.w	ip, fp, #4294967295
 801c0ac:	f1dc 0300 	rsbs	r3, ip, #0
 801c0b0:	eb43 030c 	adc.w	r3, r3, ip
 801c0b4:	930d      	str	r3, [sp, #52]	; 0x34
 801c0b6:	464b      	mov	r3, r9
 801c0b8:	f7fa f84a 	bl	8016150 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801c0bc:	4631      	mov	r1, r6
 801c0be:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801c0c2:	464b      	mov	r3, r9
 801c0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c0c6:	a812      	add	r0, sp, #72	; 0x48
 801c0c8:	f7fa f85f 	bl	801618a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801c0cc:	a916      	add	r1, sp, #88	; 0x58
 801c0ce:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801c0d2:	a815      	add	r0, sp, #84	; 0x54
 801c0d4:	f7fa f980 	bl	80163d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801c0d8:	f1b9 0f00 	cmp.w	r9, #0
 801c0dc:	f040 80d8 	bne.w	801c290 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801c0e0:	f1bb 0f01 	cmp.w	fp, #1
 801c0e4:	f040 80dc 	bne.w	801c2a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801c0e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c0ea:	b153      	cbz	r3, 801c102 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801c0ec:	2508      	movs	r5, #8
 801c0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0f0:	fb95 f3f8 	sdiv	r3, r5, r8
 801c0f4:	1e5d      	subs	r5, r3, #1
 801c0f6:	4415      	add	r5, r2
 801c0f8:	fb95 f5f3 	sdiv	r5, r5, r3
 801c0fc:	fb15 f503 	smulbb	r5, r5, r3
 801c100:	b2ad      	uxth	r5, r5
 801c102:	b907      	cbnz	r7, 801c106 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801c104:	b16c      	cbz	r4, 801c122 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801c106:	fb04 7305 	mla	r3, r4, r5, r7
 801c10a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c10c:	ebaa 0a04 	sub.w	sl, sl, r4
 801c110:	fb08 f303 	mul.w	r3, r8, r3
 801c114:	fa1f fa8a 	uxth.w	sl, sl
 801c118:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801c11c:	f003 0407 	and.w	r4, r3, #7
 801c120:	9226      	str	r2, [sp, #152]	; 0x98
 801c122:	4649      	mov	r1, r9
 801c124:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c126:	f7ff ff1b 	bl	801bf60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801c12a:	4683      	mov	fp, r0
 801c12c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c12e:	f7ff ff3d 	bl	801bfac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801c132:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c136:	4681      	mov	r9, r0
 801c138:	1a9b      	subs	r3, r3, r2
 801c13a:	459a      	cmp	sl, r3
 801c13c:	bfa8      	it	ge
 801c13e:	469a      	movge	sl, r3
 801c140:	f1ba 0f00 	cmp.w	sl, #0
 801c144:	f340 80f9 	ble.w	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c148:	1bf6      	subs	r6, r6, r7
 801c14a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c14c:	1b9e      	subs	r6, r3, r6
 801c14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c150:	429e      	cmp	r6, r3
 801c152:	bfd4      	ite	le
 801c154:	ebc7 0706 	rsble	r7, r7, r6
 801c158:	ebc7 0703 	rsbgt	r7, r7, r3
 801c15c:	2f00      	cmp	r7, #0
 801c15e:	f340 80ec 	ble.w	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c162:	1bed      	subs	r5, r5, r7
 801c164:	fb08 f305 	mul.w	r3, r8, r5
 801c168:	930d      	str	r3, [sp, #52]	; 0x34
 801c16a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c16c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801c170:	930e      	str	r3, [sp, #56]	; 0x38
 801c172:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c174:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c178:	930f      	str	r3, [sp, #60]	; 0x3c
 801c17a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c17c:	b2db      	uxtb	r3, r3
 801c17e:	9310      	str	r3, [sp, #64]	; 0x40
 801c180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c182:	2b00      	cmp	r3, #0
 801c184:	f040 80de 	bne.w	801c344 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801c188:	4b7c      	ldr	r3, [pc, #496]	; (801c37c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801c18a:	6818      	ldr	r0, [r3, #0]
 801c18c:	6803      	ldr	r3, [r0, #0]
 801c18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c190:	4798      	blx	r3
 801c192:	2301      	movs	r3, #1
 801c194:	4a7a      	ldr	r2, [pc, #488]	; (801c380 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801c196:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801c19a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801c19e:	fa03 f308 	lsl.w	r3, r3, r8
 801c1a2:	8811      	ldrh	r1, [r2, #0]
 801c1a4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801c1a8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801c1ac:	3b01      	subs	r3, #1
 801c1ae:	fb06 bb07 	mla	fp, r6, r7, fp
 801c1b2:	b2db      	uxtb	r3, r3
 801c1b4:	930a      	str	r3, [sp, #40]	; 0x28
 801c1b6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801c1ba:	fb01 2303 	mla	r3, r1, r3, r2
 801c1be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c1c2:	18c3      	adds	r3, r0, r3
 801c1c4:	9309      	str	r3, [sp, #36]	; 0x24
 801c1c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c1c8:	781a      	ldrb	r2, [r3, #0]
 801c1ca:	4122      	asrs	r2, r4
 801c1cc:	b2d2      	uxtb	r2, r2
 801c1ce:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801c1d2:	f0c0 80d7 	bcc.w	801c384 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801c1d6:	46be      	mov	lr, r7
 801c1d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c1da:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801c1de:	f0c0 80ba 	bcc.w	801c356 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801c1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1e4:	4013      	ands	r3, r2
 801c1e6:	d041      	beq.n	801c26c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c1e8:	20ff      	movs	r0, #255	; 0xff
 801c1ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801c1ec:	fb90 f5f5 	sdiv	r5, r0, r5
 801c1f0:	436b      	muls	r3, r5
 801c1f2:	2bfe      	cmp	r3, #254	; 0xfe
 801c1f4:	dd03      	ble.n	801c1fe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801c1f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c1f8:	4285      	cmp	r5, r0
 801c1fa:	f000 80a5 	beq.w	801c348 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801c1fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c200:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c202:	fb15 f303 	smulbb	r3, r5, r3
 801c206:	b29b      	uxth	r3, r3
 801c208:	1c5d      	adds	r5, r3, #1
 801c20a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801c20e:	780d      	ldrb	r5, [r1, #0]
 801c210:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c214:	fa1f fc83 	uxth.w	ip, r3
 801c218:	43db      	mvns	r3, r3
 801c21a:	fb10 f90c 	smulbb	r9, r0, ip
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c222:	fb05 9503 	mla	r5, r5, r3, r9
 801c226:	b2ad      	uxth	r5, r5
 801c228:	f105 0901 	add.w	r9, r5, #1
 801c22c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c230:	fb10 f90c 	smulbb	r9, r0, ip
 801c234:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c236:	122d      	asrs	r5, r5, #8
 801c238:	fb10 fc0c 	smulbb	ip, r0, ip
 801c23c:	700d      	strb	r5, [r1, #0]
 801c23e:	784d      	ldrb	r5, [r1, #1]
 801c240:	fb05 9503 	mla	r5, r5, r3, r9
 801c244:	b2ad      	uxth	r5, r5
 801c246:	f105 0901 	add.w	r9, r5, #1
 801c24a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801c24e:	122d      	asrs	r5, r5, #8
 801c250:	704d      	strb	r5, [r1, #1]
 801c252:	788d      	ldrb	r5, [r1, #2]
 801c254:	fb05 cc03 	mla	ip, r5, r3, ip
 801c258:	fa1f fc8c 	uxth.w	ip, ip
 801c25c:	f10c 0301 	add.w	r3, ip, #1
 801c260:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c264:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c268:	f881 c002 	strb.w	ip, [r1, #2]
 801c26c:	4444      	add	r4, r8
 801c26e:	4431      	add	r1, r6
 801c270:	b2a4      	uxth	r4, r4
 801c272:	2c07      	cmp	r4, #7
 801c274:	bf89      	itett	hi
 801c276:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801c278:	fa42 f208 	asrls.w	r2, r2, r8
 801c27c:	2400      	movhi	r4, #0
 801c27e:	785a      	ldrbhi	r2, [r3, #1]
 801c280:	bf8a      	itet	hi
 801c282:	3301      	addhi	r3, #1
 801c284:	b2d2      	uxtbls	r2, r2
 801c286:	9326      	strhi	r3, [sp, #152]	; 0x98
 801c288:	e7a7      	b.n	801c1da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801c28a:	441e      	add	r6, r3
 801c28c:	b236      	sxth	r6, r6
 801c28e:	e6ed      	b.n	801c06c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801c290:	f1b9 0f01 	cmp.w	r9, #1
 801c294:	f47f af28 	bne.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c298:	f1bb 0f01 	cmp.w	fp, #1
 801c29c:	f47f af24 	bne.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2a0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801c37c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801c2a4:	f8db 0000 	ldr.w	r0, [fp]
 801c2a8:	6803      	ldr	r3, [r0, #0]
 801c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c2ac:	4798      	blx	r3
 801c2ae:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801c2b2:	465a      	mov	r2, fp
 801c2b4:	d006      	beq.n	801c2c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c2b6:	f1b8 0f04 	cmp.w	r8, #4
 801c2ba:	d141      	bne.n	801c340 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801c2bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c2be:	3300      	adds	r3, #0
 801c2c0:	bf18      	it	ne
 801c2c2:	2301      	movne	r3, #1
 801c2c4:	0580      	lsls	r0, r0, #22
 801c2c6:	d566      	bpl.n	801c396 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c2c8:	f1b8 0f08 	cmp.w	r8, #8
 801c2cc:	d163      	bne.n	801c396 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	bf0c      	ite	eq
 801c2d2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801c2d6:	f44f 7180 	movne.w	r1, #256	; 0x100
 801c2da:	2f00      	cmp	r7, #0
 801c2dc:	f47f af04 	bne.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2e0:	2c00      	cmp	r4, #0
 801c2e2:	f47f af01 	bne.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c2ea:	18f3      	adds	r3, r6, r3
 801c2ec:	4283      	cmp	r3, r0
 801c2ee:	f73f aefb 	bgt.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c2f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c2f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2f6:	4403      	add	r3, r0
 801c2f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801c2fa:	4283      	cmp	r3, r0
 801c2fc:	f73f aef4 	bgt.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c300:	f1b8 0f08 	cmp.w	r8, #8
 801c304:	6810      	ldr	r0, [r2, #0]
 801c306:	f04f 0600 	mov.w	r6, #0
 801c30a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801c30e:	bf18      	it	ne
 801c310:	3501      	addne	r5, #1
 801c312:	6804      	ldr	r4, [r0, #0]
 801c314:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801c318:	bf18      	it	ne
 801c31a:	f025 0501 	bicne.w	r5, r5, #1
 801c31e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801c322:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c324:	bf18      	it	ne
 801c326:	b2ad      	uxthne	r5, r5
 801c328:	9104      	str	r1, [sp, #16]
 801c32a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c32c:	e9cd 5a00 	strd	r5, sl, [sp]
 801c330:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801c334:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c336:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801c338:	47a0      	blx	r4
 801c33a:	b017      	add	sp, #92	; 0x5c
 801c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c340:	2300      	movs	r3, #0
 801c342:	e7bf      	b.n	801c2c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801c344:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c346:	e724      	b.n	801c192 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801c348:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c34a:	700b      	strb	r3, [r1, #0]
 801c34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c34e:	704b      	strb	r3, [r1, #1]
 801c350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c352:	708b      	strb	r3, [r1, #2]
 801c354:	e78a      	b.n	801c26c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801c356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c358:	b153      	cbz	r3, 801c370 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801c35a:	441c      	add	r4, r3
 801c35c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c35e:	b2a4      	uxth	r4, r4
 801c360:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801c364:	f004 0407 	and.w	r4, r4, #7
 801c368:	781a      	ldrb	r2, [r3, #0]
 801c36a:	9326      	str	r3, [sp, #152]	; 0x98
 801c36c:	4122      	asrs	r2, r4
 801c36e:	b2d2      	uxtb	r2, r2
 801c370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c372:	445b      	add	r3, fp
 801c374:	9309      	str	r3, [sp, #36]	; 0x24
 801c376:	e72a      	b.n	801c1ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801c378:	2400ea2c 	.word	0x2400ea2c
 801c37c:	2400ea34 	.word	0x2400ea34
 801c380:	2400ea2e 	.word	0x2400ea2e
 801c384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c386:	2b00      	cmp	r3, #0
 801c388:	d1d7      	bne.n	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c38a:	4b06      	ldr	r3, [pc, #24]	; (801c3a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801c38c:	6818      	ldr	r0, [r3, #0]
 801c38e:	6803      	ldr	r3, [r0, #0]
 801c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c392:	4798      	blx	r3
 801c394:	e7d1      	b.n	801c33a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801c396:	2b00      	cmp	r3, #0
 801c398:	f43f aea6 	beq.w	801c0e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801c39c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c3a0:	e79b      	b.n	801c2da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801c3a2:	bf00      	nop
 801c3a4:	2400ea34 	.word	0x2400ea34

0801c3a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801c3a8:	b538      	push	{r3, r4, r5, lr}
 801c3aa:	4c15      	ldr	r4, [pc, #84]	; (801c400 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801c3ac:	4605      	mov	r5, r0
 801c3ae:	7823      	ldrb	r3, [r4, #0]
 801c3b0:	f3bf 8f5b 	dmb	ish
 801c3b4:	07da      	lsls	r2, r3, #31
 801c3b6:	d40b      	bmi.n	801c3d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f005 fbb2 	bl	8021b22 <__cxa_guard_acquire>
 801c3be:	b138      	cbz	r0, 801c3d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801c3c0:	4620      	mov	r0, r4
 801c3c2:	f005 fbba 	bl	8021b3a <__cxa_guard_release>
 801c3c6:	4a0f      	ldr	r2, [pc, #60]	; (801c404 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c3c8:	490f      	ldr	r1, [pc, #60]	; (801c408 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801c3ca:	4810      	ldr	r0, [pc, #64]	; (801c40c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c3cc:	f005 fba2 	bl	8021b14 <__aeabi_atexit>
 801c3d0:	4c0f      	ldr	r4, [pc, #60]	; (801c410 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801c3d2:	7823      	ldrb	r3, [r4, #0]
 801c3d4:	f3bf 8f5b 	dmb	ish
 801c3d8:	07db      	lsls	r3, r3, #31
 801c3da:	d40b      	bmi.n	801c3f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c3dc:	4620      	mov	r0, r4
 801c3de:	f005 fba0 	bl	8021b22 <__cxa_guard_acquire>
 801c3e2:	b138      	cbz	r0, 801c3f4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	f005 fba8 	bl	8021b3a <__cxa_guard_release>
 801c3ea:	4a06      	ldr	r2, [pc, #24]	; (801c404 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801c3ec:	4909      	ldr	r1, [pc, #36]	; (801c414 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801c3ee:	480a      	ldr	r0, [pc, #40]	; (801c418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c3f0:	f005 fb90 	bl	8021b14 <__aeabi_atexit>
 801c3f4:	4b05      	ldr	r3, [pc, #20]	; (801c40c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801c3f6:	612b      	str	r3, [r5, #16]
 801c3f8:	4b07      	ldr	r3, [pc, #28]	; (801c418 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801c3fa:	616b      	str	r3, [r5, #20]
 801c3fc:	bd38      	pop	{r3, r4, r5, pc}
 801c3fe:	bf00      	nop
 801c400:	2400eb08 	.word	0x2400eb08
 801c404:	24000000 	.word	0x24000000
 801c408:	0801af6d 	.word	0x0801af6d
 801c40c:	240000a0 	.word	0x240000a0
 801c410:	2400eb0c 	.word	0x2400eb0c
 801c414:	0801af6b 	.word	0x0801af6b
 801c418:	240000a4 	.word	0x240000a4

0801c41c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801c41c:	b538      	push	{r3, r4, r5, lr}
 801c41e:	4c15      	ldr	r4, [pc, #84]	; (801c474 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801c420:	4605      	mov	r5, r0
 801c422:	7823      	ldrb	r3, [r4, #0]
 801c424:	f3bf 8f5b 	dmb	ish
 801c428:	07da      	lsls	r2, r3, #31
 801c42a:	d40b      	bmi.n	801c444 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c42c:	4620      	mov	r0, r4
 801c42e:	f005 fb78 	bl	8021b22 <__cxa_guard_acquire>
 801c432:	b138      	cbz	r0, 801c444 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801c434:	4620      	mov	r0, r4
 801c436:	f005 fb80 	bl	8021b3a <__cxa_guard_release>
 801c43a:	4a0f      	ldr	r2, [pc, #60]	; (801c478 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c43c:	490f      	ldr	r1, [pc, #60]	; (801c47c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801c43e:	4810      	ldr	r0, [pc, #64]	; (801c480 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c440:	f005 fb68 	bl	8021b14 <__aeabi_atexit>
 801c444:	4c0f      	ldr	r4, [pc, #60]	; (801c484 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801c446:	7823      	ldrb	r3, [r4, #0]
 801c448:	f3bf 8f5b 	dmb	ish
 801c44c:	07db      	lsls	r3, r3, #31
 801c44e:	d40b      	bmi.n	801c468 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c450:	4620      	mov	r0, r4
 801c452:	f005 fb66 	bl	8021b22 <__cxa_guard_acquire>
 801c456:	b138      	cbz	r0, 801c468 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801c458:	4620      	mov	r0, r4
 801c45a:	f005 fb6e 	bl	8021b3a <__cxa_guard_release>
 801c45e:	4a06      	ldr	r2, [pc, #24]	; (801c478 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c460:	4909      	ldr	r1, [pc, #36]	; (801c488 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c462:	480a      	ldr	r0, [pc, #40]	; (801c48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c464:	f005 fb56 	bl	8021b14 <__aeabi_atexit>
 801c468:	4b05      	ldr	r3, [pc, #20]	; (801c480 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c46a:	60ab      	str	r3, [r5, #8]
 801c46c:	4b07      	ldr	r3, [pc, #28]	; (801c48c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c46e:	60eb      	str	r3, [r5, #12]
 801c470:	bd38      	pop	{r3, r4, r5, pc}
 801c472:	bf00      	nop
 801c474:	2400eae8 	.word	0x2400eae8
 801c478:	24000000 	.word	0x24000000
 801c47c:	0801af71 	.word	0x0801af71
 801c480:	24000080 	.word	0x24000080
 801c484:	2400eaec 	.word	0x2400eaec
 801c488:	0801af6f 	.word	0x0801af6f
 801c48c:	24000084 	.word	0x24000084

0801c490 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801c490:	b510      	push	{r4, lr}
 801c492:	4604      	mov	r4, r0
 801c494:	f7ff ff88 	bl	801c3a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c498:	4620      	mov	r0, r4
 801c49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c49e:	f7ff bfbd 	b.w	801c41c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c4a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c4a4:	b538      	push	{r3, r4, r5, lr}
 801c4a6:	4c15      	ldr	r4, [pc, #84]	; (801c4fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c4a8:	4605      	mov	r5, r0
 801c4aa:	7823      	ldrb	r3, [r4, #0]
 801c4ac:	f3bf 8f5b 	dmb	ish
 801c4b0:	07da      	lsls	r2, r3, #31
 801c4b2:	d40b      	bmi.n	801c4cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	f005 fb34 	bl	8021b22 <__cxa_guard_acquire>
 801c4ba:	b138      	cbz	r0, 801c4cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f005 fb3c 	bl	8021b3a <__cxa_guard_release>
 801c4c2:	4a0f      	ldr	r2, [pc, #60]	; (801c500 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c4c4:	490f      	ldr	r1, [pc, #60]	; (801c504 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c4c6:	4810      	ldr	r0, [pc, #64]	; (801c508 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c4c8:	f005 fb24 	bl	8021b14 <__aeabi_atexit>
 801c4cc:	4c0f      	ldr	r4, [pc, #60]	; (801c50c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c4ce:	7823      	ldrb	r3, [r4, #0]
 801c4d0:	f3bf 8f5b 	dmb	ish
 801c4d4:	07db      	lsls	r3, r3, #31
 801c4d6:	d40b      	bmi.n	801c4f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c4d8:	4620      	mov	r0, r4
 801c4da:	f005 fb22 	bl	8021b22 <__cxa_guard_acquire>
 801c4de:	b138      	cbz	r0, 801c4f0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	f005 fb2a 	bl	8021b3a <__cxa_guard_release>
 801c4e6:	4a06      	ldr	r2, [pc, #24]	; (801c500 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c4e8:	4909      	ldr	r1, [pc, #36]	; (801c510 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c4ea:	480a      	ldr	r0, [pc, #40]	; (801c514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c4ec:	f005 fb12 	bl	8021b14 <__aeabi_atexit>
 801c4f0:	4b05      	ldr	r3, [pc, #20]	; (801c508 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c4f2:	622b      	str	r3, [r5, #32]
 801c4f4:	4b07      	ldr	r3, [pc, #28]	; (801c514 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c4f6:	626b      	str	r3, [r5, #36]	; 0x24
 801c4f8:	bd38      	pop	{r3, r4, r5, pc}
 801c4fa:	bf00      	nop
 801c4fc:	2400eb10 	.word	0x2400eb10
 801c500:	24000000 	.word	0x24000000
 801c504:	0801af65 	.word	0x0801af65
 801c508:	240000a8 	.word	0x240000a8
 801c50c:	2400eb14 	.word	0x2400eb14
 801c510:	0801af63 	.word	0x0801af63
 801c514:	240000ac 	.word	0x240000ac

0801c518 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c518:	b538      	push	{r3, r4, r5, lr}
 801c51a:	4c15      	ldr	r4, [pc, #84]	; (801c570 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c51c:	4605      	mov	r5, r0
 801c51e:	7823      	ldrb	r3, [r4, #0]
 801c520:	f3bf 8f5b 	dmb	ish
 801c524:	07da      	lsls	r2, r3, #31
 801c526:	d40b      	bmi.n	801c540 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c528:	4620      	mov	r0, r4
 801c52a:	f005 fafa 	bl	8021b22 <__cxa_guard_acquire>
 801c52e:	b138      	cbz	r0, 801c540 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c530:	4620      	mov	r0, r4
 801c532:	f005 fb02 	bl	8021b3a <__cxa_guard_release>
 801c536:	4a0f      	ldr	r2, [pc, #60]	; (801c574 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c538:	490f      	ldr	r1, [pc, #60]	; (801c578 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c53a:	4810      	ldr	r0, [pc, #64]	; (801c57c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c53c:	f005 faea 	bl	8021b14 <__aeabi_atexit>
 801c540:	4c0f      	ldr	r4, [pc, #60]	; (801c580 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c542:	7823      	ldrb	r3, [r4, #0]
 801c544:	f3bf 8f5b 	dmb	ish
 801c548:	07db      	lsls	r3, r3, #31
 801c54a:	d40b      	bmi.n	801c564 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c54c:	4620      	mov	r0, r4
 801c54e:	f005 fae8 	bl	8021b22 <__cxa_guard_acquire>
 801c552:	b138      	cbz	r0, 801c564 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c554:	4620      	mov	r0, r4
 801c556:	f005 faf0 	bl	8021b3a <__cxa_guard_release>
 801c55a:	4a06      	ldr	r2, [pc, #24]	; (801c574 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c55c:	4909      	ldr	r1, [pc, #36]	; (801c584 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c55e:	480a      	ldr	r0, [pc, #40]	; (801c588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c560:	f005 fad8 	bl	8021b14 <__aeabi_atexit>
 801c564:	4b05      	ldr	r3, [pc, #20]	; (801c57c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c566:	61ab      	str	r3, [r5, #24]
 801c568:	4b07      	ldr	r3, [pc, #28]	; (801c588 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c56a:	61eb      	str	r3, [r5, #28]
 801c56c:	bd38      	pop	{r3, r4, r5, pc}
 801c56e:	bf00      	nop
 801c570:	2400eaf0 	.word	0x2400eaf0
 801c574:	24000000 	.word	0x24000000
 801c578:	0801af69 	.word	0x0801af69
 801c57c:	24000088 	.word	0x24000088
 801c580:	2400eaf4 	.word	0x2400eaf4
 801c584:	0801af67 	.word	0x0801af67
 801c588:	2400008c 	.word	0x2400008c

0801c58c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c58c:	b510      	push	{r4, lr}
 801c58e:	4604      	mov	r4, r0
 801c590:	f7ff ff88 	bl	801c4a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c594:	4620      	mov	r0, r4
 801c596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c59a:	f7ff bfbd 	b.w	801c518 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c5a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801c5a0:	b538      	push	{r3, r4, r5, lr}
 801c5a2:	4c15      	ldr	r4, [pc, #84]	; (801c5f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801c5a4:	4605      	mov	r5, r0
 801c5a6:	7823      	ldrb	r3, [r4, #0]
 801c5a8:	f3bf 8f5b 	dmb	ish
 801c5ac:	07da      	lsls	r2, r3, #31
 801c5ae:	d40b      	bmi.n	801c5c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c5b0:	4620      	mov	r0, r4
 801c5b2:	f005 fab6 	bl	8021b22 <__cxa_guard_acquire>
 801c5b6:	b138      	cbz	r0, 801c5c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801c5b8:	4620      	mov	r0, r4
 801c5ba:	f005 fabe 	bl	8021b3a <__cxa_guard_release>
 801c5be:	4a0f      	ldr	r2, [pc, #60]	; (801c5fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c5c0:	490f      	ldr	r1, [pc, #60]	; (801c600 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801c5c2:	4810      	ldr	r0, [pc, #64]	; (801c604 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c5c4:	f005 faa6 	bl	8021b14 <__aeabi_atexit>
 801c5c8:	4c0f      	ldr	r4, [pc, #60]	; (801c608 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801c5ca:	7823      	ldrb	r3, [r4, #0]
 801c5cc:	f3bf 8f5b 	dmb	ish
 801c5d0:	07db      	lsls	r3, r3, #31
 801c5d2:	d40b      	bmi.n	801c5ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c5d4:	4620      	mov	r0, r4
 801c5d6:	f005 faa4 	bl	8021b22 <__cxa_guard_acquire>
 801c5da:	b138      	cbz	r0, 801c5ec <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801c5dc:	4620      	mov	r0, r4
 801c5de:	f005 faac 	bl	8021b3a <__cxa_guard_release>
 801c5e2:	4a06      	ldr	r2, [pc, #24]	; (801c5fc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801c5e4:	4909      	ldr	r1, [pc, #36]	; (801c60c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801c5e6:	480a      	ldr	r0, [pc, #40]	; (801c610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c5e8:	f005 fa94 	bl	8021b14 <__aeabi_atexit>
 801c5ec:	4b05      	ldr	r3, [pc, #20]	; (801c604 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801c5ee:	632b      	str	r3, [r5, #48]	; 0x30
 801c5f0:	4b07      	ldr	r3, [pc, #28]	; (801c610 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801c5f2:	636b      	str	r3, [r5, #52]	; 0x34
 801c5f4:	bd38      	pop	{r3, r4, r5, pc}
 801c5f6:	bf00      	nop
 801c5f8:	2400eaf8 	.word	0x2400eaf8
 801c5fc:	24000000 	.word	0x24000000
 801c600:	0801af5d 	.word	0x0801af5d
 801c604:	24000090 	.word	0x24000090
 801c608:	2400eafc 	.word	0x2400eafc
 801c60c:	0801af5b 	.word	0x0801af5b
 801c610:	24000094 	.word	0x24000094

0801c614 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801c614:	b538      	push	{r3, r4, r5, lr}
 801c616:	4c15      	ldr	r4, [pc, #84]	; (801c66c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801c618:	4605      	mov	r5, r0
 801c61a:	7823      	ldrb	r3, [r4, #0]
 801c61c:	f3bf 8f5b 	dmb	ish
 801c620:	07da      	lsls	r2, r3, #31
 801c622:	d40b      	bmi.n	801c63c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c624:	4620      	mov	r0, r4
 801c626:	f005 fa7c 	bl	8021b22 <__cxa_guard_acquire>
 801c62a:	b138      	cbz	r0, 801c63c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801c62c:	4620      	mov	r0, r4
 801c62e:	f005 fa84 	bl	8021b3a <__cxa_guard_release>
 801c632:	4a0f      	ldr	r2, [pc, #60]	; (801c670 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c634:	490f      	ldr	r1, [pc, #60]	; (801c674 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801c636:	4810      	ldr	r0, [pc, #64]	; (801c678 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c638:	f005 fa6c 	bl	8021b14 <__aeabi_atexit>
 801c63c:	4c0f      	ldr	r4, [pc, #60]	; (801c67c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801c63e:	7823      	ldrb	r3, [r4, #0]
 801c640:	f3bf 8f5b 	dmb	ish
 801c644:	07db      	lsls	r3, r3, #31
 801c646:	d40b      	bmi.n	801c660 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c648:	4620      	mov	r0, r4
 801c64a:	f005 fa6a 	bl	8021b22 <__cxa_guard_acquire>
 801c64e:	b138      	cbz	r0, 801c660 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801c650:	4620      	mov	r0, r4
 801c652:	f005 fa72 	bl	8021b3a <__cxa_guard_release>
 801c656:	4a06      	ldr	r2, [pc, #24]	; (801c670 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801c658:	4909      	ldr	r1, [pc, #36]	; (801c680 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801c65a:	480a      	ldr	r0, [pc, #40]	; (801c684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c65c:	f005 fa5a 	bl	8021b14 <__aeabi_atexit>
 801c660:	4b05      	ldr	r3, [pc, #20]	; (801c678 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801c662:	62ab      	str	r3, [r5, #40]	; 0x28
 801c664:	4b07      	ldr	r3, [pc, #28]	; (801c684 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801c666:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c668:	bd38      	pop	{r3, r4, r5, pc}
 801c66a:	bf00      	nop
 801c66c:	2400ead0 	.word	0x2400ead0
 801c670:	24000000 	.word	0x24000000
 801c674:	0801af61 	.word	0x0801af61
 801c678:	24000068 	.word	0x24000068
 801c67c:	2400ead4 	.word	0x2400ead4
 801c680:	0801af5f 	.word	0x0801af5f
 801c684:	2400006c 	.word	0x2400006c

0801c688 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801c688:	b510      	push	{r4, lr}
 801c68a:	4604      	mov	r4, r0
 801c68c:	f7ff ff88 	bl	801c5a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801c690:	4620      	mov	r0, r4
 801c692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c696:	f7ff bfbd 	b.w	801c614 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801c69c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c69c:	b538      	push	{r3, r4, r5, lr}
 801c69e:	4c15      	ldr	r4, [pc, #84]	; (801c6f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c6a0:	4605      	mov	r5, r0
 801c6a2:	7823      	ldrb	r3, [r4, #0]
 801c6a4:	f3bf 8f5b 	dmb	ish
 801c6a8:	07da      	lsls	r2, r3, #31
 801c6aa:	d40b      	bmi.n	801c6c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c6ac:	4620      	mov	r0, r4
 801c6ae:	f005 fa38 	bl	8021b22 <__cxa_guard_acquire>
 801c6b2:	b138      	cbz	r0, 801c6c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	f005 fa40 	bl	8021b3a <__cxa_guard_release>
 801c6ba:	4a0f      	ldr	r2, [pc, #60]	; (801c6f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c6bc:	490f      	ldr	r1, [pc, #60]	; (801c6fc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c6be:	4810      	ldr	r0, [pc, #64]	; (801c700 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c6c0:	f005 fa28 	bl	8021b14 <__aeabi_atexit>
 801c6c4:	4c0f      	ldr	r4, [pc, #60]	; (801c704 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c6c6:	7823      	ldrb	r3, [r4, #0]
 801c6c8:	f3bf 8f5b 	dmb	ish
 801c6cc:	07db      	lsls	r3, r3, #31
 801c6ce:	d40b      	bmi.n	801c6e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c6d0:	4620      	mov	r0, r4
 801c6d2:	f005 fa26 	bl	8021b22 <__cxa_guard_acquire>
 801c6d6:	b138      	cbz	r0, 801c6e8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c6d8:	4620      	mov	r0, r4
 801c6da:	f005 fa2e 	bl	8021b3a <__cxa_guard_release>
 801c6de:	4a06      	ldr	r2, [pc, #24]	; (801c6f8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c6e0:	4909      	ldr	r1, [pc, #36]	; (801c708 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c6e2:	480a      	ldr	r0, [pc, #40]	; (801c70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c6e4:	f005 fa16 	bl	8021b14 <__aeabi_atexit>
 801c6e8:	4b05      	ldr	r3, [pc, #20]	; (801c700 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c6ea:	642b      	str	r3, [r5, #64]	; 0x40
 801c6ec:	4b07      	ldr	r3, [pc, #28]	; (801c70c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c6ee:	646b      	str	r3, [r5, #68]	; 0x44
 801c6f0:	bd38      	pop	{r3, r4, r5, pc}
 801c6f2:	bf00      	nop
 801c6f4:	2400eb00 	.word	0x2400eb00
 801c6f8:	24000000 	.word	0x24000000
 801c6fc:	0801af55 	.word	0x0801af55
 801c700:	24000098 	.word	0x24000098
 801c704:	2400eb04 	.word	0x2400eb04
 801c708:	0801af53 	.word	0x0801af53
 801c70c:	2400009c 	.word	0x2400009c

0801c710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c710:	b538      	push	{r3, r4, r5, lr}
 801c712:	4c15      	ldr	r4, [pc, #84]	; (801c768 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c714:	4605      	mov	r5, r0
 801c716:	7823      	ldrb	r3, [r4, #0]
 801c718:	f3bf 8f5b 	dmb	ish
 801c71c:	07da      	lsls	r2, r3, #31
 801c71e:	d40b      	bmi.n	801c738 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c720:	4620      	mov	r0, r4
 801c722:	f005 f9fe 	bl	8021b22 <__cxa_guard_acquire>
 801c726:	b138      	cbz	r0, 801c738 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c728:	4620      	mov	r0, r4
 801c72a:	f005 fa06 	bl	8021b3a <__cxa_guard_release>
 801c72e:	4a0f      	ldr	r2, [pc, #60]	; (801c76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c730:	490f      	ldr	r1, [pc, #60]	; (801c770 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c732:	4810      	ldr	r0, [pc, #64]	; (801c774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c734:	f005 f9ee 	bl	8021b14 <__aeabi_atexit>
 801c738:	4c0f      	ldr	r4, [pc, #60]	; (801c778 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c73a:	7823      	ldrb	r3, [r4, #0]
 801c73c:	f3bf 8f5b 	dmb	ish
 801c740:	07db      	lsls	r3, r3, #31
 801c742:	d40b      	bmi.n	801c75c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c744:	4620      	mov	r0, r4
 801c746:	f005 f9ec 	bl	8021b22 <__cxa_guard_acquire>
 801c74a:	b138      	cbz	r0, 801c75c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c74c:	4620      	mov	r0, r4
 801c74e:	f005 f9f4 	bl	8021b3a <__cxa_guard_release>
 801c752:	4a06      	ldr	r2, [pc, #24]	; (801c76c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c754:	4909      	ldr	r1, [pc, #36]	; (801c77c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c756:	480a      	ldr	r0, [pc, #40]	; (801c780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c758:	f005 f9dc 	bl	8021b14 <__aeabi_atexit>
 801c75c:	4b05      	ldr	r3, [pc, #20]	; (801c774 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c75e:	63ab      	str	r3, [r5, #56]	; 0x38
 801c760:	4b07      	ldr	r3, [pc, #28]	; (801c780 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c762:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c764:	bd38      	pop	{r3, r4, r5, pc}
 801c766:	bf00      	nop
 801c768:	2400eae0 	.word	0x2400eae0
 801c76c:	24000000 	.word	0x24000000
 801c770:	0801af59 	.word	0x0801af59
 801c774:	24000078 	.word	0x24000078
 801c778:	2400eae4 	.word	0x2400eae4
 801c77c:	0801af57 	.word	0x0801af57
 801c780:	2400007c 	.word	0x2400007c

0801c784 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801c784:	b510      	push	{r4, lr}
 801c786:	4604      	mov	r4, r0
 801c788:	f7ff ff88 	bl	801c69c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c78c:	4620      	mov	r0, r4
 801c78e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c792:	f7ff bfbd 	b.w	801c710 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c798:	b538      	push	{r3, r4, r5, lr}
 801c79a:	4c15      	ldr	r4, [pc, #84]	; (801c7f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c79c:	4605      	mov	r5, r0
 801c79e:	7823      	ldrb	r3, [r4, #0]
 801c7a0:	f3bf 8f5b 	dmb	ish
 801c7a4:	07da      	lsls	r2, r3, #31
 801c7a6:	d40b      	bmi.n	801c7c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c7a8:	4620      	mov	r0, r4
 801c7aa:	f005 f9ba 	bl	8021b22 <__cxa_guard_acquire>
 801c7ae:	b138      	cbz	r0, 801c7c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	f005 f9c2 	bl	8021b3a <__cxa_guard_release>
 801c7b6:	4a0f      	ldr	r2, [pc, #60]	; (801c7f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c7b8:	490f      	ldr	r1, [pc, #60]	; (801c7f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c7ba:	4810      	ldr	r0, [pc, #64]	; (801c7fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c7bc:	f005 f9aa 	bl	8021b14 <__aeabi_atexit>
 801c7c0:	4c0f      	ldr	r4, [pc, #60]	; (801c800 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c7c2:	7823      	ldrb	r3, [r4, #0]
 801c7c4:	f3bf 8f5b 	dmb	ish
 801c7c8:	07db      	lsls	r3, r3, #31
 801c7ca:	d40b      	bmi.n	801c7e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	f005 f9a8 	bl	8021b22 <__cxa_guard_acquire>
 801c7d2:	b138      	cbz	r0, 801c7e4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f005 f9b0 	bl	8021b3a <__cxa_guard_release>
 801c7da:	4a06      	ldr	r2, [pc, #24]	; (801c7f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c7dc:	4909      	ldr	r1, [pc, #36]	; (801c804 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c7de:	480a      	ldr	r0, [pc, #40]	; (801c808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c7e0:	f005 f998 	bl	8021b14 <__aeabi_atexit>
 801c7e4:	4b05      	ldr	r3, [pc, #20]	; (801c7fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c7e6:	652b      	str	r3, [r5, #80]	; 0x50
 801c7e8:	4b07      	ldr	r3, [pc, #28]	; (801c808 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c7ea:	656b      	str	r3, [r5, #84]	; 0x54
 801c7ec:	bd38      	pop	{r3, r4, r5, pc}
 801c7ee:	bf00      	nop
 801c7f0:	2400ead8 	.word	0x2400ead8
 801c7f4:	24000000 	.word	0x24000000
 801c7f8:	0801af4d 	.word	0x0801af4d
 801c7fc:	24000070 	.word	0x24000070
 801c800:	2400eadc 	.word	0x2400eadc
 801c804:	0801af4b 	.word	0x0801af4b
 801c808:	24000074 	.word	0x24000074

0801c80c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c80c:	b538      	push	{r3, r4, r5, lr}
 801c80e:	4c15      	ldr	r4, [pc, #84]	; (801c864 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c810:	4605      	mov	r5, r0
 801c812:	7823      	ldrb	r3, [r4, #0]
 801c814:	f3bf 8f5b 	dmb	ish
 801c818:	07da      	lsls	r2, r3, #31
 801c81a:	d40b      	bmi.n	801c834 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c81c:	4620      	mov	r0, r4
 801c81e:	f005 f980 	bl	8021b22 <__cxa_guard_acquire>
 801c822:	b138      	cbz	r0, 801c834 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c824:	4620      	mov	r0, r4
 801c826:	f005 f988 	bl	8021b3a <__cxa_guard_release>
 801c82a:	4a0f      	ldr	r2, [pc, #60]	; (801c868 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c82c:	490f      	ldr	r1, [pc, #60]	; (801c86c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c82e:	4810      	ldr	r0, [pc, #64]	; (801c870 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c830:	f005 f970 	bl	8021b14 <__aeabi_atexit>
 801c834:	4c0f      	ldr	r4, [pc, #60]	; (801c874 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c836:	7823      	ldrb	r3, [r4, #0]
 801c838:	f3bf 8f5b 	dmb	ish
 801c83c:	07db      	lsls	r3, r3, #31
 801c83e:	d40b      	bmi.n	801c858 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c840:	4620      	mov	r0, r4
 801c842:	f005 f96e 	bl	8021b22 <__cxa_guard_acquire>
 801c846:	b138      	cbz	r0, 801c858 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c848:	4620      	mov	r0, r4
 801c84a:	f005 f976 	bl	8021b3a <__cxa_guard_release>
 801c84e:	4a06      	ldr	r2, [pc, #24]	; (801c868 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c850:	4909      	ldr	r1, [pc, #36]	; (801c878 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c852:	480a      	ldr	r0, [pc, #40]	; (801c87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c854:	f005 f95e 	bl	8021b14 <__aeabi_atexit>
 801c858:	4b05      	ldr	r3, [pc, #20]	; (801c870 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c85a:	64ab      	str	r3, [r5, #72]	; 0x48
 801c85c:	4b07      	ldr	r3, [pc, #28]	; (801c87c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c85e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c860:	bd38      	pop	{r3, r4, r5, pc}
 801c862:	bf00      	nop
 801c864:	2400eac8 	.word	0x2400eac8
 801c868:	24000000 	.word	0x24000000
 801c86c:	0801af51 	.word	0x0801af51
 801c870:	24000060 	.word	0x24000060
 801c874:	2400eacc 	.word	0x2400eacc
 801c878:	0801af4f 	.word	0x0801af4f
 801c87c:	24000064 	.word	0x24000064

0801c880 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801c880:	b510      	push	{r4, lr}
 801c882:	4604      	mov	r4, r0
 801c884:	f7ff ff88 	bl	801c798 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c888:	4620      	mov	r0, r4
 801c88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c88e:	f7ff bfbd 	b.w	801c80c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801c892 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801c892:	b510      	push	{r4, lr}
 801c894:	4604      	mov	r4, r0
 801c896:	f7ff fff3 	bl	801c880 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801c89a:	4620      	mov	r0, r4
 801c89c:	f7ff ff72 	bl	801c784 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f7ff fe73 	bl	801c58c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801c8a6:	4620      	mov	r0, r4
 801c8a8:	f7ff fdf2 	bl	801c490 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801c8ac:	4620      	mov	r0, r4
 801c8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c8b2:	f7ff bee9 	b.w	801c688 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801c8b6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801c8b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ba:	b087      	sub	sp, #28
 801c8bc:	788d      	ldrb	r5, [r1, #2]
 801c8be:	f891 9000 	ldrb.w	r9, [r1]
 801c8c2:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c8c6:	9501      	str	r5, [sp, #4]
 801c8c8:	784d      	ldrb	r5, [r1, #1]
 801c8ca:	9203      	str	r2, [sp, #12]
 801c8cc:	9502      	str	r5, [sp, #8]
 801c8ce:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801c8d2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801c8d6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801c8da:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801c8de:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801c8e2:	fb06 0708 	mla	r7, r6, r8, r0
 801c8e6:	2e00      	cmp	r6, #0
 801c8e8:	eb02 0a07 	add.w	sl, r2, r7
 801c8ec:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801c8f0:	9d01      	ldr	r5, [sp, #4]
 801c8f2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c8f6:	ea45 0509 	orr.w	r5, r5, r9
 801c8fa:	9505      	str	r5, [sp, #20]
 801c8fc:	f2c0 80b2 	blt.w	801ca64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c900:	45b3      	cmp	fp, r6
 801c902:	f340 80af 	ble.w	801ca64 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801c906:	2800      	cmp	r0, #0
 801c908:	f2c0 80aa 	blt.w	801ca60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c90c:	4580      	cmp	r8, r0
 801c90e:	f340 80a7 	ble.w	801ca60 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801c912:	9a03      	ldr	r2, [sp, #12]
 801c914:	5dd7      	ldrb	r7, [r2, r7]
 801c916:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c91a:	441f      	add	r7, r3
 801c91c:	1c42      	adds	r2, r0, #1
 801c91e:	f100 80a4 	bmi.w	801ca6a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c922:	4590      	cmp	r8, r2
 801c924:	f340 80a1 	ble.w	801ca6a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c928:	2c00      	cmp	r4, #0
 801c92a:	f000 809e 	beq.w	801ca6a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801c92e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801c932:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c936:	441d      	add	r5, r3
 801c938:	3601      	adds	r6, #1
 801c93a:	f100 809a 	bmi.w	801ca72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c93e:	45b3      	cmp	fp, r6
 801c940:	f340 8097 	ble.w	801ca72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c944:	f1bc 0f00 	cmp.w	ip, #0
 801c948:	f000 8093 	beq.w	801ca72 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801c94c:	2800      	cmp	r0, #0
 801c94e:	f2c0 808e 	blt.w	801ca6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c952:	4580      	cmp	r8, r0
 801c954:	f340 808b 	ble.w	801ca6e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801c958:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801c95c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c960:	441e      	add	r6, r3
 801c962:	3001      	adds	r0, #1
 801c964:	f100 8088 	bmi.w	801ca78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c968:	4580      	cmp	r8, r0
 801c96a:	f340 8085 	ble.w	801ca78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c96e:	2c00      	cmp	r4, #0
 801c970:	f000 8082 	beq.w	801ca78 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801c974:	44d0      	add	r8, sl
 801c976:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c97a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c97e:	4413      	add	r3, r2
 801c980:	b2a4      	uxth	r4, r4
 801c982:	f895 a000 	ldrb.w	sl, [r5]
 801c986:	fa1f fc8c 	uxth.w	ip, ip
 801c98a:	fb04 fb0c 	mul.w	fp, r4, ip
 801c98e:	0124      	lsls	r4, r4, #4
 801c990:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801c994:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801c998:	eba4 040b 	sub.w	r4, r4, fp
 801c99c:	fa1f f08c 	uxth.w	r0, ip
 801c9a0:	b2a2      	uxth	r2, r4
 801c9a2:	783c      	ldrb	r4, [r7, #0]
 801c9a4:	eba8 0800 	sub.w	r8, r8, r0
 801c9a8:	fa1f fc8e 	uxth.w	ip, lr
 801c9ac:	fb02 fa0a 	mul.w	sl, r2, sl
 801c9b0:	ea6f 0e0e 	mvn.w	lr, lr
 801c9b4:	fa1f f888 	uxth.w	r8, r8
 801c9b8:	fa5f fe8e 	uxtb.w	lr, lr
 801c9bc:	fb08 aa04 	mla	sl, r8, r4, sl
 801c9c0:	7834      	ldrb	r4, [r6, #0]
 801c9c2:	fb19 f90e 	smulbb	r9, r9, lr
 801c9c6:	fb00 aa04 	mla	sl, r0, r4, sl
 801c9ca:	781c      	ldrb	r4, [r3, #0]
 801c9cc:	fb0b a404 	mla	r4, fp, r4, sl
 801c9d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c9d4:	fb04 990c 	mla	r9, r4, ip, r9
 801c9d8:	fa1f f989 	uxth.w	r9, r9
 801c9dc:	f109 0401 	add.w	r4, r9, #1
 801c9e0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c9e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c9e8:	f881 9000 	strb.w	r9, [r1]
 801c9ec:	f895 9001 	ldrb.w	r9, [r5, #1]
 801c9f0:	787c      	ldrb	r4, [r7, #1]
 801c9f2:	fb02 f909 	mul.w	r9, r2, r9
 801c9f6:	fb08 9904 	mla	r9, r8, r4, r9
 801c9fa:	7874      	ldrb	r4, [r6, #1]
 801c9fc:	fb00 9904 	mla	r9, r0, r4, r9
 801ca00:	785c      	ldrb	r4, [r3, #1]
 801ca02:	fb0b 9404 	mla	r4, fp, r4, r9
 801ca06:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801ca0a:	9c02      	ldr	r4, [sp, #8]
 801ca0c:	fb14 f90e 	smulbb	r9, r4, lr
 801ca10:	fb0a 940c 	mla	r4, sl, ip, r9
 801ca14:	b2a4      	uxth	r4, r4
 801ca16:	f104 0901 	add.w	r9, r4, #1
 801ca1a:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801ca1e:	1224      	asrs	r4, r4, #8
 801ca20:	704c      	strb	r4, [r1, #1]
 801ca22:	78ad      	ldrb	r5, [r5, #2]
 801ca24:	78bc      	ldrb	r4, [r7, #2]
 801ca26:	436a      	muls	r2, r5
 801ca28:	789b      	ldrb	r3, [r3, #2]
 801ca2a:	fb08 2204 	mla	r2, r8, r4, r2
 801ca2e:	78b4      	ldrb	r4, [r6, #2]
 801ca30:	fb00 2004 	mla	r0, r0, r4, r2
 801ca34:	fb0b 0b03 	mla	fp, fp, r3, r0
 801ca38:	9b01      	ldr	r3, [sp, #4]
 801ca3a:	fb13 fe0e 	smulbb	lr, r3, lr
 801ca3e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801ca42:	fb0b ec0c 	mla	ip, fp, ip, lr
 801ca46:	fa1f fc8c 	uxth.w	ip, ip
 801ca4a:	f10c 0e01 	add.w	lr, ip, #1
 801ca4e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801ca52:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ca56:	f881 c002 	strb.w	ip, [r1, #2]
 801ca5a:	b007      	add	sp, #28
 801ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca60:	af05      	add	r7, sp, #20
 801ca62:	e75b      	b.n	801c91c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801ca64:	ad05      	add	r5, sp, #20
 801ca66:	462f      	mov	r7, r5
 801ca68:	e766      	b.n	801c938 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ca6a:	ad05      	add	r5, sp, #20
 801ca6c:	e764      	b.n	801c938 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801ca6e:	ae05      	add	r6, sp, #20
 801ca70:	e777      	b.n	801c962 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801ca72:	ab05      	add	r3, sp, #20
 801ca74:	461e      	mov	r6, r3
 801ca76:	e783      	b.n	801c980 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801ca78:	ab05      	add	r3, sp, #20
 801ca7a:	e781      	b.n	801c980 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801ca7c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca80:	b093      	sub	sp, #76	; 0x4c
 801ca82:	9210      	str	r2, [sp, #64]	; 0x40
 801ca84:	9309      	str	r3, [sp, #36]	; 0x24
 801ca86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ca88:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ca8c:	9011      	str	r0, [sp, #68]	; 0x44
 801ca8e:	930e      	str	r3, [sp, #56]	; 0x38
 801ca90:	6850      	ldr	r0, [r2, #4]
 801ca92:	910d      	str	r1, [sp, #52]	; 0x34
 801ca94:	6812      	ldr	r2, [r2, #0]
 801ca96:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ca9a:	fb00 1303 	mla	r3, r0, r3, r1
 801ca9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801caa2:	18d3      	adds	r3, r2, r3
 801caa4:	930a      	str	r3, [sp, #40]	; 0x28
 801caa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	930c      	str	r3, [sp, #48]	; 0x30
 801caac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801caae:	685c      	ldr	r4, [r3, #4]
 801cab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cab2:	3404      	adds	r4, #4
 801cab4:	43db      	mvns	r3, r3
 801cab6:	b2db      	uxtb	r3, r3
 801cab8:	930b      	str	r3, [sp, #44]	; 0x2c
 801caba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	dc03      	bgt.n	801cac8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801cac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	f340 8250 	ble.w	801cf68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801cac8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801caca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cace:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cad2:	1e48      	subs	r0, r1, #1
 801cad4:	1e55      	subs	r5, r2, #1
 801cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cad8:	2b00      	cmp	r3, #0
 801cada:	f340 80ee 	ble.w	801ccba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801cade:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801cae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cae2:	1436      	asrs	r6, r6, #16
 801cae4:	ea4f 4323 	mov.w	r3, r3, asr #16
 801cae8:	d406      	bmi.n	801caf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801caea:	4286      	cmp	r6, r0
 801caec:	da04      	bge.n	801caf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801caee:	2b00      	cmp	r3, #0
 801caf0:	db02      	blt.n	801caf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801caf2:	42ab      	cmp	r3, r5
 801caf4:	f2c0 80e2 	blt.w	801ccbc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801caf8:	3601      	adds	r6, #1
 801cafa:	f100 80cf 	bmi.w	801cc9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cafe:	42b1      	cmp	r1, r6
 801cb00:	f2c0 80cc 	blt.w	801cc9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cb04:	3301      	adds	r3, #1
 801cb06:	f100 80c9 	bmi.w	801cc9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cb0a:	429a      	cmp	r2, r3
 801cb0c:	f2c0 80c6 	blt.w	801cc9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801cb10:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801cb14:	f1bb 0f00 	cmp.w	fp, #0
 801cb18:	f340 80f1 	ble.w	801ccfe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801cb1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cb1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cb20:	9824      	ldr	r0, [sp, #144]	; 0x90
 801cb22:	141d      	asrs	r5, r3, #16
 801cb24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cb26:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cb2a:	68c7      	ldr	r7, [r0, #12]
 801cb2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cb2e:	1418      	asrs	r0, r3, #16
 801cb30:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801cb34:	6892      	ldr	r2, [r2, #8]
 801cb36:	f100 8137 	bmi.w	801cda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cb3a:	f102 3cff 	add.w	ip, r2, #4294967295
 801cb3e:	4560      	cmp	r0, ip
 801cb40:	f280 8132 	bge.w	801cda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cb44:	2d00      	cmp	r5, #0
 801cb46:	f2c0 812f 	blt.w	801cda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cb4a:	f107 3cff 	add.w	ip, r7, #4294967295
 801cb4e:	4565      	cmp	r5, ip
 801cb50:	f280 812a 	bge.w	801cda8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801cb54:	b212      	sxth	r2, r2
 801cb56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801cb58:	fb05 0002 	mla	r0, r5, r2, r0
 801cb5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cb5e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cb62:	4405      	add	r5, r0
 801cb64:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cb68:	eb04 0e0c 	add.w	lr, r4, ip
 801cb6c:	f1b8 0f00 	cmp.w	r8, #0
 801cb70:	f000 810c 	beq.w	801cd8c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801cb74:	786f      	ldrb	r7, [r5, #1]
 801cb76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cb7a:	4427      	add	r7, r4
 801cb7c:	2900      	cmp	r1, #0
 801cb7e:	f000 810d 	beq.w	801cd9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801cb82:	18a8      	adds	r0, r5, r2
 801cb84:	5caa      	ldrb	r2, [r5, r2]
 801cb86:	7840      	ldrb	r0, [r0, #1]
 801cb88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cb90:	4422      	add	r2, r4
 801cb92:	4420      	add	r0, r4
 801cb94:	fa1f f388 	uxth.w	r3, r8
 801cb98:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801cb9c:	b289      	uxth	r1, r1
 801cb9e:	f897 c000 	ldrb.w	ip, [r7]
 801cba2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801cba6:	fb03 f901 	mul.w	r9, r3, r1
 801cbaa:	011b      	lsls	r3, r3, #4
 801cbac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801cbb0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801cbb4:	eba3 0309 	sub.w	r3, r3, r9
 801cbb8:	b289      	uxth	r1, r1
 801cbba:	b29b      	uxth	r3, r3
 801cbbc:	eba8 0801 	sub.w	r8, r8, r1
 801cbc0:	fb03 fc0c 	mul.w	ip, r3, ip
 801cbc4:	fa1f f888 	uxth.w	r8, r8
 801cbc8:	930f      	str	r3, [sp, #60]	; 0x3c
 801cbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbcc:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cbd0:	f892 a000 	ldrb.w	sl, [r2]
 801cbd4:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cbd8:	f890 a000 	ldrb.w	sl, [r0]
 801cbdc:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cbe0:	f896 a000 	ldrb.w	sl, [r6]
 801cbe4:	fb1a fa03 	smulbb	sl, sl, r3
 801cbe8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cbec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbee:	fb0c ac05 	mla	ip, ip, r5, sl
 801cbf2:	fa1f fc8c 	uxth.w	ip, ip
 801cbf6:	f10c 0a01 	add.w	sl, ip, #1
 801cbfa:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801cbfe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cc02:	f886 a000 	strb.w	sl, [r6]
 801cc06:	f897 c001 	ldrb.w	ip, [r7, #1]
 801cc0a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801cc0e:	fb03 fc0c 	mul.w	ip, r3, ip
 801cc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc14:	fb08 cc0a 	mla	ip, r8, sl, ip
 801cc18:	f892 a001 	ldrb.w	sl, [r2, #1]
 801cc1c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801cc20:	f890 a001 	ldrb.w	sl, [r0, #1]
 801cc24:	fb09 cc0a 	mla	ip, r9, sl, ip
 801cc28:	f896 a001 	ldrb.w	sl, [r6, #1]
 801cc2c:	fb1a fa03 	smulbb	sl, sl, r3
 801cc30:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801cc34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc36:	fb0c ac05 	mla	ip, ip, r5, sl
 801cc3a:	fa1f fc8c 	uxth.w	ip, ip
 801cc3e:	f10c 0a01 	add.w	sl, ip, #1
 801cc42:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801cc46:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cc4a:	f886 c001 	strb.w	ip, [r6, #1]
 801cc4e:	78bf      	ldrb	r7, [r7, #2]
 801cc50:	f89e c002 	ldrb.w	ip, [lr, #2]
 801cc54:	437b      	muls	r3, r7
 801cc56:	fb08 330c 	mla	r3, r8, ip, r3
 801cc5a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801cc5e:	7882      	ldrb	r2, [r0, #2]
 801cc60:	fb01 310c 	mla	r1, r1, ip, r3
 801cc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cc66:	fb09 1902 	mla	r9, r9, r2, r1
 801cc6a:	78b1      	ldrb	r1, [r6, #2]
 801cc6c:	fb11 f103 	smulbb	r1, r1, r3
 801cc70:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cc74:	fb09 1505 	mla	r5, r9, r5, r1
 801cc78:	b2ad      	uxth	r5, r5
 801cc7a:	1c6b      	adds	r3, r5, #1
 801cc7c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801cc80:	122d      	asrs	r5, r5, #8
 801cc82:	70b5      	strb	r5, [r6, #2]
 801cc84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cc86:	3603      	adds	r6, #3
 801cc88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cc8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc8e:	4413      	add	r3, r2
 801cc90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cc92:	931d      	str	r3, [sp, #116]	; 0x74
 801cc94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cc96:	4413      	add	r3, r2
 801cc98:	931e      	str	r3, [sp, #120]	; 0x78
 801cc9a:	e73b      	b.n	801cb14 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801cc9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cc9e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801cca0:	4433      	add	r3, r6
 801cca2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801cca4:	931d      	str	r3, [sp, #116]	; 0x74
 801cca6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cca8:	4433      	add	r3, r6
 801ccaa:	931e      	str	r3, [sp, #120]	; 0x78
 801ccac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccae:	3b01      	subs	r3, #1
 801ccb0:	9309      	str	r3, [sp, #36]	; 0x24
 801ccb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccb4:	3303      	adds	r3, #3
 801ccb6:	930a      	str	r3, [sp, #40]	; 0x28
 801ccb8:	e70d      	b.n	801cad6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ccba:	d028      	beq.n	801cd0e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801ccbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccbe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ccc0:	3b01      	subs	r3, #1
 801ccc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801ccc4:	fb00 5003 	mla	r0, r0, r3, r5
 801ccc8:	1400      	asrs	r0, r0, #16
 801ccca:	f53f af21 	bmi.w	801cb10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ccce:	3901      	subs	r1, #1
 801ccd0:	4288      	cmp	r0, r1
 801ccd2:	f6bf af1d 	bge.w	801cb10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ccd6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ccd8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801ccda:	fb01 0303 	mla	r3, r1, r3, r0
 801ccde:	141b      	asrs	r3, r3, #16
 801cce0:	f53f af16 	bmi.w	801cb10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cce4:	3a01      	subs	r2, #1
 801cce6:	4293      	cmp	r3, r2
 801cce8:	f6bf af12 	bge.w	801cb10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ccec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ccee:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801ccf2:	1cdf      	adds	r7, r3, #3
 801ccf4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ccf8:	f1b9 0f00 	cmp.w	r9, #0
 801ccfc:	dc73      	bgt.n	801cde6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801ccfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd0a:	441a      	add	r2, r3
 801cd0c:	920a      	str	r2, [sp, #40]	; 0x28
 801cd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	f340 8129 	ble.w	801cf68 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801cd16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd24:	eef0 6a62 	vmov.f32	s13, s5
 801cd28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd34:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801cd38:	eef0 6a43 	vmov.f32	s13, s6
 801cd3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd40:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801cd44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd48:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd5c:	ee12 2a90 	vmov	r2, s5
 801cd60:	eef0 2a47 	vmov.f32	s5, s14
 801cd64:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd68:	ee13 2a10 	vmov	r2, s6
 801cd6c:	931f      	str	r3, [sp, #124]	; 0x7c
 801cd6e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd70:	eeb0 3a67 	vmov.f32	s6, s15
 801cd74:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd78:	9320      	str	r3, [sp, #128]	; 0x80
 801cd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd7e:	3b01      	subs	r3, #1
 801cd80:	930d      	str	r3, [sp, #52]	; 0x34
 801cd82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cd84:	bf08      	it	eq
 801cd86:	4613      	moveq	r3, r2
 801cd88:	9309      	str	r3, [sp, #36]	; 0x24
 801cd8a:	e696      	b.n	801caba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cd8c:	b149      	cbz	r1, 801cda2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801cd8e:	5caa      	ldrb	r2, [r5, r2]
 801cd90:	4670      	mov	r0, lr
 801cd92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cd96:	4422      	add	r2, r4
 801cd98:	4677      	mov	r7, lr
 801cd9a:	e6fb      	b.n	801cb94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801cd9c:	4670      	mov	r0, lr
 801cd9e:	4672      	mov	r2, lr
 801cda0:	e6f8      	b.n	801cb94 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801cda2:	4670      	mov	r0, lr
 801cda4:	4672      	mov	r2, lr
 801cda6:	e7f7      	b.n	801cd98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801cda8:	f110 0c01 	adds.w	ip, r0, #1
 801cdac:	f53f af6a 	bmi.w	801cc84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cdb0:	4562      	cmp	r2, ip
 801cdb2:	f6ff af67 	blt.w	801cc84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cdb6:	f115 0c01 	adds.w	ip, r5, #1
 801cdba:	f53f af63 	bmi.w	801cc84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cdbe:	4567      	cmp	r7, ip
 801cdc0:	f6ff af60 	blt.w	801cc84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cdc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdc6:	b23f      	sxth	r7, r7
 801cdc8:	b212      	sxth	r2, r2
 801cdca:	9002      	str	r0, [sp, #8]
 801cdcc:	9701      	str	r7, [sp, #4]
 801cdce:	9200      	str	r2, [sp, #0]
 801cdd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cdd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cdd4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801cdd8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801cddc:	4623      	mov	r3, r4
 801cdde:	4631      	mov	r1, r6
 801cde0:	f7ff fd69 	bl	801c8b6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801cde4:	e74e      	b.n	801cc84 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801cde6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801cde8:	981e      	ldr	r0, [sp, #120]	; 0x78
 801cdea:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801cdee:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801cdf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cdf2:	1400      	asrs	r0, r0, #16
 801cdf4:	142d      	asrs	r5, r5, #16
 801cdf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cdf8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801cdfc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ce00:	fb02 5000 	mla	r0, r2, r0, r5
 801ce04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ce06:	f815 e000 	ldrb.w	lr, [r5, r0]
 801ce0a:	eb05 0c00 	add.w	ip, r5, r0
 801ce0e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ce12:	eb04 060e 	add.w	r6, r4, lr
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	f000 8097 	beq.w	801cf4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801ce1c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ce20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce24:	4425      	add	r5, r4
 801ce26:	2900      	cmp	r1, #0
 801ce28:	f000 8098 	beq.w	801cf5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801ce2c:	eb0c 0002 	add.w	r0, ip, r2
 801ce30:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ce34:	7840      	ldrb	r0, [r0, #1]
 801ce36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ce3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ce3e:	4422      	add	r2, r4
 801ce40:	4420      	add	r0, r4
 801ce42:	b29b      	uxth	r3, r3
 801ce44:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ce48:	b289      	uxth	r1, r1
 801ce4a:	f895 e000 	ldrb.w	lr, [r5]
 801ce4e:	3703      	adds	r7, #3
 801ce50:	f109 39ff 	add.w	r9, r9, #4294967295
 801ce54:	fb03 f801 	mul.w	r8, r3, r1
 801ce58:	011b      	lsls	r3, r3, #4
 801ce5a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ce5e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ce62:	eba3 0308 	sub.w	r3, r3, r8
 801ce66:	b289      	uxth	r1, r1
 801ce68:	b29b      	uxth	r3, r3
 801ce6a:	ebac 0c01 	sub.w	ip, ip, r1
 801ce6e:	fb03 fe0e 	mul.w	lr, r3, lr
 801ce72:	fa1f fc8c 	uxth.w	ip, ip
 801ce76:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce7a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ce7e:	f892 b000 	ldrb.w	fp, [r2]
 801ce82:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ce86:	f890 b000 	ldrb.w	fp, [r0]
 801ce8a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ce8e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ce92:	fb1b fb03 	smulbb	fp, fp, r3
 801ce96:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ce9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ce9c:	fb0e be0a 	mla	lr, lr, sl, fp
 801cea0:	fa1f fe8e 	uxth.w	lr, lr
 801cea4:	f10e 0b01 	add.w	fp, lr, #1
 801cea8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ceac:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ceb0:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ceb4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ceb8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cebc:	fb03 fe0e 	mul.w	lr, r3, lr
 801cec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cec2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801cec6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ceca:	fb01 ee0b 	mla	lr, r1, fp, lr
 801cece:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ced2:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ced6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ceda:	fb1b fb03 	smulbb	fp, fp, r3
 801cede:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801cee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cee4:	fb0e be0a 	mla	lr, lr, sl, fp
 801cee8:	fa1f fe8e 	uxth.w	lr, lr
 801ceec:	f10e 0b01 	add.w	fp, lr, #1
 801cef0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801cef4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cef8:	f807 ec05 	strb.w	lr, [r7, #-5]
 801cefc:	78ad      	ldrb	r5, [r5, #2]
 801cefe:	78b6      	ldrb	r6, [r6, #2]
 801cf00:	436b      	muls	r3, r5
 801cf02:	7895      	ldrb	r5, [r2, #2]
 801cf04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf06:	fb0c 3306 	mla	r3, ip, r6, r3
 801cf0a:	fb01 3305 	mla	r3, r1, r5, r3
 801cf0e:	7885      	ldrb	r5, [r0, #2]
 801cf10:	fb08 3805 	mla	r8, r8, r5, r3
 801cf14:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801cf18:	fb13 f302 	smulbb	r3, r3, r2
 801cf1c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801cf20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cf22:	fb08 380a 	mla	r8, r8, sl, r3
 801cf26:	fa1f f888 	uxth.w	r8, r8
 801cf2a:	f108 0301 	add.w	r3, r8, #1
 801cf2e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801cf32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf34:	4413      	add	r3, r2
 801cf36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801cf38:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cf3c:	931d      	str	r3, [sp, #116]	; 0x74
 801cf3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801cf40:	f807 8c04 	strb.w	r8, [r7, #-4]
 801cf44:	4413      	add	r3, r2
 801cf46:	931e      	str	r3, [sp, #120]	; 0x78
 801cf48:	e6d6      	b.n	801ccf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cf4a:	b151      	cbz	r1, 801cf62 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801cf4c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cf50:	4630      	mov	r0, r6
 801cf52:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf56:	4422      	add	r2, r4
 801cf58:	4635      	mov	r5, r6
 801cf5a:	e772      	b.n	801ce42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801cf5c:	4630      	mov	r0, r6
 801cf5e:	4632      	mov	r2, r6
 801cf60:	e76f      	b.n	801ce42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801cf62:	4630      	mov	r0, r6
 801cf64:	4632      	mov	r2, r6
 801cf66:	e7f7      	b.n	801cf58 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801cf68:	b013      	add	sp, #76	; 0x4c
 801cf6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf6e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801cf6e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf72:	784c      	ldrb	r4, [r1, #1]
 801cf74:	f891 a002 	ldrb.w	sl, [r1, #2]
 801cf78:	0224      	lsls	r4, r4, #8
 801cf7a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801cf7e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801cf82:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801cf86:	f891 a000 	ldrb.w	sl, [r1]
 801cf8a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801cf8e:	ea44 040a 	orr.w	r4, r4, sl
 801cf92:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801cf96:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801cf9a:	9401      	str	r4, [sp, #4]
 801cf9c:	fb05 c70e 	mla	r7, r5, lr, ip
 801cfa0:	2d00      	cmp	r5, #0
 801cfa2:	eb02 0807 	add.w	r8, r2, r7
 801cfa6:	db72      	blt.n	801d08e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801cfa8:	45a9      	cmp	r9, r5
 801cfaa:	dd70      	ble.n	801d08e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801cfac:	f1bc 0f00 	cmp.w	ip, #0
 801cfb0:	db6b      	blt.n	801d08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801cfb2:	45e6      	cmp	lr, ip
 801cfb4:	dd69      	ble.n	801d08a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801cfb6:	5dd7      	ldrb	r7, [r2, r7]
 801cfb8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cfbc:	441f      	add	r7, r3
 801cfbe:	f11c 0201 	adds.w	r2, ip, #1
 801cfc2:	d467      	bmi.n	801d094 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cfc4:	4596      	cmp	lr, r2
 801cfc6:	dd65      	ble.n	801d094 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cfc8:	2800      	cmp	r0, #0
 801cfca:	d063      	beq.n	801d094 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801cfcc:	f898 4001 	ldrb.w	r4, [r8, #1]
 801cfd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cfd4:	441c      	add	r4, r3
 801cfd6:	3501      	adds	r5, #1
 801cfd8:	d460      	bmi.n	801d09c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cfda:	45a9      	cmp	r9, r5
 801cfdc:	dd5e      	ble.n	801d09c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cfde:	2e00      	cmp	r6, #0
 801cfe0:	d05c      	beq.n	801d09c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801cfe2:	f1bc 0f00 	cmp.w	ip, #0
 801cfe6:	db57      	blt.n	801d098 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801cfe8:	45e6      	cmp	lr, ip
 801cfea:	dd55      	ble.n	801d098 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801cfec:	f818 500e 	ldrb.w	r5, [r8, lr]
 801cff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cff4:	441d      	add	r5, r3
 801cff6:	f11c 0201 	adds.w	r2, ip, #1
 801cffa:	d452      	bmi.n	801d0a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801cffc:	4596      	cmp	lr, r2
 801cffe:	dd50      	ble.n	801d0a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d000:	2800      	cmp	r0, #0
 801d002:	d04e      	beq.n	801d0a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801d004:	44c6      	add	lr, r8
 801d006:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d00a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d00e:	4413      	add	r3, r2
 801d010:	b280      	uxth	r0, r0
 801d012:	f897 8000 	ldrb.w	r8, [r7]
 801d016:	b2b2      	uxth	r2, r6
 801d018:	fb00 f602 	mul.w	r6, r0, r2
 801d01c:	0100      	lsls	r0, r0, #4
 801d01e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d022:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801d026:	1b80      	subs	r0, r0, r6
 801d028:	fa1f fc82 	uxth.w	ip, r2
 801d02c:	b282      	uxth	r2, r0
 801d02e:	7820      	ldrb	r0, [r4, #0]
 801d030:	ebae 0e0c 	sub.w	lr, lr, ip
 801d034:	4350      	muls	r0, r2
 801d036:	fa1f fe8e 	uxth.w	lr, lr
 801d03a:	fb0e 0808 	mla	r8, lr, r8, r0
 801d03e:	7828      	ldrb	r0, [r5, #0]
 801d040:	fb0c 8800 	mla	r8, ip, r0, r8
 801d044:	7818      	ldrb	r0, [r3, #0]
 801d046:	fb06 8000 	mla	r0, r6, r0, r8
 801d04a:	1200      	asrs	r0, r0, #8
 801d04c:	7008      	strb	r0, [r1, #0]
 801d04e:	7860      	ldrb	r0, [r4, #1]
 801d050:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d054:	4350      	muls	r0, r2
 801d056:	fb0e 0808 	mla	r8, lr, r8, r0
 801d05a:	7868      	ldrb	r0, [r5, #1]
 801d05c:	fb0c 8800 	mla	r8, ip, r0, r8
 801d060:	7858      	ldrb	r0, [r3, #1]
 801d062:	fb06 8000 	mla	r0, r6, r0, r8
 801d066:	1200      	asrs	r0, r0, #8
 801d068:	7048      	strb	r0, [r1, #1]
 801d06a:	78a0      	ldrb	r0, [r4, #2]
 801d06c:	78bf      	ldrb	r7, [r7, #2]
 801d06e:	4350      	muls	r0, r2
 801d070:	78aa      	ldrb	r2, [r5, #2]
 801d072:	fb0e 0007 	mla	r0, lr, r7, r0
 801d076:	fb0c 0c02 	mla	ip, ip, r2, r0
 801d07a:	789a      	ldrb	r2, [r3, #2]
 801d07c:	fb06 c202 	mla	r2, r6, r2, ip
 801d080:	1212      	asrs	r2, r2, #8
 801d082:	708a      	strb	r2, [r1, #2]
 801d084:	b002      	add	sp, #8
 801d086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d08a:	af01      	add	r7, sp, #4
 801d08c:	e797      	b.n	801cfbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801d08e:	ac01      	add	r4, sp, #4
 801d090:	4627      	mov	r7, r4
 801d092:	e7a0      	b.n	801cfd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d094:	ac01      	add	r4, sp, #4
 801d096:	e79e      	b.n	801cfd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801d098:	ad01      	add	r5, sp, #4
 801d09a:	e7ac      	b.n	801cff6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801d09c:	ab01      	add	r3, sp, #4
 801d09e:	461d      	mov	r5, r3
 801d0a0:	e7b6      	b.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801d0a2:	ab01      	add	r3, sp, #4
 801d0a4:	e7b4      	b.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801d0a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d0a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0aa:	b08d      	sub	sp, #52	; 0x34
 801d0ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d0b0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801d0b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801d0b6:	900b      	str	r0, [sp, #44]	; 0x2c
 801d0b8:	9306      	str	r3, [sp, #24]
 801d0ba:	6850      	ldr	r0, [r2, #4]
 801d0bc:	6812      	ldr	r2, [r2, #0]
 801d0be:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801d0c0:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801d0c4:	fb00 1303 	mla	r3, r0, r3, r1
 801d0c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d0cc:	18d3      	adds	r3, r2, r3
 801d0ce:	9307      	str	r3, [sp, #28]
 801d0d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	9308      	str	r3, [sp, #32]
 801d0d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0d8:	685d      	ldr	r5, [r3, #4]
 801d0da:	3504      	adds	r5, #4
 801d0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	dc03      	bgt.n	801d0ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d0e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f340 81e6 	ble.w	801d4b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d0ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d0ec:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d0f0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d0f4:	1e48      	subs	r0, r1, #1
 801d0f6:	1e56      	subs	r6, r2, #1
 801d0f8:	9b06      	ldr	r3, [sp, #24]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	f340 80bd 	ble.w	801d27a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801d100:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d102:	1427      	asrs	r7, r4, #16
 801d104:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d108:	d406      	bmi.n	801d118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d10a:	4287      	cmp	r7, r0
 801d10c:	da04      	bge.n	801d118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d10e:	2b00      	cmp	r3, #0
 801d110:	db02      	blt.n	801d118 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801d112:	42b3      	cmp	r3, r6
 801d114:	f2c0 80b2 	blt.w	801d27c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801d118:	3701      	adds	r7, #1
 801d11a:	f100 80a1 	bmi.w	801d260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d11e:	42b9      	cmp	r1, r7
 801d120:	f2c0 809e 	blt.w	801d260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d124:	3301      	adds	r3, #1
 801d126:	f100 809b 	bmi.w	801d260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d12a:	429a      	cmp	r2, r3
 801d12c:	f2c0 8098 	blt.w	801d260 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801d130:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801d134:	f1bb 0f00 	cmp.w	fp, #0
 801d138:	f340 80bf 	ble.w	801d2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801d13c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d13e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801d140:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d142:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d146:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801d14a:	1420      	asrs	r0, r4, #16
 801d14c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d14e:	ea4f 4723 	mov.w	r7, r3, asr #16
 801d152:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d156:	6892      	ldr	r2, [r2, #8]
 801d158:	f100 8103 	bmi.w	801d362 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d15c:	f102 3eff 	add.w	lr, r2, #4294967295
 801d160:	4570      	cmp	r0, lr
 801d162:	f280 80fe 	bge.w	801d362 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d166:	2f00      	cmp	r7, #0
 801d168:	f2c0 80fb 	blt.w	801d362 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d16c:	f10c 3eff 	add.w	lr, ip, #4294967295
 801d170:	4577      	cmp	r7, lr
 801d172:	f280 80f6 	bge.w	801d362 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801d176:	b212      	sxth	r2, r2
 801d178:	fb07 0002 	mla	r0, r7, r2, r0
 801d17c:	9f08      	ldr	r7, [sp, #32]
 801d17e:	f817 8000 	ldrb.w	r8, [r7, r0]
 801d182:	eb07 0e00 	add.w	lr, r7, r0
 801d186:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d18a:	eb05 0c08 	add.w	ip, r5, r8
 801d18e:	2b00      	cmp	r3, #0
 801d190:	f000 80d8 	beq.w	801d344 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d194:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801d198:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d19c:	442f      	add	r7, r5
 801d19e:	2900      	cmp	r1, #0
 801d1a0:	f000 80d9 	beq.w	801d356 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d1a4:	eb0e 0002 	add.w	r0, lr, r2
 801d1a8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d1ac:	7840      	ldrb	r0, [r0, #1]
 801d1ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d1b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d1b6:	442a      	add	r2, r5
 801d1b8:	4428      	add	r0, r5
 801d1ba:	b29b      	uxth	r3, r3
 801d1bc:	f815 a008 	ldrb.w	sl, [r5, r8]
 801d1c0:	b289      	uxth	r1, r1
 801d1c2:	f897 8000 	ldrb.w	r8, [r7]
 801d1c6:	fb03 f901 	mul.w	r9, r3, r1
 801d1ca:	011b      	lsls	r3, r3, #4
 801d1cc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d1d0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d1d4:	eba3 0309 	sub.w	r3, r3, r9
 801d1d8:	b289      	uxth	r1, r1
 801d1da:	b29b      	uxth	r3, r3
 801d1dc:	ebae 0e01 	sub.w	lr, lr, r1
 801d1e0:	fb03 f808 	mul.w	r8, r3, r8
 801d1e4:	fa1f fe8e 	uxth.w	lr, lr
 801d1e8:	fb0e 880a 	mla	r8, lr, sl, r8
 801d1ec:	f892 a000 	ldrb.w	sl, [r2]
 801d1f0:	fb01 880a 	mla	r8, r1, sl, r8
 801d1f4:	f890 a000 	ldrb.w	sl, [r0]
 801d1f8:	fb09 880a 	mla	r8, r9, sl, r8
 801d1fc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d200:	f886 8000 	strb.w	r8, [r6]
 801d204:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d208:	f89c a001 	ldrb.w	sl, [ip, #1]
 801d20c:	fb03 f808 	mul.w	r8, r3, r8
 801d210:	fb0e 880a 	mla	r8, lr, sl, r8
 801d214:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d218:	fb01 880a 	mla	r8, r1, sl, r8
 801d21c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d220:	fb09 880a 	mla	r8, r9, sl, r8
 801d224:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d228:	f886 8001 	strb.w	r8, [r6, #1]
 801d22c:	78bf      	ldrb	r7, [r7, #2]
 801d22e:	f89c c002 	ldrb.w	ip, [ip, #2]
 801d232:	437b      	muls	r3, r7
 801d234:	7892      	ldrb	r2, [r2, #2]
 801d236:	fb0e 330c 	mla	r3, lr, ip, r3
 801d23a:	fb01 3102 	mla	r1, r1, r2, r3
 801d23e:	7882      	ldrb	r2, [r0, #2]
 801d240:	fb09 1902 	mla	r9, r9, r2, r1
 801d244:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d248:	f886 9002 	strb.w	r9, [r6, #2]
 801d24c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d24e:	3603      	adds	r6, #3
 801d250:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d252:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d256:	441c      	add	r4, r3
 801d258:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d25a:	4413      	add	r3, r2
 801d25c:	9318      	str	r3, [sp, #96]	; 0x60
 801d25e:	e769      	b.n	801d134 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d262:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801d264:	441c      	add	r4, r3
 801d266:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d268:	443b      	add	r3, r7
 801d26a:	9318      	str	r3, [sp, #96]	; 0x60
 801d26c:	9b06      	ldr	r3, [sp, #24]
 801d26e:	3b01      	subs	r3, #1
 801d270:	9306      	str	r3, [sp, #24]
 801d272:	9b07      	ldr	r3, [sp, #28]
 801d274:	3303      	adds	r3, #3
 801d276:	9307      	str	r3, [sp, #28]
 801d278:	e73e      	b.n	801d0f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d27a:	d026      	beq.n	801d2ca <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d27c:	9b06      	ldr	r3, [sp, #24]
 801d27e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d280:	3b01      	subs	r3, #1
 801d282:	fb00 4003 	mla	r0, r0, r3, r4
 801d286:	1400      	asrs	r0, r0, #16
 801d288:	f53f af52 	bmi.w	801d130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d28c:	3901      	subs	r1, #1
 801d28e:	4288      	cmp	r0, r1
 801d290:	f6bf af4e 	bge.w	801d130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d294:	991a      	ldr	r1, [sp, #104]	; 0x68
 801d296:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d298:	fb01 0303 	mla	r3, r1, r3, r0
 801d29c:	141b      	asrs	r3, r3, #16
 801d29e:	f53f af47 	bmi.w	801d130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d2a2:	3a01      	subs	r2, #1
 801d2a4:	4293      	cmp	r3, r2
 801d2a6:	f6bf af43 	bge.w	801d130 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d2aa:	9b07      	ldr	r3, [sp, #28]
 801d2ac:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d2b0:	f103 0803 	add.w	r8, r3, #3
 801d2b4:	f1ba 0f00 	cmp.w	sl, #0
 801d2b8:	dc71      	bgt.n	801d39e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d2ba:	9b06      	ldr	r3, [sp, #24]
 801d2bc:	9a07      	ldr	r2, [sp, #28]
 801d2be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d2c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d2c6:	441a      	add	r2, r3
 801d2c8:	9207      	str	r2, [sp, #28]
 801d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	f340 80f2 	ble.w	801d4b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801d2d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d2d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d2d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d2dc:	eeb0 6a62 	vmov.f32	s12, s5
 801d2e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d2e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d2e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2ec:	ee16 4a10 	vmov	r4, s12
 801d2f0:	eeb0 6a43 	vmov.f32	s12, s6
 801d2f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d2f8:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801d2fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d300:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d304:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d308:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d30c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d310:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d314:	ee12 2a90 	vmov	r2, s5
 801d318:	eef0 2a47 	vmov.f32	s5, s14
 801d31c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d320:	ee13 2a10 	vmov	r2, s6
 801d324:	9319      	str	r3, [sp, #100]	; 0x64
 801d326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d328:	eeb0 3a67 	vmov.f32	s6, s15
 801d32c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d330:	931a      	str	r3, [sp, #104]	; 0x68
 801d332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d336:	3b01      	subs	r3, #1
 801d338:	9309      	str	r3, [sp, #36]	; 0x24
 801d33a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d33c:	bf08      	it	eq
 801d33e:	4613      	moveq	r3, r2
 801d340:	9306      	str	r3, [sp, #24]
 801d342:	e6cb      	b.n	801d0dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d344:	b151      	cbz	r1, 801d35c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801d346:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801d34a:	4660      	mov	r0, ip
 801d34c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d350:	442a      	add	r2, r5
 801d352:	4667      	mov	r7, ip
 801d354:	e731      	b.n	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d356:	4660      	mov	r0, ip
 801d358:	4662      	mov	r2, ip
 801d35a:	e72e      	b.n	801d1ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801d35c:	4660      	mov	r0, ip
 801d35e:	4662      	mov	r2, ip
 801d360:	e7f7      	b.n	801d352 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801d362:	f110 0e01 	adds.w	lr, r0, #1
 801d366:	f53f af71 	bmi.w	801d24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d36a:	4572      	cmp	r2, lr
 801d36c:	f6ff af6e 	blt.w	801d24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d370:	f117 0e01 	adds.w	lr, r7, #1
 801d374:	f53f af6a 	bmi.w	801d24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d378:	45f4      	cmp	ip, lr
 801d37a:	f6ff af67 	blt.w	801d24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d37e:	b212      	sxth	r2, r2
 801d380:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801d384:	fa0f f38c 	sxth.w	r3, ip
 801d388:	9200      	str	r2, [sp, #0]
 801d38a:	4631      	mov	r1, r6
 801d38c:	9a08      	ldr	r2, [sp, #32]
 801d38e:	9301      	str	r3, [sp, #4]
 801d390:	462b      	mov	r3, r5
 801d392:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801d396:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801d398:	f7ff fde9 	bl	801cf6e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801d39c:	e756      	b.n	801d24c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801d39e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d3a0:	1426      	asrs	r6, r4, #16
 801d3a2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801d3a4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d3a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d3ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801d3ae:	1400      	asrs	r0, r0, #16
 801d3b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d3b4:	fb02 6000 	mla	r0, r2, r0, r6
 801d3b8:	9e08      	ldr	r6, [sp, #32]
 801d3ba:	f816 e000 	ldrb.w	lr, [r6, r0]
 801d3be:	eb06 0c00 	add.w	ip, r6, r0
 801d3c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d3c6:	eb05 070e 	add.w	r7, r5, lr
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d064      	beq.n	801d498 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801d3ce:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801d3d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d3d6:	442e      	add	r6, r5
 801d3d8:	2900      	cmp	r1, #0
 801d3da:	d066      	beq.n	801d4aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801d3dc:	eb0c 0002 	add.w	r0, ip, r2
 801d3e0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d3e4:	7840      	ldrb	r0, [r0, #1]
 801d3e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d3ee:	442a      	add	r2, r5
 801d3f0:	4428      	add	r0, r5
 801d3f2:	b29b      	uxth	r3, r3
 801d3f4:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801d3f8:	b289      	uxth	r1, r1
 801d3fa:	f896 e000 	ldrb.w	lr, [r6]
 801d3fe:	f108 0803 	add.w	r8, r8, #3
 801d402:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d406:	fb03 f901 	mul.w	r9, r3, r1
 801d40a:	011b      	lsls	r3, r3, #4
 801d40c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d410:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801d414:	eba3 0309 	sub.w	r3, r3, r9
 801d418:	b289      	uxth	r1, r1
 801d41a:	b29b      	uxth	r3, r3
 801d41c:	ebac 0c01 	sub.w	ip, ip, r1
 801d420:	fb03 fe0e 	mul.w	lr, r3, lr
 801d424:	fa1f fc8c 	uxth.w	ip, ip
 801d428:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d42c:	f892 b000 	ldrb.w	fp, [r2]
 801d430:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d434:	f890 b000 	ldrb.w	fp, [r0]
 801d438:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d43c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d440:	f808 ec06 	strb.w	lr, [r8, #-6]
 801d444:	f896 e001 	ldrb.w	lr, [r6, #1]
 801d448:	f897 b001 	ldrb.w	fp, [r7, #1]
 801d44c:	fb03 fe0e 	mul.w	lr, r3, lr
 801d450:	fb0c ee0b 	mla	lr, ip, fp, lr
 801d454:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d458:	fb01 ee0b 	mla	lr, r1, fp, lr
 801d45c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d460:	fb09 ee0b 	mla	lr, r9, fp, lr
 801d464:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d468:	f808 ec05 	strb.w	lr, [r8, #-5]
 801d46c:	78b6      	ldrb	r6, [r6, #2]
 801d46e:	78bf      	ldrb	r7, [r7, #2]
 801d470:	4373      	muls	r3, r6
 801d472:	7896      	ldrb	r6, [r2, #2]
 801d474:	7882      	ldrb	r2, [r0, #2]
 801d476:	fb0c 3307 	mla	r3, ip, r7, r3
 801d47a:	fb01 3306 	mla	r3, r1, r6, r3
 801d47e:	fb09 3902 	mla	r9, r9, r2, r3
 801d482:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d484:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801d486:	441c      	add	r4, r3
 801d488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d48a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d48e:	4413      	add	r3, r2
 801d490:	f808 9c04 	strb.w	r9, [r8, #-4]
 801d494:	9318      	str	r3, [sp, #96]	; 0x60
 801d496:	e70d      	b.n	801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d498:	b151      	cbz	r1, 801d4b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801d49a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801d49e:	4638      	mov	r0, r7
 801d4a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d4a4:	442a      	add	r2, r5
 801d4a6:	463e      	mov	r6, r7
 801d4a8:	e7a3      	b.n	801d3f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d4aa:	4638      	mov	r0, r7
 801d4ac:	463a      	mov	r2, r7
 801d4ae:	e7a0      	b.n	801d3f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801d4b0:	4638      	mov	r0, r7
 801d4b2:	463a      	mov	r2, r7
 801d4b4:	e7f7      	b.n	801d4a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801d4b6:	b00d      	add	sp, #52	; 0x34
 801d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4bc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801d4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c0:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801d4c4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801d4c8:	2d00      	cmp	r5, #0
 801d4ca:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d4ce:	fb05 700c 	mla	r0, r5, ip, r7
 801d4d2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801d4d6:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 801d4da:	eb02 0800 	add.w	r8, r2, r0
 801d4de:	f2c0 8118 	blt.w	801d712 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d4e2:	45a9      	cmp	r9, r5
 801d4e4:	f340 8115 	ble.w	801d712 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801d4e8:	2f00      	cmp	r7, #0
 801d4ea:	f2c0 8110 	blt.w	801d70e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d4ee:	45bc      	cmp	ip, r7
 801d4f0:	f340 810d 	ble.w	801d70e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801d4f4:	5c12      	ldrb	r2, [r2, r0]
 801d4f6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d4fa:	1c7a      	adds	r2, r7, #1
 801d4fc:	f100 810c 	bmi.w	801d718 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d500:	4594      	cmp	ip, r2
 801d502:	f340 8109 	ble.w	801d718 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801d506:	2c00      	cmp	r4, #0
 801d508:	f000 8108 	beq.w	801d71c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801d50c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d510:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801d514:	3501      	adds	r5, #1
 801d516:	f100 8105 	bmi.w	801d724 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d51a:	45a9      	cmp	r9, r5
 801d51c:	f340 8102 	ble.w	801d724 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801d520:	f1be 0f00 	cmp.w	lr, #0
 801d524:	f000 8101 	beq.w	801d72a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801d528:	2f00      	cmp	r7, #0
 801d52a:	f2c0 80f9 	blt.w	801d720 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d52e:	45bc      	cmp	ip, r7
 801d530:	f340 80f6 	ble.w	801d720 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801d534:	f818 200c 	ldrb.w	r2, [r8, ip]
 801d538:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801d53c:	3701      	adds	r7, #1
 801d53e:	f100 80f7 	bmi.w	801d730 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d542:	45bc      	cmp	ip, r7
 801d544:	f340 80f4 	ble.w	801d730 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801d548:	2c00      	cmp	r4, #0
 801d54a:	f000 80f3 	beq.w	801d734 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801d54e:	44c4      	add	ip, r8
 801d550:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801d554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801d558:	fa1f fc84 	uxth.w	ip, r4
 801d55c:	fa1f f48e 	uxth.w	r4, lr
 801d560:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801d564:	fb04 fe0c 	mul.w	lr, r4, ip
 801d568:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d56c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801d570:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801d574:	ebac 070e 	sub.w	r7, ip, lr
 801d578:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801d57c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801d580:	b2a4      	uxth	r4, r4
 801d582:	b2bf      	uxth	r7, r7
 801d584:	1b1b      	subs	r3, r3, r4
 801d586:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801d58a:	fb07 fc0a 	mul.w	ip, r7, sl
 801d58e:	b29b      	uxth	r3, r3
 801d590:	fb03 cc0b 	mla	ip, r3, fp, ip
 801d594:	9300      	str	r3, [sp, #0]
 801d596:	fb04 cc09 	mla	ip, r4, r9, ip
 801d59a:	fb0e cc08 	mla	ip, lr, r8, ip
 801d59e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d5a2:	9301      	str	r3, [sp, #4]
 801d5a4:	2b00      	cmp	r3, #0
 801d5a6:	f000 80af 	beq.w	801d708 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801d5aa:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801d5ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d5b2:	fb0b fc0c 	mul.w	ip, fp, ip
 801d5b6:	fb0b f606 	mul.w	r6, fp, r6
 801d5ba:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801d5be:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801d5c2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801d5c6:	44dc      	add	ip, fp
 801d5c8:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801d5cc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d5d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5d4:	fb0a fb0b 	mul.w	fp, sl, fp
 801d5d8:	fb0a fa00 	mul.w	sl, sl, r0
 801d5dc:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801d5e0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801d5e4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801d5e8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d5ec:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801d5f0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d5f4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801d5f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d5fc:	0a36      	lsrs	r6, r6, #8
 801d5fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d602:	44dc      	add	ip, fp
 801d604:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801d608:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d60c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801d610:	fb09 fb0b 	mul.w	fp, r9, fp
 801d614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d618:	fb09 f905 	mul.w	r9, r9, r5
 801d61c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801d620:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d624:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801d628:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d62c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d630:	fb0c fc07 	mul.w	ip, ip, r7
 801d634:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801d638:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801d63c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801d640:	4458      	add	r0, fp
 801d642:	fb08 f505 	mul.w	r5, r8, r5
 801d646:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d64a:	fb08 f802 	mul.w	r8, r8, r2
 801d64e:	0a00      	lsrs	r0, r0, #8
 801d650:	0a2a      	lsrs	r2, r5, #8
 801d652:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d656:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d65a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801d65e:	4415      	add	r5, r2
 801d660:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801d664:	0a2d      	lsrs	r5, r5, #8
 801d666:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d66a:	9a00      	ldr	r2, [sp, #0]
 801d66c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d670:	fb03 cc02 	mla	ip, r3, r2, ip
 801d674:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801d678:	9b01      	ldr	r3, [sp, #4]
 801d67a:	fb05 c50e 	mla	r5, r5, lr, ip
 801d67e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801d682:	fb00 5004 	mla	r0, r0, r4, r5
 801d686:	0a00      	lsrs	r0, r0, #8
 801d688:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d68c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801d690:	4378      	muls	r0, r7
 801d692:	fb02 0006 	mla	r0, r2, r6, r0
 801d696:	fb0e 0e08 	mla	lr, lr, r8, r0
 801d69a:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801d69e:	fb04 e000 	mla	r0, r4, r0, lr
 801d6a2:	0a00      	lsrs	r0, r0, #8
 801d6a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d6a8:	4328      	orrs	r0, r5
 801d6aa:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801d6ae:	b2ad      	uxth	r5, r5
 801d6b0:	b2c4      	uxtb	r4, r0
 801d6b2:	436b      	muls	r3, r5
 801d6b4:	fb14 f405 	smulbb	r4, r4, r5
 801d6b8:	1c5a      	adds	r2, r3, #1
 801d6ba:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d6be:	780b      	ldrb	r3, [r1, #0]
 801d6c0:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801d6c4:	b2d2      	uxtb	r2, r2
 801d6c6:	fb03 4302 	mla	r3, r3, r2, r4
 801d6ca:	b29b      	uxth	r3, r3
 801d6cc:	1c5c      	adds	r4, r3, #1
 801d6ce:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d6d2:	784c      	ldrb	r4, [r1, #1]
 801d6d4:	fb14 f402 	smulbb	r4, r4, r2
 801d6d8:	121b      	asrs	r3, r3, #8
 801d6da:	700b      	strb	r3, [r1, #0]
 801d6dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801d6e0:	fb03 4305 	mla	r3, r3, r5, r4
 801d6e4:	b29b      	uxth	r3, r3
 801d6e6:	1c5c      	adds	r4, r3, #1
 801d6e8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801d6ec:	0c04      	lsrs	r4, r0, #16
 801d6ee:	7888      	ldrb	r0, [r1, #2]
 801d6f0:	121b      	asrs	r3, r3, #8
 801d6f2:	fb10 f002 	smulbb	r0, r0, r2
 801d6f6:	704b      	strb	r3, [r1, #1]
 801d6f8:	fb04 0005 	mla	r0, r4, r5, r0
 801d6fc:	b280      	uxth	r0, r0
 801d6fe:	1c43      	adds	r3, r0, #1
 801d700:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d704:	1200      	asrs	r0, r0, #8
 801d706:	7088      	strb	r0, [r1, #2]
 801d708:	b003      	add	sp, #12
 801d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d70e:	2600      	movs	r6, #0
 801d710:	e6f3      	b.n	801d4fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801d712:	2000      	movs	r0, #0
 801d714:	4606      	mov	r6, r0
 801d716:	e6fd      	b.n	801d514 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d718:	2000      	movs	r0, #0
 801d71a:	e6fb      	b.n	801d514 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d71c:	4620      	mov	r0, r4
 801d71e:	e6f9      	b.n	801d514 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801d720:	2500      	movs	r5, #0
 801d722:	e70b      	b.n	801d53c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801d724:	2200      	movs	r2, #0
 801d726:	4615      	mov	r5, r2
 801d728:	e716      	b.n	801d558 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d72a:	4672      	mov	r2, lr
 801d72c:	4675      	mov	r5, lr
 801d72e:	e713      	b.n	801d558 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d730:	2200      	movs	r2, #0
 801d732:	e711      	b.n	801d558 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801d734:	4622      	mov	r2, r4
 801d736:	e70f      	b.n	801d558 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801d738 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d73c:	b09f      	sub	sp, #124	; 0x7c
 801d73e:	921b      	str	r2, [sp, #108]	; 0x6c
 801d740:	9309      	str	r3, [sp, #36]	; 0x24
 801d742:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d744:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d748:	901d      	str	r0, [sp, #116]	; 0x74
 801d74a:	931c      	str	r3, [sp, #112]	; 0x70
 801d74c:	6850      	ldr	r0, [r2, #4]
 801d74e:	9119      	str	r1, [sp, #100]	; 0x64
 801d750:	6812      	ldr	r2, [r2, #0]
 801d752:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801d754:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801d758:	fb00 1303 	mla	r3, r0, r3, r1
 801d75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d760:	18d3      	adds	r3, r2, r3
 801d762:	930c      	str	r3, [sp, #48]	; 0x30
 801d764:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	9312      	str	r3, [sp, #72]	; 0x48
 801d76a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d76c:	685e      	ldr	r6, [r3, #4]
 801d76e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801d772:	3604      	adds	r6, #4
 801d774:	930d      	str	r3, [sp, #52]	; 0x34
 801d776:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d778:	2b00      	cmp	r3, #0
 801d77a:	dc03      	bgt.n	801d784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d77c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801d77e:	2b00      	cmp	r3, #0
 801d780:	f340 8378 	ble.w	801de74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801d784:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d786:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d78a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d78e:	1e48      	subs	r0, r1, #1
 801d790:	1e57      	subs	r7, r2, #1
 801d792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d794:	2b00      	cmp	r3, #0
 801d796:	f340 818c 	ble.w	801dab2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801d79a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801d79c:	142b      	asrs	r3, r5, #16
 801d79e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d7a2:	d406      	bmi.n	801d7b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d7a4:	4584      	cmp	ip, r0
 801d7a6:	da04      	bge.n	801d7b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	db02      	blt.n	801d7b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d7ac:	42bb      	cmp	r3, r7
 801d7ae:	f2c0 8181 	blt.w	801dab4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801d7b2:	f11c 0c01 	adds.w	ip, ip, #1
 801d7b6:	f100 816f 	bmi.w	801da98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d7ba:	4561      	cmp	r1, ip
 801d7bc:	f2c0 816c 	blt.w	801da98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d7c0:	3301      	adds	r3, #1
 801d7c2:	f100 8169 	bmi.w	801da98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d7c6:	429a      	cmp	r2, r3
 801d7c8:	f2c0 8166 	blt.w	801da98 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801d7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801d7d0:	931a      	str	r3, [sp, #104]	; 0x68
 801d7d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d7d4:	2b00      	cmp	r3, #0
 801d7d6:	f340 818c 	ble.w	801daf2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d7da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d7dc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d7e0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d7e4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d7e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d7ea:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801d7ee:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d7f0:	141b      	asrs	r3, r3, #16
 801d7f2:	f100 81d0 	bmi.w	801db96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d7f6:	f100 38ff 	add.w	r8, r0, #4294967295
 801d7fa:	4543      	cmp	r3, r8
 801d7fc:	f280 81cb 	bge.w	801db96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d800:	f1bc 0f00 	cmp.w	ip, #0
 801d804:	f2c0 81c7 	blt.w	801db96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d808:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d80c:	45c4      	cmp	ip, r8
 801d80e:	f280 81c2 	bge.w	801db96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d812:	b200      	sxth	r0, r0
 801d814:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d816:	fb0c 3300 	mla	r3, ip, r0, r3
 801d81a:	eb04 0803 	add.w	r8, r4, r3
 801d81e:	5ce3      	ldrb	r3, [r4, r3]
 801d820:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d824:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d828:	2a00      	cmp	r2, #0
 801d82a:	f000 81a9 	beq.w	801db80 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801d82e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d832:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d836:	940e      	str	r4, [sp, #56]	; 0x38
 801d838:	0e24      	lsrs	r4, r4, #24
 801d83a:	9415      	str	r4, [sp, #84]	; 0x54
 801d83c:	b179      	cbz	r1, 801d85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d83e:	eb08 0c00 	add.w	ip, r8, r0
 801d842:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d846:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d84a:	900a      	str	r0, [sp, #40]	; 0x28
 801d84c:	0e00      	lsrs	r0, r0, #24
 801d84e:	9013      	str	r0, [sp, #76]	; 0x4c
 801d850:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d854:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801d858:	900f      	str	r0, [sp, #60]	; 0x3c
 801d85a:	0e00      	lsrs	r0, r0, #24
 801d85c:	9016      	str	r0, [sp, #88]	; 0x58
 801d85e:	b292      	uxth	r2, r2
 801d860:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d862:	b289      	uxth	r1, r1
 801d864:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d866:	fb02 f901 	mul.w	r9, r2, r1
 801d86a:	0112      	lsls	r2, r2, #4
 801d86c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d870:	eba2 0809 	sub.w	r8, r2, r9
 801d874:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d878:	b289      	uxth	r1, r1
 801d87a:	fa1f f888 	uxth.w	r8, r8
 801d87e:	1a52      	subs	r2, r2, r1
 801d880:	fb08 f000 	mul.w	r0, r8, r0
 801d884:	b292      	uxth	r2, r2
 801d886:	fb02 000e 	mla	r0, r2, lr, r0
 801d88a:	fb01 0004 	mla	r0, r1, r4, r0
 801d88e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d890:	fb09 0004 	mla	r0, r9, r4, r0
 801d894:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d898:	2800      	cmp	r0, #0
 801d89a:	f000 80f2 	beq.w	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d89e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d8a2:	d01b      	beq.n	801d8dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801d8a4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d8a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d8ac:	fb0e fa0a 	mul.w	sl, lr, sl
 801d8b0:	fb0e fe03 	mul.w	lr, lr, r3
 801d8b4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d8b8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d8bc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d8c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d8c4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d8c8:	4453      	add	r3, sl
 801d8ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8ce:	0a1b      	lsrs	r3, r3, #8
 801d8d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d8d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d8d8:	ea43 030c 	orr.w	r3, r3, ip
 801d8dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d8de:	2cff      	cmp	r4, #255	; 0xff
 801d8e0:	d021      	beq.n	801d926 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801d8e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d8e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d8e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d8ea:	fb04 fb0b 	mul.w	fp, r4, fp
 801d8ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d8f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d8f4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d8f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d8fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d8fe:	fb04 fa0a 	mul.w	sl, r4, sl
 801d902:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d906:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d90a:	44de      	add	lr, fp
 801d90c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d910:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d918:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d91c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d920:	ea4e 040a 	orr.w	r4, lr, sl
 801d924:	940e      	str	r4, [sp, #56]	; 0x38
 801d926:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d928:	2cff      	cmp	r4, #255	; 0xff
 801d92a:	d021      	beq.n	801d970 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801d92c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d92e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d932:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d934:	fb04 fb0b 	mul.w	fp, r4, fp
 801d938:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d93a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d93e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d940:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d944:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d948:	fb04 fa0a 	mul.w	sl, r4, sl
 801d94c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d950:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d954:	44de      	add	lr, fp
 801d956:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d95a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d95e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d962:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d966:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d96a:	ea4e 040a 	orr.w	r4, lr, sl
 801d96e:	940a      	str	r4, [sp, #40]	; 0x28
 801d970:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d972:	2cff      	cmp	r4, #255	; 0xff
 801d974:	d021      	beq.n	801d9ba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801d976:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d978:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d97c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d97e:	fb04 fb0b 	mul.w	fp, r4, fp
 801d982:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d984:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d988:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801d98a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d98e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d992:	fb04 fa0a 	mul.w	sl, r4, sl
 801d996:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d99a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d99e:	44de      	add	lr, fp
 801d9a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d9a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d9b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d9b4:	ea4e 040a 	orr.w	r4, lr, sl
 801d9b8:	940f      	str	r4, [sp, #60]	; 0x3c
 801d9ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d9bc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d9c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d9c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d9c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d9ca:	fb08 fc0c 	mul.w	ip, r8, ip
 801d9ce:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d9d2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d9d6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d9d8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d9dc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d9e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d9e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d9e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d9ea:	fb08 f80e 	mul.w	r8, r8, lr
 801d9ee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9f2:	fb02 8303 	mla	r3, r2, r3, r8
 801d9f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d9fc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801da00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da02:	fb01 330a 	mla	r3, r1, sl, r3
 801da06:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801da0a:	fb09 3901 	mla	r9, r9, r1, r3
 801da0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da10:	990d      	ldr	r1, [sp, #52]	; 0x34
 801da12:	4343      	muls	r3, r0
 801da14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801da18:	1c58      	adds	r0, r3, #1
 801da1a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801da1e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801da22:	ea4c 0c09 	orr.w	ip, ip, r9
 801da26:	783b      	ldrb	r3, [r7, #0]
 801da28:	fa5f f28c 	uxtb.w	r2, ip
 801da2c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801da30:	fb12 f201 	smulbb	r2, r2, r1
 801da34:	b2c0      	uxtb	r0, r0
 801da36:	fb03 2300 	mla	r3, r3, r0, r2
 801da3a:	b29b      	uxth	r3, r3
 801da3c:	1c5a      	adds	r2, r3, #1
 801da3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801da42:	787a      	ldrb	r2, [r7, #1]
 801da44:	fb12 f200 	smulbb	r2, r2, r0
 801da48:	121b      	asrs	r3, r3, #8
 801da4a:	703b      	strb	r3, [r7, #0]
 801da4c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801da50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801da54:	fb03 2301 	mla	r3, r3, r1, r2
 801da58:	b29b      	uxth	r3, r3
 801da5a:	1c5a      	adds	r2, r3, #1
 801da5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801da60:	121b      	asrs	r3, r3, #8
 801da62:	707b      	strb	r3, [r7, #1]
 801da64:	78bb      	ldrb	r3, [r7, #2]
 801da66:	fb13 f000 	smulbb	r0, r3, r0
 801da6a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801da6e:	fa1f fc8c 	uxth.w	ip, ip
 801da72:	f10c 0301 	add.w	r3, ip, #1
 801da76:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801da7a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801da7e:	f887 c002 	strb.w	ip, [r7, #2]
 801da82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801da84:	3703      	adds	r7, #3
 801da86:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801da88:	441a      	add	r2, r3
 801da8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801da8c:	441d      	add	r5, r3
 801da8e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801da90:	9229      	str	r2, [sp, #164]	; 0xa4
 801da92:	3b01      	subs	r3, #1
 801da94:	931a      	str	r3, [sp, #104]	; 0x68
 801da96:	e69c      	b.n	801d7d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801da98:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801da9a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801da9c:	441c      	add	r4, r3
 801da9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801daa0:	441d      	add	r5, r3
 801daa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daa4:	9429      	str	r4, [sp, #164]	; 0xa4
 801daa6:	3b01      	subs	r3, #1
 801daa8:	9309      	str	r3, [sp, #36]	; 0x24
 801daaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801daac:	3303      	adds	r3, #3
 801daae:	930c      	str	r3, [sp, #48]	; 0x30
 801dab0:	e66f      	b.n	801d792 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801dab2:	d026      	beq.n	801db02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801dab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dab6:	982b      	ldr	r0, [sp, #172]	; 0xac
 801dab8:	3b01      	subs	r3, #1
 801daba:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801dabc:	fb00 4003 	mla	r0, r0, r3, r4
 801dac0:	1400      	asrs	r0, r0, #16
 801dac2:	f53f ae83 	bmi.w	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dac6:	3901      	subs	r1, #1
 801dac8:	4288      	cmp	r0, r1
 801daca:	f6bf ae7f 	bge.w	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dace:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801dad0:	fb01 5303 	mla	r3, r1, r3, r5
 801dad4:	141b      	asrs	r3, r3, #16
 801dad6:	f53f ae79 	bmi.w	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dada:	3a01      	subs	r2, #1
 801dadc:	4293      	cmp	r3, r2
 801dade:	f6bf ae75 	bge.w	801d7cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801dae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dae4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801dae8:	f103 0e03 	add.w	lr, r3, #3
 801daec:	f1bb 0f00 	cmp.w	fp, #0
 801daf0:	dc71      	bgt.n	801dbd6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801daf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daf4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801daf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dafa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dafe:	4423      	add	r3, r4
 801db00:	930c      	str	r3, [sp, #48]	; 0x30
 801db02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801db04:	2b00      	cmp	r3, #0
 801db06:	f340 81b5 	ble.w	801de74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801db0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801db0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db10:	ee30 0a04 	vadd.f32	s0, s0, s8
 801db14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801db18:	eef0 6a62 	vmov.f32	s13, s5
 801db1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801db20:	ee31 1a05 	vadd.f32	s2, s2, s10
 801db24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db28:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801db2c:	eef0 6a43 	vmov.f32	s13, s6
 801db30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801db34:	ee16 5a90 	vmov	r5, s13
 801db38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801db3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801db40:	ee77 2a62 	vsub.f32	s5, s14, s5
 801db44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801db48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801db4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801db50:	ee12 2a90 	vmov	r2, s5
 801db54:	eef0 2a47 	vmov.f32	s5, s14
 801db58:	fb92 f3f3 	sdiv	r3, r2, r3
 801db5c:	ee13 2a10 	vmov	r2, s6
 801db60:	932b      	str	r3, [sp, #172]	; 0xac
 801db62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db64:	eeb0 3a67 	vmov.f32	s6, s15
 801db68:	fb92 f3f3 	sdiv	r3, r2, r3
 801db6c:	932c      	str	r3, [sp, #176]	; 0xb0
 801db6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801db70:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801db72:	3b01      	subs	r3, #1
 801db74:	9319      	str	r3, [sp, #100]	; 0x64
 801db76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db78:	bf08      	it	eq
 801db7a:	4613      	moveq	r3, r2
 801db7c:	9309      	str	r3, [sp, #36]	; 0x24
 801db7e:	e5fa      	b.n	801d776 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801db80:	2900      	cmp	r1, #0
 801db82:	f43f ae6c 	beq.w	801d85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801db86:	f818 0000 	ldrb.w	r0, [r8, r0]
 801db8a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801db8e:	900a      	str	r0, [sp, #40]	; 0x28
 801db90:	0e00      	lsrs	r0, r0, #24
 801db92:	9013      	str	r0, [sp, #76]	; 0x4c
 801db94:	e663      	b.n	801d85e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801db96:	f113 0801 	adds.w	r8, r3, #1
 801db9a:	f53f af72 	bmi.w	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801db9e:	4540      	cmp	r0, r8
 801dba0:	f6ff af6f 	blt.w	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dba4:	f11c 0801 	adds.w	r8, ip, #1
 801dba8:	f53f af6b 	bmi.w	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dbac:	45c6      	cmp	lr, r8
 801dbae:	f6ff af68 	blt.w	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dbb2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801dbb4:	b200      	sxth	r0, r0
 801dbb6:	9302      	str	r3, [sp, #8]
 801dbb8:	fa0f f38e 	sxth.w	r3, lr
 801dbbc:	9000      	str	r0, [sp, #0]
 801dbbe:	9301      	str	r3, [sp, #4]
 801dbc0:	4633      	mov	r3, r6
 801dbc2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dbc4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801dbc8:	e9cd c203 	strd	ip, r2, [sp, #12]
 801dbcc:	4639      	mov	r1, r7
 801dbce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801dbd0:	f7ff fc74 	bl	801d4bc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801dbd4:	e755      	b.n	801da82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dbd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dbd8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801dbdc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801dbde:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dbe2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dbe4:	1427      	asrs	r7, r4, #16
 801dbe6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dbe8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dbec:	142b      	asrs	r3, r5, #16
 801dbee:	fb01 7303 	mla	r3, r1, r3, r7
 801dbf2:	18e7      	adds	r7, r4, r3
 801dbf4:	5ce3      	ldrb	r3, [r4, r3]
 801dbf6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dbfa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801dbfe:	2a00      	cmp	r2, #0
 801dc00:	f000 812e 	beq.w	801de60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801dc04:	f897 8001 	ldrb.w	r8, [r7, #1]
 801dc08:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801dc0c:	9410      	str	r4, [sp, #64]	; 0x40
 801dc0e:	0e24      	lsrs	r4, r4, #24
 801dc10:	9417      	str	r4, [sp, #92]	; 0x5c
 801dc12:	b170      	cbz	r0, 801dc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801dc14:	eb07 0801 	add.w	r8, r7, r1
 801dc18:	5c79      	ldrb	r1, [r7, r1]
 801dc1a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dc1e:	910b      	str	r1, [sp, #44]	; 0x2c
 801dc20:	0e09      	lsrs	r1, r1, #24
 801dc22:	9114      	str	r1, [sp, #80]	; 0x50
 801dc24:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dc28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801dc2c:	9111      	str	r1, [sp, #68]	; 0x44
 801dc2e:	0e09      	lsrs	r1, r1, #24
 801dc30:	9118      	str	r1, [sp, #96]	; 0x60
 801dc32:	b292      	uxth	r2, r2
 801dc34:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801dc36:	b280      	uxth	r0, r0
 801dc38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dc3a:	fb02 f900 	mul.w	r9, r2, r0
 801dc3e:	0112      	lsls	r2, r2, #4
 801dc40:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801dc44:	eba2 0809 	sub.w	r8, r2, r9
 801dc48:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801dc4c:	b280      	uxth	r0, r0
 801dc4e:	fa1f f888 	uxth.w	r8, r8
 801dc52:	1a12      	subs	r2, r2, r0
 801dc54:	fb08 f101 	mul.w	r1, r8, r1
 801dc58:	b292      	uxth	r2, r2
 801dc5a:	fb02 110c 	mla	r1, r2, ip, r1
 801dc5e:	fb00 1104 	mla	r1, r0, r4, r1
 801dc62:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dc64:	fb09 1104 	mla	r1, r9, r4, r1
 801dc68:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801dc6c:	2900      	cmp	r1, #0
 801dc6e:	f000 80ec 	beq.w	801de4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801dc72:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dc76:	d019      	beq.n	801dcac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801dc78:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dc7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc80:	fb0c fa0a 	mul.w	sl, ip, sl
 801dc84:	fb0c fc03 	mul.w	ip, ip, r3
 801dc88:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801dc8c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dc90:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801dc94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dc98:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801dc9c:	4453      	add	r3, sl
 801dc9e:	0a3f      	lsrs	r7, r7, #8
 801dca0:	0a1b      	lsrs	r3, r3, #8
 801dca2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dca6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dcaa:	433b      	orrs	r3, r7
 801dcac:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dcae:	2cff      	cmp	r4, #255	; 0xff
 801dcb0:	d020      	beq.n	801dcf4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801dcb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dcb4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dcb8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dcba:	4367      	muls	r7, r4
 801dcbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dcbe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dcc2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dcc6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801dcc8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dccc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dcd0:	fb04 fa0a 	mul.w	sl, r4, sl
 801dcd4:	44bc      	add	ip, r7
 801dcd6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dcda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dcde:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dce2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dce6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dcea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dcee:	ea4c 040a 	orr.w	r4, ip, sl
 801dcf2:	9410      	str	r4, [sp, #64]	; 0x40
 801dcf4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dcf6:	2cff      	cmp	r4, #255	; 0xff
 801dcf8:	d020      	beq.n	801dd3c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801dcfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dcfc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dd00:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd02:	4367      	muls	r7, r4
 801dd04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd06:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dd0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dd0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801dd10:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dd14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd18:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd1c:	44bc      	add	ip, r7
 801dd1e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dd22:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd26:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dd2a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd32:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dd36:	ea4c 040a 	orr.w	r4, ip, sl
 801dd3a:	940b      	str	r4, [sp, #44]	; 0x2c
 801dd3c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dd3e:	2cff      	cmp	r4, #255	; 0xff
 801dd40:	d020      	beq.n	801dd84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801dd42:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dd44:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dd48:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dd4a:	4367      	muls	r7, r4
 801dd4c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dd4e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801dd52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801dd56:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801dd58:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801dd5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd60:	fb04 fa0a 	mul.w	sl, r4, sl
 801dd64:	44bc      	add	ip, r7
 801dd66:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801dd6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd6e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801dd72:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dd76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dd7a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801dd7e:	ea4c 040a 	orr.w	r4, ip, sl
 801dd82:	9411      	str	r4, [sp, #68]	; 0x44
 801dd84:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801dd86:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801dd8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd8e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801dd92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dd94:	fb08 f707 	mul.w	r7, r8, r7
 801dd98:	fb02 770c 	mla	r7, r2, ip, r7
 801dd9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801dda0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801dda2:	fb00 770c 	mla	r7, r0, ip, r7
 801dda6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ddaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ddac:	fb09 770c 	mla	r7, r9, ip, r7
 801ddb0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ddb4:	fb08 f80c 	mul.w	r8, r8, ip
 801ddb8:	0a3f      	lsrs	r7, r7, #8
 801ddba:	fb02 8303 	mla	r3, r2, r3, r8
 801ddbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ddc0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ddc4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801ddc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ddca:	fb00 330a 	mla	r3, r0, sl, r3
 801ddce:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ddd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ddd4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ddd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ddda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ddde:	434b      	muls	r3, r1
 801dde0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801dde4:	1c59      	adds	r1, r3, #1
 801dde6:	ea47 070c 	orr.w	r7, r7, ip
 801ddea:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ddee:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ddf2:	b2fa      	uxtb	r2, r7
 801ddf4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ddf8:	fb12 f200 	smulbb	r2, r2, r0
 801ddfc:	b2c9      	uxtb	r1, r1
 801ddfe:	fb03 2301 	mla	r3, r3, r1, r2
 801de02:	b29b      	uxth	r3, r3
 801de04:	1c5a      	adds	r2, r3, #1
 801de06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de0a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801de0e:	fb12 f201 	smulbb	r2, r2, r1
 801de12:	121b      	asrs	r3, r3, #8
 801de14:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801de18:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801de1c:	0c3f      	lsrs	r7, r7, #16
 801de1e:	fb03 2300 	mla	r3, r3, r0, r2
 801de22:	b29b      	uxth	r3, r3
 801de24:	1c5a      	adds	r2, r3, #1
 801de26:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801de2a:	121b      	asrs	r3, r3, #8
 801de2c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801de30:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801de34:	fb13 f101 	smulbb	r1, r3, r1
 801de38:	fb07 1700 	mla	r7, r7, r0, r1
 801de3c:	b2bf      	uxth	r7, r7
 801de3e:	1c7b      	adds	r3, r7, #1
 801de40:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801de44:	123f      	asrs	r7, r7, #8
 801de46:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801de4a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801de4c:	f10e 0e03 	add.w	lr, lr, #3
 801de50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801de52:	f10b 3bff 	add.w	fp, fp, #4294967295
 801de56:	441a      	add	r2, r3
 801de58:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801de5a:	9229      	str	r2, [sp, #164]	; 0xa4
 801de5c:	441d      	add	r5, r3
 801de5e:	e645      	b.n	801daec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801de60:	2800      	cmp	r0, #0
 801de62:	f43f aee6 	beq.w	801dc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801de66:	5c79      	ldrb	r1, [r7, r1]
 801de68:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801de6c:	910b      	str	r1, [sp, #44]	; 0x2c
 801de6e:	0e09      	lsrs	r1, r1, #24
 801de70:	9114      	str	r1, [sp, #80]	; 0x50
 801de72:	e6de      	b.n	801dc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801de74:	b01f      	add	sp, #124	; 0x7c
 801de76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801de7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de7e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801de82:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801de86:	2d00      	cmp	r5, #0
 801de88:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801de8c:	fb05 700e 	mla	r0, r5, lr, r7
 801de90:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801de94:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801de98:	eb02 0800 	add.w	r8, r2, r0
 801de9c:	f2c0 8105 	blt.w	801e0aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801dea0:	45a9      	cmp	r9, r5
 801dea2:	f340 8102 	ble.w	801e0aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801dea6:	2f00      	cmp	r7, #0
 801dea8:	f2c0 80fd 	blt.w	801e0a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801deac:	45be      	cmp	lr, r7
 801deae:	f340 80fa 	ble.w	801e0a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801deb2:	5c12      	ldrb	r2, [r2, r0]
 801deb4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801deb8:	1c7a      	adds	r2, r7, #1
 801deba:	f100 80f9 	bmi.w	801e0b0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801debe:	4596      	cmp	lr, r2
 801dec0:	f340 80f6 	ble.w	801e0b0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801dec4:	2c00      	cmp	r4, #0
 801dec6:	f000 80f5 	beq.w	801e0b4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801deca:	f898 2001 	ldrb.w	r2, [r8, #1]
 801dece:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ded2:	3501      	adds	r5, #1
 801ded4:	f100 80f2 	bmi.w	801e0bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801ded8:	45a9      	cmp	r9, r5
 801deda:	f340 80ef 	ble.w	801e0bc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801dede:	f1bc 0f00 	cmp.w	ip, #0
 801dee2:	f000 80ee 	beq.w	801e0c2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801dee6:	2f00      	cmp	r7, #0
 801dee8:	f2c0 80e6 	blt.w	801e0b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801deec:	45be      	cmp	lr, r7
 801deee:	f340 80e3 	ble.w	801e0b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801def2:	f818 200e 	ldrb.w	r2, [r8, lr]
 801def6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801defa:	3701      	adds	r7, #1
 801defc:	f100 80e4 	bmi.w	801e0c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801df00:	45be      	cmp	lr, r7
 801df02:	f340 80e1 	ble.w	801e0c8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801df06:	2c00      	cmp	r4, #0
 801df08:	f000 80e0 	beq.w	801e0cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801df0c:	44c6      	add	lr, r8
 801df0e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801df12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801df16:	b2a3      	uxth	r3, r4
 801df18:	fa1f fc8c 	uxth.w	ip, ip
 801df1c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801df20:	fb0c fe03 	mul.w	lr, ip, r3
 801df24:	011b      	lsls	r3, r3, #4
 801df26:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801df2a:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801df2e:	eba3 070e 	sub.w	r7, r3, lr
 801df32:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801df36:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801df3a:	fa1f f48c 	uxth.w	r4, ip
 801df3e:	b2bf      	uxth	r7, r7
 801df40:	1b1b      	subs	r3, r3, r4
 801df42:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801df46:	fb07 fc0a 	mul.w	ip, r7, sl
 801df4a:	b29b      	uxth	r3, r3
 801df4c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801df50:	9300      	str	r3, [sp, #0]
 801df52:	fb04 cc09 	mla	ip, r4, r9, ip
 801df56:	fb0e cc08 	mla	ip, lr, r8, ip
 801df5a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801df5e:	9301      	str	r3, [sp, #4]
 801df60:	2b00      	cmp	r3, #0
 801df62:	f000 809d 	beq.w	801e0a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801df66:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801df6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801df6e:	fb0b fc0c 	mul.w	ip, fp, ip
 801df72:	fb0b f606 	mul.w	r6, fp, r6
 801df76:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801df7a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801df7e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801df82:	44dc      	add	ip, fp
 801df84:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801df88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801df8c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df90:	fb0a fb0b 	mul.w	fp, sl, fp
 801df94:	fb0a fa00 	mul.w	sl, sl, r0
 801df98:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801df9c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801dfa0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801dfa4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801dfa8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801dfac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dfb0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801dfb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfb8:	0a36      	lsrs	r6, r6, #8
 801dfba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dfbe:	44dc      	add	ip, fp
 801dfc0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801dfc4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dfc8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dfcc:	fb09 fb0b 	mul.w	fp, r9, fp
 801dfd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dfd4:	fb09 f905 	mul.w	r9, r9, r5
 801dfd8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801dfdc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801dfe0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801dfe4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dfe8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dfec:	fb0c fc07 	mul.w	ip, ip, r7
 801dff0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801dff4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801dff8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dffc:	4458      	add	r0, fp
 801dffe:	fb08 f505 	mul.w	r5, r8, r5
 801e002:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e006:	fb08 f802 	mul.w	r8, r8, r2
 801e00a:	0a00      	lsrs	r0, r0, #8
 801e00c:	0a2a      	lsrs	r2, r5, #8
 801e00e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e012:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e016:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e01a:	4415      	add	r5, r2
 801e01c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801e020:	0a2d      	lsrs	r5, r5, #8
 801e022:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801e026:	9a00      	ldr	r2, [sp, #0]
 801e028:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e02c:	fb03 cc02 	mla	ip, r3, r2, ip
 801e030:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e034:	9b01      	ldr	r3, [sp, #4]
 801e036:	fb05 c50e 	mla	r5, r5, lr, ip
 801e03a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e03e:	43db      	mvns	r3, r3
 801e040:	fb00 5004 	mla	r0, r0, r4, r5
 801e044:	b2db      	uxtb	r3, r3
 801e046:	0a00      	lsrs	r0, r0, #8
 801e048:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e04c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801e050:	4378      	muls	r0, r7
 801e052:	fb02 0006 	mla	r0, r2, r6, r0
 801e056:	780a      	ldrb	r2, [r1, #0]
 801e058:	fb0e 0e08 	mla	lr, lr, r8, r0
 801e05c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801e060:	fb04 e000 	mla	r0, r4, r0, lr
 801e064:	fb02 f403 	mul.w	r4, r2, r3
 801e068:	0a00      	lsrs	r0, r0, #8
 801e06a:	1c62      	adds	r2, r4, #1
 801e06c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e070:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e074:	4328      	orrs	r0, r5
 801e076:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e07a:	700a      	strb	r2, [r1, #0]
 801e07c:	784a      	ldrb	r2, [r1, #1]
 801e07e:	435a      	muls	r2, r3
 801e080:	1c54      	adds	r4, r2, #1
 801e082:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e086:	0a02      	lsrs	r2, r0, #8
 801e088:	0c00      	lsrs	r0, r0, #16
 801e08a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e08e:	704a      	strb	r2, [r1, #1]
 801e090:	788a      	ldrb	r2, [r1, #2]
 801e092:	4353      	muls	r3, r2
 801e094:	1c5a      	adds	r2, r3, #1
 801e096:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e09a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e09e:	7088      	strb	r0, [r1, #2]
 801e0a0:	b003      	add	sp, #12
 801e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a6:	2600      	movs	r6, #0
 801e0a8:	e706      	b.n	801deb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801e0aa:	2000      	movs	r0, #0
 801e0ac:	4606      	mov	r6, r0
 801e0ae:	e710      	b.n	801ded2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e0b0:	2000      	movs	r0, #0
 801e0b2:	e70e      	b.n	801ded2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e0b4:	4620      	mov	r0, r4
 801e0b6:	e70c      	b.n	801ded2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801e0b8:	2500      	movs	r5, #0
 801e0ba:	e71e      	b.n	801defa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801e0bc:	2200      	movs	r2, #0
 801e0be:	4615      	mov	r5, r2
 801e0c0:	e729      	b.n	801df16 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e0c2:	4662      	mov	r2, ip
 801e0c4:	4665      	mov	r5, ip
 801e0c6:	e726      	b.n	801df16 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e0c8:	2200      	movs	r2, #0
 801e0ca:	e724      	b.n	801df16 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801e0cc:	4622      	mov	r2, r4
 801e0ce:	e722      	b.n	801df16 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801e0d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d4:	b09b      	sub	sp, #108	; 0x6c
 801e0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0da:	9218      	str	r2, [sp, #96]	; 0x60
 801e0dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e0de:	9019      	str	r0, [sp, #100]	; 0x64
 801e0e0:	9116      	str	r1, [sp, #88]	; 0x58
 801e0e2:	6850      	ldr	r0, [r2, #4]
 801e0e4:	9307      	str	r3, [sp, #28]
 801e0e6:	6812      	ldr	r2, [r2, #0]
 801e0e8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801e0ea:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e0ee:	fb00 1303 	mla	r3, r0, r3, r1
 801e0f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e0f6:	18d3      	adds	r3, r2, r3
 801e0f8:	930a      	str	r3, [sp, #40]	; 0x28
 801e0fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801e100:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e102:	685e      	ldr	r6, [r3, #4]
 801e104:	3604      	adds	r6, #4
 801e106:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e108:	2b00      	cmp	r3, #0
 801e10a:	dc03      	bgt.n	801e114 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e10c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e10e:	2b00      	cmp	r3, #0
 801e110:	f340 834f 	ble.w	801e7b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e114:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e116:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e11a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e11e:	1e48      	subs	r0, r1, #1
 801e120:	1e57      	subs	r7, r2, #1
 801e122:	9b07      	ldr	r3, [sp, #28]
 801e124:	2b00      	cmp	r3, #0
 801e126:	f340 8178 	ble.w	801e41a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801e12a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e12c:	142b      	asrs	r3, r5, #16
 801e12e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e132:	d406      	bmi.n	801e142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e134:	4584      	cmp	ip, r0
 801e136:	da04      	bge.n	801e142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e138:	2b00      	cmp	r3, #0
 801e13a:	db02      	blt.n	801e142 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e13c:	42bb      	cmp	r3, r7
 801e13e:	f2c0 816d 	blt.w	801e41c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801e142:	f11c 0c01 	adds.w	ip, ip, #1
 801e146:	f100 815b 	bmi.w	801e400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e14a:	4561      	cmp	r1, ip
 801e14c:	f2c0 8158 	blt.w	801e400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e150:	3301      	adds	r3, #1
 801e152:	f100 8155 	bmi.w	801e400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e156:	429a      	cmp	r2, r3
 801e158:	f2c0 8152 	blt.w	801e400 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801e15c:	9b07      	ldr	r3, [sp, #28]
 801e15e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e160:	9317      	str	r3, [sp, #92]	; 0x5c
 801e162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e164:	2b00      	cmp	r3, #0
 801e166:	f340 8178 	ble.w	801e45a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801e16a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e16c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e170:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e174:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e178:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e17a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e17e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e180:	141b      	asrs	r3, r3, #16
 801e182:	f100 81ba 	bmi.w	801e4fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e186:	f101 38ff 	add.w	r8, r1, #4294967295
 801e18a:	4543      	cmp	r3, r8
 801e18c:	f280 81b5 	bge.w	801e4fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e190:	f1bc 0f00 	cmp.w	ip, #0
 801e194:	f2c0 81b1 	blt.w	801e4fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e198:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e19c:	45c4      	cmp	ip, r8
 801e19e:	f280 81ac 	bge.w	801e4fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801e1a2:	b209      	sxth	r1, r1
 801e1a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e1a6:	fb0c 3301 	mla	r3, ip, r1, r3
 801e1aa:	eb04 0803 	add.w	r8, r4, r3
 801e1ae:	5ce3      	ldrb	r3, [r4, r3]
 801e1b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e1b4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e1b8:	2a00      	cmp	r2, #0
 801e1ba:	f000 8193 	beq.w	801e4e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801e1be:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e1c2:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e1c6:	940b      	str	r4, [sp, #44]	; 0x2c
 801e1c8:	0e24      	lsrs	r4, r4, #24
 801e1ca:	9412      	str	r4, [sp, #72]	; 0x48
 801e1cc:	b178      	cbz	r0, 801e1ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e1ce:	eb08 0c01 	add.w	ip, r8, r1
 801e1d2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e1d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1da:	9108      	str	r1, [sp, #32]
 801e1dc:	0e09      	lsrs	r1, r1, #24
 801e1de:	9110      	str	r1, [sp, #64]	; 0x40
 801e1e0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e1e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e1e8:	910c      	str	r1, [sp, #48]	; 0x30
 801e1ea:	0e09      	lsrs	r1, r1, #24
 801e1ec:	9113      	str	r1, [sp, #76]	; 0x4c
 801e1ee:	b292      	uxth	r2, r2
 801e1f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1f2:	b280      	uxth	r0, r0
 801e1f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e1f6:	fb02 f900 	mul.w	r9, r2, r0
 801e1fa:	0112      	lsls	r2, r2, #4
 801e1fc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e200:	eba2 0809 	sub.w	r8, r2, r9
 801e204:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e208:	b280      	uxth	r0, r0
 801e20a:	fa1f f888 	uxth.w	r8, r8
 801e20e:	1a12      	subs	r2, r2, r0
 801e210:	fb08 f101 	mul.w	r1, r8, r1
 801e214:	b292      	uxth	r2, r2
 801e216:	fb02 110e 	mla	r1, r2, lr, r1
 801e21a:	fb00 1104 	mla	r1, r0, r4, r1
 801e21e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e220:	fb09 1104 	mla	r1, r9, r4, r1
 801e224:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e228:	2900      	cmp	r1, #0
 801e22a:	f000 80de 	beq.w	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e22e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e232:	d01b      	beq.n	801e26c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801e234:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e238:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e23c:	fb0e fa0a 	mul.w	sl, lr, sl
 801e240:	fb0e fe03 	mul.w	lr, lr, r3
 801e244:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e248:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e24c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e250:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e254:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e258:	4453      	add	r3, sl
 801e25a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e25e:	0a1b      	lsrs	r3, r3, #8
 801e260:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e264:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e268:	ea43 030c 	orr.w	r3, r3, ip
 801e26c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e26e:	2cff      	cmp	r4, #255	; 0xff
 801e270:	d021      	beq.n	801e2b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e272:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e274:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e278:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e27a:	fb04 fb0b 	mul.w	fp, r4, fp
 801e27e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e280:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e284:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e286:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e28a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e28e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e292:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e296:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e29a:	44de      	add	lr, fp
 801e29c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e2a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2b0:	ea4e 040a 	orr.w	r4, lr, sl
 801e2b4:	940b      	str	r4, [sp, #44]	; 0x2c
 801e2b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2b8:	2cff      	cmp	r4, #255	; 0xff
 801e2ba:	d021      	beq.n	801e300 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e2bc:	9c08      	ldr	r4, [sp, #32]
 801e2be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e2c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2c4:	fb04 fb0b 	mul.w	fp, r4, fp
 801e2c8:	9c08      	ldr	r4, [sp, #32]
 801e2ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e2ce:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e2d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e2d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e2d8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e2dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e2e4:	44de      	add	lr, fp
 801e2e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e2ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e2f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e2fa:	ea4e 040a 	orr.w	r4, lr, sl
 801e2fe:	9408      	str	r4, [sp, #32]
 801e300:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e302:	2cff      	cmp	r4, #255	; 0xff
 801e304:	d021      	beq.n	801e34a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e306:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e308:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e30c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e30e:	fb04 fb0b 	mul.w	fp, r4, fp
 801e312:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e314:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e318:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e31a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e31e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e322:	fb04 fa0a 	mul.w	sl, r4, sl
 801e326:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e32a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e32e:	44de      	add	lr, fp
 801e330:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e334:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e338:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e33c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e340:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e344:	ea4e 040a 	orr.w	r4, lr, sl
 801e348:	940c      	str	r4, [sp, #48]	; 0x30
 801e34a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e34c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e354:	43c9      	mvns	r1, r1
 801e356:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e35a:	9c08      	ldr	r4, [sp, #32]
 801e35c:	b2c9      	uxtb	r1, r1
 801e35e:	fb08 fc0c 	mul.w	ip, r8, ip
 801e362:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e366:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e36a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e36c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e370:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e374:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e376:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e37a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e37e:	fb08 f80e 	mul.w	r8, r8, lr
 801e382:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e386:	fb02 8303 	mla	r3, r2, r3, r8
 801e38a:	9a08      	ldr	r2, [sp, #32]
 801e38c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e390:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e396:	fb00 330a 	mla	r3, r0, sl, r3
 801e39a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801e39e:	fb09 3900 	mla	r9, r9, r0, r3
 801e3a2:	783b      	ldrb	r3, [r7, #0]
 801e3a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e3a8:	fb03 f201 	mul.w	r2, r3, r1
 801e3ac:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e3b0:	1c53      	adds	r3, r2, #1
 801e3b2:	ea4c 0c09 	orr.w	ip, ip, r9
 801e3b6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e3ba:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e3be:	703b      	strb	r3, [r7, #0]
 801e3c0:	787b      	ldrb	r3, [r7, #1]
 801e3c2:	434b      	muls	r3, r1
 801e3c4:	1c5a      	adds	r2, r3, #1
 801e3c6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e3ca:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801e3ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e3d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e3d6:	707b      	strb	r3, [r7, #1]
 801e3d8:	78bb      	ldrb	r3, [r7, #2]
 801e3da:	4359      	muls	r1, r3
 801e3dc:	1c4b      	adds	r3, r1, #1
 801e3de:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e3e2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801e3e6:	f887 c002 	strb.w	ip, [r7, #2]
 801e3ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e3ec:	3703      	adds	r7, #3
 801e3ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e3f0:	441a      	add	r2, r3
 801e3f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e3f4:	441d      	add	r5, r3
 801e3f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e3f8:	9225      	str	r2, [sp, #148]	; 0x94
 801e3fa:	3b01      	subs	r3, #1
 801e3fc:	9317      	str	r3, [sp, #92]	; 0x5c
 801e3fe:	e6b0      	b.n	801e162 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e400:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e402:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e404:	441c      	add	r4, r3
 801e406:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e408:	441d      	add	r5, r3
 801e40a:	9b07      	ldr	r3, [sp, #28]
 801e40c:	9425      	str	r4, [sp, #148]	; 0x94
 801e40e:	3b01      	subs	r3, #1
 801e410:	9307      	str	r3, [sp, #28]
 801e412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e414:	3303      	adds	r3, #3
 801e416:	930a      	str	r3, [sp, #40]	; 0x28
 801e418:	e683      	b.n	801e122 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e41a:	d026      	beq.n	801e46a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801e41c:	9b07      	ldr	r3, [sp, #28]
 801e41e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801e420:	3b01      	subs	r3, #1
 801e422:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e424:	fb00 4003 	mla	r0, r0, r3, r4
 801e428:	1400      	asrs	r0, r0, #16
 801e42a:	f53f ae97 	bmi.w	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e42e:	3901      	subs	r1, #1
 801e430:	4288      	cmp	r0, r1
 801e432:	f6bf ae93 	bge.w	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e436:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801e438:	fb01 5303 	mla	r3, r1, r3, r5
 801e43c:	141b      	asrs	r3, r3, #16
 801e43e:	f53f ae8d 	bmi.w	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e442:	3a01      	subs	r2, #1
 801e444:	4293      	cmp	r3, r2
 801e446:	f6bf ae89 	bge.w	801e15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801e44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e44c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e450:	f103 0e03 	add.w	lr, r3, #3
 801e454:	f1bb 0f00 	cmp.w	fp, #0
 801e458:	dc6d      	bgt.n	801e536 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801e45a:	9b07      	ldr	r3, [sp, #28]
 801e45c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e462:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e466:	4423      	add	r3, r4
 801e468:	930a      	str	r3, [sp, #40]	; 0x28
 801e46a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	f340 81a0 	ble.w	801e7b2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801e472:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e476:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e478:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e47c:	eeb0 6a62 	vmov.f32	s12, s5
 801e480:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e484:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e488:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e48c:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801e490:	eeb0 6a43 	vmov.f32	s12, s6
 801e494:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e498:	ee16 5a10 	vmov	r5, s12
 801e49c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e4a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e4a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e4a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e4ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e4b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e4b4:	ee12 2a90 	vmov	r2, s5
 801e4b8:	eef0 2a47 	vmov.f32	s5, s14
 801e4bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4c0:	ee13 2a10 	vmov	r2, s6
 801e4c4:	9327      	str	r3, [sp, #156]	; 0x9c
 801e4c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4c8:	eeb0 3a67 	vmov.f32	s6, s15
 801e4cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e4d0:	9328      	str	r3, [sp, #160]	; 0xa0
 801e4d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e4d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e4d6:	3b01      	subs	r3, #1
 801e4d8:	9316      	str	r3, [sp, #88]	; 0x58
 801e4da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e4dc:	bf08      	it	eq
 801e4de:	4613      	moveq	r3, r2
 801e4e0:	9307      	str	r3, [sp, #28]
 801e4e2:	e610      	b.n	801e106 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e4e4:	2800      	cmp	r0, #0
 801e4e6:	f43f ae82 	beq.w	801e1ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e4ea:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e4ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e4f2:	9108      	str	r1, [sp, #32]
 801e4f4:	0e09      	lsrs	r1, r1, #24
 801e4f6:	9110      	str	r1, [sp, #64]	; 0x40
 801e4f8:	e679      	b.n	801e1ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801e4fa:	f113 0801 	adds.w	r8, r3, #1
 801e4fe:	f53f af74 	bmi.w	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e502:	4541      	cmp	r1, r8
 801e504:	f6ff af71 	blt.w	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e508:	f11c 0801 	adds.w	r8, ip, #1
 801e50c:	f53f af6d 	bmi.w	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e510:	45c6      	cmp	lr, r8
 801e512:	f6ff af6a 	blt.w	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e516:	b209      	sxth	r1, r1
 801e518:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801e51c:	fa0f f38e 	sxth.w	r3, lr
 801e520:	9100      	str	r1, [sp, #0]
 801e522:	4639      	mov	r1, r7
 801e524:	9301      	str	r3, [sp, #4]
 801e526:	4633      	mov	r3, r6
 801e528:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801e52c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e52e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801e530:	f7ff fca3 	bl	801de7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801e534:	e759      	b.n	801e3ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e536:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e538:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e53c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e53e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e542:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e544:	1427      	asrs	r7, r4, #16
 801e546:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e548:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e54c:	142b      	asrs	r3, r5, #16
 801e54e:	fb01 7303 	mla	r3, r1, r3, r7
 801e552:	18e7      	adds	r7, r4, r3
 801e554:	5ce3      	ldrb	r3, [r4, r3]
 801e556:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e55a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e55e:	2a00      	cmp	r2, #0
 801e560:	f000 811d 	beq.w	801e79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801e564:	f897 8001 	ldrb.w	r8, [r7, #1]
 801e568:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801e56c:	940d      	str	r4, [sp, #52]	; 0x34
 801e56e:	0e24      	lsrs	r4, r4, #24
 801e570:	9414      	str	r4, [sp, #80]	; 0x50
 801e572:	b170      	cbz	r0, 801e592 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e574:	eb07 0801 	add.w	r8, r7, r1
 801e578:	5c79      	ldrb	r1, [r7, r1]
 801e57a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e57e:	9109      	str	r1, [sp, #36]	; 0x24
 801e580:	0e09      	lsrs	r1, r1, #24
 801e582:	9111      	str	r1, [sp, #68]	; 0x44
 801e584:	f898 1001 	ldrb.w	r1, [r8, #1]
 801e588:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e58c:	910e      	str	r1, [sp, #56]	; 0x38
 801e58e:	0e09      	lsrs	r1, r1, #24
 801e590:	9115      	str	r1, [sp, #84]	; 0x54
 801e592:	b292      	uxth	r2, r2
 801e594:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e596:	b280      	uxth	r0, r0
 801e598:	fb02 f900 	mul.w	r9, r2, r0
 801e59c:	0112      	lsls	r2, r2, #4
 801e59e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e5a2:	eba2 0809 	sub.w	r8, r2, r9
 801e5a6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e5aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e5ac:	b280      	uxth	r0, r0
 801e5ae:	fa1f f888 	uxth.w	r8, r8
 801e5b2:	1a09      	subs	r1, r1, r0
 801e5b4:	fb08 f202 	mul.w	r2, r8, r2
 801e5b8:	b289      	uxth	r1, r1
 801e5ba:	fb01 220c 	mla	r2, r1, ip, r2
 801e5be:	fb00 2204 	mla	r2, r0, r4, r2
 801e5c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e5c4:	fb09 2204 	mla	r2, r9, r4, r2
 801e5c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e5cc:	2a00      	cmp	r2, #0
 801e5ce:	f000 80db 	beq.w	801e788 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801e5d2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e5d6:	d019      	beq.n	801e60c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801e5d8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e5dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e5e0:	fb0c fa0a 	mul.w	sl, ip, sl
 801e5e4:	fb0c fc03 	mul.w	ip, ip, r3
 801e5e8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e5ec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e5f0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e5f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e5f8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e5fc:	4453      	add	r3, sl
 801e5fe:	0a3f      	lsrs	r7, r7, #8
 801e600:	0a1b      	lsrs	r3, r3, #8
 801e602:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e60a:	433b      	orrs	r3, r7
 801e60c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e60e:	2cff      	cmp	r4, #255	; 0xff
 801e610:	d020      	beq.n	801e654 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801e612:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e614:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e618:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e61a:	4367      	muls	r7, r4
 801e61c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e61e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e622:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e626:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e628:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e62c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e630:	fb04 fa0a 	mul.w	sl, r4, sl
 801e634:	44bc      	add	ip, r7
 801e636:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e63a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e63e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e642:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e64a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e64e:	ea4c 040a 	orr.w	r4, ip, sl
 801e652:	940d      	str	r4, [sp, #52]	; 0x34
 801e654:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e656:	2cff      	cmp	r4, #255	; 0xff
 801e658:	d020      	beq.n	801e69c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801e65a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e65c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e660:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e662:	4367      	muls	r7, r4
 801e664:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e666:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e66a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e66e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e670:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e674:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e678:	fb04 fa0a 	mul.w	sl, r4, sl
 801e67c:	44bc      	add	ip, r7
 801e67e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e682:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e686:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e68a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e68e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e692:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e696:	ea4c 040a 	orr.w	r4, ip, sl
 801e69a:	9409      	str	r4, [sp, #36]	; 0x24
 801e69c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e69e:	2cff      	cmp	r4, #255	; 0xff
 801e6a0:	d020      	beq.n	801e6e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801e6a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e6a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e6a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e6aa:	4367      	muls	r7, r4
 801e6ac:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e6ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e6b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e6b6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e6b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e6bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6c4:	44bc      	add	ip, r7
 801e6c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e6ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e6d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e6d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e6de:	ea4c 040a 	orr.w	r4, ip, sl
 801e6e2:	940e      	str	r4, [sp, #56]	; 0x38
 801e6e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e6e6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e6ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e6ee:	43d2      	mvns	r2, r2
 801e6f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e6f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801e6f6:	b2d2      	uxtb	r2, r2
 801e6f8:	fb08 f707 	mul.w	r7, r8, r7
 801e6fc:	fb01 770c 	mla	r7, r1, ip, r7
 801e700:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e704:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e706:	fb00 770c 	mla	r7, r0, ip, r7
 801e70a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e70e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e710:	fb09 770c 	mla	r7, r9, ip, r7
 801e714:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e718:	fb08 f80c 	mul.w	r8, r8, ip
 801e71c:	0a3f      	lsrs	r7, r7, #8
 801e71e:	fb01 8303 	mla	r3, r1, r3, r8
 801e722:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e724:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e728:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801e72c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e72e:	fb00 330a 	mla	r3, r0, sl, r3
 801e732:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801e736:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e73a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e73e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e742:	fb03 f102 	mul.w	r1, r3, r2
 801e746:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e74a:	1c4b      	adds	r3, r1, #1
 801e74c:	ea47 070c 	orr.w	r7, r7, ip
 801e750:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e754:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801e758:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e75c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801e760:	4353      	muls	r3, r2
 801e762:	1c59      	adds	r1, r3, #1
 801e764:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e768:	0a3b      	lsrs	r3, r7, #8
 801e76a:	0c3f      	lsrs	r7, r7, #16
 801e76c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e770:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e774:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e778:	435a      	muls	r2, r3
 801e77a:	1c53      	adds	r3, r2, #1
 801e77c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e780:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e784:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e788:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801e78a:	f10e 0e03 	add.w	lr, lr, #3
 801e78e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801e790:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e794:	441a      	add	r2, r3
 801e796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e798:	9225      	str	r2, [sp, #148]	; 0x94
 801e79a:	441d      	add	r5, r3
 801e79c:	e65a      	b.n	801e454 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	f43f aef7 	beq.w	801e592 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e7a4:	5c79      	ldrb	r1, [r7, r1]
 801e7a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e7aa:	9109      	str	r1, [sp, #36]	; 0x24
 801e7ac:	0e09      	lsrs	r1, r1, #24
 801e7ae:	9111      	str	r1, [sp, #68]	; 0x44
 801e7b0:	e6ef      	b.n	801e592 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801e7b2:	b01b      	add	sp, #108	; 0x6c
 801e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801e7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7bc:	b08d      	sub	sp, #52	; 0x34
 801e7be:	468b      	mov	fp, r1
 801e7c0:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801e7c4:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801e7c8:	fb0c 5703 	mla	r7, ip, r3, r5
 801e7cc:	f1bc 0f00 	cmp.w	ip, #0
 801e7d0:	910b      	str	r1, [sp, #44]	; 0x2c
 801e7d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801e7d6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801e7da:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801e7de:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801e7e2:	eb02 0607 	add.w	r6, r2, r7
 801e7e6:	f89b 4000 	ldrb.w	r4, [fp]
 801e7ea:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801e7ee:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801e7f2:	f2c0 80c1 	blt.w	801e978 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e7f6:	45e6      	cmp	lr, ip
 801e7f8:	f340 80be 	ble.w	801e978 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801e7fc:	2d00      	cmp	r5, #0
 801e7fe:	f2c0 80b7 	blt.w	801e970 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e802:	42ab      	cmp	r3, r5
 801e804:	f340 80b4 	ble.w	801e970 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801e808:	5dd2      	ldrb	r2, [r2, r7]
 801e80a:	9205      	str	r2, [sp, #20]
 801e80c:	7872      	ldrb	r2, [r6, #1]
 801e80e:	9206      	str	r2, [sp, #24]
 801e810:	78b2      	ldrb	r2, [r6, #2]
 801e812:	9207      	str	r2, [sp, #28]
 801e814:	1c6a      	adds	r2, r5, #1
 801e816:	f100 80b6 	bmi.w	801e986 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e81a:	4293      	cmp	r3, r2
 801e81c:	f340 80b3 	ble.w	801e986 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e820:	f1b8 0f00 	cmp.w	r8, #0
 801e824:	f000 80af 	beq.w	801e986 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801e828:	78f2      	ldrb	r2, [r6, #3]
 801e82a:	9201      	str	r2, [sp, #4]
 801e82c:	7932      	ldrb	r2, [r6, #4]
 801e82e:	9202      	str	r2, [sp, #8]
 801e830:	7972      	ldrb	r2, [r6, #5]
 801e832:	9203      	str	r2, [sp, #12]
 801e834:	f11c 0c01 	adds.w	ip, ip, #1
 801e838:	f100 80ad 	bmi.w	801e996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e83c:	45e6      	cmp	lr, ip
 801e83e:	f340 80aa 	ble.w	801e996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e842:	f1ba 0f00 	cmp.w	sl, #0
 801e846:	f000 80a6 	beq.w	801e996 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801e84a:	2d00      	cmp	r5, #0
 801e84c:	f2c0 809f 	blt.w	801e98e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e850:	42ab      	cmp	r3, r5
 801e852:	f340 809c 	ble.w	801e98e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801e856:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801e85a:	f816 9002 	ldrb.w	r9, [r6, r2]
 801e85e:	2203      	movs	r2, #3
 801e860:	fb03 6c02 	mla	ip, r3, r2, r6
 801e864:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801e868:	f89c e002 	ldrb.w	lr, [ip, #2]
 801e86c:	9704      	str	r7, [sp, #16]
 801e86e:	3501      	adds	r5, #1
 801e870:	f100 8098 	bmi.w	801e9a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e874:	42ab      	cmp	r3, r5
 801e876:	f340 8095 	ble.w	801e9a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e87a:	f1b8 0f00 	cmp.w	r8, #0
 801e87e:	f000 8091 	beq.w	801e9a4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801e882:	f04f 0c03 	mov.w	ip, #3
 801e886:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801e88a:	5cb5      	ldrb	r5, [r6, r2]
 801e88c:	fb03 620c 	mla	r2, r3, ip, r6
 801e890:	fb03 630c 	mla	r3, r3, ip, r6
 801e894:	7912      	ldrb	r2, [r2, #4]
 801e896:	795e      	ldrb	r6, [r3, #5]
 801e898:	fa1f f388 	uxth.w	r3, r8
 801e89c:	fa1f fc8a 	uxth.w	ip, sl
 801e8a0:	fb03 f70c 	mul.w	r7, r3, ip
 801e8a4:	011b      	lsls	r3, r3, #4
 801e8a6:	9708      	str	r7, [sp, #32]
 801e8a8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801e8ac:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801e8b0:	1bdb      	subs	r3, r3, r7
 801e8b2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801e8b6:	fa1f fc8c 	uxth.w	ip, ip
 801e8ba:	b29b      	uxth	r3, r3
 801e8bc:	9709      	str	r7, [sp, #36]	; 0x24
 801e8be:	ebaa 0a0c 	sub.w	sl, sl, ip
 801e8c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e8c4:	930a      	str	r3, [sp, #40]	; 0x28
 801e8c6:	fa1f fa8a 	uxth.w	sl, sl
 801e8ca:	ea6f 0807 	mvn.w	r8, r7
 801e8ce:	9f01      	ldr	r7, [sp, #4]
 801e8d0:	435f      	muls	r7, r3
 801e8d2:	9b05      	ldr	r3, [sp, #20]
 801e8d4:	fa5f f888 	uxtb.w	r8, r8
 801e8d8:	fb0a 7703 	mla	r7, sl, r3, r7
 801e8dc:	9b08      	ldr	r3, [sp, #32]
 801e8de:	fb14 f408 	smulbb	r4, r4, r8
 801e8e2:	fb0c 7709 	mla	r7, ip, r9, r7
 801e8e6:	fb10 f008 	smulbb	r0, r0, r8
 801e8ea:	fb11 f108 	smulbb	r1, r1, r8
 801e8ee:	fb03 7705 	mla	r7, r3, r5, r7
 801e8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8f4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801e8f8:	fb07 4703 	mla	r7, r7, r3, r4
 801e8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8fe:	b2bf      	uxth	r7, r7
 801e900:	1c7c      	adds	r4, r7, #1
 801e902:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801e906:	1224      	asrs	r4, r4, #8
 801e908:	f88b 4000 	strb.w	r4, [fp]
 801e90c:	9c02      	ldr	r4, [sp, #8]
 801e90e:	435c      	muls	r4, r3
 801e910:	9b06      	ldr	r3, [sp, #24]
 801e912:	fb0a 4403 	mla	r4, sl, r3, r4
 801e916:	9b04      	ldr	r3, [sp, #16]
 801e918:	fb0c 4403 	mla	r4, ip, r3, r4
 801e91c:	9b08      	ldr	r3, [sp, #32]
 801e91e:	fb03 4402 	mla	r4, r3, r2, r4
 801e922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e926:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e92a:	fb04 0403 	mla	r4, r4, r3, r0
 801e92e:	9b03      	ldr	r3, [sp, #12]
 801e930:	435a      	muls	r2, r3
 801e932:	b2a4      	uxth	r4, r4
 801e934:	4613      	mov	r3, r2
 801e936:	9a07      	ldr	r2, [sp, #28]
 801e938:	1c60      	adds	r0, r4, #1
 801e93a:	fb0a 3a02 	mla	sl, sl, r2, r3
 801e93e:	9b08      	ldr	r3, [sp, #32]
 801e940:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801e944:	fb0c ac0e 	mla	ip, ip, lr, sl
 801e948:	1224      	asrs	r4, r4, #8
 801e94a:	fb03 c606 	mla	r6, r3, r6, ip
 801e94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e950:	f88b 4001 	strb.w	r4, [fp, #1]
 801e954:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e958:	fb06 1103 	mla	r1, r6, r3, r1
 801e95c:	b289      	uxth	r1, r1
 801e95e:	1c4e      	adds	r6, r1, #1
 801e960:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801e964:	1209      	asrs	r1, r1, #8
 801e966:	f88b 1002 	strb.w	r1, [fp, #2]
 801e96a:	b00d      	add	sp, #52	; 0x34
 801e96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e970:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e974:	9405      	str	r4, [sp, #20]
 801e976:	e74d      	b.n	801e814 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801e978:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e97c:	9401      	str	r4, [sp, #4]
 801e97e:	9405      	str	r4, [sp, #20]
 801e980:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e984:	e756      	b.n	801e834 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e98a:	9401      	str	r4, [sp, #4]
 801e98c:	e752      	b.n	801e834 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801e98e:	468e      	mov	lr, r1
 801e990:	9004      	str	r0, [sp, #16]
 801e992:	46a1      	mov	r9, r4
 801e994:	e76b      	b.n	801e86e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801e996:	460e      	mov	r6, r1
 801e998:	4602      	mov	r2, r0
 801e99a:	4625      	mov	r5, r4
 801e99c:	468e      	mov	lr, r1
 801e99e:	9004      	str	r0, [sp, #16]
 801e9a0:	46a1      	mov	r9, r4
 801e9a2:	e779      	b.n	801e898 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801e9a4:	460e      	mov	r6, r1
 801e9a6:	4602      	mov	r2, r0
 801e9a8:	4625      	mov	r5, r4
 801e9aa:	e775      	b.n	801e898 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801e9ac <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9b0:	b09f      	sub	sp, #124	; 0x7c
 801e9b2:	920e      	str	r2, [sp, #56]	; 0x38
 801e9b4:	9307      	str	r3, [sp, #28]
 801e9b6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e9b8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801e9bc:	901d      	str	r0, [sp, #116]	; 0x74
 801e9be:	930c      	str	r3, [sp, #48]	; 0x30
 801e9c0:	6850      	ldr	r0, [r2, #4]
 801e9c2:	910b      	str	r1, [sp, #44]	; 0x2c
 801e9c4:	6812      	ldr	r2, [r2, #0]
 801e9c6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e9ca:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801e9ce:	fb00 1303 	mla	r3, r0, r3, r1
 801e9d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9d6:	18d3      	adds	r3, r2, r3
 801e9d8:	9308      	str	r3, [sp, #32]
 801e9da:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	930a      	str	r3, [sp, #40]	; 0x28
 801e9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e9e2:	43db      	mvns	r3, r3
 801e9e4:	b2db      	uxtb	r3, r3
 801e9e6:	9309      	str	r3, [sp, #36]	; 0x24
 801e9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	dc03      	bgt.n	801e9f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e9ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9f0:	2b00      	cmp	r3, #0
 801e9f2:	f340 81f5 	ble.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801e9f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e9f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e9fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ea00:	1e48      	subs	r0, r1, #1
 801ea02:	1e54      	subs	r4, r2, #1
 801ea04:	9b07      	ldr	r3, [sp, #28]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	f340 80d5 	ble.w	801ebb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801ea0c:	ea5f 452a 	movs.w	r5, sl, asr #16
 801ea10:	ea4f 4328 	mov.w	r3, r8, asr #16
 801ea14:	d406      	bmi.n	801ea24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea16:	4285      	cmp	r5, r0
 801ea18:	da04      	bge.n	801ea24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	db02      	blt.n	801ea24 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ea1e:	42a3      	cmp	r3, r4
 801ea20:	f2c0 80ca 	blt.w	801ebb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ea24:	3501      	adds	r5, #1
 801ea26:	f100 80bb 	bmi.w	801eba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ea2a:	42a9      	cmp	r1, r5
 801ea2c:	f2c0 80b8 	blt.w	801eba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ea30:	3301      	adds	r3, #1
 801ea32:	f100 80b5 	bmi.w	801eba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ea36:	429a      	cmp	r2, r3
 801ea38:	f2c0 80b2 	blt.w	801eba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801ea3c:	9b07      	ldr	r3, [sp, #28]
 801ea3e:	9d08      	ldr	r5, [sp, #32]
 801ea40:	930d      	str	r3, [sp, #52]	; 0x34
 801ea42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	f340 80d6 	ble.w	801ebf6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801ea4a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801ea4c:	ea4f 4428 	mov.w	r4, r8, asr #16
 801ea50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ea52:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801ea56:	68c6      	ldr	r6, [r0, #12]
 801ea58:	ea5f 402a 	movs.w	r0, sl, asr #16
 801ea5c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801ea60:	689b      	ldr	r3, [r3, #8]
 801ea62:	f100 810f 	bmi.w	801ec84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ea66:	1e5f      	subs	r7, r3, #1
 801ea68:	42b8      	cmp	r0, r7
 801ea6a:	f280 810b 	bge.w	801ec84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ea6e:	2c00      	cmp	r4, #0
 801ea70:	f2c0 8108 	blt.w	801ec84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ea74:	1e77      	subs	r7, r6, #1
 801ea76:	42bc      	cmp	r4, r7
 801ea78:	f280 8104 	bge.w	801ec84 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ea7c:	b21b      	sxth	r3, r3
 801ea7e:	fb04 0003 	mla	r0, r4, r3, r0
 801ea82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ea84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea88:	1826      	adds	r6, r4, r0
 801ea8a:	5c24      	ldrb	r4, [r4, r0]
 801ea8c:	78b7      	ldrb	r7, [r6, #2]
 801ea8e:	7870      	ldrb	r0, [r6, #1]
 801ea90:	970f      	str	r7, [sp, #60]	; 0x3c
 801ea92:	7977      	ldrb	r7, [r6, #5]
 801ea94:	f896 e003 	ldrb.w	lr, [r6, #3]
 801ea98:	f896 c004 	ldrb.w	ip, [r6, #4]
 801ea9c:	9710      	str	r7, [sp, #64]	; 0x40
 801ea9e:	b1c9      	cbz	r1, 801ead4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eaa0:	f04f 0b03 	mov.w	fp, #3
 801eaa4:	f06f 0904 	mvn.w	r9, #4
 801eaa8:	3605      	adds	r6, #5
 801eaaa:	fb13 930b 	smlabb	r3, r3, fp, r9
 801eaae:	eb06 0b03 	add.w	fp, r6, r3
 801eab2:	5cf3      	ldrb	r3, [r6, r3]
 801eab4:	9311      	str	r3, [sp, #68]	; 0x44
 801eab6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801eaba:	9313      	str	r3, [sp, #76]	; 0x4c
 801eabc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801eac0:	9315      	str	r3, [sp, #84]	; 0x54
 801eac2:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801eac6:	9312      	str	r3, [sp, #72]	; 0x48
 801eac8:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801eacc:	9314      	str	r3, [sp, #80]	; 0x50
 801eace:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801ead2:	9316      	str	r3, [sp, #88]	; 0x58
 801ead4:	b292      	uxth	r2, r2
 801ead6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801ead8:	b289      	uxth	r1, r1
 801eada:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801eade:	fb02 f601 	mul.w	r6, r2, r1
 801eae2:	0112      	lsls	r2, r2, #4
 801eae4:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801eae8:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801eaec:	1b92      	subs	r2, r2, r6
 801eaee:	b289      	uxth	r1, r1
 801eaf0:	b292      	uxth	r2, r2
 801eaf2:	eba9 0901 	sub.w	r9, r9, r1
 801eaf6:	fb02 fe0e 	mul.w	lr, r2, lr
 801eafa:	fa1f f989 	uxth.w	r9, r9
 801eafe:	fb02 fc0c 	mul.w	ip, r2, ip
 801eb02:	fb09 e404 	mla	r4, r9, r4, lr
 801eb06:	f895 e000 	ldrb.w	lr, [r5]
 801eb0a:	fb09 c000 	mla	r0, r9, r0, ip
 801eb0e:	fb01 4407 	mla	r4, r1, r7, r4
 801eb12:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801eb14:	fb06 4407 	mla	r4, r6, r7, r4
 801eb18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801eb1a:	fb1e fe07 	smulbb	lr, lr, r7
 801eb1e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801eb22:	fb04 e403 	mla	r4, r4, r3, lr
 801eb26:	b2a4      	uxth	r4, r4
 801eb28:	f104 0e01 	add.w	lr, r4, #1
 801eb2c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801eb30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb32:	fb01 0004 	mla	r0, r1, r4, r0
 801eb36:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801eb38:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801eb3c:	fb06 0004 	mla	r0, r6, r4, r0
 801eb40:	786c      	ldrb	r4, [r5, #1]
 801eb42:	f885 e000 	strb.w	lr, [r5]
 801eb46:	fb14 f407 	smulbb	r4, r4, r7
 801eb4a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eb4e:	fb00 4003 	mla	r0, r0, r3, r4
 801eb52:	b280      	uxth	r0, r0
 801eb54:	1c44      	adds	r4, r0, #1
 801eb56:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801eb5a:	1200      	asrs	r0, r0, #8
 801eb5c:	7068      	strb	r0, [r5, #1]
 801eb5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801eb60:	4342      	muls	r2, r0
 801eb62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eb64:	fb09 2200 	mla	r2, r9, r0, r2
 801eb68:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eb6a:	fb01 2100 	mla	r1, r1, r0, r2
 801eb6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801eb70:	fb06 1602 	mla	r6, r6, r2, r1
 801eb74:	78a9      	ldrb	r1, [r5, #2]
 801eb76:	fb11 f107 	smulbb	r1, r1, r7
 801eb7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801eb7e:	fb06 1303 	mla	r3, r6, r3, r1
 801eb82:	b29b      	uxth	r3, r3
 801eb84:	1c5e      	adds	r6, r3, #1
 801eb86:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801eb8a:	121b      	asrs	r3, r3, #8
 801eb8c:	70ab      	strb	r3, [r5, #2]
 801eb8e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801eb90:	3503      	adds	r5, #3
 801eb92:	449a      	add	sl, r3
 801eb94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb96:	4498      	add	r8, r3
 801eb98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb9a:	3b01      	subs	r3, #1
 801eb9c:	930d      	str	r3, [sp, #52]	; 0x34
 801eb9e:	e750      	b.n	801ea42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801eba0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801eba2:	449a      	add	sl, r3
 801eba4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eba6:	4498      	add	r8, r3
 801eba8:	9b07      	ldr	r3, [sp, #28]
 801ebaa:	3b01      	subs	r3, #1
 801ebac:	9307      	str	r3, [sp, #28]
 801ebae:	9b08      	ldr	r3, [sp, #32]
 801ebb0:	3303      	adds	r3, #3
 801ebb2:	9308      	str	r3, [sp, #32]
 801ebb4:	e726      	b.n	801ea04 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ebb6:	d026      	beq.n	801ec06 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801ebb8:	9b07      	ldr	r3, [sp, #28]
 801ebba:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ebbc:	3b01      	subs	r3, #1
 801ebbe:	fb00 a003 	mla	r0, r0, r3, sl
 801ebc2:	1400      	asrs	r0, r0, #16
 801ebc4:	f53f af3a 	bmi.w	801ea3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ebc8:	3901      	subs	r1, #1
 801ebca:	4288      	cmp	r0, r1
 801ebcc:	f6bf af36 	bge.w	801ea3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ebd0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ebd2:	fb01 8303 	mla	r3, r1, r3, r8
 801ebd6:	141b      	asrs	r3, r3, #16
 801ebd8:	f53f af30 	bmi.w	801ea3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ebdc:	3a01      	subs	r2, #1
 801ebde:	4293      	cmp	r3, r2
 801ebe0:	f6bf af2c 	bge.w	801ea3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ebe4:	9b08      	ldr	r3, [sp, #32]
 801ebe6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ebea:	1cdd      	adds	r5, r3, #3
 801ebec:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801ebf0:	f1bc 0f00 	cmp.w	ip, #0
 801ebf4:	dc5f      	bgt.n	801ecb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801ebf6:	9b07      	ldr	r3, [sp, #28]
 801ebf8:	9a08      	ldr	r2, [sp, #32]
 801ebfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ebfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec02:	441a      	add	r2, r3
 801ec04:	9208      	str	r2, [sp, #32]
 801ec06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	f340 80e9 	ble.w	801ede0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801ec0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec14:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec1c:	eef0 6a62 	vmov.f32	s13, s5
 801ec20:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ec24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec2c:	ee16 aa90 	vmov	sl, s13
 801ec30:	eef0 6a43 	vmov.f32	s13, s6
 801ec34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec38:	ee16 8a90 	vmov	r8, s13
 801ec3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec44:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ec54:	ee12 2a90 	vmov	r2, s5
 801ec58:	eef0 2a47 	vmov.f32	s5, s14
 801ec5c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec60:	ee13 2a10 	vmov	r2, s6
 801ec64:	932b      	str	r3, [sp, #172]	; 0xac
 801ec66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec68:	eeb0 3a67 	vmov.f32	s6, s15
 801ec6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ec70:	932c      	str	r3, [sp, #176]	; 0xb0
 801ec72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ec74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ec76:	3b01      	subs	r3, #1
 801ec78:	930b      	str	r3, [sp, #44]	; 0x2c
 801ec7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec7c:	bf08      	it	eq
 801ec7e:	4613      	moveq	r3, r2
 801ec80:	9307      	str	r3, [sp, #28]
 801ec82:	e6b1      	b.n	801e9e8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ec84:	1c47      	adds	r7, r0, #1
 801ec86:	d482      	bmi.n	801eb8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec88:	42bb      	cmp	r3, r7
 801ec8a:	db80      	blt.n	801eb8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec8c:	1c67      	adds	r7, r4, #1
 801ec8e:	f53f af7e 	bmi.w	801eb8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec92:	42be      	cmp	r6, r7
 801ec94:	f6ff af7b 	blt.w	801eb8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ec98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801ec9a:	b236      	sxth	r6, r6
 801ec9c:	9001      	str	r0, [sp, #4]
 801ec9e:	b21b      	sxth	r3, r3
 801eca0:	9600      	str	r6, [sp, #0]
 801eca2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801eca4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801eca8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801ecac:	4629      	mov	r1, r5
 801ecae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ecb0:	f7ff fd82 	bl	801e7b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ecb4:	e76b      	b.n	801eb8e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ecb6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801ecb8:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ecbc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801ecc0:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801ecc4:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801ecc8:	ea4f 4128 	mov.w	r1, r8, asr #16
 801eccc:	fb07 0101 	mla	r1, r7, r1, r0
 801ecd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ecd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ecd6:	1844      	adds	r4, r0, r1
 801ecd8:	5c40      	ldrb	r0, [r0, r1]
 801ecda:	78a6      	ldrb	r6, [r4, #2]
 801ecdc:	7861      	ldrb	r1, [r4, #1]
 801ecde:	960f      	str	r6, [sp, #60]	; 0x3c
 801ece0:	78e6      	ldrb	r6, [r4, #3]
 801ece2:	910d      	str	r1, [sp, #52]	; 0x34
 801ece4:	9610      	str	r6, [sp, #64]	; 0x40
 801ece6:	f894 9004 	ldrb.w	r9, [r4, #4]
 801ecea:	f894 b005 	ldrb.w	fp, [r4, #5]
 801ecee:	b192      	cbz	r2, 801ed16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801ecf0:	f06f 0604 	mvn.w	r6, #4
 801ecf4:	2103      	movs	r1, #3
 801ecf6:	3405      	adds	r4, #5
 801ecf8:	fb17 6701 	smlabb	r7, r7, r1, r6
 801ecfc:	19e6      	adds	r6, r4, r7
 801ecfe:	5de4      	ldrb	r4, [r4, r7]
 801ed00:	9417      	str	r4, [sp, #92]	; 0x5c
 801ed02:	7874      	ldrb	r4, [r6, #1]
 801ed04:	9419      	str	r4, [sp, #100]	; 0x64
 801ed06:	78b4      	ldrb	r4, [r6, #2]
 801ed08:	941b      	str	r4, [sp, #108]	; 0x6c
 801ed0a:	78f4      	ldrb	r4, [r6, #3]
 801ed0c:	9418      	str	r4, [sp, #96]	; 0x60
 801ed0e:	7934      	ldrb	r4, [r6, #4]
 801ed10:	941a      	str	r4, [sp, #104]	; 0x68
 801ed12:	7974      	ldrb	r4, [r6, #5]
 801ed14:	941c      	str	r4, [sp, #112]	; 0x70
 801ed16:	b29b      	uxth	r3, r3
 801ed18:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ed1a:	b292      	uxth	r2, r2
 801ed1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed1e:	3503      	adds	r5, #3
 801ed20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ed24:	fb03 f402 	mul.w	r4, r3, r2
 801ed28:	011b      	lsls	r3, r3, #4
 801ed2a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801ed2e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801ed32:	1b1b      	subs	r3, r3, r4
 801ed34:	b292      	uxth	r2, r2
 801ed36:	b29b      	uxth	r3, r3
 801ed38:	1ab6      	subs	r6, r6, r2
 801ed3a:	435f      	muls	r7, r3
 801ed3c:	b2b6      	uxth	r6, r6
 801ed3e:	fb03 f909 	mul.w	r9, r3, r9
 801ed42:	fb03 fb0b 	mul.w	fp, r3, fp
 801ed46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed48:	fb06 7000 	mla	r0, r6, r0, r7
 801ed4c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801ed4e:	fb06 bb03 	mla	fp, r6, r3, fp
 801ed52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ed54:	fb02 0007 	mla	r0, r2, r7, r0
 801ed58:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801ed5a:	fb02 bb03 	mla	fp, r2, r3, fp
 801ed5e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ed60:	fb04 0007 	mla	r0, r4, r7, r0
 801ed64:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801ed68:	fb17 f701 	smulbb	r7, r7, r1
 801ed6c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ed70:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ed72:	fb00 700e 	mla	r0, r0, lr, r7
 801ed76:	fb06 9101 	mla	r1, r6, r1, r9
 801ed7a:	b280      	uxth	r0, r0
 801ed7c:	1c47      	adds	r7, r0, #1
 801ed7e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801ed82:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ed84:	1200      	asrs	r0, r0, #8
 801ed86:	f805 0c06 	strb.w	r0, [r5, #-6]
 801ed8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ed8c:	fb02 1100 	mla	r1, r2, r0, r1
 801ed90:	981a      	ldr	r0, [sp, #104]	; 0x68
 801ed92:	fb04 1100 	mla	r1, r4, r0, r1
 801ed96:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801ed9a:	fb04 b403 	mla	r4, r4, r3, fp
 801ed9e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801eda2:	fb10 f007 	smulbb	r0, r0, r7
 801eda6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801edaa:	fb13 f307 	smulbb	r3, r3, r7
 801edae:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801edb2:	fb01 010e 	mla	r1, r1, lr, r0
 801edb6:	fb04 340e 	mla	r4, r4, lr, r3
 801edba:	b289      	uxth	r1, r1
 801edbc:	b2a4      	uxth	r4, r4
 801edbe:	1c48      	adds	r0, r1, #1
 801edc0:	1c63      	adds	r3, r4, #1
 801edc2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801edc6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801edca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801edcc:	1209      	asrs	r1, r1, #8
 801edce:	1224      	asrs	r4, r4, #8
 801edd0:	449a      	add	sl, r3
 801edd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801edd4:	f805 1c05 	strb.w	r1, [r5, #-5]
 801edd8:	f805 4c04 	strb.w	r4, [r5, #-4]
 801eddc:	4498      	add	r8, r3
 801edde:	e707      	b.n	801ebf0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ede0:	b01f      	add	sp, #124	; 0x7c
 801ede2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ede6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801ede6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edea:	b087      	sub	sp, #28
 801edec:	780d      	ldrb	r5, [r1, #0]
 801edee:	784c      	ldrb	r4, [r1, #1]
 801edf0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801edf4:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801edf8:	9004      	str	r0, [sp, #16]
 801edfa:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801edfe:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801ee02:	9005      	str	r0, [sp, #20]
 801ee04:	fb06 bc03 	mla	ip, r6, r3, fp
 801ee08:	2e00      	cmp	r6, #0
 801ee0a:	7888      	ldrb	r0, [r1, #2]
 801ee0c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ee10:	eb02 090c 	add.w	r9, r2, ip
 801ee14:	f2c0 8084 	blt.w	801ef20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ee18:	42b7      	cmp	r7, r6
 801ee1a:	f340 8081 	ble.w	801ef20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ee1e:	f1bb 0f00 	cmp.w	fp, #0
 801ee22:	db79      	blt.n	801ef18 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ee24:	455b      	cmp	r3, fp
 801ee26:	dd77      	ble.n	801ef18 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ee28:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ee2c:	9201      	str	r2, [sp, #4]
 801ee2e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ee32:	9202      	str	r2, [sp, #8]
 801ee34:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ee38:	9203      	str	r2, [sp, #12]
 801ee3a:	f11b 0201 	adds.w	r2, fp, #1
 801ee3e:	d476      	bmi.n	801ef2e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ee40:	4293      	cmp	r3, r2
 801ee42:	dd74      	ble.n	801ef2e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ee44:	9a04      	ldr	r2, [sp, #16]
 801ee46:	2a00      	cmp	r2, #0
 801ee48:	d071      	beq.n	801ef2e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ee4a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801ee4e:	f899 c004 	ldrb.w	ip, [r9, #4]
 801ee52:	f899 a005 	ldrb.w	sl, [r9, #5]
 801ee56:	3601      	adds	r6, #1
 801ee58:	d471      	bmi.n	801ef3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ee5a:	42b7      	cmp	r7, r6
 801ee5c:	dd6f      	ble.n	801ef3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ee5e:	9a05      	ldr	r2, [sp, #20]
 801ee60:	2a00      	cmp	r2, #0
 801ee62:	d06c      	beq.n	801ef3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ee64:	f1bb 0f00 	cmp.w	fp, #0
 801ee68:	db65      	blt.n	801ef36 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ee6a:	455b      	cmp	r3, fp
 801ee6c:	dd63      	ble.n	801ef36 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ee6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ee72:	f819 e002 	ldrb.w	lr, [r9, r2]
 801ee76:	2203      	movs	r2, #3
 801ee78:	fb03 9602 	mla	r6, r3, r2, r9
 801ee7c:	7877      	ldrb	r7, [r6, #1]
 801ee7e:	78b6      	ldrb	r6, [r6, #2]
 801ee80:	f11b 0b01 	adds.w	fp, fp, #1
 801ee84:	d40c      	bmi.n	801eea0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ee86:	455b      	cmp	r3, fp
 801ee88:	dd0a      	ble.n	801eea0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ee8a:	9a04      	ldr	r2, [sp, #16]
 801ee8c:	b142      	cbz	r2, 801eea0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ee8e:	2203      	movs	r2, #3
 801ee90:	fb13 2002 	smlabb	r0, r3, r2, r2
 801ee94:	f819 5000 	ldrb.w	r5, [r9, r0]
 801ee98:	fb03 9002 	mla	r0, r3, r2, r9
 801ee9c:	7904      	ldrb	r4, [r0, #4]
 801ee9e:	7940      	ldrb	r0, [r0, #5]
 801eea0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801eea4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801eea8:	fb03 fb02 	mul.w	fp, r3, r2
 801eeac:	011b      	lsls	r3, r3, #4
 801eeae:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801eeb2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801eeb6:	eba3 030b 	sub.w	r3, r3, fp
 801eeba:	b292      	uxth	r2, r2
 801eebc:	b29b      	uxth	r3, r3
 801eebe:	eba9 0902 	sub.w	r9, r9, r2
 801eec2:	9304      	str	r3, [sp, #16]
 801eec4:	fa1f f989 	uxth.w	r9, r9
 801eec8:	fb03 f808 	mul.w	r8, r3, r8
 801eecc:	9b01      	ldr	r3, [sp, #4]
 801eece:	fb09 8803 	mla	r8, r9, r3, r8
 801eed2:	9b04      	ldr	r3, [sp, #16]
 801eed4:	fb03 fc0c 	mul.w	ip, r3, ip
 801eed8:	9b02      	ldr	r3, [sp, #8]
 801eeda:	fb02 880e 	mla	r8, r2, lr, r8
 801eede:	fb09 cc03 	mla	ip, r9, r3, ip
 801eee2:	9b04      	ldr	r3, [sp, #16]
 801eee4:	fb0b 8805 	mla	r8, fp, r5, r8
 801eee8:	fb02 c707 	mla	r7, r2, r7, ip
 801eeec:	fb03 f30a 	mul.w	r3, r3, sl
 801eef0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801eef4:	fb0b 7404 	mla	r4, fp, r4, r7
 801eef8:	f881 8000 	strb.w	r8, [r1]
 801eefc:	1224      	asrs	r4, r4, #8
 801eefe:	704c      	strb	r4, [r1, #1]
 801ef00:	9c03      	ldr	r4, [sp, #12]
 801ef02:	fb09 3904 	mla	r9, r9, r4, r3
 801ef06:	fb02 9206 	mla	r2, r2, r6, r9
 801ef0a:	fb0b 2000 	mla	r0, fp, r0, r2
 801ef0e:	1200      	asrs	r0, r0, #8
 801ef10:	7088      	strb	r0, [r1, #2]
 801ef12:	b007      	add	sp, #28
 801ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef18:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ef1c:	9501      	str	r5, [sp, #4]
 801ef1e:	e78c      	b.n	801ee3a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801ef20:	4682      	mov	sl, r0
 801ef22:	46a4      	mov	ip, r4
 801ef24:	46a8      	mov	r8, r5
 801ef26:	9501      	str	r5, [sp, #4]
 801ef28:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ef2c:	e793      	b.n	801ee56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ef2e:	4682      	mov	sl, r0
 801ef30:	46a4      	mov	ip, r4
 801ef32:	46a8      	mov	r8, r5
 801ef34:	e78f      	b.n	801ee56 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ef36:	4606      	mov	r6, r0
 801ef38:	4627      	mov	r7, r4
 801ef3a:	46ae      	mov	lr, r5
 801ef3c:	e7a0      	b.n	801ee80 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801ef3e:	4606      	mov	r6, r0
 801ef40:	4627      	mov	r7, r4
 801ef42:	46ae      	mov	lr, r5
 801ef44:	e7ac      	b.n	801eea0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801ef46 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef4a:	b09b      	sub	sp, #108	; 0x6c
 801ef4c:	920b      	str	r2, [sp, #44]	; 0x2c
 801ef4e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ef50:	9019      	str	r0, [sp, #100]	; 0x64
 801ef52:	9109      	str	r1, [sp, #36]	; 0x24
 801ef54:	6850      	ldr	r0, [r2, #4]
 801ef56:	9306      	str	r3, [sp, #24]
 801ef58:	6812      	ldr	r2, [r2, #0]
 801ef5a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ef5e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801ef62:	fb00 1303 	mla	r3, r0, r3, r1
 801ef66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ef6a:	18d3      	adds	r3, r2, r3
 801ef6c:	9307      	str	r3, [sp, #28]
 801ef6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef70:	681b      	ldr	r3, [r3, #0]
 801ef72:	9308      	str	r3, [sp, #32]
 801ef74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ef76:	2b00      	cmp	r3, #0
 801ef78:	dc03      	bgt.n	801ef82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ef7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	f340 81ab 	ble.w	801f2d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ef82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ef84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef8c:	1e48      	subs	r0, r1, #1
 801ef8e:	1e55      	subs	r5, r2, #1
 801ef90:	9b06      	ldr	r3, [sp, #24]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	f340 80b1 	ble.w	801f0fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ef98:	ea5f 462b 	movs.w	r6, fp, asr #16
 801ef9c:	ea4f 4324 	mov.w	r3, r4, asr #16
 801efa0:	d406      	bmi.n	801efb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efa2:	4286      	cmp	r6, r0
 801efa4:	da04      	bge.n	801efb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	db02      	blt.n	801efb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801efaa:	42ab      	cmp	r3, r5
 801efac:	f2c0 80a6 	blt.w	801f0fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801efb0:	3601      	adds	r6, #1
 801efb2:	f100 8097 	bmi.w	801f0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801efb6:	42b1      	cmp	r1, r6
 801efb8:	f2c0 8094 	blt.w	801f0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801efbc:	3301      	adds	r3, #1
 801efbe:	f100 8091 	bmi.w	801f0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801efc2:	429a      	cmp	r2, r3
 801efc4:	f2c0 808e 	blt.w	801f0e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801efc8:	9b06      	ldr	r3, [sp, #24]
 801efca:	9e07      	ldr	r6, [sp, #28]
 801efcc:	930a      	str	r3, [sp, #40]	; 0x28
 801efce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	f340 80b0 	ble.w	801f136 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801efd6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801efd8:	1425      	asrs	r5, r4, #16
 801efda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801efdc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801efe0:	68c7      	ldr	r7, [r0, #12]
 801efe2:	ea5f 402b 	movs.w	r0, fp, asr #16
 801efe6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801efea:	689b      	ldr	r3, [r3, #8]
 801efec:	f100 80ea 	bmi.w	801f1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801eff0:	f103 3cff 	add.w	ip, r3, #4294967295
 801eff4:	4560      	cmp	r0, ip
 801eff6:	f280 80e5 	bge.w	801f1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801effa:	2d00      	cmp	r5, #0
 801effc:	f2c0 80e2 	blt.w	801f1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f000:	f107 3cff 	add.w	ip, r7, #4294967295
 801f004:	4565      	cmp	r5, ip
 801f006:	f280 80dd 	bge.w	801f1c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801f00a:	b21b      	sxth	r3, r3
 801f00c:	fb05 0003 	mla	r0, r5, r3, r0
 801f010:	9d08      	ldr	r5, [sp, #32]
 801f012:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f016:	182f      	adds	r7, r5, r0
 801f018:	5c2d      	ldrb	r5, [r5, r0]
 801f01a:	7878      	ldrb	r0, [r7, #1]
 801f01c:	f897 e002 	ldrb.w	lr, [r7, #2]
 801f020:	900c      	str	r0, [sp, #48]	; 0x30
 801f022:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f026:	f897 8004 	ldrb.w	r8, [r7, #4]
 801f02a:	f897 a005 	ldrb.w	sl, [r7, #5]
 801f02e:	b1c9      	cbz	r1, 801f064 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801f030:	f04f 0c03 	mov.w	ip, #3
 801f034:	f06f 0004 	mvn.w	r0, #4
 801f038:	3705      	adds	r7, #5
 801f03a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801f03e:	eb07 0c03 	add.w	ip, r7, r3
 801f042:	5cfb      	ldrb	r3, [r7, r3]
 801f044:	930d      	str	r3, [sp, #52]	; 0x34
 801f046:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801f04a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f04c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801f050:	9311      	str	r3, [sp, #68]	; 0x44
 801f052:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801f056:	930e      	str	r3, [sp, #56]	; 0x38
 801f058:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801f05c:	9310      	str	r3, [sp, #64]	; 0x40
 801f05e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801f062:	9312      	str	r3, [sp, #72]	; 0x48
 801f064:	b292      	uxth	r2, r2
 801f066:	980c      	ldr	r0, [sp, #48]	; 0x30
 801f068:	b289      	uxth	r1, r1
 801f06a:	fb02 f301 	mul.w	r3, r2, r1
 801f06e:	0112      	lsls	r2, r2, #4
 801f070:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f074:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801f078:	1ad2      	subs	r2, r2, r3
 801f07a:	b289      	uxth	r1, r1
 801f07c:	b292      	uxth	r2, r2
 801f07e:	1a7f      	subs	r7, r7, r1
 801f080:	fb02 f909 	mul.w	r9, r2, r9
 801f084:	b2bf      	uxth	r7, r7
 801f086:	fb02 f808 	mul.w	r8, r2, r8
 801f08a:	fb02 fa0a 	mul.w	sl, r2, sl
 801f08e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f090:	fb07 9905 	mla	r9, r7, r5, r9
 801f094:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801f096:	fb07 8800 	mla	r8, r7, r0, r8
 801f09a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f09c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f0a0:	fb01 9905 	mla	r9, r1, r5, r9
 801f0a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801f0a6:	fb01 8800 	mla	r8, r1, r0, r8
 801f0aa:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f0ac:	fb01 a102 	mla	r1, r1, r2, sl
 801f0b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0b2:	fb03 9905 	mla	r9, r3, r5, r9
 801f0b6:	fb03 8800 	mla	r8, r3, r0, r8
 801f0ba:	fb03 1302 	mla	r3, r3, r2, r1
 801f0be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f0c2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801f0c6:	121b      	asrs	r3, r3, #8
 801f0c8:	f886 9000 	strb.w	r9, [r6]
 801f0cc:	f886 8001 	strb.w	r8, [r6, #1]
 801f0d0:	70b3      	strb	r3, [r6, #2]
 801f0d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f0d4:	3603      	adds	r6, #3
 801f0d6:	449b      	add	fp, r3
 801f0d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f0da:	441c      	add	r4, r3
 801f0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f0de:	3b01      	subs	r3, #1
 801f0e0:	930a      	str	r3, [sp, #40]	; 0x28
 801f0e2:	e774      	b.n	801efce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801f0e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f0e6:	449b      	add	fp, r3
 801f0e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f0ea:	441c      	add	r4, r3
 801f0ec:	9b06      	ldr	r3, [sp, #24]
 801f0ee:	3b01      	subs	r3, #1
 801f0f0:	9306      	str	r3, [sp, #24]
 801f0f2:	9b07      	ldr	r3, [sp, #28]
 801f0f4:	3303      	adds	r3, #3
 801f0f6:	9307      	str	r3, [sp, #28]
 801f0f8:	e74a      	b.n	801ef90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f0fa:	d024      	beq.n	801f146 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f0fc:	9b06      	ldr	r3, [sp, #24]
 801f0fe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801f100:	3b01      	subs	r3, #1
 801f102:	fb00 b003 	mla	r0, r0, r3, fp
 801f106:	1400      	asrs	r0, r0, #16
 801f108:	f53f af5e 	bmi.w	801efc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f10c:	3901      	subs	r1, #1
 801f10e:	4288      	cmp	r0, r1
 801f110:	f6bf af5a 	bge.w	801efc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f114:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801f116:	fb01 4303 	mla	r3, r1, r3, r4
 801f11a:	141b      	asrs	r3, r3, #16
 801f11c:	f53f af54 	bmi.w	801efc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f120:	3a01      	subs	r2, #1
 801f122:	4293      	cmp	r3, r2
 801f124:	f6bf af50 	bge.w	801efc8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f128:	9b07      	ldr	r3, [sp, #28]
 801f12a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801f12e:	1cde      	adds	r6, r3, #3
 801f130:	f1be 0f00 	cmp.w	lr, #0
 801f134:	dc5f      	bgt.n	801f1f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801f136:	9b06      	ldr	r3, [sp, #24]
 801f138:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f13c:	9b07      	ldr	r3, [sp, #28]
 801f13e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f142:	4423      	add	r3, r4
 801f144:	9307      	str	r3, [sp, #28]
 801f146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f148:	2b00      	cmp	r3, #0
 801f14a:	f340 80c5 	ble.w	801f2d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801f14e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f152:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f154:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f158:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f15c:	eef0 6a62 	vmov.f32	s13, s5
 801f160:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f164:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f168:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f16c:	ee16 ba90 	vmov	fp, s13
 801f170:	eef0 6a43 	vmov.f32	s13, s6
 801f174:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f178:	ee16 4a90 	vmov	r4, s13
 801f17c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f180:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f184:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f188:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f18c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f190:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f194:	ee12 2a90 	vmov	r2, s5
 801f198:	eef0 2a47 	vmov.f32	s5, s14
 801f19c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1a0:	ee13 2a10 	vmov	r2, s6
 801f1a4:	9327      	str	r3, [sp, #156]	; 0x9c
 801f1a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f1a8:	eeb0 3a67 	vmov.f32	s6, s15
 801f1ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801f1b0:	9328      	str	r3, [sp, #160]	; 0xa0
 801f1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1b6:	3b01      	subs	r3, #1
 801f1b8:	9309      	str	r3, [sp, #36]	; 0x24
 801f1ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f1bc:	bf08      	it	eq
 801f1be:	4613      	moveq	r3, r2
 801f1c0:	9306      	str	r3, [sp, #24]
 801f1c2:	e6d7      	b.n	801ef74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801f1c4:	f110 0c01 	adds.w	ip, r0, #1
 801f1c8:	d483      	bmi.n	801f0d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f1ca:	4563      	cmp	r3, ip
 801f1cc:	db81      	blt.n	801f0d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f1ce:	f115 0c01 	adds.w	ip, r5, #1
 801f1d2:	f53f af7e 	bmi.w	801f0d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f1d6:	4567      	cmp	r7, ip
 801f1d8:	f6ff af7b 	blt.w	801f0d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f1dc:	b23f      	sxth	r7, r7
 801f1de:	b21b      	sxth	r3, r3
 801f1e0:	9700      	str	r7, [sp, #0]
 801f1e2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801f1e6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801f1ea:	9a08      	ldr	r2, [sp, #32]
 801f1ec:	4631      	mov	r1, r6
 801f1ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 801f1f0:	f7ff fdf9 	bl	801ede6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801f1f4:	e76d      	b.n	801f0d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801f1f6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801f1f8:	ea4f 402b 	mov.w	r0, fp, asr #16
 801f1fc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801f200:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f204:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f208:	1421      	asrs	r1, r4, #16
 801f20a:	930a      	str	r3, [sp, #40]	; 0x28
 801f20c:	fb0c 0101 	mla	r1, ip, r1, r0
 801f210:	9808      	ldr	r0, [sp, #32]
 801f212:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f216:	1845      	adds	r5, r0, r1
 801f218:	5c40      	ldrb	r0, [r0, r1]
 801f21a:	796f      	ldrb	r7, [r5, #5]
 801f21c:	7869      	ldrb	r1, [r5, #1]
 801f21e:	f895 8002 	ldrb.w	r8, [r5, #2]
 801f222:	f895 a003 	ldrb.w	sl, [r5, #3]
 801f226:	f895 9004 	ldrb.w	r9, [r5, #4]
 801f22a:	970c      	str	r7, [sp, #48]	; 0x30
 801f22c:	b1a2      	cbz	r2, 801f258 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801f22e:	2703      	movs	r7, #3
 801f230:	f06f 0304 	mvn.w	r3, #4
 801f234:	3505      	adds	r5, #5
 801f236:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801f23a:	eb05 070c 	add.w	r7, r5, ip
 801f23e:	f815 500c 	ldrb.w	r5, [r5, ip]
 801f242:	9513      	str	r5, [sp, #76]	; 0x4c
 801f244:	787d      	ldrb	r5, [r7, #1]
 801f246:	9515      	str	r5, [sp, #84]	; 0x54
 801f248:	78bd      	ldrb	r5, [r7, #2]
 801f24a:	9517      	str	r5, [sp, #92]	; 0x5c
 801f24c:	78fd      	ldrb	r5, [r7, #3]
 801f24e:	9514      	str	r5, [sp, #80]	; 0x50
 801f250:	793d      	ldrb	r5, [r7, #4]
 801f252:	9516      	str	r5, [sp, #88]	; 0x58
 801f254:	797d      	ldrb	r5, [r7, #5]
 801f256:	9518      	str	r5, [sp, #96]	; 0x60
 801f258:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801f25c:	b292      	uxth	r2, r2
 801f25e:	3603      	adds	r6, #3
 801f260:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f264:	fb03 f502 	mul.w	r5, r3, r2
 801f268:	011b      	lsls	r3, r3, #4
 801f26a:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801f26e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801f272:	1b5b      	subs	r3, r3, r5
 801f274:	b292      	uxth	r2, r2
 801f276:	b29b      	uxth	r3, r3
 801f278:	1abf      	subs	r7, r7, r2
 801f27a:	fb03 f909 	mul.w	r9, r3, r9
 801f27e:	b2bf      	uxth	r7, r7
 801f280:	fb03 fa0a 	mul.w	sl, r3, sl
 801f284:	fb07 9901 	mla	r9, r7, r1, r9
 801f288:	9915      	ldr	r1, [sp, #84]	; 0x54
 801f28a:	fb07 aa00 	mla	sl, r7, r0, sl
 801f28e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f290:	fb02 9901 	mla	r9, r2, r1, r9
 801f294:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f296:	fb02 aa00 	mla	sl, r2, r0, sl
 801f29a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f29c:	fb05 9901 	mla	r9, r5, r1, r9
 801f2a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f2a2:	fb05 aa00 	mla	sl, r5, r0, sl
 801f2a6:	434b      	muls	r3, r1
 801f2a8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f2aa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f2ae:	fb07 3308 	mla	r3, r7, r8, r3
 801f2b2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f2b6:	f806 ac06 	strb.w	sl, [r6, #-6]
 801f2ba:	fb02 3201 	mla	r2, r2, r1, r3
 801f2be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f2c0:	f806 9c05 	strb.w	r9, [r6, #-5]
 801f2c4:	fb05 2503 	mla	r5, r5, r3, r2
 801f2c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801f2ca:	122d      	asrs	r5, r5, #8
 801f2cc:	449b      	add	fp, r3
 801f2ce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f2d0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801f2d4:	441c      	add	r4, r3
 801f2d6:	e72b      	b.n	801f130 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801f2d8:	b01b      	add	sp, #108	; 0x6c
 801f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801f2de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2e2:	b087      	sub	sp, #28
 801f2e4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801f2e8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f2ec:	fb05 7003 	mla	r0, r5, r3, r7
 801f2f0:	2d00      	cmp	r5, #0
 801f2f2:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801f2f6:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801f2fa:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801f2fe:	f2c0 811f 	blt.w	801f540 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f302:	45a8      	cmp	r8, r5
 801f304:	f340 811c 	ble.w	801f540 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801f308:	2f00      	cmp	r7, #0
 801f30a:	f2c0 8117 	blt.w	801f53c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f30e:	42bb      	cmp	r3, r7
 801f310:	f340 8114 	ble.w	801f53c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801f314:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801f318:	1c7a      	adds	r2, r7, #1
 801f31a:	f100 8114 	bmi.w	801f546 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f31e:	4293      	cmp	r3, r2
 801f320:	f340 8111 	ble.w	801f546 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801f324:	2c00      	cmp	r4, #0
 801f326:	f000 8110 	beq.w	801f54a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801f32a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801f32e:	3501      	adds	r5, #1
 801f330:	f100 810f 	bmi.w	801f552 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f334:	45a8      	cmp	r8, r5
 801f336:	f340 810c 	ble.w	801f552 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801f33a:	f1be 0f00 	cmp.w	lr, #0
 801f33e:	f000 810b 	beq.w	801f558 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801f342:	2f00      	cmp	r7, #0
 801f344:	f2c0 8103 	blt.w	801f54e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f348:	42bb      	cmp	r3, r7
 801f34a:	f340 8100 	ble.w	801f54e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801f34e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801f352:	3701      	adds	r7, #1
 801f354:	f100 8103 	bmi.w	801f55e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f358:	42bb      	cmp	r3, r7
 801f35a:	f340 8100 	ble.w	801f55e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801f35e:	2c00      	cmp	r4, #0
 801f360:	f000 80ff 	beq.w	801f562 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801f364:	3301      	adds	r3, #1
 801f366:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f36a:	fa1f fc84 	uxth.w	ip, r4
 801f36e:	fa1f fe8e 	uxth.w	lr, lr
 801f372:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801f376:	fb0c f90e 	mul.w	r9, ip, lr
 801f37a:	0e13      	lsrs	r3, r2, #24
 801f37c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801f380:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801f384:	9302      	str	r3, [sp, #8]
 801f386:	ebac 0709 	sub.w	r7, ip, r9
 801f38a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801f38e:	fa1f f48e 	uxth.w	r4, lr
 801f392:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801f396:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801f39a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801f39e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f3a2:	1b1b      	subs	r3, r3, r4
 801f3a4:	fb0a f606 	mul.w	r6, sl, r6
 801f3a8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801f3ac:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801f3b0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801f3b4:	b29b      	uxth	r3, r3
 801f3b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f3ba:	b2bf      	uxth	r7, r7
 801f3bc:	9301      	str	r3, [sp, #4]
 801f3be:	44e6      	add	lr, ip
 801f3c0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801f3c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f3c8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801f3cc:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801f3d0:	9303      	str	r3, [sp, #12]
 801f3d2:	0a33      	lsrs	r3, r6, #8
 801f3d4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801f3d8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801f3dc:	9304      	str	r3, [sp, #16]
 801f3de:	fb0b f606 	mul.w	r6, fp, r6
 801f3e2:	fb0b f000 	mul.w	r0, fp, r0
 801f3e6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801f3ea:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f3ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f3f2:	44b6      	add	lr, r6
 801f3f4:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801f3f8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801f3fc:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801f400:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f404:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f408:	fb08 f606 	mul.w	r6, r8, r6
 801f40c:	0a03      	lsrs	r3, r0, #8
 801f40e:	fb08 f505 	mul.w	r5, r8, r5
 801f412:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f416:	0a30      	lsrs	r0, r6, #8
 801f418:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f41c:	9305      	str	r3, [sp, #20]
 801f41e:	0e13      	lsrs	r3, r2, #24
 801f420:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f424:	fb0e fe07 	mul.w	lr, lr, r7
 801f428:	4430      	add	r0, r6
 801f42a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801f42e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801f432:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801f436:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f43a:	0a00      	lsrs	r0, r0, #8
 801f43c:	435e      	muls	r6, r3
 801f43e:	0a2d      	lsrs	r5, r5, #8
 801f440:	435a      	muls	r2, r3
 801f442:	9b03      	ldr	r3, [sp, #12]
 801f444:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801f448:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801f44c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801f450:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f454:	44b4      	add	ip, r6
 801f456:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801f45a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f45e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801f462:	9e01      	ldr	r6, [sp, #4]
 801f464:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f468:	fb03 ee06 	mla	lr, r3, r6, lr
 801f46c:	9b04      	ldr	r3, [sp, #16]
 801f46e:	0a12      	lsrs	r2, r2, #8
 801f470:	fb0c ee09 	mla	lr, ip, r9, lr
 801f474:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801f478:	9b05      	ldr	r3, [sp, #20]
 801f47a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f47e:	fb00 ee04 	mla	lr, r0, r4, lr
 801f482:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f486:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801f48a:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801f48e:	9b01      	ldr	r3, [sp, #4]
 801f490:	fb07 fe0e 	mul.w	lr, r7, lr
 801f494:	fb07 f70b 	mul.w	r7, r7, fp
 801f498:	fb03 ee06 	mla	lr, r3, r6, lr
 801f49c:	fb03 730a 	mla	r3, r3, sl, r7
 801f4a0:	fb09 e202 	mla	r2, r9, r2, lr
 801f4a4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801f4a8:	fb04 2e0e 	mla	lr, r4, lr, r2
 801f4ac:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801f4b0:	fb04 3408 	mla	r4, r4, r8, r3
 801f4b4:	9b02      	ldr	r3, [sp, #8]
 801f4b6:	b292      	uxth	r2, r2
 801f4b8:	fb09 4903 	mla	r9, r9, r3, r4
 801f4bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f4c0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f4c4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801f4c8:	fb09 f902 	mul.w	r9, r9, r2
 801f4cc:	ea40 0e0e 	orr.w	lr, r0, lr
 801f4d0:	f109 0301 	add.w	r3, r9, #1
 801f4d4:	fa5f f08e 	uxtb.w	r0, lr
 801f4d8:	fb10 f002 	smulbb	r0, r0, r2
 801f4dc:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801f4e0:	780b      	ldrb	r3, [r1, #0]
 801f4e2:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801f4e6:	fa5f f989 	uxtb.w	r9, r9
 801f4ea:	fb03 0309 	mla	r3, r3, r9, r0
 801f4ee:	b29b      	uxth	r3, r3
 801f4f0:	1c58      	adds	r0, r3, #1
 801f4f2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f4f6:	7848      	ldrb	r0, [r1, #1]
 801f4f8:	fb10 f009 	smulbb	r0, r0, r9
 801f4fc:	121b      	asrs	r3, r3, #8
 801f4fe:	700b      	strb	r3, [r1, #0]
 801f500:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801f504:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801f508:	fb03 0302 	mla	r3, r3, r2, r0
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	1c58      	adds	r0, r3, #1
 801f510:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f514:	121b      	asrs	r3, r3, #8
 801f516:	704b      	strb	r3, [r1, #1]
 801f518:	788b      	ldrb	r3, [r1, #2]
 801f51a:	fb13 f909 	smulbb	r9, r3, r9
 801f51e:	fb0e 9e02 	mla	lr, lr, r2, r9
 801f522:	fa1f fe8e 	uxth.w	lr, lr
 801f526:	f10e 0301 	add.w	r3, lr, #1
 801f52a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801f52e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f532:	f881 e002 	strb.w	lr, [r1, #2]
 801f536:	b007      	add	sp, #28
 801f538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f53c:	2600      	movs	r6, #0
 801f53e:	e6eb      	b.n	801f318 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801f540:	2000      	movs	r0, #0
 801f542:	4606      	mov	r6, r0
 801f544:	e6f3      	b.n	801f32e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f546:	2000      	movs	r0, #0
 801f548:	e6f1      	b.n	801f32e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f54a:	4620      	mov	r0, r4
 801f54c:	e6ef      	b.n	801f32e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801f54e:	2500      	movs	r5, #0
 801f550:	e6ff      	b.n	801f352 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801f552:	2200      	movs	r2, #0
 801f554:	4615      	mov	r5, r2
 801f556:	e708      	b.n	801f36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f558:	4672      	mov	r2, lr
 801f55a:	4675      	mov	r5, lr
 801f55c:	e705      	b.n	801f36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f55e:	2200      	movs	r2, #0
 801f560:	e703      	b.n	801f36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801f562:	4622      	mov	r2, r4
 801f564:	e701      	b.n	801f36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801f566 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f56a:	b09d      	sub	sp, #116	; 0x74
 801f56c:	9219      	str	r2, [sp, #100]	; 0x64
 801f56e:	9307      	str	r3, [sp, #28]
 801f570:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f572:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801f576:	901b      	str	r0, [sp, #108]	; 0x6c
 801f578:	931a      	str	r3, [sp, #104]	; 0x68
 801f57a:	6850      	ldr	r0, [r2, #4]
 801f57c:	9117      	str	r1, [sp, #92]	; 0x5c
 801f57e:	6812      	ldr	r2, [r2, #0]
 801f580:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f584:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801f588:	fb00 1303 	mla	r3, r0, r3, r1
 801f58c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f590:	18d3      	adds	r3, r2, r3
 801f592:	930a      	str	r3, [sp, #40]	; 0x28
 801f594:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	9310      	str	r3, [sp, #64]	; 0x40
 801f59a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801f59e:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f5a2:	2b00      	cmp	r3, #0
 801f5a4:	dc03      	bgt.n	801f5ae <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f5a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	f340 8368 	ble.w	801fc7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f5ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f5b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f5b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f5b8:	1e48      	subs	r0, r1, #1
 801f5ba:	1e57      	subs	r7, r2, #1
 801f5bc:	9b07      	ldr	r3, [sp, #28]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	f340 8187 	ble.w	801f8d2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801f5c4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801f5c8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f5cc:	d406      	bmi.n	801f5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f5ce:	4584      	cmp	ip, r0
 801f5d0:	da04      	bge.n	801f5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	db02      	blt.n	801f5dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f5d6:	42bb      	cmp	r3, r7
 801f5d8:	f2c0 817c 	blt.w	801f8d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801f5dc:	f11c 0c01 	adds.w	ip, ip, #1
 801f5e0:	f100 816c 	bmi.w	801f8bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f5e4:	4561      	cmp	r1, ip
 801f5e6:	f2c0 8169 	blt.w	801f8bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f5ea:	3301      	adds	r3, #1
 801f5ec:	f100 8166 	bmi.w	801f8bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f5f0:	429a      	cmp	r2, r3
 801f5f2:	f2c0 8163 	blt.w	801f8bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801f5f6:	9b07      	ldr	r3, [sp, #28]
 801f5f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801f5fa:	9318      	str	r3, [sp, #96]	; 0x60
 801f5fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	f340 8186 	ble.w	801f910 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f604:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f606:	142a      	asrs	r2, r5, #16
 801f608:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f60c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f610:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f614:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f618:	f100 81cb 	bmi.w	801f9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f61c:	f10e 38ff 	add.w	r8, lr, #4294967295
 801f620:	4542      	cmp	r2, r8
 801f622:	f280 81c6 	bge.w	801f9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f626:	2800      	cmp	r0, #0
 801f628:	f2c0 81c3 	blt.w	801f9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f62c:	f103 38ff 	add.w	r8, r3, #4294967295
 801f630:	4540      	cmp	r0, r8
 801f632:	f280 81be 	bge.w	801f9b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801f636:	fa0f f38e 	sxth.w	r3, lr
 801f63a:	fb00 2203 	mla	r2, r0, r3, r2
 801f63e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801f640:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801f644:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801f648:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801f64c:	2900      	cmp	r1, #0
 801f64e:	f000 81a6 	beq.w	801f99e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801f652:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f656:	900c      	str	r0, [sp, #48]	; 0x30
 801f658:	0e00      	lsrs	r0, r0, #24
 801f65a:	9013      	str	r0, [sp, #76]	; 0x4c
 801f65c:	f1bc 0f00 	cmp.w	ip, #0
 801f660:	d00f      	beq.n	801f682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f662:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801f666:	3b01      	subs	r3, #1
 801f668:	009b      	lsls	r3, r3, #2
 801f66a:	3304      	adds	r3, #4
 801f66c:	eb08 0003 	add.w	r0, r8, r3
 801f670:	f858 3003 	ldr.w	r3, [r8, r3]
 801f674:	9308      	str	r3, [sp, #32]
 801f676:	0e1b      	lsrs	r3, r3, #24
 801f678:	9311      	str	r3, [sp, #68]	; 0x44
 801f67a:	6843      	ldr	r3, [r0, #4]
 801f67c:	930d      	str	r3, [sp, #52]	; 0x34
 801f67e:	0e1b      	lsrs	r3, r3, #24
 801f680:	9314      	str	r3, [sp, #80]	; 0x50
 801f682:	b289      	uxth	r1, r1
 801f684:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f686:	fa1f fc8c 	uxth.w	ip, ip
 801f68a:	0108      	lsls	r0, r1, #4
 801f68c:	fb01 f90c 	mul.w	r9, r1, ip
 801f690:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f694:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801f698:	eba0 0809 	sub.w	r8, r0, r9
 801f69c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f69e:	fa1f f18c 	uxth.w	r1, ip
 801f6a2:	fa1f f888 	uxth.w	r8, r8
 801f6a6:	1a5b      	subs	r3, r3, r1
 801f6a8:	fb08 f000 	mul.w	r0, r8, r0
 801f6ac:	b29b      	uxth	r3, r3
 801f6ae:	fb03 000e 	mla	r0, r3, lr, r0
 801f6b2:	fb01 0004 	mla	r0, r1, r4, r0
 801f6b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f6b8:	fb09 0004 	mla	r0, r9, r4, r0
 801f6bc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	f000 80f2 	beq.w	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f6c6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801f6ca:	d01b      	beq.n	801f704 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801f6cc:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801f6d0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f6d4:	fb0e fa0a 	mul.w	sl, lr, sl
 801f6d8:	fb0e fe02 	mul.w	lr, lr, r2
 801f6dc:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801f6e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801f6e4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801f6e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f6ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801f6f0:	4452      	add	r2, sl
 801f6f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f6f6:	0a12      	lsrs	r2, r2, #8
 801f6f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801f6fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f700:	ea42 020c 	orr.w	r2, r2, ip
 801f704:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f706:	2cff      	cmp	r4, #255	; 0xff
 801f708:	d021      	beq.n	801f74e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801f70a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f70c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f710:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f712:	fb04 fb0b 	mul.w	fp, r4, fp
 801f716:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f718:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f71c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f71e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f722:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f726:	fb04 fa0a 	mul.w	sl, r4, sl
 801f72a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f72e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f732:	44de      	add	lr, fp
 801f734:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f738:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f73c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f740:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f744:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f748:	ea4e 040a 	orr.w	r4, lr, sl
 801f74c:	940c      	str	r4, [sp, #48]	; 0x30
 801f74e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f750:	2cff      	cmp	r4, #255	; 0xff
 801f752:	d021      	beq.n	801f798 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801f754:	9c08      	ldr	r4, [sp, #32]
 801f756:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f75a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f75c:	fb04 fb0b 	mul.w	fp, r4, fp
 801f760:	9c08      	ldr	r4, [sp, #32]
 801f762:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f766:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f768:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f76c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f770:	fb04 fa0a 	mul.w	sl, r4, sl
 801f774:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f778:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f77c:	44de      	add	lr, fp
 801f77e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f782:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f786:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f78a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f78e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f792:	ea4e 040a 	orr.w	r4, lr, sl
 801f796:	9408      	str	r4, [sp, #32]
 801f798:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f79a:	2cff      	cmp	r4, #255	; 0xff
 801f79c:	d021      	beq.n	801f7e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f79e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801f7a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f7a6:	fb04 fb0b 	mul.w	fp, r4, fp
 801f7aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f7ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801f7b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f7b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801f7b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801f7ba:	fb04 fa0a 	mul.w	sl, r4, sl
 801f7be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801f7c6:	44de      	add	lr, fp
 801f7c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f7cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f7d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f7d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801f7d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f7dc:	ea4e 040a 	orr.w	r4, lr, sl
 801f7e0:	940d      	str	r4, [sp, #52]	; 0x34
 801f7e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f7e4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801f7e8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f7ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f7f0:	9c08      	ldr	r4, [sp, #32]
 801f7f2:	fb08 fc0c 	mul.w	ip, r8, ip
 801f7f6:	fb03 cc0e 	mla	ip, r3, lr, ip
 801f7fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f7fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f800:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f804:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801f808:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801f80a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f80e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801f812:	fb08 f80e 	mul.w	r8, r8, lr
 801f816:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f81a:	fb03 8202 	mla	r2, r3, r2, r8
 801f81e:	9b08      	ldr	r3, [sp, #32]
 801f820:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801f824:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801f828:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f82a:	fb01 220a 	mla	r2, r1, sl, r2
 801f82e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801f832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f834:	fb09 2901 	mla	r9, r9, r1, r2
 801f838:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f83a:	4343      	muls	r3, r0
 801f83c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f840:	1c58      	adds	r0, r3, #1
 801f842:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801f846:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f84a:	783b      	ldrb	r3, [r7, #0]
 801f84c:	ea4c 0c09 	orr.w	ip, ip, r9
 801f850:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801f854:	fa5f f28c 	uxtb.w	r2, ip
 801f858:	b2c0      	uxtb	r0, r0
 801f85a:	fb12 f201 	smulbb	r2, r2, r1
 801f85e:	fb03 2300 	mla	r3, r3, r0, r2
 801f862:	b29b      	uxth	r3, r3
 801f864:	1c5a      	adds	r2, r3, #1
 801f866:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f86a:	787a      	ldrb	r2, [r7, #1]
 801f86c:	fb12 f200 	smulbb	r2, r2, r0
 801f870:	121b      	asrs	r3, r3, #8
 801f872:	703b      	strb	r3, [r7, #0]
 801f874:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801f878:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f87c:	fb03 2301 	mla	r3, r3, r1, r2
 801f880:	b29b      	uxth	r3, r3
 801f882:	1c5a      	adds	r2, r3, #1
 801f884:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f888:	121b      	asrs	r3, r3, #8
 801f88a:	707b      	strb	r3, [r7, #1]
 801f88c:	78bb      	ldrb	r3, [r7, #2]
 801f88e:	fb13 f000 	smulbb	r0, r3, r0
 801f892:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f896:	fa1f fc8c 	uxth.w	ip, ip
 801f89a:	f10c 0301 	add.w	r3, ip, #1
 801f89e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f8a2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f8a6:	f887 c002 	strb.w	ip, [r7, #2]
 801f8aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f8ac:	3703      	adds	r7, #3
 801f8ae:	441d      	add	r5, r3
 801f8b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f8b2:	441e      	add	r6, r3
 801f8b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f8b6:	3b01      	subs	r3, #1
 801f8b8:	9318      	str	r3, [sp, #96]	; 0x60
 801f8ba:	e69f      	b.n	801f5fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801f8be:	441d      	add	r5, r3
 801f8c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f8c2:	441e      	add	r6, r3
 801f8c4:	9b07      	ldr	r3, [sp, #28]
 801f8c6:	3b01      	subs	r3, #1
 801f8c8:	9307      	str	r3, [sp, #28]
 801f8ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f8cc:	3303      	adds	r3, #3
 801f8ce:	930a      	str	r3, [sp, #40]	; 0x28
 801f8d0:	e674      	b.n	801f5bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f8d2:	d025      	beq.n	801f920 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801f8d4:	9b07      	ldr	r3, [sp, #28]
 801f8d6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801f8d8:	3b01      	subs	r3, #1
 801f8da:	fb00 5003 	mla	r0, r0, r3, r5
 801f8de:	1400      	asrs	r0, r0, #16
 801f8e0:	f53f ae89 	bmi.w	801f5f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8e4:	3901      	subs	r1, #1
 801f8e6:	4288      	cmp	r0, r1
 801f8e8:	f6bf ae85 	bge.w	801f5f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801f8ee:	fb01 6303 	mla	r3, r1, r3, r6
 801f8f2:	141b      	asrs	r3, r3, #16
 801f8f4:	f53f ae7f 	bmi.w	801f5f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f8f8:	3a01      	subs	r2, #1
 801f8fa:	4293      	cmp	r3, r2
 801f8fc:	f6bf ae7b 	bge.w	801f5f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f902:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801f906:	f103 0e03 	add.w	lr, r3, #3
 801f90a:	f1bb 0f00 	cmp.w	fp, #0
 801f90e:	dc6e      	bgt.n	801f9ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f910:	9b07      	ldr	r3, [sp, #28]
 801f912:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f918:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f91c:	4423      	add	r3, r4
 801f91e:	930a      	str	r3, [sp, #40]	; 0x28
 801f920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f922:	2b00      	cmp	r3, #0
 801f924:	f340 81ab 	ble.w	801fc7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801f928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f92c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f92e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f932:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f936:	eef0 6a62 	vmov.f32	s13, s5
 801f93a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f93e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f942:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f946:	ee16 5a90 	vmov	r5, s13
 801f94a:	eef0 6a43 	vmov.f32	s13, s6
 801f94e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f952:	ee16 6a90 	vmov	r6, s13
 801f956:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f95a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f95e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f962:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f966:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f96a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f96e:	ee12 2a90 	vmov	r2, s5
 801f972:	eef0 2a47 	vmov.f32	s5, s14
 801f976:	fb92 f3f3 	sdiv	r3, r2, r3
 801f97a:	ee13 2a10 	vmov	r2, s6
 801f97e:	9329      	str	r3, [sp, #164]	; 0xa4
 801f980:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f982:	eeb0 3a67 	vmov.f32	s6, s15
 801f986:	fb92 f3f3 	sdiv	r3, r2, r3
 801f98a:	932a      	str	r3, [sp, #168]	; 0xa8
 801f98c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801f98e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801f990:	3b01      	subs	r3, #1
 801f992:	9317      	str	r3, [sp, #92]	; 0x5c
 801f994:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801f996:	bf08      	it	eq
 801f998:	4613      	moveq	r3, r2
 801f99a:	9307      	str	r3, [sp, #28]
 801f99c:	e600      	b.n	801f5a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f99e:	f1bc 0f00 	cmp.w	ip, #0
 801f9a2:	f43f ae6e 	beq.w	801f682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f9a6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801f9aa:	9308      	str	r3, [sp, #32]
 801f9ac:	0e1b      	lsrs	r3, r3, #24
 801f9ae:	9311      	str	r3, [sp, #68]	; 0x44
 801f9b0:	e667      	b.n	801f682 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f9b2:	f112 0801 	adds.w	r8, r2, #1
 801f9b6:	f53f af78 	bmi.w	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f9ba:	45c6      	cmp	lr, r8
 801f9bc:	f6ff af75 	blt.w	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f9c0:	f110 0801 	adds.w	r8, r0, #1
 801f9c4:	f53f af71 	bmi.w	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f9c8:	4543      	cmp	r3, r8
 801f9ca:	f6ff af6e 	blt.w	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f9ce:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801f9d0:	b21b      	sxth	r3, r3
 801f9d2:	9201      	str	r2, [sp, #4]
 801f9d4:	9300      	str	r3, [sp, #0]
 801f9d6:	fa0f f38e 	sxth.w	r3, lr
 801f9da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f9dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f9e0:	e9cd c404 	strd	ip, r4, [sp, #16]
 801f9e4:	4639      	mov	r1, r7
 801f9e6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f9e8:	f7ff fc79 	bl	801f2de <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801f9ec:	e75d      	b.n	801f8aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801f9ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9f0:	142f      	asrs	r7, r5, #16
 801f9f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f9f4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f9f8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801f9fc:	1433      	asrs	r3, r6, #16
 801f9fe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fa02:	fb02 7303 	mla	r3, r2, r3, r7
 801fa06:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801fa0a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801fa0e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fa12:	2900      	cmp	r1, #0
 801fa14:	f000 812a 	beq.w	801fc6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801fa18:	687c      	ldr	r4, [r7, #4]
 801fa1a:	940e      	str	r4, [sp, #56]	; 0x38
 801fa1c:	0e24      	lsrs	r4, r4, #24
 801fa1e:	9415      	str	r4, [sp, #84]	; 0x54
 801fa20:	b178      	cbz	r0, 801fa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fa22:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801fa26:	3a01      	subs	r2, #1
 801fa28:	0092      	lsls	r2, r2, #2
 801fa2a:	3204      	adds	r2, #4
 801fa2c:	eb07 0802 	add.w	r8, r7, r2
 801fa30:	58ba      	ldr	r2, [r7, r2]
 801fa32:	9209      	str	r2, [sp, #36]	; 0x24
 801fa34:	0e12      	lsrs	r2, r2, #24
 801fa36:	9212      	str	r2, [sp, #72]	; 0x48
 801fa38:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801fa3c:	920f      	str	r2, [sp, #60]	; 0x3c
 801fa3e:	0e12      	lsrs	r2, r2, #24
 801fa40:	9216      	str	r2, [sp, #88]	; 0x58
 801fa42:	b289      	uxth	r1, r1
 801fa44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fa46:	b280      	uxth	r0, r0
 801fa48:	fb01 f900 	mul.w	r9, r1, r0
 801fa4c:	0109      	lsls	r1, r1, #4
 801fa4e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801fa52:	eba1 0809 	sub.w	r8, r1, r9
 801fa56:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801fa5a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fa5c:	b280      	uxth	r0, r0
 801fa5e:	fa1f f888 	uxth.w	r8, r8
 801fa62:	1a12      	subs	r2, r2, r0
 801fa64:	fb08 f101 	mul.w	r1, r8, r1
 801fa68:	b292      	uxth	r2, r2
 801fa6a:	fb02 110c 	mla	r1, r2, ip, r1
 801fa6e:	fb00 1104 	mla	r1, r0, r4, r1
 801fa72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fa74:	fb09 1104 	mla	r1, r9, r4, r1
 801fa78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801fa7c:	2900      	cmp	r1, #0
 801fa7e:	f000 80ec 	beq.w	801fc5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801fa82:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fa86:	d019      	beq.n	801fabc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801fa88:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fa8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fa90:	fb0c fa0a 	mul.w	sl, ip, sl
 801fa94:	fb0c fc03 	mul.w	ip, ip, r3
 801fa98:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801fa9c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801faa0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801faa4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faa8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801faac:	4453      	add	r3, sl
 801faae:	0a3f      	lsrs	r7, r7, #8
 801fab0:	0a1b      	lsrs	r3, r3, #8
 801fab2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801fab6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801faba:	433b      	orrs	r3, r7
 801fabc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fabe:	2cff      	cmp	r4, #255	; 0xff
 801fac0:	d020      	beq.n	801fb04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801fac2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fac4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fac8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801faca:	4367      	muls	r7, r4
 801facc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801face:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fad2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fad6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801fad8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fadc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fae0:	fb04 fa0a 	mul.w	sl, r4, sl
 801fae4:	44bc      	add	ip, r7
 801fae6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801faea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801faee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801faf2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801faf6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fafa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fafe:	ea4c 040a 	orr.w	r4, ip, sl
 801fb02:	940e      	str	r4, [sp, #56]	; 0x38
 801fb04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb06:	2cff      	cmp	r4, #255	; 0xff
 801fb08:	d020      	beq.n	801fb4c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801fb0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fb0c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb12:	4367      	muls	r7, r4
 801fb14:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fb16:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb1a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb1e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801fb20:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb28:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb2c:	44bc      	add	ip, r7
 801fb2e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fb32:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb36:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb3e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb46:	ea4c 040a 	orr.w	r4, ip, sl
 801fb4a:	9409      	str	r4, [sp, #36]	; 0x24
 801fb4c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb4e:	2cff      	cmp	r4, #255	; 0xff
 801fb50:	d020      	beq.n	801fb94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801fb52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fb54:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fb58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb5a:	4367      	muls	r7, r4
 801fb5c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fb5e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801fb62:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801fb66:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801fb68:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801fb6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb70:	fb04 fa0a 	mul.w	sl, r4, sl
 801fb74:	44bc      	add	ip, r7
 801fb76:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801fb7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb7e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801fb82:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fb86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fb8a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fb8e:	ea4c 040a 	orr.w	r4, ip, sl
 801fb92:	940f      	str	r4, [sp, #60]	; 0x3c
 801fb94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fb96:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801fb9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fb9e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801fba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801fba4:	fb08 f707 	mul.w	r7, r8, r7
 801fba8:	fb02 770c 	mla	r7, r2, ip, r7
 801fbac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fbb2:	fb00 770c 	mla	r7, r0, ip, r7
 801fbb6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801fbba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801fbbc:	fb09 770c 	mla	r7, r9, ip, r7
 801fbc0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801fbc4:	fb08 f80c 	mul.w	r8, r8, ip
 801fbc8:	0a3f      	lsrs	r7, r7, #8
 801fbca:	fb02 8303 	mla	r3, r2, r3, r8
 801fbce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fbd0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801fbd4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801fbd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbda:	fb00 330a 	mla	r3, r0, sl, r3
 801fbde:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801fbe2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fbe4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801fbe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fbea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fbee:	434b      	muls	r3, r1
 801fbf0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fbf4:	1c59      	adds	r1, r3, #1
 801fbf6:	ea47 070c 	orr.w	r7, r7, ip
 801fbfa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fbfe:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801fc02:	b2fa      	uxtb	r2, r7
 801fc04:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801fc08:	fb12 f200 	smulbb	r2, r2, r0
 801fc0c:	b2c9      	uxtb	r1, r1
 801fc0e:	fb03 2301 	mla	r3, r3, r1, r2
 801fc12:	b29b      	uxth	r3, r3
 801fc14:	1c5a      	adds	r2, r3, #1
 801fc16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc1a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801fc1e:	fb12 f201 	smulbb	r2, r2, r1
 801fc22:	121b      	asrs	r3, r3, #8
 801fc24:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801fc28:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801fc2c:	0c3f      	lsrs	r7, r7, #16
 801fc2e:	fb03 2300 	mla	r3, r3, r0, r2
 801fc32:	b29b      	uxth	r3, r3
 801fc34:	1c5a      	adds	r2, r3, #1
 801fc36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fc3a:	121b      	asrs	r3, r3, #8
 801fc3c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801fc40:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801fc44:	fb13 f101 	smulbb	r1, r3, r1
 801fc48:	fb07 1700 	mla	r7, r7, r0, r1
 801fc4c:	b2bf      	uxth	r7, r7
 801fc4e:	1c79      	adds	r1, r7, #1
 801fc50:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fc54:	123f      	asrs	r7, r7, #8
 801fc56:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801fc5a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fc5c:	f10e 0e03 	add.w	lr, lr, #3
 801fc60:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc64:	441d      	add	r5, r3
 801fc66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fc68:	441e      	add	r6, r3
 801fc6a:	e64e      	b.n	801f90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801fc6c:	2800      	cmp	r0, #0
 801fc6e:	f43f aee8 	beq.w	801fa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fc72:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801fc76:	9209      	str	r2, [sp, #36]	; 0x24
 801fc78:	0e12      	lsrs	r2, r2, #24
 801fc7a:	9212      	str	r2, [sp, #72]	; 0x48
 801fc7c:	e6e1      	b.n	801fa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fc7e:	b01d      	add	sp, #116	; 0x74
 801fc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801fc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc88:	b087      	sub	sp, #28
 801fc8a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801fc8e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801fc92:	fb05 7003 	mla	r0, r5, r3, r7
 801fc96:	2d00      	cmp	r5, #0
 801fc98:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801fc9c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801fca0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801fca4:	f2c0 810a 	blt.w	801febc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801fca8:	45a8      	cmp	r8, r5
 801fcaa:	f340 8107 	ble.w	801febc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801fcae:	2f00      	cmp	r7, #0
 801fcb0:	f2c0 8102 	blt.w	801feb8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801fcb4:	42bb      	cmp	r3, r7
 801fcb6:	f340 80ff 	ble.w	801feb8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801fcba:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801fcbe:	1c7a      	adds	r2, r7, #1
 801fcc0:	f100 80ff 	bmi.w	801fec2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801fcc4:	4293      	cmp	r3, r2
 801fcc6:	f340 80fc 	ble.w	801fec2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801fcca:	2c00      	cmp	r4, #0
 801fccc:	f000 80fb 	beq.w	801fec6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801fcd0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801fcd4:	3501      	adds	r5, #1
 801fcd6:	f100 80fa 	bmi.w	801fece <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801fcda:	45a8      	cmp	r8, r5
 801fcdc:	f340 80f7 	ble.w	801fece <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801fce0:	f1be 0f00 	cmp.w	lr, #0
 801fce4:	f000 80f6 	beq.w	801fed4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801fce8:	2f00      	cmp	r7, #0
 801fcea:	f2c0 80ee 	blt.w	801feca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801fcee:	42bb      	cmp	r3, r7
 801fcf0:	f340 80eb 	ble.w	801feca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801fcf4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801fcf8:	3701      	adds	r7, #1
 801fcfa:	f100 80ee 	bmi.w	801feda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801fcfe:	42bb      	cmp	r3, r7
 801fd00:	f340 80eb 	ble.w	801feda <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801fd04:	2c00      	cmp	r4, #0
 801fd06:	f000 80ea 	beq.w	801fede <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801fd0a:	3301      	adds	r3, #1
 801fd0c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801fd10:	fa1f fc84 	uxth.w	ip, r4
 801fd14:	fa1f fe8e 	uxth.w	lr, lr
 801fd18:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801fd1c:	fb0c f90e 	mul.w	r9, ip, lr
 801fd20:	0e13      	lsrs	r3, r2, #24
 801fd22:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801fd26:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801fd2a:	9302      	str	r3, [sp, #8]
 801fd2c:	ebac 0709 	sub.w	r7, ip, r9
 801fd30:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801fd34:	fa1f f48e 	uxth.w	r4, lr
 801fd38:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801fd3c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801fd40:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801fd44:	fb0a fe0e 	mul.w	lr, sl, lr
 801fd48:	1b1b      	subs	r3, r3, r4
 801fd4a:	fb0a f606 	mul.w	r6, sl, r6
 801fd4e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801fd52:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801fd56:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801fd5a:	b29b      	uxth	r3, r3
 801fd5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fd60:	b2bf      	uxth	r7, r7
 801fd62:	9301      	str	r3, [sp, #4]
 801fd64:	44e6      	add	lr, ip
 801fd66:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801fd6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fd6e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801fd72:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801fd76:	9303      	str	r3, [sp, #12]
 801fd78:	0a33      	lsrs	r3, r6, #8
 801fd7a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801fd7e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801fd82:	9304      	str	r3, [sp, #16]
 801fd84:	fb0b f606 	mul.w	r6, fp, r6
 801fd88:	fb0b f000 	mul.w	r0, fp, r0
 801fd8c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801fd90:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fd94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fd98:	44b6      	add	lr, r6
 801fd9a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801fd9e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801fda2:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801fda6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801fdaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fdae:	fb08 f606 	mul.w	r6, r8, r6
 801fdb2:	0a03      	lsrs	r3, r0, #8
 801fdb4:	fb08 f505 	mul.w	r5, r8, r5
 801fdb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fdbc:	0a30      	lsrs	r0, r6, #8
 801fdbe:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fdc2:	9305      	str	r3, [sp, #20]
 801fdc4:	0e13      	lsrs	r3, r2, #24
 801fdc6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fdca:	fb0e fe07 	mul.w	lr, lr, r7
 801fdce:	4430      	add	r0, r6
 801fdd0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801fdd4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801fdd8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801fddc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fde0:	0a00      	lsrs	r0, r0, #8
 801fde2:	435e      	muls	r6, r3
 801fde4:	0a2d      	lsrs	r5, r5, #8
 801fde6:	435a      	muls	r2, r3
 801fde8:	9b03      	ldr	r3, [sp, #12]
 801fdea:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801fdee:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801fdf2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801fdf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fdfa:	44b4      	add	ip, r6
 801fdfc:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801fe00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fe04:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801fe08:	9e01      	ldr	r6, [sp, #4]
 801fe0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fe0e:	fb03 ee06 	mla	lr, r3, r6, lr
 801fe12:	9b04      	ldr	r3, [sp, #16]
 801fe14:	0a12      	lsrs	r2, r2, #8
 801fe16:	fb0c ee09 	mla	lr, ip, r9, lr
 801fe1a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801fe1e:	9b05      	ldr	r3, [sp, #20]
 801fe20:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fe24:	fb00 ee04 	mla	lr, r0, r4, lr
 801fe28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe2c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801fe30:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801fe34:	9b01      	ldr	r3, [sp, #4]
 801fe36:	fb07 fe0e 	mul.w	lr, r7, lr
 801fe3a:	fb07 f70b 	mul.w	r7, r7, fp
 801fe3e:	fb03 ee06 	mla	lr, r3, r6, lr
 801fe42:	fb03 730a 	mla	r3, r3, sl, r7
 801fe46:	fb09 e202 	mla	r2, r9, r2, lr
 801fe4a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801fe4e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801fe52:	fb04 3408 	mla	r4, r4, r8, r3
 801fe56:	9b02      	ldr	r3, [sp, #8]
 801fe58:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fe5c:	fb09 4903 	mla	r9, r9, r3, r4
 801fe60:	780b      	ldrb	r3, [r1, #0]
 801fe62:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801fe66:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801fe6a:	ea40 0e0e 	orr.w	lr, r0, lr
 801fe6e:	fa5f f989 	uxtb.w	r9, r9
 801fe72:	fb03 f209 	mul.w	r2, r3, r9
 801fe76:	1c53      	adds	r3, r2, #1
 801fe78:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe7c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fe80:	700b      	strb	r3, [r1, #0]
 801fe82:	784b      	ldrb	r3, [r1, #1]
 801fe84:	fb03 f309 	mul.w	r3, r3, r9
 801fe88:	1c5a      	adds	r2, r3, #1
 801fe8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801fe8e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801fe92:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801fe96:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fe9a:	704b      	strb	r3, [r1, #1]
 801fe9c:	788b      	ldrb	r3, [r1, #2]
 801fe9e:	fb03 f909 	mul.w	r9, r3, r9
 801fea2:	f109 0301 	add.w	r3, r9, #1
 801fea6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801feaa:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801feae:	f881 e002 	strb.w	lr, [r1, #2]
 801feb2:	b007      	add	sp, #28
 801feb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feb8:	2600      	movs	r6, #0
 801feba:	e700      	b.n	801fcbe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801febc:	2000      	movs	r0, #0
 801febe:	4606      	mov	r6, r0
 801fec0:	e708      	b.n	801fcd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801fec2:	2000      	movs	r0, #0
 801fec4:	e706      	b.n	801fcd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801fec6:	4620      	mov	r0, r4
 801fec8:	e704      	b.n	801fcd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801feca:	2500      	movs	r5, #0
 801fecc:	e714      	b.n	801fcf8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801fece:	2200      	movs	r2, #0
 801fed0:	4615      	mov	r5, r2
 801fed2:	e71d      	b.n	801fd10 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801fed4:	4672      	mov	r2, lr
 801fed6:	4675      	mov	r5, lr
 801fed8:	e71a      	b.n	801fd10 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801feda:	2200      	movs	r2, #0
 801fedc:	e718      	b.n	801fd10 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801fede:	4622      	mov	r2, r4
 801fee0:	e716      	b.n	801fd10 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801fee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fee6:	b099      	sub	sp, #100	; 0x64
 801fee8:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801feec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801feee:	9017      	str	r0, [sp, #92]	; 0x5c
 801fef0:	9306      	str	r3, [sp, #24]
 801fef2:	6850      	ldr	r0, [r2, #4]
 801fef4:	6812      	ldr	r2, [r2, #0]
 801fef6:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801fefa:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801fefe:	fb00 1303 	mla	r3, r0, r3, r1
 801ff02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ff06:	18d3      	adds	r3, r2, r3
 801ff08:	9309      	str	r3, [sp, #36]	; 0x24
 801ff0a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	930e      	str	r3, [sp, #56]	; 0x38
 801ff10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ff12:	2b00      	cmp	r3, #0
 801ff14:	dc03      	bgt.n	801ff1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ff16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	f340 8360 	ble.w	80205de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ff1e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ff24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ff28:	1e48      	subs	r0, r1, #1
 801ff2a:	1e57      	subs	r7, r2, #1
 801ff2c:	9b06      	ldr	r3, [sp, #24]
 801ff2e:	2b00      	cmp	r3, #0
 801ff30:	f340 817b 	ble.w	802022a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801ff34:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ff38:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ff3c:	d406      	bmi.n	801ff4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff3e:	4584      	cmp	ip, r0
 801ff40:	da04      	bge.n	801ff4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	db02      	blt.n	801ff4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ff46:	42bb      	cmp	r3, r7
 801ff48:	f2c0 8170 	blt.w	802022c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ff4c:	f11c 0c01 	adds.w	ip, ip, #1
 801ff50:	f100 8160 	bmi.w	8020214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ff54:	4561      	cmp	r1, ip
 801ff56:	f2c0 815d 	blt.w	8020214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ff5a:	3301      	adds	r3, #1
 801ff5c:	f100 815a 	bmi.w	8020214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ff60:	429a      	cmp	r2, r3
 801ff62:	f2c0 8157 	blt.w	8020214 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ff66:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ff6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ff6c:	f1b8 0f00 	cmp.w	r8, #0
 801ff70:	f340 8179 	ble.w	8020266 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ff74:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ff76:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ff7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ff7c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ff80:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ff84:	142a      	asrs	r2, r5, #16
 801ff86:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ff8a:	689b      	ldr	r3, [r3, #8]
 801ff8c:	f100 81be 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff90:	f103 39ff 	add.w	r9, r3, #4294967295
 801ff94:	454a      	cmp	r2, r9
 801ff96:	f280 81b9 	bge.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ff9a:	f1bc 0f00 	cmp.w	ip, #0
 801ff9e:	f2c0 81b5 	blt.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ffa2:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ffa6:	45cc      	cmp	ip, r9
 801ffa8:	f280 81b0 	bge.w	802030c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ffac:	b21b      	sxth	r3, r3
 801ffae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ffb0:	fb0c 2203 	mla	r2, ip, r3, r2
 801ffb4:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ffb8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ffbc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ffc0:	2900      	cmp	r1, #0
 801ffc2:	f000 8197 	beq.w	80202f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ffc6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ffca:	940a      	str	r4, [sp, #40]	; 0x28
 801ffcc:	0e24      	lsrs	r4, r4, #24
 801ffce:	9411      	str	r4, [sp, #68]	; 0x44
 801ffd0:	b180      	cbz	r0, 801fff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ffd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ffd6:	3b01      	subs	r3, #1
 801ffd8:	009b      	lsls	r3, r3, #2
 801ffda:	3304      	adds	r3, #4
 801ffdc:	eb09 0c03 	add.w	ip, r9, r3
 801ffe0:	f859 3003 	ldr.w	r3, [r9, r3]
 801ffe4:	9307      	str	r3, [sp, #28]
 801ffe6:	0e1b      	lsrs	r3, r3, #24
 801ffe8:	930f      	str	r3, [sp, #60]	; 0x3c
 801ffea:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ffee:	930b      	str	r3, [sp, #44]	; 0x2c
 801fff0:	0e1b      	lsrs	r3, r3, #24
 801fff2:	9312      	str	r3, [sp, #72]	; 0x48
 801fff4:	b289      	uxth	r1, r1
 801fff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fff8:	b280      	uxth	r0, r0
 801fffa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801fffc:	fb01 fa00 	mul.w	sl, r1, r0
 8020000:	0109      	lsls	r1, r1, #4
 8020002:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8020006:	eba1 090a 	sub.w	r9, r1, sl
 802000a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802000e:	b280      	uxth	r0, r0
 8020010:	fa1f f989 	uxth.w	r9, r9
 8020014:	1a09      	subs	r1, r1, r0
 8020016:	fb09 f303 	mul.w	r3, r9, r3
 802001a:	b289      	uxth	r1, r1
 802001c:	fb01 330e 	mla	r3, r1, lr, r3
 8020020:	fb00 3304 	mla	r3, r0, r4, r3
 8020024:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020026:	fb0a 3304 	mla	r3, sl, r4, r3
 802002a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802002e:	2b00      	cmp	r3, #0
 8020030:	f000 80e8 	beq.w	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020034:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020038:	d01b      	beq.n	8020072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 802003a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 802003e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020042:	fb0e fb0b 	mul.w	fp, lr, fp
 8020046:	fb0e fe02 	mul.w	lr, lr, r2
 802004a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 802004e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020052:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020056:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802005a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802005e:	445a      	add	r2, fp
 8020060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020064:	0a12      	lsrs	r2, r2, #8
 8020066:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802006a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802006e:	ea42 020c 	orr.w	r2, r2, ip
 8020072:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020074:	2cff      	cmp	r4, #255	; 0xff
 8020076:	d021      	beq.n	80200bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8020078:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802007a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802007e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020080:	fb04 fc0c 	mul.w	ip, r4, ip
 8020084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020086:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802008a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 802008e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020090:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020094:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020098:	fb04 fb0b 	mul.w	fp, r4, fp
 802009c:	44e6      	add	lr, ip
 802009e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80200a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200a6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80200aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200ae:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80200b2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80200b6:	ea4e 040b 	orr.w	r4, lr, fp
 80200ba:	940a      	str	r4, [sp, #40]	; 0x28
 80200bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80200be:	2cff      	cmp	r4, #255	; 0xff
 80200c0:	d021      	beq.n	8020106 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80200c2:	9c07      	ldr	r4, [sp, #28]
 80200c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80200c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80200ca:	fb04 fc0c 	mul.w	ip, r4, ip
 80200ce:	9c07      	ldr	r4, [sp, #28]
 80200d0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80200d4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 80200d8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80200da:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80200de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200e2:	fb04 fb0b 	mul.w	fp, r4, fp
 80200e6:	44e6      	add	lr, ip
 80200e8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80200ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80200f0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80200f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80200f8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80200fc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8020100:	ea4e 040b 	orr.w	r4, lr, fp
 8020104:	9407      	str	r4, [sp, #28]
 8020106:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020108:	2cff      	cmp	r4, #255	; 0xff
 802010a:	d021      	beq.n	8020150 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 802010c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802010e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020112:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020114:	fb04 fc0c 	mul.w	ip, r4, ip
 8020118:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802011a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802011e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8020122:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020124:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020128:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802012c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020130:	44e6      	add	lr, ip
 8020132:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8020136:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802013a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802013e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020142:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8020146:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802014a:	ea4e 040b 	orr.w	r4, lr, fp
 802014e:	940b      	str	r4, [sp, #44]	; 0x2c
 8020150:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8020152:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8020156:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802015a:	2bff      	cmp	r3, #255	; 0xff
 802015c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020160:	9c07      	ldr	r4, [sp, #28]
 8020162:	fb09 fc0c 	mul.w	ip, r9, ip
 8020166:	fb01 cc0e 	mla	ip, r1, lr, ip
 802016a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802016e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020170:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020174:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020178:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802017a:	fb0a cc0e 	mla	ip, sl, lr, ip
 802017e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020182:	fb09 f90e 	mul.w	r9, r9, lr
 8020186:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802018a:	fb01 9202 	mla	r2, r1, r2, r9
 802018e:	9907      	ldr	r1, [sp, #28]
 8020190:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020194:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8020198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802019a:	fb00 220b 	mla	r2, r0, fp, r2
 802019e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 80201a2:	fb0a 2a00 	mla	sl, sl, r0, r2
 80201a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80201aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80201ae:	ea4c 0c0a 	orr.w	ip, ip, sl
 80201b2:	fa5f f08c 	uxtb.w	r0, ip
 80201b6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80201ba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80201be:	f000 80a2 	beq.w	8020306 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80201c2:	43db      	mvns	r3, r3
 80201c4:	783a      	ldrb	r2, [r7, #0]
 80201c6:	f897 a002 	ldrb.w	sl, [r7, #2]
 80201ca:	b2db      	uxtb	r3, r3
 80201cc:	fb02 fe03 	mul.w	lr, r2, r3
 80201d0:	fb0a fa03 	mul.w	sl, sl, r3
 80201d4:	f10e 0201 	add.w	r2, lr, #1
 80201d8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 80201dc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80201e0:	703a      	strb	r2, [r7, #0]
 80201e2:	787a      	ldrb	r2, [r7, #1]
 80201e4:	fb02 f003 	mul.w	r0, r2, r3
 80201e8:	f10a 0301 	add.w	r3, sl, #1
 80201ec:	1c42      	adds	r2, r0, #1
 80201ee:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80201f2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80201f6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80201fa:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80201fe:	707a      	strb	r2, [r7, #1]
 8020200:	f887 c002 	strb.w	ip, [r7, #2]
 8020204:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020206:	3703      	adds	r7, #3
 8020208:	f108 38ff 	add.w	r8, r8, #4294967295
 802020c:	441d      	add	r5, r3
 802020e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020210:	441e      	add	r6, r3
 8020212:	e6ab      	b.n	801ff6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020214:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020216:	441d      	add	r5, r3
 8020218:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802021a:	441e      	add	r6, r3
 802021c:	9b06      	ldr	r3, [sp, #24]
 802021e:	3b01      	subs	r3, #1
 8020220:	9306      	str	r3, [sp, #24]
 8020222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020224:	3303      	adds	r3, #3
 8020226:	9309      	str	r3, [sp, #36]	; 0x24
 8020228:	e680      	b.n	801ff2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802022a:	d024      	beq.n	8020276 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802022c:	9b06      	ldr	r3, [sp, #24]
 802022e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8020230:	3b01      	subs	r3, #1
 8020232:	fb00 5003 	mla	r0, r0, r3, r5
 8020236:	1400      	asrs	r0, r0, #16
 8020238:	f53f ae95 	bmi.w	801ff66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802023c:	3901      	subs	r1, #1
 802023e:	4288      	cmp	r0, r1
 8020240:	f6bf ae91 	bge.w	801ff66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020244:	9926      	ldr	r1, [sp, #152]	; 0x98
 8020246:	fb01 6303 	mla	r3, r1, r3, r6
 802024a:	141b      	asrs	r3, r3, #16
 802024c:	f53f ae8b 	bmi.w	801ff66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020250:	3a01      	subs	r2, #1
 8020252:	4293      	cmp	r3, r2
 8020254:	f6bf ae87 	bge.w	801ff66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802025a:	f8dd b018 	ldr.w	fp, [sp, #24]
 802025e:	1cdf      	adds	r7, r3, #3
 8020260:	f1bb 0f00 	cmp.w	fp, #0
 8020264:	dc6e      	bgt.n	8020344 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8020266:	9b06      	ldr	r3, [sp, #24]
 8020268:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802026c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802026e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020272:	4423      	add	r3, r4
 8020274:	9309      	str	r3, [sp, #36]	; 0x24
 8020276:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020278:	2b00      	cmp	r3, #0
 802027a:	f340 81b0 	ble.w	80205de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 802027e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8020284:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020288:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802028c:	eef0 6a62 	vmov.f32	s13, s5
 8020290:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020294:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020298:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802029c:	ee16 5a90 	vmov	r5, s13
 80202a0:	eef0 6a43 	vmov.f32	s13, s6
 80202a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80202a8:	ee16 6a90 	vmov	r6, s13
 80202ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202c4:	ee12 2a90 	vmov	r2, s5
 80202c8:	eef0 2a47 	vmov.f32	s5, s14
 80202cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80202d0:	ee13 2a10 	vmov	r2, s6
 80202d4:	9325      	str	r3, [sp, #148]	; 0x94
 80202d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80202d8:	eeb0 3a67 	vmov.f32	s6, s15
 80202dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80202e0:	9326      	str	r3, [sp, #152]	; 0x98
 80202e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80202e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80202e6:	3b01      	subs	r3, #1
 80202e8:	9315      	str	r3, [sp, #84]	; 0x54
 80202ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80202ec:	bf08      	it	eq
 80202ee:	4613      	moveq	r3, r2
 80202f0:	9306      	str	r3, [sp, #24]
 80202f2:	e60d      	b.n	801ff10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80202f4:	2800      	cmp	r0, #0
 80202f6:	f43f ae7d 	beq.w	801fff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80202fa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80202fe:	9307      	str	r3, [sp, #28]
 8020300:	0e1b      	lsrs	r3, r3, #24
 8020302:	930f      	str	r3, [sp, #60]	; 0x3c
 8020304:	e676      	b.n	801fff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8020306:	7038      	strb	r0, [r7, #0]
 8020308:	7079      	strb	r1, [r7, #1]
 802030a:	e779      	b.n	8020200 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802030c:	f112 0901 	adds.w	r9, r2, #1
 8020310:	f53f af78 	bmi.w	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020314:	454b      	cmp	r3, r9
 8020316:	f6ff af75 	blt.w	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802031a:	f11c 0901 	adds.w	r9, ip, #1
 802031e:	f53f af71 	bmi.w	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020322:	45ce      	cmp	lr, r9
 8020324:	f6ff af6e 	blt.w	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020328:	b21b      	sxth	r3, r3
 802032a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802032e:	fa0f f28e 	sxth.w	r2, lr
 8020332:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8020336:	9200      	str	r2, [sp, #0]
 8020338:	4639      	mov	r1, r7
 802033a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802033c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 802033e:	f7ff fca1 	bl	801fc84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8020342:	e75f      	b.n	8020204 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8020344:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020346:	1429      	asrs	r1, r5, #16
 8020348:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802034a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802034e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8020352:	1433      	asrs	r3, r6, #16
 8020354:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020358:	fb0c 1303 	mla	r3, ip, r3, r1
 802035c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802035e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020362:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8020366:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802036a:	2a00      	cmp	r2, #0
 802036c:	f000 8129 	beq.w	80205c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8020370:	684c      	ldr	r4, [r1, #4]
 8020372:	940c      	str	r4, [sp, #48]	; 0x30
 8020374:	0e24      	lsrs	r4, r4, #24
 8020376:	9413      	str	r4, [sp, #76]	; 0x4c
 8020378:	b198      	cbz	r0, 80203a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802037a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 802037e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020382:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020386:	f10c 0c04 	add.w	ip, ip, #4
 802038a:	eb01 080c 	add.w	r8, r1, ip
 802038e:	f851 100c 	ldr.w	r1, [r1, ip]
 8020392:	9108      	str	r1, [sp, #32]
 8020394:	0e09      	lsrs	r1, r1, #24
 8020396:	9110      	str	r1, [sp, #64]	; 0x40
 8020398:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802039c:	910d      	str	r1, [sp, #52]	; 0x34
 802039e:	0e09      	lsrs	r1, r1, #24
 80203a0:	9114      	str	r1, [sp, #80]	; 0x50
 80203a2:	b292      	uxth	r2, r2
 80203a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80203a6:	b280      	uxth	r0, r0
 80203a8:	fb02 f900 	mul.w	r9, r2, r0
 80203ac:	0112      	lsls	r2, r2, #4
 80203ae:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80203b2:	eba2 0809 	sub.w	r8, r2, r9
 80203b6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80203ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80203bc:	b280      	uxth	r0, r0
 80203be:	fa1f f888 	uxth.w	r8, r8
 80203c2:	1a09      	subs	r1, r1, r0
 80203c4:	fb08 f202 	mul.w	r2, r8, r2
 80203c8:	b289      	uxth	r1, r1
 80203ca:	fb01 220e 	mla	r2, r1, lr, r2
 80203ce:	fb00 2204 	mla	r2, r0, r4, r2
 80203d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80203d4:	fb09 2204 	mla	r2, r9, r4, r2
 80203d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80203dc:	2a00      	cmp	r2, #0
 80203de:	f000 80e8 	beq.w	80205b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80203e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80203e6:	d01b      	beq.n	8020420 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80203e8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80203ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203f0:	fb0e fa0a 	mul.w	sl, lr, sl
 80203f4:	fb0e fe03 	mul.w	lr, lr, r3
 80203f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80203fc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020400:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020404:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020408:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802040c:	4453      	add	r3, sl
 802040e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020412:	0a1b      	lsrs	r3, r3, #8
 8020414:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020418:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802041c:	ea43 030c 	orr.w	r3, r3, ip
 8020420:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020422:	2cff      	cmp	r4, #255	; 0xff
 8020424:	d021      	beq.n	802046a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8020426:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020428:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802042c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802042e:	fb04 fc0c 	mul.w	ip, r4, ip
 8020432:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020434:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8020438:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802043c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802043e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020442:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020446:	fb04 fa0a 	mul.w	sl, r4, sl
 802044a:	44e6      	add	lr, ip
 802044c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020450:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020454:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020458:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802045c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020460:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020464:	ea4e 040a 	orr.w	r4, lr, sl
 8020468:	940c      	str	r4, [sp, #48]	; 0x30
 802046a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802046c:	2cff      	cmp	r4, #255	; 0xff
 802046e:	d021      	beq.n	80204b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8020470:	9c08      	ldr	r4, [sp, #32]
 8020472:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020476:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020478:	fb04 fc0c 	mul.w	ip, r4, ip
 802047c:	9c08      	ldr	r4, [sp, #32]
 802047e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020482:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020484:	fb04 fa0e 	mul.w	sl, r4, lr
 8020488:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802048c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020490:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020494:	44e6      	add	lr, ip
 8020496:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802049a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802049e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204ae:	ea4e 040a 	orr.w	r4, lr, sl
 80204b2:	9408      	str	r4, [sp, #32]
 80204b4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204b6:	2cff      	cmp	r4, #255	; 0xff
 80204b8:	d021      	beq.n	80204fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80204ba:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80204bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80204c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204c2:	fb04 fc0c 	mul.w	ip, r4, ip
 80204c6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80204c8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80204cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80204d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80204d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204da:	fb04 fa0a 	mul.w	sl, r4, sl
 80204de:	44e6      	add	lr, ip
 80204e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80204e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80204ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204f8:	ea4e 040a 	orr.w	r4, lr, sl
 80204fc:	940d      	str	r4, [sp, #52]	; 0x34
 80204fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020500:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020508:	2aff      	cmp	r2, #255	; 0xff
 802050a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802050e:	9c08      	ldr	r4, [sp, #32]
 8020510:	fb08 fc0c 	mul.w	ip, r8, ip
 8020514:	fb01 cc0e 	mla	ip, r1, lr, ip
 8020518:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802051c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802051e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020522:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020526:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020528:	fb09 cc0e 	mla	ip, r9, lr, ip
 802052c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020530:	fb08 f80e 	mul.w	r8, r8, lr
 8020534:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020538:	fb01 8303 	mla	r3, r1, r3, r8
 802053c:	9908      	ldr	r1, [sp, #32]
 802053e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020542:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8020546:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020548:	fb00 330a 	mla	r3, r0, sl, r3
 802054c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8020550:	fb09 3e0e 	mla	lr, r9, lr, r3
 8020554:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020558:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802055c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8020560:	fa5f f08c 	uxtb.w	r0, ip
 8020564:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8020568:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802056c:	d032      	beq.n	80205d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 802056e:	43d2      	mvns	r2, r2
 8020570:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8020574:	b2d2      	uxtb	r2, r2
 8020576:	fb0e fe02 	mul.w	lr, lr, r2
 802057a:	f10e 0301 	add.w	r3, lr, #1
 802057e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8020582:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8020586:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 802058a:	4350      	muls	r0, r2
 802058c:	f807 3c03 	strb.w	r3, [r7, #-3]
 8020590:	1c43      	adds	r3, r0, #1
 8020592:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8020596:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802059a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 802059e:	4353      	muls	r3, r2
 80205a0:	f807 1c02 	strb.w	r1, [r7, #-2]
 80205a4:	1c5a      	adds	r2, r3, #1
 80205a6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80205aa:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80205ae:	f807 cc01 	strb.w	ip, [r7, #-1]
 80205b2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80205b4:	3703      	adds	r7, #3
 80205b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80205ba:	441d      	add	r5, r3
 80205bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80205be:	441e      	add	r6, r3
 80205c0:	e64e      	b.n	8020260 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80205c2:	2800      	cmp	r0, #0
 80205c4:	f43f aeed 	beq.w	80203a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80205c8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80205cc:	9108      	str	r1, [sp, #32]
 80205ce:	0e09      	lsrs	r1, r1, #24
 80205d0:	9110      	str	r1, [sp, #64]	; 0x40
 80205d2:	e6e6      	b.n	80203a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80205d4:	f807 0c03 	strb.w	r0, [r7, #-3]
 80205d8:	f807 1c02 	strb.w	r1, [r7, #-2]
 80205dc:	e7e7      	b.n	80205ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80205de:	b019      	add	sp, #100	; 0x64
 80205e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080205e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80205e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 80205ec:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80205f0:	2c00      	cmp	r4, #0
 80205f2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80205f6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80205fa:	fb00 4e03 	mla	lr, r0, r3, r4
 80205fe:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8020602:	f2c0 80b8 	blt.w	8020776 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020606:	45a1      	cmp	r9, r4
 8020608:	f340 80b5 	ble.w	8020776 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802060c:	2800      	cmp	r0, #0
 802060e:	f2c0 80b2 	blt.w	8020776 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020612:	4580      	cmp	r8, r0
 8020614:	f340 80af 	ble.w	8020776 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8020618:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802061c:	f01e 0f01 	tst.w	lr, #1
 8020620:	5d56      	ldrb	r6, [r2, r5]
 8020622:	bf0c      	ite	eq
 8020624:	f006 060f 	andeq.w	r6, r6, #15
 8020628:	1136      	asrne	r6, r6, #4
 802062a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802062e:	b2f6      	uxtb	r6, r6
 8020630:	f114 0a01 	adds.w	sl, r4, #1
 8020634:	f100 80a1 	bmi.w	802077a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020638:	45d1      	cmp	r9, sl
 802063a:	f340 809e 	ble.w	802077a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802063e:	2800      	cmp	r0, #0
 8020640:	f2c0 809b 	blt.w	802077a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8020644:	4580      	cmp	r8, r0
 8020646:	f340 8098 	ble.w	802077a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802064a:	2f00      	cmp	r7, #0
 802064c:	f000 8097 	beq.w	802077e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8020650:	f10e 0b01 	add.w	fp, lr, #1
 8020654:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020658:	f01b 0f01 	tst.w	fp, #1
 802065c:	5d55      	ldrb	r5, [r2, r5]
 802065e:	bf0c      	ite	eq
 8020660:	f005 050f 	andeq.w	r5, r5, #15
 8020664:	112d      	asrne	r5, r5, #4
 8020666:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802066a:	b2ed      	uxtb	r5, r5
 802066c:	f1bc 0f00 	cmp.w	ip, #0
 8020670:	f000 8089 	beq.w	8020786 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8020674:	2c00      	cmp	r4, #0
 8020676:	f100 0001 	add.w	r0, r0, #1
 802067a:	f2c0 8082 	blt.w	8020782 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802067e:	45a1      	cmp	r9, r4
 8020680:	dd7f      	ble.n	8020782 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020682:	2800      	cmp	r0, #0
 8020684:	db7d      	blt.n	8020782 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8020686:	4580      	cmp	r8, r0
 8020688:	dd7b      	ble.n	8020782 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802068a:	eb03 0b0e 	add.w	fp, r3, lr
 802068e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8020692:	f01b 0f01 	tst.w	fp, #1
 8020696:	5d14      	ldrb	r4, [r2, r4]
 8020698:	bf0c      	ite	eq
 802069a:	f004 040f 	andeq.w	r4, r4, #15
 802069e:	1124      	asrne	r4, r4, #4
 80206a0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80206a4:	b2e4      	uxtb	r4, r4
 80206a6:	f1ba 0f00 	cmp.w	sl, #0
 80206aa:	db6f      	blt.n	802078c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80206ac:	45d1      	cmp	r9, sl
 80206ae:	dd6d      	ble.n	802078c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80206b0:	2800      	cmp	r0, #0
 80206b2:	db6b      	blt.n	802078c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80206b4:	4580      	cmp	r8, r0
 80206b6:	dd69      	ble.n	802078c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80206b8:	2f00      	cmp	r7, #0
 80206ba:	d069      	beq.n	8020790 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80206bc:	3301      	adds	r3, #1
 80206be:	449e      	add	lr, r3
 80206c0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80206c4:	f01e 0f01 	tst.w	lr, #1
 80206c8:	5cd0      	ldrb	r0, [r2, r3]
 80206ca:	bf0c      	ite	eq
 80206cc:	f000 000f 	andeq.w	r0, r0, #15
 80206d0:	1100      	asrne	r0, r0, #4
 80206d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80206d6:	b2c3      	uxtb	r3, r0
 80206d8:	b2ba      	uxth	r2, r7
 80206da:	fa1f fc8c 	uxth.w	ip, ip
 80206de:	fb02 f00c 	mul.w	r0, r2, ip
 80206e2:	0112      	lsls	r2, r2, #4
 80206e4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80206e8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80206ec:	1a12      	subs	r2, r2, r0
 80206ee:	fa1f fc8c 	uxth.w	ip, ip
 80206f2:	b292      	uxth	r2, r2
 80206f4:	eba7 070c 	sub.w	r7, r7, ip
 80206f8:	436a      	muls	r2, r5
 80206fa:	b2bf      	uxth	r7, r7
 80206fc:	fb06 2207 	mla	r2, r6, r7, r2
 8020700:	fb0c 2404 	mla	r4, ip, r4, r2
 8020704:	fb00 4303 	mla	r3, r0, r3, r4
 8020708:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802070c:	b38b      	cbz	r3, 8020772 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802070e:	4a21      	ldr	r2, [pc, #132]	; (8020794 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8020710:	6814      	ldr	r4, [r2, #0]
 8020712:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8020716:	b2e5      	uxtb	r5, r4
 8020718:	4353      	muls	r3, r2
 802071a:	1c5a      	adds	r2, r3, #1
 802071c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020720:	1212      	asrs	r2, r2, #8
 8020722:	b290      	uxth	r0, r2
 8020724:	43d2      	mvns	r2, r2
 8020726:	fb15 f500 	smulbb	r5, r5, r0
 802072a:	b2d3      	uxtb	r3, r2
 802072c:	780a      	ldrb	r2, [r1, #0]
 802072e:	fb02 5203 	mla	r2, r2, r3, r5
 8020732:	b292      	uxth	r2, r2
 8020734:	1c55      	adds	r5, r2, #1
 8020736:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802073a:	784d      	ldrb	r5, [r1, #1]
 802073c:	fb15 f503 	smulbb	r5, r5, r3
 8020740:	1212      	asrs	r2, r2, #8
 8020742:	700a      	strb	r2, [r1, #0]
 8020744:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8020748:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802074c:	fb02 5200 	mla	r2, r2, r0, r5
 8020750:	b292      	uxth	r2, r2
 8020752:	1c55      	adds	r5, r2, #1
 8020754:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8020758:	1212      	asrs	r2, r2, #8
 802075a:	704a      	strb	r2, [r1, #1]
 802075c:	788a      	ldrb	r2, [r1, #2]
 802075e:	fb12 f303 	smulbb	r3, r2, r3
 8020762:	fb04 3300 	mla	r3, r4, r0, r3
 8020766:	b29b      	uxth	r3, r3
 8020768:	1c5a      	adds	r2, r3, #1
 802076a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802076e:	121b      	asrs	r3, r3, #8
 8020770:	708b      	strb	r3, [r1, #2]
 8020772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020776:	2600      	movs	r6, #0
 8020778:	e75a      	b.n	8020630 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802077a:	2500      	movs	r5, #0
 802077c:	e776      	b.n	802066c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 802077e:	463d      	mov	r5, r7
 8020780:	e774      	b.n	802066c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8020782:	2400      	movs	r4, #0
 8020784:	e78f      	b.n	80206a6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 8020786:	4663      	mov	r3, ip
 8020788:	4664      	mov	r4, ip
 802078a:	e7a5      	b.n	80206d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 802078c:	2300      	movs	r3, #0
 802078e:	e7a3      	b.n	80206d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020790:	463b      	mov	r3, r7
 8020792:	e7a1      	b.n	80206d8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8020794:	2400ea44 	.word	0x2400ea44

08020798 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802079c:	b097      	sub	sp, #92	; 0x5c
 802079e:	9214      	str	r2, [sp, #80]	; 0x50
 80207a0:	9309      	str	r3, [sp, #36]	; 0x24
 80207a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80207a4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80207a8:	9015      	str	r0, [sp, #84]	; 0x54
 80207aa:	910c      	str	r1, [sp, #48]	; 0x30
 80207ac:	6850      	ldr	r0, [r2, #4]
 80207ae:	930e      	str	r3, [sp, #56]	; 0x38
 80207b0:	6812      	ldr	r2, [r2, #0]
 80207b2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80207b6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80207ba:	fb00 1303 	mla	r3, r0, r3, r1
 80207be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80207c2:	eb02 0a03 	add.w	sl, r2, r3
 80207c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207c8:	689b      	ldr	r3, [r3, #8]
 80207ca:	3301      	adds	r3, #1
 80207cc:	f023 0301 	bic.w	r3, r3, #1
 80207d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80207d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207d4:	681f      	ldr	r7, [r3, #0]
 80207d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80207d8:	2b00      	cmp	r3, #0
 80207da:	dc03      	bgt.n	80207e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80207dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80207de:	2b00      	cmp	r3, #0
 80207e0:	f340 8247 	ble.w	8020c72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80207e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80207e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80207ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80207ee:	1e48      	subs	r0, r1, #1
 80207f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80207f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	f340 80e5 	ble.w	80209c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80207fc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8020800:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020804:	d406      	bmi.n	8020814 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020806:	4586      	cmp	lr, r0
 8020808:	da04      	bge.n	8020814 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802080a:	2b00      	cmp	r3, #0
 802080c:	db02      	blt.n	8020814 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802080e:	4563      	cmp	r3, ip
 8020810:	f2c0 80da 	blt.w	80209c8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020814:	f11e 0e01 	adds.w	lr, lr, #1
 8020818:	f100 80cb 	bmi.w	80209b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802081c:	4571      	cmp	r1, lr
 802081e:	f2c0 80c8 	blt.w	80209b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020822:	3301      	adds	r3, #1
 8020824:	f100 80c5 	bmi.w	80209b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8020828:	429a      	cmp	r2, r3
 802082a:	f2c0 80c2 	blt.w	80209b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802082e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020830:	46d0      	mov	r8, sl
 8020832:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020836:	930d      	str	r3, [sp, #52]	; 0x34
 8020838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802083a:	2b00      	cmp	r3, #0
 802083c:	f340 80e3 	ble.w	8020a06 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8020840:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020842:	1430      	asrs	r0, r6, #16
 8020844:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020848:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802084c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020850:	142b      	asrs	r3, r5, #16
 8020852:	f100 812e 	bmi.w	8020ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020856:	f10c 3bff 	add.w	fp, ip, #4294967295
 802085a:	455b      	cmp	r3, fp
 802085c:	f280 8129 	bge.w	8020ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020860:	2800      	cmp	r0, #0
 8020862:	f2c0 8126 	blt.w	8020ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020866:	f10e 3bff 	add.w	fp, lr, #4294967295
 802086a:	4558      	cmp	r0, fp
 802086c:	f280 8121 	bge.w	8020ab2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020870:	fb00 3309 	mla	r3, r0, r9, r3
 8020874:	0858      	lsrs	r0, r3, #1
 8020876:	07dc      	lsls	r4, r3, #31
 8020878:	f817 c000 	ldrb.w	ip, [r7, r0]
 802087c:	bf54      	ite	pl
 802087e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020882:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020886:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802088a:	fa5f fc8c 	uxtb.w	ip, ip
 802088e:	2a00      	cmp	r2, #0
 8020890:	f000 80fe 	beq.w	8020a90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8020894:	1c58      	adds	r0, r3, #1
 8020896:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802089a:	07c0      	lsls	r0, r0, #31
 802089c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80208a0:	bf54      	ite	pl
 80208a2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80208a6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80208aa:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80208ae:	fa5f f08e 	uxtb.w	r0, lr
 80208b2:	9010      	str	r0, [sp, #64]	; 0x40
 80208b4:	b1d9      	cbz	r1, 80208ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80208b6:	444b      	add	r3, r9
 80208b8:	0858      	lsrs	r0, r3, #1
 80208ba:	07dc      	lsls	r4, r3, #31
 80208bc:	f103 0301 	add.w	r3, r3, #1
 80208c0:	5c38      	ldrb	r0, [r7, r0]
 80208c2:	bf54      	ite	pl
 80208c4:	f000 000f 	andpl.w	r0, r0, #15
 80208c8:	1100      	asrmi	r0, r0, #4
 80208ca:	07dc      	lsls	r4, r3, #31
 80208cc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80208d0:	b2c0      	uxtb	r0, r0
 80208d2:	900a      	str	r0, [sp, #40]	; 0x28
 80208d4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80208d8:	f817 e000 	ldrb.w	lr, [r7, r0]
 80208dc:	bf54      	ite	pl
 80208de:	f00e 030f 	andpl.w	r3, lr, #15
 80208e2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80208e6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80208ea:	b2db      	uxtb	r3, r3
 80208ec:	9311      	str	r3, [sp, #68]	; 0x44
 80208ee:	b292      	uxth	r2, r2
 80208f0:	b289      	uxth	r1, r1
 80208f2:	0113      	lsls	r3, r2, #4
 80208f4:	fb02 f001 	mul.w	r0, r2, r1
 80208f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208fa:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80208fe:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8020902:	1a1b      	subs	r3, r3, r0
 8020904:	b289      	uxth	r1, r1
 8020906:	b29b      	uxth	r3, r3
 8020908:	ebae 0e01 	sub.w	lr, lr, r1
 802090c:	4353      	muls	r3, r2
 802090e:	fa1f fe8e 	uxth.w	lr, lr
 8020912:	fb0c 320e 	mla	r2, ip, lr, r3
 8020916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020918:	fb01 2203 	mla	r2, r1, r3, r2
 802091c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802091e:	fb00 2203 	mla	r2, r0, r3, r2
 8020922:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020926:	2a00      	cmp	r2, #0
 8020928:	d039      	beq.n	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802092a:	4bc7      	ldr	r3, [pc, #796]	; (8020c48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802092c:	6819      	ldr	r1, [r3, #0]
 802092e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020930:	fa5f fc81 	uxtb.w	ip, r1
 8020934:	435a      	muls	r2, r3
 8020936:	1c53      	adds	r3, r2, #1
 8020938:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802093c:	1212      	asrs	r2, r2, #8
 802093e:	b290      	uxth	r0, r2
 8020940:	43d2      	mvns	r2, r2
 8020942:	fb1c fc00 	smulbb	ip, ip, r0
 8020946:	b2d3      	uxtb	r3, r2
 8020948:	f898 2000 	ldrb.w	r2, [r8]
 802094c:	fb02 c203 	mla	r2, r2, r3, ip
 8020950:	b292      	uxth	r2, r2
 8020952:	f102 0c01 	add.w	ip, r2, #1
 8020956:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802095a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802095e:	fb1c fc03 	smulbb	ip, ip, r3
 8020962:	1212      	asrs	r2, r2, #8
 8020964:	f888 2000 	strb.w	r2, [r8]
 8020968:	f3c1 2207 	ubfx	r2, r1, #8, #8
 802096c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8020970:	fb02 c200 	mla	r2, r2, r0, ip
 8020974:	b292      	uxth	r2, r2
 8020976:	f102 0c01 	add.w	ip, r2, #1
 802097a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802097e:	1212      	asrs	r2, r2, #8
 8020980:	f888 2001 	strb.w	r2, [r8, #1]
 8020984:	f898 2002 	ldrb.w	r2, [r8, #2]
 8020988:	fb12 f303 	smulbb	r3, r2, r3
 802098c:	fb01 3300 	mla	r3, r1, r0, r3
 8020990:	b29b      	uxth	r3, r3
 8020992:	1c5a      	adds	r2, r3, #1
 8020994:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020998:	121b      	asrs	r3, r3, #8
 802099a:	f888 3002 	strb.w	r3, [r8, #2]
 802099e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80209a0:	f108 0803 	add.w	r8, r8, #3
 80209a4:	441d      	add	r5, r3
 80209a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80209a8:	441e      	add	r6, r3
 80209aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209ac:	3b01      	subs	r3, #1
 80209ae:	930d      	str	r3, [sp, #52]	; 0x34
 80209b0:	e742      	b.n	8020838 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80209b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80209b4:	f10a 0a03 	add.w	sl, sl, #3
 80209b8:	441d      	add	r5, r3
 80209ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80209bc:	441e      	add	r6, r3
 80209be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209c0:	3b01      	subs	r3, #1
 80209c2:	9309      	str	r3, [sp, #36]	; 0x24
 80209c4:	e716      	b.n	80207f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80209c6:	d024      	beq.n	8020a12 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80209c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80209ca:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80209cc:	3b01      	subs	r3, #1
 80209ce:	fb00 5003 	mla	r0, r0, r3, r5
 80209d2:	1400      	asrs	r0, r0, #16
 80209d4:	f53f af2b 	bmi.w	802082e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209d8:	3901      	subs	r1, #1
 80209da:	4288      	cmp	r0, r1
 80209dc:	f6bf af27 	bge.w	802082e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209e0:	9924      	ldr	r1, [sp, #144]	; 0x90
 80209e2:	fb01 6303 	mla	r3, r1, r3, r6
 80209e6:	141b      	asrs	r3, r3, #16
 80209e8:	f53f af21 	bmi.w	802082e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209ec:	3a01      	subs	r2, #1
 80209ee:	4293      	cmp	r3, r2
 80209f0:	f6bf af1d 	bge.w	802082e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80209f4:	f10a 0e03 	add.w	lr, sl, #3
 80209f8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80209fc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8020a00:	f1b8 0f00 	cmp.w	r8, #0
 8020a04:	dc76      	bgt.n	8020af4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8020a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020a0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020a10:	44a2      	add	sl, r4
 8020a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a14:	2b00      	cmp	r3, #0
 8020a16:	f340 812c 	ble.w	8020c72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8020a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020a1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a28:	eef0 6a62 	vmov.f32	s13, s5
 8020a2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020a30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a38:	ee16 5a90 	vmov	r5, s13
 8020a3c:	eef0 6a43 	vmov.f32	s13, s6
 8020a40:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020a44:	ee16 6a90 	vmov	r6, s13
 8020a48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a60:	ee12 2a90 	vmov	r2, s5
 8020a64:	eef0 2a47 	vmov.f32	s5, s14
 8020a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a6c:	ee13 2a10 	vmov	r2, s6
 8020a70:	9323      	str	r3, [sp, #140]	; 0x8c
 8020a72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a74:	eeb0 3a67 	vmov.f32	s6, s15
 8020a78:	fb92 f3f3 	sdiv	r3, r2, r3
 8020a7c:	9324      	str	r3, [sp, #144]	; 0x90
 8020a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a82:	3b01      	subs	r3, #1
 8020a84:	930c      	str	r3, [sp, #48]	; 0x30
 8020a86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020a88:	bf08      	it	eq
 8020a8a:	4613      	moveq	r3, r2
 8020a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8020a8e:	e6a2      	b.n	80207d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020a90:	2900      	cmp	r1, #0
 8020a92:	f43f af2c 	beq.w	80208ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020a96:	eb09 0003 	add.w	r0, r9, r3
 8020a9a:	0843      	lsrs	r3, r0, #1
 8020a9c:	07c0      	lsls	r0, r0, #31
 8020a9e:	5cfb      	ldrb	r3, [r7, r3]
 8020aa0:	bf54      	ite	pl
 8020aa2:	f003 030f 	andpl.w	r3, r3, #15
 8020aa6:	111b      	asrmi	r3, r3, #4
 8020aa8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020aac:	b2db      	uxtb	r3, r3
 8020aae:	930a      	str	r3, [sp, #40]	; 0x28
 8020ab0:	e71d      	b.n	80208ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020ab2:	f113 0b01 	adds.w	fp, r3, #1
 8020ab6:	f53f af72 	bmi.w	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020aba:	45dc      	cmp	ip, fp
 8020abc:	f6ff af6f 	blt.w	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ac0:	f110 0b01 	adds.w	fp, r0, #1
 8020ac4:	f53f af6b 	bmi.w	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ac8:	45de      	cmp	lr, fp
 8020aca:	f6ff af68 	blt.w	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020ace:	9302      	str	r3, [sp, #8]
 8020ad0:	fa0f f38e 	sxth.w	r3, lr
 8020ad4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020ad6:	9301      	str	r3, [sp, #4]
 8020ad8:	fa0f f38c 	sxth.w	r3, ip
 8020adc:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8020ae0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020ae4:	9300      	str	r3, [sp, #0]
 8020ae6:	463a      	mov	r2, r7
 8020ae8:	464b      	mov	r3, r9
 8020aea:	4641      	mov	r1, r8
 8020aec:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020aee:	f7ff fd79 	bl	80205e4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8020af2:	e754      	b.n	802099e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8020af4:	142a      	asrs	r2, r5, #16
 8020af6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020afa:	1433      	asrs	r3, r6, #16
 8020afc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020b00:	fb09 2303 	mla	r3, r9, r3, r2
 8020b04:	085a      	lsrs	r2, r3, #1
 8020b06:	07dc      	lsls	r4, r3, #31
 8020b08:	5cba      	ldrb	r2, [r7, r2]
 8020b0a:	bf54      	ite	pl
 8020b0c:	f002 020f 	andpl.w	r2, r2, #15
 8020b10:	1112      	asrmi	r2, r2, #4
 8020b12:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020b16:	b2d2      	uxtb	r2, r2
 8020b18:	2900      	cmp	r1, #0
 8020b1a:	f000 8097 	beq.w	8020c4c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8020b1e:	f103 0b01 	add.w	fp, r3, #1
 8020b22:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8020b26:	f01b 0f01 	tst.w	fp, #1
 8020b2a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020b2e:	bf0c      	ite	eq
 8020b30:	f00c 0c0f 	andeq.w	ip, ip, #15
 8020b34:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8020b38:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020b3c:	fa5f f48c 	uxtb.w	r4, ip
 8020b40:	9412      	str	r4, [sp, #72]	; 0x48
 8020b42:	b300      	cbz	r0, 8020b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020b44:	444b      	add	r3, r9
 8020b46:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020b4a:	07dc      	lsls	r4, r3, #31
 8020b4c:	f103 0301 	add.w	r3, r3, #1
 8020b50:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020b54:	bf54      	ite	pl
 8020b56:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020b5a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020b5e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020b62:	fa5f f48c 	uxtb.w	r4, ip
 8020b66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020b6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8020b6c:	07dc      	lsls	r4, r3, #31
 8020b6e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020b72:	bf54      	ite	pl
 8020b74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020b78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020b7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020b80:	fa5f f38c 	uxtb.w	r3, ip
 8020b84:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b86:	b289      	uxth	r1, r1
 8020b88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020b8a:	b280      	uxth	r0, r0
 8020b8c:	fb01 f300 	mul.w	r3, r1, r0
 8020b90:	0109      	lsls	r1, r1, #4
 8020b92:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8020b96:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8020b9a:	1ac9      	subs	r1, r1, r3
 8020b9c:	b280      	uxth	r0, r0
 8020b9e:	b289      	uxth	r1, r1
 8020ba0:	ebac 0c00 	sub.w	ip, ip, r0
 8020ba4:	4361      	muls	r1, r4
 8020ba6:	fa1f fc8c 	uxth.w	ip, ip
 8020baa:	fb02 120c 	mla	r2, r2, ip, r1
 8020bae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020bb0:	fb00 2001 	mla	r0, r0, r1, r2
 8020bb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020bb6:	fb03 0302 	mla	r3, r3, r2, r0
 8020bba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	d039      	beq.n	8020c36 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020bc2:	4a21      	ldr	r2, [pc, #132]	; (8020c48 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8020bc4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8020bc8:	6810      	ldr	r0, [r2, #0]
 8020bca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020bcc:	fa5f fc80 	uxtb.w	ip, r0
 8020bd0:	4353      	muls	r3, r2
 8020bd2:	1c5a      	adds	r2, r3, #1
 8020bd4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020bd8:	121b      	asrs	r3, r3, #8
 8020bda:	b29a      	uxth	r2, r3
 8020bdc:	43db      	mvns	r3, r3
 8020bde:	fb1c fc02 	smulbb	ip, ip, r2
 8020be2:	b2db      	uxtb	r3, r3
 8020be4:	fb01 c103 	mla	r1, r1, r3, ip
 8020be8:	b289      	uxth	r1, r1
 8020bea:	f101 0c01 	add.w	ip, r1, #1
 8020bee:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020bf2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8020bf6:	fb1c fc03 	smulbb	ip, ip, r3
 8020bfa:	1209      	asrs	r1, r1, #8
 8020bfc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8020c00:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8020c04:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8020c08:	fb01 c102 	mla	r1, r1, r2, ip
 8020c0c:	b289      	uxth	r1, r1
 8020c0e:	f101 0c01 	add.w	ip, r1, #1
 8020c12:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8020c16:	1209      	asrs	r1, r1, #8
 8020c18:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8020c1c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8020c20:	fb11 f303 	smulbb	r3, r1, r3
 8020c24:	fb00 3002 	mla	r0, r0, r2, r3
 8020c28:	b280      	uxth	r0, r0
 8020c2a:	1c42      	adds	r2, r0, #1
 8020c2c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020c30:	1200      	asrs	r0, r0, #8
 8020c32:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8020c36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020c38:	f10e 0e03 	add.w	lr, lr, #3
 8020c3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8020c40:	441d      	add	r5, r3
 8020c42:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020c44:	441e      	add	r6, r3
 8020c46:	e6db      	b.n	8020a00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8020c48:	2400ea44 	.word	0x2400ea44
 8020c4c:	2800      	cmp	r0, #0
 8020c4e:	d09a      	beq.n	8020b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020c50:	444b      	add	r3, r9
 8020c52:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8020c56:	07db      	lsls	r3, r3, #31
 8020c58:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8020c5c:	bf54      	ite	pl
 8020c5e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020c62:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020c66:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020c6a:	fa5f f38c 	uxtb.w	r3, ip
 8020c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020c70:	e789      	b.n	8020b86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8020c72:	b017      	add	sp, #92	; 0x5c
 8020c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020c78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 8020c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c7c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 8020c80:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020c84:	2d00      	cmp	r5, #0
 8020c86:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8020c8a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8020c8e:	fb04 5e03 	mla	lr, r4, r3, r5
 8020c92:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8020c96:	f2c0 80b1 	blt.w	8020dfc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020c9a:	45a9      	cmp	r9, r5
 8020c9c:	f340 80ae 	ble.w	8020dfc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020ca0:	2c00      	cmp	r4, #0
 8020ca2:	f2c0 80ab 	blt.w	8020dfc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020ca6:	45a0      	cmp	r8, r4
 8020ca8:	f340 80a8 	ble.w	8020dfc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 8020cac:	ea4f 065e 	mov.w	r6, lr, lsr #1
 8020cb0:	f01e 0f01 	tst.w	lr, #1
 8020cb4:	5d97      	ldrb	r7, [r2, r6]
 8020cb6:	bf0c      	ite	eq
 8020cb8:	f007 070f 	andeq.w	r7, r7, #15
 8020cbc:	113f      	asrne	r7, r7, #4
 8020cbe:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8020cc2:	b2ff      	uxtb	r7, r7
 8020cc4:	f115 0a01 	adds.w	sl, r5, #1
 8020cc8:	f100 809a 	bmi.w	8020e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020ccc:	45d1      	cmp	r9, sl
 8020cce:	f340 8097 	ble.w	8020e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020cd2:	2c00      	cmp	r4, #0
 8020cd4:	f2c0 8094 	blt.w	8020e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020cd8:	45a0      	cmp	r8, r4
 8020cda:	f340 8091 	ble.w	8020e00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8020cde:	2800      	cmp	r0, #0
 8020ce0:	f000 8090 	beq.w	8020e04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8020ce4:	f10e 0b01 	add.w	fp, lr, #1
 8020ce8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 8020cec:	f01b 0f01 	tst.w	fp, #1
 8020cf0:	5d96      	ldrb	r6, [r2, r6]
 8020cf2:	bf0c      	ite	eq
 8020cf4:	f006 060f 	andeq.w	r6, r6, #15
 8020cf8:	1136      	asrne	r6, r6, #4
 8020cfa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020cfe:	b2f6      	uxtb	r6, r6
 8020d00:	f1bc 0f00 	cmp.w	ip, #0
 8020d04:	f000 8082 	beq.w	8020e0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8020d08:	2d00      	cmp	r5, #0
 8020d0a:	f104 0401 	add.w	r4, r4, #1
 8020d0e:	db7b      	blt.n	8020e08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020d10:	45a9      	cmp	r9, r5
 8020d12:	dd79      	ble.n	8020e08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020d14:	2c00      	cmp	r4, #0
 8020d16:	db77      	blt.n	8020e08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020d18:	45a0      	cmp	r8, r4
 8020d1a:	dd75      	ble.n	8020e08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8020d1c:	eb03 0b0e 	add.w	fp, r3, lr
 8020d20:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8020d24:	f01b 0f01 	tst.w	fp, #1
 8020d28:	5d55      	ldrb	r5, [r2, r5]
 8020d2a:	bf0c      	ite	eq
 8020d2c:	f005 050f 	andeq.w	r5, r5, #15
 8020d30:	112d      	asrne	r5, r5, #4
 8020d32:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020d36:	b2ed      	uxtb	r5, r5
 8020d38:	f1ba 0f00 	cmp.w	sl, #0
 8020d3c:	db69      	blt.n	8020e12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020d3e:	45d1      	cmp	r9, sl
 8020d40:	dd67      	ble.n	8020e12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020d42:	2c00      	cmp	r4, #0
 8020d44:	db65      	blt.n	8020e12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020d46:	45a0      	cmp	r8, r4
 8020d48:	dd63      	ble.n	8020e12 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8020d4a:	2800      	cmp	r0, #0
 8020d4c:	d063      	beq.n	8020e16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8020d4e:	3301      	adds	r3, #1
 8020d50:	449e      	add	lr, r3
 8020d52:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020d56:	f01e 0f01 	tst.w	lr, #1
 8020d5a:	5cd4      	ldrb	r4, [r2, r3]
 8020d5c:	bf0c      	ite	eq
 8020d5e:	f004 040f 	andeq.w	r4, r4, #15
 8020d62:	1124      	asrne	r4, r4, #4
 8020d64:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020d68:	b2e3      	uxtb	r3, r4
 8020d6a:	b282      	uxth	r2, r0
 8020d6c:	fa1f fc8c 	uxth.w	ip, ip
 8020d70:	fb02 f40c 	mul.w	r4, r2, ip
 8020d74:	0112      	lsls	r2, r2, #4
 8020d76:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8020d7a:	fa1f f08c 	uxth.w	r0, ip
 8020d7e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8020d82:	1b12      	subs	r2, r2, r4
 8020d84:	ebac 0c00 	sub.w	ip, ip, r0
 8020d88:	b292      	uxth	r2, r2
 8020d8a:	fa1f fc8c 	uxth.w	ip, ip
 8020d8e:	4372      	muls	r2, r6
 8020d90:	fb07 220c 	mla	r2, r7, ip, r2
 8020d94:	fb00 2005 	mla	r0, r0, r5, r2
 8020d98:	fb04 0303 	mla	r3, r4, r3, r0
 8020d9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020da0:	b353      	cbz	r3, 8020df8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8020da2:	4a1e      	ldr	r2, [pc, #120]	; (8020e1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8020da4:	7808      	ldrb	r0, [r1, #0]
 8020da6:	6814      	ldr	r4, [r2, #0]
 8020da8:	b29a      	uxth	r2, r3
 8020daa:	43db      	mvns	r3, r3
 8020dac:	b2e5      	uxtb	r5, r4
 8020dae:	b2db      	uxtb	r3, r3
 8020db0:	fb15 f502 	smulbb	r5, r5, r2
 8020db4:	fb00 5003 	mla	r0, r0, r3, r5
 8020db8:	b280      	uxth	r0, r0
 8020dba:	1c45      	adds	r5, r0, #1
 8020dbc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020dc0:	784d      	ldrb	r5, [r1, #1]
 8020dc2:	fb15 f503 	smulbb	r5, r5, r3
 8020dc6:	1200      	asrs	r0, r0, #8
 8020dc8:	7008      	strb	r0, [r1, #0]
 8020dca:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8020dce:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8020dd2:	fb00 5002 	mla	r0, r0, r2, r5
 8020dd6:	b280      	uxth	r0, r0
 8020dd8:	1c45      	adds	r5, r0, #1
 8020dda:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020dde:	1200      	asrs	r0, r0, #8
 8020de0:	7048      	strb	r0, [r1, #1]
 8020de2:	7888      	ldrb	r0, [r1, #2]
 8020de4:	fb10 f303 	smulbb	r3, r0, r3
 8020de8:	fb04 3202 	mla	r2, r4, r2, r3
 8020dec:	b292      	uxth	r2, r2
 8020dee:	1c53      	adds	r3, r2, #1
 8020df0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8020df4:	1212      	asrs	r2, r2, #8
 8020df6:	708a      	strb	r2, [r1, #2]
 8020df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dfc:	2700      	movs	r7, #0
 8020dfe:	e761      	b.n	8020cc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8020e00:	2600      	movs	r6, #0
 8020e02:	e77d      	b.n	8020d00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020e04:	4606      	mov	r6, r0
 8020e06:	e77b      	b.n	8020d00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8020e08:	2500      	movs	r5, #0
 8020e0a:	e795      	b.n	8020d38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8020e0c:	4663      	mov	r3, ip
 8020e0e:	4665      	mov	r5, ip
 8020e10:	e7ab      	b.n	8020d6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020e12:	2300      	movs	r3, #0
 8020e14:	e7a9      	b.n	8020d6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020e16:	4603      	mov	r3, r0
 8020e18:	e7a7      	b.n	8020d6a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8020e1a:	bf00      	nop
 8020e1c:	2400ea44 	.word	0x2400ea44

08020e20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e24:	b093      	sub	sp, #76	; 0x4c
 8020e26:	461c      	mov	r4, r3
 8020e28:	920c      	str	r2, [sp, #48]	; 0x30
 8020e2a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020e2c:	9011      	str	r0, [sp, #68]	; 0x44
 8020e2e:	9107      	str	r1, [sp, #28]
 8020e30:	6850      	ldr	r0, [r2, #4]
 8020e32:	6812      	ldr	r2, [r2, #0]
 8020e34:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8020e38:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 8020e3c:	fb00 1303 	mla	r3, r0, r3, r1
 8020e40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020e44:	eb02 0b03 	add.w	fp, r2, r3
 8020e48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e4a:	689b      	ldr	r3, [r3, #8]
 8020e4c:	3301      	adds	r3, #1
 8020e4e:	f023 0301 	bic.w	r3, r3, #1
 8020e52:	9309      	str	r3, [sp, #36]	; 0x24
 8020e54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e56:	f8d3 8000 	ldr.w	r8, [r3]
 8020e5a:	9b07      	ldr	r3, [sp, #28]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	dc03      	bgt.n	8020e68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020e60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e62:	2b00      	cmp	r3, #0
 8020e64:	f340 822b 	ble.w	80212be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020e68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e72:	1e48      	subs	r0, r1, #1
 8020e74:	1e57      	subs	r7, r2, #1
 8020e76:	2c00      	cmp	r4, #0
 8020e78:	f340 80d7 	ble.w	802102a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8020e7c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8020e80:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020e84:	d406      	bmi.n	8020e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e86:	4584      	cmp	ip, r0
 8020e88:	da04      	bge.n	8020e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e8a:	2b00      	cmp	r3, #0
 8020e8c:	db02      	blt.n	8020e94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020e8e:	42bb      	cmp	r3, r7
 8020e90:	f2c0 80cc 	blt.w	802102c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8020e94:	f11c 0c01 	adds.w	ip, ip, #1
 8020e98:	f100 80bf 	bmi.w	802101a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020e9c:	4561      	cmp	r1, ip
 8020e9e:	f2c0 80bc 	blt.w	802101a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020ea2:	3301      	adds	r3, #1
 8020ea4:	f100 80b9 	bmi.w	802101a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020ea8:	429a      	cmp	r2, r3
 8020eaa:	f2c0 80b6 	blt.w	802101a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8020eae:	46a2      	mov	sl, r4
 8020eb0:	465f      	mov	r7, fp
 8020eb2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020eb6:	f1ba 0f00 	cmp.w	sl, #0
 8020eba:	f340 80d4 	ble.w	8021066 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8020ebe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8020ec2:	1430      	asrs	r0, r6, #16
 8020ec4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020ec8:	9308      	str	r3, [sp, #32]
 8020eca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020ecc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020ed0:	142b      	asrs	r3, r5, #16
 8020ed2:	f100 8124 	bmi.w	802111e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020ed6:	f10c 32ff 	add.w	r2, ip, #4294967295
 8020eda:	4293      	cmp	r3, r2
 8020edc:	f280 811f 	bge.w	802111e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020ee0:	2800      	cmp	r0, #0
 8020ee2:	f2c0 811c 	blt.w	802111e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020ee6:	f10e 32ff 	add.w	r2, lr, #4294967295
 8020eea:	4290      	cmp	r0, r2
 8020eec:	f280 8117 	bge.w	802111e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8020ef0:	fb00 3309 	mla	r3, r0, r9, r3
 8020ef4:	0858      	lsrs	r0, r3, #1
 8020ef6:	07da      	lsls	r2, r3, #31
 8020ef8:	9a08      	ldr	r2, [sp, #32]
 8020efa:	f818 c000 	ldrb.w	ip, [r8, r0]
 8020efe:	bf54      	ite	pl
 8020f00:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020f04:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020f08:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020f0c:	fa5f fc8c 	uxtb.w	ip, ip
 8020f10:	2a00      	cmp	r2, #0
 8020f12:	f000 80ed 	beq.w	80210f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8020f16:	1c58      	adds	r0, r3, #1
 8020f18:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020f1c:	07c0      	lsls	r0, r0, #31
 8020f1e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8020f22:	bf54      	ite	pl
 8020f24:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020f28:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020f2c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020f30:	fa5f fe8e 	uxtb.w	lr, lr
 8020f34:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8020f38:	b1c9      	cbz	r1, 8020f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020f3a:	444b      	add	r3, r9
 8020f3c:	0858      	lsrs	r0, r3, #1
 8020f3e:	07da      	lsls	r2, r3, #31
 8020f40:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020f44:	bf54      	ite	pl
 8020f46:	f000 000f 	andpl.w	r0, r0, #15
 8020f4a:	1100      	asrmi	r0, r0, #4
 8020f4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020f50:	b2c0      	uxtb	r0, r0
 8020f52:	900a      	str	r0, [sp, #40]	; 0x28
 8020f54:	1c58      	adds	r0, r3, #1
 8020f56:	0843      	lsrs	r3, r0, #1
 8020f58:	07c2      	lsls	r2, r0, #31
 8020f5a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8020f5e:	bf54      	ite	pl
 8020f60:	f003 030f 	andpl.w	r3, r3, #15
 8020f64:	111b      	asrmi	r3, r3, #4
 8020f66:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020f6a:	b2db      	uxtb	r3, r3
 8020f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8020f6e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020f72:	b289      	uxth	r1, r1
 8020f74:	fb02 f301 	mul.w	r3, r2, r1
 8020f78:	0112      	lsls	r2, r2, #4
 8020f7a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020f7e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8020f82:	1ad2      	subs	r2, r2, r3
 8020f84:	b289      	uxth	r1, r1
 8020f86:	b292      	uxth	r2, r2
 8020f88:	1a40      	subs	r0, r0, r1
 8020f8a:	fa1f fe80 	uxth.w	lr, r0
 8020f8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020f90:	4342      	muls	r2, r0
 8020f92:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8020f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f98:	fb01 c102 	mla	r1, r1, r2, ip
 8020f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020f9e:	fb03 1302 	mla	r3, r3, r2, r1
 8020fa2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020fa6:	b383      	cbz	r3, 802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8020fa8:	4ac6      	ldr	r2, [pc, #792]	; (80212c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8020faa:	2bff      	cmp	r3, #255	; 0xff
 8020fac:	6812      	ldr	r2, [r2, #0]
 8020fae:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8020fb2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8020fb6:	b2d2      	uxtb	r2, r2
 8020fb8:	f000 80ac 	beq.w	8021114 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020fbc:	b299      	uxth	r1, r3
 8020fbe:	43db      	mvns	r3, r3
 8020fc0:	f897 c000 	ldrb.w	ip, [r7]
 8020fc4:	fb12 f201 	smulbb	r2, r2, r1
 8020fc8:	b2db      	uxtb	r3, r3
 8020fca:	fb10 f001 	smulbb	r0, r0, r1
 8020fce:	fb0c 2203 	mla	r2, ip, r3, r2
 8020fd2:	fb1e f101 	smulbb	r1, lr, r1
 8020fd6:	b292      	uxth	r2, r2
 8020fd8:	f102 0c01 	add.w	ip, r2, #1
 8020fdc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8020fe0:	1212      	asrs	r2, r2, #8
 8020fe2:	703a      	strb	r2, [r7, #0]
 8020fe4:	787a      	ldrb	r2, [r7, #1]
 8020fe6:	fb02 0003 	mla	r0, r2, r3, r0
 8020fea:	b280      	uxth	r0, r0
 8020fec:	1c42      	adds	r2, r0, #1
 8020fee:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020ff2:	78ba      	ldrb	r2, [r7, #2]
 8020ff4:	fb02 1303 	mla	r3, r2, r3, r1
 8020ff8:	1200      	asrs	r0, r0, #8
 8020ffa:	b29b      	uxth	r3, r3
 8020ffc:	7078      	strb	r0, [r7, #1]
 8020ffe:	f103 0e01 	add.w	lr, r3, #1
 8021002:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8021006:	121b      	asrs	r3, r3, #8
 8021008:	70bb      	strb	r3, [r7, #2]
 802100a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802100c:	3703      	adds	r7, #3
 802100e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8021012:	441d      	add	r5, r3
 8021014:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021016:	441e      	add	r6, r3
 8021018:	e74d      	b.n	8020eb6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802101a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802101c:	3c01      	subs	r4, #1
 802101e:	f10b 0b03 	add.w	fp, fp, #3
 8021022:	441d      	add	r5, r3
 8021024:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021026:	441e      	add	r6, r3
 8021028:	e725      	b.n	8020e76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802102a:	d021      	beq.n	8021070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802102c:	1e63      	subs	r3, r4, #1
 802102e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021030:	fb00 5003 	mla	r0, r0, r3, r5
 8021034:	1400      	asrs	r0, r0, #16
 8021036:	f53f af3a 	bmi.w	8020eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802103a:	3901      	subs	r1, #1
 802103c:	4288      	cmp	r0, r1
 802103e:	f6bf af36 	bge.w	8020eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021042:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021044:	fb01 6303 	mla	r3, r1, r3, r6
 8021048:	141b      	asrs	r3, r3, #16
 802104a:	f53f af30 	bmi.w	8020eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802104e:	3a01      	subs	r2, #1
 8021050:	4293      	cmp	r3, r2
 8021052:	f6bf af2c 	bge.w	8020eae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8021056:	f10b 0c03 	add.w	ip, fp, #3
 802105a:	46a6      	mov	lr, r4
 802105c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8021060:	f1be 0f00 	cmp.w	lr, #0
 8021064:	dc79      	bgt.n	802115a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8021066:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802106a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802106e:	44a3      	add	fp, r4
 8021070:	9b07      	ldr	r3, [sp, #28]
 8021072:	2b00      	cmp	r3, #0
 8021074:	f340 8123 	ble.w	80212be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8021078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802107c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802107e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021086:	eef0 6a62 	vmov.f32	s13, s5
 802108a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802108e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021092:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021096:	ee16 5a90 	vmov	r5, s13
 802109a:	eef0 6a43 	vmov.f32	s13, s6
 802109e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80210a2:	ee16 6a90 	vmov	r6, s13
 80210a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80210aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80210ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80210b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80210b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80210ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210be:	ee12 2a90 	vmov	r2, s5
 80210c2:	eef0 2a47 	vmov.f32	s5, s14
 80210c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80210ca:	ee13 2a10 	vmov	r2, s6
 80210ce:	931f      	str	r3, [sp, #124]	; 0x7c
 80210d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80210d2:	eeb0 3a67 	vmov.f32	s6, s15
 80210d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80210da:	9320      	str	r3, [sp, #128]	; 0x80
 80210dc:	9b07      	ldr	r3, [sp, #28]
 80210de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210e0:	3b01      	subs	r3, #1
 80210e2:	9307      	str	r3, [sp, #28]
 80210e4:	bf08      	it	eq
 80210e6:	4614      	moveq	r4, r2
 80210e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80210ea:	bf18      	it	ne
 80210ec:	461c      	movne	r4, r3
 80210ee:	e6b4      	b.n	8020e5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80210f0:	2900      	cmp	r1, #0
 80210f2:	f43f af3c 	beq.w	8020f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80210f6:	eb09 0003 	add.w	r0, r9, r3
 80210fa:	0843      	lsrs	r3, r0, #1
 80210fc:	07c0      	lsls	r0, r0, #31
 80210fe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8021102:	bf54      	ite	pl
 8021104:	f003 030f 	andpl.w	r3, r3, #15
 8021108:	111b      	asrmi	r3, r3, #4
 802110a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802110e:	b2db      	uxtb	r3, r3
 8021110:	930a      	str	r3, [sp, #40]	; 0x28
 8021112:	e72c      	b.n	8020f6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8021114:	703a      	strb	r2, [r7, #0]
 8021116:	7078      	strb	r0, [r7, #1]
 8021118:	f887 e002 	strb.w	lr, [r7, #2]
 802111c:	e775      	b.n	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802111e:	1c5a      	adds	r2, r3, #1
 8021120:	f53f af73 	bmi.w	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021124:	4594      	cmp	ip, r2
 8021126:	f6ff af70 	blt.w	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802112a:	1c42      	adds	r2, r0, #1
 802112c:	f53f af6d 	bmi.w	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021130:	4596      	cmp	lr, r2
 8021132:	f6ff af6a 	blt.w	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021136:	9302      	str	r3, [sp, #8]
 8021138:	fa0f f38e 	sxth.w	r3, lr
 802113c:	9a08      	ldr	r2, [sp, #32]
 802113e:	9301      	str	r3, [sp, #4]
 8021140:	fa0f f38c 	sxth.w	r3, ip
 8021144:	9105      	str	r1, [sp, #20]
 8021146:	4639      	mov	r1, r7
 8021148:	9300      	str	r3, [sp, #0]
 802114a:	464b      	mov	r3, r9
 802114c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021150:	4642      	mov	r2, r8
 8021152:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021154:	f7ff fd90 	bl	8020c78 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8021158:	e757      	b.n	802100a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802115a:	142a      	asrs	r2, r5, #16
 802115c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8021160:	1433      	asrs	r3, r6, #16
 8021162:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8021166:	fb09 2303 	mla	r3, r9, r3, r2
 802116a:	085a      	lsrs	r2, r3, #1
 802116c:	07d9      	lsls	r1, r3, #31
 802116e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8021172:	bf54      	ite	pl
 8021174:	f002 020f 	andpl.w	r2, r2, #15
 8021178:	1112      	asrmi	r2, r2, #4
 802117a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802117e:	b2d2      	uxtb	r2, r2
 8021180:	2800      	cmp	r0, #0
 8021182:	f000 8085 	beq.w	8021290 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8021186:	f103 0a01 	add.w	sl, r3, #1
 802118a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802118e:	f01a 0f01 	tst.w	sl, #1
 8021192:	f818 1001 	ldrb.w	r1, [r8, r1]
 8021196:	bf0c      	ite	eq
 8021198:	f001 010f 	andeq.w	r1, r1, #15
 802119c:	1109      	asrne	r1, r1, #4
 802119e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80211a2:	b2c9      	uxtb	r1, r1
 80211a4:	910f      	str	r1, [sp, #60]	; 0x3c
 80211a6:	b1df      	cbz	r7, 80211e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80211a8:	444b      	add	r3, r9
 80211aa:	0859      	lsrs	r1, r3, #1
 80211ac:	f013 0f01 	tst.w	r3, #1
 80211b0:	f103 0301 	add.w	r3, r3, #1
 80211b4:	f818 1001 	ldrb.w	r1, [r8, r1]
 80211b8:	bf0c      	ite	eq
 80211ba:	f001 010f 	andeq.w	r1, r1, #15
 80211be:	1109      	asrne	r1, r1, #4
 80211c0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80211c4:	b2c9      	uxtb	r1, r1
 80211c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80211c8:	0859      	lsrs	r1, r3, #1
 80211ca:	07db      	lsls	r3, r3, #31
 80211cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 80211d0:	bf54      	ite	pl
 80211d2:	f001 010f 	andpl.w	r1, r1, #15
 80211d6:	1109      	asrmi	r1, r1, #4
 80211d8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80211dc:	b2c9      	uxtb	r1, r1
 80211de:	9110      	str	r1, [sp, #64]	; 0x40
 80211e0:	b280      	uxth	r0, r0
 80211e2:	b2bf      	uxth	r7, r7
 80211e4:	fb00 f307 	mul.w	r3, r0, r7
 80211e8:	0100      	lsls	r0, r0, #4
 80211ea:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 80211ee:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80211f2:	1ac0      	subs	r0, r0, r3
 80211f4:	b2bf      	uxth	r7, r7
 80211f6:	b280      	uxth	r0, r0
 80211f8:	1bc9      	subs	r1, r1, r7
 80211fa:	fa1f fa81 	uxth.w	sl, r1
 80211fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8021200:	4348      	muls	r0, r1
 8021202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8021204:	fb02 020a 	mla	r2, r2, sl, r0
 8021208:	fb07 2701 	mla	r7, r7, r1, r2
 802120c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802120e:	fb03 7302 	mla	r3, r3, r2, r7
 8021212:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021216:	b393      	cbz	r3, 802127e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021218:	4a2a      	ldr	r2, [pc, #168]	; (80212c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 802121a:	2bff      	cmp	r3, #255	; 0xff
 802121c:	6811      	ldr	r1, [r2, #0]
 802121e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8021222:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8021226:	b2c9      	uxtb	r1, r1
 8021228:	d042      	beq.n	80212b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 802122a:	b298      	uxth	r0, r3
 802122c:	43db      	mvns	r3, r3
 802122e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8021232:	fb11 f100 	smulbb	r1, r1, r0
 8021236:	b2db      	uxtb	r3, r3
 8021238:	fb17 f700 	smulbb	r7, r7, r0
 802123c:	fb02 1103 	mla	r1, r2, r3, r1
 8021240:	fb1a f000 	smulbb	r0, sl, r0
 8021244:	b289      	uxth	r1, r1
 8021246:	1c4a      	adds	r2, r1, #1
 8021248:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802124c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8021250:	fb02 7703 	mla	r7, r2, r3, r7
 8021254:	1209      	asrs	r1, r1, #8
 8021256:	b2bf      	uxth	r7, r7
 8021258:	f80c 1c03 	strb.w	r1, [ip, #-3]
 802125c:	1c7a      	adds	r2, r7, #1
 802125e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021262:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8021266:	fb02 0303 	mla	r3, r2, r3, r0
 802126a:	123f      	asrs	r7, r7, #8
 802126c:	b29b      	uxth	r3, r3
 802126e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8021272:	1c5a      	adds	r2, r3, #1
 8021274:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8021278:	121b      	asrs	r3, r3, #8
 802127a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 802127e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021280:	f10c 0c03 	add.w	ip, ip, #3
 8021284:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021288:	441d      	add	r5, r3
 802128a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802128c:	441e      	add	r6, r3
 802128e:	e6e7      	b.n	8021060 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8021290:	2f00      	cmp	r7, #0
 8021292:	d0a5      	beq.n	80211e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8021294:	444b      	add	r3, r9
 8021296:	0859      	lsrs	r1, r3, #1
 8021298:	07db      	lsls	r3, r3, #31
 802129a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802129e:	bf54      	ite	pl
 80212a0:	f001 010f 	andpl.w	r1, r1, #15
 80212a4:	1109      	asrmi	r1, r1, #4
 80212a6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 80212aa:	b2c9      	uxtb	r1, r1
 80212ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80212ae:	e797      	b.n	80211e0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80212b0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 80212b4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 80212b8:	f80c ac01 	strb.w	sl, [ip, #-1]
 80212bc:	e7df      	b.n	802127e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80212be:	b013      	add	sp, #76	; 0x4c
 80212c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212c4:	2400ea44 	.word	0x2400ea44

080212c8 <CRC_Lock>:
 80212c8:	4a20      	ldr	r2, [pc, #128]	; (802134c <CRC_Lock+0x84>)
 80212ca:	b530      	push	{r4, r5, lr}
 80212cc:	6813      	ldr	r3, [r2, #0]
 80212ce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80212d2:	f24c 2540 	movw	r5, #49728	; 0xc240
 80212d6:	f023 0301 	bic.w	r3, r3, #1
 80212da:	6013      	str	r3, [r2, #0]
 80212dc:	4b1c      	ldr	r3, [pc, #112]	; (8021350 <CRC_Lock+0x88>)
 80212de:	681a      	ldr	r2, [r3, #0]
 80212e0:	4022      	ands	r2, r4
 80212e2:	42aa      	cmp	r2, r5
 80212e4:	d005      	beq.n	80212f2 <CRC_Lock+0x2a>
 80212e6:	681b      	ldr	r3, [r3, #0]
 80212e8:	f24c 2270 	movw	r2, #49776	; 0xc270
 80212ec:	4023      	ands	r3, r4
 80212ee:	4293      	cmp	r3, r2
 80212f0:	d124      	bne.n	802133c <CRC_Lock+0x74>
 80212f2:	4b18      	ldr	r3, [pc, #96]	; (8021354 <CRC_Lock+0x8c>)
 80212f4:	681b      	ldr	r3, [r3, #0]
 80212f6:	bb0b      	cbnz	r3, 802133c <CRC_Lock+0x74>
 80212f8:	4b17      	ldr	r3, [pc, #92]	; (8021358 <CRC_Lock+0x90>)
 80212fa:	681a      	ldr	r2, [r3, #0]
 80212fc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021300:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8021304:	d00d      	beq.n	8021322 <CRC_Lock+0x5a>
 8021306:	681a      	ldr	r2, [r3, #0]
 8021308:	f240 4483 	movw	r4, #1155	; 0x483
 802130c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8021310:	42a2      	cmp	r2, r4
 8021312:	d006      	beq.n	8021322 <CRC_Lock+0x5a>
 8021314:	681b      	ldr	r3, [r3, #0]
 8021316:	f240 4285 	movw	r2, #1157	; 0x485
 802131a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802131e:	4293      	cmp	r3, r2
 8021320:	d10c      	bne.n	802133c <CRC_Lock+0x74>
 8021322:	4b0e      	ldr	r3, [pc, #56]	; (802135c <CRC_Lock+0x94>)
 8021324:	2201      	movs	r2, #1
 8021326:	601a      	str	r2, [r3, #0]
 8021328:	681a      	ldr	r2, [r3, #0]
 802132a:	2a00      	cmp	r2, #0
 802132c:	d1fc      	bne.n	8021328 <CRC_Lock+0x60>
 802132e:	4b0c      	ldr	r3, [pc, #48]	; (8021360 <CRC_Lock+0x98>)
 8021330:	6018      	str	r0, [r3, #0]
 8021332:	6818      	ldr	r0, [r3, #0]
 8021334:	1a43      	subs	r3, r0, r1
 8021336:	4258      	negs	r0, r3
 8021338:	4158      	adcs	r0, r3
 802133a:	bd30      	pop	{r4, r5, pc}
 802133c:	4b09      	ldr	r3, [pc, #36]	; (8021364 <CRC_Lock+0x9c>)
 802133e:	2201      	movs	r2, #1
 8021340:	601a      	str	r2, [r3, #0]
 8021342:	681a      	ldr	r2, [r3, #0]
 8021344:	2a00      	cmp	r2, #0
 8021346:	d1fc      	bne.n	8021342 <CRC_Lock+0x7a>
 8021348:	4b07      	ldr	r3, [pc, #28]	; (8021368 <CRC_Lock+0xa0>)
 802134a:	e7f1      	b.n	8021330 <CRC_Lock+0x68>
 802134c:	e0002000 	.word	0xe0002000
 8021350:	e000ed00 	.word	0xe000ed00
 8021354:	e0042000 	.word	0xe0042000
 8021358:	5c001000 	.word	0x5c001000
 802135c:	58024c08 	.word	0x58024c08
 8021360:	58024c00 	.word	0x58024c00
 8021364:	40023008 	.word	0x40023008
 8021368:	40023000 	.word	0x40023000

0802136c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802136c:	6101      	str	r1, [r0, #16]
 802136e:	4770      	bx	lr

08021370 <_ZN8touchgfx8Gestures4tickEv>:
 8021370:	7b83      	ldrb	r3, [r0, #14]
 8021372:	b14b      	cbz	r3, 8021388 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8021374:	8903      	ldrh	r3, [r0, #8]
 8021376:	3301      	adds	r3, #1
 8021378:	b29b      	uxth	r3, r3
 802137a:	2b07      	cmp	r3, #7
 802137c:	8103      	strh	r3, [r0, #8]
 802137e:	bf81      	itttt	hi
 8021380:	2300      	movhi	r3, #0
 8021382:	8143      	strhhi	r3, [r0, #10]
 8021384:	8183      	strhhi	r3, [r0, #12]
 8021386:	7383      	strbhi	r3, [r0, #14]
 8021388:	4770      	bx	lr
	...

0802138c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802138c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021390:	4698      	mov	r8, r3
 8021392:	8883      	ldrh	r3, [r0, #4]
 8021394:	4604      	mov	r4, r0
 8021396:	4617      	mov	r7, r2
 8021398:	f8ad 3006 	strh.w	r3, [sp, #6]
 802139c:	eba8 0303 	sub.w	r3, r8, r3
 80213a0:	4a19      	ldr	r2, [pc, #100]	; (8021408 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80213a2:	460e      	mov	r6, r1
 80213a4:	b21b      	sxth	r3, r3
 80213a6:	88c1      	ldrh	r1, [r0, #6]
 80213a8:	9200      	str	r2, [sp, #0]
 80213aa:	2000      	movs	r0, #0
 80213ac:	2b00      	cmp	r3, #0
 80213ae:	8aa2      	ldrh	r2, [r4, #20]
 80213b0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80213b4:	bfb8      	it	lt
 80213b6:	425b      	neglt	r3, r3
 80213b8:	f88d 0004 	strb.w	r0, [sp, #4]
 80213bc:	f8ad 1008 	strh.w	r1, [sp, #8]
 80213c0:	b21b      	sxth	r3, r3
 80213c2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80213c6:	f8ad 500c 	strh.w	r5, [sp, #12]
 80213ca:	4293      	cmp	r3, r2
 80213cc:	dc07      	bgt.n	80213de <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80213ce:	1a69      	subs	r1, r5, r1
 80213d0:	b209      	sxth	r1, r1
 80213d2:	2900      	cmp	r1, #0
 80213d4:	bfb8      	it	lt
 80213d6:	4249      	neglt	r1, r1
 80213d8:	b209      	sxth	r1, r1
 80213da:	428a      	cmp	r2, r1
 80213dc:	da10      	bge.n	8021400 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80213de:	6920      	ldr	r0, [r4, #16]
 80213e0:	4669      	mov	r1, sp
 80213e2:	eba8 0606 	sub.w	r6, r8, r6
 80213e6:	1bef      	subs	r7, r5, r7
 80213e8:	6803      	ldr	r3, [r0, #0]
 80213ea:	685b      	ldr	r3, [r3, #4]
 80213ec:	4798      	blx	r3
 80213ee:	2300      	movs	r3, #0
 80213f0:	2001      	movs	r0, #1
 80213f2:	8166      	strh	r6, [r4, #10]
 80213f4:	8123      	strh	r3, [r4, #8]
 80213f6:	81a7      	strh	r7, [r4, #12]
 80213f8:	f8a4 8004 	strh.w	r8, [r4, #4]
 80213fc:	80e5      	strh	r5, [r4, #6]
 80213fe:	73a0      	strb	r0, [r4, #14]
 8021400:	b004      	add	sp, #16
 8021402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021406:	bf00      	nop
 8021408:	08024ec8 	.word	0x08024ec8

0802140c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802140e:	461e      	mov	r6, r3
 8021410:	1e4b      	subs	r3, r1, #1
 8021412:	b085      	sub	sp, #20
 8021414:	4604      	mov	r4, r0
 8021416:	2b01      	cmp	r3, #1
 8021418:	460d      	mov	r5, r1
 802141a:	4617      	mov	r7, r2
 802141c:	d84b      	bhi.n	80214b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802141e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021422:	1cd3      	adds	r3, r2, #3
 8021424:	b29b      	uxth	r3, r3
 8021426:	2b06      	cmp	r3, #6
 8021428:	d916      	bls.n	8021458 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802142a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80214cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802142e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021432:	f8cd c004 	str.w	ip, [sp, #4]
 8021436:	f04f 0c00 	mov.w	ip, #0
 802143a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802143e:	6900      	ldr	r0, [r0, #16]
 8021440:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021444:	a901      	add	r1, sp, #4
 8021446:	f88d c008 	strb.w	ip, [sp, #8]
 802144a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802144e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021452:	6803      	ldr	r3, [r0, #0]
 8021454:	689b      	ldr	r3, [r3, #8]
 8021456:	4798      	blx	r3
 8021458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802145c:	1cd3      	adds	r3, r2, #3
 802145e:	b29b      	uxth	r3, r3
 8021460:	2b06      	cmp	r3, #6
 8021462:	d916      	bls.n	8021492 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021464:	f8df c064 	ldr.w	ip, [pc, #100]	; 80214cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021468:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802146c:	f8cd c004 	str.w	ip, [sp, #4]
 8021470:	f04f 0c01 	mov.w	ip, #1
 8021474:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021478:	6920      	ldr	r0, [r4, #16]
 802147a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802147e:	a901      	add	r1, sp, #4
 8021480:	f88d c008 	strb.w	ip, [sp, #8]
 8021484:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021488:	f8ad 300e 	strh.w	r3, [sp, #14]
 802148c:	6803      	ldr	r3, [r0, #0]
 802148e:	689b      	ldr	r3, [r3, #8]
 8021490:	4798      	blx	r3
 8021492:	4b0d      	ldr	r3, [pc, #52]	; (80214c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021494:	a901      	add	r1, sp, #4
 8021496:	6920      	ldr	r0, [r4, #16]
 8021498:	9301      	str	r3, [sp, #4]
 802149a:	2300      	movs	r3, #0
 802149c:	f88d 5008 	strb.w	r5, [sp, #8]
 80214a0:	f8ad 700a 	strh.w	r7, [sp, #10]
 80214a4:	f8ad 600c 	strh.w	r6, [sp, #12]
 80214a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80214ac:	6803      	ldr	r3, [r0, #0]
 80214ae:	681b      	ldr	r3, [r3, #0]
 80214b0:	4798      	blx	r3
 80214b2:	b005      	add	sp, #20
 80214b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214b6:	2900      	cmp	r1, #0
 80214b8:	d1eb      	bne.n	8021492 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80214ba:	80a2      	strh	r2, [r4, #4]
 80214bc:	80c6      	strh	r6, [r0, #6]
 80214be:	60a1      	str	r1, [r4, #8]
 80214c0:	81a1      	strh	r1, [r4, #12]
 80214c2:	73a1      	strb	r1, [r4, #14]
 80214c4:	e7e5      	b.n	8021492 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80214c6:	bf00      	nop
 80214c8:	08024eb4 	.word	0x08024eb4
 80214cc:	08024edc 	.word	0x08024edc

080214d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80214d0:	10c9      	asrs	r1, r1, #3
 80214d2:	2900      	cmp	r1, #0
 80214d4:	bfb8      	it	lt
 80214d6:	4249      	neglt	r1, r1
 80214d8:	2801      	cmp	r0, #1
 80214da:	d108      	bne.n	80214ee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80214dc:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80214e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80214e4:	4601      	mov	r1, r0
 80214e6:	dd02      	ble.n	80214ee <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80214e8:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80214ec:	4770      	bx	lr
 80214ee:	29ff      	cmp	r1, #255	; 0xff
 80214f0:	bfa8      	it	ge
 80214f2:	21ff      	movge	r1, #255	; 0xff
 80214f4:	4608      	mov	r0, r1
 80214f6:	4770      	bx	lr

080214f8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80214f8:	b410      	push	{r4}
 80214fa:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80214fe:	429c      	cmp	r4, r3
 8021500:	d803      	bhi.n	802150a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8021502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021506:	f7f3 babb 	b.w	8014a80 <_ZN8touchgfx7Outline6lineToEii>
 802150a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802150e:	4770      	bx	lr

08021510 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8021510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021514:	b08b      	sub	sp, #44	; 0x2c
 8021516:	4606      	mov	r6, r0
 8021518:	468a      	mov	sl, r1
 802151a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802151e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8021522:	9308      	str	r3, [sp, #32]
 8021524:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8021528:	9309      	str	r3, [sp, #36]	; 0x24
 802152a:	f7f3 fc14 	bl	8014d56 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802152e:	68b5      	ldr	r5, [r6, #8]
 8021530:	4604      	mov	r4, r0
 8021532:	2d00      	cmp	r5, #0
 8021534:	d044      	beq.n	80215c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8021536:	6873      	ldr	r3, [r6, #4]
 8021538:	42ab      	cmp	r3, r5
 802153a:	d33d      	bcc.n	80215b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802153c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8021540:	f04f 0800 	mov.w	r8, #0
 8021544:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8021548:	eb02 0b03 	add.w	fp, r2, r3
 802154c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8021550:	fb02 1203 	mla	r2, r2, r3, r1
 8021554:	9205      	str	r2, [sp, #20]
 8021556:	1e6a      	subs	r2, r5, #1
 8021558:	9204      	str	r2, [sp, #16]
 802155a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802155e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021562:	454b      	cmp	r3, r9
 8021564:	463a      	mov	r2, r7
 8021566:	d008      	beq.n	802157a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8021568:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802156c:	eb03 0b09 	add.w	fp, r3, r9
 8021570:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8021574:	fb03 1309 	mla	r3, r3, r9, r1
 8021578:	9305      	str	r3, [sp, #20]
 802157a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802157e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8021582:	4498      	add	r8, r3
 8021584:	9b04      	ldr	r3, [sp, #16]
 8021586:	3b01      	subs	r3, #1
 8021588:	9304      	str	r3, [sp, #16]
 802158a:	9b04      	ldr	r3, [sp, #16]
 802158c:	3301      	adds	r3, #1
 802158e:	d015      	beq.n	80215bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8021590:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8021594:	42bb      	cmp	r3, r7
 8021596:	d117      	bne.n	80215c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8021598:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802159c:	9b04      	ldr	r3, [sp, #16]
 802159e:	4548      	cmp	r0, r9
 80215a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80215a4:	d17d      	bne.n	80216a2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80215a6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80215aa:	4401      	add	r1, r0
 80215ac:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80215b0:	4480      	add	r8, r0
 80215b2:	e7e9      	b.n	8021588 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80215b4:	461f      	mov	r7, r3
 80215b6:	e042      	b.n	802163e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80215b8:	2000      	movs	r0, #0
 80215ba:	e002      	b.n	80215c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80215bc:	2900      	cmp	r1, #0
 80215be:	d16d      	bne.n	802169c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80215c0:	2001      	movs	r0, #1
 80215c2:	b00b      	add	sp, #44	; 0x2c
 80215c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215c8:	b379      	cbz	r1, 802162a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80215ca:	2f00      	cmp	r7, #0
 80215cc:	db29      	blt.n	8021622 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80215ce:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80215d2:	42bb      	cmp	r3, r7
 80215d4:	dd25      	ble.n	8021622 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80215d6:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80215da:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80215de:	f7ff ff77 	bl	80214d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80215e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80215e4:	fb10 f003 	smulbb	r0, r0, r3
 80215e8:	b280      	uxth	r0, r0
 80215ea:	1c41      	adds	r1, r0, #1
 80215ec:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80215f0:	1209      	asrs	r1, r1, #8
 80215f2:	f011 0fff 	tst.w	r1, #255	; 0xff
 80215f6:	d014      	beq.n	8021622 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80215f8:	b2c9      	uxtb	r1, r1
 80215fa:	9808      	ldr	r0, [sp, #32]
 80215fc:	b2ba      	uxth	r2, r7
 80215fe:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8021600:	9102      	str	r1, [sp, #8]
 8021602:	2101      	movs	r1, #1
 8021604:	4413      	add	r3, r2
 8021606:	4402      	add	r2, r0
 8021608:	9101      	str	r1, [sp, #4]
 802160a:	fa0f f18b 	sxth.w	r1, fp
 802160e:	f8da 0000 	ldr.w	r0, [sl]
 8021612:	b21b      	sxth	r3, r3
 8021614:	9100      	str	r1, [sp, #0]
 8021616:	b212      	sxth	r2, r2
 8021618:	6941      	ldr	r1, [r0, #20]
 802161a:	4650      	mov	r0, sl
 802161c:	460d      	mov	r5, r1
 802161e:	9905      	ldr	r1, [sp, #20]
 8021620:	47a8      	blx	r5
 8021622:	9b04      	ldr	r3, [sp, #16]
 8021624:	1c7a      	adds	r2, r7, #1
 8021626:	3301      	adds	r3, #1
 8021628:	d0ca      	beq.n	80215c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802162a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802162e:	1abb      	subs	r3, r7, r2
 8021630:	2b00      	cmp	r3, #0
 8021632:	dd31      	ble.n	8021698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021634:	2a00      	cmp	r2, #0
 8021636:	dabd      	bge.n	80215b4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8021638:	2f00      	cmp	r7, #0
 802163a:	dd2d      	ble.n	8021698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802163c:	2200      	movs	r2, #0
 802163e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8021642:	19d1      	adds	r1, r2, r7
 8021644:	4299      	cmp	r1, r3
 8021646:	db02      	blt.n	802164e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8021648:	1a9f      	subs	r7, r3, r2
 802164a:	2f00      	cmp	r7, #0
 802164c:	dd24      	ble.n	8021698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802164e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8021652:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8021656:	f7ff ff3b 	bl	80214d0 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802165a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802165c:	fb10 f003 	smulbb	r0, r0, r3
 8021660:	b280      	uxth	r0, r0
 8021662:	1c41      	adds	r1, r0, #1
 8021664:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8021668:	1209      	asrs	r1, r1, #8
 802166a:	f011 0fff 	tst.w	r1, #255	; 0xff
 802166e:	d013      	beq.n	8021698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8021670:	b292      	uxth	r2, r2
 8021672:	9808      	ldr	r0, [sp, #32]
 8021674:	b2c9      	uxtb	r1, r1
 8021676:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8021678:	b23f      	sxth	r7, r7
 802167a:	4413      	add	r3, r2
 802167c:	9102      	str	r1, [sp, #8]
 802167e:	4402      	add	r2, r0
 8021680:	fa0f f18b 	sxth.w	r1, fp
 8021684:	f8da 0000 	ldr.w	r0, [sl]
 8021688:	b21b      	sxth	r3, r3
 802168a:	9100      	str	r1, [sp, #0]
 802168c:	b212      	sxth	r2, r2
 802168e:	9701      	str	r7, [sp, #4]
 8021690:	9905      	ldr	r1, [sp, #20]
 8021692:	6947      	ldr	r7, [r0, #20]
 8021694:	4650      	mov	r0, sl
 8021696:	47b8      	blx	r7
 8021698:	464b      	mov	r3, r9
 802169a:	e75e      	b.n	802155a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802169c:	2f00      	cmp	r7, #0
 802169e:	da96      	bge.n	80215ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80216a0:	e78e      	b.n	80215c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80216a2:	2900      	cmp	r1, #0
 80216a4:	d0f8      	beq.n	8021698 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80216a6:	e790      	b.n	80215ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080216a8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80216a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80216ac:	4b4a      	ldr	r3, [pc, #296]	; (80217d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 80216ae:	2500      	movs	r5, #0
 80216b0:	f100 0620 	add.w	r6, r0, #32
 80216b4:	4604      	mov	r4, r0
 80216b6:	4690      	mov	r8, r2
 80216b8:	f100 0718 	add.w	r7, r0, #24
 80216bc:	e9c0 3100 	strd	r3, r1, [r0]
 80216c0:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80216c4:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80216c8:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80216cc:	4630      	mov	r0, r6
 80216ce:	f7f2 fd1d 	bl	801410c <_ZN8touchgfx7OutlineC1Ev>
 80216d2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80216d6:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80216da:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80216de:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80216e2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80216e6:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80216ea:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80216ee:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80216f2:	9500      	str	r5, [sp, #0]
 80216f4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80216f8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80216fc:	f9b8 2000 	ldrsh.w	r2, [r8]
 8021700:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8021704:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8021708:	4410      	add	r0, r2
 802170a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802170e:	b280      	uxth	r0, r0
 8021710:	fa0f fa80 	sxth.w	sl, r0
 8021714:	45aa      	cmp	sl, r5
 8021716:	dd5c      	ble.n	80217d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021718:	4591      	cmp	r9, r2
 802171a:	dd5a      	ble.n	80217d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802171c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8021720:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8021724:	440b      	add	r3, r1
 8021726:	b29b      	uxth	r3, r3
 8021728:	b21d      	sxth	r5, r3
 802172a:	2d00      	cmp	r5, #0
 802172c:	dd51      	ble.n	80217d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802172e:	458e      	cmp	lr, r1
 8021730:	dd4f      	ble.n	80217d2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8021732:	45d1      	cmp	r9, sl
 8021734:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8021738:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802173c:	bfb8      	it	lt
 802173e:	fa1f f089 	uxthlt.w	r0, r9
 8021742:	45ae      	cmp	lr, r5
 8021744:	f8ad 2000 	strh.w	r2, [sp]
 8021748:	bfb8      	it	lt
 802174a:	fa1f f38e 	uxthlt.w	r3, lr
 802174e:	1a80      	subs	r0, r0, r2
 8021750:	f8ad 1002 	strh.w	r1, [sp, #2]
 8021754:	1a5b      	subs	r3, r3, r1
 8021756:	f8ad 0004 	strh.w	r0, [sp, #4]
 802175a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802175e:	466d      	mov	r5, sp
 8021760:	e895 0003 	ldmia.w	r5, {r0, r1}
 8021764:	e887 0003 	stmia.w	r7, {r0, r1}
 8021768:	f8dc 3000 	ldr.w	r3, [ip]
 802176c:	4660      	mov	r0, ip
 802176e:	4639      	mov	r1, r7
 8021770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021772:	4798      	blx	r3
 8021774:	6861      	ldr	r1, [r4, #4]
 8021776:	4628      	mov	r0, r5
 8021778:	3104      	adds	r1, #4
 802177a:	f7f4 fe97 	bl	80164ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802177e:	4638      	mov	r0, r7
 8021780:	f7f4 fe6c 	bl	801645c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021784:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8021788:	f8bd 2000 	ldrh.w	r2, [sp]
 802178c:	4630      	mov	r0, r6
 802178e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8021792:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8021796:	f7f2 fc9d 	bl	80140d4 <_ZN8touchgfx7Outline5resetEv>
 802179a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802179e:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80217a2:	4620      	mov	r0, r4
 80217a4:	015b      	lsls	r3, r3, #5
 80217a6:	60a3      	str	r3, [r4, #8]
 80217a8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80217ac:	015b      	lsls	r3, r3, #5
 80217ae:	60e3      	str	r3, [r4, #12]
 80217b0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80217b4:	015b      	lsls	r3, r3, #5
 80217b6:	6123      	str	r3, [r4, #16]
 80217b8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80217bc:	015b      	lsls	r3, r3, #5
 80217be:	6163      	str	r3, [r4, #20]
 80217c0:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80217c4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80217c8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80217cc:	b002      	add	sp, #8
 80217ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80217d2:	2300      	movs	r3, #0
 80217d4:	9301      	str	r3, [sp, #4]
 80217d6:	e7c2      	b.n	802175e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 80217d8:	0802510c 	.word	0x0802510c

080217dc <_ZN8touchgfx6Canvas5closeEv>:
 80217dc:	b538      	push	{r3, r4, r5, lr}
 80217de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80217e2:	4604      	mov	r4, r0
 80217e4:	b193      	cbz	r3, 802180c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80217e6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80217ea:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80217ee:	4213      	tst	r3, r2
 80217f0:	d10c      	bne.n	802180c <_ZN8touchgfx6Canvas5closeEv+0x30>
 80217f2:	f100 0520 	add.w	r5, r0, #32
 80217f6:	b123      	cbz	r3, 8021802 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80217f8:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80217fc:	4628      	mov	r0, r5
 80217fe:	f7ff fe7b 	bl	80214f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021802:	4628      	mov	r0, r5
 8021804:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8021808:	f7ff fe76 	bl	80214f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802180c:	2300      	movs	r3, #0
 802180e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8021812:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8021816:	4298      	cmp	r0, r3
 8021818:	bf34      	ite	cc
 802181a:	2000      	movcc	r0, #0
 802181c:	2001      	movcs	r0, #1
 802181e:	bd38      	pop	{r3, r4, r5, pc}

08021820 <_ZN8touchgfx6Canvas6renderEh>:
 8021820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021824:	4604      	mov	r4, r0
 8021826:	6840      	ldr	r0, [r0, #4]
 8021828:	460d      	mov	r5, r1
 802182a:	6803      	ldr	r3, [r0, #0]
 802182c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802182e:	4798      	blx	r3
 8021830:	fb10 f105 	smulbb	r1, r0, r5
 8021834:	b289      	uxth	r1, r1
 8021836:	1c4d      	adds	r5, r1, #1
 8021838:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802183c:	122d      	asrs	r5, r5, #8
 802183e:	f000 8097 	beq.w	8021970 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8021842:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8021846:	2b00      	cmp	r3, #0
 8021848:	f000 8092 	beq.w	8021970 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802184c:	4620      	mov	r0, r4
 802184e:	f7ff ffc5 	bl	80217dc <_ZN8touchgfx6Canvas5closeEv>
 8021852:	4607      	mov	r7, r0
 8021854:	2800      	cmp	r0, #0
 8021856:	d043      	beq.n	80218e0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8021858:	6863      	ldr	r3, [r4, #4]
 802185a:	4e46      	ldr	r6, [pc, #280]	; (8021974 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802185c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802185e:	6837      	ldr	r7, [r6, #0]
 8021860:	6803      	ldr	r3, [r0, #0]
 8021862:	689b      	ldr	r3, [r3, #8]
 8021864:	4798      	blx	r3
 8021866:	4601      	mov	r1, r0
 8021868:	4638      	mov	r0, r7
 802186a:	f7f0 fbe7 	bl	801203c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802186e:	4607      	mov	r7, r0
 8021870:	f7ef ffa8 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8021874:	6803      	ldr	r3, [r0, #0]
 8021876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021878:	4798      	blx	r3
 802187a:	4680      	mov	r8, r0
 802187c:	f7ef ffa2 	bl	80117c4 <_ZN8touchgfx3HAL3lcdEv>
 8021880:	6803      	ldr	r3, [r0, #0]
 8021882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021884:	4798      	blx	r3
 8021886:	280b      	cmp	r0, #11
 8021888:	d857      	bhi.n	802193a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802188a:	e8df f000 	tbb	[pc, r0]
 802188e:	584d      	.short	0x584d
 8021890:	2d560668 	.word	0x2d560668
 8021894:	6161613d 	.word	0x6161613d
 8021898:	6161      	.short	0x6161
 802189a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802189e:	2208      	movs	r2, #8
 80218a0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80218a4:	fb91 f2f2 	sdiv	r2, r1, r2
 80218a8:	fb08 2303 	mla	r3, r8, r3, r2
 80218ac:	441f      	add	r7, r3
 80218ae:	424b      	negs	r3, r1
 80218b0:	f001 0107 	and.w	r1, r1, #7
 80218b4:	f003 0307 	and.w	r3, r3, #7
 80218b8:	bf58      	it	pl
 80218ba:	4259      	negpl	r1, r3
 80218bc:	b2c9      	uxtb	r1, r1
 80218be:	6860      	ldr	r0, [r4, #4]
 80218c0:	b2ed      	uxtb	r5, r5
 80218c2:	fa0f f388 	sxth.w	r3, r8
 80218c6:	463a      	mov	r2, r7
 80218c8:	e9cd 1500 	strd	r1, r5, [sp]
 80218cc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80218ce:	f104 0020 	add.w	r0, r4, #32
 80218d2:	f7ff fe1d 	bl	8021510 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80218d6:	4607      	mov	r7, r0
 80218d8:	6830      	ldr	r0, [r6, #0]
 80218da:	6803      	ldr	r3, [r0, #0]
 80218dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80218de:	4798      	blx	r3
 80218e0:	4638      	mov	r0, r7
 80218e2:	b002      	add	sp, #8
 80218e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218e8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80218ec:	2204      	movs	r2, #4
 80218ee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80218f2:	fb91 f2f2 	sdiv	r2, r1, r2
 80218f6:	fb08 2303 	mla	r3, r8, r3, r2
 80218fa:	441f      	add	r7, r3
 80218fc:	424b      	negs	r3, r1
 80218fe:	f001 0103 	and.w	r1, r1, #3
 8021902:	f003 0303 	and.w	r3, r3, #3
 8021906:	e7d7      	b.n	80218b8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8021908:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802190c:	2202      	movs	r2, #2
 802190e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021912:	2900      	cmp	r1, #0
 8021914:	fb91 f2f2 	sdiv	r2, r1, r2
 8021918:	f001 0101 	and.w	r1, r1, #1
 802191c:	fb08 2303 	mla	r3, r8, r3, r2
 8021920:	bfb8      	it	lt
 8021922:	4249      	neglt	r1, r1
 8021924:	441f      	add	r7, r3
 8021926:	e7c9      	b.n	80218bc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8021928:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802192c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021930:	fb08 f303 	mul.w	r3, r8, r3
 8021934:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8021938:	441f      	add	r7, r3
 802193a:	2100      	movs	r1, #0
 802193c:	e7bf      	b.n	80218be <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802193e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021942:	2103      	movs	r1, #3
 8021944:	fb08 f203 	mul.w	r2, r8, r3
 8021948:	8b23      	ldrh	r3, [r4, #24]
 802194a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802194e:	e7f3      	b.n	8021938 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8021950:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021954:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021958:	fb08 2303 	mla	r3, r8, r3, r2
 802195c:	e7ec      	b.n	8021938 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802195e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8021962:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8021966:	fb08 f303 	mul.w	r3, r8, r3
 802196a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802196e:	e7e3      	b.n	8021938 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8021970:	2701      	movs	r7, #1
 8021972:	e7b5      	b.n	80218e0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8021974:	2400ea34 	.word	0x2400ea34

08021978 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8021978:	4b07      	ldr	r3, [pc, #28]	; (8021998 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802197a:	b510      	push	{r4, lr}
 802197c:	781b      	ldrb	r3, [r3, #0]
 802197e:	2b01      	cmp	r3, #1
 8021980:	d108      	bne.n	8021994 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8021982:	6843      	ldr	r3, [r0, #4]
 8021984:	6814      	ldr	r4, [r2, #0]
 8021986:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802198a:	680b      	ldr	r3, [r1, #0]
 802198c:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8021990:	6013      	str	r3, [r2, #0]
 8021992:	600c      	str	r4, [r1, #0]
 8021994:	bd10      	pop	{r4, pc}
 8021996:	bf00      	nop
 8021998:	2400ea2c 	.word	0x2400ea2c

0802199c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802199c:	b513      	push	{r0, r1, r4, lr}
 802199e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80219a2:	4604      	mov	r4, r0
 80219a4:	e9cd 2100 	strd	r2, r1, [sp]
 80219a8:	b9a3      	cbnz	r3, 80219d4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80219aa:	466a      	mov	r2, sp
 80219ac:	a901      	add	r1, sp, #4
 80219ae:	4620      	mov	r0, r4
 80219b0:	f7ff ffe2 	bl	8021978 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80219b4:	68a3      	ldr	r3, [r4, #8]
 80219b6:	9901      	ldr	r1, [sp, #4]
 80219b8:	9a00      	ldr	r2, [sp, #0]
 80219ba:	1ac9      	subs	r1, r1, r3
 80219bc:	68e3      	ldr	r3, [r4, #12]
 80219be:	1ad2      	subs	r2, r2, r3
 80219c0:	9101      	str	r1, [sp, #4]
 80219c2:	2a00      	cmp	r2, #0
 80219c4:	9200      	str	r2, [sp, #0]
 80219c6:	da0b      	bge.n	80219e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80219c8:	2301      	movs	r3, #1
 80219ca:	2900      	cmp	r1, #0
 80219cc:	da0e      	bge.n	80219ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80219ce:	f043 0304 	orr.w	r3, r3, #4
 80219d2:	e013      	b.n	80219fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80219d4:	f7ff ff02 	bl	80217dc <_ZN8touchgfx6Canvas5closeEv>
 80219d8:	2800      	cmp	r0, #0
 80219da:	d1e6      	bne.n	80219aa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80219dc:	b002      	add	sp, #8
 80219de:	bd10      	pop	{r4, pc}
 80219e0:	6963      	ldr	r3, [r4, #20]
 80219e2:	429a      	cmp	r2, r3
 80219e4:	bfac      	ite	ge
 80219e6:	2302      	movge	r3, #2
 80219e8:	2300      	movlt	r3, #0
 80219ea:	e7ee      	b.n	80219ca <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80219ec:	6920      	ldr	r0, [r4, #16]
 80219ee:	4281      	cmp	r1, r0
 80219f0:	bfac      	ite	ge
 80219f2:	2008      	movge	r0, #8
 80219f4:	2000      	movlt	r0, #0
 80219f6:	4318      	orrs	r0, r3
 80219f8:	b2c3      	uxtb	r3, r0
 80219fa:	b158      	cbz	r0, 8021a14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 80219fc:	2200      	movs	r2, #0
 80219fe:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8021a02:	9901      	ldr	r1, [sp, #4]
 8021a04:	9a00      	ldr	r2, [sp, #0]
 8021a06:	66a1      	str	r1, [r4, #104]	; 0x68
 8021a08:	66e2      	str	r2, [r4, #108]	; 0x6c
 8021a0a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8021a0e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8021a12:	e7e3      	b.n	80219dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8021a14:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8021a18:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8021a1c:	4298      	cmp	r0, r3
 8021a1e:	d803      	bhi.n	8021a28 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8021a20:	f104 0020 	add.w	r0, r4, #32
 8021a24:	f7f3 f846 	bl	8014ab4 <_ZN8touchgfx7Outline6moveToEii>
 8021a28:	2301      	movs	r3, #1
 8021a2a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8021a2e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8021a32:	2300      	movs	r3, #0
 8021a34:	e7e5      	b.n	8021a02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08021a36 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8021a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021a38:	ab02      	add	r3, sp, #8
 8021a3a:	4604      	mov	r4, r0
 8021a3c:	9101      	str	r1, [sp, #4]
 8021a3e:	a901      	add	r1, sp, #4
 8021a40:	f843 2d08 	str.w	r2, [r3, #-8]!
 8021a44:	461a      	mov	r2, r3
 8021a46:	f7ff ff97 	bl	8021978 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8021a4a:	68a3      	ldr	r3, [r4, #8]
 8021a4c:	9901      	ldr	r1, [sp, #4]
 8021a4e:	9a00      	ldr	r2, [sp, #0]
 8021a50:	1ac9      	subs	r1, r1, r3
 8021a52:	68e3      	ldr	r3, [r4, #12]
 8021a54:	1ad2      	subs	r2, r2, r3
 8021a56:	9101      	str	r1, [sp, #4]
 8021a58:	2a00      	cmp	r2, #0
 8021a5a:	9200      	str	r2, [sp, #0]
 8021a5c:	db1c      	blt.n	8021a98 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8021a5e:	6963      	ldr	r3, [r4, #20]
 8021a60:	429a      	cmp	r2, r3
 8021a62:	bfac      	ite	ge
 8021a64:	2002      	movge	r0, #2
 8021a66:	2000      	movlt	r0, #0
 8021a68:	2900      	cmp	r1, #0
 8021a6a:	db17      	blt.n	8021a9c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8021a6c:	6923      	ldr	r3, [r4, #16]
 8021a6e:	4299      	cmp	r1, r3
 8021a70:	bfac      	ite	ge
 8021a72:	2308      	movge	r3, #8
 8021a74:	2300      	movlt	r3, #0
 8021a76:	4303      	orrs	r3, r0
 8021a78:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8021a7c:	b2dd      	uxtb	r5, r3
 8021a7e:	b978      	cbnz	r0, 8021aa0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8021a80:	f104 0020 	add.w	r0, r4, #32
 8021a84:	f7ff fd38 	bl	80214f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021a88:	9b01      	ldr	r3, [sp, #4]
 8021a8a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8021a8e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8021a90:	9b00      	ldr	r3, [sp, #0]
 8021a92:	6623      	str	r3, [r4, #96]	; 0x60
 8021a94:	b002      	add	sp, #8
 8021a96:	bd70      	pop	{r4, r5, r6, pc}
 8021a98:	2001      	movs	r0, #1
 8021a9a:	e7e5      	b.n	8021a68 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8021a9c:	2304      	movs	r3, #4
 8021a9e:	e7ea      	b.n	8021a76 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8021aa0:	b113      	cbz	r3, 8021aa8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8021aa2:	ea10 0305 	ands.w	r3, r0, r5
 8021aa6:	d11c      	bne.n	8021ae2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8021aa8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8021aac:	f104 0620 	add.w	r6, r4, #32
 8021ab0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8021ab4:	b98b      	cbnz	r3, 8021ada <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8021ab6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8021aba:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8021abe:	4298      	cmp	r0, r3
 8021ac0:	d802      	bhi.n	8021ac8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8021ac2:	4630      	mov	r0, r6
 8021ac4:	f7f2 fff6 	bl	8014ab4 <_ZN8touchgfx7Outline6moveToEii>
 8021ac8:	2301      	movs	r3, #1
 8021aca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8021ace:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8021ad2:	4630      	mov	r0, r6
 8021ad4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8021ad8:	e7d4      	b.n	8021a84 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8021ada:	4630      	mov	r0, r6
 8021adc:	f7ff fd0c 	bl	80214f8 <_ZN8touchgfx10Rasterizer6lineToEii>
 8021ae0:	e7f7      	b.n	8021ad2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8021ae2:	461d      	mov	r5, r3
 8021ae4:	e7d0      	b.n	8021a88 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08021ae8 <_ZN8touchgfx6CanvasD1Ev>:
 8021ae8:	4b04      	ldr	r3, [pc, #16]	; (8021afc <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8021aea:	b510      	push	{r4, lr}
 8021aec:	4604      	mov	r4, r0
 8021aee:	f840 3b20 	str.w	r3, [r0], #32
 8021af2:	f7f2 fae7 	bl	80140c4 <_ZN8touchgfx7OutlineD1Ev>
 8021af6:	4620      	mov	r0, r4
 8021af8:	bd10      	pop	{r4, pc}
 8021afa:	bf00      	nop
 8021afc:	0802510c 	.word	0x0802510c

08021b00 <_ZN8touchgfx6CanvasD0Ev>:
 8021b00:	b510      	push	{r4, lr}
 8021b02:	4604      	mov	r4, r0
 8021b04:	f7ff fff0 	bl	8021ae8 <_ZN8touchgfx6CanvasD1Ev>
 8021b08:	2170      	movs	r1, #112	; 0x70
 8021b0a:	4620      	mov	r0, r4
 8021b0c:	f000 f807 	bl	8021b1e <_ZdlPvj>
 8021b10:	4620      	mov	r0, r4
 8021b12:	bd10      	pop	{r4, pc}

08021b14 <__aeabi_atexit>:
 8021b14:	460b      	mov	r3, r1
 8021b16:	4601      	mov	r1, r0
 8021b18:	4618      	mov	r0, r3
 8021b1a:	f000 b931 	b.w	8021d80 <__cxa_atexit>

08021b1e <_ZdlPvj>:
 8021b1e:	f000 b812 	b.w	8021b46 <_ZdlPv>

08021b22 <__cxa_guard_acquire>:
 8021b22:	6803      	ldr	r3, [r0, #0]
 8021b24:	07db      	lsls	r3, r3, #31
 8021b26:	d406      	bmi.n	8021b36 <__cxa_guard_acquire+0x14>
 8021b28:	7843      	ldrb	r3, [r0, #1]
 8021b2a:	b103      	cbz	r3, 8021b2e <__cxa_guard_acquire+0xc>
 8021b2c:	deff      	udf	#255	; 0xff
 8021b2e:	2301      	movs	r3, #1
 8021b30:	7043      	strb	r3, [r0, #1]
 8021b32:	4618      	mov	r0, r3
 8021b34:	4770      	bx	lr
 8021b36:	2000      	movs	r0, #0
 8021b38:	4770      	bx	lr

08021b3a <__cxa_guard_release>:
 8021b3a:	2301      	movs	r3, #1
 8021b3c:	6003      	str	r3, [r0, #0]
 8021b3e:	4770      	bx	lr

08021b40 <__cxa_pure_virtual>:
 8021b40:	b508      	push	{r3, lr}
 8021b42:	f000 f80f 	bl	8021b64 <_ZSt9terminatev>

08021b46 <_ZdlPv>:
 8021b46:	f000 b96d 	b.w	8021e24 <free>

08021b4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021b4a:	b508      	push	{r3, lr}
 8021b4c:	4780      	blx	r0
 8021b4e:	f000 f8eb 	bl	8021d28 <abort>
	...

08021b54 <_ZSt13get_terminatev>:
 8021b54:	4b02      	ldr	r3, [pc, #8]	; (8021b60 <_ZSt13get_terminatev+0xc>)
 8021b56:	6818      	ldr	r0, [r3, #0]
 8021b58:	f3bf 8f5b 	dmb	ish
 8021b5c:	4770      	bx	lr
 8021b5e:	bf00      	nop
 8021b60:	240000b0 	.word	0x240000b0

08021b64 <_ZSt9terminatev>:
 8021b64:	b508      	push	{r3, lr}
 8021b66:	f7ff fff5 	bl	8021b54 <_ZSt13get_terminatev>
 8021b6a:	f7ff ffee 	bl	8021b4a <_ZN10__cxxabiv111__terminateEPFvvE>

08021b6e <with_errnof>:
 8021b6e:	b513      	push	{r0, r1, r4, lr}
 8021b70:	4604      	mov	r4, r0
 8021b72:	ed8d 0a01 	vstr	s0, [sp, #4]
 8021b76:	f000 f911 	bl	8021d9c <__errno>
 8021b7a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8021b7e:	6004      	str	r4, [r0, #0]
 8021b80:	b002      	add	sp, #8
 8021b82:	bd10      	pop	{r4, pc}

08021b84 <__math_invalidf>:
 8021b84:	eef0 7a40 	vmov.f32	s15, s0
 8021b88:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021b8c:	eef4 7a67 	vcmp.f32	s15, s15
 8021b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b94:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8021b98:	d602      	bvs.n	8021ba0 <__math_invalidf+0x1c>
 8021b9a:	2021      	movs	r0, #33	; 0x21
 8021b9c:	f7ff bfe7 	b.w	8021b6e <with_errnof>
 8021ba0:	4770      	bx	lr

08021ba2 <sinf_poly>:
 8021ba2:	07cb      	lsls	r3, r1, #31
 8021ba4:	d412      	bmi.n	8021bcc <sinf_poly+0x2a>
 8021ba6:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021baa:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 8021bae:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8021bb2:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021bb6:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8021bba:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021bbe:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021bc2:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021bc6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021bca:	4770      	bx	lr
 8021bcc:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8021bd0:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021bd4:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8021bd8:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8021bdc:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021be0:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8021be4:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021be8:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8021bec:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021bf0:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021bf4:	e7e5      	b.n	8021bc2 <sinf_poly+0x20>
	...

08021bf8 <sinf>:
 8021bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021bfa:	ee10 4a10 	vmov	r4, s0
 8021bfe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021c02:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8021c06:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8021c0a:	eef0 7a40 	vmov.f32	s15, s0
 8021c0e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8021c12:	d218      	bcs.n	8021c46 <sinf+0x4e>
 8021c14:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021c18:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8021c1c:	d20a      	bcs.n	8021c34 <sinf+0x3c>
 8021c1e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8021c22:	d103      	bne.n	8021c2c <sinf+0x34>
 8021c24:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021c28:	ed8d 1a01 	vstr	s2, [sp, #4]
 8021c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8021c30:	b003      	add	sp, #12
 8021c32:	bd30      	pop	{r4, r5, pc}
 8021c34:	483a      	ldr	r0, [pc, #232]	; (8021d20 <sinf+0x128>)
 8021c36:	eeb0 0b46 	vmov.f64	d0, d6
 8021c3a:	2100      	movs	r1, #0
 8021c3c:	b003      	add	sp, #12
 8021c3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021c42:	f7ff bfae 	b.w	8021ba2 <sinf_poly>
 8021c46:	f240 422e 	movw	r2, #1070	; 0x42e
 8021c4a:	4293      	cmp	r3, r2
 8021c4c:	d824      	bhi.n	8021c98 <sinf+0xa0>
 8021c4e:	4b34      	ldr	r3, [pc, #208]	; (8021d20 <sinf+0x128>)
 8021c50:	ed93 7b08 	vldr	d7, [r3, #32]
 8021c54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021c58:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021c5c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8021c60:	ee17 1a90 	vmov	r1, s15
 8021c64:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8021c68:	1609      	asrs	r1, r1, #24
 8021c6a:	ee07 1a90 	vmov	s15, r1
 8021c6e:	f001 0203 	and.w	r2, r1, #3
 8021c72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021c76:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021c7a:	ed92 0b00 	vldr	d0, [r2]
 8021c7e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8021c82:	f011 0f02 	tst.w	r1, #2
 8021c86:	eea5 6b47 	vfms.f64	d6, d5, d7
 8021c8a:	bf08      	it	eq
 8021c8c:	4618      	moveq	r0, r3
 8021c8e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021c92:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021c96:	e7d1      	b.n	8021c3c <sinf+0x44>
 8021c98:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8021c9c:	d237      	bcs.n	8021d0e <sinf+0x116>
 8021c9e:	4a21      	ldr	r2, [pc, #132]	; (8021d24 <sinf+0x12c>)
 8021ca0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8021ca4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8021ca8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021cac:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8021cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021cb4:	4083      	lsls	r3, r0
 8021cb6:	6a28      	ldr	r0, [r5, #32]
 8021cb8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8021cbc:	fba3 1000 	umull	r1, r0, r3, r0
 8021cc0:	6929      	ldr	r1, [r5, #16]
 8021cc2:	435a      	muls	r2, r3
 8021cc4:	fbe3 0201 	umlal	r0, r2, r3, r1
 8021cc8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 8021ccc:	0f8d      	lsrs	r5, r1, #30
 8021cce:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8021cd2:	1a51      	subs	r1, r2, r1
 8021cd4:	f7de fce2 	bl	800069c <__aeabi_l2d>
 8021cd8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021cdc:	4b10      	ldr	r3, [pc, #64]	; (8021d20 <sinf+0x128>)
 8021cde:	f004 0203 	and.w	r2, r4, #3
 8021ce2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021ce6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8021d18 <sinf+0x120>
 8021cea:	ed92 0b00 	vldr	d0, [r2]
 8021cee:	ec41 0b16 	vmov	d6, r0, r1
 8021cf2:	f014 0f02 	tst.w	r4, #2
 8021cf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021cfa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8021cfe:	4629      	mov	r1, r5
 8021d00:	bf08      	it	eq
 8021d02:	4618      	moveq	r0, r3
 8021d04:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021d08:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021d0c:	e796      	b.n	8021c3c <sinf+0x44>
 8021d0e:	b003      	add	sp, #12
 8021d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021d14:	f7ff bf36 	b.w	8021b84 <__math_invalidf>
 8021d18:	54442d18 	.word	0x54442d18
 8021d1c:	3c1921fb 	.word	0x3c1921fb
 8021d20:	08025178 	.word	0x08025178
 8021d24:	08025118 	.word	0x08025118

08021d28 <abort>:
 8021d28:	b508      	push	{r3, lr}
 8021d2a:	2006      	movs	r0, #6
 8021d2c:	f000 fcdc 	bl	80226e8 <raise>
 8021d30:	2001      	movs	r0, #1
 8021d32:	f7df fbd1 	bl	80014d8 <_exit>
	...

08021d38 <__assert_func>:
 8021d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021d3a:	4614      	mov	r4, r2
 8021d3c:	461a      	mov	r2, r3
 8021d3e:	4b09      	ldr	r3, [pc, #36]	; (8021d64 <__assert_func+0x2c>)
 8021d40:	681b      	ldr	r3, [r3, #0]
 8021d42:	4605      	mov	r5, r0
 8021d44:	68d8      	ldr	r0, [r3, #12]
 8021d46:	b14c      	cbz	r4, 8021d5c <__assert_func+0x24>
 8021d48:	4b07      	ldr	r3, [pc, #28]	; (8021d68 <__assert_func+0x30>)
 8021d4a:	9100      	str	r1, [sp, #0]
 8021d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021d50:	4906      	ldr	r1, [pc, #24]	; (8021d6c <__assert_func+0x34>)
 8021d52:	462b      	mov	r3, r5
 8021d54:	f000 f828 	bl	8021da8 <fiprintf>
 8021d58:	f7ff ffe6 	bl	8021d28 <abort>
 8021d5c:	4b04      	ldr	r3, [pc, #16]	; (8021d70 <__assert_func+0x38>)
 8021d5e:	461c      	mov	r4, r3
 8021d60:	e7f3      	b.n	8021d4a <__assert_func+0x12>
 8021d62:	bf00      	nop
 8021d64:	240000b4 	.word	0x240000b4
 8021d68:	08025258 	.word	0x08025258
 8021d6c:	08025265 	.word	0x08025265
 8021d70:	08025293 	.word	0x08025293

08021d74 <atexit>:
 8021d74:	2300      	movs	r3, #0
 8021d76:	4601      	mov	r1, r0
 8021d78:	461a      	mov	r2, r3
 8021d7a:	4618      	mov	r0, r3
 8021d7c:	f000 bd90 	b.w	80228a0 <__register_exitproc>

08021d80 <__cxa_atexit>:
 8021d80:	b510      	push	{r4, lr}
 8021d82:	4c05      	ldr	r4, [pc, #20]	; (8021d98 <__cxa_atexit+0x18>)
 8021d84:	4613      	mov	r3, r2
 8021d86:	b12c      	cbz	r4, 8021d94 <__cxa_atexit+0x14>
 8021d88:	460a      	mov	r2, r1
 8021d8a:	4601      	mov	r1, r0
 8021d8c:	2002      	movs	r0, #2
 8021d8e:	f000 fd87 	bl	80228a0 <__register_exitproc>
 8021d92:	bd10      	pop	{r4, pc}
 8021d94:	4620      	mov	r0, r4
 8021d96:	e7fc      	b.n	8021d92 <__cxa_atexit+0x12>
 8021d98:	080228a1 	.word	0x080228a1

08021d9c <__errno>:
 8021d9c:	4b01      	ldr	r3, [pc, #4]	; (8021da4 <__errno+0x8>)
 8021d9e:	6818      	ldr	r0, [r3, #0]
 8021da0:	4770      	bx	lr
 8021da2:	bf00      	nop
 8021da4:	240000b4 	.word	0x240000b4

08021da8 <fiprintf>:
 8021da8:	b40e      	push	{r1, r2, r3}
 8021daa:	b503      	push	{r0, r1, lr}
 8021dac:	4601      	mov	r1, r0
 8021dae:	ab03      	add	r3, sp, #12
 8021db0:	4805      	ldr	r0, [pc, #20]	; (8021dc8 <fiprintf+0x20>)
 8021db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8021db6:	6800      	ldr	r0, [r0, #0]
 8021db8:	9301      	str	r3, [sp, #4]
 8021dba:	f000 f95b 	bl	8022074 <_vfiprintf_r>
 8021dbe:	b002      	add	sp, #8
 8021dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8021dc4:	b003      	add	sp, #12
 8021dc6:	4770      	bx	lr
 8021dc8:	240000b4 	.word	0x240000b4

08021dcc <__libc_init_array>:
 8021dcc:	b570      	push	{r4, r5, r6, lr}
 8021dce:	4d0d      	ldr	r5, [pc, #52]	; (8021e04 <__libc_init_array+0x38>)
 8021dd0:	4c0d      	ldr	r4, [pc, #52]	; (8021e08 <__libc_init_array+0x3c>)
 8021dd2:	1b64      	subs	r4, r4, r5
 8021dd4:	10a4      	asrs	r4, r4, #2
 8021dd6:	2600      	movs	r6, #0
 8021dd8:	42a6      	cmp	r6, r4
 8021dda:	d109      	bne.n	8021df0 <__libc_init_array+0x24>
 8021ddc:	4d0b      	ldr	r5, [pc, #44]	; (8021e0c <__libc_init_array+0x40>)
 8021dde:	4c0c      	ldr	r4, [pc, #48]	; (8021e10 <__libc_init_array+0x44>)
 8021de0:	f001 f898 	bl	8022f14 <_init>
 8021de4:	1b64      	subs	r4, r4, r5
 8021de6:	10a4      	asrs	r4, r4, #2
 8021de8:	2600      	movs	r6, #0
 8021dea:	42a6      	cmp	r6, r4
 8021dec:	d105      	bne.n	8021dfa <__libc_init_array+0x2e>
 8021dee:	bd70      	pop	{r4, r5, r6, pc}
 8021df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021df4:	4798      	blx	r3
 8021df6:	3601      	adds	r6, #1
 8021df8:	e7ee      	b.n	8021dd8 <__libc_init_array+0xc>
 8021dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8021dfe:	4798      	blx	r3
 8021e00:	3601      	adds	r6, #1
 8021e02:	e7f2      	b.n	8021dea <__libc_init_array+0x1e>
 8021e04:	08025c18 	.word	0x08025c18
 8021e08:	08025c18 	.word	0x08025c18
 8021e0c:	08025c18 	.word	0x08025c18
 8021e10:	08025c30 	.word	0x08025c30

08021e14 <malloc>:
 8021e14:	4b02      	ldr	r3, [pc, #8]	; (8021e20 <malloc+0xc>)
 8021e16:	4601      	mov	r1, r0
 8021e18:	6818      	ldr	r0, [r3, #0]
 8021e1a:	f000 b88d 	b.w	8021f38 <_malloc_r>
 8021e1e:	bf00      	nop
 8021e20:	240000b4 	.word	0x240000b4

08021e24 <free>:
 8021e24:	4b02      	ldr	r3, [pc, #8]	; (8021e30 <free+0xc>)
 8021e26:	4601      	mov	r1, r0
 8021e28:	6818      	ldr	r0, [r3, #0]
 8021e2a:	f000 b819 	b.w	8021e60 <_free_r>
 8021e2e:	bf00      	nop
 8021e30:	240000b4 	.word	0x240000b4

08021e34 <memcpy>:
 8021e34:	440a      	add	r2, r1
 8021e36:	4291      	cmp	r1, r2
 8021e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8021e3c:	d100      	bne.n	8021e40 <memcpy+0xc>
 8021e3e:	4770      	bx	lr
 8021e40:	b510      	push	{r4, lr}
 8021e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021e4a:	4291      	cmp	r1, r2
 8021e4c:	d1f9      	bne.n	8021e42 <memcpy+0xe>
 8021e4e:	bd10      	pop	{r4, pc}

08021e50 <memset>:
 8021e50:	4402      	add	r2, r0
 8021e52:	4603      	mov	r3, r0
 8021e54:	4293      	cmp	r3, r2
 8021e56:	d100      	bne.n	8021e5a <memset+0xa>
 8021e58:	4770      	bx	lr
 8021e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8021e5e:	e7f9      	b.n	8021e54 <memset+0x4>

08021e60 <_free_r>:
 8021e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e62:	2900      	cmp	r1, #0
 8021e64:	d044      	beq.n	8021ef0 <_free_r+0x90>
 8021e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e6a:	9001      	str	r0, [sp, #4]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	f1a1 0404 	sub.w	r4, r1, #4
 8021e72:	bfb8      	it	lt
 8021e74:	18e4      	addlt	r4, r4, r3
 8021e76:	f000 ff95 	bl	8022da4 <__malloc_lock>
 8021e7a:	4a1e      	ldr	r2, [pc, #120]	; (8021ef4 <_free_r+0x94>)
 8021e7c:	9801      	ldr	r0, [sp, #4]
 8021e7e:	6813      	ldr	r3, [r2, #0]
 8021e80:	b933      	cbnz	r3, 8021e90 <_free_r+0x30>
 8021e82:	6063      	str	r3, [r4, #4]
 8021e84:	6014      	str	r4, [r2, #0]
 8021e86:	b003      	add	sp, #12
 8021e88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e8c:	f000 bf90 	b.w	8022db0 <__malloc_unlock>
 8021e90:	42a3      	cmp	r3, r4
 8021e92:	d908      	bls.n	8021ea6 <_free_r+0x46>
 8021e94:	6825      	ldr	r5, [r4, #0]
 8021e96:	1961      	adds	r1, r4, r5
 8021e98:	428b      	cmp	r3, r1
 8021e9a:	bf01      	itttt	eq
 8021e9c:	6819      	ldreq	r1, [r3, #0]
 8021e9e:	685b      	ldreq	r3, [r3, #4]
 8021ea0:	1949      	addeq	r1, r1, r5
 8021ea2:	6021      	streq	r1, [r4, #0]
 8021ea4:	e7ed      	b.n	8021e82 <_free_r+0x22>
 8021ea6:	461a      	mov	r2, r3
 8021ea8:	685b      	ldr	r3, [r3, #4]
 8021eaa:	b10b      	cbz	r3, 8021eb0 <_free_r+0x50>
 8021eac:	42a3      	cmp	r3, r4
 8021eae:	d9fa      	bls.n	8021ea6 <_free_r+0x46>
 8021eb0:	6811      	ldr	r1, [r2, #0]
 8021eb2:	1855      	adds	r5, r2, r1
 8021eb4:	42a5      	cmp	r5, r4
 8021eb6:	d10b      	bne.n	8021ed0 <_free_r+0x70>
 8021eb8:	6824      	ldr	r4, [r4, #0]
 8021eba:	4421      	add	r1, r4
 8021ebc:	1854      	adds	r4, r2, r1
 8021ebe:	42a3      	cmp	r3, r4
 8021ec0:	6011      	str	r1, [r2, #0]
 8021ec2:	d1e0      	bne.n	8021e86 <_free_r+0x26>
 8021ec4:	681c      	ldr	r4, [r3, #0]
 8021ec6:	685b      	ldr	r3, [r3, #4]
 8021ec8:	6053      	str	r3, [r2, #4]
 8021eca:	4421      	add	r1, r4
 8021ecc:	6011      	str	r1, [r2, #0]
 8021ece:	e7da      	b.n	8021e86 <_free_r+0x26>
 8021ed0:	d902      	bls.n	8021ed8 <_free_r+0x78>
 8021ed2:	230c      	movs	r3, #12
 8021ed4:	6003      	str	r3, [r0, #0]
 8021ed6:	e7d6      	b.n	8021e86 <_free_r+0x26>
 8021ed8:	6825      	ldr	r5, [r4, #0]
 8021eda:	1961      	adds	r1, r4, r5
 8021edc:	428b      	cmp	r3, r1
 8021ede:	bf04      	itt	eq
 8021ee0:	6819      	ldreq	r1, [r3, #0]
 8021ee2:	685b      	ldreq	r3, [r3, #4]
 8021ee4:	6063      	str	r3, [r4, #4]
 8021ee6:	bf04      	itt	eq
 8021ee8:	1949      	addeq	r1, r1, r5
 8021eea:	6021      	streq	r1, [r4, #0]
 8021eec:	6054      	str	r4, [r2, #4]
 8021eee:	e7ca      	b.n	8021e86 <_free_r+0x26>
 8021ef0:	b003      	add	sp, #12
 8021ef2:	bd30      	pop	{r4, r5, pc}
 8021ef4:	2400eb18 	.word	0x2400eb18

08021ef8 <sbrk_aligned>:
 8021ef8:	b570      	push	{r4, r5, r6, lr}
 8021efa:	4e0e      	ldr	r6, [pc, #56]	; (8021f34 <sbrk_aligned+0x3c>)
 8021efc:	460c      	mov	r4, r1
 8021efe:	6831      	ldr	r1, [r6, #0]
 8021f00:	4605      	mov	r5, r0
 8021f02:	b911      	cbnz	r1, 8021f0a <sbrk_aligned+0x12>
 8021f04:	f000 fbb8 	bl	8022678 <_sbrk_r>
 8021f08:	6030      	str	r0, [r6, #0]
 8021f0a:	4621      	mov	r1, r4
 8021f0c:	4628      	mov	r0, r5
 8021f0e:	f000 fbb3 	bl	8022678 <_sbrk_r>
 8021f12:	1c43      	adds	r3, r0, #1
 8021f14:	d00a      	beq.n	8021f2c <sbrk_aligned+0x34>
 8021f16:	1cc4      	adds	r4, r0, #3
 8021f18:	f024 0403 	bic.w	r4, r4, #3
 8021f1c:	42a0      	cmp	r0, r4
 8021f1e:	d007      	beq.n	8021f30 <sbrk_aligned+0x38>
 8021f20:	1a21      	subs	r1, r4, r0
 8021f22:	4628      	mov	r0, r5
 8021f24:	f000 fba8 	bl	8022678 <_sbrk_r>
 8021f28:	3001      	adds	r0, #1
 8021f2a:	d101      	bne.n	8021f30 <sbrk_aligned+0x38>
 8021f2c:	f04f 34ff 	mov.w	r4, #4294967295
 8021f30:	4620      	mov	r0, r4
 8021f32:	bd70      	pop	{r4, r5, r6, pc}
 8021f34:	2400eb1c 	.word	0x2400eb1c

08021f38 <_malloc_r>:
 8021f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f3c:	1ccd      	adds	r5, r1, #3
 8021f3e:	f025 0503 	bic.w	r5, r5, #3
 8021f42:	3508      	adds	r5, #8
 8021f44:	2d0c      	cmp	r5, #12
 8021f46:	bf38      	it	cc
 8021f48:	250c      	movcc	r5, #12
 8021f4a:	2d00      	cmp	r5, #0
 8021f4c:	4607      	mov	r7, r0
 8021f4e:	db01      	blt.n	8021f54 <_malloc_r+0x1c>
 8021f50:	42a9      	cmp	r1, r5
 8021f52:	d905      	bls.n	8021f60 <_malloc_r+0x28>
 8021f54:	230c      	movs	r3, #12
 8021f56:	603b      	str	r3, [r7, #0]
 8021f58:	2600      	movs	r6, #0
 8021f5a:	4630      	mov	r0, r6
 8021f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f60:	4e2e      	ldr	r6, [pc, #184]	; (802201c <_malloc_r+0xe4>)
 8021f62:	f000 ff1f 	bl	8022da4 <__malloc_lock>
 8021f66:	6833      	ldr	r3, [r6, #0]
 8021f68:	461c      	mov	r4, r3
 8021f6a:	bb34      	cbnz	r4, 8021fba <_malloc_r+0x82>
 8021f6c:	4629      	mov	r1, r5
 8021f6e:	4638      	mov	r0, r7
 8021f70:	f7ff ffc2 	bl	8021ef8 <sbrk_aligned>
 8021f74:	1c43      	adds	r3, r0, #1
 8021f76:	4604      	mov	r4, r0
 8021f78:	d14d      	bne.n	8022016 <_malloc_r+0xde>
 8021f7a:	6834      	ldr	r4, [r6, #0]
 8021f7c:	4626      	mov	r6, r4
 8021f7e:	2e00      	cmp	r6, #0
 8021f80:	d140      	bne.n	8022004 <_malloc_r+0xcc>
 8021f82:	6823      	ldr	r3, [r4, #0]
 8021f84:	4631      	mov	r1, r6
 8021f86:	4638      	mov	r0, r7
 8021f88:	eb04 0803 	add.w	r8, r4, r3
 8021f8c:	f000 fb74 	bl	8022678 <_sbrk_r>
 8021f90:	4580      	cmp	r8, r0
 8021f92:	d13a      	bne.n	802200a <_malloc_r+0xd2>
 8021f94:	6821      	ldr	r1, [r4, #0]
 8021f96:	3503      	adds	r5, #3
 8021f98:	1a6d      	subs	r5, r5, r1
 8021f9a:	f025 0503 	bic.w	r5, r5, #3
 8021f9e:	3508      	adds	r5, #8
 8021fa0:	2d0c      	cmp	r5, #12
 8021fa2:	bf38      	it	cc
 8021fa4:	250c      	movcc	r5, #12
 8021fa6:	4629      	mov	r1, r5
 8021fa8:	4638      	mov	r0, r7
 8021faa:	f7ff ffa5 	bl	8021ef8 <sbrk_aligned>
 8021fae:	3001      	adds	r0, #1
 8021fb0:	d02b      	beq.n	802200a <_malloc_r+0xd2>
 8021fb2:	6823      	ldr	r3, [r4, #0]
 8021fb4:	442b      	add	r3, r5
 8021fb6:	6023      	str	r3, [r4, #0]
 8021fb8:	e00e      	b.n	8021fd8 <_malloc_r+0xa0>
 8021fba:	6822      	ldr	r2, [r4, #0]
 8021fbc:	1b52      	subs	r2, r2, r5
 8021fbe:	d41e      	bmi.n	8021ffe <_malloc_r+0xc6>
 8021fc0:	2a0b      	cmp	r2, #11
 8021fc2:	d916      	bls.n	8021ff2 <_malloc_r+0xba>
 8021fc4:	1961      	adds	r1, r4, r5
 8021fc6:	42a3      	cmp	r3, r4
 8021fc8:	6025      	str	r5, [r4, #0]
 8021fca:	bf18      	it	ne
 8021fcc:	6059      	strne	r1, [r3, #4]
 8021fce:	6863      	ldr	r3, [r4, #4]
 8021fd0:	bf08      	it	eq
 8021fd2:	6031      	streq	r1, [r6, #0]
 8021fd4:	5162      	str	r2, [r4, r5]
 8021fd6:	604b      	str	r3, [r1, #4]
 8021fd8:	4638      	mov	r0, r7
 8021fda:	f104 060b 	add.w	r6, r4, #11
 8021fde:	f000 fee7 	bl	8022db0 <__malloc_unlock>
 8021fe2:	f026 0607 	bic.w	r6, r6, #7
 8021fe6:	1d23      	adds	r3, r4, #4
 8021fe8:	1af2      	subs	r2, r6, r3
 8021fea:	d0b6      	beq.n	8021f5a <_malloc_r+0x22>
 8021fec:	1b9b      	subs	r3, r3, r6
 8021fee:	50a3      	str	r3, [r4, r2]
 8021ff0:	e7b3      	b.n	8021f5a <_malloc_r+0x22>
 8021ff2:	6862      	ldr	r2, [r4, #4]
 8021ff4:	42a3      	cmp	r3, r4
 8021ff6:	bf0c      	ite	eq
 8021ff8:	6032      	streq	r2, [r6, #0]
 8021ffa:	605a      	strne	r2, [r3, #4]
 8021ffc:	e7ec      	b.n	8021fd8 <_malloc_r+0xa0>
 8021ffe:	4623      	mov	r3, r4
 8022000:	6864      	ldr	r4, [r4, #4]
 8022002:	e7b2      	b.n	8021f6a <_malloc_r+0x32>
 8022004:	4634      	mov	r4, r6
 8022006:	6876      	ldr	r6, [r6, #4]
 8022008:	e7b9      	b.n	8021f7e <_malloc_r+0x46>
 802200a:	230c      	movs	r3, #12
 802200c:	603b      	str	r3, [r7, #0]
 802200e:	4638      	mov	r0, r7
 8022010:	f000 fece 	bl	8022db0 <__malloc_unlock>
 8022014:	e7a1      	b.n	8021f5a <_malloc_r+0x22>
 8022016:	6025      	str	r5, [r4, #0]
 8022018:	e7de      	b.n	8021fd8 <_malloc_r+0xa0>
 802201a:	bf00      	nop
 802201c:	2400eb18 	.word	0x2400eb18

08022020 <__sfputc_r>:
 8022020:	6893      	ldr	r3, [r2, #8]
 8022022:	3b01      	subs	r3, #1
 8022024:	2b00      	cmp	r3, #0
 8022026:	b410      	push	{r4}
 8022028:	6093      	str	r3, [r2, #8]
 802202a:	da08      	bge.n	802203e <__sfputc_r+0x1e>
 802202c:	6994      	ldr	r4, [r2, #24]
 802202e:	42a3      	cmp	r3, r4
 8022030:	db01      	blt.n	8022036 <__sfputc_r+0x16>
 8022032:	290a      	cmp	r1, #10
 8022034:	d103      	bne.n	802203e <__sfputc_r+0x1e>
 8022036:	f85d 4b04 	ldr.w	r4, [sp], #4
 802203a:	f000 bb71 	b.w	8022720 <__swbuf_r>
 802203e:	6813      	ldr	r3, [r2, #0]
 8022040:	1c58      	adds	r0, r3, #1
 8022042:	6010      	str	r0, [r2, #0]
 8022044:	7019      	strb	r1, [r3, #0]
 8022046:	4608      	mov	r0, r1
 8022048:	f85d 4b04 	ldr.w	r4, [sp], #4
 802204c:	4770      	bx	lr

0802204e <__sfputs_r>:
 802204e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022050:	4606      	mov	r6, r0
 8022052:	460f      	mov	r7, r1
 8022054:	4614      	mov	r4, r2
 8022056:	18d5      	adds	r5, r2, r3
 8022058:	42ac      	cmp	r4, r5
 802205a:	d101      	bne.n	8022060 <__sfputs_r+0x12>
 802205c:	2000      	movs	r0, #0
 802205e:	e007      	b.n	8022070 <__sfputs_r+0x22>
 8022060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022064:	463a      	mov	r2, r7
 8022066:	4630      	mov	r0, r6
 8022068:	f7ff ffda 	bl	8022020 <__sfputc_r>
 802206c:	1c43      	adds	r3, r0, #1
 802206e:	d1f3      	bne.n	8022058 <__sfputs_r+0xa>
 8022070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022074 <_vfiprintf_r>:
 8022074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022078:	460d      	mov	r5, r1
 802207a:	b09d      	sub	sp, #116	; 0x74
 802207c:	4614      	mov	r4, r2
 802207e:	4698      	mov	r8, r3
 8022080:	4606      	mov	r6, r0
 8022082:	b118      	cbz	r0, 802208c <_vfiprintf_r+0x18>
 8022084:	6983      	ldr	r3, [r0, #24]
 8022086:	b90b      	cbnz	r3, 802208c <_vfiprintf_r+0x18>
 8022088:	f000 fd86 	bl	8022b98 <__sinit>
 802208c:	4b89      	ldr	r3, [pc, #548]	; (80222b4 <_vfiprintf_r+0x240>)
 802208e:	429d      	cmp	r5, r3
 8022090:	d11b      	bne.n	80220ca <_vfiprintf_r+0x56>
 8022092:	6875      	ldr	r5, [r6, #4]
 8022094:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022096:	07d9      	lsls	r1, r3, #31
 8022098:	d405      	bmi.n	80220a6 <_vfiprintf_r+0x32>
 802209a:	89ab      	ldrh	r3, [r5, #12]
 802209c:	059a      	lsls	r2, r3, #22
 802209e:	d402      	bmi.n	80220a6 <_vfiprintf_r+0x32>
 80220a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80220a2:	f000 fe17 	bl	8022cd4 <__retarget_lock_acquire_recursive>
 80220a6:	89ab      	ldrh	r3, [r5, #12]
 80220a8:	071b      	lsls	r3, r3, #28
 80220aa:	d501      	bpl.n	80220b0 <_vfiprintf_r+0x3c>
 80220ac:	692b      	ldr	r3, [r5, #16]
 80220ae:	b9eb      	cbnz	r3, 80220ec <_vfiprintf_r+0x78>
 80220b0:	4629      	mov	r1, r5
 80220b2:	4630      	mov	r0, r6
 80220b4:	f000 fb86 	bl	80227c4 <__swsetup_r>
 80220b8:	b1c0      	cbz	r0, 80220ec <_vfiprintf_r+0x78>
 80220ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80220bc:	07dc      	lsls	r4, r3, #31
 80220be:	d50e      	bpl.n	80220de <_vfiprintf_r+0x6a>
 80220c0:	f04f 30ff 	mov.w	r0, #4294967295
 80220c4:	b01d      	add	sp, #116	; 0x74
 80220c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ca:	4b7b      	ldr	r3, [pc, #492]	; (80222b8 <_vfiprintf_r+0x244>)
 80220cc:	429d      	cmp	r5, r3
 80220ce:	d101      	bne.n	80220d4 <_vfiprintf_r+0x60>
 80220d0:	68b5      	ldr	r5, [r6, #8]
 80220d2:	e7df      	b.n	8022094 <_vfiprintf_r+0x20>
 80220d4:	4b79      	ldr	r3, [pc, #484]	; (80222bc <_vfiprintf_r+0x248>)
 80220d6:	429d      	cmp	r5, r3
 80220d8:	bf08      	it	eq
 80220da:	68f5      	ldreq	r5, [r6, #12]
 80220dc:	e7da      	b.n	8022094 <_vfiprintf_r+0x20>
 80220de:	89ab      	ldrh	r3, [r5, #12]
 80220e0:	0598      	lsls	r0, r3, #22
 80220e2:	d4ed      	bmi.n	80220c0 <_vfiprintf_r+0x4c>
 80220e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80220e6:	f000 fdf7 	bl	8022cd8 <__retarget_lock_release_recursive>
 80220ea:	e7e9      	b.n	80220c0 <_vfiprintf_r+0x4c>
 80220ec:	2300      	movs	r3, #0
 80220ee:	9309      	str	r3, [sp, #36]	; 0x24
 80220f0:	2320      	movs	r3, #32
 80220f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80220f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80220fa:	2330      	movs	r3, #48	; 0x30
 80220fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80222c0 <_vfiprintf_r+0x24c>
 8022100:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022104:	f04f 0901 	mov.w	r9, #1
 8022108:	4623      	mov	r3, r4
 802210a:	469a      	mov	sl, r3
 802210c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022110:	b10a      	cbz	r2, 8022116 <_vfiprintf_r+0xa2>
 8022112:	2a25      	cmp	r2, #37	; 0x25
 8022114:	d1f9      	bne.n	802210a <_vfiprintf_r+0x96>
 8022116:	ebba 0b04 	subs.w	fp, sl, r4
 802211a:	d00b      	beq.n	8022134 <_vfiprintf_r+0xc0>
 802211c:	465b      	mov	r3, fp
 802211e:	4622      	mov	r2, r4
 8022120:	4629      	mov	r1, r5
 8022122:	4630      	mov	r0, r6
 8022124:	f7ff ff93 	bl	802204e <__sfputs_r>
 8022128:	3001      	adds	r0, #1
 802212a:	f000 80aa 	beq.w	8022282 <_vfiprintf_r+0x20e>
 802212e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022130:	445a      	add	r2, fp
 8022132:	9209      	str	r2, [sp, #36]	; 0x24
 8022134:	f89a 3000 	ldrb.w	r3, [sl]
 8022138:	2b00      	cmp	r3, #0
 802213a:	f000 80a2 	beq.w	8022282 <_vfiprintf_r+0x20e>
 802213e:	2300      	movs	r3, #0
 8022140:	f04f 32ff 	mov.w	r2, #4294967295
 8022144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022148:	f10a 0a01 	add.w	sl, sl, #1
 802214c:	9304      	str	r3, [sp, #16]
 802214e:	9307      	str	r3, [sp, #28]
 8022150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022154:	931a      	str	r3, [sp, #104]	; 0x68
 8022156:	4654      	mov	r4, sl
 8022158:	2205      	movs	r2, #5
 802215a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802215e:	4858      	ldr	r0, [pc, #352]	; (80222c0 <_vfiprintf_r+0x24c>)
 8022160:	f7de f8be 	bl	80002e0 <memchr>
 8022164:	9a04      	ldr	r2, [sp, #16]
 8022166:	b9d8      	cbnz	r0, 80221a0 <_vfiprintf_r+0x12c>
 8022168:	06d1      	lsls	r1, r2, #27
 802216a:	bf44      	itt	mi
 802216c:	2320      	movmi	r3, #32
 802216e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022172:	0713      	lsls	r3, r2, #28
 8022174:	bf44      	itt	mi
 8022176:	232b      	movmi	r3, #43	; 0x2b
 8022178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802217c:	f89a 3000 	ldrb.w	r3, [sl]
 8022180:	2b2a      	cmp	r3, #42	; 0x2a
 8022182:	d015      	beq.n	80221b0 <_vfiprintf_r+0x13c>
 8022184:	9a07      	ldr	r2, [sp, #28]
 8022186:	4654      	mov	r4, sl
 8022188:	2000      	movs	r0, #0
 802218a:	f04f 0c0a 	mov.w	ip, #10
 802218e:	4621      	mov	r1, r4
 8022190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022194:	3b30      	subs	r3, #48	; 0x30
 8022196:	2b09      	cmp	r3, #9
 8022198:	d94e      	bls.n	8022238 <_vfiprintf_r+0x1c4>
 802219a:	b1b0      	cbz	r0, 80221ca <_vfiprintf_r+0x156>
 802219c:	9207      	str	r2, [sp, #28]
 802219e:	e014      	b.n	80221ca <_vfiprintf_r+0x156>
 80221a0:	eba0 0308 	sub.w	r3, r0, r8
 80221a4:	fa09 f303 	lsl.w	r3, r9, r3
 80221a8:	4313      	orrs	r3, r2
 80221aa:	9304      	str	r3, [sp, #16]
 80221ac:	46a2      	mov	sl, r4
 80221ae:	e7d2      	b.n	8022156 <_vfiprintf_r+0xe2>
 80221b0:	9b03      	ldr	r3, [sp, #12]
 80221b2:	1d19      	adds	r1, r3, #4
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	9103      	str	r1, [sp, #12]
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	bfbb      	ittet	lt
 80221bc:	425b      	neglt	r3, r3
 80221be:	f042 0202 	orrlt.w	r2, r2, #2
 80221c2:	9307      	strge	r3, [sp, #28]
 80221c4:	9307      	strlt	r3, [sp, #28]
 80221c6:	bfb8      	it	lt
 80221c8:	9204      	strlt	r2, [sp, #16]
 80221ca:	7823      	ldrb	r3, [r4, #0]
 80221cc:	2b2e      	cmp	r3, #46	; 0x2e
 80221ce:	d10c      	bne.n	80221ea <_vfiprintf_r+0x176>
 80221d0:	7863      	ldrb	r3, [r4, #1]
 80221d2:	2b2a      	cmp	r3, #42	; 0x2a
 80221d4:	d135      	bne.n	8022242 <_vfiprintf_r+0x1ce>
 80221d6:	9b03      	ldr	r3, [sp, #12]
 80221d8:	1d1a      	adds	r2, r3, #4
 80221da:	681b      	ldr	r3, [r3, #0]
 80221dc:	9203      	str	r2, [sp, #12]
 80221de:	2b00      	cmp	r3, #0
 80221e0:	bfb8      	it	lt
 80221e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80221e6:	3402      	adds	r4, #2
 80221e8:	9305      	str	r3, [sp, #20]
 80221ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80222d0 <_vfiprintf_r+0x25c>
 80221ee:	7821      	ldrb	r1, [r4, #0]
 80221f0:	2203      	movs	r2, #3
 80221f2:	4650      	mov	r0, sl
 80221f4:	f7de f874 	bl	80002e0 <memchr>
 80221f8:	b140      	cbz	r0, 802220c <_vfiprintf_r+0x198>
 80221fa:	2340      	movs	r3, #64	; 0x40
 80221fc:	eba0 000a 	sub.w	r0, r0, sl
 8022200:	fa03 f000 	lsl.w	r0, r3, r0
 8022204:	9b04      	ldr	r3, [sp, #16]
 8022206:	4303      	orrs	r3, r0
 8022208:	3401      	adds	r4, #1
 802220a:	9304      	str	r3, [sp, #16]
 802220c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022210:	482c      	ldr	r0, [pc, #176]	; (80222c4 <_vfiprintf_r+0x250>)
 8022212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022216:	2206      	movs	r2, #6
 8022218:	f7de f862 	bl	80002e0 <memchr>
 802221c:	2800      	cmp	r0, #0
 802221e:	d03f      	beq.n	80222a0 <_vfiprintf_r+0x22c>
 8022220:	4b29      	ldr	r3, [pc, #164]	; (80222c8 <_vfiprintf_r+0x254>)
 8022222:	bb1b      	cbnz	r3, 802226c <_vfiprintf_r+0x1f8>
 8022224:	9b03      	ldr	r3, [sp, #12]
 8022226:	3307      	adds	r3, #7
 8022228:	f023 0307 	bic.w	r3, r3, #7
 802222c:	3308      	adds	r3, #8
 802222e:	9303      	str	r3, [sp, #12]
 8022230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022232:	443b      	add	r3, r7
 8022234:	9309      	str	r3, [sp, #36]	; 0x24
 8022236:	e767      	b.n	8022108 <_vfiprintf_r+0x94>
 8022238:	fb0c 3202 	mla	r2, ip, r2, r3
 802223c:	460c      	mov	r4, r1
 802223e:	2001      	movs	r0, #1
 8022240:	e7a5      	b.n	802218e <_vfiprintf_r+0x11a>
 8022242:	2300      	movs	r3, #0
 8022244:	3401      	adds	r4, #1
 8022246:	9305      	str	r3, [sp, #20]
 8022248:	4619      	mov	r1, r3
 802224a:	f04f 0c0a 	mov.w	ip, #10
 802224e:	4620      	mov	r0, r4
 8022250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022254:	3a30      	subs	r2, #48	; 0x30
 8022256:	2a09      	cmp	r2, #9
 8022258:	d903      	bls.n	8022262 <_vfiprintf_r+0x1ee>
 802225a:	2b00      	cmp	r3, #0
 802225c:	d0c5      	beq.n	80221ea <_vfiprintf_r+0x176>
 802225e:	9105      	str	r1, [sp, #20]
 8022260:	e7c3      	b.n	80221ea <_vfiprintf_r+0x176>
 8022262:	fb0c 2101 	mla	r1, ip, r1, r2
 8022266:	4604      	mov	r4, r0
 8022268:	2301      	movs	r3, #1
 802226a:	e7f0      	b.n	802224e <_vfiprintf_r+0x1da>
 802226c:	ab03      	add	r3, sp, #12
 802226e:	9300      	str	r3, [sp, #0]
 8022270:	462a      	mov	r2, r5
 8022272:	4b16      	ldr	r3, [pc, #88]	; (80222cc <_vfiprintf_r+0x258>)
 8022274:	a904      	add	r1, sp, #16
 8022276:	4630      	mov	r0, r6
 8022278:	f3af 8000 	nop.w
 802227c:	4607      	mov	r7, r0
 802227e:	1c78      	adds	r0, r7, #1
 8022280:	d1d6      	bne.n	8022230 <_vfiprintf_r+0x1bc>
 8022282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022284:	07d9      	lsls	r1, r3, #31
 8022286:	d405      	bmi.n	8022294 <_vfiprintf_r+0x220>
 8022288:	89ab      	ldrh	r3, [r5, #12]
 802228a:	059a      	lsls	r2, r3, #22
 802228c:	d402      	bmi.n	8022294 <_vfiprintf_r+0x220>
 802228e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022290:	f000 fd22 	bl	8022cd8 <__retarget_lock_release_recursive>
 8022294:	89ab      	ldrh	r3, [r5, #12]
 8022296:	065b      	lsls	r3, r3, #25
 8022298:	f53f af12 	bmi.w	80220c0 <_vfiprintf_r+0x4c>
 802229c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802229e:	e711      	b.n	80220c4 <_vfiprintf_r+0x50>
 80222a0:	ab03      	add	r3, sp, #12
 80222a2:	9300      	str	r3, [sp, #0]
 80222a4:	462a      	mov	r2, r5
 80222a6:	4b09      	ldr	r3, [pc, #36]	; (80222cc <_vfiprintf_r+0x258>)
 80222a8:	a904      	add	r1, sp, #16
 80222aa:	4630      	mov	r0, r6
 80222ac:	f000 f880 	bl	80223b0 <_printf_i>
 80222b0:	e7e4      	b.n	802227c <_vfiprintf_r+0x208>
 80222b2:	bf00      	nop
 80222b4:	08025364 	.word	0x08025364
 80222b8:	08025384 	.word	0x08025384
 80222bc:	08025344 	.word	0x08025344
 80222c0:	08025298 	.word	0x08025298
 80222c4:	080252a2 	.word	0x080252a2
 80222c8:	00000000 	.word	0x00000000
 80222cc:	0802204f 	.word	0x0802204f
 80222d0:	0802529e 	.word	0x0802529e

080222d4 <_printf_common>:
 80222d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222d8:	4616      	mov	r6, r2
 80222da:	4699      	mov	r9, r3
 80222dc:	688a      	ldr	r2, [r1, #8]
 80222de:	690b      	ldr	r3, [r1, #16]
 80222e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80222e4:	4293      	cmp	r3, r2
 80222e6:	bfb8      	it	lt
 80222e8:	4613      	movlt	r3, r2
 80222ea:	6033      	str	r3, [r6, #0]
 80222ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80222f0:	4607      	mov	r7, r0
 80222f2:	460c      	mov	r4, r1
 80222f4:	b10a      	cbz	r2, 80222fa <_printf_common+0x26>
 80222f6:	3301      	adds	r3, #1
 80222f8:	6033      	str	r3, [r6, #0]
 80222fa:	6823      	ldr	r3, [r4, #0]
 80222fc:	0699      	lsls	r1, r3, #26
 80222fe:	bf42      	ittt	mi
 8022300:	6833      	ldrmi	r3, [r6, #0]
 8022302:	3302      	addmi	r3, #2
 8022304:	6033      	strmi	r3, [r6, #0]
 8022306:	6825      	ldr	r5, [r4, #0]
 8022308:	f015 0506 	ands.w	r5, r5, #6
 802230c:	d106      	bne.n	802231c <_printf_common+0x48>
 802230e:	f104 0a19 	add.w	sl, r4, #25
 8022312:	68e3      	ldr	r3, [r4, #12]
 8022314:	6832      	ldr	r2, [r6, #0]
 8022316:	1a9b      	subs	r3, r3, r2
 8022318:	42ab      	cmp	r3, r5
 802231a:	dc26      	bgt.n	802236a <_printf_common+0x96>
 802231c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022320:	1e13      	subs	r3, r2, #0
 8022322:	6822      	ldr	r2, [r4, #0]
 8022324:	bf18      	it	ne
 8022326:	2301      	movne	r3, #1
 8022328:	0692      	lsls	r2, r2, #26
 802232a:	d42b      	bmi.n	8022384 <_printf_common+0xb0>
 802232c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022330:	4649      	mov	r1, r9
 8022332:	4638      	mov	r0, r7
 8022334:	47c0      	blx	r8
 8022336:	3001      	adds	r0, #1
 8022338:	d01e      	beq.n	8022378 <_printf_common+0xa4>
 802233a:	6823      	ldr	r3, [r4, #0]
 802233c:	68e5      	ldr	r5, [r4, #12]
 802233e:	6832      	ldr	r2, [r6, #0]
 8022340:	f003 0306 	and.w	r3, r3, #6
 8022344:	2b04      	cmp	r3, #4
 8022346:	bf08      	it	eq
 8022348:	1aad      	subeq	r5, r5, r2
 802234a:	68a3      	ldr	r3, [r4, #8]
 802234c:	6922      	ldr	r2, [r4, #16]
 802234e:	bf0c      	ite	eq
 8022350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022354:	2500      	movne	r5, #0
 8022356:	4293      	cmp	r3, r2
 8022358:	bfc4      	itt	gt
 802235a:	1a9b      	subgt	r3, r3, r2
 802235c:	18ed      	addgt	r5, r5, r3
 802235e:	2600      	movs	r6, #0
 8022360:	341a      	adds	r4, #26
 8022362:	42b5      	cmp	r5, r6
 8022364:	d11a      	bne.n	802239c <_printf_common+0xc8>
 8022366:	2000      	movs	r0, #0
 8022368:	e008      	b.n	802237c <_printf_common+0xa8>
 802236a:	2301      	movs	r3, #1
 802236c:	4652      	mov	r2, sl
 802236e:	4649      	mov	r1, r9
 8022370:	4638      	mov	r0, r7
 8022372:	47c0      	blx	r8
 8022374:	3001      	adds	r0, #1
 8022376:	d103      	bne.n	8022380 <_printf_common+0xac>
 8022378:	f04f 30ff 	mov.w	r0, #4294967295
 802237c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022380:	3501      	adds	r5, #1
 8022382:	e7c6      	b.n	8022312 <_printf_common+0x3e>
 8022384:	18e1      	adds	r1, r4, r3
 8022386:	1c5a      	adds	r2, r3, #1
 8022388:	2030      	movs	r0, #48	; 0x30
 802238a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802238e:	4422      	add	r2, r4
 8022390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022398:	3302      	adds	r3, #2
 802239a:	e7c7      	b.n	802232c <_printf_common+0x58>
 802239c:	2301      	movs	r3, #1
 802239e:	4622      	mov	r2, r4
 80223a0:	4649      	mov	r1, r9
 80223a2:	4638      	mov	r0, r7
 80223a4:	47c0      	blx	r8
 80223a6:	3001      	adds	r0, #1
 80223a8:	d0e6      	beq.n	8022378 <_printf_common+0xa4>
 80223aa:	3601      	adds	r6, #1
 80223ac:	e7d9      	b.n	8022362 <_printf_common+0x8e>
	...

080223b0 <_printf_i>:
 80223b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80223b4:	7e0f      	ldrb	r7, [r1, #24]
 80223b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80223b8:	2f78      	cmp	r7, #120	; 0x78
 80223ba:	4691      	mov	r9, r2
 80223bc:	4680      	mov	r8, r0
 80223be:	460c      	mov	r4, r1
 80223c0:	469a      	mov	sl, r3
 80223c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80223c6:	d807      	bhi.n	80223d8 <_printf_i+0x28>
 80223c8:	2f62      	cmp	r7, #98	; 0x62
 80223ca:	d80a      	bhi.n	80223e2 <_printf_i+0x32>
 80223cc:	2f00      	cmp	r7, #0
 80223ce:	f000 80d8 	beq.w	8022582 <_printf_i+0x1d2>
 80223d2:	2f58      	cmp	r7, #88	; 0x58
 80223d4:	f000 80a3 	beq.w	802251e <_printf_i+0x16e>
 80223d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80223dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80223e0:	e03a      	b.n	8022458 <_printf_i+0xa8>
 80223e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80223e6:	2b15      	cmp	r3, #21
 80223e8:	d8f6      	bhi.n	80223d8 <_printf_i+0x28>
 80223ea:	a101      	add	r1, pc, #4	; (adr r1, 80223f0 <_printf_i+0x40>)
 80223ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80223f0:	08022449 	.word	0x08022449
 80223f4:	0802245d 	.word	0x0802245d
 80223f8:	080223d9 	.word	0x080223d9
 80223fc:	080223d9 	.word	0x080223d9
 8022400:	080223d9 	.word	0x080223d9
 8022404:	080223d9 	.word	0x080223d9
 8022408:	0802245d 	.word	0x0802245d
 802240c:	080223d9 	.word	0x080223d9
 8022410:	080223d9 	.word	0x080223d9
 8022414:	080223d9 	.word	0x080223d9
 8022418:	080223d9 	.word	0x080223d9
 802241c:	08022569 	.word	0x08022569
 8022420:	0802248d 	.word	0x0802248d
 8022424:	0802254b 	.word	0x0802254b
 8022428:	080223d9 	.word	0x080223d9
 802242c:	080223d9 	.word	0x080223d9
 8022430:	0802258b 	.word	0x0802258b
 8022434:	080223d9 	.word	0x080223d9
 8022438:	0802248d 	.word	0x0802248d
 802243c:	080223d9 	.word	0x080223d9
 8022440:	080223d9 	.word	0x080223d9
 8022444:	08022553 	.word	0x08022553
 8022448:	682b      	ldr	r3, [r5, #0]
 802244a:	1d1a      	adds	r2, r3, #4
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	602a      	str	r2, [r5, #0]
 8022450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022458:	2301      	movs	r3, #1
 802245a:	e0a3      	b.n	80225a4 <_printf_i+0x1f4>
 802245c:	6820      	ldr	r0, [r4, #0]
 802245e:	6829      	ldr	r1, [r5, #0]
 8022460:	0606      	lsls	r6, r0, #24
 8022462:	f101 0304 	add.w	r3, r1, #4
 8022466:	d50a      	bpl.n	802247e <_printf_i+0xce>
 8022468:	680e      	ldr	r6, [r1, #0]
 802246a:	602b      	str	r3, [r5, #0]
 802246c:	2e00      	cmp	r6, #0
 802246e:	da03      	bge.n	8022478 <_printf_i+0xc8>
 8022470:	232d      	movs	r3, #45	; 0x2d
 8022472:	4276      	negs	r6, r6
 8022474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022478:	485e      	ldr	r0, [pc, #376]	; (80225f4 <_printf_i+0x244>)
 802247a:	230a      	movs	r3, #10
 802247c:	e019      	b.n	80224b2 <_printf_i+0x102>
 802247e:	680e      	ldr	r6, [r1, #0]
 8022480:	602b      	str	r3, [r5, #0]
 8022482:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022486:	bf18      	it	ne
 8022488:	b236      	sxthne	r6, r6
 802248a:	e7ef      	b.n	802246c <_printf_i+0xbc>
 802248c:	682b      	ldr	r3, [r5, #0]
 802248e:	6820      	ldr	r0, [r4, #0]
 8022490:	1d19      	adds	r1, r3, #4
 8022492:	6029      	str	r1, [r5, #0]
 8022494:	0601      	lsls	r1, r0, #24
 8022496:	d501      	bpl.n	802249c <_printf_i+0xec>
 8022498:	681e      	ldr	r6, [r3, #0]
 802249a:	e002      	b.n	80224a2 <_printf_i+0xf2>
 802249c:	0646      	lsls	r6, r0, #25
 802249e:	d5fb      	bpl.n	8022498 <_printf_i+0xe8>
 80224a0:	881e      	ldrh	r6, [r3, #0]
 80224a2:	4854      	ldr	r0, [pc, #336]	; (80225f4 <_printf_i+0x244>)
 80224a4:	2f6f      	cmp	r7, #111	; 0x6f
 80224a6:	bf0c      	ite	eq
 80224a8:	2308      	moveq	r3, #8
 80224aa:	230a      	movne	r3, #10
 80224ac:	2100      	movs	r1, #0
 80224ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80224b2:	6865      	ldr	r5, [r4, #4]
 80224b4:	60a5      	str	r5, [r4, #8]
 80224b6:	2d00      	cmp	r5, #0
 80224b8:	bfa2      	ittt	ge
 80224ba:	6821      	ldrge	r1, [r4, #0]
 80224bc:	f021 0104 	bicge.w	r1, r1, #4
 80224c0:	6021      	strge	r1, [r4, #0]
 80224c2:	b90e      	cbnz	r6, 80224c8 <_printf_i+0x118>
 80224c4:	2d00      	cmp	r5, #0
 80224c6:	d04d      	beq.n	8022564 <_printf_i+0x1b4>
 80224c8:	4615      	mov	r5, r2
 80224ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80224ce:	fb03 6711 	mls	r7, r3, r1, r6
 80224d2:	5dc7      	ldrb	r7, [r0, r7]
 80224d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80224d8:	4637      	mov	r7, r6
 80224da:	42bb      	cmp	r3, r7
 80224dc:	460e      	mov	r6, r1
 80224de:	d9f4      	bls.n	80224ca <_printf_i+0x11a>
 80224e0:	2b08      	cmp	r3, #8
 80224e2:	d10b      	bne.n	80224fc <_printf_i+0x14c>
 80224e4:	6823      	ldr	r3, [r4, #0]
 80224e6:	07de      	lsls	r6, r3, #31
 80224e8:	d508      	bpl.n	80224fc <_printf_i+0x14c>
 80224ea:	6923      	ldr	r3, [r4, #16]
 80224ec:	6861      	ldr	r1, [r4, #4]
 80224ee:	4299      	cmp	r1, r3
 80224f0:	bfde      	ittt	le
 80224f2:	2330      	movle	r3, #48	; 0x30
 80224f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80224f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80224fc:	1b52      	subs	r2, r2, r5
 80224fe:	6122      	str	r2, [r4, #16]
 8022500:	f8cd a000 	str.w	sl, [sp]
 8022504:	464b      	mov	r3, r9
 8022506:	aa03      	add	r2, sp, #12
 8022508:	4621      	mov	r1, r4
 802250a:	4640      	mov	r0, r8
 802250c:	f7ff fee2 	bl	80222d4 <_printf_common>
 8022510:	3001      	adds	r0, #1
 8022512:	d14c      	bne.n	80225ae <_printf_i+0x1fe>
 8022514:	f04f 30ff 	mov.w	r0, #4294967295
 8022518:	b004      	add	sp, #16
 802251a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802251e:	4835      	ldr	r0, [pc, #212]	; (80225f4 <_printf_i+0x244>)
 8022520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022524:	6829      	ldr	r1, [r5, #0]
 8022526:	6823      	ldr	r3, [r4, #0]
 8022528:	f851 6b04 	ldr.w	r6, [r1], #4
 802252c:	6029      	str	r1, [r5, #0]
 802252e:	061d      	lsls	r5, r3, #24
 8022530:	d514      	bpl.n	802255c <_printf_i+0x1ac>
 8022532:	07df      	lsls	r7, r3, #31
 8022534:	bf44      	itt	mi
 8022536:	f043 0320 	orrmi.w	r3, r3, #32
 802253a:	6023      	strmi	r3, [r4, #0]
 802253c:	b91e      	cbnz	r6, 8022546 <_printf_i+0x196>
 802253e:	6823      	ldr	r3, [r4, #0]
 8022540:	f023 0320 	bic.w	r3, r3, #32
 8022544:	6023      	str	r3, [r4, #0]
 8022546:	2310      	movs	r3, #16
 8022548:	e7b0      	b.n	80224ac <_printf_i+0xfc>
 802254a:	6823      	ldr	r3, [r4, #0]
 802254c:	f043 0320 	orr.w	r3, r3, #32
 8022550:	6023      	str	r3, [r4, #0]
 8022552:	2378      	movs	r3, #120	; 0x78
 8022554:	4828      	ldr	r0, [pc, #160]	; (80225f8 <_printf_i+0x248>)
 8022556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802255a:	e7e3      	b.n	8022524 <_printf_i+0x174>
 802255c:	0659      	lsls	r1, r3, #25
 802255e:	bf48      	it	mi
 8022560:	b2b6      	uxthmi	r6, r6
 8022562:	e7e6      	b.n	8022532 <_printf_i+0x182>
 8022564:	4615      	mov	r5, r2
 8022566:	e7bb      	b.n	80224e0 <_printf_i+0x130>
 8022568:	682b      	ldr	r3, [r5, #0]
 802256a:	6826      	ldr	r6, [r4, #0]
 802256c:	6961      	ldr	r1, [r4, #20]
 802256e:	1d18      	adds	r0, r3, #4
 8022570:	6028      	str	r0, [r5, #0]
 8022572:	0635      	lsls	r5, r6, #24
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	d501      	bpl.n	802257c <_printf_i+0x1cc>
 8022578:	6019      	str	r1, [r3, #0]
 802257a:	e002      	b.n	8022582 <_printf_i+0x1d2>
 802257c:	0670      	lsls	r0, r6, #25
 802257e:	d5fb      	bpl.n	8022578 <_printf_i+0x1c8>
 8022580:	8019      	strh	r1, [r3, #0]
 8022582:	2300      	movs	r3, #0
 8022584:	6123      	str	r3, [r4, #16]
 8022586:	4615      	mov	r5, r2
 8022588:	e7ba      	b.n	8022500 <_printf_i+0x150>
 802258a:	682b      	ldr	r3, [r5, #0]
 802258c:	1d1a      	adds	r2, r3, #4
 802258e:	602a      	str	r2, [r5, #0]
 8022590:	681d      	ldr	r5, [r3, #0]
 8022592:	6862      	ldr	r2, [r4, #4]
 8022594:	2100      	movs	r1, #0
 8022596:	4628      	mov	r0, r5
 8022598:	f7dd fea2 	bl	80002e0 <memchr>
 802259c:	b108      	cbz	r0, 80225a2 <_printf_i+0x1f2>
 802259e:	1b40      	subs	r0, r0, r5
 80225a0:	6060      	str	r0, [r4, #4]
 80225a2:	6863      	ldr	r3, [r4, #4]
 80225a4:	6123      	str	r3, [r4, #16]
 80225a6:	2300      	movs	r3, #0
 80225a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225ac:	e7a8      	b.n	8022500 <_printf_i+0x150>
 80225ae:	6923      	ldr	r3, [r4, #16]
 80225b0:	462a      	mov	r2, r5
 80225b2:	4649      	mov	r1, r9
 80225b4:	4640      	mov	r0, r8
 80225b6:	47d0      	blx	sl
 80225b8:	3001      	adds	r0, #1
 80225ba:	d0ab      	beq.n	8022514 <_printf_i+0x164>
 80225bc:	6823      	ldr	r3, [r4, #0]
 80225be:	079b      	lsls	r3, r3, #30
 80225c0:	d413      	bmi.n	80225ea <_printf_i+0x23a>
 80225c2:	68e0      	ldr	r0, [r4, #12]
 80225c4:	9b03      	ldr	r3, [sp, #12]
 80225c6:	4298      	cmp	r0, r3
 80225c8:	bfb8      	it	lt
 80225ca:	4618      	movlt	r0, r3
 80225cc:	e7a4      	b.n	8022518 <_printf_i+0x168>
 80225ce:	2301      	movs	r3, #1
 80225d0:	4632      	mov	r2, r6
 80225d2:	4649      	mov	r1, r9
 80225d4:	4640      	mov	r0, r8
 80225d6:	47d0      	blx	sl
 80225d8:	3001      	adds	r0, #1
 80225da:	d09b      	beq.n	8022514 <_printf_i+0x164>
 80225dc:	3501      	adds	r5, #1
 80225de:	68e3      	ldr	r3, [r4, #12]
 80225e0:	9903      	ldr	r1, [sp, #12]
 80225e2:	1a5b      	subs	r3, r3, r1
 80225e4:	42ab      	cmp	r3, r5
 80225e6:	dcf2      	bgt.n	80225ce <_printf_i+0x21e>
 80225e8:	e7eb      	b.n	80225c2 <_printf_i+0x212>
 80225ea:	2500      	movs	r5, #0
 80225ec:	f104 0619 	add.w	r6, r4, #25
 80225f0:	e7f5      	b.n	80225de <_printf_i+0x22e>
 80225f2:	bf00      	nop
 80225f4:	080252a9 	.word	0x080252a9
 80225f8:	080252ba 	.word	0x080252ba

080225fc <rand>:
 80225fc:	4b16      	ldr	r3, [pc, #88]	; (8022658 <rand+0x5c>)
 80225fe:	b510      	push	{r4, lr}
 8022600:	681c      	ldr	r4, [r3, #0]
 8022602:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022604:	b9b3      	cbnz	r3, 8022634 <rand+0x38>
 8022606:	2018      	movs	r0, #24
 8022608:	f7ff fc04 	bl	8021e14 <malloc>
 802260c:	63a0      	str	r0, [r4, #56]	; 0x38
 802260e:	b928      	cbnz	r0, 802261c <rand+0x20>
 8022610:	4602      	mov	r2, r0
 8022612:	4b12      	ldr	r3, [pc, #72]	; (802265c <rand+0x60>)
 8022614:	4812      	ldr	r0, [pc, #72]	; (8022660 <rand+0x64>)
 8022616:	214e      	movs	r1, #78	; 0x4e
 8022618:	f7ff fb8e 	bl	8021d38 <__assert_func>
 802261c:	4a11      	ldr	r2, [pc, #68]	; (8022664 <rand+0x68>)
 802261e:	4b12      	ldr	r3, [pc, #72]	; (8022668 <rand+0x6c>)
 8022620:	e9c0 2300 	strd	r2, r3, [r0]
 8022624:	4b11      	ldr	r3, [pc, #68]	; (802266c <rand+0x70>)
 8022626:	6083      	str	r3, [r0, #8]
 8022628:	230b      	movs	r3, #11
 802262a:	8183      	strh	r3, [r0, #12]
 802262c:	2201      	movs	r2, #1
 802262e:	2300      	movs	r3, #0
 8022630:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022634:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022636:	4a0e      	ldr	r2, [pc, #56]	; (8022670 <rand+0x74>)
 8022638:	6920      	ldr	r0, [r4, #16]
 802263a:	6963      	ldr	r3, [r4, #20]
 802263c:	490d      	ldr	r1, [pc, #52]	; (8022674 <rand+0x78>)
 802263e:	4342      	muls	r2, r0
 8022640:	fb01 2203 	mla	r2, r1, r3, r2
 8022644:	fba0 0101 	umull	r0, r1, r0, r1
 8022648:	1c43      	adds	r3, r0, #1
 802264a:	eb42 0001 	adc.w	r0, r2, r1
 802264e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022652:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022656:	bd10      	pop	{r4, pc}
 8022658:	240000b4 	.word	0x240000b4
 802265c:	080252d0 	.word	0x080252d0
 8022660:	080252e7 	.word	0x080252e7
 8022664:	abcd330e 	.word	0xabcd330e
 8022668:	e66d1234 	.word	0xe66d1234
 802266c:	0005deec 	.word	0x0005deec
 8022670:	5851f42d 	.word	0x5851f42d
 8022674:	4c957f2d 	.word	0x4c957f2d

08022678 <_sbrk_r>:
 8022678:	b538      	push	{r3, r4, r5, lr}
 802267a:	4d06      	ldr	r5, [pc, #24]	; (8022694 <_sbrk_r+0x1c>)
 802267c:	2300      	movs	r3, #0
 802267e:	4604      	mov	r4, r0
 8022680:	4608      	mov	r0, r1
 8022682:	602b      	str	r3, [r5, #0]
 8022684:	f7de ff56 	bl	8001534 <_sbrk>
 8022688:	1c43      	adds	r3, r0, #1
 802268a:	d102      	bne.n	8022692 <_sbrk_r+0x1a>
 802268c:	682b      	ldr	r3, [r5, #0]
 802268e:	b103      	cbz	r3, 8022692 <_sbrk_r+0x1a>
 8022690:	6023      	str	r3, [r4, #0]
 8022692:	bd38      	pop	{r3, r4, r5, pc}
 8022694:	2400ecbc 	.word	0x2400ecbc

08022698 <_raise_r>:
 8022698:	291f      	cmp	r1, #31
 802269a:	b538      	push	{r3, r4, r5, lr}
 802269c:	4604      	mov	r4, r0
 802269e:	460d      	mov	r5, r1
 80226a0:	d904      	bls.n	80226ac <_raise_r+0x14>
 80226a2:	2316      	movs	r3, #22
 80226a4:	6003      	str	r3, [r0, #0]
 80226a6:	f04f 30ff 	mov.w	r0, #4294967295
 80226aa:	bd38      	pop	{r3, r4, r5, pc}
 80226ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80226ae:	b112      	cbz	r2, 80226b6 <_raise_r+0x1e>
 80226b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80226b4:	b94b      	cbnz	r3, 80226ca <_raise_r+0x32>
 80226b6:	4620      	mov	r0, r4
 80226b8:	f000 f830 	bl	802271c <_getpid_r>
 80226bc:	462a      	mov	r2, r5
 80226be:	4601      	mov	r1, r0
 80226c0:	4620      	mov	r0, r4
 80226c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226c6:	f000 b817 	b.w	80226f8 <_kill_r>
 80226ca:	2b01      	cmp	r3, #1
 80226cc:	d00a      	beq.n	80226e4 <_raise_r+0x4c>
 80226ce:	1c59      	adds	r1, r3, #1
 80226d0:	d103      	bne.n	80226da <_raise_r+0x42>
 80226d2:	2316      	movs	r3, #22
 80226d4:	6003      	str	r3, [r0, #0]
 80226d6:	2001      	movs	r0, #1
 80226d8:	e7e7      	b.n	80226aa <_raise_r+0x12>
 80226da:	2400      	movs	r4, #0
 80226dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80226e0:	4628      	mov	r0, r5
 80226e2:	4798      	blx	r3
 80226e4:	2000      	movs	r0, #0
 80226e6:	e7e0      	b.n	80226aa <_raise_r+0x12>

080226e8 <raise>:
 80226e8:	4b02      	ldr	r3, [pc, #8]	; (80226f4 <raise+0xc>)
 80226ea:	4601      	mov	r1, r0
 80226ec:	6818      	ldr	r0, [r3, #0]
 80226ee:	f7ff bfd3 	b.w	8022698 <_raise_r>
 80226f2:	bf00      	nop
 80226f4:	240000b4 	.word	0x240000b4

080226f8 <_kill_r>:
 80226f8:	b538      	push	{r3, r4, r5, lr}
 80226fa:	4d07      	ldr	r5, [pc, #28]	; (8022718 <_kill_r+0x20>)
 80226fc:	2300      	movs	r3, #0
 80226fe:	4604      	mov	r4, r0
 8022700:	4608      	mov	r0, r1
 8022702:	4611      	mov	r1, r2
 8022704:	602b      	str	r3, [r5, #0]
 8022706:	f7de fedf 	bl	80014c8 <_kill>
 802270a:	1c43      	adds	r3, r0, #1
 802270c:	d102      	bne.n	8022714 <_kill_r+0x1c>
 802270e:	682b      	ldr	r3, [r5, #0]
 8022710:	b103      	cbz	r3, 8022714 <_kill_r+0x1c>
 8022712:	6023      	str	r3, [r4, #0]
 8022714:	bd38      	pop	{r3, r4, r5, pc}
 8022716:	bf00      	nop
 8022718:	2400ecbc 	.word	0x2400ecbc

0802271c <_getpid_r>:
 802271c:	f7de bed2 	b.w	80014c4 <_getpid>

08022720 <__swbuf_r>:
 8022720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022722:	460e      	mov	r6, r1
 8022724:	4614      	mov	r4, r2
 8022726:	4605      	mov	r5, r0
 8022728:	b118      	cbz	r0, 8022732 <__swbuf_r+0x12>
 802272a:	6983      	ldr	r3, [r0, #24]
 802272c:	b90b      	cbnz	r3, 8022732 <__swbuf_r+0x12>
 802272e:	f000 fa33 	bl	8022b98 <__sinit>
 8022732:	4b21      	ldr	r3, [pc, #132]	; (80227b8 <__swbuf_r+0x98>)
 8022734:	429c      	cmp	r4, r3
 8022736:	d12b      	bne.n	8022790 <__swbuf_r+0x70>
 8022738:	686c      	ldr	r4, [r5, #4]
 802273a:	69a3      	ldr	r3, [r4, #24]
 802273c:	60a3      	str	r3, [r4, #8]
 802273e:	89a3      	ldrh	r3, [r4, #12]
 8022740:	071a      	lsls	r2, r3, #28
 8022742:	d52f      	bpl.n	80227a4 <__swbuf_r+0x84>
 8022744:	6923      	ldr	r3, [r4, #16]
 8022746:	b36b      	cbz	r3, 80227a4 <__swbuf_r+0x84>
 8022748:	6923      	ldr	r3, [r4, #16]
 802274a:	6820      	ldr	r0, [r4, #0]
 802274c:	1ac0      	subs	r0, r0, r3
 802274e:	6963      	ldr	r3, [r4, #20]
 8022750:	b2f6      	uxtb	r6, r6
 8022752:	4283      	cmp	r3, r0
 8022754:	4637      	mov	r7, r6
 8022756:	dc04      	bgt.n	8022762 <__swbuf_r+0x42>
 8022758:	4621      	mov	r1, r4
 802275a:	4628      	mov	r0, r5
 802275c:	f000 f988 	bl	8022a70 <_fflush_r>
 8022760:	bb30      	cbnz	r0, 80227b0 <__swbuf_r+0x90>
 8022762:	68a3      	ldr	r3, [r4, #8]
 8022764:	3b01      	subs	r3, #1
 8022766:	60a3      	str	r3, [r4, #8]
 8022768:	6823      	ldr	r3, [r4, #0]
 802276a:	1c5a      	adds	r2, r3, #1
 802276c:	6022      	str	r2, [r4, #0]
 802276e:	701e      	strb	r6, [r3, #0]
 8022770:	6963      	ldr	r3, [r4, #20]
 8022772:	3001      	adds	r0, #1
 8022774:	4283      	cmp	r3, r0
 8022776:	d004      	beq.n	8022782 <__swbuf_r+0x62>
 8022778:	89a3      	ldrh	r3, [r4, #12]
 802277a:	07db      	lsls	r3, r3, #31
 802277c:	d506      	bpl.n	802278c <__swbuf_r+0x6c>
 802277e:	2e0a      	cmp	r6, #10
 8022780:	d104      	bne.n	802278c <__swbuf_r+0x6c>
 8022782:	4621      	mov	r1, r4
 8022784:	4628      	mov	r0, r5
 8022786:	f000 f973 	bl	8022a70 <_fflush_r>
 802278a:	b988      	cbnz	r0, 80227b0 <__swbuf_r+0x90>
 802278c:	4638      	mov	r0, r7
 802278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022790:	4b0a      	ldr	r3, [pc, #40]	; (80227bc <__swbuf_r+0x9c>)
 8022792:	429c      	cmp	r4, r3
 8022794:	d101      	bne.n	802279a <__swbuf_r+0x7a>
 8022796:	68ac      	ldr	r4, [r5, #8]
 8022798:	e7cf      	b.n	802273a <__swbuf_r+0x1a>
 802279a:	4b09      	ldr	r3, [pc, #36]	; (80227c0 <__swbuf_r+0xa0>)
 802279c:	429c      	cmp	r4, r3
 802279e:	bf08      	it	eq
 80227a0:	68ec      	ldreq	r4, [r5, #12]
 80227a2:	e7ca      	b.n	802273a <__swbuf_r+0x1a>
 80227a4:	4621      	mov	r1, r4
 80227a6:	4628      	mov	r0, r5
 80227a8:	f000 f80c 	bl	80227c4 <__swsetup_r>
 80227ac:	2800      	cmp	r0, #0
 80227ae:	d0cb      	beq.n	8022748 <__swbuf_r+0x28>
 80227b0:	f04f 37ff 	mov.w	r7, #4294967295
 80227b4:	e7ea      	b.n	802278c <__swbuf_r+0x6c>
 80227b6:	bf00      	nop
 80227b8:	08025364 	.word	0x08025364
 80227bc:	08025384 	.word	0x08025384
 80227c0:	08025344 	.word	0x08025344

080227c4 <__swsetup_r>:
 80227c4:	4b32      	ldr	r3, [pc, #200]	; (8022890 <__swsetup_r+0xcc>)
 80227c6:	b570      	push	{r4, r5, r6, lr}
 80227c8:	681d      	ldr	r5, [r3, #0]
 80227ca:	4606      	mov	r6, r0
 80227cc:	460c      	mov	r4, r1
 80227ce:	b125      	cbz	r5, 80227da <__swsetup_r+0x16>
 80227d0:	69ab      	ldr	r3, [r5, #24]
 80227d2:	b913      	cbnz	r3, 80227da <__swsetup_r+0x16>
 80227d4:	4628      	mov	r0, r5
 80227d6:	f000 f9df 	bl	8022b98 <__sinit>
 80227da:	4b2e      	ldr	r3, [pc, #184]	; (8022894 <__swsetup_r+0xd0>)
 80227dc:	429c      	cmp	r4, r3
 80227de:	d10f      	bne.n	8022800 <__swsetup_r+0x3c>
 80227e0:	686c      	ldr	r4, [r5, #4]
 80227e2:	89a3      	ldrh	r3, [r4, #12]
 80227e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80227e8:	0719      	lsls	r1, r3, #28
 80227ea:	d42c      	bmi.n	8022846 <__swsetup_r+0x82>
 80227ec:	06dd      	lsls	r5, r3, #27
 80227ee:	d411      	bmi.n	8022814 <__swsetup_r+0x50>
 80227f0:	2309      	movs	r3, #9
 80227f2:	6033      	str	r3, [r6, #0]
 80227f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80227f8:	81a3      	strh	r3, [r4, #12]
 80227fa:	f04f 30ff 	mov.w	r0, #4294967295
 80227fe:	e03e      	b.n	802287e <__swsetup_r+0xba>
 8022800:	4b25      	ldr	r3, [pc, #148]	; (8022898 <__swsetup_r+0xd4>)
 8022802:	429c      	cmp	r4, r3
 8022804:	d101      	bne.n	802280a <__swsetup_r+0x46>
 8022806:	68ac      	ldr	r4, [r5, #8]
 8022808:	e7eb      	b.n	80227e2 <__swsetup_r+0x1e>
 802280a:	4b24      	ldr	r3, [pc, #144]	; (802289c <__swsetup_r+0xd8>)
 802280c:	429c      	cmp	r4, r3
 802280e:	bf08      	it	eq
 8022810:	68ec      	ldreq	r4, [r5, #12]
 8022812:	e7e6      	b.n	80227e2 <__swsetup_r+0x1e>
 8022814:	0758      	lsls	r0, r3, #29
 8022816:	d512      	bpl.n	802283e <__swsetup_r+0x7a>
 8022818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802281a:	b141      	cbz	r1, 802282e <__swsetup_r+0x6a>
 802281c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022820:	4299      	cmp	r1, r3
 8022822:	d002      	beq.n	802282a <__swsetup_r+0x66>
 8022824:	4630      	mov	r0, r6
 8022826:	f7ff fb1b 	bl	8021e60 <_free_r>
 802282a:	2300      	movs	r3, #0
 802282c:	6363      	str	r3, [r4, #52]	; 0x34
 802282e:	89a3      	ldrh	r3, [r4, #12]
 8022830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022834:	81a3      	strh	r3, [r4, #12]
 8022836:	2300      	movs	r3, #0
 8022838:	6063      	str	r3, [r4, #4]
 802283a:	6923      	ldr	r3, [r4, #16]
 802283c:	6023      	str	r3, [r4, #0]
 802283e:	89a3      	ldrh	r3, [r4, #12]
 8022840:	f043 0308 	orr.w	r3, r3, #8
 8022844:	81a3      	strh	r3, [r4, #12]
 8022846:	6923      	ldr	r3, [r4, #16]
 8022848:	b94b      	cbnz	r3, 802285e <__swsetup_r+0x9a>
 802284a:	89a3      	ldrh	r3, [r4, #12]
 802284c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022854:	d003      	beq.n	802285e <__swsetup_r+0x9a>
 8022856:	4621      	mov	r1, r4
 8022858:	4630      	mov	r0, r6
 802285a:	f000 fa63 	bl	8022d24 <__smakebuf_r>
 802285e:	89a0      	ldrh	r0, [r4, #12]
 8022860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022864:	f010 0301 	ands.w	r3, r0, #1
 8022868:	d00a      	beq.n	8022880 <__swsetup_r+0xbc>
 802286a:	2300      	movs	r3, #0
 802286c:	60a3      	str	r3, [r4, #8]
 802286e:	6963      	ldr	r3, [r4, #20]
 8022870:	425b      	negs	r3, r3
 8022872:	61a3      	str	r3, [r4, #24]
 8022874:	6923      	ldr	r3, [r4, #16]
 8022876:	b943      	cbnz	r3, 802288a <__swsetup_r+0xc6>
 8022878:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802287c:	d1ba      	bne.n	80227f4 <__swsetup_r+0x30>
 802287e:	bd70      	pop	{r4, r5, r6, pc}
 8022880:	0781      	lsls	r1, r0, #30
 8022882:	bf58      	it	pl
 8022884:	6963      	ldrpl	r3, [r4, #20]
 8022886:	60a3      	str	r3, [r4, #8]
 8022888:	e7f4      	b.n	8022874 <__swsetup_r+0xb0>
 802288a:	2000      	movs	r0, #0
 802288c:	e7f7      	b.n	802287e <__swsetup_r+0xba>
 802288e:	bf00      	nop
 8022890:	240000b4 	.word	0x240000b4
 8022894:	08025364 	.word	0x08025364
 8022898:	08025384 	.word	0x08025384
 802289c:	08025344 	.word	0x08025344

080228a0 <__register_exitproc>:
 80228a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80228a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8022960 <__register_exitproc+0xc0>
 80228a8:	4606      	mov	r6, r0
 80228aa:	f8d8 0000 	ldr.w	r0, [r8]
 80228ae:	461f      	mov	r7, r3
 80228b0:	460d      	mov	r5, r1
 80228b2:	4691      	mov	r9, r2
 80228b4:	f000 fa0e 	bl	8022cd4 <__retarget_lock_acquire_recursive>
 80228b8:	4b25      	ldr	r3, [pc, #148]	; (8022950 <__register_exitproc+0xb0>)
 80228ba:	681c      	ldr	r4, [r3, #0]
 80228bc:	b934      	cbnz	r4, 80228cc <__register_exitproc+0x2c>
 80228be:	4c25      	ldr	r4, [pc, #148]	; (8022954 <__register_exitproc+0xb4>)
 80228c0:	601c      	str	r4, [r3, #0]
 80228c2:	4b25      	ldr	r3, [pc, #148]	; (8022958 <__register_exitproc+0xb8>)
 80228c4:	b113      	cbz	r3, 80228cc <__register_exitproc+0x2c>
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80228cc:	6863      	ldr	r3, [r4, #4]
 80228ce:	2b1f      	cmp	r3, #31
 80228d0:	dd07      	ble.n	80228e2 <__register_exitproc+0x42>
 80228d2:	f8d8 0000 	ldr.w	r0, [r8]
 80228d6:	f000 f9ff 	bl	8022cd8 <__retarget_lock_release_recursive>
 80228da:	f04f 30ff 	mov.w	r0, #4294967295
 80228de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80228e2:	b34e      	cbz	r6, 8022938 <__register_exitproc+0x98>
 80228e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80228e8:	b988      	cbnz	r0, 802290e <__register_exitproc+0x6e>
 80228ea:	4b1c      	ldr	r3, [pc, #112]	; (802295c <__register_exitproc+0xbc>)
 80228ec:	b923      	cbnz	r3, 80228f8 <__register_exitproc+0x58>
 80228ee:	f8d8 0000 	ldr.w	r0, [r8]
 80228f2:	f000 f9f0 	bl	8022cd6 <__retarget_lock_release>
 80228f6:	e7f0      	b.n	80228da <__register_exitproc+0x3a>
 80228f8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80228fc:	f7ff fa8a 	bl	8021e14 <malloc>
 8022900:	2800      	cmp	r0, #0
 8022902:	d0f4      	beq.n	80228ee <__register_exitproc+0x4e>
 8022904:	2300      	movs	r3, #0
 8022906:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802290a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802290e:	6863      	ldr	r3, [r4, #4]
 8022910:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022914:	2201      	movs	r2, #1
 8022916:	409a      	lsls	r2, r3
 8022918:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802291c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022920:	4313      	orrs	r3, r2
 8022922:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022926:	2e02      	cmp	r6, #2
 8022928:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802292c:	bf02      	ittt	eq
 802292e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8022932:	4313      	orreq	r3, r2
 8022934:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022938:	6863      	ldr	r3, [r4, #4]
 802293a:	f8d8 0000 	ldr.w	r0, [r8]
 802293e:	1c5a      	adds	r2, r3, #1
 8022940:	3302      	adds	r3, #2
 8022942:	6062      	str	r2, [r4, #4]
 8022944:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8022948:	f000 f9c6 	bl	8022cd8 <__retarget_lock_release_recursive>
 802294c:	2000      	movs	r0, #0
 802294e:	e7c6      	b.n	80228de <__register_exitproc+0x3e>
 8022950:	2400ecb4 	.word	0x2400ecb4
 8022954:	2400ec28 	.word	0x2400ec28
 8022958:	080252cc 	.word	0x080252cc
 802295c:	08021e15 	.word	0x08021e15
 8022960:	24000118 	.word	0x24000118

08022964 <__sflush_r>:
 8022964:	898a      	ldrh	r2, [r1, #12]
 8022966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802296a:	4605      	mov	r5, r0
 802296c:	0710      	lsls	r0, r2, #28
 802296e:	460c      	mov	r4, r1
 8022970:	d458      	bmi.n	8022a24 <__sflush_r+0xc0>
 8022972:	684b      	ldr	r3, [r1, #4]
 8022974:	2b00      	cmp	r3, #0
 8022976:	dc05      	bgt.n	8022984 <__sflush_r+0x20>
 8022978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802297a:	2b00      	cmp	r3, #0
 802297c:	dc02      	bgt.n	8022984 <__sflush_r+0x20>
 802297e:	2000      	movs	r0, #0
 8022980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022986:	2e00      	cmp	r6, #0
 8022988:	d0f9      	beq.n	802297e <__sflush_r+0x1a>
 802298a:	2300      	movs	r3, #0
 802298c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022990:	682f      	ldr	r7, [r5, #0]
 8022992:	602b      	str	r3, [r5, #0]
 8022994:	d032      	beq.n	80229fc <__sflush_r+0x98>
 8022996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022998:	89a3      	ldrh	r3, [r4, #12]
 802299a:	075a      	lsls	r2, r3, #29
 802299c:	d505      	bpl.n	80229aa <__sflush_r+0x46>
 802299e:	6863      	ldr	r3, [r4, #4]
 80229a0:	1ac0      	subs	r0, r0, r3
 80229a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80229a4:	b10b      	cbz	r3, 80229aa <__sflush_r+0x46>
 80229a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80229a8:	1ac0      	subs	r0, r0, r3
 80229aa:	2300      	movs	r3, #0
 80229ac:	4602      	mov	r2, r0
 80229ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80229b0:	6a21      	ldr	r1, [r4, #32]
 80229b2:	4628      	mov	r0, r5
 80229b4:	47b0      	blx	r6
 80229b6:	1c43      	adds	r3, r0, #1
 80229b8:	89a3      	ldrh	r3, [r4, #12]
 80229ba:	d106      	bne.n	80229ca <__sflush_r+0x66>
 80229bc:	6829      	ldr	r1, [r5, #0]
 80229be:	291d      	cmp	r1, #29
 80229c0:	d82c      	bhi.n	8022a1c <__sflush_r+0xb8>
 80229c2:	4a2a      	ldr	r2, [pc, #168]	; (8022a6c <__sflush_r+0x108>)
 80229c4:	40ca      	lsrs	r2, r1
 80229c6:	07d6      	lsls	r6, r2, #31
 80229c8:	d528      	bpl.n	8022a1c <__sflush_r+0xb8>
 80229ca:	2200      	movs	r2, #0
 80229cc:	6062      	str	r2, [r4, #4]
 80229ce:	04d9      	lsls	r1, r3, #19
 80229d0:	6922      	ldr	r2, [r4, #16]
 80229d2:	6022      	str	r2, [r4, #0]
 80229d4:	d504      	bpl.n	80229e0 <__sflush_r+0x7c>
 80229d6:	1c42      	adds	r2, r0, #1
 80229d8:	d101      	bne.n	80229de <__sflush_r+0x7a>
 80229da:	682b      	ldr	r3, [r5, #0]
 80229dc:	b903      	cbnz	r3, 80229e0 <__sflush_r+0x7c>
 80229de:	6560      	str	r0, [r4, #84]	; 0x54
 80229e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80229e2:	602f      	str	r7, [r5, #0]
 80229e4:	2900      	cmp	r1, #0
 80229e6:	d0ca      	beq.n	802297e <__sflush_r+0x1a>
 80229e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80229ec:	4299      	cmp	r1, r3
 80229ee:	d002      	beq.n	80229f6 <__sflush_r+0x92>
 80229f0:	4628      	mov	r0, r5
 80229f2:	f7ff fa35 	bl	8021e60 <_free_r>
 80229f6:	2000      	movs	r0, #0
 80229f8:	6360      	str	r0, [r4, #52]	; 0x34
 80229fa:	e7c1      	b.n	8022980 <__sflush_r+0x1c>
 80229fc:	6a21      	ldr	r1, [r4, #32]
 80229fe:	2301      	movs	r3, #1
 8022a00:	4628      	mov	r0, r5
 8022a02:	47b0      	blx	r6
 8022a04:	1c41      	adds	r1, r0, #1
 8022a06:	d1c7      	bne.n	8022998 <__sflush_r+0x34>
 8022a08:	682b      	ldr	r3, [r5, #0]
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d0c4      	beq.n	8022998 <__sflush_r+0x34>
 8022a0e:	2b1d      	cmp	r3, #29
 8022a10:	d001      	beq.n	8022a16 <__sflush_r+0xb2>
 8022a12:	2b16      	cmp	r3, #22
 8022a14:	d101      	bne.n	8022a1a <__sflush_r+0xb6>
 8022a16:	602f      	str	r7, [r5, #0]
 8022a18:	e7b1      	b.n	802297e <__sflush_r+0x1a>
 8022a1a:	89a3      	ldrh	r3, [r4, #12]
 8022a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a20:	81a3      	strh	r3, [r4, #12]
 8022a22:	e7ad      	b.n	8022980 <__sflush_r+0x1c>
 8022a24:	690f      	ldr	r7, [r1, #16]
 8022a26:	2f00      	cmp	r7, #0
 8022a28:	d0a9      	beq.n	802297e <__sflush_r+0x1a>
 8022a2a:	0793      	lsls	r3, r2, #30
 8022a2c:	680e      	ldr	r6, [r1, #0]
 8022a2e:	bf08      	it	eq
 8022a30:	694b      	ldreq	r3, [r1, #20]
 8022a32:	600f      	str	r7, [r1, #0]
 8022a34:	bf18      	it	ne
 8022a36:	2300      	movne	r3, #0
 8022a38:	eba6 0807 	sub.w	r8, r6, r7
 8022a3c:	608b      	str	r3, [r1, #8]
 8022a3e:	f1b8 0f00 	cmp.w	r8, #0
 8022a42:	dd9c      	ble.n	802297e <__sflush_r+0x1a>
 8022a44:	6a21      	ldr	r1, [r4, #32]
 8022a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022a48:	4643      	mov	r3, r8
 8022a4a:	463a      	mov	r2, r7
 8022a4c:	4628      	mov	r0, r5
 8022a4e:	47b0      	blx	r6
 8022a50:	2800      	cmp	r0, #0
 8022a52:	dc06      	bgt.n	8022a62 <__sflush_r+0xfe>
 8022a54:	89a3      	ldrh	r3, [r4, #12]
 8022a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a5a:	81a3      	strh	r3, [r4, #12]
 8022a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8022a60:	e78e      	b.n	8022980 <__sflush_r+0x1c>
 8022a62:	4407      	add	r7, r0
 8022a64:	eba8 0800 	sub.w	r8, r8, r0
 8022a68:	e7e9      	b.n	8022a3e <__sflush_r+0xda>
 8022a6a:	bf00      	nop
 8022a6c:	20400001 	.word	0x20400001

08022a70 <_fflush_r>:
 8022a70:	b538      	push	{r3, r4, r5, lr}
 8022a72:	690b      	ldr	r3, [r1, #16]
 8022a74:	4605      	mov	r5, r0
 8022a76:	460c      	mov	r4, r1
 8022a78:	b913      	cbnz	r3, 8022a80 <_fflush_r+0x10>
 8022a7a:	2500      	movs	r5, #0
 8022a7c:	4628      	mov	r0, r5
 8022a7e:	bd38      	pop	{r3, r4, r5, pc}
 8022a80:	b118      	cbz	r0, 8022a8a <_fflush_r+0x1a>
 8022a82:	6983      	ldr	r3, [r0, #24]
 8022a84:	b90b      	cbnz	r3, 8022a8a <_fflush_r+0x1a>
 8022a86:	f000 f887 	bl	8022b98 <__sinit>
 8022a8a:	4b14      	ldr	r3, [pc, #80]	; (8022adc <_fflush_r+0x6c>)
 8022a8c:	429c      	cmp	r4, r3
 8022a8e:	d11b      	bne.n	8022ac8 <_fflush_r+0x58>
 8022a90:	686c      	ldr	r4, [r5, #4]
 8022a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022a96:	2b00      	cmp	r3, #0
 8022a98:	d0ef      	beq.n	8022a7a <_fflush_r+0xa>
 8022a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022a9c:	07d0      	lsls	r0, r2, #31
 8022a9e:	d404      	bmi.n	8022aaa <_fflush_r+0x3a>
 8022aa0:	0599      	lsls	r1, r3, #22
 8022aa2:	d402      	bmi.n	8022aaa <_fflush_r+0x3a>
 8022aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022aa6:	f000 f915 	bl	8022cd4 <__retarget_lock_acquire_recursive>
 8022aaa:	4628      	mov	r0, r5
 8022aac:	4621      	mov	r1, r4
 8022aae:	f7ff ff59 	bl	8022964 <__sflush_r>
 8022ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ab4:	07da      	lsls	r2, r3, #31
 8022ab6:	4605      	mov	r5, r0
 8022ab8:	d4e0      	bmi.n	8022a7c <_fflush_r+0xc>
 8022aba:	89a3      	ldrh	r3, [r4, #12]
 8022abc:	059b      	lsls	r3, r3, #22
 8022abe:	d4dd      	bmi.n	8022a7c <_fflush_r+0xc>
 8022ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ac2:	f000 f909 	bl	8022cd8 <__retarget_lock_release_recursive>
 8022ac6:	e7d9      	b.n	8022a7c <_fflush_r+0xc>
 8022ac8:	4b05      	ldr	r3, [pc, #20]	; (8022ae0 <_fflush_r+0x70>)
 8022aca:	429c      	cmp	r4, r3
 8022acc:	d101      	bne.n	8022ad2 <_fflush_r+0x62>
 8022ace:	68ac      	ldr	r4, [r5, #8]
 8022ad0:	e7df      	b.n	8022a92 <_fflush_r+0x22>
 8022ad2:	4b04      	ldr	r3, [pc, #16]	; (8022ae4 <_fflush_r+0x74>)
 8022ad4:	429c      	cmp	r4, r3
 8022ad6:	bf08      	it	eq
 8022ad8:	68ec      	ldreq	r4, [r5, #12]
 8022ada:	e7da      	b.n	8022a92 <_fflush_r+0x22>
 8022adc:	08025364 	.word	0x08025364
 8022ae0:	08025384 	.word	0x08025384
 8022ae4:	08025344 	.word	0x08025344

08022ae8 <std>:
 8022ae8:	2300      	movs	r3, #0
 8022aea:	b510      	push	{r4, lr}
 8022aec:	4604      	mov	r4, r0
 8022aee:	e9c0 3300 	strd	r3, r3, [r0]
 8022af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022af6:	6083      	str	r3, [r0, #8]
 8022af8:	8181      	strh	r1, [r0, #12]
 8022afa:	6643      	str	r3, [r0, #100]	; 0x64
 8022afc:	81c2      	strh	r2, [r0, #14]
 8022afe:	6183      	str	r3, [r0, #24]
 8022b00:	4619      	mov	r1, r3
 8022b02:	2208      	movs	r2, #8
 8022b04:	305c      	adds	r0, #92	; 0x5c
 8022b06:	f7ff f9a3 	bl	8021e50 <memset>
 8022b0a:	4b05      	ldr	r3, [pc, #20]	; (8022b20 <std+0x38>)
 8022b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8022b0e:	4b05      	ldr	r3, [pc, #20]	; (8022b24 <std+0x3c>)
 8022b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8022b12:	4b05      	ldr	r3, [pc, #20]	; (8022b28 <std+0x40>)
 8022b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022b16:	4b05      	ldr	r3, [pc, #20]	; (8022b2c <std+0x44>)
 8022b18:	6224      	str	r4, [r4, #32]
 8022b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8022b1c:	bd10      	pop	{r4, pc}
 8022b1e:	bf00      	nop
 8022b20:	08022dbd 	.word	0x08022dbd
 8022b24:	08022ddf 	.word	0x08022ddf
 8022b28:	08022e17 	.word	0x08022e17
 8022b2c:	08022e3b 	.word	0x08022e3b

08022b30 <_cleanup_r>:
 8022b30:	4901      	ldr	r1, [pc, #4]	; (8022b38 <_cleanup_r+0x8>)
 8022b32:	f000 b8af 	b.w	8022c94 <_fwalk_reent>
 8022b36:	bf00      	nop
 8022b38:	08022a71 	.word	0x08022a71

08022b3c <__sfmoreglue>:
 8022b3c:	b570      	push	{r4, r5, r6, lr}
 8022b3e:	2268      	movs	r2, #104	; 0x68
 8022b40:	1e4d      	subs	r5, r1, #1
 8022b42:	4355      	muls	r5, r2
 8022b44:	460e      	mov	r6, r1
 8022b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022b4a:	f7ff f9f5 	bl	8021f38 <_malloc_r>
 8022b4e:	4604      	mov	r4, r0
 8022b50:	b140      	cbz	r0, 8022b64 <__sfmoreglue+0x28>
 8022b52:	2100      	movs	r1, #0
 8022b54:	e9c0 1600 	strd	r1, r6, [r0]
 8022b58:	300c      	adds	r0, #12
 8022b5a:	60a0      	str	r0, [r4, #8]
 8022b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022b60:	f7ff f976 	bl	8021e50 <memset>
 8022b64:	4620      	mov	r0, r4
 8022b66:	bd70      	pop	{r4, r5, r6, pc}

08022b68 <__sfp_lock_acquire>:
 8022b68:	4801      	ldr	r0, [pc, #4]	; (8022b70 <__sfp_lock_acquire+0x8>)
 8022b6a:	f000 b8b3 	b.w	8022cd4 <__retarget_lock_acquire_recursive>
 8022b6e:	bf00      	nop
 8022b70:	2400ecba 	.word	0x2400ecba

08022b74 <__sfp_lock_release>:
 8022b74:	4801      	ldr	r0, [pc, #4]	; (8022b7c <__sfp_lock_release+0x8>)
 8022b76:	f000 b8af 	b.w	8022cd8 <__retarget_lock_release_recursive>
 8022b7a:	bf00      	nop
 8022b7c:	2400ecba 	.word	0x2400ecba

08022b80 <__sinit_lock_acquire>:
 8022b80:	4801      	ldr	r0, [pc, #4]	; (8022b88 <__sinit_lock_acquire+0x8>)
 8022b82:	f000 b8a7 	b.w	8022cd4 <__retarget_lock_acquire_recursive>
 8022b86:	bf00      	nop
 8022b88:	2400ecbb 	.word	0x2400ecbb

08022b8c <__sinit_lock_release>:
 8022b8c:	4801      	ldr	r0, [pc, #4]	; (8022b94 <__sinit_lock_release+0x8>)
 8022b8e:	f000 b8a3 	b.w	8022cd8 <__retarget_lock_release_recursive>
 8022b92:	bf00      	nop
 8022b94:	2400ecbb 	.word	0x2400ecbb

08022b98 <__sinit>:
 8022b98:	b510      	push	{r4, lr}
 8022b9a:	4604      	mov	r4, r0
 8022b9c:	f7ff fff0 	bl	8022b80 <__sinit_lock_acquire>
 8022ba0:	69a3      	ldr	r3, [r4, #24]
 8022ba2:	b11b      	cbz	r3, 8022bac <__sinit+0x14>
 8022ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ba8:	f7ff bff0 	b.w	8022b8c <__sinit_lock_release>
 8022bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8022bb2:	4b13      	ldr	r3, [pc, #76]	; (8022c00 <__sinit+0x68>)
 8022bb4:	4a13      	ldr	r2, [pc, #76]	; (8022c04 <__sinit+0x6c>)
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8022bba:	42a3      	cmp	r3, r4
 8022bbc:	bf04      	itt	eq
 8022bbe:	2301      	moveq	r3, #1
 8022bc0:	61a3      	streq	r3, [r4, #24]
 8022bc2:	4620      	mov	r0, r4
 8022bc4:	f000 f820 	bl	8022c08 <__sfp>
 8022bc8:	6060      	str	r0, [r4, #4]
 8022bca:	4620      	mov	r0, r4
 8022bcc:	f000 f81c 	bl	8022c08 <__sfp>
 8022bd0:	60a0      	str	r0, [r4, #8]
 8022bd2:	4620      	mov	r0, r4
 8022bd4:	f000 f818 	bl	8022c08 <__sfp>
 8022bd8:	2200      	movs	r2, #0
 8022bda:	60e0      	str	r0, [r4, #12]
 8022bdc:	2104      	movs	r1, #4
 8022bde:	6860      	ldr	r0, [r4, #4]
 8022be0:	f7ff ff82 	bl	8022ae8 <std>
 8022be4:	68a0      	ldr	r0, [r4, #8]
 8022be6:	2201      	movs	r2, #1
 8022be8:	2109      	movs	r1, #9
 8022bea:	f7ff ff7d 	bl	8022ae8 <std>
 8022bee:	68e0      	ldr	r0, [r4, #12]
 8022bf0:	2202      	movs	r2, #2
 8022bf2:	2112      	movs	r1, #18
 8022bf4:	f7ff ff78 	bl	8022ae8 <std>
 8022bf8:	2301      	movs	r3, #1
 8022bfa:	61a3      	str	r3, [r4, #24]
 8022bfc:	e7d2      	b.n	8022ba4 <__sinit+0xc>
 8022bfe:	bf00      	nop
 8022c00:	08025294 	.word	0x08025294
 8022c04:	08022b31 	.word	0x08022b31

08022c08 <__sfp>:
 8022c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022c0a:	4607      	mov	r7, r0
 8022c0c:	f7ff ffac 	bl	8022b68 <__sfp_lock_acquire>
 8022c10:	4b1e      	ldr	r3, [pc, #120]	; (8022c8c <__sfp+0x84>)
 8022c12:	681e      	ldr	r6, [r3, #0]
 8022c14:	69b3      	ldr	r3, [r6, #24]
 8022c16:	b913      	cbnz	r3, 8022c1e <__sfp+0x16>
 8022c18:	4630      	mov	r0, r6
 8022c1a:	f7ff ffbd 	bl	8022b98 <__sinit>
 8022c1e:	3648      	adds	r6, #72	; 0x48
 8022c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022c24:	3b01      	subs	r3, #1
 8022c26:	d503      	bpl.n	8022c30 <__sfp+0x28>
 8022c28:	6833      	ldr	r3, [r6, #0]
 8022c2a:	b30b      	cbz	r3, 8022c70 <__sfp+0x68>
 8022c2c:	6836      	ldr	r6, [r6, #0]
 8022c2e:	e7f7      	b.n	8022c20 <__sfp+0x18>
 8022c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022c34:	b9d5      	cbnz	r5, 8022c6c <__sfp+0x64>
 8022c36:	4b16      	ldr	r3, [pc, #88]	; (8022c90 <__sfp+0x88>)
 8022c38:	60e3      	str	r3, [r4, #12]
 8022c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8022c40:	f000 f847 	bl	8022cd2 <__retarget_lock_init_recursive>
 8022c44:	f7ff ff96 	bl	8022b74 <__sfp_lock_release>
 8022c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022c50:	6025      	str	r5, [r4, #0]
 8022c52:	61a5      	str	r5, [r4, #24]
 8022c54:	2208      	movs	r2, #8
 8022c56:	4629      	mov	r1, r5
 8022c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022c5c:	f7ff f8f8 	bl	8021e50 <memset>
 8022c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022c68:	4620      	mov	r0, r4
 8022c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c6c:	3468      	adds	r4, #104	; 0x68
 8022c6e:	e7d9      	b.n	8022c24 <__sfp+0x1c>
 8022c70:	2104      	movs	r1, #4
 8022c72:	4638      	mov	r0, r7
 8022c74:	f7ff ff62 	bl	8022b3c <__sfmoreglue>
 8022c78:	4604      	mov	r4, r0
 8022c7a:	6030      	str	r0, [r6, #0]
 8022c7c:	2800      	cmp	r0, #0
 8022c7e:	d1d5      	bne.n	8022c2c <__sfp+0x24>
 8022c80:	f7ff ff78 	bl	8022b74 <__sfp_lock_release>
 8022c84:	230c      	movs	r3, #12
 8022c86:	603b      	str	r3, [r7, #0]
 8022c88:	e7ee      	b.n	8022c68 <__sfp+0x60>
 8022c8a:	bf00      	nop
 8022c8c:	08025294 	.word	0x08025294
 8022c90:	ffff0001 	.word	0xffff0001

08022c94 <_fwalk_reent>:
 8022c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c98:	4606      	mov	r6, r0
 8022c9a:	4688      	mov	r8, r1
 8022c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022ca0:	2700      	movs	r7, #0
 8022ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8022caa:	d505      	bpl.n	8022cb8 <_fwalk_reent+0x24>
 8022cac:	6824      	ldr	r4, [r4, #0]
 8022cae:	2c00      	cmp	r4, #0
 8022cb0:	d1f7      	bne.n	8022ca2 <_fwalk_reent+0xe>
 8022cb2:	4638      	mov	r0, r7
 8022cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022cb8:	89ab      	ldrh	r3, [r5, #12]
 8022cba:	2b01      	cmp	r3, #1
 8022cbc:	d907      	bls.n	8022cce <_fwalk_reent+0x3a>
 8022cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022cc2:	3301      	adds	r3, #1
 8022cc4:	d003      	beq.n	8022cce <_fwalk_reent+0x3a>
 8022cc6:	4629      	mov	r1, r5
 8022cc8:	4630      	mov	r0, r6
 8022cca:	47c0      	blx	r8
 8022ccc:	4307      	orrs	r7, r0
 8022cce:	3568      	adds	r5, #104	; 0x68
 8022cd0:	e7e9      	b.n	8022ca6 <_fwalk_reent+0x12>

08022cd2 <__retarget_lock_init_recursive>:
 8022cd2:	4770      	bx	lr

08022cd4 <__retarget_lock_acquire_recursive>:
 8022cd4:	4770      	bx	lr

08022cd6 <__retarget_lock_release>:
 8022cd6:	4770      	bx	lr

08022cd8 <__retarget_lock_release_recursive>:
 8022cd8:	4770      	bx	lr

08022cda <__swhatbuf_r>:
 8022cda:	b570      	push	{r4, r5, r6, lr}
 8022cdc:	460e      	mov	r6, r1
 8022cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ce2:	2900      	cmp	r1, #0
 8022ce4:	b096      	sub	sp, #88	; 0x58
 8022ce6:	4614      	mov	r4, r2
 8022ce8:	461d      	mov	r5, r3
 8022cea:	da08      	bge.n	8022cfe <__swhatbuf_r+0x24>
 8022cec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022cf0:	2200      	movs	r2, #0
 8022cf2:	602a      	str	r2, [r5, #0]
 8022cf4:	061a      	lsls	r2, r3, #24
 8022cf6:	d410      	bmi.n	8022d1a <__swhatbuf_r+0x40>
 8022cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022cfc:	e00e      	b.n	8022d1c <__swhatbuf_r+0x42>
 8022cfe:	466a      	mov	r2, sp
 8022d00:	f000 f8c2 	bl	8022e88 <_fstat_r>
 8022d04:	2800      	cmp	r0, #0
 8022d06:	dbf1      	blt.n	8022cec <__swhatbuf_r+0x12>
 8022d08:	9a01      	ldr	r2, [sp, #4]
 8022d0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022d0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022d12:	425a      	negs	r2, r3
 8022d14:	415a      	adcs	r2, r3
 8022d16:	602a      	str	r2, [r5, #0]
 8022d18:	e7ee      	b.n	8022cf8 <__swhatbuf_r+0x1e>
 8022d1a:	2340      	movs	r3, #64	; 0x40
 8022d1c:	2000      	movs	r0, #0
 8022d1e:	6023      	str	r3, [r4, #0]
 8022d20:	b016      	add	sp, #88	; 0x58
 8022d22:	bd70      	pop	{r4, r5, r6, pc}

08022d24 <__smakebuf_r>:
 8022d24:	898b      	ldrh	r3, [r1, #12]
 8022d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022d28:	079d      	lsls	r5, r3, #30
 8022d2a:	4606      	mov	r6, r0
 8022d2c:	460c      	mov	r4, r1
 8022d2e:	d507      	bpl.n	8022d40 <__smakebuf_r+0x1c>
 8022d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022d34:	6023      	str	r3, [r4, #0]
 8022d36:	6123      	str	r3, [r4, #16]
 8022d38:	2301      	movs	r3, #1
 8022d3a:	6163      	str	r3, [r4, #20]
 8022d3c:	b002      	add	sp, #8
 8022d3e:	bd70      	pop	{r4, r5, r6, pc}
 8022d40:	ab01      	add	r3, sp, #4
 8022d42:	466a      	mov	r2, sp
 8022d44:	f7ff ffc9 	bl	8022cda <__swhatbuf_r>
 8022d48:	9900      	ldr	r1, [sp, #0]
 8022d4a:	4605      	mov	r5, r0
 8022d4c:	4630      	mov	r0, r6
 8022d4e:	f7ff f8f3 	bl	8021f38 <_malloc_r>
 8022d52:	b948      	cbnz	r0, 8022d68 <__smakebuf_r+0x44>
 8022d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d58:	059a      	lsls	r2, r3, #22
 8022d5a:	d4ef      	bmi.n	8022d3c <__smakebuf_r+0x18>
 8022d5c:	f023 0303 	bic.w	r3, r3, #3
 8022d60:	f043 0302 	orr.w	r3, r3, #2
 8022d64:	81a3      	strh	r3, [r4, #12]
 8022d66:	e7e3      	b.n	8022d30 <__smakebuf_r+0xc>
 8022d68:	4b0d      	ldr	r3, [pc, #52]	; (8022da0 <__smakebuf_r+0x7c>)
 8022d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8022d6c:	89a3      	ldrh	r3, [r4, #12]
 8022d6e:	6020      	str	r0, [r4, #0]
 8022d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022d74:	81a3      	strh	r3, [r4, #12]
 8022d76:	9b00      	ldr	r3, [sp, #0]
 8022d78:	6163      	str	r3, [r4, #20]
 8022d7a:	9b01      	ldr	r3, [sp, #4]
 8022d7c:	6120      	str	r0, [r4, #16]
 8022d7e:	b15b      	cbz	r3, 8022d98 <__smakebuf_r+0x74>
 8022d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022d84:	4630      	mov	r0, r6
 8022d86:	f000 f891 	bl	8022eac <_isatty_r>
 8022d8a:	b128      	cbz	r0, 8022d98 <__smakebuf_r+0x74>
 8022d8c:	89a3      	ldrh	r3, [r4, #12]
 8022d8e:	f023 0303 	bic.w	r3, r3, #3
 8022d92:	f043 0301 	orr.w	r3, r3, #1
 8022d96:	81a3      	strh	r3, [r4, #12]
 8022d98:	89a0      	ldrh	r0, [r4, #12]
 8022d9a:	4305      	orrs	r5, r0
 8022d9c:	81a5      	strh	r5, [r4, #12]
 8022d9e:	e7cd      	b.n	8022d3c <__smakebuf_r+0x18>
 8022da0:	08022b31 	.word	0x08022b31

08022da4 <__malloc_lock>:
 8022da4:	4801      	ldr	r0, [pc, #4]	; (8022dac <__malloc_lock+0x8>)
 8022da6:	f7ff bf95 	b.w	8022cd4 <__retarget_lock_acquire_recursive>
 8022daa:	bf00      	nop
 8022dac:	2400ecb9 	.word	0x2400ecb9

08022db0 <__malloc_unlock>:
 8022db0:	4801      	ldr	r0, [pc, #4]	; (8022db8 <__malloc_unlock+0x8>)
 8022db2:	f7ff bf91 	b.w	8022cd8 <__retarget_lock_release_recursive>
 8022db6:	bf00      	nop
 8022db8:	2400ecb9 	.word	0x2400ecb9

08022dbc <__sread>:
 8022dbc:	b510      	push	{r4, lr}
 8022dbe:	460c      	mov	r4, r1
 8022dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022dc4:	f000 f894 	bl	8022ef0 <_read_r>
 8022dc8:	2800      	cmp	r0, #0
 8022dca:	bfab      	itete	ge
 8022dcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022dce:	89a3      	ldrhlt	r3, [r4, #12]
 8022dd0:	181b      	addge	r3, r3, r0
 8022dd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022dd6:	bfac      	ite	ge
 8022dd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8022dda:	81a3      	strhlt	r3, [r4, #12]
 8022ddc:	bd10      	pop	{r4, pc}

08022dde <__swrite>:
 8022dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022de2:	461f      	mov	r7, r3
 8022de4:	898b      	ldrh	r3, [r1, #12]
 8022de6:	05db      	lsls	r3, r3, #23
 8022de8:	4605      	mov	r5, r0
 8022dea:	460c      	mov	r4, r1
 8022dec:	4616      	mov	r6, r2
 8022dee:	d505      	bpl.n	8022dfc <__swrite+0x1e>
 8022df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022df4:	2302      	movs	r3, #2
 8022df6:	2200      	movs	r2, #0
 8022df8:	f000 f868 	bl	8022ecc <_lseek_r>
 8022dfc:	89a3      	ldrh	r3, [r4, #12]
 8022dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022e06:	81a3      	strh	r3, [r4, #12]
 8022e08:	4632      	mov	r2, r6
 8022e0a:	463b      	mov	r3, r7
 8022e0c:	4628      	mov	r0, r5
 8022e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022e12:	f000 b817 	b.w	8022e44 <_write_r>

08022e16 <__sseek>:
 8022e16:	b510      	push	{r4, lr}
 8022e18:	460c      	mov	r4, r1
 8022e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e1e:	f000 f855 	bl	8022ecc <_lseek_r>
 8022e22:	1c43      	adds	r3, r0, #1
 8022e24:	89a3      	ldrh	r3, [r4, #12]
 8022e26:	bf15      	itete	ne
 8022e28:	6560      	strne	r0, [r4, #84]	; 0x54
 8022e2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022e2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022e32:	81a3      	strheq	r3, [r4, #12]
 8022e34:	bf18      	it	ne
 8022e36:	81a3      	strhne	r3, [r4, #12]
 8022e38:	bd10      	pop	{r4, pc}

08022e3a <__sclose>:
 8022e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e3e:	f000 b813 	b.w	8022e68 <_close_r>
	...

08022e44 <_write_r>:
 8022e44:	b538      	push	{r3, r4, r5, lr}
 8022e46:	4d07      	ldr	r5, [pc, #28]	; (8022e64 <_write_r+0x20>)
 8022e48:	4604      	mov	r4, r0
 8022e4a:	4608      	mov	r0, r1
 8022e4c:	4611      	mov	r1, r2
 8022e4e:	2200      	movs	r2, #0
 8022e50:	602a      	str	r2, [r5, #0]
 8022e52:	461a      	mov	r2, r3
 8022e54:	f7de fb54 	bl	8001500 <_write>
 8022e58:	1c43      	adds	r3, r0, #1
 8022e5a:	d102      	bne.n	8022e62 <_write_r+0x1e>
 8022e5c:	682b      	ldr	r3, [r5, #0]
 8022e5e:	b103      	cbz	r3, 8022e62 <_write_r+0x1e>
 8022e60:	6023      	str	r3, [r4, #0]
 8022e62:	bd38      	pop	{r3, r4, r5, pc}
 8022e64:	2400ecbc 	.word	0x2400ecbc

08022e68 <_close_r>:
 8022e68:	b538      	push	{r3, r4, r5, lr}
 8022e6a:	4d06      	ldr	r5, [pc, #24]	; (8022e84 <_close_r+0x1c>)
 8022e6c:	2300      	movs	r3, #0
 8022e6e:	4604      	mov	r4, r0
 8022e70:	4608      	mov	r0, r1
 8022e72:	602b      	str	r3, [r5, #0]
 8022e74:	f7de fb52 	bl	800151c <_close>
 8022e78:	1c43      	adds	r3, r0, #1
 8022e7a:	d102      	bne.n	8022e82 <_close_r+0x1a>
 8022e7c:	682b      	ldr	r3, [r5, #0]
 8022e7e:	b103      	cbz	r3, 8022e82 <_close_r+0x1a>
 8022e80:	6023      	str	r3, [r4, #0]
 8022e82:	bd38      	pop	{r3, r4, r5, pc}
 8022e84:	2400ecbc 	.word	0x2400ecbc

08022e88 <_fstat_r>:
 8022e88:	b538      	push	{r3, r4, r5, lr}
 8022e8a:	4d07      	ldr	r5, [pc, #28]	; (8022ea8 <_fstat_r+0x20>)
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	4604      	mov	r4, r0
 8022e90:	4608      	mov	r0, r1
 8022e92:	4611      	mov	r1, r2
 8022e94:	602b      	str	r3, [r5, #0]
 8022e96:	f7de fb44 	bl	8001522 <_fstat>
 8022e9a:	1c43      	adds	r3, r0, #1
 8022e9c:	d102      	bne.n	8022ea4 <_fstat_r+0x1c>
 8022e9e:	682b      	ldr	r3, [r5, #0]
 8022ea0:	b103      	cbz	r3, 8022ea4 <_fstat_r+0x1c>
 8022ea2:	6023      	str	r3, [r4, #0]
 8022ea4:	bd38      	pop	{r3, r4, r5, pc}
 8022ea6:	bf00      	nop
 8022ea8:	2400ecbc 	.word	0x2400ecbc

08022eac <_isatty_r>:
 8022eac:	b538      	push	{r3, r4, r5, lr}
 8022eae:	4d06      	ldr	r5, [pc, #24]	; (8022ec8 <_isatty_r+0x1c>)
 8022eb0:	2300      	movs	r3, #0
 8022eb2:	4604      	mov	r4, r0
 8022eb4:	4608      	mov	r0, r1
 8022eb6:	602b      	str	r3, [r5, #0]
 8022eb8:	f7de fb38 	bl	800152c <_isatty>
 8022ebc:	1c43      	adds	r3, r0, #1
 8022ebe:	d102      	bne.n	8022ec6 <_isatty_r+0x1a>
 8022ec0:	682b      	ldr	r3, [r5, #0]
 8022ec2:	b103      	cbz	r3, 8022ec6 <_isatty_r+0x1a>
 8022ec4:	6023      	str	r3, [r4, #0]
 8022ec6:	bd38      	pop	{r3, r4, r5, pc}
 8022ec8:	2400ecbc 	.word	0x2400ecbc

08022ecc <_lseek_r>:
 8022ecc:	b538      	push	{r3, r4, r5, lr}
 8022ece:	4d07      	ldr	r5, [pc, #28]	; (8022eec <_lseek_r+0x20>)
 8022ed0:	4604      	mov	r4, r0
 8022ed2:	4608      	mov	r0, r1
 8022ed4:	4611      	mov	r1, r2
 8022ed6:	2200      	movs	r2, #0
 8022ed8:	602a      	str	r2, [r5, #0]
 8022eda:	461a      	mov	r2, r3
 8022edc:	f7de fb28 	bl	8001530 <_lseek>
 8022ee0:	1c43      	adds	r3, r0, #1
 8022ee2:	d102      	bne.n	8022eea <_lseek_r+0x1e>
 8022ee4:	682b      	ldr	r3, [r5, #0]
 8022ee6:	b103      	cbz	r3, 8022eea <_lseek_r+0x1e>
 8022ee8:	6023      	str	r3, [r4, #0]
 8022eea:	bd38      	pop	{r3, r4, r5, pc}
 8022eec:	2400ecbc 	.word	0x2400ecbc

08022ef0 <_read_r>:
 8022ef0:	b538      	push	{r3, r4, r5, lr}
 8022ef2:	4d07      	ldr	r5, [pc, #28]	; (8022f10 <_read_r+0x20>)
 8022ef4:	4604      	mov	r4, r0
 8022ef6:	4608      	mov	r0, r1
 8022ef8:	4611      	mov	r1, r2
 8022efa:	2200      	movs	r2, #0
 8022efc:	602a      	str	r2, [r5, #0]
 8022efe:	461a      	mov	r2, r3
 8022f00:	f7de faf0 	bl	80014e4 <_read>
 8022f04:	1c43      	adds	r3, r0, #1
 8022f06:	d102      	bne.n	8022f0e <_read_r+0x1e>
 8022f08:	682b      	ldr	r3, [r5, #0]
 8022f0a:	b103      	cbz	r3, 8022f0e <_read_r+0x1e>
 8022f0c:	6023      	str	r3, [r4, #0]
 8022f0e:	bd38      	pop	{r3, r4, r5, pc}
 8022f10:	2400ecbc 	.word	0x2400ecbc

08022f14 <_init>:
 8022f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f16:	bf00      	nop
 8022f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f1a:	bc08      	pop	{r3}
 8022f1c:	469e      	mov	lr, r3
 8022f1e:	4770      	bx	lr

08022f20 <_fini>:
 8022f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f22:	bf00      	nop
 8022f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f26:	bc08      	pop	{r3}
 8022f28:	469e      	mov	lr, r3
 8022f2a:	4770      	bx	lr
